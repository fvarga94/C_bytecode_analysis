resolve_undo_clear_index	ELSE,0:DO,0:WHILE,0:CALL,2:IF,1:functions,0:FOR,0:SWITCH,0	28
0x628	              0x55	                                push rbp	       107	resolve-undo.c	FUNCTION_4
0x629	          0x4889e5	                            mov rbp, rsp	       107	resolve-undo.c	FUNCTION_4
0x62c	        0x4883ec20	                           sub rsp, 0x20	       107	resolve-undo.c	FUNCTION_4
0x630	        0x48897de8	             mov qword [rbp - 0x18], rdi	       107	resolve-undo.c	FUNCTION_4
0x634	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       108	resolve-undo.c	FUNCTION_4
0x638	        0x488b4018	            mov rax, qword [rax + 0x18] 	       108	resolve-undo.c	FUNCTION_4
0x63c	        0x488945f8	                mov qword [rbp - 8], rax	       108	resolve-undo.c	FUNCTION_4
0x640	      0x48837df800	                  cmp qword [rbp - 8], 0	       109	resolve-undo.c	FUNCTION_4	IF_1
0x645	            0x743e	                            je 0x40006c5	       109	resolve-undo.c	FUNCTION_4	IF_1
0x647	        0x488b45f8	                mov rax, qword [rbp - 8]	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x64b	      0xbe01000000	                              mov esi, 1	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x650	          0x4889c7	                            mov rdi, rax	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x653	      0xe800000000	                          call 0x4000698	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x658	        0x488b45f8	                mov rax, qword [rbp - 8]	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x65c	          0x4889c7	                            mov rdi, rax	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x65f	      0xe800000000	                          call 0x40006a4	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x664	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       113	resolve-undo.c	FUNCTION_4
0x668	    0x48c740180000	               mov qword [rax + 0x18], 0	       113	resolve-undo.c	FUNCTION_4
0x670	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       114	resolve-undo.c	FUNCTION_4
0x674	          0x8b4014	            mov eax, dword [rax + 0x14] 	       114	resolve-undo.c	FUNCTION_4
0x677	          0x83c810	                            or eax, 0x10	       114	resolve-undo.c	FUNCTION_4
0x67a	            0x89c2	                            mov edx, eax	       114	resolve-undo.c	FUNCTION_4
0x67c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       114	resolve-undo.c	FUNCTION_4
0x680	          0x895014	             mov dword [rax + 0x14], edx	       114	resolve-undo.c	FUNCTION_4
0x683	            0xeb01	                           jmp 0x40006c6	       114	resolve-undo.c	FUNCTION_4
0x685	              0x90	                                     nop	       110	resolve-undo.c	FUNCTION_4	IF_1
0x686	              0xc9	                                   leave	       115	resolve-undo.c	FUNCTION_4
0x687	              0xc3	                                     ret	       115	resolve-undo.c	FUNCTION_4
unmerge_marked_index	ELSE,0:DO,0:WHILE,0:CALL,1:IF,2:functions,0:FOR,1:SWITCH,0	39
0x8c3	              0x55	                                push rbp	       167	resolve-undo.c	FUNCTION_6
0x8c4	          0x4889e5	                            mov rbp, rsp	       167	resolve-undo.c	FUNCTION_6
0x8c7	        0x4883ec20	                           sub rsp, 0x20	       167	resolve-undo.c	FUNCTION_6
0x8cb	        0x48897de8	             mov qword [rbp - 0x18], rdi	       167	resolve-undo.c	FUNCTION_6
0x8cf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       170	resolve-undo.c	FUNCTION_6	IF_1
0x8d3	        0x488b4018	            mov rax, qword [rax + 0x18] 	       170	resolve-undo.c	FUNCTION_6	IF_1
0x8d7	          0x4885c0	                           test rax, rax	       170	resolve-undo.c	FUNCTION_6	IF_1
0x8da	            0x745c	                            je 0x4000978	       170	resolve-undo.c	FUNCTION_6	IF_1
0x8dc	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x8e3	            0xeb43	                           jmp 0x4000968	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x8e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8e9	          0x488b00	                    mov rax, qword [rax]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8ec	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8ef	          0x4863d2	                         movsxd rdx, edx	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8f2	        0x48c1e203	                              shl rdx, 3	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8f6	          0x4801d0	                            add rax, rdx	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8f9	          0x488b00	                    mov rax, qword [rax]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x8fc	        0x488945f8	                mov qword [rbp - 8], rax	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x900	        0x488b45f8	                mov rax, qword [rbp - 8]	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x904	          0x8b4038	            mov eax, dword [rax + 0x38] 	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x907	      0x2500000004	        and eax, loc.imp.add_index_entry	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x90c	            0x85c0	                           test eax, eax	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x90e	            0x7414	                            je 0x4000964	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x910	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x913	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x917	            0x89d6	                            mov esi, edx	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x919	          0x4889c7	                            mov rdi, rax	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x91c	      0xe800000000	                          call 0x4000961	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x921	          0x8945f4	              mov dword [rbp - 0xc], eax	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x924	        0x8345f401	                add dword [rbp - 0xc], 1	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x928	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x92c	          0x8b500c	              mov edx, dword [rax + 0xc]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x92f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x932	            0x39c2	                            cmp edx, eax	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x934	            0x77af	                            ja 0x4000925	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x936	            0xeb01	                           jmp 0x4000979	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x938	              0x90	                                     nop	       171	resolve-undo.c	FUNCTION_6	IF_1
0x939	              0xc9	                                   leave	       178	resolve-undo.c	FUNCTION_6
0x93a	              0xc3	                                     ret	       178	resolve-undo.c	FUNCTION_6
strbuf_addch	ELSE,0:DO,0:WHILE,0:CALL,2:IF,1:functions,0:FOR,0:SWITCH,0	33
0x41	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_11
0x42	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_11
0x45	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_11
0x49	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_11
0x4d	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_11
0x50	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x54	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x57	      0xe8afffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x5c	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x5f	            0x7511	                           jne 0x40000b2	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x61	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_11	CALL_2
0x65	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_11	CALL_2
0x6a	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_11	CALL_2
0x6d	      0xe800000000	                          call 0x40000b2	       228	strbuf.h	FUNCTION_11	CALL_2
0x72	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_11
0x76	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_11
0x7a	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_11
0x7e	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_11
0x82	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_11
0x86	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_11
0x8a	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_11
0x8e	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_11
0x91	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_11
0x94	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_11
0x96	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_11
0x9a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_11
0x9e	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_11
0xa2	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_11
0xa6	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_11
0xa9	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_11
0xac	              0x90	                                     nop	       231	strbuf.h	FUNCTION_11
0xad	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_11
0xae	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_11
unmerge_index_entry_at	ELSE,0:DO,0:WHILE,1:CALL,11:IF,8:functions,0:FOR,1:SWITCH,0	159
0x688	              0x55	                                push rbp	       118	resolve-undo.c	FUNCTION_5
0x689	          0x4889e5	                            mov rbp, rsp	       118	resolve-undo.c	FUNCTION_5
0x68c	        0x4883ec50	                           sub rsp, 0x50	       118	resolve-undo.c	FUNCTION_5
0x690	        0x48897db8	             mov qword [rbp - 0x48], rdi	       118	resolve-undo.c	FUNCTION_5
0x694	          0x8975b4	             mov dword [rbp - 0x4c], esi	       118	resolve-undo.c	FUNCTION_5
0x697	    0xc745d0000000	               mov dword [rbp - 0x30], 0	       122	resolve-undo.c	FUNCTION_5
0x69e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       125	resolve-undo.c	FUNCTION_5	IF_1
0x6a2	        0x488b4018	            mov rax, qword [rax + 0x18] 	       125	resolve-undo.c	FUNCTION_5	IF_1
0x6a6	          0x4885c0	                           test rax, rax	       125	resolve-undo.c	FUNCTION_5	IF_1
0x6a9	            0x7508	                           jne 0x40006f3	       125	resolve-undo.c	FUNCTION_5	IF_1
0x6ab	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       126	resolve-undo.c	FUNCTION_5	IF_1
0x6ae	      0xe90e020000	                           jmp 0x4000901	       126	resolve-undo.c	FUNCTION_5	IF_1
0x6b3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       128	resolve-undo.c	FUNCTION_5
0x6b7	          0x488b00	                    mov rax, qword [rax]	       128	resolve-undo.c	FUNCTION_5
0x6ba	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       128	resolve-undo.c	FUNCTION_5
0x6bd	          0x4863d2	                         movsxd rdx, edx	       128	resolve-undo.c	FUNCTION_5
0x6c0	        0x48c1e203	                              shl rdx, 3	       128	resolve-undo.c	FUNCTION_5
0x6c4	          0x4801d0	                            add rax, rdx	       128	resolve-undo.c	FUNCTION_5
0x6c7	          0x488b00	                    mov rax, qword [rax]	       128	resolve-undo.c	FUNCTION_5
0x6ca	        0x488945d8	             mov qword [rbp - 0x28], rax	       128	resolve-undo.c	FUNCTION_5
0x6ce	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6d2	          0x8b4038	            mov eax, dword [rax + 0x38] 	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6d5	      0x2500300000	                         and eax, 0x3000	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6da	          0xc1e80c	                            shr eax, 0xc	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6dd	            0x85c0	                           test eax, eax	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6df	            0x7451	                            je 0x4000772	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x6e1	            0xeb04	                           jmp 0x4000727	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6e3	        0x8345b401	               add dword [rbp - 0x4c], 1	       133	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6e7	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6eb	          0x8b500c	              mov edx, dword [rax + 0xc]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6ee	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6f1	            0x39c2	                            cmp edx, eax	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6f3	            0x7632	                           jbe 0x4000767	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x6f5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x6f9	        0x488d5058	                   lea rdx, [rax + 0x58]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x6fd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x701	          0x488b00	                    mov rax, qword [rax]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x704	          0x8b4db4	             mov ecx, dword [rbp - 0x4c]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x707	          0x4863c9	                         movsxd rcx, ecx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x70a	        0x48c1e103	                              shl rcx, 3	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x70e	          0x4801c8	                            add rax, rcx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x711	          0x488b00	                    mov rax, qword [rax]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x714	        0x4883c058	                           add rax, 0x58	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x718	          0x4889d6	                            mov rsi, rdx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x71b	          0x4889c7	                            mov rdi, rax	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x71e	      0xe800000000	                          call 0x4000763	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x723	            0x85c0	                           test eax, eax	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x725	            0x74bc	                            je 0x4000723	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x727	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       134	resolve-undo.c	FUNCTION_5	IF_2
0x72a	          0x83e801	                              sub eax, 1	       134	resolve-undo.c	FUNCTION_5	IF_2
0x72d	      0xe98f010000	                           jmp 0x4000901	       134	resolve-undo.c	FUNCTION_5	IF_2
0x732	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x736	        0x488d5058	                   lea rdx, [rax + 0x58]	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x73a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x73e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x742	          0x4889d6	                            mov rsi, rdx	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x745	          0x4889c7	                            mov rdi, rax	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x748	      0xe800000000	                          call 0x400078d	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x74d	        0x488945e0	             mov qword [rbp - 0x20], rax	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x751	      0x48837de000	               cmp qword [rbp - 0x20], 0	       137	resolve-undo.c	FUNCTION_5	IF_3
0x756	            0x7508	                           jne 0x40007a0	       137	resolve-undo.c	FUNCTION_5	IF_3
0x758	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       138	resolve-undo.c	FUNCTION_5	IF_3
0x75b	      0xe961010000	                           jmp 0x4000901	       138	resolve-undo.c	FUNCTION_5	IF_3
0x760	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       139	resolve-undo.c	FUNCTION_5
0x764	        0x488b4008	                mov rax, qword [rax + 8]	       139	resolve-undo.c	FUNCTION_5
0x768	        0x488945e8	             mov qword [rbp - 0x18], rax	       139	resolve-undo.c	FUNCTION_5
0x76c	      0x48837de800	               cmp qword [rbp - 0x18], 0	       140	resolve-undo.c	FUNCTION_5	IF_4
0x771	            0x7508	                           jne 0x40007bb	       140	resolve-undo.c	FUNCTION_5	IF_4
0x773	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       141	resolve-undo.c	FUNCTION_5	IF_4
0x776	      0xe946010000	                           jmp 0x4000901	       141	resolve-undo.c	FUNCTION_5	IF_4
0x77b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       142	resolve-undo.c	FUNCTION_5
0x77f	          0x8b4038	            mov eax, dword [rax + 0x38] 	       142	resolve-undo.c	FUNCTION_5
0x782	      0x2500000004	        and eax, loc.imp.add_index_entry	       142	resolve-undo.c	FUNCTION_5
0x787	          0x8945d4	             mov dword [rbp - 0x2c], eax	       142	resolve-undo.c	FUNCTION_5
0x78a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x78e	        0x4883c058	                           add rax, 0x58	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x792	          0x4889c7	                            mov rdi, rax	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x795	      0xe800000000	                          call 0x40007da	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x79a	        0x488945f0	             mov qword [rbp - 0x10], rax	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x79e	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x7a1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x7a5	            0x89d6	                            mov esi, edx	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x7a7	          0x4889c7	                            mov rdi, rax	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x7aa	      0xe800000000	                          call 0x40007ef	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x7af	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x7b6	      0xe9bc000000	                           jmp 0x40008b7	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x7bb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7bf	          0x8b55cc	             mov edx, dword [rbp - 0x34]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7c2	          0x4863d2	                         movsxd rdx, edx	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7c5	          0x8b0490	            mov eax, dword [rax + rdx*4]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7c8	            0x85c0	                           test eax, eax	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7ca	     0xf84a2000000	                            je 0x40008b2	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x7d0	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7d3	          0x8d4801	                      lea ecx, [rax + 1]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7d6	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7d9	          0x4863d0	                         movsxd rdx, eax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7dc	          0x4889d0	                            mov rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7df	        0x48c1e002	                              shl rax, 2	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7e3	          0x4801d0	                            add rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7e6	        0x48c1e002	                              shl rax, 2	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7ea	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7ee	          0x4801d0	                            add rax, rdx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7f1	        0x488d700c	                    lea rsi, [rax + 0xc]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7f5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7f9	          0x8b55cc	             mov edx, dword [rbp - 0x34]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7fc	          0x4863d2	                         movsxd rdx, edx	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x7ff	          0x8b0490	            mov eax, dword [rax + rdx*4]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x802	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x806	    0x41b800000000	                              mov r8d, 0	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x80c	            0x89c7	                            mov edi, eax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x80e	      0xe800000000	                          call 0x4000853	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x813	        0x488945f8	                mov qword [rbp - 8], rax	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x817	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x81b	            0x7415	                            je 0x4000872	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x81d	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x821	          0x8b4038	            mov eax, dword [rax + 0x38] 	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x824	       0xd00000004	         or eax, loc.imp.add_index_entry	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x829	            0x89c2	                            mov edx, eax	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x82b	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x82f	          0x895038	             mov dword [rax + 0x38], edx	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x832	        0x488b4df8	                mov rcx, qword [rbp - 8]	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x836	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x83a	      0xba01000000	                              mov edx, 1	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x83f	          0x4889ce	                            mov rsi, rcx	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x842	          0x4889c7	                            mov rdi, rax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x845	      0xe800000000	                          call 0x400088a	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x84a	            0x85c0	                           test eax, eax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x84c	            0x7425	                            je 0x40008b3	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x84e	    0xc745d0010000	               mov dword [rbp - 0x30], 1	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x855	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x859	          0x4889c6	                            mov rsi, rax	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x85c	      0xbf00000000	                              mov edi, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x861	      0xb800000000	                              mov eax, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x866	      0xe800000000	                          call 0x40008ab	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x86b	      0xe890f7ffff	                    call sym.const_error	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x870	            0xeb01	                           jmp 0x40008b3	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x872	              0x90	                                     nop	       148	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x873	        0x8345cc01	               add dword [rbp - 0x34], 1	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x877	        0x837dcc02	               cmp dword [rbp - 0x34], 2	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x87b	     0xf8e3affffff	                           jle 0x40007fb	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x881	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       158	resolve-undo.c	FUNCTION_5	CALL_9
0x885	          0x4889c7	                            mov rdi, rax	       158	resolve-undo.c	FUNCTION_5	CALL_9
0x888	      0xe800000000	                          call 0x40008cd	       158	resolve-undo.c	FUNCTION_5	CALL_9
0x88d	        0x837dd000	               cmp dword [rbp - 0x30], 0	       159	resolve-undo.c	FUNCTION_5	IF_8
0x891	            0x7405	                            je 0x40008d8	       159	resolve-undo.c	FUNCTION_5	IF_8
0x893	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       160	resolve-undo.c	FUNCTION_5	IF_8
0x896	            0xeb29	                           jmp 0x4000901	       160	resolve-undo.c	FUNCTION_5	IF_8
0x898	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       161	resolve-undo.c	FUNCTION_5	CALL_10
0x89c	          0x4889c7	                            mov rdi, rax	       161	resolve-undo.c	FUNCTION_5	CALL_10
0x89f	      0xe800000000	                          call 0x40008e4	       161	resolve-undo.c	FUNCTION_5	CALL_10
0x8a4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       162	resolve-undo.c	FUNCTION_5
0x8a8	    0x48c740080000	                  mov qword [rax + 8], 0	       162	resolve-undo.c	FUNCTION_5
0x8b0	          0x8b55b4	             mov edx, dword [rbp - 0x4c]	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x8b3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x8b7	            0x89d6	                            mov esi, edx	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x8b9	          0x4889c7	                            mov rdi, rax	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x8bc	      0xe800000000	                          call 0x4000901	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x8c1	              0xc9	                                   leave	       164	resolve-undo.c	FUNCTION_5
0x8c2	              0xc3	                                     ret	       164	resolve-undo.c	FUNCTION_5
resolve_undo_write	ELSE,0:DO,0:WHILE,0:CALL,0:IF,0:functions,1:FOR,0:SWITCH,0	85
0x2bc	              0x55	                                push rbp	        32	resolve-undo.c	FUNCTION_2
0x2bd	          0x4889e5	                            mov rbp, rsp	        32	resolve-undo.c	FUNCTION_2
0x2c0	        0x4883ec30	                           sub rsp, 0x30	        32	resolve-undo.c	FUNCTION_2
0x2c4	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        32	resolve-undo.c	FUNCTION_2
0x2c8	        0x488975d0	             mov qword [rbp - 0x30], rsi	        32	resolve-undo.c	FUNCTION_2
0x2cc	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2d0	          0x488b00	                    mov rax, qword [rax]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2d3	        0x488945f0	             mov qword [rbp - 0x10], rax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2d7	      0xe9e5000000	                           jmp 0x4000401	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2e0	        0x488b4008	                mov rax, qword [rax + 8]	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2e4	        0x488945f8	                mov qword [rbp - 8], rax	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x2e8	      0x48837df800	                  cmp qword [rbp - 8], 0	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x2ed	     0xf84c8000000	                            je 0x40003fb	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x2f3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x2f7	          0x488b10	                    mov rdx, qword [rax]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x2fa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x2fe	          0x4889d6	                            mov rsi, rdx	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x301	          0x4889c7	                            mov rdi, rax	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x304	      0xe8a6fdffff	                  call sym.strbuf_addstr	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x309	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x30d	      0xbe00000000	                              mov esi, 0	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x312	          0x4889c7	                            mov rdi, rax	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x315	      0xe827fdffff	                   call sym.strbuf_addch	        41	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_2
0x31a	    0xc745ec000000	               mov dword [rbp - 0x14], 0	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x321	            0xeb2c	                           jmp 0x400038f	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x323	        0x488b45f8	                mov rax, qword [rbp - 8]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x327	          0x8b55ec	             mov edx, dword [rbp - 0x14]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x32a	          0x4863d2	                         movsxd rdx, edx	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x32d	          0x8b1490	            mov edx, dword [rax + rdx*4]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x330	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x334	      0xb900000000	                              mov ecx, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x339	      0xbe00000000	                              mov esi, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x33e	          0x4889c7	                            mov rdi, rax	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x341	      0xb800000000	                              mov eax, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x346	      0xe800000000	                          call 0x400038b	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x34b	        0x8345ec01	               add dword [rbp - 0x14], 1	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x34f	        0x837dec02	               cmp dword [rbp - 0x14], 2	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x353	            0x7ece	                           jle 0x4000363	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x355	    0xc745ec000000	               mov dword [rbp - 0x14], 0	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x35c	            0xeb55	                           jmp 0x40003f3	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x35e	        0x488b45f8	                mov rax, qword [rbp - 8]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x362	          0x8b55ec	             mov edx, dword [rbp - 0x14]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x365	          0x4863d2	                         movsxd rdx, edx	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x368	          0x8b0490	            mov eax, dword [rax + rdx*4]	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x36b	            0x85c0	                           test eax, eax	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x36d	            0x743f	                            je 0x40003ee	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x36f	    0x488b05000000	            mov rax, qword [0x040003b6] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x376	        0x488b4058	            mov rax, qword [rax + 0x58] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x37a	        0x488b4810	            mov rcx, qword [rax + 0x10] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x37e	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x381	          0x4863d0	                         movsxd rdx, eax	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x384	          0x4889d0	                            mov rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x387	        0x48c1e002	                              shl rax, 2	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x38b	          0x4801d0	                            add rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x38e	        0x48c1e002	                              shl rax, 2	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x392	        0x488b55f8	                mov rdx, qword [rbp - 8]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x396	          0x4801d0	                            add rax, rdx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x399	        0x488d700c	                    lea rsi, [rax + 0xc]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x39d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x3a1	          0x4889ca	                            mov rdx, rcx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x3a4	          0x4889c7	                            mov rdi, rax	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x3a7	      0xe800000000	                          call 0x40003ec	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x3ac	            0xeb01	                           jmp 0x40003ef	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x3ae	              0x90	                                     nop	        46	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x3af	        0x8345ec01	               add dword [rbp - 0x14], 1	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x3b3	        0x837dec02	               cmp dword [rbp - 0x14], 2	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x3b7	            0x7ea5	                           jle 0x400039e	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x3b9	            0xeb01	                           jmp 0x40003fc	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x3bb	              0x90	                                     nop	        39	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x3bc	      0x488345f010	            add qword [rbp - 0x10], 0x10	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3c1	      0x48837df000	               cmp qword [rbp - 0x10], 0	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3c6	            0x7421	                            je 0x4000429	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3c8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3cc	          0x488b10	                    mov rdx, qword [rax]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3cf	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3d3	          0x8b4008	                mov eax, dword [rax + 8]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3d6	            0x89c0	                            mov eax, eax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3d8	        0x48c1e004	                              shl rax, 4	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3dc	          0x4801d0	                            add rax, rdx	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3df	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3e3	     0xf87f3feffff	                            ja 0x400031c	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x3e9	              0x90	                                     nop	        50	resolve-undo.c	FUNCTION_2
0x3ea	              0xc9	                                   leave	        50	resolve-undo.c	FUNCTION_2
0x3eb	              0xc3	                                     ret	        50	resolve-undo.c	FUNCTION_2
const_error	ELSE,0:DO,0:WHILE,0:CALL,0:IF,0:functions,0:FOR,0:SWITCH,0	5
0x0	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_24
0x1	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_24
0x4	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_24
0x9	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_24
0xa	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_24
resolve_undo_read	ELSE,0:DO,0:WHILE,1:CALL,8:IF,6:functions,0:FOR,2:SWITCH,0	150
0x3ec	              0x55	                                push rbp	        53	resolve-undo.c	FUNCTION_3
0x3ed	          0x4889e5	                            mov rbp, rsp	        53	resolve-undo.c	FUNCTION_3
0x3f0	        0x4883ec50	                           sub rsp, 0x50	        53	resolve-undo.c	FUNCTION_3
0x3f4	        0x48897db8	             mov qword [rbp - 0x48], rdi	        53	resolve-undo.c	FUNCTION_3
0x3f8	        0x488975b0	             mov qword [rbp - 0x50], rsi	        53	resolve-undo.c	FUNCTION_3
0x3fc	    0x64488b042528	                mov rax, qword fs:[0x28]	        53	resolve-undo.c	FUNCTION_3
0x405	        0x488945f8	                mov qword [rbp - 8], rax	        53	resolve-undo.c	FUNCTION_3
0x409	            0x31c0	                            xor eax, eax	        53	resolve-undo.c	FUNCTION_3
0x40b	    0x488b05000000	            mov rax, qword [0x04000452] 	        58	resolve-undo.c	FUNCTION_3
0x412	        0x488b4058	            mov rax, qword [rax + 0x58] 	        58	resolve-undo.c	FUNCTION_3
0x416	        0x488b4010	            mov rax, qword [rax + 0x10] 	        58	resolve-undo.c	FUNCTION_3
0x41a	          0x8945cc	             mov dword [rbp - 0x34], eax	        58	resolve-undo.c	FUNCTION_3
0x41d	      0xbe20000000	                           mov esi, 0x20	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x422	      0xbf01000000	                              mov edi, 1	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x427	      0xe800000000	                          call 0x400046c	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x42c	        0x488945d8	             mov qword [rbp - 0x28], rax	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x430	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        61	resolve-undo.c	FUNCTION_3
0x434	         0xfb65010	           movzx edx, byte [rax + 0x10] 	        61	resolve-undo.c	FUNCTION_3
0x438	          0x83ca01	                               or edx, 1	        61	resolve-undo.c	FUNCTION_3
0x43b	          0x885010	               mov byte [rax + 0x10], dl	        61	resolve-undo.c	FUNCTION_3
0x43e	      0xe98d010000	                           jmp 0x4000610	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x443	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x447	          0x4889c7	                            mov rdi, rax	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x44a	      0xe800000000	                          call 0x400048f	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x44f	        0x4883c001	                              add rax, 1	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x453	        0x488945e0	             mov qword [rbp - 0x20], rax	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x457	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x45b	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x45f	     0xf867c010000	                           jbe 0x4000621	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x465	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x469	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x46d	          0x4889d6	                            mov rsi, rdx	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x470	          0x4889c7	                            mov rdi, rax	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x473	      0xe800000000	                          call 0x40004b8	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x478	        0x488945e8	             mov qword [rbp - 0x18], rax	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x47c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x480	        0x488b4008	                mov rax, qword [rax + 8]	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x484	          0x4885c0	                           test rax, rax	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x487	            0x751a	                           jne 0x40004e3	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x489	      0xbe48000000	                           mov esi, 0x48	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x48e	      0xbf01000000	                              mov edi, 1	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x493	      0xe800000000	                          call 0x40004d8	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x498	          0x4889c2	                            mov rdx, rax	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x49b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x49f	        0x48895008	                mov qword [rax + 8], rdx	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x4a3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x4a7	        0x488b4008	                mov rax, qword [rax + 8]	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x4ab	        0x488945f0	             mov qword [rbp - 0x10], rax	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x4af	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        74	resolve-undo.c	FUNCTION_3	WHILE_1
0x4b3	        0x482945b0	             sub qword [rbp - 0x50], rax	        74	resolve-undo.c	FUNCTION_3	WHILE_1
0x4b7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x4bb	        0x480145b8	            add qword [rbp - 0x48], rax 	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x4bf	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4c6	      0xe98c000000	                           jmp 0x4000597	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4cb	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4cf	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4d3	      0xba08000000	                              mov edx, 8	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4d8	          0x4889ce	                            mov rsi, rcx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4db	          0x4889c7	                            mov rdi, rax	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4de	      0xe800000000	                          call 0x4000523	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4e3	            0x89c1	                            mov ecx, eax	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4e5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4e9	          0x8b55c8	             mov edx, dword [rbp - 0x38]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4ec	          0x4863d2	                         movsxd rdx, edx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4ef	          0x890c90	            mov dword [rax + rdx*4], ecx	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x4f2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4f6	          0x4885c0	                           test rax, rax	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4f9	     0xf84e9000000	                            je 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4ff	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x503	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x507	     0xf84db000000	                            je 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x50d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x511	           0xfb600	                   movzx eax, byte [rax]	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x514	            0x84c0	                             test al, al	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x516	     0xf85cc000000	                           jne 0x4000628	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x51c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x520	        0x4883c001	                              add rax, 1	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x524	          0x4889c2	                            mov rdx, rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x527	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x52b	          0x4829c2	                            sub rdx, rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x52e	          0x4889d0	                            mov rax, rdx	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x531	        0x488945e0	             mov qword [rbp - 0x20], rax	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x535	        0x488b45b0	             mov rax, qword [rbp - 0x50]	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x539	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x53d	     0xf86a1000000	                           jbe 0x4000624	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x543	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x547	        0x482945b0	             sub qword [rbp - 0x50], rax	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x54b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        85	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x54f	        0x480145b8	            add qword [rbp - 0x48], rax 	        85	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x553	        0x8345c801	               add dword [rbp - 0x38], 1	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x557	        0x837dc802	               cmp dword [rbp - 0x38], 2	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x55b	     0xf8e6affffff	                           jle 0x400050b	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x561	    0xc745c8000000	               mov dword [rbp - 0x38], 0	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x568	            0xeb60	                           jmp 0x400060a	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x56a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x56e	          0x8b55c8	             mov edx, dword [rbp - 0x38]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x571	          0x4863d2	                         movsxd rdx, edx	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x574	          0x8b0490	            mov eax, dword [rax + rdx*4]	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x577	            0x85c0	                           test eax, eax	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x579	            0x744a	                            je 0x4000605	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x57b	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x57e	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x582	            0x7763	                            ja 0x4000627	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x584	          0x8b4dcc	             mov ecx, dword [rbp - 0x34]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x587	          0x8b45c8	             mov eax, dword [rbp - 0x38]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x58a	          0x4863d0	                         movsxd rdx, eax	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x58d	          0x4889d0	                            mov rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x590	        0x48c1e002	                              shl rax, 2	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x594	          0x4801d0	                            add rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x597	        0x48c1e002	                              shl rax, 2	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x59b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x59f	          0x4801d0	                            add rax, rdx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5a2	        0x488d780c	                    lea rdi, [rax + 0xc]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5a6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5aa	          0x4889ca	                            mov rdx, rcx	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5ad	          0x4889c6	                            mov rsi, rax	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5b0	      0xe800000000	                          call 0x40005f5	        93	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	CALL_6
0x5b5	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        94	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5b8	        0x482945b0	             sub qword [rbp - 0x50], rax	        94	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5bc	          0x8b45cc	             mov eax, dword [rbp - 0x34]	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5bf	        0x480145b8	            add qword [rbp - 0x48], rax 	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5c3	            0xeb01	                           jmp 0x4000606	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5c5	              0x90	                                     nop	        90	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x5c6	        0x8345c801	               add dword [rbp - 0x38], 1	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5ca	        0x837dc802	               cmp dword [rbp - 0x38], 2	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5ce	            0x7e9a	                           jle 0x40005aa	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x5d0	      0x48837db000	               cmp qword [rbp - 0x50], 0	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x5d5	     0xf8568feffff	                           jne 0x4000483	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x5db	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        98	resolve-undo.c	FUNCTION_3
0x5df	            0xeb31	                           jmp 0x4000652	        98	resolve-undo.c	FUNCTION_3
0x5e1	              0x90	                                     nop	        69	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x5e2	            0xeb04	                           jmp 0x4000628	        69	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x5e4	              0x90	                                     nop	        83	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x5e5	            0xeb01	                           jmp 0x4000628	        83	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x5e7	              0x90	                                     nop	        92	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x5e8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x5ec	      0xbe01000000	                              mov esi, 1	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x5f1	          0x4889c7	                            mov rdi, rax	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x5f4	      0xe800000000	                          call 0x4000639	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x5f9	      0xbf00000000	                              mov edi, 0	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x5fe	      0xb800000000	                              mov eax, 0	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x603	      0xe800000000	                          call 0x4000648	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x608	      0xe8f3f9ffff	                    call sym.const_error	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x60d	      0xb800000000	                              mov eax, 0	       103	resolve-undo.c	FUNCTION_3
0x612	        0x488b4df8	                mov rcx, qword [rbp - 8]	       104	resolve-undo.c	FUNCTION_3
0x616	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       104	resolve-undo.c	FUNCTION_3
0x61f	            0x7405	                            je 0x4000666	       104	resolve-undo.c	FUNCTION_3
0x621	      0xe800000000	                          call 0x4000666	       104	resolve-undo.c	FUNCTION_3
0x626	              0xc9	                                   leave	       104	resolve-undo.c	FUNCTION_3
0x627	              0xc3	                                     ret	       104	resolve-undo.c	FUNCTION_3
strbuf_addstr	ELSE,0:DO,0:WHILE,0:CALL,2:IF,0:functions,0:FOR,0:SWITCH,0	17
0xaf	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_12
0xb0	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_12
0xb3	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_12
0xb7	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_12
0xbb	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_12
0xbf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_12	CALL_2
0xc3	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_12	CALL_2
0xc6	      0xe800000000	                          call 0x400010b	       279	strbuf.h	FUNCTION_12	CALL_2
0xcb	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_12	CALL_2
0xce	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_12	CALL_2
0xd2	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_12	CALL_2
0xd6	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_12	CALL_2
0xd9	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_12	CALL_2
0xdc	      0xe800000000	                          call 0x4000121	       279	strbuf.h	FUNCTION_12	CALL_2
0xe1	              0x90	                                     nop	       280	strbuf.h	FUNCTION_12
0xe2	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_12
0xe3	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_12
unmerge_index	ELSE,0:DO,0:WHILE,0:CALL,2:IF,2:functions,0:FOR,1:SWITCH,0	45
0x93b	              0x55	                                push rbp	       181	resolve-undo.c	FUNCTION_7
0x93c	          0x4889e5	                            mov rbp, rsp	       181	resolve-undo.c	FUNCTION_7
0x93f	        0x4883ec20	                           sub rsp, 0x20	       181	resolve-undo.c	FUNCTION_7
0x943	        0x48897de8	             mov qword [rbp - 0x18], rdi	       181	resolve-undo.c	FUNCTION_7
0x947	        0x488975e0	             mov qword [rbp - 0x20], rsi	       181	resolve-undo.c	FUNCTION_7
0x94b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       184	resolve-undo.c	FUNCTION_7	IF_1
0x94f	        0x488b4018	            mov rax, qword [rax + 0x18] 	       184	resolve-undo.c	FUNCTION_7	IF_1
0x953	          0x4885c0	                           test rax, rax	       184	resolve-undo.c	FUNCTION_7	IF_1
0x956	            0x746b	                            je 0x4000a03	       184	resolve-undo.c	FUNCTION_7	IF_1
0x958	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x95f	            0xeb52	                           jmp 0x40009f3	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x961	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x965	          0x488b00	                    mov rax, qword [rax]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x968	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x96b	          0x4863d2	                         movsxd rdx, edx	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x96e	        0x48c1e203	                              shl rdx, 3	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x972	          0x4801d0	                            add rax, rdx	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x975	          0x488b00	                    mov rax, qword [rax]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x978	        0x488945f8	                mov qword [rbp - 8], rax	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x97c	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x980	        0x488b45f8	                mov rax, qword [rbp - 8]	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x984	      0xba00000000	                              mov edx, 0	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x989	          0x4889ce	                            mov rsi, rcx	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x98c	          0x4889c7	                            mov rdi, rax	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x98f	      0xe8a1f7ffff	                  call sym.ce_path_match	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x994	            0x85c0	                           test eax, eax	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x996	            0x7416	                            je 0x40009ee	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x998	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x99b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x99f	            0x89d6	                            mov esi, edx	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x9a1	          0x4889c7	                            mov rdi, rax	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x9a4	      0xe800000000	                          call 0x40009e9	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x9a9	          0x8945f4	              mov dword [rbp - 0xc], eax	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x9ac	            0xeb01	                           jmp 0x40009ef	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x9ae	              0x90	                                     nop	       190	resolve-undo.c	FUNCTION_7	FOR_1	IF_2
0x9af	        0x8345f401	                add dword [rbp - 0xc], 1	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9b7	          0x8b500c	              mov edx, dword [rax + 0xc]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9ba	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9bd	            0x39c2	                            cmp edx, eax	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9bf	            0x77a0	                            ja 0x40009a1	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9c1	            0xeb01	                           jmp 0x4000a04	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x9c3	              0x90	                                     nop	       185	resolve-undo.c	FUNCTION_7	IF_1
0x9c4	              0xc9	                                   leave	       193	resolve-undo.c	FUNCTION_7
0x9c5	              0xc3	                                     ret	       193	resolve-undo.c	FUNCTION_7
strbuf_avail	ELSE,0:DO,0:WHILE,0:CALL,0:IF,0:functions,0:FOR,0:SWITCH,0	18
0xb	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_9
0xc	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_9
0xf	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_9
0x13	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_9
0x17	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_9
0x1a	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_9
0x1d	            0x741b	                            je 0x400007a	       141	strbuf.h	FUNCTION_9
0x1f	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_9
0x23	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_9
0x26	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_9
0x2a	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_9
0x2e	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_9
0x31	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_9
0x34	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_9
0x38	            0xeb05	                           jmp 0x400007f	       141	strbuf.h	FUNCTION_9
0x3a	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_9
0x3f	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_9
0x40	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_9
record_resolve_undo	ELSE,0:DO,0:WHILE,0:CALL,5:IF,3:functions,0:FOR,0:SWITCH,0	76
0x1ab	              0x55	                                push rbp	         8	resolve-undo.c	FUNCTION_1
0x1ac	          0x4889e5	                            mov rbp, rsp	         8	resolve-undo.c	FUNCTION_1
0x1af	        0x4883ec30	                           sub rsp, 0x30	         8	resolve-undo.c	FUNCTION_1
0x1b3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	         8	resolve-undo.c	FUNCTION_1
0x1b7	        0x488975d0	             mov qword [rbp - 0x30], rsi	         8	resolve-undo.c	FUNCTION_1
0x1bb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x1bf	          0x8b4038	            mov eax, dword [rax + 0x38] 	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x1c2	      0x2500300000	                         and eax, 0x3000	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x1c7	          0xc1e80c	                            shr eax, 0xc	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x1ca	          0x8945e4	             mov dword [rbp - 0x1c], eax	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x1cd	        0x837de400	               cmp dword [rbp - 0x1c], 0	        14	resolve-undo.c	FUNCTION_1	IF_1
0x1d1	     0xf84e2000000	                            je 0x40002f9	        14	resolve-undo.c	FUNCTION_1	IF_1
0x1d7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        17	resolve-undo.c	FUNCTION_1	IF_2
0x1db	        0x488b4018	            mov rax, qword [rax + 0x18] 	        17	resolve-undo.c	FUNCTION_1	IF_2
0x1df	          0x4885c0	                           test rax, rax	        17	resolve-undo.c	FUNCTION_1	IF_2
0x1e2	            0x752d	                           jne 0x4000251	        17	resolve-undo.c	FUNCTION_1	IF_2
0x1e4	      0xbe20000000	                           mov esi, 0x20	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x1e9	      0xbf01000000	                              mov edi, 1	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x1ee	      0xe800000000	                          call 0x4000233	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x1f3	        0x488945e8	             mov qword [rbp - 0x18], rax	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x1f7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        19	resolve-undo.c	FUNCTION_1	IF_2
0x1fb	         0xfb65010	           movzx edx, byte [rax + 0x10] 	        19	resolve-undo.c	FUNCTION_1	IF_2
0x1ff	          0x83ca01	                               or edx, 1	        19	resolve-undo.c	FUNCTION_1	IF_2
0x202	          0x885010	               mov byte [rax + 0x10], dl	        19	resolve-undo.c	FUNCTION_1	IF_2
0x205	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        20	resolve-undo.c	FUNCTION_1	IF_2
0x209	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        20	resolve-undo.c	FUNCTION_1	IF_2
0x20d	        0x48895018	             mov qword [rax + 0x18], rdx	        20	resolve-undo.c	FUNCTION_1	IF_2
0x211	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        22	resolve-undo.c	FUNCTION_1
0x215	        0x488b4018	            mov rax, qword [rax + 0x18] 	        22	resolve-undo.c	FUNCTION_1
0x219	        0x488945e8	             mov qword [rbp - 0x18], rax	        22	resolve-undo.c	FUNCTION_1
0x21d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x221	        0x488d5058	                   lea rdx, [rax + 0x58]	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x225	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x229	          0x4889d6	                            mov rsi, rdx	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x22c	          0x4889c7	                            mov rdi, rax	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x22f	      0xe800000000	                          call 0x4000274	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x234	        0x488945f0	             mov qword [rbp - 0x10], rax	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x238	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        24	resolve-undo.c	FUNCTION_1	IF_3
0x23c	        0x488b4008	                mov rax, qword [rax + 8]	        24	resolve-undo.c	FUNCTION_1	IF_3
0x240	          0x4885c0	                           test rax, rax	        24	resolve-undo.c	FUNCTION_1	IF_3
0x243	            0x751a	                           jne 0x400029f	        24	resolve-undo.c	FUNCTION_1	IF_3
0x245	      0xbe48000000	                           mov esi, 0x48	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x24a	      0xbf01000000	                              mov edi, 1	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x24f	      0xe800000000	                          call 0x4000294	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x254	          0x4889c2	                            mov rdx, rax	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x257	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x25b	        0x48895008	                mov qword [rax + 8], rdx	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x25f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        26	resolve-undo.c	FUNCTION_1
0x263	        0x488b4008	                mov rax, qword [rax + 8]	        26	resolve-undo.c	FUNCTION_1
0x267	        0x488945f8	                mov qword [rbp - 8], rax	        26	resolve-undo.c	FUNCTION_1
0x26b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x26f	        0x488d4844	                   lea rcx, [rax + 0x44]	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x273	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x276	          0x83e801	                              sub eax, 1	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x279	          0x4863d0	                         movsxd rdx, eax	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x27c	          0x4889d0	                            mov rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x27f	        0x48c1e002	                              shl rax, 2	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x283	          0x4801d0	                            add rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x286	        0x48c1e002	                              shl rax, 2	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x28a	        0x488b55f8	                mov rdx, qword [rbp - 8]	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x28e	          0x4801d0	                            add rax, rdx	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x291	        0x4883c00c	                            add rax, 0xc	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x295	          0x4889ce	                            mov rsi, rcx	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x298	          0x4889c7	                            mov rdi, rax	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x29b	      0xe86ffeffff	                         call sym.oidcpy	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x2a0	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	        28	resolve-undo.c	FUNCTION_1
0x2a3	          0x8d50ff	                      lea edx, [rax - 1]	        28	resolve-undo.c	FUNCTION_1
0x2a6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        28	resolve-undo.c	FUNCTION_1
0x2aa	          0x8b4834	            mov ecx, dword [rax + 0x34] 	        28	resolve-undo.c	FUNCTION_1
0x2ad	        0x488b45f8	                mov rax, qword [rbp - 8]	        28	resolve-undo.c	FUNCTION_1
0x2b1	          0x4863d2	                         movsxd rdx, edx	        28	resolve-undo.c	FUNCTION_1
0x2b4	          0x890c90	            mov dword [rax + rdx*4], ecx	        28	resolve-undo.c	FUNCTION_1
0x2b7	            0xeb01	                           jmp 0x40002fa	        28	resolve-undo.c	FUNCTION_1
0x2b9	              0x90	                                     nop	        15	resolve-undo.c	FUNCTION_1	IF_1
0x2ba	              0xc9	                                   leave	        29	resolve-undo.c	FUNCTION_1
0x2bb	              0xc3	                                     ret	        29	resolve-undo.c	FUNCTION_1
ce_path_match	ELSE,0:DO,0:WHILE,0:CALL,4:IF,0:functions,0:FOR,0:SWITCH,0	34
0x135	              0x55	                                push rbp	       335	dir.h	FUNCTION_47
0x136	          0x4889e5	                            mov rbp, rsp	       335	dir.h	FUNCTION_47
0x139	        0x4883ec20	                           sub rsp, 0x20	       335	dir.h	FUNCTION_47
0x13d	        0x48897df8	                mov qword [rbp - 8], rdi	       335	dir.h	FUNCTION_47
0x141	        0x488975f0	             mov qword [rbp - 0x10], rsi	       335	dir.h	FUNCTION_47
0x145	        0x488955e8	             mov qword [rbp - 0x18], rdx	       335	dir.h	FUNCTION_47
0x149	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	dir.h	FUNCTION_47	CALL_4
0x14d	          0x8b4034	            mov eax, dword [rax + 0x34] 	       337	dir.h	FUNCTION_47	CALL_4
0x150	      0x2500f00000	                         and eax, 0xf000	       337	dir.h	FUNCTION_47	CALL_4
0x155	      0x3d00400000	                         cmp eax, 0x4000	       336	dir.h	FUNCTION_47	CALL_2
0x15a	            0x7413	                            je 0x40001af	       336	dir.h	FUNCTION_47	CALL_2
0x15c	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	dir.h	FUNCTION_47	CALL_4
0x160	          0x8b4034	            mov eax, dword [rax + 0x34] 	       337	dir.h	FUNCTION_47	CALL_4
0x163	      0x2500f00000	                         and eax, 0xf000	       337	dir.h	FUNCTION_47	CALL_4
0x168	      0x3d00e00000	                         cmp eax, 0xe000	       336	dir.h	FUNCTION_47	CALL_2
0x16d	            0x7507	                           jne 0x40001b6	       336	dir.h	FUNCTION_47	CALL_2
0x16f	      0xb901000000	                              mov ecx, 1	       336	dir.h	FUNCTION_47	CALL_2
0x174	            0xeb05	                           jmp 0x40001bb	       336	dir.h	FUNCTION_47	CALL_2
0x176	      0xb900000000	                              mov ecx, 0	       336	dir.h	FUNCTION_47	CALL_2
0x17b	        0x488b45f8	                mov rax, qword [rbp - 8]	       336	dir.h	FUNCTION_47	CALL_2
0x17f	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       336	dir.h	FUNCTION_47	CALL_2
0x182	            0x89c7	                            mov edi, eax	       336	dir.h	FUNCTION_47	CALL_2
0x184	        0x488b45f8	                mov rax, qword [rbp - 8]	       336	dir.h	FUNCTION_47	CALL_2
0x188	        0x488d7058	                   lea rsi, [rax + 0x58]	       336	dir.h	FUNCTION_47	CALL_2
0x18c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       336	dir.h	FUNCTION_47	CALL_2
0x190	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       336	dir.h	FUNCTION_47	CALL_2
0x194	          0x4189c9	                            mov r9d, ecx	       336	dir.h	FUNCTION_47	CALL_2
0x197	          0x4989d0	                             mov r8, rdx	       336	dir.h	FUNCTION_47	CALL_2
0x19a	      0xb900000000	                              mov ecx, 0	       336	dir.h	FUNCTION_47	CALL_2
0x19f	            0x89fa	                            mov edx, edi	       336	dir.h	FUNCTION_47	CALL_2
0x1a1	          0x4889c7	                            mov rdi, rax	       336	dir.h	FUNCTION_47	CALL_2
0x1a4	      0xe800000000	                          call 0x40001e9	       336	dir.h	FUNCTION_47	CALL_2
0x1a9	              0xc9	                                   leave	       338	dir.h	FUNCTION_47
0x1aa	              0xc3	                                     ret	       338	dir.h	FUNCTION_47
