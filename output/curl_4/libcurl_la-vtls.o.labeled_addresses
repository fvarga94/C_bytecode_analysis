Curl_ssl_false_start	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001f60	    0x488b05000000	            mov rax, qword [0x04001f67] 	       979	vtls.c	FUNCTION_38	CALL_1
0x4001f67	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	       979	vtls.c	FUNCTION_38	CALL_1
0x4001f6e	            0xffe0	                                 jmp rax	       979	vtls.c	FUNCTION_38	CALL_1
Curl_ssl_cleanup	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	10
0x4000ab0	    0x803d00000000	                cmp byte [0x04000ab7], 0	       175	vtls.c	FUNCTION_6	IF_1
0x4000ab7	            0x7507	                           jne 0x4000ac0	       175	vtls.c	FUNCTION_6	IF_1
0x4000ab9	              0xc3	                                     ret	       180	vtls.c	FUNCTION_6
0x4000aba	    0x660f1f440000	                    nop word [rax + rax]	       180	vtls.c	FUNCTION_6
0x4000ac0	        0x4883ec08	                              sub rsp, 8	       174	vtls.c	FUNCTION_6
0x4000ac4	    0x488b05000000	            mov rax, qword [0x04000acb] 	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000acb	          0xff5028	                 call qword [rax + 0x28]	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000ace	    0xc60500000000	                mov byte [0x04000ad5], 0	       178	vtls.c	FUNCTION_6	IF_1
0x4000ad5	        0x4883c408	                              add rsp, 8	       180	vtls.c	FUNCTION_6
0x4000ad9	              0xc3	                                     ret	       180	vtls.c	FUNCTION_6
Curl_none_data_pending	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x4000090	            0x31c0	                            xor eax, eax	      1042	vtls.c	FUNCTION_47
0x4000092	              0xc3	                                     ret	      1042	vtls.c	FUNCTION_47
Curl_ssl_set_engine	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x40016a0	    0x488b05000000	            mov rax, qword [0x040016a7] 	       573	vtls.c	FUNCTION_22	CALL_1
0x40016a7	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       573	vtls.c	FUNCTION_22	CALL_1
0x40016ae	            0xffe0	                                 jmp rax	       573	vtls.c	FUNCTION_22	CALL_1
Curl_ssl_backend	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	55
0x40009b0	    0x488b05000000	            mov rax, qword [0x040009b7] 	      1272	vtls.c	FUNCTION_61	IF_1
0x40009b7	    0x488d15000000	                   lea rdx, [0x040009be]	      1272	vtls.c	FUNCTION_61	IF_1
0x40009be	          0x4839d0	                            cmp rax, rdx	      1272	vtls.c	FUNCTION_61	IF_1
0x40009c1	            0x740d	                            je 0x40009d0	      1272	vtls.c	FUNCTION_61	IF_1
0x40009c3	            0x8b00	                    mov eax, dword [rax]	       144	vtls.c	FUNCTION_4
0x40009c5	              0xc3	                                     ret	       148	vtls.c	FUNCTION_4
0x40009c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       148	vtls.c	FUNCTION_4
0x40009d0	    0x48833d000000	               cmp qword [0x040009d8], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x40009d8	            0x74e9	                            je 0x40009c3	      1280	vtls.c	FUNCTION_61	IF_3
0x40009da	            0x4155	                                push r13	       141	vtls.c	FUNCTION_4
0x40009dc	            0x4154	                                push r12	       141	vtls.c	FUNCTION_4
0x40009de	    0x488d3d000000	                   lea rdi, [0x040009e5]	      1283	vtls.c	FUNCTION_61	CALL_1
0x40009e5	              0x55	                                push rbp	       141	vtls.c	FUNCTION_4
0x40009e6	              0x53	                                push rbx	       141	vtls.c	FUNCTION_4
0x40009e7	        0x4883ec08	                              sub rsp, 8	       141	vtls.c	FUNCTION_4
0x40009eb	      0xe800000000	                          call 0x40009f0	      1283	vtls.c	FUNCTION_61	CALL_1
0x40009f0	          0x4889c5	                            mov rbp, rax	      1283	vtls.c	FUNCTION_61	CALL_1
0x40009f3	    0x488b05000000	            mov rax, qword [0x040009fa] 	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40009fa	          0x4885ed	                           test rbp, rbp	      1288	vtls.c	FUNCTION_61	IF_5
0x40009fd	            0x7468	                            je 0x4000a67	      1288	vtls.c	FUNCTION_61	IF_5
0x40009ff	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a02	            0x7463	                            je 0x4000a67	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a04	            0x31db	                            xor ebx, ebx	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a06	    0x4c8d2d000000	                   lea r13, [0x04000a0d]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a0d	            0xeb0f	                           jmp 0x4000a1e	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a0f	              0x90	                                     nop	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a10	        0x4883c301	                              add rbx, 1	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a14	      0x498b44dd00	            mov rax, qword [r13 + rbx*8]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a19	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a1c	            0x7442	                            je 0x4000a60	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000a1e	        0x488b7008	                mov rsi, qword [rax + 8]	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a22	          0x4889ef	                            mov rdi, rbp	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a25	          0x4c63e3	                         movsxd r12, ebx	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a28	      0xe800000000	                          call 0x4000a2d	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a2d	            0x85c0	                           test eax, eax	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a2f	            0x74df	                            je 0x4000a10	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000a31	      0x4b8b44e500	            mov rax, qword [r13 + r12*8]	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000a36	          0x4889ef	                            mov rdi, rbp	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x4000a39	    0x488905000000	            mov qword [0x04000a40], rax 	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000a40	      0xe800000000	                          call 0x4000a45	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x4000a45	    0x488b05000000	            mov rax, qword [0x04000a4c] 	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x4000a4c	            0x8b00	                    mov eax, dword [rax]	       144	vtls.c	FUNCTION_4
0x4000a4e	        0x4883c408	                              add rsp, 8	       148	vtls.c	FUNCTION_4
0x4000a52	              0x5b	                                 pop rbx	       148	vtls.c	FUNCTION_4
0x4000a53	              0x5d	                                 pop rbp	       148	vtls.c	FUNCTION_4
0x4000a54	            0x415c	                                 pop r12	       148	vtls.c	FUNCTION_4
0x4000a56	            0x415d	                                 pop r13	       148	vtls.c	FUNCTION_4
0x4000a58	              0xc3	                                     ret	       148	vtls.c	FUNCTION_4
0x4000a59	     0xf1f80000000	                         nop dword [rax]	       148	vtls.c	FUNCTION_4
0x4000a60	    0x488b05000000	            mov rax, qword [0x04000a67] 	       148	vtls.c	FUNCTION_4
0x4000a67	          0x4889ef	                            mov rdi, rbp	      1300	vtls.c	FUNCTION_61	CALL_4
0x4000a6a	    0x488905000000	            mov qword [0x04000a71], rax 	      1299	vtls.c	FUNCTION_61
0x4000a71	      0xe800000000	                          call 0x4000a76	      1300	vtls.c	FUNCTION_61	CALL_4
0x4000a76	    0x488b05000000	            mov rax, qword [0x04000a7d] 	      1300	vtls.c	FUNCTION_61	CALL_4
0x4000a7d	            0xebcd	                           jmp 0x4000a4c	      1300	vtls.c	FUNCTION_61	CALL_4
Curl_clone_primary_ssl_config	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	104
0x4000790	              0x55	                                push rbp	       108	vtls.c	FUNCTION_2
0x4000791	              0x53	                                push rbx	       108	vtls.c	FUNCTION_2
0x4000792	          0x4889fb	                            mov rbx, rdi	       108	vtls.c	FUNCTION_2
0x4000795	          0x4889f5	                            mov rbp, rsi	       108	vtls.c	FUNCTION_2
0x4000798	        0x4883ec08	                              sub rsp, 8	       108	vtls.c	FUNCTION_2
0x400079c	          0x488b07	                    mov rax, qword [rdi]	       109	vtls.c	FUNCTION_2
0x400079f	          0x488906	                    mov qword [rsi], rax	       109	vtls.c	FUNCTION_2
0x40007a2	        0x488b4708	                mov rax, qword [rdi + 8]	       110	vtls.c	FUNCTION_2
0x40007a6	        0x48894608	                mov qword [rsi + 8], rax	       110	vtls.c	FUNCTION_2
0x40007aa	         0xfb64710	           movzx eax, byte [rdi + 0x10] 	       111	vtls.c	FUNCTION_2
0x40007ae	          0x884610	               mov byte [rsi + 0x10], al	       111	vtls.c	FUNCTION_2
0x40007b1	         0xfb64711	           movzx eax, byte [rdi + 0x11] 	       112	vtls.c	FUNCTION_2
0x40007b5	          0x884611	               mov byte [rsi + 0x11], al	       112	vtls.c	FUNCTION_2
0x40007b8	         0xfb64712	           movzx eax, byte [rdi + 0x12] 	       113	vtls.c	FUNCTION_2
0x40007bc	          0x884612	               mov byte [rsi + 0x12], al	       113	vtls.c	FUNCTION_2
0x40007bf	         0xfb64713	           movzx eax, byte [rdi + 0x13] 	       114	vtls.c	FUNCTION_2
0x40007c3	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       116	vtls.c	FUNCTION_2
0x40007c7	          0x4885ff	                           test rdi, rdi	       116	vtls.c	FUNCTION_2
0x40007ca	          0x884613	               mov byte [rsi + 0x13], al	       114	vtls.c	FUNCTION_2
0x40007cd	     0xf84e5000000	                            je 0x40008b8	       116	vtls.c	FUNCTION_2
0x40007d3	    0x488b05000000	            mov rax, qword [0x040007da] 	       116	vtls.c	FUNCTION_2
0x40007da	            0xff10	                        call qword [rax]	       116	vtls.c	FUNCTION_2
0x40007dc	          0x4885c0	                           test rax, rax	       116	vtls.c	FUNCTION_2
0x40007df	        0x48894518	            mov qword [rbp + 0x18], rax 	       116	vtls.c	FUNCTION_2
0x40007e3	     0xf84bf000000	                            je 0x40008a8	       116	vtls.c	FUNCTION_2
0x40007e9	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       117	vtls.c	FUNCTION_2
0x40007ed	          0x4885ff	                           test rdi, rdi	       117	vtls.c	FUNCTION_2
0x40007f0	     0xf84d7000000	                            je 0x40008cd	       117	vtls.c	FUNCTION_2
0x40007f6	    0x488b05000000	            mov rax, qword [0x040007fd] 	       117	vtls.c	FUNCTION_2
0x40007fd	            0xff10	                        call qword [rax]	       117	vtls.c	FUNCTION_2
0x40007ff	          0x4885c0	                           test rax, rax	       117	vtls.c	FUNCTION_2
0x4000802	        0x48894520	            mov qword [rbp + 0x20], rax 	       117	vtls.c	FUNCTION_2
0x4000806	     0xf849c000000	                            je 0x40008a8	       117	vtls.c	FUNCTION_2
0x400080c	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       118	vtls.c	FUNCTION_2
0x4000810	          0x4885ff	                           test rdi, rdi	       118	vtls.c	FUNCTION_2
0x4000813	     0xf84c9000000	                            je 0x40008e2	       118	vtls.c	FUNCTION_2
0x4000819	    0x488b05000000	            mov rax, qword [0x04000820] 	       118	vtls.c	FUNCTION_2
0x4000820	            0xff10	                        call qword [rax]	       118	vtls.c	FUNCTION_2
0x4000822	          0x4885c0	                           test rax, rax	       118	vtls.c	FUNCTION_2
0x4000825	        0x48894528	            mov qword [rbp + 0x28], rax 	       118	vtls.c	FUNCTION_2
0x4000829	            0x747d	                            je 0x40008a8	       118	vtls.c	FUNCTION_2
0x400082b	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       119	vtls.c	FUNCTION_2
0x400082f	          0x4885ff	                           test rdi, rdi	       119	vtls.c	FUNCTION_2
0x4000832	     0xf84bf000000	                            je 0x40008f7	       119	vtls.c	FUNCTION_2
0x4000838	    0x488b05000000	            mov rax, qword [0x0400083f] 	       119	vtls.c	FUNCTION_2
0x400083f	            0xff10	                        call qword [rax]	       119	vtls.c	FUNCTION_2
0x4000841	          0x4885c0	                           test rax, rax	       119	vtls.c	FUNCTION_2
0x4000844	        0x48894530	            mov qword [rbp + 0x30], rax 	       119	vtls.c	FUNCTION_2
0x4000848	            0x745e	                            je 0x40008a8	       119	vtls.c	FUNCTION_2
0x400084a	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       120	vtls.c	FUNCTION_2
0x400084e	          0x4885ff	                           test rdi, rdi	       120	vtls.c	FUNCTION_2
0x4000851	     0xf84b5000000	                            je 0x400090c	       120	vtls.c	FUNCTION_2
0x4000857	    0x488b05000000	            mov rax, qword [0x0400085e] 	       120	vtls.c	FUNCTION_2
0x400085e	            0xff10	                        call qword [rax]	       120	vtls.c	FUNCTION_2
0x4000860	          0x4885c0	                           test rax, rax	       120	vtls.c	FUNCTION_2
0x4000863	        0x48894538	            mov qword [rbp + 0x38], rax 	       120	vtls.c	FUNCTION_2
0x4000867	            0x743f	                            je 0x40008a8	       120	vtls.c	FUNCTION_2
0x4000869	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       121	vtls.c	FUNCTION_2
0x400086d	          0x4885ff	                           test rdi, rdi	       121	vtls.c	FUNCTION_2
0x4000870	            0x741e	                            je 0x4000890	       121	vtls.c	FUNCTION_2
0x4000872	    0x488b05000000	            mov rax, qword [0x04000879] 	       121	vtls.c	FUNCTION_2
0x4000879	            0xff10	                        call qword [rax]	       121	vtls.c	FUNCTION_2
0x400087b	          0x4885c0	                           test rax, rax	       121	vtls.c	FUNCTION_2
0x400087e	        0x48894540	            mov qword [rbp + 0x40], rax 	       121	vtls.c	FUNCTION_2
0x4000882	           0xf95c0	                                setne al	       121	vtls.c	FUNCTION_2
0x4000885	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x4000889	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x400088a	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x400088b	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x400088c	         0xf1f4000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x4000890	    0x48c745400000	               mov qword [rbp + 0x40], 0	       121	vtls.c	FUNCTION_2
0x4000898	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x400089c	      0xb801000000	                              mov eax, 1	       123	vtls.c	FUNCTION_2
0x40008a1	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x40008a2	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x40008a3	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x40008a4	         0xf1f4000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x40008a8	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x40008ac	            0x31c0	                            xor eax, eax	       116	vtls.c	FUNCTION_2
0x40008ae	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x40008af	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x40008b0	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
0x40008b1	     0xf1f80000000	                         nop dword [rax]	       124	vtls.c	FUNCTION_2
0x40008b8	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       117	vtls.c	FUNCTION_2
0x40008bc	    0x48c746180000	               mov qword [rsi + 0x18], 0	       116	vtls.c	FUNCTION_2
0x40008c4	          0x4885ff	                           test rdi, rdi	       117	vtls.c	FUNCTION_2
0x40008c7	     0xf8529ffffff	                           jne 0x40007f6	       117	vtls.c	FUNCTION_2
0x40008cd	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       118	vtls.c	FUNCTION_2
0x40008d1	    0x48c745200000	               mov qword [rbp + 0x20], 0	       117	vtls.c	FUNCTION_2
0x40008d9	          0x4885ff	                           test rdi, rdi	       118	vtls.c	FUNCTION_2
0x40008dc	     0xf8537ffffff	                           jne 0x4000819	       118	vtls.c	FUNCTION_2
0x40008e2	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       119	vtls.c	FUNCTION_2
0x40008e6	    0x48c745280000	               mov qword [rbp + 0x28], 0	       118	vtls.c	FUNCTION_2
0x40008ee	          0x4885ff	                           test rdi, rdi	       119	vtls.c	FUNCTION_2
0x40008f1	     0xf8541ffffff	                           jne 0x4000838	       119	vtls.c	FUNCTION_2
0x40008f7	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       120	vtls.c	FUNCTION_2
0x40008fb	    0x48c745300000	               mov qword [rbp + 0x30], 0	       119	vtls.c	FUNCTION_2
0x4000903	          0x4885ff	                           test rdi, rdi	       120	vtls.c	FUNCTION_2
0x4000906	     0xf854bffffff	                           jne 0x4000857	       120	vtls.c	FUNCTION_2
0x400090c	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       121	vtls.c	FUNCTION_2
0x4000910	    0x48c745380000	               mov qword [rbp + 0x38], 0	       120	vtls.c	FUNCTION_2
0x4000918	          0x4885ff	                           test rdi, rdi	       121	vtls.c	FUNCTION_2
0x400091b	     0xf8551ffffff	                           jne 0x4000872	       121	vtls.c	FUNCTION_2
0x4000921	      0xe96affffff	                           jmp 0x4000890	       121	vtls.c	FUNCTION_2
Curl_ssl_close	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,2	2
0x4001610	    0x488b05000000	            mov rax, qword [0x04001617] 	       552	vtls.c	FUNCTION_20	CALL_2
0x4001617	          0xff6078	                  jmp qword [rax + 0x78]	       552	vtls.c	FUNCTION_20	CALL_2
Curl_pin_peer_pubkey	ELSE,0:FOR,0:functions,0:DO,2:SWITCH,0:WHILE,0:IF,22:CALL,29	286
0x4001ab0	            0x4157	                                push r15	       805	vtls.c	FUNCTION_35
0x4001ab2	            0x4156	                                push r14	       805	vtls.c	FUNCTION_35
0x4001ab4	            0x4155	                                push r13	       805	vtls.c	FUNCTION_35
0x4001ab6	            0x4154	                                push r12	       805	vtls.c	FUNCTION_35
0x4001ab8	              0x55	                                push rbp	       805	vtls.c	FUNCTION_35
0x4001ab9	              0x53	                                push rbx	       805	vtls.c	FUNCTION_35
0x4001aba	        0x4883ec38	                           sub rsp, 0x38	       805	vtls.c	FUNCTION_35
0x4001abe	    0x64488b042528	                mov rax, qword fs:[0x28]	       805	vtls.c	FUNCTION_35
0x4001ac7	      0x4889442428	             mov qword [rsp + 0x28], rax	       805	vtls.c	FUNCTION_35
0x4001acc	            0x31c0	                            xor eax, eax	       805	vtls.c	FUNCTION_35
0x4001ace	          0x4885f6	                           test rsi, rsi	       818	vtls.c	FUNCTION_35	IF_1
0x4001ad1	    0x48c744241000	               mov qword [rsp + 0x10], 0	       807	vtls.c	FUNCTION_35
0x4001ada	     0xf84c0010000	                            je 0x4001ca0	       818	vtls.c	FUNCTION_35	IF_1
0x4001ae0	          0x4885d2	                           test rdx, rdx	       820	vtls.c	FUNCTION_35	IF_2
0x4001ae3	          0x4889d5	                            mov rbp, rdx	       820	vtls.c	FUNCTION_35	IF_2
0x4001ae6	            0x7408	                            je 0x4001af0	       820	vtls.c	FUNCTION_35	IF_2
0x4001ae8	          0x4885c9	                           test rcx, rcx	       820	vtls.c	FUNCTION_35	IF_2
0x4001aeb	          0x4989ce	                            mov r14, rcx	       820	vtls.c	FUNCTION_35	IF_2
0x4001aee	            0x7530	                           jne 0x4001b20	       820	vtls.c	FUNCTION_35	IF_2
0x4001af0	      0xb85a000000	                           mov eax, 0x5a	       821	vtls.c	FUNCTION_35	IF_2
0x4001af5	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       954	vtls.c	FUNCTION_35
0x4001afa	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       954	vtls.c	FUNCTION_35
0x4001b03	     0xf85fa020000	                           jne 0x4001e03	       954	vtls.c	FUNCTION_35
0x4001b09	        0x4883c438	                           add rsp, 0x38	       954	vtls.c	FUNCTION_35
0x4001b0d	              0x5b	                                 pop rbx	       954	vtls.c	FUNCTION_35
0x4001b0e	              0x5d	                                 pop rbp	       954	vtls.c	FUNCTION_35
0x4001b0f	            0x415c	                                 pop r12	       954	vtls.c	FUNCTION_35
0x4001b11	            0x415d	                                 pop r13	       954	vtls.c	FUNCTION_35
0x4001b13	            0x415e	                                 pop r14	       954	vtls.c	FUNCTION_35
0x4001b15	            0x415f	                                 pop r15	       954	vtls.c	FUNCTION_35
0x4001b17	              0xc3	                                     ret	       954	vtls.c	FUNCTION_35
0x4001b18	     0xf1f84000000	                   nop dword [rax + rax]	       954	vtls.c	FUNCTION_35
0x4001b20	          0x4989ff	                            mov r15, rdi	       954	vtls.c	FUNCTION_35
0x4001b23	    0x488d3d000000	                   lea rdi, [0x04001b2a]	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001b2a	      0xb908000000	                              mov ecx, 8	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001b2f	          0x4889f3	                            mov rbx, rsi	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001b32	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001b34	     0xf8576010000	                           jne 0x4001cb0	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001b3a	    0x488b05000000	            mov rax, qword [0x04001b41] 	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001b41	    0x4883b8b80000	               cmp qword [rax + 0xb8], 0	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001b49	            0x74a5	                            je 0x4001af0	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001b4b	    0x488b05000000	            mov rax, qword [0x04001b52] 	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001b52	      0xbf20000000	                           mov edi, 0x20	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001b57	            0xff10	                        call qword [rax]	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001b59	          0x4989c5	                            mov r13, rax	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001b5c	      0xb81b000000	                           mov eax, 0x1b	       833	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001b61	          0x4d85ed	                           test r13, r13	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001b64	            0x748f	                            je 0x4001af5	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x4001b66	    0x488b05000000	            mov rax, qword [0x04001b6d] 	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b6d	      0xb920000000	                           mov ecx, 0x20	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b72	          0x4c89ea	                            mov rdx, r13	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b75	          0x4c89f6	                            mov rsi, r14	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b78	          0x4889ef	                            mov rdi, rbp	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b7b	    0xff90b8000000	                 call qword [rax + 0xb8]	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x4001b81	            0x85c0	                           test eax, eax	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x4001b83	     0xf856cffffff	                           jne 0x4001af5	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x4001b89	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001b8e	      0x4c8d442418	                    lea r8, [rsp + 0x18]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001b93	      0xba20000000	                           mov edx, 0x20	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001b98	          0x4c89ee	                            mov rsi, r13	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001b9b	          0x4c89ff	                            mov rdi, r15	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001b9e	      0xe800000000	                          call 0x4001ba3	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001ba3	    0x4c8b25000000	            mov r12, qword [0x04001baa] 	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x4001baa	            0x89c5	                            mov ebp, eax	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x4001bac	          0x4c89ef	                            mov rdi, r13	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x4001baf	        0x41ff1424	                        call qword [r12]	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x4001bb3	            0x85ed	                           test ebp, ebp	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x4001bb5	            0x89e8	                            mov eax, ebp	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x4001bb7	     0xf8538ffffff	                           jne 0x4001af5	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x4001bbd	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001bc2	    0x488d35000000	                   lea rsi, [0x04001bc9]	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001bc9	          0x4c89ff	                            mov rdi, r15	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001bcc	      0xe800000000	                          call 0x4001bd1	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001bd1	          0x4889df	                            mov rdi, rbx	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001bd4	      0xe800000000	                          call 0x4001bd9	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001bd9	        0x4c8d7001	                      lea r14, [rax + 1]	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001bdd	    0x488b05000000	            mov rax, qword [0x04001be4] 	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001be4	          0x4c89f7	                            mov rdi, r14	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001be7	            0xff10	                        call qword [rax]	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001be9	          0x4885c0	                           test rax, rax	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001bec	          0x4889c5	                            mov rbp, rax	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001bef	     0xf84fb010000	                            je 0x4001df0	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001bf5	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_64	CALL_3
0x4001bf8	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_64	CALL_3
0x4001bfb	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_64	CALL_3
0x4001bfe	      0xe800000000	                          call 0x4001c03	        53	string3.h	FUNCTION_64	CALL_3
0x4001c03	          0x4889eb	                            mov rbx, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x4001c06	            0xeb28	                           jmp 0x4001c30	        53	string3.h	FUNCTION_64	CALL_3
0x4001c08	     0xf1f84000000	                   nop dword [rax + rax]	        53	string3.h	FUNCTION_64	CALL_3
0x4001c10	    0x488d35000000	                   lea rsi, [0x04001c17]	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001c17	      0x41c645003b	                    mov byte [r13], 0x3b	       881	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11
0x4001c1c	          0x4c89ef	                            mov rdi, r13	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001c1f	      0xe800000000	                          call 0x4001c24	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001c24	          0x4885c0	                           test rax, rax	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001c27	          0x4889c3	                            mov rbx, rax	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001c2a	     0xf84f8020000	                            je 0x4001f28	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001c30	    0x488d35000000	                   lea rsi, [0x04001c37]	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001c37	          0x4889df	                            mov rdi, rbx	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001c3a	      0xe800000000	                          call 0x4001c3f	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001c3f	          0x4885c0	                           test rax, rax	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001c42	          0x4989c5	                            mov r13, rax	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001c45	     0xf84cd000000	                            je 0x4001d18	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001c4b	        0x4883c308	                              add rbx, 8	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c4f	          0xc60000	                       mov byte [rax], 0	       867	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001c52	          0x4889df	                            mov rdi, rbx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c55	      0xe800000000	                          call 0x4001c5a	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c5a	      0x4839442418	            cmp qword [rsp + 0x18], rax 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c5f	            0x75af	                           jne 0x4001c10	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c61	      0x4c8b742420	            mov r14, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001c66	          0x4889c2	                            mov rdx, rax	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001c69	          0x4889de	                            mov rsi, rbx	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001c6c	          0x4c89f7	                            mov rdi, r14	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001c6f	      0xe800000000	                          call 0x4001c74	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001c74	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c76	            0x7598	                           jne 0x4001c10	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001c78	            0x31db	                            xor ebx, ebx	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x4001c7a	    0x660f1f440000	                    nop word [rax + rax]	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x4001c80	          0x4c89f7	                            mov rdi, r14	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001c83	        0x41ff1424	                        call qword [r12]	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001c87	    0x48c744242000	               mov qword [rsp + 0x20], 0	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001c90	          0x4889ef	                            mov rdi, rbp	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001c93	        0x41ff1424	                        call qword [r12]	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001c97	            0x89d8	                            mov eax, ebx	       887	vtls.c	FUNCTION_35	IF_3
0x4001c99	      0xe957feffff	                           jmp 0x4001af5	       887	vtls.c	FUNCTION_35	IF_3
0x4001c9e	            0x6690	                                     nop	       887	vtls.c	FUNCTION_35	IF_3
0x4001ca0	            0x31c0	                            xor eax, eax	       819	vtls.c	FUNCTION_35	IF_1
0x4001ca2	      0xe94efeffff	                           jmp 0x4001af5	       819	vtls.c	FUNCTION_35	IF_1
0x4001ca7	    0x660f1f840000	                    nop word [rax + rax]	       819	vtls.c	FUNCTION_35	IF_1
0x4001cb0	    0x488d35000000	                   lea rsi, [0x04001cb7]	       890	vtls.c	FUNCTION_35	CALL_17
0x4001cb7	          0x4889df	                            mov rdi, rbx	       890	vtls.c	FUNCTION_35	CALL_17
0x4001cba	      0xe800000000	                          call 0x4001cbf	       890	vtls.c	FUNCTION_35	CALL_17
0x4001cbf	          0x4885c0	                           test rax, rax	       891	vtls.c	FUNCTION_35	IF_12
0x4001cc2	          0x4989c5	                            mov r13, rax	       890	vtls.c	FUNCTION_35	CALL_17
0x4001cc5	     0xf8425feffff	                            je 0x4001af0	       891	vtls.c	FUNCTION_35	IF_12
0x4001ccb	            0x31f6	                            xor esi, esi	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001ccd	      0xba02000000	                              mov edx, 2	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001cd2	          0x4889c7	                            mov rdi, rax	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001cd5	      0xe800000000	                          call 0x4001cda	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001cda	            0x85c0	                           test eax, eax	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001cdc	            0x746a	                            je 0x4001d48	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001cde	    0x4c8b25000000	            mov r12, qword [0x04001ce5] 	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001ce5	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001cea	          0x4531ff	                          xor r15d, r15d	       807	vtls.c	FUNCTION_35
0x4001ced	          0x4c89ff	                            mov rdi, r15	       949	vtls.c	FUNCTION_35	CALL_27
0x4001cf0	        0x41ff1424	                        call qword [r12]	       949	vtls.c	FUNCTION_35	CALL_27
0x4001cf4	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       950	vtls.c	FUNCTION_35	CALL_28
0x4001cf9	        0x41ff1424	                        call qword [r12]	       950	vtls.c	FUNCTION_35	CALL_28
0x4001cfd	          0x4c89ef	                            mov rdi, r13	       951	vtls.c	FUNCTION_35	CALL_29
0x4001d00	    0x48c744241000	               mov qword [rsp + 0x10], 0	       950	vtls.c	FUNCTION_35	CALL_28
0x4001d09	      0xe800000000	                          call 0x4001d0e	       951	vtls.c	FUNCTION_35	CALL_29
0x4001d0e	            0x89d8	                            mov eax, ebx	       953	vtls.c	FUNCTION_35
0x4001d10	      0xe9e0fdffff	                           jmp 0x4001af5	       953	vtls.c	FUNCTION_35
0x4001d15	           0xf1f00	                         nop dword [rax]	       953	vtls.c	FUNCTION_35
0x4001d18	        0x4883c308	                              add rbx, 8	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d1c	          0x4889df	                            mov rdi, rbx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d1f	      0xe800000000	                          call 0x4001d24	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d24	      0x483b442418	            cmp rax, qword [rsp + 0x18] 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d29	      0x4c8b6c2420	            mov r13, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001d2e	     0xf8496000000	                            je 0x4001dca	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d34	          0x4d89ee	                            mov r14, r13	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001d37	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001d3c	      0xe93fffffff	                           jmp 0x4001c80	       811	vtls.c	FUNCTION_35
0x4001d41	     0xf1f80000000	                         nop dword [rax]	       811	vtls.c	FUNCTION_35
0x4001d48	          0x4c89ef	                            mov rdi, r13	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x4001d4b	      0xe800000000	                          call 0x4001d50	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x4001d50	            0x31d2	                            xor edx, edx	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d52	            0x31f6	                            xor esi, esi	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d54	          0x4c89ef	                            mov rdi, r13	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d57	          0x4889c3	                            mov rbx, rax	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x4001d5a	      0xe800000000	                          call 0x4001d5f	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d5f	            0x85c0	                           test eax, eax	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d61	     0xf8577ffffff	                           jne 0x4001cde	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x4001d67	    0x4881fb000010	                       cmp rbx, 0x100000	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x4001d6e	     0xf876affffff	                            ja 0x4001cde	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x4001d74	          0x4889df	                            mov rdi, rbx	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x4001d77	      0xe800000000	                          call 0x4001d7c	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x4001d7c	          0x4939c6	                            cmp r14, rax	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x4001d7f	          0x4889c3	                            mov rbx, rax	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x4001d82	     0xf8756ffffff	                            ja 0x4001cde	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x4001d88	        0x488d7801	                      lea rdi, [rax + 1]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001d8c	    0x488b05000000	            mov rax, qword [0x04001d93] 	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001d93	            0xff10	                        call qword [rax]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001d95	          0x4885c0	                           test rax, rax	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x4001d98	          0x4989c7	                            mov r15, rax	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x4001d9b	     0xf843dffffff	                            je 0x4001cde	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x4001da1	          0x4c89e9	                            mov rcx, r13	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001da4	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001da9	          0x4889de	                            mov rsi, rbx	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001dac	          0x4889c7	                            mov rdi, rax	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001daf	      0xe800000000	                          call 0x4001db4	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001db4	          0x83e801	                              sub eax, 1	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x4001db7	            0x744f	                            je 0x4001e08	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x4001db9	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001dbe	    0x4c8b25000000	            mov r12, qword [0x04001dc5] 	       811	vtls.c	FUNCTION_35
0x4001dc5	      0xe923ffffff	                           jmp 0x4001ced	       811	vtls.c	FUNCTION_35
0x4001dca	          0x4889c2	                            mov rdx, rax	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001dcd	          0x4889de	                            mov rsi, rbx	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001dd0	          0x4c89ef	                            mov rdi, r13	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001dd3	      0xe800000000	                          call 0x4001dd8	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001dd8	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001dda	          0x4d89ee	                            mov r14, r13	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x4001ddd	     0xf8551ffffff	                           jne 0x4001d34	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001de3	      0xe990feffff	                           jmp 0x4001c78	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001de8	     0xf1f84000000	                   nop dword [rax + rax]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001df0	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x4001df5	        0x41ff1424	                        call qword [r12]	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x4001df9	      0xb81b000000	                           mov eax, 0x1b	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001dfe	      0xe9f2fcffff	                           jmp 0x4001af5	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001e03	      0xe800000000	                          call 0x4001e08	       954	vtls.c	FUNCTION_35
0x4001e08	          0x4939de	                            cmp r14, rbx	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x4001e0b	            0x7520	                           jne 0x4001e2d	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x4001e0d	          0x4c89f2	                            mov rdx, r14	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e10	          0x4c89fe	                            mov rsi, r15	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e13	          0x4889ef	                            mov rdi, rbp	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e16	      0xe800000000	                          call 0x4001e1b	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e1b	            0x85c0	                           test eax, eax	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e1d	            0x759a	                           jne 0x4001db9	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001e1f	            0x31db	                            xor ebx, ebx	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001e21	    0x4c8b25000000	            mov r12, qword [0x04001e28] 	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001e28	      0xe9c0feffff	                           jmp 0x4001ced	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001e2d	    0x488d35000000	                   lea rsi, [0x04001e34]	       755	vtls.c	FUNCTION_34	CALL_1
0x4001e34	      0x41c6041f00	                 mov byte [r15 + rbx], 0	       935	vtls.c	FUNCTION_35	DO_2
0x4001e39	          0x4c89ff	                            mov rdi, r15	       755	vtls.c	FUNCTION_34	CALL_1
0x4001e3c	      0xe800000000	                          call 0x4001e41	       755	vtls.c	FUNCTION_34	CALL_1
0x4001e41	          0x4885c0	                           test rax, rax	       756	vtls.c	FUNCTION_34	IF_2
0x4001e44	     0xf846fffffff	                            je 0x4001db9	       756	vtls.c	FUNCTION_34	IF_2
0x4001e4a	          0x4889c3	                            mov rbx, rax	       761	vtls.c	FUNCTION_34	IF_3
0x4001e4d	          0x4c29fb	                            sub rbx, r15	       761	vtls.c	FUNCTION_34	IF_3
0x4001e50	            0x740a	                            je 0x4001e5c	       761	vtls.c	FUNCTION_34	IF_3
0x4001e52	        0x8078ff0a	                 cmp byte [rax - 1], 0xa	       761	vtls.c	FUNCTION_34	IF_3
0x4001e56	     0xf855dffffff	                           jne 0x4001db9	       761	vtls.c	FUNCTION_34	IF_3
0x4001e5c	        0x4883c31a	                           add rbx, 0x1a	       765	vtls.c	FUNCTION_34
0x4001e60	    0x488d35000000	                   lea rsi, [0x04001e67]	       768	vtls.c	FUNCTION_34	CALL_2
0x4001e67	        0x498d3c1f	                    lea rdi, [r15 + rbx]	       768	vtls.c	FUNCTION_34	CALL_2
0x4001e6b	      0xe800000000	                          call 0x4001e70	       768	vtls.c	FUNCTION_34	CALL_2
0x4001e70	          0x4885c0	                           test rax, rax	       769	vtls.c	FUNCTION_34	IF_4
0x4001e73	     0xf8440ffffff	                            je 0x4001db9	       769	vtls.c	FUNCTION_34	IF_4
0x4001e79	          0x4c29f8	                            sub rax, r15	       772	vtls.c	FUNCTION_34
0x4001e7c	          0x4989c4	                            mov r12, rax	       772	vtls.c	FUNCTION_34
0x4001e7f	          0x4829d8	                            sub rax, rbx	       774	vtls.c	FUNCTION_34	CALL_3
0x4001e82	        0x488d7801	                      lea rdi, [rax + 1]	       774	vtls.c	FUNCTION_34	CALL_3
0x4001e86	    0x488b05000000	            mov rax, qword [0x04001e8d] 	       774	vtls.c	FUNCTION_34	CALL_3
0x4001e8d	            0xff10	                        call qword [rax]	       774	vtls.c	FUNCTION_34	CALL_3
0x4001e8f	          0x4885c0	                           test rax, rax	       775	vtls.c	FUNCTION_34	IF_5
0x4001e92	          0x4889c1	                            mov rcx, rax	       774	vtls.c	FUNCTION_34	CALL_3
0x4001e95	     0xf841effffff	                            je 0x4001db9	       775	vtls.c	FUNCTION_34	IF_5
0x4001e9b	            0x31c0	                            xor eax, eax	       775	vtls.c	FUNCTION_34	IF_5
0x4001e9d	            0xeb1d	                           jmp 0x4001ebc	       775	vtls.c	FUNCTION_34	IF_5
0x4001e9f	      0x410fb6341f	             movzx esi, byte [r15 + rbx]	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001ea4	        0x4080fe0a	                            cmp sil, 0xa	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001ea8	            0x740e	                            je 0x4001eb8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001eaa	        0x4080fe0d	                            cmp sil, 0xd	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001eae	            0x7408	                            je 0x4001eb8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001eb0	        0x40883401	               mov byte [rcx + rax], sil	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001eb4	        0x4883c001	                              add rax, 1	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x4001eb8	        0x4883c301	                              add rbx, 1	       786	vtls.c	FUNCTION_34	WHILE_1
0x4001ebc	          0x4939dc	                            cmp r12, rbx	       783	vtls.c	FUNCTION_34	WHILE_1
0x4001ebf	            0x77de	                            ja 0x4001e9f	       783	vtls.c	FUNCTION_34	WHILE_1
0x4001ec1	      0x488d542420	                   lea rdx, [rsp + 0x20]	       791	vtls.c	FUNCTION_34	CALL_4
0x4001ec6	      0x488d742410	                   lea rsi, [rsp + 0x10]	       791	vtls.c	FUNCTION_34	CALL_4
0x4001ecb	          0x4889cf	                            mov rdi, rcx	       791	vtls.c	FUNCTION_34	CALL_4
0x4001ece	        0xc6040100	                 mov byte [rcx + rax], 0	       789	vtls.c	FUNCTION_34
0x4001ed2	      0x48894c2408	                mov qword [rsp + 8], rcx	       791	vtls.c	FUNCTION_34	CALL_4
0x4001ed7	      0xe800000000	                          call 0x4001edc	       791	vtls.c	FUNCTION_34	CALL_4
0x4001edc	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       793	vtls.c	FUNCTION_34	CALL_5
0x4001ee1	    0x4c8b25000000	            mov r12, qword [0x04001ee8] 	       793	vtls.c	FUNCTION_34	CALL_5
0x4001ee8	            0x89c3	                            mov ebx, eax	       791	vtls.c	FUNCTION_34	CALL_4
0x4001eea	          0x4889cf	                            mov rdi, rcx	       793	vtls.c	FUNCTION_34	CALL_5
0x4001eed	        0x41ff1424	                        call qword [r12]	       793	vtls.c	FUNCTION_34	CALL_5
0x4001ef1	            0x85db	                           test ebx, ebx	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x4001ef3	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001ef8	     0xf85effdffff	                           jne 0x4001ced	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x4001efe	      0x4c3b742420	            cmp r14, qword [rsp + 0x20] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f03	     0xf85e4fdffff	                           jne 0x4001ced	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f09	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f0e	          0x4c89f2	                            mov rdx, r14	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f11	          0x4889ef	                            mov rdi, rbp	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f14	      0xe800000000	                          call 0x4001f19	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001f19	          0x83f801	                              cmp eax, 1	       811	vtls.c	FUNCTION_35
0x4001f1c	            0x19db	                            sbb ebx, ebx	       811	vtls.c	FUNCTION_35
0x4001f1e	            0xf7d3	                                 not ebx	       811	vtls.c	FUNCTION_35
0x4001f20	          0x83e35a	                           and ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001f23	      0xe9c5fdffff	                           jmp 0x4001ced	       811	vtls.c	FUNCTION_35
0x4001f28	      0x4c8b742420	            mov r14, qword [rsp + 0x20] 	       811	vtls.c	FUNCTION_35
0x4001f2d	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001f32	      0xe949fdffff	                           jmp 0x4001c80	       811	vtls.c	FUNCTION_35
Curl_ssl_push_certinfo	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,2	68
0x40019a0	            0x4157	                                push r15	       727	vtls.c	FUNCTION_32
0x40019a2	            0x4156	                                push r14	       727	vtls.c	FUNCTION_32
0x40019a4	          0x4989ff	                            mov r15, rdi	       727	vtls.c	FUNCTION_32
0x40019a7	            0x4155	                                push r13	       727	vtls.c	FUNCTION_32
0x40019a9	            0x4154	                                push r12	       727	vtls.c	FUNCTION_32
0x40019ab	          0x4989d6	                            mov r14, rdx	       727	vtls.c	FUNCTION_32
0x40019ae	              0x55	                                push rbp	       727	vtls.c	FUNCTION_32
0x40019af	              0x53	                                push rbx	       727	vtls.c	FUNCTION_32
0x40019b0	          0x4889cf	                            mov rdi, rcx	       728	vtls.c	FUNCTION_32	CALL_1
0x40019b3	        0x4883ec28	                           sub rsp, 0x28	       727	vtls.c	FUNCTION_32
0x40019b7	        0x89742408	                mov dword [rsp + 8], esi	       727	vtls.c	FUNCTION_32
0x40019bb	      0x48894c2410	             mov qword [rsp + 0x10], rcx	       728	vtls.c	FUNCTION_32	CALL_1
0x40019c0	      0xe800000000	                          call 0x40019c5	       728	vtls.c	FUNCTION_32	CALL_1
0x40019c5	          0x4c89f7	                            mov rdi, r14	       692	vtls.c	FUNCTION_31	CALL_1
0x40019c8	          0x4989c4	                            mov r12, rax	       728	vtls.c	FUNCTION_32	CALL_1
0x40019cb	      0xe800000000	                          call 0x40019d0	       692	vtls.c	FUNCTION_31	CALL_1
0x40019d0	        0x498d1c04	                    lea rbx, [r12 + rax]	       693	vtls.c	FUNCTION_31
0x40019d4	          0x4989c5	                            mov r13, rax	       692	vtls.c	FUNCTION_31	CALL_1
0x40019d7	    0x488b05000000	            mov rax, qword [0x040019de] 	       695	vtls.c	FUNCTION_31	CALL_2
0x40019de	        0x488d7302	                      lea rsi, [rbx + 2]	       693	vtls.c	FUNCTION_31
0x40019e2	          0x4889f7	                            mov rdi, rsi	       695	vtls.c	FUNCTION_31	CALL_2
0x40019e5	      0x4889742418	             mov qword [rsp + 0x18], rsi	       695	vtls.c	FUNCTION_31	CALL_2
0x40019ea	            0xff10	                        call qword [rax]	       695	vtls.c	FUNCTION_31	CALL_2
0x40019ec	          0x4889c5	                            mov rbp, rax	       695	vtls.c	FUNCTION_31	CALL_2
0x40019ef	      0xb81b000000	                           mov eax, 0x1b	       695	vtls.c	FUNCTION_31	CALL_2
0x40019f4	          0x4885ed	                           test rbp, rbp	       696	vtls.c	FUNCTION_31	IF_1
0x40019f7	            0x745c	                            je 0x4001a55	       696	vtls.c	FUNCTION_31	IF_1
0x40019f9	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       700	vtls.c	FUNCTION_31
0x40019fe	    0x488d15000000	                   lea rdx, [0x04001a05]	       700	vtls.c	FUNCTION_31
0x4001a05	          0x4c89f1	                            mov rcx, r14	       700	vtls.c	FUNCTION_31
0x4001a08	          0x4889ef	                            mov rdi, rbp	       700	vtls.c	FUNCTION_31
0x4001a0b	            0x31c0	                            xor eax, eax	       700	vtls.c	FUNCTION_31
0x4001a0d	      0xe800000000	                          call 0x4001a12	       700	vtls.c	FUNCTION_31
0x4001a12	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	        53	string3.h	FUNCTION_64	CALL_3
0x4001a17	      0x4a8d7c2d01	                lea rdi, [rbp + r13 + 1]	        53	string3.h	FUNCTION_64	CALL_3
0x4001a1c	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_64	CALL_3
0x4001a1f	      0xe800000000	                          call 0x4001a24	        53	string3.h	FUNCTION_64	CALL_3
0x4001a24	      0xc6441d0100	            mov byte [rbp + rbx + 1], 0 	       706	vtls.c	FUNCTION_31
0x4001a29	      0x48635c2408	            movsxd rbx, dword [rsp + 8] 	       708	vtls.c	FUNCTION_31	CALL_4
0x4001a2e	          0x4889ee	                            mov rsi, rbp	       708	vtls.c	FUNCTION_31	CALL_4
0x4001a31	    0x498b87b85200	          mov rax, qword [r15 + 0x52b8] 	       708	vtls.c	FUNCTION_31	CALL_4
0x4001a38	        0x488b3cd8	            mov rdi, qword [rax + rbx*8]	       708	vtls.c	FUNCTION_31	CALL_4
0x4001a3c	      0xe800000000	                          call 0x4001a41	       708	vtls.c	FUNCTION_31	CALL_4
0x4001a41	            0x31d2	                            xor edx, edx	       691	vtls.c	FUNCTION_31
0x4001a43	          0x4885c0	                           test rax, rax	       709	vtls.c	FUNCTION_31	IF_2
0x4001a46	            0x7420	                            je 0x4001a68	       709	vtls.c	FUNCTION_31	IF_2
0x4001a48	    0x498b8fb85200	          mov rcx, qword [r15 + 0x52b8] 	       715	vtls.c	FUNCTION_31
0x4001a4f	        0x488904d9	            mov qword [rcx + rbx*8], rax	       715	vtls.c	FUNCTION_31
0x4001a53	            0x89d0	                            mov eax, edx	       716	vtls.c	FUNCTION_31
0x4001a55	        0x4883c428	                           add rsp, 0x28	       731	vtls.c	FUNCTION_32
0x4001a59	              0x5b	                                 pop rbx	       731	vtls.c	FUNCTION_32
0x4001a5a	              0x5d	                                 pop rbp	       731	vtls.c	FUNCTION_32
0x4001a5b	            0x415c	                                 pop r12	       731	vtls.c	FUNCTION_32
0x4001a5d	            0x415d	                                 pop r13	       731	vtls.c	FUNCTION_32
0x4001a5f	            0x415e	                                 pop r14	       731	vtls.c	FUNCTION_32
0x4001a61	            0x415f	                                 pop r15	       731	vtls.c	FUNCTION_32
0x4001a63	              0xc3	                                     ret	       731	vtls.c	FUNCTION_32
0x4001a64	         0xf1f4000	                         nop dword [rax]	       731	vtls.c	FUNCTION_32
0x4001a68	    0x488b15000000	            mov rdx, qword [0x04001a6f] 	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001a6f	      0x4889442408	                mov qword [rsp + 8], rax	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001a74	          0x4889ef	                            mov rdi, rbp	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001a77	            0xff12	                        call qword [rdx]	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001a79	    0x498b97b85200	          mov rdx, qword [r15 + 0x52b8] 	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001a80	        0x488b3cda	            mov rdi, qword [rdx + rbx*8]	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001a84	      0xe800000000	                          call 0x4001a89	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001a89	      0xba1b000000	                           mov edx, 0x1b	       712	vtls.c	FUNCTION_31	IF_2
0x4001a8e	      0x488b442408	                mov rax, qword [rsp + 8]	       712	vtls.c	FUNCTION_31	IF_2
0x4001a93	            0xebb3	                           jmp 0x4001a48	       712	vtls.c	FUNCTION_31	IF_2
Curl_ssl_version	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,2	3
0x4001730	    0x488b05000000	            mov rax, qword [0x04001737] 	       619	vtls.c	FUNCTION_26	CALL_2
0x4001737	        0x488b4030	            mov rax, qword [rax + 0x30] 	       619	vtls.c	FUNCTION_26	CALL_2
0x400173b	            0xffe0	                                 jmp rax	       619	vtls.c	FUNCTION_26	CALL_2
Curl_none_md5sum	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	30
0x4000200	            0x4155	                                push r13	      1077	vtls.c	FUNCTION_53
0x4000202	            0x4154	                                push r12	      1077	vtls.c	FUNCTION_53
0x4000204	          0x4989fc	                            mov r12, rdi	      1077	vtls.c	FUNCTION_53
0x4000207	              0x55	                                push rbp	      1077	vtls.c	FUNCTION_53
0x4000208	              0x53	                                push rbx	      1077	vtls.c	FUNCTION_53
0x4000209	          0x4989f5	                            mov r13, rsi	      1077	vtls.c	FUNCTION_53
0x400020c	          0x4889d5	                            mov rbp, rdx	      1077	vtls.c	FUNCTION_53
0x400020f	        0x4883ec08	                              sub rsp, 8	      1077	vtls.c	FUNCTION_53
0x4000213	    0x488b3d000000	            mov rdi, qword [0x0400021a] 	      1082	vtls.c	FUNCTION_53	CALL_1
0x400021a	      0xe800000000	                          call 0x400021f	      1082	vtls.c	FUNCTION_53	CALL_1
0x400021f	          0x4889c3	                            mov rbx, rax	      1082	vtls.c	FUNCTION_53	CALL_1
0x4000222	      0xb81b000000	                           mov eax, 0x1b	      1082	vtls.c	FUNCTION_53	CALL_1
0x4000227	          0x4885db	                           test rbx, rbx	      1083	vtls.c	FUNCTION_53	IF_1
0x400022a	            0x7422	                            je 0x400024e	      1083	vtls.c	FUNCTION_53	IF_1
0x400022c	          0x4c89ef	                            mov rdi, r13	      1085	vtls.c	FUNCTION_53	CALL_3
0x400022f	      0xe800000000	                          call 0x4000234	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000234	          0x4c89e6	                            mov rsi, r12	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000237	            0x89c2	                            mov edx, eax	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000239	          0x4889df	                            mov rdi, rbx	      1085	vtls.c	FUNCTION_53	CALL_3
0x400023c	      0xe800000000	                          call 0x4000241	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000241	          0x4889ee	                            mov rsi, rbp	      1086	vtls.c	FUNCTION_53	CALL_4
0x4000244	          0x4889df	                            mov rdi, rbx	      1086	vtls.c	FUNCTION_53	CALL_4
0x4000247	      0xe800000000	                          call 0x400024c	      1086	vtls.c	FUNCTION_53	CALL_4
0x400024c	            0x31c0	                            xor eax, eax	      1087	vtls.c	FUNCTION_53
0x400024e	        0x4883c408	                              add rsp, 8	      1088	vtls.c	FUNCTION_53
0x4000252	              0x5b	                                 pop rbx	      1088	vtls.c	FUNCTION_53
0x4000253	              0x5d	                                 pop rbp	      1088	vtls.c	FUNCTION_53
0x4000254	            0x415c	                                 pop r12	      1088	vtls.c	FUNCTION_53
0x4000256	            0x415d	                                 pop r13	      1088	vtls.c	FUNCTION_53
0x4000258	              0xc3	                                     ret	      1088	vtls.c	FUNCTION_53
Curl_ssl_sessionid_unlock	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	10
0x4000e40	          0x488b3f	                    mov rdi, qword [rdi]	       293	vtls.c	FUNCTION_12	IF_1
0x4000e43	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       293	vtls.c	FUNCTION_12	IF_1
0x4000e4a	          0x4885c0	                           test rax, rax	       293	vtls.c	FUNCTION_12	IF_1
0x4000e4d	            0x7405	                            je 0x4000e54	       293	vtls.c	FUNCTION_12	IF_1
0x4000e4f	          0xf60010	                   test byte [rax], 0x10	       293	vtls.c	FUNCTION_12	IF_1
0x4000e52	            0x750c	                           jne 0x4000e60	       293	vtls.c	FUNCTION_12	IF_1
0x4000e54	            0xf3c3	                                     ret	       293	vtls.c	FUNCTION_12	IF_1
0x4000e56	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       293	vtls.c	FUNCTION_12	IF_1
0x4000e60	      0xbe04000000	                              mov esi, 4	       294	vtls.c	FUNCTION_12	CALL_1
0x4000e65	      0xe900000000	                           jmp 0x4000e6a	       294	vtls.c	FUNCTION_12	CALL_1
Curl_none_set_engine_default	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x40000b0	      0xb804000000	                              mov eax, 4	      1061	vtls.c	FUNCTION_50
0x40000b5	              0xc3	                                     ret	      1061	vtls.c	FUNCTION_50
Curl_ssl_set_engine_default	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x40016b0	    0x488b05000000	            mov rax, qword [0x040016b7] 	       580	vtls.c	FUNCTION_23	CALL_1
0x40016b7	    0x488b80980000	            mov rax, qword [rax + 0x98] 	       580	vtls.c	FUNCTION_23	CALL_1
0x40016be	            0xffe0	                                 jmp rax	       580	vtls.c	FUNCTION_23	CALL_1
Curl_ssl_close_all	ELSE,0:FOR,1:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,3	74
0x4001480	            0x4155	                                push r13	       497	vtls.c	FUNCTION_17
0x4001482	            0x4154	                                push r12	       497	vtls.c	FUNCTION_17
0x4001484	          0x4989fd	                            mov r13, rdi	       497	vtls.c	FUNCTION_17
0x4001487	              0x55	                                push rbp	       497	vtls.c	FUNCTION_17
0x4001488	              0x53	                                push rbx	       497	vtls.c	FUNCTION_17
0x4001489	        0x4883ec08	                              sub rsp, 8	       497	vtls.c	FUNCTION_17
0x400148d	    0x488b87504d00	          mov rax, qword [rdi + 0x4d50] 	       500	vtls.c	FUNCTION_17	IF_1
0x4001494	          0x4885c0	                           test rax, rax	       500	vtls.c	FUNCTION_17	IF_1
0x4001497	     0xf840d010000	                            je 0x40015aa	       500	vtls.c	FUNCTION_17	IF_1
0x400149d	    0x488b97b80000	            mov rdx, qword [rdi + 0xb8] 	       500	vtls.c	FUNCTION_17	IF_1
0x40014a4	          0x4885d2	                           test rdx, rdx	       500	vtls.c	FUNCTION_17	IF_1
0x40014a7	            0x7409	                            je 0x40014b2	       500	vtls.c	FUNCTION_17	IF_1
0x40014a9	          0xf60210	                   test byte [rdx], 0x10	       500	vtls.c	FUNCTION_17	IF_1
0x40014ac	     0xf85f8000000	                           jne 0x40015aa	       500	vtls.c	FUNCTION_17	IF_1
0x40014b2	    0x498b8d780700	           mov rcx, qword [r13 + 0x778] 	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014b9	          0x4885c9	                           test rcx, rcx	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014bc	     0xf8405010000	                            je 0x40015c7	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014c2	    0x488b2d000000	            mov rbp, qword [0x040014c9] 	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014c9	          0x4531e4	                          xor r12d, r12d	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014cc	         0xf1f4000	                         nop dword [rax]	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x40014d0	          0x4c89e2	                            mov rdx, r12	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x40014d3	        0x48c1e207	                              shl rdx, 7	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x40014d7	        0x4a8d1ce2	                  lea rbx, [rdx + r12*8]	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x40014db	          0x4801c3	                            add rbx, rax	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x40014de	        0x488b7b18	            mov rdi, qword [rbx + 0x18] 	       367	vtls.c	FUNCTION_14	IF_1
0x40014e2	          0x4885ff	                           test rdi, rdi	       367	vtls.c	FUNCTION_14	IF_1
0x40014e5	     0xf84a1000000	                            je 0x400158c	       367	vtls.c	FUNCTION_14	IF_1
0x40014eb	    0x488b05000000	            mov rax, qword [0x040014f2] 	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x40014f2	    0xff9088000000	                 call qword [rax + 0x88]	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x40014f8	        0x488b7b50	            mov rdi, qword [rbx + 0x50] 	       128	vtls.c	FUNCTION_3	CALL_1
0x40014fc	    0x48c743180000	               mov qword [rbx + 0x18], 0	       373	vtls.c	FUNCTION_14	IF_1
0x4001504	    0x48c743280000	               mov qword [rbx + 0x28], 0	       374	vtls.c	FUNCTION_14	IF_1
0x400150c	          0xff5500	                        call qword [rbp]	       128	vtls.c	FUNCTION_3	CALL_1
0x400150f	        0x488b7b58	            mov rdi, qword [rbx + 0x58] 	       129	vtls.c	FUNCTION_3	CALL_2
0x4001513	    0x48c743500000	               mov qword [rbx + 0x50], 0	       128	vtls.c	FUNCTION_3	CALL_1
0x400151b	          0xff5500	                        call qword [rbp]	       129	vtls.c	FUNCTION_3	CALL_2
0x400151e	        0x488b7b60	            mov rdi, qword [rbx + 0x60] 	       130	vtls.c	FUNCTION_3	CALL_3
0x4001522	    0x48c743580000	               mov qword [rbx + 0x58], 0	       129	vtls.c	FUNCTION_3	CALL_2
0x400152a	          0xff5500	                        call qword [rbp]	       130	vtls.c	FUNCTION_3	CALL_3
0x400152d	        0x488b7b68	            mov rdi, qword [rbx + 0x68] 	       131	vtls.c	FUNCTION_3	CALL_4
0x4001531	    0x48c743600000	               mov qword [rbx + 0x60], 0	       130	vtls.c	FUNCTION_3	CALL_3
0x4001539	          0xff5500	                        call qword [rbp]	       131	vtls.c	FUNCTION_3	CALL_4
0x400153c	        0x488b7b70	            mov rdi, qword [rbx + 0x70] 	       132	vtls.c	FUNCTION_3	CALL_5
0x4001540	    0x48c743680000	               mov qword [rbx + 0x68], 0	       131	vtls.c	FUNCTION_3	CALL_4
0x4001548	          0xff5500	                        call qword [rbp]	       132	vtls.c	FUNCTION_3	CALL_5
0x400154b	        0x488b7b78	            mov rdi, qword [rbx + 0x78] 	       133	vtls.c	FUNCTION_3	CALL_6
0x400154f	    0x48c743700000	               mov qword [rbx + 0x70], 0	       132	vtls.c	FUNCTION_3	CALL_5
0x4001557	          0xff5500	                        call qword [rbp]	       133	vtls.c	FUNCTION_3	CALL_6
0x400155a	          0x488b3b	                    mov rdi, qword [rbx]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x400155d	    0x48c743780000	               mov qword [rbx + 0x78], 0	       133	vtls.c	FUNCTION_3	CALL_6
0x4001565	          0xff5500	                        call qword [rbp]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4001568	    0x48c703000000	                      mov qword [rbx], 0	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x400156f	        0x488b7b08	                mov rdi, qword [rbx + 8]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4001573	          0xff5500	                        call qword [rbp]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4001576	    0x498b85504d00	          mov rax, qword [r13 + 0x4d50] 	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x400157d	    0x498b8d780700	           mov rcx, qword [r13 + 0x778] 	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4001584	    0x48c743080000	                  mov qword [rbx + 8], 0	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x400158c	        0x4983c401	                              add r12, 1	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4001590	          0x4939cc	                            cmp r12, rcx	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4001593	     0xf8237ffffff	                            jb 0x40014d0	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4001599	          0x4889c7	                            mov rdi, rax	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x400159c	          0xff5500	                        call qword [rbp]	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x400159f	    0x49c785504d00	            mov qword [r13 + 0x4d50], 0 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x40015aa	    0x488b05000000	            mov rax, qword [0x040015b1] 	       509	vtls.c	FUNCTION_17	CALL_3
0x40015b1	          0x4c89ef	                            mov rdi, r13	       509	vtls.c	FUNCTION_17	CALL_3
0x40015b4	    0x488b80800000	            mov rax, qword [rax + 0x80] 	       509	vtls.c	FUNCTION_17	CALL_3
0x40015bb	        0x4883c408	                              add rsp, 8	       510	vtls.c	FUNCTION_17
0x40015bf	              0x5b	                                 pop rbx	       510	vtls.c	FUNCTION_17
0x40015c0	              0x5d	                                 pop rbp	       510	vtls.c	FUNCTION_17
0x40015c1	            0x415c	                                 pop r12	       510	vtls.c	FUNCTION_17
0x40015c3	            0x415d	                                 pop r13	       510	vtls.c	FUNCTION_17
0x40015c5	            0xffe0	                                 jmp rax	       509	vtls.c	FUNCTION_17	CALL_3
0x40015c7	    0x488b2d000000	            mov rbp, qword [0x040015ce] 	       509	vtls.c	FUNCTION_17	CALL_3
0x40015ce	            0xebc9	                           jmp 0x4001599	       509	vtls.c	FUNCTION_17	CALL_3
Curl_ssl_init_certinfo	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,2	46
0x40017e0	            0x4155	                                push r13	       661	vtls.c	FUNCTION_30
0x40017e2	            0x4154	                                push r12	       661	vtls.c	FUNCTION_30
0x40017e4	          0x4189f5	                           mov r13d, esi	       661	vtls.c	FUNCTION_30
0x40017e7	              0x55	                                push rbp	       661	vtls.c	FUNCTION_30
0x40017e8	              0x53	                                push rbx	       661	vtls.c	FUNCTION_30
0x40017e9	          0x4889fb	                            mov rbx, rdi	       661	vtls.c	FUNCTION_30
0x40017ec	        0x4883ec08	                              sub rsp, 8	       661	vtls.c	FUNCTION_30
0x40017f0	    0x83bfb0520000	             cmp dword [rdi + 0x52b0], 0	       647	vtls.c	FUNCTION_29	IF_1
0x40017f7	            0x753f	                           jne 0x4001838	       647	vtls.c	FUNCTION_29	IF_1
0x40017f9	    0x488b05000000	            mov rax, qword [0x04001800] 	       669	vtls.c	FUNCTION_30	CALL_2
0x4001800	          0x4963fd	                        movsxd rdi, r13d	       669	vtls.c	FUNCTION_30	CALL_2
0x4001803	      0xbe08000000	                              mov esi, 8	       669	vtls.c	FUNCTION_30	CALL_2
0x4001808	            0xff10	                        call qword [rax]	       669	vtls.c	FUNCTION_30	CALL_2
0x400180a	          0x4885c0	                           test rax, rax	       670	vtls.c	FUNCTION_30	IF_1
0x400180d	      0xba1b000000	                           mov edx, 0x1b	       671	vtls.c	FUNCTION_30	IF_1
0x4001812	            0x7410	                            je 0x4001824	       670	vtls.c	FUNCTION_30	IF_1
0x4001814	    0x4489abb05200	         mov dword [rbx + 0x52b0], r13d 	       673	vtls.c	FUNCTION_30
0x400181b	    0x488983b85200	          mov qword [rbx + 0x52b8], rax 	       674	vtls.c	FUNCTION_30
0x4001822	            0x31d2	                            xor edx, edx	       676	vtls.c	FUNCTION_30
0x4001824	        0x4883c408	                              add rsp, 8	       677	vtls.c	FUNCTION_30
0x4001828	            0x89d0	                            mov eax, edx	       677	vtls.c	FUNCTION_30
0x400182a	              0x5b	                                 pop rbx	       677	vtls.c	FUNCTION_30
0x400182b	              0x5d	                                 pop rbp	       677	vtls.c	FUNCTION_30
0x400182c	            0x415c	                                 pop r12	       677	vtls.c	FUNCTION_30
0x400182e	            0x415d	                                 pop r13	       677	vtls.c	FUNCTION_30
0x4001830	              0xc3	                                     ret	       677	vtls.c	FUNCTION_30
0x4001831	     0xf1f80000000	                         nop dword [rax]	       677	vtls.c	FUNCTION_30
0x4001838	      0xbd00000000	                              mov ebp, 0	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400183d	    0x41bc00000000	                             mov r12d, 0	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001843	            0x7e33	                           jle 0x4001878	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001845	           0xf1f00	                         nop dword [rax]	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001848	    0x488b83b85200	          mov rax, qword [rbx + 0x52b8] 	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x400184f	        0x4183c401	                             add r12d, 1	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001853	        0x488b3c28	              mov rdi, qword [rax + rbp]	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x4001857	      0xe800000000	                          call 0x400185c	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x400185c	    0x488b83b85200	          mov rax, qword [rbx + 0x52b8] 	       651	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001863	    0x48c704280000	                mov qword [rax + rbp], 0	       651	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400186b	        0x4883c508	                              add rbp, 8	       651	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400186f	    0x443ba3b05200	         cmp r12d, dword [rbx + 0x52b0] 	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001876	            0x7cd0	                            jl 0x4001848	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001878	    0x488b05000000	            mov rax, qword [0x0400187f] 	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x400187f	    0x488bbbb85200	          mov rdi, qword [rbx + 0x52b8] 	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x4001886	            0xff10	                        call qword [rax]	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x4001888	    0x48c783b85200	            mov qword [rbx + 0x52b8], 0 	       655	vtls.c	FUNCTION_29	IF_1
0x4001893	    0xc783b0520000	            mov dword [rbx + 0x52b0], 0 	       656	vtls.c	FUNCTION_29	IF_1
0x400189d	      0xe957ffffff	                           jmp 0x40017f9	       656	vtls.c	FUNCTION_29	IF_1
Curl_ssl_delsessionid	ELSE,0:FOR,1:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	21
0x4001190	          0x488b07	                    mov rax, qword [rdi]	       389	vtls.c	FUNCTION_15
0x4001193	    0x488b88780700	           mov rcx, qword [rax + 0x778] 	       391	vtls.c	FUNCTION_15	FOR_1
0x400119a	          0x4885c9	                           test rcx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x400119d	            0x7439	                            je 0x40011d8	       391	vtls.c	FUNCTION_15	FOR_1
0x400119f	    0x488bb8504d00	          mov rdi, qword [rax + 0x4d50] 	       392	vtls.c	FUNCTION_15	FOR_1
0x40011a6	            0x31d2	                            xor edx, edx	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011a8	        0x483b7718	            cmp rsi, qword [rdi + 0x18] 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011ac	    0x488d87880000	                   lea rax, [rdi + 0x88]	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011b3	            0x751a	                           jne 0x40011cf	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011b5	            0xeb29	                           jmp 0x40011e0	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011b7	    0x660f1f840000	                    nop word [rax + rax]	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011c0	          0x4889c7	                            mov rdi, rax	       392	vtls.c	FUNCTION_15	FOR_1
0x40011c3	    0x480588000000	                           add rax, 0x88	       392	vtls.c	FUNCTION_15	FOR_1
0x40011c9	        0x48397090	            cmp qword [rax - 0x70], rsi 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011cd	            0x7411	                            je 0x40011e0	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x40011cf	        0x4883c201	                              add rdx, 1	       391	vtls.c	FUNCTION_15	FOR_1
0x40011d3	          0x4839ca	                            cmp rdx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x40011d6	            0x75e8	                           jne 0x40011c0	       391	vtls.c	FUNCTION_15	FOR_1
0x40011d8	            0xf3c3	                                     ret	       391	vtls.c	FUNCTION_15	FOR_1
0x40011da	    0x660f1f440000	                    nop word [rax + rax]	       391	vtls.c	FUNCTION_15	FOR_1
0x40011e0	      0xe9ebfeffff	           jmp sym.Curl_ssl_kill_session	       395	vtls.c	FUNCTION_15	FOR_1	IF_1	CALL_1
Curl_multissl_get_internals	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,2	61
0x4000600	    0x488d05000000	                   lea rax, [0x04000607]	      1272	vtls.c	FUNCTION_61	IF_1
0x4000607	    0x483905000000	            cmp qword [0x0400060e], rax 	      1272	vtls.c	FUNCTION_61	IF_1
0x400060e	            0x7408	                            je 0x4000618	      1272	vtls.c	FUNCTION_61	IF_1
0x4000610	            0x31c0	                            xor eax, eax	      1131	vtls.c	FUNCTION_58
0x4000612	              0xc3	                                     ret	      1131	vtls.c	FUNCTION_58
0x4000613	       0xf1f440000	                   nop dword [rax + rax]	      1131	vtls.c	FUNCTION_58
0x4000618	    0x48833d000000	               cmp qword [0x04000620], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x4000620	            0x74ee	                            je 0x4000610	      1280	vtls.c	FUNCTION_61	IF_3
0x4000622	            0x4157	                                push r15	      1127	vtls.c	FUNCTION_58
0x4000624	            0x4156	                                push r14	      1127	vtls.c	FUNCTION_58
0x4000626	            0x4155	                                push r13	      1127	vtls.c	FUNCTION_58
0x4000628	            0x4154	                                push r12	      1127	vtls.c	FUNCTION_58
0x400062a	          0x4189f4	                           mov r12d, esi	      1127	vtls.c	FUNCTION_58
0x400062d	              0x55	                                push rbp	      1127	vtls.c	FUNCTION_58
0x400062e	              0x53	                                push rbx	      1127	vtls.c	FUNCTION_58
0x400062f	          0x4889fd	                            mov rbp, rdi	      1127	vtls.c	FUNCTION_58
0x4000632	    0x488d3d000000	                   lea rdi, [0x04000639]	      1283	vtls.c	FUNCTION_61	CALL_1
0x4000639	        0x4883ec08	                              sub rsp, 8	      1127	vtls.c	FUNCTION_58
0x400063d	      0xe800000000	                          call 0x4000642	      1283	vtls.c	FUNCTION_61	CALL_1
0x4000642	          0x4989c5	                            mov r13, rax	      1283	vtls.c	FUNCTION_61	CALL_1
0x4000645	    0x488b05000000	            mov rax, qword [0x0400064c] 	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x400064c	          0x4d85ed	                           test r13, r13	      1288	vtls.c	FUNCTION_61	IF_5
0x400064f	            0x7456	                            je 0x40006a7	      1288	vtls.c	FUNCTION_61	IF_5
0x4000651	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000654	            0x7451	                            je 0x40006a7	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000656	            0x31db	                            xor ebx, ebx	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000658	    0x4c8d3d000000	                   lea r15, [0x0400065f]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x400065f	            0xeb14	                           jmp 0x4000675	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000661	     0xf1f80000000	                         nop dword [rax]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000668	        0x4883c301	                              add rbx, 1	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x400066c	        0x498b04df	            mov rax, qword [r15 + rbx*8]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000670	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000673	            0x742b	                            je 0x40006a0	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000675	        0x488b7008	                mov rsi, qword [rax + 8]	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000679	          0x4c89ef	                            mov rdi, r13	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x400067c	          0x4c63f3	                         movsxd r14, ebx	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x400067f	      0xe800000000	                          call 0x4000684	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000684	            0x85c0	                           test eax, eax	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000686	            0x74e0	                            je 0x4000668	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4000688	        0x4b8b04f7	            mov rax, qword [r15 + r14*8]	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x400068c	          0x4c89ef	                            mov rdi, r13	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x400068f	    0x488905000000	            mov qword [0x04000696], rax 	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000696	      0xe800000000	                          call 0x400069b	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x400069b	            0xeb19	                           jmp 0x40006b6	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x400069d	           0xf1f00	                         nop dword [rax]	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x40006a0	    0x488b05000000	            mov rax, qword [0x040006a7] 	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x40006a7	          0x4c89ef	                            mov rdi, r13	      1300	vtls.c	FUNCTION_61	CALL_4
0x40006aa	    0x488905000000	            mov qword [0x040006b1], rax 	      1299	vtls.c	FUNCTION_61
0x40006b1	      0xe800000000	                          call 0x40006b6	      1300	vtls.c	FUNCTION_61	CALL_4
0x40006b6	    0x488b05000000	            mov rax, qword [0x040006bd] 	      1130	vtls.c	FUNCTION_58	CALL_2
0x40006bd	          0x4489e6	                           mov esi, r12d	      1130	vtls.c	FUNCTION_58	CALL_2
0x40006c0	          0x4889ef	                            mov rdi, rbp	      1130	vtls.c	FUNCTION_58	CALL_2
0x40006c3	        0x488b4070	            mov rax, qword [rax + 0x70] 	      1130	vtls.c	FUNCTION_58	CALL_2
0x40006c7	        0x4883c408	                              add rsp, 8	      1131	vtls.c	FUNCTION_58
0x40006cb	              0x5b	                                 pop rbx	      1131	vtls.c	FUNCTION_58
0x40006cc	              0x5d	                                 pop rbp	      1131	vtls.c	FUNCTION_58
0x40006cd	            0x415c	                                 pop r12	      1131	vtls.c	FUNCTION_58
0x40006cf	            0x415d	                                 pop r13	      1131	vtls.c	FUNCTION_58
0x40006d1	            0x415e	                                 pop r14	      1131	vtls.c	FUNCTION_58
0x40006d3	            0x415f	                                 pop r15	      1131	vtls.c	FUNCTION_58
0x40006d5	            0xffe0	                                 jmp rax	      1130	vtls.c	FUNCTION_58	CALL_2
Curl_ssl_getsessionid	ELSE,1:FOR,1:functions,0:DO,0:SWITCH,0:WHILE,0:IF,5:CALL,8	142
0x4000e70	            0x4157	                                push r15	       305	vtls.c	FUNCTION_13
0x4000e72	            0x4156	                                push r14	       305	vtls.c	FUNCTION_13
0x4000e74	            0x4155	                                push r13	       305	vtls.c	FUNCTION_13
0x4000e76	            0x4154	                                push r12	       305	vtls.c	FUNCTION_13
0x4000e78	              0x55	                                push rbp	       305	vtls.c	FUNCTION_13
0x4000e79	              0x53	                                push rbx	       305	vtls.c	FUNCTION_13
0x4000e7a	        0x4883ec38	                           sub rsp, 0x38	       305	vtls.c	FUNCTION_13
0x4000e7e	    0x8b8778010000	           mov eax, dword [rdi + 0x178] 	       312	vtls.c	FUNCTION_13	CALL_1
0x4000e84	          0x4c8b2f	                    mov r13, qword [rdi]	       307	vtls.c	FUNCTION_13
0x4000e87	          0x83f802	                              cmp eax, 2	       312	vtls.c	FUNCTION_13	CALL_1
0x4000e8a	     0xf84d0010000	                            je 0x4001060	       312	vtls.c	FUNCTION_13	CALL_1
0x4000e90	    0x488d8ff80200	                  lea rcx, [rdi + 0x2f8]	       314	vtls.c	FUNCTION_13
0x4000e97	          0x83f802	                              cmp eax, 2	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000e9a	    0x488bafd80000	            mov rbp, qword [rdi + 0xd8] 	       316	vtls.c	FUNCTION_13
0x4000ea1	      0x48894c2410	             mov qword [rsp + 0x10], rcx	       314	vtls.c	FUNCTION_13
0x4000ea6	    0x8b8f98010000	           mov ecx, dword [rdi + 0x198] 	       318	vtls.c	FUNCTION_13
0x4000eac	    0x48c706000000	                      mov qword [rsi], 0	       319	vtls.c	FUNCTION_13
0x4000eb3	        0x894c2408	                mov dword [rsp + 8], ecx	       318	vtls.c	FUNCTION_13
0x4000eb7	     0xf84d8010000	                            je 0x4001095	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000ebd	    0x450fb6a5fb05	         movzx r12d, byte [r13 + 0x5fb] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000ec5	        0x4183f401	                             xor r12d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000ec9	          0x4584e4	                         test r12b, r12b	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000ecc	     0xf8546010000	                           jne 0x4001018	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000ed2	    0x498b85b80000	            mov rax, qword [r13 + 0xb8] 	       328	vtls.c	FUNCTION_13	IF_2
0x4000ed9	          0x4885c0	                           test rax, rax	       328	vtls.c	FUNCTION_13	IF_2
0x4000edc	            0x7409	                            je 0x4000ee7	       328	vtls.c	FUNCTION_13	IF_2
0x4000ede	          0xf60010	                   test byte [rax], 0x10	       328	vtls.c	FUNCTION_13	IF_2
0x4000ee1	     0xf8549010000	                           jne 0x4001030	       328	vtls.c	FUNCTION_13	IF_2
0x4000ee7	    0x498d85584d00	                 lea rax, [r13 + 0x4d58]	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000eee	      0x4889442418	             mov qword [rsp + 0x18], rax	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000ef3	    0x4d8b8d780700	            mov r9, qword [r13 + 0x778] 	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000efa	          0x4d85c9	                             test r9, r9	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000efd	     0xf8415010000	                            je 0x4001018	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f03	      0x4889542428	             mov qword [rsp + 0x28], rdx	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f08	      0x4889742420	             mov qword [rsp + 0x20], rsi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f0d	          0x4889fb	                            mov rbx, rdi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f10	          0x4531f6	                          xor r14d, r14d	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f13	            0xeb1e	                           jmp 0x4000f33	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f15	           0xf1f00	                         nop dword [rax]	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f18	      0x49837f0800	                  cmp qword [r15 + 8], 0	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f1d	            0x7461	                            je 0x4000f80	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f1f	    0x4d8b8d780700	            mov r9, qword [r13 + 0x778] 	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f26	        0x4983c601	                              add r14, 1	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f2a	          0x4d39ce	                             cmp r14, r9	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f2d	     0xf83e5000000	                           jae 0x4001018	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f33	          0x4c89f0	                            mov rax, r14	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f36	        0x48c1e007	                              shl rax, 7	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f3a	        0x4a8d14f0	                  lea rdx, [rax + r14*8]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f3e	    0x490395504d00	           add rdx, qword [r13 + 0x4d50]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f45	      0x48837a1800	               cmp qword [rdx + 0x18], 0	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000f4a	          0x4989d7	                            mov r15, rdx	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000f4d	            0x74d7	                            je 0x4000f26	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000f4f	          0x488b32	                    mov rsi, qword [rdx]	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f52	          0x4889ef	                            mov rdi, rbp	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f55	      0xe800000000	                          call 0x4000f5a	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f5a	            0x85c0	                           test eax, eax	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f5c	            0x74c1	                            je 0x4000f1f	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f5e	    0x80bb9b030000	               cmp byte [rbx + 0x39b], 0	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f65	            0x74b1	                            je 0x4000f18	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000f67	        0x498b7708	                mov rsi, qword [r15 + 8]	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f6b	          0x4885f6	                           test rsi, rsi	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f6e	            0x74af	                            je 0x4000f1f	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f70	    0x488bbb000100	           mov rdi, qword [rbx + 0x100] 	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000f77	      0xe800000000	                          call 0x4000f7c	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000f7c	            0x85c0	                           test eax, eax	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f7e	            0x749f	                            je 0x4000f1f	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f80	    0x80bb9c030000	               cmp byte [rbx + 0x39c], 0	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000f87	     0xf84b3000000	                            je 0x4001040	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000f8d	        0x418b4734	            mov eax, dword [r15 + 0x34] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f91	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f94	            0x7489	                            je 0x4000f1f	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f96	    0x3b839c010000	           cmp eax, dword [rbx + 0x19c] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f9c	            0x7581	                           jne 0x4000f1f	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000f9e	        0x8b442408	                mov eax, dword [rsp + 8]	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fa2	        0x41394730	            cmp dword [r15 + 0x30], eax 	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fa6	     0xf8573ffffff	                           jne 0x4000f1f	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fac	    0x488b83e00300	           mov rax, qword [rbx + 0x3e0] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fb3	        0x498b7710	            mov rsi, qword [r15 + 0x10] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fb7	          0x488b38	                    mov rdi, qword [rax]	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fba	      0xe800000000	                          call 0x4000fbf	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fbf	            0x85c0	                           test eax, eax	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fc1	     0xf8458ffffff	                            je 0x4000f1f	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fc7	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000fcc	        0x498d7738	                   lea rsi, [r15 + 0x38]	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000fd0	      0xe800000000	                          call 0x4000fd5	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000fd5	            0x84c0	                             test al, al	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fd7	     0xf8442ffffff	                            je 0x4000f1f	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000fdd	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fe2	          0x488b01	                    mov rax, qword [rcx]	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fe5	      0x4889442408	                mov qword [rsp + 8], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fea	        0x4883c001	                              add rax, 1	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000fee	          0x488901	                    mov qword [rcx], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ff1	        0x49894728	             mov qword [r15 + 0x28], rax	       350	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ff5	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ffa	        0x498b4718	            mov rax, qword [r15 + 0x18] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ffe	          0x488901	                    mov qword [rcx], rax	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4001001	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4001006	          0x4885c9	                           test rcx, rcx	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4001009	            0x7413	                            je 0x400101e	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x400100b	        0x498b4720	            mov rax, qword [r15 + 0x20] 	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x400100f	          0x488901	                    mov qword [rcx], rax	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4001012	            0xeb0a	                           jmp 0x400101e	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4001014	         0xf1f4000	                         nop dword [rax]	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4001018	    0x41bc01000000	                             mov r12d, 1	       325	vtls.c	FUNCTION_13	IF_1
0x400101e	        0x4883c438	                           add rsp, 0x38	       360	vtls.c	FUNCTION_13
0x4001022	          0x4489e0	                           mov eax, r12d	       360	vtls.c	FUNCTION_13
0x4001025	              0x5b	                                 pop rbx	       360	vtls.c	FUNCTION_13
0x4001026	              0x5d	                                 pop rbp	       360	vtls.c	FUNCTION_13
0x4001027	            0x415c	                                 pop r12	       360	vtls.c	FUNCTION_13
0x4001029	            0x415d	                                 pop r13	       360	vtls.c	FUNCTION_13
0x400102b	            0x415e	                                 pop r14	       360	vtls.c	FUNCTION_13
0x400102d	            0x415f	                                 pop r15	       360	vtls.c	FUNCTION_13
0x400102f	              0xc3	                                     ret	       360	vtls.c	FUNCTION_13
0x4001030	    0x4805c0000000	                           add rax, 0xc0	       329	vtls.c	FUNCTION_13	IF_2
0x4001036	      0x4889442418	             mov qword [rsp + 0x18], rax	       329	vtls.c	FUNCTION_13	IF_2
0x400103b	      0xe9b3feffff	                           jmp 0x4000ef3	       329	vtls.c	FUNCTION_13	IF_2
0x4001040	      0x41837f34ff	cmp dword [r15 + 0x34], 0xffffffffffffffff	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4001045	     0xf85d4feffff	                           jne 0x4000f1f	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x400104b	        0x8b442408	                mov eax, dword [rsp + 8]	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x400104f	        0x41394730	            cmp dword [r15 + 0x30], eax 	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4001053	     0xf85c6feffff	                           jne 0x4000f1f	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4001059	      0xe94effffff	                           jmp 0x4000fac	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x400105e	            0x6690	                                     nop	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4001060	          0x4863c9	                         movsxd rcx, ecx	       312	vtls.c	FUNCTION_13	CALL_1
0x4001063	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       312	vtls.c	FUNCTION_13	CALL_1
0x400106b	     0xf851ffeffff	                           jne 0x4000e90	       312	vtls.c	FUNCTION_13	CALL_1
0x4001071	    0x488d87480300	                  lea rax, [rdi + 0x348]	       314	vtls.c	FUNCTION_13
0x4001078	    0x488baf600100	           mov rbp, qword [rdi + 0x160] 	       316	vtls.c	FUNCTION_13
0x400107f	      0x4889442410	             mov qword [rsp + 0x10], rax	       314	vtls.c	FUNCTION_13
0x4001084	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	       318	vtls.c	FUNCTION_13
0x400108a	    0x48c706000000	                      mov qword [rsi], 0	       319	vtls.c	FUNCTION_13
0x4001091	        0x89442408	                mov dword [rsp + 8], eax	       318	vtls.c	FUNCTION_13
0x4001095	            0x31c0	                            xor eax, eax	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4001097	    0x83bf5c020000	cmp dword [rdi + 0x25c], 0xffffffffffffffff	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x400109e	           0xf95c0	                                setne al	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010a1	        0x488d0c00	                    lea rcx, [rax + rax]	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010a5	          0x4801c8	                            add rax, rcx	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010a8	    0x83bcc7c40200	     cmp dword [rdi + rax*8 + 0x2c4], 2 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010b0	     0xf8407feffff	                            je 0x4000ebd	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010b6	    0x450fb6a5c306	         movzx r12d, byte [r13 + 0x6c3] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010be	        0x4183f401	                             xor r12d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40010c2	      0xe902feffff	                           jmp 0x4000ec9	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
Curl_ssl_init	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	9
0x4000a80	    0x803d00000000	                cmp byte [0x04000a87], 0	       164	vtls.c	FUNCTION_5	IF_1
0x4000a87	            0x7407	                            je 0x4000a90	       164	vtls.c	FUNCTION_5	IF_1
0x4000a89	      0xb801000000	                              mov eax, 1	       169	vtls.c	FUNCTION_5
0x4000a8e	              0xc3	                                     ret	       169	vtls.c	FUNCTION_5
0x4000a8f	              0x90	                                     nop	       169	vtls.c	FUNCTION_5
0x4000a90	    0x488b05000000	            mov rax, qword [0x04000a97] 	       168	vtls.c	FUNCTION_5	CALL_1
0x4000a97	    0xc60500000000	                mov byte [0x04000a9e], 1	       166	vtls.c	FUNCTION_5
0x4000a9e	        0x488b4020	            mov rax, qword [rax + 0x20] 	       168	vtls.c	FUNCTION_5	CALL_1
0x4000aa2	            0xffe0	                                 jmp rax	       168	vtls.c	FUNCTION_5	CALL_1
Curl_none_cleanup	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	1
0x4000040	            0xf3c3	                                     ret	      1000	vtls.c	FUNCTION_41
Curl_ssl_shutdown	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	32
0x4001620	              0x55	                                push rbp	       556	vtls.c	FUNCTION_21
0x4001621	              0x53	                                push rbx	       556	vtls.c	FUNCTION_21
0x4001622	          0x4863de	                         movsxd rbx, esi	       556	vtls.c	FUNCTION_21
0x4001625	          0x4889fd	                            mov rbp, rdi	       556	vtls.c	FUNCTION_21
0x4001628	            0x89de	                            mov esi, ebx	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x400162a	        0x4883ec08	                              sub rsp, 8	       556	vtls.c	FUNCTION_21
0x400162e	    0x488b05000000	            mov rax, qword [0x04001635] 	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4001635	          0xff5040	                 call qword [rax + 0x40]	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4001638	            0x85c0	                           test eax, eax	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x400163a	      0xba50000000	                           mov edx, 0x50	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x400163f	            0x740f	                            je 0x4001650	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4001641	        0x4883c408	                              add rsp, 8	       567	vtls.c	FUNCTION_21
0x4001645	            0x89d0	                            mov eax, edx	       567	vtls.c	FUNCTION_21
0x4001647	              0x5b	                                 pop rbx	       567	vtls.c	FUNCTION_21
0x4001648	              0x5d	                                 pop rbp	       567	vtls.c	FUNCTION_21
0x4001649	              0xc3	                                     ret	       567	vtls.c	FUNCTION_21
0x400164a	    0x660f1f440000	                    nop word [rax + rax]	       567	vtls.c	FUNCTION_21
0x4001650	        0x488d045b	                  lea rax, [rbx + rbx*2]	       560	vtls.c	FUNCTION_21
0x4001654	    0x488b15000000	            mov rdx, qword [0x0400165b] 	       563	vtls.c	FUNCTION_21
0x400165b	      0x488d44c500	                  lea rax, [rbp + rax*8]	       560	vtls.c	FUNCTION_21
0x4001660	    0xc68090020000	               mov byte [rax + 0x290], 0	       560	vtls.c	FUNCTION_21
0x4001667	    0xc78094020000	              mov dword [rax + 0x294], 0	       561	vtls.c	FUNCTION_21
0x4001671	      0x488d44dd00	                  lea rax, [rbp + rbx*8]	       561	vtls.c	FUNCTION_21
0x4001676	    0x488990700200	            mov qword [rax + 0x270], rdx	       563	vtls.c	FUNCTION_21
0x400167d	    0x488b15000000	            mov rdx, qword [0x04001684] 	       564	vtls.c	FUNCTION_21
0x4001684	    0x488990800200	            mov qword [rax + 0x280], rdx	       564	vtls.c	FUNCTION_21
0x400168b	        0x4883c408	                              add rsp, 8	       567	vtls.c	FUNCTION_21
0x400168f	            0x31d2	                            xor edx, edx	       566	vtls.c	FUNCTION_21
0x4001691	            0x89d0	                            mov eax, edx	       567	vtls.c	FUNCTION_21
0x4001693	              0x5b	                                 pop rbx	       567	vtls.c	FUNCTION_21
0x4001694	              0x5d	                                 pop rbp	       567	vtls.c	FUNCTION_21
0x4001695	              0xc3	                                     ret	       567	vtls.c	FUNCTION_21
Curl_none_check_cxn	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x4000060	      0xb8ffffffff	                     mov eax, 0xffffffff	      1014	vtls.c	FUNCTION_43
0x4000065	              0xc3	                                     ret	      1014	vtls.c	FUNCTION_43
Curl_none_init	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x4001f90	      0xb801000000	                              mov eax, 1	       997	vtls.c	FUNCTION_40
0x4001f95	              0xc3	                                     ret	       997	vtls.c	FUNCTION_40
Curl_ssl_tls13_ciphersuites	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	5
0x4001f70	    0x488b05000000	            mov rax, qword [0x04001f77] 	       987	vtls.c	FUNCTION_39
0x4001f77	          0x8b4010	            mov eax, dword [rax + 0x10] 	       987	vtls.c	FUNCTION_39
0x4001f7a	          0xc1e805	                              shr eax, 5	       987	vtls.c	FUNCTION_39
0x4001f7d	          0x83e001	                              and eax, 1	       987	vtls.c	FUNCTION_39
0x4001f80	              0xc3	                                     ret	       988	vtls.c	FUNCTION_39
Curl_ssl_getsock	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	19
0x40015d0	            0x31c0	                            xor eax, eax	       521	vtls.c	FUNCTION_18	IF_1
0x40015d2	            0x85d2	                           test edx, edx	       520	vtls.c	FUNCTION_18	IF_1
0x40015d4	            0x7410	                            je 0x40015e6	       520	vtls.c	FUNCTION_18	IF_1
0x40015d6	    0x8b9798020000	           mov edx, dword [rdi + 0x298] 	       523	vtls.c	FUNCTION_18	IF_2
0x40015dc	          0x83fa03	                              cmp edx, 3	       523	vtls.c	FUNCTION_18	IF_2
0x40015df	            0x740f	                            je 0x40015f0	       523	vtls.c	FUNCTION_18	IF_2
0x40015e1	          0x83fa02	                              cmp edx, 2	       528	vtls.c	FUNCTION_18	IF_3
0x40015e4	            0x741a	                            je 0x4001600	       528	vtls.c	FUNCTION_18	IF_3
0x40015e6	            0xf3c3	                                     ret	       535	vtls.c	FUNCTION_18
0x40015e8	     0xf1f84000000	                   nop dword [rax + rax]	       535	vtls.c	FUNCTION_18
0x40015f0	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       525	vtls.c	FUNCTION_18	IF_2
0x40015f6	            0x8906	                    mov dword [rsi], eax	       525	vtls.c	FUNCTION_18	IF_2
0x40015f8	      0xb800000100	                        mov eax, 0x10000	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x40015fd	              0xc3	                                     ret	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x40015fe	            0x6690	                                     nop	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x4001600	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       530	vtls.c	FUNCTION_18	IF_3
0x4001606	            0x8906	                    mov dword [rsi], eax	       530	vtls.c	FUNCTION_18	IF_3
0x4001608	      0xb801000000	                              mov eax, 1	       531	vtls.c	FUNCTION_18	IF_3	CALL_2
0x400160d	              0xc3	                                     ret	       535	vtls.c	FUNCTION_18
curl_global_sslset	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	104
0x4001fa0	          0x4885d2	                           test rdx, rdx	      1309	vtls.c	FUNCTION_62	IF_1
0x4001fa3	            0x4156	                                push r14	      1306	vtls.c	FUNCTION_62
0x4001fa5	            0x4155	                                push r13	      1306	vtls.c	FUNCTION_62
0x4001fa7	            0x4154	                                push r12	      1306	vtls.c	FUNCTION_62
0x4001fa9	              0x55	                                push rbp	      1306	vtls.c	FUNCTION_62
0x4001faa	              0x53	                                push rbx	      1306	vtls.c	FUNCTION_62
0x4001fab	            0x740a	                            je 0x4001fb7	      1309	vtls.c	FUNCTION_62	IF_1
0x4001fad	    0x488d05000000	                   lea rax, [0x04001fb4]	      1310	vtls.c	FUNCTION_62	IF_1
0x4001fb4	          0x488902	                    mov qword [rdx], rax	      1310	vtls.c	FUNCTION_62	IF_1
0x4001fb7	    0x488b15000000	            mov rdx, qword [0x04001fbe] 	      1312	vtls.c	FUNCTION_62	IF_2
0x4001fbe	    0x4c8d25000000	                   lea r12, [0x04001fc5]	      1312	vtls.c	FUNCTION_62	IF_2
0x4001fc5	          0x4c39e2	                            cmp rdx, r12	      1312	vtls.c	FUNCTION_62	IF_2
0x4001fc8	            0x7436	                            je 0x4002000	      1312	vtls.c	FUNCTION_62	IF_2
0x4001fca	            0x393a	                    cmp dword [rdx], edi	      1313	vtls.c	FUNCTION_62	IF_2
0x4001fcc	      0xb802000000	                              mov eax, 2	      1313	vtls.c	FUNCTION_62	IF_2
0x4001fd1	            0x741f	                            je 0x4001ff2	      1313	vtls.c	FUNCTION_62	IF_2
0x4001fd3	              0x5b	                                 pop rbx	      1324	vtls.c	FUNCTION_62
0x4001fd4	              0x5d	                                 pop rbp	      1324	vtls.c	FUNCTION_62
0x4001fd5	            0x415c	                                 pop r12	      1324	vtls.c	FUNCTION_62
0x4001fd7	            0x415d	                                 pop r13	      1324	vtls.c	FUNCTION_62
0x4001fd9	            0x415e	                                 pop r14	      1324	vtls.c	FUNCTION_62
0x4001fdb	              0xc3	                                     ret	      1324	vtls.c	FUNCTION_62
0x4001fdc	    0x488b15000000	            mov rdx, qword [0x04001fe3] 	      1324	vtls.c	FUNCTION_62
0x4001fe3	          0x4c89e7	                            mov rdi, r12	      1300	vtls.c	FUNCTION_61	CALL_4
0x4001fe6	    0x488915000000	            mov qword [0x04001fed], rdx 	      1299	vtls.c	FUNCTION_61
0x4001fed	      0xe800000000	                          call 0x4001ff2	      1300	vtls.c	FUNCTION_61	CALL_4
0x4001ff2	              0x5b	                                 pop rbx	      1324	vtls.c	FUNCTION_62
0x4001ff3	            0x31c0	                            xor eax, eax	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001ff5	              0x5d	                                 pop rbp	      1324	vtls.c	FUNCTION_62
0x4001ff6	            0x415c	                                 pop r12	      1324	vtls.c	FUNCTION_62
0x4001ff8	            0x415d	                                 pop r13	      1324	vtls.c	FUNCTION_62
0x4001ffa	            0x415e	                                 pop r14	      1324	vtls.c	FUNCTION_62
0x4001ffc	              0xc3	                                     ret	      1324	vtls.c	FUNCTION_62
0x4001ffd	           0xf1f00	                         nop dword [rax]	      1324	vtls.c	FUNCTION_62
0x4002000	    0x488b05000000	            mov rax, qword [0x04002007] 	      1315	vtls.c	FUNCTION_62	FOR_1
0x4002007	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x400200a	            0x7445	                            je 0x4002051	      1315	vtls.c	FUNCTION_62	FOR_1
0x400200c	            0x3b38	                    cmp edi, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400200e	            0x7459	                            je 0x4002069	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002010	          0x4889f5	                            mov rbp, rsi	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002013	          0x4189fd	                           mov r13d, edi	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002016	            0x31db	                            xor ebx, ebx	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002018	            0xeb0f	                           jmp 0x4002029	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400201a	    0x660f1f440000	                    nop word [rax + rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002020	        0x4883c301	                              add rbx, 1	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002024	          0x443b28	                   cmp r13d, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002027	            0x7437	                            je 0x4002060	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002029	          0x4885ed	                           test rbp, rbp	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400202c	          0x4c63f3	                         movsxd r14, ebx	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400202f	            0x7410	                            je 0x4002041	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002031	        0x488b7808	                mov rdi, qword [rax + 8]	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4002035	          0x4889ee	                            mov rsi, rbp	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4002038	      0xe800000000	                          call 0x400203d	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x400203d	            0x85c0	                           test eax, eax	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x400203f	            0x753f	                           jne 0x4002080	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4002041	    0x488d05000000	                   lea rax, [0x04002048]	      1315	vtls.c	FUNCTION_62	FOR_1
0x4002048	        0x488b04d8	            mov rax, qword [rax + rbx*8]	      1315	vtls.c	FUNCTION_62	FOR_1
0x400204c	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x400204f	            0x75cf	                           jne 0x4002020	      1315	vtls.c	FUNCTION_62	FOR_1
0x4002051	      0xb801000000	                              mov eax, 1	      1323	vtls.c	FUNCTION_62
0x4002056	      0xe978ffffff	                           jmp 0x4001fd3	      1323	vtls.c	FUNCTION_62
0x400205b	       0xf1f440000	                   nop dword [rax + rax]	      1323	vtls.c	FUNCTION_62
0x4002060	    0x4c3925000000	            cmp qword [0x04002067], r12 	      1272	vtls.c	FUNCTION_61	IF_1
0x4002067	            0x7589	                           jne 0x4001ff2	      1272	vtls.c	FUNCTION_61	IF_1
0x4002069	    0x488905000000	            mov qword [0x04002070], rax 	      1276	vtls.c	FUNCTION_61	IF_2
0x4002070	            0x31c0	                            xor eax, eax	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002072	      0xe95cffffff	                           jmp 0x4001fd3	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002077	    0x660f1f840000	                    nop word [rax + rax]	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4002080	    0x4c3925000000	            cmp qword [0x04002087], r12 	      1272	vtls.c	FUNCTION_61	IF_1
0x4002087	     0xf8565ffffff	                           jne 0x4001ff2	      1272	vtls.c	FUNCTION_61	IF_1
0x400208d	    0x488d2d000000	                   lea rbp, [0x04002094]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x4002094	      0x4a8b44f500	            mov rax, qword [rbp + r14*8]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x4002099	          0x4885c0	                           test rax, rax	      1275	vtls.c	FUNCTION_61	IF_2
0x400209c	            0x75cb	                           jne 0x4002069	      1275	vtls.c	FUNCTION_61	IF_2
0x400209e	    0x48833d000000	               cmp qword [0x040020a6], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x40020a6	     0xf8446ffffff	                            je 0x4001ff2	      1280	vtls.c	FUNCTION_61	IF_3
0x40020ac	    0x488d3d000000	                   lea rdi, [0x040020b3]	      1283	vtls.c	FUNCTION_61	CALL_1
0x40020b3	      0xe800000000	                          call 0x40020b8	      1283	vtls.c	FUNCTION_61	CALL_1
0x40020b8	          0x4885c0	                           test rax, rax	      1288	vtls.c	FUNCTION_61	IF_5
0x40020bb	          0x4989c4	                            mov r12, rax	      1283	vtls.c	FUNCTION_61	CALL_1
0x40020be	     0xf8418ffffff	                            je 0x4001fdc	      1288	vtls.c	FUNCTION_61	IF_5
0x40020c4	    0x488b05000000	            mov rax, qword [0x040020cb] 	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020cb	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020ce	          0x4889c2	                            mov rdx, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020d1	     0xf840cffffff	                            je 0x4001fe3	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020d7	            0x31db	                            xor ebx, ebx	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020d9	            0xeb17	                           jmp 0x40020f2	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020db	       0xf1f440000	                   nop dword [rax + rax]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020e0	        0x4883c301	                              add rbx, 1	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020e4	      0x488b44dd00	            mov rax, qword [rbp + rbx*8]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020e9	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020ec	     0xf84eafeffff	                            je 0x4001fdc	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40020f2	        0x488b7008	                mov rsi, qword [rax + 8]	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40020f6	          0x4c89e7	                            mov rdi, r12	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40020f9	          0x4c63eb	                         movsxd r13, ebx	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40020fc	      0xe800000000	                          call 0x4002101	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4002101	            0x85c0	                           test eax, eax	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4002103	            0x74db	                            je 0x40020e0	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x4002105	      0x4a8b44ed00	            mov rax, qword [rbp + r13*8]	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x400210a	          0x4c89e7	                            mov rdi, r12	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x400210d	    0x488905000000	            mov qword [0x04002114], rax 	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4002114	      0xe800000000	                          call 0x4002119	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x4002119	            0x31c0	                            xor eax, eax	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400211b	      0xe9b3feffff	                           jmp 0x4001fd3	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
Curl_ssl_engines_list	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x40016c0	    0x488b05000000	            mov rax, qword [0x040016c7] 	       586	vtls.c	FUNCTION_24	CALL_1
0x40016c7	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	       586	vtls.c	FUNCTION_24	CALL_1
0x40016ce	            0xffe0	                                 jmp rax	       586	vtls.c	FUNCTION_24	CALL_1
Curl_ssl_cert_status_request	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001f50	    0x488b05000000	            mov rax, qword [0x04001f57] 	       971	vtls.c	FUNCTION_37	CALL_1
0x4001f57	        0x488b4058	            mov rax, qword [rax + 0x58] 	       971	vtls.c	FUNCTION_37	CALL_1
0x4001f5b	            0xffe0	                                 jmp rax	       971	vtls.c	FUNCTION_37	CALL_1
Curl_none_random	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x4000070	      0xb804000000	                              mov eax, 4	      1024	vtls.c	FUNCTION_44
0x4000075	              0xc3	                                     ret	      1024	vtls.c	FUNCTION_44
Curl_ssl_addsessionid	ELSE,4:FOR,1:functions,0:DO,0:SWITCH,0:WHILE,0:IF,8:CALL,12	150
0x40011f0	            0x4157	                                push r15	       411	vtls.c	FUNCTION_16
0x40011f2	            0x4156	                                push r14	       411	vtls.c	FUNCTION_16
0x40011f4	          0x4989ff	                            mov r15, rdi	       411	vtls.c	FUNCTION_16
0x40011f7	            0x4155	                                push r13	       411	vtls.c	FUNCTION_16
0x40011f9	            0x4154	                                push r12	       411	vtls.c	FUNCTION_16
0x40011fb	              0x55	                                push rbp	       411	vtls.c	FUNCTION_16
0x40011fc	              0x53	                                push rbx	       411	vtls.c	FUNCTION_16
0x40011fd	        0x4883ec38	                           sub rsp, 0x38	       411	vtls.c	FUNCTION_16
0x4001201	          0x488b2f	                    mov rbp, qword [rdi]	       413	vtls.c	FUNCTION_16
0x4001204	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       420	vtls.c	FUNCTION_16	CALL_1
0x400120b	      0x4889742418	             mov qword [rsp + 0x18], rsi	       411	vtls.c	FUNCTION_16
0x4001210	      0x4889542420	             mov qword [rsp + 0x20], rdx	       411	vtls.c	FUNCTION_16
0x4001215	    0x4c8bad504d00	          mov r13, qword [rbp + 0x4d50] 	       414	vtls.c	FUNCTION_16
0x400121c	        0x4d8b6528	            mov r12, qword [r13 + 0x28] 	       415	vtls.c	FUNCTION_16
0x4001220	     0xf84da010000	                            je 0x4001400	       420	vtls.c	FUNCTION_16	CALL_1
0x4001226	    0x4c8b35000000	            mov r14, qword [0x0400122d] 	       427	vtls.c	FUNCTION_16	CALL_4
0x400122d	    0x498d87f80200	                  lea rax, [r15 + 0x2f8]	       422	vtls.c	FUNCTION_16
0x4001234	    0x498bbfd80000	            mov rdi, qword [r15 + 0xd8] 	       427	vtls.c	FUNCTION_16	CALL_4
0x400123b	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       427	vtls.c	FUNCTION_16	CALL_4
0x4001243	        0x48890424	                    mov qword [rsp], rax	       422	vtls.c	FUNCTION_16
0x4001247	          0x498b06	                    mov rax, qword [r14]	       427	vtls.c	FUNCTION_16	CALL_4
0x400124a	            0xffd0	                                call rax	       427	vtls.c	FUNCTION_16	CALL_4
0x400124c	          0x4885c0	                           test rax, rax	       428	vtls.c	FUNCTION_16	IF_1
0x400124f	          0x4889c3	                            mov rbx, rax	       427	vtls.c	FUNCTION_16	CALL_4
0x4001252	      0xba1b000000	                           mov edx, 0x1b	       429	vtls.c	FUNCTION_16	IF_1
0x4001257	     0xf8460010000	                            je 0x40013bd	       428	vtls.c	FUNCTION_16	IF_1
0x400125d	    0x4180bf9b0300	               cmp byte [r15 + 0x39b], 0	       431	vtls.c	FUNCTION_16	IF_2
0x4001265	    0x48c744241000	               mov qword [rsp + 0x10], 0	       439	vtls.c	FUNCTION_16	ELSE_1
0x400126e	     0xf85cc010000	                           jne 0x4001440	       431	vtls.c	FUNCTION_16	IF_2
0x4001274	    0x4180bf9c0300	               cmp byte [r15 + 0x39c], 0	       441	vtls.c	FUNCTION_16	IF_4
0x400127c	    0x41beffffffff	                    mov r14d, 0xffffffff	       444	vtls.c	FUNCTION_16	ELSE_2
0x4001282	     0xf8548010000	                           jne 0x40013d0	       441	vtls.c	FUNCTION_16	IF_4
0x4001288	    0x4c8b95b80000	            mov r10, qword [rbp + 0xb8] 	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x400128f	          0x4d85d2	                           test r10, r10	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4001292	            0x740a	                            je 0x400129e	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4001294	        0x41f60210	                   test byte [r10], 0x10	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4001298	     0xf8542010000	                           jne 0x40013e0	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x400129e	    0x4c8d95584d00	                 lea r10, [rbp + 0x4d58]	       454	vtls.c	FUNCTION_16	ELSE_3
0x40012a5	    0x488bbd780700	           mov rdi, qword [rbp + 0x778] 	       458	vtls.c	FUNCTION_16	FOR_1
0x40012ac	        0x4883ff01	                              cmp rdi, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x40012b0	            0x765f	                           jbe 0x4001311	       458	vtls.c	FUNCTION_16	FOR_1
0x40012b2	    0x4c8b9d504d00	          mov r11, qword [rbp + 0x4d50] 	       459	vtls.c	FUNCTION_16	FOR_1
0x40012b9	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x40012be	    0x4983bba00000	               cmp qword [r11 + 0xa0], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x40012c6	    0x498d83880000	                   lea rax, [r11 + 0x88]	       459	vtls.c	FUNCTION_16	FOR_1
0x40012cd	            0x7516	                           jne 0x40012e5	       458	vtls.c	FUNCTION_16	FOR_1
0x40012cf	            0xeb4f	                           jmp 0x4001320	       458	vtls.c	FUNCTION_16	FOR_1
0x40012d1	     0xf1f80000000	                         nop dword [rax]	       458	vtls.c	FUNCTION_16	FOR_1
0x40012d8	    0x480588000000	                           add rax, 0x88	       459	vtls.c	FUNCTION_16	FOR_1
0x40012de	      0x4883781800	               cmp qword [rax + 0x18], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x40012e3	            0x743b	                            je 0x4001320	       458	vtls.c	FUNCTION_16	FOR_1
0x40012e5	        0x488b4828	            mov rcx, qword [rax + 0x28] 	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x40012e9	          0x4c39e1	                            cmp rcx, r12	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x40012ec	            0x7d06	                           jge 0x40012f4	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x40012ee	          0x4989cc	                            mov r12, rcx	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x40012f1	          0x4989c5	                            mov r13, rax	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x40012f4	        0x4883c201	                              add rdx, 1	       459	vtls.c	FUNCTION_16	FOR_1
0x40012f8	          0x4839fa	                            cmp rdx, rdi	       458	vtls.c	FUNCTION_16	FOR_1
0x40012fb	            0x75db	                           jne 0x40012d8	       458	vtls.c	FUNCTION_16	FOR_1
0x40012fd	          0x4c89ef	                            mov rdi, r13	       467	vtls.c	FUNCTION_16	CALL_7
0x4001300	      0x4c89542428	             mov qword [rsp + 0x28], r10	       467	vtls.c	FUNCTION_16	CALL_7
0x4001305	      0xe800000000	                          call 0x400130a	       467	vtls.c	FUNCTION_16	CALL_7
0x400130a	      0x4c8b542428	            mov r10, qword [rsp + 0x28] 	       467	vtls.c	FUNCTION_16	CALL_7
0x400130f	            0xeb1e	                           jmp 0x400132f	       467	vtls.c	FUNCTION_16	CALL_7
0x4001311	            0x74ea	                            je 0x40012fd	       465	vtls.c	FUNCTION_16	IF_7
0x4001313	    0x4c8b9d504d00	          mov r11, qword [rbp + 0x4d50] 	       465	vtls.c	FUNCTION_16	IF_7
0x400131a	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x400131f	              0x90	                                     nop	       458	vtls.c	FUNCTION_16	FOR_1
0x4001320	          0x4889d0	                            mov rax, rdx	       469	vtls.c	FUNCTION_16	ELSE_4
0x4001323	        0x48c1e007	                              shl rax, 7	       469	vtls.c	FUNCTION_16	ELSE_4
0x4001327	        0x4c8d04d0	                   lea r8, [rax + rdx*8]	       469	vtls.c	FUNCTION_16	ELSE_4
0x400132b	        0x4f8d2c03	                     lea r13, [r11 + r8]	       469	vtls.c	FUNCTION_16	ELSE_4
0x400132f	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       472	vtls.c	FUNCTION_16
0x4001334	    0x488b2d000000	            mov rbp, qword [0x0400133b] 	       476	vtls.c	FUNCTION_16	CALL_8
0x400133b	        0x498b7d00	                    mov rdi, qword [r13]	       476	vtls.c	FUNCTION_16	CALL_8
0x400133f	        0x49894518	             mov qword [r13 + 0x18], rax	       472	vtls.c	FUNCTION_16
0x4001343	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       473	vtls.c	FUNCTION_16
0x4001348	        0x49894520	             mov qword [r13 + 0x20], rax	       473	vtls.c	FUNCTION_16
0x400134c	          0x498b02	                    mov rax, qword [r10]	       474	vtls.c	FUNCTION_16
0x400134f	        0x49894528	             mov qword [r13 + 0x28], rax	       474	vtls.c	FUNCTION_16
0x4001353	          0xff5500	                        call qword [rbp]	       476	vtls.c	FUNCTION_16	CALL_8
0x4001356	        0x498b7d08	                mov rdi, qword [r13 + 8]	       477	vtls.c	FUNCTION_16	CALL_9
0x400135a	          0xff5500	                        call qword [rbp]	       477	vtls.c	FUNCTION_16	CALL_9
0x400135d	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       479	vtls.c	FUNCTION_16
0x4001362	        0x49895d00	                    mov qword [r13], rbx	       478	vtls.c	FUNCTION_16
0x4001366	        0x45897534	            mov dword [r13 + 0x34], r14d	       480	vtls.c	FUNCTION_16
0x400136a	        0x49894508	                mov qword [r13 + 8], rax	       479	vtls.c	FUNCTION_16
0x400136e	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       482	vtls.c	FUNCTION_16
0x4001372	            0x85c0	                           test eax, eax	       482	vtls.c	FUNCTION_16
0x4001374	            0x747a	                            je 0x40013f0	       482	vtls.c	FUNCTION_16
0x4001376	    0x418b87900100	           mov eax, dword [r15 + 0x190] 	       482	vtls.c	FUNCTION_16
0x400137d	        0x41894530	             mov dword [r13 + 0x30], eax	       482	vtls.c	FUNCTION_16
0x4001381	    0x498b87e00300	           mov rax, qword [r15 + 0x3e0] 	       483	vtls.c	FUNCTION_16
0x4001388	        0x498d7538	                   lea rsi, [r13 + 0x38]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x400138c	        0x488b3c24	                    mov rdi, qword [rsp]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4001390	          0x488b00	                    mov rax, qword [rax]	       483	vtls.c	FUNCTION_16
0x4001393	        0x49894510	             mov qword [r13 + 0x10], rax	       483	vtls.c	FUNCTION_16
0x4001397	      0xe800000000	                          call 0x400139c	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x400139c	            0x31d2	                            xor edx, edx	       492	vtls.c	FUNCTION_16
0x400139e	            0x84c0	                             test al, al	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40013a0	            0x751b	                           jne 0x40013bd	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x40013a2	          0x4889df	                            mov rdi, rbx	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x40013a5	    0x49c745180000	               mov qword [r13 + 0x18], 0	       486	vtls.c	FUNCTION_16	IF_8
0x40013ad	          0xff5500	                        call qword [rbp]	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x40013b0	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x40013b5	          0xff5500	                        call qword [rbp]	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x40013b8	      0xba1b000000	                           mov edx, 0x1b	       489	vtls.c	FUNCTION_16	IF_8
0x40013bd	        0x4883c438	                           add rsp, 0x38	       493	vtls.c	FUNCTION_16
0x40013c1	            0x89d0	                            mov eax, edx	       493	vtls.c	FUNCTION_16
0x40013c3	              0x5b	                                 pop rbx	       493	vtls.c	FUNCTION_16
0x40013c4	              0x5d	                                 pop rbp	       493	vtls.c	FUNCTION_16
0x40013c5	            0x415c	                                 pop r12	       493	vtls.c	FUNCTION_16
0x40013c7	            0x415d	                                 pop r13	       493	vtls.c	FUNCTION_16
0x40013c9	            0x415e	                                 pop r14	       493	vtls.c	FUNCTION_16
0x40013cb	            0x415f	                                 pop r15	       493	vtls.c	FUNCTION_16
0x40013cd	              0xc3	                                     ret	       493	vtls.c	FUNCTION_16
0x40013ce	            0x6690	                                     nop	       493	vtls.c	FUNCTION_16
0x40013d0	    0x458bb79c0100	          mov r14d, dword [r15 + 0x19c] 	       442	vtls.c	FUNCTION_16	IF_4
0x40013d7	      0xe9acfeffff	                           jmp 0x4001288	       442	vtls.c	FUNCTION_16	IF_4
0x40013dc	         0xf1f4000	                         nop dword [rax]	       442	vtls.c	FUNCTION_16	IF_4
0x40013e0	    0x4981c2c00000	                           add r10, 0xc0	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x40013e7	      0xe9b9feffff	                           jmp 0x40012a5	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x40013ec	         0xf1f4000	                         nop dword [rax]	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x40013f0	    0x418b87980100	           mov eax, dword [r15 + 0x198] 	       482	vtls.c	FUNCTION_16
0x40013f7	            0xeb84	                           jmp 0x400137d	       482	vtls.c	FUNCTION_16
0x40013f9	     0xf1f80000000	                         nop dword [rax]	       482	vtls.c	FUNCTION_16
0x4001400	          0x4863c9	                         movsxd rcx, ecx	       420	vtls.c	FUNCTION_16	CALL_1
0x4001403	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       420	vtls.c	FUNCTION_16	CALL_1
0x400140b	     0xf8515feffff	                           jne 0x4001226	       420	vtls.c	FUNCTION_16	CALL_1
0x4001411	    0x4c8b35000000	            mov r14, qword [0x04001418] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4001418	    0x488d87480300	                  lea rax, [rdi + 0x348]	       422	vtls.c	FUNCTION_16
0x400141f	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       420	vtls.c	FUNCTION_16	CALL_1
0x4001427	    0x488bbf600100	           mov rdi, qword [rdi + 0x160] 	       427	vtls.c	FUNCTION_16	CALL_4
0x400142e	        0x48890424	                    mov qword [rsp], rax	       422	vtls.c	FUNCTION_16
0x4001432	          0x498b06	                    mov rax, qword [r14]	       427	vtls.c	FUNCTION_16	CALL_4
0x4001435	      0xe910feffff	                           jmp 0x400124a	       427	vtls.c	FUNCTION_16	CALL_4
0x400143a	    0x660f1f440000	                    nop word [rax + rax]	       427	vtls.c	FUNCTION_16	CALL_4
0x4001440	        0x89542428	             mov dword [rsp + 0x28], edx	       427	vtls.c	FUNCTION_16	CALL_4
0x4001444	    0x498bbf000100	           mov rdi, qword [r15 + 0x100] 	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x400144b	          0x41ff16	                        call qword [r14]	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x400144e	          0x4885c0	                           test rax, rax	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4001451	      0x4889442410	             mov qword [rsp + 0x10], rax	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4001456	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x400145a	     0xf8514feffff	                           jne 0x4001274	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4001460	    0x488b05000000	            mov rax, qword [0x04001467] 	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x4001467	          0x891424	                    mov dword [rsp], edx	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x400146a	          0x4889df	                            mov rdi, rbx	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x400146d	            0xff10	                        call qword [rax]	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x400146f	          0x8b1424	                    mov edx, dword [rsp]	       435	vtls.c	FUNCTION_16	IF_2	IF_3
0x4001472	      0xe946ffffff	                           jmp 0x40013bd	       435	vtls.c	FUNCTION_16	IF_2	IF_3
Curl_ssl_connect_nonblocking	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,4:CALL,4	99
0x4000c70	            0x4157	                                push r15	       259	vtls.c	FUNCTION_10
0x4000c72	            0x4156	                                push r14	       259	vtls.c	FUNCTION_10
0x4000c74	            0x4155	                                push r13	       259	vtls.c	FUNCTION_10
0x4000c76	            0x4154	                                push r12	       259	vtls.c	FUNCTION_10
0x4000c78	          0x4989d5	                            mov r13, rdx	       259	vtls.c	FUNCTION_10
0x4000c7b	              0x55	                                push rbp	       259	vtls.c	FUNCTION_10
0x4000c7c	              0x53	                                push rbx	       259	vtls.c	FUNCTION_10
0x4000c7d	          0x4863ee	                         movsxd rbp, esi	       259	vtls.c	FUNCTION_10
0x4000c80	          0x4889fb	                            mov rbx, rdi	       259	vtls.c	FUNCTION_10
0x4000c83	          0x4989ec	                            mov r12, rbp	       259	vtls.c	FUNCTION_10
0x4000c86	        0x4883ec18	                           sub rsp, 0x18	       259	vtls.c	FUNCTION_10
0x4000c8a	    0x80bc2fb90300	         cmp byte [rdi + rbp + 0x3b9], 0	       261	vtls.c	FUNCTION_10	IF_1
0x4000c92	            0x7417	                            je 0x4000cab	       261	vtls.c	FUNCTION_10	IF_1
0x4000c94	      0x488d546d00	                  lea rdx, [rbp + rbp*2]	       210	vtls.c	FUNCTION_8	IF_1
0x4000c99	        0x48c1e203	                              shl rdx, 3	       210	vtls.c	FUNCTION_8	IF_1
0x4000c9d	        0x4c8d3417	                    lea r14, [rdi + rdx]	       210	vtls.c	FUNCTION_8	IF_1
0x4000ca1	    0x4183be940200	              cmp dword [r14 + 0x294], 2	       210	vtls.c	FUNCTION_8	IF_1
0x4000ca9	            0x7475	                            je 0x4000d20	       210	vtls.c	FUNCTION_8	IF_1
0x4000cab	          0x488b3b	                    mov rdi, qword [rbx]	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x4000cae	    0x488b97e80500	           mov rdx, qword [rdi + 0x5e8] 	       185	vtls.c	FUNCTION_7
0x4000cb5	        0x4883fa07	                              cmp rdx, 7	       186	vtls.c	FUNCTION_7	IF_1
0x4000cb9	     0xf87f1000000	                            ja 0x4000db0	       186	vtls.c	FUNCTION_7	IF_1
0x4000cbf	    0x488b87f00500	           mov rax, qword [rdi + 0x5f0] 	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000cc6	          0x4885c0	                           test rax, rax	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000cc9	            0x7415	                            je 0x4000ce0	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000ccb	    0x483d00000100	                        cmp rax, 0x10000	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000cd1	            0x740d	                            je 0x4000ce0	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000cd3	        0x48c1f810	                           sar rax, 0x10	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000cd7	          0x4839c2	                            cmp rdx, rax	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000cda	     0xf8ff8000000	                            jg 0x4000dd8	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000ce0	      0x488d446d00	                  lea rax, [rbp + rbp*2]	       271	vtls.c	FUNCTION_10
0x4000ce5	          0x4c89ea	                            mov rdx, r13	       272	vtls.c	FUNCTION_10	CALL_3
0x4000ce8	          0x4489e6	                           mov esi, r12d	       272	vtls.c	FUNCTION_10	CALL_3
0x4000ceb	          0x4889df	                            mov rdi, rbx	       272	vtls.c	FUNCTION_10	CALL_3
0x4000cee	    0xc684c3900200	       mov byte [rbx + rax*8 + 0x290], 1	       271	vtls.c	FUNCTION_10
0x4000cf6	    0x488b05000000	            mov rax, qword [0x04000cfd] 	       272	vtls.c	FUNCTION_10	CALL_3
0x4000cfd	          0xff5068	                 call qword [rax + 0x68]	       272	vtls.c	FUNCTION_10	CALL_3
0x4000d00	            0x85c0	                           test eax, eax	       273	vtls.c	FUNCTION_10	IF_4
0x4000d02	            0x750d	                           jne 0x4000d11	       273	vtls.c	FUNCTION_10	IF_4
0x4000d04	            0x31c0	                            xor eax, eax	       273	vtls.c	FUNCTION_10	IF_4
0x4000d06	      0x41807d0000	                       cmp byte [r13], 0	       273	vtls.c	FUNCTION_10	IF_4
0x4000d0b	     0xf85df000000	                           jne 0x4000df0	       273	vtls.c	FUNCTION_10	IF_4
0x4000d11	        0x4883c418	                           add rsp, 0x18	       276	vtls.c	FUNCTION_10
0x4000d15	              0x5b	                                 pop rbx	       276	vtls.c	FUNCTION_10
0x4000d16	              0x5d	                                 pop rbp	       276	vtls.c	FUNCTION_10
0x4000d17	            0x415c	                                 pop r12	       276	vtls.c	FUNCTION_10
0x4000d19	            0x415d	                                 pop r13	       276	vtls.c	FUNCTION_10
0x4000d1b	            0x415e	                                 pop r14	       276	vtls.c	FUNCTION_10
0x4000d1d	            0x415f	                                 pop r15	       276	vtls.c	FUNCTION_10
0x4000d1f	              0xc3	                                     ret	       276	vtls.c	FUNCTION_10
0x4000d20	    0x4180bec00200	               cmp byte [r14 + 0x2c0], 0	       210	vtls.c	FUNCTION_8	IF_1
0x4000d28	            0x7581	                           jne 0x4000cab	       210	vtls.c	FUNCTION_8	IF_1
0x4000d2a	    0x488b0d000000	            mov rcx, qword [0x04000d31] 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000d31	      0xb804000000	                              mov eax, 4	       215	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000d36	        0xf6411010	           test byte [rcx + 0x10], 0x10 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000d3a	            0x74d5	                            je 0x4000d11	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000d3c	    0x498bb6900200	           mov rsi, qword [r14 + 0x290] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000d43	    0x498b8ea00200	           mov rcx, qword [r14 + 0x2a0] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000d4a	    0x488d84179002	           lea rax, [rdi + rdx + 0x290] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000d52	    0x4d8bbed00200	           mov r15, qword [r14 + 0x2d0] 	       219	vtls.c	FUNCTION_8	IF_1
0x4000d59	    0x4989b6c00200	            mov qword [r14 + 0x2c0], rsi	       220	vtls.c	FUNCTION_8	IF_1
0x4000d60	    0x498bb6980200	           mov rsi, qword [r14 + 0x298] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000d67	    0x49898ed00200	            mov qword [r14 + 0x2d0], rcx	       220	vtls.c	FUNCTION_8	IF_1
0x4000d6e	          0x4c89ff	                            mov rdi, r15	        90	string3.h	FUNCTION_67	CALL_6
0x4000d71	    0x4989b6c80200	            mov qword [r14 + 0x2c8], rsi	       220	vtls.c	FUNCTION_8	IF_1
0x4000d78	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000d7f	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_67	CALL_6
0x4000d81	    0x48c740080000	                  mov qword [rax + 8], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000d89	    0x48c740100000	               mov qword [rax + 0x10], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000d91	    0x488b05000000	            mov rax, qword [0x04000d98] 	       223	vtls.c	FUNCTION_8	IF_1	CALL_3
0x4000d98	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000d9c	      0xe800000000	                          call 0x4000da1	        90	string3.h	FUNCTION_67	CALL_6
0x4000da1	    0x4d89bea00200	            mov qword [r14 + 0x2a0], r15	       225	vtls.c	FUNCTION_8	IF_1
0x4000da8	      0xe9fefeffff	                           jmp 0x4000cab	       225	vtls.c	FUNCTION_8	IF_1
0x4000dad	           0xf1f00	                         nop dword [rax]	       225	vtls.c	FUNCTION_8	IF_1
0x4000db0	    0x488d35000000	                   lea rsi, [0x04000db7]	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000db7	            0x31c0	                            xor eax, eax	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000db9	      0xe800000000	                          call 0x4000dbe	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000dbe	        0x4883c418	                           add rsp, 0x18	       276	vtls.c	FUNCTION_10
0x4000dc2	      0xb823000000	                           mov eax, 0x23	       268	vtls.c	FUNCTION_10	IF_3
0x4000dc7	              0x5b	                                 pop rbx	       276	vtls.c	FUNCTION_10
0x4000dc8	              0x5d	                                 pop rbp	       276	vtls.c	FUNCTION_10
0x4000dc9	            0x415c	                                 pop r12	       276	vtls.c	FUNCTION_10
0x4000dcb	            0x415d	                                 pop r13	       276	vtls.c	FUNCTION_10
0x4000dcd	            0x415e	                                 pop r14	       276	vtls.c	FUNCTION_10
0x4000dcf	            0x415f	                                 pop r15	       276	vtls.c	FUNCTION_10
0x4000dd1	              0xc3	                                     ret	       276	vtls.c	FUNCTION_10
0x4000dd2	    0x660f1f440000	                    nop word [rax + rax]	       276	vtls.c	FUNCTION_10
0x4000dd8	    0x488d35000000	                   lea rsi, [0x04000ddf]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000ddf	            0x31c0	                            xor eax, eax	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000de1	      0xe800000000	                          call 0x4000de6	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000de6	            0xebd6	                           jmp 0x4000dbe	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000de8	     0xf1f84000000	                   nop dword [rax + rax]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000df0	          0x488b3b	                    mov rdi, qword [rbx]	       274	vtls.c	FUNCTION_10	CALL_4
0x4000df3	      0xbe05000000	                              mov esi, 5	       274	vtls.c	FUNCTION_10	CALL_4
0x4000df8	        0x8944240c	              mov dword [rsp + 0xc], eax	       274	vtls.c	FUNCTION_10	CALL_4
0x4000dfc	      0xe800000000	                          call 0x4000e01	       274	vtls.c	FUNCTION_10	CALL_4
0x4000e01	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       274	vtls.c	FUNCTION_10	CALL_4
0x4000e05	      0xe907ffffff	                           jmp 0x4000d11	       274	vtls.c	FUNCTION_10	CALL_4
Curl_none_shutdown	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x4000050	            0x31c0	                            xor eax, eax	      1008	vtls.c	FUNCTION_42
0x4000052	              0xc3	                                     ret	      1008	vtls.c	FUNCTION_42
Curl_ssl_initsessions	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,2:CALL,1	26
0x40016d0	            0x31c0	                            xor eax, eax	       599	vtls.c	FUNCTION_25	IF_1
0x40016d2	    0x4883bf504d00	             cmp qword [rdi + 0x4d50], 0	       597	vtls.c	FUNCTION_25	IF_1
0x40016da	            0x7404	                            je 0x40016e0	       597	vtls.c	FUNCTION_25	IF_1
0x40016dc	              0xc3	                                     ret	       610	vtls.c	FUNCTION_25
0x40016dd	           0xf1f00	                         nop dword [rax]	       610	vtls.c	FUNCTION_25
0x40016e0	              0x55	                                push rbp	       594	vtls.c	FUNCTION_25
0x40016e1	              0x53	                                push rbx	       594	vtls.c	FUNCTION_25
0x40016e2	          0x4889f5	                            mov rbp, rsi	       594	vtls.c	FUNCTION_25
0x40016e5	          0x4889fb	                            mov rbx, rdi	       594	vtls.c	FUNCTION_25
0x40016e8	      0xbe88000000	                           mov esi, 0x88	       601	vtls.c	FUNCTION_25	CALL_1
0x40016ed	          0x4889ef	                            mov rdi, rbp	       601	vtls.c	FUNCTION_25	CALL_1
0x40016f0	        0x4883ec08	                              sub rsp, 8	       594	vtls.c	FUNCTION_25
0x40016f4	    0x488b05000000	            mov rax, qword [0x040016fb] 	       601	vtls.c	FUNCTION_25	CALL_1
0x40016fb	            0xff10	                        call qword [rax]	       601	vtls.c	FUNCTION_25	CALL_1
0x40016fd	          0x4889c2	                            mov rdx, rax	       601	vtls.c	FUNCTION_25	CALL_1
0x4001700	      0xb81b000000	                           mov eax, 0x1b	       603	vtls.c	FUNCTION_25	IF_2
0x4001705	          0x4885d2	                           test rdx, rdx	       602	vtls.c	FUNCTION_25	IF_2
0x4001708	            0x741b	                            je 0x4001725	       602	vtls.c	FUNCTION_25	IF_2
0x400170a	    0x4889ab780700	            mov qword [rbx + 0x778], rbp	       606	vtls.c	FUNCTION_25
0x4001711	    0x488993504d00	          mov qword [rbx + 0x4d50], rdx 	       607	vtls.c	FUNCTION_25
0x4001718	            0x31c0	                            xor eax, eax	       609	vtls.c	FUNCTION_25
0x400171a	    0x48c783584d00	            mov qword [rbx + 0x4d58], 1 	       608	vtls.c	FUNCTION_25
0x4001725	        0x4883c408	                              add rsp, 8	       610	vtls.c	FUNCTION_25
0x4001729	              0x5b	                                 pop rbx	       610	vtls.c	FUNCTION_25
0x400172a	              0x5d	                                 pop rbp	       610	vtls.c	FUNCTION_25
0x400172b	              0xc3	                                     ret	       610	vtls.c	FUNCTION_25
Curl_multissl_version	ELSE,1:FOR,1:functions,0:DO,0:SWITCH,0:WHILE,0:IF,5:CALL,3	79
0x40000e0	            0x4157	                                push r15	      1229	vtls.c	FUNCTION_60
0x40000e2	            0x4156	                                push r14	      1229	vtls.c	FUNCTION_60
0x40000e4	    0x488d15000000	                   lea rdx, [0x040000eb]	      1235	vtls.c	FUNCTION_60
0x40000eb	            0x4155	                                push r13	      1229	vtls.c	FUNCTION_60
0x40000ed	            0x4154	                                push r12	      1229	vtls.c	FUNCTION_60
0x40000ef	          0x4989f5	                            mov r13, rsi	      1229	vtls.c	FUNCTION_60
0x40000f2	              0x55	                                push rbp	      1229	vtls.c	FUNCTION_60
0x40000f3	              0x53	                                push rbx	      1229	vtls.c	FUNCTION_60
0x40000f4	          0x4889fd	                            mov rbp, rdi	      1229	vtls.c	FUNCTION_60
0x40000f7	        0x4883ec08	                              sub rsp, 8	      1229	vtls.c	FUNCTION_60
0x40000fb	    0x488b05000000	            mov rax, qword [0x04000102] 	      1235	vtls.c	FUNCTION_60
0x4000102	    0x488b1d000000	            mov rbx, qword [0x04000109] 	      1235	vtls.c	FUNCTION_60
0x4000109	          0x4839d0	                            cmp rax, rdx	      1235	vtls.c	FUNCTION_60
0x400010c	    0x480f44050000	           cmove rax, qword [0x04000114]	      1235	vtls.c	FUNCTION_60
0x4000114	    0x483b05000000	            cmp rax, qword [0x0400011b] 	      1237	vtls.c	FUNCTION_60	IF_1
0x400011b	     0xf848f000000	                            je 0x40001b0	      1237	vtls.c	FUNCTION_60	IF_1
0x4000121	    0x488b15000000	            mov rdx, qword [0x04000128] 	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000128	            0x31db	                            xor ebx, ebx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400012a	    0x488905000000	            mov qword [0x04000131], rax 	      1241	vtls.c	FUNCTION_60	IF_1
0x4000131	    0x488d0d000000	                   lea rcx, [0x04000138]	      1238	vtls.c	FUNCTION_60	IF_1
0x4000138	          0x4885d2	                           test rdx, rdx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400013b	            0x7469	                            je 0x40001a6	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400013d	          0x4839c2	                            cmp rdx, rax	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000140	    0x488d1d000000	                   lea rbx, [0x04000147]	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000147	    0x4c8d3d000000	                   lea r15, [0x0400014e]	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400014e	          0x4989cc	                            mov r12, rcx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000151	          0x4889ce	                            mov rsi, rcx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000154	            0x7443	                            je 0x4000199	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000156	        0x4c8d7601	                      lea r14, [rsi + 1]	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400015a	          0xc60628	                    mov byte [rsi], 0x28	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400015d	          0x4889de	                            mov rsi, rbx	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000160	          0x4c89f7	                            mov rdi, r14	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000163	          0x4c29f6	                            sub rsi, r14	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000166	          0xff5230	                 call qword [rdx + 0x30]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000169	        0x498d3c06	                    lea rdi, [r14 + rax]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x400016d	    0x488b05000000	            mov rax, qword [0x04000174] 	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000174	          0x493907	                    cmp qword [r15], rax	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000177	            0x747f	                            je 0x40001f8	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000179	        0x488d4f01	                      lea rcx, [rdi + 1]	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x400017d	          0xc60729	                    mov byte [rdi], 0x29	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000180	        0x498b5708	                mov rdx, qword [r15 + 8]	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000184	          0x4885d2	                           test rdx, rdx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000187	            0x7417	                            je 0x40001a0	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000189	        0x4983c708	                              add r15, 8	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400018d	          0x4839c2	                            cmp rdx, rax	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000190	        0x488d7101	                      lea rsi, [rcx + 1]	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x4000194	          0xc60120	                    mov byte [rcx], 0x20	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x4000197	            0x75bd	                           jne 0x4000156	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x4000199	          0x4989f6	                            mov r14, rsi	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400019c	            0xebbf	                           jmp 0x400015d	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x400019e	            0x6690	                                     nop	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a0	          0x4889cb	                            mov rbx, rcx	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a3	          0x4c29e3	                            sub rbx, r12	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40001a6	          0xc60100	                       mov byte [rcx], 0	      1252	vtls.c	FUNCTION_60	IF_1
0x40001a9	    0x48891d000000	            mov qword [0x040001b0], rbx 	      1253	vtls.c	FUNCTION_60	IF_1
0x40001b0	          0x4c39eb	                            cmp rbx, r13	      1256	vtls.c	FUNCTION_60	IF_5
0x40001b3	            0x772b	                            ja 0x40001e0	      1256	vtls.c	FUNCTION_60	IF_5
0x40001b5	        0x498d55ff	                      lea rdx, [r13 - 1]	      1259	vtls.c	FUNCTION_60	ELSE_1	CALL_3
0x40001b9	    0x488d35000000	                   lea rsi, [0x040001c0]	        53	string3.h	FUNCTION_64	CALL_3
0x40001c0	          0x4889ef	                            mov rdi, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x40001c3	      0xe800000000	                          call 0x40001c8	        53	string3.h	FUNCTION_64	CALL_3
0x40001c8	    0x42c6442dff00	             mov byte [rbp + r13 - 1], 0	      1260	vtls.c	FUNCTION_60	ELSE_1
0x40001ce	        0x4883c408	                              add rsp, 8	      1264	vtls.c	FUNCTION_60
0x40001d2	          0x4889d8	                            mov rax, rbx	      1264	vtls.c	FUNCTION_60
0x40001d5	              0x5b	                                 pop rbx	      1264	vtls.c	FUNCTION_60
0x40001d6	              0x5d	                                 pop rbp	      1264	vtls.c	FUNCTION_60
0x40001d7	            0x415c	                                 pop r12	      1264	vtls.c	FUNCTION_60
0x40001d9	            0x415d	                                 pop r13	      1264	vtls.c	FUNCTION_60
0x40001db	            0x415e	                                 pop r14	      1264	vtls.c	FUNCTION_60
0x40001dd	            0x415f	                                 pop r15	      1264	vtls.c	FUNCTION_60
0x40001df	              0xc3	                                     ret	      1264	vtls.c	FUNCTION_60
0x40001e0	        0x488d5301	                      lea rdx, [rbx + 1]	        53	string3.h	FUNCTION_64	CALL_3
0x40001e4	    0x488d35000000	                   lea rsi, [0x040001eb]	        53	string3.h	FUNCTION_64	CALL_3
0x40001eb	          0x4889ef	                            mov rdi, rbp	        53	string3.h	FUNCTION_64	CALL_3
0x40001ee	      0xe800000000	                          call 0x40001f3	        53	string3.h	FUNCTION_64	CALL_3
0x40001f3	            0xebd9	                           jmp 0x40001ce	        53	string3.h	FUNCTION_64	CALL_3
0x40001f5	           0xf1f00	                         nop dword [rax]	        53	string3.h	FUNCTION_64	CALL_3
0x40001f8	          0x4889f9	                            mov rcx, rdi	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40001fb	            0xeb83	                           jmp 0x4000180	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
Curl_ssl_md5sum	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001f40	    0x488b05000000	            mov rax, qword [0x04001f47] 	       962	vtls.c	FUNCTION_36	CALL_1
0x4001f47	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       962	vtls.c	FUNCTION_36	CALL_1
0x4001f4e	            0xffe0	                                 jmp rax	       962	vtls.c	FUNCTION_36	CALL_1
Curl_ssl_sessionid_lock	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,1:CALL,1	11
0x4000e10	          0x488b3f	                    mov rdi, qword [rdi]	       283	vtls.c	FUNCTION_11	IF_1
0x4000e13	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       283	vtls.c	FUNCTION_11	IF_1
0x4000e1a	          0x4885c0	                           test rax, rax	       283	vtls.c	FUNCTION_11	IF_1
0x4000e1d	            0x7405	                            je 0x4000e24	       283	vtls.c	FUNCTION_11	IF_1
0x4000e1f	          0xf60010	                   test byte [rax], 0x10	       283	vtls.c	FUNCTION_11	IF_1
0x4000e22	            0x750c	                           jne 0x4000e30	       283	vtls.c	FUNCTION_11	IF_1
0x4000e24	            0xf3c3	                                     ret	       283	vtls.c	FUNCTION_11	IF_1
0x4000e26	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       283	vtls.c	FUNCTION_11	IF_1
0x4000e30	      0xba02000000	                              mov edx, 2	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000e35	      0xbe04000000	                              mov esi, 4	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000e3a	      0xe900000000	                           jmp 0x4000e3f	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
Curl_ssl_random	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001aa0	    0x488b05000000	            mov rax, qword [0x04001aa7] 	       737	vtls.c	FUNCTION_33	CALL_1
0x4001aa7	        0x488b4050	            mov rax, qword [rax + 0x50] 	       737	vtls.c	FUNCTION_33	CALL_1
0x4001aab	            0xffe0	                                 jmp rax	       737	vtls.c	FUNCTION_33	CALL_1
Curl_ssl_check_cxn	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001740	    0x488b05000000	            mov rax, qword [0x04001747] 	       633	vtls.c	FUNCTION_27	CALL_1
0x4001747	        0x488b4038	            mov rax, qword [rax + 0x38] 	       633	vtls.c	FUNCTION_27	CALL_1
0x400174b	            0xffe0	                                 jmp rax	       633	vtls.c	FUNCTION_27	CALL_1
Curl_ssl_connect	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,4:CALL,4	90
0x4000ae0	            0x4156	                                push r14	       232	vtls.c	FUNCTION_9
0x4000ae2	            0x4155	                                push r13	       232	vtls.c	FUNCTION_9
0x4000ae4	            0x4154	                                push r12	       232	vtls.c	FUNCTION_9
0x4000ae6	              0x55	                                push rbp	       232	vtls.c	FUNCTION_9
0x4000ae7	          0x4863ee	                         movsxd rbp, esi	       232	vtls.c	FUNCTION_9
0x4000aea	              0x53	                                push rbx	       232	vtls.c	FUNCTION_9
0x4000aeb	    0x80bc2fb90300	         cmp byte [rdi + rbp + 0x3b9], 0	       235	vtls.c	FUNCTION_9	IF_1
0x4000af3	          0x4889fb	                            mov rbx, rdi	       232	vtls.c	FUNCTION_9
0x4000af6	          0x4989ec	                            mov r12, rbp	       232	vtls.c	FUNCTION_9
0x4000af9	            0x7417	                            je 0x4000b12	       235	vtls.c	FUNCTION_9	IF_1
0x4000afb	      0x488d546d00	                  lea rdx, [rbp + rbp*2]	       210	vtls.c	FUNCTION_8	IF_1
0x4000b00	        0x48c1e203	                              shl rdx, 3	       210	vtls.c	FUNCTION_8	IF_1
0x4000b04	        0x4c8d2c17	                    lea r13, [rdi + rdx]	       210	vtls.c	FUNCTION_8	IF_1
0x4000b08	    0x4183bd940200	              cmp dword [r13 + 0x294], 2	       210	vtls.c	FUNCTION_8	IF_1
0x4000b10	            0x7476	                            je 0x4000b88	       210	vtls.c	FUNCTION_8	IF_1
0x4000b12	          0x488b3b	                    mov rdi, qword [rbx]	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000b15	    0x488b97e80500	           mov rdx, qword [rdi + 0x5e8] 	       185	vtls.c	FUNCTION_7
0x4000b1c	        0x4883fa07	                              cmp rdx, 7	       186	vtls.c	FUNCTION_7	IF_1
0x4000b20	     0xf87f2000000	                            ja 0x4000c18	       186	vtls.c	FUNCTION_7	IF_1
0x4000b26	    0x488b87f00500	           mov rax, qword [rdi + 0x5f0] 	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000b2d	          0x4885c0	                           test rax, rax	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000b30	            0x7415	                            je 0x4000b47	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000b32	    0x483d00000100	                        cmp rax, 0x10000	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000b38	            0x740d	                            je 0x4000b47	       191	vtls.c	FUNCTION_7	SWITCH_1
0x4000b3a	        0x48c1f810	                           sar rax, 0x10	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000b3e	          0x4839c2	                            cmp rdx, rax	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000b41	     0xf8ff1000000	                            jg 0x4000c38	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x4000b47	      0x488d446d00	                  lea rax, [rbp + rbp*2]	       245	vtls.c	FUNCTION_9
0x4000b4c	          0x4489e6	                           mov esi, r12d	       248	vtls.c	FUNCTION_9	CALL_3
0x4000b4f	          0x4889df	                            mov rdi, rbx	       248	vtls.c	FUNCTION_9	CALL_3
0x4000b52	        0x488d04c3	                  lea rax, [rbx + rax*8]	       245	vtls.c	FUNCTION_9
0x4000b56	    0xc68090020000	               mov byte [rax + 0x290], 1	       245	vtls.c	FUNCTION_9
0x4000b5d	    0xc78094020000	              mov dword [rax + 0x294], 1	       246	vtls.c	FUNCTION_9
0x4000b67	    0x488b05000000	            mov rax, qword [0x04000b6e] 	       248	vtls.c	FUNCTION_9	CALL_3
0x4000b6e	          0xff5060	                 call qword [rax + 0x60]	       248	vtls.c	FUNCTION_9	CALL_3
0x4000b71	            0x85c0	                           test eax, eax	       250	vtls.c	FUNCTION_9	IF_4
0x4000b73	     0xf84d7000000	                            je 0x4000c50	       250	vtls.c	FUNCTION_9	IF_4
0x4000b79	              0x5b	                                 pop rbx	       254	vtls.c	FUNCTION_9
0x4000b7a	              0x5d	                                 pop rbp	       254	vtls.c	FUNCTION_9
0x4000b7b	            0x415c	                                 pop r12	       254	vtls.c	FUNCTION_9
0x4000b7d	            0x415d	                                 pop r13	       254	vtls.c	FUNCTION_9
0x4000b7f	            0x415e	                                 pop r14	       254	vtls.c	FUNCTION_9
0x4000b81	              0xc3	                                     ret	       254	vtls.c	FUNCTION_9
0x4000b82	    0x660f1f440000	                    nop word [rax + rax]	       254	vtls.c	FUNCTION_9
0x4000b88	    0x4180bdc00200	               cmp byte [r13 + 0x2c0], 0	       210	vtls.c	FUNCTION_8	IF_1
0x4000b90	            0x7580	                           jne 0x4000b12	       210	vtls.c	FUNCTION_8	IF_1
0x4000b92	    0x488b0d000000	            mov rcx, qword [0x04000b99] 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000b99	      0xb804000000	                              mov eax, 4	       215	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000b9e	        0xf6411010	           test byte [rcx + 0x10], 0x10 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000ba2	            0x74d5	                            je 0x4000b79	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x4000ba4	    0x498bb5900200	           mov rsi, qword [r13 + 0x290] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000bab	    0x498b8da00200	           mov rcx, qword [r13 + 0x2a0] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000bb2	    0x488d84179002	           lea rax, [rdi + rdx + 0x290] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000bba	    0x4d8bb5d00200	           mov r14, qword [r13 + 0x2d0] 	       219	vtls.c	FUNCTION_8	IF_1
0x4000bc1	    0x4989b5c00200	            mov qword [r13 + 0x2c0], rsi	       220	vtls.c	FUNCTION_8	IF_1
0x4000bc8	    0x498bb5980200	           mov rsi, qword [r13 + 0x298] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000bcf	    0x49898dd00200	            mov qword [r13 + 0x2d0], rcx	       220	vtls.c	FUNCTION_8	IF_1
0x4000bd6	          0x4c89f7	                            mov rdi, r14	        90	string3.h	FUNCTION_67	CALL_6
0x4000bd9	    0x4989b5c80200	            mov qword [r13 + 0x2c8], rsi	       220	vtls.c	FUNCTION_8	IF_1
0x4000be0	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000be7	            0x31f6	                            xor esi, esi	        90	string3.h	FUNCTION_67	CALL_6
0x4000be9	    0x48c740080000	                  mov qword [rax + 8], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000bf1	    0x48c740100000	               mov qword [rax + 0x10], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000bf9	    0x488b05000000	            mov rax, qword [0x04000c00] 	       223	vtls.c	FUNCTION_8	IF_1	CALL_3
0x4000c00	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000c04	      0xe800000000	                          call 0x4000c09	        90	string3.h	FUNCTION_67	CALL_6
0x4000c09	    0x4d89b5a00200	            mov qword [r13 + 0x2a0], r14	       225	vtls.c	FUNCTION_8	IF_1
0x4000c10	      0xe9fdfeffff	                           jmp 0x4000b12	       225	vtls.c	FUNCTION_8	IF_1
0x4000c15	           0xf1f00	                         nop dword [rax]	       225	vtls.c	FUNCTION_8	IF_1
0x4000c18	    0x488d35000000	                   lea rsi, [0x04000c1f]	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000c1f	            0x31c0	                            xor eax, eax	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000c21	      0xe800000000	                          call 0x4000c26	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000c26	              0x5b	                                 pop rbx	       254	vtls.c	FUNCTION_9
0x4000c27	      0xb823000000	                           mov eax, 0x23	       242	vtls.c	FUNCTION_9	IF_3
0x4000c2c	              0x5d	                                 pop rbp	       254	vtls.c	FUNCTION_9
0x4000c2d	            0x415c	                                 pop r12	       254	vtls.c	FUNCTION_9
0x4000c2f	            0x415d	                                 pop r13	       254	vtls.c	FUNCTION_9
0x4000c31	            0x415e	                                 pop r14	       254	vtls.c	FUNCTION_9
0x4000c33	              0xc3	                                     ret	       254	vtls.c	FUNCTION_9
0x4000c34	         0xf1f4000	                         nop dword [rax]	       254	vtls.c	FUNCTION_9
0x4000c38	    0x488d35000000	                   lea rsi, [0x04000c3f]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000c3f	            0x31c0	                            xor eax, eax	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000c41	      0xe800000000	                          call 0x4000c46	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000c46	            0xebde	                           jmp 0x4000c26	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000c48	     0xf1f84000000	                   nop dword [rax + rax]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x4000c50	          0x488b3b	                    mov rdi, qword [rbx]	       251	vtls.c	FUNCTION_9	CALL_4
0x4000c53	      0xbe05000000	                              mov esi, 5	       251	vtls.c	FUNCTION_9	CALL_4
0x4000c58	      0xe800000000	                          call 0x4000c5d	       251	vtls.c	FUNCTION_9	CALL_4
0x4000c5d	            0x31c0	                            xor eax, eax	       251	vtls.c	FUNCTION_9	CALL_4
0x4000c5f	      0xe915ffffff	                           jmp 0x4000b79	       251	vtls.c	FUNCTION_9	CALL_4
Curl_none_set_engine	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x40000a0	      0xb804000000	                              mov eax, 4	      1055	vtls.c	FUNCTION_49
0x40000a5	              0xc3	                                     ret	      1055	vtls.c	FUNCTION_49
Curl_none_engines_list	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,0	2
0x40000c0	            0x31c0	                            xor eax, eax	      1067	vtls.c	FUNCTION_51
0x40000c2	              0xc3	                                     ret	      1067	vtls.c	FUNCTION_51
Curl_ssl_data_pending	ELSE,0:FOR,0:functions,0:DO,0:SWITCH,0:WHILE,0:IF,0:CALL,1	3
0x4001750	    0x488b05000000	            mov rax, qword [0x04001757] 	       639	vtls.c	FUNCTION_28	CALL_1
0x4001757	        0x488b4048	            mov rax, qword [rax + 0x48] 	       639	vtls.c	FUNCTION_28	CALL_1
0x400175b	            0xffe0	                                 jmp rax	       639	vtls.c	FUNCTION_28	CALL_1
