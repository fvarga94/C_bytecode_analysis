get_protocol_version_config	DO,0:CALL,3:IF,2:FOR,0:SWITCH,0:WHILE,0:ELSE,0:functions,0	41
0x4000040	        0x4883ec18	                           sub rsp, 0x18	        18	protocol.c	ELSE_3	FUNCTION_2
0x4000044	      0xbf00000000	                              mov edi, 0	        20	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_1
0x4000049	          0x4889e6	                            mov rsi, rsp	        20	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_1
0x400004c	    0x64488b042528	                mov rax, qword fs:[0x28]	        18	protocol.c	ELSE_3	FUNCTION_2
0x4000055	      0x4889442408	                mov qword [rsp + 8], rax	        18	protocol.c	ELSE_3	FUNCTION_2
0x400005a	            0x31c0	                            xor eax, eax	        18	protocol.c	ELSE_3	FUNCTION_2
0x400005c	      0xe800000000	                          call 0x4000061	        20	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_1
0x4000061	            0x85c0	                           test eax, eax	        20	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_1
0x4000063	            0x754b	                           jne 0x40000b0	        20	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_1
0x4000065	        0x488b3424	                    mov rsi, qword [rsp]	        21	protocol.c	ELSE_3	FUNCTION_2	IF_1	CALL_2
0x4000069	           0xfb606	                   movzx eax, byte [rsi]	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x400006c	          0x83f830	                           cmp eax, 0x30	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x400006f	            0x751f	                           jne 0x4000090	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000071	            0x31c0	                            xor eax, eax	         8	protocol.c	FUNCTION_1	IF_1
0x4000073	        0x807e0100	                   cmp byte [rsi + 1], 0	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000077	            0x7527	                           jne 0x40000a0	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000079	      0x488b542408	                mov rdx, qword [rsp + 8]	        31	protocol.c	ELSE_3	FUNCTION_2
0x400007e	    0x644833142528	                xor rdx, qword fs:[0x28]	        31	protocol.c	ELSE_3	FUNCTION_2
0x4000087	            0x7541	                           jne 0x40000ca	        31	protocol.c	ELSE_3	FUNCTION_2
0x4000089	        0x4883c418	                           add rsp, 0x18	        31	protocol.c	ELSE_3	FUNCTION_2
0x400008d	              0xc3	                                     ret	        31	protocol.c	ELSE_3	FUNCTION_2
0x400008e	            0x6690	                                     nop	        31	protocol.c	ELSE_3	FUNCTION_2
0x4000090	          0x83f831	                           cmp eax, 0x31	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000093	            0x7523	                           jne 0x40000b8	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000095	        0x807e0100	                   cmp byte [rsi + 1], 0	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000099	      0xb801000000	                              mov eax, 1	        10	protocol.c	FUNCTION_1	ELSE_1	IF_2
0x400009e	            0x74d9	                            je 0x4000079	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x40000a0	      0xbf00000000	                              mov edi, 0	        24	protocol.c	ELSE_3	FUNCTION_2	IF_1	IF_2	CALL_3
0x40000a5	            0x31c0	                            xor eax, eax	        24	protocol.c	ELSE_3	FUNCTION_2	IF_1	IF_2	CALL_3
0x40000a7	      0xe800000000	                          call 0x40000ac	        24	protocol.c	ELSE_3	FUNCTION_2	IF_1	IF_2	CALL_3
0x40000ac	         0xf1f4000	                         nop dword [rax]	        24	protocol.c	ELSE_3	FUNCTION_2	IF_1	IF_2	CALL_3
0x40000b0	            0x31c0	                            xor eax, eax	        30	protocol.c	ELSE_3	FUNCTION_2
0x40000b2	            0xebc5	                           jmp 0x4000079	        30	protocol.c	ELSE_3	FUNCTION_2
0x40000b4	         0xf1f4000	                         nop dword [rax]	        30	protocol.c	ELSE_3	FUNCTION_2
0x40000b8	          0x83f832	                           cmp eax, 0x32	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40000bb	            0x75e3	                           jne 0x40000a0	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40000bd	        0x807e0100	                   cmp byte [rsi + 1], 0	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40000c1	            0x75dd	                           jne 0x40000a0	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40000c3	      0xb802000000	                              mov eax, 2	        12	protocol.c	FUNCTION_1	ELSE_2	IF_3
0x40000c8	            0xebaf	                           jmp 0x4000079	        12	protocol.c	FUNCTION_1	ELSE_2	IF_3
0x40000ca	      0xe800000000	                          call 0x40000cf	        31	protocol.c	ELSE_3	FUNCTION_2
determine_protocol_version_server	DO,0:CALL,3:IF,1:FOR,0:SWITCH,0:WHILE,0:ELSE,0:functions,1	69
0x40000d0	              0x53	                                push rbx	        34	protocol.c	FUNCTION_3
0x40000d1	      0xbf00000000	                              mov edi, 0	        35	protocol.c	FUNCTION_3	CALL_1
0x40000d6	            0x31db	                            xor ebx, ebx	        36	protocol.c	FUNCTION_3
0x40000d8	        0x4883ec30	                           sub rsp, 0x30	        34	protocol.c	FUNCTION_3
0x40000dc	    0x64488b042528	                mov rax, qword fs:[0x28]	        34	protocol.c	FUNCTION_3
0x40000e5	      0x4889442428	             mov qword [rsp + 0x28], rax	        34	protocol.c	FUNCTION_3
0x40000ea	            0x31c0	                            xor eax, eax	        34	protocol.c	FUNCTION_3
0x40000ec	      0xe800000000	                          call 0x40000f1	        35	protocol.c	FUNCTION_3	CALL_1
0x40000f1	          0x4885c0	                           test rax, rax	        45	protocol.c	FUNCTION_3	IF_1
0x40000f4	     0xf84a7000000	                            je 0x40001a1	        45	protocol.c	FUNCTION_3	IF_1
0x40000fa	          0x4889c6	                            mov rsi, rax	        48	protocol.c	FUNCTION_3	IF_1	CALL_2
0x40000fd	      0xb9ffffffff	                     mov ecx, 0xffffffff	        48	protocol.c	FUNCTION_3	IF_1	CALL_2
0x4000102	      0xba3a000000	                           mov edx, 0x3a	        48	protocol.c	FUNCTION_3	IF_1	CALL_2
0x4000107	          0x4889e7	                            mov rdi, rsp	        48	protocol.c	FUNCTION_3	IF_1	CALL_2
0x400010a	      0x804c241001	                 or byte [rsp + 0x10], 1	        46	protocol.c	FUNCTION_3	IF_1
0x400010f	    0x48c704240000	                      mov qword [rsp], 0	        46	protocol.c	FUNCTION_3	IF_1
0x4000117	    0xc74424080000	                  mov dword [rsp + 8], 0	        46	protocol.c	FUNCTION_3	IF_1
0x400011f	    0xc744240c0000	                mov dword [rsp + 0xc], 0	        46	protocol.c	FUNCTION_3	IF_1
0x4000127	    0x48c744241800	               mov qword [rsp + 0x18], 0	        46	protocol.c	FUNCTION_3	IF_1
0x4000130	      0xe800000000	                          call 0x4000135	        48	protocol.c	FUNCTION_3	IF_1	CALL_2
0x4000135	        0x488b3424	                    mov rsi, qword [rsp]	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000139	          0x4885f6	                           test rsi, rsi	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x400013c	            0x7459	                            je 0x4000197	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x400013e	        0x8b7c2408	                mov edi, dword [rsp + 8]	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000142	        0x48c1e704	                              shl rdi, 4	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000146	          0x4801f7	                            add rdi, rsi	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000149	     0xf1f80000000	                         nop dword [rax]	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000150	          0x4839fe	                            cmp rsi, rdi	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000153	            0x7342	                           jae 0x4000197	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000155	          0x488b06	                    mov rax, qword [rsi]	        54	protocol.c	FUNCTION_3	FUNCTION_1	CALL_1
0x4000158	      0xba00000000	                              mov edx, 0	        54	protocol.c	FUNCTION_3	FUNCTION_1	CALL_1
0x400015d	            0xeb0e	                           jmp 0x400016d	        54	protocol.c	FUNCTION_3	FUNCTION_1	CALL_1
0x400015f	              0x90	                                     nop	        54	protocol.c	FUNCTION_3	FUNCTION_1	CALL_1
0x4000160	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_11	DO_1
0x4000164	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_11	DO_1
0x4000168	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_11	DO_1
0x400016b	            0x7524	                           jne 0x4000191	       488	git-compat-util.h	FUNCTION_11	DO_1
0x400016d	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x4000170	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x4000172	            0x75ec	                           jne 0x4000160	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x4000174	           0xfb610	                   movzx edx, byte [rax]	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000177	          0x83fa30	                           cmp edx, 0x30	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x400017a	            0x7415	                            je 0x4000191	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x400017c	          0x83fa31	                           cmp edx, 0x31	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x400017f	            0x7538	                           jne 0x40001b9	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000181	        0x80780100	                   cmp byte [rax + 1], 0	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000185	      0xba01000000	                              mov edx, 1	        10	protocol.c	FUNCTION_1	ELSE_1	IF_2
0x400018a	            0x7505	                           jne 0x4000191	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x400018c	            0x39d3	                            cmp ebx, edx	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x400018e	           0xf4cda	                          cmovl ebx, edx	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000191	        0x4883c610	                           add rsi, 0x10	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000195	            0x75b9	                           jne 0x4000150	        50	protocol.c	FUNCTION_3	IF_1	FUNCTION_1
0x4000197	            0x31f6	                            xor esi, esi	        61	protocol.c	FUNCTION_3	IF_1	CALL_3
0x4000199	          0x4889e7	                            mov rdi, rsp	        61	protocol.c	FUNCTION_3	IF_1	CALL_3
0x400019c	      0xe800000000	                          call 0x40001a1	        61	protocol.c	FUNCTION_3	IF_1	CALL_3
0x40001a1	            0x89d8	                            mov eax, ebx	        65	protocol.c	FUNCTION_3
0x40001a3	      0x488b5c2428	            mov rbx, qword [rsp + 0x28] 	        65	protocol.c	FUNCTION_3
0x40001a8	    0x6448331c2528	                xor rbx, qword fs:[0x28]	        65	protocol.c	FUNCTION_3
0x40001b1	            0x7518	                           jne 0x40001cb	        65	protocol.c	FUNCTION_3
0x40001b3	        0x4883c430	                           add rsp, 0x30	        65	protocol.c	FUNCTION_3
0x40001b7	              0x5b	                                 pop rbx	        65	protocol.c	FUNCTION_3
0x40001b8	              0xc3	                                     ret	        65	protocol.c	FUNCTION_3
0x40001b9	          0x83fa32	                           cmp edx, 0x32	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40001bc	            0x75d3	                           jne 0x4000191	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40001be	        0x80780100	                   cmp byte [rax + 1], 0	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40001c2	            0x75cd	                           jne 0x4000191	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x40001c4	      0xba02000000	                              mov edx, 2	        12	protocol.c	FUNCTION_1	ELSE_2	IF_3
0x40001c9	            0xebc1	                           jmp 0x400018c	        12	protocol.c	FUNCTION_1	ELSE_2	IF_3
0x40001cb	      0xe800000000	call sym.determine_protocol_version_client	        65	protocol.c	FUNCTION_3
determine_protocol_version_client	DO,0:CALL,4:IF,3:FOR,0:SWITCH,0:WHILE,0:ELSE,0:functions,0	40
0x40001d0	        0x4883ec08	                              sub rsp, 8	        68	protocol.c	FUNCTION_4
0x40001d4	      0xb800000000	                              mov eax, 0	        68	protocol.c	FUNCTION_4
0x40001d9	            0xeb12	                           jmp 0x40001ed	        68	protocol.c	FUNCTION_4
0x40001db	       0xf1f440000	                   nop dword [rax + rax]	        68	protocol.c	FUNCTION_4
0x40001e0	        0x4883c701	                              add rdi, 1	       488	git-compat-util.h	FUNCTION_11	DO_1
0x40001e4	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_11	DO_1
0x40001e8	          0x3a57ff	                  cmp dl, byte [rdi - 1]	       488	git-compat-util.h	FUNCTION_11	DO_1
0x40001eb	            0x7543	                           jne 0x4000230	       488	git-compat-util.h	FUNCTION_11	DO_1
0x40001ed	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x40001f0	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x40001f2	            0x75ec	                           jne 0x40001e0	       484	git-compat-util.h	FUNCTION_11	DO_1	IF_1
0x40001f4	           0xfb607	                   movzx eax, byte [rdi]	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x40001f7	          0x83f830	                           cmp eax, 0x30	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x40001fa	            0x7514	                           jne 0x4000210	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x40001fc	        0x807f0100	                   cmp byte [rdi + 1], 0	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000200	            0x751e	                           jne 0x4000220	         7	protocol.c	FUNCTION_1	IF_1	CALL_1
0x4000202	      0xbf00000000	                              mov edi, 0	        77	protocol.c	FUNCTION_4	IF_1	CALL_4
0x4000207	            0x31c0	                            xor eax, eax	        77	protocol.c	FUNCTION_4	IF_1	CALL_4
0x4000209	      0xe800000000	                          call 0x400020e	        77	protocol.c	FUNCTION_4	IF_1	CALL_4
0x400020e	            0x6690	                                     nop	        77	protocol.c	FUNCTION_4	IF_1	CALL_4
0x4000210	          0x83f831	                           cmp eax, 0x31	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000213	            0x752b	                           jne 0x4000240	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000215	        0x807f0100	                   cmp byte [rdi + 1], 0	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000219	      0xb801000000	                              mov eax, 1	        10	protocol.c	FUNCTION_1	ELSE_1	IF_2
0x400021e	            0x7412	                            je 0x4000232	         9	protocol.c	FUNCTION_1	ELSE_1	IF_2	CALL_2
0x4000220	      0xbf00000000	                              mov edi, 0	        75	protocol.c	FUNCTION_4	IF_1	CALL_3
0x4000225	            0x31c0	                            xor eax, eax	        75	protocol.c	FUNCTION_4	IF_1	CALL_3
0x4000227	      0xe800000000	                          call 0x400022c	        75	protocol.c	FUNCTION_4	IF_1	CALL_3
0x400022c	         0xf1f4000	                         nop dword [rax]	        75	protocol.c	FUNCTION_4	IF_1	CALL_3
0x4000230	            0x31c0	                            xor eax, eax	        69	protocol.c	FUNCTION_4
0x4000232	        0x4883c408	                              add rsp, 8	        81	protocol.c	FUNCTION_4
0x4000236	              0xc3	                                     ret	        81	protocol.c	FUNCTION_4
0x4000237	    0x660f1f840000	                    nop word [rax + rax]	        81	protocol.c	FUNCTION_4
0x4000240	          0x83f832	                           cmp eax, 0x32	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x4000243	            0x75db	                           jne 0x4000220	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x4000245	        0x807f0100	                   cmp byte [rdi + 1], 0	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x4000249	            0x75d5	                           jne 0x4000220	        11	protocol.c	FUNCTION_1	ELSE_2	IF_3	CALL_3
0x400024b	      0xb802000000	                              mov eax, 2	        12	protocol.c	FUNCTION_1	ELSE_2	IF_3
0x4000250	        0x4883c408	                              add rsp, 8	        81	protocol.c	FUNCTION_4
0x4000254	              0xc3	                                     ret	        81	protocol.c	FUNCTION_4
