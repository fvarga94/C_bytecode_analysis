reset_index	SWITCH,1:functions,0:WHILE,0:FOR,1:ELSE,0:DO,0:CALL,15:IF,7	144
0x4000080	            0x4157	                                push r15	        46	reset.c	FUNCTION_2
0x4000082	            0x4156	                                push r14	        46	reset.c	FUNCTION_2
0x4000084	      0xb960000000	                           mov ecx, 0x60	        90	string3.h	FUNCTION_46	CALL_6
0x4000089	            0x4155	                                push r13	        46	reset.c	FUNCTION_2
0x400008b	            0x4154	                                push r12	        46	reset.c	FUNCTION_2
0x400008d	          0x4989fc	                            mov r12, rdi	        46	reset.c	FUNCTION_2
0x4000090	              0x55	                                push rbp	        46	reset.c	FUNCTION_2
0x4000091	              0x53	                                push rbx	        46	reset.c	FUNCTION_2
0x4000092	            0x89f3	                            mov ebx, esi	        46	reset.c	FUNCTION_2
0x4000094	    0x4881ec980300	                          sub rsp, 0x398	        46	reset.c	FUNCTION_2
0x400009b	    0x488dac248000	                   lea rbp, [rsp + 0x80]	        90	string3.h	FUNCTION_46	CALL_6
0x40000a3	    0x64488b042528	                mov rax, qword fs:[0x28]	        46	reset.c	FUNCTION_2
0x40000ac	    0x488984248803	            mov qword [rsp + 0x388], rax	        46	reset.c	FUNCTION_2
0x40000b4	            0x31c0	                            xor eax, eax	        46	reset.c	FUNCTION_2
0x40000b6	          0x4889ef	                            mov rdi, rbp	        90	string3.h	FUNCTION_46	CALL_6
0x40000b9	            0x85d2	                           test edx, edx	        59	reset.c	FUNCTION_2	IF_1
0x40000bb	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_46	CALL_6
0x40000be	    0xc78424800200	              mov dword [rsp + 0x280], 1	        54	reset.c	FUNCTION_2
0x40000c9	    0x48c78424a002	              mov qword [rsp + 0x2a0], 0	        55	reset.c	FUNCTION_2
0x40000d5	    0x48c784249802	              mov qword [rsp + 0x298], 0	        56	reset.c	FUNCTION_2
0x40000e1	    0x48c78424e800	               mov qword [rsp + 0xe8], 0	        57	reset.c	FUNCTION_2
0x40000ed	    0xc78424840000	               mov dword [rsp + 0x84], 1	        58	reset.c	FUNCTION_2
0x40000f8	            0x750b	                           jne 0x4000105	        59	reset.c	FUNCTION_2	IF_1
0x40000fa	    0xc78424980000	               mov dword [rsp + 0x98], 1	        60	reset.c	FUNCTION_2	IF_1
0x4000105	          0x83fb02	                              cmp ebx, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x4000108	     0xf84da000000	                            je 0x40001e8	        61	reset.c	FUNCTION_2	SWITCH_1
0x400010e	     0xf8cdf000000	                            jl 0x40001f3	        61	reset.c	FUNCTION_2	SWITCH_1
0x4000114	          0x83fb04	                              cmp ebx, 4	        61	reset.c	FUNCTION_2	SWITCH_1
0x4000117	     0xf8fd6000000	                            jg 0x40001f3	        61	reset.c	FUNCTION_2	SWITCH_1
0x400011d	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2
0x4000122	    0xc78424880000	               mov dword [rsp + 0x88], 1	        64	reset.c	FUNCTION_2	SWITCH_1
0x400012d	      0xe800000000	                          call 0x4000132	        73	reset.c	FUNCTION_2
0x4000132	          0x83fb04	                              cmp ebx, 4	        75	reset.c	FUNCTION_2	IF_2
0x4000135	     0xf85d6000000	                           jne 0x4000211	        75	reset.c	FUNCTION_2	IF_2
0x400013b	      0x488d742410	                   lea rsi, [rsp + 0x10]	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x4000140	      0xbf00000000	                              mov edi, 0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x4000145	      0xe800000000	                          call 0x400014a	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x400014a	            0x85c0	                           test eax, eax	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x400014c	     0xf857e010000	                           jne 0x40002d0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x4000152	      0x4c8d7c2430	                   lea r15, [rsp + 0x30]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000157	      0x488d742410	                   lea rsi, [rsp + 0x10]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x400015c	          0x4c89ff	                            mov rdi, r15	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x400015f	      0xe800000000	                          call 0x4000164	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000164	          0x4885c0	                           test rax, rax	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000167	     0xf8483010000	                            je 0x40002f0	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x400016d	        0x498d7f28	                   lea rdi, [r15 + 0x28]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000171	          0x4c89e6	                            mov rsi, r12	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000174	    0x48c78424e800	               mov qword [rsp + 0xe8], 0	        82	reset.c	FUNCTION_2	IF_2
0x4000180	    0xc744240c0100	                mov dword [rsp + 0xc], 1	        81	reset.c	FUNCTION_2	IF_2
0x4000188	    0x41be02000000	                             mov r14d, 2	        81	reset.c	FUNCTION_2	IF_2
0x400018e	    0x41bd02000000	                             mov r13d, 2	        81	reset.c	FUNCTION_2	IF_2
0x4000194	      0xe800000000	                          call 0x4000199	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000199	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400019c	     0xf859c000000	                           jne 0x400023e	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x40001a2	          0x4c89e7	                            mov rdi, r12	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001a5	      0xe800000000	                          call 0x40001aa	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001aa	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_41
0x40001ac	          0x4889c3	                            mov rbx, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001af	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_41
0x40001b4	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_41
0x40001b9	      0xe800000000	                          call 0x40001be	        54	gettext.h	FUNCTION_41
0x40001be	          0x4889de	                            mov rsi, rbx	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001c1	          0x4889c7	                            mov rdi, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001c4	            0x31c0	                            xor eax, eax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001c6	      0xe800000000	                          call 0x40001cb	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40001cb	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       102	reset.c	FUNCTION_2	FOR_1
0x40001cf	            0x85c0	                           test eax, eax	       102	reset.c	FUNCTION_2	FOR_1
0x40001d1	     0xf8537010000	                           jne 0x400030e	       102	reset.c	FUNCTION_2	FOR_1
0x40001d7	      0xbdffffffff	                     mov ebp, 0xffffffff	        51	reset.c	FUNCTION_2
0x40001dc	      0xe98e000000	                           jmp 0x400026f	        51	reset.c	FUNCTION_2
0x40001e1	     0xf1f80000000	                         nop dword [rax]	        51	reset.c	FUNCTION_2
0x40001e8	    0xc78424880000	               mov dword [rsp + 0x88], 1	        67	reset.c	FUNCTION_2	SWITCH_1
0x40001f3	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2
0x40001f8	    0xc78424800000	               mov dword [rsp + 0x80], 1	        70	reset.c	FUNCTION_2	SWITCH_1
0x4000203	      0xe800000000	                          call 0x4000208	        73	reset.c	FUNCTION_2
0x4000208	          0x83fb04	                              cmp ebx, 4	        75	reset.c	FUNCTION_2	IF_2
0x400020b	     0xf842affffff	                            je 0x400013b	        75	reset.c	FUNCTION_2	IF_2
0x4000211	      0x4c8d7c2430	                   lea r15, [rsp + 0x30]	        75	reset.c	FUNCTION_2	IF_2
0x4000216	          0x4c89e6	                            mov rsi, r12	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000219	    0xc744240c0000	                mov dword [rsp + 0xc], 0	        47	reset.c	FUNCTION_2
0x4000221	    0x41be01000000	                             mov r14d, 1	        75	reset.c	FUNCTION_2	IF_2
0x4000227	    0x41bd01000000	                             mov r13d, 1	        75	reset.c	FUNCTION_2	IF_2
0x400022d	          0x4c89ff	                            mov rdi, r15	        75	reset.c	FUNCTION_2	IF_2
0x4000230	      0xe800000000	                          call 0x4000235	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000235	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000238	     0xf8464ffffff	                            je 0x40001a2	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400023e	          0x4889ea	                            mov rdx, rbp	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x4000241	          0x4c89fe	                            mov rsi, r15	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x4000244	          0x4489f7	                           mov edi, r14d	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x4000247	      0xe800000000	                          call 0x400024c	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x400024c	            0x85c0	                           test eax, eax	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x400024e	      0xbdffffffff	                     mov ebp, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000253	            0x744b	                            je 0x40002a0	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x4000255	      0x488b7c2430	            mov rdi, qword [rsp + 0x30] 	       103	reset.c	FUNCTION_2	CALL_15
0x400025a	      0xe800000000	                          call 0x400025f	       103	reset.c	FUNCTION_2	CALL_15
0x400025f	        0x4183fd01	                             cmp r13d, 1	       102	reset.c	FUNCTION_2	FOR_1
0x4000263	            0x740a	                            je 0x400026f	       102	reset.c	FUNCTION_2	FOR_1
0x4000265	      0x488b7c2458	            mov rdi, qword [rsp + 0x58] 	       103	reset.c	FUNCTION_2	CALL_15
0x400026a	      0xe800000000	                          call 0x400026f	       103	reset.c	FUNCTION_2	CALL_15
0x400026f	    0x488b8c248803	           mov rcx, qword [rsp + 0x388] 	       105	reset.c	FUNCTION_2
0x4000277	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       105	reset.c	FUNCTION_2
0x4000280	            0x89e8	                            mov eax, ebp	       105	reset.c	FUNCTION_2
0x4000282	     0xf8581000000	                           jne 0x4000309	       105	reset.c	FUNCTION_2
0x4000288	    0x4881c4980300	                          add rsp, 0x398	       105	reset.c	FUNCTION_2
0x400028f	              0x5b	                                 pop rbx	       105	reset.c	FUNCTION_2
0x4000290	              0x5d	                                 pop rbp	       105	reset.c	FUNCTION_2
0x4000291	            0x415c	                                 pop r12	       105	reset.c	FUNCTION_2
0x4000293	            0x415d	                                 pop r13	       105	reset.c	FUNCTION_2
0x4000295	            0x415e	                                 pop r14	       105	reset.c	FUNCTION_2
0x4000297	            0x415f	                                 pop r15	       105	reset.c	FUNCTION_2
0x4000299	              0xc3	                                     ret	       105	reset.c	FUNCTION_2
0x400029a	    0x660f1f440000	                    nop word [rax + rax]	       105	reset.c	FUNCTION_2
0x40002a0	            0x31ed	                            xor ebp, ebp	        99	reset.c	FUNCTION_2
0x40002a2	          0x83e3fd	                     and ebx, 0xfffffffd	        94	reset.c	FUNCTION_2	IF_7
0x40002a5	            0x75ae	                           jne 0x4000255	        94	reset.c	FUNCTION_2	IF_7
0x40002a7	          0x4c89e7	                            mov rdi, r12	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x40002aa	      0xe800000000	                          call 0x40002af	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x40002af	      0xbf00000000	                              mov edi, 0	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x40002b4	          0x4889c6	                            mov rsi, rax	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x40002b7	      0xe800000000	                          call 0x40002bc	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x40002bc	      0x488b7c2430	            mov rdi, qword [rsp + 0x30] 	       103	reset.c	FUNCTION_2	CALL_15
0x40002c1	      0xe800000000	                          call 0x40002c6	       103	reset.c	FUNCTION_2	CALL_15
0x40002c6	        0x4183fd01	                             cmp r13d, 1	       102	reset.c	FUNCTION_2	FOR_1
0x40002ca	            0x7599	                           jne 0x4000265	       102	reset.c	FUNCTION_2	FOR_1
0x40002cc	            0xeba1	                           jmp 0x400026f	       102	reset.c	FUNCTION_2	FOR_1
0x40002ce	            0x6690	                                     nop	       102	reset.c	FUNCTION_2	FOR_1
0x40002d0	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_41
0x40002d2	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_41
0x40002d7	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_41
0x40002dc	      0xe800000000	                          call 0x40002e1	        54	gettext.h	FUNCTION_41
0x40002e1	          0x4889c7	                            mov rdi, rax	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002e4	            0x31c0	                            xor eax, eax	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002e6	      0xe800000000	                          call 0x40002eb	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002eb	      0xe9e7feffff	                           jmp 0x40001d7	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002f0	      0xbf00000000	                              mov edi, 0	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002f5	      0xe876fdffff	                       call sym._.part.0	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002fa	          0x4889c7	                            mov rdi, rax	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x40002fd	            0x31c0	                            xor eax, eax	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x40002ff	      0xe800000000	                          call 0x4000304	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000304	      0xe9cefeffff	                           jmp 0x40001d7	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000309	      0xe800000000	                          call 0x400030e	       105	reset.c	FUNCTION_2
0x400030e	      0x448b6c240c	            mov r13d, dword [rsp + 0xc] 	       102	reset.c	FUNCTION_2	FOR_1
0x4000313	          0x83cdff	                      or ebp, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000316	      0xe93affffff	                           jmp 0x4000255	        51	reset.c	FUNCTION_2
git_reset_config	SWITCH,0:functions,0:WHILE,0:FOR,0:ELSE,0:DO,0:CALL,3:IF,1	12
0x4000040	          0x4889f8	                            mov rax, rdi	       273	reset.c	FUNCTION_10
0x4000043	          0x4989f0	                             mov r8, rsi	       273	reset.c	FUNCTION_10
0x4000046	      0xbf00000000	                              mov edi, 0	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004b	          0x4889c6	                            mov rsi, rax	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004e	      0xb912000000	                           mov ecx, 0x12	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000053	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000055	          0x4c89c6	                             mov rsi, r8	       275	reset.c	FUNCTION_10	CALL_2
0x4000058	          0x4889c7	                            mov rdi, rax	       275	reset.c	FUNCTION_10	CALL_2
0x400005b	            0x740b	                            je 0x4000068	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400005d	      0xe900000000	                           jmp 0x4000062	       277	reset.c	FUNCTION_10	CALL_3
0x4000062	    0x660f1f440000	                    nop word [rax + rax]	       277	reset.c	FUNCTION_10	CALL_3
0x4000068	      0xe900000000	                           jmp 0x400006d	       275	reset.c	FUNCTION_10	CALL_2
update_index_from_diff	SWITCH,0:functions,0:WHILE,0:FOR,1:ELSE,0:DO,0:CALL,5:IF,3	87
0x4000320	            0x4157	                                push r15	       123	reset.c	FUNCTION_4
0x4000322	            0x4156	                                push r14	       123	reset.c	FUNCTION_4
0x4000324	            0x4155	                                push r13	       123	reset.c	FUNCTION_4
0x4000326	            0x4154	                                push r12	       123	reset.c	FUNCTION_4
0x4000328	              0x55	                                push rbp	       123	reset.c	FUNCTION_4
0x4000329	              0x53	                                push rbx	       123	reset.c	FUNCTION_4
0x400032a	        0x4883ec18	                           sub rsp, 0x18	       123	reset.c	FUNCTION_4
0x400032e	          0x8b470c	              mov eax, dword [rdi + 0xc]	       127	reset.c	FUNCTION_4	FOR_1
0x4000331	          0x448b3a	                   mov r15d, dword [rdx]	       125	reset.c	FUNCTION_4
0x4000334	            0x85c0	                           test eax, eax	       127	reset.c	FUNCTION_4	FOR_1
0x4000336	     0xf8e9b000000	                           jle 0x40003d7	       127	reset.c	FUNCTION_4	FOR_1
0x400033c	          0x4989fe	                            mov r14, rdi	       127	reset.c	FUNCTION_4	FOR_1
0x400033f	          0x4531ed	                          xor r13d, r13d	       127	reset.c	FUNCTION_4	FOR_1
0x4000342	          0x4531e4	                          xor r12d, r12d	       127	reset.c	FUNCTION_4	FOR_1
0x4000345	            0xeb5c	                           jmp 0x40003a3	       127	reset.c	FUNCTION_4	FOR_1
0x4000347	    0x660f1f840000	                    nop word [rax + rax]	       127	reset.c	FUNCTION_4	FOR_1
0x4000350	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_19	CALL_1
0x4000355	      0xbe00000000	                              mov esi, 0	       975	cache.h	FUNCTION_19	CALL_1
0x400035a	          0x4889df	                            mov rdi, rbx	       975	cache.h	FUNCTION_19	CALL_1
0x400035d	      0xe800000000	                          call 0x4000362	       975	cache.h	FUNCTION_19	CALL_1
0x4000362	            0x85c0	                           test eax, eax	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000364	            0x7450	                            je 0x40003b6	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000366	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400036a	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400036d	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400036f	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000372	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000375	      0xe800000000	                          call 0x400037a	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400037a	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400037d	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000380	     0xf84aa000000	                            je 0x4000430	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x4000386	      0xba03000000	                              mov edx, 3	       146	reset.c	FUNCTION_4	FOR_1
0x400038b	      0xbf00000000	                              mov edi, 0	       146	reset.c	FUNCTION_4	FOR_1
0x4000390	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x4000394	      0xe800000000	                          call 0x4000399	       146	reset.c	FUNCTION_4	FOR_1
0x4000399	        0x4983c508	                              add r13, 8	       146	reset.c	FUNCTION_4	FOR_1
0x400039d	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x40003a1	            0x7e34	                           jle 0x40003d7	       127	reset.c	FUNCTION_4	FOR_1
0x40003a3	          0x498b06	                    mov rax, qword [r14]	       128	reset.c	FUNCTION_4	FOR_1
0x40003a6	        0x4a8b0428	              mov rax, qword [rax + r13]	       128	reset.c	FUNCTION_4	FOR_1
0x40003aa	          0x488b18	                    mov rbx, qword [rax]	       128	reset.c	FUNCTION_4	FOR_1
0x40003ad	         0xfb76b40	           movzx ebp, word [rbx + 0x40] 	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003b1	          0x6685ed	                             test bp, bp	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003b4	            0x759a	                           jne 0x4000350	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003b6	          0x4585ff	                         test r15d, r15d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40003b9	            0x7535	                           jne 0x40003f0	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40003bb	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40003bf	      0xbf00000000	                              mov edi, 0	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40003c4	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x40003c8	        0x4983c508	                              add r13, 8	       127	reset.c	FUNCTION_4	FOR_1
0x40003cc	      0xe800000000	                          call 0x40003d1	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40003d1	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x40003d5	            0x7fcc	                            jg 0x40003a3	       127	reset.c	FUNCTION_4	FOR_1
0x40003d7	        0x4883c418	                           add rsp, 0x18	       148	reset.c	FUNCTION_4
0x40003db	              0x5b	                                 pop rbx	       148	reset.c	FUNCTION_4
0x40003dc	              0x5d	                                 pop rbp	       148	reset.c	FUNCTION_4
0x40003dd	            0x415c	                                 pop r12	       148	reset.c	FUNCTION_4
0x40003df	            0x415d	                                 pop r13	       148	reset.c	FUNCTION_4
0x40003e1	            0x415e	                                 pop r14	       148	reset.c	FUNCTION_4
0x40003e3	            0x415f	                                 pop r15	       148	reset.c	FUNCTION_4
0x40003e5	              0xc3	                                     ret	       148	reset.c	FUNCTION_4
0x40003e6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       148	reset.c	FUNCTION_4
0x40003f0	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003f4	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003f7	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003f9	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003fc	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003ff	      0xe800000000	                          call 0x4000404	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000404	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x4000407	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400040a	            0x7424	                            je 0x4000430	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400040c	    0x814e38000000	       or dword [rsi + 0x38], 0x20000000	       143	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000413	          0x4889f7	                            mov rdi, rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000416	      0x4889742408	                mov qword [rsp + 8], rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x400041b	      0xe800000000	                          call 0x4000420	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000420	      0x488b742408	                mov rsi, qword [rsp + 8]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000425	      0xe95cffffff	                           jmp 0x4000386	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x400042a	    0x660f1f440000	                    nop word [rax + rax]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000430	        0x488b5b18	            mov rbx, qword [rbx + 0x18] 	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000434	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_41
0x4000439	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_41
0x400043b	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_41
0x4000440	      0xe800000000	                          call 0x4000445	        54	gettext.h	FUNCTION_41
0x4000445	          0x4889de	                            mov rsi, rbx	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000448	          0x4889c7	                            mov rdi, rax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x400044b	            0x31c0	                            xor eax, eax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x400044d	      0xe800000000	                          call 0x4000452	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
