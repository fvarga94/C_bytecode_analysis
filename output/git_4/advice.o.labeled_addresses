git_default_advice_config	DO,0:functions,0:FOR,1:IF,6:CALL,9:WHILE,0:SWITCH,0:ELSE,0	113
0x4000200	            0x4157	                                push r15	       103	advice.c	FUNCTION_4
0x4000202	            0x4156	                                push r14	       103	advice.c	FUNCTION_4
0x4000204	      0xb90d000000	                            mov ecx, 0xd	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000209	            0x4155	                                push r13	       103	advice.c	FUNCTION_4
0x400020b	            0x4154	                                push r12	       103	advice.c	FUNCTION_4
0x400020d	          0x4989f4	                            mov r12, rsi	       103	advice.c	FUNCTION_4
0x4000210	              0x55	                                push rbp	       103	advice.c	FUNCTION_4
0x4000211	              0x53	                                push rbx	       103	advice.c	FUNCTION_4
0x4000212	          0x4889fd	                            mov rbp, rdi	       103	advice.c	FUNCTION_4
0x4000215	          0x4889ee	                            mov rsi, rbp	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000218	      0xbf00000000	                              mov edi, 0	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x400021d	          0x4889eb	                            mov rbx, rbp	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000220	        0x4883ec08	                              sub rsp, 8	       103	advice.c	FUNCTION_4
0x4000224	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000226	           0xf92c0	                                 setb al	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000229	        0x410f97c5	                               seta r13b	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x400022d	          0x4129c5	                           sub r13d, eax	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000230	      0xb800000000	                              mov eax, 0	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000235	        0x450fbeed	                        movsx r13d, r13b	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000239	          0x4585ed	                         test r13d, r13d	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x400023c	            0x7517	                           jne 0x4000255	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x400023e	      0xe9ed000000	                           jmp 0x4000330	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000243	       0xf1f440000	                   nop dword [rax + rax]	       107	advice.c	FUNCTION_4	IF_1	CALL_1
0x4000248	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_36	DO_1
0x400024c	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_36	DO_1
0x4000250	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_36	DO_1
0x4000253	            0x756b	                           jne 0x40002c0	       488	git-compat-util.h	FUNCTION_36	DO_1
0x4000255	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x4000258	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x400025a	            0x75ec	                           jne 0x4000248	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x400025c	      0xbe00000000	                              mov esi, 0	        38	advice.c	FUNCTION_1	IF_1	CALL_1
0x4000261	          0x4889df	                            mov rdi, rbx	        38	advice.c	FUNCTION_1	IF_1	CALL_1
0x4000264	      0xe800000000	                          call 0x4000269	        38	advice.c	FUNCTION_1	IF_1	CALL_1
0x4000269	            0x85c0	                           test eax, eax	        38	advice.c	FUNCTION_1	IF_1	CALL_1
0x400026b	            0x741c	                            je 0x4000289	        38	advice.c	FUNCTION_1	IF_1	CALL_1
0x400026d	      0xbe00000000	                              mov esi, 0	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x4000272	          0x4889df	                            mov rdi, rbx	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x4000275	      0xe800000000	                          call 0x400027a	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x400027a	            0x89c2	                            mov edx, eax	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x400027c	      0xb801000000	                              mov eax, 1	        41	advice.c	FUNCTION_1	IF_2
0x4000281	            0x85d2	                           test edx, edx	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x4000283	     0xf858f000000	                           jne 0x4000318	        40	advice.c	FUNCTION_1	IF_2	CALL_2
0x4000289	          0x4d85e4	                           test r12, r12	       116	advice.c	FUNCTION_4	IF_2	IF_4
0x400028c	     0xf84d0000000	                            je 0x4000362	       116	advice.c	FUNCTION_4	IF_2	IF_4
0x4000292	            0x4898	                                    cdqe	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x4000294	        0x4883c408	                              add rsp, 8	       132	advice.c	FUNCTION_4
0x4000298	          0x4c89e7	                            mov rdi, r12	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x400029b	        0x488d0480	                  lea rax, [rax + rax*4]	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x400029f	              0x5b	                                 pop rbx	       132	advice.c	FUNCTION_4
0x40002a0	          0x4889c6	                            mov rsi, rax	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002a3	              0x5d	                                 pop rbp	       132	advice.c	FUNCTION_4
0x40002a4	            0x415c	                                 pop r12	       132	advice.c	FUNCTION_4
0x40002a6	            0x415d	                                 pop r13	       132	advice.c	FUNCTION_4
0x40002a8	            0x415e	                                 pop r14	       132	advice.c	FUNCTION_4
0x40002aa	            0x415f	                                 pop r15	       132	advice.c	FUNCTION_4
0x40002ac	        0x48c1e604	                              shl rsi, 4	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002b0	          0x4829c6	                            sub rsi, rax	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002b3	    0x4881c6000000	                              add rsi, 0	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002ba	      0xe900000000	                           jmp 0x40002bf	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002bf	              0x90	                                     nop	       118	advice.c	FUNCTION_4	IF_2	CALL_6
0x40002c0	          0x4889eb	                            mov rbx, rbp	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002c3	      0xb800000000	                              mov eax, 0	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002c8	            0xeb13	                           jmp 0x40002dd	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002ca	    0x660f1f440000	                    nop word [rax + rax]	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002d0	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002d4	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002d8	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002db	            0x753b	                           jne 0x4000318	       488	git-compat-util.h	FUNCTION_36	DO_1
0x40002dd	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x40002e0	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x40002e2	            0x75ec	                           jne 0x40002d0	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x40002e4	          0x4531f6	                          xor r14d, r14d	       484	git-compat-util.h	FUNCTION_36	DO_1	IF_1
0x40002e7	          0x4c89f0	                            mov rax, r14	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x40002ea	          0x4889df	                            mov rdi, rbx	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x40002ed	          0x4d63fe	                        movsxd r15, r14d	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x40002f0	        0x48c1e004	                              shl rax, 4	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x40002f4	    0x488bb0000000	                    mov rsi, qword [rax]	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x40002fb	      0xe800000000	                          call 0x4000300	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x4000300	            0x85c0	                           test eax, eax	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x4000302	          0x4189c5	                           mov r13d, eax	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x4000305	            0x7441	                            je 0x4000348	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x4000307	        0x4983c601	                              add r14, 1	       125	advice.c	FUNCTION_4	FOR_1	IF_6	CALL_8
0x400030b	        0x4983fe14	                           cmp r14, 0x14	       124	advice.c	FUNCTION_4	FOR_1
0x400030f	            0x75d6	                           jne 0x40002e7	       124	advice.c	FUNCTION_4	FOR_1
0x4000311	     0xf1f80000000	                         nop dword [rax]	       124	advice.c	FUNCTION_4	FOR_1
0x4000318	          0x4531ed	                          xor r13d, r13d	       115	advice.c	FUNCTION_4	IF_2	IF_3
0x400031b	        0x4883c408	                              add rsp, 8	       132	advice.c	FUNCTION_4
0x400031f	          0x4489e8	                           mov eax, r13d	       132	advice.c	FUNCTION_4
0x4000322	              0x5b	                                 pop rbx	       132	advice.c	FUNCTION_4
0x4000323	              0x5d	                                 pop rbp	       132	advice.c	FUNCTION_4
0x4000324	            0x415c	                                 pop r12	       132	advice.c	FUNCTION_4
0x4000326	            0x415d	                                 pop r13	       132	advice.c	FUNCTION_4
0x4000328	            0x415e	                                 pop r14	       132	advice.c	FUNCTION_4
0x400032a	            0x415f	                                 pop r15	       132	advice.c	FUNCTION_4
0x400032c	              0xc3	                                     ret	       132	advice.c	FUNCTION_4
0x400032d	           0xf1f00	                         nop dword [rax]	       132	advice.c	FUNCTION_4
0x4000330	          0x4c89e6	                            mov rsi, r12	       108	advice.c	FUNCTION_4	IF_1	CALL_2
0x4000333	          0x4889ef	                            mov rdi, rbp	       108	advice.c	FUNCTION_4	IF_1	CALL_2
0x4000336	      0xe800000000	                          call 0x400033b	       108	advice.c	FUNCTION_4	IF_1	CALL_2
0x400033b	    0x890500000000	            mov dword [0x04000341], eax 	       108	advice.c	FUNCTION_4	IF_1	CALL_2
0x4000341	            0xebd8	                           jmp 0x400031b	       109	advice.c	FUNCTION_4	IF_1
0x4000343	       0xf1f440000	                   nop dword [rax + rax]	       109	advice.c	FUNCTION_4	IF_1
0x4000348	        0x49c1e704	                              shl r15, 4	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x400034c	          0x4c89e6	                            mov rsi, r12	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x400034f	          0x4889ef	                            mov rdi, rbp	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x4000352	    0x498b9f000000	                    mov rbx, qword [r15]	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x4000359	      0xe800000000	                          call 0x400035e	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x400035e	            0x8903	                    mov dword [rbx], eax	       127	advice.c	FUNCTION_4	FOR_1	CALL_9
0x4000360	            0xebb9	                           jmp 0x400031b	       128	advice.c	FUNCTION_4	FOR_1
0x4000362	          0x4889ef	                            mov rdi, rbp	       117	advice.c	FUNCTION_4	IF_2	CALL_5
0x4000365	    0x41bdffffffff	                    mov r13d, 0xffffffff	       117	advice.c	FUNCTION_4	IF_2	CALL_5
0x400036b	      0xe800000000	                          call 0x4000370	       117	advice.c	FUNCTION_4	IF_2	CALL_5
0x4000370	            0xeba9	                           jmp 0x400031b	       117	advice.c	FUNCTION_4	IF_2	CALL_5
error_resolve_conflict	DO,0:functions,0:FOR,0:IF,6:CALL,13:WHILE,0:SWITCH,0:ELSE,5	67
0x4000380	              0x53	                                push rbx	       135	advice.c	FUNCTION_5
0x4000381	          0x4889fb	                            mov rbx, rdi	       135	advice.c	FUNCTION_5
0x4000384	      0xb90c000000	                            mov ecx, 0xc	       136	advice.c	FUNCTION_5	IF_1	CALL_1
0x4000389	          0x4889de	                            mov rsi, rbx	       136	advice.c	FUNCTION_5	IF_1	CALL_1
0x400038c	      0xbf00000000	                              mov edi, 0	       136	advice.c	FUNCTION_5	IF_1	CALL_1
0x4000391	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x4000396	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       136	advice.c	FUNCTION_5	IF_1	CALL_1
0x4000398	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x400039d	            0x7469	                            je 0x4000408	       136	advice.c	FUNCTION_5	IF_1	CALL_1
0x400039f	      0xbf00000000	                              mov edi, 0	       138	advice.c	FUNCTION_5	ELSE_1	IF_2	CALL_3
0x40003a4	      0xb907000000	                              mov ecx, 7	       138	advice.c	FUNCTION_5	ELSE_1	IF_2	CALL_3
0x40003a9	          0x4889de	                            mov rsi, rbx	       138	advice.c	FUNCTION_5	ELSE_1	IF_2	CALL_3
0x40003ac	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       138	advice.c	FUNCTION_5	ELSE_1	IF_2	CALL_3
0x40003ae	     0xf8494000000	                            je 0x4000448	       138	advice.c	FUNCTION_5	ELSE_1	IF_2	CALL_3
0x40003b4	          0x4889de	                            mov rsi, rbx	       140	advice.c	FUNCTION_5	ELSE_2	IF_3	CALL_5
0x40003b7	      0xbf00000000	                              mov edi, 0	       140	advice.c	FUNCTION_5	ELSE_2	IF_3	CALL_5
0x40003bc	      0xb906000000	                              mov ecx, 6	       140	advice.c	FUNCTION_5	ELSE_2	IF_3	CALL_5
0x40003c1	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       140	advice.c	FUNCTION_5	ELSE_2	IF_3	CALL_5
0x40003c3	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40003c8	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x40003cd	            0x7439	                            je 0x4000408	       140	advice.c	FUNCTION_5	ELSE_2	IF_3	CALL_5
0x40003cf	          0x4889de	                            mov rsi, rbx	       142	advice.c	FUNCTION_5	ELSE_3	IF_4	CALL_7
0x40003d2	      0xbf00000000	                              mov edi, 0	       142	advice.c	FUNCTION_5	ELSE_3	IF_4	CALL_7
0x40003d7	      0xb905000000	                              mov ecx, 5	       142	advice.c	FUNCTION_5	ELSE_3	IF_4	CALL_7
0x40003dc	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       142	advice.c	FUNCTION_5	ELSE_3	IF_4	CALL_7
0x40003de	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40003e3	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x40003e8	            0x741e	                            je 0x4000408	       142	advice.c	FUNCTION_5	ELSE_3	IF_4	CALL_7
0x40003ea	          0x4889de	                            mov rsi, rbx	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x40003ed	      0xbf00000000	                              mov edi, 0	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x40003f2	      0xb907000000	                              mov ecx, 7	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x40003f7	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x40003f9	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40003fe	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x4000403	            0x7553	                           jne 0x4000458	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x4000405	           0xf1f00	                         nop dword [rax]	       144	advice.c	FUNCTION_5	ELSE_4	IF_5	CALL_9
0x4000408	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x400040a	      0xe800000000	                          call 0x400040f	        54	gettext.h	FUNCTION_11
0x400040f	          0x4889c7	                            mov rdi, rax	       139	advice.c	FUNCTION_5	ELSE_1	IF_2
0x4000412	            0x31c0	                            xor eax, eax	       139	advice.c	FUNCTION_5	ELSE_1	IF_2
0x4000414	      0xe800000000	                          call 0x4000419	       139	advice.c	FUNCTION_5	ELSE_1	IF_2
0x4000419	    0x8b0500000000	            mov eax, dword [0x0400041f] 	       150	advice.c	FUNCTION_5	IF_6
0x400041f	            0x85c0	                           test eax, eax	       150	advice.c	FUNCTION_5	IF_6
0x4000421	            0x741b	                            je 0x400043e	       150	advice.c	FUNCTION_5	IF_6
0x4000423	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x4000425	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x400042a	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x400042f	      0xe800000000	                          call 0x4000434	        54	gettext.h	FUNCTION_11
0x4000434	          0x4889c7	                            mov rdi, rax	       155	advice.c	FUNCTION_5	IF_6	CALL_13
0x4000437	            0x31c0	                            xor eax, eax	       155	advice.c	FUNCTION_5	IF_6	CALL_13
0x4000439	      0xe800000000	                          call 0x400043e	       155	advice.c	FUNCTION_5	IF_6	CALL_13
0x400043e	      0xb8ffffffff	                     mov eax, 0xffffffff	       158	advice.c	FUNCTION_5
0x4000443	              0x5b	                                 pop rbx	       158	advice.c	FUNCTION_5
0x4000444	              0xc3	                                     ret	       158	advice.c	FUNCTION_5
0x4000445	           0xf1f00	                         nop dword [rax]	       158	advice.c	FUNCTION_5
0x4000448	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x400044d	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x4000452	            0xebb4	                           jmp 0x4000408	        54	gettext.h	FUNCTION_11
0x4000454	         0xf1f4000	                         nop dword [rax]	        54	gettext.h	FUNCTION_11
0x4000458	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x400045a	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x400045f	      0xe800000000	                          call 0x4000464	        54	gettext.h	FUNCTION_11
0x4000464	          0x4889de	                            mov rsi, rbx	       147	advice.c	FUNCTION_5	ELSE_5	CALL_11
0x4000467	          0x4889c7	                            mov rdi, rax	       147	advice.c	FUNCTION_5	ELSE_5	CALL_11
0x400046a	            0x31c0	                            xor eax, eax	       147	advice.c	FUNCTION_5	ELSE_5	CALL_11
0x400046c	      0xe800000000	                          call 0x4000471	       147	advice.c	FUNCTION_5	ELSE_5	CALL_11
0x4000471	            0xeba6	                           jmp 0x4000419	       147	advice.c	FUNCTION_5	ELSE_5	CALL_11
die_conclude_merge	DO,0:functions,0:FOR,0:IF,1:CALL,5:WHILE,0:SWITCH,0:ELSE,0	26
0x40004b0	        0x4883ec08	                              sub rsp, 8	       167	advice.c	FUNCTION_7
0x40004b4	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x40004b6	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40004bb	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x40004c0	      0xe800000000	                          call 0x40004c5	        54	gettext.h	FUNCTION_11
0x40004c5	          0x4889c7	                            mov rdi, rax	       168	advice.c	FUNCTION_7	CALL_1
0x40004c8	            0x31c0	                            xor eax, eax	       168	advice.c	FUNCTION_7	CALL_1
0x40004ca	      0xe800000000	                          call 0x40004cf	       168	advice.c	FUNCTION_7	CALL_1
0x40004cf	    0x8b0500000000	            mov eax, dword [0x040004d5] 	       169	advice.c	FUNCTION_7	IF_1
0x40004d5	            0x85c0	                           test eax, eax	       169	advice.c	FUNCTION_7	IF_1
0x40004d7	            0x751b	                           jne 0x40004f4	       169	advice.c	FUNCTION_7	IF_1
0x40004d9	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x40004db	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40004e0	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x40004e5	      0xe800000000	                          call 0x40004ea	        54	gettext.h	FUNCTION_11
0x40004ea	          0x4889c7	                            mov rdi, rax	       171	advice.c	FUNCTION_7	CALL_5
0x40004ed	            0x31c0	                            xor eax, eax	       171	advice.c	FUNCTION_7	CALL_5
0x40004ef	      0xe800000000	                          call 0x40004f4	       171	advice.c	FUNCTION_7	CALL_5
0x40004f4	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x40004f6	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x40004fb	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x4000500	      0xe800000000	                          call 0x4000505	        54	gettext.h	FUNCTION_11
0x4000505	          0x4889c7	                            mov rdi, rax	       170	advice.c	FUNCTION_7	CALL_3
0x4000508	            0x31c0	                            xor eax, eax	       170	advice.c	FUNCTION_7	CALL_3
0x400050a	      0xe800000000	                          call 0x400050f	       170	advice.c	FUNCTION_7	CALL_3
0x400050f	            0xebc8	                           jmp 0x40004d9	       170	advice.c	FUNCTION_7	CALL_3
detach_advice	DO,0:functions,0:FOR,0:IF,0:CALL,1:WHILE,0:SWITCH,0:ELSE,0	13
0x4000520	              0x53	                                push rbx	       175	advice.c	FUNCTION_8
0x4000521	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x4000526	          0x4889fb	                            mov rbx, rdi	       175	advice.c	FUNCTION_8
0x4000529	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x400052e	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x4000530	      0xe800000000	                          call 0x4000535	        54	gettext.h	FUNCTION_11
0x4000535	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_13
0x4000538	    0x488b3d000000	            mov rdi, qword [0x0400053f] 	        97	stdio2.h	CALL_13
0x400053f	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_13
0x4000542	              0x5b	                                 pop rbx	       186	advice.c	FUNCTION_8
0x4000543	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_13
0x4000548	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_13
0x400054a	      0xe900000000	                   jmp section_end..text	        97	stdio2.h	CALL_13
advise	DO,0:functions,0:FOR,1:IF,1:CALL,7:WHILE,0:SWITCH,0:ELSE,0	99
0x4000040	            0x4157	                                push r15	        81	advice.c	FUNCTION_3
0x4000042	            0x4156	                                push r14	        81	advice.c	FUNCTION_3
0x4000044	            0x4155	                                push r13	        81	advice.c	FUNCTION_3
0x4000046	            0x4154	                                push r12	        81	advice.c	FUNCTION_3
0x4000048	              0x55	                                push rbp	        81	advice.c	FUNCTION_3
0x4000049	              0x53	                                push rbx	        81	advice.c	FUNCTION_3
0x400004a	    0x4881ecf80000	                           sub rsp, 0xf8	        81	advice.c	FUNCTION_3
0x4000051	            0x84c0	                             test al, al	        81	advice.c	FUNCTION_3
0x4000053	      0x4889742448	             mov qword [rsp + 0x48], rsi	        81	advice.c	FUNCTION_3
0x4000058	      0x4889542450	             mov qword [rsp + 0x50], rdx	        81	advice.c	FUNCTION_3
0x400005d	      0x48894c2458	             mov qword [rsp + 0x58], rcx	        81	advice.c	FUNCTION_3
0x4000062	      0x4c89442460	              mov qword [rsp + 0x60], r8	        81	advice.c	FUNCTION_3
0x4000067	      0x4c894c2468	              mov qword [rsp + 0x68], r9	        81	advice.c	FUNCTION_3
0x400006c	            0x743d	                            je 0x40000ab	        81	advice.c	FUNCTION_3
0x400006e	       0xf29442470	       movaps xmmword [rsp + 0x70], xmm0	        81	advice.c	FUNCTION_3
0x4000073	     0xf298c248000	       movaps xmmword [rsp + 0x80], xmm1	        81	advice.c	FUNCTION_3
0x400007b	     0xf2994249000	       movaps xmmword [rsp + 0x90], xmm2	        81	advice.c	FUNCTION_3
0x4000083	     0xf299c24a000	       movaps xmmword [rsp + 0xa0], xmm3	        81	advice.c	FUNCTION_3
0x400008b	     0xf29a424b000	       movaps xmmword [rsp + 0xb0], xmm4	        81	advice.c	FUNCTION_3
0x4000093	     0xf29ac24c000	       movaps xmmword [rsp + 0xc0], xmm5	        81	advice.c	FUNCTION_3
0x400009b	     0xf29b424d000	       movaps xmmword [rsp + 0xd0], xmm6	        81	advice.c	FUNCTION_3
0x40000a3	     0xf29bc24e000	       movaps xmmword [rsp + 0xe0], xmm7	        81	advice.c	FUNCTION_3
0x40000ab	    0x64488b042528	                mov rax, qword fs:[0x28]	        81	advice.c	FUNCTION_3
0x40000b4	      0x4889442438	             mov qword [rsp + 0x38], rax	        81	advice.c	FUNCTION_3
0x40000b9	            0x31c0	                            xor eax, eax	        81	advice.c	FUNCTION_3
0x40000bb	    0x488d84243001	                  lea rax, [rsp + 0x130]	        86	advice.c	FUNCTION_3	CALL_1
0x40000c3	      0x488d542420	                   lea rdx, [rsp + 0x20]	        87	advice.c	FUNCTION_3	CALL_2
0x40000c8	          0x4889fe	                            mov rsi, rdi	        87	advice.c	FUNCTION_3	CALL_2
0x40000cb	          0x4889e7	                            mov rdi, rsp	        87	advice.c	FUNCTION_3	CALL_2
0x40000ce	    0x41bd00000000	                             mov r13d, 0	        49	advice.c	FUNCTION_2
0x40000d4	      0x4889442428	             mov qword [rsp + 0x28], rax	        86	advice.c	FUNCTION_3	CALL_1
0x40000d9	      0x488d442440	                   lea rax, [rsp + 0x40]	        86	advice.c	FUNCTION_3	CALL_1
0x40000de	    0x48c704240000	                      mov qword [rsp], 0	        82	advice.c	FUNCTION_3
0x40000e6	    0x48c744240800	                  mov qword [rsp + 8], 0	        82	advice.c	FUNCTION_3
0x40000ef	    0x48c744241000	               mov qword [rsp + 0x10], 0	        82	advice.c	FUNCTION_3
0x40000f8	      0x4889442430	             mov qword [rsp + 0x30], rax	        86	advice.c	FUNCTION_3	CALL_1
0x40000fd	    0xc74424200800	               mov dword [rsp + 0x20], 8	        86	advice.c	FUNCTION_3	CALL_1
0x4000105	    0xc74424243000	           mov dword [rsp + 0x24], 0x30 	        86	advice.c	FUNCTION_3	CALL_1
0x400010d	      0xe800000000	                          call 0x4000112	        87	advice.c	FUNCTION_3	CALL_2
0x4000112	      0x4c8b642410	            mov r12, qword [rsp + 0x10] 	        90	advice.c	FUNCTION_3	FOR_1
0x4000117	      0x410fb60424	                   movzx eax, byte [r12]	        90	advice.c	FUNCTION_3	FOR_1
0x400011c	         0xf1f4000	                         nop dword [rax]	        90	advice.c	FUNCTION_3	FOR_1
0x4000120	            0x84c0	                             test al, al	        90	advice.c	FUNCTION_3	FOR_1
0x4000122	     0xf848c000000	                            je 0x40001b4	        90	advice.c	FUNCTION_3	FOR_1
0x4000128	      0xbe0a000000	                            mov esi, 0xa	        91	advice.c	FUNCTION_3	FOR_1
0x400012d	          0x4c89e7	                            mov rdi, r12	        91	advice.c	FUNCTION_3	FOR_1
0x4000130	      0xbd00000000	                              mov ebp, 0	        49	advice.c	FUNCTION_2
0x4000135	      0xe800000000	                          call 0x400013a	        91	advice.c	FUNCTION_3	FOR_1
0x400013a	    0x8b3500000000	            mov esi, dword [0x04000140] 	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x4000140	      0xbf02000000	                              mov edi, 2	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x4000145	          0x4889c3	                            mov rbx, rax	        91	advice.c	FUNCTION_3	FOR_1
0x4000148	          0x4989ef	                            mov r15, rbp	        49	advice.c	FUNCTION_2
0x400014b	          0x4989de	                            mov r14, rbx	        92	advice.c	FUNCTION_3	FOR_1	CALL_4
0x400014e	      0xe800000000	                          call 0x4000153	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x4000153	    0x8b3500000000	            mov esi, dword [0x04000159] 	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x4000159	            0x85c0	                           test eax, eax	        49	advice.c	FUNCTION_2
0x400015b	      0xbf02000000	                              mov edi, 2	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x4000160	        0x4d0f45fd	                         cmovne r15, r13	        49	advice.c	FUNCTION_2
0x4000164	          0x4d29e6	                            sub r14, r12	        92	advice.c	FUNCTION_3	FOR_1	CALL_4
0x4000167	      0xe800000000	                          call 0x400016c	        47	advice.c	FUNCTION_2	IF_1	CALL_1
0x400016c	            0x85c0	                           test eax, eax	        49	advice.c	FUNCTION_2
0x400016e	      0xb800000000	                              mov eax, 0	        49	advice.c	FUNCTION_2
0x4000173	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x4000178	        0x480f45e8	                         cmovne rbp, rax	        49	advice.c	FUNCTION_2
0x400017c	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x4000181	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x4000183	      0xe800000000	                          call 0x4000188	        54	gettext.h	FUNCTION_11
0x4000188	        0x4883ec08	                              sub rsp, 8	        97	stdio2.h	CALL_13
0x400018c	    0x488b3d000000	            mov rdi, qword [0x04000193] 	        97	stdio2.h	CALL_13
0x4000193	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_13
0x4000196	            0x4157	                                push r15	        97	stdio2.h	CALL_13
0x4000198	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_13
0x400019a	          0x4d89e1	                             mov r9, r12	        97	stdio2.h	CALL_13
0x400019d	          0x4589f0	                           mov r8d, r14d	        97	stdio2.h	CALL_13
0x40001a0	          0x4889e9	                            mov rcx, rbp	        97	stdio2.h	CALL_13
0x40001a3	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_13
0x40001a8	      0xe800000000	                          call 0x40001ad	        97	stdio2.h	CALL_13
0x40001ad	          0x803b00	                       cmp byte [rbx], 0	        96	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001b0	              0x58	                                 pop rax	        96	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001b1	              0x5a	                                 pop rdx	        96	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001b2	            0x752c	                           jne 0x40001e0	        96	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001b4	          0x4889e7	                            mov rdi, rsp	        99	advice.c	FUNCTION_3	CALL_7
0x40001b7	      0xe800000000	                          call 0x40001bc	        99	advice.c	FUNCTION_3	CALL_7
0x40001bc	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       100	advice.c	FUNCTION_3
0x40001c1	    0x644833042528	                xor rax, qword fs:[0x28]	       100	advice.c	FUNCTION_3
0x40001ca	            0x7521	                           jne 0x40001ed	       100	advice.c	FUNCTION_3
0x40001cc	    0x4881c4f80000	                           add rsp, 0xf8	       100	advice.c	FUNCTION_3
0x40001d3	              0x5b	                                 pop rbx	       100	advice.c	FUNCTION_3
0x40001d4	              0x5d	                                 pop rbp	       100	advice.c	FUNCTION_3
0x40001d5	            0x415c	                                 pop r12	       100	advice.c	FUNCTION_3
0x40001d7	            0x415d	                                 pop r13	       100	advice.c	FUNCTION_3
0x40001d9	            0x415e	                                 pop r14	       100	advice.c	FUNCTION_3
0x40001db	            0x415f	                                 pop r15	       100	advice.c	FUNCTION_3
0x40001dd	              0xc3	                                     ret	       100	advice.c	FUNCTION_3
0x40001de	            0x6690	                                     nop	       100	advice.c	FUNCTION_3
0x40001e0	        0x4c8d6301	                      lea r12, [rbx + 1]	        97	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001e4	         0xfb64301	               movzx eax, byte [rbx + 1]	        97	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001e8	      0xe933ffffff	                           jmp 0x4000120	        97	advice.c	FUNCTION_3	FOR_1	IF_1
0x40001ed	      0xe800000000	                          call 0x40001f2	       100	advice.c	FUNCTION_3
die_resolve_conflict	DO,0:functions,0:FOR,0:IF,0:CALL,3:WHILE,0:SWITCH,0:ELSE,0	9
0x4000480	        0x4883ec08	                              sub rsp, 8	       161	advice.c	FUNCTION_6
0x4000484	      0xe800000000	                          call 0x4000489	       162	advice.c	FUNCTION_6	CALL_1
0x4000489	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_11
0x400048b	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_11
0x4000490	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_11
0x4000495	      0xe800000000	                          call 0x400049a	        54	gettext.h	FUNCTION_11
0x400049a	          0x4889c7	                            mov rdi, rax	       163	advice.c	FUNCTION_6	CALL_3
0x400049d	            0x31c0	                            xor eax, eax	       163	advice.c	FUNCTION_6	CALL_3
0x400049f	      0xe800000000	                          call 0x40004a4	       163	advice.c	FUNCTION_6	CALL_3
