decode_varint	CALL,1:ELSE,0:functions,0:SWITCH,0:FOR,0:WHILE,1:DO,0:IF,1	45
0x0	              0x55	                                push rbp	         5	varint.c	FUNCTION_1
0x1	          0x4889e5	                            mov rbp, rsp	         5	varint.c	FUNCTION_1
0x4	        0x48897dd8	             mov qword [rbp - 0x28], rdi	         5	varint.c	FUNCTION_1
0x8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	         6	varint.c	FUNCTION_1
0xc	          0x488b00	                    mov rax, qword [rax]	         6	varint.c	FUNCTION_1
0xf	        0x488945f0	             mov qword [rbp - 0x10], rax	         6	varint.c	FUNCTION_1
0x13	        0x488b45f0	             mov rax, qword [rbp - 0x10]	         7	varint.c	FUNCTION_1
0x17	        0x488d5001	                      lea rdx, [rax + 1]	         7	varint.c	FUNCTION_1
0x1b	        0x488955f0	             mov qword [rbp - 0x10], rdx	         7	varint.c	FUNCTION_1
0x1f	           0xfb600	                   movzx eax, byte [rax]	         7	varint.c	FUNCTION_1
0x22	          0x8845ef	               mov byte [rbp - 0x11], al	         7	varint.c	FUNCTION_1
0x25	         0xfb645ef	            movzx eax, byte [rbp - 0x11]	         8	varint.c	FUNCTION_1
0x29	          0x83e07f	                           and eax, 0x7f	         8	varint.c	FUNCTION_1
0x2c	        0x488945f8	                mov qword [rbp - 8], rax	         8	varint.c	FUNCTION_1
0x30	            0xeb51	                           jmp 0x40000c3	         9	varint.c	FUNCTION_1	WHILE_1
0x32	      0x488345f801	                  add qword [rbp - 8], 1	        10	varint.c	FUNCTION_1	WHILE_1
0x37	      0x48837df800	                  cmp qword [rbp - 8], 0	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x3c	            0x7413	                            je 0x4000091	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x3e	    0x48b800000000	          movabs rax, 0xfe00000000000000	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x48	        0x482345f8	                and rax, qword [rbp - 8]	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x4c	          0x4885c0	                           test rax, rax	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x4f	            0x7407	                            je 0x4000098	        11	varint.c	FUNCTION_1	WHILE_1	IF_1	CALL_1
0x51	      0xb800000000	                              mov eax, 0	        12	varint.c	FUNCTION_1	WHILE_1	IF_1
0x56	            0xeb42	                           jmp 0x40000da	        12	varint.c	FUNCTION_1	WHILE_1	IF_1
0x58	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        13	varint.c	FUNCTION_1	WHILE_1
0x5c	        0x488d5001	                      lea rdx, [rax + 1]	        13	varint.c	FUNCTION_1	WHILE_1
0x60	        0x488955f0	             mov qword [rbp - 0x10], rdx	        13	varint.c	FUNCTION_1	WHILE_1
0x64	           0xfb600	                   movzx eax, byte [rax]	        13	varint.c	FUNCTION_1	WHILE_1
0x67	          0x8845ef	               mov byte [rbp - 0x11], al	        13	varint.c	FUNCTION_1	WHILE_1
0x6a	        0x488b45f8	                mov rax, qword [rbp - 8]	        14	varint.c	FUNCTION_1	WHILE_1
0x6e	        0x48c1e007	                              shl rax, 7	        14	varint.c	FUNCTION_1	WHILE_1
0x72	          0x4889c2	                            mov rdx, rax	        14	varint.c	FUNCTION_1	WHILE_1
0x75	         0xfb645ef	            movzx eax, byte [rbp - 0x11]	        14	varint.c	FUNCTION_1	WHILE_1
0x79	          0x83e07f	                           and eax, 0x7f	        14	varint.c	FUNCTION_1	WHILE_1
0x7c	          0x4801d0	                            add rax, rdx	        14	varint.c	FUNCTION_1	WHILE_1
0x7f	        0x488945f8	                mov qword [rbp - 8], rax	        14	varint.c	FUNCTION_1	WHILE_1
0x83	         0xfb645ef	            movzx eax, byte [rbp - 0x11]	         9	varint.c	FUNCTION_1	WHILE_1
0x87	            0x84c0	                             test al, al	         9	varint.c	FUNCTION_1	WHILE_1
0x89	            0x78a7	                            js 0x4000072	         9	varint.c	FUNCTION_1	WHILE_1
0x8b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        16	varint.c	FUNCTION_1
0x8f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        16	varint.c	FUNCTION_1
0x93	          0x488910	                    mov qword [rax], rdx	        16	varint.c	FUNCTION_1
0x96	        0x488b45f8	                mov rax, qword [rbp - 8]	        17	varint.c	FUNCTION_1
0x9a	              0x5d	                                 pop rbp	        18	varint.c	FUNCTION_1
0x9b	              0xc3	                                     ret	        18	varint.c	FUNCTION_1
encode_varint	CALL,1:ELSE,0:functions,0:SWITCH,0:FOR,0:WHILE,1:DO,0:IF,1	45
0x9c	              0x55	                                push rbp	        21	varint.c	FUNCTION_2
0x9d	          0x4889e5	                            mov rbp, rsp	        21	varint.c	FUNCTION_2
0xa0	        0x4883ec40	                           sub rsp, 0x40	        21	varint.c	FUNCTION_2
0xa4	        0x48897dc8	             mov qword [rbp - 0x38], rdi	        21	varint.c	FUNCTION_2
0xa8	        0x488975c0	             mov qword [rbp - 0x40], rsi	        21	varint.c	FUNCTION_2
0xac	    0x64488b042528	                mov rax, qword fs:[0x28]	        21	varint.c	FUNCTION_2
0xb5	        0x488945f8	                mov qword [rbp - 8], rax	        21	varint.c	FUNCTION_2
0xb9	            0x31c0	                            xor eax, eax	        21	varint.c	FUNCTION_2
0xbb	    0xc745dc0f0000	            mov dword [rbp - 0x24], 0xf 	        23	varint.c	FUNCTION_2
0xc2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        24	varint.c	FUNCTION_2
0xc6	          0x83e07f	                           and eax, 0x7f	        24	varint.c	FUNCTION_2
0xc9	            0x89c2	                            mov edx, eax	        24	varint.c	FUNCTION_2
0xcb	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        24	varint.c	FUNCTION_2
0xce	        0x885405e0	         mov byte [rbp + rax - 0x20], dl	        24	varint.c	FUNCTION_2
0xd2	            0xeb19	                           jmp 0x400012d	        25	varint.c	FUNCTION_2	WHILE_1
0xd4	        0x836ddc01	               sub dword [rbp - 0x24], 1	        26	varint.c	FUNCTION_2	WHILE_1
0xd8	      0x48836dc801	               sub qword [rbp - 0x38], 1	        26	varint.c	FUNCTION_2	WHILE_1
0xdd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        26	varint.c	FUNCTION_2	WHILE_1
0xe1	          0x83c880	                      or eax, 0xffffff80	        26	varint.c	FUNCTION_2	WHILE_1
0xe4	            0x89c2	                            mov edx, eax	        26	varint.c	FUNCTION_2	WHILE_1
0xe6	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        26	varint.c	FUNCTION_2	WHILE_1
0xe9	        0x885405e0	         mov byte [rbp + rax - 0x20], dl	        26	varint.c	FUNCTION_2	WHILE_1
0xed	      0x48c16dc807	               shr qword [rbp - 0x38], 7	        25	varint.c	FUNCTION_2	WHILE_1
0xf2	      0x48837dc800	               cmp qword [rbp - 0x38], 0	        25	varint.c	FUNCTION_2	WHILE_1
0xf7	            0x75db	                           jne 0x4000114	        25	varint.c	FUNCTION_2	WHILE_1
0xf9	      0x48837dc000	               cmp qword [rbp - 0x40], 0	        27	varint.c	FUNCTION_2	IF_1
0xfe	            0x7424	                            je 0x4000164	        27	varint.c	FUNCTION_2	IF_1
0x100	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        28	varint.c	FUNCTION_2	CALL_1
0x103	      0xba10000000	                           mov edx, 0x10	        28	varint.c	FUNCTION_2	CALL_1
0x108	          0x4829c2	                            sub rdx, rax	        28	varint.c	FUNCTION_2	CALL_1
0x10b	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        28	varint.c	FUNCTION_2	CALL_1
0x10e	        0x488d4de0	                   lea rcx, [rbp - 0x20]	        28	varint.c	FUNCTION_2	CALL_1
0x112	          0x4801c1	                            add rcx, rax	        28	varint.c	FUNCTION_2	CALL_1
0x115	        0x488b45c0	             mov rax, qword [rbp - 0x40]	        28	varint.c	FUNCTION_2	CALL_1
0x119	          0x4889ce	                            mov rsi, rcx	        28	varint.c	FUNCTION_2	CALL_1
0x11c	          0x4889c7	                            mov rdi, rax	        28	varint.c	FUNCTION_2	CALL_1
0x11f	      0xe800000000	                          call 0x4000164	        28	varint.c	FUNCTION_2	CALL_1
0x124	      0xb810000000	                           mov eax, 0x10	        29	varint.c	FUNCTION_2
0x129	          0x2b45dc	             sub eax, dword [rbp - 0x24]	        29	varint.c	FUNCTION_2
0x12c	        0x488b75f8	                mov rsi, qword [rbp - 8]	        30	varint.c	FUNCTION_2
0x130	    0x644833342528	                xor rsi, qword fs:[0x28]	        30	varint.c	FUNCTION_2
0x139	            0x7405	                            je 0x4000180	        30	varint.c	FUNCTION_2
0x13b	      0xe800000000	                          call 0x4000180	        30	varint.c	FUNCTION_2
0x140	              0xc9	                                   leave	        30	varint.c	FUNCTION_2
0x141	              0xc3	                                     ret	        30	varint.c	FUNCTION_2
