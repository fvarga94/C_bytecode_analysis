parse_commit_message	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:SWITCH,0	48
0x24af	              0x55	                                push rbp	       875	pretty.c	WHILE_3	FUNCTION_32
0x24b0	          0x4889e5	                            mov rbp, rsp	       875	pretty.c	WHILE_3	FUNCTION_32
0x24b3	        0x4883ec20	                           sub rsp, 0x20	       875	pretty.c	WHILE_3	FUNCTION_32
0x24b7	        0x48897de8	             mov qword [rbp - 0x18], rdi	       875	pretty.c	WHILE_3	FUNCTION_32
0x24bb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       876	pretty.c	WHILE_3	FUNCTION_32
0x24bf	        0x488b5050	            mov rdx, qword [rax + 0x50] 	       876	pretty.c	WHILE_3	FUNCTION_32
0x24c3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       876	pretty.c	WHILE_3	FUNCTION_32
0x24c7	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	       876	pretty.c	WHILE_3	FUNCTION_32
0x24ce	          0x4801d0	                            add rax, rdx	       876	pretty.c	WHILE_3	FUNCTION_32
0x24d1	        0x488945f0	             mov qword [rbp - 0x10], rax	       876	pretty.c	WHILE_3	FUNCTION_32
0x24d5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       877	pretty.c	WHILE_3	FUNCTION_32
0x24d9	        0x488b4050	            mov rax, qword [rax + 0x50] 	       877	pretty.c	WHILE_3	FUNCTION_32
0x24dd	        0x488945f8	                mov qword [rbp - 8], rax	       877	pretty.c	WHILE_3	FUNCTION_32
0x24e1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x24e5	          0x4889c7	                            mov rdi, rax	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x24e8	      0xe800000000	                          call 0x400252d	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x24ed	        0x488945f0	             mov qword [rbp - 0x10], rax	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x24f1	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       880	pretty.c	WHILE_3	FUNCTION_32
0x24f5	        0x488b45f8	                mov rax, qword [rbp - 8]	       880	pretty.c	WHILE_3	FUNCTION_32
0x24f9	          0x4829c2	                            sub rdx, rax	       880	pretty.c	WHILE_3	FUNCTION_32
0x24fc	          0x4889d0	                            mov rax, rdx	       880	pretty.c	WHILE_3	FUNCTION_32
0x24ff	          0x4889c2	                            mov rdx, rax	       880	pretty.c	WHILE_3	FUNCTION_32
0x2502	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       880	pretty.c	WHILE_3	FUNCTION_32
0x2506	    0x488990a80000	             mov qword [rax + 0xa8], rdx	       880	pretty.c	WHILE_3	FUNCTION_32
0x250d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x2511	      0xba00000000	                              mov edx, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x2516	          0x4889c6	                            mov rsi, rax	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x2519	      0xbf00000000	                              mov edi, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x251e	      0xe800000000	                          call 0x4002563	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x2523	        0x488945f0	             mov qword [rbp - 0x10], rax	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x2527	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x252b	          0x4889c7	                            mov rdi, rax	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x252e	      0xe800000000	                          call 0x4002573	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x2533	        0x488945f0	             mov qword [rbp - 0x10], rax	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x2537	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       884	pretty.c	WHILE_3	FUNCTION_32
0x253b	        0x488b45f8	                mov rax, qword [rbp - 8]	       884	pretty.c	WHILE_3	FUNCTION_32
0x253f	          0x4829c2	                            sub rdx, rax	       884	pretty.c	WHILE_3	FUNCTION_32
0x2542	          0x4889d0	                            mov rax, rdx	       884	pretty.c	WHILE_3	FUNCTION_32
0x2545	          0x4889c2	                            mov rdx, rax	       884	pretty.c	WHILE_3	FUNCTION_32
0x2548	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       884	pretty.c	WHILE_3	FUNCTION_32
0x254c	    0x488990b00000	             mov qword [rax + 0xb0], rdx	       884	pretty.c	WHILE_3	FUNCTION_32
0x2553	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       886	pretty.c	WHILE_3	FUNCTION_32
0x2557	         0xfb65010	           movzx edx, byte [rax + 0x10] 	       886	pretty.c	WHILE_3	FUNCTION_32
0x255b	          0x83ca02	                               or edx, 2	       886	pretty.c	WHILE_3	FUNCTION_32
0x255e	          0x885010	               mov byte [rax + 0x10], dl	       886	pretty.c	WHILE_3	FUNCTION_32
0x2561	              0x90	                                     nop	       887	pretty.c	WHILE_3	FUNCTION_32
0x2562	              0xc9	                                   leave	       887	pretty.c	WHILE_3	FUNCTION_32
0x2563	              0xc3	                                     ret	       887	pretty.c	WHILE_3	FUNCTION_32
needs_rfc2047_encoding	ELSE,0:IF,2:FOR,1:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	47
0xe8f	              0x55	                                push rbp	       344	pretty.c	WHILE_3	FUNCTION_16
0xe90	          0x4889e5	                            mov rbp, rsp	       344	pretty.c	WHILE_3	FUNCTION_16
0xe93	        0x4883ec20	                           sub rsp, 0x20	       344	pretty.c	WHILE_3	FUNCTION_16
0xe97	        0x48897de8	             mov qword [rbp - 0x18], rdi	       344	pretty.c	WHILE_3	FUNCTION_16
0xe9b	          0x8975e4	             mov dword [rbp - 0x1c], esi	       344	pretty.c	WHILE_3	FUNCTION_16
0xe9e	          0x8955e0	             mov dword [rbp - 0x20], edx	       344	pretty.c	WHILE_3	FUNCTION_16
0xea1	    0xc745f8000000	                  mov dword [rbp - 8], 0	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xea8	            0xeb64	                           jmp 0x4000f4e	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xeaa	          0x8b45f8	                mov eax, dword [rbp - 8]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xead	          0x4863d0	                         movsxd rdx, eax	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xeb0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xeb4	          0x4801d0	                            add rax, rdx	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xeb7	           0xfb600	                   movzx eax, byte [rax]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xeba	           0xfbec0	                           movsx eax, al	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xebd	          0x8945fc	                mov dword [rbp - 4], eax	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xec0	          0x8b45fc	                mov eax, dword [rbp - 4]	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xec3	            0x89c7	                            mov edi, eax	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xec5	      0xe80ffdffff	                      call sym.non_ascii	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xeca	            0x85c0	                           test eax, eax	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xecc	            0x7506	                           jne 0x4000f14	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xece	        0x837dfc0a	                cmp dword [rbp - 4], 0xa	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xed2	            0x7507	                           jne 0x4000f1b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0xed4	      0xb801000000	                              mov eax, 1	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0xed9	            0xeb40	                           jmp 0x4000f5b	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0xedb	          0x8b45f8	                mov eax, dword [rbp - 8]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xede	          0x83c001	                              add eax, 1	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xee1	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xee4	            0x7d24	                           jge 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xee6	        0x837dfc3d	               cmp dword [rbp - 4], 0x3d	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xeea	            0x751e	                           jne 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xeec	          0x8b45f8	                mov eax, dword [rbp - 8]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xeef	            0x4898	                                    cdqe	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xef1	        0x488d5001	                      lea rdx, [rax + 1]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xef5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xef9	          0x4801d0	                            add rax, rdx	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xefc	           0xfb600	                   movzx eax, byte [rax]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xeff	            0x3c3f	                            cmp al, 0x3f	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xf01	            0x7507	                           jne 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xf03	      0xb801000000	                              mov eax, 1	       352	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xf08	            0xeb11	                           jmp 0x4000f5b	       352	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0xf0a	        0x8345f801	                  add dword [rbp - 8], 1	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xf0e	          0x8b45f8	                mov eax, dword [rbp - 8]	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xf11	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xf14	            0x7c94	                            jl 0x4000eea	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0xf16	      0xb800000000	                              mov eax, 0	       355	pretty.c	WHILE_3	FUNCTION_16
0xf1b	              0xc9	                                   leave	       356	pretty.c	WHILE_3	FUNCTION_16
0xf1c	              0xc3	                                     ret	       356	pretty.c	WHILE_3	FUNCTION_16
add_rfc2047	ELSE,0:IF,1:FOR,1:WHILE,1:CALL,11:DO,0:functions,0:SWITCH,0	130
0xf1d	              0x55	                                push rbp	       360	pretty.c	WHILE_3	FUNCTION_17
0xf1e	          0x4889e5	                            mov rbp, rsp	       360	pretty.c	WHILE_3	FUNCTION_17
0xf21	              0x53	                                push rbx	       360	pretty.c	WHILE_3	FUNCTION_17
0xf22	        0x4883ec68	                           sub rsp, 0x68	       360	pretty.c	WHILE_3	FUNCTION_17
0xf26	        0x48897db8	             mov qword [rbp - 0x48], rdi	       360	pretty.c	WHILE_3	FUNCTION_17
0xf2a	        0x488975b0	             mov qword [rbp - 0x50], rsi	       360	pretty.c	WHILE_3	FUNCTION_17
0xf2e	        0x488955a8	             mov qword [rbp - 0x58], rdx	       360	pretty.c	WHILE_3	FUNCTION_17
0xf32	        0x48894da0	             mov qword [rbp - 0x60], rcx	       360	pretty.c	WHILE_3	FUNCTION_17
0xf36	        0x4489459c	             mov dword [rbp - 0x64], r8d	       360	pretty.c	WHILE_3	FUNCTION_17
0xf3a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0xf3e	          0x4889c7	                            mov rdi, rax	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0xf41	      0xe888fdffff	               call sym.last_line_length	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0xf46	          0x8945d0	             mov dword [rbp - 0x30], eax	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0xf49	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf4d	          0x4889d0	                            mov rax, rdx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf50	          0x4801c0	                            add rax, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf53	        0x488d1c10	                    lea rbx, [rax + rdx]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf57	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf5b	          0x4889c7	                            mov rdi, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf5e	      0xe800000000	                          call 0x4000fa3	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf63	          0x4801d8	                            add rax, rbx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf66	        0x488d5064	                   lea rdx, [rax + 0x64]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf6a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf6e	          0x4889d6	                            mov rsi, rdx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf71	          0x4889c7	                            mov rdi, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf74	      0xe800000000	                          call 0x4000fb9	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0xf79	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf7d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf81	      0xbe00000000	                              mov esi, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf86	          0x4889c7	                            mov rdi, rax	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf89	      0xb800000000	                              mov eax, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf8e	      0xe800000000	                          call 0x4000fd3	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0xf93	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xf97	          0x4889c7	                            mov rdi, rax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xf9a	      0xe800000000	                          call 0x4000fdf	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xf9f	            0x89c2	                            mov edx, eax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xfa1	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xfa4	             0x1d0	                            add eax, edx	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xfa6	          0x83c005	                              add eax, 5	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xfa9	          0x8945d0	             mov dword [rbp - 0x30], eax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0xfac	      0xe907010000	                           jmp 0x40010f8	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0xfb1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       377	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0xfb5	        0x488945e0	             mov qword [rbp - 0x20], rax	       377	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0xfb9	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfbd	        0x488d4da8	                   lea rcx, [rbp - 0x58]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfc1	        0x488d45b0	                   lea rax, [rbp - 0x50]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfc5	          0x4889ce	                            mov rsi, rcx	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfc8	          0x4889c7	                            mov rdi, rax	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfcb	      0xe800000000	                          call 0x4001010	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfd0	          0x8945d4	             mov dword [rbp - 0x2c], eax	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0xfd3	        0x837dd401	               cmp dword [rbp - 0x2c], 1	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfd7	            0x7f1a	                            jg 0x4001033	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfd9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfdd	           0xfb600	                   movzx eax, byte [rax]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfe0	           0xfbec0	                           movsx eax, al	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfe3	          0x8b559c	             mov edx, dword [rbp - 0x64]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfe6	            0x89d6	                            mov esi, edx	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfe8	            0x89c7	                            mov edi, eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfea	      0xe8e5fdffff	             call sym.is_rfc2047_special	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfef	            0x85c0	                           test eax, eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xff1	            0x7407	                            je 0x400103a	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xff3	      0xb801000000	                              mov eax, 1	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xff8	            0xeb05	                           jmp 0x400103f	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xffa	      0xb800000000	                              mov eax, 0	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0xfff	          0x8945d8	             mov dword [rbp - 0x28], eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x1002	        0x837dd800	               cmp dword [rbp - 0x28], 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1006	            0x7407	                            je 0x400104f	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1008	      0xb800000000	                              mov eax, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x100d	            0xeb05	                           jmp 0x4001054	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x100f	      0xb800000000	                              mov eax, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1014	        0x488945e8	             mov qword [rbp - 0x18], rax	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1018	        0x837dd800	               cmp dword [rbp - 0x28], 0	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x101c	            0x740b	                            je 0x4001069	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x101e	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1021	            0x89d0	                            mov eax, edx	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1023	             0x1c0	                            add eax, eax	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1025	             0x1d0	                            add eax, edx	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1027	            0xeb05	                           jmp 0x400106e	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1029	      0xb801000000	                              mov eax, 1	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x102e	          0x8945dc	             mov dword [rbp - 0x24], eax	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x1031	          0x8b55d0	             mov edx, dword [rbp - 0x30]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1034	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1037	             0x1d0	                            add eax, edx	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1039	          0x8d5002	                      lea edx, [rax + 2]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x103c	    0x8b0500000000	            mov eax, dword [0x04001082] 	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1042	            0x39c2	                            cmp edx, eax	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1044	            0x7e2c	                           jle 0x40010b2	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x1046	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x104a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x104e	      0xbe00000000	                              mov esi, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x1053	          0x4889c7	                            mov rdi, rax	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x1056	      0xb800000000	                              mov eax, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x105b	      0xe800000000	                          call 0x40010a0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x1060	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x1064	          0x4889c7	                            mov rdi, rax	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x1067	      0xe800000000	                          call 0x40010ac	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x106c	          0x83c006	                              add eax, 6	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x106f	          0x8945d0	             mov dword [rbp - 0x30], eax	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x1072	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x1079	            0xeb2f	                           jmp 0x40010ea	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x107b	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x107e	          0x4863d0	                         movsxd rdx, eax	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1081	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1085	          0x4801d0	                            add rax, rdx	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1088	           0xfb600	                   movzx eax, byte [rax]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x108b	           0xfb6d0	                           movzx edx, al	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x108e	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1092	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1096	          0x4889ce	                            mov rsi, rcx	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x1099	          0x4889c7	                            mov rdi, rax	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x109c	      0xb800000000	                              mov eax, 0	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x10a1	      0xe800000000	                          call 0x40010e6	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x10a6	        0x8345cc01	               add dword [rbp - 0x34], 1	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x10aa	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x10ad	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x10b0	            0x7cc9	                            jl 0x40010bb	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x10b2	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       401	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x10b5	           0x145d0	             add dword [rbp - 0x30], eax	       401	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x10b8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x10bc	          0x4885c0	                           test rax, rax	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x10bf	     0xf85ecfeffff	                           jne 0x4000ff1	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x10c5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x10c9	      0xbe00000000	                              mov esi, 0	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x10ce	          0x4889c7	                            mov rdi, rax	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x10d1	      0xe8a4f1ffff	                  call sym.strbuf_addstr	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x10d6	              0x90	                                     nop	       404	pretty.c	WHILE_3	FUNCTION_17
0x10d7	        0x4883c468	                           add rsp, 0x68	       404	pretty.c	WHILE_3	FUNCTION_17
0x10db	              0x5b	                                 pop rbx	       404	pretty.c	WHILE_3	FUNCTION_17
0x10dc	              0x5d	                                 pop rbp	       404	pretty.c	WHILE_3	FUNCTION_17
0x10dd	              0xc3	                                     ret	       404	pretty.c	WHILE_3	FUNCTION_17
is_mboxrd_from	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	24
0x48f0	              0x55	                                push rbp	      1740	pretty.c	FUNCTION_50
0x48f1	          0x4889e5	                            mov rbp, rsp	      1740	pretty.c	FUNCTION_50
0x48f4	        0x4883ec10	                           sub rsp, 0x10	      1740	pretty.c	FUNCTION_50
0x48f8	        0x48897df8	                mov qword [rbp - 8], rdi	      1740	pretty.c	FUNCTION_50
0x48fc	          0x8975f4	              mov dword [rbp - 0xc], esi	      1740	pretty.c	FUNCTION_50
0x48ff	        0x837df404	                cmp dword [rbp - 0xc], 4	      1746	pretty.c	FUNCTION_50	CALL_2
0x4903	            0x7e33	                           jle 0x4004978	      1746	pretty.c	FUNCTION_50	CALL_2
0x4905	        0x488b45f8	                mov rax, qword [rbp - 8]	      1746	pretty.c	FUNCTION_50	CALL_2
0x4909	      0xbe00000000	                              mov esi, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x490e	          0x4889c7	                            mov rdi, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4911	      0xe800000000	                          call 0x4004956	      1746	pretty.c	FUNCTION_50	CALL_2
0x4916	          0x4889c2	                            mov rdx, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4919	        0x488b45f8	                mov rax, qword [rbp - 8]	      1746	pretty.c	FUNCTION_50	CALL_2
0x491d	          0x4801d0	                            add rax, rdx	      1746	pretty.c	FUNCTION_50	CALL_2
0x4920	      0xbe00000000	                              mov esi, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x4925	          0x4889c7	                            mov rdi, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4928	      0xe800000000	                          call 0x400496d	      1746	pretty.c	FUNCTION_50	CALL_2
0x492d	            0x85c0	                           test eax, eax	      1746	pretty.c	FUNCTION_50	CALL_2
0x492f	            0x7407	                            je 0x4004978	      1746	pretty.c	FUNCTION_50	CALL_2
0x4931	      0xb801000000	                              mov eax, 1	      1746	pretty.c	FUNCTION_50	CALL_2
0x4936	            0xeb05	                           jmp 0x400497d	      1746	pretty.c	FUNCTION_50	CALL_2
0x4938	      0xb800000000	                              mov eax, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x493d	              0xc9	                                   leave	      1747	pretty.c	FUNCTION_50
0x493e	              0xc3	                                     ret	      1747	pretty.c	FUNCTION_50
format_and_pad_commit	ELSE,2:IF,11:FOR,0:WHILE,3:CALL,14:DO,0:functions,0:SWITCH,1	295
0x3963	              0x55	                                push rbp	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3964	          0x4889e5	                            mov rbp, rsp	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3967	              0x53	                                push rbx	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3968	    0x4881ec880000	                           sub rsp, 0x88	      1330	pretty.c	WHILE_3	FUNCTION_40
0x396f	        0x48897d88	             mov qword [rbp - 0x78], rdi	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3973	        0x48897580	             mov qword [rbp - 0x80], rsi	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3977	    0x48899578ffff	             mov qword [rbp - 0x88], rdx	      1330	pretty.c	WHILE_3	FUNCTION_40
0x397e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1330	pretty.c	WHILE_3	FUNCTION_40
0x3987	        0x488945e8	             mov qword [rbp - 0x18], rax	      1330	pretty.c	WHILE_3	FUNCTION_40
0x398b	            0x31c0	                            xor eax, eax	      1330	pretty.c	WHILE_3	FUNCTION_40
0x398d	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x3995	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x399d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x39a5	    0xc74598000000	               mov dword [rbp - 0x68], 0	      1332	pretty.c	WHILE_3	FUNCTION_40
0x39ac	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1332	pretty.c	WHILE_3	FUNCTION_40
0x39b3	          0x8b407c	            mov eax, dword [rax + 0x7c] 	      1332	pretty.c	WHILE_3	FUNCTION_40
0x39b6	          0x89459c	             mov dword [rbp - 0x64], eax	      1332	pretty.c	WHILE_3	FUNCTION_40
0x39b9	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x39bd	            0x7964	                           jns 0x4003a63	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x39bf	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39c3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39c7	      0xbe0a000000	                            mov esi, 0xa	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39cc	          0x4889c7	                            mov rdi, rax	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39cf	      0xe800000000	                          call 0x4003a14	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39d4	        0x488945b8	             mov qword [rbp - 0x48], rax	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x39d8	      0x48837db800	               cmp qword [rbp - 0x48], 0	      1336	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x39dd	            0x750c	                           jne 0x4003a2b	      1336	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x39df	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x39e3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x39e7	        0x488945b8	             mov qword [rbp - 0x48], rax	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x39eb	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x39ef	      0xba01000000	                              mov edx, 1	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x39f4	      0xbeffffffff	                     mov esi, 0xffffffff	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x39f9	          0x4889c7	                            mov rdi, rax	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x39fc	      0xe800000000	                          call 0x4003a41	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x3a01	          0x8945a4	             mov dword [rbp - 0x5c], eax	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x3a04	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a0b	        0x488b4008	                mov rax, qword [rax + 8]	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a0f	    0x8b8098000000	            mov eax, dword [rax + 0x98] 	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a15	           0x145a4	             add dword [rbp - 0x5c], eax	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a18	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a1b	            0xf7d8	                                 neg eax	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a1d	          0x2b45a4	             sub eax, dword [rbp - 0x5c]	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a20	          0x89459c	             mov dword [rbp - 0x64], eax	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x3a23	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a27	           0xfb600	                   movzx eax, byte [rax]	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a2a	            0x3c43	                            cmp al, 0x43	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a2c	           0xf94c0	                                 sete al	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a2f	           0xfb6c0	                           movzx eax, al	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a32	          0x8945a8	             mov dword [rbp - 0x58], eax	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a35	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a3c	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a40	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a44	          0x4889ce	                            mov rsi, rcx	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a47	          0x4889c7	                            mov rdi, rax	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a4a	      0xe8eaf2ffff	              call sym.format_commit_one	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a4f	          0x8945ac	             mov dword [rbp - 0x54], eax	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x3a52	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1345	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a55	           0x14598	             add dword [rbp - 0x68], eax	      1345	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a58	        0x837da800	               cmp dword [rbp - 0x58], 0	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x3a5c	            0x741f	                            je 0x4003abd	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x3a5e	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a61	            0x4898	                                    cdqe	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a63	        0x48014580	            add qword [rbp - 0x80], rax 	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a67	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x3a6b	           0xfb600	                   movzx eax, byte [rax]	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x3a6e	            0x3c25	                            cmp al, 0x25	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x3a70	            0x750e	                           jne 0x4003ac0	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x3a72	      0x4883458001	               add qword [rbp - 0x80], 1	      1353	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a77	        0x83459801	               add dword [rbp - 0x68], 1	      1354	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a7b	            0xeba6	                           jmp 0x4003a63	      1355	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x3a7d	              0x90	                                     nop	      1348	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x3a7e	            0xeb01	                           jmp 0x4003ac1	      1348	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x3a80	              0x90	                                     nop	      1352	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x3a81	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a85	      0xba01000000	                              mov edx, 1	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a8a	      0xbeffffffff	                     mov esi, 0xffffffff	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a8f	          0x4889c7	                            mov rdi, rax	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a92	      0xe800000000	                          call 0x4003ad7	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a97	          0x8945b0	             mov dword [rbp - 0x50], eax	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x3a9a	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3aa1	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3aa4	          0x83f803	                              cmp eax, 3	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3aa7	     0xf853d010000	                           jne 0x4003c2a	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3aad	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ab1	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ab5	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ab9	        0x488b4008	                mov rax, qword [rax + 8]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3abd	        0x4883e801	                              sub rax, 1	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ac1	          0x4801d0	                            add rax, rdx	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ac4	        0x488945c0	             mov qword [rbp - 0x40], rax	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x3ac8	      0xe9c7000000	                           jmp 0x4003bd4	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3acd	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ad1	           0xfb600	                   movzx eax, byte [rax]	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ad4	            0x3c20	                            cmp al, 0x20	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ad6	            0x750e	                           jne 0x4003b26	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ad8	      0x48836dc001	               sub qword [rbp - 0x40], 1	      1363	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3add	        0x83459c01	               add dword [rbp - 0x64], 1	      1364	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ae1	      0xe9ae000000	                           jmp 0x4003bd4	      1365	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x3ae6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x3aea	           0xfb600	                   movzx eax, byte [rax]	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x3aed	            0x3c6d	                            cmp al, 0x6d	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x3aef	     0xf85bb000000	                           jne 0x4003bf0	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x3af5	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3af9	        0x4883e801	                              sub rax, 1	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3afd	        0x488945c8	             mov qword [rbp - 0x38], rax	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b01	            0xeb05	                           jmp 0x4003b48	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b03	      0x48836dc801	               sub qword [rbp - 0x38], 1	      1372	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x3b08	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b0c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b10	          0x4829c2	                            sub rdx, rax	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b13	          0x4889d0	                            mov rax, rdx	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b16	        0x4883f809	                              cmp rax, 9	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b1a	            0x7f0b	                            jg 0x4003b67	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b1c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b20	           0xfb600	                   movzx eax, byte [rax]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b23	            0x3c1b	                            cmp al, 0x1b	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b25	            0x75dc	                           jne 0x4003b43	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b27	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b2b	           0xfb600	                   movzx eax, byte [rax]	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b2e	            0x3c1b	                            cmp al, 0x1b	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b30	            0x757f	                           jne 0x4003bf1	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b32	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b36	        0x4883c001	                              add rax, 1	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b3a	          0x4889c2	                            mov rdx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b3d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b41	          0x4829c2	                            sub rdx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b44	          0x4889d0	                            mov rax, rdx	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b47	          0x4889c3	                            mov rbx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b4a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b4e	          0x4889c7	                            mov rdi, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b51	      0xe800000000	                          call 0x4003b96	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x3b56	          0x4839c3	                            cmp rbx, rax	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b59	            0x7556	                           jne 0x4003bf1	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x3b5b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b5f	        0x4883c001	                              add rax, 1	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b63	          0x4889c2	                            mov rdx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b66	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b6a	          0x4829c2	                            sub rdx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b6d	          0x4889d0	                            mov rax, rdx	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b70	          0x4889c1	                            mov rcx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b73	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b77	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b7b	      0xbe00000000	                              mov esi, 0	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b80	          0x4889c7	                            mov rdi, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b83	      0xe800000000	                          call 0x4003bc8	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x3b88	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x3b8c	        0x4883e801	                              sub rax, 1	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x3b90	        0x488945c0	             mov qword [rbp - 0x40], rax	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x3b94	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b97	          0x3b459c	             cmp eax, dword [rbp - 0x64]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b9a	            0x7e15	                           jle 0x4003bf1	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3b9c	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3ba0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3ba4	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3ba8	     0xf821fffffff	                            jb 0x4003b0d	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3bae	            0xeb01	                           jmp 0x4003bf1	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x3bb0	              0x90	                                     nop	      1369	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x3bb1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bb5	        0x4883c001	                              add rax, 1	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bb9	          0x4889c2	                            mov rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bbc	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bc0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bc4	          0x4829c2	                            sub rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bc7	          0x4889d0	                            mov rax, rdx	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bca	          0x4889c2	                            mov rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bcd	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bd1	          0x4889d6	                            mov rsi, rdx	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bd4	          0x4889c7	                            mov rdi, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bd7	      0xe896c5ffff	                  call sym.strbuf_setlen	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x3bdc	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1384	pretty.c	FUNCTION_40	IF_5
0x3be3	    0xc74048020000	               mov dword [rax + 0x48], 2	      1384	pretty.c	FUNCTION_40	IF_5
0x3bea	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1387	pretty.c	FUNCTION_40	IF_9
0x3bed	          0x3b459c	             cmp eax, dword [rbp - 0x64]	      1387	pretty.c	FUNCTION_40	IF_9
0x3bf0	     0xf8eb7000000	                           jle 0x4003ced	      1387	pretty.c	FUNCTION_40	IF_9
0x3bf6	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3bfd	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c00	          0x83f801	                              cmp eax, 1	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c03	            0x7415	                            je 0x4003c5a	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c05	          0x83f801	                              cmp eax, 1	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c08	     0xf8286000000	                            jb 0x4003cd4	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c0e	          0x83f802	                              cmp eax, 2	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c11	            0x742c	                            je 0x4003c7f	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c13	          0x83f803	                              cmp eax, 3	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c16	            0x7456	                            je 0x4003cae	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c18	            0xeb7b	                           jmp 0x4003cd5	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c1a	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1391	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c1d	          0x8d50fe	                      lea edx, [rax - 2]	      1391	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c20	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c23	            0x29d0	                            sub eax, edx	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c25	            0x89c2	                            mov edx, eax	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c27	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c2b	      0xb900000000	                              mov ecx, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c30	      0xbe00000000	                              mov esi, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c35	          0x4889c7	                            mov rdi, rax	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c38	      0xe800000000	                          call 0x4003c7d	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x3c3d	            0xeb56	                           jmp 0x4003cd5	      1393	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c3f	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1397	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c42	          0x8d50fe	                      lea edx, [rax - 2]	      1397	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c45	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c48	            0x29d0	                            sub eax, edx	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c4a	            0x89c2	                            mov edx, eax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c4c	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c4f	            0x89c1	                            mov ecx, eax	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c51	          0xc1e91f	                           shr ecx, 0x1f	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c54	             0x1c8	                            add eax, ecx	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c56	            0xd1f8	                              sar eax, 1	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c58	          0x8d70ff	                      lea esi, [rax - 1]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c5b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c5f	      0xb900000000	                              mov ecx, 0	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c64	          0x4889c7	                            mov rdi, rax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c67	      0xe800000000	                          call 0x4003cac	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x3c6c	            0xeb27	                           jmp 0x4003cd5	      1399	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c6e	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1402	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c71	          0x8d50fe	                      lea edx, [rax - 2]	      1402	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c74	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c77	            0x29d0	                            sub eax, edx	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c79	            0x89c2	                            mov edx, eax	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c7b	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c7e	          0x8d70fe	                      lea esi, [rax - 2]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c81	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c85	      0xb900000000	                              mov ecx, 0	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c8a	          0x4889c7	                            mov rdi, rax	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c8d	      0xe800000000	                          call 0x4003cd2	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x3c92	            0xeb01	                           jmp 0x4003cd5	      1404	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c94	              0x90	                                     nop	      1406	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x3c95	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3c99	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3c9d	          0x4889d6	                            mov rsi, rdx	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3ca0	          0x4889c7	                            mov rdi, rax	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3ca3	      0xe800000000	                          call 0x4003ce8	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3ca8	      0xe9a2000000	                           jmp 0x4003d8f	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x3cad	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x3cb1	        0x488b4008	                mov rax, qword [rax + 8]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x3cb5	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1410	pretty.c	FUNCTION_40	ELSE_1
0x3cb8	    0xc745a0000000	               mov dword [rbp - 0x60], 0	      1410	pretty.c	FUNCTION_40	ELSE_1
0x3cbf	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cc6	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cc9	          0x83f802	                              cmp eax, 2	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3ccc	            0x750b	                           jne 0x4003d19	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cce	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cd1	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cd4	          0x8945a0	             mov dword [rbp - 0x60], eax	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cd7	            0xeb21	                           jmp 0x4003d3a	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x3cd9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3ce0	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3ce3	          0x83f804	                              cmp eax, 4	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3ce6	            0x7512	                           jne 0x4003d3a	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3ce8	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3ceb	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cee	            0x89c2	                            mov edx, eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cf0	          0xc1ea1f	                           shr edx, 0x1f	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cf3	             0x1d0	                            add eax, edx	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cf5	            0xd1f8	                              sar eax, 1	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cf7	          0x8945a0	             mov dword [rbp - 0x60], eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x3cfa	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3cfd	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3d00	            0x89c2	                            mov edx, eax	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3d02	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3d06	             0x1d0	                            add eax, edx	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3d08	          0x89459c	             mov dword [rbp - 0x64], eax	      1419	pretty.c	FUNCTION_40	ELSE_1
0x3d0b	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d0e	          0x4863d0	                         movsxd rdx, eax	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d11	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d15	      0xbe20000000	                           mov esi, 0x20	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d1a	          0x4889c7	                            mov rdi, rax	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d1d	      0xe800000000	                          call 0x4003d62	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x3d22	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d26	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d2a	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d2e	        0x488b4910	            mov rcx, qword [rcx + 0x10] 	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d32	          0x8b75b4	             mov esi, dword [rbp - 0x4c]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d35	          0x4863fe	                         movsxd rdi, esi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d38	          0x8b75a0	             mov esi, dword [rbp - 0x60]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d3b	          0x4863f6	                         movsxd rsi, esi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d3e	          0x4801fe	                            add rsi, rdi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d41	          0x4801f1	                            add rcx, rsi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d44	          0x4889c6	                            mov rsi, rax	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d47	          0x4889cf	                            mov rdi, rcx	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d4a	      0xe800000000	                          call 0x4003d8f	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x3d4f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1424	pretty.c	FUNCTION_40	CALL_14
0x3d53	          0x4889c7	                            mov rdi, rax	      1424	pretty.c	FUNCTION_40	CALL_14
0x3d56	      0xe800000000	                          call 0x4003d9b	      1424	pretty.c	FUNCTION_40	CALL_14
0x3d5b	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1425	pretty.c	FUNCTION_40
0x3d62	    0xc74048000000	               mov dword [rax + 0x48], 0	      1425	pretty.c	FUNCTION_40
0x3d69	          0x8b4598	             mov eax, dword [rbp - 0x68]	      1426	pretty.c	FUNCTION_40
0x3d6c	            0x4898	                                    cdqe	      1426	pretty.c	FUNCTION_40
0x3d6e	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      1427	pretty.c	FUNCTION_40
0x3d72	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      1427	pretty.c	FUNCTION_40
0x3d7b	            0x7405	                            je 0x4003dc2	      1427	pretty.c	FUNCTION_40
0x3d7d	      0xe800000000	                          call 0x4003dc2	      1427	pretty.c	FUNCTION_40
0x3d82	    0x4881c4880000	                           add rsp, 0x88	      1427	pretty.c	FUNCTION_40
0x3d89	              0x5b	                                 pop rbx	      1427	pretty.c	FUNCTION_40
0x3d8a	              0x5d	                                 pop rbp	      1427	pretty.c	FUNCTION_40
0x3d8b	              0xc3	                                     ret	      1427	pretty.c	FUNCTION_40
strbuf_addch	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	33
0x20c	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_57
0x20d	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_57
0x210	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_57
0x214	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_57
0x218	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_57
0x21b	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x21f	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x222	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x227	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x22a	            0x7511	                           jne 0x400027d	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x22c	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_57	CALL_2
0x230	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_57	CALL_2
0x235	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_57	CALL_2
0x238	      0xe800000000	                          call 0x400027d	       228	strbuf.h	FUNCTION_57	CALL_2
0x23d	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x241	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_57
0x245	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x249	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_57
0x24d	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_57
0x251	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x255	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_57
0x259	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_57
0x25c	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_57
0x25f	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_57
0x261	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_57
0x265	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_57
0x269	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_57
0x26d	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_57
0x271	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_57
0x274	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_57
0x277	              0x90	                                     nop	       231	strbuf.h	FUNCTION_57
0x278	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_57
0x279	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_57
add_merge_info	ELSE,1:IF,2:FOR,0:WHILE,1:CALL,7:DO,0:functions,0:SWITCH,0	71
0x1855	              0x55	                                push rbp	       539	pretty.c	WHILE_3	FUNCTION_22
0x1856	          0x4889e5	                            mov rbp, rsp	       539	pretty.c	WHILE_3	FUNCTION_22
0x1859	        0x4883ec30	                           sub rsp, 0x30	       539	pretty.c	WHILE_3	FUNCTION_22
0x185d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       539	pretty.c	WHILE_3	FUNCTION_22
0x1861	        0x488975e0	             mov qword [rbp - 0x20], rsi	       539	pretty.c	WHILE_3	FUNCTION_22
0x1865	        0x488955d8	             mov qword [rbp - 0x28], rdx	       539	pretty.c	WHILE_3	FUNCTION_22
0x1869	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       540	pretty.c	WHILE_3	FUNCTION_22
0x186d	        0x488b4030	            mov rax, qword [rax + 0x30] 	       540	pretty.c	WHILE_3	FUNCTION_22
0x1871	        0x488945f0	             mov qword [rbp - 0x10], rax	       540	pretty.c	WHILE_3	FUNCTION_22
0x1875	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1879	            0x8b00	                    mov eax, dword [rax]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x187b	          0x83f805	                              cmp eax, 5	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x187e	     0xf84cf000000	                            je 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1884	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1888	            0x8b00	                    mov eax, dword [rax]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x188a	            0x89c7	                            mov edi, eax	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x188c	      0xe8bbeaffff	               call sym.cmit_fmt_is_mail	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1891	            0x85c0	                           test eax, eax	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1893	     0xf85ba000000	                           jne 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x1899	      0x48837df000	               cmp qword [rbp - 0x10], 0	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x189e	     0xf84af000000	                            je 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x18a4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x18a8	        0x488b4008	                mov rax, qword [rax + 8]	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x18ac	          0x4885c0	                           test rax, rax	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x18af	     0xf849e000000	                            je 0x4001993	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x18b5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x18b9	      0xbe00000000	                              mov esi, 0	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x18be	          0x4889c7	                            mov rdi, rax	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x18c1	      0xe8b4e9ffff	                  call sym.strbuf_addstr	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x18c6	            0xeb71	                           jmp 0x4001979	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x18c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x18cc	          0x488b00	                    mov rax, qword [rax]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x18cf	        0x4883c004	                              add rax, 4	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x18d3	        0x488945f8	                mov qword [rbp - 8], rax	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x18d7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x18db	      0xbe20000000	                           mov esi, 0x20	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x18e0	          0x4889c7	                            mov rdi, rax	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x18e3	      0xe824e9ffff	                   call sym.strbuf_addch	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x18e8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x18ec	          0x8b4004	                mov eax, dword [rax + 4]	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x18ef	            0x85c0	                           test eax, eax	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x18f1	            0x741c	                            je 0x400194f	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x18f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x18f7	          0x8b5004	                mov edx, dword [rax + 4]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x18fa	        0x488b4df8	                mov rcx, qword [rbp - 8]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x18fe	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x1902	          0x4889ce	                            mov rsi, rcx	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x1905	          0x4889c7	                            mov rdi, rax	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x1908	      0xe800000000	                          call 0x400194d	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x190d	            0xeb1e	                           jmp 0x400196d	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x190f	        0x488b45f8	                mov rax, qword [rbp - 8]	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x1913	          0x4889c7	                            mov rdi, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x1916	      0xe800000000	                          call 0x400195b	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x191b	          0x4889c2	                            mov rdx, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x191e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x1922	          0x4889d6	                            mov rsi, rdx	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x1925	          0x4889c7	                            mov rdi, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x1928	      0xe84de9ffff	                  call sym.strbuf_addstr	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x192d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x1931	        0x488b4008	                mov rax, qword [rax + 8]	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x1935	        0x488945f0	             mov qword [rbp - 0x10], rax	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x1939	      0x48837df000	               cmp qword [rbp - 0x10], 0	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x193e	            0x7588	                           jne 0x4001908	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x1940	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x1944	      0xbe0a000000	                            mov esi, 0xa	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x1949	          0x4889c7	                            mov rdi, rax	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x194c	      0xe8bbe8ffff	                   call sym.strbuf_addch	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x1951	            0xeb01	                           jmp 0x4001994	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x1953	              0x90	                                     nop	       544	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x1954	              0xc9	                                   leave	       558	pretty.c	WHILE_3	FUNCTION_22
0x1955	              0xc3	                                     ret	       558	pretty.c	WHILE_3	FUNCTION_22
format_commit_item	ELSE,3:IF,7:FOR,0:WHILE,1:CALL,5:DO,0:functions,0:SWITCH,1	109
0x3d8c	              0x55	                                push rbp	      1432	pretty.c	FUNCTION_41
0x3d8d	          0x4889e5	                            mov rbp, rsp	      1432	pretty.c	FUNCTION_41
0x3d90	        0x4883ec30	                           sub rsp, 0x30	      1432	pretty.c	FUNCTION_41
0x3d94	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1432	pretty.c	FUNCTION_41
0x3d98	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1432	pretty.c	FUNCTION_41
0x3d9c	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1432	pretty.c	FUNCTION_41
0x3da0	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1440	pretty.c	FUNCTION_41
0x3da7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3dab	           0xfb600	                   movzx eax, byte [rax]	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3dae	           0xfbec0	                           movsx eax, al	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3db1	          0x83f82b	                           cmp eax, 0x2b	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3db4	            0x7415	                            je 0x4003e0b	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3db6	          0x83f82d	                           cmp eax, 0x2d	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3db9	            0x7407	                            je 0x4003e02	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3dbb	          0x83f820	                           cmp eax, 0x20	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3dbe	            0x7414	                            je 0x4003e14	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x3dc0	            0xeb1a	                           jmp 0x4003e1c	      1453	pretty.c	FUNCTION_41	SWITCH_1
0x3dc2	    0xc745f4020000	                mov dword [rbp - 0xc], 2	      1444	pretty.c	FUNCTION_41	SWITCH_1
0x3dc9	            0xeb11	                           jmp 0x4003e1c	      1445	pretty.c	FUNCTION_41	SWITCH_1
0x3dcb	    0xc745f4010000	                mov dword [rbp - 0xc], 1	      1447	pretty.c	FUNCTION_41	SWITCH_1
0x3dd2	            0xeb08	                           jmp 0x4003e1c	      1448	pretty.c	FUNCTION_41	SWITCH_1
0x3dd4	    0xc745f4030000	                mov dword [rbp - 0xc], 3	      1450	pretty.c	FUNCTION_41	SWITCH_1
0x3ddb	              0x90	                                     nop	      1451	pretty.c	FUNCTION_41	SWITCH_1
0x3ddc	        0x837df400	                cmp dword [rbp - 0xc], 0	      1455	pretty.c	FUNCTION_41	IF_1
0x3de0	            0x7405	                            je 0x4003e27	      1455	pretty.c	FUNCTION_41	IF_1
0x3de2	      0x488345e001	               add qword [rbp - 0x20], 1	      1456	pretty.c	FUNCTION_41	IF_1
0x3de7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1458	pretty.c	FUNCTION_41
0x3deb	        0x488b4008	                mov rax, qword [rax + 8]	      1458	pretty.c	FUNCTION_41
0x3def	        0x488945f8	                mov qword [rbp - 8], rax	      1458	pretty.c	FUNCTION_41
0x3df3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1459	pretty.c	FUNCTION_41	IF_2
0x3df7	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1459	pretty.c	FUNCTION_41	IF_2
0x3dfa	            0x85c0	                           test eax, eax	      1459	pretty.c	FUNCTION_41	IF_2
0x3dfc	            0x741c	                            je 0x4003e5a	      1459	pretty.c	FUNCTION_41	IF_2
0x3dfe	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e02	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e06	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e0a	          0x4889ce	                            mov rsi, rcx	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e0d	          0x4889c7	                            mov rdi, rax	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e10	      0xe84efbffff	          call sym.format_and_pad_commit	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e15	          0x8945f0	             mov dword [rbp - 0x10], eax	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e18	            0xeb1a	                           jmp 0x4003e74	      1460	pretty.c	FUNCTION_41	CALL_1
0x3e1a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e1e	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e22	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e26	          0x4889ce	                            mov rsi, rcx	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e29	          0x4889c7	                            mov rdi, rax	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e2c	      0xe808efffff	              call sym.format_commit_one	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e31	          0x8945f0	             mov dword [rbp - 0x10], eax	      1462	pretty.c	FUNCTION_41	CALL_2
0x3e34	        0x837df400	                cmp dword [rbp - 0xc], 0	      1463	pretty.c	FUNCTION_41	IF_3
0x3e38	            0x750a	                           jne 0x4003e84	      1463	pretty.c	FUNCTION_41	IF_3
0x3e3a	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1464	pretty.c	FUNCTION_41	IF_3
0x3e3d	            0x4898	                                    cdqe	      1464	pretty.c	FUNCTION_41	IF_3
0x3e3f	      0xe9b9000000	                           jmp 0x4003f3d	      1464	pretty.c	FUNCTION_41	IF_3
0x3e44	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1466	pretty.c	FUNCTION_41	IF_4
0x3e48	        0x488b4008	                mov rax, qword [rax + 8]	      1466	pretty.c	FUNCTION_41	IF_4
0x3e4c	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1466	pretty.c	FUNCTION_41	IF_4
0x3e50	            0x7550	                           jne 0x4003ee2	      1466	pretty.c	FUNCTION_41	IF_4
0x3e52	        0x837df402	                cmp dword [rbp - 0xc], 2	      1466	pretty.c	FUNCTION_41	IF_4
0x3e56	            0x754a	                           jne 0x4003ee2	      1466	pretty.c	FUNCTION_41	IF_4
0x3e58	            0xeb1b	                           jmp 0x4003eb5	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e5a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e5e	        0x488b4008	                mov rax, qword [rax + 8]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e62	        0x488d50ff	                      lea rdx, [rax - 1]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e66	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e6a	          0x4889d6	                            mov rsi, rdx	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e6d	          0x4889c7	                            mov rdi, rax	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e70	      0xe8fdc2ffff	                  call sym.strbuf_setlen	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x3e75	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e79	        0x488b4008	                mov rax, qword [rax + 8]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e7d	          0x4885c0	                           test rax, rax	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e80	            0x7472	                            je 0x4003f34	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e82	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e86	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e8e	        0x488b4008	                mov rax, qword [rax + 8]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e92	        0x4883e801	                              sub rax, 1	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e96	          0x4801d0	                            add rax, rdx	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e99	           0xfb600	                   movzx eax, byte [rax]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e9c	            0x3c0a	                             cmp al, 0xa	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3e9e	            0x74ba	                            je 0x4003e9a	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x3ea0	            0xeb52	                           jmp 0x4003f34	      1466	pretty.c	FUNCTION_41	IF_4
0x3ea2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x3ea6	        0x488b4008	                mov rax, qword [rax + 8]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x3eaa	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x3eae	            0x7445	                            je 0x4003f35	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x3eb0	        0x837df401	                cmp dword [rbp - 0xc], 1	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x3eb4	            0x751c	                           jne 0x4003f12	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x3eb6	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3eba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ebe	      0xb901000000	                              mov ecx, 1	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ec3	      0xba00000000	                              mov edx, 0	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ec8	          0x4889c7	                            mov rdi, rax	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ecb	      0xe800000000	                          call 0x4003f10	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ed0	            0xeb23	                           jmp 0x4003f35	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x3ed2	        0x837df403	                cmp dword [rbp - 0xc], 3	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ed6	            0x751d	                           jne 0x4003f35	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ed8	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3edc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ee0	      0xb901000000	                              mov ecx, 1	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ee5	      0xba00000000	                              mov edx, 0	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3eea	          0x4889c7	                            mov rdi, rax	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3eed	      0xe800000000	                          call 0x4003f32	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ef2	            0xeb01	                           jmp 0x4003f35	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x3ef4	              0x90	                                     nop	      1466	pretty.c	FUNCTION_41	IF_4
0x3ef5	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1475	pretty.c	FUNCTION_41
0x3ef8	          0x83c001	                              add eax, 1	      1475	pretty.c	FUNCTION_41
0x3efb	            0x4898	                                    cdqe	      1475	pretty.c	FUNCTION_41
0x3efd	              0xc9	                                   leave	      1476	pretty.c	FUNCTION_41
0x3efe	              0xc3	                                     ret	      1476	pretty.c	FUNCTION_41
git_pretty_formats_config	ELSE,2:IF,7:FOR,2:WHILE,0:CALL,10:DO,0:functions,0:SWITCH,0	177
0x42e	              0x55	                                push rbp	        45	pretty.c	WHILE_3	FUNCTION_3
0x42f	          0x4889e5	                            mov rbp, rsp	        45	pretty.c	WHILE_3	FUNCTION_3
0x432	        0x4883ec50	                           sub rsp, 0x50	        45	pretty.c	WHILE_3	FUNCTION_3
0x436	        0x48897dc8	             mov qword [rbp - 0x38], rdi	        45	pretty.c	WHILE_3	FUNCTION_3
0x43a	        0x488975c0	             mov qword [rbp - 0x40], rsi	        45	pretty.c	WHILE_3	FUNCTION_3
0x43e	        0x488955b8	             mov qword [rbp - 0x48], rdx	        45	pretty.c	WHILE_3	FUNCTION_3
0x442	    0x64488b042528	                mov rax, qword fs:[0x28]	        45	pretty.c	WHILE_3	FUNCTION_3
0x44b	        0x488945f8	                mov qword [rbp - 8], rax	        45	pretty.c	WHILE_3	FUNCTION_3
0x44f	            0x31c0	                            xor eax, eax	        45	pretty.c	WHILE_3	FUNCTION_3
0x451	    0x48c745f00000	               mov qword [rbp - 0x10], 0	        46	pretty.c	WHILE_3	FUNCTION_3
0x459	        0x488d55e0	                   lea rdx, [rbp - 0x20]	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x45d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x461	      0xbe00000000	                              mov esi, 0	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x466	          0x4889c7	                            mov rdi, rax	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x469	      0xe892fbffff	                    call sym.skip_prefix	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x46e	            0x85c0	                           test eax, eax	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x470	            0x750a	                           jne 0x40004bc	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x472	      0xb800000000	                              mov eax, 0	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x477	      0xe96d020000	                           jmp 0x4000729	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x47c	    0xc745dc000000	               mov dword [rbp - 0x24], 0	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x483	            0xeb38	                           jmp 0x40004fd	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x485	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x489	    0x488b05000000	            mov rax, qword [0x040004d0] 	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x490	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x493	          0x4863c9	                         movsxd rcx, ecx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x496	        0x48c1e105	                              shl rcx, 5	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x49a	          0x4801c8	                            add rax, rcx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x49d	          0x488b00	                    mov rax, qword [rax]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4a0	          0x4889d6	                            mov rsi, rdx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4a3	          0x4889c7	                            mov rdi, rax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4a6	      0xe800000000	                          call 0x40004eb	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4ab	            0x85c0	                           test eax, eax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4ad	            0x750a	                           jne 0x40004f9	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4af	      0xb800000000	                              mov eax, 0	        56	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2
0x4b4	      0xe930020000	                           jmp 0x4000729	        56	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2
0x4b9	        0x8345dc01	               add dword [rbp - 0x24], 1	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4bd	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4c0	          0x4863d0	                         movsxd rdx, eax	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4c3	    0x488b05000000	            mov rax, qword [0x0400050a] 	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4ca	          0x4839c2	                            cmp rdx, rax	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4cd	            0x72b6	                            jb 0x40004c5	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4cf	    0x488b05000000	            mov rax, qword [0x04000516] 	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4d6	          0x8945dc	             mov dword [rbp - 0x24], eax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4d9	            0xeb48	                           jmp 0x4000563	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4db	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4df	    0x488b05000000	            mov rax, qword [0x04000526] 	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4e6	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4e9	          0x4863c9	                         movsxd rcx, ecx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4ec	        0x48c1e105	                              shl rcx, 5	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4f0	          0x4801c8	                            add rax, rcx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4f3	          0x488b00	                    mov rax, qword [rax]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4f6	          0x4889d6	                            mov rsi, rdx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4f9	          0x4889c7	                            mov rdi, rax	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4fc	      0xe800000000	                          call 0x4000541	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x501	            0x85c0	                           test eax, eax	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x503	            0x751a	                           jne 0x400055f	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x505	    0x488b05000000	            mov rax, qword [0x0400054c] 	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x50c	          0x8b55dc	             mov edx, dword [rbp - 0x24]	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x50f	          0x4863d2	                         movsxd rdx, edx	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x512	        0x48c1e205	                              shl rdx, 5	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x516	          0x4801d0	                            add rax, rdx	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x519	        0x488945f0	             mov qword [rbp - 0x10], rax	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x51d	            0xeb16	                           jmp 0x4000575	        62	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x51f	        0x8345dc01	               add dword [rbp - 0x24], 1	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x523	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x526	          0x4863d0	                         movsxd rdx, eax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x529	    0x488b05000000	            mov rax, qword [0x04000570] 	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x530	          0x4839c2	                            cmp rdx, rax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x533	            0x72a6	                            jb 0x400051b	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x535	      0x48837df000	               cmp qword [rbp - 0x10], 0	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x53a	     0xf85e8000000	                           jne 0x4000668	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x540	    0x488b05000000	            mov rax, qword [0x04000587] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x547	        0x488d5001	                      lea rdx, [rax + 1]	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x54b	    0x488b05000000	            mov rax, qword [0x04000592] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x552	          0x4839c2	                            cmp rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x555	     0xf868c000000	                           jbe 0x4000627	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x55b	    0x488b15000000	            mov rdx, qword [0x040005a2] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x562	          0x4889d0	                            mov rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x565	          0x4801c0	                            add rax, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x568	          0x4801d0	                            add rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x56b	        0x4883c030	                           add rax, 0x30	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x56f	          0x48d1e8	                              shr rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x572	          0x4889c2	                            mov rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x575	    0x488b05000000	            mov rax, qword [0x040005bc] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x57c	        0x4883c001	                              add rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x580	          0x4839c2	                            cmp rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x583	            0x7314	                           jae 0x40005d9	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x585	    0x488b05000000	            mov rax, qword [0x040005cc] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x58c	        0x4883c001	                              add rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x590	    0x488905000000	            mov qword [0x040005d7], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x597	            0xeb1e	                           jmp 0x40005f7	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x599	    0x488b15000000	            mov rdx, qword [0x040005e0] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5a0	          0x4889d0	                            mov rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5a3	          0x4801c0	                            add rax, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5a6	          0x4801d0	                            add rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5a9	        0x4883c030	                           add rax, 0x30	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5ad	          0x48d1e8	                              shr rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5b0	    0x488905000000	            mov qword [0x040005f7], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5b7	    0x488b05000000	            mov rax, qword [0x040005fe] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5be	          0x4889c6	                            mov rsi, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5c1	      0xbf20000000	                           mov edi, 0x20	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5c6	      0xe88bfaffff	                        call sym.st_mult	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5cb	          0x4889c2	                            mov rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5ce	    0x488b05000000	            mov rax, qword [0x04000615] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5d5	          0x4889d6	                            mov rsi, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5d8	          0x4889c7	                            mov rdi, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5db	      0xe800000000	                          call 0x4000620	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5e0	    0x488905000000	            mov qword [0x04000627], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x5e7	    0x488b05000000	            mov rax, qword [0x0400062e] 	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x5ee	    0x488b15000000	            mov rdx, qword [0x04000635] 	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x5f5	        0x48c1e205	                              shl rdx, 5	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x5f9	          0x4801d0	                            add rax, rdx	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x5fc	        0x488945f0	             mov qword [rbp - 0x10], rax	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x600	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_5
0x604	      0xba20000000	                           mov edx, 0x20	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_5
0x609	      0xbe00000000	                              mov esi, 0	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_5
0x60e	          0x4889c7	                            mov rdi, rax	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_5
0x611	      0xe800000000	                          call 0x4000656	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_5
0x616	    0x488b05000000	            mov rax, qword [0x0400065d] 	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x61d	        0x4883c001	                              add rax, 1	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x621	    0x488905000000	            mov qword [0x04000668], rax 	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x628	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x62c	          0x4889c7	                            mov rdi, rax	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x62f	      0xe800000000	                          call 0x4000674	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x634	          0x4889c2	                            mov rdx, rax	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x637	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x63b	          0x488910	                    mov qword [rax], rdx	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x63e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        75	pretty.c	WHILE_3	FUNCTION_3
0x642	    0xc74008080000	                  mov dword [rax + 8], 8	        75	pretty.c	WHILE_3	FUNCTION_3
0x649	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x64d	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x651	        0x488d45e8	                   lea rax, [rbp - 0x18]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x655	          0x4889ce	                            mov rsi, rcx	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x658	          0x4889c7	                            mov rdi, rax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x65b	      0xe800000000	                          call 0x40006a0	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x660	            0x85c0	                           test eax, eax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x662	            0x7407	                            je 0x40006ab	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x664	      0xb8ffffffff	                     mov eax, 0xffffffff	        77	pretty.c	WHILE_3	FUNCTION_3	IF_5
0x669	            0xeb7e	                           jmp 0x4000729	        77	pretty.c	WHILE_3	FUNCTION_3	IF_5
0x66b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x66f	        0x488d55e8	                   lea rdx, [rbp - 0x18]	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x673	      0xbe00000000	                              mov esi, 0	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x678	          0x4889c7	                            mov rdi, rax	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x67b	      0xe880f9ffff	                    call sym.skip_prefix	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x680	            0x85c0	                           test eax, eax	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x682	            0x740d	                            je 0x40006d1	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x684	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x688	    0xc7400c000000	                mov dword [rax + 0xc], 0	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x68f	            0xeb47	                           jmp 0x4000718	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x691	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x695	        0x488d55e8	                   lea rdx, [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x699	      0xbe00000000	                              mov esi, 0	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x69e	          0x4889c7	                            mov rdi, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6a1	      0xe85af9ffff	                    call sym.skip_prefix	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6a6	            0x85c0	                           test eax, eax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6a8	            0x7516	                           jne 0x4000700	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6aa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6ae	      0xbe25000000	                           mov esi, 0x25	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6b3	          0x4889c7	                            mov rdi, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6b6	      0xe800000000	                          call 0x40006fb	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6bb	          0x4885c0	                           test rax, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6be	            0x740d	                            je 0x400070d	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x6c0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x6c4	    0xc7400c010000	                mov dword [rax + 0xc], 1	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x6cb	            0xeb0b	                           jmp 0x4000718	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x6cd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        84	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6d1	    0xc74014010000	               mov dword [rax + 0x14], 1	        84	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6d8	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6e0	        0x48895018	             mov qword [rax + 0x18], rdx	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6e4	      0xb800000000	                              mov eax, 0	        87	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6e9	        0x488b75f8	                mov rsi, qword [rbp - 8]	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6ed	    0x644833342528	                xor rsi, qword fs:[0x28]	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6f6	            0x7405	                            je 0x400073d	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6f8	      0xe800000000	                          call 0x400073d	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6fd	              0xc9	                                   leave	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x6fe	              0xc3	                                     ret	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
is_blank_line	ELSE,0:IF,0:FOR,0:WHILE,1:CALL,1:DO,0:functions,0:SWITCH,0	32
0x1780	              0x55	                                push rbp	       515	pretty.c	WHILE_3	FUNCTION_20
0x1781	          0x4889e5	                            mov rbp, rsp	       515	pretty.c	WHILE_3	FUNCTION_20
0x1784	        0x48897de8	             mov qword [rbp - 0x18], rdi	       515	pretty.c	WHILE_3	FUNCTION_20
0x1788	        0x488975e0	             mov qword [rbp - 0x20], rsi	       515	pretty.c	WHILE_3	FUNCTION_20
0x178c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       516	pretty.c	WHILE_3	FUNCTION_20
0x1790	            0x8b00	                    mov eax, dword [rax]	       516	pretty.c	WHILE_3	FUNCTION_20
0x1792	          0x8945fc	                mov dword [rbp - 4], eax	       516	pretty.c	WHILE_3	FUNCTION_20
0x1795	            0xeb04	                           jmp 0x40017db	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x1797	        0x836dfc01	                  sub dword [rbp - 4], 1	       518	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x179b	        0x837dfc00	                  cmp dword [rbp - 4], 0	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x179f	            0x7429	                            je 0x400180a	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17a1	          0x8b45fc	                mov eax, dword [rbp - 4]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17a4	            0x4898	                                    cdqe	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17a6	        0x488d50ff	                      lea rdx, [rax - 1]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17aa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17ae	          0x4801d0	                            add rax, rdx	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17b1	           0xfb600	                   movzx eax, byte [rax]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17b4	           0xfb6c0	                           movzx eax, al	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17b7	            0x4898	                                    cdqe	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17b9	     0xfb680000000	                   movzx eax, byte [rax]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17c0	           0xfb6c0	                           movzx eax, al	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17c3	          0x83e001	                              and eax, 1	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17c6	            0x85c0	                           test eax, eax	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17c8	            0x75cd	                           jne 0x40017d7	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x17ca	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       519	pretty.c	WHILE_3	FUNCTION_20
0x17ce	          0x8b55fc	                mov edx, dword [rbp - 4]	       519	pretty.c	WHILE_3	FUNCTION_20
0x17d1	            0x8910	                    mov dword [rax], edx	       519	pretty.c	WHILE_3	FUNCTION_20
0x17d3	        0x837dfc00	                  cmp dword [rbp - 4], 0	       520	pretty.c	WHILE_3	FUNCTION_20
0x17d7	           0xf94c0	                                 sete al	       520	pretty.c	WHILE_3	FUNCTION_20
0x17da	           0xfb6c0	                           movzx eax, al	       520	pretty.c	WHILE_3	FUNCTION_20
0x17dd	              0x5d	                                 pop rbp	       521	pretty.c	WHILE_3	FUNCTION_20
0x17de	              0xc3	                                     ret	       521	pretty.c	WHILE_3	FUNCTION_20
get_header	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	30
0x1956	              0x55	                                push rbp	       561	pretty.c	WHILE_3	FUNCTION_23
0x1957	          0x4889e5	                            mov rbp, rsp	       561	pretty.c	WHILE_3	FUNCTION_23
0x195a	        0x4883ec30	                           sub rsp, 0x30	       561	pretty.c	WHILE_3	FUNCTION_23
0x195e	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       561	pretty.c	WHILE_3	FUNCTION_23
0x1962	        0x488975d0	             mov qword [rbp - 0x30], rsi	       561	pretty.c	WHILE_3	FUNCTION_23
0x1966	    0x64488b042528	                mov rax, qword fs:[0x28]	       561	pretty.c	WHILE_3	FUNCTION_23
0x196f	        0x488945f8	                mov qword [rbp - 8], rax	       561	pretty.c	WHILE_3	FUNCTION_23
0x1973	            0x31c0	                            xor eax, eax	       561	pretty.c	WHILE_3	FUNCTION_23
0x1975	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x1979	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x197d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x1981	          0x4889ce	                            mov rsi, rcx	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x1984	          0x4889c7	                            mov rdi, rax	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x1987	      0xe800000000	                          call 0x40019cc	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x198c	        0x488945f0	             mov qword [rbp - 0x10], rax	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x1990	      0x48837df000	               cmp qword [rbp - 0x10], 0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x1995	            0x7415	                            je 0x40019ec	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x1997	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x199b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x199f	          0x4889d6	                            mov rsi, rdx	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x19a2	          0x4889c7	                            mov rdi, rax	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x19a5	      0xe800000000	                          call 0x40019ea	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x19aa	            0xeb05	                           jmp 0x40019f1	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x19ac	      0xb800000000	                              mov eax, 0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x19b1	        0x488b4df8	                mov rcx, qword [rbp - 8]	       565	pretty.c	WHILE_3	FUNCTION_23
0x19b5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       565	pretty.c	WHILE_3	FUNCTION_23
0x19be	            0x7405	                            je 0x4001a05	       565	pretty.c	WHILE_3	FUNCTION_23
0x19c0	      0xe800000000	                          call 0x4001a05	       565	pretty.c	WHILE_3	FUNCTION_23
0x19c5	              0xc9	                                   leave	       565	pretty.c	WHILE_3	FUNCTION_23
0x19c6	              0xc3	                                     ret	       565	pretty.c	WHILE_3	FUNCTION_23
mailmap_name	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:SWITCH,0	37
0x1ce3	              0x55	                                push rbp	       668	pretty.c	WHILE_3	FUNCTION_26
0x1ce4	          0x4889e5	                            mov rbp, rsp	       668	pretty.c	WHILE_3	FUNCTION_26
0x1ce7	        0x4883ec20	                           sub rsp, 0x20	       668	pretty.c	WHILE_3	FUNCTION_26
0x1ceb	        0x48897df8	                mov qword [rbp - 8], rdi	       668	pretty.c	WHILE_3	FUNCTION_26
0x1cef	        0x488975f0	             mov qword [rbp - 0x10], rsi	       668	pretty.c	WHILE_3	FUNCTION_26
0x1cf3	        0x488955e8	             mov qword [rbp - 0x18], rdx	       668	pretty.c	WHILE_3	FUNCTION_26
0x1cf7	        0x48894de0	             mov qword [rbp - 0x20], rcx	       668	pretty.c	WHILE_3	FUNCTION_26
0x1cfb	    0x488b05000000	            mov rax, qword [0x04001d42] 	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x1d02	          0x4885c0	                           test rax, rax	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x1d05	            0x752a	                           jne 0x4001d71	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x1d07	      0xbe20000000	                           mov esi, 0x20	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x1d0c	      0xbf01000000	                              mov edi, 1	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x1d11	      0xe800000000	                          call 0x4001d56	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x1d16	    0x488905000000	            mov qword [0x04001d5d], rax 	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x1d1d	    0x488b05000000	            mov rax, qword [0x04001d64] 	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x1d24	      0xbe00000000	                              mov esi, 0	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x1d29	          0x4889c7	                            mov rdi, rax	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x1d2c	      0xe800000000	                          call 0x4001d71	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x1d31	    0x488b05000000	            mov rax, qword [0x04001d78] 	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d38	          0x8b4008	                mov eax, dword [rax + 8]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d3b	            0x85c0	                           test eax, eax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d3d	            0x742d	                            je 0x4001dac	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d3f	    0x488b05000000	            mov rax, qword [0x04001d86] 	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d46	        0x488b7de0	             mov rdi, qword [rbp - 0x20]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d4a	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d4e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d52	        0x488b75f8	                mov rsi, qword [rbp - 8]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d56	          0x4989f8	                             mov r8, rdi	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d59	          0x4889c7	                            mov rdi, rax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d5c	      0xe800000000	                          call 0x4001da1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d61	            0x85c0	                           test eax, eax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d63	            0x7407	                            je 0x4001dac	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d65	      0xb801000000	                              mov eax, 1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d6a	            0xeb05	                           jmp 0x4001db1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d6c	      0xb800000000	                              mov eax, 0	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x1d71	              0xc9	                                   leave	       675	pretty.c	WHILE_3	FUNCTION_26
0x1d72	              0xc3	                                     ret	       675	pretty.c	WHILE_3	FUNCTION_26
non_ascii	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	14
0xbd9	              0x55	                                push rbp	       206	pretty.c	WHILE_3	FUNCTION_9
0xbda	          0x4889e5	                            mov rbp, rsp	       206	pretty.c	WHILE_3	FUNCTION_9
0xbdd	          0x897dfc	                mov dword [rbp - 4], edi	       206	pretty.c	WHILE_3	FUNCTION_9
0xbe0	          0x8b45fc	                mov eax, dword [rbp - 4]	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbe3	          0x83e080	                     and eax, 0xffffff80	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbe6	            0x85c0	                           test eax, eax	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbe8	            0x7506	                           jne 0x4000c30	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbea	        0x837dfc1b	               cmp dword [rbp - 4], 0x1b	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbee	            0x7507	                           jne 0x4000c37	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbf0	      0xb801000000	                              mov eax, 1	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbf5	            0xeb05	                           jmp 0x4000c3c	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbf7	      0xb800000000	                              mov eax, 0	       207	pretty.c	WHILE_3	FUNCTION_9	CALL_1
0xbfc	              0x5d	                                 pop rbp	       208	pretty.c	WHILE_3	FUNCTION_9
0xbfd	              0xc3	                                     ret	       208	pretty.c	WHILE_3	FUNCTION_9
needs_rfc822_quoting	ELSE,0:IF,1:FOR,1:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	26
0xc7e	              0x55	                                push rbp	       245	pretty.c	WHILE_3	FUNCTION_12
0xc7f	          0x4889e5	                            mov rbp, rsp	       245	pretty.c	WHILE_3	FUNCTION_12
0xc82	        0x4883ec20	                           sub rsp, 0x20	       245	pretty.c	WHILE_3	FUNCTION_12
0xc86	        0x48897de8	             mov qword [rbp - 0x18], rdi	       245	pretty.c	WHILE_3	FUNCTION_12
0xc8a	          0x8975e4	             mov dword [rbp - 0x1c], esi	       245	pretty.c	WHILE_3	FUNCTION_12
0xc8d	    0xc745fc000000	                  mov dword [rbp - 4], 0	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xc94	            0xeb29	                           jmp 0x4000cff	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xc96	          0x8b45fc	                mov eax, dword [rbp - 4]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xc99	          0x4863d0	                         movsxd rdx, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xc9c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xca0	          0x4801d0	                            add rax, rdx	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xca3	           0xfb600	                   movzx eax, byte [rax]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xca6	           0xfbec0	                           movsx eax, al	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xca9	            0x89c7	                            mov edi, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xcab	      0xe89fffffff	              call sym.is_rfc822_special	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xcb0	            0x85c0	                           test eax, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xcb2	            0x7407	                            je 0x4000cfb	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0xcb4	      0xb801000000	                              mov eax, 1	       249	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1
0xcb9	            0xeb11	                           jmp 0x4000d0c	       249	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1
0xcbb	        0x8345fc01	                  add dword [rbp - 4], 1	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xcbf	          0x8b45fc	                mov eax, dword [rbp - 4]	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xcc2	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xcc5	            0x7ccf	                            jl 0x4000cd6	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0xcc7	      0xb800000000	                              mov eax, 0	       250	pretty.c	WHILE_3	FUNCTION_12
0xccc	              0xc9	                                   leave	       251	pretty.c	WHILE_3	FUNCTION_12
0xccd	              0xc3	                                     ret	       251	pretty.c	WHILE_3	FUNCTION_12
skip_prefix	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,0:DO,1:functions,0:SWITCH,0	27
0x0	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_71
0x1	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_71
0x4	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_71
0x8	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_71
0xc	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_71
0x10	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x14	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x17	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x19	            0x7512	                           jne 0x400006d	       484	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x1b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x1f	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x23	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x26	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x2b	            0xeb27	                           jmp 0x4000094	       486	git-compat-util.h	FUNCTION_71	DO_1	IF_1
0x2d	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x31	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x35	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_71	DO_1
0x39	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x3c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x40	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x44	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_71	DO_1
0x48	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_71	DO_1
0x4b	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_71	DO_1
0x4d	            0x74c1	                            je 0x4000050	       488	git-compat-util.h	FUNCTION_71	DO_1
0x4f	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_71
0x54	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_71
0x55	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_71
st_mult	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	22
0x56	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_79
0x57	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_79
0x5a	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_79
0x5e	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_79
0x62	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_79
0x66	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x6b	            0x7430	                            je 0x40000dd	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x6d	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x74	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x79	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x7d	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x81	            0x731a	                           jae 0x40000dd	       795	git-compat-util.h	FUNCTION_79	IF_1	CALL_1
0x83	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x87	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x8b	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x8e	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x93	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x98	      0xe800000000	                          call 0x40000dd	       796	git-compat-util.h	FUNCTION_79	IF_1	CALL_2
0x9d	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_79
0xa1	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_79
0xa6	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_79
0xa7	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_79
replace_encoding_header	ELSE,1:IF,3:FOR,0:WHILE,1:CALL,13:DO,0:functions,0:SWITCH,0	110
0x19c7	              0x55	                                push rbp	       568	pretty.c	WHILE_3	FUNCTION_24
0x19c8	          0x4889e5	                            mov rbp, rsp	       568	pretty.c	WHILE_3	FUNCTION_24
0x19cb	              0x53	                                push rbx	       568	pretty.c	WHILE_3	FUNCTION_24
0x19cc	        0x4883ec58	                           sub rsp, 0x58	       568	pretty.c	WHILE_3	FUNCTION_24
0x19d0	        0x48897da8	             mov qword [rbp - 0x58], rdi	       568	pretty.c	WHILE_3	FUNCTION_24
0x19d4	        0x488975a0	             mov qword [rbp - 0x60], rsi	       568	pretty.c	WHILE_3	FUNCTION_24
0x19d8	    0x64488b042528	                mov rax, qword fs:[0x28]	       568	pretty.c	WHILE_3	FUNCTION_24
0x19e1	        0x488945e8	             mov qword [rbp - 0x18], rax	       568	pretty.c	WHILE_3	FUNCTION_24
0x19e5	            0x31c0	                            xor eax, eax	       568	pretty.c	WHILE_3	FUNCTION_24
0x19e7	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x19ef	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x19f7	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x19ff	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       571	pretty.c	WHILE_3	FUNCTION_24
0x1a03	        0x488945b8	             mov qword [rbp - 0x48], rax	       571	pretty.c	WHILE_3	FUNCTION_24
0x1a07	            0xeb35	                           jmp 0x4001a7e	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a09	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x1a0d	      0xbe0a000000	                            mov esi, 0xa	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x1a12	          0x4889c7	                            mov rdi, rax	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x1a15	      0xe800000000	                          call 0x4001a5a	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x1a1a	        0x488945b8	             mov qword [rbp - 0x48], rax	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x1a1e	      0x48837db800	               cmp qword [rbp - 0x48], 0	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a23	            0x7410	                            je 0x4001a75	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a25	      0x488345b801	               add qword [rbp - 0x48], 1	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a2a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a2e	           0xfb600	                   movzx eax, byte [rax]	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a31	            0x3c0a	                             cmp al, 0xa	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a33	            0x7509	                           jne 0x4001a7e	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a35	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       577	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a39	      0xe911010000	                           jmp 0x4001b8f	       577	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x1a3e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a42	      0xbe00000000	                              mov esi, 0	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a47	          0x4889c7	                            mov rdi, rax	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a4a	      0xe800000000	                          call 0x4001a8f	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a4f	            0x85c0	                           test eax, eax	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a51	            0x74b6	                            je 0x4001a49	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x1a53	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       579	pretty.c	WHILE_3	FUNCTION_24
0x1a57	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       579	pretty.c	WHILE_3	FUNCTION_24
0x1a5b	          0x4829c2	                            sub rdx, rax	       579	pretty.c	WHILE_3	FUNCTION_24
0x1a5e	          0x4889d0	                            mov rax, rdx	       579	pretty.c	WHILE_3	FUNCTION_24
0x1a61	        0x488945c0	             mov qword [rbp - 0x40], rax	       579	pretty.c	WHILE_3	FUNCTION_24
0x1a65	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x1a69	      0xbe0a000000	                            mov esi, 0xa	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x1a6e	          0x4889c7	                            mov rdi, rax	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x1a71	      0xe800000000	                          call 0x4001ab6	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x1a76	        0x488945b8	             mov qword [rbp - 0x48], rax	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x1a7a	      0x48837db800	               cmp qword [rbp - 0x48], 0	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x1a7f	            0x7509	                           jne 0x4001aca	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x1a81	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       582	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x1a85	      0xe9c5000000	                           jmp 0x4001b8f	       582	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x1a8a	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       583	pretty.c	WHILE_3	FUNCTION_24
0x1a8e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       583	pretty.c	WHILE_3	FUNCTION_24
0x1a92	          0x4829c2	                            sub rdx, rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x1a95	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       583	pretty.c	WHILE_3	FUNCTION_24
0x1a99	      0xb901000000	                              mov ecx, 1	       583	pretty.c	WHILE_3	FUNCTION_24
0x1a9e	          0x4829c1	                            sub rcx, rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x1aa1	          0x4889c8	                            mov rax, rcx	       583	pretty.c	WHILE_3	FUNCTION_24
0x1aa4	          0x4801d0	                            add rax, rdx	       583	pretty.c	WHILE_3	FUNCTION_24
0x1aa7	        0x488945c8	             mov qword [rbp - 0x38], rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x1aab	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1aaf	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ab2	      0xe800000000	                          call 0x4001af7	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ab7	        0x488d5801	                      lea rbx, [rax + 1]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1abb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1abf	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ac2	      0xe800000000	                          call 0x4001b07	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ac7	          0x4889c2	                            mov rdx, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1aca	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ace	        0x488d45d0	                   lea rax, [rbp - 0x30]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ad2	          0x4889d9	                            mov rcx, rbx	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ad5	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1ad8	      0xe800000000	                          call 0x4001b1d	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x1add	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x1ae1	          0x4889c7	                            mov rdi, rax	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x1ae4	      0xe800000000	                          call 0x4001b29	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x1ae9	            0x85c0	                           test eax, eax	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x1aeb	            0x7419	                            je 0x4001b46	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x1aed	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1af1	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1af5	        0x488d45d0	                   lea rax, [rbp - 0x30]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1af9	          0x4889ce	                            mov rsi, rcx	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1afc	          0x4889c7	                            mov rdi, rax	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1aff	      0xe800000000	                          call 0x4001b44	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1b04	            0xeb38	                           jmp 0x4001b7e	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x1b06	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b0a	          0x4889c7	                            mov rdi, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b0d	      0xe800000000	                          call 0x4001b52	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b12	          0x4889c1	                            mov rcx, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b15	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b19	        0x488d78f6	                    lea rdi, [rax - 0xa]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b1d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b21	        0x488d7009	                      lea rsi, [rax + 9]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b25	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b29	        0x488d45d0	                   lea rax, [rbp - 0x30]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b2d	          0x4989c8	                             mov r8, rcx	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b30	          0x4889d1	                            mov rcx, rdx	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b33	          0x4889fa	                            mov rdx, rdi	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b36	          0x4889c7	                            mov rdi, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b39	      0xe800000000	                          call 0x4001b7e	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x1b3e	        0x488d45d0	                   lea rax, [rbp - 0x30]	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x1b42	      0xbe00000000	                              mov esi, 0	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x1b47	          0x4889c7	                            mov rdi, rax	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x1b4a	      0xe800000000	                          call 0x4001b8f	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x1b4f	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b53	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b5c	            0x7405	                            je 0x4001ba3	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b5e	      0xe800000000	                          call 0x4001ba3	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b63	        0x4883c458	                           add rsp, 0x58	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b67	              0x5b	                                 pop rbx	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b68	              0x5d	                                 pop rbp	       596	pretty.c	WHILE_3	FUNCTION_24
0x1b69	              0xc3	                                     ret	       596	pretty.c	WHILE_3	FUNCTION_24
is_rfc2047_special	ELSE,0:IF,3:FOR,0:WHILE,0:CALL,4:DO,0:functions,0:SWITCH,0	60
0xdd4	              0x55	                                push rbp	       291	pretty.c	WHILE_3	FUNCTION_15
0xdd5	          0x4889e5	                            mov rbp, rsp	       291	pretty.c	WHILE_3	FUNCTION_15
0xdd8	        0x4883ec08	                              sub rsp, 8	       291	pretty.c	WHILE_3	FUNCTION_15
0xddc	            0x89f8	                            mov eax, edi	       291	pretty.c	WHILE_3	FUNCTION_15
0xdde	          0x8975f8	                mov dword [rbp - 8], esi	       291	pretty.c	WHILE_3	FUNCTION_15
0xde1	          0x8845fc	                  mov byte [rbp - 4], al	       291	pretty.c	WHILE_3	FUNCTION_15
0xde4	         0xfbe45fc	               movsx eax, byte [rbp - 4]	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xde8	            0x89c7	                            mov edi, eax	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdea	      0xe8eafdffff	                      call sym.non_ascii	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdef	            0x85c0	                           test eax, eax	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdf1	            0x750c	                           jne 0x4000e3f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdf3	        0x807dfc1f	                cmp byte [rbp - 4], 0x1f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdf7	            0x7e06	                           jle 0x4000e3f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdf9	        0x807dfc7f	                cmp byte [rbp - 4], 0x7f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdfd	            0x750a	                           jne 0x4000e49	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0xdff	      0xb801000000	                              mov eax, 1	       308	pretty.c	WHILE_3	FUNCTION_15	IF_1
0xe04	      0xe984000000	                           jmp 0x4000ecd	       308	pretty.c	WHILE_3	FUNCTION_15	IF_1
0xe09	         0xfb645fc	               movzx eax, byte [rbp - 4]	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe0d	           0xfb6c0	                           movzx eax, al	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe10	            0x4898	                                    cdqe	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe12	     0xfb680000000	                   movzx eax, byte [rax]	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe19	           0xfb6c0	                           movzx eax, al	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe1c	          0x83e001	                              and eax, 1	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe1f	            0x85c0	                           test eax, eax	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe21	            0x7512	                           jne 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe23	        0x807dfc3d	                cmp byte [rbp - 4], 0x3d	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe27	            0x740c	                            je 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe29	        0x807dfc3f	                cmp byte [rbp - 4], 0x3f	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe2d	            0x7406	                            je 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe2f	        0x807dfc5f	                cmp byte [rbp - 4], 0x5f	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe33	            0x7507	                           jne 0x4000e7c	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0xe35	      0xb801000000	                              mov eax, 1	       316	pretty.c	WHILE_3	FUNCTION_15	IF_2
0xe3a	            0xeb51	                           jmp 0x4000ecd	       316	pretty.c	WHILE_3	FUNCTION_15	IF_2
0xe3c	        0x837df801	                  cmp dword [rbp - 8], 1	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0xe40	            0x7407	                            je 0x4000e89	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0xe42	      0xb800000000	                              mov eax, 0	       336	pretty.c	WHILE_3	FUNCTION_15	IF_3
0xe47	            0xeb44	                           jmp 0x4000ecd	       336	pretty.c	WHILE_3	FUNCTION_15	IF_3
0xe49	         0xfb645fc	               movzx eax, byte [rbp - 4]	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe4d	           0xfb6c0	                           movzx eax, al	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe50	            0x4898	                                    cdqe	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe52	     0xfb680000000	                   movzx eax, byte [rax]	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe59	           0xfb6c0	                           movzx eax, al	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe5c	          0x83e006	                              and eax, 6	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe5f	            0x85c0	                           test eax, eax	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe61	            0x7525	                           jne 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe63	        0x807dfc21	                cmp byte [rbp - 4], 0x21	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe67	            0x741f	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe69	        0x807dfc2a	                cmp byte [rbp - 4], 0x2a	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe6d	            0x7419	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe6f	        0x807dfc2b	                cmp byte [rbp - 4], 0x2b	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe73	            0x7413	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe75	        0x807dfc2d	                cmp byte [rbp - 4], 0x2d	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe79	            0x740d	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe7b	        0x807dfc2f	                cmp byte [rbp - 4], 0x2f	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe7f	            0x7407	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe81	      0xb801000000	                              mov eax, 1	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe86	            0xeb05	                           jmp 0x4000ecd	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe88	      0xb800000000	                              mov eax, 0	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0xe8d	              0xc9	                                   leave	       340	pretty.c	WHILE_3	FUNCTION_15
0xe8e	              0xc3	                                     ret	       340	pretty.c	WHILE_3	FUNCTION_15
pp_handle_indent	ELSE,1:IF,1:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:SWITCH,0	36
0x487b	              0x55	                                push rbp	      1731	pretty.c	FUNCTION_49
0x487c	          0x4889e5	                            mov rbp, rsp	      1731	pretty.c	FUNCTION_49
0x487f	        0x4883ec20	                           sub rsp, 0x20	      1731	pretty.c	FUNCTION_49
0x4883	        0x48897df8	                mov qword [rbp - 8], rdi	      1731	pretty.c	FUNCTION_49
0x4887	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1731	pretty.c	FUNCTION_49
0x488b	          0x8955ec	             mov dword [rbp - 0x14], edx	      1731	pretty.c	FUNCTION_49
0x488e	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1731	pretty.c	FUNCTION_49
0x4892	        0x448945e8	             mov dword [rbp - 0x18], r8d	      1731	pretty.c	FUNCTION_49
0x4896	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1732	pretty.c	FUNCTION_49	CALL_1
0x4899	          0x4863d0	                         movsxd rdx, eax	      1732	pretty.c	FUNCTION_49	CALL_1
0x489c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1732	pretty.c	FUNCTION_49	CALL_1
0x48a0	      0xbe20000000	                           mov esi, 0x20	      1732	pretty.c	FUNCTION_49	CALL_1
0x48a5	          0x4889c7	                            mov rdi, rax	      1732	pretty.c	FUNCTION_49	CALL_1
0x48a8	      0xe800000000	                          call 0x40048ed	      1732	pretty.c	FUNCTION_49	CALL_1
0x48ad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1733	pretty.c	FUNCTION_49	IF_1
0x48b1	          0x8b4038	            mov eax, dword [rax + 0x38] 	      1733	pretty.c	FUNCTION_49	IF_1
0x48b4	            0x85c0	                           test eax, eax	      1733	pretty.c	FUNCTION_49	IF_1
0x48b6	            0x741c	                            je 0x4004914	      1733	pretty.c	FUNCTION_49	IF_1
0x48b8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1734	pretty.c	FUNCTION_49	CALL_2
0x48bc	          0x8b7038	            mov esi, dword [rax + 0x38] 	      1734	pretty.c	FUNCTION_49	CALL_2
0x48bf	          0x8b4de8	             mov ecx, dword [rbp - 0x18]	      1734	pretty.c	FUNCTION_49	CALL_2
0x48c2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1734	pretty.c	FUNCTION_49	CALL_2
0x48c6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1734	pretty.c	FUNCTION_49	CALL_2
0x48ca	          0x4889c7	                            mov rdi, rax	      1734	pretty.c	FUNCTION_49	CALL_2
0x48cd	      0xe8bcfeffff	           call sym.strbuf_add_tabexpand	      1734	pretty.c	FUNCTION_49	CALL_2
0x48d2	            0xeb19	                           jmp 0x400492d	      1737	pretty.c	FUNCTION_49
0x48d4	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1736	pretty.c	FUNCTION_49	CALL_3
0x48d7	          0x4863d0	                         movsxd rdx, eax	      1736	pretty.c	FUNCTION_49	CALL_3
0x48da	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1736	pretty.c	FUNCTION_49	CALL_3
0x48de	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1736	pretty.c	FUNCTION_49	CALL_3
0x48e2	          0x4889ce	                            mov rsi, rcx	      1736	pretty.c	FUNCTION_49	CALL_3
0x48e5	          0x4889c7	                            mov rdi, rax	      1736	pretty.c	FUNCTION_49	CALL_3
0x48e8	      0xe800000000	                          call 0x400492d	      1736	pretty.c	FUNCTION_49	CALL_3
0x48ed	              0x90	                                     nop	      1737	pretty.c	FUNCTION_49
0x48ee	              0xc9	                                   leave	      1737	pretty.c	FUNCTION_49
0x48ef	              0xc3	                                     ret	      1737	pretty.c	FUNCTION_49
userformat_find_requirements	ELSE,0:IF,2:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	36
0x3f60	              0x55	                                push rbp	      1495	pretty.c	FUNCTION_43
0x3f61	          0x4889e5	                            mov rbp, rsp	      1495	pretty.c	FUNCTION_43
0x3f64	        0x4883ec30	                           sub rsp, 0x30	      1495	pretty.c	FUNCTION_43
0x3f68	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1495	pretty.c	FUNCTION_43
0x3f6c	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1495	pretty.c	FUNCTION_43
0x3f70	    0x64488b042528	                mov rax, qword fs:[0x28]	      1495	pretty.c	FUNCTION_43
0x3f79	        0x488945f8	                mov qword [rbp - 8], rax	      1495	pretty.c	FUNCTION_43
0x3f7d	            0x31c0	                            xor eax, eax	      1495	pretty.c	FUNCTION_43
0x3f7f	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1496	pretty.c	FUNCTION_43
0x3f87	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1496	pretty.c	FUNCTION_43
0x3f8f	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1496	pretty.c	FUNCTION_43
0x3f97	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1498	pretty.c	FUNCTION_43	IF_1
0x3f9c	            0x7517	                           jne 0x4003ff5	      1498	pretty.c	FUNCTION_43	IF_1
0x3f9e	    0x488b05000000	            mov rax, qword [0x04003fe5] 	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x3fa5	          0x4885c0	                           test rax, rax	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x3fa8	            0x7435	                            je 0x400401f	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x3faa	    0x488b05000000	            mov rax, qword [0x04003ff1] 	      1501	pretty.c	FUNCTION_43	IF_1
0x3fb1	        0x488945d8	             mov qword [rbp - 0x28], rax	      1501	pretty.c	FUNCTION_43	IF_1
0x3fb5	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fb9	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fbd	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fc1	          0x4889d1	                            mov rcx, rdx	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fc4	      0xba00000000	                              mov edx, 0	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fc9	          0x4889c7	                            mov rdi, rax	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fcc	      0xe800000000	                          call 0x4004011	      1503	pretty.c	FUNCTION_43	CALL_1
0x3fd1	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1504	pretty.c	FUNCTION_43	CALL_2
0x3fd5	          0x4889c7	                            mov rdi, rax	      1504	pretty.c	FUNCTION_43	CALL_2
0x3fd8	      0xe800000000	                          call 0x400401d	      1504	pretty.c	FUNCTION_43	CALL_2
0x3fdd	            0xeb01	                           jmp 0x4004020	      1504	pretty.c	FUNCTION_43	CALL_2
0x3fdf	              0x90	                                     nop	      1500	pretty.c	FUNCTION_43	IF_1	IF_2
0x3fe0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1505	pretty.c	FUNCTION_43
0x3fe4	    0x644833042528	                xor rax, qword fs:[0x28]	      1505	pretty.c	FUNCTION_43
0x3fed	            0x7405	                            je 0x4004034	      1505	pretty.c	FUNCTION_43
0x3fef	      0xe800000000	                          call 0x4004034	      1505	pretty.c	FUNCTION_43
0x3ff4	              0xc9	                                   leave	      1505	pretty.c	FUNCTION_43
0x3ff5	              0xc3	                                     ret	      1505	pretty.c	FUNCTION_43
get_commit_format	ELSE,0:IF,5:FOR,0:WHILE,0:CALL,8:DO,0:functions,0:SWITCH,0	97
0xa35	              0x55	                                push rbp	       155	pretty.c	WHILE_3	FUNCTION_7
0xa36	          0x4889e5	                            mov rbp, rsp	       155	pretty.c	WHILE_3	FUNCTION_7
0xa39	        0x4883ec20	                           sub rsp, 0x20	       155	pretty.c	WHILE_3	FUNCTION_7
0xa3d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       155	pretty.c	WHILE_3	FUNCTION_7
0xa41	        0x488975e0	             mov qword [rbp - 0x20], rsi	       155	pretty.c	WHILE_3	FUNCTION_7
0xa45	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       158	pretty.c	WHILE_3	FUNCTION_7
0xa49	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	       158	pretty.c	WHILE_3	FUNCTION_7
0xa4d	          0x83e2f7	                     and edx, 0xfffffff7	       158	pretty.c	WHILE_3	FUNCTION_7
0xa50	          0x88507b	               mov byte [rax + 0x7b], dl	       158	pretty.c	WHILE_3	FUNCTION_7
0xa53	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa57	          0x4885c0	                           test rax, rax	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa5a	            0x7513	                           jne 0x4000aaf	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa5c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       160	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa60	    0xc780a4000000	               mov dword [rax + 0xa4], 1	       160	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa6a	      0xe92c010000	                           jmp 0x4000bdb	       161	pretty.c	WHILE_3	FUNCTION_7	IF_1
0xa6f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa73	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa77	      0xbe00000000	                              mov esi, 0	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa7c	          0x4889c7	                            mov rdi, rax	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa7f	      0xe87cf5ffff	                    call sym.skip_prefix	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa84	            0x85c0	                           test eax, eax	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa86	            0x741d	                            je 0x4000ae5	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0xa88	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xa8c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xa90	      0xba00000000	                              mov edx, 0	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xa95	          0x4889ce	                            mov rsi, rcx	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xa98	          0x4889c7	                            mov rdi, rax	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xa9b	      0xe834f9ffff	               call sym.save_user_format	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0xaa0	      0xe9f6000000	                           jmp 0x4000bdb	       165	pretty.c	WHILE_3	FUNCTION_7	IF_2
0xaa5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xaa9	           0xfb600	                   movzx eax, byte [rax]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xaac	            0x84c0	                             test al, al	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xaae	            0x742f	                            je 0x4000b1f	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xab0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xab4	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xab8	      0xbe00000000	                              mov esi, 0	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xabd	          0x4889c7	                            mov rdi, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xac0	      0xe83bf5ffff	                    call sym.skip_prefix	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xac5	            0x85c0	                           test eax, eax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xac7	            0x7516	                           jne 0x4000b1f	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xac9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xacd	      0xbe25000000	                           mov esi, 0x25	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xad2	          0x4889c7	                            mov rdi, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xad5	      0xe800000000	                          call 0x4000b1a	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xada	          0x4885c0	                           test rax, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xadd	            0x741d	                            je 0x4000b3c	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0xadf	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xae3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xae7	      0xba01000000	                              mov edx, 1	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xaec	          0x4889ce	                            mov rsi, rcx	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xaef	          0x4889c7	                            mov rdi, rax	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xaf2	      0xe8ddf8ffff	               call sym.save_user_format	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0xaf7	      0xe99f000000	                           jmp 0x4000bdb	       170	pretty.c	WHILE_3	FUNCTION_7	IF_3
0xafc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0xb00	          0x4889c7	                            mov rdi, rax	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0xb03	      0xe8f6feffff	             call sym.find_commit_format	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0xb08	        0x488945f8	                mov qword [rbp - 8], rax	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0xb0c	      0x48837df800	                  cmp qword [rbp - 8], 0	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0xb11	            0x7516	                           jne 0x4000b69	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0xb13	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0xb17	          0x4889c6	                            mov rsi, rax	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0xb1a	      0xbf00000000	                              mov edi, 0	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0xb1f	      0xb800000000	                              mov eax, 0	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0xb24	      0xe800000000	                          call 0x4000b69	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0xb29	        0x488b45f8	                mov rax, qword [rbp - 8]	       177	pretty.c	WHILE_3	FUNCTION_7
0xb2d	          0x8b5008	                mov edx, dword [rax + 8]	       177	pretty.c	WHILE_3	FUNCTION_7
0xb30	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       177	pretty.c	WHILE_3	FUNCTION_7
0xb34	    0x8990a4000000	             mov dword [rax + 0xa4], edx	       177	pretty.c	WHILE_3	FUNCTION_7
0xb3a	        0x488b45f8	                mov rax, qword [rbp - 8]	       178	pretty.c	WHILE_3	FUNCTION_7
0xb3e	          0x8b400c	              mov eax, dword [rax + 0xc]	       178	pretty.c	WHILE_3	FUNCTION_7
0xb41	          0x83e001	                              and eax, 1	       178	pretty.c	WHILE_3	FUNCTION_7
0xb44	            0x89c2	                            mov edx, eax	       178	pretty.c	WHILE_3	FUNCTION_7
0xb46	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       178	pretty.c	WHILE_3	FUNCTION_7
0xb4a	          0x83e201	                              and edx, 1	       178	pretty.c	WHILE_3	FUNCTION_7
0xb4d	    0x8d0cd5000000	                        lea ecx, [rdx*8]	       178	pretty.c	WHILE_3	FUNCTION_7
0xb54	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	       178	pretty.c	WHILE_3	FUNCTION_7
0xb58	          0x83e2f7	                     and edx, 0xfffffff7	       178	pretty.c	WHILE_3	FUNCTION_7
0xb5b	             0x9ca	                             or edx, ecx	       178	pretty.c	WHILE_3	FUNCTION_7
0xb5d	          0x88507b	               mov byte [rax + 0x7b], dl	       178	pretty.c	WHILE_3	FUNCTION_7
0xb60	        0x488b45f8	                mov rax, qword [rbp - 8]	       179	pretty.c	WHILE_3	FUNCTION_7
0xb64	          0x8b5010	            mov edx, dword [rax + 0x10] 	       179	pretty.c	WHILE_3	FUNCTION_7
0xb67	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       179	pretty.c	WHILE_3	FUNCTION_7
0xb6b	    0x89909c000000	             mov dword [rax + 0x9c], edx	       179	pretty.c	WHILE_3	FUNCTION_7
0xb71	        0x488b45f8	                mov rax, qword [rbp - 8]	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0xb75	          0x8b4008	                mov eax, dword [rax + 8]	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0xb78	          0x83f808	                              cmp eax, 8	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0xb7b	            0x751e	                           jne 0x4000bdb	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0xb7d	        0x488b45f8	                mov rax, qword [rbp - 8]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb81	          0x8b500c	              mov edx, dword [rax + 0xc]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb84	        0x488b45f8	                mov rax, qword [rbp - 8]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb88	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb8c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb90	          0x4889ce	                            mov rsi, rcx	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb93	          0x4889c7	                            mov rdi, rax	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb96	      0xe839f8ffff	               call sym.save_user_format	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0xb9b	              0xc9	                                   leave	       184	pretty.c	WHILE_3	FUNCTION_7
0xb9c	              0xc3	                                     ret	       184	pretty.c	WHILE_3	FUNCTION_7
strbuf_avail	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	18
0x13c	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_55
0x13d	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_55
0x140	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_55
0x144	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x148	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_55
0x14b	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_55
0x14e	            0x741b	                            je 0x40001ab	       141	strbuf.h	FUNCTION_55
0x150	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x154	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_55
0x157	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x15b	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_55
0x15f	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_55
0x162	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_55
0x165	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_55
0x169	            0xeb05	                           jmp 0x40001b0	       141	strbuf.h	FUNCTION_55
0x16b	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_55
0x170	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_55
0x171	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_55
save_user_format	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	24
0x3d4	              0x55	                                push rbp	        36	pretty.c	WHILE_3	FUNCTION_2
0x3d5	          0x4889e5	                            mov rbp, rsp	        36	pretty.c	WHILE_3	FUNCTION_2
0x3d8	        0x4883ec20	                           sub rsp, 0x20	        36	pretty.c	WHILE_3	FUNCTION_2
0x3dc	        0x48897df8	                mov qword [rbp - 8], rdi	        36	pretty.c	WHILE_3	FUNCTION_2
0x3e0	        0x488975f0	             mov qword [rbp - 0x10], rsi	        36	pretty.c	WHILE_3	FUNCTION_2
0x3e4	          0x8955ec	             mov dword [rbp - 0x14], edx	        36	pretty.c	WHILE_3	FUNCTION_2
0x3e7	    0x488b05000000	            mov rax, qword [0x0400042e] 	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x3ee	          0x4889c7	                            mov rdi, rax	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x3f1	      0xe800000000	                          call 0x4000436	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x3f6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x3fa	          0x4889c7	                            mov rdi, rax	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x3fd	      0xe800000000	                          call 0x4000442	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x402	    0x488905000000	            mov qword [0x04000449], rax 	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x409	        0x837dec00	               cmp dword [rbp - 0x14], 0	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x40d	            0x740e	                            je 0x400045d	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x40f	        0x488b45f8	                mov rax, qword [rbp - 8]	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x413	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x417	          0x83ca08	                               or edx, 8	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x41a	          0x88507b	               mov byte [rax + 0x7b], dl	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x41d	        0x488b45f8	                mov rax, qword [rbp - 8]	        41	pretty.c	WHILE_3	FUNCTION_2
0x421	    0xc780a4000000	               mov dword [rax + 0xa4], 8	        41	pretty.c	WHILE_3	FUNCTION_2
0x42b	              0x90	                                     nop	        42	pretty.c	WHILE_3	FUNCTION_2
0x42c	              0xc9	                                   leave	        42	pretty.c	WHILE_3	FUNCTION_2
0x42d	              0xc3	                                     ret	        42	pretty.c	WHILE_3	FUNCTION_2
match_placeholder_arg	ELSE,0:IF,3:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	45
0x2c9b	              0x55	                                push rbp	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2c9c	          0x4889e5	                            mov rbp, rsp	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2c9f	        0x4883ec30	                           sub rsp, 0x30	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2ca3	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2ca7	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2cab	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2caf	    0x64488b042528	                mov rax, qword fs:[0x28]	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2cb8	        0x488945f8	                mov qword [rbp - 8], rax	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2cbc	            0x31c0	                            xor eax, eax	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2cbe	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cc2	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cc6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cca	          0x4889ce	                            mov rsi, rcx	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2ccd	          0x4889c7	                            mov rdi, rax	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cd0	      0xe82bd3ffff	                    call sym.skip_prefix	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cd5	            0x85c0	                           test eax, eax	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cd7	            0x7507	                           jne 0x4002d20	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x2cd9	      0xb800000000	                              mov eax, 0	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x2cde	            0xeb43	                           jmp 0x4002d63	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x2ce0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2ce4	           0xfb600	                   movzx eax, byte [rax]	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2ce7	            0x3c2c	                            cmp al, 0x2c	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2ce9	            0x7516	                           jne 0x4002d41	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2ceb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2cef	        0x488d5001	                      lea rdx, [rax + 1]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2cf3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2cf7	          0x488910	                    mov qword [rax], rdx	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2cfa	      0xb801000000	                              mov eax, 1	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2cff	            0xeb22	                           jmp 0x4002d63	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x2d01	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d05	           0xfb600	                   movzx eax, byte [rax]	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d08	            0x3c29	                            cmp al, 0x29	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d0a	            0x7512	                           jne 0x4002d5e	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d0c	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d10	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d14	          0x488910	                    mov qword [rax], rdx	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d17	      0xb801000000	                              mov eax, 1	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d1c	            0xeb05	                           jmp 0x4002d63	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x2d1e	      0xb800000000	                              mov eax, 0	      1074	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d23	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d27	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d30	            0x7405	                            je 0x4002d77	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d32	      0xe800000000	                          call 0x4002d77	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d37	              0xc9	                                   leave	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x2d38	              0xc3	                                     ret	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
format_person_part	ELSE,0:IF,7:FOR,0:WHILE,0:CALL,19:DO,0:functions,0:SWITCH,1	199
0x1d73	              0x55	                                push rbp	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d74	          0x4889e5	                            mov rbp, rsp	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d77	    0x4881eca00000	                           sub rsp, 0xa0	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d7e	    0x4889bd78ffff	             mov qword [rbp - 0x88], rdi	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d85	            0x89f0	                            mov eax, esi	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d87	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d8e	    0x898d70ffffff	             mov dword [rbp - 0x90], ecx	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d94	    0x4c898560ffff	              mov qword [rbp - 0xa0], r8	       680	pretty.c	WHILE_3	FUNCTION_27
0x1d9b	    0x888574ffffff	               mov byte [rbp - 0x8c], al	       680	pretty.c	WHILE_3	FUNCTION_27
0x1da1	    0x64488b042528	                mov rax, qword fs:[0x28]	       680	pretty.c	WHILE_3	FUNCTION_27
0x1daa	        0x488945f8	                mov qword [rbp - 8], rax	       680	pretty.c	WHILE_3	FUNCTION_27
0x1dae	            0x31c0	                            xor eax, eax	       680	pretty.c	WHILE_3	FUNCTION_27
0x1db0	    0xc7458c020000	               mov dword [rbp - 0x74], 2	       682	pretty.c	WHILE_3	FUNCTION_27
0x1db7	    0x8b9570ffffff	             mov edx, dword [rbp - 0x90]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dbd	    0x488b8d68ffff	             mov rcx, qword [rbp - 0x98]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dc4	        0x488d45b0	                   lea rax, [rbp - 0x50]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dc8	          0x4889ce	                            mov rsi, rcx	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dcb	          0x4889c7	                            mov rdi, rax	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dce	      0xe800000000	                          call 0x4001e13	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dd3	            0x85c0	                           test eax, eax	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1dd5	     0xf8857020000	                            js 0x4002072	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x1ddb	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       690	pretty.c	WHILE_3	FUNCTION_27
0x1ddf	        0x48894590	             mov qword [rbp - 0x70], rax	       690	pretty.c	WHILE_3	FUNCTION_27
0x1de3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       691	pretty.c	WHILE_3	FUNCTION_27
0x1de7	          0x4889c2	                            mov rdx, rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x1dea	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       691	pretty.c	WHILE_3	FUNCTION_27
0x1dee	          0x4829c2	                            sub rdx, rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x1df1	          0x4889d0	                            mov rax, rdx	       691	pretty.c	WHILE_3	FUNCTION_27
0x1df4	        0x488945a8	             mov qword [rbp - 0x58], rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x1df8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       692	pretty.c	WHILE_3	FUNCTION_27
0x1dfc	        0x48894598	             mov qword [rbp - 0x68], rax	       692	pretty.c	WHILE_3	FUNCTION_27
0x1e00	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e04	          0x4889c2	                            mov rdx, rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e07	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e0b	          0x4829c2	                            sub rdx, rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e0e	          0x4889d0	                            mov rax, rdx	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e11	        0x488945a0	             mov qword [rbp - 0x60], rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x1e15	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x4e 	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x1e1c	            0x7409	                            je 0x4001e67	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x1e1e	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x45 	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x1e25	            0x7518	                           jne 0x4001e7f	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x1e27	        0x488d4da8	                   lea rcx, [rbp - 0x58]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e2b	        0x488d5590	                   lea rdx, [rbp - 0x70]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e2f	        0x488d75a0	                   lea rsi, [rbp - 0x60]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e33	        0x488d4598	                   lea rax, [rbp - 0x68]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e37	          0x4889c7	                            mov rdi, rax	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e3a	      0xe8a4feffff	                   call sym.mailmap_name	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x1e3f	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x6e 	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e46	            0x7409	                            je 0x4001e91	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e48	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x4e 	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e4f	            0x7524	                           jne 0x4001eb5	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e51	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e55	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e59	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e60	          0x4889ce	                            mov rsi, rcx	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e63	          0x4889c7	                            mov rdi, rax	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e66	      0xe800000000	                          call 0x4001eab	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x1e6b	          0x8b458c	             mov eax, dword [rbp - 0x74]	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e6e	            0x4898	                                    cdqe	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e70	      0xe90c020000	                           jmp 0x40020c1	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x1e75	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x65 	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1e7c	            0x7409	                            je 0x4001ec7	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1e7e	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x45 	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1e85	            0x7524	                           jne 0x4001eeb	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1e87	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1e8b	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1e8f	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1e96	          0x4889ce	                            mov rsi, rcx	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1e99	          0x4889c7	                            mov rdi, rax	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1e9c	      0xe800000000	                          call 0x4001ee1	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x1ea1	          0x8b458c	             mov eax, dword [rbp - 0x74]	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1ea4	            0x4898	                                    cdqe	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1ea6	      0xe9d6010000	                           jmp 0x40020c1	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x1eab	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x1eaf	          0x4885c0	                           test rax, rax	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x1eb2	     0xf847d010000	                            je 0x4002075	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x1eb8	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x74 	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x1ebf	            0x7534	                           jne 0x4001f35	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x1ec1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ec5	          0x4889c2	                            mov rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ec8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ecc	          0x4829c2	                            sub rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ecf	          0x4889d0	                            mov rax, rdx	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ed2	          0x4889c2	                            mov rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ed5	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ed9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ee0	          0x4889ce	                            mov rsi, rcx	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ee3	          0x4889c7	                            mov rdi, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1ee6	      0xe800000000	                          call 0x4001f2b	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x1eeb	          0x8b458c	             mov eax, dword [rbp - 0x74]	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x1eee	            0x4898	                                    cdqe	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x1ef0	      0xe98c010000	                           jmp 0x40020c1	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x1ef5	     0xfbe8574ffff	            movsx eax, byte [rbp - 0x8c]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1efc	          0x83e844	                           sub eax, 0x44	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1eff	          0x83f82e	                           cmp eax, 0x2e	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f02	     0xf872e010000	                            ja 0x4002076	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f08	            0x89c0	                            mov eax, eax	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f0a	    0x488b04c50000	                  mov rax, qword [rax*8]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f12	            0xffe0	                                 jmp rax	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f14	    0x488b9560ffff	             mov rdx, qword [rbp - 0xa0]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f1b	        0x488d45b0	                   lea rax, [rbp - 0x50]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f1f	          0x4889d6	                            mov rsi, rdx	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f22	          0x4889c7	                            mov rdi, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f25	      0xe800000000	                          call 0x4001f6a	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f2a	          0x4889c2	                            mov rdx, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f2d	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f34	          0x4889d6	                            mov rsi, rdx	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f37	          0x4889c7	                            mov rdi, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f3a	      0xe83be3ffff	                  call sym.strbuf_addstr	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x1f3f	          0x8b458c	             mov eax, dword [rbp - 0x74]	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f42	            0x4898	                                    cdqe	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f44	      0xe938010000	                           jmp 0x40020c1	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f49	      0xbf05000000	                              mov edi, 5	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f4e	      0xe800000000	                          call 0x4001f93	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f53	          0x4889c2	                            mov rdx, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f56	        0x488d45b0	                   lea rax, [rbp - 0x50]	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f5a	          0x4889d6	                            mov rsi, rdx	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f5d	          0x4889c7	                            mov rdi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f60	      0xe800000000	                          call 0x4001fa5	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f65	          0x4889c2	                            mov rdx, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f68	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f6f	          0x4889d6	                            mov rsi, rdx	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f72	          0x4889c7	                            mov rdi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f75	      0xe800e3ffff	                  call sym.strbuf_addstr	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x1f7a	          0x8b458c	             mov eax, dword [rbp - 0x74]	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f7d	            0x4898	                                    cdqe	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f7f	      0xe9fd000000	                           jmp 0x40020c1	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1f84	      0xbf01000000	                              mov edi, 1	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f89	      0xe800000000	                          call 0x4001fce	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f8e	          0x4889c2	                            mov rdx, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f91	        0x488d45b0	                   lea rax, [rbp - 0x50]	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f95	          0x4889d6	                            mov rsi, rdx	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f98	          0x4889c7	                            mov rdi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1f9b	      0xe800000000	                          call 0x4001fe0	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1fa0	          0x4889c2	                            mov rdx, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1fa3	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1faa	          0x4889d6	                            mov rsi, rdx	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1fad	          0x4889c7	                            mov rdi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1fb0	      0xe8c5e2ffff	                  call sym.strbuf_addstr	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x1fb5	          0x8b458c	             mov eax, dword [rbp - 0x74]	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1fb8	            0x4898	                                    cdqe	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1fba	      0xe9c2000000	                           jmp 0x40020c1	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1fbf	      0xbf03000000	                              mov edi, 3	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fc4	      0xe800000000	                          call 0x4002009	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fc9	          0x4889c2	                            mov rdx, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fcc	        0x488d45b0	                   lea rax, [rbp - 0x50]	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fd0	          0x4889d6	                            mov rsi, rdx	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fd3	          0x4889c7	                            mov rdi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fd6	      0xe800000000	                          call 0x400201b	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fdb	          0x4889c2	                            mov rdx, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fde	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fe5	          0x4889d6	                            mov rsi, rdx	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1fe8	          0x4889c7	                            mov rdi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1feb	      0xe88ae2ffff	                  call sym.strbuf_addstr	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x1ff0	          0x8b458c	             mov eax, dword [rbp - 0x74]	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1ff3	            0x4898	                                    cdqe	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1ff5	      0xe987000000	                           jmp 0x40020c1	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x1ffa	      0xbf04000000	                              mov edi, 4	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x1fff	      0xe800000000	                          call 0x4002044	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2004	          0x4889c2	                            mov rdx, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2007	        0x488d45b0	                   lea rax, [rbp - 0x50]	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x200b	          0x4889d6	                            mov rsi, rdx	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x200e	          0x4889c7	                            mov rdi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2011	      0xe800000000	                          call 0x4002056	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2016	          0x4889c2	                            mov rdx, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2019	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2020	          0x4889d6	                            mov rsi, rdx	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2023	          0x4889c7	                            mov rdi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x2026	      0xe84fe2ffff	                  call sym.strbuf_addstr	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x202b	          0x8b458c	             mov eax, dword [rbp - 0x74]	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x202e	            0x4898	                                    cdqe	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x2030	            0xeb4f	                           jmp 0x40020c1	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x2032	              0x90	                                     nop	       688	pretty.c	WHILE_3	FUNCTION_27	IF_1
0x2033	            0xeb01	                           jmp 0x4002076	       688	pretty.c	WHILE_3	FUNCTION_27	IF_1
0x2035	              0x90	                                     nop	       707	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x2036	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x6e 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x203d	            0x7436	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x203f	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x65 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2046	            0x742d	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2048	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x74 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x204f	            0x7424	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2051	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x64 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2058	            0x741b	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x205a	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x44 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2061	            0x7412	                            je 0x40020b5	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2063	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x72 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x206a	            0x7409	                            je 0x40020b5	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x206c	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x69 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2073	            0x7507	                           jne 0x40020bc	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2075	          0x8b458c	             mov eax, dword [rbp - 0x74]	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x2078	            0x4898	                                    cdqe	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x207a	            0xeb05	                           jmp 0x40020c1	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x207c	      0xb800000000	                              mov eax, 0	       742	pretty.c	WHILE_3	FUNCTION_27
0x2081	        0x488b4df8	                mov rcx, qword [rbp - 8]	       743	pretty.c	WHILE_3	FUNCTION_27
0x2085	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       743	pretty.c	WHILE_3	FUNCTION_27
0x208e	            0x7405	                            je 0x40020d5	       743	pretty.c	WHILE_3	FUNCTION_27
0x2090	      0xe800000000	                          call 0x40020d5	       743	pretty.c	WHILE_3	FUNCTION_27
0x2095	              0xc9	                                   leave	       743	pretty.c	WHILE_3	FUNCTION_27
0x2096	              0xc3	                                     ret	       743	pretty.c	WHILE_3	FUNCTION_27
istitlechar	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	25
0x2241	              0x55	                                push rbp	       817	pretty.c	WHILE_3	FUNCTION_29
0x2242	          0x4889e5	                            mov rbp, rsp	       817	pretty.c	WHILE_3	FUNCTION_29
0x2245	            0x89f8	                            mov eax, edi	       817	pretty.c	WHILE_3	FUNCTION_29
0x2247	          0x8845fc	                  mov byte [rbp - 4], al	       817	pretty.c	WHILE_3	FUNCTION_29
0x224a	        0x807dfc60	                cmp byte [rbp - 4], 0x60	       819	pretty.c	WHILE_3	FUNCTION_29
0x224e	            0x7e06	                           jle 0x4002296	       819	pretty.c	WHILE_3	FUNCTION_29
0x2250	        0x807dfc7a	                cmp byte [rbp - 4], 0x7a	       818	pretty.c	WHILE_3	FUNCTION_29
0x2254	            0x7e24	                           jle 0x40022ba	       818	pretty.c	WHILE_3	FUNCTION_29
0x2256	        0x807dfc40	                cmp byte [rbp - 4], 0x40	       818	pretty.c	WHILE_3	FUNCTION_29
0x225a	            0x7e06	                           jle 0x40022a2	       818	pretty.c	WHILE_3	FUNCTION_29
0x225c	        0x807dfc5a	                cmp byte [rbp - 4], 0x5a	       818	pretty.c	WHILE_3	FUNCTION_29
0x2260	            0x7e18	                           jle 0x40022ba	       818	pretty.c	WHILE_3	FUNCTION_29
0x2262	        0x807dfc2f	                cmp byte [rbp - 4], 0x2f	       818	pretty.c	WHILE_3	FUNCTION_29
0x2266	            0x7e06	                           jle 0x40022ae	       818	pretty.c	WHILE_3	FUNCTION_29
0x2268	        0x807dfc39	                cmp byte [rbp - 4], 0x39	       819	pretty.c	WHILE_3	FUNCTION_29
0x226c	            0x7e0c	                           jle 0x40022ba	       819	pretty.c	WHILE_3	FUNCTION_29
0x226e	        0x807dfc2e	                cmp byte [rbp - 4], 0x2e	       819	pretty.c	WHILE_3	FUNCTION_29
0x2272	            0x7406	                            je 0x40022ba	       819	pretty.c	WHILE_3	FUNCTION_29
0x2274	        0x807dfc5f	                cmp byte [rbp - 4], 0x5f	       819	pretty.c	WHILE_3	FUNCTION_29
0x2278	            0x7507	                           jne 0x40022c1	       819	pretty.c	WHILE_3	FUNCTION_29
0x227a	      0xb801000000	                              mov eax, 1	       819	pretty.c	WHILE_3	FUNCTION_29
0x227f	            0xeb05	                           jmp 0x40022c6	       819	pretty.c	WHILE_3	FUNCTION_29
0x2281	      0xb800000000	                              mov eax, 0	       819	pretty.c	WHILE_3	FUNCTION_29
0x2286	              0x5d	                                 pop rbp	       820	pretty.c	WHILE_3	FUNCTION_29
0x2287	              0xc3	                                     ret	       820	pretty.c	WHILE_3	FUNCTION_29
strbuf_wrap	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,4:DO,0:functions,0:SWITCH,0	52
0x2564	              0x55	                                push rbp	       891	pretty.c	WHILE_3	FUNCTION_33
0x2565	          0x4889e5	                            mov rbp, rsp	       891	pretty.c	WHILE_3	FUNCTION_33
0x2568	        0x4883ec50	                           sub rsp, 0x50	       891	pretty.c	WHILE_3	FUNCTION_33
0x256c	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       891	pretty.c	WHILE_3	FUNCTION_33
0x2570	        0x488975d0	             mov qword [rbp - 0x30], rsi	       891	pretty.c	WHILE_3	FUNCTION_33
0x2574	        0x488955c8	             mov qword [rbp - 0x38], rdx	       891	pretty.c	WHILE_3	FUNCTION_33
0x2578	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       891	pretty.c	WHILE_3	FUNCTION_33
0x257c	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       891	pretty.c	WHILE_3	FUNCTION_33
0x2580	    0x64488b042528	                mov rax, qword fs:[0x28]	       891	pretty.c	WHILE_3	FUNCTION_33
0x2589	        0x488945f8	                mov qword [rbp - 8], rax	       891	pretty.c	WHILE_3	FUNCTION_33
0x258d	            0x31c0	                            xor eax, eax	       891	pretty.c	WHILE_3	FUNCTION_33
0x258f	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x2597	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x259f	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x25a7	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x25ac	            0x741b	                            je 0x4002609	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x25ae	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25b2	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25b6	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25ba	        0x488d45e0	                   lea rax, [rbp - 0x20]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25be	          0x4889ce	                            mov rsi, rcx	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25c1	          0x4889c7	                            mov rdi, rax	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25c4	      0xe800000000	                          call 0x4002609	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x25c9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25cd	          0x4189c0	                            mov r8d, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25d0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25d4	            0x89c1	                            mov ecx, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25d6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25da	            0x89c7	                            mov edi, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25dc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25e0	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25e4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25e8	        0x488d3402	                    lea rsi, [rdx + rax]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25ec	        0x488d45e0	                   lea rax, [rbp - 0x20]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25f0	            0x89fa	                            mov edx, edi	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25f2	          0x4889c7	                            mov rdi, rax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25f5	      0xe800000000	                          call 0x400263a	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x25fa	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x25fe	        0x488d45e0	                   lea rax, [rbp - 0x20]	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x2602	          0x4889d6	                            mov rsi, rdx	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x2605	          0x4889c7	                            mov rdi, rax	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x2608	      0xe89bdaffff	                    call sym.strbuf_swap	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x260d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x2611	          0x4889c7	                            mov rdi, rax	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x2614	      0xe800000000	                          call 0x4002659	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x2619	              0x90	                                     nop	       900	pretty.c	WHILE_3	FUNCTION_33
0x261a	        0x488b45f8	                mov rax, qword [rbp - 8]	       900	pretty.c	WHILE_3	FUNCTION_33
0x261e	    0x644833042528	                xor rax, qword fs:[0x28]	       900	pretty.c	WHILE_3	FUNCTION_33
0x2627	            0x7405	                            je 0x400266e	       900	pretty.c	WHILE_3	FUNCTION_33
0x2629	      0xe800000000	                          call 0x400266e	       900	pretty.c	WHILE_3	FUNCTION_33
0x262e	              0xc9	                                   leave	       900	pretty.c	WHILE_3	FUNCTION_33
0x262f	              0xc3	                                     ret	       900	pretty.c	WHILE_3	FUNCTION_33
rewrap_message_tail	ELSE,0:IF,2:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	55
0x2630	              0x55	                                push rbp	       906	pretty.c	WHILE_3	FUNCTION_34
0x2631	          0x4889e5	                            mov rbp, rsp	       906	pretty.c	WHILE_3	FUNCTION_34
0x2634	        0x4883ec30	                           sub rsp, 0x30	       906	pretty.c	WHILE_3	FUNCTION_34
0x2638	        0x48897df8	                mov qword [rbp - 8], rdi	       906	pretty.c	WHILE_3	FUNCTION_34
0x263c	        0x488975f0	             mov qword [rbp - 0x10], rsi	       906	pretty.c	WHILE_3	FUNCTION_34
0x2640	        0x488955e8	             mov qword [rbp - 0x18], rdx	       906	pretty.c	WHILE_3	FUNCTION_34
0x2644	        0x48894de0	             mov qword [rbp - 0x20], rcx	       906	pretty.c	WHILE_3	FUNCTION_34
0x2648	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       906	pretty.c	WHILE_3	FUNCTION_34
0x264c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2650	        0x488b4060	            mov rax, qword [rax + 0x60] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2654	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2658	            0x7520	                           jne 0x40026ba	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x265a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x265e	        0x488b4068	            mov rax, qword [rax + 0x68] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2662	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2666	            0x7512	                           jne 0x40026ba	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2668	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       908	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x266c	        0x488b4070	            mov rax, qword [rax + 0x70] 	       908	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2670	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x2674	     0xf8483000000	                            je 0x400273d	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x267a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x267e	    0x488b90b80000	            mov rdx, qword [rax + 0xb8] 	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x2685	        0x488b45f8	                mov rax, qword [rbp - 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x2689	        0x488b4008	                mov rax, qword [rax + 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x268d	          0x4839c2	                            cmp rdx, rax	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x2690	            0x7332	                           jae 0x4002704	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x2692	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x2696	        0x488b7870	            mov rdi, qword [rax + 0x70] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x269a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x269e	        0x488b4868	            mov rcx, qword [rax + 0x68] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26a2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26a6	        0x488b5060	            mov rdx, qword [rax + 0x60] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26aa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26ae	    0x488bb0b80000	            mov rsi, qword [rax + 0xb8] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26b5	        0x488b45f8	                mov rax, qword [rbp - 8]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26b9	          0x4989f8	                             mov r8, rdi	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26bc	          0x4889c7	                            mov rdi, rax	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26bf	      0xe8a0feffff	                    call sym.strbuf_wrap	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x26c4	        0x488b45f8	                mov rax, qword [rbp - 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x26c8	        0x488b5008	                mov rdx, qword [rax + 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x26cc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       912	pretty.c	WHILE_3	FUNCTION_34
0x26d0	    0x488990b80000	             mov qword [rax + 0xb8], rdx	       912	pretty.c	WHILE_3	FUNCTION_34
0x26d7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       913	pretty.c	WHILE_3	FUNCTION_34
0x26db	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       913	pretty.c	WHILE_3	FUNCTION_34
0x26df	        0x48895060	             mov qword [rax + 0x60], rdx	       913	pretty.c	WHILE_3	FUNCTION_34
0x26e3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       914	pretty.c	WHILE_3	FUNCTION_34
0x26e7	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       914	pretty.c	WHILE_3	FUNCTION_34
0x26eb	        0x48895068	             mov qword [rax + 0x68], rdx	       914	pretty.c	WHILE_3	FUNCTION_34
0x26ef	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       915	pretty.c	WHILE_3	FUNCTION_34
0x26f3	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       915	pretty.c	WHILE_3	FUNCTION_34
0x26f7	        0x48895070	             mov qword [rax + 0x70], rdx	       915	pretty.c	WHILE_3	FUNCTION_34
0x26fb	            0xeb01	                           jmp 0x400273e	       915	pretty.c	WHILE_3	FUNCTION_34
0x26fd	              0x90	                                     nop	       909	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x26fe	              0xc9	                                   leave	       916	pretty.c	WHILE_3	FUNCTION_34
0x26ff	              0xc3	                                     ret	       916	pretty.c	WHILE_3	FUNCTION_34
pp_utf8_width	ELSE,0:IF,1:FOR,0:WHILE,1:CALL,1:DO,0:functions,0:SWITCH,0	39
0x4703	              0x55	                                push rbp	      1674	pretty.c	FUNCTION_47
0x4704	          0x4889e5	                            mov rbp, rsp	      1674	pretty.c	FUNCTION_47
0x4707	        0x4883ec30	                           sub rsp, 0x30	      1674	pretty.c	FUNCTION_47
0x470b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1674	pretty.c	FUNCTION_47
0x470f	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1674	pretty.c	FUNCTION_47
0x4713	    0x64488b042528	                mov rax, qword fs:[0x28]	      1674	pretty.c	FUNCTION_47
0x471c	        0x488945f8	                mov qword [rbp - 8], rax	      1674	pretty.c	FUNCTION_47
0x4720	            0x31c0	                            xor eax, eax	      1674	pretty.c	FUNCTION_47
0x4722	    0xc745e8000000	               mov dword [rbp - 0x18], 0	      1675	pretty.c	FUNCTION_47
0x4729	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1676	pretty.c	FUNCTION_47
0x472d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1676	pretty.c	FUNCTION_47
0x4731	          0x4829d0	                            sub rax, rdx	      1676	pretty.c	FUNCTION_47
0x4734	        0x488945f0	             mov qword [rbp - 0x10], rax	      1676	pretty.c	FUNCTION_47
0x4738	            0xeb32	                           jmp 0x40047ac	      1678	pretty.c	FUNCTION_47	WHILE_1
0x473a	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x473e	        0x488d45d8	                   lea rax, [rbp - 0x28]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4742	          0x4889d6	                            mov rsi, rdx	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4745	          0x4889c7	                            mov rdi, rax	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4748	      0xe800000000	                          call 0x400478d	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x474d	          0x8945ec	             mov dword [rbp - 0x14], eax	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4750	        0x837dec00	               cmp dword [rbp - 0x14], 0	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4754	            0x7809	                            js 0x400479f	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4756	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x475a	          0x4885c0	                           test rax, rax	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x475d	            0x7507	                           jne 0x40047a6	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x475f	      0xb8ffffffff	                     mov eax, 0xffffffff	      1681	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4764	            0xeb12	                           jmp 0x40047b8	      1681	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4766	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1682	pretty.c	FUNCTION_47	WHILE_1
0x4769	           0x145e8	             add dword [rbp - 0x18], eax	      1682	pretty.c	FUNCTION_47	WHILE_1
0x476c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4770	          0x4885c0	                           test rax, rax	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4773	            0x75c5	                           jne 0x400477a	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4775	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1684	pretty.c	FUNCTION_47
0x4778	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1685	pretty.c	FUNCTION_47
0x477c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1685	pretty.c	FUNCTION_47
0x4785	            0x7405	                            je 0x40047cc	      1685	pretty.c	FUNCTION_47
0x4787	      0xe800000000	                          call 0x40047cc	      1685	pretty.c	FUNCTION_47
0x478c	              0xc9	                                   leave	      1685	pretty.c	FUNCTION_47
0x478d	              0xc3	                                     ret	      1685	pretty.c	FUNCTION_47
last_line_length	ELSE,0:IF,1:FOR,1:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	30
0xcce	              0x55	                                push rbp	       254	pretty.c	WHILE_3	FUNCTION_13
0xccf	          0x4889e5	                            mov rbp, rsp	       254	pretty.c	WHILE_3	FUNCTION_13
0xcd2	        0x48897de8	             mov qword [rbp - 0x18], rdi	       254	pretty.c	WHILE_3	FUNCTION_13
0xcd6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xcda	        0x488b4008	                mov rax, qword [rax + 8]	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xcde	          0x83e801	                              sub eax, 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xce1	          0x8945fc	                mov dword [rbp - 4], eax	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xce4	            0xeb1b	                           jmp 0x4000d41	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xce6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcea	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcee	          0x8b45fc	                mov eax, dword [rbp - 4]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcf1	            0x4898	                                    cdqe	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcf3	          0x4801d0	                            add rax, rdx	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcf6	           0xfb600	                   movzx eax, byte [rax]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcf9	            0x3c0a	                             cmp al, 0xa	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcfb	            0x740c	                            je 0x4000d49	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xcfd	        0x836dfc01	                  sub dword [rbp - 4], 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xd01	        0x837dfc00	                  cmp dword [rbp - 4], 0	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xd05	            0x79df	                           jns 0x4000d26	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xd07	            0xeb01	                           jmp 0x4000d4a	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0xd09	              0x90	                                     nop	       260	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0xd0a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       261	pretty.c	WHILE_3	FUNCTION_13
0xd0e	        0x488b4008	                mov rax, qword [rax + 8]	       261	pretty.c	WHILE_3	FUNCTION_13
0xd12	            0x89c2	                            mov edx, eax	       261	pretty.c	WHILE_3	FUNCTION_13
0xd14	          0x8b45fc	                mov eax, dword [rbp - 4]	       261	pretty.c	WHILE_3	FUNCTION_13
0xd17	            0x29c2	                            sub edx, eax	       261	pretty.c	WHILE_3	FUNCTION_13
0xd19	            0x89d0	                            mov eax, edx	       261	pretty.c	WHILE_3	FUNCTION_13
0xd1b	          0x83e801	                              sub eax, 1	       261	pretty.c	WHILE_3	FUNCTION_13
0xd1e	              0x5d	                                 pop rbp	       262	pretty.c	WHILE_3	FUNCTION_13
0xd1f	              0xc3	                                     ret	       262	pretty.c	WHILE_3	FUNCTION_13
skip_blank_lines	ELSE,0:IF,2:FOR,1:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	36
0x17df	              0x55	                                push rbp	       524	pretty.c	WHILE_3	FUNCTION_21
0x17e0	          0x4889e5	                            mov rbp, rsp	       524	pretty.c	WHILE_3	FUNCTION_21
0x17e3	        0x4883ec20	                           sub rsp, 0x20	       524	pretty.c	WHILE_3	FUNCTION_21
0x17e7	        0x48897de8	             mov qword [rbp - 0x18], rdi	       524	pretty.c	WHILE_3	FUNCTION_21
0x17eb	    0x64488b042528	                mov rax, qword fs:[0x28]	       524	pretty.c	WHILE_3	FUNCTION_21
0x17f4	        0x488945f8	                mov qword [rbp - 8], rax	       524	pretty.c	WHILE_3	FUNCTION_21
0x17f8	            0x31c0	                            xor eax, eax	       524	pretty.c	WHILE_3	FUNCTION_21
0x17fa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x17fe	          0x4889c7	                            mov rdi, rax	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x1801	      0xe897f3ffff	                   call sym.get_one_line	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x1806	          0x8945f4	              mov dword [rbp - 0xc], eax	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x1809	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       527	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x180c	          0x8945f0	             mov dword [rbp - 0x10], eax	       527	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x180f	        0x837df400	                cmp dword [rbp - 0xc], 0	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x1813	            0x7422	                            je 0x4001877	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x1815	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x1819	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x181d	          0x4889d6	                            mov rsi, rdx	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x1820	          0x4889c7	                            mov rdi, rax	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x1823	      0xe858ffffff	                  call sym.is_blank_line	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x1828	            0x85c0	                           test eax, eax	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x182a	            0x740e	                            je 0x400187a	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x182c	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x182f	            0x4898	                                    cdqe	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x1831	        0x480145e8	            add qword [rbp - 0x18], rax 	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x1835	            0xebc3	                           jmp 0x400183a	       533	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x1837	              0x90	                                     nop	       529	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x1838	            0xeb01	                           jmp 0x400187b	       529	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x183a	              0x90	                                     nop	       531	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2
0x183b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       534	pretty.c	WHILE_3	FUNCTION_21
0x183f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       535	pretty.c	WHILE_3	FUNCTION_21
0x1843	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       535	pretty.c	WHILE_3	FUNCTION_21
0x184c	            0x7405	                            je 0x4001893	       535	pretty.c	WHILE_3	FUNCTION_21
0x184e	      0xe800000000	                          call 0x4001893	       535	pretty.c	WHILE_3	FUNCTION_21
0x1853	              0xc9	                                   leave	       535	pretty.c	WHILE_3	FUNCTION_21
0x1854	              0xc3	                                     ret	       535	pretty.c	WHILE_3	FUNCTION_21
pp_remainder	ELSE,2:IF,7:FOR,1:WHILE,0:CALL,9:DO,0:functions,0:SWITCH,0	114
0x493f	              0x55	                                push rbp	      1753	pretty.c	FUNCTION_51
0x4940	          0x4889e5	                            mov rbp, rsp	      1753	pretty.c	FUNCTION_51
0x4943	        0x4883ec40	                           sub rsp, 0x40	      1753	pretty.c	FUNCTION_51
0x4947	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1753	pretty.c	FUNCTION_51
0x494b	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1753	pretty.c	FUNCTION_51
0x494f	        0x488955c8	             mov qword [rbp - 0x38], rdx	      1753	pretty.c	FUNCTION_51
0x4953	          0x894dc4	             mov dword [rbp - 0x3c], ecx	      1753	pretty.c	FUNCTION_51
0x4956	    0x64488b042528	                mov rax, qword fs:[0x28]	      1753	pretty.c	FUNCTION_51
0x495f	        0x488945f8	                mov qword [rbp - 8], rax	      1753	pretty.c	FUNCTION_51
0x4963	            0x31c0	                            xor eax, eax	      1753	pretty.c	FUNCTION_51
0x4965	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      1754	pretty.c	FUNCTION_51
0x496c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1756	pretty.c	FUNCTION_51	FOR_1
0x4970	          0x488b00	                    mov rax, qword [rax]	      1756	pretty.c	FUNCTION_51	FOR_1
0x4973	        0x488945f0	             mov qword [rbp - 0x10], rax	      1756	pretty.c	FUNCTION_51	FOR_1
0x4977	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x497b	          0x4889c7	                            mov rdi, rax	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x497e	      0xe81ac2ffff	                   call sym.get_one_line	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x4983	          0x8945e8	             mov dword [rbp - 0x18], eax	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x4986	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1758	pretty.c	FUNCTION_51	FOR_1
0x498a	          0x488b10	                    mov rdx, qword [rax]	      1758	pretty.c	FUNCTION_51	FOR_1
0x498d	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1758	pretty.c	FUNCTION_51	FOR_1
0x4990	            0x4898	                                    cdqe	      1758	pretty.c	FUNCTION_51	FOR_1
0x4992	          0x4801c2	                            add rdx, rax	      1758	pretty.c	FUNCTION_51	FOR_1
0x4995	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1758	pretty.c	FUNCTION_51	FOR_1
0x4999	          0x488910	                    mov qword [rax], rdx	      1758	pretty.c	FUNCTION_51	FOR_1
0x499c	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x499f	            0x85c0	                           test eax, eax	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x49a1	     0xf8400010000	                            je 0x4004ae7	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x49a7	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49ab	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49af	          0x4889d6	                            mov rsi, rdx	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49b2	          0x4889c7	                            mov rdi, rax	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49b5	      0xe8c6cdffff	                  call sym.is_blank_line	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49ba	            0x85c0	                           test eax, eax	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49bc	            0x7419	                            je 0x4004a17	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x49be	        0x837dec00	               cmp dword [rbp - 0x14], 0	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x49c2	     0xf85f5000000	                           jne 0x4004afd	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x49c8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x49cc	            0x8b00	                    mov eax, dword [rax]	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x49ce	          0x83f802	                              cmp eax, 2	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x49d1	     0xf84d3000000	                            je 0x4004aea	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x49d7	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1769	pretty.c	FUNCTION_51	FOR_1
0x49de	          0x8b55e8	             mov edx, dword [rbp - 0x18]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49e1	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49e4	             0x1d0	                            add eax, edx	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49e6	          0x83c014	                           add eax, 0x14	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49e9	          0x4863d0	                         movsxd rdx, eax	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49ec	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49f0	          0x4889d6	                            mov rsi, rdx	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49f3	          0x4889c7	                            mov rdi, rax	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49f6	      0xe800000000	                          call 0x4004a3b	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x49fb	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x49ff	            0x741f	                            je 0x4004a60	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x4a01	          0x8b7de8	             mov edi, dword [rbp - 0x18]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a04	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a08	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a0b	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a0f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a13	          0x4189f8	                            mov r8d, edi	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a16	          0x4889c7	                            mov rdi, rax	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a19	      0xe85dfeffff	               call sym.pp_handle_indent	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a1e	            0xeb71	                           jmp 0x4004ad1	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4a20	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4a24	          0x8b4038	            mov eax, dword [rax + 0x38] 	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4a27	            0x85c0	                           test eax, eax	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4a29	            0x741c	                            je 0x4004a87	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4a2b	          0x8b4de8	             mov ecx, dword [rbp - 0x18]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a2e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a32	          0x8b7038	            mov esi, dword [rax + 0x38] 	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a35	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a39	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a3d	          0x4889c7	                            mov rdi, rax	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a40	      0xe849fdffff	           call sym.strbuf_add_tabexpand	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a45	            0xeb4a	                           jmp 0x4004ad1	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4a47	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a4b	            0x8b00	                    mov eax, dword [rax]	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a4d	          0x83f807	                              cmp eax, 7	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a50	            0x7526	                           jne 0x4004ab8	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a52	          0x8b55e8	             mov edx, dword [rbp - 0x18]	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4a55	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4a59	            0x89d6	                            mov esi, edx	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4a5b	          0x4889c7	                            mov rdi, rax	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4a5e	      0xe88dfeffff	                 call sym.is_mboxrd_from	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4a63	            0x85c0	                           test eax, eax	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a65	            0x7411	                            je 0x4004ab8	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4a67	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4a6b	      0xbe3e000000	                           mov esi, 0x3e	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4a70	          0x4889c7	                            mov rdi, rax	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4a73	      0xe894b7ffff	                   call sym.strbuf_addch	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4a78	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a7b	          0x4863d0	                         movsxd rdx, eax	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a7e	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a82	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a86	          0x4889ce	                            mov rsi, rcx	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a89	          0x4889c7	                            mov rdi, rax	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a8c	      0xe800000000	                          call 0x4004ad1	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4a91	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4a95	      0xbe0a000000	                            mov esi, 0xa	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4a9a	          0x4889c7	                            mov rdi, rax	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4a9d	      0xe86ab7ffff	                   call sym.strbuf_addch	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4aa2	      0xe9c5feffff	                           jmp 0x40049ac	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4aa7	              0x90	                                     nop	      1761	pretty.c	FUNCTION_51	FOR_1	IF_1
0x4aa8	            0xeb01	                           jmp 0x4004aeb	      1761	pretty.c	FUNCTION_51	FOR_1	IF_1
0x4aaa	              0x90	                                     nop	      1767	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4aab	              0x90	                                     nop	      1786	pretty.c	FUNCTION_51
0x4aac	        0x488b45f8	                mov rax, qword [rbp - 8]	      1786	pretty.c	FUNCTION_51
0x4ab0	    0x644833042528	                xor rax, qword fs:[0x28]	      1786	pretty.c	FUNCTION_51
0x4ab9	            0x740d	                            je 0x4004b08	      1786	pretty.c	FUNCTION_51
0x4abb	            0xeb06	                           jmp 0x4004b03	      1786	pretty.c	FUNCTION_51
0x4abd	              0x90	                                     nop	      1765	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x4abe	      0xe9a9feffff	                           jmp 0x40049ac	      1785	pretty.c	FUNCTION_51	FOR_1
0x4ac3	      0xe800000000	                          call 0x4004b08	      1786	pretty.c	FUNCTION_51
0x4ac8	              0xc9	                                   leave	      1786	pretty.c	FUNCTION_51
0x4ac9	              0xc3	                                     ret	      1786	pretty.c	FUNCTION_51
parse_commit_header	ELSE,2:IF,3:FOR,2:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	121
0x2097	              0x55	                                push rbp	       791	pretty.c	WHILE_3	FUNCTION_28
0x2098	          0x4889e5	                            mov rbp, rsp	       791	pretty.c	WHILE_3	FUNCTION_28
0x209b	        0x4883ec30	                           sub rsp, 0x30	       791	pretty.c	WHILE_3	FUNCTION_28
0x209f	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       791	pretty.c	WHILE_3	FUNCTION_28
0x20a3	    0x64488b042528	                mov rax, qword fs:[0x28]	       791	pretty.c	WHILE_3	FUNCTION_28
0x20ac	        0x488945f8	                mov qword [rbp - 8], rax	       791	pretty.c	WHILE_3	FUNCTION_28
0x20b0	            0x31c0	                            xor eax, eax	       791	pretty.c	WHILE_3	FUNCTION_28
0x20b2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       792	pretty.c	WHILE_3	FUNCTION_28
0x20b6	        0x488b4050	            mov rax, qword [rax + 0x50] 	       792	pretty.c	WHILE_3	FUNCTION_28
0x20ba	        0x488945f0	             mov qword [rbp - 0x10], rax	       792	pretty.c	WHILE_3	FUNCTION_28
0x20be	    0xc745e0000000	               mov dword [rbp - 0x20], 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x20c5	      0xe926010000	                           jmp 0x4002230	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x20ca	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20cd	          0x8945e4	             mov dword [rbp - 0x1c], eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20d0	            0xeb04	                           jmp 0x4002116	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20d2	        0x8345e401	               add dword [rbp - 0x1c], 1	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20d6	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20d9	          0x4863d0	                         movsxd rdx, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20e0	          0x4801d0	                            add rax, rdx	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20e3	           0xfb600	                   movzx eax, byte [rax]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20e6	            0x84c0	                             test al, al	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20e8	            0x7414	                            je 0x400213e	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20ea	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20ed	          0x4863d0	                         movsxd rdx, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20f4	          0x4801d0	                            add rax, rdx	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20f7	           0xfb600	                   movzx eax, byte [rax]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20fa	            0x3c0a	                             cmp al, 0xa	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20fc	            0x75d4	                           jne 0x4002112	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x20fe	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x2101	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x2104	     0xf8400010000	                            je 0x400224a	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x210a	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x210d	          0x4863d0	                         movsxd rdx, eax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2110	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2114	        0x488d0c02	                    lea rcx, [rdx + rax]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2118	        0x488d45e8	                   lea rax, [rbp - 0x18]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x211c	          0x4889c2	                            mov rdx, rax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x211f	      0xbe00000000	                              mov esi, 0	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2124	          0x4889cf	                            mov rdi, rcx	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2127	      0xe8d4deffff	                    call sym.skip_prefix	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x212c	            0x85c0	                           test eax, eax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x212e	            0x7449	                            je 0x40021b9	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x2130	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2134	          0x4889c2	                            mov rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2137	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x213b	          0x4829c2	                            sub rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x213e	          0x4889d0	                            mov rax, rdx	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2141	          0x4889c2	                            mov rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2144	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2148	    0x488990800000	             mov qword [rax + 0x80], rdx	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x214f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2152	          0x4863d0	                         movsxd rdx, eax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2155	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2159	          0x4801d0	                            add rax, rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x215c	          0x4889c2	                            mov rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x215f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2163	          0x4829c2	                            sub rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2166	          0x4889d0	                            mov rax, rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2169	          0x4889c2	                            mov rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x216c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2170	    0x488990880000	             mov qword [rax + 0x88], rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2177	            0xeb6d	                           jmp 0x4002226	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x2179	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x217c	          0x4863d0	                         movsxd rdx, eax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x217f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x2183	        0x488d0c02	                    lea rcx, [rdx + rax]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x2187	        0x488d45e8	                   lea rax, [rbp - 0x18]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x218b	          0x4889c2	                            mov rdx, rax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x218e	      0xbe00000000	                              mov esi, 0	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x2193	          0x4889cf	                            mov rdi, rcx	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x2196	      0xe865deffff	                    call sym.skip_prefix	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x219b	            0x85c0	                           test eax, eax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x219d	            0x7447	                            je 0x4002226	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x219f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21a3	          0x4889c2	                            mov rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21a6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21aa	          0x4829c2	                            sub rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21ad	          0x4889d0	                            mov rax, rdx	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21b0	          0x4889c2	                            mov rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21b3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21b7	    0x488990900000	             mov qword [rax + 0x90], rdx	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21be	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21c1	          0x4863d0	                         movsxd rdx, eax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21c4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21c8	          0x4801d0	                            add rax, rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21cb	          0x4889c2	                            mov rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21ce	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21d2	          0x4829c2	                            sub rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21d5	          0x4889d0	                            mov rax, rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21d8	          0x4889c2	                            mov rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21db	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21df	    0x488990980000	             mov qword [rax + 0x98], rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x21e6	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       810	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21e9	          0x8945e0	             mov dword [rbp - 0x20], eax	       810	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21ec	        0x8345e001	               add dword [rbp - 0x20], 1	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21f0	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21f3	          0x4863d0	                         movsxd rdx, eax	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21f6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21fa	          0x4801d0	                            add rax, rdx	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x21fd	           0xfb600	                   movzx eax, byte [rax]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x2200	            0x84c0	                             test al, al	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x2202	     0xf85c2feffff	                           jne 0x400210a	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x2208	            0xeb01	                           jmp 0x400224b	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x220a	              0x90	                                     nop	       802	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x220b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       812	pretty.c	WHILE_3	FUNCTION_28
0x220e	          0x4863d0	                         movsxd rdx, eax	       812	pretty.c	WHILE_3	FUNCTION_28
0x2211	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       812	pretty.c	WHILE_3	FUNCTION_28
0x2215	    0x488990a00000	             mov qword [rax + 0xa0], rdx	       812	pretty.c	WHILE_3	FUNCTION_28
0x221c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       813	pretty.c	WHILE_3	FUNCTION_28
0x2220	         0xfb65010	           movzx edx, byte [rax + 0x10] 	       813	pretty.c	WHILE_3	FUNCTION_28
0x2224	          0x83ca01	                               or edx, 1	       813	pretty.c	WHILE_3	FUNCTION_28
0x2227	          0x885010	               mov byte [rax + 0x10], dl	       813	pretty.c	WHILE_3	FUNCTION_28
0x222a	              0x90	                                     nop	       814	pretty.c	WHILE_3	FUNCTION_28
0x222b	        0x488b45f8	                mov rax, qword [rbp - 8]	       814	pretty.c	WHILE_3	FUNCTION_28
0x222f	    0x644833042528	                xor rax, qword fs:[0x28]	       814	pretty.c	WHILE_3	FUNCTION_28
0x2238	            0x7405	                            je 0x400227f	       814	pretty.c	WHILE_3	FUNCTION_28
0x223a	      0xe800000000	                          call 0x400227f	       814	pretty.c	WHILE_3	FUNCTION_28
0x223f	              0xc9	                                   leave	       814	pretty.c	WHILE_3	FUNCTION_28
0x2240	              0xc3	                                     ret	       814	pretty.c	WHILE_3	FUNCTION_28
format_sanitized_subject	ELSE,1:IF,3:FOR,1:WHILE,2:CALL,4:DO,0:functions,0:SWITCH,0	93
0x2288	              0x55	                                push rbp	       823	pretty.c	WHILE_3	FUNCTION_30
0x2289	          0x4889e5	                            mov rbp, rsp	       823	pretty.c	WHILE_3	FUNCTION_30
0x228c	        0x4883ec30	                           sub rsp, 0x30	       823	pretty.c	WHILE_3	FUNCTION_30
0x2290	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       823	pretty.c	WHILE_3	FUNCTION_30
0x2294	        0x488975d0	             mov qword [rbp - 0x30], rsi	       823	pretty.c	WHILE_3	FUNCTION_30
0x2298	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       825	pretty.c	WHILE_3	FUNCTION_30
0x229c	        0x488b4008	                mov rax, qword [rax + 8]	       825	pretty.c	WHILE_3	FUNCTION_30
0x22a0	        0x488945f8	                mov qword [rbp - 8], rax	       825	pretty.c	WHILE_3	FUNCTION_30
0x22a4	    0xc745ec020000	               mov dword [rbp - 0x14], 2	       826	pretty.c	WHILE_3	FUNCTION_30
0x22ab	            0xeb77	                           jmp 0x4002364	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x22ad	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22b1	           0xfb600	                   movzx eax, byte [rax]	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22b4	           0xfbec0	                           movsx eax, al	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22b7	            0x89c7	                            mov edi, eax	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22b9	      0xe883ffffff	                    call sym.istitlechar	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22be	            0x85c0	                           test eax, eax	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22c0	            0x7459	                            je 0x400235b	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x22c2	        0x837dec01	               cmp dword [rbp - 0x14], 1	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x22c6	            0x7511	                           jne 0x4002319	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x22c8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x22cc	      0xbe2d000000	                           mov esi, 0x2d	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x22d1	          0x4889c7	                            mov rdi, rax	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x22d4	      0xe833dfffff	                   call sym.strbuf_addch	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x22d9	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x22e0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22e4	           0xfb600	                   movzx eax, byte [rax]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22e7	           0xfbed0	                           movsx edx, al	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22ea	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22ee	            0x89d6	                            mov esi, edx	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22f0	          0x4889c7	                            mov rdi, rax	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22f3	      0xe814dfffff	                   call sym.strbuf_addch	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x22f8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x22fc	           0xfb600	                   movzx eax, byte [rax]	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x22ff	            0x3c2e	                            cmp al, 0x2e	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x2301	            0x751c	                           jne 0x400235f	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x2303	            0xeb05	                           jmp 0x400234a	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x2305	      0x488345d001	               add qword [rbp - 0x30], 1	       836	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x230a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x230e	        0x4883c001	                              add rax, 1	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x2312	           0xfb600	                   movzx eax, byte [rax]	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x2315	            0x3c2e	                            cmp al, 0x2e	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x2317	            0x74ec	                            je 0x4002345	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x2319	            0xeb04	                           jmp 0x400235f	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x231b	        0x834dec01	                or dword [rbp - 0x14], 1	       838	pretty.c	WHILE_3	FUNCTION_30	FOR_1	ELSE_1
0x231f	      0x488345d001	               add qword [rbp - 0x30], 1	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x2324	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x2328	           0xfb600	                   movzx eax, byte [rax]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x232b	            0x84c0	                             test al, al	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x232d	            0x740f	                            je 0x400237e	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x232f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x2333	           0xfb600	                   movzx eax, byte [rax]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x2336	            0x3c0a	                             cmp al, 0xa	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x2338	     0xf856fffffff	                           jne 0x40022ed	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x233e	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       842	pretty.c	WHILE_3	FUNCTION_30
0x2346	            0xeb05	                           jmp 0x400238d	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2348	      0x488345f001	               add qword [rbp - 0x10], 1	       846	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x234d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2351	        0x488b4008	                mov rax, qword [rax + 8]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2355	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2359	        0x483b45f8	                cmp rax, qword [rbp - 8]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x235d	            0x7644	                           jbe 0x40023e3	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x235f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2363	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2367	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x236b	        0x488b4008	                mov rax, qword [rax + 8]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x236f	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2373	        0x4883e801	                              sub rax, 1	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2377	          0x4801d0	                            add rax, rdx	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x237a	           0xfb600	                   movzx eax, byte [rax]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x237d	            0x3c2e	                            cmp al, 0x2e	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x237f	            0x74c7	                            je 0x4002388	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2381	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2385	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2389	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x238d	        0x488b4008	                mov rax, qword [rax + 8]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2391	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2395	        0x4883e801	                              sub rax, 1	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x2399	          0x4801d0	                            add rax, rdx	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x239c	           0xfb600	                   movzx eax, byte [rax]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x239f	            0x3c2d	                            cmp al, 0x2d	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x23a1	            0x74a5	                            je 0x4002388	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x23a3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23a7	        0x488b4008	                mov rax, qword [rax + 8]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23ab	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23af	          0x4889c1	                            mov rcx, rax	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23b2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23ba	          0x4889ce	                            mov rsi, rcx	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23bd	          0x4889c7	                            mov rdi, rax	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23c0	      0xe800000000	                          call 0x4002405	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x23c5	              0x90	                                     nop	       848	pretty.c	WHILE_3	FUNCTION_30
0x23c6	              0xc9	                                   leave	       848	pretty.c	WHILE_3	FUNCTION_30
0x23c7	              0xc3	                                     ret	       848	pretty.c	WHILE_3	FUNCTION_30
logmsg_reencode	ELSE,2:IF,9:FOR,0:WHILE,0:CALL,10:DO,0:functions,0:SWITCH,0	104
0x1b6a	              0x55	                                push rbp	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b6b	          0x4889e5	                            mov rbp, rsp	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b6e	        0x4883ec40	                           sub rsp, 0x40	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b72	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b76	        0x488975d0	             mov qword [rbp - 0x30], rsi	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b7a	        0x488955c8	             mov qword [rbp - 0x38], rdx	       601	pretty.c	WHILE_3	FUNCTION_25
0x1b7e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x1b82	      0xbe00000000	                              mov esi, 0	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x1b87	          0x4889c7	                            mov rdi, rax	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x1b8a	      0xe800000000	                          call 0x4001bcf	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x1b8f	        0x488945e8	             mov qword [rbp - 0x18], rax	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x1b93	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1b98	            0x740b	                            je 0x4001be5	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1b9a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1b9e	           0xfb600	                   movzx eax, byte [rax]	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1ba1	            0x84c0	                             test al, al	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1ba3	            0x752b	                           jne 0x4001c10	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1ba5	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x1baa	            0x741b	                            je 0x4001c07	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x1bac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bb0	      0xbe00000000	                              mov esi, 0	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bb5	          0x4889c7	                            mov rdi, rax	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bb8	      0xe899fdffff	                     call sym.get_header	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bbd	          0x4889c2	                            mov rdx, rax	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bc0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bc4	          0x488910	                    mov qword [rax], rdx	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x1bc7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       611	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1bcb	      0xe911010000	                           jmp 0x4001d21	       611	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x1bd0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x1bd4	      0xbe00000000	                              mov esi, 0	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x1bd9	          0x4889c7	                            mov rdi, rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x1bdc	      0xe875fdffff	                     call sym.get_header	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x1be1	        0x488945f0	             mov qword [rbp - 0x10], rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x1be5	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x1bea	            0x740b	                            je 0x4001c37	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x1bec	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x1bf0	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x1bf4	          0x488910	                    mov qword [rax], rdx	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x1bf7	      0x48837df000	               cmp qword [rbp - 0x10], 0	       616	pretty.c	WHILE_3	FUNCTION_25
0x1bfc	            0x7406	                            je 0x4001c44	       616	pretty.c	WHILE_3	FUNCTION_25
0x1bfe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       616	pretty.c	WHILE_3	FUNCTION_25
0x1c02	            0xeb07	                           jmp 0x4001c4b	       616	pretty.c	WHILE_3	FUNCTION_25
0x1c04	    0x488b05000000	            mov rax, qword [0x04001c4b] 	       616	pretty.c	WHILE_3	FUNCTION_25
0x1c0b	        0x488945f8	                mov qword [rbp - 8], rax	       616	pretty.c	WHILE_3	FUNCTION_25
0x1c0f	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c13	        0x488b45f8	                mov rax, qword [rbp - 8]	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c17	          0x4889d6	                            mov rsi, rdx	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c1a	          0x4889c7	                            mov rdi, rax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c1d	      0xe800000000	                          call 0x4001c62	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c22	            0x85c0	                           test eax, eax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c24	            0x7443	                            je 0x4001ca9	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x1c26	      0x48837df000	               cmp qword [rbp - 0x10], 0	       623	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x1c2b	            0x7509	                           jne 0x4001c76	       623	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x1c2d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       624	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x1c31	      0xe9ab000000	                           jmp 0x4001d21	       624	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x1c36	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c3a	      0xbe00000000	                              mov esi, 0	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c3f	          0x4889c7	                            mov rdi, rax	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c42	      0xe800000000	                          call 0x4001c87	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c47	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c4b	            0x7512	                           jne 0x4001c9f	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x1c4d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x1c51	          0x4889c7	                            mov rdi, rax	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x1c54	      0xe800000000	                          call 0x4001c99	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x1c59	        0x488945e0	             mov qword [rbp - 0x20], rax	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x1c5d	            0xeb3f	                           jmp 0x4001cde	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x1c5f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x1c63	        0x488945e0	             mov qword [rbp - 0x20], rax	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x1c67	            0xeb35	                           jmp 0x4001cde	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x1c69	        0x488b55f8	                mov rdx, qword [rbp - 8]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c6d	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c71	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c75	          0x4889ce	                            mov rsi, rcx	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c78	          0x4889c7	                            mov rdi, rax	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c7b	      0xe8ede6ffff	                call sym.reencode_string	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c80	        0x488945e0	             mov qword [rbp - 0x20], rax	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x1c84	      0x48837de000	               cmp qword [rbp - 0x20], 0	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x1c89	            0x7413	                            je 0x4001cde	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x1c8b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x1c8f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x1c93	          0x4889d6	                            mov rsi, rdx	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x1c96	          0x4889c7	                            mov rdi, rax	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x1c99	      0xe800000000	                          call 0x4001cde	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x1c9e	      0x48837de000	               cmp qword [rbp - 0x20], 0	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x1ca3	            0x7417	                            je 0x4001cfc	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x1ca5	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1ca9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1cad	          0x4889d6	                            mov rsi, rdx	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1cb0	          0x4889c7	                            mov rdi, rax	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1cb3	      0xe80ffdffff	        call sym.replace_encoding_header	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1cb8	        0x488945e0	             mov qword [rbp - 0x20], rax	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x1cbc	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x1cc1	            0x750c	                           jne 0x4001d0f	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x1cc3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x1cc7	          0x4889c7	                            mov rdi, rax	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x1cca	      0xe800000000	                          call 0x4001d0f	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x1ccf	      0x48837de000	               cmp qword [rbp - 0x20], 0	       663	pretty.c	WHILE_3	FUNCTION_25
0x1cd4	            0x7406	                            je 0x4001d1c	       663	pretty.c	WHILE_3	FUNCTION_25
0x1cd6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       663	pretty.c	WHILE_3	FUNCTION_25
0x1cda	            0xeb04	                           jmp 0x4001d20	       663	pretty.c	WHILE_3	FUNCTION_25
0x1cdc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       663	pretty.c	WHILE_3	FUNCTION_25
0x1ce0	              0x90	                                     nop	       663	pretty.c	WHILE_3	FUNCTION_25
0x1ce1	              0xc9	                                   leave	       664	pretty.c	WHILE_3	FUNCTION_25
0x1ce2	              0xc3	                                     ret	       664	pretty.c	WHILE_3	FUNCTION_25
strbuf_addstr	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	17
0x27a	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_58
0x27b	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_58
0x27e	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_58
0x282	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_58
0x286	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_58
0x28a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_58	CALL_2
0x28e	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x291	      0xe800000000	                          call 0x40002d6	       279	strbuf.h	FUNCTION_58	CALL_2
0x296	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x299	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_58	CALL_2
0x29d	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_58	CALL_2
0x2a1	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_58	CALL_2
0x2a4	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x2a7	      0xe800000000	                          call 0x40002ec	       279	strbuf.h	FUNCTION_58	CALL_2
0x2ac	              0x90	                                     nop	       280	strbuf.h	FUNCTION_58
0x2ad	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_58
0x2ae	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_58
parse_padding_placeholder	ELSE,6:IF,14:FOR,0:WHILE,0:CALL,7:DO,0:functions,0:SWITCH,1	168
0x2a25	              0x55	                                push rbp	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a26	          0x4889e5	                            mov rbp, rsp	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a29	        0x4883ec60	                           sub rsp, 0x60	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a2d	        0x48897db8	             mov qword [rbp - 0x48], rdi	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a31	        0x488975b0	             mov qword [rbp - 0x50], rsi	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a35	        0x488955a8	             mov qword [rbp - 0x58], rdx	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a39	    0x64488b042528	                mov rax, qword fs:[0x28]	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a42	        0x488945f8	                mov qword [rbp - 8], rax	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a46	            0x31c0	                            xor eax, eax	       990	pretty.c	WHILE_3	FUNCTION_37
0x2a48	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       991	pretty.c	WHILE_3	FUNCTION_37
0x2a4c	        0x488945e0	             mov qword [rbp - 0x20], rax	       991	pretty.c	WHILE_3	FUNCTION_37
0x2a50	    0xc745d0000000	               mov dword [rbp - 0x30], 0	       993	pretty.c	WHILE_3	FUNCTION_37
0x2a57	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a5b	        0x488d5001	                      lea rdx, [rax + 1]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a5f	        0x488955e0	             mov qword [rbp - 0x20], rdx	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a63	           0xfb600	                   movzx eax, byte [rax]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a66	           0xfbec0	                           movsx eax, al	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a69	          0x83f83c	                           cmp eax, 0x3c	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a6c	            0x7407	                            je 0x4002ab5	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a6e	          0x83f83e	                           cmp eax, 0x3e	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a71	            0x740b	                            je 0x4002abe	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a73	            0xeb44	                           jmp 0x4002af9	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a75	    0xc745cc010000	               mov dword [rbp - 0x34], 1	       997	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a7c	            0xeb45	                           jmp 0x4002b03	       998	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x2a7e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a82	           0xfb600	                   movzx eax, byte [rax]	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a85	            0x3c3c	                            cmp al, 0x3c	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a87	            0x750e	                           jne 0x4002ad7	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a89	    0xc745cc040000	               mov dword [rbp - 0x34], 4	      1001	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a90	      0x488345e001	               add qword [rbp - 0x20], 1	      1002	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x2a95	            0xeb2c	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2a97	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2a9b	           0xfb600	                   movzx eax, byte [rax]	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2a9e	            0x3c3e	                            cmp al, 0x3e	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2aa0	            0x750e	                           jne 0x4002af0	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2aa2	    0xc745cc030000	               mov dword [rbp - 0x34], 3	      1004	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2aa9	      0x488345e001	               add qword [rbp - 0x20], 1	      1005	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x2aae	            0xeb13	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2ab0	    0xc745cc020000	               mov dword [rbp - 0x34], 2	      1007	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2ab7	            0xeb0a	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2ab9	      0xb800000000	                              mov eax, 0	      1010	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2abe	      0xe9c2010000	                           jmp 0x4002cc5	      1010	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x2ac3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2ac7	           0xfb600	                   movzx eax, byte [rax]	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2aca	            0x3c7c	                            cmp al, 0x7c	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2acc	            0x750c	                           jne 0x4002b1a	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2ace	    0xc745d0010000	               mov dword [rbp - 0x30], 1	      1015	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2ad5	      0x488345e001	               add qword [rbp - 0x20], 1	      1016	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x2ada	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ade	           0xfb600	                   movzx eax, byte [rax]	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ae1	            0x3c28	                            cmp al, 0x28	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ae3	     0xf8597010000	                           jne 0x4002cc0	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ae9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2aed	        0x4883c001	                              add rax, 1	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2af1	        0x488945f0	             mov qword [rbp - 0x10], rax	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2af5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2af9	      0xbe00000000	                              mov esi, 0	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2afe	          0x4889c7	                            mov rdi, rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b01	      0xe800000000	                          call 0x4002b46	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b06	          0x4889c2	                            mov rdx, rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b09	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b0d	          0x4801d0	                            add rax, rdx	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b10	        0x488945e8	             mov qword [rbp - 0x18], rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x2b14	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b19	            0x740a	                            je 0x4002b65	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b1b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b1f	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b23	            0x750a	                           jne 0x4002b6f	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b25	      0xb800000000	                              mov eax, 0	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b2a	      0xe956010000	                           jmp 0x4002cc5	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x2b2f	        0x488d4dd8	                   lea rcx, [rbp - 0x28]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b33	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b37	      0xba0a000000	                            mov edx, 0xa	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b3c	          0x4889ce	                            mov rsi, rcx	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b3f	          0x4889c7	                            mov rdi, rax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b42	      0xe800000000	                          call 0x4002b87	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b47	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x2b4a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b4e	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b52	            0x7406	                            je 0x4002b9a	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b54	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b58	            0x750a	                           jne 0x4002ba4	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b5a	      0xb800000000	                              mov eax, 0	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b5f	      0xe921010000	                           jmp 0x4002cc5	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x2b64	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x2b68	            0x791e	                           jns 0x4002bc8	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x2b6a	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x2b6e	            0x7408	                            je 0x4002bb8	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x2b70	      0xe800000000	                          call 0x4002bb5	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x2b75	           0x145d4	             add dword [rbp - 0x2c], eax	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x2b78	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x2b7c	            0x790a	                           jns 0x4002bc8	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x2b7e	      0xb800000000	                              mov eax, 0	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x2b83	      0xe9fd000000	                           jmp 0x4002cc5	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x2b88	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b8c	            0x7407	                            je 0x4002bd5	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b8e	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b91	            0xf7d8	                                 neg eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b93	            0xeb03	                           jmp 0x4002bd8	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b95	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b98	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b9c	          0x89427c	             mov dword [rdx + 0x7c], eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2b9f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ba3	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ba6	          0x895048	             mov dword [rax + 0x48], edx	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x2ba9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bad	           0xfb600	                   movzx eax, byte [rax]	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bb0	            0x3c2c	                            cmp al, 0x2c	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bb2	     0xf85a9000000	                           jne 0x4002ca1	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bb8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bbc	        0x4883c001	                              add rax, 1	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bc0	        0x488945f0	             mov qword [rbp - 0x10], rax	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x2bc4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x2bc8	      0xbe29000000	                           mov esi, 0x29	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x2bcd	          0x4889c7	                            mov rdi, rax	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x2bd0	      0xe800000000	                          call 0x4002c15	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x2bd5	        0x488945e8	             mov qword [rbp - 0x18], rax	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x2bd9	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2bde	            0x740a	                            je 0x4002c2a	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2be0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2be4	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2be8	            0x750a	                           jne 0x4002c34	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2bea	      0xb800000000	                              mov eax, 0	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2bef	      0xe991000000	                           jmp 0x4002cc5	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x2bf4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2bf8	      0xbe00000000	                              mov esi, 0	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2bfd	          0x4889c7	                            mov rdi, rax	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2c00	      0xe800000000	                          call 0x4002c45	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2c05	            0x85c0	                           test eax, eax	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2c07	            0x740d	                            je 0x4002c56	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x2c09	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x2c0d	    0xc7404c030000	               mov dword [rax + 0x4c], 3	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x2c14	            0xeb56	                           jmp 0x4002cac	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x2c16	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c1a	      0xbe00000000	                              mov esi, 0	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c1f	          0x4889c7	                            mov rdi, rax	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c22	      0xe800000000	                          call 0x4002c67	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c27	            0x85c0	                           test eax, eax	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c29	            0x740d	                            je 0x4002c78	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x2c2b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x2c2f	    0xc7404c010000	               mov dword [rax + 0x4c], 1	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x2c36	            0xeb34	                           jmp 0x4002cac	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x2c38	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c3c	      0xbe00000000	                              mov esi, 0	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c41	          0x4889c7	                            mov rdi, rax	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c44	      0xe800000000	                          call 0x4002c89	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c49	            0x85c0	                           test eax, eax	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c4b	            0x740d	                            je 0x4002c9a	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x2c4d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x2c51	    0xc7404c020000	               mov dword [rax + 0x4c], 2	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x2c58	            0xeb12	                           jmp 0x4002cac	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x2c5a	      0xb800000000	                              mov eax, 0	      1050	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_5
0x2c5f	            0xeb24	                           jmp 0x4002cc5	      1050	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_5
0x2c61	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1052	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c65	    0xc7404c000000	               mov dword [rax + 0x4c], 0	      1052	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c6c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c70	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c74	          0x4829c2	                            sub rdx, rax	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c77	          0x4889d0	                            mov rax, rdx	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c7a	        0x4883c001	                              add rax, 1	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c7e	            0xeb05	                           jmp 0x4002cc5	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x2c80	      0xb800000000	                              mov eax, 0	      1056	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c85	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c89	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c92	            0x7405	                            je 0x4002cd9	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c94	      0xe800000000	                          call 0x4002cd9	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c99	              0xc9	                                   leave	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x2c9a	              0xc3	                                     ret	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
userformat_want_item	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,1	33
0x3eff	              0x55	                                push rbp	      1480	pretty.c	FUNCTION_42
0x3f00	          0x4889e5	                            mov rbp, rsp	      1480	pretty.c	FUNCTION_42
0x3f03	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1480	pretty.c	FUNCTION_42
0x3f07	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1480	pretty.c	FUNCTION_42
0x3f0b	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1480	pretty.c	FUNCTION_42
0x3f0f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1481	pretty.c	FUNCTION_42
0x3f13	        0x488945f8	                mov qword [rbp - 8], rax	      1481	pretty.c	FUNCTION_42
0x3f17	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f1b	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f1e	            0x3c2b	                            cmp al, 0x2b	      1483	pretty.c	FUNCTION_42	IF_1
0x3f20	            0x7416	                            je 0x4003f78	      1483	pretty.c	FUNCTION_42	IF_1
0x3f22	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f26	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f29	            0x3c2d	                            cmp al, 0x2d	      1483	pretty.c	FUNCTION_42	IF_1
0x3f2b	            0x740b	                            je 0x4003f78	      1483	pretty.c	FUNCTION_42	IF_1
0x3f2d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f31	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x3f34	            0x3c20	                            cmp al, 0x20	      1483	pretty.c	FUNCTION_42	IF_1
0x3f36	            0x7505	                           jne 0x4003f7d	      1483	pretty.c	FUNCTION_42	IF_1
0x3f38	      0x488345e001	               add qword [rbp - 0x20], 1	      1484	pretty.c	FUNCTION_42	IF_1
0x3f3d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x3f41	           0xfb600	                   movzx eax, byte [rax]	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x3f44	           0xfbec0	                           movsx eax, al	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x3f47	          0x83f84e	                           cmp eax, 0x4e	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x3f4a	            0x750d	                           jne 0x4003f99	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x3f4c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x3f50	           0xfb610	                   movzx edx, byte [rax]	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x3f53	          0x83ca01	                               or edx, 1	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x3f56	            0x8810	                      mov byte [rax], dl	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x3f58	              0x90	                                     nop	      1489	pretty.c	FUNCTION_42	SWITCH_1
0x3f59	      0xb800000000	                              mov eax, 0	      1491	pretty.c	FUNCTION_42
0x3f5e	              0x5d	                                 pop rbp	      1492	pretty.c	FUNCTION_42
0x3f5f	              0xc3	                                     ret	      1492	pretty.c	FUNCTION_42
is_rfc822_special	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,1	16
0xc4f	              0x55	                                push rbp	       223	pretty.c	WHILE_3	FUNCTION_11
0xc50	          0x4889e5	                            mov rbp, rsp	       223	pretty.c	WHILE_3	FUNCTION_11
0xc53	            0x89f8	                            mov eax, edi	       223	pretty.c	WHILE_3	FUNCTION_11
0xc55	          0x8845fc	                  mov byte [rbp - 4], al	       223	pretty.c	WHILE_3	FUNCTION_11
0xc58	         0xfbe45fc	               movsx eax, byte [rbp - 4]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc5c	          0x83e822	                           sub eax, 0x22	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc5f	          0x83f83b	                           cmp eax, 0x3b	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc62	            0x7713	                            ja 0x4000cb7	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc64	            0x89c0	                            mov eax, eax	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc66	    0x488b04c50000	                  mov rax, qword [rax*8]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc6e	            0xffe0	                                 jmp rax	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc70	      0xb801000000	                              mov eax, 1	       238	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc75	            0xeb05	                           jmp 0x4000cbc	       238	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc77	      0xb800000000	                              mov eax, 0	       240	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0xc7c	              0x5d	                                 pop rbp	       242	pretty.c	WHILE_3	FUNCTION_11
0xc7d	              0xc3	                                     ret	       242	pretty.c	WHILE_3	FUNCTION_11
pretty_print_commit	ELSE,1:IF,11:FOR,1:WHILE,0:CALL,17:DO,0:functions,0:SWITCH,0	179
0x4aca	              0x55	                                push rbp	      1791	pretty.c	FUNCTION_52
0x4acb	          0x4889e5	                            mov rbp, rsp	      1791	pretty.c	FUNCTION_52
0x4ace	        0x4883ec60	                           sub rsp, 0x60	      1791	pretty.c	FUNCTION_52
0x4ad2	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1791	pretty.c	FUNCTION_52
0x4ad6	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1791	pretty.c	FUNCTION_52
0x4ada	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1791	pretty.c	FUNCTION_52
0x4ade	    0x64488b042528	                mov rax, qword fs:[0x28]	      1791	pretty.c	FUNCTION_52
0x4ae7	        0x488945f8	                mov qword [rbp - 8], rax	      1791	pretty.c	FUNCTION_52
0x4aeb	            0x31c0	                            xor eax, eax	      1791	pretty.c	FUNCTION_52
0x4aed	    0xc745c4040000	               mov dword [rbp - 0x3c], 4	      1793	pretty.c	FUNCTION_52
0x4af4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1797	pretty.c	FUNCTION_52
0x4af8	          0x8b403c	            mov eax, dword [rax + 0x3c] 	      1797	pretty.c	FUNCTION_52
0x4afb	          0x8945c8	             mov dword [rbp - 0x38], eax	      1797	pretty.c	FUNCTION_52
0x4afe	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1799	pretty.c	FUNCTION_52	IF_1
0x4b02	            0x8b00	                    mov eax, dword [rax]	      1799	pretty.c	FUNCTION_52	IF_1
0x4b04	          0x83f808	                              cmp eax, 8	      1799	pretty.c	FUNCTION_52	IF_1
0x4b07	            0x7520	                           jne 0x4004b69	      1799	pretty.c	FUNCTION_52	IF_1
0x4b09	    0x488b35000000	            mov rsi, qword [0x04004b50] 	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b10	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b14	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b18	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b1c	          0x4889c7	                            mov rdi, rax	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b1f	      0xe800000000	                          call 0x4004b64	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b24	      0xe9ff010000	                           jmp 0x4004d68	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4b29	      0xe800000000	                          call 0x4004b6e	      1804	pretty.c	FUNCTION_52	CALL_2
0x4b2e	        0x488945e0	             mov qword [rbp - 0x20], rax	      1804	pretty.c	FUNCTION_52	CALL_2
0x4b32	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b36	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b3a	      0xbe00000000	                              mov esi, 0	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b3f	          0x4889c7	                            mov rdi, rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b42	      0xe800000000	                          call 0x4004b87	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b47	        0x488945e8	             mov qword [rbp - 0x18], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b4b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b4f	        0x488945d8	             mov qword [rbp - 0x28], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4b53	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b57	            0x8b00	                    mov eax, dword [rax]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b59	          0x83f805	                              cmp eax, 5	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b5c	            0x7411	                            je 0x4004baf	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b5e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b62	            0x8b00	                    mov eax, dword [rax]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b64	            0x89c7	                            mov edi, eax	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b66	      0xe8e1b7ffff	               call sym.cmit_fmt_is_mail	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b6b	            0x85c0	                           test eax, eax	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b6d	            0x7407	                            je 0x4004bb6	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4b6f	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x4b76	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b7a	            0x8b00	                    mov eax, dword [rax]	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b7c	            0x89c7	                            mov edi, eax	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b7e	      0xe8c9b7ffff	               call sym.cmit_fmt_is_mail	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b83	            0x85c0	                           test eax, eax	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b85	            0x7478	                            je 0x4004c3f	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b87	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b8b	            0x7572	                           jne 0x4004c3f	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4b8d	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4b94	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4b97	          0x8945d0	             mov dword [rbp - 0x30], eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4b9a	            0xeb48	                           jmp 0x4004c24	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4b9c	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x4ba0	            0x7527	                           jne 0x4004c09	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x4ba2	        0x837dd40a	            cmp dword [rbp - 0x2c], 0xa 	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4ba6	            0x7538	                           jne 0x4004c20	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4ba8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bac	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4baf	          0x4863d2	                         movsxd rdx, edx	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bb2	        0x4883c201	                              add rdx, 1	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bb6	          0x4801d0	                            add rax, rdx	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bb9	           0xfb600	                   movzx eax, byte [rax]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bbc	            0x3c0a	                             cmp al, 0xa	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bbe	            0x7520	                           jne 0x4004c20	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bc0	    0xc745d0010000	               mov dword [rbp - 0x30], 1	      1824	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bc7	            0xeb17	                           jmp 0x4004c20	      1824	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4bc9	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4bcc	            0x89c7	                            mov edi, eax	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4bce	      0xe806c0ffff	                      call sym.non_ascii	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4bd3	            0x85c0	                           test eax, eax	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4bd5	            0x7409	                            je 0x4004c20	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4bd7	    0xc745c8010000	               mov dword [rbp - 0x38], 1	      1827	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6
0x4bde	            0xeb1f	                           jmp 0x4004c3f	      1828	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6
0x4be0	        0x8345cc01	               add dword [rbp - 0x34], 1	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4be4	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4be8	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4beb	            0x4898	                                    cdqe	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bed	          0x4801d0	                            add rax, rdx	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bf0	           0xfb600	                   movzx eax, byte [rax]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bf3	           0xfbec0	                           movsx eax, al	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bf6	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bf9	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bfd	            0x759d	                           jne 0x4004bdc	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4bff	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c03	        0x488d4dd8	                   lea rcx, [rbp - 0x28]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c07	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c0b	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c0f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c13	          0x4989f8	                             mov r8, rdi	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c16	          0x4889c7	                            mov rdi, rax	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c19	      0xe8fdf5ffff	                      call sym.pp_header	      1833	pretty.c	FUNCTION_52	CALL_7
0x4c1e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1834	pretty.c	FUNCTION_52	IF_7
0x4c22	            0x8b00	                    mov eax, dword [rax]	      1834	pretty.c	FUNCTION_52	IF_7
0x4c24	          0x83f805	                              cmp eax, 5	      1834	pretty.c	FUNCTION_52	IF_7
0x4c27	            0x741c	                            je 0x4004c85	      1834	pretty.c	FUNCTION_52	IF_7
0x4c29	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1834	pretty.c	FUNCTION_52	IF_7
0x4c2d	          0x8b4034	            mov eax, dword [rax + 0x34] 	      1834	pretty.c	FUNCTION_52	IF_7
0x4c30	            0x85c0	                           test eax, eax	      1834	pretty.c	FUNCTION_52	IF_7
0x4c32	            0x7511	                           jne 0x4004c85	      1834	pretty.c	FUNCTION_52	IF_7
0x4c34	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4c38	      0xbe0a000000	                            mov esi, 0xa	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4c3d	          0x4889c7	                            mov rdi, rax	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4c40	      0xe8c7b5ffff	                   call sym.strbuf_addch	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4c45	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1839	pretty.c	FUNCTION_52	CALL_9
0x4c49	          0x4889c7	                            mov rdi, rax	      1839	pretty.c	FUNCTION_52	CALL_9
0x4c4c	      0xe800000000	                          call 0x4004c91	      1839	pretty.c	FUNCTION_52	CALL_9
0x4c51	        0x488945d8	             mov qword [rbp - 0x28], rax	      1839	pretty.c	FUNCTION_52	CALL_9
0x4c55	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c59	            0x8b00	                    mov eax, dword [rax]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c5b	          0x83f805	                              cmp eax, 5	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c5e	            0x7411	                            je 0x4004cb1	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c60	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c64	            0x8b00	                    mov eax, dword [rax]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c66	            0x89c7	                            mov edi, eax	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c68	      0xe8dfb6ffff	               call sym.cmit_fmt_is_mail	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c6d	            0x85c0	                           test eax, eax	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c6f	            0x741e	                            je 0x4004ccf	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4c71	          0x8b7dc8	             mov edi, dword [rbp - 0x38]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c74	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c78	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c7c	        0x488d75d8	                   lea rsi, [rbp - 0x28]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c80	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c84	          0x4189f8	                            mov r8d, edi	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c87	          0x4889c7	                            mov rdi, rax	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c8a	      0xe800000000	                          call 0x4004ccf	      1843	pretty.c	FUNCTION_52	CALL_11
0x4c8f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1845	pretty.c	FUNCTION_52
0x4c93	        0x488b4008	                mov rax, qword [rax + 8]	      1845	pretty.c	FUNCTION_52
0x4c97	        0x488945f0	             mov qword [rbp - 0x10], rax	      1845	pretty.c	FUNCTION_52
0x4c9b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1846	pretty.c	FUNCTION_52	IF_9
0x4c9f	            0x8b00	                    mov eax, dword [rax]	      1846	pretty.c	FUNCTION_52	IF_9
0x4ca1	          0x83f805	                              cmp eax, 5	      1846	pretty.c	FUNCTION_52	IF_9
0x4ca4	            0x7417	                            je 0x4004cfd	      1846	pretty.c	FUNCTION_52	IF_9
0x4ca6	          0x8b4dc4	             mov ecx, dword [rbp - 0x3c]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4ca9	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4cad	        0x488d75d8	                   lea rsi, [rbp - 0x28]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4cb1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4cb5	          0x4889c7	                            mov rdi, rax	      1847	pretty.c	FUNCTION_52	CALL_12
0x4cb8	      0xe800000000	                          call 0x4004cfd	      1847	pretty.c	FUNCTION_52	CALL_12
0x4cbd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1848	pretty.c	FUNCTION_52	CALL_13
0x4cc1	          0x4889c7	                            mov rdi, rax	      1848	pretty.c	FUNCTION_52	CALL_13
0x4cc4	      0xe800000000	                          call 0x4004d09	      1848	pretty.c	FUNCTION_52	CALL_13
0x4cc9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1851	pretty.c	FUNCTION_52	IF_10
0x4ccd	            0x8b00	                    mov eax, dword [rax]	      1851	pretty.c	FUNCTION_52	IF_10
0x4ccf	          0x83f805	                              cmp eax, 5	      1851	pretty.c	FUNCTION_52	IF_10
0x4cd2	            0x7411	                            je 0x4004d25	      1851	pretty.c	FUNCTION_52	IF_10
0x4cd4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1852	pretty.c	FUNCTION_52	CALL_14
0x4cd8	      0xbe0a000000	                            mov esi, 0xa	      1852	pretty.c	FUNCTION_52	CALL_14
0x4cdd	          0x4889c7	                            mov rdi, rax	      1852	pretty.c	FUNCTION_52	CALL_14
0x4ce0	      0xe827b5ffff	                   call sym.strbuf_addch	      1852	pretty.c	FUNCTION_52	CALL_14
0x4ce5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4ce9	            0x8b00	                    mov eax, dword [rax]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4ceb	            0x89c7	                            mov edi, eax	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4ced	      0xe85ab6ffff	               call sym.cmit_fmt_is_mail	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4cf2	            0x85c0	                           test eax, eax	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4cf4	            0x741f	                            je 0x4004d55	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4cf6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4cfa	        0x488b4008	                mov rax, qword [rax + 8]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4cfe	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4d02	            0x7711	                            ja 0x4004d55	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4d04	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1860	pretty.c	FUNCTION_52	CALL_16
0x4d08	      0xbe0a000000	                            mov esi, 0xa	      1860	pretty.c	FUNCTION_52	CALL_16
0x4d0d	          0x4889c7	                            mov rdi, rax	      1860	pretty.c	FUNCTION_52	CALL_16
0x4d10	      0xe8f7b4ffff	                   call sym.strbuf_addch	      1860	pretty.c	FUNCTION_52	CALL_16
0x4d15	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1862	pretty.c	FUNCTION_52	CALL_17
0x4d19	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1862	pretty.c	FUNCTION_52	CALL_17
0x4d1d	          0x4889d6	                            mov rsi, rdx	      1862	pretty.c	FUNCTION_52	CALL_17
0x4d20	          0x4889c7	                            mov rdi, rax	      1862	pretty.c	FUNCTION_52	CALL_17
0x4d23	      0xe800000000	                          call 0x4004d68	      1862	pretty.c	FUNCTION_52	CALL_17
0x4d28	        0x488b45f8	                mov rax, qword [rbp - 8]	      1863	pretty.c	FUNCTION_52
0x4d2c	    0x644833042528	                xor rax, qword fs:[0x28]	      1863	pretty.c	FUNCTION_52
0x4d35	            0x7405	                            je 0x4004d7c	      1863	pretty.c	FUNCTION_52
0x4d37	      0xe800000000	                          call 0x4004d7c	      1863	pretty.c	FUNCTION_52
0x4d3c	              0xc9	                                   leave	      1863	pretty.c	FUNCTION_52
0x4d3d	              0xc3	                                     ret	      1863	pretty.c	FUNCTION_52
strbuf_swap	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	39
0xa8	              0x55	                                push rbp	       126	strbuf.h	FUNCTION_54
0xa9	          0x4889e5	                            mov rbp, rsp	       126	strbuf.h	FUNCTION_54
0xac	        0x4883ec40	                           sub rsp, 0x40	       126	strbuf.h	FUNCTION_54
0xb0	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       126	strbuf.h	FUNCTION_54
0xb4	        0x488975c0	             mov qword [rbp - 0x40], rsi	       126	strbuf.h	FUNCTION_54
0xb8	    0x64488b042528	                mov rax, qword fs:[0x28]	       126	strbuf.h	FUNCTION_54
0xc1	        0x488945f8	                mov qword [rbp - 8], rax	       126	strbuf.h	FUNCTION_54
0xc5	            0x31c0	                            xor eax, eax	       126	strbuf.h	FUNCTION_54
0xc7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       127	strbuf.h	FUNCTION_54	CALL_1
0xcb	        0x488945d0	             mov qword [rbp - 0x30], rax	       127	strbuf.h	FUNCTION_54	CALL_1
0xcf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       127	strbuf.h	FUNCTION_54	CALL_1
0xd3	        0x488945d8	             mov qword [rbp - 0x28], rax	       127	strbuf.h	FUNCTION_54	CALL_1
0xd7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_54	CALL_1
0xdb	          0x488b10	                    mov rdx, qword [rax]	       127	strbuf.h	FUNCTION_54	CALL_1
0xde	        0x488955e0	             mov qword [rbp - 0x20], rdx	       127	strbuf.h	FUNCTION_54	CALL_1
0xe2	        0x488b5008	                mov rdx, qword [rax + 8]	       127	strbuf.h	FUNCTION_54	CALL_1
0xe6	        0x488955e8	             mov qword [rbp - 0x18], rdx	       127	strbuf.h	FUNCTION_54	CALL_1
0xea	        0x488b4010	            mov rax, qword [rax + 0x10] 	       127	strbuf.h	FUNCTION_54	CALL_1
0xee	        0x488945f0	             mov qword [rbp - 0x10], rax	       127	strbuf.h	FUNCTION_54	CALL_1
0xf2	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_54	CALL_1
0xf6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_54	CALL_1
0xfa	      0xba18000000	                           mov edx, 0x18	       127	strbuf.h	FUNCTION_54	CALL_1
0xff	          0x4889ce	                            mov rsi, rcx	       127	strbuf.h	FUNCTION_54	CALL_1
0x102	          0x4889c7	                            mov rdi, rax	       127	strbuf.h	FUNCTION_54	CALL_1
0x105	      0xe800000000	                          call 0x400014a	       127	strbuf.h	FUNCTION_54	CALL_1
0x10a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_54	CALL_1
0x10e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       127	strbuf.h	FUNCTION_54	CALL_1
0x112	          0x488910	                    mov qword [rax], rdx	       127	strbuf.h	FUNCTION_54	CALL_1
0x115	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       127	strbuf.h	FUNCTION_54	CALL_1
0x119	        0x48895008	                mov qword [rax + 8], rdx	       127	strbuf.h	FUNCTION_54	CALL_1
0x11d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       127	strbuf.h	FUNCTION_54	CALL_1
0x121	        0x48895010	             mov qword [rax + 0x10], rdx	       127	strbuf.h	FUNCTION_54	CALL_1
0x125	              0x90	                                     nop	       128	strbuf.h	FUNCTION_54
0x126	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	strbuf.h	FUNCTION_54
0x12a	    0x644833042528	                xor rax, qword fs:[0x28]	       128	strbuf.h	FUNCTION_54
0x133	            0x7405	                            je 0x400017a	       128	strbuf.h	FUNCTION_54
0x135	      0xe800000000	                          call 0x400017a	       128	strbuf.h	FUNCTION_54
0x13a	              0xc9	                                   leave	       128	strbuf.h	FUNCTION_54
0x13b	              0xc3	                                     ret	       128	strbuf.h	FUNCTION_54
show_ident_date	ELSE,1:IF,4:FOR,0:WHILE,0:CALL,4:DO,0:functions,0:SWITCH,0	58
0x10de	              0x55	                                push rbp	       408	pretty.c	WHILE_3	FUNCTION_18
0x10df	          0x4889e5	                            mov rbp, rsp	       408	pretty.c	WHILE_3	FUNCTION_18
0x10e2	        0x4883ec20	                           sub rsp, 0x20	       408	pretty.c	WHILE_3	FUNCTION_18
0x10e6	        0x48897de8	             mov qword [rbp - 0x18], rdi	       408	pretty.c	WHILE_3	FUNCTION_18
0x10ea	        0x488975e0	             mov qword [rbp - 0x20], rsi	       408	pretty.c	WHILE_3	FUNCTION_18
0x10ee	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       409	pretty.c	WHILE_3	FUNCTION_18
0x10f6	    0x48c745f80000	                  mov qword [rbp - 8], 0	       410	pretty.c	WHILE_3	FUNCTION_18
0x10fe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1102	        0x488b4020	            mov rax, qword [rax + 0x20] 	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1106	          0x4885c0	                           test rax, rax	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1109	            0x742b	                            je 0x4001176	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x110b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x110f	        0x488b4028	            mov rax, qword [rax + 0x28] 	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1113	          0x4885c0	                           test rax, rax	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1116	            0x741e	                            je 0x4001176	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x1118	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x111c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x1120	      0xba0a000000	                            mov edx, 0xa	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x1125	      0xbe00000000	                              mov esi, 0	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x112a	          0x4889c7	                            mov rdi, rax	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x112d	      0xe800000000	                          call 0x4001172	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x1132	        0x488945f0	             mov qword [rbp - 0x10], rax	       413	pretty.c	WHILE_3	FUNCTION_18	CALL_1
0x1136	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x113a	          0x4889c7	                            mov rdi, rax	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x113d	      0xe800000000	                          call 0x4001182	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x1142	            0x85c0	                           test eax, eax	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x1144	            0x740a	                            je 0x4001190	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x1146	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x114e	            0xeb54	                           jmp 0x40011e4	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x1150	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x1154	        0x488b4030	            mov rax, qword [rax + 0x30] 	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x1158	          0x4885c0	                           test rax, rax	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x115b	            0x742b	                            je 0x40011c8	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x115d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x1161	        0x488b4038	            mov rax, qword [rax + 0x38] 	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x1165	          0x4885c0	                           test rax, rax	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x1168	            0x741e	                            je 0x40011c8	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x116a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x116e	        0x488b4030	            mov rax, qword [rax + 0x30] 	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x1172	      0xba0a000000	                            mov edx, 0xa	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x1177	      0xbe00000000	                              mov esi, 0	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x117c	          0x4889c7	                            mov rdi, rax	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x117f	      0xe800000000	                          call 0x40011c4	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x1184	        0x488945f8	                mov qword [rbp - 8], rax	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x1188	    0x48817df8feff	        cmp qword [rbp - 8], 0x7ffffffe 	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x1190	            0x7f0a	                            jg 0x40011dc	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x1192	    0x48817df80100	 cmp qword [rbp - 8], 0xffffffff80000001	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x119a	            0x7d08	                           jge 0x40011e4	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x119c	    0x48c745f80000	                  mov qword [rbp - 8], 0	       420	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x11a4	        0x488b45f8	                mov rax, qword [rbp - 8]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11a8	            0x89c1	                            mov ecx, eax	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11aa	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11ae	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11b2	            0x89ce	                            mov esi, ecx	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11b4	          0x4889c7	                            mov rdi, rax	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11b7	      0xe800000000	                          call 0x40011fc	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x11bc	              0xc9	                                   leave	       423	pretty.c	WHILE_3	FUNCTION_18
0x11bd	              0xc3	                                     ret	       423	pretty.c	WHILE_3	FUNCTION_18
find_commit_format_recursive	ELSE,0:IF,4:FOR,1:WHILE,0:CALL,4:DO,0:functions,0:SWITCH,0	80
0x8d3	              0x55	                                push rbp	       114	pretty.c	WHILE_3	FUNCTION_5
0x8d4	          0x4889e5	                            mov rbp, rsp	       114	pretty.c	WHILE_3	FUNCTION_5
0x8d7	        0x4883ec40	                           sub rsp, 0x40	       114	pretty.c	WHILE_3	FUNCTION_5
0x8db	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       114	pretty.c	WHILE_3	FUNCTION_5
0x8df	        0x488975d0	             mov qword [rbp - 0x30], rsi	       114	pretty.c	WHILE_3	FUNCTION_5
0x8e3	          0x8955cc	             mov dword [rbp - 0x34], edx	       114	pretty.c	WHILE_3	FUNCTION_5
0x8e6	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       115	pretty.c	WHILE_3	FUNCTION_5
0x8ee	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       116	pretty.c	WHILE_3	FUNCTION_5
0x8f6	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x8f9	          0x4863d0	                         movsxd rdx, eax	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x8fc	    0x488b05000000	            mov rax, qword [0x04000943] 	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x903	          0x4839c2	                            cmp rdx, rax	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x906	            0x7216	                            jb 0x400095e	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x908	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x90c	          0x4889c6	                            mov rsi, rax	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x90f	      0xbf00000000	                              mov edi, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x914	      0xb800000000	                              mov eax, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x919	      0xe800000000	                          call 0x400095e	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x91e	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x925	      0xe985000000	                           jmp 0x40009ef	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x92a	    0x488b05000000	            mov rax, qword [0x04000971] 	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x931	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x934	          0x4863d2	                         movsxd rdx, edx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x937	        0x48c1e205	                              shl rdx, 5	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x93b	          0x4801d0	                            add rax, rdx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x93e	          0x488b00	                    mov rax, qword [rax]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x941	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x945	          0x4889d6	                            mov rsi, rdx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x948	          0x4889c7	                            mov rdi, rax	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x94b	      0xe800000000	                          call 0x4000990	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x950	            0x85c0	                           test eax, eax	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x952	            0x7456	                            je 0x40009ea	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x954	    0x488b05000000	            mov rax, qword [0x0400099b] 	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x95b	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x95e	          0x4863d2	                         movsxd rdx, edx	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x961	        0x48c1e205	                              shl rdx, 5	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x965	          0x4801d0	                            add rax, rdx	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x968	          0x488b00	                    mov rax, qword [rax]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x96b	          0x4889c7	                            mov rdi, rax	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x96e	      0xe800000000	                          call 0x40009b3	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x973	        0x488945f8	                mov qword [rbp - 8], rax	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x977	      0x48837de800	               cmp qword [rbp - 0x18], 0	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x97c	            0x740a	                            je 0x40009c8	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x97e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x982	        0x483b45f8	                cmp rax, qword [rbp - 8]	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x986	            0x7623	                           jbe 0x40009eb	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x988	    0x488b05000000	            mov rax, qword [0x040009cf] 	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x98f	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x992	          0x4863d2	                         movsxd rdx, edx	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x995	        0x48c1e205	                              shl rdx, 5	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x999	          0x4801d0	                            add rax, rdx	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x99c	        0x488945e8	             mov qword [rbp - 0x18], rax	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x9a0	        0x488b45f8	                mov rax, qword [rbp - 8]	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x9a4	        0x488945f0	             mov qword [rbp - 0x10], rax	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x9a8	            0xeb01	                           jmp 0x40009eb	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x9aa	              0x90	                                     nop	       128	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2
0x9ab	        0x8345e401	               add dword [rbp - 0x1c], 1	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9af	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9b2	          0x4863d0	                         movsxd rdx, eax	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9b5	    0x488b05000000	            mov rax, qword [0x040009fc] 	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9bc	          0x4839c2	                            cmp rdx, rax	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9bf	     0xf8265ffffff	                            jb 0x400096a	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x9c5	      0x48837de800	               cmp qword [rbp - 0x18], 0	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9ca	            0x742c	                            je 0x4000a38	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9cc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9d0	          0x8b4014	            mov eax, dword [rax + 0x14] 	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9d3	            0x85c0	                           test eax, eax	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9d5	            0x7421	                            je 0x4000a38	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x9d7	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9da	          0x8d5001	                      lea edx, [rax + 1]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9e1	        0x488b4018	            mov rax, qword [rax + 0x18] 	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9e5	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9e9	          0x4889ce	                            mov rsi, rcx	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9ec	          0x4889c7	                            mov rdi, rax	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9ef	      0xe8dffeffff	   call sym.find_commit_format_recursive	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9f4	        0x488945e8	             mov qword [rbp - 0x18], rax	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x9f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       143	pretty.c	WHILE_3	FUNCTION_5
0x9fc	              0xc9	                                   leave	       144	pretty.c	WHILE_3	FUNCTION_5
0x9fd	              0xc3	                                     ret	       144	pretty.c	WHILE_3	FUNCTION_5
format_commit_message	ELSE,1:IF,5:FOR,0:WHILE,0:CALL,10:DO,0:functions,0:SWITCH,0	112
0x3ff6	              0x55	                                push rbp	      1510	pretty.c	FUNCTION_44
0x3ff7	          0x4889e5	                            mov rbp, rsp	      1510	pretty.c	FUNCTION_44
0x3ffa	    0x4881ec100100	                          sub rsp, 0x110	      1510	pretty.c	FUNCTION_44
0x4001	    0x4889bd08ffff	             mov qword [rbp - 0xf8], rdi	      1510	pretty.c	FUNCTION_44
0x4008	    0x4889b500ffff	            mov qword [rbp - 0x100], rsi	      1510	pretty.c	FUNCTION_44
0x400f	    0x488995f8feff	            mov qword [rbp - 0x108], rdx	      1510	pretty.c	FUNCTION_44
0x4016	    0x48898df0feff	            mov qword [rbp - 0x110], rcx	      1510	pretty.c	FUNCTION_44
0x401d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1510	pretty.c	FUNCTION_44
0x4026	        0x488945f8	                mov qword [rbp - 8], rax	      1510	pretty.c	FUNCTION_44
0x402a	            0x31c0	                            xor eax, eax	      1510	pretty.c	FUNCTION_44
0x402c	    0x488b85f0feff	            mov rax, qword [rbp - 0x110]	      1512	pretty.c	FUNCTION_44
0x4033	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1512	pretty.c	FUNCTION_44
0x4037	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	      1512	pretty.c	FUNCTION_44
0x403e	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	      1513	pretty.c	FUNCTION_44
0x4049	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	      1515	pretty.c	FUNCTION_44	CALL_1
0x4050	      0xbac0000000	                           mov edx, 0xc0	      1515	pretty.c	FUNCTION_44	CALL_1
0x4055	      0xbe00000000	                              mov esi, 0	      1515	pretty.c	FUNCTION_44	CALL_1
0x405a	          0x4889c7	                            mov rdi, rax	      1515	pretty.c	FUNCTION_44	CALL_1
0x405d	      0xe800000000	                          call 0x40040a2	      1515	pretty.c	FUNCTION_44	CALL_1
0x4062	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1516	pretty.c	FUNCTION_44
0x4069	    0x48898530ffff	             mov qword [rbp - 0xd0], rax	      1516	pretty.c	FUNCTION_44
0x4070	    0x488b85f0feff	            mov rax, qword [rbp - 0x110]	      1517	pretty.c	FUNCTION_44
0x4077	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	      1517	pretty.c	FUNCTION_44
0x407e	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1518	pretty.c	FUNCTION_44
0x4085	        0x488b4008	                mov rax, qword [rax + 8]	      1518	pretty.c	FUNCTION_44
0x4089	        0x488945e8	             mov qword [rbp - 0x18], rax	      1518	pretty.c	FUNCTION_44
0x408d	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	      1523	pretty.c	FUNCTION_44	CALL_2
0x4094	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	      1523	pretty.c	FUNCTION_44	CALL_2
0x409b	        0x488d4858	                   lea rcx, [rax + 0x58]	      1523	pretty.c	FUNCTION_44	CALL_2
0x409f	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1523	pretty.c	FUNCTION_44	CALL_2
0x40a6	          0x4889ce	                            mov rsi, rcx	      1523	pretty.c	FUNCTION_44	CALL_2
0x40a9	          0x4889c7	                            mov rdi, rax	      1523	pretty.c	FUNCTION_44	CALL_2
0x40ac	      0xe800000000	                          call 0x40040f1	      1523	pretty.c	FUNCTION_44	CALL_2
0x40b1	        0x48894580	             mov qword [rbp - 0x80], rax	      1523	pretty.c	FUNCTION_44	CALL_2
0x40b5	    0x488d9530ffff	                   lea rdx, [rbp - 0xd0]	      1527	pretty.c	FUNCTION_44	CALL_3
0x40bc	    0x488bb500ffff	            mov rsi, qword [rbp - 0x100]	      1527	pretty.c	FUNCTION_44	CALL_3
0x40c3	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1527	pretty.c	FUNCTION_44	CALL_3
0x40ca	          0x4889d1	                            mov rcx, rdx	      1527	pretty.c	FUNCTION_44	CALL_3
0x40cd	      0xba00000000	                              mov edx, 0	      1527	pretty.c	FUNCTION_44	CALL_3
0x40d2	          0x4889c7	                            mov rdi, rax	      1527	pretty.c	FUNCTION_44	CALL_3
0x40d5	      0xe800000000	                          call 0x400411a	      1527	pretty.c	FUNCTION_44	CALL_3
0x40da	    0x488db530ffff	                   lea rsi, [rbp - 0xd0]	      1528	pretty.c	FUNCTION_44	CALL_4
0x40e1	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1528	pretty.c	FUNCTION_44	CALL_4
0x40e8	    0x41b800000000	                              mov r8d, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x40ee	      0xb900000000	                              mov ecx, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x40f3	      0xba00000000	                              mov edx, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x40f8	          0x4889c7	                            mov rdi, rax	      1528	pretty.c	FUNCTION_44	CALL_4
0x40fb	      0xe830e5ffff	            call sym.rewrap_message_tail	      1528	pretty.c	FUNCTION_44	CALL_4
0x4100	    0x4883bd18ffff	               cmp qword [rbp - 0xe8], 0	      1531	pretty.c	FUNCTION_44	IF_1
0x4108	            0x742a	                            je 0x4004174	      1531	pretty.c	FUNCTION_44	IF_1
0x410a	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4111	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4118	          0x4889d6	                            mov rsi, rdx	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x411b	          0x4889c7	                            mov rdi, rax	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x411e	      0xe800000000	                          call 0x4004163	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4123	            0x85c0	                           test eax, eax	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4125	            0x743b	                            je 0x40041a2	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4127	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	      1533	pretty.c	FUNCTION_44	IF_1	IF_2
0x4132	            0xeb2e	                           jmp 0x40041a2	      1533	pretty.c	FUNCTION_44	IF_1	IF_2
0x4134	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4138	          0x4885c0	                           test rax, rax	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x413b	            0x7425	                            je 0x40041a2	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x413d	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4141	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4148	          0x4889d6	                            mov rsi, rdx	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x414b	          0x4889c7	                            mov rdi, rax	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x414e	      0xe800000000	                          call 0x4004193	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4153	            0x85c0	                           test eax, eax	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4155	            0x750b	                           jne 0x40041a2	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4157	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1537	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x415b	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	      1537	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4162	    0x4883bd18ffff	               cmp qword [rbp - 0xe8], 0	      1540	pretty.c	FUNCTION_44	IF_4
0x416a	            0x7476	                            je 0x4004222	      1540	pretty.c	FUNCTION_44	IF_4
0x416c	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4173	        0x488b4008	                mov rax, qword [rax + 8]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4177	            0x89c7	                            mov edi, eax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4179	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4180	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4184	    0x488db514ffff	                   lea rsi, [rbp - 0xec]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x418b	    0x488b8d20ffff	             mov rcx, qword [rbp - 0xe0]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4192	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4199	          0x4989f0	                             mov r8, rsi	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x419c	            0x89fe	                            mov esi, edi	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x419e	          0x4889c7	                            mov rdi, rax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x41a1	      0xe800000000	                          call 0x40041e6	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x41a6	    0x48898528ffff	             mov qword [rbp - 0xd8], rax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x41ad	    0x4883bd28ffff	               cmp qword [rbp - 0xd8], 0	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x41b5	            0x742b	                            je 0x4004222	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x41b7	    0x8b8514ffffff	             mov eax, dword [rbp - 0xec]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41bd	          0x83c001	                              add eax, 1	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41c0	          0x4863c8	                         movsxd rcx, eax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41c3	    0x8b8514ffffff	             mov eax, dword [rbp - 0xec]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41c9	          0x4863d0	                         movsxd rdx, eax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41cc	    0x488bb528ffff	             mov rsi, qword [rbp - 0xd8]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41d3	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41da	          0x4889c7	                            mov rdi, rax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41dd	      0xe800000000	                          call 0x4004222	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x41e2	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1548	pretty.c	FUNCTION_44	CALL_9
0x41e6	          0x4889c7	                            mov rdi, rax	      1548	pretty.c	FUNCTION_44	CALL_9
0x41e9	      0xe800000000	                          call 0x400422e	      1548	pretty.c	FUNCTION_44	CALL_9
0x41ee	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      1549	pretty.c	FUNCTION_44	CALL_10
0x41f2	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1549	pretty.c	FUNCTION_44	CALL_10
0x41f9	          0x4889d6	                            mov rsi, rdx	      1549	pretty.c	FUNCTION_44	CALL_10
0x41fc	          0x4889c7	                            mov rdi, rax	      1549	pretty.c	FUNCTION_44	CALL_10
0x41ff	      0xe800000000	                          call 0x4004244	      1549	pretty.c	FUNCTION_44	CALL_10
0x4204	              0x90	                                     nop	      1550	pretty.c	FUNCTION_44
0x4205	        0x488b45f8	                mov rax, qword [rbp - 8]	      1550	pretty.c	FUNCTION_44
0x4209	    0x644833042528	                xor rax, qword fs:[0x28]	      1550	pretty.c	FUNCTION_44
0x4212	            0x7405	                            je 0x4004259	      1550	pretty.c	FUNCTION_44
0x4214	      0xe800000000	                          call 0x4004259	      1550	pretty.c	FUNCTION_44
0x4219	              0xc9	                                   leave	      1550	pretty.c	FUNCTION_44
0x421a	              0xc3	                                     ret	      1550	pretty.c	FUNCTION_44
parse_color	ELSE,5:IF,12:FOR,0:WHILE,0:CALL,15:DO,0:functions,0:SWITCH,0	167
0x2772	              0x55	                                push rbp	       938	pretty.c	WHILE_3	FUNCTION_36
0x2773	          0x4889e5	                            mov rbp, rsp	       938	pretty.c	WHILE_3	FUNCTION_36
0x2776	    0x4881eca00000	                           sub rsp, 0xa0	       938	pretty.c	WHILE_3	FUNCTION_36
0x277d	    0x4889bd78ffff	             mov qword [rbp - 0x88], rdi	       938	pretty.c	WHILE_3	FUNCTION_36
0x2784	    0x4889b570ffff	             mov qword [rbp - 0x90], rsi	       938	pretty.c	WHILE_3	FUNCTION_36
0x278b	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       938	pretty.c	WHILE_3	FUNCTION_36
0x2792	    0x64488b042528	                mov rax, qword fs:[0x28]	       938	pretty.c	WHILE_3	FUNCTION_36
0x279b	        0x488945f8	                mov qword [rbp - 8], rax	       938	pretty.c	WHILE_3	FUNCTION_36
0x279f	            0x31c0	                            xor eax, eax	       938	pretty.c	WHILE_3	FUNCTION_36
0x27a1	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       939	pretty.c	WHILE_3	FUNCTION_36
0x27a8	        0x48894580	             mov qword [rbp - 0x80], rax	       939	pretty.c	WHILE_3	FUNCTION_36
0x27ac	    0x48c745900000	               mov qword [rbp - 0x70], 0	       940	pretty.c	WHILE_3	FUNCTION_36
0x27b4	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27bb	        0x4883c001	                              add rax, 1	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27bf	           0xfb600	                   movzx eax, byte [rax]	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27c2	            0x3c28	                            cmp al, 0x28	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27c4	     0xf8541010000	                           jne 0x400294b	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27ca	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27d1	        0x4883c002	                              add rax, 2	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27d5	        0x48894588	             mov qword [rbp - 0x78], rax	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x27d9	        0x488b4588	             mov rax, qword [rbp - 0x78]	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x27dd	      0xbe29000000	                           mov esi, 0x29	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x27e2	          0x4889c7	                            mov rdi, rax	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x27e5	      0xe800000000	                          call 0x400282a	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x27ea	        0x48894598	             mov qword [rbp - 0x68], rax	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x27ee	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x27f3	            0x750a	                           jne 0x400283f	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x27f5	      0xb800000000	                              mov eax, 0	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x27fa	      0xe910020000	                           jmp 0x4002a4f	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x27ff	        0x488b4588	             mov rax, qword [rbp - 0x78]	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x2803	        0x488d5588	                   lea rdx, [rbp - 0x78]	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x2807	      0xbe00000000	                              mov esi, 0	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x280c	          0x4889c7	                            mov rdi, rax	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x280f	      0xe8ecd7ffff	                    call sym.skip_prefix	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x2814	            0x85c0	                           test eax, eax	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x2816	            0x7438	                            je 0x4002890	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x2818	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x281f	        0x488b4008	                mov rax, qword [rax + 8]	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2823	          0x8b4068	            mov eax, dword [rax + 0x68] 	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2826	            0x89c6	                            mov esi, eax	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2828	      0xbf01000000	                              mov edi, 1	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x282d	      0xe800000000	                          call 0x4002872	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2832	            0x85c0	                           test eax, eax	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2834	            0x756b	                           jne 0x40028e1	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x2836	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x283a	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x2841	          0x4829c2	                            sub rdx, rax	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x2844	          0x4889d0	                            mov rax, rdx	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x2847	        0x4883c001	                              add rax, 1	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x284b	      0xe9bf010000	                           jmp 0x4002a4f	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x2850	        0x488b4588	             mov rax, qword [rbp - 0x78]	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2854	        0x488d5588	                   lea rdx, [rbp - 0x78]	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2858	      0xbe00000000	                              mov esi, 0	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x285d	          0x4889c7	                            mov rdi, rax	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2860	      0xe89bd7ffff	                    call sym.skip_prefix	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2865	            0x85c0	                           test eax, eax	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2867	            0x7538	                           jne 0x40028e1	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x2869	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2870	        0x488b4008	                mov rax, qword [rax + 8]	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2874	          0x8b4068	            mov eax, dword [rax + 0x68] 	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2877	            0x89c6	                            mov esi, eax	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2879	      0xbf01000000	                              mov edi, 1	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x287e	      0xe800000000	                          call 0x40028c3	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2883	            0x85c0	                           test eax, eax	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2885	            0x751a	                           jne 0x40028e1	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x2887	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x288b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x2892	          0x4829c2	                            sub rdx, rax	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x2895	          0x4889d0	                            mov rax, rdx	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x2898	        0x4883c001	                              add rax, 1	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x289c	      0xe96e010000	                           jmp 0x4002a4f	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x28a1	        0x488b4598	             mov rax, qword [rbp - 0x68]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28a5	        0x488b5588	             mov rdx, qword [rbp - 0x78]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28a9	          0x4829d0	                            sub rax, rdx	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28ac	            0x89c1	                            mov ecx, eax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28ae	        0x488b4588	             mov rax, qword [rbp - 0x78]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28b2	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28b6	            0x89ce	                            mov esi, ecx	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28b8	          0x4889c7	                            mov rdi, rax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28bb	      0xe800000000	                          call 0x4002900	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28c0	            0x85c0	                           test eax, eax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28c2	            0x7917	                           jns 0x400291b	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x28c4	      0xbf00000000	                              mov edi, 0	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x28c9	      0xe8e1d9ffff	                               call sym.	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x28ce	          0x4889c7	                            mov rdi, rax	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x28d1	      0xb800000000	                              mov eax, 0	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x28d6	      0xe800000000	                          call 0x400291b	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x28db	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x28df	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x28e6	          0x4889d6	                            mov rsi, rdx	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x28e9	          0x4889c7	                            mov rdi, rax	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x28ec	      0xe889d9ffff	                  call sym.strbuf_addstr	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x28f1	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x28f5	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x28fc	          0x4829c2	                            sub rdx, rax	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x28ff	          0x4889d0	                            mov rax, rdx	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x2902	        0x4883c001	                              add rax, 1	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x2906	      0xe904010000	                           jmp 0x4002a4f	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x290b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x2912	        0x488d4801	                      lea rcx, [rax + 1]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x2916	        0x488d4580	                   lea rax, [rbp - 0x80]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x291a	          0x4889c2	                            mov rdx, rax	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x291d	      0xbe00000000	                              mov esi, 0	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x2922	          0x4889cf	                            mov rdi, rcx	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x2925	      0xe8d6d6ffff	                    call sym.skip_prefix	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x292a	            0x85c0	                           test eax, eax	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x292c	            0x740d	                            je 0x400297b	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x292e	    0x48c745900000	               mov qword [rbp - 0x70], 0	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x2936	      0xe985000000	                           jmp 0x4002a00	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x293b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x2942	        0x488d4801	                      lea rcx, [rax + 1]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x2946	        0x488d4580	                   lea rax, [rbp - 0x80]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x294a	          0x4889c2	                            mov rdx, rax	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x294d	      0xbe00000000	                              mov esi, 0	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x2952	          0x4889cf	                            mov rdi, rcx	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x2955	      0xe8a6d6ffff	                    call sym.skip_prefix	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x295a	            0x85c0	                           test eax, eax	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x295c	            0x740a	                            je 0x40029a8	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x295e	    0x48c745900000	               mov qword [rbp - 0x70], 0	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x2966	            0xeb58	                           jmp 0x4002a00	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x2968	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x296f	        0x488d4801	                      lea rcx, [rax + 1]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x2973	        0x488d4580	                   lea rax, [rbp - 0x80]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x2977	          0x4889c2	                            mov rdx, rax	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x297a	      0xbe00000000	                              mov esi, 0	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x297f	          0x4889cf	                            mov rdi, rcx	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x2982	      0xe879d6ffff	                    call sym.skip_prefix	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x2987	            0x85c0	                           test eax, eax	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x2989	            0x740a	                            je 0x40029d5	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x298b	    0x48c745900000	               mov qword [rbp - 0x70], 0	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x2993	            0xeb2b	                           jmp 0x4002a00	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x2995	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x299c	        0x488d4801	                      lea rcx, [rax + 1]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29a0	        0x488d4580	                   lea rax, [rbp - 0x80]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29a4	          0x4889c2	                            mov rdx, rax	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29a7	      0xbe00000000	                              mov esi, 0	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29ac	          0x4889cf	                            mov rdi, rcx	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29af	      0xe84cd6ffff	                    call sym.skip_prefix	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29b4	            0x85c0	                           test eax, eax	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29b6	            0x7408	                            je 0x4002a00	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x29b8	    0x48c745900000	               mov qword [rbp - 0x70], 0	       979	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11
0x29c0	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29c5	            0x7434	                            je 0x4002a3b	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29c7	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29ce	        0x488b4008	                mov rax, qword [rax + 8]	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29d2	          0x8b4068	            mov eax, dword [rax + 0x68] 	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29d5	            0x89c6	                            mov esi, eax	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29d7	      0xbf01000000	                              mov edi, 1	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29dc	      0xe800000000	                          call 0x4002a21	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29e1	            0x85c0	                           test eax, eax	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29e3	            0x7416	                            je 0x4002a3b	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x29e5	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x29e9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x29f0	          0x4889d6	                            mov rsi, rdx	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x29f3	          0x4889c7	                            mov rdi, rax	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x29f6	      0xe87fd8ffff	                  call sym.strbuf_addstr	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x29fb	        0x488b4580	             mov rax, qword [rbp - 0x80]	       984	pretty.c	WHILE_3	FUNCTION_36
0x29ff	          0x4889c2	                            mov rdx, rax	       984	pretty.c	WHILE_3	FUNCTION_36
0x2a02	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       984	pretty.c	WHILE_3	FUNCTION_36
0x2a09	          0x4829c2	                            sub rdx, rax	       984	pretty.c	WHILE_3	FUNCTION_36
0x2a0c	          0x4889d0	                            mov rax, rdx	       984	pretty.c	WHILE_3	FUNCTION_36
0x2a0f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       985	pretty.c	WHILE_3	FUNCTION_36
0x2a13	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       985	pretty.c	WHILE_3	FUNCTION_36
0x2a1c	            0x7405	                            je 0x4002a63	       985	pretty.c	WHILE_3	FUNCTION_36
0x2a1e	      0xe800000000	                          call 0x4002a63	       985	pretty.c	WHILE_3	FUNCTION_36
0x2a23	              0xc9	                                   leave	       985	pretty.c	WHILE_3	FUNCTION_36
0x2a24	              0xc3	                                     ret	       985	pretty.c	WHILE_3	FUNCTION_36
has_non_ascii	ELSE,0:IF,2:FOR,0:WHILE,1:CALL,1:DO,0:functions,0:SWITCH,0	26
0xbfe	              0x55	                                push rbp	       211	pretty.c	WHILE_3	FUNCTION_10
0xbff	          0x4889e5	                            mov rbp, rsp	       211	pretty.c	WHILE_3	FUNCTION_10
0xc02	        0x4883ec18	                           sub rsp, 0x18	       211	pretty.c	WHILE_3	FUNCTION_10
0xc06	        0x48897de8	             mov qword [rbp - 0x18], rdi	       211	pretty.c	WHILE_3	FUNCTION_10
0xc0a	      0x48837de800	               cmp qword [rbp - 0x18], 0	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0xc0f	            0x751c	                           jne 0x4000c6d	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0xc11	      0xb800000000	                              mov eax, 0	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0xc16	            0xeb35	                           jmp 0x4000c8d	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0xc18	          0x8b45fc	                mov eax, dword [rbp - 4]	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0xc1b	            0x89c7	                            mov edi, eax	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0xc1d	      0xe8b7ffffff	                      call sym.non_ascii	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0xc22	            0x85c0	                           test eax, eax	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0xc24	            0x7407	                            je 0x4000c6d	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0xc26	      0xb801000000	                              mov eax, 1	       217	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2
0xc2b	            0xeb20	                           jmp 0x4000c8d	       217	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2
0xc2d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc31	        0x488d5001	                      lea rdx, [rax + 1]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc35	        0x488955e8	             mov qword [rbp - 0x18], rdx	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc39	           0xfb600	                   movzx eax, byte [rax]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc3c	           0xfbec0	                           movsx eax, al	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc3f	          0x8945fc	                mov dword [rbp - 4], eax	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc42	        0x837dfc00	                  cmp dword [rbp - 4], 0	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc46	            0x75d0	                           jne 0x4000c58	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0xc48	      0xb800000000	                              mov eax, 0	       219	pretty.c	WHILE_3	FUNCTION_10
0xc4d	              0xc9	                                   leave	       220	pretty.c	WHILE_3	FUNCTION_10
0xc4e	              0xc3	                                     ret	       220	pretty.c	WHILE_3	FUNCTION_10
pp_commit_easy	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,1:DO,0:functions,0:SWITCH,0	29
0x4d3e	              0x55	                                push rbp	      1867	pretty.c	FUNCTION_53
0x4d3f	          0x4889e5	                            mov rbp, rsp	      1867	pretty.c	FUNCTION_53
0x4d42	    0x4881ecd00000	                           sub rsp, 0xd0	      1867	pretty.c	FUNCTION_53
0x4d49	    0x89bd4cffffff	             mov dword [rbp - 0xb4], edi	      1867	pretty.c	FUNCTION_53
0x4d4f	    0x4889b540ffff	             mov qword [rbp - 0xc0], rsi	      1867	pretty.c	FUNCTION_53
0x4d56	    0x48899538ffff	             mov qword [rbp - 0xc8], rdx	      1867	pretty.c	FUNCTION_53
0x4d5d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1867	pretty.c	FUNCTION_53
0x4d66	        0x488945f8	                mov qword [rbp - 8], rax	      1867	pretty.c	FUNCTION_53
0x4d6a	            0x31c0	                            xor eax, eax	      1867	pretty.c	FUNCTION_53
0x4d6c	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	      1868	pretty.c	FUNCTION_53
0x4d73	      0xb800000000	                              mov eax, 0	      1868	pretty.c	FUNCTION_53
0x4d78	      0xb914000000	                           mov ecx, 0x14	      1868	pretty.c	FUNCTION_53
0x4d7d	          0x4889d7	                            mov rdi, rdx	      1868	pretty.c	FUNCTION_53
0x4d80	          0xf348ab	              rep stosq qword [rdi], rax	      1868	pretty.c	FUNCTION_53
0x4d83	    0x8b854cffffff	             mov eax, dword [rbp - 0xb4]	      1869	pretty.c	FUNCTION_53
0x4d89	    0x898550ffffff	             mov dword [rbp - 0xb0], eax	      1869	pretty.c	FUNCTION_53
0x4d8f	    0x488b9538ffff	             mov rdx, qword [rbp - 0xc8]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4d96	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4d9d	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4da4	          0x4889ce	                            mov rsi, rcx	      1870	pretty.c	FUNCTION_53	CALL_1
0x4da7	          0x4889c7	                            mov rdi, rax	      1870	pretty.c	FUNCTION_53	CALL_1
0x4daa	      0xe800000000	                          call 0x4004def	      1870	pretty.c	FUNCTION_53	CALL_1
0x4daf	              0x90	                                     nop	      1871	pretty.c	FUNCTION_53
0x4db0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1871	pretty.c	FUNCTION_53
0x4db4	    0x644833042528	                xor rax, qword fs:[0x28]	      1871	pretty.c	FUNCTION_53
0x4dbd	            0x7405	                            je 0x4004e04	      1871	pretty.c	FUNCTION_53
0x4dbf	      0xe800000000	                          call 0x4004e04	      1871	pretty.c	FUNCTION_53
0x4dc4	              0xc9	                                   leave	      1871	pretty.c	FUNCTION_53
0x4dc5	              0xc3	                                     ret	      1871	pretty.c	FUNCTION_53
pp_header	ELSE,0:IF,8:FOR,1:WHILE,0:CALL,13:DO,0:functions,0:SWITCH,0	140
0x421b	              0x55	                                push rbp	      1557	pretty.c	FUNCTION_45
0x421c	          0x4889e5	                            mov rbp, rsp	      1557	pretty.c	FUNCTION_45
0x421f	        0x4883ec60	                           sub rsp, 0x60	      1557	pretty.c	FUNCTION_45
0x4223	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1557	pretty.c	FUNCTION_45
0x4227	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1557	pretty.c	FUNCTION_45
0x422b	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1557	pretty.c	FUNCTION_45
0x422f	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1557	pretty.c	FUNCTION_45
0x4233	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1557	pretty.c	FUNCTION_45
0x4237	    0x64488b042528	                mov rax, qword fs:[0x28]	      1557	pretty.c	FUNCTION_45
0x4240	        0x488945f8	                mov qword [rbp - 8], rax	      1557	pretty.c	FUNCTION_45
0x4244	            0x31c0	                            xor eax, eax	      1557	pretty.c	FUNCTION_45
0x4246	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1558	pretty.c	FUNCTION_45
0x424d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1561	pretty.c	FUNCTION_45	FOR_1
0x4251	          0x488b00	                    mov rax, qword [rax]	      1561	pretty.c	FUNCTION_45	FOR_1
0x4254	        0x488945f0	             mov qword [rbp - 0x10], rax	      1561	pretty.c	FUNCTION_45	FOR_1
0x4258	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x425c	          0x488b00	                    mov rax, qword [rax]	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x425f	          0x4889c7	                            mov rdi, rax	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x4262	      0xe836c9ffff	                   call sym.get_one_line	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x4267	          0x8945e0	             mov dword [rbp - 0x20], eax	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x426a	        0x837de000	               cmp dword [rbp - 0x20], 0	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x426e	     0xf8492010000	                            je 0x4004446	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4274	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1566	pretty.c	FUNCTION_45	FOR_1
0x4278	          0x488b10	                    mov rdx, qword [rax]	      1566	pretty.c	FUNCTION_45	FOR_1
0x427b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1566	pretty.c	FUNCTION_45	FOR_1
0x427e	            0x4898	                                    cdqe	      1566	pretty.c	FUNCTION_45	FOR_1
0x4280	          0x4801c2	                            add rdx, rax	      1566	pretty.c	FUNCTION_45	FOR_1
0x4283	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1566	pretty.c	FUNCTION_45	FOR_1
0x4287	          0x488910	                    mov qword [rax], rdx	      1566	pretty.c	FUNCTION_45	FOR_1
0x428a	        0x837de001	               cmp dword [rbp - 0x20], 1	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x428e	     0xf8475010000	                            je 0x4004449	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x4294	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x4298	            0x8b00	                    mov eax, dword [rax]	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x429a	            0x85c0	                           test eax, eax	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x429c	            0x751e	                           jne 0x40042fc	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x429e	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42a1	          0x4863d0	                         movsxd rdx, eax	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42a4	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42a8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42ac	          0x4889ce	                            mov rsi, rcx	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42af	          0x4889c7	                            mov rdi, rax	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42b2	      0xe800000000	                          call 0x40042f7	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x42b7	      0xe945010000	                           jmp 0x4004441	      1574	pretty.c	FUNCTION_45	FOR_1	IF_3
0x42bc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42c0	      0xbe00000000	                              mov esi, 0	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42c5	          0x4889c7	                            mov rdi, rax	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42c8	      0xe800000000	                          call 0x400430d	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42cd	            0x85c0	                           test eax, eax	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42cf	            0x7419	                            je 0x400432a	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x42d1	        0x837de030	           cmp dword [rbp - 0x20], 0x30 	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x42d5	     0xf8425010000	                            je 0x4004440	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x42db	      0xbf00000000	                              mov edi, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x42e0	      0xb800000000	                              mov eax, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x42e5	      0xe800000000	                          call 0x400432a	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x42ea	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x42ee	            0x754b	                           jne 0x400437b	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x42f0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x42f4	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x42f8	          0x4889c7	                            mov rdi, rax	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x42fb	      0xe800000000	                          call 0x4004340	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4300	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4303	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4306	          0x6bc032	                     imul eax, eax, 0x32	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4309	          0x83c014	                           add eax, 0x14	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x430c	            0x89c2	                            mov edx, eax	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x430e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4312	          0x4889d6	                            mov rsi, rdx	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4315	          0x4889c7	                            mov rdi, rax	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4318	      0xe800000000	                          call 0x400435d	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x431d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4321	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4325	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4329	          0x4889ce	                            mov rsi, rcx	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x432c	          0x4889c7	                            mov rdi, rax	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x432f	      0xe821d5ffff	                 call sym.add_merge_info	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4334	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x433b	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x433f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4343	      0xbe00000000	                              mov esi, 0	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4348	          0x4889c7	                            mov rdi, rax	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x434b	      0xe8b0bcffff	                    call sym.skip_prefix	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4350	            0x85c0	                           test eax, eax	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4352	            0x7438	                            je 0x40043cc	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4354	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4357	          0x83c050	                           add eax, 0x50	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x435a	          0x4863d0	                         movsxd rdx, eax	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x435d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4361	          0x4889d6	                            mov rsi, rdx	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4364	          0x4889c7	                            mov rdi, rax	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4367	      0xe800000000	                          call 0x40043ac	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x436c	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4370	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4374	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4378	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x437c	          0x4989f0	                             mov r8, rsi	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x437f	      0xbe00000000	                              mov esi, 0	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4384	          0x4889c7	                            mov rdi, rax	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4387	      0xe800000000	                          call 0x40043cc	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x438c	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4390	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4394	      0xbe00000000	                              mov esi, 0	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4399	          0x4889c7	                            mov rdi, rax	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x439c	      0xe85fbcffff	                    call sym.skip_prefix	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x43a1	            0x85c0	                           test eax, eax	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x43a3	     0xf84a4feffff	                            je 0x400428d	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x43a9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43ad	            0x8b00	                    mov eax, dword [rax]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43af	          0x83f803	                              cmp eax, 3	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x43b2	            0x740f	                            je 0x4004403	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x43b4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43b8	            0x8b00	                    mov eax, dword [rax]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43ba	          0x83f804	                              cmp eax, 4	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43bd	     0xf858afeffff	                           jne 0x400428d	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x43c3	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43c6	          0x83c050	                           add eax, 0x50	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43c9	          0x4863d0	                         movsxd rdx, eax	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43cc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43d0	          0x4889d6	                            mov rsi, rdx	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43d3	          0x4889c7	                            mov rdi, rax	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43d6	      0xe800000000	                          call 0x400441b	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x43db	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43df	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43e3	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43e7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43eb	          0x4989f0	                             mov r8, rsi	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43ee	      0xbe00000000	                              mov esi, 0	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43f3	          0x4889c7	                            mov rdi, rax	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43f6	      0xe800000000	                          call 0x400443b	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x43fb	      0xe94dfeffff	                           jmp 0x400428d	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4400	              0x90	                                     nop	      1580	pretty.c	FUNCTION_45	FOR_1	IF_4
0x4401	      0xe947feffff	                           jmp 0x400428d	      1605	pretty.c	FUNCTION_45	FOR_1
0x4406	              0x90	                                     nop	      1565	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4407	            0xeb01	                           jmp 0x400444a	      1565	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4409	              0x90	                                     nop	      1570	pretty.c	FUNCTION_45	FOR_1	IF_2
0x440a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1606	pretty.c	FUNCTION_45
0x440e	    0x644833042528	                xor rax, qword fs:[0x28]	      1606	pretty.c	FUNCTION_45
0x4417	            0x7405	                            je 0x400445e	      1606	pretty.c	FUNCTION_45
0x4419	      0xe800000000	                          call 0x400445e	      1606	pretty.c	FUNCTION_45
0x441e	              0xc9	                                   leave	      1606	pretty.c	FUNCTION_45
0x441f	              0xc3	                                     ret	      1606	pretty.c	FUNCTION_45
commit_format_is_empty	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	14
0x3ab	              0x55	                                push rbp	        31	pretty.c	WHILE_3	FUNCTION_1
0x3ac	          0x4889e5	                            mov rbp, rsp	        31	pretty.c	WHILE_3	FUNCTION_1
0x3af	          0x897dfc	                mov dword [rbp - 4], edi	        31	pretty.c	WHILE_3	FUNCTION_1
0x3b2	        0x837dfc08	                  cmp dword [rbp - 4], 8	        32	pretty.c	WHILE_3	FUNCTION_1
0x3b6	            0x7515	                           jne 0x400040d	        32	pretty.c	WHILE_3	FUNCTION_1
0x3b8	    0x488b05000000	            mov rax, qword [0x040003ff] 	        32	pretty.c	WHILE_3	FUNCTION_1
0x3bf	           0xfb600	                   movzx eax, byte [rax]	        32	pretty.c	WHILE_3	FUNCTION_1
0x3c2	            0x84c0	                             test al, al	        32	pretty.c	WHILE_3	FUNCTION_1
0x3c4	            0x7507	                           jne 0x400040d	        32	pretty.c	WHILE_3	FUNCTION_1
0x3c6	      0xb801000000	                              mov eax, 1	        32	pretty.c	WHILE_3	FUNCTION_1
0x3cb	            0xeb05	                           jmp 0x4000412	        32	pretty.c	WHILE_3	FUNCTION_1
0x3cd	      0xb800000000	                              mov eax, 0	        32	pretty.c	WHILE_3	FUNCTION_1
0x3d2	              0x5d	                                 pop rbp	        33	pretty.c	WHILE_3	FUNCTION_1
0x3d3	              0xc3	                                     ret	        33	pretty.c	WHILE_3	FUNCTION_1
strbuf_setlen	ELSE,1:IF,2:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	43
0x172	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_56
0x173	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_56
0x176	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_56
0x17a	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_56
0x17e	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_56
0x182	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_56	IF_1
0x186	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_56	IF_1
0x189	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_56	IF_1
0x18c	            0x740d	                            je 0x40001db	       162	strbuf.h	FUNCTION_56	IF_1
0x18e	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_56	IF_1
0x192	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_56	IF_1
0x195	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_56	IF_1
0x199	            0xeb05	                           jmp 0x40001e0	       162	strbuf.h	FUNCTION_56	IF_1
0x19b	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_56	IF_1
0x1a0	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_56	IF_1
0x1a4	            0x730f	                           jae 0x40001f5	       162	strbuf.h	FUNCTION_56	IF_1
0x1a6	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_56	CALL_1
0x1ab	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_56	CALL_1
0x1b0	      0xe800000000	                          call 0x40001f5	       163	strbuf.h	FUNCTION_56	CALL_1
0x1b5	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_56
0x1b9	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_56
0x1bd	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_56
0x1c1	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_56	IF_2
0x1c5	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_56	IF_2
0x1c9	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_56	IF_2
0x1cf	            0x7414	                            je 0x4000225	       165	strbuf.h	FUNCTION_56	IF_2
0x1d1	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_56	IF_2
0x1d5	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_56	IF_2
0x1d9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_56	IF_2
0x1dd	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_56	IF_2
0x1e0	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_56	IF_2
0x1e3	            0xeb24	                           jmp 0x4000249	       169	strbuf.h	FUNCTION_56
0x1e5	     0xfb605000000	           movzx eax, byte [0x0400022c] 	       168	strbuf.h	FUNCTION_56	CALL_2
0x1ec	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_56	CALL_2
0x1ee	            0x7419	                            je 0x4000249	       168	strbuf.h	FUNCTION_56	CALL_2
0x1f0	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x1f5	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_56	CALL_2
0x1fa	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x1ff	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x204	      0xe800000000	                          call 0x4000249	       168	strbuf.h	FUNCTION_56	CALL_2
0x209	              0x90	                                     nop	       169	strbuf.h	FUNCTION_56
0x20a	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_56
0x20b	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_56
setup_commit_formats	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,5:DO,0:functions,0:SWITCH,0	83
0x6ff	              0x55	                                push rbp	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x700	          0x4889e5	                            mov rbp, rsp	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x703	    0x4881ec100100	                          sub rsp, 0x110	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x70a	    0x64488b042528	                mov rax, qword fs:[0x28]	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x713	        0x488945f8	                mov qword [rbp - 8], rax	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x717	            0x31c0	                            xor eax, eax	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x719	    0x488d95f0feff	                  lea rdx, [rbp - 0x110]	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x720	      0xb800000000	                              mov eax, 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x725	      0xb920000000	                           mov ecx, 0x20	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x72a	          0x4889d7	                            mov rdi, rdx	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x72d	          0xf348ab	              rep stosq qword [rdi], rax	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x730	    0x48c785f0feff	              mov qword [rbp - 0x110], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x73b	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x746	    0xc78518ffffff	               mov dword [rbp - 0xe8], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x750	    0xc78520ffffff	               mov dword [rbp - 0xe0], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x75a	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x765	    0xc78538ffffff	               mov dword [rbp - 0xc8], 2	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x76f	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x77a	    0xc78558ffffff	               mov dword [rbp - 0xa8], 6	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x784	    0x48c78570ffff	               mov qword [rbp - 0x90], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x78f	    0xc78578ffffff	               mov dword [rbp - 0x88], 7	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x799	    0x48c745900000	               mov qword [rbp - 0x70], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7a1	    0xc74598040000	               mov dword [rbp - 0x68], 4	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7a8	    0xc745a0080000	               mov dword [rbp - 0x60], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7af	    0x48c745b00000	               mov qword [rbp - 0x50], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7b7	    0xc745b8030000	               mov dword [rbp - 0x48], 3	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7be	    0xc745c0080000	               mov dword [rbp - 0x40], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7c5	    0x48c745d00000	               mov qword [rbp - 0x30], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7cd	    0xc745d8050000	               mov dword [rbp - 0x28], 5	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7d4	    0xc745dc010000	               mov dword [rbp - 0x24], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7db	    0x48c705000000	               mov qword [0x04000826], 8	       102	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x7e6	    0x488b05000000	            mov rax, qword [0x0400082d] 	       103	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7ed	    0x488905000000	            mov qword [0x04000834], rax 	       103	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x7f4	    0x488b15000000	            mov rdx, qword [0x0400083b] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x7fb	    0x488b05000000	            mov rax, qword [0x04000842] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x802	          0x4839c2	                            cmp rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x805	     0xf8684000000	                           jbe 0x40008cf	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x80b	    0x488b15000000	            mov rdx, qword [0x04000852] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x812	          0x4889d0	                            mov rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x815	          0x4801c0	                            add rax, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x818	          0x4801d0	                            add rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x81b	        0x4883c030	                           add rax, 0x30	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x81f	          0x48d1e8	                              shr rax, 1	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x822	          0x4889c2	                            mov rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x825	    0x488b05000000	            mov rax, qword [0x0400086c] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x82c	          0x4839c2	                            cmp rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x82f	            0x7310	                           jae 0x4000881	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x831	    0x488b05000000	            mov rax, qword [0x04000878] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x838	    0x488905000000	            mov qword [0x0400087f], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x83f	            0xeb1e	                           jmp 0x400089f	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x841	    0x488b15000000	            mov rdx, qword [0x04000888] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x848	          0x4889d0	                            mov rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x84b	          0x4801c0	                            add rax, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x84e	          0x4801d0	                            add rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x851	        0x4883c030	                           add rax, 0x30	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x855	          0x48d1e8	                              shr rax, 1	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x858	    0x488905000000	            mov qword [0x0400089f], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x85f	    0x488b05000000	            mov rax, qword [0x040008a6] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x866	          0x4889c6	                            mov rsi, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x869	      0xbf20000000	                           mov edi, 0x20	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x86e	      0xe8e3f7ffff	                        call sym.st_mult	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x873	          0x4889c2	                            mov rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x876	    0x488b05000000	            mov rax, qword [0x040008bd] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x87d	          0x4889d6	                            mov rsi, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x880	          0x4889c7	                            mov rdi, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x883	      0xe800000000	                          call 0x40008c8	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x888	    0x488905000000	            mov qword [0x040008cf], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x88f	    0x488b05000000	            mov rax, qword [0x040008d6] 	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x896	    0x488d8df0feff	                  lea rcx, [rbp - 0x110]	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x89d	      0xba00010000	                          mov edx, 0x100	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x8a2	          0x4889ce	                            mov rsi, rcx	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x8a5	          0x4889c7	                            mov rdi, rax	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x8a8	      0xe800000000	                          call 0x40008ed	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_3
0x8ad	      0xbe00000000	                              mov esi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x8b2	      0xbf00000000	                              mov edi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x8b7	      0xe800000000	                          call 0x40008fc	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x8bc	              0x90	                                     nop	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8bd	        0x488b45f8	                mov rax, qword [rbp - 8]	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8c1	    0x644833042528	                xor rax, qword fs:[0x28]	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8ca	            0x7405	                            je 0x4000911	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8cc	      0xe800000000	                          call 0x4000911	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8d1	              0xc9	                                   leave	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x8d2	              0xc3	                                     ret	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
add_rfc822_quoted	ELSE,0:IF,0:FOR,1:WHILE,0:CALL,5:DO,0:functions,0:SWITCH,1	54
0xd20	              0x55	                                push rbp	       265	pretty.c	WHILE_3	FUNCTION_14
0xd21	          0x4889e5	                            mov rbp, rsp	       265	pretty.c	WHILE_3	FUNCTION_14
0xd24	        0x4883ec30	                           sub rsp, 0x30	       265	pretty.c	WHILE_3	FUNCTION_14
0xd28	        0x48897de8	             mov qword [rbp - 0x18], rdi	       265	pretty.c	WHILE_3	FUNCTION_14
0xd2c	        0x488975e0	             mov qword [rbp - 0x20], rsi	       265	pretty.c	WHILE_3	FUNCTION_14
0xd30	          0x8955dc	             mov dword [rbp - 0x24], edx	       265	pretty.c	WHILE_3	FUNCTION_14
0xd33	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd36	          0x83c002	                              add eax, 2	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd39	          0x4863d0	                         movsxd rdx, eax	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd3c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd40	          0x4889d6	                            mov rsi, rdx	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd43	          0x4889c7	                            mov rdi, rax	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd46	      0xe800000000	                          call 0x4000d8b	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0xd4b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0xd4f	      0xbe22000000	                           mov esi, 0x22	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0xd54	          0x4889c7	                            mov rdi, rax	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0xd57	      0xe8b0f4ffff	                   call sym.strbuf_addch	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0xd5c	    0xc745fc000000	                  mov dword [rbp - 4], 0	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xd63	            0xeb53	                           jmp 0x4000df8	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xd65	          0x8b45fc	                mov eax, dword [rbp - 4]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd68	          0x4863d0	                         movsxd rdx, eax	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd6b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd6f	          0x4801d0	                            add rax, rdx	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd72	           0xfb600	                   movzx eax, byte [rax]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd75	           0xfbec0	                           movsx eax, al	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd78	          0x83f822	                           cmp eax, 0x22	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd7b	            0x7405	                            je 0x4000dc2	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd7d	          0x83f85c	                           cmp eax, 0x5c	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd80	            0x7511	                           jne 0x4000dd3	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0xd82	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0xd86	      0xbe5c000000	                           mov esi, 0x5c	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0xd8b	          0x4889c7	                            mov rdi, rax	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0xd8e	      0xe879f4ffff	                   call sym.strbuf_addch	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0xd93	          0x8b45fc	                mov eax, dword [rbp - 4]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xd96	          0x4863d0	                         movsxd rdx, eax	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xd99	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xd9d	          0x4801d0	                            add rax, rdx	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xda0	           0xfb600	                   movzx eax, byte [rax]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xda3	           0xfbed0	                           movsx edx, al	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xda6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xdaa	            0x89d6	                            mov esi, edx	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xdac	          0x4889c7	                            mov rdi, rax	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xdaf	      0xe858f4ffff	                   call sym.strbuf_addch	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0xdb4	        0x8345fc01	                  add dword [rbp - 4], 1	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xdb8	          0x8b45fc	                mov eax, dword [rbp - 4]	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xdbb	          0x3b45dc	             cmp eax, dword [rbp - 0x24]	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xdbe	            0x7ca5	                            jl 0x4000da5	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0xdc0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0xdc4	      0xbe22000000	                           mov esi, 0x22	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0xdc9	          0x4889c7	                            mov rdi, rax	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0xdcc	      0xe83bf4ffff	                   call sym.strbuf_addch	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0xdd1	              0x90	                                     nop	       283	pretty.c	WHILE_3	FUNCTION_14
0xdd2	              0xc9	                                   leave	       283	pretty.c	WHILE_3	FUNCTION_14
0xdd3	              0xc3	                                     ret	       283	pretty.c	WHILE_3	FUNCTION_14
format_commit_one	ELSE,4:IF,29:FOR,3:WHILE,0:CALL,63:DO,0:functions,0:SWITCH,7	758
0x2d39	              0x55	                                push rbp	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d3a	          0x4889e5	                            mov rbp, rsp	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d3d	              0x53	                                push rbx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d3e	    0x4881eca80000	                           sub rsp, 0xa8	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d45	    0x4889bd68ffff	             mov qword [rbp - 0x98], rdi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d4c	    0x4889b560ffff	             mov qword [rbp - 0xa0], rsi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d53	    0x48899558ffff	             mov qword [rbp - 0xa8], rdx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d5a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d63	        0x488945e8	             mov qword [rbp - 0x18], rax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d67	            0x31c0	                            xor eax, eax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x2d69	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      1081	pretty.c	WHILE_3	FUNCTION_39
0x2d70	        0x488945a8	             mov qword [rbp - 0x58], rax	      1081	pretty.c	WHILE_3	FUNCTION_39
0x2d74	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1082	pretty.c	WHILE_3	FUNCTION_39
0x2d78	          0x488b00	                    mov rax, qword [rax]	      1082	pretty.c	WHILE_3	FUNCTION_39
0x2d7b	        0x488945b0	             mov qword [rbp - 0x50], rax	      1082	pretty.c	WHILE_3	FUNCTION_39
0x2d7f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1083	pretty.c	WHILE_3	FUNCTION_39
0x2d83	        0x488b4050	            mov rax, qword [rax + 0x50] 	      1083	pretty.c	WHILE_3	FUNCTION_39
0x2d87	        0x488945b8	             mov qword [rbp - 0x48], rax	      1083	pretty.c	WHILE_3	FUNCTION_39
0x2d8b	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2d92	           0xfb600	                   movzx eax, byte [rax]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2d95	           0xfbec0	                           movsx eax, al	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2d98	          0x83e83c	                           sub eax, 0x3c	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2d9b	          0x83f83c	                           cmp eax, 0x3c	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2d9e	     0xf8790020000	                            ja 0x4003074	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2da4	            0x89c0	                            mov eax, eax	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2da6	    0x488b04c50000	                  mov rax, qword [rax*8]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2dae	            0xffe0	                                 jmp rax	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2db0	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2db7	        0x4883c001	                              add rax, 1	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dbb	      0xbe00000000	                              mov esi, 0	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dc0	          0x4889c7	                            mov rdi, rax	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dc3	      0xe800000000	                          call 0x4002e08	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dc8	            0x85c0	                           test eax, eax	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dca	            0x7459	                            je 0x4002e65	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x2dcc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dd0	        0x488b4008	                mov rax, qword [rax + 8]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dd4	          0x8b4068	            mov eax, dword [rax + 0x68] 	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dd7	            0x89c6	                            mov esi, eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dd9	      0xbf01000000	                              mov edi, 1	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dde	      0xe800000000	                          call 0x4002e23	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2de3	            0x89c2	                            mov edx, eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2de5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2de9	          0x895078	             mov dword [rax + 0x78], edx	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x2dec	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2df0	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2df3	            0x85c0	                           test eax, eax	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2df5	            0x7424	                            je 0x4002e5b	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2df7	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2dfe	        0x488b4008	                mov rax, qword [rax + 8]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2e02	          0x4885c0	                           test rax, rax	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2e05	            0x7414	                            je 0x4002e5b	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x2e07	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x2e0e	      0xbe00000000	                              mov esi, 0	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x2e13	          0x4889c7	                            mov rdi, rax	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x2e16	      0xe85fd4ffff	                  call sym.strbuf_addstr	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x2e1b	      0xb807000000	                              mov eax, 7	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x2e20	      0xe9200b0000	                           jmp 0x4003985	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x2e25	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e29	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e30	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e37	          0x4889ce	                            mov rsi, rcx	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e3a	          0x4889c7	                            mov rdi, rax	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e3d	      0xe830f9ffff	                    call sym.parse_color	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e42	    0x898578ffffff	             mov dword [rbp - 0x88], eax	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x2e48	    0x83bd78ffffff	               cmp dword [rbp - 0x88], 0	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x2e4f	            0x740b	                            je 0x4002e9c	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x2e51	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1099	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x2e55	    0xc74078000000	               mov dword [rax + 0x78], 0	      1099	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x2e5c	    0x8b8578ffffff	             mov eax, dword [rbp - 0x88]	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x2e62	            0x4898	                                    cdqe	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x2e64	      0xe9dc0a0000	                           jmp 0x4003985	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x2e69	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x2e70	      0xbe0a000000	                            mov esi, 0xa	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x2e75	          0x4889c7	                            mov rdi, rax	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x2e78	      0xe88fd3ffff	                   call sym.strbuf_addch	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x2e7d	      0xb801000000	                              mov eax, 1	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2e82	      0xe9be0a0000	                           jmp 0x4003985	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2e87	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x2e8e	        0x4883c001	                              add rax, 1	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x2e92	          0x4889c7	                            mov rdi, rax	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x2e95	      0xe85cd4ffff	                        call sym.hex2chr	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x2e9a	    0x89857cffffff	             mov dword [rbp - 0x84], eax	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x2ea0	    0x83bd7cffffff	               cmp dword [rbp - 0x84], 0	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x2ea7	            0x790a	                           jns 0x4002ef3	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x2ea9	      0xb800000000	                              mov eax, 0	      1114	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x2eae	      0xe9920a0000	                           jmp 0x4003985	      1114	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x2eb3	    0x8b957cffffff	             mov edx, dword [rbp - 0x84]	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x2eb9	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x2ec0	            0x89d6	                            mov esi, edx	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x2ec2	          0x4889c7	                            mov rdi, rax	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x2ec5	      0xe842d3ffff	                   call sym.strbuf_addch	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x2eca	      0xb803000000	                              mov eax, 3	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2ecf	      0xe9710a0000	                           jmp 0x4003985	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x2ed4	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2edb	        0x4883c001	                              add rax, 1	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2edf	           0xfb600	                   movzx eax, byte [rax]	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ee2	            0x3c28	                            cmp al, 0x28	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ee4	     0xf851e010000	                           jne 0x4003048	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2eea	    0x48c745900000	               mov qword [rbp - 0x70], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ef2	    0x48c745980000	               mov qword [rbp - 0x68], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2efa	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2f02	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2f09	        0x4883c002	                              add rax, 2	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2f0d	        0x488945c0	             mov qword [rbp - 0x40], rax	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2f11	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x2f15	      0xbe29000000	                           mov esi, 0x29	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x2f1a	          0x4889c7	                            mov rdi, rax	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x2f1d	      0xe800000000	                          call 0x4002f62	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x2f22	        0x488945c8	             mov qword [rbp - 0x38], rax	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x2f26	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x2f2b	            0x750a	                           jne 0x4002f77	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x2f2d	      0xb800000000	                              mov eax, 0	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x2f32	      0xe90e0a0000	                           jmp 0x4003985	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x2f37	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x2f3b	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x2f3f	     0xf8687000000	                           jbe 0x400300c	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x2f45	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f49	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f4d	      0xba0a000000	                            mov edx, 0xa	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f52	          0x4889ce	                            mov rsi, rcx	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f55	          0x4889c7	                            mov rdi, rax	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f58	      0xe800000000	                          call 0x4002f9d	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f5d	        0x48894590	             mov qword [rbp - 0x70], rax	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x2f61	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x2f65	           0xfb600	                   movzx eax, byte [rax]	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x2f68	            0x3c2c	                            cmp al, 0x2c	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x2f6a	            0x754b	                           jne 0x4002ff7	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x2f6c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f70	        0x488d4801	                      lea rcx, [rax + 1]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f74	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f78	      0xba0a000000	                            mov edx, 0xa	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f7d	          0x4889c6	                            mov rsi, rax	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f80	          0x4889cf	                            mov rdi, rcx	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f83	      0xe800000000	                          call 0x4002fc8	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f88	        0x48894598	             mov qword [rbp - 0x68], rax	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x2f8c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x2f90	           0xfb600	                   movzx eax, byte [rax]	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x2f93	            0x3c2c	                            cmp al, 0x2c	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x2f95	            0x7520	                           jne 0x4002ff7	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x2f97	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2f9b	        0x488d4801	                      lea rcx, [rax + 1]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2f9f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fa3	      0xba0a000000	                            mov edx, 0xa	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fa8	          0x4889c6	                            mov rsi, rax	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fab	          0x4889cf	                            mov rdi, rcx	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fae	      0xe800000000	                          call 0x4002ff3	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fb3	        0x488945a0	             mov qword [rbp - 0x60], rax	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x2fb7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fbb	           0xfb600	                   movzx eax, byte [rax]	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fbe	            0x3c29	                            cmp al, 0x29	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fc0	            0x740a	                            je 0x400300c	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fc2	      0xb800000000	                              mov eax, 0	      1135	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fc7	      0xe979090000	                           jmp 0x4003985	      1135	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x2fcc	        0x488b7da0	             mov rdi, qword [rbp - 0x60]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fd0	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fd4	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fd8	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fdc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fe3	          0x4989f8	                             mov r8, rdi	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fe6	          0x4889c7	                            mov rdi, rax	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fe9	      0xe842f6ffff	            call sym.rewrap_message_tail	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x2fee	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ff2	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ff9	          0x4829c2	                            sub rdx, rax	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2ffc	          0x4889d0	                            mov rax, rdx	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x2fff	        0x4883c001	                              add rax, 1	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x3003	      0xe93d090000	                           jmp 0x4003985	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x3008	      0xb800000000	                              mov eax, 0	      1140	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_2
0x300d	      0xe933090000	                           jmp 0x4003985	      1140	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_2
0x3012	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x3016	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x301d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x3024	          0x4889ce	                            mov rsi, rcx	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x3027	          0x4889c7	                            mov rdi, rax	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x302a	      0xe8f6f9ffff	      call sym.parse_padding_placeholder	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x302f	      0xe911090000	                           jmp 0x4003985	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x3034	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x3038	           0xfb600	                   movzx eax, byte [rax]	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x303b	          0x83e001	                              and eax, 1	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x303e	            0x84c0	                             test al, al	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x3040	            0x7510	                           jne 0x4003092	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x3042	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x3046	        0x4883c004	                              add rax, 4	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x304a	          0x4889c7	                            mov rdi, rax	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x304d	      0xe800000000	                          call 0x4003092	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x3052	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3059	           0xfb600	                   movzx eax, byte [rax]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x305c	           0xfbec0	                           movsx eax, al	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x305f	          0x83e844	                           sub eax, 0x44	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3062	          0x83f830	                           cmp eax, 0x30	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3065	     0xf8777040000	                            ja 0x4003522	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x306b	            0x89c0	                            mov eax, eax	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x306d	    0x488b04c50000	                  mov rax, qword [rax*8]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3075	            0xffe0	                                 jmp rax	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3077	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x307b	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x307e	      0xbe06000000	                              mov esi, 6	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x3083	            0x89c7	                            mov edi, eax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x3085	      0xe800000000	                          call 0x40030ca	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x308a	          0x4889c2	                            mov rdx, rax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x308d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x3094	          0x4889d6	                            mov rsi, rdx	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x3097	          0x4889c7	                            mov rdi, rax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x309a	      0xe8dbd1ffff	                  call sym.strbuf_addstr	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x309f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30a3	        0x4883c004	                              add rax, 4	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30a7	          0x4889c7	                            mov rdi, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30aa	      0xe800000000	                          call 0x40030ef	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30af	          0x4889c2	                            mov rdx, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30b2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30b9	          0x4889d6	                            mov rsi, rdx	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30bc	          0x4889c7	                            mov rdi, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30bf	      0xe8b6d1ffff	                  call sym.strbuf_addstr	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x30c4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30c8	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30cb	      0xbe00000000	                              mov esi, 0	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30d0	            0x89c7	                            mov edi, eax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30d2	      0xe800000000	                          call 0x4003117	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30d7	          0x4889c2	                            mov rdx, rax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30da	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30e1	          0x4889d6	                            mov rsi, rdx	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30e4	          0x4889c7	                            mov rdi, rax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30e7	      0xe88ed1ffff	                  call sym.strbuf_addstr	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x30ec	      0xb801000000	                              mov eax, 1	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x30f1	      0xe94f080000	                           jmp 0x4003985	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x30f6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x30fa	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x30fd	      0xbe06000000	                              mov esi, 6	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3102	            0x89c7	                            mov edi, eax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3104	      0xe800000000	                          call 0x4003149	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3109	          0x4889c2	                            mov rdx, rax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x310c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3113	          0x4889d6	                            mov rsi, rdx	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3116	          0x4889c7	                            mov rdi, rax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x3119	      0xe85cd1ffff	                  call sym.strbuf_addstr	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x311e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1160	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3122	        0x488b4008	                mov rax, qword [rax + 8]	      1160	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3126	          0x8b5004	                mov edx, dword [rax + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x3129	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x312d	        0x488d4804	                      lea rcx, [rax + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x3131	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x3138	          0x4889ce	                            mov rsi, rcx	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x313b	          0x4889c7	                            mov rdi, rax	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x313e	      0xe800000000	                          call 0x4003183	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x3143	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3147	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x314a	      0xbe00000000	                              mov esi, 0	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x314f	            0x89c7	                            mov edi, eax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3151	      0xe800000000	                          call 0x4003196	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3156	          0x4889c2	                            mov rdx, rax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3159	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3160	          0x4889d6	                            mov rsi, rdx	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3163	          0x4889c7	                            mov rdi, rax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x3166	      0xe80fd1ffff	                  call sym.strbuf_addstr	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x316b	      0xb801000000	                              mov eax, 1	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3170	      0xe9d0070000	                           jmp 0x4003985	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3175	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3179	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x317c	      0xe800000000	                          call 0x40031c1	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3181	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3184	      0xe800000000	                          call 0x40031c9	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3189	          0x4889c2	                            mov rdx, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x318c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3193	          0x4889d6	                            mov rsi, rdx	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3196	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x3199	      0xe8dcd0ffff	                  call sym.strbuf_addstr	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x319e	      0xb801000000	                              mov eax, 1	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31a3	      0xe99d070000	                           jmp 0x4003985	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31a8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1169	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31ac	        0x488b4008	                mov rax, qword [rax + 8]	      1169	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31b0	          0x8b5804	                mov ebx, dword [rax + 4]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31b3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x31b7	          0x4889c7	                            mov rdi, rax	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x31ba	      0xe800000000	                          call 0x40031ff	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x31bf	          0x4889c1	                            mov rcx, rax	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x31c2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31c9	            0x89da	                            mov edx, ebx	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31cb	          0x4889ce	                            mov rsi, rcx	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31ce	          0x4889c7	                            mov rdi, rax	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31d1	      0xe800000000	                          call 0x4003216	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x31d6	      0xb801000000	                              mov eax, 1	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31db	      0xe965070000	                           jmp 0x4003985	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x31e0	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x31e4	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x31e8	        0x48894588	             mov qword [rbp - 0x78], rax	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x31ec	            0xeb56	                           jmp 0x4003284	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x31ee	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x31f2	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x31f6	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x31fa	            0x7414	                            je 0x4003250	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x31fc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x3203	      0xbe20000000	                           mov esi, 0x20	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x3208	          0x4889c7	                            mov rdi, rax	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x320b	      0xe8fccfffff	                   call sym.strbuf_addch	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x3210	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3214	          0x488b00	                    mov rax, qword [rax]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3217	        0x4883c004	                              add rax, 4	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x321b	          0x4889c7	                            mov rdi, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x321e	      0xe800000000	                          call 0x4003263	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3223	          0x4889c2	                            mov rdx, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3226	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x322d	          0x4889d6	                            mov rsi, rdx	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3230	          0x4889c7	                            mov rdi, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3233	      0xe842d0ffff	                  call sym.strbuf_addstr	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x3238	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x323c	        0x488b4008	                mov rax, qword [rax + 8]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x3240	        0x48894588	             mov qword [rbp - 0x78], rax	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x3244	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x3249	            0x75a3	                           jne 0x400322e	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x324b	      0xb801000000	                              mov eax, 1	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3250	      0xe9f0060000	                           jmp 0x4003985	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3255	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x3259	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x325d	        0x48894588	             mov qword [rbp - 0x78], rax	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x3261	            0xeb56	                           jmp 0x40032f9	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x3263	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x3267	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x326b	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x326f	            0x7414	                            je 0x40032c5	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x3271	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x3278	      0xbe20000000	                           mov esi, 0x20	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x327d	          0x4889c7	                            mov rdi, rax	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x3280	      0xe887cfffff	                   call sym.strbuf_addch	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x3285	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1183	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x3289	        0x488b4008	                mov rax, qword [rax + 8]	      1183	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x328d	          0x8b5004	                mov edx, dword [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x3290	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x3294	          0x488b00	                    mov rax, qword [rax]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x3297	        0x488d4804	                      lea rcx, [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x329b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x32a2	          0x4889ce	                            mov rsi, rcx	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x32a5	          0x4889c7	                            mov rdi, rax	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x32a8	      0xe800000000	                          call 0x40032ed	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x32ad	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x32b1	        0x488b4008	                mov rax, qword [rax + 8]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x32b5	        0x48894588	             mov qword [rbp - 0x78], rax	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x32b9	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x32be	            0x75a3	                           jne 0x40032a3	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x32c0	      0xb801000000	                              mov eax, 1	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x32c5	      0xe97b060000	                           jmp 0x4003985	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x32ca	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32ce	          0x4889c6	                            mov rsi, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32d1	      0xbf00000000	                              mov edi, 0	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32d6	      0xe800000000	                          call 0x400331b	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32db	          0x4889c2	                            mov rdx, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32de	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32e5	          0x4889d6	                            mov rsi, rdx	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32e8	          0x4889c7	                            mov rdi, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32eb	      0xe88acfffff	                  call sym.strbuf_addstr	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x32f0	      0xb801000000	                              mov eax, 1	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x32f5	      0xe94b060000	                           jmp 0x4003985	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x32fa	      0xbe01000000	                              mov esi, 1	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x32ff	      0xbf00000000	                              mov edi, 0	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x3304	      0xe800000000	                          call 0x4003349	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x3309	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x330d	          0x8b5078	            mov edx, dword [rax + 0x78] 	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x3310	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x3314	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x331b	    0x41b900000000	                              mov r9d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x3321	    0x41b800000000	                              mov r8d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x3327	      0xb900000000	                              mov ecx, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x332c	          0x4889c7	                            mov rdi, rax	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x332f	      0xe800000000	                          call 0x4003374	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x3334	      0xb801000000	                              mov eax, 1	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3339	      0xe907060000	                           jmp 0x4003985	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x333e	      0xbe01000000	                              mov esi, 1	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x3343	      0xbf00000000	                              mov edi, 0	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x3348	      0xe800000000	                          call 0x400338d	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x334d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3351	          0x8b5078	            mov edx, dword [rax + 0x78] 	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3354	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3358	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x335f	    0x41b900000000	                              mov r9d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3365	    0x41b800000000	                              mov r8d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x336b	      0xb900000000	                              mov ecx, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3370	          0x4889c7	                            mov rdi, rax	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3373	      0xe800000000	                          call 0x40033b8	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x3378	      0xb801000000	                              mov eax, 1	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x337d	      0xe9c3050000	                           jmp 0x4003985	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x3382	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3389	        0x4883c001	                              add rax, 1	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x338d	           0xfb600	                   movzx eax, byte [rax]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3390	           0xfbec0	                           movsx eax, al	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3393	          0x83e844	                           sub eax, 0x44	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3396	          0x83f82f	                           cmp eax, 0x2f	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3399	     0xf87f6000000	                            ja 0x40034d5	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x339f	            0x89c0	                            mov eax, eax	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x33a1	    0x488b04c50000	                  mov rax, qword [rax*8]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x33a9	            0xffe0	                                 jmp rax	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x33ab	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33af	        0x488b4008	                mov rax, qword [rax + 8]	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33b3	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33b7	          0x4885c0	                           test rax, rax	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33ba	            0x7457	                            je 0x4003453	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33bc	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1206	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33c3	        0x4883c001	                              add rax, 1	      1206	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33c7	           0xfb600	                   movzx eax, byte [rax]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33ca	            0x3c64	                            cmp al, 0x64	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33cc	           0xf94c0	                                 sete al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33cf	           0xfb6c8	                           movzx ecx, al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33d2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33d6	        0x488b4008	                mov rax, qword [rax + 8]	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33da	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33de	          0x83e001	                              and eax, 1	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33e1	           0xfb6d0	                           movzx edx, al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33e4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1204	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33e8	        0x488b4008	                mov rax, qword [rax + 8]	      1204	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33ec	        0x488d7818	                   lea rdi, [rax + 0x18]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33f0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1203	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33f4	        0x488b4008	                mov rax, qword [rax + 8]	      1203	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x33f8	        0x488b7048	            mov rsi, qword [rax + 0x48] 	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x33fc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x3403	          0x4189c8	                            mov r8d, ecx	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x3406	            0x89d1	                            mov ecx, edx	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x3408	          0x4889fa	                            mov rdx, rdi	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x340b	          0x4889c7	                            mov rdi, rax	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x340e	      0xe800000000	                          call 0x4003453	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x3413	      0xb802000000	                              mov eax, 2	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3418	      0xe928050000	                           jmp 0x4003985	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x341d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x3421	        0x488b4008	                mov rax, qword [rax + 8]	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x3425	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x3429	          0x4885c0	                           test rax, rax	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x342c	            0x741e	                            je 0x400348c	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x342e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x3432	        0x488b4008	                mov rax, qword [rax + 8]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x3436	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x343a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x3441	          0x4889d6	                            mov rsi, rdx	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x3444	          0x4889c7	                            mov rdi, rax	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x3447	      0xe800000000	                          call 0x400348c	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x344c	      0xb802000000	                              mov eax, 2	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3451	      0xe9ef040000	                           jmp 0x4003985	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3456	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1219	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x345a	        0x488b4008	                mov rax, qword [rax + 8]	      1219	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x345e	        0x488d4818	                   lea rcx, [rax + 0x18]	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x3462	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1218	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3466	        0x488b4008	                mov rax, qword [rax + 8]	      1218	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x346a	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x346e	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3475	        0x4883c001	                              add rax, 1	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x3479	           0xfb600	                   movzx eax, byte [rax]	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x347c	           0xfbef0	                           movsx esi, al	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x347f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x3486	          0x4889c7	                            mov rdi, rax	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x3489	      0xe872f2ffff	           call sym.format_reflog_person	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x348e	            0x4898	                                    cdqe	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x3490	      0xe9b0040000	                           jmp 0x4003985	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x3495	      0xb800000000	                              mov eax, 0	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x349a	      0xe9a6040000	                           jmp 0x4003985	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x349f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34a3	        0x488b4008	                mov rax, qword [rax + 8]	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34a7	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34ab	          0x4885c0	                           test rax, rax	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34ae	            0x7428	                            je 0x4003518	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34b0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34b4	        0x488b4008	                mov rax, qword [rax + 8]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34b8	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34bc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34c3	          0x4889d6	                            mov rsi, rdx	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34c6	          0x4889c7	                            mov rdi, rax	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34c9	      0xe8accdffff	                  call sym.strbuf_addstr	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x34ce	      0xb801000000	                              mov eax, 1	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34d3	      0xe96d040000	                           jmp 0x4003985	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x34d8	      0xb800000000	                              mov eax, 0	      1227	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x34dd	      0xe963040000	                           jmp 0x4003985	      1227	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x34e2	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x34e9	           0xfb600	                   movzx eax, byte [rax]	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x34ec	            0x3c47	                            cmp al, 0x47	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x34ee	     0xf853f010000	                           jne 0x4003673	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x34f4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x34f8	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x34fc	            0x84c0	                             test al, al	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x34fe	            0x751a	                           jne 0x400355a	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x3500	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x3504	        0x488d5018	                   lea rdx, [rax + 0x18]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x3508	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x350c	          0x488b00	                    mov rax, qword [rax]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x350f	          0x4889d6	                            mov rsi, rdx	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x3512	          0x4889c7	                            mov rdi, rax	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x3515	      0xe800000000	                          call 0x400355a	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x351a	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3521	        0x4883c001	                              add rax, 1	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3525	           0xfb600	                   movzx eax, byte [rax]	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3528	           0xfbec0	                           movsx eax, al	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x352b	          0x83f847	                           cmp eax, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x352e	            0x7422	                            je 0x4003592	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3530	          0x83f847	                           cmp eax, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3533	            0x7f0a	                            jg 0x400357f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3535	          0x83f83f	                           cmp eax, 0x3f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3538	            0x7448	                            je 0x40035c2	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x353a	      0xe9d6000000	                           jmp 0x4003655	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x353f	          0x83f84b	                           cmp eax, 0x4b	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3542	     0xf84a4000000	                            je 0x400362c	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3548	          0x83f853	                           cmp eax, 0x53	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x354b	            0x7476	                            je 0x4003603	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x354d	      0xe9c3000000	                           jmp 0x4003655	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3552	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x3556	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x355a	          0x4885c0	                           test rax, rax	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x355d	     0xf84bc000000	                            je 0x400365f	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x3563	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x3567	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x356b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x3572	          0x4889d6	                            mov rsi, rdx	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x3575	          0x4889c7	                            mov rdi, rax	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x3578	      0xe8fdccffff	                  call sym.strbuf_addstr	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x357d	      0xe99d000000	                           jmp 0x400365f	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3582	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x3586	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x358a	           0xfbec0	                           movsx eax, al	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x358d	          0x83e842	                           sub eax, 0x42	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x3590	          0x83f817	                           cmp eax, 0x17	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x3593	     0xf8789000000	                            ja 0x4003662	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x3599	            0x89c0	                            mov eax, eax	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x359b	    0x488b04c50000	                  mov rax, qword [rax*8]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x35a3	            0xffe0	                                 jmp rax	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x35a5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35a9	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35ad	           0xfbed0	                           movsx edx, al	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35b0	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35b7	            0x89d6	                            mov esi, edx	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35b9	          0x4889c7	                            mov rdi, rax	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35bc	      0xe84bccffff	                   call sym.strbuf_addch	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x35c1	            0xeb5f	                           jmp 0x4003662	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x35c3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x35c7	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x35cb	          0x4885c0	                           test rax, rax	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x35ce	            0x7455	                            je 0x4003665	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x35d0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35d4	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35d8	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35df	          0x4889d6	                            mov rsi, rdx	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35e2	          0x4889c7	                            mov rdi, rax	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35e5	      0xe890ccffff	                  call sym.strbuf_addstr	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x35ea	            0xeb39	                           jmp 0x4003665	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x35ec	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x35f0	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x35f4	          0x4885c0	                           test rax, rax	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x35f7	            0x742f	                            je 0x4003668	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x35f9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x35fd	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x3601	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x3608	          0x4889d6	                            mov rsi, rdx	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x360b	          0x4889c7	                            mov rdi, rax	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x360e	      0xe867ccffff	                  call sym.strbuf_addstr	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x3613	            0xeb13	                           jmp 0x4003668	      1258	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3615	      0xb800000000	                              mov eax, 0	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x361a	      0xe926030000	                           jmp 0x4003985	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x361f	              0x90	                                     nop	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3620	            0xeb07	                           jmp 0x4003669	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3622	              0x90	                                     nop	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3623	            0xeb04	                           jmp 0x4003669	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3625	              0x90	                                     nop	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3626	            0xeb01	                           jmp 0x4003669	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3628	              0x90	                                     nop	      1258	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x3629	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x362e	      0xe912030000	                           jmp 0x4003985	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x3633	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x3637	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x363b	          0x83e001	                              and eax, 1	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x363e	            0x84c0	                             test al, al	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x3640	            0x750c	                           jne 0x400368e	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x3642	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x3646	          0x4889c7	                            mov rdi, rax	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x3649	      0xe849eaffff	            call sym.parse_commit_header	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x364e	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3655	           0xfb600	                   movzx eax, byte [rax]	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3658	           0xfbec0	                           movsx eax, al	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x365b	          0x83f861	                           cmp eax, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x365e	            0x7426	                            je 0x40036c6	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3660	          0x83f861	                           cmp eax, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3663	            0x7f0e	                            jg 0x40036b3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3665	          0x83f842	                           cmp eax, 0x42	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3668	     0xf84f3000000	                            je 0x40037a1	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x366e	      0xe920010000	                           jmp 0x40037d3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3673	          0x83f863	                           cmp eax, 0x63	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3676	            0x7463	                            je 0x400371b	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3678	          0x83f865	                           cmp eax, 0x65	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x367b	     0xf84af000000	                            je 0x4003770	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3681	      0xe90d010000	                           jmp 0x40037d3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3686	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1274	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x368a	        0x488b4008	                mov rax, qword [rax + 8]	      1274	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x368e	        0x488d4818	                   lea rcx, [rax + 0x18]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x3692	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3696	    0x488b80880000	            mov rax, qword [rax + 0x88] 	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x369d	            0x89c7	                            mov edi, eax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x369f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36a3	    0x488b90800000	            mov rdx, qword [rax + 0x80] 	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36aa	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36ae	          0x4801c2	                            add rdx, rax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36b1	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36b8	        0x4883c001	                              add rax, 1	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36bc	           0xfb600	                   movzx eax, byte [rax]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36bf	           0xfbef0	                           movsx esi, al	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36c2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36c9	          0x4989c8	                             mov r8, rcx	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36cc	            0x89f9	                            mov ecx, edi	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36ce	          0x4889c7	                            mov rdi, rax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36d1	      0xe89de6ffff	             call sym.format_person_part	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36d6	      0xe96a020000	                           jmp 0x4003985	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x36db	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1278	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36df	        0x488b4008	                mov rax, qword [rax + 8]	      1278	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36e3	        0x488d4818	                   lea rcx, [rax + 0x18]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x36e7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36eb	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36f2	            0x89c7	                            mov edi, eax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x36f4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36f8	    0x488b90900000	            mov rdx, qword [rax + 0x90] 	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x36ff	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3703	          0x4801c2	                            add rdx, rax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3706	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x370d	        0x4883c001	                              add rax, 1	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3711	           0xfb600	                   movzx eax, byte [rax]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3714	           0xfbef0	                           movsx esi, al	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3717	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x371e	          0x4989c8	                             mov r8, rcx	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3721	            0x89f9	                            mov ecx, edi	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3723	          0x4889c7	                            mov rdi, rax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3726	      0xe848e6ffff	             call sym.format_person_part	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x372b	      0xe915020000	                           jmp 0x4003985	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x3730	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x3734	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x3738	          0x4885c0	                           test rax, rax	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x373b	            0x741a	                            je 0x4003797	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x373d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x3741	        0x488b5058	            mov rdx, qword [rax + 0x58] 	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x3745	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x374c	          0x4889d6	                            mov rsi, rdx	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x374f	          0x4889c7	                            mov rdi, rax	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x3752	      0xe823cbffff	                  call sym.strbuf_addstr	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x3757	      0xb801000000	                              mov eax, 1	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x375c	      0xe9e4010000	                           jmp 0x4003985	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3761	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3765	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x376c	        0x488d5001	                      lea rdx, [rax + 1]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3770	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3774	          0x4801c2	                            add rdx, rax	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3777	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x377e	          0x4889d6	                            mov rsi, rdx	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3781	          0x4889c7	                            mov rdi, rax	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3784	      0xe8f1caffff	                  call sym.strbuf_addstr	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x3789	      0xb801000000	                              mov eax, 1	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x378e	      0xe9b2010000	                           jmp 0x4003985	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x3793	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x3797	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x379b	          0x83e002	                              and eax, 2	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x379e	            0x84c0	                             test al, al	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x37a0	            0x750c	                           jne 0x40037ee	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x37a2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x37a6	          0x4889c7	                            mov rdi, rax	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x37a9	      0xe801edffff	           call sym.parse_commit_message	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x37ae	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37b5	           0xfb600	                   movzx eax, byte [rax]	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37b8	           0xfbec0	                           movsx eax, al	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37bb	          0x83f866	                           cmp eax, 0x66	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37be	            0x7443	                            je 0x4003843	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37c0	          0x83f873	                           cmp eax, 0x73	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37c3	            0x740a	                            je 0x400380f	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37c5	          0x83f862	                           cmp eax, 0x62	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37c8	            0x7467	                            je 0x4003871	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37ca	      0xe990000000	                           jmp 0x400389f	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37cf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37d3	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37da	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37de	        0x488d0c02	                    lea rcx, [rdx + rax]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37e2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37e9	      0xba00000000	                              mov edx, 0	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37ee	          0x4889ce	                            mov rsi, rcx	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37f1	          0x4889c7	                            mov rdi, rax	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37f4	      0xe800000000	                          call 0x4003839	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x37f9	      0xb801000000	                              mov eax, 1	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x37fe	      0xe942010000	                           jmp 0x4003985	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x3803	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x3807	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x380e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x3812	          0x4801c2	                            add rdx, rax	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x3815	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x381c	          0x4889d6	                            mov rsi, rdx	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x381f	          0x4889c7	                            mov rdi, rax	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x3822	      0xe861eaffff	       call sym.format_sanitized_subject	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x3827	      0xb801000000	                              mov eax, 1	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x382c	      0xe914010000	                           jmp 0x4003985	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x3831	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x3835	    0x488b90b00000	            mov rdx, qword [rax + 0xb0] 	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x383c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x3840	          0x4801c2	                            add rdx, rax	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x3843	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x384a	          0x4889d6	                            mov rsi, rdx	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x384d	          0x4889c7	                            mov rdi, rax	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x3850	      0xe825caffff	                  call sym.strbuf_addstr	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x3855	      0xb801000000	                              mov eax, 1	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x385a	      0xe9e6000000	                           jmp 0x4003985	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x385f	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x3863	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x386a	      0xbe00000000	                              mov esi, 0	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x386f	          0x4889c7	                            mov rdi, rax	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x3872	      0xe889c7ffff	                    call sym.skip_prefix	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x3877	            0x85c0	                           test eax, eax	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x3879	     0xf84c1000000	                            je 0x4003980	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x387f	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x3887	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x388f	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x3896	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x389a	           0xfb600	                   movzx eax, byte [rax]	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x389d	            0x3c3a	                            cmp al, 0x3a	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x389f	            0x7551	                           jne 0x4003932	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x38a1	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x38a5	        0x4883c001	                              add rax, 1	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x38a9	        0x48894580	             mov qword [rbp - 0x80], rax	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x38ad	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38b1	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38b5	      0xbe00000000	                              mov esi, 0	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38ba	          0x4889c7	                            mov rdi, rax	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38bd	      0xe8d9f3ffff	          call sym.match_placeholder_arg	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38c2	            0x85c0	                           test eax, eax	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38c4	            0x7409	                            je 0x400390f	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x38c6	    0xc745d8010000	               mov dword [rbp - 0x28], 1	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x38cd	            0xebde	                           jmp 0x40038ed	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x38cf	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38d3	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38d7	      0xbe00000000	                              mov esi, 0	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38dc	          0x4889c7	                            mov rdi, rax	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38df	      0xe8b7f3ffff	          call sym.match_placeholder_arg	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38e4	            0x85c0	                           test eax, eax	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38e6	            0x7409	                            je 0x4003931	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x38e8	    0xc745e0010000	               mov dword [rbp - 0x20], 1	      1313	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28
0x38ef	            0xebbc	                           jmp 0x40038ed	      1316	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_4
0x38f1	              0x90	                                     nop	      1315	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_4
0x38f2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x38f6	           0xfb600	                   movzx eax, byte [rax]	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x38f9	            0x3c29	                            cmp al, 0x29	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x38fb	            0x7543	                           jne 0x4003980	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x38fd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3901	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3908	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x390c	        0x488d0c02	                    lea rcx, [rdx + rax]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3910	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3914	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x391b	          0x4889ce	                            mov rsi, rcx	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x391e	          0x4889c7	                            mov rdi, rax	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3921	      0xe800000000	                          call 0x4003966	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x3926	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x392a	          0x4889c2	                            mov rdx, rax	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x392d	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x3934	          0x4829c2	                            sub rdx, rax	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x3937	          0x4889d0	                            mov rax, rdx	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x393a	        0x4883c001	                              add rax, 1	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x393e	            0xeb05	                           jmp 0x4003985	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x3940	      0xb800000000	                              mov eax, 0	      1324	pretty.c	WHILE_3	FUNCTION_39
0x3945	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3949	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3952	            0x7405	                            je 0x4003999	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3954	      0xe800000000	                          call 0x4003999	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3959	    0x4881c4a80000	                           add rsp, 0xa8	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3960	              0x5b	                                 pop rbx	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3961	              0x5d	                                 pop rbp	      1325	pretty.c	WHILE_3	FUNCTION_39
0x3962	              0xc3	                                     ret	      1325	pretty.c	WHILE_3	FUNCTION_39
strbuf_add_tabexpand	ELSE,0:IF,1:FOR,0:WHILE,1:CALL,5:DO,0:functions,0:SWITCH,0	69
0x478e	              0x55	                                push rbp	      1689	pretty.c	FUNCTION_48
0x478f	          0x4889e5	                            mov rbp, rsp	      1689	pretty.c	FUNCTION_48
0x4792	        0x4883ec30	                           sub rsp, 0x30	      1689	pretty.c	FUNCTION_48
0x4796	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1689	pretty.c	FUNCTION_48
0x479a	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1689	pretty.c	FUNCTION_48
0x479d	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1689	pretty.c	FUNCTION_48
0x47a1	          0x894de0	             mov dword [rbp - 0x20], ecx	      1689	pretty.c	FUNCTION_48
0x47a4	      0xe98d000000	                           jmp 0x4004876	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x47a9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47ad	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47b1	          0x4889d6	                            mov rsi, rdx	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47b4	          0x4889c7	                            mov rdi, rax	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47b7	      0xe847ffffff	                  call sym.pp_utf8_width	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47bc	          0x8945f4	              mov dword [rbp - 0xc], eax	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x47bf	        0x837df400	                cmp dword [rbp - 0xc], 0	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x47c3	     0xf8895000000	                            js 0x400489e	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x47c9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47cd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47d1	          0x4829c2	                            sub rdx, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47d4	          0x4889d0	                            mov rax, rdx	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47d7	          0x4889c2	                            mov rdx, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47da	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47de	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47e2	          0x4889ce	                            mov rsi, rcx	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47e5	          0x4889c7	                            mov rdi, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47e8	      0xe800000000	                          call 0x400482d	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x47ed	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47f0	              0x99	                                     cdq	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47f1	          0xf77de4	                 idiv dword [rbp - 0x1c]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47f4	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47f7	            0x29d0	                            sub eax, edx	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47f9	          0x4863d0	                         movsxd rdx, eax	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x47fc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4800	      0xbe20000000	                           mov esi, 0x20	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4805	          0x4889c7	                            mov rdi, rax	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4808	      0xe800000000	                          call 0x400484d	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x480d	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4810	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4814	        0x4883c201	                              add rdx, 1	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4818	          0x4889d1	                            mov rcx, rdx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x481b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x481f	          0x4829d1	                            sub rcx, rdx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4822	          0x4889ca	                            mov rdx, rcx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4825	            0x29d0	                            sub eax, edx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4827	          0x8945e0	             mov dword [rbp - 0x20], eax	      1711	pretty.c	FUNCTION_48	WHILE_1
0x482a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1712	pretty.c	FUNCTION_48	WHILE_1
0x482e	        0x4883c001	                              add rax, 1	      1712	pretty.c	FUNCTION_48	WHILE_1
0x4832	        0x488945d8	             mov qword [rbp - 0x28], rax	      1712	pretty.c	FUNCTION_48	WHILE_1
0x4836	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4839	          0x4863d0	                         movsxd rdx, eax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x483c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4840	      0xbe09000000	                              mov esi, 9	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4845	          0x4889c7	                            mov rdi, rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4848	      0xe800000000	                          call 0x400488d	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x484d	        0x488945f8	                mov qword [rbp - 8], rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4851	      0x48837df800	                  cmp qword [rbp - 8], 0	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4856	     0xf854dffffff	                           jne 0x40047e9	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x485c	            0xeb01	                           jmp 0x400489f	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x485e	              0x90	                                     nop	      1702	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x485f	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1720	pretty.c	FUNCTION_48	CALL_5
0x4862	          0x4863d0	                         movsxd rdx, eax	      1720	pretty.c	FUNCTION_48	CALL_5
0x4865	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1720	pretty.c	FUNCTION_48	CALL_5
0x4869	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1720	pretty.c	FUNCTION_48	CALL_5
0x486d	          0x4889ce	                            mov rsi, rcx	      1720	pretty.c	FUNCTION_48	CALL_5
0x4870	          0x4889c7	                            mov rdi, rax	      1720	pretty.c	FUNCTION_48	CALL_5
0x4873	      0xe800000000	                          call 0x40048b8	      1720	pretty.c	FUNCTION_48	CALL_5
0x4878	              0x90	                                     nop	      1721	pretty.c	FUNCTION_48
0x4879	              0xc9	                                   leave	      1721	pretty.c	FUNCTION_48
0x487a	              0xc3	                                     ret	      1721	pretty.c	FUNCTION_48
format_subject	ELSE,0:IF,3:FOR,1:WHILE,0:CALL,5:DO,0:functions,0:SWITCH,0	64
0x23c8	              0x55	                                push rbp	       852	pretty.c	WHILE_3	FUNCTION_31
0x23c9	          0x4889e5	                            mov rbp, rsp	       852	pretty.c	WHILE_3	FUNCTION_31
0x23cc	        0x4883ec40	                           sub rsp, 0x40	       852	pretty.c	WHILE_3	FUNCTION_31
0x23d0	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       852	pretty.c	WHILE_3	FUNCTION_31
0x23d4	        0x488975d0	             mov qword [rbp - 0x30], rsi	       852	pretty.c	WHILE_3	FUNCTION_31
0x23d8	        0x488955c8	             mov qword [rbp - 0x38], rdx	       852	pretty.c	WHILE_3	FUNCTION_31
0x23dc	    0x64488b042528	                mov rax, qword fs:[0x28]	       852	pretty.c	WHILE_3	FUNCTION_31
0x23e5	        0x488945f8	                mov qword [rbp - 8], rax	       852	pretty.c	WHILE_3	FUNCTION_31
0x23e9	            0x31c0	                            xor eax, eax	       852	pretty.c	WHILE_3	FUNCTION_31
0x23eb	    0xc745ec010000	               mov dword [rbp - 0x14], 1	       853	pretty.c	WHILE_3	FUNCTION_31
0x23f2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       856	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x23f6	        0x488945f0	             mov qword [rbp - 0x10], rax	       856	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x23fa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x23fe	          0x4889c7	                            mov rdi, rax	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x2401	      0xe897e7ffff	                   call sym.get_one_line	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x2406	          0x8945e8	             mov dword [rbp - 0x18], eax	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x2409	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x240c	            0x4898	                                    cdqe	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x240e	        0x480145d0	            add qword [rbp - 0x30], rax 	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x2412	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2415	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2417	            0x7474	                            je 0x40024cd	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2419	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x241d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2421	          0x4889d6	                            mov rsi, rdx	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2424	          0x4889c7	                            mov rdi, rax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2427	      0xe854f3ffff	                  call sym.is_blank_line	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x242c	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x242e	            0x755d	                           jne 0x40024cd	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x2430	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x2435	            0x746b	                            je 0x40024e2	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x2437	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x243a	          0x83c002	                              add eax, 2	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x243d	          0x4863d0	                         movsxd rdx, eax	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x2440	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x2444	          0x4889d6	                            mov rsi, rdx	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x2447	          0x4889c7	                            mov rdi, rax	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x244a	      0xe800000000	                          call 0x400248f	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x244f	        0x837dec00	               cmp dword [rbp - 0x14], 0	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x2453	            0x7513	                           jne 0x40024a8	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x2455	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x2459	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x245d	          0x4889d6	                            mov rsi, rdx	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x2460	          0x4889c7	                            mov rdi, rax	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x2463	      0xe812deffff	                  call sym.strbuf_addstr	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x2468	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x246b	          0x4863d0	                         movsxd rdx, eax	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x246e	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x2472	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x2476	          0x4889ce	                            mov rsi, rcx	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x2479	          0x4889c7	                            mov rdi, rax	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x247c	      0xe800000000	                          call 0x40024c1	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x2481	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x2488	      0xe965ffffff	                           jmp 0x4002432	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x248d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       871	pretty.c	WHILE_3	FUNCTION_31
0x2491	        0x488b4df8	                mov rcx, qword [rbp - 8]	       872	pretty.c	WHILE_3	FUNCTION_31
0x2495	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       872	pretty.c	WHILE_3	FUNCTION_31
0x249e	            0x740d	                            je 0x40024ed	       872	pretty.c	WHILE_3	FUNCTION_31
0x24a0	            0xeb06	                           jmp 0x40024e8	       872	pretty.c	WHILE_3	FUNCTION_31
0x24a2	              0x90	                                     nop	       864	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x24a3	      0xe94affffff	                           jmp 0x4002432	       870	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x24a8	      0xe800000000	                          call 0x40024ed	       872	pretty.c	WHILE_3	FUNCTION_31
0x24ad	              0xc9	                                   leave	       872	pretty.c	WHILE_3	FUNCTION_31
0x24ae	              0xc3	                                     ret	       872	pretty.c	WHILE_3	FUNCTION_31
format_reflog_person	ELSE,0:IF,2:FOR,0:WHILE,0:CALL,3:DO,0:functions,0:SWITCH,0	34
0x2700	              0x55	                                push rbp	       922	pretty.c	WHILE_3	FUNCTION_35
0x2701	          0x4889e5	                            mov rbp, rsp	       922	pretty.c	WHILE_3	FUNCTION_35
0x2704	        0x4883ec30	                           sub rsp, 0x30	       922	pretty.c	WHILE_3	FUNCTION_35
0x2708	        0x48897de8	             mov qword [rbp - 0x18], rdi	       922	pretty.c	WHILE_3	FUNCTION_35
0x270c	            0x89f0	                            mov eax, esi	       922	pretty.c	WHILE_3	FUNCTION_35
0x270e	        0x488955d8	             mov qword [rbp - 0x28], rdx	       922	pretty.c	WHILE_3	FUNCTION_35
0x2712	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       922	pretty.c	WHILE_3	FUNCTION_35
0x2716	          0x8845e4	               mov byte [rbp - 0x1c], al	       922	pretty.c	WHILE_3	FUNCTION_35
0x2719	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x271e	            0x7507	                           jne 0x4002767	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x2720	      0xb802000000	                              mov eax, 2	       926	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x2725	            0xeb49	                           jmp 0x40027b0	       926	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x2727	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x272b	          0x4889c7	                            mov rdi, rax	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x272e	      0xe800000000	                          call 0x4002773	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x2733	        0x488945f8	                mov qword [rbp - 8], rax	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x2737	      0x48837df800	                  cmp qword [rbp - 8], 0	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x273c	            0x7507	                           jne 0x4002785	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x273e	      0xb802000000	                              mov eax, 2	       930	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x2743	            0xeb2b	                           jmp 0x40027b0	       930	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x2745	        0x488b45f8	                mov rax, qword [rbp - 8]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2749	          0x4889c7	                            mov rdi, rax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x274c	      0xe800000000	                          call 0x4002791	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2751	            0x89c7	                            mov edi, eax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2753	         0xfbe75e4	            movsx esi, byte [rbp - 0x1c]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2757	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x275b	        0x488b55f8	                mov rdx, qword [rbp - 8]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x275f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2763	          0x4989c8	                             mov r8, rcx	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2766	            0x89f9	                            mov ecx, edi	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2768	          0x4889c7	                            mov rdi, rax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x276b	      0xe803f6ffff	             call sym.format_person_part	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x2770	              0xc9	                                   leave	       933	pretty.c	WHILE_3	FUNCTION_35
0x2771	              0xc3	                                     ret	       933	pretty.c	WHILE_3	FUNCTION_35
pp_user_info	ELSE,3:IF,8:FOR,0:WHILE,0:CALL,33:DO,0:functions,0:SWITCH,1	326
0x11be	              0x55	                                push rbp	       428	pretty.c	WHILE_3	FUNCTION_19
0x11bf	          0x4889e5	                            mov rbp, rsp	       428	pretty.c	WHILE_3	FUNCTION_19
0x11c2	              0x53	                                push rbx	       428	pretty.c	WHILE_3	FUNCTION_19
0x11c3	    0x4881ecd80000	                           sub rsp, 0xd8	       428	pretty.c	WHILE_3	FUNCTION_19
0x11ca	    0x4889bd48ffff	             mov qword [rbp - 0xb8], rdi	       428	pretty.c	WHILE_3	FUNCTION_19
0x11d1	    0x4889b540ffff	             mov qword [rbp - 0xc0], rsi	       428	pretty.c	WHILE_3	FUNCTION_19
0x11d8	    0x48899538ffff	             mov qword [rbp - 0xc8], rdx	       428	pretty.c	WHILE_3	FUNCTION_19
0x11df	    0x48898d30ffff	             mov qword [rbp - 0xd0], rcx	       428	pretty.c	WHILE_3	FUNCTION_19
0x11e6	    0x4c898528ffff	              mov qword [rbp - 0xd8], r8	       428	pretty.c	WHILE_3	FUNCTION_19
0x11ed	    0x64488b042528	                mov rax, qword fs:[0x28]	       428	pretty.c	WHILE_3	FUNCTION_19
0x11f6	        0x488945e8	             mov qword [rbp - 0x18], rax	       428	pretty.c	WHILE_3	FUNCTION_19
0x11fa	            0x31c0	                            xor eax, eax	       428	pretty.c	WHILE_3	FUNCTION_19
0x11fc	    0xc78554ffffff	           mov dword [rbp - 0xac], 0x4e 	       433	pretty.c	WHILE_3	FUNCTION_19
0x1206	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x120d	            0x8b00	                    mov eax, dword [rax]	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x120f	          0x83f805	                              cmp eax, 5	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x1212	     0xf8447050000	                            je 0x400179f	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x1218	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x121f	      0xbe0a000000	                            mov esi, 0xa	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x1224	          0x4889c7	                            mov rdi, rax	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x1227	      0xe800000000	                          call 0x400126c	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x122c	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x1233	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x123a	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1241	          0x4829c2	                            sub rdx, rax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1244	          0x4889d0	                            mov rax, rdx	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1247	            0x89c2	                            mov edx, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1249	    0x488b8d30ffff	             mov rcx, qword [rbp - 0xd0]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1250	        0x488d45a0	                   lea rax, [rbp - 0x60]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1254	          0x4889ce	                            mov rsi, rcx	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1257	          0x4889c7	                            mov rdi, rax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x125a	      0xe800000000	                          call 0x400129f	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x125f	            0x85c0	                           test eax, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1261	     0xf85fb040000	                           jne 0x40017a2	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x1267	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       442	pretty.c	WHILE_3	FUNCTION_19
0x126b	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       442	pretty.c	WHILE_3	FUNCTION_19
0x1272	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       443	pretty.c	WHILE_3	FUNCTION_19
0x1276	          0x4889c2	                            mov rdx, rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x1279	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       443	pretty.c	WHILE_3	FUNCTION_19
0x127d	          0x4829c2	                            sub rdx, rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x1280	          0x4889d0	                            mov rax, rdx	       443	pretty.c	WHILE_3	FUNCTION_19
0x1283	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x128a	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       444	pretty.c	WHILE_3	FUNCTION_19
0x128e	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       444	pretty.c	WHILE_3	FUNCTION_19
0x1295	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       445	pretty.c	WHILE_3	FUNCTION_19
0x1299	          0x4889c2	                            mov rdx, rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x129c	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       445	pretty.c	WHILE_3	FUNCTION_19
0x12a0	          0x4829c2	                            sub rdx, rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x12a3	          0x4889d0	                            mov rax, rdx	       445	pretty.c	WHILE_3	FUNCTION_19
0x12a6	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x12ad	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x12b4	        0x488b4060	            mov rax, qword [rax + 0x60] 	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x12b8	          0x4885c0	                           test rax, rax	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x12bb	            0x7432	                            je 0x400132f	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x12bd	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12c4	        0x488b4060	            mov rax, qword [rax + 0x60] 	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12c8	    0x488dbd68ffff	                   lea rdi, [rbp - 0x98]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12cf	    0x488d8d60ffff	                   lea rcx, [rbp - 0xa0]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12d6	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12dd	    0x488db558ffff	                   lea rsi, [rbp - 0xa8]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12e4	          0x4989f8	                             mov r8, rdi	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12e7	          0x4889c7	                            mov rdi, rax	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12ea	      0xe800000000	                          call 0x400132f	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x12ef	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x12f6	            0x8b00	                    mov eax, dword [rax]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x12f8	            0x89c7	                            mov edi, eax	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x12fa	      0xe84df0ffff	               call sym.cmit_fmt_is_mail	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x12ff	            0x85c0	                           test eax, eax	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x1301	     0xf8405030000	                            je 0x400164c	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x1307	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x130e	        0x488b4070	            mov rax, qword [rax + 0x70] 	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1312	          0x4885c0	                           test rax, rax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1315	     0xf8448010000	                            je 0x40014a3	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x131b	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1322	        0x488b4070	            mov rax, qword [rax + 0x70] 	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1326	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x132a	          0x4889d6	                            mov rsi, rdx	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x132d	          0x4889c7	                            mov rdi, rax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1330	      0xe800000000	                          call 0x4001375	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1335	            0x85c0	                           test eax, eax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x1337	     0xf8426010000	                            je 0x40014a3	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x133d	    0x48c745800000	               mov qword [rbp - 0x80], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1345	    0x48c745880000	               mov qword [rbp - 0x78], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x134d	    0x48c745900000	               mov qword [rbp - 0x70], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1355	        0x488d4580	                   lea rax, [rbp - 0x80]	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x1359	      0xbe00000000	                              mov esi, 0	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x135e	          0x4889c7	                            mov rdi, rax	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x1361	      0xe814efffff	                  call sym.strbuf_addstr	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x1366	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x136d	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x1374	        0x488d4580	                   lea rax, [rbp - 0x80]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x1378	          0x4889ce	                            mov rsi, rcx	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x137b	          0x4889c7	                            mov rdi, rax	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x137e	      0xe800000000	                          call 0x40013c3	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x1383	        0x488d4580	                   lea rax, [rbp - 0x80]	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x1387	      0xbe00000000	                              mov esi, 0	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x138c	          0x4889c7	                            mov rdi, rax	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x138f	      0xe8e6eeffff	                  call sym.strbuf_addstr	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x1394	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x139b	    0x488b8d58ffff	             mov rcx, qword [rbp - 0xa8]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x13a2	        0x488d4580	                   lea rax, [rbp - 0x80]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x13a6	          0x4889ce	                            mov rsi, rcx	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x13a9	          0x4889c7	                            mov rdi, rax	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x13ac	      0xe800000000	                          call 0x40013f1	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x13b1	        0x488d4580	                   lea rax, [rbp - 0x80]	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x13b5	      0xbe00000000	                              mov esi, 0	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x13ba	          0x4889c7	                            mov rdi, rax	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x13bd	      0xe8b8eeffff	                  call sym.strbuf_addstr	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x13c2	        0x488d4580	                   lea rax, [rbp - 0x80]	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x13c6	      0xbe00000000	                              mov esi, 0	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x13cb	          0x4889c7	                            mov rdi, rax	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x13ce	      0xe800000000	                          call 0x4001413	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x13d3	          0x4889c2	                            mov rdx, rax	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x13d6	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x13dd	        0x4883c078	                           add rax, 0x78	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x13e1	          0x4889d6	                            mov rsi, rdx	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x13e4	          0x4889c7	                            mov rdi, rax	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x13e7	      0xe800000000	                          call 0x400142c	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x13ec	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x13f3	        0x488b4070	            mov rax, qword [rax + 0x70] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x13f7	        0x488b4010	            mov rax, qword [rax + 0x10] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x13fb	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1402	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1409	        0x488b4070	            mov rax, qword [rax + 0x70] 	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x140d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1411	          0x4889c2	                            mov rdx, rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1414	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x141b	          0x4829c2	                            sub rdx, rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x141e	          0x4889d0	                            mov rax, rdx	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1421	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1428	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x142f	        0x488b4070	            mov rax, qword [rax + 0x70] 	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1433	          0x488b00	                    mov rax, qword [rax]	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1436	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x143d	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1444	        0x488b4070	            mov rax, qword [rax + 0x70] 	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1448	        0x488b4008	                mov rax, qword [rax + 8]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x144c	          0x4889c2	                            mov rdx, rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x144f	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1456	          0x4829c2	                            sub rdx, rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1459	          0x4889d0	                            mov rax, rdx	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x145c	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x1463	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_13
0x146a	      0xbe00000000	                              mov esi, 0	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_13
0x146f	          0x4889c7	                            mov rdi, rax	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_13
0x1472	      0xe803eeffff	                  call sym.strbuf_addstr	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_13
0x1477	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x147e	            0x89c1	                            mov ecx, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x1480	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x1487	      0xba01000000	                              mov edx, 1	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x148c	            0x89ce	                            mov esi, ecx	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x148e	          0x4889c7	                            mov rdi, rax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x1491	      0xe8f9f9ffff	         call sym.needs_rfc2047_encoding	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x1496	            0x85c0	                           test eax, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x1498	            0x7439	                            je 0x4001513	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x149a	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14a1	    0x488bb560ffff	             mov rsi, qword [rbp - 0xa0]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14a8	    0x488b8d28ffff	             mov rcx, qword [rbp - 0xd8]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14af	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14b6	    0x41b801000000	                              mov r8d, 1	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14bc	          0x4889c7	                            mov rdi, rax	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14bf	      0xe859faffff	                    call sym.add_rfc2047	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x14c4	    0xc78554ffffff	           mov dword [rbp - 0xac], 0x4c 	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x14ce	      0xe9c7000000	                           jmp 0x40015da	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x14d3	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14da	            0x89c2	                            mov edx, eax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14dc	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14e3	            0x89d6	                            mov esi, edx	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14e5	          0x4889c7	                            mov rdi, rax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14e8	      0xe891f7ffff	           call sym.needs_rfc822_quoting	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14ed	            0x85c0	                           test eax, eax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14ef	            0x7474	                            je 0x40015a5	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x14f1	    0x48c745800000	               mov qword [rbp - 0x80], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x14f9	    0x48c745880000	               mov qword [rbp - 0x78], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x1501	    0x48c745900000	               mov qword [rbp - 0x70], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x1509	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1510	            0x89c2	                            mov edx, eax	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1512	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1519	        0x488d4580	                   lea rax, [rbp - 0x80]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x151d	          0x4889ce	                            mov rsi, rcx	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1520	          0x4889c7	                            mov rdi, rax	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1523	      0xe8f8f7ffff	              call sym.add_rfc822_quoted	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x1528	        0x488b4588	             mov rax, qword [rbp - 0x78]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x152c	            0x89c7	                            mov edi, eax	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x152e	        0x488b7590	             mov rsi, qword [rbp - 0x70]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1532	    0x8b9554ffffff	             mov edx, dword [rbp - 0xac]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1538	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x153f	          0x4189d1	                            mov r9d, edx	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1542	    0x41b801000000	                              mov r8d, 1	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1548	      0xb9faffffff	                     mov ecx, 0xfffffffa	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x154d	            0x89fa	                            mov edx, edi	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x154f	          0x4889c7	                            mov rdi, rax	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1552	      0xe800000000	                          call 0x4001597	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x1557	        0x488d4580	                   lea rax, [rbp - 0x80]	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x155b	          0x4889c7	                            mov rdi, rax	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x155e	      0xe800000000	                          call 0x40015a3	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x1563	            0xeb35	                           jmp 0x40015da	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x1565	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x156c	            0x89c7	                            mov edi, eax	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x156e	    0x488bb560ffff	             mov rsi, qword [rbp - 0xa0]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1575	    0x8b9554ffffff	             mov edx, dword [rbp - 0xac]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x157b	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1582	          0x4189d1	                            mov r9d, edx	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1585	    0x41b801000000	                              mov r8d, 1	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x158b	      0xb9faffffff	                     mov ecx, 0xfffffffa	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1590	            0x89fa	                            mov edx, edi	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1592	          0x4889c7	                            mov rdi, rax	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x1595	      0xe800000000	                          call 0x40015da	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x159a	    0x8b8554ffffff	             mov eax, dword [rbp - 0xac]	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x15a0	          0x4863d8	                         movsxd rbx, eax	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x15a3	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15aa	          0x4889c7	                            mov rdi, rax	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15ad	      0xe81cf7ffff	               call sym.last_line_length	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15b2	          0x4863d0	                         movsxd rdx, eax	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15b5	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15bc	          0x4801d0	                            add rax, rdx	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15bf	        0x4883c003	                              add rax, 3	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x15c3	          0x4839c3	                            cmp rbx, rax	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x15c6	            0x7314	                           jae 0x400161c	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x15c8	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x15cf	      0xbe0a000000	                            mov esi, 0xa	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x15d4	          0x4889c7	                            mov rdi, rax	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x15d7	      0xe830ecffff	                   call sym.strbuf_addch	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x15dc	    0x488b9558ffff	             mov rdx, qword [rbp - 0xa8]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15e3	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15ea	            0x89c6	                            mov esi, eax	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15ec	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15f3	          0x4889d1	                            mov rcx, rdx	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15f6	            0x89f2	                            mov edx, esi	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15f8	      0xbe00000000	                              mov esi, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x15fd	          0x4889c7	                            mov rdi, rax	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x1600	      0xb800000000	                              mov eax, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x1605	      0xe800000000	                          call 0x400164a	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x160a	            0xeb70	                           jmp 0x40016bc	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x160c	    0x488bb558ffff	             mov rsi, qword [rbp - 0xa8]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1613	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x161a	          0x4189c0	                            mov r8d, eax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x161d	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1624	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x162b	          0x4189c1	                            mov r9d, eax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x162e	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       490	pretty.c	WHILE_3	FUNCTION_19	ELSE_3
0x1635	            0x8b00	                    mov eax, dword [rax]	       490	pretty.c	WHILE_3	FUNCTION_19	ELSE_3
0x1637	          0x83f804	                              cmp eax, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x163a	            0x7507	                           jne 0x4001683	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x163c	      0xbf04000000	                              mov edi, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1641	            0xeb05	                           jmp 0x4001688	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1643	      0xbf00000000	                              mov edi, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1648	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x164f	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1656	        0x4883ec08	                              sub rsp, 8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x165a	              0x56	                                push rsi	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x165b	            0x4150	                                 push r8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x165d	              0x51	                                push rcx	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x165e	    0x41b800000000	                              mov r8d, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1664	            0x89f9	                            mov ecx, edi	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1666	      0xbe00000000	                              mov esi, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x166b	          0x4889c7	                            mov rdi, rax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x166e	      0xb800000000	                              mov eax, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1673	      0xe800000000	                          call 0x40016b8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x1678	        0x4883c420	                           add rsp, 0x20	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x167c	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1683	            0x8b00	                    mov eax, dword [rax]	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1685	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1688	     0xf8492000000	                            je 0x4001760	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x168e	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1691	            0x770a	                            ja 0x40016dd	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1693	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1696	            0x7413	                            je 0x40016eb	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1698	      0xe9c8000000	                           jmp 0x40017a5	       510	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x169d	          0x83e806	                              sub eax, 6	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x16a0	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x16a3	     0xf87bc000000	                            ja 0x40017a5	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x16a9	            0xeb3b	                           jmp 0x4001726	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x16ab	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       497	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x16b2	        0x488d5018	                   lea rdx, [rax + 0x18]	       497	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x16b6	        0x488d45a0	                   lea rax, [rbp - 0x60]	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16ba	          0x4889d6	                            mov rsi, rdx	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16bd	          0x4889c7	                            mov rdi, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16c0	      0xe800000000	                          call 0x4001705	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16c5	          0x4889c2	                            mov rdx, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16c8	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16cf	      0xbe00000000	                              mov esi, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16d4	          0x4889c7	                            mov rdi, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16d7	      0xb800000000	                              mov eax, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16dc	      0xe800000000	                          call 0x4001721	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x16e1	      0xe980000000	                           jmp 0x40017a6	       498	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x16e6	      0xbf05000000	                              mov edi, 5	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x16eb	      0xe800000000	                          call 0x4001730	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x16f0	          0x4889c2	                            mov rdx, rax	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x16f3	        0x488d45a0	                   lea rax, [rbp - 0x60]	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x16f7	          0x4889d6	                            mov rsi, rdx	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x16fa	          0x4889c7	                            mov rdi, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x16fd	      0xe800000000	                          call 0x4001742	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x1702	          0x4889c2	                            mov rdx, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x1705	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x170c	      0xbe00000000	                              mov esi, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x1711	          0x4889c7	                            mov rdi, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x1714	      0xb800000000	                              mov eax, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x1719	      0xe800000000	                          call 0x400175e	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x171e	            0xeb46	                           jmp 0x40017a6	       503	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1720	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       506	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_33
0x1727	        0x488d5018	                   lea rdx, [rax + 0x18]	       506	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_33
0x172b	        0x488d45a0	                   lea rax, [rbp - 0x60]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x172f	          0x4889d6	                            mov rsi, rdx	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1732	          0x4889c7	                            mov rdi, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1735	      0xe800000000	                          call 0x400177a	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x173a	          0x4889c1	                            mov rcx, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x173d	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1744	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x174b	      0xbe00000000	                              mov esi, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1750	          0x4889c7	                            mov rdi, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1753	      0xb800000000	                              mov eax, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x1758	      0xe800000000	                          call 0x400179d	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x175d	            0xeb07	                           jmp 0x40017a6	       507	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x175f	              0x90	                                     nop	       436	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x1760	            0xeb04	                           jmp 0x40017a6	       436	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x1762	              0x90	                                     nop	       440	pretty.c	WHILE_3	FUNCTION_19	IF_2
0x1763	            0xeb01	                           jmp 0x40017a6	       440	pretty.c	WHILE_3	FUNCTION_19	IF_2
0x1765	              0x90	                                     nop	       510	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x1766	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       512	pretty.c	WHILE_3	FUNCTION_19
0x176a	    0x644833042528	                xor rax, qword fs:[0x28]	       512	pretty.c	WHILE_3	FUNCTION_19
0x1773	            0x7405	                            je 0x40017ba	       512	pretty.c	WHILE_3	FUNCTION_19
0x1775	      0xe800000000	                          call 0x40017ba	       512	pretty.c	WHILE_3	FUNCTION_19
0x177a	        0x488b5df8	                mov rbx, qword [rbp - 8]	       512	pretty.c	WHILE_3	FUNCTION_19
0x177e	              0xc9	                                   leave	       512	pretty.c	WHILE_3	FUNCTION_19
0x177f	              0xc3	                                     ret	       512	pretty.c	WHILE_3	FUNCTION_19
pp_title_line	ELSE,2:IF,9:FOR,2:WHILE,0:CALL,20:DO,0:functions,0:SWITCH,0	201
0x4420	              0x55	                                push rbp	      1613	pretty.c	FUNCTION_46
0x4421	          0x4889e5	                            mov rbp, rsp	      1613	pretty.c	FUNCTION_46
0x4424	              0x53	                                push rbx	      1613	pretty.c	FUNCTION_46
0x4425	        0x4883ec68	                           sub rsp, 0x68	      1613	pretty.c	FUNCTION_46
0x4429	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1613	pretty.c	FUNCTION_46
0x442d	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1613	pretty.c	FUNCTION_46
0x4431	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1613	pretty.c	FUNCTION_46
0x4435	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1613	pretty.c	FUNCTION_46
0x4439	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1613	pretty.c	FUNCTION_46
0x443d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1613	pretty.c	FUNCTION_46
0x4446	        0x488945e8	             mov qword [rbp - 0x18], rax	      1613	pretty.c	FUNCTION_46
0x444a	            0x31c0	                            xor eax, eax	      1613	pretty.c	FUNCTION_46
0x444c	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1617	pretty.c	FUNCTION_46	CALL_1
0x4450	      0xbe50000000	                           mov esi, 0x50	      1617	pretty.c	FUNCTION_46	CALL_1
0x4455	          0x4889c7	                            mov rdi, rax	      1617	pretty.c	FUNCTION_46	CALL_1
0x4458	      0xe800000000	                          call 0x400449d	      1617	pretty.c	FUNCTION_46	CALL_1
0x445d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1619	pretty.c	FUNCTION_46
0x4461	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1619	pretty.c	FUNCTION_46
0x4464	            0x85c0	                           test eax, eax	      1618	pretty.c	FUNCTION_46	CALL_2
0x4466	            0x7407	                            je 0x40044af	      1618	pretty.c	FUNCTION_46	CALL_2
0x4468	      0xba00000000	                              mov edx, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x446d	            0xeb05	                           jmp 0x40044b4	      1618	pretty.c	FUNCTION_46	CALL_2
0x446f	      0xba00000000	                              mov edx, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x4474	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1618	pretty.c	FUNCTION_46	CALL_2
0x4478	          0x488b08	                    mov rcx, qword [rax]	      1618	pretty.c	FUNCTION_46	CALL_2
0x447b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1618	pretty.c	FUNCTION_46	CALL_2
0x447f	          0x4889ce	                            mov rsi, rcx	      1618	pretty.c	FUNCTION_46	CALL_2
0x4482	          0x4889c7	                            mov rdi, rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x4485	      0xe800000000	                          call 0x40044ca	      1618	pretty.c	FUNCTION_46	CALL_2
0x448a	          0x4889c2	                            mov rdx, rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x448d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1618	pretty.c	FUNCTION_46	CALL_2
0x4491	          0x488910	                    mov qword [rax], rdx	      1618	pretty.c	FUNCTION_46	CALL_2
0x4494	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1621	pretty.c	FUNCTION_46	CALL_3
0x4498	    0x488d90000400	                  lea rdx, [rax + 0x400]	      1621	pretty.c	FUNCTION_46	CALL_3
0x449f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1621	pretty.c	FUNCTION_46	CALL_3
0x44a3	          0x4889d6	                            mov rsi, rdx	      1621	pretty.c	FUNCTION_46	CALL_3
0x44a6	          0x4889c7	                            mov rdi, rax	      1621	pretty.c	FUNCTION_46	CALL_3
0x44a9	      0xe800000000	                          call 0x40044ee	      1621	pretty.c	FUNCTION_46	CALL_3
0x44ae	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1622	pretty.c	FUNCTION_46	IF_1
0x44b2	          0x8b4034	            mov eax, dword [rax + 0x34] 	      1622	pretty.c	FUNCTION_46	IF_1
0x44b5	            0x85c0	                           test eax, eax	      1622	pretty.c	FUNCTION_46	IF_1
0x44b7	     0xf849c000000	                            je 0x4004599	      1622	pretty.c	FUNCTION_46	IF_1
0x44bd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x44c1	        0x488b4050	            mov rax, qword [rax + 0x50] 	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x44c5	          0x4885c0	                           test rax, rax	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x44c8	            0x7417	                            je 0x4004521	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x44ca	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44ce	        0x488b5050	            mov rdx, qword [rax + 0x50] 	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44d2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44d6	          0x4889d6	                            mov rsi, rdx	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44d9	          0x4889c7	                            mov rdi, rax	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44dc	      0xe800000000	                          call 0x4004521	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x44e1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44e5	            0x89c1	                            mov ecx, eax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44e7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44eb	      0xba00000000	                              mov edx, 0	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44f0	            0x89ce	                            mov esi, ecx	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44f2	          0x4889c7	                            mov rdi, rax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44f5	      0xe895c9ffff	         call sym.needs_rfc2047_encoding	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44fa	            0x85c0	                           test eax, eax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44fc	            0x7420	                            je 0x400455e	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x44fe	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4502	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4506	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x450a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x450e	    0x41b800000000	                              mov r8d, 0	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4514	          0x4889c7	                            mov rdi, rax	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4517	      0xe801caffff	                    call sym.add_rfc2047	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x451c	            0xeb4e	                           jmp 0x40045ac	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x451e	    0x8b1d00000000	            mov ebx, dword [0x04004564] 	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4524	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x4528	          0x4889c7	                            mov rdi, rax	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x452b	      0xe89ec7ffff	               call sym.last_line_length	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x4530	            0xf7d8	                                 neg eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4532	            0x89c2	                            mov edx, eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4534	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4538	            0x89c7	                            mov edi, eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x453a	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x453e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4542	          0x4189d9	                            mov r9d, ebx	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4545	    0x41b801000000	                              mov r8d, 1	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x454b	            0x89d1	                            mov ecx, edx	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x454d	            0x89fa	                            mov edx, edi	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x454f	          0x4889c7	                            mov rdi, rax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4552	      0xe800000000	                          call 0x4004597	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4557	            0xeb13	                           jmp 0x40045ac	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4559	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x455d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x4561	          0x4889d6	                            mov rsi, rdx	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x4564	          0x4889c7	                            mov rdi, rax	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x4567	      0xe800000000	                          call 0x40045ac	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x456c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1634	pretty.c	FUNCTION_46	CALL_10
0x4570	      0xbe0a000000	                            mov esi, 0xa	      1634	pretty.c	FUNCTION_46	CALL_10
0x4575	          0x4889c7	                            mov rdi, rax	      1634	pretty.c	FUNCTION_46	CALL_10
0x4578	      0xe88fbcffff	                   call sym.strbuf_addch	      1634	pretty.c	FUNCTION_46	CALL_10
0x457d	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1636	pretty.c	FUNCTION_46	IF_4
0x4581	            0x754b	                           jne 0x400460e	      1636	pretty.c	FUNCTION_46	IF_4
0x4583	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x458a	            0xeb31	                           jmp 0x40045fd	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x458c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x4590	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x4594	          0x8b55c0	             mov edx, dword [rbp - 0x40]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x4597	          0x4863d2	                         movsxd rdx, edx	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x459a	        0x48c1e204	                              shl rdx, 4	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x459e	          0x4801d0	                            add rax, rdx	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45a1	          0x488b00	                    mov rax, qword [rax]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45a4	          0x4889c7	                            mov rdi, rax	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45a7	      0xe800000000	                          call 0x40045ec	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45ac	            0x85c0	                           test eax, eax	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45ae	            0x7409	                            je 0x40045f9	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x45b0	    0xc7459c010000	               mov dword [rbp - 0x64], 1	      1640	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5
0x45b7	            0xeb15	                           jmp 0x400460e	      1641	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5
0x45b9	        0x8345c001	               add dword [rbp - 0x40], 1	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45bd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45c1	    0x8b9080000000	            mov edx, dword [rax + 0x80] 	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45c7	          0x8b45c0	             mov eax, dword [rbp - 0x40]	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45ca	            0x39c2	                            cmp edx, eax	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45cc	            0x77be	                            ja 0x40045cc	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x45ce	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1646	pretty.c	FUNCTION_46	IF_6
0x45d2	            0x7e24	                           jle 0x4004638	      1646	pretty.c	FUNCTION_46	IF_6
0x45d4	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1647	pretty.c	FUNCTION_46	IF_6
0x45dc	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45e0	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45e4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45e8	          0x4889ce	                            mov rsi, rcx	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45eb	          0x4889c7	                            mov rdi, rax	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45ee	      0xb800000000	                              mov eax, 0	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45f3	      0xe800000000	                          call 0x4004638	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x45f8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1653	pretty.c	FUNCTION_46	IF_7
0x45fc	        0x488b4008	                mov rax, qword [rax + 8]	      1653	pretty.c	FUNCTION_46	IF_7
0x4600	          0x4885c0	                           test rax, rax	      1653	pretty.c	FUNCTION_46	IF_7
0x4603	            0x7417	                            je 0x400465c	      1653	pretty.c	FUNCTION_46	IF_7
0x4605	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4609	        0x488b5008	                mov rdx, qword [rax + 8]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x460d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4611	          0x4889d6	                            mov rsi, rdx	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4614	          0x4889c7	                            mov rdi, rax	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4617	      0xe85ebcffff	                  call sym.strbuf_addstr	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x461c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4620	            0x8b00	                    mov eax, dword [rax]	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4622	            0x89c7	                            mov edi, eax	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4624	      0xe823bdffff	               call sym.cmit_fmt_is_mail	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4629	            0x85c0	                           test eax, eax	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x462b	            0x7411	                            je 0x400467e	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x462d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4631	      0xbe0a000000	                            mov esi, 0xa	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4636	          0x4889c7	                            mov rdi, rax	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4639	      0xe8cebbffff	                   call sym.strbuf_addch	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x463e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1660	pretty.c	FUNCTION_46	IF_9
0x4642	    0x8b8080000000	            mov eax, dword [rax + 0x80] 	      1660	pretty.c	FUNCTION_46	IF_9
0x4648	            0x85c0	                           test eax, eax	      1660	pretty.c	FUNCTION_46	IF_9
0x464a	     0xf848b000000	                            je 0x400471b	      1660	pretty.c	FUNCTION_46	IF_9
0x4650	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x4657	            0xeb4b	                           jmp 0x40046e4	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x4659	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x465d	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4661	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4664	          0x4863d2	                         movsxd rdx, edx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4667	        0x48c1e204	                              shl rdx, 4	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x466b	          0x4801d0	                            add rax, rdx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x466e	          0x488b10	                    mov rdx, qword [rax]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4671	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4675	          0x4889d6	                            mov rsi, rdx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4678	          0x4889c7	                            mov rdi, rax	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x467b	      0xe8fabbffff	                  call sym.strbuf_addstr	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4680	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x4684	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x4688	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x468b	          0x4863d2	                         movsxd rdx, edx	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x468e	        0x48c1e204	                              shl rdx, 4	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x4692	          0x4801d0	                            add rax, rdx	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x4695	          0x488b00	                    mov rax, qword [rax]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x4698	          0x4889c7	                            mov rdi, rax	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x469b	      0xe800000000	                          call 0x40046e0	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x46a0	        0x8345c401	               add dword [rbp - 0x3c], 1	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46a4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46a8	    0x8b9080000000	            mov edx, dword [rax + 0x80] 	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46ae	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46b1	            0x39c2	                            cmp edx, eax	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46b3	            0x77a4	                            ja 0x4004699	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x46b5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x46b9	        0x4883c078	                           add rax, 0x78	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x46bd	      0xbe00000000	                              mov esi, 0	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x46c2	          0x4889c7	                            mov rdi, rax	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x46c5	      0xe800000000	                          call 0x400470a	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x46ca	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x46ce	      0xbe0a000000	                            mov esi, 0xa	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x46d3	          0x4889c7	                            mov rdi, rax	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x46d6	      0xe831bbffff	                   call sym.strbuf_addch	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x46db	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1670	pretty.c	FUNCTION_46	CALL_20
0x46df	          0x4889c7	                            mov rdi, rax	      1670	pretty.c	FUNCTION_46	CALL_20
0x46e2	      0xe800000000	                          call 0x4004727	      1670	pretty.c	FUNCTION_46	CALL_20
0x46e7	              0x90	                                     nop	      1671	pretty.c	FUNCTION_46
0x46e8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1671	pretty.c	FUNCTION_46
0x46ec	    0x644833042528	                xor rax, qword fs:[0x28]	      1671	pretty.c	FUNCTION_46
0x46f5	            0x7405	                            je 0x400473c	      1671	pretty.c	FUNCTION_46
0x46f7	      0xe800000000	                          call 0x400473c	      1671	pretty.c	FUNCTION_46
0x46fc	        0x4883c468	                           add rsp, 0x68	      1671	pretty.c	FUNCTION_46
0x4700	              0x5b	                                 pop rbx	      1671	pretty.c	FUNCTION_46
0x4701	              0x5d	                                 pop rbp	      1671	pretty.c	FUNCTION_46
0x4702	              0xc3	                                     ret	      1671	pretty.c	FUNCTION_46
find_commit_format	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	16
0x9fe	              0x55	                                push rbp	       147	pretty.c	WHILE_3	FUNCTION_6
0x9ff	          0x4889e5	                            mov rbp, rsp	       147	pretty.c	WHILE_3	FUNCTION_6
0xa02	        0x4883ec10	                           sub rsp, 0x10	       147	pretty.c	WHILE_3	FUNCTION_6
0xa06	        0x48897df8	                mov qword [rbp - 8], rdi	       147	pretty.c	WHILE_3	FUNCTION_6
0xa0a	    0x488b05000000	            mov rax, qword [0x04000a51] 	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0xa11	          0x4885c0	                           test rax, rax	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0xa14	            0x7505	                           jne 0x4000a5b	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0xa16	      0xe8e4fcffff	           call sym.setup_commit_formats	       149	pretty.c	WHILE_3	FUNCTION_6	CALL_1
0xa1b	        0x488b4df8	                mov rcx, qword [rbp - 8]	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa1f	        0x488b45f8	                mov rax, qword [rbp - 8]	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa23	      0xba00000000	                              mov edx, 0	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa28	          0x4889ce	                            mov rsi, rcx	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa2b	          0x4889c7	                            mov rdi, rax	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa2e	      0xe8a0feffff	   call sym.find_commit_format_recursive	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0xa33	              0xc9	                                   leave	       152	pretty.c	WHILE_3	FUNCTION_6
0xa34	              0xc3	                                     ret	       152	pretty.c	WHILE_3	FUNCTION_6
get_one_line	ELSE,0:IF,2:FOR,1:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	21
0xb9d	              0x55	                                push rbp	       190	pretty.c	WHILE_3	FUNCTION_8
0xb9e	          0x4889e5	                            mov rbp, rsp	       190	pretty.c	WHILE_3	FUNCTION_8
0xba1	        0x48897de8	             mov qword [rbp - 0x18], rdi	       190	pretty.c	WHILE_3	FUNCTION_8
0xba5	    0xc745fc000000	                  mov dword [rbp - 4], 0	       191	pretty.c	WHILE_3	FUNCTION_8
0xbac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbb0	        0x488d5001	                      lea rdx, [rax + 1]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbb4	        0x488955e8	             mov qword [rbp - 0x18], rdx	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbb8	           0xfb600	                   movzx eax, byte [rax]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbbb	          0x8845fb	                  mov byte [rbp - 5], al	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbbe	        0x807dfb00	                   cmp byte [rbp - 5], 0	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0xbc2	            0x740c	                            je 0x4000c10	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0xbc4	        0x8345fc01	                  add dword [rbp - 4], 1	       197	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbc8	        0x807dfb0a	                 cmp byte [rbp - 5], 0xa	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0xbcc	            0x7405	                            je 0x4000c13	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0xbce	            0xebdc	                           jmp 0x4000bec	       200	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0xbd0	              0x90	                                     nop	       196	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0xbd1	            0xeb01	                           jmp 0x4000c14	       196	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0xbd3	              0x90	                                     nop	       199	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0xbd4	          0x8b45fc	                mov eax, dword [rbp - 4]	       201	pretty.c	WHILE_3	FUNCTION_8
0xbd7	              0x5d	                                 pop rbp	       202	pretty.c	WHILE_3	FUNCTION_8
0xbd8	              0xc3	                                     ret	       202	pretty.c	WHILE_3	FUNCTION_8
_	ELSE,0:IF,1:FOR,0:WHILE,0:CALL,2:DO,0:functions,0:SWITCH,0	15
0x2af	              0x55	                                push rbp	        51	gettext.h	FUNCTION_94
0x2b0	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_94
0x2b3	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_94
0x2b7	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_94
0x2bb	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_94	IF_1
0x2bf	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_94	IF_1
0x2c2	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_94	IF_1
0x2c4	            0x7507	                           jne 0x400030d	        52	gettext.h	FUNCTION_94	IF_1
0x2c6	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_94	IF_1
0x2cb	            0xeb0c	                           jmp 0x4000319	        53	gettext.h	FUNCTION_94	IF_1
0x2cd	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_94	CALL_2
0x2d1	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_94	CALL_2
0x2d4	      0xe800000000	                          call 0x4000319	        54	gettext.h	FUNCTION_94	CALL_2
0x2d9	              0xc9	                                   leave	        55	gettext.h	FUNCTION_94
0x2da	              0xc3	                                     ret	        55	gettext.h	FUNCTION_94
cmit_fmt_is_mail	ELSE,0:IF,0:FOR,0:WHILE,0:CALL,0:DO,0:functions,0:SWITCH,0	12
0x34c	              0x55	                                push rbp	        53	pretty.h	FUNCTION_96
0x34d	          0x4889e5	                            mov rbp, rsp	        53	pretty.h	FUNCTION_96
0x350	          0x897dfc	                mov dword [rbp - 4], edi	        53	pretty.h	FUNCTION_96
0x353	        0x837dfc06	                  cmp dword [rbp - 4], 6	        54	pretty.h	FUNCTION_96
0x357	            0x7406	                            je 0x400039f	        54	pretty.h	FUNCTION_96
0x359	        0x837dfc07	                  cmp dword [rbp - 4], 7	        54	pretty.h	FUNCTION_96
0x35d	            0x7507	                           jne 0x40003a6	        54	pretty.h	FUNCTION_96
0x35f	      0xb801000000	                              mov eax, 1	        54	pretty.h	FUNCTION_96
0x364	            0xeb05	                           jmp 0x40003ab	        54	pretty.h	FUNCTION_96
0x366	      0xb800000000	                              mov eax, 0	        54	pretty.h	FUNCTION_96
0x36b	              0x5d	                                 pop rbp	        55	pretty.h	FUNCTION_96
0x36c	              0xc3	                                     ret	        55	pretty.h	FUNCTION_96
