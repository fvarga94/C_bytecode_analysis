tekhex_get_section_contents	WHILE,0:functions,0:FOR,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	27
0x4000f9c	              0x55	                                push rbp	       676	tekhex.c	FUNCTION_13
0x4000f9d	          0x4889e5	                            mov rbp, rsp	       676	tekhex.c	FUNCTION_13
0x4000fa0	        0x4883ec30	                           sub rsp, 0x30	       676	tekhex.c	FUNCTION_13
0x4000fa4	        0x48897df8	                mov qword [rbp - 8], rdi	       676	tekhex.c	FUNCTION_13
0x4000fa8	        0x488975f0	             mov qword [rbp - 0x10], rsi	       676	tekhex.c	FUNCTION_13
0x4000fac	        0x488955e8	             mov qword [rbp - 0x18], rdx	       676	tekhex.c	FUNCTION_13
0x4000fb0	        0x48894de0	             mov qword [rbp - 0x20], rcx	       676	tekhex.c	FUNCTION_13
0x4000fb4	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       676	tekhex.c	FUNCTION_13
0x4000fb8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       677	tekhex.c	FUNCTION_13	IF_1
0x4000fbc	          0x8b4020	            mov eax, dword [rax + 0x20] 	       677	tekhex.c	FUNCTION_13	IF_1
0x4000fbf	          0x83e003	                              and eax, 3	       677	tekhex.c	FUNCTION_13	IF_1
0x4000fc2	            0x85c0	                           test eax, eax	       677	tekhex.c	FUNCTION_13	IF_1
0x4000fc4	            0x742c	                            je 0x4000ff2	       677	tekhex.c	FUNCTION_13	IF_1
0x4000fc6	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fca	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fce	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fd2	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fd6	        0x488b45f8	                mov rax, qword [rbp - 8]	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fda	    0x41b901000000	                              mov r9d, 1	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fe0	          0x4989f8	                             mov r8, rdi	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fe3	          0x4889c7	                            mov rdi, rax	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000fe6	      0xe860feffff	          call sym.move_section_contents	       679	tekhex.c	FUNCTION_13	IF_1	CALL_1
0x4000feb	      0xb801000000	                              mov eax, 1	       680	tekhex.c	FUNCTION_13	IF_1
0x4000ff0	            0xeb05	                           jmp 0x4000ff7	       680	tekhex.c	FUNCTION_13	IF_1
0x4000ff2	      0xb800000000	                              mov eax, 0	       683	tekhex.c	FUNCTION_13
0x4000ff7	              0xc9	                                   leave	       684	tekhex.c	FUNCTION_13
0x4000ff8	              0xc3	                                     ret	       684	tekhex.c	FUNCTION_13
find_chunk	WHILE,1:functions,0:FOR,0:DO,0:IF,2:ELSE,0:CALL,1:SWITCH,0	49
0x4000315	              0x55	                                push rbp	       320	tekhex.c	FUNCTION_4
0x4000316	          0x4889e5	                            mov rbp, rsp	       320	tekhex.c	FUNCTION_4
0x4000319	        0x4883ec30	                           sub rsp, 0x30	       320	tekhex.c	FUNCTION_4
0x400031d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       320	tekhex.c	FUNCTION_4
0x4000321	        0x488975e0	             mov qword [rbp - 0x20], rsi	       320	tekhex.c	FUNCTION_4
0x4000325	          0x8955dc	             mov dword [rbp - 0x24], edx	       320	tekhex.c	FUNCTION_4
0x4000328	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       321	tekhex.c	FUNCTION_4
0x400032c	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       321	tekhex.c	FUNCTION_4
0x4000333	        0x488b4018	            mov rax, qword [rax + 0x18] 	       321	tekhex.c	FUNCTION_4
0x4000337	        0x488945f8	                mov qword [rbp - 8], rax	       321	tekhex.c	FUNCTION_4
0x400033b	    0x488165e000e0	and qword [rbp - 0x20], 0xffffffffffffe000	       323	tekhex.c	FUNCTION_4
0x4000343	            0xeb0f	                           jmp 0x4000354	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000345	        0x488b45f8	                mov rax, qword [rbp - 8]	       325	tekhex.c	FUNCTION_4	WHILE_1
0x4000349	    0x488b80082100	          mov rax, qword [rax + 0x2108] 	       325	tekhex.c	FUNCTION_4	WHILE_1
0x4000350	        0x488945f8	                mov qword [rbp - 8], rax	       325	tekhex.c	FUNCTION_4	WHILE_1
0x4000354	      0x48837df800	                  cmp qword [rbp - 8], 0	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000359	            0x7411	                            je 0x400036c	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400035b	        0x488b45f8	                mov rax, qword [rbp - 8]	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400035f	    0x488b80002100	          mov rax, qword [rax + 0x2100] 	       324	tekhex.c	FUNCTION_4	WHILE_1
0x4000366	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400036a	            0x75d9	                           jne 0x4000345	       324	tekhex.c	FUNCTION_4	WHILE_1
0x400036c	      0x48837df800	                  cmp qword [rbp - 8], 0	       327	tekhex.c	FUNCTION_4	IF_1
0x4000371	            0x7565	                           jne 0x40003d8	       327	tekhex.c	FUNCTION_4	IF_1
0x4000373	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       327	tekhex.c	FUNCTION_4	IF_1
0x4000377	            0x745f	                            je 0x40003d8	       327	tekhex.c	FUNCTION_4	IF_1
0x4000379	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       330	tekhex.c	FUNCTION_4	IF_1
0x400037d	      0xbe10210000	                         mov esi, 0x2110	       330	tekhex.c	FUNCTION_4	IF_1
0x4000382	          0x4889c7	                            mov rdi, rax	       330	tekhex.c	FUNCTION_4	IF_1
0x4000385	      0xe800000000	                          call 0x400038a	       330	tekhex.c	FUNCTION_4	IF_1
0x400038a	        0x488945f8	                mov qword [rbp - 8], rax	       330	tekhex.c	FUNCTION_4	IF_1
0x400038e	      0x48837df800	                  cmp qword [rbp - 8], 0	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x4000393	            0x7507	                           jne 0x400039c	       333	tekhex.c	FUNCTION_4	IF_1	IF_2
0x4000395	      0xb800000000	                              mov eax, 0	       334	tekhex.c	FUNCTION_4	IF_1	IF_2
0x400039a	            0xeb40	                           jmp 0x40003dc	       334	tekhex.c	FUNCTION_4	IF_1	IF_2
0x400039c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       336	tekhex.c	FUNCTION_4	IF_1
0x40003a0	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40003a7	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       336	tekhex.c	FUNCTION_4	IF_1
0x40003ab	        0x488b45f8	                mov rax, qword [rbp - 8]	       336	tekhex.c	FUNCTION_4	IF_1
0x40003af	    0x488990082100	          mov qword [rax + 0x2108], rdx 	       336	tekhex.c	FUNCTION_4	IF_1
0x40003b6	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	tekhex.c	FUNCTION_4	IF_1
0x40003ba	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       337	tekhex.c	FUNCTION_4	IF_1
0x40003be	    0x488990002100	          mov qword [rax + 0x2100], rdx 	       337	tekhex.c	FUNCTION_4	IF_1
0x40003c5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       338	tekhex.c	FUNCTION_4	IF_1
0x40003c9	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       338	tekhex.c	FUNCTION_4	IF_1
0x40003d0	        0x488b55f8	                mov rdx, qword [rbp - 8]	       338	tekhex.c	FUNCTION_4	IF_1
0x40003d4	        0x48895018	             mov qword [rax + 0x18], rdx	       338	tekhex.c	FUNCTION_4	IF_1
0x40003d8	        0x488b45f8	                mov rax, qword [rbp - 8]	       340	tekhex.c	FUNCTION_4
0x40003dc	              0xc9	                                   leave	       341	tekhex.c	FUNCTION_4
0x40003dd	              0xc3	                                     ret	       341	tekhex.c	FUNCTION_4
tekhex_init	WHILE,0:functions,0:FOR,3:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	63
0x4000040	              0x55	                                push rbp	       205	tekhex.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       205	tekhex.c	FUNCTION_1
0x4000044	        0x4883ec10	                           sub rsp, 0x10	       205	tekhex.c	FUNCTION_1
0x4000048	    0x8b0500000000	            mov eax, dword [0x0400004e] 	       210	tekhex.c	FUNCTION_1	IF_1
0x400004e	            0x85c0	                           test eax, eax	       210	tekhex.c	FUNCTION_1	IF_1
0x4000050	     0xf85cc000000	                           jne 0x4000122	       210	tekhex.c	FUNCTION_1	IF_1
0x4000056	    0xc70500000000	               mov dword [0x04000060], 1	       212	tekhex.c	FUNCTION_1	IF_1
0x4000060	      0xe800000000	                          call 0x4000065	       213	tekhex.c	FUNCTION_1	IF_1	CALL_1
0x4000065	    0xc745fc000000	                  mov dword [rbp - 4], 0	       214	tekhex.c	FUNCTION_1	IF_1
0x400006c	    0xc745f8000000	                  mov dword [rbp - 8], 0	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000073	            0xeb1d	                           jmp 0x4000092	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000075	          0x8b45f8	                mov eax, dword [rbp - 8]	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000078	          0x8d4830	                   lea ecx, [rax + 0x30]	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x400007b	          0x8b45fc	                mov eax, dword [rbp - 4]	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x400007e	          0x8d5001	                      lea edx, [rax + 1]	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000081	          0x8955fc	                mov dword [rbp - 4], edx	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000084	            0x89c2	                            mov edx, eax	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000086	            0x89c8	                            mov eax, ecx	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000088	    0x889000000000	                      mov byte [rax], dl	       216	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x400008e	        0x8345f801	                  add dword [rbp - 8], 1	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000092	        0x837df809	                  cmp dword [rbp - 8], 9	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000096	            0x76dd	                           jbe 0x4000075	       215	tekhex.c	FUNCTION_1	IF_1	FOR_1
0x4000098	    0xc745f8410000	               mov dword [rbp - 8], 0x41	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x400009f	            0xeb18	                           jmp 0x40000b9	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000a1	          0x8b45fc	                mov eax, dword [rbp - 4]	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000a4	          0x8d5001	                      lea edx, [rax + 1]	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000a7	          0x8955fc	                mov dword [rbp - 4], edx	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000aa	            0x89c2	                            mov edx, eax	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000ac	          0x8b45f8	                mov eax, dword [rbp - 8]	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000af	    0x889000000000	                      mov byte [rax], dl	       219	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000b5	        0x8345f801	                  add dword [rbp - 8], 1	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000b9	        0x837df85a	               cmp dword [rbp - 8], 0x5a	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000bd	            0x76e2	                           jbe 0x40000a1	       218	tekhex.c	FUNCTION_1	IF_1	FOR_2
0x40000bf	          0x8b45fc	                mov eax, dword [rbp - 4]	       221	tekhex.c	FUNCTION_1	IF_1
0x40000c2	          0x8d5001	                      lea edx, [rax + 1]	       221	tekhex.c	FUNCTION_1	IF_1
0x40000c5	          0x8955fc	                mov dword [rbp - 4], edx	       221	tekhex.c	FUNCTION_1	IF_1
0x40000c8	    0x880500000000	               mov byte [0x040000ce], al	       221	tekhex.c	FUNCTION_1	IF_1
0x40000ce	          0x8b45fc	                mov eax, dword [rbp - 4]	       222	tekhex.c	FUNCTION_1	IF_1
0x40000d1	          0x8d5001	                      lea edx, [rax + 1]	       222	tekhex.c	FUNCTION_1	IF_1
0x40000d4	          0x8955fc	                mov dword [rbp - 4], edx	       222	tekhex.c	FUNCTION_1	IF_1
0x40000d7	    0x880500000000	               mov byte [0x040000dd], al	       222	tekhex.c	FUNCTION_1	IF_1
0x40000dd	          0x8b45fc	                mov eax, dword [rbp - 4]	       223	tekhex.c	FUNCTION_1	IF_1
0x40000e0	          0x8d5001	                      lea edx, [rax + 1]	       223	tekhex.c	FUNCTION_1	IF_1
0x40000e3	          0x8955fc	                mov dword [rbp - 4], edx	       223	tekhex.c	FUNCTION_1	IF_1
0x40000e6	    0x880500000000	               mov byte [0x040000ec], al	       223	tekhex.c	FUNCTION_1	IF_1
0x40000ec	          0x8b45fc	                mov eax, dword [rbp - 4]	       224	tekhex.c	FUNCTION_1	IF_1
0x40000ef	          0x8d5001	                      lea edx, [rax + 1]	       224	tekhex.c	FUNCTION_1	IF_1
0x40000f2	          0x8955fc	                mov dword [rbp - 4], edx	       224	tekhex.c	FUNCTION_1	IF_1
0x40000f5	    0x880500000000	               mov byte [0x040000fb], al	       224	tekhex.c	FUNCTION_1	IF_1
0x40000fb	    0xc745f8610000	               mov dword [rbp - 8], 0x61	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000102	            0xeb18	                           jmp 0x400011c	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000104	          0x8b45fc	                mov eax, dword [rbp - 4]	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000107	          0x8d5001	                      lea edx, [rax + 1]	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400010a	          0x8955fc	                mov dword [rbp - 4], edx	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400010d	            0x89c2	                            mov edx, eax	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400010f	          0x8b45f8	                mov eax, dword [rbp - 8]	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000112	    0x889000000000	                      mov byte [rax], dl	       226	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000118	        0x8345f801	                  add dword [rbp - 8], 1	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x400011c	        0x837df87a	               cmp dword [rbp - 8], 0x7a	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000120	            0x76e2	                           jbe 0x4000104	       225	tekhex.c	FUNCTION_1	IF_1	FOR_3
0x4000122	              0x90	                                     nop	       228	tekhex.c	FUNCTION_1
0x4000123	              0xc9	                                   leave	       228	tekhex.c	FUNCTION_1
0x4000124	              0xc3	                                     ret	       228	tekhex.c	FUNCTION_1
insert_byte	WHILE,0:functions,0:FOR,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	31
0x40003de	              0x55	                                push rbp	       345	tekhex.c	FUNCTION_5
0x40003df	          0x4889e5	                            mov rbp, rsp	       345	tekhex.c	FUNCTION_5
0x40003e2	        0x4883ec30	                           sub rsp, 0x30	       345	tekhex.c	FUNCTION_5
0x40003e6	        0x48897de8	             mov qword [rbp - 0x18], rdi	       345	tekhex.c	FUNCTION_5
0x40003ea	          0x8975e4	             mov dword [rbp - 0x1c], esi	       345	tekhex.c	FUNCTION_5
0x40003ed	        0x488955d8	             mov qword [rbp - 0x28], rdx	       345	tekhex.c	FUNCTION_5
0x40003f1	        0x837de400	               cmp dword [rbp - 0x1c], 0	       346	tekhex.c	FUNCTION_5	IF_1
0x40003f5	            0x7450	                            je 0x4000447	       346	tekhex.c	FUNCTION_5	IF_1
0x40003f7	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x40003fb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x40003ff	      0xba01000000	                              mov edx, 1	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000404	          0x4889ce	                            mov rsi, rcx	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000407	          0x4889c7	                            mov rdi, rax	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x400040a	      0xe806ffffff	                     call sym.find_chunk	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x400040f	        0x488945f8	                mov qword [rbp - 8], rax	       349	tekhex.c	FUNCTION_5	IF_1	CALL_1
0x4000413	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       351	tekhex.c	FUNCTION_5	IF_1
0x4000417	      0x25ff1f0000	                         and eax, 0x1fff	       351	tekhex.c	FUNCTION_5	IF_1
0x400041c	          0x4889c2	                            mov rdx, rax	       351	tekhex.c	FUNCTION_5	IF_1
0x400041f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       351	tekhex.c	FUNCTION_5	IF_1
0x4000422	            0x89c1	                            mov ecx, eax	       351	tekhex.c	FUNCTION_5	IF_1
0x4000424	        0x488b45f8	                mov rax, qword [rbp - 8]	       351	tekhex.c	FUNCTION_5	IF_1
0x4000428	          0x880c10	                mov byte [rax + rdx], cl	       351	tekhex.c	FUNCTION_5	IF_1
0x400042b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       352	tekhex.c	FUNCTION_5	IF_1
0x400042f	      0x25ff1f0000	                         and eax, 0x1fff	       352	tekhex.c	FUNCTION_5	IF_1
0x4000434	        0x48c1e805	                              shr rax, 5	       352	tekhex.c	FUNCTION_5	IF_1
0x4000438	          0x4889c2	                            mov rdx, rax	       352	tekhex.c	FUNCTION_5	IF_1
0x400043b	        0x488b45f8	                mov rax, qword [rbp - 8]	       352	tekhex.c	FUNCTION_5	IF_1
0x400043f	    0xc68410002000	       mov byte [rax + rdx + 0x2000], 1 	       352	tekhex.c	FUNCTION_5	IF_1
0x4000447	              0x90	                                     nop	       354	tekhex.c	FUNCTION_5
0x4000448	              0xc9	                                   leave	       354	tekhex.c	FUNCTION_5
0x4000449	              0xc3	                                     ret	       354	tekhex.c	FUNCTION_5
tekhex_mkobject	WHILE,0:functions,0:FOR,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	27
0x4000ceb	              0x55	                                push rbp	       586	tekhex.c	FUNCTION_10
0x4000cec	          0x4889e5	                            mov rbp, rsp	       586	tekhex.c	FUNCTION_10
0x4000cef	        0x4883ec20	                           sub rsp, 0x20	       586	tekhex.c	FUNCTION_10
0x4000cf3	        0x48897de8	             mov qword [rbp - 0x18], rdi	       586	tekhex.c	FUNCTION_10
0x4000cf7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000cfb	      0xbe20000000	                           mov esi, 0x20	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000d00	          0x4889c7	                            mov rdi, rax	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000d03	      0xe800000000	                          call 0x4000d08	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000d08	        0x488945f8	                mov qword [rbp - 8], rax	       589	tekhex.c	FUNCTION_10	CALL_1
0x4000d0c	      0x48837df800	                  cmp qword [rbp - 8], 0	       590	tekhex.c	FUNCTION_10	IF_1
0x4000d11	            0x7507	                           jne 0x4000d1a	       590	tekhex.c	FUNCTION_10	IF_1
0x4000d13	      0xb800000000	                              mov eax, 0	       591	tekhex.c	FUNCTION_10	IF_1
0x4000d18	            0xeb42	                           jmp 0x4000d5c	       591	tekhex.c	FUNCTION_10	IF_1
0x4000d1a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       592	tekhex.c	FUNCTION_10
0x4000d1e	        0x488b55f8	                mov rdx, qword [rbp - 8]	       592	tekhex.c	FUNCTION_10
0x4000d22	    0x488990f80000	             mov qword [rax + 0xf8], rdx	       592	tekhex.c	FUNCTION_10
0x4000d29	        0x488b45f8	                mov rax, qword [rbp - 8]	       593	tekhex.c	FUNCTION_10
0x4000d2d	    0xc74008010000	                  mov dword [rax + 8], 1	       593	tekhex.c	FUNCTION_10
0x4000d34	        0x488b45f8	                mov rax, qword [rbp - 8]	       594	tekhex.c	FUNCTION_10
0x4000d38	    0x48c700000000	                      mov qword [rax], 0	       594	tekhex.c	FUNCTION_10
0x4000d3f	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	tekhex.c	FUNCTION_10
0x4000d43	    0x48c740100000	               mov qword [rax + 0x10], 0	       595	tekhex.c	FUNCTION_10
0x4000d4b	        0x488b45f8	                mov rax, qword [rbp - 8]	       596	tekhex.c	FUNCTION_10
0x4000d4f	    0x48c740180000	               mov qword [rax + 0x18], 0	       596	tekhex.c	FUNCTION_10
0x4000d57	      0xb801000000	                              mov eax, 1	       597	tekhex.c	FUNCTION_10
0x4000d5c	              0xc9	                                   leave	       598	tekhex.c	FUNCTION_10
0x4000d5d	              0xc3	                                     ret	       598	tekhex.c	FUNCTION_10
tekhex_write_object_contents	WHILE,0:functions,0:FOR,5:DO,0:IF,4:ELSE,0:CALL,15:SWITCH,1	239
0x40013de	              0x55	                                push rbp	       801	tekhex.c	FUNCTION_19
0x40013df	          0x4889e5	                            mov rbp, rsp	       801	tekhex.c	FUNCTION_19
0x40013e2	    0x4881ecc00000	                           sub rsp, 0xc0	       801	tekhex.c	FUNCTION_19
0x40013e9	    0x4889bd48ffff	             mov qword [rbp - 0xb8], rdi	       801	tekhex.c	FUNCTION_19
0x40013f0	    0x64488b042528	                mov rax, qword fs:[0x28]	       801	tekhex.c	FUNCTION_19
0x40013f9	        0x488945f8	                mov qword [rbp - 8], rax	       801	tekhex.c	FUNCTION_19
0x40013fd	            0x31c0	                            xor eax, eax	       801	tekhex.c	FUNCTION_19
0x40013ff	      0xe83cecffff	                    call sym.tekhex_init	       807	tekhex.c	FUNCTION_19	CALL_1
0x4001404	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       810	tekhex.c	FUNCTION_19	FOR_1
0x400140b	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4001412	        0x488b4018	            mov rax, qword [rax + 0x18] 	       810	tekhex.c	FUNCTION_19	FOR_1
0x4001416	        0x48894580	             mov qword [rbp - 0x80], rax	       810	tekhex.c	FUNCTION_19	FOR_1
0x400141a	      0xe94d010000	                           jmp 0x400156c	       810	tekhex.c	FUNCTION_19	FOR_1
0x400141f	    0xc78560ffffff	               mov dword [rbp - 0xa0], 0	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4001429	      0xe91f010000	                           jmp 0x400154d	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x400142e	    0x8b8560ffffff	             mov eax, dword [rbp - 0xa0]	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001434	          0x8d501f	                   lea edx, [rax + 0x1f]	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001437	            0x85c0	                           test eax, eax	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001439	           0xf48c2	                          cmovs eax, edx	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400143c	          0xc1f805	                              sar eax, 5	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400143f	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001443	            0x4898	                                    cdqe	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001445	     0xfb684020020	   movzx eax, byte [rdx + rax + 0x2000] 	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400144d	            0x84c0	                             test al, al	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x400144f	     0xf84f1000000	                            je 0x4001546	       820	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001455	        0x488d4590	                   lea rax, [rbp - 0x70]	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001459	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       822	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1
0x4001460	    0x8b8560ffffff	             mov eax, dword [rbp - 0xa0]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001466	          0x4863d0	                         movsxd rdx, eax	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001469	        0x488b4580	             mov rax, qword [rbp - 0x80]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x400146d	    0x488b80002100	          mov rax, qword [rax + 0x2100] 	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001474	          0x4801c2	                            add rdx, rax	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001477	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x400147e	          0x4889d6	                            mov rsi, rdx	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001481	          0x4889c7	                            mov rdi, rax	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001484	      0xe80dfcffff	                     call sym.writevalue	       824	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_2
0x4001489	    0xc7855cffffff	               mov dword [rbp - 0xa4], 0	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001493	      0xe982000000	                           jmp 0x400151a	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001498	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x400149f	        0x488d4801	                      lea rcx, [rax + 1]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014a3	    0x8b9560ffffff	             mov edx, dword [rbp - 0xa0]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014a9	    0x8b855cffffff	             mov eax, dword [rbp - 0xa4]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014af	             0x1d0	                            add eax, edx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014b1	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014b5	            0x4898	                                    cdqe	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014b7	         0xfb60402	             movzx eax, byte [rdx + rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014bb	           0xfb6c0	                           movzx eax, al	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014be	          0x83e00f	                            and eax, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014c1	            0x4898	                                    cdqe	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014c3	     0xfb680000000	                   movzx eax, byte [rax]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014ca	            0x8801	                      mov byte [rcx], al	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014cc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014d3	    0x8b8d60ffffff	             mov ecx, dword [rbp - 0xa0]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014d9	    0x8b955cffffff	             mov edx, dword [rbp - 0xa4]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014df	             0x1ca	                            add edx, ecx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014e1	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014e5	          0x4863d2	                         movsxd rdx, edx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014e8	         0xfb61411	             movzx edx, byte [rcx + rdx]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014ec	          0xc0ea04	                               shr dl, 4	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014ef	           0xfb6d2	                           movzx edx, dl	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014f2	          0x83e20f	                            and edx, 0xf	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014f5	          0x4863d2	                         movsxd rdx, edx	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014f8	     0xfb692000000	                   movzx edx, byte [rdx]	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x40014ff	            0x8810	                      mov byte [rax], dl	       827	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001501	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001508	        0x4883c002	                              add rax, 2	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x400150c	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       828	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001513	    0x83855cffffff	               add dword [rbp - 0xa4], 1	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x400151a	    0x83bd5cffffff	           cmp dword [rbp - 0xa4], 0x1f 	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001521	     0xf8e71ffffff	                           jle 0x4001498	       825	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	FOR_3
0x4001527	    0x488b8d68ffff	             mov rcx, qword [rbp - 0x98]	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x400152e	        0x488d5590	                   lea rdx, [rbp - 0x70]	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4001532	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4001539	      0xbe36000000	                           mov esi, 0x36	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x400153e	          0x4889c7	                            mov rdi, rax	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4001541	      0xe8f0fcffff	                            call sym.out	       830	tekhex.c	FUNCTION_19	FOR_1	FOR_2	IF_1	CALL_3
0x4001546	    0x838560ffffff	            add dword [rbp - 0xa0], 0x20	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x400154d	    0x81bd60ffffff	         cmp dword [rbp - 0xa0], 0x1fff 	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x4001557	     0xf8ed1feffff	                           jle 0x400142e	       818	tekhex.c	FUNCTION_19	FOR_1	FOR_2
0x400155d	        0x488b4580	             mov rax, qword [rbp - 0x80]	       812	tekhex.c	FUNCTION_19	FOR_1
0x4001561	    0x488b80082100	          mov rax, qword [rax + 0x2108] 	       812	tekhex.c	FUNCTION_19	FOR_1
0x4001568	        0x48894580	             mov qword [rbp - 0x80], rax	       812	tekhex.c	FUNCTION_19	FOR_1
0x400156c	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       810	tekhex.c	FUNCTION_19	FOR_1
0x4001571	     0xf85a8feffff	                           jne 0x400141f	       810	tekhex.c	FUNCTION_19	FOR_1
0x4001577	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       836	tekhex.c	FUNCTION_19	FOR_4
0x400157e	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x4001585	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       836	tekhex.c	FUNCTION_19	FOR_4
0x400158c	      0xe9b5000000	                           jmp 0x4001646	       836	tekhex.c	FUNCTION_19	FOR_4
0x4001591	        0x488d4590	                   lea rax, [rbp - 0x70]	       838	tekhex.c	FUNCTION_19	FOR_4
0x4001595	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       838	tekhex.c	FUNCTION_19	FOR_4
0x400159c	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015a3	          0x488b10	                    mov rdx, qword [rax]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015a6	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015ad	          0x4889d6	                            mov rsi, rdx	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015b0	          0x4889c7	                            mov rdi, rax	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015b3	      0xe8adfbffff	                       call sym.writesym	       840	tekhex.c	FUNCTION_19	FOR_4	CALL_4
0x40015b8	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       841	tekhex.c	FUNCTION_19	FOR_4
0x40015bf	        0x488d5001	                      lea rdx, [rax + 1]	       841	tekhex.c	FUNCTION_19	FOR_4
0x40015c3	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       841	tekhex.c	FUNCTION_19	FOR_4
0x40015ca	          0xc60031	                    mov byte [rax], 0x31	       841	tekhex.c	FUNCTION_19	FOR_4
0x40015cd	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015d4	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015d8	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015df	          0x4889d6	                            mov rsi, rdx	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015e2	          0x4889c7	                            mov rdi, rax	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015e5	      0xe8acfaffff	                     call sym.writevalue	       842	tekhex.c	FUNCTION_19	FOR_4	CALL_5
0x40015ea	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x40015f1	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x40015f5	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x40015fc	        0x488b4038	            mov rax, qword [rax + 0x38] 	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4001600	          0x4801c2	                            add rdx, rax	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4001603	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x400160a	          0x4889d6	                            mov rsi, rdx	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x400160d	          0x4889c7	                            mov rdi, rax	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4001610	      0xe881faffff	                     call sym.writevalue	       843	tekhex.c	FUNCTION_19	FOR_4	CALL_6
0x4001615	    0x488b8d68ffff	             mov rcx, qword [rbp - 0x98]	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x400161c	        0x488d5590	                   lea rdx, [rbp - 0x70]	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4001620	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4001627	      0xbe33000000	                           mov esi, 0x33	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x400162c	          0x4889c7	                            mov rdi, rax	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x400162f	      0xe802fcffff	                            call sym.out	       844	tekhex.c	FUNCTION_19	FOR_4	CALL_7
0x4001634	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       836	tekhex.c	FUNCTION_19	FOR_4
0x400163b	        0x488b4010	            mov rax, qword [rax + 0x10] 	       836	tekhex.c	FUNCTION_19	FOR_4
0x400163f	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       836	tekhex.c	FUNCTION_19	FOR_4
0x4001646	    0x4883bd78ffff	               cmp qword [rbp - 0x88], 0	       836	tekhex.c	FUNCTION_19	FOR_4
0x400164e	     0xf853dffffff	                           jne 0x4001591	       836	tekhex.c	FUNCTION_19	FOR_4
0x4001654	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       848	tekhex.c	FUNCTION_19	IF_2
0x400165b	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       848	tekhex.c	FUNCTION_19	IF_2
0x4001662	          0x4885c0	                           test rax, rax	       848	tekhex.c	FUNCTION_19	IF_2
0x4001665	     0xf84b1010000	                            je 0x400181c	       848	tekhex.c	FUNCTION_19	IF_2
0x400166b	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001672	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001679	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001680	      0xe984010000	                           jmp 0x4001809	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001685	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x400168c	          0x488b00	                    mov rax, qword [rax]	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x400168f	          0x4889c7	                            mov rdi, rax	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x4001692	      0xe800000000	                          call 0x4001697	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x4001697	    0x898564ffffff	             mov dword [rbp - 0x9c], eax	       852	tekhex.c	FUNCTION_19	IF_2	FOR_5	CALL_8
0x400169d	    0x83bd64ffffff	           cmp dword [rbp - 0x9c], 0x3f 	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016a4	     0xf8457010000	                            je 0x4001801	       854	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016aa	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       857	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016b1	          0x488b00	                    mov rax, qword [rax]	       857	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016b4	        0x48894588	             mov qword [rbp - 0x78], rax	       857	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016b8	        0x488d4590	                   lea rax, [rbp - 0x70]	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016bc	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       858	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3
0x40016c3	        0x488b4588	             mov rax, qword [rbp - 0x78]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016c7	        0x488b4020	            mov rax, qword [rax + 0x20] 	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016cb	          0x488b10	                    mov rdx, qword [rax]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016ce	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016d5	          0x4889d6	                            mov rsi, rdx	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016d8	          0x4889c7	                            mov rdi, rax	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016db	      0xe885faffff	                       call sym.writesym	       860	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_9
0x40016e0	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016e6	          0x83e841	                           sub eax, 0x41	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016e9	          0x83f833	                           cmp eax, 0x33	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016ec	     0xf87ad000000	                            ja 0x400179f	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016f2	            0x89c0	                            mov eax, eax	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016f4	    0x488b04c50000	                  mov rax, qword [rax*8]	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016fc	            0xffe0	                                 jmp rax	       862	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x40016fe	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001705	        0x488d5001	                      lea rdx, [rax + 1]	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001709	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001710	          0xc60032	                    mov byte [rax], 0x32	       865	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001713	      0xe987000000	                           jmp 0x400179f	       866	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001718	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400171f	        0x488d5001	                      lea rdx, [rax + 1]	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001723	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400172a	          0xc60036	                    mov byte [rax], 0x36	       868	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400172d	            0xeb70	                           jmp 0x400179f	       869	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400172f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001736	        0x488d5001	                      lea rdx, [rax + 1]	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400173a	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001741	          0xc60034	                    mov byte [rax], 0x34	       873	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001744	            0xeb59	                           jmp 0x400179f	       874	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001746	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400174d	        0x488d5001	                      lea rdx, [rax + 1]	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001751	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001758	          0xc60038	                    mov byte [rax], 0x38	       878	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400175b	            0xeb42	                           jmp 0x400179f	       879	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400175d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001764	        0x488d5001	                      lea rdx, [rax + 1]	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001768	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400176f	          0xc60033	                    mov byte [rax], 0x33	       881	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001772	            0xeb2b	                           jmp 0x400179f	       882	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001774	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400177b	        0x488d5001	                      lea rdx, [rax + 1]	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400177f	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001786	          0xc60037	                    mov byte [rax], 0x37	       884	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x4001789	            0xeb14	                           jmp 0x400179f	       885	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400178b	      0xbf03000000	                              mov edi, 3	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x4001790	      0xe800000000	                          call 0x4001795	       888	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1	CALL_10
0x4001795	      0xb800000000	                              mov eax, 0	       889	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400179a	      0xe9b5000000	                           jmp 0x4001854	       889	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	SWITCH_1
0x400179f	        0x488b4588	             mov rax, qword [rbp - 0x78]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017a3	        0x488b5008	                mov rdx, qword [rax + 8]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017a7	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017ae	          0x4889d6	                            mov rsi, rdx	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017b1	          0x4889c7	                            mov rdi, rax	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017b4	      0xe8acf9ffff	                       call sym.writesym	       892	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_11
0x40017b9	        0x488b4588	             mov rax, qword [rbp - 0x78]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017bd	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017c1	        0x488b4588	             mov rax, qword [rbp - 0x78]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017c5	        0x488b4020	            mov rax, qword [rax + 0x20] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017c9	        0x488b4028	            mov rax, qword [rax + 0x28] 	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017cd	          0x4801c2	                            add rdx, rax	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017d0	    0x488d8568ffff	                   lea rax, [rbp - 0x98]	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017d7	          0x4889d6	                            mov rsi, rdx	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017da	          0x4889c7	                            mov rdi, rax	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017dd	      0xe8b4f8ffff	                     call sym.writevalue	       893	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_12
0x40017e2	    0x488b8d68ffff	             mov rcx, qword [rbp - 0x98]	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40017e9	        0x488d5590	                   lea rdx, [rbp - 0x70]	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40017ed	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40017f4	      0xbe33000000	                           mov esi, 0x33	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40017f9	          0x4889c7	                            mov rdi, rax	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x40017fc	      0xe835faffff	                            call sym.out	       894	tekhex.c	FUNCTION_19	IF_2	FOR_5	IF_3	CALL_13
0x4001801	    0x48838570ffff	               add qword [rbp - 0x90], 8	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001809	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001810	          0x488b00	                    mov rax, qword [rax]	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001813	          0x4885c0	                           test rax, rax	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x4001816	     0xf8569feffff	                           jne 0x4001685	       850	tekhex.c	FUNCTION_19	IF_2	FOR_5
0x400181c	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4001823	          0x4889c2	                            mov rdx, rax	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4001826	      0xbe09000000	                              mov esi, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x400182b	      0xbf00000000	                              mov edi, 0	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4001830	      0xe800000000	                          call 0x4001835	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4001835	        0x4883f809	                              cmp rax, 9	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x4001839	            0x7414	                            je 0x400184f	       900	tekhex.c	FUNCTION_19	IF_4	CALL_14
0x400183b	      0xba00000000	                              mov edx, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x4001840	      0xbe85030000	                          mov esi, 0x385	       901	tekhex.c	FUNCTION_19	CALL_15
0x4001845	      0xbf00000000	                              mov edi, 0	       901	tekhex.c	FUNCTION_19	CALL_15
0x400184a	      0xe800000000	                          call 0x400184f	       901	tekhex.c	FUNCTION_19	CALL_15
0x400184f	      0xb801000000	                              mov eax, 1	       902	tekhex.c	FUNCTION_19
0x4001854	        0x488b75f8	                mov rsi, qword [rbp - 8]	       903	tekhex.c	FUNCTION_19
0x4001858	    0x644833342528	                xor rsi, qword fs:[0x28]	       903	tekhex.c	FUNCTION_19
0x4001861	            0x7405	                            je 0x4001868	       903	tekhex.c	FUNCTION_19
0x4001863	      0xe800000000	                          call 0x4001868	       903	tekhex.c	FUNCTION_19
0x4001868	              0xc9	                                   leave	       903	tekhex.c	FUNCTION_19
0x4001869	              0xc3	                                     ret	       903	tekhex.c	FUNCTION_19
pass_over	WHILE,2:functions,0:FOR,0:DO,0:IF,7:ELSE,0:CALL,7:SWITCH,0	123
0x4000a0c	              0x55	                                push rbp	       513	tekhex.c	FUNCTION_7
0x4000a0d	          0x4889e5	                            mov rbp, rsp	       513	tekhex.c	FUNCTION_7
0x4000a10	    0x4881ec300100	                          sub rsp, 0x130	       513	tekhex.c	FUNCTION_7
0x4000a17	    0x4889bdd8feff	            mov qword [rbp - 0x128], rdi	       513	tekhex.c	FUNCTION_7
0x4000a1e	    0x4889b5d0feff	            mov qword [rbp - 0x130], rsi	       513	tekhex.c	FUNCTION_7
0x4000a25	    0x64488b042528	                mov rax, qword fs:[0x28]	       513	tekhex.c	FUNCTION_7
0x4000a2e	        0x488945f8	                mov qword [rbp - 8], rax	       513	tekhex.c	FUNCTION_7
0x4000a32	            0x31c0	                            xor eax, eax	       513	tekhex.c	FUNCTION_7
0x4000a34	    0xc785e8feffff	              mov dword [rbp - 0x118], 0	       515	tekhex.c	FUNCTION_7
0x4000a3e	    0x488b85d8feff	            mov rax, qword [rbp - 0x128]	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a45	      0xba00000000	                              mov edx, 0	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a4a	      0xbe00000000	                              mov esi, 0	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a4f	          0x4889c7	                            mov rdi, rax	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a52	      0xe800000000	                          call 0x4000a57	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a57	            0x85c0	                           test eax, eax	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a59	     0xf84bf010000	                            je 0x4000c1e	       518	tekhex.c	FUNCTION_7	IF_1	CALL_2
0x4000a5f	      0xb800000000	                              mov eax, 0	       519	tekhex.c	FUNCTION_7	IF_1
0x4000a64	      0xe9ca010000	                           jmp 0x4000c33	       519	tekhex.c	FUNCTION_7	IF_1
0x4000a69	    0x488b95d8feff	            mov rdx, qword [rbp - 0x128]	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a70	    0x488d85f0feff	                  lea rax, [rbp - 0x110]	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a77	      0xbe01000000	                              mov esi, 1	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a7c	          0x4889c7	                            mov rdi, rax	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a7f	      0xe800000000	                          call 0x4000a84	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a84	        0x4883f801	                              cmp rax, 1	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a88	           0xf95c0	                                setne al	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a8b	           0xfb6c0	                           movzx eax, al	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a8e	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       527	tekhex.c	FUNCTION_7	WHILE_1	CALL_3
0x4000a94	            0xeb2b	                           jmp 0x4000ac1	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000a96	    0x488b95d8feff	            mov rdx, qword [rbp - 0x128]	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000a9d	    0x488d85f0feff	                  lea rax, [rbp - 0x110]	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000aa4	      0xbe01000000	                              mov esi, 1	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000aa9	          0x4889c7	                            mov rdi, rax	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000aac	      0xe800000000	                          call 0x4000ab1	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ab1	        0x4883f801	                              cmp rax, 1	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ab5	           0xf95c0	                                setne al	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ab8	           0xfb6c0	                           movzx eax, al	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000abb	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       529	tekhex.c	FUNCTION_7	WHILE_1	CALL_4
0x4000ac1	     0xfb685f0feff	           movzx eax, byte [rbp - 0x110]	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ac8	            0x3c25	                            cmp al, 0x25	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000aca	            0x7409	                            je 0x4000ad5	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000acc	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ad3	            0x74c1	                            je 0x4000a96	       528	tekhex.c	FUNCTION_7	WHILE_1	WHILE_2
0x4000ad5	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       531	tekhex.c	FUNCTION_7	WHILE_1	IF_2
0x4000adc	     0xf854b010000	                           jne 0x4000c2d	       531	tekhex.c	FUNCTION_7	WHILE_1	IF_2
0x4000ae2	    0x488b95d8feff	            mov rdx, qword [rbp - 0x128]	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000ae9	    0x488d85f0feff	                  lea rax, [rbp - 0x110]	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000af0	      0xbe05000000	                              mov esi, 5	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000af5	          0x4889c7	                            mov rdi, rax	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000af8	      0xe800000000	                          call 0x4000afd	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000afd	        0x4883f805	                              cmp rax, 5	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b01	            0x740a	                            je 0x4000b0d	       535	tekhex.c	FUNCTION_7	WHILE_1	IF_3	CALL_5
0x4000b03	      0xb800000000	                              mov eax, 0	       536	tekhex.c	FUNCTION_7	WHILE_1	IF_3
0x4000b08	      0xe926010000	                           jmp 0x4000c33	       536	tekhex.c	FUNCTION_7	WHILE_1	IF_3
0x4000b0d	     0xfb685f2feff	           movzx eax, byte [rbp - 0x10e]	       538	tekhex.c	FUNCTION_7	WHILE_1
0x4000b14	    0x8885e7feffff	              mov byte [rbp - 0x119], al	       538	tekhex.c	FUNCTION_7	WHILE_1
0x4000b1a	     0xfb685f0feff	           movzx eax, byte [rbp - 0x110]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b21	           0xfb6c0	                           movzx eax, al	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b24	            0x4898	                                    cdqe	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b26	     0xfb680000000	                   movzx eax, byte [rax]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b2d	            0x3c63	                            cmp al, 0x63	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b2f	     0xf84f8000000	                            je 0x4000c2d	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b35	     0xfb685f1feff	           movzx eax, byte [rbp - 0x10f]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b3c	           0xfb6c0	                           movzx eax, al	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b3f	            0x4898	                                    cdqe	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b41	     0xfb680000000	                   movzx eax, byte [rax]	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b48	            0x3c63	                            cmp al, 0x63	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b4a	     0xf84dd000000	                            je 0x4000c2d	       540	tekhex.c	FUNCTION_7	WHILE_1	IF_4
0x4000b50	     0xfb685f0feff	           movzx eax, byte [rbp - 0x110]	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b57	           0xfb6c0	                           movzx eax, al	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b5a	            0x4898	                                    cdqe	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b5c	     0xfb680000000	                   movzx eax, byte [rax]	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b63	           0xfb6c0	                           movzx eax, al	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b66	          0xc1e004	                              shl eax, 4	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b69	            0x89c2	                            mov edx, eax	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b6b	     0xfb685f1feff	           movzx eax, byte [rbp - 0x10f]	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b72	           0xfb6c0	                           movzx eax, al	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b75	            0x4898	                                    cdqe	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b77	     0xfb680000000	                   movzx eax, byte [rax]	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b7e	           0xfb6c0	                           movzx eax, al	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b81	             0x1d0	                            add eax, edx	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b83	          0x83e805	                              sub eax, 5	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b86	    0x8985ecfeffff	            mov dword [rbp - 0x114], eax	       544	tekhex.c	FUNCTION_7	WHILE_1
0x4000b8c	    0x81bdecfeffff	          cmp dword [rbp - 0x114], 0xfe 	       546	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000b96	            0x760a	                           jbe 0x4000ba2	       546	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000b98	      0xb800000000	                              mov eax, 0	       547	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000b9d	      0xe991000000	                           jmp 0x4000c33	       547	tekhex.c	FUNCTION_7	WHILE_1	IF_5
0x4000ba2	    0x8b8decfeffff	            mov ecx, dword [rbp - 0x114]	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000ba8	    0x488b95d8feff	            mov rdx, qword [rbp - 0x128]	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000baf	    0x488d85f0feff	                  lea rax, [rbp - 0x110]	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bb6	          0x4889ce	                            mov rsi, rcx	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bb9	          0x4889c7	                            mov rdi, rax	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bbc	      0xe800000000	                          call 0x4000bc1	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bc1	          0x4889c2	                            mov rdx, rax	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bc4	    0x8b85ecfeffff	            mov eax, dword [rbp - 0x114]	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bca	          0x4839c2	                            cmp rdx, rax	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bcd	            0x7407	                            je 0x4000bd6	       549	tekhex.c	FUNCTION_7	WHILE_1	IF_6	CALL_6
0x4000bcf	      0xb800000000	                              mov eax, 0	       550	tekhex.c	FUNCTION_7	WHILE_1	IF_6
0x4000bd4	            0xeb5d	                           jmp 0x4000c33	       550	tekhex.c	FUNCTION_7	WHILE_1	IF_6
0x4000bd6	    0x8b85ecfeffff	            mov eax, dword [rbp - 0x114]	       553	tekhex.c	FUNCTION_7	WHILE_1
0x4000bdc	    0xc68405f0feff	         mov byte [rbp + rax - 0x110], 0	       553	tekhex.c	FUNCTION_7	WHILE_1
0x4000be4	    0x8b85ecfeffff	            mov eax, dword [rbp - 0x114]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000bea	    0x488d95f0feff	                  lea rdx, [rbp - 0x110]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000bf1	        0x488d0c02	                    lea rcx, [rdx + rax]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000bf5	     0xfbeb5e7feff	           movsx esi, byte [rbp - 0x119]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000bfc	    0x488d95f0feff	                  lea rdx, [rbp - 0x110]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c03	    0x488bbdd8feff	            mov rdi, qword [rbp - 0x128]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c0a	    0x488b85d0feff	            mov rax, qword [rbp - 0x130]	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c11	            0xffd0	                                call rax	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c13	            0x85c0	                           test eax, eax	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c15	            0x7507	                           jne 0x4000c1e	       554	tekhex.c	FUNCTION_7	WHILE_1	IF_7	CALL_7
0x4000c17	      0xb800000000	                              mov eax, 0	       555	tekhex.c	FUNCTION_7	WHILE_1	IF_7
0x4000c1c	            0xeb15	                           jmp 0x4000c33	       555	tekhex.c	FUNCTION_7	WHILE_1	IF_7
0x4000c1e	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       521	tekhex.c	FUNCTION_7	WHILE_1
0x4000c25	     0xf843efeffff	                            je 0x4000a69	       521	tekhex.c	FUNCTION_7	WHILE_1
0x4000c2b	            0xeb01	                           jmp 0x4000c2e	       521	tekhex.c	FUNCTION_7	WHILE_1
0x4000c2d	              0x90	                                     nop	       532	tekhex.c	FUNCTION_7	WHILE_1	IF_2
0x4000c2e	      0xb801000000	                              mov eax, 1	       558	tekhex.c	FUNCTION_7
0x4000c33	        0x488b4df8	                mov rcx, qword [rbp - 8]	       559	tekhex.c	FUNCTION_7
0x4000c37	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       559	tekhex.c	FUNCTION_7
0x4000c40	            0x7405	                            je 0x4000c47	       559	tekhex.c	FUNCTION_7
0x4000c42	      0xe800000000	                          call 0x4000c47	       559	tekhex.c	FUNCTION_7
0x4000c47	              0xc9	                                   leave	       559	tekhex.c	FUNCTION_7
0x4000c48	              0xc3	                                     ret	       559	tekhex.c	FUNCTION_7
getsym	WHILE,0:functions,0:FOR,1:DO,0:IF,2:ELSE,0:CALL,1:SWITCH,0	67
0x4000234	              0x55	                                push rbp	       299	tekhex.c	FUNCTION_3
0x4000235	          0x4889e5	                            mov rbp, rsp	       299	tekhex.c	FUNCTION_3
0x4000238	        0x48897de8	             mov qword [rbp - 0x18], rdi	       299	tekhex.c	FUNCTION_3
0x400023c	        0x488975e0	             mov qword [rbp - 0x20], rsi	       299	tekhex.c	FUNCTION_3
0x4000240	        0x488955d8	             mov qword [rbp - 0x28], rdx	       299	tekhex.c	FUNCTION_3
0x4000244	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       299	tekhex.c	FUNCTION_3
0x4000248	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       300	tekhex.c	FUNCTION_3
0x400024c	          0x488b00	                    mov rax, qword [rax]	       300	tekhex.c	FUNCTION_3
0x400024f	        0x488945f8	                mov qword [rbp - 8], rax	       300	tekhex.c	FUNCTION_3
0x4000253	        0x488b45f8	                mov rax, qword [rbp - 8]	       304	tekhex.c	FUNCTION_3	IF_1
0x4000257	           0xfb600	                   movzx eax, byte [rax]	       304	tekhex.c	FUNCTION_3	IF_1
0x400025a	           0xfb6c0	                           movzx eax, al	       304	tekhex.c	FUNCTION_3	IF_1
0x400025d	            0x4898	                                    cdqe	       304	tekhex.c	FUNCTION_3	IF_1
0x400025f	     0xfb680000000	                   movzx eax, byte [rax]	       304	tekhex.c	FUNCTION_3	IF_1
0x4000266	            0x3c63	                            cmp al, 0x63	       304	tekhex.c	FUNCTION_3	IF_1
0x4000268	            0x750a	                           jne 0x4000274	       304	tekhex.c	FUNCTION_3	IF_1
0x400026a	      0xb800000000	                              mov eax, 0	       305	tekhex.c	FUNCTION_3	IF_1
0x400026f	      0xe99f000000	                           jmp 0x4000313	       305	tekhex.c	FUNCTION_3	IF_1
0x4000274	        0x488b45f8	                mov rax, qword [rbp - 8]	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000278	        0x488d5001	                      lea rdx, [rax + 1]	       307	tekhex.c	FUNCTION_3	CALL_1
0x400027c	        0x488955f8	                mov qword [rbp - 8], rdx	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000280	           0xfb600	                   movzx eax, byte [rax]	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000283	           0xfb6c0	                           movzx eax, al	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000286	            0x4898	                                    cdqe	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000288	     0xfb680000000	                   movzx eax, byte [rax]	       307	tekhex.c	FUNCTION_3	CALL_1
0x400028f	           0xfb6c0	                           movzx eax, al	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000292	          0x8945f4	              mov dword [rbp - 0xc], eax	       307	tekhex.c	FUNCTION_3	CALL_1
0x4000295	        0x837df400	                cmp dword [rbp - 0xc], 0	       308	tekhex.c	FUNCTION_3	IF_2
0x4000299	            0x7507	                           jne 0x40002a2	       308	tekhex.c	FUNCTION_3	IF_2
0x400029b	    0xc745f4100000	            mov dword [rbp - 0xc], 0x10 	       309	tekhex.c	FUNCTION_3	IF_2
0x40002a2	    0xc745f0000000	               mov dword [rbp - 0x10], 0	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002a9	            0xeb1d	                           jmp 0x40002c8	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002ab	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002ae	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002b2	          0x4801c2	                            add rdx, rax	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002b5	          0x8b4df0	             mov ecx, dword [rbp - 0x10]	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002b8	        0x488b45f8	                mov rax, qword [rbp - 8]	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002bc	          0x4801c8	                            add rax, rcx	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002bf	           0xfb600	                   movzx eax, byte [rax]	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002c2	            0x8802	                      mov byte [rdx], al	       311	tekhex.c	FUNCTION_3	FOR_1
0x40002c4	        0x8345f001	               add dword [rbp - 0x10], 1	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002c8	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002cb	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002ce	            0x7310	                           jae 0x40002e0	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002d0	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002d3	        0x488b45f8	                mov rax, qword [rbp - 8]	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002d7	          0x4801d0	                            add rax, rdx	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002da	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002de	            0x72cb	                            jb 0x40002ab	       310	tekhex.c	FUNCTION_3	FOR_1
0x40002e0	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       312	tekhex.c	FUNCTION_3
0x40002e3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       312	tekhex.c	FUNCTION_3
0x40002e7	          0x4801d0	                            add rax, rdx	       312	tekhex.c	FUNCTION_3
0x40002ea	          0xc60000	                       mov byte [rax], 0	       312	tekhex.c	FUNCTION_3
0x40002ed	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       313	tekhex.c	FUNCTION_3
0x40002f0	        0x488b45f8	                mov rax, qword [rbp - 8]	       313	tekhex.c	FUNCTION_3
0x40002f4	          0x4801c2	                            add rdx, rax	       313	tekhex.c	FUNCTION_3
0x40002f7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       313	tekhex.c	FUNCTION_3
0x40002fb	          0x488910	                    mov qword [rax], rdx	       313	tekhex.c	FUNCTION_3
0x40002fe	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       314	tekhex.c	FUNCTION_3
0x4000302	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       314	tekhex.c	FUNCTION_3
0x4000305	            0x8910	                    mov dword [rax], edx	       314	tekhex.c	FUNCTION_3
0x4000307	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       315	tekhex.c	FUNCTION_3
0x400030a	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       315	tekhex.c	FUNCTION_3
0x400030d	           0xf94c0	                                 sete al	       315	tekhex.c	FUNCTION_3
0x4000310	           0xfb6c0	                           movzx eax, al	       315	tekhex.c	FUNCTION_3
0x4000313	              0x5d	                                 pop rbp	       316	tekhex.c	FUNCTION_3
0x4000314	              0xc3	                                     ret	       316	tekhex.c	FUNCTION_3
move_section_contents	WHILE,0:functions,0:FOR,1:DO,0:IF,4:ELSE,2:CALL,2:SWITCH,0	91
0x4000e4b	              0x55	                                push rbp	       632	tekhex.c	FUNCTION_12
0x4000e4c	          0x4889e5	                            mov rbp, rsp	       632	tekhex.c	FUNCTION_12
0x4000e4f	        0x4883ec70	                           sub rsp, 0x70	       632	tekhex.c	FUNCTION_12
0x4000e53	        0x48897db8	             mov qword [rbp - 0x48], rdi	       632	tekhex.c	FUNCTION_12
0x4000e57	        0x488975b0	             mov qword [rbp - 0x50], rsi	       632	tekhex.c	FUNCTION_12
0x4000e5b	        0x488955a8	             mov qword [rbp - 0x58], rdx	       632	tekhex.c	FUNCTION_12
0x4000e5f	        0x48894da0	             mov qword [rbp - 0x60], rcx	       632	tekhex.c	FUNCTION_12
0x4000e63	        0x4c894598	              mov qword [rbp - 0x68], r8	       632	tekhex.c	FUNCTION_12
0x4000e67	        0x44894d94	             mov dword [rbp - 0x6c], r9d	       632	tekhex.c	FUNCTION_12
0x4000e6b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       634	tekhex.c	FUNCTION_12
0x4000e6f	        0x488945d8	             mov qword [rbp - 0x28], rax	       634	tekhex.c	FUNCTION_12
0x4000e73	    0x48c745e00100	               mov qword [rbp - 0x20], 1	       635	tekhex.c	FUNCTION_12
0x4000e7b	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       636	tekhex.c	FUNCTION_12
0x4000e83	      0x48837da000	               cmp qword [rbp - 0x60], 0	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000e88	            0x740f	                            je 0x4000e99	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000e8a	      0xbe7e020000	                          mov esi, 0x27e	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000e8f	      0xbf00000000	                              mov edi, 0	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000e94	      0xe800000000	                          call 0x4000e99	       638	tekhex.c	FUNCTION_12	CALL_1
0x4000e99	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000e9d	        0x488b4028	            mov rax, qword [rax + 0x28] 	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000ea1	        0x488945d0	             mov qword [rbp - 0x30], rax	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000ea5	      0xe9e4000000	                           jmp 0x4000f8e	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000eaa	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       642	tekhex.c	FUNCTION_12	FOR_1
0x4000eae	    0x482500e0ffff	             and rax, 0xffffffffffffe000	       642	tekhex.c	FUNCTION_12	FOR_1
0x4000eb4	        0x488945f0	             mov qword [rbp - 0x10], rax	       642	tekhex.c	FUNCTION_12	FOR_1
0x4000eb8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       643	tekhex.c	FUNCTION_12	FOR_1
0x4000ebc	      0x25ff1f0000	                         and eax, 0x1fff	       643	tekhex.c	FUNCTION_12	FOR_1
0x4000ec1	        0x488945f8	                mov qword [rbp - 8], rax	       643	tekhex.c	FUNCTION_12	FOR_1
0x4000ec5	        0x837d9400	               cmp dword [rbp - 0x6c], 0	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ec9	            0x7512	                           jne 0x4000edd	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ecb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ecf	           0xfb600	                   movzx eax, byte [rax]	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ed2	            0x84c0	                             test al, al	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ed4	            0x7407	                            je 0x4000edd	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ed6	      0xb801000000	                              mov eax, 1	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000edb	            0xeb05	                           jmp 0x4000ee2	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000edd	      0xb800000000	                              mov eax, 0	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ee2	          0x8945cc	             mov dword [rbp - 0x34], eax	       644	tekhex.c	FUNCTION_12	FOR_1
0x4000ee5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000ee9	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000eed	            0x750d	                           jne 0x4000efc	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000eef	      0x48837de800	               cmp qword [rbp - 0x18], 0	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000ef4	            0x7528	                           jne 0x4000f1e	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000ef6	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000efa	            0x7422	                            je 0x4000f1e	       646	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000efc	          0x8b55cc	             mov edx, dword [rbp - 0x34]	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000eff	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f03	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f07	          0x4889ce	                            mov rsi, rcx	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f0a	          0x4889c7	                            mov rdi, rax	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f0d	      0xe803f4ffff	                     call sym.find_chunk	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f12	        0x488945e8	             mov qword [rbp - 0x18], rax	       649	tekhex.c	FUNCTION_12	FOR_1	IF_1	CALL_2
0x4000f16	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       650	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000f1a	        0x488945e0	             mov qword [rbp - 0x20], rax	       650	tekhex.c	FUNCTION_12	FOR_1	IF_1
0x4000f1e	        0x837d9400	               cmp dword [rbp - 0x6c], 0	       653	tekhex.c	FUNCTION_12	FOR_1	IF_2
0x4000f22	            0x7428	                            je 0x4000f4c	       653	tekhex.c	FUNCTION_12	FOR_1	IF_2
0x4000f24	      0x48837de800	               cmp qword [rbp - 0x18], 0	       655	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f29	            0x7418	                            je 0x4000f43	       655	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f2b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f2f	        0x488b45f8	                mov rax, qword [rbp - 8]	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f33	          0x4801d0	                            add rax, rdx	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f36	           0xfb600	                   movzx eax, byte [rax]	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f39	            0x89c2	                            mov edx, eax	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f3b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f3f	            0x8810	                      mov byte [rax], dl	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f41	            0xeb3c	                           jmp 0x4000f7f	       656	tekhex.c	FUNCTION_12	FOR_1	IF_2	IF_3
0x4000f43	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x4000f47	          0xc60000	                       mov byte [rax], 0	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x4000f4a	            0xeb33	                           jmp 0x4000f7f	       658	tekhex.c	FUNCTION_12	FOR_1	IF_2	ELSE_1
0x4000f4c	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       660	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f50	            0x742d	                            je 0x4000f7f	       660	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f52	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f56	           0xfb600	                   movzx eax, byte [rax]	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f59	            0x89c1	                            mov ecx, eax	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f5b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f5f	        0x488b45f8	                mov rax, qword [rbp - 8]	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f63	          0x4801d0	                            add rax, rdx	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f66	            0x8808	                      mov byte [rax], cl	       662	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f68	        0x488b45f8	                mov rax, qword [rbp - 8]	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f6c	        0x48c1e805	                              shr rax, 5	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f70	          0x4889c2	                            mov rdx, rax	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f73	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f77	    0xc68410002000	       mov byte [rax + rdx + 0x2000], 1 	       663	tekhex.c	FUNCTION_12	FOR_1	ELSE_1	ELSE_2	IF_4
0x4000f7f	      0x488345d801	               add qword [rbp - 0x28], 1	       666	tekhex.c	FUNCTION_12	FOR_1
0x4000f84	      0x48836d9801	               sub qword [rbp - 0x68], 1	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000f89	      0x488345d001	               add qword [rbp - 0x30], 1	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000f8e	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000f93	     0xf8511ffffff	                           jne 0x4000eaa	       639	tekhex.c	FUNCTION_12	FOR_1
0x4000f99	              0x90	                                     nop	       668	tekhex.c	FUNCTION_12
0x4000f9a	              0xc9	                                   leave	       668	tekhex.c	FUNCTION_12
0x4000f9b	              0xc3	                                     ret	       668	tekhex.c	FUNCTION_12
tekhex_make_empty_symbol	WHILE,0:functions,0:FOR,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	23
0x400187d	              0x55	                                push rbp	       914	tekhex.c	FUNCTION_21
0x400187e	          0x4889e5	                            mov rbp, rsp	       914	tekhex.c	FUNCTION_21
0x4001881	        0x4883ec20	                           sub rsp, 0x20	       914	tekhex.c	FUNCTION_21
0x4001885	        0x48897de8	             mov qword [rbp - 0x18], rdi	       914	tekhex.c	FUNCTION_21
0x4001889	    0x48c745f03800	           mov qword [rbp - 0x10], 0x38 	       915	tekhex.c	FUNCTION_21
0x4001891	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       916	tekhex.c	FUNCTION_21	CALL_1
0x4001895	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       916	tekhex.c	FUNCTION_21	CALL_1
0x4001899	          0x4889d6	                            mov rsi, rdx	       916	tekhex.c	FUNCTION_21	CALL_1
0x400189c	          0x4889c7	                            mov rdi, rax	       916	tekhex.c	FUNCTION_21	CALL_1
0x400189f	      0xe800000000	                          call 0x40018a4	       916	tekhex.c	FUNCTION_21	CALL_1
0x40018a4	        0x488945f8	                mov qword [rbp - 8], rax	       916	tekhex.c	FUNCTION_21	CALL_1
0x40018a8	      0x48837df800	                  cmp qword [rbp - 8], 0	       919	tekhex.c	FUNCTION_21	IF_1
0x40018ad	            0x7507	                           jne 0x40018b6	       919	tekhex.c	FUNCTION_21	IF_1
0x40018af	      0xb800000000	                              mov eax, 0	       920	tekhex.c	FUNCTION_21	IF_1
0x40018b4	            0xeb1b	                           jmp 0x40018d1	       920	tekhex.c	FUNCTION_21	IF_1
0x40018b6	        0x488b45f8	                mov rax, qword [rbp - 8]	       921	tekhex.c	FUNCTION_21
0x40018ba	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       921	tekhex.c	FUNCTION_21
0x40018be	          0x488910	                    mov qword [rax], rdx	       921	tekhex.c	FUNCTION_21
0x40018c1	        0x488b45f8	                mov rax, qword [rbp - 8]	       922	tekhex.c	FUNCTION_21
0x40018c5	    0x48c740300000	               mov qword [rax + 0x30], 0	       922	tekhex.c	FUNCTION_21
0x40018cd	        0x488b45f8	                mov rax, qword [rbp - 8]	       923	tekhex.c	FUNCTION_21
0x40018d1	              0xc9	                                   leave	       924	tekhex.c	FUNCTION_21
0x40018d2	              0xc3	                                     ret	       924	tekhex.c	FUNCTION_21
tekhex_sizeof_headers	WHILE,0:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	7
0x400186a	              0x55	                                push rbp	       908	tekhex.c	FUNCTION_20
0x400186b	          0x4889e5	                            mov rbp, rsp	       908	tekhex.c	FUNCTION_20
0x400186e	        0x48897df8	                mov qword [rbp - 8], rdi	       908	tekhex.c	FUNCTION_20
0x4001872	        0x488975f0	             mov qword [rbp - 0x10], rsi	       908	tekhex.c	FUNCTION_20
0x4001876	      0xb800000000	                              mov eax, 0	       909	tekhex.c	FUNCTION_20
0x400187b	              0x5d	                                 pop rbp	       910	tekhex.c	FUNCTION_20
0x400187c	              0xc3	                                     ret	       910	tekhex.c	FUNCTION_20
first_phase	WHILE,2:functions,0:FOR,0:DO,0:IF,25:ELSE,5:CALL,18:SWITCH,2	393
0x400044a	              0x55	                                push rbp	       361	tekhex.c	FUNCTION_6
0x400044b	          0x4889e5	                            mov rbp, rsp	       361	tekhex.c	FUNCTION_6
0x400044e	        0x4883c480	             add rsp, 0xffffffffffffff80	       361	tekhex.c	FUNCTION_6
0x4000452	        0x48897d98	             mov qword [rbp - 0x68], rdi	       361	tekhex.c	FUNCTION_6
0x4000456	          0x897594	             mov dword [rbp - 0x6c], esi	       361	tekhex.c	FUNCTION_6
0x4000459	        0x48895588	             mov qword [rbp - 0x78], rdx	       361	tekhex.c	FUNCTION_6
0x400045d	        0x48894d80	             mov qword [rbp - 0x80], rcx	       361	tekhex.c	FUNCTION_6
0x4000461	    0x64488b042528	                mov rax, qword fs:[0x28]	       361	tekhex.c	FUNCTION_6
0x400046a	        0x488945f8	                mov qword [rbp - 8], rax	       361	tekhex.c	FUNCTION_6
0x400046e	            0x31c0	                            xor eax, eax	       361	tekhex.c	FUNCTION_6
0x4000470	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000473	          0x83f833	                           cmp eax, 0x33	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000476	     0xf84b7000000	                            je 0x4000533	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x400047c	          0x83f836	                           cmp eax, 0x36	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x400047f	     0xf856c050000	                           jne 0x40009f1	       367	tekhex.c	FUNCTION_6	SWITCH_1
0x4000485	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000489	        0x488d4db0	                   lea rcx, [rbp - 0x50]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x400048d	        0x488d4588	                   lea rax, [rbp - 0x78]	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000491	          0x4889ce	                            mov rsi, rcx	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000494	          0x4889c7	                            mov rdi, rax	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x4000497	      0xe889fcffff	                       call sym.getvalue	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x400049c	            0x85c0	                           test eax, eax	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x400049e	            0x756d	                           jne 0x400050d	       374	tekhex.c	FUNCTION_6	SWITCH_1	IF_1	CALL_1
0x40004a0	      0xb800000000	                              mov eax, 0	       375	tekhex.c	FUNCTION_6	SWITCH_1	IF_1
0x40004a5	      0xe94c050000	                           jmp 0x40009f6	       375	tekhex.c	FUNCTION_6	SWITCH_1	IF_1
0x40004aa	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004ae	        0x488b4588	             mov rax, qword [rbp - 0x78]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004b2	           0xfb600	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004b5	           0xfb6c0	                           movzx eax, al	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004b8	            0x4898	                                    cdqe	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004ba	     0xfb680000000	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004c1	           0xfb6c0	                           movzx eax, al	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004c4	          0xc1e004	                              shl eax, 4	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004c7	            0x89c1	                            mov ecx, eax	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004c9	        0x488b4588	             mov rax, qword [rbp - 0x78]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004cd	        0x4883c001	                              add rax, 1	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004d1	           0xfb600	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004d4	           0xfb6c0	                           movzx eax, al	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004d7	            0x4898	                                    cdqe	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004d9	     0xfb680000000	                   movzx eax, byte [rax]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004e0	           0xfb6c0	                           movzx eax, al	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004e3	             0x1c8	                            add eax, ecx	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004e5	            0x89c1	                            mov ecx, eax	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004e7	        0x488b4598	             mov rax, qword [rbp - 0x68]	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004eb	            0x89ce	                            mov esi, ecx	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004ed	          0x4889c7	                            mov rdi, rax	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004f0	      0xe8e9feffff	                    call sym.insert_byte	       379	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1	CALL_2
0x40004f5	        0x488b4588	             mov rax, qword [rbp - 0x78]	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x40004f9	        0x4883c002	                              add rax, 2	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x40004fd	        0x48894588	             mov qword [rbp - 0x78], rax	       380	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000501	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000505	        0x4883c001	                              add rax, 1	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000509	        0x488945b0	             mov qword [rbp - 0x50], rax	       381	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400050d	        0x488b4588	             mov rax, qword [rbp - 0x78]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000511	           0xfb600	                   movzx eax, byte [rax]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000514	            0x84c0	                             test al, al	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000516	            0x7411	                            je 0x4000529	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000518	        0x488b4580	             mov rax, qword [rbp - 0x80]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x400051c	        0x488d50ff	                      lea rdx, [rax - 1]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000520	        0x488b4588	             mov rax, qword [rbp - 0x78]	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000524	          0x4839c2	                            cmp rdx, rax	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000527	            0x7781	                            ja 0x40004aa	       377	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_1
0x4000529	      0xb801000000	                              mov eax, 1	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x400052e	      0xe9c3040000	                           jmp 0x40009f6	       383	tekhex.c	FUNCTION_6	SWITCH_1
0x4000533	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000537	        0x488d55ac	                   lea rdx, [rbp - 0x54]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x400053b	        0x488d7588	                   lea rsi, [rbp - 0x78]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x400053f	        0x488d45e0	                   lea rax, [rbp - 0x20]	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000543	          0x4889c7	                            mov rdi, rax	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x4000546	      0xe8e9fcffff	                         call sym.getsym	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x400054b	            0x85c0	                           test eax, eax	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x400054d	            0x750a	                           jne 0x4000559	       388	tekhex.c	FUNCTION_6	SWITCH_1	IF_2	CALL_3
0x400054f	      0xb800000000	                              mov eax, 0	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x4000554	      0xe99d040000	                           jmp 0x40009f6	       389	tekhex.c	FUNCTION_6	SWITCH_1	IF_2
0x4000559	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x400055d	        0x488b4598	             mov rax, qword [rbp - 0x68]	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000561	          0x4889d6	                            mov rsi, rdx	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000564	          0x4889c7	                            mov rdi, rax	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000567	      0xe800000000	                          call 0x400056c	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x400056c	        0x488945b8	             mov qword [rbp - 0x48], rax	       390	tekhex.c	FUNCTION_6	SWITCH_1	CALL_4
0x4000570	      0x48837db800	               cmp qword [rbp - 0x48], 0	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x4000575	            0x7570	                           jne 0x40005e7	       391	tekhex.c	FUNCTION_6	SWITCH_1	IF_3
0x4000577	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x400057a	            0x89c0	                            mov eax, eax	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x400057c	        0x488d5001	                      lea rdx, [rax + 1]	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000580	        0x488b4598	             mov rax, qword [rbp - 0x68]	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000584	          0x4889d6	                            mov rsi, rdx	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000587	          0x4889c7	                            mov rdi, rax	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x400058a	      0xe800000000	                          call 0x400058f	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x400058f	        0x488945c8	             mov qword [rbp - 0x38], rax	       393	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_5
0x4000593	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x4000598	            0x750a	                           jne 0x40005a4	       395	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x400059a	      0xb800000000	                              mov eax, 0	       396	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x400059f	      0xe952040000	                           jmp 0x40009f6	       396	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_4
0x40005a4	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005a7	          0x83c001	                              add eax, 1	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005aa	            0x89c2	                            mov edx, eax	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005ac	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005b0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005b4	          0x4889ce	                            mov rsi, rcx	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005b7	          0x4889c7	                            mov rdi, rax	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005ba	      0xe800000000	                          call 0x40005bf	       397	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_6
0x40005bf	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005c3	        0x488b4598	             mov rax, qword [rbp - 0x68]	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005c7	          0x4889d6	                            mov rsi, rdx	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005ca	          0x4889c7	                            mov rdi, rax	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005cd	      0xe800000000	                          call 0x40005d2	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005d2	        0x488945b8	             mov qword [rbp - 0x48], rax	       398	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	CALL_7
0x40005d6	      0x48837db800	               cmp qword [rbp - 0x48], 0	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x40005db	            0x750a	                           jne 0x40005e7	       399	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x40005dd	      0xb800000000	                              mov eax, 0	       400	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x40005e2	      0xe90f040000	                           jmp 0x40009f6	       400	tekhex.c	FUNCTION_6	SWITCH_1	IF_3	IF_5
0x40005e7	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       402	tekhex.c	FUNCTION_6	SWITCH_1
0x40005ef	      0xe9e4030000	                           jmp 0x40009d8	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40005f4	        0x488b4588	             mov rax, qword [rbp - 0x78]	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40005f8	           0xfb600	                   movzx eax, byte [rax]	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40005fb	           0xfbec0	                           movsx eax, al	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40005fe	          0x83e830	                           sub eax, 0x30	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000601	          0x83f808	                              cmp eax, 8	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000604	     0xf87c7030000	                            ja 0x40009d1	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400060a	            0x89c0	                            mov eax, eax	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400060c	    0x488b04c50000	                  mov rax, qword [rax*8]	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000614	            0xffe0	                                 jmp rax	       405	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000616	        0x488b4588	             mov rax, qword [rbp - 0x78]	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400061a	        0x4883c001	                              add rax, 1	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400061e	        0x48894588	             mov qword [rbp - 0x78], rax	       408	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000622	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000626	        0x488d4828	                   lea rcx, [rax + 0x28]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400062a	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400062e	        0x488d4588	                   lea rax, [rbp - 0x78]	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000632	          0x4889ce	                            mov rsi, rcx	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000635	          0x4889c7	                            mov rdi, rax	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000638	      0xe8e8faffff	                       call sym.getvalue	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400063d	            0x85c0	                           test eax, eax	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x400063f	            0x750a	                           jne 0x400064b	       409	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6	CALL_8
0x4000641	      0xb800000000	                              mov eax, 0	       410	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6
0x4000646	      0xe9ab030000	                           jmp 0x40009f6	       410	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_6
0x400064b	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x400064f	        0x488d4db0	                   lea rcx, [rbp - 0x50]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000653	        0x488d4588	                   lea rax, [rbp - 0x78]	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000657	          0x4889ce	                            mov rsi, rcx	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x400065a	          0x4889c7	                            mov rdi, rax	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x400065d	      0xe8c3faffff	                       call sym.getvalue	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000662	            0x85c0	                           test eax, eax	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000664	            0x750a	                           jne 0x4000670	       411	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7	CALL_9
0x4000666	      0xb800000000	                              mov eax, 0	       412	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7
0x400066b	      0xe986030000	                           jmp 0x40009f6	       412	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_7
0x4000670	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000674	        0x488b5028	            mov rdx, qword [rax + 0x28] 	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000678	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x400067c	          0x4839c2	                            cmp rdx, rax	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x400067f	            0x760c	                           jbe 0x400068d	       413	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000681	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       414	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000685	        0x488b4028	            mov rax, qword [rax + 0x28] 	       414	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x4000689	        0x488945b0	             mov qword [rbp - 0x50], rax	       414	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_8
0x400068d	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000691	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000695	        0x488b4028	            mov rax, qword [rax + 0x28] 	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000699	          0x4829c2	                            sub rdx, rax	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400069c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006a0	        0x48895038	             mov qword [rax + 0x38], rdx	       415	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006a4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006a8	        0x488b4038	            mov rax, qword [rax + 0x38] 	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006ac	      0x2500000080	                     and eax, 0x80000000	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006b1	          0x4885c0	                           test rax, rax	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006b4	            0x740a	                            je 0x40006c0	       418	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006b6	      0xb800000000	                              mov eax, 0	       419	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006bb	      0xe936030000	                           jmp 0x40009f6	       419	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_9
0x40006c0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       420	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006c4	    0xc74020030100	          mov dword [rax + 0x20], 0x103 	       420	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006cb	      0xe908030000	                           jmp 0x40009d8	       421	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006d0	    0x48c745d03800	           mov qword [rbp - 0x30], 0x38 	       431	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006d8	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006dc	        0x488b4598	             mov rax, qword [rbp - 0x68]	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006e0	          0x4889d6	                            mov rsi, rdx	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006e3	          0x4889c7	                            mov rdi, rax	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006e6	      0xe800000000	                          call 0x40006eb	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006eb	        0x488945d8	             mov qword [rbp - 0x28], rax	       432	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006ef	        0x488b4588	             mov rax, qword [rbp - 0x78]	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006f3	           0xfb600	                   movzx eax, byte [rax]	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006f6	          0x8845ab	               mov byte [rbp - 0x55], al	       434	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40006f9	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x40006fe	            0x750a	                           jne 0x400070a	       436	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x4000700	      0xb800000000	                              mov eax, 0	       437	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x4000705	      0xe9ec020000	                           jmp 0x40009f6	       437	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_10
0x400070a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       438	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400070e	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       438	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000712	          0x488910	                    mov qword [rax], rdx	       438	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000715	        0x488b4588	             mov rax, qword [rbp - 0x78]	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000719	        0x4883c001	                              add rax, 1	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400071d	        0x48894588	             mov qword [rbp - 0x78], rax	       439	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000721	        0x488b4598	             mov rax, qword [rbp - 0x68]	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000725	    0x8b80b8000000	            mov eax, dword [rax + 0xb8] 	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400072b	          0x8d5001	                      lea edx, [rax + 1]	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400072e	        0x488b4598	             mov rax, qword [rbp - 0x68]	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000732	    0x8990b8000000	             mov dword [rax + 0xb8], edx	       440	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000738	        0x488b4598	             mov rax, qword [rbp - 0x68]	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400073c	          0x8b4044	            mov eax, dword [rax + 0x44] 	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400073f	          0xc1e805	                              shr eax, 5	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000742	      0x25ffff0f00	                        and eax, 0xfffff	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000747	          0x83c810	                            or eax, 0x10	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400074a	            0x89c2	                            mov edx, eax	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400074c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000750	    0x81e2ffff0f00	                        and edx, 0xfffff	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000756	            0x89d1	                            mov ecx, edx	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000758	          0xc1e105	                              shl ecx, 5	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400075b	          0x8b5044	            mov edx, dword [rax + 0x44] 	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400075e	    0x81e21f0000fe	                     and edx, 0xfe00001f	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000764	             0x9ca	                             or edx, ecx	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000766	          0x895044	             mov dword [rax + 0x44], edx	       441	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000769	        0x488b4598	             mov rax, qword [rbp - 0x68]	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400076d	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000774	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000778	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400077c	        0x48895030	             mov qword [rax + 0x30], rdx	       442	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000780	        0x488b4598	             mov rax, qword [rbp - 0x68]	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000784	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400078b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400078f	        0x48895010	             mov qword [rax + 0x10], rdx	       443	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000793	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x4000797	        0x488d55ac	                   lea rdx, [rbp - 0x54]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x400079b	        0x488d7588	                   lea rsi, [rbp - 0x78]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x400079f	        0x488d45e0	                   lea rax, [rbp - 0x20]	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x40007a3	          0x4889c7	                            mov rdi, rax	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x40007a6	      0xe889faffff	                         call sym.getsym	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x40007ab	            0x85c0	                           test eax, eax	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x40007ad	            0x750a	                           jne 0x40007b9	       444	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11	CALL_11
0x40007af	      0xb800000000	                              mov eax, 0	       445	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11
0x40007b4	      0xe93d020000	                           jmp 0x40009f6	       445	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_11
0x40007b9	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007bc	            0x89c0	                            mov eax, eax	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007be	        0x488d5001	                      lea rdx, [rax + 1]	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007c2	        0x488b4598	             mov rax, qword [rbp - 0x68]	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007c6	          0x4889d6	                            mov rsi, rdx	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007c9	          0x4889c7	                            mov rdi, rax	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007cc	      0xe800000000	                          call 0x40007d1	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007d1	          0x4889c2	                            mov rdx, rax	       447	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_12
0x40007d4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       446	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007d8	        0x48895008	                mov qword [rax + 8], rdx	       446	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40007dc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007e0	        0x488b4008	                mov rax, qword [rax + 8]	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007e4	          0x4885c0	                           test rax, rax	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007e7	            0x750a	                           jne 0x40007f3	       448	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007e9	      0xb800000000	                              mov eax, 0	       449	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007ee	      0xe903020000	                           jmp 0x40009f6	       449	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_12
0x40007f3	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x40007f6	          0x83c001	                              add eax, 1	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x40007f9	            0x89c2	                            mov edx, eax	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x40007fb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x40007ff	        0x488b4008	                mov rax, qword [rax + 8]	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x4000803	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x4000807	          0x4889ce	                            mov rsi, rcx	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x400080a	          0x4889c7	                            mov rdi, rax	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x400080d	      0xe800000000	                          call 0x4000812	       450	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	CALL_13
0x4000812	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       451	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x4000816	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       451	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400081a	        0x48895020	             mov qword [rax + 0x20], rdx	       451	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x400081e	        0x807dab34	            cmp byte [rbp - 0x55], 0x34 	       452	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000822	            0x7f0d	                            jg 0x4000831	       452	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000824	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000828	    0xc74018020000	               mov dword [rax + 0x18], 2	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x400082f	            0xeb0b	                           jmp 0x400083c	       453	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_13
0x4000831	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       455	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_1
0x4000835	    0xc74018010000	               mov dword [rax + 0x18], 1	       455	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_1
0x400083c	        0x807dab32	            cmp byte [rbp - 0x55], 0x32 	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000840	            0x7406	                            je 0x4000848	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000842	        0x807dab36	            cmp byte [rbp - 0x55], 0x36 	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000846	            0x7511	                           jne 0x4000859	       456	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000848	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x400084c	    0x48c740200000	               mov qword [rax + 0x20], 0	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000854	      0xe93d010000	                           jmp 0x4000996	       457	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_14
0x4000859	        0x807dab33	            cmp byte [rbp - 0x55], 0x33 	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x400085d	            0x740a	                            je 0x4000869	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x400085f	        0x807dab37	            cmp byte [rbp - 0x55], 0x37 	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x4000863	     0xf8594000000	                           jne 0x40008fd	       458	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15
0x4000869	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400086d	          0x8b4020	            mov eax, dword [rax + 0x20] 	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000870	          0x83e020	                           and eax, 0x20	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000873	            0x85c0	                           test eax, eax	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000875	            0x7518	                           jne 0x400088f	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000877	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400087b	          0x8b4020	            mov eax, dword [rax + 0x20] 	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400087e	          0x83c810	                            or eax, 0x10	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000881	            0x89c2	                            mov edx, eax	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000883	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x4000887	          0x895020	             mov dword [rax + 0x20], edx	       461	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400088a	      0xe907010000	                           jmp 0x4000996	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x400088f	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x4000894	            0x7515	                           jne 0x40008ab	       464	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_17
0x4000896	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x400089a	          0x4889c6	                            mov rsi, rax	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x400089d	      0xbf00000000	                              mov edi, 0	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40008a2	      0xe800000000	                          call 0x40008a7	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40008a7	        0x488945c0	             mov qword [rbp - 0x40], rax	       466	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	CALL_14
0x40008ab	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40008b0	            0x7529	                           jne 0x40008db	       467	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40008b2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       470	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40008b6	          0x8b4020	            mov eax, dword [rax + 0x20] 	       470	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40008b9	          0x83e0cf	                     and eax, 0xffffffcf	       470	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18
0x40008bc	          0x83c810	                            or eax, 0x10	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008bf	            0x89c2	                            mov edx, eax	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008c1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008c5	          0x488b08	                    mov rcx, qword [rax]	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008c8	        0x488b4598	             mov rax, qword [rbp - 0x68]	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008cc	          0x4889ce	                            mov rsi, rcx	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008cf	          0x4889c7	                            mov rdi, rax	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008d2	      0xe800000000	                          call 0x40008d7	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008d7	        0x488945c0	             mov qword [rbp - 0x40], rax	       468	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_18	CALL_15
0x40008db	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       471	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40008e0	            0x750a	                           jne 0x40008ec	       471	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40008e2	      0xb800000000	                              mov eax, 0	       472	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40008e7	      0xe90a010000	                           jmp 0x40009f6	       472	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3	IF_19
0x40008ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       473	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3
0x40008f0	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       473	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3
0x40008f4	        0x48895020	             mov qword [rax + 0x20], rdx	       473	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	ELSE_3
0x40008f8	      0xe999000000	                           jmp 0x4000996	       460	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_2	IF_15	IF_16
0x40008fd	        0x807dab34	            cmp byte [rbp - 0x55], 0x34 	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4000901	            0x740a	                            je 0x400090d	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4000903	        0x807dab38	            cmp byte [rbp - 0x55], 0x38 	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x4000907	     0xf8589000000	                           jne 0x4000996	       476	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20
0x400090d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000911	          0x8b4020	            mov eax, dword [rax + 0x20] 	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000914	          0x83e010	                           and eax, 0x10	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000917	            0x85c0	                           test eax, eax	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000919	            0x7515	                           jne 0x4000930	       478	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400091b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400091f	          0x8b4020	            mov eax, dword [rax + 0x20] 	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000922	          0x83c820	                            or eax, 0x20	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000925	            0x89c2	                            mov edx, eax	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000927	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400092b	          0x895020	             mov dword [rax + 0x20], edx	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x400092e	            0xeb66	                           jmp 0x4000996	       479	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	IF_21
0x4000930	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x4000935	            0x7515	                           jne 0x400094c	       482	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_22
0x4000937	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400093b	          0x4889c6	                            mov rsi, rax	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400093e	      0xbf00000000	                              mov edi, 0	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4000943	      0xe800000000	                          call 0x4000948	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x4000948	        0x488945c0	             mov qword [rbp - 0x40], rax	       484	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	CALL_16
0x400094c	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4000951	            0x7529	                           jne 0x400097c	       485	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4000953	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       488	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x4000957	          0x8b4020	            mov eax, dword [rax + 0x20] 	       488	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x400095a	          0x83e0cf	                     and eax, 0xffffffcf	       488	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23
0x400095d	          0x83c820	                            or eax, 0x20	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000960	            0x89c2	                            mov edx, eax	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000962	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000966	          0x488b08	                    mov rcx, qword [rax]	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000969	        0x488b4598	             mov rax, qword [rbp - 0x68]	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400096d	          0x4889ce	                            mov rsi, rcx	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000970	          0x4889c7	                            mov rdi, rax	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000973	      0xe800000000	                          call 0x4000978	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x4000978	        0x488945c0	             mov qword [rbp - 0x40], rax	       486	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_23	CALL_17
0x400097c	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x4000981	            0x7507	                           jne 0x400098a	       489	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x4000983	      0xb800000000	                              mov eax, 0	       490	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x4000988	            0xeb6c	                           jmp 0x40009f6	       490	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5	IF_24
0x400098a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x400098e	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x4000992	        0x48895020	             mov qword [rax + 0x20], rdx	       491	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	ELSE_4	IF_20	ELSE_5
0x4000996	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400099a	        0x488d4db0	                   lea rcx, [rbp - 0x50]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x400099e	        0x488d4588	                   lea rax, [rbp - 0x78]	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009a2	          0x4889ce	                            mov rsi, rcx	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009a5	          0x4889c7	                            mov rdi, rax	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009a8	      0xe878f7ffff	                       call sym.getvalue	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009ad	            0x85c0	                           test eax, eax	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009af	            0x7507	                           jne 0x40009b8	       494	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25	CALL_18
0x40009b1	      0xb800000000	                              mov eax, 0	       495	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25
0x40009b6	            0xeb3e	                           jmp 0x40009f6	       495	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2	IF_25
0x40009b8	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009bc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009c0	        0x488b4028	            mov rax, qword [rax + 0x28] 	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009c4	          0x4829c2	                            sub rdx, rax	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009c7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009cb	        0x48895010	             mov qword [rax + 0x10], rdx	       496	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009cf	            0xeb07	                           jmp 0x40009d8	       497	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009d1	      0xb800000000	                              mov eax, 0	       500	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009d6	            0xeb1e	                           jmp 0x40009f6	       500	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2	SWITCH_2
0x40009d8	        0x488b4588	             mov rax, qword [rbp - 0x78]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009dc	        0x483b4580	             cmp rax, qword [rbp - 0x80]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009e0	            0x730f	                           jae 0x40009f1	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009e2	        0x488b4588	             mov rax, qword [rbp - 0x78]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009e6	           0xfb600	                   movzx eax, byte [rax]	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009e9	            0x84c0	                             test al, al	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009eb	     0xf8503fcffff	                           jne 0x40005f4	       403	tekhex.c	FUNCTION_6	SWITCH_1	WHILE_2
0x40009f1	      0xb801000000	                              mov eax, 1	       505	tekhex.c	FUNCTION_6
0x40009f6	        0x488b7df8	                mov rdi, qword [rbp - 8]	       506	tekhex.c	FUNCTION_6
0x40009fa	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       506	tekhex.c	FUNCTION_6
0x4000a03	            0x7405	                            je 0x4000a0a	       506	tekhex.c	FUNCTION_6
0x4000a05	      0xe800000000	                          call 0x4000a0a	       506	tekhex.c	FUNCTION_6
0x4000a0a	              0xc9	                                   leave	       506	tekhex.c	FUNCTION_6
0x4000a0b	              0xc3	                                     ret	       506	tekhex.c	FUNCTION_6
tekhex_set_section_contents	WHILE,0:functions,0:FOR,0:DO,0:IF,1:ELSE,0:CALL,1:SWITCH,0	27
0x4001039	              0x55	                                push rbp	       704	tekhex.c	FUNCTION_15
0x400103a	          0x4889e5	                            mov rbp, rsp	       704	tekhex.c	FUNCTION_15
0x400103d	        0x4883ec30	                           sub rsp, 0x30	       704	tekhex.c	FUNCTION_15
0x4001041	        0x48897df8	                mov qword [rbp - 8], rdi	       704	tekhex.c	FUNCTION_15
0x4001045	        0x488975f0	             mov qword [rbp - 0x10], rsi	       704	tekhex.c	FUNCTION_15
0x4001049	        0x488955e8	             mov qword [rbp - 0x18], rdx	       704	tekhex.c	FUNCTION_15
0x400104d	        0x48894de0	             mov qword [rbp - 0x20], rcx	       704	tekhex.c	FUNCTION_15
0x4001051	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       704	tekhex.c	FUNCTION_15
0x4001055	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       705	tekhex.c	FUNCTION_15	IF_1
0x4001059	          0x8b4020	            mov eax, dword [rax + 0x20] 	       705	tekhex.c	FUNCTION_15	IF_1
0x400105c	          0x83e003	                              and eax, 3	       705	tekhex.c	FUNCTION_15	IF_1
0x400105f	            0x85c0	                           test eax, eax	       705	tekhex.c	FUNCTION_15	IF_1
0x4001061	            0x742c	                            je 0x400108f	       705	tekhex.c	FUNCTION_15	IF_1
0x4001063	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001067	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x400106b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x400106f	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001073	        0x488b45f8	                mov rax, qword [rbp - 8]	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001077	    0x41b900000000	                              mov r9d, 0	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x400107d	          0x4989f8	                             mov r8, rdi	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001080	          0x4889c7	                            mov rdi, rax	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001083	      0xe8c3fdffff	          call sym.move_section_contents	       707	tekhex.c	FUNCTION_15	IF_1	CALL_1
0x4001088	      0xb801000000	                              mov eax, 1	       709	tekhex.c	FUNCTION_15	IF_1
0x400108d	            0xeb05	                           jmp 0x4001094	       709	tekhex.c	FUNCTION_15	IF_1
0x400108f	      0xb800000000	                              mov eax, 0	       712	tekhex.c	FUNCTION_15
0x4001094	              0xc9	                                   leave	       713	tekhex.c	FUNCTION_15
0x4001095	              0xc3	                                     ret	       713	tekhex.c	FUNCTION_15
tekhex_get_symtab_upper_bound	WHILE,0:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,0:SWITCH,0	10
0x4000cce	              0x55	                                push rbp	       579	tekhex.c	FUNCTION_9
0x4000ccf	          0x4889e5	                            mov rbp, rsp	       579	tekhex.c	FUNCTION_9
0x4000cd2	        0x48897df8	                mov qword [rbp - 8], rdi	       579	tekhex.c	FUNCTION_9
0x4000cd6	        0x488b45f8	                mov rax, qword [rbp - 8]	       580	tekhex.c	FUNCTION_9
0x4000cda	    0x8b80b8000000	            mov eax, dword [rax + 0xb8] 	       580	tekhex.c	FUNCTION_9
0x4000ce0	          0x83c001	                              add eax, 1	       580	tekhex.c	FUNCTION_9
0x4000ce3	            0x89c0	                            mov eax, eax	       580	tekhex.c	FUNCTION_9
0x4000ce5	        0x48c1e003	                              shl rax, 3	       580	tekhex.c	FUNCTION_9
0x4000ce9	              0x5d	                                 pop rbp	       582	tekhex.c	FUNCTION_9
0x4000cea	              0xc3	                                     ret	       582	tekhex.c	FUNCTION_9
tekhex_object_p	WHILE,0:functions,0:FOR,0:DO,0:IF,3:ELSE,0:CALL,5:SWITCH,0	66
0x4000d5e	              0x55	                                push rbp	       605	tekhex.c	FUNCTION_11
0x4000d5f	          0x4889e5	                            mov rbp, rsp	       605	tekhex.c	FUNCTION_11
0x4000d62	        0x4883ec20	                           sub rsp, 0x20	       605	tekhex.c	FUNCTION_11
0x4000d66	        0x48897de8	             mov qword [rbp - 0x18], rdi	       605	tekhex.c	FUNCTION_11
0x4000d6a	    0x64488b042528	                mov rax, qword fs:[0x28]	       605	tekhex.c	FUNCTION_11
0x4000d73	        0x488945f8	                mov qword [rbp - 8], rax	       605	tekhex.c	FUNCTION_11
0x4000d77	            0x31c0	                            xor eax, eax	       605	tekhex.c	FUNCTION_11
0x4000d79	      0xe8c2f2ffff	                    call sym.tekhex_init	       608	tekhex.c	FUNCTION_11	CALL_1
0x4000d7e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d82	      0xba00000000	                              mov edx, 0	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d87	      0xbe00000000	                              mov esi, 0	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d8c	          0x4889c7	                            mov rdi, rax	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d8f	      0xe800000000	                          call 0x4000d94	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d94	            0x85c0	                           test eax, eax	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d96	            0x751b	                           jne 0x4000db3	       610	tekhex.c	FUNCTION_11	IF_1	CALL_2
0x4000d98	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000d9c	        0x488d45f0	                   lea rax, [rbp - 0x10]	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000da0	      0xbe04000000	                              mov esi, 4	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000da5	          0x4889c7	                            mov rdi, rax	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000da8	      0xe800000000	                          call 0x4000dad	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000dad	        0x4883f804	                              cmp rax, 4	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000db1	            0x7407	                            je 0x4000dba	       611	tekhex.c	FUNCTION_11	IF_1	CALL_3
0x4000db3	      0xb800000000	                              mov eax, 0	       612	tekhex.c	FUNCTION_11	IF_1
0x4000db8	            0xeb7b	                           jmp 0x4000e35	       612	tekhex.c	FUNCTION_11	IF_1
0x4000dba	         0xfb645f0	            movzx eax, byte [rbp - 0x10]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dbe	            0x3c25	                            cmp al, 0x25	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dc0	            0x753c	                           jne 0x4000dfe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dc2	         0xfb645f1	             movzx eax, byte [rbp - 0xf]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dc6	           0xfb6c0	                           movzx eax, al	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dc9	            0x4898	                                    cdqe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dcb	     0xfb680000000	                   movzx eax, byte [rax]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dd2	            0x3c63	                            cmp al, 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dd4	            0x7428	                            je 0x4000dfe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dd6	         0xfb645f2	             movzx eax, byte [rbp - 0xe]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dda	           0xfb6c0	                           movzx eax, al	       614	tekhex.c	FUNCTION_11	IF_2
0x4000ddd	            0x4898	                                    cdqe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000ddf	     0xfb680000000	                   movzx eax, byte [rax]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000de6	            0x3c63	                            cmp al, 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000de8	            0x7414	                            je 0x4000dfe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dea	         0xfb645f3	             movzx eax, byte [rbp - 0xd]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dee	           0xfb6c0	                           movzx eax, al	       614	tekhex.c	FUNCTION_11	IF_2
0x4000df1	            0x4898	                                    cdqe	       614	tekhex.c	FUNCTION_11	IF_2
0x4000df3	     0xfb680000000	                   movzx eax, byte [rax]	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dfa	            0x3c63	                            cmp al, 0x63	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dfc	            0x7507	                           jne 0x4000e05	       614	tekhex.c	FUNCTION_11	IF_2
0x4000dfe	      0xb800000000	                              mov eax, 0	       615	tekhex.c	FUNCTION_11	IF_2
0x4000e03	            0xeb30	                           jmp 0x4000e35	       615	tekhex.c	FUNCTION_11	IF_2
0x4000e05	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       617	tekhex.c	FUNCTION_11	CALL_4
0x4000e09	          0x4889c7	                            mov rdi, rax	       617	tekhex.c	FUNCTION_11	CALL_4
0x4000e0c	      0xe8dafeffff	                call sym.tekhex_mkobject	       617	tekhex.c	FUNCTION_11	CALL_4
0x4000e11	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e15	      0xbe00000000	                              mov esi, 0	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e1a	          0x4889c7	                            mov rdi, rax	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e1d	      0xe8eafbffff	                      call sym.pass_over	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e22	            0x85c0	                           test eax, eax	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e24	            0x7507	                           jne 0x4000e2d	       619	tekhex.c	FUNCTION_11	IF_3	CALL_5
0x4000e26	      0xb800000000	                              mov eax, 0	       620	tekhex.c	FUNCTION_11	IF_3
0x4000e2b	            0xeb08	                           jmp 0x4000e35	       620	tekhex.c	FUNCTION_11	IF_3
0x4000e2d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       622	tekhex.c	FUNCTION_11
0x4000e31	        0x488b4008	                mov rax, qword [rax + 8]	       622	tekhex.c	FUNCTION_11
0x4000e35	        0x488b4df8	                mov rcx, qword [rbp - 8]	       623	tekhex.c	FUNCTION_11
0x4000e39	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       623	tekhex.c	FUNCTION_11
0x4000e42	            0x7405	                            je 0x4000e49	       623	tekhex.c	FUNCTION_11
0x4000e44	      0xe800000000	                          call 0x4000e49	       623	tekhex.c	FUNCTION_11
0x4000e49	              0xc9	                                   leave	       623	tekhex.c	FUNCTION_11
0x4000e4a	              0xc3	                                     ret	       623	tekhex.c	FUNCTION_11
writesym	WHILE,1:functions,0:FOR,0:DO,0:IF,2:ELSE,2:CALL,1:SWITCH,0	60
0x4001165	              0x55	                                push rbp	       745	tekhex.c	FUNCTION_17
0x4001166	          0x4889e5	                            mov rbp, rsp	       745	tekhex.c	FUNCTION_17
0x4001169	        0x4883ec20	                           sub rsp, 0x20	       745	tekhex.c	FUNCTION_17
0x400116d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       745	tekhex.c	FUNCTION_17
0x4001171	        0x488975e0	             mov qword [rbp - 0x20], rsi	       745	tekhex.c	FUNCTION_17
0x4001175	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       746	tekhex.c	FUNCTION_17
0x4001179	          0x488b00	                    mov rax, qword [rax]	       746	tekhex.c	FUNCTION_17
0x400117c	        0x488945f8	                mov qword [rbp - 8], rax	       746	tekhex.c	FUNCTION_17
0x4001180	      0x48837de000	               cmp qword [rbp - 0x20], 0	       747	tekhex.c	FUNCTION_17	CALL_1
0x4001185	            0x740e	                            je 0x4001195	       747	tekhex.c	FUNCTION_17	CALL_1
0x4001187	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       747	tekhex.c	FUNCTION_17	CALL_1
0x400118b	          0x4889c7	                            mov rdi, rax	       747	tekhex.c	FUNCTION_17	CALL_1
0x400118e	      0xe800000000	                          call 0x4001193	       747	tekhex.c	FUNCTION_17	CALL_1
0x4001193	            0xeb05	                           jmp 0x400119a	       747	tekhex.c	FUNCTION_17	CALL_1
0x4001195	      0xb800000000	                              mov eax, 0	       747	tekhex.c	FUNCTION_17	CALL_1
0x400119a	          0x8945f4	              mov dword [rbp - 0xc], eax	       747	tekhex.c	FUNCTION_17	CALL_1
0x400119d	        0x837df40f	              cmp dword [rbp - 0xc], 0xf	       749	tekhex.c	FUNCTION_17	IF_1
0x40011a1	            0x7e18	                           jle 0x40011bb	       749	tekhex.c	FUNCTION_17	IF_1
0x40011a3	        0x488b45f8	                mov rax, qword [rbp - 8]	       751	tekhex.c	FUNCTION_17	IF_1
0x40011a7	        0x488d5001	                      lea rdx, [rax + 1]	       751	tekhex.c	FUNCTION_17	IF_1
0x40011ab	        0x488955f8	                mov qword [rbp - 8], rdx	       751	tekhex.c	FUNCTION_17	IF_1
0x40011af	          0xc60030	                    mov byte [rax], 0x30	       751	tekhex.c	FUNCTION_17	IF_1
0x40011b2	    0xc745f4100000	            mov dword [rbp - 0xc], 0x10 	       752	tekhex.c	FUNCTION_17	IF_1
0x40011b9	            0xeb60	                           jmp 0x400121b	       752	tekhex.c	FUNCTION_17	IF_1
0x40011bb	        0x837df400	                cmp dword [rbp - 0xc], 0	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011bf	            0x7520	                           jne 0x40011e1	       756	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011c1	        0x488b45f8	                mov rax, qword [rbp - 8]	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011c5	        0x488d5001	                      lea rdx, [rax + 1]	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011c9	        0x488955f8	                mov qword [rbp - 8], rdx	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011cd	          0xc60031	                    mov byte [rax], 0x31	       758	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011d0	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       759	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011d8	    0xc745f4010000	                mov dword [rbp - 0xc], 1	       760	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011df	            0xeb3a	                           jmp 0x400121b	       760	tekhex.c	FUNCTION_17	ELSE_1	IF_2
0x40011e1	        0x488b45f8	                mov rax, qword [rbp - 8]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011e5	        0x488d5001	                      lea rdx, [rax + 1]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011e9	        0x488955f8	                mov qword [rbp - 8], rdx	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011ed	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011f0	          0x4863d2	                         movsxd rdx, edx	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011f3	     0xfb692000000	                   movzx edx, byte [rdx]	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011fa	            0x8810	                      mov byte [rax], dl	       763	tekhex.c	FUNCTION_17	ELSE_1	ELSE_2
0x40011fc	            0xeb1d	                           jmp 0x400121b	       766	tekhex.c	FUNCTION_17	WHILE_1
0x40011fe	        0x488b45f8	                mov rax, qword [rbp - 8]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4001202	        0x488d5001	                      lea rdx, [rax + 1]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4001206	        0x488955f8	                mov qword [rbp - 8], rdx	       767	tekhex.c	FUNCTION_17	WHILE_1
0x400120a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x400120e	        0x488d4a01	                      lea rcx, [rdx + 1]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4001212	        0x48894de0	             mov qword [rbp - 0x20], rcx	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4001216	           0xfb612	                   movzx edx, byte [rdx]	       767	tekhex.c	FUNCTION_17	WHILE_1
0x4001219	            0x8810	                      mov byte [rax], dl	       767	tekhex.c	FUNCTION_17	WHILE_1
0x400121b	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       766	tekhex.c	FUNCTION_17	WHILE_1
0x400121e	          0x8d50ff	                      lea edx, [rax - 1]	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4001221	          0x8955f4	              mov dword [rbp - 0xc], edx	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4001224	            0x85c0	                           test eax, eax	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4001226	            0x75d6	                           jne 0x40011fe	       766	tekhex.c	FUNCTION_17	WHILE_1
0x4001228	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       769	tekhex.c	FUNCTION_17
0x400122c	        0x488b55f8	                mov rdx, qword [rbp - 8]	       769	tekhex.c	FUNCTION_17
0x4001230	          0x488910	                    mov qword [rax], rdx	       769	tekhex.c	FUNCTION_17
0x4001233	              0x90	                                     nop	       770	tekhex.c	FUNCTION_17
0x4001234	              0xc9	                                   leave	       770	tekhex.c	FUNCTION_17
0x4001235	              0xc3	                                     ret	       770	tekhex.c	FUNCTION_17
tekhex_canonicalize_symtab	WHILE,1:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,2:SWITCH,0	34
0x4000c49	              0x55	                                push rbp	       563	tekhex.c	FUNCTION_8
0x4000c4a	          0x4889e5	                            mov rbp, rsp	       563	tekhex.c	FUNCTION_8
0x4000c4d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       563	tekhex.c	FUNCTION_8
0x4000c51	        0x488975e0	             mov qword [rbp - 0x20], rsi	       563	tekhex.c	FUNCTION_8
0x4000c55	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       564	tekhex.c	FUNCTION_8
0x4000c59	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	       564	tekhex.c	FUNCTION_8
0x4000c60	        0x488b4010	            mov rax, qword [rax + 0x10] 	       564	tekhex.c	FUNCTION_8
0x4000c64	        0x488945f8	                mov qword [rbp - 8], rax	       564	tekhex.c	FUNCTION_8
0x4000c68	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000c6c	    0x8b80b8000000	            mov eax, dword [rax + 0xb8] 	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000c72	          0x8945f4	              mov dword [rbp - 0xc], eax	       565	tekhex.c	FUNCTION_8	CALL_1
0x4000c75	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       567	tekhex.c	FUNCTION_8
0x4000c78	    0x488d14c50000	                        lea rdx, [rax*8]	       567	tekhex.c	FUNCTION_8
0x4000c80	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       567	tekhex.c	FUNCTION_8
0x4000c84	          0x4801d0	                            add rax, rdx	       567	tekhex.c	FUNCTION_8
0x4000c87	    0x48c700000000	                      mov qword [rax], 0	       567	tekhex.c	FUNCTION_8
0x4000c8e	            0xeb29	                           jmp 0x4000cb9	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000c90	        0x836df401	                sub dword [rbp - 0xc], 1	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000c94	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000c97	    0x488d14c50000	                        lea rdx, [rax*8]	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000c9f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000ca3	          0x4801c2	                            add rdx, rax	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000ca6	        0x488b45f8	                mov rax, qword [rbp - 8]	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000caa	          0x488902	                    mov qword [rdx], rax	       570	tekhex.c	FUNCTION_8	WHILE_1
0x4000cad	        0x488b45f8	                mov rax, qword [rbp - 8]	       571	tekhex.c	FUNCTION_8	WHILE_1
0x4000cb1	        0x488b4030	            mov rax, qword [rax + 0x30] 	       571	tekhex.c	FUNCTION_8	WHILE_1
0x4000cb5	        0x488945f8	                mov qword [rbp - 8], rax	       571	tekhex.c	FUNCTION_8	WHILE_1
0x4000cb9	      0x48837df800	                  cmp qword [rbp - 8], 0	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000cbe	            0x75d0	                           jne 0x4000c90	       568	tekhex.c	FUNCTION_8	WHILE_1
0x4000cc0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       574	tekhex.c	FUNCTION_8	CALL_2
0x4000cc4	    0x8b80b8000000	            mov eax, dword [rax + 0xb8] 	       574	tekhex.c	FUNCTION_8	CALL_2
0x4000cca	            0x89c0	                            mov eax, eax	       574	tekhex.c	FUNCTION_8	CALL_2
0x4000ccc	              0x5d	                                 pop rbp	       575	tekhex.c	FUNCTION_8
0x4000ccd	              0xc3	                                     ret	       575	tekhex.c	FUNCTION_8
tekhex_set_arch_mach	WHILE,0:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,1:SWITCH,0	21
0x4000ff9	              0x55	                                push rbp	       690	tekhex.c	FUNCTION_14
0x4000ffa	          0x4889e5	                            mov rbp, rsp	       690	tekhex.c	FUNCTION_14
0x4000ffd	        0x4883ec20	                           sub rsp, 0x20	       690	tekhex.c	FUNCTION_14
0x4001001	        0x48897df8	                mov qword [rbp - 8], rdi	       690	tekhex.c	FUNCTION_14
0x4001005	          0x8975f4	              mov dword [rbp - 0xc], esi	       690	tekhex.c	FUNCTION_14
0x4001008	        0x488955e8	             mov qword [rbp - 0x18], rdx	       690	tekhex.c	FUNCTION_14
0x400100c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       692	tekhex.c	FUNCTION_14	CALL_1
0x4001010	          0x8b4df4	              mov ecx, dword [rbp - 0xc]	       692	tekhex.c	FUNCTION_14	CALL_1
0x4001013	        0x488b45f8	                mov rax, qword [rbp - 8]	       692	tekhex.c	FUNCTION_14	CALL_1
0x4001017	            0x89ce	                            mov esi, ecx	       692	tekhex.c	FUNCTION_14	CALL_1
0x4001019	          0x4889c7	                            mov rdi, rax	       692	tekhex.c	FUNCTION_14	CALL_1
0x400101c	      0xe800000000	                          call 0x4001021	       692	tekhex.c	FUNCTION_14	CALL_1
0x4001021	            0x85c0	                           test eax, eax	       693	tekhex.c	FUNCTION_14
0x4001023	            0x7506	                           jne 0x400102b	       693	tekhex.c	FUNCTION_14
0x4001025	        0x837df400	                cmp dword [rbp - 0xc], 0	       693	tekhex.c	FUNCTION_14
0x4001029	            0x7507	                           jne 0x4001032	       693	tekhex.c	FUNCTION_14
0x400102b	      0xb801000000	                              mov eax, 1	       693	tekhex.c	FUNCTION_14
0x4001030	            0xeb05	                           jmp 0x4001037	       693	tekhex.c	FUNCTION_14
0x4001032	      0xb800000000	                              mov eax, 0	       693	tekhex.c	FUNCTION_14
0x4001037	              0xc9	                                   leave	       694	tekhex.c	FUNCTION_14
0x4001038	              0xc3	                                     ret	       694	tekhex.c	FUNCTION_14
getvalue	WHILE,1:functions,0:FOR,0:DO,0:IF,4:ELSE,0:CALL,2:SWITCH,0	77
0x4000125	              0x55	                                push rbp	       271	tekhex.c	FUNCTION_2
0x4000126	          0x4889e5	                            mov rbp, rsp	       271	tekhex.c	FUNCTION_2
0x4000129	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       271	tekhex.c	FUNCTION_2
0x400012d	        0x488975d0	             mov qword [rbp - 0x30], rsi	       271	tekhex.c	FUNCTION_2
0x4000131	        0x488955c8	             mov qword [rbp - 0x38], rdx	       271	tekhex.c	FUNCTION_2
0x4000135	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       272	tekhex.c	FUNCTION_2
0x4000139	          0x488b00	                    mov rax, qword [rax]	       272	tekhex.c	FUNCTION_2
0x400013c	        0x488945f0	             mov qword [rbp - 0x10], rax	       272	tekhex.c	FUNCTION_2
0x4000140	    0x48c745f80000	                  mov qword [rbp - 8], 0	       273	tekhex.c	FUNCTION_2
0x4000148	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       276	tekhex.c	FUNCTION_2	IF_1
0x400014c	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       276	tekhex.c	FUNCTION_2	IF_1
0x4000150	            0x720a	                            jb 0x400015c	       276	tekhex.c	FUNCTION_2	IF_1
0x4000152	      0xb800000000	                              mov eax, 0	       277	tekhex.c	FUNCTION_2	IF_1
0x4000157	      0xe9d6000000	                           jmp 0x4000232	       277	tekhex.c	FUNCTION_2	IF_1
0x400015c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	tekhex.c	FUNCTION_2	IF_2
0x4000160	           0xfb600	                   movzx eax, byte [rax]	       279	tekhex.c	FUNCTION_2	IF_2
0x4000163	           0xfb6c0	                           movzx eax, al	       279	tekhex.c	FUNCTION_2	IF_2
0x4000166	            0x4898	                                    cdqe	       279	tekhex.c	FUNCTION_2	IF_2
0x4000168	     0xfb680000000	                   movzx eax, byte [rax]	       279	tekhex.c	FUNCTION_2	IF_2
0x400016f	            0x3c63	                            cmp al, 0x63	       279	tekhex.c	FUNCTION_2	IF_2
0x4000171	            0x750a	                           jne 0x400017d	       279	tekhex.c	FUNCTION_2	IF_2
0x4000173	      0xb800000000	                              mov eax, 0	       280	tekhex.c	FUNCTION_2	IF_2
0x4000178	      0xe9b5000000	                           jmp 0x4000232	       280	tekhex.c	FUNCTION_2	IF_2
0x400017d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000181	        0x488d5001	                      lea rdx, [rax + 1]	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000185	        0x488955f0	             mov qword [rbp - 0x10], rdx	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000189	           0xfb600	                   movzx eax, byte [rax]	       282	tekhex.c	FUNCTION_2	CALL_1
0x400018c	           0xfb6c0	                           movzx eax, al	       282	tekhex.c	FUNCTION_2	CALL_1
0x400018f	            0x4898	                                    cdqe	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000191	     0xfb680000000	                   movzx eax, byte [rax]	       282	tekhex.c	FUNCTION_2	CALL_1
0x4000198	           0xfb6c0	                           movzx eax, al	       282	tekhex.c	FUNCTION_2	CALL_1
0x400019b	          0x8945ec	             mov dword [rbp - 0x14], eax	       282	tekhex.c	FUNCTION_2	CALL_1
0x400019e	        0x837dec00	               cmp dword [rbp - 0x14], 0	       283	tekhex.c	FUNCTION_2	IF_3
0x40001a2	            0x7557	                           jne 0x40001fb	       283	tekhex.c	FUNCTION_2	IF_3
0x40001a4	    0xc745ec100000	           mov dword [rbp - 0x14], 0x10 	       284	tekhex.c	FUNCTION_2	IF_3
0x40001ab	            0xeb4e	                           jmp 0x40001fb	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40001ad	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001b1	           0xfb600	                   movzx eax, byte [rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001b4	           0xfb6c0	                           movzx eax, al	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001b7	            0x4898	                                    cdqe	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001b9	     0xfb680000000	                   movzx eax, byte [rax]	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001c0	            0x3c63	                            cmp al, 0x63	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001c2	            0x7507	                           jne 0x40001cb	       287	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001c4	      0xb800000000	                              mov eax, 0	       288	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001c9	            0xeb67	                           jmp 0x4000232	       288	tekhex.c	FUNCTION_2	WHILE_1	IF_4
0x40001cb	        0x488b45f8	                mov rax, qword [rbp - 8]	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001cf	        0x48c1e004	                              shl rax, 4	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001d3	          0x4889c1	                            mov rcx, rax	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001d6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001da	        0x488d5001	                      lea rdx, [rax + 1]	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001de	        0x488955f0	             mov qword [rbp - 0x10], rdx	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001e2	           0xfb600	                   movzx eax, byte [rax]	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001e5	           0xfb6c0	                           movzx eax, al	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001e8	            0x4898	                                    cdqe	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001ea	     0xfb680000000	                   movzx eax, byte [rax]	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001f1	           0xfb6c0	                           movzx eax, al	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001f4	          0x4809c8	                             or rax, rcx	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001f7	        0x488945f8	                mov qword [rbp - 8], rax	       289	tekhex.c	FUNCTION_2	WHILE_1	CALL_2
0x40001fb	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x40001fe	          0x8d50ff	                      lea edx, [rax - 1]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000201	          0x8955ec	             mov dword [rbp - 0x14], edx	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000204	            0x85c0	                           test eax, eax	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000206	            0x740a	                            je 0x4000212	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000208	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x400020c	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000210	            0x729b	                            jb 0x40001ad	       285	tekhex.c	FUNCTION_2	WHILE_1
0x4000212	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       292	tekhex.c	FUNCTION_2
0x4000216	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       292	tekhex.c	FUNCTION_2
0x400021a	          0x488910	                    mov qword [rax], rdx	       292	tekhex.c	FUNCTION_2
0x400021d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       293	tekhex.c	FUNCTION_2
0x4000221	        0x488b55f8	                mov rdx, qword [rbp - 8]	       293	tekhex.c	FUNCTION_2
0x4000225	          0x488910	                    mov qword [rax], rdx	       293	tekhex.c	FUNCTION_2
0x4000228	        0x837decff	cmp dword [rbp - 0x14], 0xffffffffffffffff	       294	tekhex.c	FUNCTION_2
0x400022c	           0xf94c0	                                 sete al	       294	tekhex.c	FUNCTION_2
0x400022f	           0xfb6c0	                           movzx eax, al	       294	tekhex.c	FUNCTION_2
0x4000232	              0x5d	                                 pop rbp	       295	tekhex.c	FUNCTION_2
0x4000233	              0xc3	                                     ret	       295	tekhex.c	FUNCTION_2
out	WHILE,0:functions,0:FOR,1:DO,0:IF,2:ELSE,0:CALL,4:SWITCH,0	112
0x4001236	              0x55	                                push rbp	       774	tekhex.c	FUNCTION_18
0x4001237	          0x4889e5	                            mov rbp, rsp	       774	tekhex.c	FUNCTION_18
0x400123a	        0x4883ec50	                           sub rsp, 0x50	       774	tekhex.c	FUNCTION_18
0x400123e	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       774	tekhex.c	FUNCTION_18
0x4001242	          0x8975c4	             mov dword [rbp - 0x3c], esi	       774	tekhex.c	FUNCTION_18
0x4001245	        0x488955b8	             mov qword [rbp - 0x48], rdx	       774	tekhex.c	FUNCTION_18
0x4001249	        0x48894db0	             mov qword [rbp - 0x50], rcx	       774	tekhex.c	FUNCTION_18
0x400124d	    0x64488b042528	                mov rax, qword fs:[0x28]	       774	tekhex.c	FUNCTION_18
0x4001256	        0x488945f8	                mov qword [rbp - 8], rax	       774	tekhex.c	FUNCTION_18
0x400125a	            0x31c0	                            xor eax, eax	       774	tekhex.c	FUNCTION_18
0x400125c	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       775	tekhex.c	FUNCTION_18
0x4001263	        0xc645f025	            mov byte [rbp - 0x10], 0x25 	       780	tekhex.c	FUNCTION_18
0x4001267	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       781	tekhex.c	FUNCTION_18
0x400126b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       781	tekhex.c	FUNCTION_18
0x400126f	          0x4829c2	                            sub rdx, rax	       781	tekhex.c	FUNCTION_18
0x4001272	          0x4889d0	                            mov rax, rdx	       781	tekhex.c	FUNCTION_18
0x4001275	        0x4883c005	                              add rax, 5	       781	tekhex.c	FUNCTION_18
0x4001279	          0x83e00f	                            and eax, 0xf	       781	tekhex.c	FUNCTION_18
0x400127c	     0xfb680000000	                   movzx eax, byte [rax]	       781	tekhex.c	FUNCTION_18
0x4001283	          0x8845f2	                mov byte [rbp - 0xe], al	       781	tekhex.c	FUNCTION_18
0x4001286	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       781	tekhex.c	FUNCTION_18
0x400128a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       781	tekhex.c	FUNCTION_18
0x400128e	          0x4829c2	                            sub rdx, rax	       781	tekhex.c	FUNCTION_18
0x4001291	          0x4889d0	                            mov rax, rdx	       781	tekhex.c	FUNCTION_18
0x4001294	        0x4883c005	                              add rax, 5	       781	tekhex.c	FUNCTION_18
0x4001298	        0x48c1f804	                              sar rax, 4	       781	tekhex.c	FUNCTION_18
0x400129c	          0x83e00f	                            and eax, 0xf	       781	tekhex.c	FUNCTION_18
0x400129f	     0xfb680000000	                   movzx eax, byte [rax]	       781	tekhex.c	FUNCTION_18
0x40012a6	          0x8845f1	                mov byte [rbp - 0xf], al	       781	tekhex.c	FUNCTION_18
0x40012a9	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       782	tekhex.c	FUNCTION_18
0x40012ac	          0x8845f3	                mov byte [rbp - 0xd], al	       782	tekhex.c	FUNCTION_18
0x40012af	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012b3	        0x488945e0	             mov qword [rbp - 0x20], rax	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012b7	            0xeb1e	                           jmp 0x40012d7	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012b9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012bd	           0xfb600	                   movzx eax, byte [rax]	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012c0	           0xfb6c0	                           movzx eax, al	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012c3	            0x4898	                                    cdqe	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012c5	     0xfb680000000	                   movzx eax, byte [rax]	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012cc	           0xfbec0	                           movsx eax, al	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012cf	           0x145dc	             add dword [rbp - 0x24], eax	       785	tekhex.c	FUNCTION_18	FOR_1
0x40012d2	      0x488345e001	               add qword [rbp - 0x20], 1	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012d7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012db	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012df	            0x72d8	                            jb 0x40012b9	       784	tekhex.c	FUNCTION_18	FOR_1
0x40012e1	         0xfb645f1	             movzx eax, byte [rbp - 0xf]	       787	tekhex.c	FUNCTION_18
0x40012e5	           0xfb6c0	                           movzx eax, al	       787	tekhex.c	FUNCTION_18
0x40012e8	            0x4898	                                    cdqe	       787	tekhex.c	FUNCTION_18
0x40012ea	     0xfb680000000	                   movzx eax, byte [rax]	       787	tekhex.c	FUNCTION_18
0x40012f1	           0xfbec0	                           movsx eax, al	       787	tekhex.c	FUNCTION_18
0x40012f4	           0x145dc	             add dword [rbp - 0x24], eax	       787	tekhex.c	FUNCTION_18
0x40012f7	         0xfb645f2	             movzx eax, byte [rbp - 0xe]	       788	tekhex.c	FUNCTION_18
0x40012fb	           0xfb6c0	                           movzx eax, al	       788	tekhex.c	FUNCTION_18
0x40012fe	            0x4898	                                    cdqe	       788	tekhex.c	FUNCTION_18
0x4001300	     0xfb680000000	                   movzx eax, byte [rax]	       788	tekhex.c	FUNCTION_18
0x4001307	           0xfbec0	                           movsx eax, al	       788	tekhex.c	FUNCTION_18
0x400130a	           0x145dc	             add dword [rbp - 0x24], eax	       788	tekhex.c	FUNCTION_18
0x400130d	         0xfb645f3	             movzx eax, byte [rbp - 0xd]	       789	tekhex.c	FUNCTION_18
0x4001311	           0xfb6c0	                           movzx eax, al	       789	tekhex.c	FUNCTION_18
0x4001314	            0x4898	                                    cdqe	       789	tekhex.c	FUNCTION_18
0x4001316	     0xfb680000000	                   movzx eax, byte [rax]	       789	tekhex.c	FUNCTION_18
0x400131d	           0xfbec0	                           movsx eax, al	       789	tekhex.c	FUNCTION_18
0x4001320	           0x145dc	             add dword [rbp - 0x24], eax	       789	tekhex.c	FUNCTION_18
0x4001323	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       790	tekhex.c	FUNCTION_18
0x4001326	          0x83e00f	                            and eax, 0xf	       790	tekhex.c	FUNCTION_18
0x4001329	            0x4898	                                    cdqe	       790	tekhex.c	FUNCTION_18
0x400132b	     0xfb680000000	                   movzx eax, byte [rax]	       790	tekhex.c	FUNCTION_18
0x4001332	          0x8845f5	                mov byte [rbp - 0xb], al	       790	tekhex.c	FUNCTION_18
0x4001335	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       790	tekhex.c	FUNCTION_18
0x4001338	          0xc1f804	                              sar eax, 4	       790	tekhex.c	FUNCTION_18
0x400133b	          0x83e00f	                            and eax, 0xf	       790	tekhex.c	FUNCTION_18
0x400133e	            0x4898	                                    cdqe	       790	tekhex.c	FUNCTION_18
0x4001340	     0xfb680000000	                   movzx eax, byte [rax]	       790	tekhex.c	FUNCTION_18
0x4001347	          0x8845f4	                mov byte [rbp - 0xc], al	       790	tekhex.c	FUNCTION_18
0x400134a	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400134e	        0x488d45f0	                   lea rax, [rbp - 0x10]	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x4001352	      0xbe06000000	                              mov esi, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x4001357	          0x4889c7	                            mov rdi, rax	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400135a	      0xe800000000	                          call 0x400135f	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x400135f	        0x4883f806	                              cmp rax, 6	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x4001363	            0x7414	                            je 0x4001379	       791	tekhex.c	FUNCTION_18	IF_1	CALL_1
0x4001365	      0xba00000000	                              mov edx, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x400136a	      0xbe18030000	                          mov esi, 0x318	       792	tekhex.c	FUNCTION_18	CALL_2
0x400136f	      0xbf00000000	                              mov edi, 0	       792	tekhex.c	FUNCTION_18	CALL_2
0x4001374	      0xe800000000	                          call 0x4001379	       792	tekhex.c	FUNCTION_18	CALL_2
0x4001379	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       793	tekhex.c	FUNCTION_18
0x400137d	          0xc6000a	                     mov byte [rax], 0xa	       793	tekhex.c	FUNCTION_18
0x4001380	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       794	tekhex.c	FUNCTION_18
0x4001384	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       794	tekhex.c	FUNCTION_18
0x4001388	          0x4829c2	                            sub rdx, rax	       794	tekhex.c	FUNCTION_18
0x400138b	          0x4889d0	                            mov rax, rdx	       794	tekhex.c	FUNCTION_18
0x400138e	        0x4883c001	                              add rax, 1	       794	tekhex.c	FUNCTION_18
0x4001392	        0x488945e8	             mov qword [rbp - 0x18], rax	       794	tekhex.c	FUNCTION_18
0x4001396	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x400139a	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x400139e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013a2	          0x4889ce	                            mov rsi, rcx	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013a5	          0x4889c7	                            mov rdi, rax	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013a8	      0xe800000000	                          call 0x40013ad	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013ad	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013b1	            0x7414	                            je 0x40013c7	       795	tekhex.c	FUNCTION_18	IF_2	CALL_3
0x40013b3	      0xba00000000	                              mov edx, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x40013b8	      0xbe1c030000	                          mov esi, 0x31c	       796	tekhex.c	FUNCTION_18	CALL_4
0x40013bd	      0xbf00000000	                              mov edi, 0	       796	tekhex.c	FUNCTION_18	CALL_4
0x40013c2	      0xe800000000	                          call 0x40013c7	       796	tekhex.c	FUNCTION_18	CALL_4
0x40013c7	              0x90	                                     nop	       797	tekhex.c	FUNCTION_18
0x40013c8	        0x488b45f8	                mov rax, qword [rbp - 8]	       797	tekhex.c	FUNCTION_18
0x40013cc	    0x644833042528	                xor rax, qword fs:[0x28]	       797	tekhex.c	FUNCTION_18
0x40013d5	            0x7405	                            je 0x40013dc	       797	tekhex.c	FUNCTION_18
0x40013d7	      0xe800000000	                          call 0x40013dc	       797	tekhex.c	FUNCTION_18
0x40013dc	              0xc9	                                   leave	       797	tekhex.c	FUNCTION_18
0x40013dd	              0xc3	                                     ret	       797	tekhex.c	FUNCTION_18
writevalue	WHILE,1:functions,0:FOR,1:DO,0:IF,1:ELSE,0:CALL,0:SWITCH,0	61
0x4001096	              0x55	                                push rbp	       717	tekhex.c	FUNCTION_16
0x4001097	          0x4889e5	                            mov rbp, rsp	       717	tekhex.c	FUNCTION_16
0x400109a	        0x48897de8	             mov qword [rbp - 0x18], rdi	       717	tekhex.c	FUNCTION_16
0x400109e	        0x488975e0	             mov qword [rbp - 0x20], rsi	       717	tekhex.c	FUNCTION_16
0x40010a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       718	tekhex.c	FUNCTION_16
0x40010a6	          0x488b00	                    mov rax, qword [rax]	       718	tekhex.c	FUNCTION_16
0x40010a9	        0x488945f8	                mov qword [rbp - 8], rax	       718	tekhex.c	FUNCTION_16
0x40010ad	    0xc745f0080000	               mov dword [rbp - 0x10], 8	       722	tekhex.c	FUNCTION_16	FOR_1
0x40010b4	    0xc745f41c0000	            mov dword [rbp - 0xc], 0x1c 	       722	tekhex.c	FUNCTION_16	FOR_1
0x40010bb	            0xeb77	                           jmp 0x4001134	       722	tekhex.c	FUNCTION_16	FOR_1
0x40010bd	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010c0	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010c4	            0x89c1	                            mov ecx, eax	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010c6	          0x48d3ea	                             shr rdx, cl	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010c9	          0x4889d0	                            mov rax, rdx	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010cc	          0x83e00f	                            and eax, 0xf	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010cf	          0x4885c0	                           test rax, rax	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010d2	            0x7458	                            je 0x400112c	       724	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010d4	        0x488b45f8	                mov rax, qword [rbp - 8]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010d8	        0x488d5001	                      lea rdx, [rax + 1]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010dc	        0x488955f8	                mov qword [rbp - 8], rdx	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010e0	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010e3	          0x83c230	                           add edx, 0x30	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010e6	            0x8810	                      mov byte [rax], dl	       726	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x40010e8	            0xeb2f	                           jmp 0x4001119	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010ea	        0x488b45f8	                mov rax, qword [rbp - 8]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010ee	        0x488d5001	                      lea rdx, [rax + 1]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010f2	        0x488955f8	                mov qword [rbp - 8], rdx	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010f6	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010f9	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010fd	            0x89d1	                            mov ecx, edx	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x40010ff	          0x48d3ee	                             shr rsi, cl	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001102	          0x4889f2	                            mov rdx, rsi	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001105	          0x83e20f	                            and edx, 0xf	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001108	     0xfb692000000	                   movzx edx, byte [rdx]	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400110f	            0x8810	                      mov byte [rax], dl	       729	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001111	        0x836df404	                sub dword [rbp - 0xc], 4	       730	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001115	        0x836df001	               sub dword [rbp - 0x10], 1	       731	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x4001119	        0x837df000	               cmp dword [rbp - 0x10], 0	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400111d	            0x75cb	                           jne 0x40010ea	       727	tekhex.c	FUNCTION_16	FOR_1	IF_1	WHILE_1
0x400111f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4001123	        0x488b55f8	                mov rdx, qword [rbp - 8]	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x4001127	          0x488910	                    mov qword [rax], rdx	       733	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400112a	            0xeb37	                           jmp 0x4001163	       734	tekhex.c	FUNCTION_16	FOR_1	IF_1
0x400112c	        0x836df404	                sub dword [rbp - 0xc], 4	       722	tekhex.c	FUNCTION_16	FOR_1
0x4001130	        0x836df001	               sub dword [rbp - 0x10], 1	       722	tekhex.c	FUNCTION_16	FOR_1
0x4001134	        0x837df400	                cmp dword [rbp - 0xc], 0	       722	tekhex.c	FUNCTION_16	FOR_1
0x4001138	            0x7583	                           jne 0x40010bd	       722	tekhex.c	FUNCTION_16	FOR_1
0x400113a	        0x488b45f8	                mov rax, qword [rbp - 8]	       738	tekhex.c	FUNCTION_16
0x400113e	        0x488d5001	                      lea rdx, [rax + 1]	       738	tekhex.c	FUNCTION_16
0x4001142	        0x488955f8	                mov qword [rbp - 8], rdx	       738	tekhex.c	FUNCTION_16
0x4001146	          0xc60031	                    mov byte [rax], 0x31	       738	tekhex.c	FUNCTION_16
0x4001149	        0x488b45f8	                mov rax, qword [rbp - 8]	       739	tekhex.c	FUNCTION_16
0x400114d	        0x488d5001	                      lea rdx, [rax + 1]	       739	tekhex.c	FUNCTION_16
0x4001151	        0x488955f8	                mov qword [rbp - 8], rdx	       739	tekhex.c	FUNCTION_16
0x4001155	          0xc60030	                    mov byte [rax], 0x30	       739	tekhex.c	FUNCTION_16
0x4001158	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       740	tekhex.c	FUNCTION_16
0x400115c	        0x488b55f8	                mov rdx, qword [rbp - 8]	       740	tekhex.c	FUNCTION_16
0x4001160	          0x488910	                    mov qword [rax], rdx	       740	tekhex.c	FUNCTION_16
0x4001163	              0x5d	                                 pop rbp	       741	tekhex.c	FUNCTION_16
0x4001164	              0xc3	                                     ret	       741	tekhex.c	FUNCTION_16
tekhex_get_symbol_info	WHILE,0:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,1:SWITCH,0	14
0x40018d3	              0x55	                                push rbp	       930	tekhex.c	FUNCTION_22
0x40018d4	          0x4889e5	                            mov rbp, rsp	       930	tekhex.c	FUNCTION_22
0x40018d7	        0x4883ec20	                           sub rsp, 0x20	       930	tekhex.c	FUNCTION_22
0x40018db	        0x48897df8	                mov qword [rbp - 8], rdi	       930	tekhex.c	FUNCTION_22
0x40018df	        0x488975f0	             mov qword [rbp - 0x10], rsi	       930	tekhex.c	FUNCTION_22
0x40018e3	        0x488955e8	             mov qword [rbp - 0x18], rdx	       930	tekhex.c	FUNCTION_22
0x40018e7	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       931	tekhex.c	FUNCTION_22	CALL_1
0x40018eb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       931	tekhex.c	FUNCTION_22	CALL_1
0x40018ef	          0x4889d6	                            mov rsi, rdx	       931	tekhex.c	FUNCTION_22	CALL_1
0x40018f2	          0x4889c7	                            mov rdi, rax	       931	tekhex.c	FUNCTION_22	CALL_1
0x40018f5	      0xe800000000	                          call 0x40018fa	       931	tekhex.c	FUNCTION_22	CALL_1
0x40018fa	              0x90	                                     nop	       932	tekhex.c	FUNCTION_22
0x40018fb	              0xc9	                                   leave	       932	tekhex.c	FUNCTION_22
0x40018fc	              0xc3	                                     ret	       932	tekhex.c	FUNCTION_22
tekhex_print_symbol	WHILE,0:functions,0:FOR,0:DO,0:IF,0:ELSE,0:CALL,3:SWITCH,1	47
0x40018fd	              0x55	                                push rbp	       939	tekhex.c	FUNCTION_23
0x40018fe	          0x4889e5	                            mov rbp, rsp	       939	tekhex.c	FUNCTION_23
0x4001901	        0x4883ec30	                           sub rsp, 0x30	       939	tekhex.c	FUNCTION_23
0x4001905	        0x48897de8	             mov qword [rbp - 0x18], rdi	       939	tekhex.c	FUNCTION_23
0x4001909	        0x488975e0	             mov qword [rbp - 0x20], rsi	       939	tekhex.c	FUNCTION_23
0x400190d	        0x488955d8	             mov qword [rbp - 0x28], rdx	       939	tekhex.c	FUNCTION_23
0x4001911	          0x894dd4	             mov dword [rbp - 0x2c], ecx	       939	tekhex.c	FUNCTION_23
0x4001914	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       940	tekhex.c	FUNCTION_23
0x4001918	        0x488945f0	             mov qword [rbp - 0x10], rax	       940	tekhex.c	FUNCTION_23
0x400191c	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x400191f	          0x83f801	                              cmp eax, 1	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x4001922	            0x746f	                            je 0x4001993	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x4001924	          0x83f801	                              cmp eax, 1	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x4001927	            0x7207	                            jb 0x4001930	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x4001929	          0x83f802	                              cmp eax, 2	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x400192c	            0x741b	                            je 0x4001949	       942	tekhex.c	FUNCTION_23	SWITCH_1
0x400192e	            0xeb64	                           jmp 0x4001994	       960	tekhex.c	FUNCTION_23
0x4001930	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x4001934	        0x488b4008	                mov rax, qword [rax + 8]	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x4001938	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x400193c	          0x4889d6	                            mov rsi, rdx	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x400193f	          0x4889c7	                            mov rdi, rax	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x4001942	      0xe800000000	                          call 0x4001947	       945	tekhex.c	FUNCTION_23	SWITCH_1	CALL_1
0x4001947	            0xeb4b	                           jmp 0x4001994	       946	tekhex.c	FUNCTION_23	SWITCH_1
0x4001949	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x400194d	        0x488b4020	            mov rax, qword [rax + 0x20] 	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x4001951	          0x488b00	                    mov rax, qword [rax]	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x4001954	        0x488945f8	                mov qword [rbp - 8], rax	       952	tekhex.c	FUNCTION_23	SWITCH_1
0x4001958	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x400195c	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x4001960	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x4001964	          0x4889ce	                            mov rsi, rcx	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x4001967	          0x4889c7	                            mov rdi, rax	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x400196a	      0xe800000000	                          call 0x400196f	       954	tekhex.c	FUNCTION_23	SWITCH_1	CALL_2
0x400196f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x4001973	        0x488b4808	                mov rcx, qword [rax + 8]	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x4001977	        0x488b55f8	                mov rdx, qword [rbp - 8]	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x400197b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x400197f	      0xbe00000000	                              mov esi, 0	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x4001984	          0x4889c7	                            mov rdi, rax	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x4001987	      0xb800000000	                              mov eax, 0	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x400198c	      0xe800000000	                          call 0x4001991	       956	tekhex.c	FUNCTION_23	SWITCH_1	CALL_3
0x4001991	            0xeb01	                           jmp 0x4001994	       960	tekhex.c	FUNCTION_23
0x4001993	              0x90	                                     nop	       948	tekhex.c	FUNCTION_23	SWITCH_1
0x4001994	              0x90	                                     nop	       960	tekhex.c	FUNCTION_23
0x4001995	              0xc9	                                   leave	       960	tekhex.c	FUNCTION_23
0x4001996	              0xc3	                                     ret	       960	tekhex.c	FUNCTION_23
