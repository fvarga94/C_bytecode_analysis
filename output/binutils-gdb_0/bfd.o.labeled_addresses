bfd_fprintf_vma	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,3:functions,0:ELSE,0	27
0x40020ae	              0x55	                                push rbp	      2007	bfd.c	FUNCTION_31
0x40020af	          0x4889e5	                            mov rbp, rsp	      2007	bfd.c	FUNCTION_31
0x40020b2	        0x4883ec20	                           sub rsp, 0x20	      2007	bfd.c	FUNCTION_31
0x40020b6	        0x48897df8	                mov qword [rbp - 8], rdi	      2007	bfd.c	FUNCTION_31
0x40020ba	        0x488975f0	             mov qword [rbp - 0x10], rsi	      2007	bfd.c	FUNCTION_31
0x40020be	        0x488955e8	             mov qword [rbp - 0x18], rdx	      2007	bfd.c	FUNCTION_31
0x40020c2	        0x488b45f8	                mov rax, qword [rbp - 8]	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40020c6	          0x4889c7	                            mov rdi, rax	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40020c9	      0xe823ffffff	                        call sym.is32bit	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40020ce	            0x85c0	                           test eax, eax	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40020d0	            0x741e	                            je 0x40020f0	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x40020d2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020d6	            0x89c2	                            mov edx, eax	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020d8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020dc	      0xbe00000000	                              mov esi, 0	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020e1	          0x4889c7	                            mov rdi, rax	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020e4	      0xb800000000	                              mov eax, 0	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020e9	      0xe800000000	                          call 0x40020ee	      2011	bfd.c	FUNCTION_31	IF_1	CALL_2
0x40020ee	            0xeb1a	                           jmp 0x400210a	      2012	bfd.c	FUNCTION_31	IF_1
0x40020f0	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2015	bfd.c	FUNCTION_31	CALL_3
0x40020f4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2015	bfd.c	FUNCTION_31	CALL_3
0x40020f8	      0xbe00000000	                              mov esi, 0	      2015	bfd.c	FUNCTION_31	CALL_3
0x40020fd	          0x4889c7	                            mov rdi, rax	      2015	bfd.c	FUNCTION_31	CALL_3
0x4002100	      0xb800000000	                              mov eax, 0	      2015	bfd.c	FUNCTION_31	CALL_3
0x4002105	      0xe800000000	                          call 0x400210a	      2015	bfd.c	FUNCTION_31	CALL_3
0x400210a	              0xc9	                                   leave	      2016	bfd.c	FUNCTION_31
0x400210b	              0xc3	                                     ret	      2016	bfd.c	FUNCTION_31
bfd_get_compression_header_size	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,5:CALL,3:functions,0:ELSE,2	42
0x40029bd	              0x55	                                push rbp	      2432	bfd.c	FUNCTION_41
0x40029be	          0x4889e5	                            mov rbp, rsp	      2432	bfd.c	FUNCTION_41
0x40029c1	        0x48897df8	                mov qword [rbp - 8], rdi	      2432	bfd.c	FUNCTION_41
0x40029c5	        0x488975f0	             mov qword [rbp - 0x10], rsi	      2432	bfd.c	FUNCTION_41
0x40029c9	        0x488b45f8	                mov rax, qword [rbp - 8]	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40029cd	        0x488b4008	                mov rax, qword [rax + 8]	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40029d1	          0x8b4008	                mov eax, dword [rax + 8]	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40029d4	          0x83f805	                              cmp eax, 5	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40029d7	            0x7572	                           jne 0x4002a4b	      2433	bfd.c	FUNCTION_41	IF_1	CALL_1
0x40029d9	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x40029de	            0x751f	                           jne 0x40029ff	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x40029e0	        0x488b45f8	                mov rax, qword [rbp - 8]	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029e4	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029e7	          0xc1e805	                              shr eax, 5	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029ea	      0x25ffff0f00	                        and eax, 0xfffff	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029ef	      0x2500000200	                        and eax, 0x20000	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029f4	            0x85c0	                           test eax, eax	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029f6	            0x7527	                           jne 0x4002a1f	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029f8	      0xb800000000	                              mov eax, 0	      2438	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029fd	            0xeb51	                           jmp 0x4002a50	      2438	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40029ff	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a03	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a0a	        0x488b4008	                mov rax, qword [rax + 8]	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a0e	      0x2500080000	                          and eax, 0x800	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a13	          0x4885c0	                           test rax, rax	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a16	            0x7507	                           jne 0x4002a1f	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002a18	      0xb800000000	                              mov eax, 0	      2441	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4
0x4002a1d	            0xeb31	                           jmp 0x4002a50	      2441	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4
0x4002a1f	        0x488b45f8	                mov rax, qword [rbp - 8]	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a23	        0x488b4008	                mov rax, qword [rax + 8]	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a27	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a2e	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a35	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a39	            0x3c01	                               cmp al, 1	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a3b	            0x7507	                           jne 0x4002a44	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002a3d	      0xb80c000000	                            mov eax, 0xc	      2444	bfd.c	FUNCTION_41	IF_1	IF_5
0x4002a42	            0xeb0c	                           jmp 0x4002a50	      2444	bfd.c	FUNCTION_41	IF_1	IF_5
0x4002a44	      0xb818000000	                           mov eax, 0x18	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4002a49	            0xeb05	                           jmp 0x4002a50	      2446	bfd.c	FUNCTION_41	IF_1	ELSE_2
0x4002a4b	      0xb800000000	                              mov eax, 0	      2449	bfd.c	FUNCTION_41
0x4002a50	              0x5d	                                 pop rbp	      2450	bfd.c	FUNCTION_41
0x4002a51	              0xc3	                                     ret	      2450	bfd.c	FUNCTION_41
bfd_convert_section_size	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,5:CALL,5:functions,0:ELSE,1	62
0x4002a52	              0x55	                                push rbp	      2468	bfd.c	FUNCTION_42
0x4002a53	          0x4889e5	                            mov rbp, rsp	      2468	bfd.c	FUNCTION_42
0x4002a56	        0x4883ec30	                           sub rsp, 0x30	      2468	bfd.c	FUNCTION_42
0x4002a5a	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2468	bfd.c	FUNCTION_42
0x4002a5e	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2468	bfd.c	FUNCTION_42
0x4002a62	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2468	bfd.c	FUNCTION_42
0x4002a66	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      2468	bfd.c	FUNCTION_42
0x4002a6a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a6e	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a71	          0xc1e805	                              shr eax, 5	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a74	      0x25ffff0f00	                        and eax, 0xfffff	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a79	      0x2500800000	                         and eax, 0x8000	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a7e	            0x85c0	                           test eax, eax	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a80	            0x7409	                            je 0x4002a8b	      2472	bfd.c	FUNCTION_42	IF_1
0x4002a82	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2473	bfd.c	FUNCTION_42	IF_1
0x4002a86	      0xe9a3000000	                           jmp 0x4002b2e	      2473	bfd.c	FUNCTION_42	IF_1
0x4002a8b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4002a8f	        0x488b4008	                mov rax, qword [rax + 8]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4002a93	          0x8b4008	                mov eax, dword [rax + 8]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4002a96	          0x83f805	                              cmp eax, 5	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4002a99	            0x7510	                           jne 0x4002aab	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4002a9b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4002a9f	        0x488b4008	                mov rax, qword [rax + 8]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4002aa3	          0x8b4008	                mov eax, dword [rax + 8]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4002aa6	          0x83f805	                              cmp eax, 5	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4002aa9	            0x7406	                            je 0x4002ab1	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4002aab	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2478	bfd.c	FUNCTION_42	IF_2
0x4002aaf	            0xeb7d	                           jmp 0x4002b2e	      2478	bfd.c	FUNCTION_42	IF_2
0x4002ab1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ab5	        0x488b4008	                mov rax, qword [rax + 8]	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ab9	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ac0	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ac7	         0xfb6500c	            movzx edx, byte [rax + 0xc] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002acb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4002acf	        0x488b4008	                mov rax, qword [rax + 8]	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4002ad3	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4002ada	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4002ae1	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4002ae5	            0x38c2	                              cmp dl, al	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ae7	            0x7506	                           jne 0x4002aef	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4002ae9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2483	bfd.c	FUNCTION_42	IF_3
0x4002aed	            0xeb3f	                           jmp 0x4002b2e	      2483	bfd.c	FUNCTION_42	IF_3
0x4002aef	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002af3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002af7	          0x4889d6	                            mov rsi, rdx	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002afa	          0x4889c7	                            mov rdi, rax	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002afd	      0xe800000000	                          call 0x4002b02	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002b02	            0x4898	                                    cdqe	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002b04	        0x488945f8	                mov qword [rbp - 8], rax	      2486	bfd.c	FUNCTION_42	CALL_5
0x4002b08	      0x48837df800	                  cmp qword [rbp - 8], 0	      2487	bfd.c	FUNCTION_42	IF_4
0x4002b0d	            0x7506	                           jne 0x4002b15	      2487	bfd.c	FUNCTION_42	IF_4
0x4002b0f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2488	bfd.c	FUNCTION_42	IF_4
0x4002b13	            0xeb19	                           jmp 0x4002b2e	      2488	bfd.c	FUNCTION_42	IF_4
0x4002b15	      0x48837df80c	                cmp qword [rbp - 8], 0xc	      2491	bfd.c	FUNCTION_42	IF_5
0x4002b1a	            0x750a	                           jne 0x4002b26	      2491	bfd.c	FUNCTION_42	IF_5
0x4002b1c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2492	bfd.c	FUNCTION_42	IF_5
0x4002b20	        0x4883c00c	                            add rax, 0xc	      2492	bfd.c	FUNCTION_42	IF_5
0x4002b24	            0xeb08	                           jmp 0x4002b2e	      2492	bfd.c	FUNCTION_42	IF_5
0x4002b26	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4002b2a	        0x4883e80c	                            sub rax, 0xc	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4002b2e	              0xc9	                                   leave	      2497	bfd.c	FUNCTION_42
0x4002b2f	              0xc3	                                     ret	      2497	bfd.c	FUNCTION_42
bfd_get_sign_extend_vma	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,3:CALL,14:functions,0:ELSE,0	91
0x4001a6e	              0x55	                                push rbp	      1502	bfd.c	FUNCTION_20
0x4001a6f	          0x4889e5	                            mov rbp, rsp	      1502	bfd.c	FUNCTION_20
0x4001a72	        0x4883ec20	                           sub rsp, 0x20	      1502	bfd.c	FUNCTION_20
0x4001a76	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1502	bfd.c	FUNCTION_20
0x4001a7a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001a7e	        0x488b4008	                mov rax, qword [rax + 8]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001a82	          0x8b4008	                mov eax, dword [rax + 8]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001a85	          0x83f805	                              cmp eax, 5	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001a88	            0x7521	                           jne 0x4001aab	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001a8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001a8e	        0x488b4008	                mov rax, qword [rax + 8]	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001a92	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001a99	     0xfb680890300	          movzx eax, byte [rax + 0x389] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001aa0	          0x83e001	                              and eax, 1	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001aa3	           0xfb6c0	                           movzx eax, al	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001aa6	      0xe910010000	                           jmp 0x4001bbb	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001aab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1508	bfd.c	FUNCTION_20	CALL_3
0x4001aaf	        0x488b4008	                mov rax, qword [rax + 8]	      1508	bfd.c	FUNCTION_20	CALL_3
0x4001ab3	          0x488b00	                    mov rax, qword [rax]	      1508	bfd.c	FUNCTION_20	CALL_3
0x4001ab6	        0x488945f8	                mov qword [rbp - 8], rax	      1508	bfd.c	FUNCTION_20	CALL_3
0x4001aba	        0x488b45f8	                mov rax, qword [rbp - 8]	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001abe	      0xba09000000	                              mov edx, 9	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001ac3	      0xbe00000000	                              mov esi, 0	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001ac8	          0x4889c7	                            mov rdi, rax	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001acb	      0xe800000000	                          call 0x4001ad0	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001ad0	            0x85c0	                           test eax, eax	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001ad2	     0xf84ac000000	                            je 0x4001b84	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001ad8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001adc	      0xbe00000000	                              mov esi, 0	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001ae1	          0x4889c7	                            mov rdi, rax	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001ae4	      0xe800000000	                          call 0x4001ae9	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001ae9	            0x85c0	                           test eax, eax	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001aeb	     0xf8493000000	                            je 0x4001b84	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001af1	        0x488b45f8	                mov rax, qword [rbp - 8]	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001af5	      0xbe00000000	                              mov esi, 0	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001afa	          0x4889c7	                            mov rdi, rax	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001afd	      0xe800000000	                          call 0x4001b02	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001b02	            0x85c0	                           test eax, eax	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001b04	            0x747e	                            je 0x4001b84	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001b06	        0x488b45f8	                mov rax, qword [rbp - 8]	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b0a	      0xbe00000000	                              mov esi, 0	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b0f	          0x4889c7	                            mov rdi, rax	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b12	      0xe800000000	                          call 0x4001b17	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b17	            0x85c0	                           test eax, eax	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b19	            0x7469	                            je 0x4001b84	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001b1b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b1f	      0xbe00000000	                              mov esi, 0	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b24	          0x4889c7	                            mov rdi, rax	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b27	      0xe800000000	                          call 0x4001b2c	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b2c	            0x85c0	                           test eax, eax	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b2e	            0x7454	                            je 0x4001b84	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001b30	        0x488b45f8	                mov rax, qword [rbp - 8]	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b34	      0xbe00000000	                              mov esi, 0	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b39	          0x4889c7	                            mov rdi, rax	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b3c	      0xe800000000	                          call 0x4001b41	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b41	            0x85c0	                           test eax, eax	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b43	            0x743f	                            je 0x4001b84	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001b45	        0x488b45f8	                mov rax, qword [rbp - 8]	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b49	      0xbe00000000	                              mov esi, 0	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b4e	          0x4889c7	                            mov rdi, rax	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b51	      0xe800000000	                          call 0x4001b56	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b56	            0x85c0	                           test eax, eax	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b58	            0x742a	                            je 0x4001b84	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x4001b5a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b5e	      0xbe00000000	                              mov esi, 0	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b63	          0x4889c7	                            mov rdi, rax	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b66	      0xe800000000	                          call 0x4001b6b	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b6b	            0x85c0	                           test eax, eax	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b6d	            0x7415	                            je 0x4001b84	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x4001b6f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b73	      0xbe00000000	                              mov esi, 0	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b78	          0x4889c7	                            mov rdi, rax	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b7b	      0xe800000000	                          call 0x4001b80	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b80	            0x85c0	                           test eax, eax	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b82	            0x7507	                           jne 0x4001b8b	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x4001b84	      0xb801000000	                              mov eax, 1	      1524	bfd.c	FUNCTION_20	IF_2
0x4001b89	            0xeb30	                           jmp 0x4001bbb	      1524	bfd.c	FUNCTION_20	IF_2
0x4001b8b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001b8f	      0xba06000000	                              mov edx, 6	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001b94	      0xbe00000000	                              mov esi, 0	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001b99	          0x4889c7	                            mov rdi, rax	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001b9c	      0xe800000000	                          call 0x4001ba1	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001ba1	            0x85c0	                           test eax, eax	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001ba3	            0x7507	                           jne 0x4001bac	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x4001ba5	      0xb800000000	                              mov eax, 0	      1527	bfd.c	FUNCTION_20	IF_3
0x4001baa	            0xeb0f	                           jmp 0x4001bbb	      1527	bfd.c	FUNCTION_20	IF_3
0x4001bac	      0xbf03000000	                              mov edi, 3	      1529	bfd.c	FUNCTION_20	CALL_14
0x4001bb1	      0xe800000000	                          call 0x4001bb6	      1529	bfd.c	FUNCTION_20	CALL_14
0x4001bb6	      0xb8ffffffff	                     mov eax, 0xffffffff	      1530	bfd.c	FUNCTION_20
0x4001bbb	              0xc9	                                   leave	      1531	bfd.c	FUNCTION_20
0x4001bbc	              0xc3	                                     ret	      1531	bfd.c	FUNCTION_20
bfd_get_reloc_upper_bound	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	24
0x40017cc	              0x55	                                push rbp	      1315	bfd.c	FUNCTION_14
0x40017cd	          0x4889e5	                            mov rbp, rsp	      1315	bfd.c	FUNCTION_14
0x40017d0	        0x4883ec10	                           sub rsp, 0x10	      1315	bfd.c	FUNCTION_14
0x40017d4	        0x48897df8	                mov qword [rbp - 8], rdi	      1315	bfd.c	FUNCTION_14
0x40017d8	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1315	bfd.c	FUNCTION_14
0x40017dc	        0x488b45f8	                mov rax, qword [rbp - 8]	      1316	bfd.c	FUNCTION_14	IF_1
0x40017e0	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1316	bfd.c	FUNCTION_14	IF_1
0x40017e4	          0x83e007	                              and eax, 7	      1316	bfd.c	FUNCTION_14	IF_1
0x40017e7	            0x3c01	                               cmp al, 1	      1316	bfd.c	FUNCTION_14	IF_1
0x40017e9	            0x7413	                            je 0x40017fe	      1316	bfd.c	FUNCTION_14	IF_1
0x40017eb	      0xbf05000000	                              mov edi, 5	      1318	bfd.c	FUNCTION_14	IF_1	CALL_1
0x40017f0	      0xe800000000	                          call 0x40017f5	      1318	bfd.c	FUNCTION_14	IF_1	CALL_1
0x40017f5	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1319	bfd.c	FUNCTION_14	IF_1
0x40017fc	            0xeb1f	                           jmp 0x400181d	      1319	bfd.c	FUNCTION_14	IF_1
0x40017fe	        0x488b45f8	                mov rax, qword [rbp - 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4001802	        0x488b4008	                mov rax, qword [rax + 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4001806	    0x488b80680200	           mov rax, qword [rax + 0x268] 	      1322	bfd.c	FUNCTION_14	CALL_2
0x400180d	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4001811	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x4001815	          0x4889ce	                            mov rsi, rcx	      1322	bfd.c	FUNCTION_14	CALL_2
0x4001818	          0x4889d7	                            mov rdi, rdx	      1322	bfd.c	FUNCTION_14	CALL_2
0x400181b	            0xffd0	                                call rax	      1322	bfd.c	FUNCTION_14	CALL_2
0x400181d	              0xc9	                                   leave	      1323	bfd.c	FUNCTION_14
0x400181e	              0xc3	                                     ret	      1323	bfd.c	FUNCTION_14
bfd_set_error_handler	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,0:functions,0:ELSE,0	10
0x4001738	              0x55	                                push rbp	      1195	bfd.c	FUNCTION_10
0x4001739	          0x4889e5	                            mov rbp, rsp	      1195	bfd.c	FUNCTION_10
0x400173c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1195	bfd.c	FUNCTION_10
0x4001740	    0x488b05000000	            mov rax, qword [0x04001747] 	      1198	bfd.c	FUNCTION_10
0x4001747	        0x488945f8	                mov qword [rbp - 8], rax	      1198	bfd.c	FUNCTION_10
0x400174b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1199	bfd.c	FUNCTION_10
0x400174f	    0x488905000000	            mov qword [0x04001756], rax 	      1199	bfd.c	FUNCTION_10
0x4001756	        0x488b45f8	                mov rax, qword [rbp - 8]	      1200	bfd.c	FUNCTION_10
0x400175a	              0x5d	                                 pop rbp	      1201	bfd.c	FUNCTION_10
0x400175b	              0xc3	                                     ret	      1201	bfd.c	FUNCTION_10
bfd_set_assert_handler	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,0:functions,0:ELSE,0	10
0x40017a8	              0x55	                                push rbp	      1280	bfd.c	FUNCTION_13
0x40017a9	          0x4889e5	                            mov rbp, rsp	      1280	bfd.c	FUNCTION_13
0x40017ac	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1280	bfd.c	FUNCTION_13
0x40017b0	    0x488b05000000	            mov rax, qword [0x040017b7] 	      1283	bfd.c	FUNCTION_13
0x40017b7	        0x488945f8	                mov qword [rbp - 8], rax	      1283	bfd.c	FUNCTION_13
0x40017bb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1284	bfd.c	FUNCTION_13
0x40017bf	    0x488905000000	            mov qword [0x040017c6], rax 	      1284	bfd.c	FUNCTION_13
0x40017c6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1285	bfd.c	FUNCTION_13
0x40017ca	              0x5d	                                 pop rbp	      1286	bfd.c	FUNCTION_13
0x40017cb	              0xc3	                                     ret	      1286	bfd.c	FUNCTION_13
bfd_get_gp_size	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,3:CALL,2:functions,0:ELSE,1	29
0x4001bdf	              0x55	                                push rbp	      1569	bfd.c	FUNCTION_22
0x4001be0	          0x4889e5	                            mov rbp, rsp	      1569	bfd.c	FUNCTION_22
0x4001be3	        0x48897df8	                mov qword [rbp - 8], rdi	      1569	bfd.c	FUNCTION_22
0x4001be7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1570	bfd.c	FUNCTION_22	IF_1
0x4001beb	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1570	bfd.c	FUNCTION_22	IF_1
0x4001bef	          0x83e007	                              and eax, 7	      1570	bfd.c	FUNCTION_22	IF_1
0x4001bf2	            0x3c01	                               cmp al, 1	      1570	bfd.c	FUNCTION_22	IF_1
0x4001bf4	            0x7543	                           jne 0x4001c39	      1570	bfd.c	FUNCTION_22	IF_1
0x4001bf6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001bfa	        0x488b4008	                mov rax, qword [rax + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001bfe	          0x8b4008	                mov eax, dword [rax + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001c01	          0x83f803	                              cmp eax, 3	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001c04	            0x7510	                           jne 0x4001c16	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001c06	        0x488b45f8	                mov rax, qword [rbp - 8]	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001c0a	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001c11	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001c14	            0xeb28	                           jmp 0x4001c3e	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001c16	        0x488b45f8	                mov rax, qword [rbp - 8]	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c1a	        0x488b4008	                mov rax, qword [rax + 8]	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c1e	          0x8b4008	                mov eax, dword [rax + 8]	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c21	          0x83f805	                              cmp eax, 5	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c24	            0x7513	                           jne 0x4001c39	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c26	        0x488b45f8	                mov rax, qword [rbp - 8]	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c2a	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c31	    0x8b80f8020000	           mov eax, dword [rax + 0x2f8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c37	            0xeb05	                           jmp 0x4001c3e	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001c39	      0xb800000000	                              mov eax, 0	      1577	bfd.c	FUNCTION_22
0x4001c3e	              0x5d	                                 pop rbp	      1578	bfd.c	FUNCTION_22
0x4001c3f	              0xc3	                                     ret	      1578	bfd.c	FUNCTION_22
bfd_perror	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,8:functions,0:ELSE,1	39
0x40001aa	              0x55	                                push rbp	       594	bfd.c	FUNCTION_5
0x40001ab	          0x4889e5	                            mov rbp, rsp	       594	bfd.c	FUNCTION_5
0x40001ae	        0x4883ec10	                           sub rsp, 0x10	       594	bfd.c	FUNCTION_5
0x40001b2	        0x48897df8	                mov qword [rbp - 8], rdi	       594	bfd.c	FUNCTION_5
0x40001b6	    0x488b05000000	            mov rax, qword [0x040001bd] 	       595	bfd.c	FUNCTION_5	CALL_1
0x40001bd	          0x4889c7	                            mov rdi, rax	       595	bfd.c	FUNCTION_5	CALL_1
0x40001c0	      0xe800000000	                          call 0x40001c5	       595	bfd.c	FUNCTION_5	CALL_1
0x40001c5	      0x48837df800	                  cmp qword [rbp - 8], 0	       596	bfd.c	FUNCTION_5	IF_1
0x40001ca	            0x740b	                            je 0x40001d7	       596	bfd.c	FUNCTION_5	IF_1
0x40001cc	        0x488b45f8	                mov rax, qword [rbp - 8]	       596	bfd.c	FUNCTION_5	IF_1
0x40001d0	           0xfb600	                   movzx eax, byte [rax]	       596	bfd.c	FUNCTION_5	IF_1
0x40001d3	            0x84c0	                             test al, al	       596	bfd.c	FUNCTION_5	IF_1
0x40001d5	            0x752a	                           jne 0x4000201	       596	bfd.c	FUNCTION_5	IF_1
0x40001d7	      0xe800000000	                          call 0x40001dc	       597	bfd.c	FUNCTION_5	CALL_4
0x40001dc	            0x89c7	                            mov edi, eax	       597	bfd.c	FUNCTION_5	CALL_4
0x40001de	      0xe800000000	                          call 0x40001e3	       597	bfd.c	FUNCTION_5	CALL_4
0x40001e3	          0x4889c2	                            mov rdx, rax	       597	bfd.c	FUNCTION_5	CALL_4
0x40001e6	    0x488b05000000	            mov rax, qword [0x040001ed] 	       597	bfd.c	FUNCTION_5	CALL_4
0x40001ed	      0xbe00000000	                              mov esi, 0	       597	bfd.c	FUNCTION_5	CALL_4
0x40001f2	          0x4889c7	                            mov rdi, rax	       597	bfd.c	FUNCTION_5	CALL_4
0x40001f5	      0xb800000000	                              mov eax, 0	       597	bfd.c	FUNCTION_5	CALL_4
0x40001fa	      0xe800000000	                          call 0x40001ff	       597	bfd.c	FUNCTION_5	CALL_4
0x40001ff	            0xeb2c	                           jmp 0x400022d	       597	bfd.c	FUNCTION_5	CALL_4
0x4000201	      0xe800000000	                          call 0x4000206	       599	bfd.c	FUNCTION_5	CALL_7
0x4000206	            0x89c7	                            mov edi, eax	       599	bfd.c	FUNCTION_5	CALL_7
0x4000208	      0xe800000000	                          call 0x400020d	       599	bfd.c	FUNCTION_5	CALL_7
0x400020d	          0x4889c1	                            mov rcx, rax	       599	bfd.c	FUNCTION_5	CALL_7
0x4000210	    0x488b05000000	            mov rax, qword [0x04000217] 	       599	bfd.c	FUNCTION_5	CALL_7
0x4000217	        0x488b55f8	                mov rdx, qword [rbp - 8]	       599	bfd.c	FUNCTION_5	CALL_7
0x400021b	      0xbe00000000	                              mov esi, 0	       599	bfd.c	FUNCTION_5	CALL_7
0x4000220	          0x4889c7	                            mov rdi, rax	       599	bfd.c	FUNCTION_5	CALL_7
0x4000223	      0xb800000000	                              mov eax, 0	       599	bfd.c	FUNCTION_5	CALL_7
0x4000228	      0xe800000000	                          call 0x400022d	       599	bfd.c	FUNCTION_5	CALL_7
0x400022d	    0x488b05000000	            mov rax, qword [0x04000234] 	       600	bfd.c	FUNCTION_5	CALL_8
0x4000234	          0x4889c7	                            mov rdi, rax	       600	bfd.c	FUNCTION_5	CALL_8
0x4000237	      0xe800000000	                          call 0x400023c	       600	bfd.c	FUNCTION_5	CALL_8
0x400023c	              0x90	                                     nop	       601	bfd.c	FUNCTION_5
0x400023d	              0xc9	                                   leave	       601	bfd.c	FUNCTION_5
0x400023e	              0xc3	                                     ret	       601	bfd.c	FUNCTION_5
_bfd_default_assert_handler	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,1:functions,0:ELSE,0	17
0x4001772	              0x55	                                push rbp	      1256	bfd.c	FUNCTION_12
0x4001773	          0x4889e5	                            mov rbp, rsp	      1256	bfd.c	FUNCTION_12
0x4001776	        0x4883ec20	                           sub rsp, 0x20	      1256	bfd.c	FUNCTION_12
0x400177a	        0x48897df8	                mov qword [rbp - 8], rdi	      1256	bfd.c	FUNCTION_12
0x400177e	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1256	bfd.c	FUNCTION_12
0x4001782	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1256	bfd.c	FUNCTION_12
0x4001786	          0x894de4	             mov dword [rbp - 0x1c], ecx	      1256	bfd.c	FUNCTION_12
0x4001789	          0x8b4de4	             mov ecx, dword [rbp - 0x1c]	      1257	bfd.c	FUNCTION_12	CALL_1
0x400178c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1257	bfd.c	FUNCTION_12	CALL_1
0x4001790	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1257	bfd.c	FUNCTION_12	CALL_1
0x4001794	        0x488b45f8	                mov rax, qword [rbp - 8]	      1257	bfd.c	FUNCTION_12	CALL_1
0x4001798	          0x4889c7	                            mov rdi, rax	      1257	bfd.c	FUNCTION_12	CALL_1
0x400179b	      0xb800000000	                              mov eax, 0	      1257	bfd.c	FUNCTION_12	CALL_1
0x40017a0	      0xe800000000	                          call 0x40017a5	      1257	bfd.c	FUNCTION_12	CALL_1
0x40017a5	              0x90	                                     nop	      1258	bfd.c	FUNCTION_12
0x40017a6	              0xc9	                                   leave	      1258	bfd.c	FUNCTION_12
0x40017a7	              0xc3	                                     ret	      1258	bfd.c	FUNCTION_12
bfd_set_start_address	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,0:functions,0:ELSE,0	10
0x4001bbd	              0x55	                                push rbp	      1549	bfd.c	FUNCTION_21
0x4001bbe	          0x4889e5	                            mov rbp, rsp	      1549	bfd.c	FUNCTION_21
0x4001bc1	        0x48897df8	                mov qword [rbp - 8], rdi	      1549	bfd.c	FUNCTION_21
0x4001bc5	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1549	bfd.c	FUNCTION_21
0x4001bc9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1550	bfd.c	FUNCTION_21
0x4001bcd	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1550	bfd.c	FUNCTION_21
0x4001bd1	    0x488990a80000	             mov qword [rax + 0xa8], rdx	      1550	bfd.c	FUNCTION_21
0x4001bd8	      0xb801000000	                              mov eax, 1	      1551	bfd.c	FUNCTION_21
0x4001bdd	              0x5d	                                 pop rbp	      1552	bfd.c	FUNCTION_21
0x4001bde	              0xc3	                                     ret	      1552	bfd.c	FUNCTION_21
_bfd_doprnt	SWITCH,3:DO,0:WHILE,5:FOR,0:IF,21:CALL,29:functions,0:ELSE,13	641
0x400023f	              0x55	                                push rbp	       657	bfd.c	FUNCTION_6
0x4000240	          0x4889e5	                            mov rbp, rsp	       657	bfd.c	FUNCTION_6
0x4000243	    0x4881ec600100	                          sub rsp, 0x160	       657	bfd.c	FUNCTION_6
0x400024a	    0x4889bdb8feff	            mov qword [rbp - 0x148], rdi	       657	bfd.c	FUNCTION_6
0x4000251	    0x4889b5b0feff	            mov qword [rbp - 0x150], rsi	       657	bfd.c	FUNCTION_6
0x4000258	    0x488995a8feff	            mov qword [rbp - 0x158], rdx	       657	bfd.c	FUNCTION_6
0x400025f	    0x64488b042528	                mov rax, qword fs:[0x28]	       657	bfd.c	FUNCTION_6
0x4000268	        0x488945f8	                mov qword [rbp - 8], rax	       657	bfd.c	FUNCTION_6
0x400026c	            0x31c0	                            xor eax, eax	       657	bfd.c	FUNCTION_6
0x400026e	    0x488b85b0feff	            mov rax, qword [rbp - 0x150]	       658	bfd.c	FUNCTION_6
0x4000275	    0x488985f8feff	            mov qword [rbp - 0x108], rax	       658	bfd.c	FUNCTION_6
0x400027c	    0xc785c8feffff	              mov dword [rbp - 0x138], 0	       660	bfd.c	FUNCTION_6
0x4000286	    0xc785ccfeffff	              mov dword [rbp - 0x134], 0	       661	bfd.c	FUNCTION_6
0x4000290	      0xe95c0b0000	                           jmp 0x4000df1	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000295	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x400029c	           0xfb600	                   movzx eax, byte [rax]	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x400029f	            0x3c25	                            cmp al, 0x25	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40002a1	     0xf84a2000000	                            je 0x4000349	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x40002a7	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40002ae	      0xbe25000000	                           mov esi, 0x25	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40002b3	          0x4889c7	                            mov rdi, rax	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40002b6	      0xe800000000	                          call 0x40002bb	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40002bb	    0x48898510ffff	             mov qword [rbp - 0xf0], rax	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x40002c2	    0x4883bd10ffff	               cmp qword [rbp - 0xf0], 0	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40002ca	            0x7443	                            je 0x400030f	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x40002cc	    0x488b9510ffff	             mov rdx, qword [rbp - 0xf0]	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002d3	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002da	          0x4829c2	                            sub rdx, rax	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002dd	          0x4889d0	                            mov rax, rdx	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002e0	            0x89c6	                            mov esi, eax	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002e2	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002e9	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002f0	          0x4889d1	                            mov rcx, rdx	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002f3	            0x89f2	                            mov edx, esi	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002f5	      0xbe00000000	                              mov esi, 0	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002fa	          0x4889c7	                            mov rdi, rax	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x40002fd	      0xb800000000	                              mov eax, 0	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x4000302	      0xe800000000	                          call 0x4000307	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x4000307	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x400030d	            0xeb26	                           jmp 0x4000335	       672	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_2
0x400030f	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x4000316	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x400031d	      0xbe00000000	                              mov esi, 0	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x4000322	          0x4889c7	                            mov rdi, rax	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x4000325	      0xb800000000	                              mov eax, 0	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x400032a	      0xe800000000	                          call 0x400032f	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x400032f	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       674	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_3
0x4000335	    0x8b85d0feffff	            mov eax, dword [rbp - 0x130]	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x400033b	            0x4898	                                    cdqe	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x400033d	    0x480185f8feff	           add qword [rbp - 0x108], rax 	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000344	      0xe98c0a0000	                           jmp 0x4000dd5	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000349	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000350	        0x4883c001	                              add rax, 1	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000354	           0xfb600	                   movzx eax, byte [rax]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000357	            0x3c25	                            cmp al, 0x25	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000359	            0x752b	                           jne 0x4000386	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x400035b	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_4
0x4000362	          0x4889c6	                            mov rsi, rax	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_4
0x4000365	      0xbf25000000	                           mov edi, 0x25	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_4
0x400036a	      0xe800000000	                          call 0x400036f	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_4
0x400036f	    0xc785d0feffff	              mov dword [rbp - 0x130], 1	       680	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000379	    0x488385f8feff	              add qword [rbp - 0x108], 2	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000381	      0xe94f0a0000	                           jmp 0x4000dd5	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000386	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       686	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x400038d	    0x48898500ffff	            mov qword [rbp - 0x100], rax	       686	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000394	    0xc785d4feffff	              mov dword [rbp - 0x12c], 0	       687	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x400039e	    0xc785d8feffff	              mov dword [rbp - 0x128], 0	       687	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003a8	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003af	        0x488d5001	                      lea rdx, [rax + 1]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003b3	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003ba	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003c1	        0x488d4a01	                      lea rcx, [rdx + 1]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003c5	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003cc	           0xfb612	                   movzx edx, byte [rdx]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003cf	            0x8810	                      mov byte [rax], dl	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003d1	    0xc785dcfeffff	    mov dword [rbp - 0x124], 0xffffffff 	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40003db	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003e2	           0xfb600	                   movzx eax, byte [rax]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003e5	            0x3c30	                            cmp al, 0x30	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003e7	            0x747f	                            je 0x4000468	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003e9	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003f0	           0xfb600	                   movzx eax, byte [rax]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003f3	           0xfbec0	                           movsx eax, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003f6	           0xfb6c0	                           movzx eax, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003f9	            0x4898	                                    cdqe	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x40003fb	     0xfb784000000	             movzx eax, word [rax + rax]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x4000403	           0xfb7c0	                           movzx eax, ax	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x4000406	          0x83e004	                              and eax, 4	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x4000409	            0x85c0	                           test eax, eax	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x400040b	            0x745b	                            je 0x4000468	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x400040d	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x4000414	        0x4883c001	                              add rax, 1	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x4000418	           0xfb600	                   movzx eax, byte [rax]	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x400041b	            0x3c24	                            cmp al, 0x24	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x400041d	            0x7549	                           jne 0x4000468	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_5
0x400041f	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000426	           0xfb600	                   movzx eax, byte [rax]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000429	           0xfbec0	                           movsx eax, al	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x400042c	          0x83e831	                           sub eax, 0x31	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x400042f	    0x8985dcfeffff	            mov dword [rbp - 0x124], eax	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x4000435	    0x488385f8feff	              add qword [rbp - 0x108], 2	       698	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x400043d	            0xeb29	                           jmp 0x4000468	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x400043f	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000446	        0x488d5001	                      lea rdx, [rax + 1]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x400044a	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000451	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000458	        0x488d4a01	                      lea rcx, [rdx + 1]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x400045c	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000463	           0xfb612	                   movzx edx, byte [rdx]	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000466	            0x8810	                      mov byte [rax], dl	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000468	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x400046f	           0xfb600	                   movzx eax, byte [rax]	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000472	           0xfbec0	                           movsx eax, al	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000475	            0x89c6	                            mov esi, eax	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000477	      0xbf00000000	                              mov edi, 0	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x400047c	      0xe800000000	                          call 0x4000481	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000481	          0x4885c0	                           test rax, rax	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000484	            0x75b9	                           jne 0x400043f	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_6
0x4000486	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x400048d	           0xfb600	                   movzx eax, byte [rax]	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000490	            0x3c2a	                            cmp al, 0x2a	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000492	     0xf85fc000000	                           jne 0x4000594	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000498	    0x488385f8feff	              add qword [rbp - 0x108], 1	       710	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x40004a0	    0x8b85ccfeffff	            mov eax, dword [rbp - 0x134]	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x40004a6	    0x8985e0feffff	            mov dword [rbp - 0x120], eax	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x40004ac	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004b3	           0xfb600	                   movzx eax, byte [rax]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004b6	            0x3c30	                            cmp al, 0x30	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004b8	            0x7454	                            je 0x400050e	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004ba	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004c1	           0xfb600	                   movzx eax, byte [rax]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004c4	           0xfbec0	                           movsx eax, al	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004c7	           0xfb6c0	                           movzx eax, al	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004ca	            0x4898	                                    cdqe	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004cc	     0xfb784000000	             movzx eax, word [rax + rax]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004d4	           0xfb7c0	                           movzx eax, ax	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004d7	          0x83e004	                              and eax, 4	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004da	            0x85c0	                           test eax, eax	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004dc	            0x7430	                            je 0x400050e	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004de	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004e5	        0x4883c001	                              add rax, 1	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004e9	           0xfb600	                   movzx eax, byte [rax]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004ec	            0x3c24	                            cmp al, 0x24	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004ee	            0x751e	                           jne 0x400050e	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_7
0x40004f0	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x40004f7	           0xfb600	                   movzx eax, byte [rax]	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x40004fa	           0xfbec0	                           movsx eax, al	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x40004fd	          0x83e831	                           sub eax, 0x31	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000500	    0x8985e0feffff	            mov dword [rbp - 0x120], eax	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4000506	    0x488385f8feff	              add qword [rbp - 0x108], 2	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x400050e	    0x8b85e0feffff	            mov eax, dword [rbp - 0x120]	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000514	        0x48c1e004	                              shl rax, 4	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000518	          0x4889c2	                            mov rdx, rax	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x400051b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000522	          0x4801d0	                            add rax, rdx	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000525	            0x8b10	                    mov edx, dword [rax]	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000527	            0x89d0	                            mov eax, edx	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000529	          0xc1f81f	                           sar eax, 0x1f	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x400052c	            0x31c2	                            xor edx, eax	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x400052e	    0x8995e8feffff	            mov dword [rbp - 0x118], edx	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x4000534	    0x2985e8feffff	            sub dword [rbp - 0x118], eax	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_8
0x400053a	    0x8385ccfeffff	              add dword [rbp - 0x134], 1	       718	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000541	    0x8b95e8feffff	            mov edx, dword [rbp - 0x118]	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000547	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x400054e	      0xbe00000000	                              mov esi, 0	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000553	          0x4889c7	                            mov rdi, rax	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000556	      0xb800000000	                              mov eax, 0	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x400055b	      0xe800000000	                          call 0x4000560	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000560	            0x4898	                                    cdqe	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000562	    0x48018500ffff	           add qword [rbp - 0x100], rax 	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x4000569	            0xeb4d	                           jmp 0x40005b8	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_9
0x400056b	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000572	        0x488d5001	                      lea rdx, [rax + 1]	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000576	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x400057d	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000584	        0x488d4a01	                      lea rcx, [rdx + 1]	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000588	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x400058f	           0xfb612	                   movzx edx, byte [rdx]	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000592	            0x8810	                      mov byte [rax], dl	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000594	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x400059b	           0xfb600	                   movzx eax, byte [rax]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x400059e	           0xfbec0	                           movsx eax, al	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005a1	           0xfb6c0	                           movzx eax, al	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005a4	            0x4898	                                    cdqe	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005a6	     0xfb784000000	             movzx eax, word [rax + rax]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005ae	           0xfb7c0	                           movzx eax, ax	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005b1	          0x83e004	                              and eax, 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005b4	            0x85c0	                           test eax, eax	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005b6	            0x75b3	                           jne 0x400056b	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_10
0x40005b8	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005bf	           0xfb600	                   movzx eax, byte [rax]	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005c2	            0x3c2e	                            cmp al, 0x2e	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005c4	     0xf85dc010000	                           jne 0x40007a6	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005ca	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005d1	        0x488d5001	                      lea rdx, [rax + 1]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005d5	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005dc	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005e3	        0x488d4a01	                      lea rcx, [rdx + 1]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005e7	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005ee	           0xfb612	                   movzx edx, byte [rdx]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005f1	            0x8810	                      mov byte [rax], dl	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x40005f3	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40005fa	           0xfb600	                   movzx eax, byte [rax]	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40005fd	            0x3c2a	                            cmp al, 0x2a	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40005ff	     0xf85ff000000	                           jne 0x4000704	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000605	    0x488385f8feff	              add qword [rbp - 0x108], 1	       736	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x400060d	    0x8b85ccfeffff	            mov eax, dword [rbp - 0x134]	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000613	    0x8985e4feffff	            mov dword [rbp - 0x11c], eax	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000619	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000620	           0xfb600	                   movzx eax, byte [rax]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000623	            0x3c30	                            cmp al, 0x30	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000625	            0x7454	                            je 0x400067b	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000627	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x400062e	           0xfb600	                   movzx eax, byte [rax]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000631	           0xfbec0	                           movsx eax, al	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000634	           0xfb6c0	                           movzx eax, al	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000637	            0x4898	                                    cdqe	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000639	     0xfb784000000	             movzx eax, word [rax + rax]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000641	           0xfb7c0	                           movzx eax, ax	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000644	          0x83e004	                              and eax, 4	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000647	            0x85c0	                           test eax, eax	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000649	            0x7430	                            je 0x400067b	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x400064b	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000652	        0x4883c001	                              add rax, 1	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000656	           0xfb600	                   movzx eax, byte [rax]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x4000659	            0x3c24	                            cmp al, 0x24	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x400065b	            0x751e	                           jne 0x400067b	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_11
0x400065d	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000664	           0xfb600	                   movzx eax, byte [rax]	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000667	           0xfbec0	                           movsx eax, al	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x400066a	          0x83e831	                           sub eax, 0x31	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x400066d	    0x8985e4feffff	            mov dword [rbp - 0x11c], eax	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4000673	    0x488385f8feff	              add qword [rbp - 0x108], 2	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x400067b	    0x8b85e4feffff	            mov eax, dword [rbp - 0x11c]	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000681	        0x48c1e004	                              shl rax, 4	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000685	          0x4889c2	                            mov rdx, rax	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000688	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x400068f	          0x4801d0	                            add rax, rdx	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000692	            0x8b10	                    mov edx, dword [rax]	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000694	            0x89d0	                            mov eax, edx	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000696	          0xc1f81f	                           sar eax, 0x1f	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x4000699	            0x31c2	                            xor edx, eax	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x400069b	    0x8995ecfeffff	            mov dword [rbp - 0x114], edx	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x40006a1	    0x2985ecfeffff	            sub dword [rbp - 0x114], eax	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_12
0x40006a7	    0x8385ccfeffff	              add dword [rbp - 0x134], 1	       744	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40006ae	    0x8b95ecfeffff	            mov edx, dword [rbp - 0x114]	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006b4	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006bb	      0xbe00000000	                              mov esi, 0	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006c0	          0x4889c7	                            mov rdi, rax	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006c3	      0xb800000000	                              mov eax, 0	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006c8	      0xe800000000	                          call 0x40006cd	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006cd	            0x4898	                                    cdqe	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006cf	    0x48018500ffff	           add qword [rbp - 0x100], rax 	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006d6	      0xe9cb000000	                           jmp 0x40007a6	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_13
0x40006db	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006e2	        0x488d5001	                      lea rdx, [rax + 1]	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006e6	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006ed	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006f4	        0x488d4a01	                      lea rcx, [rdx + 1]	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006f8	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x40006ff	           0xfb612	                   movzx edx, byte [rdx]	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000702	            0x8810	                      mov byte [rax], dl	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000704	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x400070b	           0xfb600	                   movzx eax, byte [rax]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x400070e	           0xfbec0	                           movsx eax, al	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000711	           0xfb6c0	                           movzx eax, al	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000714	            0x4898	                                    cdqe	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000716	     0xfb784000000	             movzx eax, word [rax + rax]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x400071e	           0xfb7c0	                           movzx eax, ax	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000721	          0x83e004	                              and eax, 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000724	            0x85c0	                           test eax, eax	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000726	            0x75b3	                           jne 0x40006db	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_14
0x4000728	            0xeb7c	                           jmp 0x40007a6	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x400072a	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000731	           0xfb600	                   movzx eax, byte [rax]	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000734	           0xfbec0	                           movsx eax, al	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000737	          0x83f868	                           cmp eax, 0x68	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x400073a	            0x740c	                            je 0x4000748	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x400073c	          0x83f86c	                           cmp eax, 0x6c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x400073f	            0x7413	                            je 0x4000754	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000741	          0x83f84c	                           cmp eax, 0x4c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000744	            0x7417	                            je 0x400075d	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000746	            0xeb21	                           jmp 0x4000769	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000748	    0xc785d8feffff	              mov dword [rbp - 0x128], 1	       757	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000752	            0xeb29	                           jmp 0x400077d	       758	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000754	    0x8385d4feffff	              add dword [rbp - 0x12c], 1	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x400075b	            0xeb20	                           jmp 0x400077d	       761	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x400075d	    0xc785d4feffff	              mov dword [rbp - 0x12c], 2	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000767	            0xeb14	                           jmp 0x400077d	       764	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000769	      0xba00000000	                              mov edx, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_16
0x400076e	      0xbefe020000	                          mov esi, 0x2fe	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_16
0x4000773	      0xbf00000000	                              mov edi, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_16
0x4000778	      0xe800000000	                          call 0x400077d	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_16
0x400077d	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000784	        0x488d5001	                      lea rdx, [rax + 1]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000788	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x400078f	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000796	        0x488d4a01	                      lea rcx, [rdx + 1]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x400079a	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x40007a1	           0xfb612	                   movzx edx, byte [rdx]	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x40007a4	            0x8810	                      mov byte [rax], dl	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x40007a6	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007ad	           0xfb600	                   movzx eax, byte [rax]	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007b0	           0xfbec0	                           movsx eax, al	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007b3	            0x89c6	                            mov esi, eax	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007b5	      0xbf00000000	                              mov edi, 0	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007ba	      0xe800000000	                          call 0x40007bf	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007bf	          0x4885c0	                           test rax, rax	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007c2	     0xf8562ffffff	                           jne 0x400072a	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_15
0x40007c8	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007cf	        0x488d5001	                      lea rdx, [rax + 1]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007d3	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007da	    0x488b95f8feff	            mov rdx, qword [rbp - 0x108]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007e1	        0x488d4a01	                      lea rcx, [rdx + 1]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007e5	    0x48898df8feff	            mov qword [rbp - 0x108], rcx	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007ec	           0xfb612	                   movzx edx, byte [rdx]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007ef	            0x8810	                      mov byte [rax], dl	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007f1	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       773	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007f8	          0xc60000	                       mov byte [rax], 0	       773	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40007fb	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       774	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000801	            0x85c0	                           test eax, eax	       774	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000803	            0x790c	                           jns 0x4000811	       774	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000805	    0x8b85ccfeffff	            mov eax, dword [rbp - 0x134]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x400080b	    0x8985dcfeffff	            mov dword [rbp - 0x124], eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4000811	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000818	        0x4883e801	                              sub rax, 1	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400081c	           0xfb600	                   movzx eax, byte [rax]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400081f	           0xfbec0	                           movsx eax, al	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000822	          0x83e845	                           sub eax, 0x45	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000825	          0x83f833	                           cmp eax, 0x33	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000828	     0xf878c050000	                            ja 0x4000dba	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400082e	            0x89c0	                            mov eax, eax	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000830	    0x488b04c50000	                  mov rax, qword [rax*8]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000838	            0xffe0	                                 jmp rax	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400083a	    0x83bdd8feffff	              cmp dword [rbp - 0x128], 0	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000841	            0x744e	                            je 0x4000891	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000843	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000849	        0x48c1e004	                              shl rax, 4	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400084d	          0x4889c2	                            mov rdx, rax	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000850	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000857	          0x4801d0	                            add rax, rdx	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400085a	            0x8b00	                    mov eax, dword [rax]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400085c	    0x8985f0feffff	            mov dword [rbp - 0x110], eax	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000862	    0x8b95f0feffff	            mov edx, dword [rbp - 0x110]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000868	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400086f	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000876	          0x4889ce	                            mov rsi, rcx	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000879	          0x4889c7	                            mov rdi, rax	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400087c	      0xb800000000	                              mov eax, 0	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000881	      0xe800000000	                          call 0x4000886	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4000886	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       791	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400088c	      0xe93d050000	                           jmp 0x4000dce	       821	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000891	    0x8b85d4feffff	            mov eax, dword [rbp - 0x12c]	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000897	            0x85c0	                           test eax, eax	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000899	            0x740a	                            je 0x40008a5	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400089b	          0x83f801	                              cmp eax, 1	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400089e	            0x7453	                            je 0x40008f3	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008a0	      0xe99c000000	                           jmp 0x4000941	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008a5	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008ab	        0x48c1e004	                              shl rax, 4	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008af	          0x4889c2	                            mov rdx, rax	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008b2	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008b9	          0x4801d0	                            add rax, rdx	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008bc	            0x8b00	                    mov eax, dword [rax]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008be	    0x8985f4feffff	            mov dword [rbp - 0x10c], eax	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008c4	    0x8b95f4feffff	            mov edx, dword [rbp - 0x10c]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008ca	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008d1	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008d8	          0x4889ce	                            mov rsi, rcx	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008db	          0x4889c7	                            mov rdi, rax	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008de	      0xb800000000	                              mov eax, 0	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008e3	      0xe800000000	                          call 0x40008e8	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008e8	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008ee	      0xe99b000000	                           jmp 0x400098e	       798	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008f3	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008f9	        0x48c1e004	                              shl rax, 4	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x40008fd	          0x4889c2	                            mov rdx, rax	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000900	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000907	          0x4801d0	                            add rax, rdx	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400090a	          0x488b00	                    mov rax, qword [rax]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400090d	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000914	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400091b	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000922	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000929	          0x4889ce	                            mov rsi, rcx	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400092c	          0x4889c7	                            mov rdi, rax	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400092f	      0xb800000000	                              mov eax, 0	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000934	      0xe800000000	                          call 0x4000939	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000939	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       800	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400093f	            0xeb4d	                           jmp 0x400098e	       801	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000941	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000947	        0x48c1e004	                              shl rax, 4	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400094b	          0x4889c2	                            mov rdx, rax	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400094e	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000955	          0x4801d0	                            add rax, rdx	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000958	          0x488b00	                    mov rax, qword [rax]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400095b	    0x48898520ffff	             mov qword [rbp - 0xe0], rax	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000962	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000969	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000970	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000977	          0x4889ce	                            mov rsi, rcx	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400097a	          0x4889c7	                            mov rdi, rax	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400097d	      0xb800000000	                              mov eax, 0	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000982	      0xe800000000	                          call 0x4000987	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4000987	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       812	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400098d	              0x90	                                     nop	       817	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400098e	      0xe93b040000	                           jmp 0x4000dce	       821	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000993	    0x83bdd4feffff	              cmp dword [rbp - 0x12c], 0	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x400099a	            0x7562	                           jne 0x40009fe	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x400099c	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009a2	        0x48c1e004	                              shl rax, 4	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009a6	          0x4889c2	                            mov rdx, rax	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009a9	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009b0	          0x4801d0	                            add rax, rdx	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009b3	        0xf20f1000	                 movsd xmm0, qword [rax]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009b7	    0xf20f118528ff	          movsd qword [rbp - 0xd8], xmm0	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009bf	    0x488b8d28ffff	             mov rcx, qword [rbp - 0xd8]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009c6	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009cd	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009d4	    0x48898da0feff	            mov qword [rbp - 0x160], rcx	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009db	    0xf20f1085a0fe	         movsd xmm0, qword [rbp - 0x160]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009e3	          0x4889d6	                            mov rsi, rdx	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009e6	          0x4889c7	                            mov rdi, rax	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009e9	      0xb801000000	                              mov eax, 1	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009ee	      0xe800000000	                          call 0x40009f3	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009f3	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x40009f9	      0xe9d0030000	                           jmp 0x4000dce	       840	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x40009fe	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a04	        0x48c1e004	                              shl rax, 4	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a08	          0x4889c2	                            mov rdx, rax	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a0b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a12	          0x4801d0	                            add rax, rdx	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a15	            0xdb28	                         fld xword [rax]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a17	    0xdbbd60ffffff	                 fstp xword [rbp - 0xa0]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a1d	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a24	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a2b	    0xffb568ffffff	                 push qword [rbp - 0x98]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a31	    0xffb560ffffff	                 push qword [rbp - 0xa0]	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a37	          0x4889d6	                            mov rsi, rdx	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a3a	          0x4889c7	                            mov rdi, rax	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a3d	      0xb800000000	                              mov eax, 0	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a42	      0xe800000000	                          call 0x4000a47	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a47	        0x4883c410	                           add rsp, 0x10	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a4b	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       833	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_7
0x4000a51	      0xe978030000	                           jmp 0x4000dce	       840	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a56	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a5c	        0x48c1e004	                              shl rax, 4	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a60	          0x4889c2	                            mov rdx, rax	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a63	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a6a	          0x4801d0	                            add rax, rdx	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a6d	          0x488b00	                    mov rax, qword [rax]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a70	    0x48898530ffff	             mov qword [rbp - 0xd0], rax	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a77	    0x488b9530ffff	             mov rdx, qword [rbp - 0xd0]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a7e	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a85	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a8c	          0x4889ce	                            mov rsi, rcx	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a8f	          0x4889c7	                            mov rdi, rax	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a92	      0xb800000000	                              mov eax, 0	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a97	      0xe800000000	                          call 0x4000a9c	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000a9c	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       842	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000aa2	      0xe927030000	                           jmp 0x4000dce	       843	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000aa7	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000aae	           0xfb600	                   movzx eax, byte [rax]	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ab1	            0x3c41	                            cmp al, 0x41	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ab3	     0xf85c4010000	                           jne 0x4000c7d	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ab9	    0x48c78508ffff	               mov qword [rbp - 0xf8], 0	       849	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ac4	    0x488385f8feff	              add qword [rbp - 0x108], 1	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000acc	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ad2	        0x48c1e004	                              shl rax, 4	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ad6	          0x4889c2	                            mov rdx, rax	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ad9	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ae0	          0x4801d0	                            add rax, rdx	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ae3	          0x488b00	                    mov rax, qword [rax]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000ae6	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000aed	    0x4883bd38ffff	               cmp qword [rbp - 0xc8], 0	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000af5	            0x7514	                           jne 0x4000b0b	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x4000af7	      0xba00000000	                              mov edx, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_17
0x4000afc	      0xbe59030000	                          mov esi, 0x359	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_17
0x4000b01	      0xbf00000000	                              mov edi, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_17
0x4000b06	      0xe800000000	                          call 0x4000b0b	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_17
0x4000b0b	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000b12	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000b19	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x4000b20	    0x4883bd40ffff	               cmp qword [rbp - 0xc0], 0	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b28	            0x7461	                            je 0x4000b8b	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b2a	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_18
0x4000b31	        0x488b4008	                mov rax, qword [rax + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_18
0x4000b35	          0x8b4008	                mov eax, dword [rax + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_18
0x4000b38	          0x83f805	                              cmp eax, 5	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_18
0x4000b3b	            0x754e	                           jne 0x4000b8b	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_18
0x4000b3d	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_19
0x4000b44	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_19
0x4000b4b	    0x488b80c00000	            mov rax, qword [rax + 0xc0] 	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_19
0x4000b52	          0x4885c0	                           test rax, rax	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_19
0x4000b55	            0x7434	                            je 0x4000b8b	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_19
0x4000b57	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b5e	          0x8b4020	            mov eax, dword [rax + 0x20] 	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b61	      0x2500000002	                      and eax, 0x2000000	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b66	            0x85c0	                           test eax, eax	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b68	            0x7521	                           jne 0x4000b8b	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4000b6a	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_20
0x4000b71	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_20
0x4000b78	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_20
0x4000b7f	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_20
0x4000b86	      0xe985000000	                           jmp 0x4000c10	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_20
0x4000b8b	    0x4883bd40ffff	               cmp qword [rbp - 0xc0], 0	       864	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000b93	            0x747b	                            je 0x4000c10	       864	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000b95	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_21
0x4000b9c	        0x488b4008	                mov rax, qword [rax + 8]	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_21
0x4000ba0	          0x8b4008	                mov eax, dword [rax + 8]	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_21
0x4000ba3	          0x83f802	                              cmp eax, 2	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_21
0x4000ba6	            0x7568	                           jne 0x4000c10	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_21
0x4000ba8	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000baf	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bb6	        0x488b4008	                mov rax, qword [rax + 8]	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bba	          0x8b4008	                mov eax, dword [rax + 8]	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bbd	          0x83f802	                              cmp eax, 2	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bc0	            0x7527	                           jne 0x4000be9	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bc2	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bc9	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bd0	          0x4885c0	                           test rax, rax	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bd3	            0x7414	                            je 0x4000be9	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bd5	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bdc	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000be3	        0x488b4040	            mov rax, qword [rax + 0x40] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000be7	            0xeb05	                           jmp 0x4000bee	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000be9	      0xb800000000	                              mov eax, 0	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bee	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bf5	    0x4883bd48ffff	               cmp qword [rbp - 0xb8], 0	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bfd	            0x7411	                            je 0x4000c10	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_22
0x4000bff	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000c06	          0x488b00	                    mov rax, qword [rax]	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000c09	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4000c10	    0x4883bd08ffff	               cmp qword [rbp - 0xf8], 0	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000c18	            0x7435	                            je 0x4000c4f	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4000c1a	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c21	          0x488b10	                    mov rdx, qword [rax]	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c24	    0x488b8d08ffff	             mov rcx, qword [rbp - 0xf8]	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c2b	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c32	      0xbe00000000	                              mov esi, 0	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c37	          0x4889c7	                            mov rdi, rax	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c3a	      0xb800000000	                              mov eax, 0	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c3f	      0xe800000000	                          call 0x4000c44	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c44	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       870	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_23
0x4000c4a	      0xe97f010000	                           jmp 0x4000dce	       894	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000c4f	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c56	          0x488b10	                    mov rdx, qword [rax]	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c59	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c60	      0xbe00000000	                              mov esi, 0	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c65	          0x4889c7	                            mov rdi, rax	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c68	      0xb800000000	                              mov eax, 0	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c6d	      0xe800000000	                          call 0x4000c72	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c72	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       872	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_24
0x4000c78	      0xe951010000	                           jmp 0x4000dce	       894	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000c7d	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c84	           0xfb600	                   movzx eax, byte [rax]	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c87	            0x3c42	                            cmp al, 0x42	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c89	     0xf85dd000000	                           jne 0x4000d6c	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c8f	    0x488385f8feff	              add qword [rbp - 0x108], 1	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c97	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000c9d	        0x48c1e004	                              shl rax, 4	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ca1	          0x4889c2	                            mov rdx, rax	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000ca4	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000cab	          0x4801d0	                            add rax, rdx	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000cae	          0x488b00	                    mov rax, qword [rax]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000cb1	    0x48898550ffff	             mov qword [rbp - 0xb0], rax	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x4000cb8	    0x4883bd50ffff	               cmp qword [rbp - 0xb0], 0	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000cc0	            0x7514	                           jne 0x4000cd6	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x4000cc2	      0xba00000000	                              mov edx, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_25
0x4000cc7	      0xbe73030000	                          mov esi, 0x373	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_25
0x4000ccc	      0xbf00000000	                              mov edi, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_25
0x4000cd1	      0xe800000000	                          call 0x4000cd6	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_25
0x4000cd6	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000cdd	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000ce4	          0x4885c0	                           test rax, rax	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000ce7	            0x7458	                            je 0x4000d41	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000ce9	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000cf0	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000cf7	         0xfb64048	           movzx eax, byte [rax + 0x48] 	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000cfb	          0x83e001	                              and eax, 1	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000cfe	            0x84c0	                             test al, al	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000d00	            0x753f	                           jne 0x4000d41	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_26
0x4000d02	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d09	          0x488b08	                    mov rcx, qword [rax]	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d0c	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       887	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000d13	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       887	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x4000d1a	          0x488b10	                    mov rdx, qword [rax]	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d1d	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d24	      0xbe00000000	                              mov esi, 0	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d29	          0x4889c7	                            mov rdi, rax	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d2c	      0xb800000000	                              mov eax, 0	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d31	      0xe800000000	                          call 0x4000d36	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d36	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       886	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_27
0x4000d3c	      0xe98d000000	                           jmp 0x4000dce	       894	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d41	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d48	          0x488b10	                    mov rdx, qword [rax]	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d4b	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d52	      0xbe00000000	                              mov esi, 0	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d57	          0x4889c7	                            mov rdi, rax	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d5a	      0xb800000000	                              mov eax, 0	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d5f	      0xe800000000	                          call 0x4000d64	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d64	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       890	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_28
0x4000d6a	            0xeb62	                           jmp 0x4000dce	       894	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000d6c	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d72	        0x48c1e004	                              shl rax, 4	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d76	          0x4889c2	                            mov rdx, rax	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d79	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d80	          0x4801d0	                            add rax, rdx	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d83	          0x488b00	                    mov rax, qword [rax]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d86	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d8d	    0x488b9558ffff	             mov rdx, qword [rbp - 0xa8]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d94	    0x488d8d70ffff	                   lea rcx, [rbp - 0x90]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000d9b	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000da2	          0x4889ce	                            mov rsi, rcx	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000da5	          0x4889c7	                            mov rdi, rax	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000da8	      0xb800000000	                              mov eax, 0	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000dad	      0xe800000000	                          call 0x4000db2	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000db2	    0x8985d0feffff	            mov dword [rbp - 0x130], eax	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x4000db8	            0xeb14	                           jmp 0x4000dce	       894	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4000dba	      0xba00000000	                              mov edx, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_29
0x4000dbf	      0xbe80030000	                          mov esi, 0x380	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_29
0x4000dc4	      0xbf00000000	                              mov edi, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_29
0x4000dc9	      0xe800000000	                          call 0x4000dce	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_29
0x4000dce	    0x8385ccfeffff	              add dword [rbp - 0x134], 1	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000dd5	    0x83bdd0feffff	cmp dword [rbp - 0x130], 0xffffffffffffffff	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000ddc	            0x7507	                           jne 0x4000de5	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000dde	      0xb8ffffffff	                     mov eax, 0xffffffff	       901	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000de3	            0xeb24	                           jmp 0x4000e09	       901	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000de5	    0x8b85d0feffff	            mov eax, dword [rbp - 0x130]	       902	bfd.c	FUNCTION_6	WHILE_1
0x4000deb	     0x185c8feffff	            add dword [rbp - 0x138], eax	       902	bfd.c	FUNCTION_6	WHILE_1
0x4000df1	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000df8	           0xfb600	                   movzx eax, byte [rax]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000dfb	            0x84c0	                             test al, al	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000dfd	     0xf8592f4ffff	                           jne 0x4000295	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000e03	    0x8b85c8feffff	            mov eax, dword [rbp - 0x138]	       905	bfd.c	FUNCTION_6
0x4000e09	        0x488b7df8	                mov rdi, qword [rbp - 8]	       906	bfd.c	FUNCTION_6
0x4000e0d	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       906	bfd.c	FUNCTION_6
0x4000e16	            0x7405	                            je 0x4000e1d	       906	bfd.c	FUNCTION_6
0x4000e18	      0xe800000000	                          call 0x4000e1d	       906	bfd.c	FUNCTION_6
0x4000e1d	              0xc9	                                   leave	       906	bfd.c	FUNCTION_6
0x4000e1e	              0xc3	                                     ret	       906	bfd.c	FUNCTION_6
bfd_emul_set_commonpagesize	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	22
0x400234e	              0x55	                                push rbp	      2192	bfd.c	ELSE_1	FUNCTION_37
0x400234f	          0x4889e5	                            mov rbp, rsp	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4002352	        0x4883ec20	                           sub rsp, 0x20	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4002356	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2192	bfd.c	ELSE_1	FUNCTION_37
0x400235a	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2192	bfd.c	ELSE_1	FUNCTION_37
0x400235e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4002362	      0xbe00000000	                              mov esi, 0	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4002367	          0x4889c7	                            mov rdi, rax	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x400236a	      0xe800000000	                          call 0x400236f	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x400236f	        0x488945f8	                mov qword [rbp - 8], rax	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4002373	      0x48837df800	                  cmp qword [rbp - 8], 0	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4002378	            0x741c	                            je 0x4002396	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x400237a	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x400237e	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x4002382	        0x488b45f8	                mov rax, qword [rbp - 8]	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x4002386	          0x4889d1	                            mov rcx, rdx	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x4002389	      0xba20000000	                           mov edx, 0x20	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x400238e	          0x4889c7	                            mov rdi, rax	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x4002391	      0xe87efeffff	           call sym.bfd_elf_set_pagesize	      2197	bfd.c	ELSE_1	FUNCTION_37	IF_1	CALL_2
0x4002396	              0x90	                                     nop	      2200	bfd.c	ELSE_1	FUNCTION_37
0x4002397	              0xc9	                                   leave	      2200	bfd.c	ELSE_1	FUNCTION_37
0x4002398	              0xc3	                                     ret	      2200	bfd.c	ELSE_1	FUNCTION_37
bfd_get_error	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,0:functions,0:ELSE,0	5
0x4000040	              0x55	                                push rbp	       485	bfd.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       485	bfd.c	FUNCTION_1
0x4000044	    0x8b0500000000	            mov eax, dword [0x0400004a] 	       486	bfd.c	FUNCTION_1
0x400004a	              0x5d	                                 pop rbp	       487	bfd.c	FUNCTION_1
0x400004b	              0xc3	                                     ret	       487	bfd.c	FUNCTION_1
bfd_assert	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,1:functions,0:ELSE,0	22
0x400192c	              0x55	                                push rbp	      1426	bfd.c	FUNCTION_17
0x400192d	          0x4889e5	                            mov rbp, rsp	      1426	bfd.c	FUNCTION_17
0x4001930	              0x53	                                push rbx	      1426	bfd.c	FUNCTION_17
0x4001931	        0x4883ec18	                           sub rsp, 0x18	      1426	bfd.c	FUNCTION_17
0x4001935	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1426	bfd.c	FUNCTION_17
0x4001939	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1426	bfd.c	FUNCTION_17
0x400193c	    0x488b1d000000	            mov rbx, qword [0x04001943] 	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001943	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001948	      0xbf00000000	                              mov edi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x400194d	      0xe800000000	                          call 0x4001952	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001952	          0x4889c7	                            mov rdi, rax	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001955	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001958	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1428	bfd.c	FUNCTION_17	CALL_1
0x400195c	            0x89d1	                            mov ecx, edx	      1428	bfd.c	FUNCTION_17	CALL_1
0x400195e	          0x4889c2	                            mov rdx, rax	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001961	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001966	            0xffd3	                                call rbx	      1428	bfd.c	FUNCTION_17	CALL_1
0x4001968	              0x90	                                     nop	      1430	bfd.c	FUNCTION_17
0x4001969	        0x4883c418	                           add rsp, 0x18	      1430	bfd.c	FUNCTION_17
0x400196d	              0x5b	                                 pop rbx	      1430	bfd.c	FUNCTION_17
0x400196e	              0x5d	                                 pop rbp	      1430	bfd.c	FUNCTION_17
0x400196f	              0xc3	                                     ret	      1430	bfd.c	FUNCTION_17
_bfd_get_gp_value	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,4:CALL,2:functions,0:ELSE,1	35
0x4001ca6	              0x55	                                push rbp	      1612	bfd.c	FUNCTION_24
0x4001ca7	          0x4889e5	                            mov rbp, rsp	      1612	bfd.c	FUNCTION_24
0x4001caa	        0x48897df8	                mov qword [rbp - 8], rdi	      1612	bfd.c	FUNCTION_24
0x4001cae	      0x48837df800	                  cmp qword [rbp - 8], 0	      1613	bfd.c	FUNCTION_24	IF_1
0x4001cb3	            0x7507	                           jne 0x4001cbc	      1613	bfd.c	FUNCTION_24	IF_1
0x4001cb5	      0xb800000000	                              mov eax, 0	      1614	bfd.c	FUNCTION_24	IF_1
0x4001cba	            0xeb60	                           jmp 0x4001d1c	      1614	bfd.c	FUNCTION_24	IF_1
0x4001cbc	        0x488b45f8	                mov rax, qword [rbp - 8]	      1615	bfd.c	FUNCTION_24	IF_2
0x4001cc0	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1615	bfd.c	FUNCTION_24	IF_2
0x4001cc4	          0x83e007	                              and eax, 7	      1615	bfd.c	FUNCTION_24	IF_2
0x4001cc7	            0x3c01	                               cmp al, 1	      1615	bfd.c	FUNCTION_24	IF_2
0x4001cc9	            0x7407	                            je 0x4001cd2	      1615	bfd.c	FUNCTION_24	IF_2
0x4001ccb	      0xb800000000	                              mov eax, 0	      1616	bfd.c	FUNCTION_24	IF_2
0x4001cd0	            0xeb4a	                           jmp 0x4001d1c	      1616	bfd.c	FUNCTION_24	IF_2
0x4001cd2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x4001cd6	        0x488b4008	                mov rax, qword [rax + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x4001cda	          0x8b4008	                mov eax, dword [rax + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x4001cdd	          0x83f803	                              cmp eax, 3	      1618	bfd.c	FUNCTION_24	IF_3
0x4001ce0	            0x7511	                           jne 0x4001cf3	      1618	bfd.c	FUNCTION_24	IF_3
0x4001ce2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001ce6	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001ced	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001cf1	            0xeb29	                           jmp 0x4001d1c	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001cf3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001cf7	        0x488b4008	                mov rax, qword [rax + 8]	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001cfb	          0x8b4008	                mov eax, dword [rax + 8]	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001cfe	          0x83f805	                              cmp eax, 5	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d01	            0x7514	                           jne 0x4001d17	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d03	        0x488b45f8	                mov rax, qword [rbp - 8]	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d07	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d0e	    0x488b80f00200	           mov rax, qword [rax + 0x2f0] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d15	            0xeb05	                           jmp 0x4001d1c	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x4001d17	      0xb800000000	                              mov eax, 0	      1623	bfd.c	FUNCTION_24
0x4001d1c	              0x5d	                                 pop rbp	      1624	bfd.c	FUNCTION_24
0x4001d1d	              0xc3	                                     ret	      1624	bfd.c	FUNCTION_24
bfd_set_error_program_name	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,0:functions,0:ELSE,0	8
0x400175c	              0x55	                                push rbp	      1219	bfd.c	FUNCTION_11
0x400175d	          0x4889e5	                            mov rbp, rsp	      1219	bfd.c	FUNCTION_11
0x4001760	        0x48897df8	                mov qword [rbp - 8], rdi	      1219	bfd.c	FUNCTION_11
0x4001764	        0x488b45f8	                mov rax, qword [rbp - 8]	      1220	bfd.c	FUNCTION_11
0x4001768	    0x488905000000	            mov qword [0x0400176f], rax 	      1220	bfd.c	FUNCTION_11
0x400176f	              0x90	                                     nop	      1221	bfd.c	FUNCTION_11
0x4001770	              0x5d	                                 pop rbp	      1221	bfd.c	FUNCTION_11
0x4001771	              0xc3	                                     ret	      1221	bfd.c	FUNCTION_11
bfd_emul_set_maxpagesize	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	22
0x400229c	              0x55	                                push rbp	      2132	bfd.c	FUNCTION_35
0x400229d	          0x4889e5	                            mov rbp, rsp	      2132	bfd.c	FUNCTION_35
0x40022a0	        0x4883ec20	                           sub rsp, 0x20	      2132	bfd.c	FUNCTION_35
0x40022a4	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2132	bfd.c	FUNCTION_35
0x40022a8	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2132	bfd.c	FUNCTION_35
0x40022ac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2135	bfd.c	FUNCTION_35	CALL_1
0x40022b0	      0xbe00000000	                              mov esi, 0	      2135	bfd.c	FUNCTION_35	CALL_1
0x40022b5	          0x4889c7	                            mov rdi, rax	      2135	bfd.c	FUNCTION_35	CALL_1
0x40022b8	      0xe800000000	                          call 0x40022bd	      2135	bfd.c	FUNCTION_35	CALL_1
0x40022bd	        0x488945f8	                mov qword [rbp - 8], rax	      2135	bfd.c	FUNCTION_35	CALL_1
0x40022c1	      0x48837df800	                  cmp qword [rbp - 8], 0	      2136	bfd.c	FUNCTION_35	IF_1
0x40022c6	            0x741c	                            je 0x40022e4	      2136	bfd.c	FUNCTION_35	IF_1
0x40022c8	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022cc	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022d0	        0x488b45f8	                mov rax, qword [rbp - 8]	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022d4	          0x4889d1	                            mov rcx, rdx	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022d7	      0xba10000000	                           mov edx, 0x10	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022dc	          0x4889c7	                            mov rdi, rax	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022df	      0xe830ffffff	           call sym.bfd_elf_set_pagesize	      2137	bfd.c	FUNCTION_35	IF_1	CALL_2
0x40022e4	              0x90	                                     nop	      2140	bfd.c	FUNCTION_35
0x40022e5	              0xc9	                                   leave	      2140	bfd.c	FUNCTION_35
0x40022e6	              0xc3	                                     ret	      2140	bfd.c	FUNCTION_35
bfd_set_file_flags	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,3:CALL,6:functions,0:ELSE,0	52
0x400187c	              0x55	                                push rbp	      1401	bfd.c	FUNCTION_16
0x400187d	          0x4889e5	                            mov rbp, rsp	      1401	bfd.c	FUNCTION_16
0x4001880	        0x4883ec10	                           sub rsp, 0x10	      1401	bfd.c	FUNCTION_16
0x4001884	        0x48897df8	                mov qword [rbp - 8], rdi	      1401	bfd.c	FUNCTION_16
0x4001888	          0x8975f4	              mov dword [rbp - 0xc], esi	      1401	bfd.c	FUNCTION_16
0x400188b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1402	bfd.c	FUNCTION_16	IF_1
0x400188f	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1402	bfd.c	FUNCTION_16	IF_1
0x4001893	          0x83e007	                              and eax, 7	      1402	bfd.c	FUNCTION_16	IF_1
0x4001896	            0x3c01	                               cmp al, 1	      1402	bfd.c	FUNCTION_16	IF_1
0x4001898	            0x7411	                            je 0x40018ab	      1402	bfd.c	FUNCTION_16	IF_1
0x400189a	      0xbf03000000	                              mov edi, 3	      1404	bfd.c	FUNCTION_16	IF_1	CALL_1
0x400189f	      0xe800000000	                          call 0x40018a4	      1404	bfd.c	FUNCTION_16	IF_1	CALL_1
0x40018a4	      0xb800000000	                              mov eax, 0	      1405	bfd.c	FUNCTION_16	IF_1
0x40018a9	            0xeb7f	                           jmp 0x400192a	      1405	bfd.c	FUNCTION_16	IF_1
0x40018ab	        0x488b45f8	                mov rax, qword [rbp - 8]	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018af	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018b3	          0x83e018	                           and eax, 0x18	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018b6	            0x3c08	                               cmp al, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018b8	            0x740f	                            je 0x40018c9	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018ba	        0x488b45f8	                mov rax, qword [rbp - 8]	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018be	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018c2	          0x83e018	                           and eax, 0x18	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018c5	            0x3c18	                            cmp al, 0x18	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018c7	            0x7511	                           jne 0x40018da	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x40018c9	      0xbf05000000	                              mov edi, 5	      1410	bfd.c	FUNCTION_16	IF_2	CALL_3
0x40018ce	      0xe800000000	                          call 0x40018d3	      1410	bfd.c	FUNCTION_16	IF_2	CALL_3
0x40018d3	      0xb800000000	                              mov eax, 0	      1411	bfd.c	FUNCTION_16	IF_2
0x40018d8	            0xeb50	                           jmp 0x400192a	      1411	bfd.c	FUNCTION_16	IF_2
0x40018da	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018dd	      0x25ffff0f00	                        and eax, 0xfffff	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018e2	            0x89c2	                            mov edx, eax	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018e4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018e8	    0x81e2ffff0f00	                        and edx, 0xfffff	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018ee	            0x89d1	                            mov ecx, edx	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018f0	          0xc1e105	                              shl ecx, 5	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018f3	          0x8b5044	            mov edx, dword [rax + 0x44] 	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018f6	    0x81e21f0000fe	                     and edx, 0xfe00001f	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018fc	             0x9ca	                             or edx, ecx	      1414	bfd.c	FUNCTION_16	CALL_4
0x40018fe	          0x895044	             mov dword [rax + 0x44], edx	      1414	bfd.c	FUNCTION_16	CALL_4
0x4001901	        0x488b45f8	                mov rax, qword [rbp - 8]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4001905	        0x488b4008	                mov rax, qword [rax + 8]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4001909	          0x8b4014	            mov eax, dword [rax + 0x14] 	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400190c	          0x2345f4	              and eax, dword [rbp - 0xc]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400190f	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4001912	            0x7411	                            je 0x4001925	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4001914	      0xbf05000000	                              mov edi, 5	      1417	bfd.c	FUNCTION_16	IF_3	CALL_6
0x4001919	      0xe800000000	                          call 0x400191e	      1417	bfd.c	FUNCTION_16	IF_3	CALL_6
0x400191e	      0xb800000000	                              mov eax, 0	      1418	bfd.c	FUNCTION_16	IF_3
0x4001923	            0xeb05	                           jmp 0x400192a	      1418	bfd.c	FUNCTION_16	IF_3
0x4001925	      0xb801000000	                              mov eax, 1	      1421	bfd.c	FUNCTION_16
0x400192a	              0xc9	                                   leave	      1422	bfd.c	FUNCTION_16
0x400192b	              0xc3	                                     ret	      1422	bfd.c	FUNCTION_16
_bfd_abort	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,7:functions,0:ELSE,1	41
0x4001970	              0x55	                                push rbp	      1437	bfd.c	FUNCTION_18
0x4001971	          0x4889e5	                            mov rbp, rsp	      1437	bfd.c	FUNCTION_18
0x4001974	        0x4883ec20	                           sub rsp, 0x20	      1437	bfd.c	FUNCTION_18
0x4001978	        0x48897df8	                mov qword [rbp - 8], rdi	      1437	bfd.c	FUNCTION_18
0x400197c	          0x8975f4	              mov dword [rbp - 0xc], esi	      1437	bfd.c	FUNCTION_18
0x400197f	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1437	bfd.c	FUNCTION_18
0x4001983	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1438	bfd.c	FUNCTION_18	IF_1
0x4001988	            0x7436	                            je 0x40019c0	      1438	bfd.c	FUNCTION_18	IF_1
0x400198a	      0xbe00000000	                              mov esi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x400198f	      0xbf00000000	                              mov edi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4001994	      0xe800000000	                          call 0x4001999	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x4001999	          0x4889c7	                            mov rdi, rax	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x400199c	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019a0	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019a3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019a7	          0x4989c8	                             mov r8, rcx	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019aa	            0x89d1	                            mov ecx, edx	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019ac	          0x4889c2	                            mov rdx, rax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019af	      0xbe00000000	                              mov esi, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019b4	      0xb800000000	                              mov eax, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019b9	      0xe800000000	                          call 0x40019be	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019be	            0xeb2d	                           jmp 0x40019ed	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40019c0	      0xbe00000000	                              mov esi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x40019c5	      0xbf00000000	                              mov edi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x40019ca	      0xe800000000	                          call 0x40019cf	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x40019cf	          0x4889c7	                            mov rdi, rax	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x40019d2	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019d5	        0x488b45f8	                mov rax, qword [rbp - 8]	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019d9	            0x89d1	                            mov ecx, edx	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019db	          0x4889c2	                            mov rdx, rax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019de	      0xbe00000000	                              mov esi, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019e3	      0xb800000000	                              mov eax, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019e8	      0xe800000000	                          call 0x40019ed	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x40019ed	      0xbe00000000	                              mov esi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x40019f2	      0xbf00000000	                              mov edi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x40019f7	      0xe800000000	                          call 0x40019fc	      1448	bfd.c	FUNCTION_18	CALL_6
0x40019fc	          0x4889c7	                            mov rdi, rax	      1448	bfd.c	FUNCTION_18	CALL_6
0x40019ff	      0xb800000000	                              mov eax, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x4001a04	      0xe800000000	                          call 0x4001a09	      1448	bfd.c	FUNCTION_18	CALL_6
0x4001a09	      0xbf01000000	                              mov edi, 1	      1449	bfd.c	FUNCTION_18	CALL_7
0x4001a0e	      0xe800000000	              call sym.bfd_get_arch_size	      1449	bfd.c	FUNCTION_18	CALL_7
bfd_set_error	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,1:functions,0:ELSE,0	16
0x400004c	              0x55	                                push rbp	       505	bfd.c	FUNCTION_2
0x400004d	          0x4889e5	                            mov rbp, rsp	       505	bfd.c	FUNCTION_2
0x4000050	        0x4883ec10	                           sub rsp, 0x10	       505	bfd.c	FUNCTION_2
0x4000054	          0x897dfc	                mov dword [rbp - 4], edi	       505	bfd.c	FUNCTION_2
0x4000057	          0x8b45fc	                mov eax, dword [rbp - 4]	       506	bfd.c	FUNCTION_2
0x400005a	    0x890500000000	            mov dword [0x04000060], eax 	       506	bfd.c	FUNCTION_2
0x4000060	    0x8b0500000000	            mov eax, dword [0x04000066] 	       507	bfd.c	FUNCTION_2	IF_1
0x4000066	          0x83f813	                           cmp eax, 0x13	       507	bfd.c	FUNCTION_2	IF_1
0x4000069	            0x7614	                           jbe 0x400007f	       507	bfd.c	FUNCTION_2	IF_1
0x400006b	      0xba00000000	                              mov edx, 0	       508	bfd.c	FUNCTION_2	CALL_1
0x4000070	      0xbefc010000	                          mov esi, 0x1fc	       508	bfd.c	FUNCTION_2	CALL_1
0x4000075	      0xbf00000000	                              mov edi, 0	       508	bfd.c	FUNCTION_2	CALL_1
0x400007a	      0xe800000000	                          call 0x400007f	       508	bfd.c	FUNCTION_2	CALL_1
0x400007f	              0x90	                                     nop	       509	bfd.c	FUNCTION_2
0x4000080	              0xc9	                                   leave	       509	bfd.c	FUNCTION_2
0x4000081	              0xc3	                                     ret	       509	bfd.c	FUNCTION_2
bfd_emul_get_commonpagesize	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,2:CALL,2:functions,0:ELSE,1	30
0x40022e7	              0x55	                                push rbp	      2159	bfd.c	FUNCTION_36
0x40022e8	          0x4889e5	                            mov rbp, rsp	      2159	bfd.c	FUNCTION_36
0x40022eb	        0x4883ec20	                           sub rsp, 0x20	      2159	bfd.c	FUNCTION_36
0x40022ef	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2159	bfd.c	FUNCTION_36
0x40022f3	          0x8975e4	             mov dword [rbp - 0x1c], esi	      2159	bfd.c	FUNCTION_36
0x40022f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2162	bfd.c	FUNCTION_36	CALL_1
0x40022fa	      0xbe00000000	                              mov esi, 0	      2162	bfd.c	FUNCTION_36	CALL_1
0x40022ff	          0x4889c7	                            mov rdi, rax	      2162	bfd.c	FUNCTION_36	CALL_1
0x4002302	      0xe800000000	                          call 0x4002307	      2162	bfd.c	FUNCTION_36	CALL_1
0x4002307	        0x488945f0	             mov qword [rbp - 0x10], rax	      2162	bfd.c	FUNCTION_36	CALL_1
0x400230b	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2163	bfd.c	FUNCTION_36	IF_1
0x4002310	            0x7435	                            je 0x4002347	      2163	bfd.c	FUNCTION_36	IF_1
0x4002312	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2164	bfd.c	FUNCTION_36	IF_1
0x4002316	          0x8b4008	                mov eax, dword [rax + 8]	      2164	bfd.c	FUNCTION_36	IF_1
0x4002319	          0x83f805	                              cmp eax, 5	      2164	bfd.c	FUNCTION_36	IF_1
0x400231c	            0x7529	                           jne 0x4002347	      2164	bfd.c	FUNCTION_36	IF_1
0x400231e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x4002322	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x4002329	        0x488945f8	                mov qword [rbp - 8], rax	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x400232d	        0x837de400	               cmp dword [rbp - 0x1c], 0	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x4002331	            0x740a	                            je 0x400233d	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x4002333	        0x488b45f8	                mov rax, qword [rbp - 8]	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x4002337	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x400233b	            0xeb0f	                           jmp 0x400234c	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x400233d	        0x488b45f8	                mov rax, qword [rbp - 8]	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x4002341	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x4002345	            0xeb05	                           jmp 0x400234c	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x4002347	      0xb800000000	                              mov eax, 0	      2174	bfd.c	FUNCTION_36	ELSE_1
0x400234c	              0xc9	                                   leave	      2175	bfd.c	FUNCTION_36	ELSE_1
0x400234d	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
bfd_get_arch_size	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	27
0x4001a13	              0x55	                                push rbp	      1472	bfd.c	FUNCTION_19
0x4001a14	          0x4889e5	                            mov rbp, rsp	      1472	bfd.c	FUNCTION_19
0x4001a17	        0x4883ec10	                           sub rsp, 0x10	      1472	bfd.c	FUNCTION_19
0x4001a1b	        0x48897df8	                mov qword [rbp - 8], rdi	      1472	bfd.c	FUNCTION_19
0x4001a1f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x4001a23	        0x488b4008	                mov rax, qword [rax + 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x4001a27	          0x8b4008	                mov eax, dword [rax + 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x4001a2a	          0x83f805	                              cmp eax, 5	      1473	bfd.c	FUNCTION_19	IF_1
0x4001a2d	            0x751f	                           jne 0x4001a4e	      1473	bfd.c	FUNCTION_19	IF_1
0x4001a2f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a33	        0x488b4008	                mov rax, qword [rax + 8]	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a37	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a3e	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a45	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a49	           0xfb6c0	                           movzx eax, al	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a4c	            0xeb1e	                           jmp 0x4001a6c	      1474	bfd.c	FUNCTION_19	CALL_1
0x4001a4e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a52	          0x4889c7	                            mov rdi, rax	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a55	      0xe800000000	                          call 0x4001a5a	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a5a	          0x83f820	                           cmp eax, 0x20	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a5d	            0x7607	                           jbe 0x4001a66	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a5f	      0xb840000000	                           mov eax, 0x40	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a64	            0xeb05	                           jmp 0x4001a6b	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a66	      0xb820000000	                           mov eax, 0x20	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a6b	              0x90	                                     nop	      1476	bfd.c	FUNCTION_19	CALL_2
0x4001a6c	              0xc9	                                   leave	      1477	bfd.c	FUNCTION_19
0x4001a6d	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
_bfd_set_gp_value	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,4:CALL,3:functions,0:ELSE,1	39
0x4001d1e	              0x55	                                push rbp	      1630	bfd.c	FUNCTION_25
0x4001d1f	          0x4889e5	                            mov rbp, rsp	      1630	bfd.c	FUNCTION_25
0x4001d22	        0x4883ec10	                           sub rsp, 0x10	      1630	bfd.c	FUNCTION_25
0x4001d26	        0x48897df8	                mov qword [rbp - 8], rdi	      1630	bfd.c	FUNCTION_25
0x4001d2a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1630	bfd.c	FUNCTION_25
0x4001d2e	      0x48837df800	                  cmp qword [rbp - 8], 0	      1631	bfd.c	FUNCTION_25	IF_1
0x4001d33	            0x7514	                           jne 0x4001d49	      1631	bfd.c	FUNCTION_25	IF_1
0x4001d35	      0xba00000000	                              mov edx, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001d3a	      0xbe60060000	                          mov esi, 0x660	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001d3f	      0xbf00000000	                              mov edi, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001d44	      0xe800000000	                          call 0x4001d49	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001d49	        0x488b45f8	                mov rax, qword [rbp - 8]	      1633	bfd.c	FUNCTION_25	IF_2
0x4001d4d	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1633	bfd.c	FUNCTION_25	IF_2
0x4001d51	          0x83e007	                              and eax, 7	      1633	bfd.c	FUNCTION_25	IF_2
0x4001d54	            0x3c01	                               cmp al, 1	      1633	bfd.c	FUNCTION_25	IF_2
0x4001d56	            0x754d	                           jne 0x4001da5	      1633	bfd.c	FUNCTION_25	IF_2
0x4001d58	        0x488b45f8	                mov rax, qword [rbp - 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x4001d5c	        0x488b4008	                mov rax, qword [rax + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x4001d60	          0x8b4008	                mov eax, dword [rax + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x4001d63	          0x83f803	                              cmp eax, 3	      1636	bfd.c	FUNCTION_25	IF_3
0x4001d66	            0x7515	                           jne 0x4001d7d	      1636	bfd.c	FUNCTION_25	IF_3
0x4001d68	        0x488b45f8	                mov rax, qword [rbp - 8]	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001d6c	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001d73	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001d77	        0x48895020	             mov qword [rax + 0x20], rdx	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001d7b	            0xeb29	                           jmp 0x4001da6	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001d7d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d81	        0x488b4008	                mov rax, qword [rax + 8]	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d85	          0x8b4008	                mov eax, dword [rax + 8]	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d88	          0x83f805	                              cmp eax, 5	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d8b	            0x7519	                           jne 0x4001da6	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d8d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d91	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d98	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001d9c	    0x488990f00200	            mov qword [rax + 0x2f0], rdx	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001da3	            0xeb01	                           jmp 0x4001da6	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001da5	              0x90	                                     nop	      1634	bfd.c	FUNCTION_25	IF_2
0x4001da6	              0xc9	                                   leave	      1640	bfd.c	FUNCTION_25
0x4001da7	              0xc3	                                     ret	      1640	bfd.c	FUNCTION_25
bfd_set_gp_size	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,3:CALL,2:functions,0:ELSE,1	32
0x4001c40	              0x55	                                push rbp	      1595	bfd.c	FUNCTION_23
0x4001c41	          0x4889e5	                            mov rbp, rsp	      1595	bfd.c	FUNCTION_23
0x4001c44	        0x48897df8	                mov qword [rbp - 8], rdi	      1595	bfd.c	FUNCTION_23
0x4001c48	          0x8975f4	              mov dword [rbp - 0xc], esi	      1595	bfd.c	FUNCTION_23
0x4001c4b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1597	bfd.c	FUNCTION_23	IF_1
0x4001c4f	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1597	bfd.c	FUNCTION_23	IF_1
0x4001c53	          0x83e007	                              and eax, 7	      1597	bfd.c	FUNCTION_23	IF_1
0x4001c56	            0x3c01	                               cmp al, 1	      1597	bfd.c	FUNCTION_23	IF_1
0x4001c58	            0x7549	                           jne 0x4001ca3	      1597	bfd.c	FUNCTION_23	IF_1
0x4001c5a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001c5e	        0x488b4008	                mov rax, qword [rax + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001c62	          0x8b4008	                mov eax, dword [rax + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001c65	          0x83f803	                              cmp eax, 3	      1600	bfd.c	FUNCTION_23	IF_2
0x4001c68	            0x7513	                           jne 0x4001c7d	      1600	bfd.c	FUNCTION_23	IF_2
0x4001c6a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001c6e	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001c75	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001c78	          0x895028	             mov dword [rax + 0x28], edx	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001c7b	            0xeb27	                           jmp 0x4001ca4	      1601	bfd.c	FUNCTION_23	CALL_1
0x4001c7d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c81	        0x488b4008	                mov rax, qword [rax + 8]	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c85	          0x8b4008	                mov eax, dword [rax + 8]	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c88	          0x83f805	                              cmp eax, 5	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c8b	            0x7517	                           jne 0x4001ca4	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c8d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c91	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c98	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001c9b	    0x8990f8020000	            mov dword [rax + 0x2f8], edx	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001ca1	            0xeb01	                           jmp 0x4001ca4	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001ca3	              0x90	                                     nop	      1598	bfd.c	FUNCTION_23	IF_1
0x4001ca4	              0x5d	                                 pop rbp	      1604	bfd.c	FUNCTION_23
0x4001ca5	              0xc3	                                     ret	      1604	bfd.c	FUNCTION_23
bfd_canonicalize_reloc	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	26
0x400181f	              0x55	                                push rbp	      1351	bfd.c	FUNCTION_15
0x4001820	          0x4889e5	                            mov rbp, rsp	      1351	bfd.c	FUNCTION_15
0x4001823	        0x4883ec20	                           sub rsp, 0x20	      1351	bfd.c	FUNCTION_15
0x4001827	        0x48897df8	                mov qword [rbp - 8], rdi	      1351	bfd.c	FUNCTION_15
0x400182b	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1351	bfd.c	FUNCTION_15
0x400182f	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1351	bfd.c	FUNCTION_15
0x4001833	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1351	bfd.c	FUNCTION_15
0x4001837	        0x488b45f8	                mov rax, qword [rbp - 8]	      1352	bfd.c	FUNCTION_15	IF_1
0x400183b	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      1352	bfd.c	FUNCTION_15	IF_1
0x400183f	          0x83e007	                              and eax, 7	      1352	bfd.c	FUNCTION_15	IF_1
0x4001842	            0x3c01	                               cmp al, 1	      1352	bfd.c	FUNCTION_15	IF_1
0x4001844	            0x7413	                            je 0x4001859	      1352	bfd.c	FUNCTION_15	IF_1
0x4001846	      0xbf05000000	                              mov edi, 5	      1354	bfd.c	FUNCTION_15	IF_1	CALL_1
0x400184b	      0xe800000000	                          call 0x4001850	      1354	bfd.c	FUNCTION_15	IF_1	CALL_1
0x4001850	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1355	bfd.c	FUNCTION_15	IF_1
0x4001857	            0xeb21	                           jmp 0x400187a	      1355	bfd.c	FUNCTION_15	IF_1
0x4001859	        0x488b45f8	                mov rax, qword [rbp - 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x400185d	        0x488b4008	                mov rax, qword [rax + 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4001861	    0x488b80700200	           mov rax, qword [rax + 0x270] 	      1358	bfd.c	FUNCTION_15	CALL_2
0x4001868	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1358	bfd.c	FUNCTION_15	CALL_2
0x400186c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4001870	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4001874	        0x488b7df8	                mov rdi, qword [rbp - 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x4001878	            0xffd0	                                call rax	      1358	bfd.c	FUNCTION_15	CALL_2
0x400187a	              0xc9	                                   leave	      1360	bfd.c	FUNCTION_15
0x400187b	              0xc3	                                     ret	      1360	bfd.c	FUNCTION_15
bfd_update_compression_header	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,4:CALL,14:functions,0:ELSE,3	144
0x400263b	              0x55	                                push rbp	      2313	bfd.c	FUNCTION_39
0x400263c	          0x4889e5	                            mov rbp, rsp	      2313	bfd.c	FUNCTION_39
0x400263f	        0x4883ec40	                           sub rsp, 0x40	      2313	bfd.c	FUNCTION_39
0x4002643	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      2313	bfd.c	FUNCTION_39
0x4002647	        0x488975d0	             mov qword [rbp - 0x30], rsi	      2313	bfd.c	FUNCTION_39
0x400264b	        0x488955c8	             mov qword [rbp - 0x38], rdx	      2313	bfd.c	FUNCTION_39
0x400264f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2314	bfd.c	FUNCTION_39	IF_1
0x4002653	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2314	bfd.c	FUNCTION_39	IF_1
0x4002656	          0xc1e805	                              shr eax, 5	      2314	bfd.c	FUNCTION_39	IF_1
0x4002659	      0x25ffff0f00	                        and eax, 0xfffff	      2314	bfd.c	FUNCTION_39	IF_1
0x400265e	      0x2500400000	                         and eax, 0x4000	      2314	bfd.c	FUNCTION_39	IF_1
0x4002663	            0x85c0	                           test eax, eax	      2314	bfd.c	FUNCTION_39	IF_1
0x4002665	     0xf84d8010000	                            je 0x4002843	      2314	bfd.c	FUNCTION_39	IF_1
0x400266b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x400266f	        0x488b4008	                mov rax, qword [rax + 8]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4002673	          0x8b4008	                mov eax, dword [rax + 8]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4002676	          0x83f805	                              cmp eax, 5	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4002679	     0xf85d8010000	                           jne 0x4002857	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x400267f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4002683	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4002686	          0xc1e805	                              shr eax, 5	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4002689	      0x25ffff0f00	                        and eax, 0xfffff	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x400268e	      0x2500000200	                        and eax, 0x20000	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4002693	            0x85c0	                           test eax, eax	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4002695	     0xf8454010000	                            je 0x40027ef	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x400269b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2321	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_2
0x400269f	        0x488b4008	                mov rax, qword [rax + 8]	      2321	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_2
0x40026a3	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2320	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x40026aa	        0x488945e8	             mov qword [rbp - 0x18], rax	      2320	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x40026ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026b2	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026b9	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026bd	    0x488b92e00000	            mov rdx, qword [rdx + 0xe0] 	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026c4	        0x488b5208	                mov rdx, qword [rdx + 8]	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026c8	          0x80ce08	                                or dh, 8	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026cb	        0x48895008	                mov qword [rax + 8], rdx	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x40026cf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026d3	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026da	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026de	            0x3c01	                               cmp al, 1	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026e0	            0x7579	                           jne 0x400275b	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026e2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2328	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026e6	        0x488945f0	             mov qword [rbp - 0x10], rax	      2328	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x40026ea	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40026ee	        0x488b4008	                mov rax, qword [rax + 8]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40026f2	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40026f6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40026fa	          0x4889d6	                            mov rsi, rdx	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x40026fd	      0xbf01000000	                              mov edi, 1	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4002702	            0xffd0	                                call rax	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4002704	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002708	        0x488b4008	                mov rax, qword [rax + 8]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x400270c	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002710	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002714	        0x488d4a04	                      lea rcx, [rdx + 4]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002718	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x400271c	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002720	          0x4889ce	                            mov rsi, rcx	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002723	          0x4889d7	                            mov rdi, rdx	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002726	            0xffd0	                                call rax	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4002728	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400272c	        0x488b4008	                mov rax, qword [rax + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002730	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002734	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002738	        0x488d7208	                      lea rsi, [rdx + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400273c	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002740	          0x8b5270	            mov edx, dword [rdx + 0x70] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002743	      0xbf01000000	                              mov edi, 1	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002748	            0x89d1	                            mov ecx, edx	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400274a	            0xd3e7	                             shl edi, cl	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400274c	            0x89fa	                            mov edx, edi	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x400274e	          0x4863d2	                         movsxd rdx, edx	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002751	          0x4889d7	                            mov rdi, rdx	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002754	            0xffd0	                                call rax	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4002756	      0xe9fc000000	                           jmp 0x4002857	      2361	bfd.c	FUNCTION_39
0x400275b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2337	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1
0x400275f	        0x488945f8	                mov qword [rbp - 8], rax	      2337	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1
0x4002763	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4002767	        0x488b4008	                mov rax, qword [rax + 8]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400276b	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400276f	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4002773	          0x4889d6	                            mov rsi, rdx	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4002776	      0xbf01000000	                              mov edi, 1	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400277b	            0xffd0	                                call rax	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x400277d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002781	        0x488b4008	                mov rax, qword [rax + 8]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002785	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002789	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x400278d	        0x4883c204	                              add rdx, 4	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002791	          0x4889d6	                            mov rsi, rdx	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002794	      0xbf00000000	                              mov edi, 0	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4002799	            0xffd0	                                call rax	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x400279b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x400279f	        0x488b4008	                mov rax, qword [rax + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027a3	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027a7	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027ab	        0x488d4a08	                      lea rcx, [rdx + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027af	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027b3	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027b7	          0x4889ce	                            mov rsi, rcx	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027ba	          0x4889d7	                            mov rdi, rdx	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027bd	            0xffd0	                                call rax	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x40027bf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027c3	        0x488b4008	                mov rax, qword [rax + 8]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027c7	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027cb	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027cf	        0x488d7210	                   lea rsi, [rdx + 0x10]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027d3	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027d7	          0x8b5270	            mov edx, dword [rdx + 0x70] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027da	      0xbf01000000	                              mov edi, 1	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027df	            0x89d1	                            mov ecx, edx	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027e1	            0xd3e7	                             shl edi, cl	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027e3	            0x89fa	                            mov edx, edi	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027e5	          0x4863d2	                         movsxd rdx, edx	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027e8	          0x4889d7	                            mov rdi, rdx	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027eb	            0xffd0	                                call rax	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x40027ed	            0xeb68	                           jmp 0x4002857	      2361	bfd.c	FUNCTION_39
0x40027ef	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40027f3	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40027fa	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x40027fe	    0x488b92e00000	            mov rdx, qword [rdx + 0xe0] 	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4002805	        0x488b5208	                mov rdx, qword [rdx + 8]	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4002809	          0x80e6f7	                            and dh, 0xf7	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x400280c	        0x48895008	                mov qword [rax + 8], rdx	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4002810	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2354	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_12
0x4002814	      0xba04000000	                              mov edx, 4	      2354	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_12
0x4002819	      0xbe00000000	                              mov esi, 0	      2354	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_12
0x400281e	          0x4889c7	                            mov rdi, rax	      2354	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_12
0x4002821	      0xe800000000	                          call 0x4002826	      2354	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_12
0x4002826	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x400282a	        0x488d5004	                      lea rdx, [rax + 4]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x400282e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4002832	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4002836	          0x4889d6	                            mov rsi, rdx	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4002839	          0x4889c7	                            mov rdi, rax	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x400283c	      0xe800000000	                          call 0x4002841	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4002841	            0xeb14	                           jmp 0x4002857	      2361	bfd.c	FUNCTION_39
0x4002843	      0xba00000000	                              mov edx, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4002848	      0xbe38090000	                          mov esi, 0x938	      2360	bfd.c	FUNCTION_39	CALL_14
0x400284d	      0xbf00000000	                              mov edi, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4002852	      0xe800000000	                          call 0x4002857	      2360	bfd.c	FUNCTION_39	CALL_14
0x4002857	              0x90	                                     nop	      2361	bfd.c	FUNCTION_39
0x4002858	              0xc9	                                   leave	      2361	bfd.c	FUNCTION_39
0x4002859	              0xc3	                                     ret	      2361	bfd.c	FUNCTION_39
error_handler_internal	SWITCH,1:DO,0:WHILE,0:FOR,2:IF,1:CALL,14:functions,0:ELSE,1	237
0x400123f	              0x55	                                push rbp	      1092	bfd.c	FUNCTION_8
0x4001240	          0x4889e5	                            mov rbp, rsp	      1092	bfd.c	FUNCTION_8
0x4001243	    0x4881ecc00000	                           sub rsp, 0xc0	      1092	bfd.c	FUNCTION_8
0x400124a	    0x4889bd48ffff	             mov qword [rbp - 0xb8], rdi	      1092	bfd.c	FUNCTION_8
0x4001251	    0x4889b540ffff	             mov qword [rbp - 0xc0], rsi	      1092	bfd.c	FUNCTION_8
0x4001258	    0x64488b042528	                mov rax, qword fs:[0x28]	      1092	bfd.c	FUNCTION_8
0x4001261	        0x488945f8	                mov qword [rbp - 8], rax	      1092	bfd.c	FUNCTION_8
0x4001265	            0x31c0	                            xor eax, eax	      1092	bfd.c	FUNCTION_8
0x4001267	    0xc78558ffffff	               mov dword [rbp - 0xa8], 0	      1096	bfd.c	FUNCTION_8	FOR_1
0x4001271	            0xeb20	                           jmp 0x4001293	      1096	bfd.c	FUNCTION_8	FOR_1
0x4001273	    0x8b8558ffffff	             mov eax, dword [rbp - 0xa8]	      1097	bfd.c	FUNCTION_8	FOR_1
0x4001279	        0x48c1e004	                              shl rax, 4	      1097	bfd.c	FUNCTION_8	FOR_1
0x400127d	          0x4801e8	                            add rax, rbp	      1097	bfd.c	FUNCTION_8	FOR_1
0x4001280	    0x482da0000000	                           sub rax, 0xa0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4001286	    0xc70000000000	                      mov dword [rax], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x400128c	    0x838558ffffff	               add dword [rbp - 0xa8], 1	      1096	bfd.c	FUNCTION_8	FOR_1
0x4001293	    0x83bd58ffffff	               cmp dword [rbp - 0xa8], 8	      1096	bfd.c	FUNCTION_8	FOR_1
0x400129a	            0x76d7	                           jbe 0x4001273	      1096	bfd.c	FUNCTION_8	FOR_1
0x400129c	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012a3	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012aa	          0x4889d6	                            mov rsi, rdx	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012ad	          0x4889c7	                            mov rdi, rax	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012b0	      0xe86afbffff	               call sym._bfd_doprnt_scan	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012b5	    0x89855cffffff	             mov dword [rbp - 0xa4], eax	      1099	bfd.c	FUNCTION_8	CALL_1
0x40012bb	    0xc78558ffffff	               mov dword [rbp - 0xa8], 0	      1100	bfd.c	FUNCTION_8	FOR_2
0x40012c5	      0xe9d8020000	                           jmp 0x40015a2	      1100	bfd.c	FUNCTION_8	FOR_2
0x40012ca	    0x8b8558ffffff	             mov eax, dword [rbp - 0xa8]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012d0	        0x48c1e004	                              shl rax, 4	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012d4	          0x4801e8	                            add rax, rbp	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012d7	    0x482da0000000	                           sub rax, 0xa0	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012dd	            0x8b00	                    mov eax, dword [rax]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012df	          0x83f806	                              cmp eax, 6	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012e2	     0xf879f020000	                            ja 0x4001587	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012e8	            0x89c0	                            mov eax, eax	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012ea	    0x488b04c50000	                  mov rax, qword [rax*8]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012f2	            0xffe0	                                 jmp rax	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40012f4	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x40012fb	            0x8b00	                    mov eax, dword [rax]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x40012fd	          0x83f830	                           cmp eax, 0x30	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001300	            0x7330	                           jae 0x4001332	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001302	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001309	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400130d	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001314	            0x8b00	                    mov eax, dword [rax]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001316	            0x89c0	                            mov eax, eax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001318	          0x4801d0	                            add rax, rdx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400131b	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001322	            0x8b12	                    mov edx, dword [rdx]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001324	          0x8d4a08	                      lea ecx, [rdx + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001327	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400132e	            0x890a	                    mov dword [rdx], ecx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001330	            0xeb1a	                           jmp 0x400134c	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001332	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001339	        0x488b4008	                mov rax, qword [rax + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400133d	        0x488d4808	                      lea rcx, [rax + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001341	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001348	        0x48894a08	                mov qword [rdx + 8], rcx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400134c	            0x8b00	                    mov eax, dword [rax]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400134e	    0x8b9558ffffff	             mov edx, dword [rbp - 0xa8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001354	        0x48c1e204	                              shl rdx, 4	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001358	          0x4801ea	                            add rdx, rbp	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x400135b	    0x4881eaa00000	                           sub rdx, 0xa0	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001362	            0x8902	                    mov dword [rdx], eax	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4001364	      0xe932020000	                           jmp 0x400159b	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4001369	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001370	            0x8b00	                    mov eax, dword [rax]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001372	          0x83f830	                           cmp eax, 0x30	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001375	            0x7330	                           jae 0x40013a7	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001377	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400137e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001382	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001389	            0x8b00	                    mov eax, dword [rax]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400138b	            0x89c0	                            mov eax, eax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400138d	          0x4801d0	                            add rax, rdx	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001390	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001397	            0x8b12	                    mov edx, dword [rdx]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x4001399	          0x8d4a08	                      lea ecx, [rdx + 8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x400139c	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013a3	            0x890a	                    mov dword [rdx], ecx	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013a5	            0xeb1a	                           jmp 0x40013c1	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013a7	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013ae	        0x488b4008	                mov rax, qword [rax + 8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013b2	        0x488d4808	                      lea rcx, [rax + 8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013b6	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013bd	        0x48894a08	                mov qword [rdx + 8], rcx	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013c1	          0x488b00	                    mov rax, qword [rax]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013c4	    0x8b9558ffffff	             mov edx, dword [rbp - 0xa8]	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013ca	        0x48c1e204	                              shl rdx, 4	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013ce	          0x4801ea	                            add rdx, rbp	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013d1	    0x4881eaa00000	                           sub rdx, 0xa0	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013d8	          0x488902	                    mov qword [rdx], rax	      1108	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_3
0x40013db	      0xe9bb010000	                           jmp 0x400159b	      1109	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40013e0	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013e7	            0x8b00	                    mov eax, dword [rax]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013e9	          0x83f830	                           cmp eax, 0x30	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013ec	            0x7330	                           jae 0x400141e	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013ee	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013f5	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x40013f9	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001400	            0x8b00	                    mov eax, dword [rax]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001402	            0x89c0	                            mov eax, eax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001404	          0x4801d0	                            add rax, rdx	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001407	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400140e	            0x8b12	                    mov edx, dword [rdx]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001410	          0x8d4a08	                      lea ecx, [rdx + 8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001413	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400141a	            0x890a	                    mov dword [rdx], ecx	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400141c	            0xeb1a	                           jmp 0x4001438	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400141e	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001425	        0x488b4008	                mov rax, qword [rax + 8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001429	        0x488d4808	                      lea rcx, [rax + 8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400142d	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001434	        0x48894a08	                mov qword [rdx + 8], rcx	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001438	          0x488b00	                    mov rax, qword [rax]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400143b	    0x8b9558ffffff	             mov edx, dword [rbp - 0xa8]	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001441	        0x48c1e204	                              shl rdx, 4	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001445	          0x4801ea	                            add rdx, rbp	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001448	    0x4881eaa00000	                           sub rdx, 0xa0	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x400144f	          0x488902	                    mov qword [rdx], rax	      1111	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_4
0x4001452	      0xe944010000	                           jmp 0x400159b	      1112	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4001457	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400145e	          0x8b4004	                mov eax, dword [rax + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001461	      0x3db0000000	                           cmp eax, 0xb0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001466	            0x7333	                           jae 0x400149b	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001468	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400146f	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001473	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400147a	          0x8b4004	                mov eax, dword [rax + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400147d	            0x89c0	                            mov eax, eax	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400147f	          0x4801d0	                            add rax, rdx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001482	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001489	          0x8b5204	                mov edx, dword [rdx + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400148c	          0x8d4a10	                   lea ecx, [rdx + 0x10]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400148f	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001496	          0x894a04	                mov dword [rdx + 4], ecx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4001499	            0xeb1a	                           jmp 0x40014b5	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x400149b	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014a2	        0x488b4008	                mov rax, qword [rax + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014a6	        0x488d4808	                      lea rcx, [rax + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014aa	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014b1	        0x48894a08	                mov qword [rdx + 8], rcx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014b5	        0xf20f1000	                 movsd xmm0, qword [rax]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014b9	    0x8b8558ffffff	             mov eax, dword [rbp - 0xa8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014bf	        0x48c1e004	                              shl rax, 4	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014c3	          0x4801e8	                            add rax, rbp	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014c6	    0x482da0000000	                           sub rax, 0xa0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014cc	        0xf20f1100	                 movsd qword [rax], xmm0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x40014d0	      0xe9c6000000	                           jmp 0x400159b	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x40014d5	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014dc	        0x488b4008	                mov rax, qword [rax + 8]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014e0	        0x4883c00f	                            add rax, 0xf	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014e4	        0x4883e0f0	             and rax, 0xfffffffffffffff0	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014e8	        0x488d4810	                   lea rcx, [rax + 0x10]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014ec	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014f3	        0x48894a08	                mov qword [rdx + 8], rcx	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014f7	            0xdb28	                         fld xword [rax]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014f9	    0x8b8558ffffff	             mov eax, dword [rbp - 0xa8]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x40014ff	        0x48c1e004	                              shl rax, 4	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4001503	          0x4801e8	                            add rax, rbp	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4001506	    0x482da0000000	                           sub rax, 0xa0	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x400150c	            0xdb38	                        fstp xword [rax]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x400150e	      0xe988000000	                           jmp 0x400159b	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4001513	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400151a	            0x8b00	                    mov eax, dword [rax]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400151c	          0x83f830	                           cmp eax, 0x30	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400151f	            0x7330	                           jae 0x4001551	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001521	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001528	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400152c	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001533	            0x8b00	                    mov eax, dword [rax]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001535	            0x89c0	                            mov eax, eax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001537	          0x4801d0	                            add rax, rdx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400153a	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001541	            0x8b12	                    mov edx, dword [rdx]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001543	          0x8d4a08	                      lea ecx, [rdx + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001546	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400154d	            0x890a	                    mov dword [rdx], ecx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400154f	            0xeb1a	                           jmp 0x400156b	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001551	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001558	        0x488b4008	                mov rax, qword [rax + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400155c	        0x488d4808	                      lea rcx, [rax + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001560	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001567	        0x48894a08	                mov qword [rdx + 8], rcx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400156b	          0x488b00	                    mov rax, qword [rax]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400156e	    0x8b9558ffffff	             mov edx, dword [rbp - 0xa8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001574	        0x48c1e204	                              shl rdx, 4	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001578	          0x4801ea	                            add rdx, rbp	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x400157b	    0x4881eaa00000	                           sub rdx, 0xa0	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001582	          0x488902	                    mov qword [rdx], rax	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4001585	            0xeb14	                           jmp 0x400159b	      1121	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4001587	      0xba00000000	                              mov edx, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x400158c	      0xbe63040000	                          mov esi, 0x463	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4001591	      0xbf00000000	                              mov edi, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4001596	      0xe800000000	                          call 0x400159b	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x400159b	    0x838558ffffff	               add dword [rbp - 0xa8], 1	      1100	bfd.c	FUNCTION_8	FOR_2
0x40015a2	    0x8b8558ffffff	             mov eax, dword [rbp - 0xa8]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40015a8	    0x3b855cffffff	             cmp eax, dword [rbp - 0xa4]	      1100	bfd.c	FUNCTION_8	FOR_2
0x40015ae	     0xf8216fdffff	                            jb 0x40012ca	      1100	bfd.c	FUNCTION_8	FOR_2
0x40015b4	    0x488b05000000	            mov rax, qword [0x040015bb] 	      1128	bfd.c	FUNCTION_8	CALL_9
0x40015bb	          0x4889c7	                            mov rdi, rax	      1128	bfd.c	FUNCTION_8	CALL_9
0x40015be	      0xe800000000	                          call 0x40015c3	      1128	bfd.c	FUNCTION_8	CALL_9
0x40015c3	    0x488b05000000	            mov rax, qword [0x040015ca] 	      1130	bfd.c	FUNCTION_8	IF_1
0x40015ca	          0x4885c0	                           test rax, rax	      1130	bfd.c	FUNCTION_8	IF_1
0x40015cd	            0x7422	                            je 0x40015f1	      1130	bfd.c	FUNCTION_8	IF_1
0x40015cf	    0x488b15000000	            mov rdx, qword [0x040015d6] 	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015d6	    0x488b05000000	            mov rax, qword [0x040015dd] 	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015dd	      0xbe00000000	                              mov esi, 0	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015e2	          0x4889c7	                            mov rdi, rax	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015e5	      0xb800000000	                              mov eax, 0	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015ea	      0xe800000000	                          call 0x40015ef	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015ef	            0xeb1e	                           jmp 0x400160f	      1131	bfd.c	FUNCTION_8	CALL_10
0x40015f1	    0x488b05000000	            mov rax, qword [0x040015f8] 	      1133	bfd.c	FUNCTION_8	CALL_11
0x40015f8	          0x4889c1	                            mov rcx, rax	      1133	bfd.c	FUNCTION_8	CALL_11
0x40015fb	      0xba05000000	                              mov edx, 5	      1133	bfd.c	FUNCTION_8	CALL_11
0x4001600	      0xbe01000000	                              mov esi, 1	      1133	bfd.c	FUNCTION_8	CALL_11
0x4001605	      0xbf00000000	                              mov edi, 0	      1133	bfd.c	FUNCTION_8	CALL_11
0x400160a	      0xe800000000	                          call 0x400160f	      1133	bfd.c	FUNCTION_8	CALL_11
0x400160f	    0x488b05000000	            mov rax, qword [0x04001616] 	      1135	bfd.c	FUNCTION_8	CALL_12
0x4001616	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	      1135	bfd.c	FUNCTION_8	CALL_12
0x400161d	    0x488b8d48ffff	             mov rcx, qword [rbp - 0xb8]	      1135	bfd.c	FUNCTION_8	CALL_12
0x4001624	          0x4889ce	                            mov rsi, rcx	      1135	bfd.c	FUNCTION_8	CALL_12
0x4001627	          0x4889c7	                            mov rdi, rax	      1135	bfd.c	FUNCTION_8	CALL_12
0x400162a	      0xe810ecffff	                    call sym._bfd_doprnt	      1135	bfd.c	FUNCTION_8	CALL_12
0x400162f	    0x488b05000000	            mov rax, qword [0x04001636] 	      1139	bfd.c	FUNCTION_8	CALL_13
0x4001636	          0x4889c6	                            mov rsi, rax	      1139	bfd.c	FUNCTION_8	CALL_13
0x4001639	      0xbf0a000000	                            mov edi, 0xa	      1139	bfd.c	FUNCTION_8	CALL_13
0x400163e	      0xe800000000	                          call 0x4001643	      1139	bfd.c	FUNCTION_8	CALL_13
0x4001643	    0x488b05000000	            mov rax, qword [0x0400164a] 	      1140	bfd.c	FUNCTION_8	CALL_14
0x400164a	          0x4889c7	                            mov rdi, rax	      1140	bfd.c	FUNCTION_8	CALL_14
0x400164d	      0xe800000000	                          call 0x4001652	      1140	bfd.c	FUNCTION_8	CALL_14
0x4001652	              0x90	                                     nop	      1141	bfd.c	FUNCTION_8
0x4001653	        0x488b45f8	                mov rax, qword [rbp - 8]	      1141	bfd.c	FUNCTION_8
0x4001657	    0x644833042528	                xor rax, qword fs:[0x28]	      1141	bfd.c	FUNCTION_8
0x4001660	            0x7405	                            je 0x4001667	      1141	bfd.c	FUNCTION_8
0x4001662	      0xe800000000	                          call 0x4001667	      1141	bfd.c	FUNCTION_8
0x4001667	              0xc9	                                   leave	      1141	bfd.c	FUNCTION_8
0x4001668	              0xc3	                                     ret	      1141	bfd.c	FUNCTION_8
bfd_set_input_error	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,1:functions,0:ELSE,0	20
0x4000082	              0x55	                                push rbp	       527	bfd.c	FUNCTION_3
0x4000083	          0x4889e5	                            mov rbp, rsp	       527	bfd.c	FUNCTION_3
0x4000086	        0x4883ec10	                           sub rsp, 0x10	       527	bfd.c	FUNCTION_3
0x400008a	        0x48897df8	                mov qword [rbp - 8], rdi	       527	bfd.c	FUNCTION_3
0x400008e	          0x8975f4	              mov dword [rbp - 0xc], esi	       527	bfd.c	FUNCTION_3
0x4000091	    0xc70500000000	           mov dword [0x0400009b], 0x14 	       530	bfd.c	FUNCTION_3
0x400009b	        0x488b45f8	                mov rax, qword [rbp - 8]	       531	bfd.c	FUNCTION_3
0x400009f	    0x488905000000	            mov qword [0x040000a6], rax 	       531	bfd.c	FUNCTION_3
0x40000a6	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       532	bfd.c	FUNCTION_3
0x40000a9	    0x890500000000	            mov dword [0x040000af], eax 	       532	bfd.c	FUNCTION_3
0x40000af	    0x8b0500000000	            mov eax, dword [0x040000b5] 	       533	bfd.c	FUNCTION_3	IF_1
0x40000b5	          0x83f813	                           cmp eax, 0x13	       533	bfd.c	FUNCTION_3	IF_1
0x40000b8	            0x7614	                           jbe 0x40000ce	       533	bfd.c	FUNCTION_3	IF_1
0x40000ba	      0xba00000000	                              mov edx, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40000bf	      0xbe16020000	                          mov esi, 0x216	       534	bfd.c	FUNCTION_3	CALL_1
0x40000c4	      0xbf00000000	                              mov edi, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40000c9	      0xe800000000	                          call 0x40000ce	       534	bfd.c	FUNCTION_3	CALL_1
0x40000ce	              0x90	                                     nop	       535	bfd.c	FUNCTION_3
0x40000cf	              0xc9	                                   leave	       535	bfd.c	FUNCTION_3
0x40000d0	              0xc3	                                     ret	       535	bfd.c	FUNCTION_3
bfd_emul_get_maxpagesize	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,2:functions,0:ELSE,0	22
0x40021c8	              0x55	                                push rbp	      2088	bfd.c	FUNCTION_33
0x40021c9	          0x4889e5	                            mov rbp, rsp	      2088	bfd.c	FUNCTION_33
0x40021cc	        0x4883ec20	                           sub rsp, 0x20	      2088	bfd.c	FUNCTION_33
0x40021d0	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2088	bfd.c	FUNCTION_33
0x40021d4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2091	bfd.c	FUNCTION_33	CALL_1
0x40021d8	      0xbe00000000	                              mov esi, 0	      2091	bfd.c	FUNCTION_33	CALL_1
0x40021dd	          0x4889c7	                            mov rdi, rax	      2091	bfd.c	FUNCTION_33	CALL_1
0x40021e0	      0xe800000000	                          call 0x40021e5	      2091	bfd.c	FUNCTION_33	CALL_1
0x40021e5	        0x488945f8	                mov qword [rbp - 8], rax	      2091	bfd.c	FUNCTION_33	CALL_1
0x40021e9	      0x48837df800	                  cmp qword [rbp - 8], 0	      2092	bfd.c	FUNCTION_33	IF_1
0x40021ee	            0x741d	                            je 0x400220d	      2092	bfd.c	FUNCTION_33	IF_1
0x40021f0	        0x488b45f8	                mov rax, qword [rbp - 8]	      2093	bfd.c	FUNCTION_33	IF_1
0x40021f4	          0x8b4008	                mov eax, dword [rax + 8]	      2093	bfd.c	FUNCTION_33	IF_1
0x40021f7	          0x83f805	                              cmp eax, 5	      2093	bfd.c	FUNCTION_33	IF_1
0x40021fa	            0x7511	                           jne 0x400220d	      2093	bfd.c	FUNCTION_33	IF_1
0x40021fc	        0x488b45f8	                mov rax, qword [rbp - 8]	      2094	bfd.c	FUNCTION_33	CALL_2
0x4002200	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x4002207	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x400220b	            0xeb05	                           jmp 0x4002212	      2094	bfd.c	FUNCTION_33	CALL_2
0x400220d	      0xb800000000	                              mov eax, 0	      2096	bfd.c	FUNCTION_33
0x4002212	              0xc9	                                   leave	      2097	bfd.c	FUNCTION_33
0x4002213	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
bfd_errmsg	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,4:CALL,5:functions,0:ELSE,0	58
0x40000d1	              0x55	                                push rbp	       551	bfd.c	FUNCTION_4
0x40000d2	          0x4889e5	                            mov rbp, rsp	       551	bfd.c	FUNCTION_4
0x40000d5	              0x53	                                push rbx	       551	bfd.c	FUNCTION_4
0x40000d6	        0x4883ec38	                           sub rsp, 0x38	       551	bfd.c	FUNCTION_4
0x40000da	          0x897dcc	             mov dword [rbp - 0x34], edi	       551	bfd.c	FUNCTION_4
0x40000dd	    0x64488b042528	                mov rax, qword fs:[0x28]	       551	bfd.c	FUNCTION_4
0x40000e6	        0x488945e8	             mov qword [rbp - 0x18], rax	       551	bfd.c	FUNCTION_4
0x40000ea	            0x31c0	                            xor eax, eax	       551	bfd.c	FUNCTION_4
0x40000ec	        0x837dcc14	           cmp dword [rbp - 0x34], 0x14 	       555	bfd.c	FUNCTION_4	IF_1
0x40000f0	            0x7562	                           jne 0x4000154	       555	bfd.c	FUNCTION_4	IF_1
0x40000f2	    0x8b0500000000	            mov eax, dword [0x040000f8] 	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000f8	            0x89c7	                            mov edi, eax	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000fa	      0xe800000000	                          call 0x40000ff	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40000ff	        0x488945e0	             mov qword [rbp - 0x20], rax	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x4000103	    0x488b05000000	            mov rax, qword [0x0400010a] 	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x400010a	          0x488b18	                    mov rbx, qword [rax]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x400010d	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000110	    0x488b04c50000	                  mov rax, qword [rax*8]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000118	          0x4889c6	                            mov rsi, rax	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x400011b	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000120	      0xe800000000	                          call 0x4000125	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000125	          0x4889c6	                            mov rsi, rax	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000128	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x400012c	        0x488d45d8	                   lea rax, [rbp - 0x28]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000130	          0x4889d1	                            mov rcx, rdx	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000133	          0x4889da	                            mov rdx, rbx	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000136	          0x4889c7	                            mov rdi, rax	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000139	      0xb800000000	                              mov eax, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x400013e	      0xe800000000	                          call 0x4000143	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000143	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000146	            0x7406	                            je 0x400014e	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_3
0x4000148	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400014c	            0xeb41	                           jmp 0x400018f	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400014e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       565	bfd.c	FUNCTION_4	IF_1
0x4000152	            0xeb3b	                           jmp 0x400018f	       565	bfd.c	FUNCTION_4	IF_1
0x4000154	        0x837dcc01	               cmp dword [rbp - 0x34], 1	       568	bfd.c	FUNCTION_4	IF_3
0x4000158	            0x7510	                           jne 0x400016a	       568	bfd.c	FUNCTION_4	IF_3
0x400015a	      0xe800000000	                          call 0x400015f	       569	bfd.c	FUNCTION_4	CALL_4
0x400015f	            0x8b00	                    mov eax, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_4
0x4000161	            0x89c7	                            mov edi, eax	       569	bfd.c	FUNCTION_4	CALL_4
0x4000163	      0xe800000000	                          call 0x4000168	       569	bfd.c	FUNCTION_4	CALL_4
0x4000168	            0xeb25	                           jmp 0x400018f	       569	bfd.c	FUNCTION_4	CALL_4
0x400016a	        0x837dcc15	           cmp dword [rbp - 0x34], 0x15 	       571	bfd.c	FUNCTION_4	IF_4
0x400016e	            0x7607	                           jbe 0x4000177	       571	bfd.c	FUNCTION_4	IF_4
0x4000170	    0xc745cc150000	           mov dword [rbp - 0x34], 0x15 	       572	bfd.c	FUNCTION_4	IF_4
0x4000177	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       574	bfd.c	FUNCTION_4	CALL_5
0x400017a	    0x488b04c50000	                  mov rax, qword [rax*8]	       574	bfd.c	FUNCTION_4	CALL_5
0x4000182	          0x4889c6	                            mov rsi, rax	       574	bfd.c	FUNCTION_4	CALL_5
0x4000185	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_5
0x400018a	      0xe800000000	                          call 0x400018f	       574	bfd.c	FUNCTION_4	CALL_5
0x400018f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       575	bfd.c	FUNCTION_4
0x4000193	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       575	bfd.c	FUNCTION_4
0x400019c	            0x7405	                            je 0x40001a3	       575	bfd.c	FUNCTION_4
0x400019e	      0xe800000000	                          call 0x40001a3	       575	bfd.c	FUNCTION_4
0x40001a3	        0x4883c438	                           add rsp, 0x38	       575	bfd.c	FUNCTION_4
0x40001a7	              0x5b	                                 pop rbx	       575	bfd.c	FUNCTION_4
0x40001a8	              0x5d	                                 pop rbp	       575	bfd.c	FUNCTION_4
0x40001a9	              0xc3	                                     ret	       575	bfd.c	FUNCTION_4
bfd_scan_vma	SWITCH,0:DO,0:WHILE,1:FOR,0:IF,13:CALL,6:functions,0:ELSE,3	14
0x4001da8	              0x55	                                push rbp	      1665	bfd.c	FUNCTION_26
0x4001da9	          0x4889e5	                            mov rbp, rsp	      1665	bfd.c	FUNCTION_26
0x4001dac	        0x4883ec20	                           sub rsp, 0x20	      1665	bfd.c	FUNCTION_26
0x4001db0	        0x48897df8	                mov qword [rbp - 8], rdi	      1665	bfd.c	FUNCTION_26
0x4001db4	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1665	bfd.c	FUNCTION_26
0x4001db8	          0x8955ec	             mov dword [rbp - 0x14], edx	      1665	bfd.c	FUNCTION_26
0x4001dbb	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dbe	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dc2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dc6	          0x4889ce	                            mov rsi, rcx	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dc9	          0x4889c7	                            mov rdi, rax	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dcc	      0xe800000000	                          call 0x4001dd1	      1673	bfd.c	FUNCTION_26	CALL_1
0x4001dd1	              0xc9	                                   leave	      1732	bfd.c	FUNCTION_26
0x4001dd2	              0xc3	                                     ret	      1732	bfd.c	FUNCTION_26
bfd_convert_section_contents	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,9:CALL,23:functions,0:ELSE,3	236
0x4002b30	              0x55	                                push rbp	      2519	bfd.c	FUNCTION_43
0x4002b31	          0x4889e5	                            mov rbp, rsp	      2519	bfd.c	FUNCTION_43
0x4002b34	    0x4881eca00000	                           sub rsp, 0xa0	      2519	bfd.c	FUNCTION_43
0x4002b3b	        0x48897d88	             mov qword [rbp - 0x78], rdi	      2519	bfd.c	FUNCTION_43
0x4002b3f	        0x48897580	             mov qword [rbp - 0x80], rsi	      2519	bfd.c	FUNCTION_43
0x4002b43	    0x48899578ffff	             mov qword [rbp - 0x88], rdx	      2519	bfd.c	FUNCTION_43
0x4002b4a	    0x48898d70ffff	             mov qword [rbp - 0x90], rcx	      2519	bfd.c	FUNCTION_43
0x4002b51	    0x4c898568ffff	              mov qword [rbp - 0x98], r8	      2519	bfd.c	FUNCTION_43
0x4002b58	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b5c	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b5f	          0xc1e805	                              shr eax, 5	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b62	      0x25ffff0f00	                        and eax, 0xfffff	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b67	      0x2500800000	                         and eax, 0x8000	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b6c	            0x85c0	                           test eax, eax	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b6e	            0x740a	                            je 0x4002b7a	      2526	bfd.c	FUNCTION_43	IF_1
0x4002b70	      0xb801000000	                              mov eax, 1	      2527	bfd.c	FUNCTION_43	IF_1
0x4002b75	      0xe964030000	                           jmp 0x4002ede	      2527	bfd.c	FUNCTION_43	IF_1
0x4002b7a	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4002b7e	        0x488b4008	                mov rax, qword [rax + 8]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4002b82	          0x8b4008	                mov eax, dword [rax + 8]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4002b85	          0x83f805	                              cmp eax, 5	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4002b88	            0x7513	                           jne 0x4002b9d	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4002b8a	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4002b91	        0x488b4008	                mov rax, qword [rax + 8]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4002b95	          0x8b4008	                mov eax, dword [rax + 8]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4002b98	          0x83f805	                              cmp eax, 5	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4002b9b	            0x740a	                            je 0x4002ba7	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4002b9d	      0xb801000000	                              mov eax, 1	      2532	bfd.c	FUNCTION_43	IF_2
0x4002ba2	      0xe937030000	                           jmp 0x4002ede	      2532	bfd.c	FUNCTION_43	IF_2
0x4002ba7	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002bab	        0x488b4008	                mov rax, qword [rax + 8]	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002baf	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002bb6	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002bbd	         0xfb6500c	            movzx edx, byte [rax + 0xc] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002bc1	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002bc8	        0x488b4008	                mov rax, qword [rax + 8]	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002bcc	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002bd3	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002bda	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002bde	            0x38c2	                              cmp dl, al	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002be0	            0x750a	                           jne 0x4002bec	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002be2	      0xb801000000	                              mov eax, 1	      2537	bfd.c	FUNCTION_43	IF_3
0x4002be7	      0xe9f2020000	                           jmp 0x4002ede	      2537	bfd.c	FUNCTION_43	IF_3
0x4002bec	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002bf0	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002bf4	          0x4889d6	                            mov rsi, rdx	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002bf7	          0x4889c7	                            mov rdi, rax	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002bfa	      0xe800000000	                          call 0x4002bff	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002bff	            0x4898	                                    cdqe	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002c01	        0x488945b0	             mov qword [rbp - 0x50], rax	      2540	bfd.c	FUNCTION_43	CALL_5
0x4002c05	      0x48837db000	               cmp qword [rbp - 0x50], 0	      2541	bfd.c	FUNCTION_43	IF_4
0x4002c0a	            0x750a	                           jne 0x4002c16	      2541	bfd.c	FUNCTION_43	IF_4
0x4002c0c	      0xb801000000	                              mov eax, 1	      2542	bfd.c	FUNCTION_43	IF_4
0x4002c11	      0xe9c8020000	                           jmp 0x4002ede	      2542	bfd.c	FUNCTION_43	IF_4
0x4002c16	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2544	bfd.c	FUNCTION_43
0x4002c1d	          0x488b00	                    mov rax, qword [rax]	      2544	bfd.c	FUNCTION_43
0x4002c20	        0x488945a0	             mov qword [rbp - 0x60], rax	      2544	bfd.c	FUNCTION_43
0x4002c24	      0x48837db00c	            cmp qword [rbp - 0x50], 0xc 	      2549	bfd.c	FUNCTION_43	IF_5
0x4002c29	            0x756b	                           jne 0x4002c96	      2549	bfd.c	FUNCTION_43	IF_5
0x4002c2b	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2551	bfd.c	FUNCTION_43	IF_5
0x4002c2f	        0x488945b8	             mov qword [rbp - 0x48], rax	      2551	bfd.c	FUNCTION_43	IF_5
0x4002c33	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c37	        0x488b4008	                mov rax, qword [rax + 8]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c3b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c3f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c43	          0x4889d7	                            mov rdi, rdx	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c46	            0xffd0	                                call rax	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c48	          0x8945e0	             mov dword [rbp - 0x20], eax	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002c4b	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c4f	        0x488b4008	                mov rax, qword [rax + 8]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c53	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c57	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c5b	        0x4883c204	                              add rdx, 4	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c5f	          0x4889d7	                            mov rdi, rdx	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c62	            0xffd0	                                call rax	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c64	        0x488945e8	             mov qword [rbp - 0x18], rax	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002c68	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c6c	        0x488b4008	                mov rax, qword [rax + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c70	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c74	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c78	        0x4883c208	                              add rdx, 8	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c7c	          0x4889d7	                            mov rdi, rdx	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c7f	            0xffd0	                                call rax	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c81	        0x488945f0	             mov qword [rbp - 0x10], rax	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002c85	    0x48c745a81800	           mov qword [rbp - 0x58], 0x18 	      2556	bfd.c	FUNCTION_43	IF_5
0x4002c8d	    0xc7459c000000	               mov dword [rbp - 0x64], 0	      2558	bfd.c	FUNCTION_43	IF_5
0x4002c94	            0xeb69	                           jmp 0x4002cff	      2558	bfd.c	FUNCTION_43	IF_5
0x4002c96	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2562	bfd.c	FUNCTION_43	ELSE_1
0x4002c9a	        0x488945c0	             mov qword [rbp - 0x40], rax	      2562	bfd.c	FUNCTION_43	ELSE_1
0x4002c9e	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002ca2	        0x488b4008	                mov rax, qword [rax + 8]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002ca6	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002caa	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002cae	          0x4889d7	                            mov rdi, rdx	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002cb1	            0xffd0	                                call rax	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002cb3	          0x8945e0	             mov dword [rbp - 0x20], eax	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002cb6	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cba	        0x488b4008	                mov rax, qword [rax + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cbe	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cc2	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cc6	        0x4883c208	                              add rdx, 8	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cca	          0x4889d7	                            mov rdi, rdx	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002ccd	            0xffd0	                                call rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002ccf	        0x488945e8	             mov qword [rbp - 0x18], rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002cd3	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cd7	        0x488b4008	                mov rax, qword [rax + 8]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cdb	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cdf	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002ce3	        0x4883c210	                           add rdx, 0x10	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002ce7	          0x4889d7	                            mov rdi, rdx	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cea	            0xffd0	                                call rax	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cec	        0x488945f0	             mov qword [rbp - 0x10], rax	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002cf0	    0x48c745a80c00	            mov qword [rbp - 0x58], 0xc 	      2567	bfd.c	FUNCTION_43	ELSE_1
0x4002cf8	    0xc7459c010000	               mov dword [rbp - 0x64], 1	      2568	bfd.c	FUNCTION_43	ELSE_1
0x4002cff	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d03	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d07	        0x482b45b0	             sub rax, qword [rbp - 0x50]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d0b	          0x4889c2	                            mov rdx, rax	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d0e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d12	          0x4801d0	                            add rax, rdx	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d15	        0x488945c8	             mov qword [rbp - 0x38], rax	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002d19	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      2572	bfd.c	FUNCTION_43	IF_6
0x4002d1d	            0x7521	                           jne 0x4002d40	      2572	bfd.c	FUNCTION_43	IF_6
0x4002d1f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002d23	          0x4889c7	                            mov rdi, rax	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002d26	      0xe800000000	                          call 0x4002d2b	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002d2b	        0x488945a0	             mov qword [rbp - 0x60], rax	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002d2f	      0x48837da000	               cmp qword [rbp - 0x60], 0	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4002d34	            0x750a	                           jne 0x4002d40	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4002d36	      0xb800000000	                              mov eax, 0	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x4002d3b	      0xe99e010000	                           jmp 0x4002ede	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x4002d40	      0x48837da80c	            cmp qword [rbp - 0x58], 0xc 	      2580	bfd.c	FUNCTION_43	IF_8
0x4002d45	            0x7570	                           jne 0x4002db7	      2580	bfd.c	FUNCTION_43	IF_8
0x4002d47	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2582	bfd.c	FUNCTION_43	IF_8
0x4002d4b	        0x488945d0	             mov qword [rbp - 0x30], rax	      2582	bfd.c	FUNCTION_43	IF_8
0x4002d4f	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d56	        0x488b4008	                mov rax, qword [rax + 8]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d5a	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d5e	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d62	          0x4889d6	                            mov rsi, rdx	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d65	      0xbf01000000	                              mov edi, 1	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d6a	            0xffd0	                                call rax	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002d6c	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d73	        0x488b4008	                mov rax, qword [rax + 8]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d77	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d7b	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d7f	        0x488d4a04	                      lea rcx, [rdx + 4]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d83	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d87	          0x4889ce	                            mov rsi, rcx	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d8a	          0x4889d7	                            mov rdi, rdx	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d8d	            0xffd0	                                call rax	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x4002d8f	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002d96	        0x488b4008	                mov rax, qword [rax + 8]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002d9a	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002d9e	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002da2	        0x488d4a08	                      lea rcx, [rdx + 8]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002da6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002daa	          0x4889ce	                            mov rsi, rcx	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002dad	          0x4889d7	                            mov rdi, rdx	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002db0	            0xffd0	                                call rax	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002db2	      0xe98c000000	                           jmp 0x4002e43	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x4002db7	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2589	bfd.c	FUNCTION_43	ELSE_2
0x4002dbb	        0x488945d8	             mov qword [rbp - 0x28], rax	      2589	bfd.c	FUNCTION_43	ELSE_2
0x4002dbf	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dc6	        0x488b4008	                mov rax, qword [rax + 8]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dca	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dce	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dd2	          0x4889d6	                            mov rsi, rdx	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dd5	      0xbf01000000	                              mov edi, 1	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002dda	            0xffd0	                                call rax	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002ddc	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002de3	        0x488b4008	                mov rax, qword [rax + 8]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002de7	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002deb	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002def	        0x4883c204	                              add rdx, 4	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002df3	          0x4889d6	                            mov rsi, rdx	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002df6	      0xbf00000000	                              mov edi, 0	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002dfb	            0xffd0	                                call rax	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002dfd	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e04	        0x488b4008	                mov rax, qword [rax + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e08	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e0c	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e10	        0x488d4a08	                      lea rcx, [rdx + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e14	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e18	          0x4889ce	                            mov rsi, rcx	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e1b	          0x4889d7	                            mov rdi, rdx	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e1e	            0xffd0	                                call rax	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002e20	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e27	        0x488b4008	                mov rax, qword [rax + 8]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e2b	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e2f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e33	        0x488d4a10	                   lea rcx, [rdx + 0x10]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e37	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e3b	          0x4889ce	                            mov rsi, rcx	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e3e	          0x4889d7	                            mov rdi, rdx	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e41	            0xffd0	                                call rax	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002e43	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      2597	bfd.c	FUNCTION_43	IF_9
0x4002e47	            0x7432	                            je 0x4002e7b	      2597	bfd.c	FUNCTION_43	IF_9
0x4002e49	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e4d	        0x482b45a8	             sub rax, qword [rbp - 0x58]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e51	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e58	          0x488b0a	                    mov rcx, qword [rdx]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e5b	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e5f	        0x488d3411	                    lea rsi, [rcx + rdx]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e63	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e67	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e6b	          0x4801d1	                            add rcx, rdx	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e6e	          0x4889c2	                            mov rdx, rax	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e71	          0x4889cf	                            mov rdi, rcx	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e74	      0xe800000000	                          call 0x4002e79	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e79	            0xeb50	                           jmp 0x4002ecb	      2598	bfd.c	FUNCTION_43	CALL_21
0x4002e7b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e7f	        0x482b45a8	             sub rax, qword [rbp - 0x58]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e83	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e8a	          0x488b0a	                    mov rcx, qword [rdx]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e8d	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e91	        0x488d3411	                    lea rsi, [rcx + rdx]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e95	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e99	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002e9d	          0x4801d1	                            add rcx, rdx	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002ea0	          0x4889c2	                            mov rdx, rax	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002ea3	          0x4889cf	                            mov rdi, rcx	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002ea6	      0xe800000000	                          call 0x4002eab	      2601	bfd.c	FUNCTION_43	ELSE_3	CALL_22
0x4002eab	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4002eb2	          0x488b00	                    mov rax, qword [rax]	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4002eb5	          0x4889c7	                            mov rdi, rax	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4002eb8	      0xe800000000	                          call 0x4002ebd	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4002ebd	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4002ec4	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4002ec8	          0x488910	                    mov qword [rax], rdx	      2603	bfd.c	FUNCTION_43	ELSE_3
0x4002ecb	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2606	bfd.c	FUNCTION_43
0x4002ed2	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2606	bfd.c	FUNCTION_43
0x4002ed6	          0x488910	                    mov qword [rax], rdx	      2606	bfd.c	FUNCTION_43
0x4002ed9	      0xb801000000	                              mov eax, 1	      2607	bfd.c	FUNCTION_43
0x4002ede	              0xc9	                                   leave	      2608	bfd.c	FUNCTION_43
0x4002edf	              0xc3	                                     ret	      2608	bfd.c	FUNCTION_43
bfd_get_relocated_section_contents	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,2:CALL,0:functions,0:ELSE,1	38
0x4001dd3	              0x55	                                push rbp	      1909	bfd.c	FUNCTION_27
0x4001dd4	          0x4889e5	                            mov rbp, rsp	      1909	bfd.c	FUNCTION_27
0x4001dd7	        0x4883ec40	                           sub rsp, 0x40	      1909	bfd.c	FUNCTION_27
0x4001ddb	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1909	bfd.c	FUNCTION_27
0x4001ddf	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1909	bfd.c	FUNCTION_27
0x4001de3	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1909	bfd.c	FUNCTION_27
0x4001de7	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1909	bfd.c	FUNCTION_27
0x4001deb	        0x448945cc	             mov dword [rbp - 0x34], r8d	      1909	bfd.c	FUNCTION_27
0x4001def	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      1909	bfd.c	FUNCTION_27
0x4001df3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1914	bfd.c	FUNCTION_27	IF_1
0x4001df7	          0x8b4008	                mov eax, dword [rax + 8]	      1914	bfd.c	FUNCTION_27	IF_1
0x4001dfa	          0x83f801	                              cmp eax, 1	      1914	bfd.c	FUNCTION_27	IF_1
0x4001dfd	            0x7524	                           jne 0x4001e23	      1914	bfd.c	FUNCTION_27	IF_1
0x4001dff	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1916	bfd.c	FUNCTION_27	IF_1
0x4001e03	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1916	bfd.c	FUNCTION_27	IF_1
0x4001e07	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      1916	bfd.c	FUNCTION_27	IF_1
0x4001e0e	        0x488945f0	             mov qword [rbp - 0x10], rax	      1916	bfd.c	FUNCTION_27	IF_1
0x4001e12	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1917	bfd.c	FUNCTION_27	IF_1	IF_2
0x4001e17	            0x7512	                           jne 0x4001e2b	      1917	bfd.c	FUNCTION_27	IF_1	IF_2
0x4001e19	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1918	bfd.c	FUNCTION_27	IF_1	IF_2
0x4001e1d	        0x488945f0	             mov qword [rbp - 0x10], rax	      1918	bfd.c	FUNCTION_27	IF_1	IF_2
0x4001e21	            0xeb08	                           jmp 0x4001e2b	      1918	bfd.c	FUNCTION_27	IF_1	IF_2
0x4001e23	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1921	bfd.c	FUNCTION_27	ELSE_1
0x4001e27	        0x488945f0	             mov qword [rbp - 0x10], rax	      1921	bfd.c	FUNCTION_27	ELSE_1
0x4001e2b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1923	bfd.c	FUNCTION_27
0x4001e2f	        0x488b4008	                mov rax, qword [rax + 8]	      1923	bfd.c	FUNCTION_27
0x4001e33	    0x488b80a80200	           mov rax, qword [rax + 0x2a8] 	      1923	bfd.c	FUNCTION_27
0x4001e3a	        0x488945f8	                mov qword [rbp - 8], rax	      1923	bfd.c	FUNCTION_27
0x4001e3e	        0x4c8b4dc0	              mov r9, qword [rbp - 0x40]	      1925	bfd.c	FUNCTION_27
0x4001e42	        0x448b45cc	             mov r8d, dword [rbp - 0x34]	      1925	bfd.c	FUNCTION_27
0x4001e46	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      1925	bfd.c	FUNCTION_27
0x4001e4a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1925	bfd.c	FUNCTION_27
0x4001e4e	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1925	bfd.c	FUNCTION_27
0x4001e52	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1925	bfd.c	FUNCTION_27
0x4001e56	        0x488b45f8	                mov rax, qword [rbp - 8]	      1925	bfd.c	FUNCTION_27
0x4001e5a	            0xffd0	                                call rax	      1925	bfd.c	FUNCTION_27
0x4001e5c	              0xc9	                                   leave	      1926	bfd.c	FUNCTION_27
0x4001e5d	              0xc3	                                     ret	      1926	bfd.c	FUNCTION_27
_bfd_doprnt_scan	SWITCH,3:DO,0:WHILE,5:FOR,0:IF,16:CALL,13:functions,0:ELSE,6	294
0x4000e1f	              0x55	                                push rbp	       912	bfd.c	FUNCTION_7
0x4000e20	          0x4889e5	                            mov rbp, rsp	       912	bfd.c	FUNCTION_7
0x4000e23	        0x4883ec40	                           sub rsp, 0x40	       912	bfd.c	FUNCTION_7
0x4000e27	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       912	bfd.c	FUNCTION_7
0x4000e2b	        0x488975c0	             mov qword [rbp - 0x40], rsi	       912	bfd.c	FUNCTION_7
0x4000e2f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       913	bfd.c	FUNCTION_7
0x4000e33	        0x488945f8	                mov qword [rbp - 8], rax	       913	bfd.c	FUNCTION_7
0x4000e37	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       914	bfd.c	FUNCTION_7
0x4000e3e	      0xe9e8030000	                           jmp 0x400122b	       916	bfd.c	FUNCTION_7	WHILE_1
0x4000e43	        0x488b45f8	                mov rax, qword [rbp - 8]	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000e47	           0xfb600	                   movzx eax, byte [rax]	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000e4a	            0x3c25	                            cmp al, 0x25	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000e4c	            0x7425	                            je 0x4000e73	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000e4e	        0x488b45f8	                mov rax, qword [rbp - 8]	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000e52	      0xbe25000000	                           mov esi, 0x25	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000e57	          0x4889c7	                            mov rdi, rax	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000e5a	      0xe800000000	                          call 0x4000e5f	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000e5f	        0x488945f8	                mov qword [rbp - 8], rax	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000e63	      0x48837df800	                  cmp qword [rbp - 8], 0	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000e68	     0xf85bd030000	                           jne 0x400122b	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000e6e	      0xe9c7030000	                           jmp 0x400123a	       922	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000e73	        0x488b45f8	                mov rax, qword [rbp - 8]	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e77	        0x4883c001	                              add rax, 1	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e7b	           0xfb600	                   movzx eax, byte [rax]	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e7e	            0x3c25	                            cmp al, 0x25	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e80	            0x750a	                           jne 0x4000e8c	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e82	      0x488345f802	                  add qword [rbp - 8], 2	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e87	      0xe99f030000	                           jmp 0x400122b	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000e8c	    0xc745e0000000	               mov dword [rbp - 0x20], 0	       928	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000e93	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       928	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000e9a	      0x488345f801	                  add qword [rbp - 8], 1	       932	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000e9f	    0xc745e8ffffff	     mov dword [rbp - 0x18], 0xffffffff 	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000ea6	        0x488b45f8	                mov rax, qword [rbp - 8]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eaa	           0xfb600	                   movzx eax, byte [rax]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ead	            0x3c30	                            cmp al, 0x30	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eaf	            0x744c	                            je 0x4000efd	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eb1	        0x488b45f8	                mov rax, qword [rbp - 8]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eb5	           0xfb600	                   movzx eax, byte [rax]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eb8	           0xfbec0	                           movsx eax, al	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ebb	           0xfb6c0	                           movzx eax, al	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ebe	            0x4898	                                    cdqe	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ec0	     0xfb784000000	             movzx eax, word [rax + rax]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ec8	           0xfb7c0	                           movzx eax, ax	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ecb	          0x83e004	                              and eax, 4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ece	            0x85c0	                           test eax, eax	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ed0	            0x742b	                            je 0x4000efd	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ed2	        0x488b45f8	                mov rax, qword [rbp - 8]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ed6	        0x4883c001	                              add rax, 1	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000eda	           0xfb600	                   movzx eax, byte [rax]	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000edd	            0x3c24	                            cmp al, 0x24	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000edf	            0x751c	                           jne 0x4000efd	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x4000ee1	        0x488b45f8	                mov rax, qword [rbp - 8]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000ee5	           0xfb600	                   movzx eax, byte [rax]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000ee8	           0xfbec0	                           movsx eax, al	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000eeb	          0x83e831	                           sub eax, 0x31	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000eee	          0x8945e8	             mov dword [rbp - 0x18], eax	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000ef1	      0x488345f802	                  add qword [rbp - 8], 2	       939	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x4000ef6	            0xeb05	                           jmp 0x4000efd	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000ef8	      0x488345f801	                  add qword [rbp - 8], 1	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x4000efd	        0x488b45f8	                mov rax, qword [rbp - 8]	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f01	           0xfb600	                   movzx eax, byte [rax]	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f04	           0xfbec0	                           movsx eax, al	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f07	            0x89c6	                            mov esi, eax	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f09	      0xbf00000000	                              mov edi, 0	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f0e	      0xe800000000	                          call 0x4000f13	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f13	          0x4885c0	                           test rax, rax	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f16	            0x75e0	                           jne 0x4000ef8	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x4000f18	        0x488b45f8	                mov rax, qword [rbp - 8]	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f1c	           0xfb600	                   movzx eax, byte [rax]	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f1f	            0x3c2a	                            cmp al, 0x2a	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f21	     0xf8597000000	                           jne 0x4000fbe	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f27	      0x488345f801	                  add qword [rbp - 8], 1	       950	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f2c	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       951	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f2f	          0x8945f0	             mov dword [rbp - 0x10], eax	       951	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f32	        0x488b45f8	                mov rax, qword [rbp - 8]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f36	           0xfb600	                   movzx eax, byte [rax]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f39	            0x3c30	                            cmp al, 0x30	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f3b	            0x7445	                            je 0x4000f82	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f3d	        0x488b45f8	                mov rax, qword [rbp - 8]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f41	           0xfb600	                   movzx eax, byte [rax]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f44	           0xfbec0	                           movsx eax, al	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f47	           0xfb6c0	                           movzx eax, al	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f4a	            0x4898	                                    cdqe	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f4c	     0xfb784000000	             movzx eax, word [rax + rax]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f54	           0xfb7c0	                           movzx eax, ax	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f57	          0x83e004	                              and eax, 4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f5a	            0x85c0	                           test eax, eax	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f5c	            0x7424	                            je 0x4000f82	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f5e	        0x488b45f8	                mov rax, qword [rbp - 8]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f62	        0x4883c001	                              add rax, 1	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f66	           0xfb600	                   movzx eax, byte [rax]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f69	            0x3c24	                            cmp al, 0x24	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f6b	            0x7515	                           jne 0x4000f82	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000f6d	        0x488b45f8	                mov rax, qword [rbp - 8]	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f71	           0xfb600	                   movzx eax, byte [rax]	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f74	           0xfbec0	                           movsx eax, al	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f77	          0x83e831	                           sub eax, 0x31	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f7a	          0x8945f0	             mov dword [rbp - 0x10], eax	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f7d	      0x488345f802	                  add qword [rbp - 8], 2	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000f82	        0x837df008	               cmp dword [rbp - 0x10], 8	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x4000f86	            0x7614	                           jbe 0x4000f9c	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x4000f88	      0xba00000000	                              mov edx, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000f8d	      0xbebe030000	                          mov esi, 0x3be	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000f92	      0xbf00000000	                              mov edi, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000f97	      0xe800000000	                          call 0x4000f9c	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4000f9c	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000f9f	        0x48c1e004	                              shl rax, 4	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fa3	          0x4889c2	                            mov rdx, rax	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fa6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000faa	          0x4801d0	                            add rax, rdx	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fad	    0xc70001000000	                      mov dword [rax], 1	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fb3	        0x8345dc01	               add dword [rbp - 0x24], 1	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fb7	            0xeb26	                           jmp 0x4000fdf	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000fb9	      0x488345f801	                  add qword [rbp - 8], 1	       965	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3
0x4000fbe	        0x488b45f8	                mov rax, qword [rbp - 8]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fc2	           0xfb600	                   movzx eax, byte [rax]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fc5	           0xfbec0	                           movsx eax, al	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fc8	           0xfb6c0	                           movzx eax, al	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fcb	            0x4898	                                    cdqe	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fcd	     0xfb784000000	             movzx eax, word [rax + rax]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fd5	           0xfb7c0	                           movzx eax, ax	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fd8	          0x83e004	                              and eax, 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fdb	            0x85c0	                           test eax, eax	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fdd	            0x75da	                           jne 0x4000fb9	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000fdf	        0x488b45f8	                mov rax, qword [rbp - 8]	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000fe3	           0xfb600	                   movzx eax, byte [rax]	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000fe6	            0x3c2e	                            cmp al, 0x2e	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000fe8	     0xf851a010000	                           jne 0x4001108	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000fee	      0x488345f801	                  add qword [rbp - 8], 1	       970	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000ff3	        0x488b45f8	                mov rax, qword [rbp - 8]	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000ff7	           0xfb600	                   movzx eax, byte [rax]	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000ffa	            0x3c2a	                            cmp al, 0x2a	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000ffc	     0xf8597000000	                           jne 0x4001099	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001002	      0x488345f801	                  add qword [rbp - 8], 1	       975	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001007	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       976	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400100a	          0x8945f4	              mov dword [rbp - 0xc], eax	       976	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400100d	        0x488b45f8	                mov rax, qword [rbp - 8]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001011	           0xfb600	                   movzx eax, byte [rax]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001014	            0x3c30	                            cmp al, 0x30	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001016	            0x7445	                            je 0x400105d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001018	        0x488b45f8	                mov rax, qword [rbp - 8]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400101c	           0xfb600	                   movzx eax, byte [rax]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400101f	           0xfbec0	                           movsx eax, al	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001022	           0xfb6c0	                           movzx eax, al	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001025	            0x4898	                                    cdqe	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001027	     0xfb784000000	             movzx eax, word [rax + rax]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400102f	           0xfb7c0	                           movzx eax, ax	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001032	          0x83e004	                              and eax, 4	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001035	            0x85c0	                           test eax, eax	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001037	            0x7424	                            je 0x400105d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001039	        0x488b45f8	                mov rax, qword [rbp - 8]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x400103d	        0x4883c001	                              add rax, 1	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001041	           0xfb600	                   movzx eax, byte [rax]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001044	            0x3c24	                            cmp al, 0x24	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001046	            0x7515	                           jne 0x400105d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4001048	        0x488b45f8	                mov rax, qword [rbp - 8]	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x400104c	           0xfb600	                   movzx eax, byte [rax]	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x400104f	           0xfbec0	                           movsx eax, al	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4001052	          0x83e831	                           sub eax, 0x31	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4001055	          0x8945f4	              mov dword [rbp - 0xc], eax	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4001058	      0x488345f802	                  add qword [rbp - 8], 2	       980	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x400105d	        0x837df408	                cmp dword [rbp - 0xc], 8	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4001061	            0x7614	                           jbe 0x4001077	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4001063	      0xba00000000	                              mov edx, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001068	      0xbed7030000	                          mov esi, 0x3d7	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400106d	      0xbf00000000	                              mov edi, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001072	      0xe800000000	                          call 0x4001077	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001077	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400107a	        0x48c1e004	                              shl rax, 4	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400107e	          0x4889c2	                            mov rdx, rax	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001081	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001085	          0x4801d0	                            add rax, rdx	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001088	    0xc70001000000	                      mov dword [rax], 1	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x400108e	        0x8345dc01	               add dword [rbp - 0x24], 1	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001092	            0xeb74	                           jmp 0x4001108	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4001094	      0x488345f801	                  add qword [rbp - 8], 1	       990	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4
0x4001099	        0x488b45f8	                mov rax, qword [rbp - 8]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x400109d	           0xfb600	                   movzx eax, byte [rax]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010a0	           0xfbec0	                           movsx eax, al	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010a3	           0xfb6c0	                           movzx eax, al	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010a6	            0x4898	                                    cdqe	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010a8	     0xfb784000000	             movzx eax, word [rax + rax]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010b0	           0xfb7c0	                           movzx eax, ax	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010b3	          0x83e004	                              and eax, 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010b6	            0x85c0	                           test eax, eax	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010b8	            0x75da	                           jne 0x4001094	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x40010ba	            0xeb4c	                           jmp 0x4001108	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x40010bc	        0x488b45f8	                mov rax, qword [rbp - 8]	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010c0	           0xfb600	                   movzx eax, byte [rax]	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010c3	           0xfbec0	                           movsx eax, al	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010c6	          0x83f868	                           cmp eax, 0x68	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010c9	            0x740c	                            je 0x40010d7	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010cb	          0x83f86c	                           cmp eax, 0x6c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010ce	            0x7410	                            je 0x40010e0	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010d0	          0x83f84c	                           cmp eax, 0x4c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010d3	            0x7411	                            je 0x40010e6	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010d5	            0xeb18	                           jmp 0x40010ef	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010d7	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	       997	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010de	            0xeb23	                           jmp 0x4001103	       998	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010e0	        0x8345e001	               add dword [rbp - 0x20], 1	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010e4	            0xeb1d	                           jmp 0x4001103	      1001	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010e6	    0xc745e0020000	               mov dword [rbp - 0x20], 2	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010ed	            0xeb14	                           jmp 0x4001103	      1004	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x40010ef	      0xba00000000	                              mov edx, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40010f4	      0xbeee030000	                          mov esi, 0x3ee	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40010f9	      0xbf00000000	                              mov edi, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x40010fe	      0xe800000000	                          call 0x4001103	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4001103	      0x488345f801	                  add qword [rbp - 8], 1	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x4001108	        0x488b45f8	                mov rax, qword [rbp - 8]	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400110c	           0xfb600	                   movzx eax, byte [rax]	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400110f	           0xfbec0	                           movsx eax, al	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4001112	            0x89c6	                            mov esi, eax	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4001114	      0xbf00000000	                              mov edi, 0	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4001119	      0xe800000000	                          call 0x400111e	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x400111e	          0x4885c0	                           test rax, rax	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4001121	            0x7599	                           jne 0x40010bc	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4001123	      0x488345f801	                  add qword [rbp - 8], 1	      1011	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001128	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1012	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x400112b	            0x85c0	                           test eax, eax	      1012	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x400112d	            0x7906	                           jns 0x4001135	      1012	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x400112f	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4001132	          0x8945e8	             mov dword [rbp - 0x18], eax	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4001135	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1015	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400113c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001140	        0x4883e801	                              sub rax, 1	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001144	           0xfb600	                   movzx eax, byte [rax]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001147	           0xfbec0	                           movsx eax, al	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x400114a	          0x83e845	                           sub eax, 0x45	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x400114d	          0x83f833	                           cmp eax, 0x33	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001150	     0xf878d000000	                            ja 0x40011e3	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001156	            0x89c0	                            mov eax, eax	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001158	    0x488b04c50000	                  mov rax, qword [rax*8]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001160	            0xffe0	                                 jmp rax	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001162	        0x837de400	               cmp dword [rbp - 0x1c], 0	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4001166	            0x740c	                            je 0x4001174	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4001168	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      1027	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x400116f	      0xe983000000	                           jmp 0x40011f7	      1049	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4001174	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001177	            0x85c0	                           test eax, eax	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001179	            0x7407	                            je 0x4001182	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400117b	          0x83f801	                              cmp eax, 1	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400117e	            0x740b	                            je 0x400118b	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001180	            0xeb12	                           jmp 0x4001194	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001182	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      1033	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001189	            0xeb11	                           jmp 0x400119c	      1034	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400118b	    0xc745ec020000	               mov dword [rbp - 0x14], 2	      1036	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001192	            0xeb08	                           jmp 0x400119c	      1037	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4001194	    0xc745ec030000	               mov dword [rbp - 0x14], 3	      1041	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400119b	              0x90	                                     nop	      1045	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x400119c	            0xeb59	                           jmp 0x40011f7	      1049	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x400119e	        0x837de000	               cmp dword [rbp - 0x20], 0	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x40011a2	            0x7509	                           jne 0x40011ad	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x40011a4	    0xc745ec040000	               mov dword [rbp - 0x14], 4	      1057	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x40011ab	            0xeb4a	                           jmp 0x40011f7	      1067	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011ad	    0xc745ec050000	               mov dword [rbp - 0x14], 5	      1061	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_6
0x40011b4	            0xeb41	                           jmp 0x40011f7	      1067	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011b6	    0xc745ec060000	               mov dword [rbp - 0x14], 6	      1069	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011bd	            0xeb38	                           jmp 0x40011f7	      1070	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011bf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011c3	           0xfb600	                   movzx eax, byte [rax]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011c6	            0x3c41	                            cmp al, 0x41	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011c8	            0x740b	                            je 0x40011d5	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011ca	        0x488b45f8	                mov rax, qword [rbp - 8]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011ce	           0xfb600	                   movzx eax, byte [rax]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011d1	            0x3c42	                            cmp al, 0x42	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011d3	            0x7505	                           jne 0x40011da	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011d5	      0x488345f801	                  add qword [rbp - 8], 1	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x40011da	    0xc745ec060000	               mov dword [rbp - 0x14], 6	      1074	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011e1	            0xeb14	                           jmp 0x40011f7	      1075	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x40011e3	      0xba00000000	                              mov edx, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40011e8	      0xbe35040000	                          mov esi, 0x435	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40011ed	      0xbf00000000	                              mov edi, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40011f2	      0xe800000000	                          call 0x40011f7	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x40011f7	        0x837de808	               cmp dword [rbp - 0x18], 8	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x40011fb	            0x7614	                           jbe 0x4001211	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x40011fd	      0xba00000000	                              mov edx, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4001202	      0xbe39040000	                          mov esi, 0x439	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4001207	      0xbf00000000	                              mov edi, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x400120c	      0xe800000000	                          call 0x4001211	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4001211	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001214	        0x48c1e004	                              shl rax, 4	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001218	          0x4889c2	                            mov rdx, rax	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400121b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400121f	          0x4801c2	                            add rdx, rax	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001222	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001225	            0x8902	                    mov dword [rdx], eax	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4001227	        0x8345dc01	               add dword [rbp - 0x24], 1	      1083	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x400122b	        0x488b45f8	                mov rax, qword [rbp - 8]	       916	bfd.c	FUNCTION_7	WHILE_1
0x400122f	           0xfb600	                   movzx eax, byte [rax]	       916	bfd.c	FUNCTION_7	WHILE_1
0x4001232	            0x84c0	                             test al, al	       916	bfd.c	FUNCTION_7	WHILE_1
0x4001234	     0xf8509fcffff	                           jne 0x4000e43	       916	bfd.c	FUNCTION_7	WHILE_1
0x400123a	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1087	bfd.c	FUNCTION_7
0x400123d	              0xc9	                                   leave	      1088	bfd.c	FUNCTION_7
0x400123e	              0xc3	                                     ret	      1088	bfd.c	FUNCTION_7
bfd_check_compression_header	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,3:CALL,9:functions,0:ELSE,1	99
0x400285a	              0x55	                                push rbp	      2385	bfd.c	FUNCTION_40
0x400285b	          0x4889e5	                            mov rbp, rsp	      2385	bfd.c	FUNCTION_40
0x400285e	        0x4883ec60	                           sub rsp, 0x60	      2385	bfd.c	FUNCTION_40
0x4002862	        0x48897db8	             mov qword [rbp - 0x48], rdi	      2385	bfd.c	FUNCTION_40
0x4002866	        0x488975b0	             mov qword [rbp - 0x50], rsi	      2385	bfd.c	FUNCTION_40
0x400286a	        0x488955a8	             mov qword [rbp - 0x58], rdx	      2385	bfd.c	FUNCTION_40
0x400286e	        0x48894da0	             mov qword [rbp - 0x60], rcx	      2385	bfd.c	FUNCTION_40
0x4002872	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4002876	        0x488b4008	                mov rax, qword [rax + 8]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x400287a	          0x8b4008	                mov eax, dword [rax + 8]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x400287d	          0x83f805	                              cmp eax, 5	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4002880	     0xf8530010000	                           jne 0x40029b6	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4002886	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x400288a	    0x488b80e00000	            mov rax, qword [rax + 0xe0] 	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4002891	        0x488b4008	                mov rax, qword [rax + 8]	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4002895	      0x2500080000	                          and eax, 0x800	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x400289a	          0x4885c0	                           test rax, rax	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x400289d	     0xf8413010000	                            je 0x40029b6	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x40028a3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2390	bfd.c	FUNCTION_40	IF_1	CALL_3
0x40028a7	        0x488b4008	                mov rax, qword [rax + 8]	      2390	bfd.c	FUNCTION_40	IF_1	CALL_3
0x40028ab	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2390	bfd.c	FUNCTION_40	IF_1	CALL_3
0x40028b2	        0x488945c8	             mov qword [rbp - 0x38], rax	      2390	bfd.c	FUNCTION_40	IF_1	CALL_3
0x40028b6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028ba	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028c1	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028c5	            0x3c01	                               cmp al, 1	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028c7	            0x755c	                           jne 0x4002925	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028c9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2393	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028cd	        0x488945d0	             mov qword [rbp - 0x30], rax	      2393	bfd.c	FUNCTION_40	IF_1	IF_2
0x40028d1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028d5	        0x488b4008	                mov rax, qword [rax + 8]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028d9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028dd	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028e1	          0x4889d7	                            mov rdi, rdx	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028e4	            0xffd0	                                call rax	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028e6	          0x8945e0	             mov dword [rbp - 0x20], eax	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x40028e9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x40028ed	        0x488b4008	                mov rax, qword [rax + 8]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x40028f1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x40028f5	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x40028f9	        0x4883c204	                              add rdx, 4	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x40028fd	          0x4889d7	                            mov rdi, rdx	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4002900	            0xffd0	                                call rax	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4002902	        0x488945e8	             mov qword [rbp - 0x18], rax	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4002906	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400290a	        0x488b4008	                mov rax, qword [rax + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400290e	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4002912	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4002916	        0x4883c208	                              add rdx, 8	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400291a	          0x4889d7	                            mov rdi, rdx	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400291d	            0xffd0	                                call rax	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x400291f	        0x488945f0	             mov qword [rbp - 0x10], rax	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4002923	            0xeb5a	                           jmp 0x400297f	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4002925	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2400	bfd.c	FUNCTION_40	IF_1	ELSE_1
0x4002929	        0x488945d8	             mov qword [rbp - 0x28], rax	      2400	bfd.c	FUNCTION_40	IF_1	ELSE_1
0x400292d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002931	        0x488b4008	                mov rax, qword [rax + 8]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002935	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002939	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x400293d	          0x4889d7	                            mov rdi, rdx	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002940	            0xffd0	                                call rax	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002942	          0x8945e0	             mov dword [rbp - 0x20], eax	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4002945	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4002949	        0x488b4008	                mov rax, qword [rax + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x400294d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4002951	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4002955	        0x4883c208	                              add rdx, 8	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4002959	          0x4889d7	                            mov rdi, rdx	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x400295c	            0xffd0	                                call rax	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x400295e	        0x488945e8	             mov qword [rbp - 0x18], rax	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4002962	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4002966	        0x488b4008	                mov rax, qword [rax + 8]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400296a	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400296e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4002972	        0x4883c210	                           add rdx, 0x10	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4002976	          0x4889d7	                            mov rdi, rdx	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4002979	            0xffd0	                                call rax	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400297b	        0x488945f0	             mov qword [rbp - 0x10], rax	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x400297f	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002982	          0x83f801	                              cmp eax, 1	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002985	            0x752f	                           jne 0x40029b6	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002987	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x400298b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x400298f	          0x8b4070	            mov eax, dword [rax + 0x70] 	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002992	      0xbe01000000	                              mov esi, 1	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002997	            0x89c1	                            mov ecx, eax	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4002999	            0xd3e6	                             shl esi, cl	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x400299b	            0x89f0	                            mov eax, esi	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x400299d	            0x89c0	                            mov eax, eax	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x400299f	          0x4839c2	                            cmp rdx, rax	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029a2	            0x7512	                           jne 0x40029b6	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029a4	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029a8	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029ac	          0x488910	                    mov qword [rax], rdx	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029af	      0xb801000000	                              mov eax, 1	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029b4	            0xeb05	                           jmp 0x40029bb	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x40029b6	      0xb800000000	                              mov eax, 0	      2413	bfd.c	FUNCTION_40
0x40029bb	              0xc9	                                   leave	      2414	bfd.c	FUNCTION_40
0x40029bc	              0xc3	                                     ret	      2414	bfd.c	FUNCTION_40
bfd_elf_set_pagesize	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,2:CALL,2:functions,0:ELSE,0	38
0x4002214	              0x55	                                push rbp	      2102	bfd.c	FUNCTION_34
0x4002215	          0x4889e5	                            mov rbp, rsp	      2102	bfd.c	FUNCTION_34
0x4002218	        0x4883ec30	                           sub rsp, 0x30	      2102	bfd.c	FUNCTION_34
0x400221c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2102	bfd.c	FUNCTION_34
0x4002220	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2102	bfd.c	FUNCTION_34
0x4002224	          0x8955dc	             mov dword [rbp - 0x24], edx	      2102	bfd.c	FUNCTION_34
0x4002227	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      2102	bfd.c	FUNCTION_34
0x400222b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2103	bfd.c	FUNCTION_34	IF_1
0x400222f	          0x8b4008	                mov eax, dword [rax + 8]	      2103	bfd.c	FUNCTION_34	IF_1
0x4002232	          0x83f805	                              cmp eax, 5	      2103	bfd.c	FUNCTION_34	IF_1
0x4002235	            0x7523	                           jne 0x400225a	      2103	bfd.c	FUNCTION_34	IF_1
0x4002237	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2107	bfd.c	FUNCTION_34	IF_1	CALL_1
0x400223b	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2107	bfd.c	FUNCTION_34	IF_1	CALL_1
0x4002242	        0x488945f8	                mov qword [rbp - 8], rax	      2107	bfd.c	FUNCTION_34	IF_1	CALL_1
0x4002246	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      2108	bfd.c	FUNCTION_34	IF_1
0x4002249	          0x4863d0	                         movsxd rdx, eax	      2108	bfd.c	FUNCTION_34	IF_1
0x400224c	        0x488b45f8	                mov rax, qword [rbp - 8]	      2108	bfd.c	FUNCTION_34	IF_1
0x4002250	          0x4801c2	                            add rdx, rax	      2108	bfd.c	FUNCTION_34	IF_1
0x4002253	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2108	bfd.c	FUNCTION_34	IF_1
0x4002257	          0x488902	                    mov qword [rdx], rax	      2108	bfd.c	FUNCTION_34	IF_1
0x400225a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2111	bfd.c	FUNCTION_34	IF_2
0x400225e	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x4002265	          0x4885c0	                           test rax, rax	      2111	bfd.c	FUNCTION_34	IF_2
0x4002268	            0x742f	                            je 0x4002299	      2111	bfd.c	FUNCTION_34	IF_2
0x400226a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2112	bfd.c	FUNCTION_34	IF_2
0x400226e	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      2112	bfd.c	FUNCTION_34	IF_2
0x4002275	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      2112	bfd.c	FUNCTION_34	IF_2
0x4002279	            0x741e	                            je 0x4002299	      2112	bfd.c	FUNCTION_34	IF_2
0x400227b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x400227f	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x4002286	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x400228a	          0x8b55dc	             mov edx, dword [rbp - 0x24]	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x400228d	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x4002291	          0x4889c7	                            mov rdi, rax	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x4002294	      0xe87bffffff	           call sym.bfd_elf_set_pagesize	      2113	bfd.c	FUNCTION_34	IF_2	CALL_2
0x4002299	              0x90	                                     nop	      2115	bfd.c	FUNCTION_34
0x400229a	              0xc9	                                   leave	      2115	bfd.c	FUNCTION_34
0x400229b	              0xc3	                                     ret	      2115	bfd.c	FUNCTION_34
is32bit	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,3:functions,0:ELSE,0	28
0x4001ff1	              0x55	                                push rbp	      1977	bfd.c	FUNCTION_29
0x4001ff2	          0x4889e5	                            mov rbp, rsp	      1977	bfd.c	FUNCTION_29
0x4001ff5	        0x4883ec20	                           sub rsp, 0x20	      1977	bfd.c	FUNCTION_29
0x4001ff9	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1977	bfd.c	FUNCTION_29
0x4001ffd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4002001	        0x488b4008	                mov rax, qword [rax + 8]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4002005	          0x8b4008	                mov eax, dword [rax + 8]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4002008	          0x83f805	                              cmp eax, 5	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x400200b	            0x752c	                           jne 0x4002039	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x400200d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1980	bfd.c	FUNCTION_29	IF_1	CALL_2
0x4002011	        0x488b4008	                mov rax, qword [rax + 8]	      1980	bfd.c	FUNCTION_29	IF_1	CALL_2
0x4002015	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1980	bfd.c	FUNCTION_29	IF_1	CALL_2
0x400201c	        0x488945f8	                mov qword [rbp - 8], rax	      1980	bfd.c	FUNCTION_29	IF_1	CALL_2
0x4002020	        0x488b45f8	                mov rax, qword [rbp - 8]	      1981	bfd.c	FUNCTION_29	IF_1
0x4002024	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1981	bfd.c	FUNCTION_29	IF_1
0x400202b	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	      1981	bfd.c	FUNCTION_29	IF_1
0x400202f	            0x3c01	                               cmp al, 1	      1981	bfd.c	FUNCTION_29	IF_1
0x4002031	           0xf94c0	                                 sete al	      1981	bfd.c	FUNCTION_29	IF_1
0x4002034	           0xfb6c0	                           movzx eax, al	      1981	bfd.c	FUNCTION_29	IF_1
0x4002037	            0xeb15	                           jmp 0x400204e	      1981	bfd.c	FUNCTION_29	IF_1
0x4002039	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1985	bfd.c	FUNCTION_29	CALL_3
0x400203d	          0x4889c7	                            mov rdi, rax	      1985	bfd.c	FUNCTION_29	CALL_3
0x4002040	      0xe800000000	                          call 0x4002045	      1985	bfd.c	FUNCTION_29	CALL_3
0x4002045	          0x83f820	                           cmp eax, 0x20	      1985	bfd.c	FUNCTION_29	CALL_3
0x4002048	           0xf96c0	                                setbe al	      1985	bfd.c	FUNCTION_29	CALL_3
0x400204b	           0xfb6c0	                           movzx eax, al	      1985	bfd.c	FUNCTION_29	CALL_3
0x400204e	              0xc9	                                   leave	      1986	bfd.c	FUNCTION_29
0x400204f	              0xc3	                                     ret	      1986	bfd.c	FUNCTION_29
bfd_alt_mach_code	SWITCH,1:DO,0:WHILE,0:FOR,0:IF,3:CALL,5:functions,0:ELSE,0	54
0x400210c	              0x55	                                push rbp	      2036	bfd.c	FUNCTION_32
0x400210d	          0x4889e5	                            mov rbp, rsp	      2036	bfd.c	FUNCTION_32
0x4002110	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2036	bfd.c	FUNCTION_32
0x4002114	          0x8975e4	             mov dword [rbp - 0x1c], esi	      2036	bfd.c	FUNCTION_32
0x4002117	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400211b	        0x488b4008	                mov rax, qword [rax + 8]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400211f	          0x8b4008	                mov eax, dword [rax + 8]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x4002122	          0x83f805	                              cmp eax, 5	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x4002125	     0xf8596000000	                           jne 0x40021c1	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x400212b	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400212e	          0x83f801	                              cmp eax, 1	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4002131	            0x7420	                            je 0x4002153	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4002133	          0x83f802	                              cmp eax, 2	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4002136	            0x7440	                            je 0x4002178	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4002138	            0x85c0	                           test eax, eax	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400213a	            0x7561	                           jne 0x400219d	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x400213c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x4002140	        0x488b4008	                mov rax, qword [rax + 8]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x4002144	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x400214b	          0x8b4008	                mov eax, dword [rax + 8]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x400214e	          0x8945fc	                mov dword [rbp - 4], eax	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x4002151	            0xeb55	                           jmp 0x40021a8	      2045	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x4002153	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x4002157	        0x488b4008	                mov rax, qword [rax + 8]	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x400215b	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x4002162	    0x8b80f8020000	           mov eax, dword [rax + 0x2f8] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x4002168	          0x8945fc	                mov dword [rbp - 4], eax	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x400216b	        0x837dfc00	                  cmp dword [rbp - 4], 0	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x400216f	            0x7533	                           jne 0x40021a4	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4002171	      0xb800000000	                              mov eax, 0	      2050	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4002176	            0xeb4e	                           jmp 0x40021c6	      2050	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4002178	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x400217c	        0x488b4008	                mov rax, qword [rax + 8]	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x4002180	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x4002187	    0x8b80fc020000	           mov eax, dword [rax + 0x2fc] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x400218d	          0x8945fc	                mov dword [rbp - 4], eax	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x4002190	        0x837dfc00	                  cmp dword [rbp - 4], 0	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x4002194	            0x7511	                           jne 0x40021a7	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x4002196	      0xb800000000	                              mov eax, 0	      2056	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x400219b	            0xeb29	                           jmp 0x40021c6	      2056	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x400219d	      0xb800000000	                              mov eax, 0	      2060	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40021a2	            0xeb22	                           jmp 0x40021c6	      2060	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40021a4	              0x90	                                     nop	      2051	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40021a5	            0xeb01	                           jmp 0x40021a8	      2051	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40021a7	              0x90	                                     nop	      2057	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40021a8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40021ac	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40021b3	          0x8b55fc	                mov edx, dword [rbp - 4]	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40021b6	        0x6689503a	               mov word [rax + 0x3a], dx	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40021ba	      0xb801000000	                              mov eax, 1	      2065	bfd.c	FUNCTION_32	IF_1
0x40021bf	            0xeb05	                           jmp 0x40021c6	      2065	bfd.c	FUNCTION_32	IF_1
0x40021c1	      0xb800000000	                              mov eax, 0	      2068	bfd.c	FUNCTION_32
0x40021c6	              0x5d	                                 pop rbp	      2069	bfd.c	FUNCTION_32
0x40021c7	              0xc3	                                     ret	      2069	bfd.c	FUNCTION_32
bfd_record_phdr	SWITCH,0:DO,0:WHILE,0:FOR,1:IF,3:CALL,4:functions,0:ELSE,0	115
0x4001e5e	              0x55	                                push rbp	      1941	bfd.c	FUNCTION_28
0x4001e5f	          0x4889e5	                            mov rbp, rsp	      1941	bfd.c	FUNCTION_28
0x4001e62	        0x4883ec50	                           sub rsp, 0x50	      1941	bfd.c	FUNCTION_28
0x4001e66	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1941	bfd.c	FUNCTION_28
0x4001e6a	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1941	bfd.c	FUNCTION_28
0x4001e6e	          0x8955cc	             mov dword [rbp - 0x34], edx	      1941	bfd.c	FUNCTION_28
0x4001e71	          0x894dc8	             mov dword [rbp - 0x38], ecx	      1941	bfd.c	FUNCTION_28
0x4001e74	        0x448945c4	             mov dword [rbp - 0x3c], r8d	      1941	bfd.c	FUNCTION_28
0x4001e78	        0x4c894db8	              mov qword [rbp - 0x48], r9	      1941	bfd.c	FUNCTION_28
0x4001e7c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001e80	        0x488b4008	                mov rax, qword [rax + 8]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001e84	          0x8b4008	                mov eax, dword [rax + 8]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001e87	          0x83f805	                              cmp eax, 5	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001e8a	            0x740a	                            je 0x4001e96	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x4001e8c	      0xb801000000	                              mov eax, 1	      1946	bfd.c	FUNCTION_28	IF_1
0x4001e91	      0xe959010000	                           jmp 0x4001fef	      1946	bfd.c	FUNCTION_28	IF_1
0x4001e96	    0x48c745f05000	           mov qword [rbp - 0x10], 0x50 	      1948	bfd.c	FUNCTION_28
0x4001e9e	          0x8b4520	            mov eax, dword [rbp + 0x20] 	      1949	bfd.c	FUNCTION_28
0x4001ea1	    0x488d14c50000	                        lea rdx, [rax*8]	      1949	bfd.c	FUNCTION_28
0x4001ea9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1949	bfd.c	FUNCTION_28
0x4001ead	          0x4801d0	                            add rax, rdx	      1949	bfd.c	FUNCTION_28
0x4001eb0	        0x4883e808	                              sub rax, 8	      1949	bfd.c	FUNCTION_28
0x4001eb4	        0x488945f0	             mov qword [rbp - 0x10], rax	      1949	bfd.c	FUNCTION_28
0x4001eb8	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ebc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ec0	          0x4889d6	                            mov rsi, rdx	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ec3	          0x4889c7	                            mov rdi, rax	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ec6	      0xe800000000	                          call 0x4001ecb	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ecb	        0x488945f8	                mov qword [rbp - 8], rax	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001ecf	      0x48837df800	                  cmp qword [rbp - 8], 0	      1951	bfd.c	FUNCTION_28	IF_2
0x4001ed4	            0x750a	                           jne 0x4001ee0	      1951	bfd.c	FUNCTION_28	IF_2
0x4001ed6	      0xb800000000	                              mov eax, 0	      1952	bfd.c	FUNCTION_28	IF_2
0x4001edb	      0xe90f010000	                           jmp 0x4001fef	      1952	bfd.c	FUNCTION_28	IF_2
0x4001ee0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1954	bfd.c	FUNCTION_28
0x4001ee4	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1954	bfd.c	FUNCTION_28
0x4001ee8	        0x48895008	                mov qword [rax + 8], rdx	      1954	bfd.c	FUNCTION_28
0x4001eec	          0x8b55c8	             mov edx, dword [rbp - 0x38]	      1955	bfd.c	FUNCTION_28
0x4001eef	        0x488b45f8	                mov rax, qword [rbp - 8]	      1955	bfd.c	FUNCTION_28
0x4001ef3	        0x48895010	             mov qword [rax + 0x10], rdx	      1955	bfd.c	FUNCTION_28
0x4001ef7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1956	bfd.c	FUNCTION_28
0x4001efb	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1956	bfd.c	FUNCTION_28
0x4001eff	        0x48895018	             mov qword [rax + 0x18], rdx	      1956	bfd.c	FUNCTION_28
0x4001f03	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      1957	bfd.c	FUNCTION_28
0x4001f06	          0x83e001	                              and eax, 1	      1957	bfd.c	FUNCTION_28
0x4001f09	            0x89c2	                            mov edx, eax	      1957	bfd.c	FUNCTION_28
0x4001f0b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1957	bfd.c	FUNCTION_28
0x4001f0f	            0x89d1	                            mov ecx, edx	      1957	bfd.c	FUNCTION_28
0x4001f11	          0x83e101	                              and ecx, 1	      1957	bfd.c	FUNCTION_28
0x4001f14	         0xfb65040	           movzx edx, byte [rax + 0x40] 	      1957	bfd.c	FUNCTION_28
0x4001f18	          0x83e2fe	                     and edx, 0xfffffffe	      1957	bfd.c	FUNCTION_28
0x4001f1b	             0x9ca	                             or edx, ecx	      1957	bfd.c	FUNCTION_28
0x4001f1d	          0x885040	               mov byte [rax + 0x40], dl	      1957	bfd.c	FUNCTION_28
0x4001f20	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1958	bfd.c	FUNCTION_28
0x4001f23	          0x83e001	                              and eax, 1	      1958	bfd.c	FUNCTION_28
0x4001f26	            0x89c2	                            mov edx, eax	      1958	bfd.c	FUNCTION_28
0x4001f28	        0x488b45f8	                mov rax, qword [rbp - 8]	      1958	bfd.c	FUNCTION_28
0x4001f2c	          0x83e201	                              and edx, 1	      1958	bfd.c	FUNCTION_28
0x4001f2f	          0x8d0c12	                    lea ecx, [rdx + rdx]	      1958	bfd.c	FUNCTION_28
0x4001f32	         0xfb65040	           movzx edx, byte [rax + 0x40] 	      1958	bfd.c	FUNCTION_28
0x4001f36	          0x83e2fd	                     and edx, 0xfffffffd	      1958	bfd.c	FUNCTION_28
0x4001f39	             0x9ca	                             or edx, ecx	      1958	bfd.c	FUNCTION_28
0x4001f3b	          0x885040	               mov byte [rax + 0x40], dl	      1958	bfd.c	FUNCTION_28
0x4001f3e	          0x8b4510	            mov eax, dword [rbp + 0x10] 	      1959	bfd.c	FUNCTION_28
0x4001f41	          0x83e001	                              and eax, 1	      1959	bfd.c	FUNCTION_28
0x4001f44	            0x89c2	                            mov edx, eax	      1959	bfd.c	FUNCTION_28
0x4001f46	        0x488b45f8	                mov rax, qword [rbp - 8]	      1959	bfd.c	FUNCTION_28
0x4001f4a	          0x83e201	                              and edx, 1	      1959	bfd.c	FUNCTION_28
0x4001f4d	            0x89d1	                            mov ecx, edx	      1959	bfd.c	FUNCTION_28
0x4001f4f	          0xc1e104	                              shl ecx, 4	      1959	bfd.c	FUNCTION_28
0x4001f52	         0xfb65040	           movzx edx, byte [rax + 0x40] 	      1959	bfd.c	FUNCTION_28
0x4001f56	          0x83e2ef	                     and edx, 0xffffffef	      1959	bfd.c	FUNCTION_28
0x4001f59	             0x9ca	                             or edx, ecx	      1959	bfd.c	FUNCTION_28
0x4001f5b	          0x885040	               mov byte [rax + 0x40], dl	      1959	bfd.c	FUNCTION_28
0x4001f5e	          0x8b4518	            mov eax, dword [rbp + 0x18] 	      1960	bfd.c	FUNCTION_28
0x4001f61	          0x83e001	                              and eax, 1	      1960	bfd.c	FUNCTION_28
0x4001f64	            0x89c2	                            mov edx, eax	      1960	bfd.c	FUNCTION_28
0x4001f66	        0x488b45f8	                mov rax, qword [rbp - 8]	      1960	bfd.c	FUNCTION_28
0x4001f6a	          0x83e201	                              and edx, 1	      1960	bfd.c	FUNCTION_28
0x4001f6d	            0x89d1	                            mov ecx, edx	      1960	bfd.c	FUNCTION_28
0x4001f6f	          0xc1e105	                              shl ecx, 5	      1960	bfd.c	FUNCTION_28
0x4001f72	         0xfb65040	           movzx edx, byte [rax + 0x40] 	      1960	bfd.c	FUNCTION_28
0x4001f76	          0x83e2df	                     and edx, 0xffffffdf	      1960	bfd.c	FUNCTION_28
0x4001f79	             0x9ca	                             or edx, ecx	      1960	bfd.c	FUNCTION_28
0x4001f7b	          0x885040	               mov byte [rax + 0x40], dl	      1960	bfd.c	FUNCTION_28
0x4001f7e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1961	bfd.c	FUNCTION_28
0x4001f82	          0x8b5520	            mov edx, dword [rbp + 0x20] 	      1961	bfd.c	FUNCTION_28
0x4001f85	          0x895044	             mov dword [rax + 0x44], edx	      1961	bfd.c	FUNCTION_28
0x4001f88	        0x837d2000	               cmp dword [rbp + 0x20], 0	      1962	bfd.c	FUNCTION_28	IF_3
0x4001f8c	            0x7422	                            je 0x4001fb0	      1962	bfd.c	FUNCTION_28	IF_3
0x4001f8e	          0x8b4520	            mov eax, dword [rbp + 0x20] 	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001f91	    0x488d14c50000	                        lea rdx, [rax*8]	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001f99	        0x488b45f8	                mov rax, qword [rbp - 8]	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001f9d	        0x488d4848	                   lea rcx, [rax + 0x48]	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001fa1	        0x488b4528	            mov rax, qword [rbp + 0x28] 	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001fa5	          0x4889c6	                            mov rsi, rax	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001fa8	          0x4889cf	                            mov rdi, rcx	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001fab	      0xe800000000	                          call 0x4001fb0	      1963	bfd.c	FUNCTION_28	CALL_3
0x4001fb0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fb4	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fbb	    0x488b80980c00	           mov rax, qword [rax + 0xc98] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fc2	        0x488945e8	             mov qword [rbp - 0x18], rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fc6	            0xeb0b	                           jmp 0x4001fd3	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fc8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fcc	          0x488b00	                    mov rax, qword [rax]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fcf	        0x488945e8	             mov qword [rbp - 0x18], rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fd3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fd7	          0x488b00	                    mov rax, qword [rax]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fda	          0x4885c0	                           test rax, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fdd	            0x75e9	                           jne 0x4001fc8	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001fdf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1967	bfd.c	FUNCTION_28
0x4001fe3	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1967	bfd.c	FUNCTION_28
0x4001fe7	          0x488910	                    mov qword [rax], rdx	      1967	bfd.c	FUNCTION_28
0x4001fea	      0xb801000000	                              mov eax, 1	      1969	bfd.c	FUNCTION_28
0x4001fef	              0xc9	                                   leave	      1970	bfd.c	FUNCTION_28
0x4001ff0	              0xc3	                                     ret	      1970	bfd.c	FUNCTION_28
_bfd_error_handler	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,0:CALL,3:functions,0:ELSE,0	41
0x4001669	              0x55	                                push rbp	      1173	bfd.c	FUNCTION_9
0x400166a	          0x4889e5	                            mov rbp, rsp	      1173	bfd.c	FUNCTION_9
0x400166d	    0x4881ece00000	                           sub rsp, 0xe0	      1173	bfd.c	FUNCTION_9
0x4001674	    0x4889bd28ffff	             mov qword [rbp - 0xd8], rdi	      1173	bfd.c	FUNCTION_9
0x400167b	    0x4889b558ffff	             mov qword [rbp - 0xa8], rsi	      1173	bfd.c	FUNCTION_9
0x4001682	    0x48899560ffff	             mov qword [rbp - 0xa0], rdx	      1173	bfd.c	FUNCTION_9
0x4001689	    0x48898d68ffff	             mov qword [rbp - 0x98], rcx	      1173	bfd.c	FUNCTION_9
0x4001690	    0x4c898570ffff	              mov qword [rbp - 0x90], r8	      1173	bfd.c	FUNCTION_9
0x4001697	    0x4c898d78ffff	              mov qword [rbp - 0x88], r9	      1173	bfd.c	FUNCTION_9
0x400169e	            0x84c0	                             test al, al	      1173	bfd.c	FUNCTION_9
0x40016a0	            0x7420	                            je 0x40016c2	      1173	bfd.c	FUNCTION_9
0x40016a2	         0xf294580	       movaps xmmword [rbp - 0x80], xmm0	      1173	bfd.c	FUNCTION_9
0x40016a6	         0xf294d90	       movaps xmmword [rbp - 0x70], xmm1	      1173	bfd.c	FUNCTION_9
0x40016aa	         0xf2955a0	       movaps xmmword [rbp - 0x60], xmm2	      1173	bfd.c	FUNCTION_9
0x40016ae	         0xf295db0	       movaps xmmword [rbp - 0x50], xmm3	      1173	bfd.c	FUNCTION_9
0x40016b2	         0xf2965c0	       movaps xmmword [rbp - 0x40], xmm4	      1173	bfd.c	FUNCTION_9
0x40016b6	         0xf296dd0	       movaps xmmword [rbp - 0x30], xmm5	      1173	bfd.c	FUNCTION_9
0x40016ba	         0xf2975e0	       movaps xmmword [rbp - 0x20], xmm6	      1173	bfd.c	FUNCTION_9
0x40016be	         0xf297df0	       movaps xmmword [rbp - 0x10], xmm7	      1173	bfd.c	FUNCTION_9
0x40016c2	    0x64488b042528	                mov rax, qword fs:[0x28]	      1173	bfd.c	FUNCTION_9
0x40016cb	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	      1173	bfd.c	FUNCTION_9
0x40016d2	            0x31c0	                            xor eax, eax	      1173	bfd.c	FUNCTION_9
0x40016d4	    0xc78530ffffff	               mov dword [rbp - 0xd0], 8	      1176	bfd.c	FUNCTION_9	CALL_1
0x40016de	    0xc78534ffffff	           mov dword [rbp - 0xcc], 0x30 	      1176	bfd.c	FUNCTION_9	CALL_1
0x40016e8	        0x488d4510	                   lea rax, [rbp + 0x10]	      1176	bfd.c	FUNCTION_9	CALL_1
0x40016ec	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x40016f3	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	      1176	bfd.c	FUNCTION_9	CALL_1
0x40016fa	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x4001701	    0x488b05000000	            mov rax, qword [0x04001708] 	      1177	bfd.c	FUNCTION_9	CALL_2
0x4001708	    0x488d8d30ffff	                   lea rcx, [rbp - 0xd0]	      1177	bfd.c	FUNCTION_9	CALL_2
0x400170f	    0x488b9528ffff	             mov rdx, qword [rbp - 0xd8]	      1177	bfd.c	FUNCTION_9	CALL_2
0x4001716	          0x4889ce	                            mov rsi, rcx	      1177	bfd.c	FUNCTION_9	CALL_2
0x4001719	          0x4889d7	                            mov rdi, rdx	      1177	bfd.c	FUNCTION_9	CALL_2
0x400171c	            0xffd0	                                call rax	      1177	bfd.c	FUNCTION_9	CALL_2
0x400171e	              0x90	                                     nop	      1179	bfd.c	FUNCTION_9
0x400171f	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1179	bfd.c	FUNCTION_9
0x4001726	    0x644833042528	                xor rax, qword fs:[0x28]	      1179	bfd.c	FUNCTION_9
0x400172f	            0x7405	                            je 0x4001736	      1179	bfd.c	FUNCTION_9
0x4001731	      0xe800000000	                          call 0x4001736	      1179	bfd.c	FUNCTION_9
0x4001736	              0xc9	                                   leave	      1179	bfd.c	FUNCTION_9
0x4001737	              0xc3	                                     ret	      1179	bfd.c	FUNCTION_9
bfd_demangle	SWITCH,0:DO,0:WHILE,1:FOR,0:IF,10:CALL,16:functions,0:ELSE,0	182
0x4002399	              0x55	                                push rbp	      2219	bfd.c	FUNCTION_38
0x400239a	          0x4889e5	                            mov rbp, rsp	      2219	bfd.c	FUNCTION_38
0x400239d	        0x4883ec70	                           sub rsp, 0x70	      2219	bfd.c	FUNCTION_38
0x40023a1	        0x48897da8	             mov qword [rbp - 0x58], rdi	      2219	bfd.c	FUNCTION_38
0x40023a5	        0x488975a0	             mov qword [rbp - 0x60], rsi	      2219	bfd.c	FUNCTION_38
0x40023a9	          0x89559c	             mov dword [rbp - 0x64], edx	      2219	bfd.c	FUNCTION_38
0x40023ac	      0x48837da800	               cmp qword [rbp - 0x58], 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023b1	            0x7429	                            je 0x40023dc	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023b3	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2226	bfd.c	FUNCTION_38
0x40023b7	           0xfb600	                   movzx eax, byte [rax]	      2226	bfd.c	FUNCTION_38
0x40023ba	            0x84c0	                             test al, al	      2226	bfd.c	FUNCTION_38
0x40023bc	            0x741e	                            je 0x40023dc	      2226	bfd.c	FUNCTION_38
0x40023be	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023c2	        0x488b4008	                mov rax, qword [rax + 8]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023c6	         0xfb6501c	           movzx edx, byte [rax + 0x1c] 	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023ca	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023ce	           0xfb600	                   movzx eax, byte [rax]	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023d1	            0x38c2	                              cmp dl, al	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023d3	            0x7507	                           jne 0x40023dc	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023d5	      0xb801000000	                              mov eax, 1	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023da	            0xeb05	                           jmp 0x40023e1	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023dc	      0xb800000000	                              mov eax, 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x40023e1	          0x8945b4	             mov dword [rbp - 0x4c], eax	      2225	bfd.c	FUNCTION_38
0x40023e4	        0x837db400	               cmp dword [rbp - 0x4c], 0	      2228	bfd.c	FUNCTION_38	IF_1
0x40023e8	            0x7405	                            je 0x40023ef	      2228	bfd.c	FUNCTION_38	IF_1
0x40023ea	      0x488345a001	               add qword [rbp - 0x60], 1	      2229	bfd.c	FUNCTION_38	IF_1
0x40023ef	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2235	bfd.c	FUNCTION_38
0x40023f3	        0x488945d0	             mov qword [rbp - 0x30], rax	      2235	bfd.c	FUNCTION_38
0x40023f7	            0xeb05	                           jmp 0x40023fe	      2236	bfd.c	FUNCTION_38	WHILE_1
0x40023f9	      0x488345a001	               add qword [rbp - 0x60], 1	      2237	bfd.c	FUNCTION_38	WHILE_1
0x40023fe	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002402	           0xfb600	                   movzx eax, byte [rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002405	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002407	            0x74f0	                            je 0x40023f9	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002409	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x400240d	           0xfb600	                   movzx eax, byte [rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002410	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002412	            0x74e5	                            je 0x40023f9	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4002414	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      2238	bfd.c	FUNCTION_38
0x4002418	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2238	bfd.c	FUNCTION_38
0x400241c	          0x4829c2	                            sub rdx, rax	      2238	bfd.c	FUNCTION_38
0x400241f	          0x4889d0	                            mov rax, rdx	      2238	bfd.c	FUNCTION_38
0x4002422	        0x488945d8	             mov qword [rbp - 0x28], rax	      2238	bfd.c	FUNCTION_38
0x4002426	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      2241	bfd.c	FUNCTION_38
0x400242e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2242	bfd.c	FUNCTION_38	CALL_2
0x4002432	      0xbe40000000	                           mov esi, 0x40	      2242	bfd.c	FUNCTION_38	CALL_2
0x4002437	          0x4889c7	                            mov rdi, rax	      2242	bfd.c	FUNCTION_38	CALL_2
0x400243a	      0xe800000000	                          call 0x400243f	      2242	bfd.c	FUNCTION_38	CALL_2
0x400243f	        0x488945c8	             mov qword [rbp - 0x38], rax	      2242	bfd.c	FUNCTION_38	CALL_2
0x4002443	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      2243	bfd.c	FUNCTION_38	IF_2
0x4002448	            0x7476	                            je 0x40024c0	      2243	bfd.c	FUNCTION_38	IF_2
0x400244a	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400244e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4002452	          0x4829c2	                            sub rdx, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4002455	          0x4889d0	                            mov rax, rdx	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4002458	        0x4883c001	                              add rax, 1	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400245c	          0x4889c7	                            mov rdi, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x400245f	      0xe800000000	                          call 0x4002464	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4002464	        0x488945c0	             mov qword [rbp - 0x40], rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4002468	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x400246d	            0x750a	                           jne 0x4002479	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x400246f	      0xb800000000	                              mov eax, 0	      2247	bfd.c	FUNCTION_38	IF_2	IF_3
0x4002474	      0xe9c0010000	                           jmp 0x4002639	      2247	bfd.c	FUNCTION_38	IF_2	IF_3
0x4002479	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x400247d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002481	          0x4829c2	                            sub rdx, rax	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002484	          0x4889d0	                            mov rax, rdx	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002487	          0x4889c2	                            mov rdx, rax	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x400248a	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x400248e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002492	          0x4889ce	                            mov rsi, rcx	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002495	          0x4889c7	                            mov rdi, rax	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x4002498	      0xe800000000	                          call 0x400249d	      2248	bfd.c	FUNCTION_38	IF_2	CALL_4
0x400249d	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2249	bfd.c	FUNCTION_38	IF_2
0x40024a1	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2249	bfd.c	FUNCTION_38	IF_2
0x40024a5	          0x4829c2	                            sub rdx, rax	      2249	bfd.c	FUNCTION_38	IF_2
0x40024a8	          0x4889d0	                            mov rax, rdx	      2249	bfd.c	FUNCTION_38	IF_2
0x40024ab	          0x4889c2	                            mov rdx, rax	      2249	bfd.c	FUNCTION_38	IF_2
0x40024ae	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2249	bfd.c	FUNCTION_38	IF_2
0x40024b2	          0x4801d0	                            add rax, rdx	      2249	bfd.c	FUNCTION_38	IF_2
0x40024b5	          0xc60000	                       mov byte [rax], 0	      2249	bfd.c	FUNCTION_38	IF_2
0x40024b8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2250	bfd.c	FUNCTION_38	IF_2
0x40024bc	        0x488945a0	             mov qword [rbp - 0x60], rax	      2250	bfd.c	FUNCTION_38	IF_2
0x40024c0	          0x8b559c	             mov edx, dword [rbp - 0x64]	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024c3	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024c7	            0x89d6	                            mov esi, edx	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024c9	          0x4889c7	                            mov rdi, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024cc	      0xe800000000	                          call 0x40024d1	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024d1	        0x488945b8	             mov qword [rbp - 0x48], rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x40024d5	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2255	bfd.c	FUNCTION_38	IF_4
0x40024da	            0x740c	                            je 0x40024e8	      2255	bfd.c	FUNCTION_38	IF_4
0x40024dc	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2256	bfd.c	FUNCTION_38	CALL_6
0x40024e0	          0x4889c7	                            mov rdi, rax	      2256	bfd.c	FUNCTION_38	CALL_6
0x40024e3	      0xe800000000	                          call 0x40024e8	      2256	bfd.c	FUNCTION_38	CALL_6
0x40024e8	      0x48837db800	               cmp qword [rbp - 0x48], 0	      2258	bfd.c	FUNCTION_38	IF_5
0x40024ed	            0x7565	                           jne 0x4002554	      2258	bfd.c	FUNCTION_38	IF_5
0x40024ef	        0x837db400	               cmp dword [rbp - 0x4c], 0	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x40024f3	            0x7455	                            je 0x400254a	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x40024f5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40024f9	          0x4889c7	                            mov rdi, rax	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x40024fc	      0xe800000000	                          call 0x4002501	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4002501	        0x4883c001	                              add rax, 1	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4002505	        0x488945e0	             mov qword [rbp - 0x20], rax	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4002509	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x400250d	          0x4889c7	                            mov rdi, rax	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4002510	      0xe800000000	                          call 0x4002515	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4002515	        0x488945c0	             mov qword [rbp - 0x40], rax	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4002519	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x400251e	            0x750a	                           jne 0x400252a	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4002520	      0xb800000000	                              mov eax, 0	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4002525	      0xe90f010000	                           jmp 0x4002639	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x400252a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x400252e	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x4002532	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x4002536	          0x4889ce	                            mov rsi, rcx	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x4002539	          0x4889c7	                            mov rdi, rax	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x400253c	      0xe800000000	                          call 0x4002541	      2266	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_9
0x4002541	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x4002545	      0xe9ef000000	                           jmp 0x4002639	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x400254a	      0xb800000000	                              mov eax, 0	      2269	bfd.c	FUNCTION_38	IF_5
0x400254f	      0xe9e5000000	                           jmp 0x4002639	      2269	bfd.c	FUNCTION_38	IF_5
0x4002554	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      2273	bfd.c	FUNCTION_38	IF_8
0x4002559	            0x750b	                           jne 0x4002566	      2273	bfd.c	FUNCTION_38	IF_8
0x400255b	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      2273	bfd.c	FUNCTION_38	IF_8
0x4002560	     0xf84cf000000	                            je 0x4002635	      2273	bfd.c	FUNCTION_38	IF_8
0x4002566	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400256a	          0x4889c7	                            mov rdi, rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x400256d	      0xe800000000	                          call 0x4002572	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4002572	        0x488945e8	             mov qword [rbp - 0x18], rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4002576	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      2280	bfd.c	FUNCTION_38	IF_8	IF_9
0x400257b	            0x750f	                           jne 0x400258c	      2280	bfd.c	FUNCTION_38	IF_8	IF_9
0x400257d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4002581	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4002585	          0x4801d0	                            add rax, rdx	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4002588	        0x488945c8	             mov qword [rbp - 0x38], rax	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x400258c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4002590	          0x4889c7	                            mov rdi, rax	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4002593	      0xe800000000	                          call 0x4002598	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4002598	        0x4883c001	                              add rax, 1	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x400259c	        0x488945f0	             mov qword [rbp - 0x10], rax	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x40025a0	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025a4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025a8	          0x4801c2	                            add rdx, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025ab	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025af	          0x4801d0	                            add rax, rdx	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025b2	          0x4889c7	                            mov rdi, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025b5	      0xe800000000	                          call 0x40025ba	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025ba	        0x488945f8	                mov qword [rbp - 8], rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x40025be	      0x48837df800	                  cmp qword [rbp - 8], 0	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x40025c3	            0x745c	                            je 0x4002621	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x40025c5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025c9	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025cd	        0x488b45f8	                mov rax, qword [rbp - 8]	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025d1	          0x4889ce	                            mov rsi, rcx	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025d4	          0x4889c7	                            mov rdi, rax	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025d7	      0xe800000000	                          call 0x40025dc	      2286	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_13
0x40025dc	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025e0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025e4	        0x488d0c02	                    lea rcx, [rdx + rax]	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025e8	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025ec	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025f0	          0x4889c6	                            mov rsi, rax	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025f3	          0x4889cf	                            mov rdi, rcx	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025f6	      0xe800000000	                          call 0x40025fb	      2287	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_14
0x40025fb	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x40025ff	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002603	          0x4801c2	                            add rdx, rax	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002606	        0x488b45f8	                mov rax, qword [rbp - 8]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x400260a	        0x488d0c02	                    lea rcx, [rdx + rax]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x400260e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002612	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002616	          0x4889c6	                            mov rsi, rax	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002619	          0x4889cf	                            mov rdi, rcx	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x400261c	      0xe800000000	                          call 0x4002621	      2288	bfd.c	FUNCTION_38	IF_8	IF_10	CALL_15
0x4002621	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x4002625	          0x4889c7	                            mov rdi, rax	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x4002628	      0xe800000000	                          call 0x400262d	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x400262d	        0x488b45f8	                mov rax, qword [rbp - 8]	      2291	bfd.c	FUNCTION_38	IF_8
0x4002631	        0x488945b8	             mov qword [rbp - 0x48], rax	      2291	bfd.c	FUNCTION_38	IF_8
0x4002635	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2294	bfd.c	FUNCTION_38
0x4002639	              0xc9	                                   leave	      2295	bfd.c	FUNCTION_38
0x400263a	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
bfd_sprintf_vma	SWITCH,0:DO,0:WHILE,0:FOR,0:IF,1:CALL,3:functions,0:ELSE,0	27
0x4002050	              0x55	                                push rbp	      1994	bfd.c	FUNCTION_30
0x4002051	          0x4889e5	                            mov rbp, rsp	      1994	bfd.c	FUNCTION_30
0x4002054	        0x4883ec20	                           sub rsp, 0x20	      1994	bfd.c	FUNCTION_30
0x4002058	        0x48897df8	                mov qword [rbp - 8], rdi	      1994	bfd.c	FUNCTION_30
0x400205c	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1994	bfd.c	FUNCTION_30
0x4002060	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1994	bfd.c	FUNCTION_30
0x4002064	        0x488b45f8	                mov rax, qword [rbp - 8]	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4002068	          0x4889c7	                            mov rdi, rax	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x400206b	      0xe881ffffff	                        call sym.is32bit	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4002070	            0x85c0	                           test eax, eax	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4002072	            0x741e	                            je 0x4002092	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4002074	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x4002078	            0x89c2	                            mov edx, eax	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x400207a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x400207e	      0xbe00000000	                              mov esi, 0	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x4002083	          0x4889c7	                            mov rdi, rax	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x4002086	      0xb800000000	                              mov eax, 0	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x400208b	      0xe800000000	                          call 0x4002090	      1998	bfd.c	FUNCTION_30	IF_1	CALL_2
0x4002090	            0xeb1a	                           jmp 0x40020ac	      1999	bfd.c	FUNCTION_30	IF_1
0x4002092	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2002	bfd.c	FUNCTION_30	CALL_3
0x4002096	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2002	bfd.c	FUNCTION_30	CALL_3
0x400209a	      0xbe00000000	                              mov esi, 0	      2002	bfd.c	FUNCTION_30	CALL_3
0x400209f	          0x4889c7	                            mov rdi, rax	      2002	bfd.c	FUNCTION_30	CALL_3
0x40020a2	      0xb800000000	                              mov eax, 0	      2002	bfd.c	FUNCTION_30	CALL_3
0x40020a7	      0xe800000000	                          call 0x40020ac	      2002	bfd.c	FUNCTION_30	CALL_3
0x40020ac	              0xc9	                                   leave	      2003	bfd.c	FUNCTION_30
0x40020ad	              0xc3	                                     ret	      2003	bfd.c	FUNCTION_30
