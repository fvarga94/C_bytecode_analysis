input_statement_is_archive_path	functions,0:ELSE,0:FOR,0:CALL,2:IF,2:DO,0:WHILE,0:SWITCH,0	66
0x4000251	              0x55	                                push rbp	       181	ldlang.c	FUNCTION_4
0x4000252	          0x4889e5	                            mov rbp, rsp	       181	ldlang.c	FUNCTION_4
0x4000255	        0x4883ec30	                           sub rsp, 0x30	       181	ldlang.c	FUNCTION_4
0x4000259	        0x48897de8	             mov qword [rbp - 0x18], rdi	       181	ldlang.c	FUNCTION_4
0x400025d	        0x488975e0	             mov qword [rbp - 0x20], rsi	       181	ldlang.c	FUNCTION_4
0x4000261	        0x488955d8	             mov qword [rbp - 0x28], rdx	       181	ldlang.c	FUNCTION_4
0x4000265	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       182	ldlang.c	FUNCTION_4
0x400026c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       184	ldlang.c	FUNCTION_4	IF_1
0x4000270	        0x4883c001	                              add rax, 1	       184	ldlang.c	FUNCTION_4	IF_1
0x4000274	           0xfb600	                   movzx eax, byte [rax]	       184	ldlang.c	FUNCTION_4	IF_1
0x4000277	            0x84c0	                             test al, al	       184	ldlang.c	FUNCTION_4	IF_1
0x4000279	            0x7423	                            je 0x400029e	       184	ldlang.c	FUNCTION_4	IF_1
0x400027b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x400027f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x4000283	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x4000287	        0x4883c201	                              add rdx, 1	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x400028b	          0x4889c6	                            mov rsi, rax	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x400028e	          0x4889d7	                            mov rdi, rdx	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x4000291	      0xe81fffffff	                     call sym.name_match	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x4000296	            0x85c0	                           test eax, eax	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x4000298	     0xf859a000000	                           jne 0x4000338	       185	ldlang.c	FUNCTION_4	IF_1	CALL_1
0x400029e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       187	ldlang.c	FUNCTION_4	IF_1
0x40002a2	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       187	ldlang.c	FUNCTION_4	IF_1
0x40002a6	           0xf94c2	                                 sete dl	       187	ldlang.c	FUNCTION_4	IF_1
0x40002a9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       187	ldlang.c	FUNCTION_4	IF_1
0x40002ad	        0x488b4020	            mov rax, qword [rax + 0x20] 	       187	ldlang.c	FUNCTION_4	IF_1
0x40002b1	          0x4885c0	                           test rax, rax	       187	ldlang.c	FUNCTION_4	IF_1
0x40002b4	            0x741b	                            je 0x40002d1	       187	ldlang.c	FUNCTION_4	IF_1
0x40002b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       187	ldlang.c	FUNCTION_4	IF_1
0x40002ba	        0x488b4020	            mov rax, qword [rax + 0x20] 	       187	ldlang.c	FUNCTION_4	IF_1
0x40002be	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       187	ldlang.c	FUNCTION_4	IF_1
0x40002c5	          0x4885c0	                           test rax, rax	       187	ldlang.c	FUNCTION_4	IF_1
0x40002c8	            0x7407	                            je 0x40002d1	       187	ldlang.c	FUNCTION_4	IF_1
0x40002ca	      0xb801000000	                              mov eax, 1	       187	ldlang.c	FUNCTION_4	IF_1
0x40002cf	            0xeb05	                           jmp 0x40002d6	       187	ldlang.c	FUNCTION_4	IF_1
0x40002d1	      0xb800000000	                              mov eax, 0	       187	ldlang.c	FUNCTION_4	IF_1
0x40002d6	          0x83e001	                              and eax, 1	       187	ldlang.c	FUNCTION_4	IF_1
0x40002d9	            0x31d0	                            xor eax, edx	       187	ldlang.c	FUNCTION_4	IF_1
0x40002db	            0x84c0	                             test al, al	       186	ldlang.c	FUNCTION_4	IF_1
0x40002dd	            0x7459	                            je 0x4000338	       186	ldlang.c	FUNCTION_4	IF_1
0x40002df	    0xc745f4010000	                mov dword [rbp - 0xc], 1	       189	ldlang.c	FUNCTION_4	IF_1
0x40002e6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       191	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002ea	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       191	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002ee	            0x7448	                            je 0x4000338	       191	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002f0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       193	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002f4	        0x488b4020	            mov rax, qword [rax + 0x20] 	       193	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002f8	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       193	ldlang.c	FUNCTION_4	IF_1	IF_2
0x40002ff	          0x488b00	                    mov rax, qword [rax]	       193	ldlang.c	FUNCTION_4	IF_1	IF_2
0x4000302	        0x488945f8	                mov qword [rbp - 8], rax	       193	ldlang.c	FUNCTION_4	IF_1	IF_2
0x4000306	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       194	ldlang.c	FUNCTION_4	IF_1	IF_2
0x400030a	          0xc60000	                       mov byte [rax], 0	       194	ldlang.c	FUNCTION_4	IF_1	IF_2
0x400030d	        0x488b55f8	                mov rdx, qword [rbp - 8]	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000311	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000315	          0x4889d6	                            mov rsi, rdx	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000318	          0x4889c7	                            mov rdi, rax	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400031b	      0xe895feffff	                     call sym.name_match	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000320	            0x85c0	                           test eax, eax	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000322	           0xf94c0	                                 sete al	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000325	           0xfb6c0	                           movzx eax, al	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000328	          0x8945f4	              mov dword [rbp - 0xc], eax	       195	ldlang.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400032b	     0xfb615000000	           movzx edx, byte [0x04000332] 	       196	ldlang.c	FUNCTION_4	IF_1	IF_2
0x4000332	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       196	ldlang.c	FUNCTION_4	IF_1	IF_2
0x4000336	            0x8810	                      mov byte [rax], dl	       196	ldlang.c	FUNCTION_4	IF_1	IF_2
0x4000338	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       199	ldlang.c	FUNCTION_4
0x400033b	              0xc9	                                   leave	       200	ldlang.c	FUNCTION_4
0x400033c	              0xc3	                                     ret	       200	ldlang.c	FUNCTION_4
sort_sections_by_vma	functions,0:ELSE,3:FOR,0:CALL,0:IF,4:DO,0:WHILE,0:SWITCH,0	45
0x40085f6	              0x55	                                push rbp	      4760	ldlang.c	FUNCTION_111
0x40085f7	          0x4889e5	                            mov rbp, rsp	      4760	ldlang.c	FUNCTION_111
0x40085fa	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4760	ldlang.c	FUNCTION_111
0x40085fe	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4760	ldlang.c	FUNCTION_111
0x4008602	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4761	ldlang.c	FUNCTION_111
0x4008606	          0x488b00	                    mov rax, qword [rax]	      4761	ldlang.c	FUNCTION_111
0x4008609	        0x488945f0	             mov qword [rbp - 0x10], rax	      4761	ldlang.c	FUNCTION_111
0x400860d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4762	ldlang.c	FUNCTION_111
0x4008611	          0x488b00	                    mov rax, qword [rax]	      4762	ldlang.c	FUNCTION_111
0x4008614	        0x488945f8	                mov qword [rbp - 8], rax	      4762	ldlang.c	FUNCTION_111
0x4008618	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4764	ldlang.c	FUNCTION_111	IF_1
0x400861c	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4764	ldlang.c	FUNCTION_111	IF_1
0x4008620	        0x488b45f8	                mov rax, qword [rbp - 8]	      4764	ldlang.c	FUNCTION_111	IF_1
0x4008624	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4764	ldlang.c	FUNCTION_111	IF_1
0x4008628	          0x4839c2	                            cmp rdx, rax	      4764	ldlang.c	FUNCTION_111	IF_1
0x400862b	            0x7307	                           jae 0x4008634	      4764	ldlang.c	FUNCTION_111	IF_1
0x400862d	      0xb8ffffffff	                     mov eax, 0xffffffff	      4765	ldlang.c	FUNCTION_111	IF_1
0x4008632	            0xeb53	                           jmp 0x4008687	      4765	ldlang.c	FUNCTION_111	IF_1
0x4008634	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008638	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x400863c	        0x488b45f8	                mov rax, qword [rbp - 8]	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008640	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008644	          0x4839c2	                            cmp rdx, rax	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008647	            0x7607	                           jbe 0x4008650	      4766	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008649	      0xb801000000	                              mov eax, 1	      4767	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x400864e	            0xeb37	                           jmp 0x4008687	      4767	ldlang.c	FUNCTION_111	ELSE_1	IF_2
0x4008650	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008654	          0x8b5008	                mov edx, dword [rax + 8]	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008657	        0x488b45f8	                mov rax, qword [rbp - 8]	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x400865b	          0x8b4008	                mov eax, dword [rax + 8]	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x400865e	            0x39c2	                            cmp edx, eax	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008660	            0x7307	                           jae 0x4008669	      4768	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008662	      0xb8ffffffff	                     mov eax, 0xffffffff	      4769	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008667	            0xeb1e	                           jmp 0x4008687	      4769	ldlang.c	FUNCTION_111	ELSE_2	IF_3
0x4008669	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x400866d	          0x8b5008	                mov edx, dword [rax + 8]	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008670	        0x488b45f8	                mov rax, qword [rbp - 8]	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008674	          0x8b4008	                mov eax, dword [rax + 8]	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008677	            0x39c2	                            cmp edx, eax	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008679	            0x7607	                           jbe 0x4008682	      4770	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x400867b	      0xb801000000	                              mov eax, 1	      4771	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008680	            0xeb05	                           jmp 0x4008687	      4771	ldlang.c	FUNCTION_111	ELSE_3	IF_4
0x4008682	      0xb800000000	                              mov eax, 0	      4773	ldlang.c	FUNCTION_111
0x4008687	              0x5d	                                 pop rbp	      4774	ldlang.c	FUNCTION_111
0x4008688	              0xc3	                                     ret	      4774	ldlang.c	FUNCTION_111
get_init_priority	functions,0:ELSE,1:FOR,0:CALL,6:IF,2:DO,0:WHILE,0:SWITCH,0	75
0x400084e	              0x55	                                push rbp	       392	ldlang.c	FUNCTION_13
0x400084f	          0x4889e5	                            mov rbp, rsp	       392	ldlang.c	FUNCTION_13
0x4000852	        0x4883ec30	                           sub rsp, 0x30	       392	ldlang.c	FUNCTION_13
0x4000856	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       392	ldlang.c	FUNCTION_13
0x400085a	    0x64488b042528	                mov rax, qword fs:[0x28]	       392	ldlang.c	FUNCTION_13
0x4000863	        0x488945f8	                mov qword [rbp - 8], rax	       392	ldlang.c	FUNCTION_13
0x4000867	            0x31c0	                            xor eax, eax	       392	ldlang.c	FUNCTION_13
0x4000869	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x400086d	      0xba0c000000	                            mov edx, 0xc	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x4000872	      0xbe00000000	                              mov esi, 0	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x4000877	          0x4889c7	                            mov rdi, rax	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x400087a	      0xe800000000	                          call 0x400087f	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x400087f	            0x85c0	                           test eax, eax	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x4000881	            0x741a	                            je 0x400089d	       409	ldlang.c	FUNCTION_13	IF_1	CALL_1
0x4000883	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x4000887	      0xba0c000000	                            mov edx, 0xc	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x400088c	      0xbe00000000	                              mov esi, 0	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x4000891	          0x4889c7	                            mov rdi, rax	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x4000894	      0xe800000000	                          call 0x4000899	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x4000899	            0x85c0	                           test eax, eax	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x400089b	            0x7538	                           jne 0x40008d5	       410	ldlang.c	FUNCTION_13	IF_1	CALL_2
0x400089d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008a1	        0x488d480c	                    lea rcx, [rax + 0xc]	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008a5	        0x488d45e8	                   lea rax, [rbp - 0x18]	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008a9	      0xba0a000000	                            mov edx, 0xa	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008ae	          0x4889c6	                            mov rsi, rax	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008b1	          0x4889cf	                            mov rdi, rcx	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008b4	      0xe800000000	                          call 0x40008b9	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008b9	        0x488945f0	             mov qword [rbp - 0x10], rax	       412	ldlang.c	FUNCTION_13	IF_1	CALL_3
0x40008bd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       413	ldlang.c	FUNCTION_13	IF_1
0x40008c1	           0xfb600	                   movzx eax, byte [rax]	       413	ldlang.c	FUNCTION_13	IF_1
0x40008c4	            0x84c0	                             test al, al	       413	ldlang.c	FUNCTION_13	IF_1
0x40008c6	            0x7506	                           jne 0x40008ce	       413	ldlang.c	FUNCTION_13	IF_1
0x40008c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       413	ldlang.c	FUNCTION_13	IF_1
0x40008cc	            0xeb7d	                           jmp 0x400094b	       413	ldlang.c	FUNCTION_13	IF_1
0x40008ce	      0xb800000000	                              mov eax, 0	       413	ldlang.c	FUNCTION_13	IF_1
0x40008d3	            0xeb76	                           jmp 0x400094b	       413	ldlang.c	FUNCTION_13	IF_1
0x40008d5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008d9	      0xba07000000	                              mov edx, 7	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008de	      0xbe00000000	                              mov esi, 0	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008e3	          0x4889c7	                            mov rdi, rax	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008e6	      0xe800000000	                          call 0x40008eb	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008eb	            0x85c0	                           test eax, eax	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008ed	            0x741a	                            je 0x4000909	       415	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_4
0x40008ef	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x40008f3	      0xba07000000	                              mov edx, 7	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x40008f8	      0xbe00000000	                              mov esi, 0	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x40008fd	          0x4889c7	                            mov rdi, rax	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x4000900	      0xe800000000	                          call 0x4000905	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x4000905	            0x85c0	                           test eax, eax	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x4000907	            0x753d	                           jne 0x4000946	       416	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_5
0x4000909	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x400090d	        0x488d4807	                      lea rcx, [rax + 7]	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x4000911	        0x488d45e8	                   lea rax, [rbp - 0x18]	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x4000915	      0xba0a000000	                            mov edx, 0xa	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x400091a	          0x4889c6	                            mov rsi, rax	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x400091d	          0x4889cf	                            mov rdi, rcx	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x4000920	      0xe800000000	                          call 0x4000925	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x4000925	        0x488945f0	             mov qword [rbp - 0x10], rax	       418	ldlang.c	FUNCTION_13	ELSE_1	IF_2	CALL_6
0x4000929	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x400092d	           0xfb600	                   movzx eax, byte [rax]	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000930	            0x84c0	                             test al, al	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000932	            0x750b	                           jne 0x400093f	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000934	      0xb8ffff0000	                         mov eax, 0xffff	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000939	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x400093d	            0xeb0c	                           jmp 0x400094b	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x400093f	      0xb800000000	                              mov eax, 0	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000944	            0xeb05	                           jmp 0x400094b	       419	ldlang.c	FUNCTION_13	ELSE_1	IF_2
0x4000946	      0xb800000000	                              mov eax, 0	       422	ldlang.c	FUNCTION_13
0x400094b	        0x488b4df8	                mov rcx, qword [rbp - 8]	       423	ldlang.c	FUNCTION_13
0x400094f	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       423	ldlang.c	FUNCTION_13
0x4000958	            0x7405	                            je 0x400095f	       423	ldlang.c	FUNCTION_13
0x400095a	      0xe800000000	                          call 0x400095f	       423	ldlang.c	FUNCTION_13
0x400095f	              0xc9	                                   leave	       423	ldlang.c	FUNCTION_13
0x4000960	              0xc3	                                     ret	       423	ldlang.c	FUNCTION_13
print_data_statement	functions,0:ELSE,0:FOR,1:CALL,7:IF,3:DO,0:WHILE,0:SWITCH,1	101
0x40077a2	              0x55	                                push rbp	      4279	ldlang.c	FUNCTION_98
0x40077a3	          0x4889e5	                            mov rbp, rsp	      4279	ldlang.c	FUNCTION_98
0x40077a6	        0x4883ec30	                           sub rsp, 0x30	      4279	ldlang.c	FUNCTION_98
0x40077aa	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4279	ldlang.c	FUNCTION_98
0x40077ae	      0xe8eae2ffff	                       call sym.init_opb	      4285	ldlang.c	FUNCTION_98	CALL_1
0x40077b3	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      4286	ldlang.c	FUNCTION_98	FOR_1
0x40077ba	            0xeb09	                           jmp 0x40077c5	      4286	ldlang.c	FUNCTION_98	FOR_1
0x40077bc	      0xe800000000	                          call 0x40077c1	      4287	ldlang.c	FUNCTION_98	CALL_2
0x40077c1	        0x8345e401	               add dword [rbp - 0x1c], 1	      4286	ldlang.c	FUNCTION_98	FOR_1
0x40077c5	        0x837de40f	            cmp dword [rbp - 0x1c], 0xf 	      4286	ldlang.c	FUNCTION_98	FOR_1
0x40077c9	            0x7ef1	                           jle 0x40077bc	      4286	ldlang.c	FUNCTION_98	FOR_1
0x40077cb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4289	ldlang.c	FUNCTION_98
0x40077cf	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4289	ldlang.c	FUNCTION_98
0x40077d3	        0x488945e8	             mov qword [rbp - 0x18], rax	      4289	ldlang.c	FUNCTION_98
0x40077d7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4290	ldlang.c	FUNCTION_98	IF_1
0x40077db	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4290	ldlang.c	FUNCTION_98	IF_1
0x40077df	          0x4885c0	                           test rax, rax	      4290	ldlang.c	FUNCTION_98	IF_1
0x40077e2	            0x7410	                            je 0x40077f4	      4290	ldlang.c	FUNCTION_98	IF_1
0x40077e4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4291	ldlang.c	FUNCTION_98	IF_1
0x40077e8	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4291	ldlang.c	FUNCTION_98	IF_1
0x40077ec	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4291	ldlang.c	FUNCTION_98	IF_1
0x40077f0	        0x480145e8	            add qword [rbp - 0x18], rax 	      4291	ldlang.c	FUNCTION_98	IF_1
0x40077f4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x40077f8	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x40077fb	      0x2d1a010000	                          sub eax, 0x11a	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x4007800	          0x83f804	                              cmp eax, 4	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x4007803	            0x770c	                            ja 0x4007811	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x4007805	            0x89c0	                            mov eax, eax	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x4007807	    0x488b04c50000	                  mov rax, qword [rax*8]	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x400780f	            0xffe0	                                 jmp rax	      4293	ldlang.c	FUNCTION_98	SWITCH_1
0x4007811	      0xba00000000	                              mov edx, 0	      4296	ldlang.c	FUNCTION_98	SWITCH_1	CALL_3
0x4007816	      0xbec8100000	                         mov esi, 0x10c8	      4296	ldlang.c	FUNCTION_98	SWITCH_1	CALL_3
0x400781b	      0xbf00000000	                              mov edi, 0	      4296	ldlang.c	FUNCTION_98	SWITCH_1	CALL_3
0x4007820	      0xe800000000	                          call 0x4007825	      4296	ldlang.c	FUNCTION_98	SWITCH_1	CALL_3
0x4007825	    0x48c745f00100	               mov qword [rbp - 0x10], 1	      4298	ldlang.c	FUNCTION_98	SWITCH_1
0x400782d	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4299	ldlang.c	FUNCTION_98	SWITCH_1
0x4007835	            0xeb47	                           jmp 0x400787e	      4300	ldlang.c	FUNCTION_98	SWITCH_1
0x4007837	    0x48c745f00200	               mov qword [rbp - 0x10], 2	      4302	ldlang.c	FUNCTION_98	SWITCH_1
0x400783f	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4303	ldlang.c	FUNCTION_98	SWITCH_1
0x4007847	            0xeb35	                           jmp 0x400787e	      4304	ldlang.c	FUNCTION_98	SWITCH_1
0x4007849	    0x48c745f00400	               mov qword [rbp - 0x10], 4	      4306	ldlang.c	FUNCTION_98	SWITCH_1
0x4007851	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4307	ldlang.c	FUNCTION_98	SWITCH_1
0x4007859	            0xeb23	                           jmp 0x400787e	      4308	ldlang.c	FUNCTION_98	SWITCH_1
0x400785b	    0x48c745f00800	               mov qword [rbp - 0x10], 8	      4310	ldlang.c	FUNCTION_98	SWITCH_1
0x4007863	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4311	ldlang.c	FUNCTION_98	SWITCH_1
0x400786b	            0xeb11	                           jmp 0x400787e	      4312	ldlang.c	FUNCTION_98	SWITCH_1
0x400786d	    0x48c745f00800	               mov qword [rbp - 0x10], 8	      4314	ldlang.c	FUNCTION_98	SWITCH_1
0x4007875	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4315	ldlang.c	FUNCTION_98	SWITCH_1
0x400787d	              0x90	                                     nop	      4316	ldlang.c	FUNCTION_98	SWITCH_1
0x400787e	    0x8b0500000000	            mov eax, dword [0x04007884] 	      4319	ldlang.c	FUNCTION_98	IF_2
0x4007884	      0xba01000000	                              mov edx, 1	      4319	ldlang.c	FUNCTION_98	IF_2
0x4007889	            0x89c1	                            mov ecx, eax	      4319	ldlang.c	FUNCTION_98	IF_2
0x400788b	            0xd3e2	                             shl edx, cl	      4319	ldlang.c	FUNCTION_98	IF_2
0x400788d	            0x89d0	                            mov eax, edx	      4319	ldlang.c	FUNCTION_98	IF_2
0x400788f	            0x89c0	                            mov eax, eax	      4319	ldlang.c	FUNCTION_98	IF_2
0x4007891	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      4319	ldlang.c	FUNCTION_98	IF_2
0x4007895	            0x7617	                           jbe 0x40078ae	      4319	ldlang.c	FUNCTION_98	IF_2
0x4007897	    0x8b0500000000	            mov eax, dword [0x0400789d] 	      4320	ldlang.c	FUNCTION_98	IF_2
0x400789d	      0xba01000000	                              mov edx, 1	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078a2	            0x89c1	                            mov ecx, eax	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078a4	            0xd3e2	                             shl edx, cl	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078a6	            0x89d0	                            mov eax, edx	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078a8	            0x89c0	                            mov eax, eax	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078aa	        0x488945f0	             mov qword [rbp - 0x10], rax	      4320	ldlang.c	FUNCTION_98	IF_2
0x40078ae	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078b2	        0x488b7820	            mov rdi, qword [rax + 0x20] 	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078b6	    0x8b0500000000	            mov eax, dword [0x040078bc] 	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078bc	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078c0	          0x4889d6	                            mov rsi, rdx	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078c3	            0x89c1	                            mov ecx, eax	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078c5	          0x48d3ee	                             shr rsi, cl	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078c8	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078cc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078d0	          0x4989f8	                             mov r8, rdi	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078d3	          0x4889d1	                            mov rcx, rdx	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078d6	          0x4889f2	                            mov rdx, rsi	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078d9	          0x4889c6	                            mov rsi, rax	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078dc	      0xbf00000000	                              mov edi, 0	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078e1	      0xb800000000	                              mov eax, 0	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078e6	      0xe800000000	                          call 0x40078eb	      4321	ldlang.c	FUNCTION_98	CALL_4
0x40078eb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4323	ldlang.c	FUNCTION_98	IF_3
0x40078ef	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4323	ldlang.c	FUNCTION_98	IF_3
0x40078f3	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4323	ldlang.c	FUNCTION_98	IF_3
0x40078f6	          0x83f807	                              cmp eax, 7	      4323	ldlang.c	FUNCTION_98	IF_3
0x40078f9	            0x7415	                            je 0x4007910	      4323	ldlang.c	FUNCTION_98	IF_3
0x40078fb	      0xe800000000	                          call 0x4007900	      4325	ldlang.c	FUNCTION_98	IF_3	CALL_5
0x4007900	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4326	ldlang.c	FUNCTION_98	IF_3	CALL_6
0x4007904	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4326	ldlang.c	FUNCTION_98	IF_3	CALL_6
0x4007908	          0x4889c7	                            mov rdi, rax	      4326	ldlang.c	FUNCTION_98	IF_3	CALL_6
0x400790b	      0xe800000000	                          call 0x4007910	      4326	ldlang.c	FUNCTION_98	IF_3	CALL_6
0x4007910	      0xe800000000	                          call 0x4007915	      4329	ldlang.c	FUNCTION_98	CALL_7
0x4007915	    0x8b0500000000	            mov eax, dword [0x0400791b] 	      4331	ldlang.c	FUNCTION_98
0x400791b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      4331	ldlang.c	FUNCTION_98
0x400791f	            0x89c1	                            mov ecx, eax	      4331	ldlang.c	FUNCTION_98
0x4007921	          0x48d3ea	                             shr rdx, cl	      4331	ldlang.c	FUNCTION_98
0x4007924	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4331	ldlang.c	FUNCTION_98
0x4007928	          0x4801d0	                            add rax, rdx	      4331	ldlang.c	FUNCTION_98
0x400792b	    0x488905000000	            mov qword [0x04007932], rax 	      4331	ldlang.c	FUNCTION_98
0x4007932	              0x90	                                     nop	      4332	ldlang.c	FUNCTION_98
0x4007933	              0xc9	                                   leave	      4332	ldlang.c	FUNCTION_98
0x4007934	              0xc3	                                     ret	      4332	ldlang.c	FUNCTION_98
insert_os_after	functions,0:ELSE,0:FOR,1:CALL,0:IF,4:DO,0:WHILE,0:SWITCH,1	85
0x4002db7	              0x55	                                push rbp	      1758	ldlang.c	FUNCTION_49
0x4002db8	          0x4889e5	                            mov rbp, rsp	      1758	ldlang.c	FUNCTION_49
0x4002dbb	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1758	ldlang.c	FUNCTION_49
0x4002dbf	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1760	ldlang.c	FUNCTION_49
0x4002dc7	    0x488b05000000	            mov rax, qword [0x04002dce] 	      1764	ldlang.c	FUNCTION_49
0x4002dce	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	      1764	ldlang.c	FUNCTION_49
0x4002dd2	           0xf94c0	                                 sete al	      1764	ldlang.c	FUNCTION_49
0x4002dd5	           0xfb6c0	                           movzx eax, al	      1764	ldlang.c	FUNCTION_49
0x4002dd8	          0x8945dc	             mov dword [rbp - 0x24], eax	      1764	ldlang.c	FUNCTION_49
0x4002ddb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002ddf	        0x488945e0	             mov qword [rbp - 0x20], rax	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002de3	      0xe9de000000	                           jmp 0x4002ec6	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002de8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002dec	          0x488b00	                    mov rax, qword [rax]	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002def	          0x8b4008	                mov eax, dword [rax + 8]	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002df2	          0x83f80f	                            cmp eax, 0xf	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002df5	     0xf87dd000000	                            ja 0x4002ed8	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002dfb	            0x89c0	                            mov eax, eax	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002dfd	    0x488b04c50000	                  mov rax, qword [rax*8]	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e05	            0xffe0	                                 jmp rax	      1770	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e07	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1773	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1
0x4002e0c	            0x7553	                           jne 0x4002e61	      1773	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1
0x4002e0e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1777	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1
0x4002e12	          0x488b00	                    mov rax, qword [rax]	      1777	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1
0x4002e15	        0x488945f0	             mov qword [rbp - 0x10], rax	      1777	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1
0x4002e19	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1778	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e1d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1778	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e21	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1778	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e24	          0x83f808	                              cmp eax, 8	      1778	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e27	            0x7438	                            je 0x4002e61	      1778	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e29	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e2d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e31	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e35	           0xfb600	                   movzx eax, byte [rax]	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e38	            0x3c2e	                            cmp al, 0x2e	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e3a	            0x7525	                           jne 0x4002e61	      1779	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e3c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e40	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e44	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e48	        0x4883c001	                              add rax, 1	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e4c	           0xfb600	                   movzx eax, byte [rax]	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e4f	            0x84c0	                             test al, al	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e51	            0x750e	                           jne 0x4002e61	      1780	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e53	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1781	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e57	            0x7508	                           jne 0x4002e61	      1781	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e59	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1782	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e5d	        0x488945e8	             mov qword [rbp - 0x18], rax	      1782	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_1	IF_2
0x4002e61	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1784	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e68	            0xeb51	                           jmp 0x4002ebb	      1785	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e6a	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1794	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e72	            0xeb47	                           jmp 0x4002ebb	      1795	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002e74	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1797	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e79	            0x743c	                            je 0x4002eb7	      1797	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e7b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1799	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e7f	          0x488b00	                    mov rax, qword [rax]	      1799	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e82	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1799	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e86	        0x488945f8	                mov qword [rbp - 8], rax	      1799	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3
0x4002e8a	      0x48837df800	                  cmp qword [rbp - 8], 0	      1801	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002e8f	            0x741e	                            je 0x4002eaf	      1801	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002e91	        0x488b45f8	                mov rax, qword [rbp - 8]	      1802	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002e95	    0x488b80080100	           mov rax, qword [rax + 0x108] 	      1802	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002e9c	          0x4885c0	                           test rax, rax	      1802	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002e9f	            0x740e	                            je 0x4002eaf	      1802	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002ea1	        0x488b45f8	                mov rax, qword [rbp - 8]	      1803	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002ea5	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1803	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002ea8	          0x83e001	                              and eax, 1	      1803	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002eab	            0x85c0	                           test eax, eax	      1803	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002ead	            0x7408	                            je 0x4002eb7	      1803	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002eaf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1804	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002eb3	        0x488945e0	             mov qword [rbp - 0x20], rax	      1804	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1	IF_3	IF_4
0x4002eb7	              0x90	                                     nop	      1806	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002eb8	            0xeb1e	                           jmp 0x4002ed8	      1815	ldlang.c	FUNCTION_49	FOR_1
0x4002eba	              0x90	                                     nop	      1813	ldlang.c	FUNCTION_49	FOR_1	SWITCH_1
0x4002ebb	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1768	ldlang.c	FUNCTION_49	FOR_1
0x4002ebf	          0x488b00	                    mov rax, qword [rax]	      1768	ldlang.c	FUNCTION_49	FOR_1
0x4002ec2	        0x488945e0	             mov qword [rbp - 0x20], rax	      1768	ldlang.c	FUNCTION_49	FOR_1
0x4002ec6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1767	ldlang.c	FUNCTION_49	FOR_1
0x4002eca	          0x488b00	                    mov rax, qword [rax]	      1767	ldlang.c	FUNCTION_49	FOR_1
0x4002ecd	          0x4885c0	                           test rax, rax	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002ed0	     0xf8512ffffff	                           jne 0x4002de8	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002ed6	            0xeb01	                           jmp 0x4002ed9	      1766	ldlang.c	FUNCTION_49	FOR_1
0x4002ed8	              0x90	                                     nop	      1815	ldlang.c	FUNCTION_49	FOR_1
0x4002ed9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1818	ldlang.c	FUNCTION_49
0x4002edd	              0x5d	                                 pop rbp	      1819	ldlang.c	FUNCTION_49
0x4002ede	              0xc3	                                     ret	      1819	ldlang.c	FUNCTION_49
push_stat_ptr	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	22
0x40019c7	              0x55	                                push rbp	      1015	ldlang.c	FUNCTION_31
0x40019c8	          0x4889e5	                            mov rbp, rsp	      1015	ldlang.c	FUNCTION_31
0x40019cb	        0x4883ec10	                           sub rsp, 0x10	      1015	ldlang.c	FUNCTION_31
0x40019cf	        0x48897df8	                mov qword [rbp - 8], rdi	      1015	ldlang.c	FUNCTION_31
0x40019d3	    0x488b05000000	            mov rax, qword [0x040019da] 	      1016	ldlang.c	FUNCTION_31	IF_1
0x40019da	      0xba00000000	                              mov edx, 0	      1016	ldlang.c	FUNCTION_31	IF_1
0x40019df	          0x4839d0	                            cmp rax, rdx	      1016	ldlang.c	FUNCTION_31	IF_1
0x40019e2	            0x7214	                            jb 0x40019f8	      1016	ldlang.c	FUNCTION_31	IF_1
0x40019e4	      0xba00000000	                              mov edx, 0	      1017	ldlang.c	FUNCTION_31	CALL_1
0x40019e9	      0xbef9030000	                          mov esi, 0x3f9	      1017	ldlang.c	FUNCTION_31	CALL_1
0x40019ee	      0xbf00000000	                              mov edi, 0	      1017	ldlang.c	FUNCTION_31	CALL_1
0x40019f3	      0xe800000000	                          call 0x40019f8	      1017	ldlang.c	FUNCTION_31	CALL_1
0x40019f8	    0x488b05000000	            mov rax, qword [0x040019ff] 	      1018	ldlang.c	FUNCTION_31
0x40019ff	        0x488d5008	                      lea rdx, [rax + 8]	      1018	ldlang.c	FUNCTION_31
0x4001a03	    0x488915000000	            mov qword [0x04001a0a], rdx 	      1018	ldlang.c	FUNCTION_31
0x4001a0a	    0x488b15000000	            mov rdx, qword [0x04001a11] 	      1018	ldlang.c	FUNCTION_31
0x4001a11	          0x488910	                    mov qword [rax], rdx	      1018	ldlang.c	FUNCTION_31
0x4001a14	        0x488b45f8	                mov rax, qword [rbp - 8]	      1019	ldlang.c	FUNCTION_31
0x4001a18	    0x488905000000	            mov qword [0x04001a1f], rax 	      1019	ldlang.c	FUNCTION_31
0x4001a1f	              0x90	                                     nop	      1020	ldlang.c	FUNCTION_31
0x4001a20	              0xc9	                                   leave	      1020	ldlang.c	FUNCTION_31
0x4001a21	              0xc3	                                     ret	      1020	ldlang.c	FUNCTION_31
lang_memory_region_alias	functions,0:ELSE,0:FOR,2:CALL,12:IF,4:DO,0:WHILE,0:SWITCH,0	100
0x40022d5	              0x55	                                push rbp	      1351	ldlang.c	FUNCTION_42
0x40022d6	          0x4889e5	                            mov rbp, rsp	      1351	ldlang.c	FUNCTION_42
0x40022d9	        0x4883ec30	                           sub rsp, 0x30	      1351	ldlang.c	FUNCTION_42
0x40022dd	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1351	ldlang.c	FUNCTION_42
0x40022e1	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1351	ldlang.c	FUNCTION_42
0x40022e5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022e9	      0xbe00000000	                              mov esi, 0	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022ee	          0x4889c7	                            mov rdi, rax	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022f1	      0xe800000000	                          call 0x40022f6	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022f6	            0x85c0	                           test eax, eax	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022f8	            0x7415	                            je 0x400230f	      1359	ldlang.c	FUNCTION_42	IF_1	CALL_1
0x40022fa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x40022fe	      0xbe00000000	                              mov esi, 0	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x4002303	          0x4889c7	                            mov rdi, rax	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x4002306	      0xe800000000	                          call 0x400230b	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x400230b	            0x85c0	                           test eax, eax	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x400230d	            0x751c	                           jne 0x400232b	      1360	ldlang.c	FUNCTION_42	IF_1	CALL_2
0x400230f	      0xbf00000000	                              mov edi, 0	      1361	ldlang.c	FUNCTION_42	CALL_4
0x4002314	      0xe800000000	                          call 0x4002319	      1361	ldlang.c	FUNCTION_42	CALL_4
0x4002319	      0xbe00000000	                              mov esi, 0	      1361	ldlang.c	FUNCTION_42	CALL_4
0x400231e	          0x4889c7	                            mov rdi, rax	      1361	ldlang.c	FUNCTION_42	CALL_4
0x4002321	      0xb800000000	                              mov eax, 0	      1361	ldlang.c	FUNCTION_42	CALL_4
0x4002326	      0xe800000000	                          call 0x400232b	      1361	ldlang.c	FUNCTION_42	CALL_4
0x400232b	    0x48c745f80000	                  mov qword [rbp - 8], 0	      1365	ldlang.c	FUNCTION_42
0x4002333	    0x488b05000000	            mov rax, qword [0x0400233a] 	      1366	ldlang.c	FUNCTION_42	FOR_1
0x400233a	        0x488945f0	             mov qword [rbp - 0x10], rax	      1366	ldlang.c	FUNCTION_42	FOR_1
0x400233e	      0xe992000000	                           jmp 0x40023d5	      1366	ldlang.c	FUNCTION_42	FOR_1
0x4002343	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x4002347	        0x488945e8	             mov qword [rbp - 0x18], rax	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x400234b	            0xeb75	                           jmp 0x40023c2	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x400234d	      0x48837df800	                  cmp qword [rbp - 8], 0	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x4002352	            0x7522	                           jne 0x4002376	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x4002354	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x4002358	          0x488b00	                    mov rax, qword [rax]	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x400235b	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x400235f	          0x4889d6	                            mov rsi, rdx	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x4002362	          0x4889c7	                            mov rdi, rax	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x4002365	      0xe800000000	                          call 0x400236a	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x400236a	            0x85c0	                           test eax, eax	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x400236c	            0x7508	                           jne 0x4002376	      1369	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2	CALL_5
0x400236e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1370	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2
0x4002372	        0x488945f8	                mov qword [rbp - 8], rax	      1370	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_2
0x4002376	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x400237a	          0x488b00	                    mov rax, qword [rax]	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x400237d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x4002381	          0x4889d6	                            mov rsi, rdx	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x4002384	          0x4889c7	                            mov rdi, rax	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x4002387	      0xe800000000	                          call 0x400238c	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x400238c	            0x85c0	                           test eax, eax	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x400238e	            0x7526	                           jne 0x40023b6	      1371	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_6
0x4002390	      0xbf00000000	                              mov edi, 0	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x4002395	      0xe800000000	                          call 0x400239a	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x400239a	          0x4889c1	                            mov rcx, rax	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x400239d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023a1	          0x4889c2	                            mov rdx, rax	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023a4	      0xbe00000000	                              mov esi, 0	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023a9	          0x4889cf	                            mov rdi, rcx	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023ac	      0xb800000000	                              mov eax, 0	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023b1	      0xe800000000	                          call 0x40023b6	      1372	ldlang.c	FUNCTION_42	FOR_1	FOR_2	IF_3	CALL_8
0x40023b6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x40023ba	        0x488b4008	                mov rax, qword [rax + 8]	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x40023be	        0x488945e8	             mov qword [rbp - 0x18], rax	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x40023c2	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x40023c7	            0x7584	                           jne 0x400234d	      1367	ldlang.c	FUNCTION_42	FOR_1	FOR_2
0x40023c9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1366	ldlang.c	FUNCTION_42	FOR_1
0x40023cd	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1366	ldlang.c	FUNCTION_42	FOR_1
0x40023d1	        0x488945f0	             mov qword [rbp - 0x10], rax	      1366	ldlang.c	FUNCTION_42	FOR_1
0x40023d5	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1366	ldlang.c	FUNCTION_42	FOR_1
0x40023da	     0xf8563ffffff	                           jne 0x4002343	      1366	ldlang.c	FUNCTION_42	FOR_1
0x40023e0	      0x48837df800	                  cmp qword [rbp - 8], 0	      1378	ldlang.c	FUNCTION_42	IF_4
0x40023e5	            0x752a	                           jne 0x4002411	      1378	ldlang.c	FUNCTION_42	IF_4
0x40023e7	      0xbf00000000	                              mov edi, 0	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023ec	      0xe800000000	                          call 0x40023f1	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023f1	          0x4889c7	                            mov rdi, rax	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023f4	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023f8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023fc	          0x4889d1	                            mov rcx, rdx	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x40023ff	          0x4889c2	                            mov rdx, rax	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x4002402	      0xbe00000000	                              mov esi, 0	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x4002407	      0xb800000000	                              mov eax, 0	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x400240c	      0xe800000000	                          call 0x4002411	      1379	ldlang.c	FUNCTION_42	IF_4	CALL_10
0x4002411	      0xbf10000000	                           mov edi, 0x10	      1384	ldlang.c	FUNCTION_42	CALL_11
0x4002416	      0xe800000000	                          call 0x400241b	      1384	ldlang.c	FUNCTION_42	CALL_11
0x400241b	        0x488945e8	             mov qword [rbp - 0x18], rax	      1384	ldlang.c	FUNCTION_42	CALL_11
0x400241f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1385	ldlang.c	FUNCTION_42	CALL_12
0x4002423	          0x4889c7	                            mov rdi, rax	      1385	ldlang.c	FUNCTION_42	CALL_12
0x4002426	      0xe800000000	                          call 0x400242b	      1385	ldlang.c	FUNCTION_42	CALL_12
0x400242b	          0x4889c2	                            mov rdx, rax	      1385	ldlang.c	FUNCTION_42	CALL_12
0x400242e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1385	ldlang.c	FUNCTION_42	CALL_12
0x4002432	          0x488910	                    mov qword [rax], rdx	      1385	ldlang.c	FUNCTION_42	CALL_12
0x4002435	        0x488b45f8	                mov rax, qword [rbp - 8]	      1386	ldlang.c	FUNCTION_42
0x4002439	        0x488b5008	                mov rdx, qword [rax + 8]	      1386	ldlang.c	FUNCTION_42
0x400243d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1386	ldlang.c	FUNCTION_42
0x4002441	        0x48895008	                mov qword [rax + 8], rdx	      1386	ldlang.c	FUNCTION_42
0x4002445	        0x488b45f8	                mov rax, qword [rbp - 8]	      1387	ldlang.c	FUNCTION_42
0x4002449	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1387	ldlang.c	FUNCTION_42
0x400244d	        0x48895008	                mov qword [rax + 8], rdx	      1387	ldlang.c	FUNCTION_42
0x4002451	              0x90	                                     nop	      1388	ldlang.c	FUNCTION_42
0x4002452	              0xc9	                                   leave	      1388	ldlang.c	FUNCTION_42
0x4002453	              0xc3	                                     ret	      1388	ldlang.c	FUNCTION_42
lang_output_section_find_by_flags	functions,0:ELSE,8:FOR,8:CALL,7:IF,34:DO,0:WHILE,0:SWITCH,0	437
0x4002713	              0x55	                                push rbp	      1529	ldlang.c	FUNCTION_47
0x4002714	          0x4889e5	                            mov rbp, rsp	      1529	ldlang.c	FUNCTION_47
0x4002717	        0x4883ec50	                           sub rsp, 0x50	      1529	ldlang.c	FUNCTION_47
0x400271b	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1529	ldlang.c	FUNCTION_47
0x400271f	          0x8975c4	             mov dword [rbp - 0x3c], esi	      1529	ldlang.c	FUNCTION_47
0x4002722	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1529	ldlang.c	FUNCTION_47
0x4002726	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1529	ldlang.c	FUNCTION_47
0x400272a	    0x488b05000000	            mov rax, qword [0x04002731] 	      1535	ldlang.c	FUNCTION_47
0x4002731	        0x488945f8	                mov qword [rbp - 8], rax	      1535	ldlang.c	FUNCTION_47
0x4002735	        0x488b45f8	                mov rax, qword [rbp - 8]	      1536	ldlang.c	FUNCTION_47
0x4002739	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1536	ldlang.c	FUNCTION_47
0x400273d	        0x488945f8	                mov qword [rbp - 8], rax	      1536	ldlang.c	FUNCTION_47
0x4002741	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1539	ldlang.c	FUNCTION_47
0x4002749	        0x488b45f8	                mov rax, qword [rbp - 8]	      1540	ldlang.c	FUNCTION_47	FOR_1
0x400274d	        0x488945e8	             mov qword [rbp - 0x18], rax	      1540	ldlang.c	FUNCTION_47	FOR_1
0x4002751	      0xe983000000	                           jmp 0x40027d9	      1540	ldlang.c	FUNCTION_47	FOR_1
0x4002756	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1542	ldlang.c	FUNCTION_47	FOR_1
0x400275a	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1542	ldlang.c	FUNCTION_47	FOR_1
0x4002760	          0x8945dc	             mov dword [rbp - 0x24], eax	      1542	ldlang.c	FUNCTION_47	FOR_1
0x4002763	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1543	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x4002767	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1543	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x400276b	          0x4885c0	                           test rax, rax	      1543	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x400276e	            0x743d	                            je 0x40027ad	      1543	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x4002770	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1545	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x4002774	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1545	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x4002778	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1545	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x400277b	          0x8945dc	             mov dword [rbp - 0x24], eax	      1545	ldlang.c	FUNCTION_47	FOR_1	IF_1
0x400277e	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x4002783	            0x7428	                            je 0x40027ad	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x4002785	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x4002789	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x4002790	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1547	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2
0x4002794	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1547	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2
0x4002798	    0x488b3d000000	            mov rdi, qword [0x0400279f] 	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x400279f	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x40027a3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x40027a7	            0xffd0	                                call rax	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x40027a9	            0x85c0	                           test eax, eax	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x40027ab	            0x741f	                            je 0x40027cc	      1546	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2	CALL_1
0x40027ad	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1551	ldlang.c	FUNCTION_47	FOR_1
0x40027b0	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1551	ldlang.c	FUNCTION_47	FOR_1
0x40027b3	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1551	ldlang.c	FUNCTION_47	FOR_1
0x40027b6	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1552	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027b9	      0x251b054000	                       and eax, 0x40051b	      1552	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027be	            0x85c0	                           test eax, eax	      1552	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027c0	            0x750b	                           jne 0x40027cd	      1552	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027c2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1554	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027c6	        0x488945f0	             mov qword [rbp - 0x10], rax	      1554	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027ca	            0xeb01	                           jmp 0x40027cd	      1554	ldlang.c	FUNCTION_47	FOR_1	IF_3
0x40027cc	              0x90	                                     nop	      1549	ldlang.c	FUNCTION_47	FOR_1	IF_1	IF_2
0x40027cd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1540	ldlang.c	FUNCTION_47	FOR_1
0x40027d1	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1540	ldlang.c	FUNCTION_47	FOR_1
0x40027d5	        0x488945e8	             mov qword [rbp - 0x18], rax	      1540	ldlang.c	FUNCTION_47	FOR_1
0x40027d9	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1540	ldlang.c	FUNCTION_47	FOR_1
0x40027de	     0xf8572ffffff	                           jne 0x4002756	      1540	ldlang.c	FUNCTION_47	FOR_1
0x40027e4	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1556	ldlang.c	FUNCTION_47	IF_4
0x40027e9	            0x741b	                            je 0x4002806	      1556	ldlang.c	FUNCTION_47	IF_4
0x40027eb	      0x48837db800	               cmp qword [rbp - 0x48], 0	      1558	ldlang.c	FUNCTION_47	IF_4	IF_5
0x40027f0	            0x740b	                            je 0x40027fd	      1558	ldlang.c	FUNCTION_47	IF_4	IF_5
0x40027f2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1559	ldlang.c	FUNCTION_47	IF_4	IF_5
0x40027f6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1559	ldlang.c	FUNCTION_47	IF_4	IF_5
0x40027fa	          0x488910	                    mov qword [rax], rdx	      1559	ldlang.c	FUNCTION_47	IF_4	IF_5
0x40027fd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1560	ldlang.c	FUNCTION_47	IF_4
0x4002801	      0xe945050000	                           jmp 0x4002d4b	      1560	ldlang.c	FUNCTION_47	IF_4
0x4002806	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1563	ldlang.c	FUNCTION_47	IF_6
0x4002809	          0x83e010	                           and eax, 0x10	      1563	ldlang.c	FUNCTION_47	IF_6
0x400280c	            0x85c0	                           test eax, eax	      1563	ldlang.c	FUNCTION_47	IF_6
0x400280e	     0xf84ae000000	                            je 0x40028c2	      1563	ldlang.c	FUNCTION_47	IF_6
0x4002814	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1564	ldlang.c	FUNCTION_47	IF_6
0x4002817	          0x83e001	                              and eax, 1	      1564	ldlang.c	FUNCTION_47	IF_6
0x400281a	            0x85c0	                           test eax, eax	      1564	ldlang.c	FUNCTION_47	IF_6
0x400281c	     0xf84a0000000	                            je 0x40028c2	      1564	ldlang.c	FUNCTION_47	IF_6
0x4002822	        0x488b45f8	                mov rax, qword [rbp - 8]	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x4002826	        0x488945e8	             mov qword [rbp - 0x18], rax	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x400282a	      0xe983000000	                           jmp 0x40028b2	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x400282f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1569	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x4002833	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1569	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x4002839	          0x8945dc	             mov dword [rbp - 0x24], eax	      1569	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x400283c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1570	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002840	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1570	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002844	          0x4885c0	                           test rax, rax	      1570	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002847	            0x743d	                            je 0x4002886	      1570	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002849	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1572	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x400284d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1572	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002851	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1572	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002854	          0x8945dc	             mov dword [rbp - 0x24], eax	      1572	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7
0x4002857	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x400285c	            0x7428	                            je 0x4002886	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x400285e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002862	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002869	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1574	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8
0x400286d	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1574	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8
0x4002871	    0x488b3d000000	            mov rdi, qword [0x04002878] 	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002878	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x400287c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002880	            0xffd0	                                call rax	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002882	            0x85c0	                           test eax, eax	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002884	            0x741f	                            je 0x40028a5	      1573	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8	CALL_2
0x4002886	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1578	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x4002889	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1578	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x400288c	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1578	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x400288f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1579	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x4002892	      0x2513054000	                       and eax, 0x400513	      1579	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x4002897	            0x85c0	                           test eax, eax	      1579	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x4002899	            0x750b	                           jne 0x40028a6	      1579	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x400289b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1581	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x400289f	        0x488945f0	             mov qword [rbp - 0x10], rax	      1581	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x40028a3	            0xeb01	                           jmp 0x40028a6	      1581	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_9
0x40028a5	              0x90	                                     nop	      1576	ldlang.c	FUNCTION_47	IF_6	FOR_2	IF_7	IF_8
0x40028a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x40028aa	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x40028ae	        0x488945e8	             mov qword [rbp - 0x18], rax	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x40028b2	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x40028b7	     0xf8572ffffff	                           jne 0x400282f	      1567	ldlang.c	FUNCTION_47	IF_6	FOR_2
0x40028bd	      0xe95c040000	                           jmp 0x4002d1e	      1563	ldlang.c	FUNCTION_47	IF_6
0x40028c2	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1584	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028c5	          0x83e008	                              and eax, 8	      1584	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028c8	            0x85c0	                           test eax, eax	      1584	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028ca	     0xf84c6000000	                            je 0x4002996	      1584	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028d0	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1585	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028d3	          0x83e001	                              and eax, 1	      1585	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028d6	            0x85c0	                           test eax, eax	      1585	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028d8	     0xf84b8000000	                            je 0x4002996	      1585	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x40028de	        0x488b45f8	                mov rax, qword [rbp - 8]	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028e2	        0x488945e8	             mov qword [rbp - 0x18], rax	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028e6	      0xe99b000000	                           jmp 0x4002986	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028eb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1590	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028ef	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1590	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028f5	          0x8945dc	             mov dword [rbp - 0x24], eax	      1590	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x40028f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1591	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x40028fc	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1591	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002900	          0x4885c0	                           test rax, rax	      1591	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002903	            0x743d	                            je 0x4002942	      1591	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002905	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1593	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002909	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1593	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x400290d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1593	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002910	          0x8945dc	             mov dword [rbp - 0x24], eax	      1593	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11
0x4002913	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002918	            0x7428	                            je 0x4002942	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x400291a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x400291e	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002925	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1595	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12
0x4002929	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1595	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12
0x400292d	    0x488b3d000000	            mov rdi, qword [0x04002934] 	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002934	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002938	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x400293c	            0xffd0	                                call rax	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x400293e	            0x85c0	                           test eax, eax	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002940	            0x7437	                            je 0x4002979	      1594	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12	CALL_3
0x4002942	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1599	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x4002945	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1599	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x4002948	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1599	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x400294b	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1600	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400294e	      0x250b014000	                       and eax, 0x40010b	      1600	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002953	            0x85c0	                           test eax, eax	      1600	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002955	            0x7418	                            je 0x400296f	      1600	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002957	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1602	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400295a	      0x250b010000	                          and eax, 0x10b	      1602	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400295f	            0x85c0	                           test eax, eax	      1602	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002961	            0x7517	                           jne 0x400297a	      1602	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002963	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1604	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002966	      0x2500004000	                       and eax, 0x400000	      1604	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400296b	            0x85c0	                           test eax, eax	      1604	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400296d	            0x750b	                           jne 0x400297a	      1604	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x400296f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1605	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002973	        0x488945f0	             mov qword [rbp - 0x10], rax	      1605	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002977	            0xeb01	                           jmp 0x400297a	      1605	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_13
0x4002979	              0x90	                                     nop	      1597	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3	IF_11	IF_12
0x400297a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x400297e	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x4002982	        0x488945e8	             mov qword [rbp - 0x18], rax	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x4002986	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x400298b	     0xf855affffff	                           jne 0x40028eb	      1588	ldlang.c	FUNCTION_47	ELSE_1	IF_10	FOR_3
0x4002991	      0xe988030000	                           jmp 0x4002d1e	      1584	ldlang.c	FUNCTION_47	ELSE_1	IF_10
0x4002996	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1608	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x4002999	      0x2500040000	                          and eax, 0x400	      1608	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x400299e	            0x85c0	                           test eax, eax	      1608	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029a0	     0xf84d3000000	                            je 0x4002a79	      1608	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029a6	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1609	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029a9	          0x83e001	                              and eax, 1	      1609	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029ac	            0x85c0	                           test eax, eax	      1609	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029ae	     0xf84c5000000	                            je 0x4002a79	      1609	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029b4	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      1613	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029bb	    0x48c745b00000	               mov qword [rbp - 0x50], 0	      1615	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x40029c3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029c7	        0x488945e8	             mov qword [rbp - 0x18], rax	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029cb	      0xe98d000000	                           jmp 0x4002a5d	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029d0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1618	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029d4	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1618	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029da	          0x8945dc	             mov dword [rbp - 0x24], eax	      1618	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1619	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029e1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1619	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029e5	          0x4885c0	                           test rax, rax	      1619	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029e8	            0x740e	                            je 0x40029f8	      1619	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029ea	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1620	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029ee	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1620	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029f2	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1620	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029f5	          0x8945dc	             mov dword [rbp - 0x24], eax	      1620	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_15
0x40029f8	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1622	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x40029fb	       0xd02010000	                           or eax, 0x102	      1622	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a00	          0x3345dc	             xor eax, dword [rbp - 0x24]	      1622	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a03	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1622	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a06	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1623	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a09	      0x2501040000	                          and eax, 0x401	      1623	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a0e	            0x85c0	                           test eax, eax	      1623	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a10	            0x7525	                           jne 0x4002a37	      1623	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a12	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1626	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a15	          0x83e002	                              and eax, 2	      1626	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a18	            0x85c0	                           test eax, eax	      1626	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a1a	            0x750a	                           jne 0x4002a26	      1626	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a1c	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1627	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a1f	          0x83e002	                              and eax, 2	      1627	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a22	            0x85c0	                           test eax, eax	      1627	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a24	            0x7547	                           jne 0x4002a6d	      1627	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1632	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a2a	        0x488945f0	             mov qword [rbp - 0x10], rax	      1632	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a2e	    0xc745e0010000	               mov dword [rbp - 0x20], 1	      1633	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a35	            0xeb1a	                           jmp 0x4002a51	      1633	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16
0x4002a37	        0x837de000	               cmp dword [rbp - 0x20], 0	      1635	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_3	IF_18
0x4002a3b	            0x7536	                           jne 0x4002a73	      1635	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_3	IF_18
0x4002a3d	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1637	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a40	      0x2503010000	                          and eax, 0x103	      1637	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a45	            0x85c0	                           test eax, eax	      1637	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a47	            0x7508	                           jne 0x4002a51	      1637	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a49	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1638	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a4d	        0x488945f0	             mov qword [rbp - 0x10], rax	      1638	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_4	IF_19
0x4002a51	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a55	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a59	        0x488945e8	             mov qword [rbp - 0x18], rax	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a5d	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a62	     0xf8568ffffff	                           jne 0x40029d0	      1616	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4
0x4002a68	      0xe9b1020000	                           jmp 0x4002d1e	      1610	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x4002a6d	              0x90	                                     nop	      1631	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a6e	      0xe9ab020000	                           jmp 0x4002d1e	      1631	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	IF_16	IF_17
0x4002a73	              0x90	                                     nop	      1636	ldlang.c	FUNCTION_47	ELSE_2	IF_14	FOR_4	ELSE_3	IF_18
0x4002a74	      0xe9a5020000	                           jmp 0x4002d1e	      1610	ldlang.c	FUNCTION_47	ELSE_2	IF_14
0x4002a79	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1641	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a7c	      0x2500004000	                       and eax, 0x400000	      1641	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a81	            0x85c0	                           test eax, eax	      1641	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a83	     0xf84c6000000	                            je 0x4002b4f	      1641	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a89	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1642	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a8c	          0x83e001	                              and eax, 1	      1642	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a8f	            0x85c0	                           test eax, eax	      1642	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a91	     0xf84b8000000	                            je 0x4002b4f	      1642	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002a97	        0x488b45f8	                mov rax, qword [rbp - 8]	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002a9b	        0x488945e8	             mov qword [rbp - 0x18], rax	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002a9f	      0xe99b000000	                           jmp 0x4002b3f	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002aa4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1647	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002aa8	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1647	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002aae	          0x8945dc	             mov dword [rbp - 0x24], eax	      1647	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002ab1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1648	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002ab5	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1648	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002ab9	          0x4885c0	                           test rax, rax	      1648	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002abc	            0x743d	                            je 0x4002afb	      1648	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002abe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1650	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002ac2	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1650	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002ac6	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1650	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002ac9	          0x8945dc	             mov dword [rbp - 0x24], eax	      1650	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21
0x4002acc	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002ad1	            0x7428	                            je 0x4002afb	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002ad3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002ad7	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002ade	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1652	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22
0x4002ae2	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1652	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22
0x4002ae6	    0x488b3d000000	            mov rdi, qword [0x04002aed] 	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002aed	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002af1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002af5	            0xffd0	                                call rax	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002af7	            0x85c0	                           test eax, eax	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002af9	            0x7437	                            je 0x4002b32	      1651	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22	CALL_4
0x4002afb	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1656	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002afe	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1656	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b01	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1656	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b04	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1657	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b07	      0x2503050000	                          and eax, 0x503	      1657	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b0c	            0x85c0	                           test eax, eax	      1657	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b0e	            0x7418	                            je 0x4002b28	      1657	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b10	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1659	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b13	      0x2500004000	                       and eax, 0x400000	      1659	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b18	            0x85c0	                           test eax, eax	      1659	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b1a	            0x7417	                            je 0x4002b33	      1659	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b1c	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1660	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b1f	      0x2500010000	                          and eax, 0x100	      1660	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b24	            0x85c0	                           test eax, eax	      1660	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b26	            0x750b	                           jne 0x4002b33	      1660	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b28	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1661	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b2c	        0x488945f0	             mov qword [rbp - 0x10], rax	      1661	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b30	            0xeb01	                           jmp 0x4002b33	      1661	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_23
0x4002b32	              0x90	                                     nop	      1654	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5	IF_21	IF_22
0x4002b33	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b37	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b3b	        0x488945e8	             mov qword [rbp - 0x18], rax	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b3f	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b44	     0xf855affffff	                           jne 0x4002aa4	      1645	ldlang.c	FUNCTION_47	ELSE_5	IF_20	FOR_5
0x4002b4a	      0xe9cf010000	                           jmp 0x4002d1e	      1641	ldlang.c	FUNCTION_47	ELSE_5	IF_20
0x4002b4f	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1664	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b52	      0x2500010000	                          and eax, 0x100	      1664	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b57	            0x85c0	                           test eax, eax	      1664	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b59	     0xf84ae000000	                            je 0x4002c0d	      1664	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b5f	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1665	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b62	          0x83e001	                              and eax, 1	      1665	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b65	            0x85c0	                           test eax, eax	      1665	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b67	     0xf84a0000000	                            je 0x4002c0d	      1665	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002b6d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b71	        0x488945e8	             mov qword [rbp - 0x18], rax	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b75	      0xe983000000	                           jmp 0x4002bfd	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b7a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1670	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b7e	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1670	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b84	          0x8945dc	             mov dword [rbp - 0x24], eax	      1670	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002b87	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1671	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b8b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1671	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b8f	          0x4885c0	                           test rax, rax	      1671	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b92	            0x743d	                            je 0x4002bd1	      1671	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b94	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1673	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b98	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1673	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b9c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1673	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002b9f	          0x8945dc	             mov dword [rbp - 0x24], eax	      1673	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25
0x4002ba2	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002ba7	            0x7428	                            je 0x4002bd1	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002ba9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bad	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bb4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1675	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26
0x4002bb8	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1675	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26
0x4002bbc	    0x488b3d000000	            mov rdi, qword [0x04002bc3] 	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bc3	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bc7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bcb	            0xffd0	                                call rax	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bcd	            0x85c0	                           test eax, eax	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bcf	            0x741f	                            je 0x4002bf0	      1674	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26	CALL_5
0x4002bd1	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1679	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bd4	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1679	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bd7	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1679	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bda	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1680	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002bdd	      0x2503054000	                       and eax, 0x400503	      1680	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002be2	            0x85c0	                           test eax, eax	      1680	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002be4	            0x750b	                           jne 0x4002bf1	      1680	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002be6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1682	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002bea	        0x488945f0	             mov qword [rbp - 0x10], rax	      1682	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002bee	            0xeb01	                           jmp 0x4002bf1	      1682	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_27
0x4002bf0	              0x90	                                     nop	      1677	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6	IF_25	IF_26
0x4002bf1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bf5	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bf9	        0x488945e8	             mov qword [rbp - 0x18], rax	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002bfd	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002c02	     0xf8572ffffff	                           jne 0x4002b7a	      1668	ldlang.c	FUNCTION_47	ELSE_6	IF_24	FOR_6
0x4002c08	      0xe911010000	                           jmp 0x4002d1e	      1664	ldlang.c	FUNCTION_47	ELSE_6	IF_24
0x4002c0d	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1685	ldlang.c	FUNCTION_47	ELSE_7	IF_28
0x4002c10	          0x83e001	                              and eax, 1	      1685	ldlang.c	FUNCTION_47	ELSE_7	IF_28
0x4002c13	            0x85c0	                           test eax, eax	      1685	ldlang.c	FUNCTION_47	ELSE_7	IF_28
0x4002c15	     0xf849b000000	                            je 0x4002cb6	      1685	ldlang.c	FUNCTION_47	ELSE_7	IF_28
0x4002c1b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c1f	        0x488945e8	             mov qword [rbp - 0x18], rax	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c23	      0xe981000000	                           jmp 0x4002ca9	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c28	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1690	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c2c	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1690	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c32	          0x8945dc	             mov dword [rbp - 0x24], eax	      1690	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c35	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1691	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c39	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1691	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c3d	          0x4885c0	                           test rax, rax	      1691	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c40	            0x743d	                            je 0x4002c7f	      1691	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c42	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1693	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c46	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1693	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c4a	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1693	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c4d	          0x8945dc	             mov dword [rbp - 0x24], eax	      1693	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29
0x4002c50	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c55	            0x7428	                            je 0x4002c7f	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c57	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c5b	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c62	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1695	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30
0x4002c66	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      1695	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30
0x4002c6a	    0x488b3d000000	            mov rdi, qword [0x04002c71] 	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c71	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c75	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c79	            0xffd0	                                call rax	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c7b	            0x85c0	                           test eax, eax	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c7d	            0x741d	                            je 0x4002c9c	      1694	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30	CALL_6
0x4002c7f	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1699	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c82	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1699	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c85	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1699	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002c88	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1700	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c8b	          0x83e001	                              and eax, 1	      1700	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c8e	            0x85c0	                           test eax, eax	      1700	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c90	            0x750b	                           jne 0x4002c9d	      1700	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c92	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1701	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c96	        0x488945f0	             mov qword [rbp - 0x10], rax	      1701	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c9a	            0xeb01	                           jmp 0x4002c9d	      1701	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_31
0x4002c9c	              0x90	                                     nop	      1697	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7	IF_29	IF_30
0x4002c9d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002ca1	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002ca5	        0x488945e8	             mov qword [rbp - 0x18], rax	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002ca9	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002cae	     0xf8574ffffff	                           jne 0x4002c28	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002cb4	            0xeb68	                           jmp 0x4002d1e	      1688	ldlang.c	FUNCTION_47	ELSE_7	IF_28	FOR_7
0x4002cb6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cba	        0x488945e8	             mov qword [rbp - 0x18], rax	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cbe	            0xeb51	                           jmp 0x4002d11	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cc0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1709	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cc4	    0x8b8088000000	            mov eax, dword [rax + 0x88] 	      1709	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cca	          0x8945dc	             mov dword [rbp - 0x24], eax	      1709	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002ccd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1710	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002cd1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1710	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002cd5	          0x4885c0	                           test rax, rax	      1710	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002cd8	            0x740e	                            je 0x4002ce8	      1710	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002cda	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1711	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002cde	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1711	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002ce2	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1711	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002ce5	          0x8945dc	             mov dword [rbp - 0x24], eax	      1711	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_32
0x4002ce8	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1712	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002ceb	          0x3345c4	             xor eax, dword [rbp - 0x3c]	      1712	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cee	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1712	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002cf1	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1713	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002cf4	      0x2500200000	                         and eax, 0x2000	      1713	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002cf9	            0x85c0	                           test eax, eax	      1713	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002cfb	            0x7508	                           jne 0x4002d05	      1713	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002cfd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1714	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002d01	        0x488945f0	             mov qword [rbp - 0x10], rax	      1714	ldlang.c	FUNCTION_47	ELSE_8	FOR_8	IF_33
0x4002d05	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002d09	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002d0d	        0x488945e8	             mov qword [rbp - 0x18], rax	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002d11	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002d16	            0x75a8	                           jne 0x4002cc0	      1707	ldlang.c	FUNCTION_47	ELSE_8	FOR_8
0x4002d18	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1716	ldlang.c	FUNCTION_47	ELSE_8
0x4002d1c	            0xeb2d	                           jmp 0x4002d4b	      1716	ldlang.c	FUNCTION_47	ELSE_8
0x4002d1e	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1719	ldlang.c	FUNCTION_47	IF_34
0x4002d23	            0x7507	                           jne 0x4002d2c	      1719	ldlang.c	FUNCTION_47	IF_34
0x4002d25	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1719	ldlang.c	FUNCTION_47	IF_34
0x4002d2a	            0x7506	                           jne 0x4002d32	      1719	ldlang.c	FUNCTION_47	IF_34
0x4002d2c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1720	ldlang.c	FUNCTION_47	IF_34
0x4002d30	            0xeb19	                           jmp 0x4002d4b	      1720	ldlang.c	FUNCTION_47	IF_34
0x4002d32	          0x8b75c4	             mov esi, dword [rbp - 0x3c]	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d35	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d39	      0xb900000000	                              mov ecx, 0	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d3e	      0xba00000000	                              mov edx, 0	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d43	          0x4889c7	                            mov rdi, rax	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d46	      0xe800000000	                          call 0x4002d4b	      1722	ldlang.c	FUNCTION_47	CALL_7
0x4002d4b	              0xc9	                                   leave	      1723	ldlang.c	FUNCTION_47
0x4002d4c	              0xc3	                                     ret	      1723	ldlang.c	FUNCTION_47
one_lang_size_sections_pass	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	21
0x400a168	              0x55	                                push rbp	      5600	ldlang.c	FUNCTION_117
0x400a169	          0x4889e5	                            mov rbp, rsp	      5600	ldlang.c	FUNCTION_117
0x400a16c	        0x4883ec10	                           sub rsp, 0x10	      5600	ldlang.c	FUNCTION_117
0x400a170	        0x48897df8	                mov qword [rbp - 8], rdi	      5600	ldlang.c	FUNCTION_117
0x400a174	          0x8975f4	              mov dword [rbp - 0xc], esi	      5600	ldlang.c	FUNCTION_117
0x400a177	    0x8b0500000000	            mov eax, dword [0x0400a17d] 	      5601	ldlang.c	FUNCTION_117
0x400a17d	          0x83c001	                              add eax, 1	      5601	ldlang.c	FUNCTION_117
0x400a180	    0x890500000000	            mov dword [0x0400a186], eax 	      5601	ldlang.c	FUNCTION_117
0x400a186	    0x488b05000000	            mov rax, qword [0x0400a18d] 	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a18d	          0x8b4df4	              mov ecx, dword [rbp - 0xc]	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a190	        0x488b55f8	                mov rdx, qword [rbp - 8]	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a194	          0x4189c9	                            mov r9d, ecx	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a197	          0x4989d0	                             mov r8, rdx	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a19a	      0xb900000000	                              mov ecx, 0	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a19f	      0xba00000000	                              mov edx, 0	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a1a4	          0x4889c6	                            mov rsi, rax	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a1a7	      0xbf00000000	                              mov edi, 0	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a1ac	      0xe83decffff	           call sym.lang_size_sections_1	      5602	ldlang.c	FUNCTION_117	CALL_1
0x400a1b1	              0x90	                                     nop	      5604	ldlang.c	FUNCTION_117
0x400a1b2	              0xc9	                                   leave	      5604	ldlang.c	FUNCTION_117
0x400a1b3	              0xc3	                                     ret	      5604	ldlang.c	FUNCTION_117
strcut	functions,0:ELSE,0:FOR,1:CALL,2:IF,1:DO,0:WHILE,0:SWITCH,0	38
0x400526c	              0x55	                                push rbp	      2958	ldlang.c	FUNCTION_70
0x400526d	          0x4889e5	                            mov rbp, rsp	      2958	ldlang.c	FUNCTION_70
0x4005270	        0x4883ec20	                           sub rsp, 0x20	      2958	ldlang.c	FUNCTION_70
0x4005274	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2958	ldlang.c	FUNCTION_70
0x4005278	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2958	ldlang.c	FUNCTION_70
0x400527c	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2959	ldlang.c	FUNCTION_70	CALL_1
0x4005280	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2959	ldlang.c	FUNCTION_70	CALL_1
0x4005284	          0x4889d6	                            mov rsi, rdx	      2959	ldlang.c	FUNCTION_70	CALL_1
0x4005287	          0x4889c7	                            mov rdi, rax	      2959	ldlang.c	FUNCTION_70	CALL_1
0x400528a	      0xe800000000	                          call 0x400528f	      2959	ldlang.c	FUNCTION_70	CALL_1
0x400528f	        0x488945e8	             mov qword [rbp - 0x18], rax	      2959	ldlang.c	FUNCTION_70	CALL_1
0x4005293	      0x48837de800	               cmp qword [rbp - 0x18], 0	      2961	ldlang.c	FUNCTION_70	IF_1
0x4005298	            0x744b	                            je 0x40052e5	      2961	ldlang.c	FUNCTION_70	IF_1
0x400529a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x400529e	          0x4889c7	                            mov rdi, rax	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052a1	      0xe800000000	                          call 0x40052a6	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052a6	          0x4889c2	                            mov rdx, rax	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052ad	          0x4801d0	                            add rax, rdx	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052b0	        0x488945f8	                mov qword [rbp - 8], rax	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052b4	            0xeb1d	                           jmp 0x40052d3	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052b6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052ba	        0x488d5001	                      lea rdx, [rax + 1]	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052be	        0x488955e8	             mov qword [rbp - 0x18], rdx	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052c2	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052c6	        0x488d4a01	                      lea rcx, [rdx + 1]	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052ca	        0x48894df8	                mov qword [rbp - 8], rcx	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052ce	           0xfb612	                   movzx edx, byte [rdx]	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052d1	            0x8810	                      mov byte [rax], dl	      2966	ldlang.c	FUNCTION_70	IF_1	FOR_1
0x40052d3	        0x488b45f8	                mov rax, qword [rbp - 8]	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052d7	           0xfb600	                   movzx eax, byte [rax]	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052da	            0x84c0	                             test al, al	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052dc	            0x75d8	                           jne 0x40052b6	      2965	ldlang.c	FUNCTION_70	IF_1	FOR_1	CALL_2
0x40052de	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2968	ldlang.c	FUNCTION_70	IF_1
0x40052e2	          0xc60000	                       mov byte [rax], 0	      2968	ldlang.c	FUNCTION_70	IF_1
0x40052e5	              0x90	                                     nop	      2970	ldlang.c	FUNCTION_70
0x40052e6	              0xc9	                                   leave	      2970	ldlang.c	FUNCTION_70
0x40052e7	              0xc3	                                     ret	      2970	ldlang.c	FUNCTION_70
lookup_name	functions,0:ELSE,0:FOR,1:CALL,3:IF,4:DO,0:WHILE,0:SWITCH,0	58
0x40048ae	              0x55	                                push rbp	      2646	ldlang.c	FUNCTION_63
0x40048af	          0x4889e5	                            mov rbp, rsp	      2646	ldlang.c	FUNCTION_63
0x40048b2	        0x4883ec20	                           sub rsp, 0x20	      2646	ldlang.c	FUNCTION_63
0x40048b6	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2646	ldlang.c	FUNCTION_63
0x40048ba	    0x488b05000000	            mov rax, qword [0x040048c1] 	      2649	ldlang.c	FUNCTION_63	FOR_1
0x40048c1	        0x488945f0	             mov qword [rbp - 0x10], rax	      2649	ldlang.c	FUNCTION_63	FOR_1
0x40048c5	            0xeb36	                           jmp 0x40048fd	      2649	ldlang.c	FUNCTION_63	FOR_1
0x40048c7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2656	ldlang.c	FUNCTION_63	FOR_1
0x40048cb	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2656	ldlang.c	FUNCTION_63	FOR_1
0x40048cf	        0x488945f8	                mov qword [rbp - 8], rax	      2656	ldlang.c	FUNCTION_63	FOR_1
0x40048d3	      0x48837df800	                  cmp qword [rbp - 8], 0	      2658	ldlang.c	FUNCTION_63	FOR_1	IF_1
0x40048d8	            0x7417	                            je 0x40048f1	      2658	ldlang.c	FUNCTION_63	FOR_1	IF_1
0x40048da	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048de	        0x488b45f8	                mov rax, qword [rbp - 8]	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048e2	          0x4889d6	                            mov rsi, rdx	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048e5	          0x4889c7	                            mov rdi, rax	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048e8	      0xe800000000	                          call 0x40048ed	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048ed	            0x85c0	                           test eax, eax	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048ef	            0x7415	                            je 0x4004906	      2659	ldlang.c	FUNCTION_63	FOR_1	IF_1	CALL_1
0x40048f1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2651	ldlang.c	FUNCTION_63	FOR_1
0x40048f5	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2651	ldlang.c	FUNCTION_63	FOR_1
0x40048f9	        0x488945f0	             mov qword [rbp - 0x10], rax	      2651	ldlang.c	FUNCTION_63	FOR_1
0x40048fd	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2649	ldlang.c	FUNCTION_63	FOR_1
0x4004902	            0x75c3	                           jne 0x40048c7	      2649	ldlang.c	FUNCTION_63	FOR_1
0x4004904	            0xeb01	                           jmp 0x4004907	      2649	ldlang.c	FUNCTION_63	FOR_1
0x4004906	              0x90	                                     nop	      2660	ldlang.c	FUNCTION_63	FOR_1	IF_1
0x4004907	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2663	ldlang.c	FUNCTION_63	IF_2
0x400490c	            0x7521	                           jne 0x400492f	      2663	ldlang.c	FUNCTION_63	IF_2
0x400490e	    0x488b15000000	            mov rdx, qword [0x04004915] 	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x4004915	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x4004919	      0xb900000000	                              mov ecx, 0	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x400491e	      0xbe04000000	                              mov esi, 4	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x4004923	          0x4889c7	                            mov rdi, rax	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x4004926	      0xe899d1ffff	                      call sym.new_afile	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x400492b	        0x488945f0	             mov qword [rbp - 0x10], rax	      2664	ldlang.c	FUNCTION_63	IF_2	CALL_2
0x400492f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2669	ldlang.c	FUNCTION_63	IF_3
0x4004933	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2669	ldlang.c	FUNCTION_63	IF_3
0x4004937	          0x83e002	                              and eax, 2	      2669	ldlang.c	FUNCTION_63	IF_3
0x400493a	            0x84c0	                             test al, al	      2669	ldlang.c	FUNCTION_63	IF_3
0x400493c	            0x750f	                           jne 0x400494d	      2669	ldlang.c	FUNCTION_63	IF_3
0x400493e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2669	ldlang.c	FUNCTION_63	IF_3
0x4004942	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2669	ldlang.c	FUNCTION_63	IF_3
0x4004946	          0x83e004	                              and eax, 4	      2669	ldlang.c	FUNCTION_63	IF_3
0x4004949	            0x84c0	                             test al, al	      2669	ldlang.c	FUNCTION_63	IF_3
0x400494b	            0x7506	                           jne 0x4004953	      2669	ldlang.c	FUNCTION_63	IF_3
0x400494d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2670	ldlang.c	FUNCTION_63	IF_3
0x4004951	            0xeb20	                           jmp 0x4004973	      2670	ldlang.c	FUNCTION_63	IF_3
0x4004953	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x4004957	      0xbe00000000	                              mov esi, 0	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x400495c	          0x4889c7	                            mov rdi, rax	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x400495f	      0xe800000000	                          call 0x4004964	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x4004964	            0x85c0	                           test eax, eax	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x4004966	            0x7507	                           jne 0x400496f	      2672	ldlang.c	FUNCTION_63	IF_4	CALL_3
0x4004968	      0xb800000000	                              mov eax, 0	      2673	ldlang.c	FUNCTION_63	IF_4
0x400496d	            0xeb04	                           jmp 0x4004973	      2673	ldlang.c	FUNCTION_63	IF_4
0x400496f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2675	ldlang.c	FUNCTION_63
0x4004973	              0xc9	                                   leave	      2676	ldlang.c	FUNCTION_63
0x4004974	              0xc3	                                     ret	      2676	ldlang.c	FUNCTION_63
print_wild_statement	functions,0:ELSE,2:FOR,4:CALL,25:IF,7:DO,0:WHILE,0:SWITCH,1	186
0x4007bb3	              0x55	                                push rbp	      4415	ldlang.c	FUNCTION_102
0x4007bb4	          0x4889e5	                            mov rbp, rsp	      4415	ldlang.c	FUNCTION_102
0x4007bb7	        0x4883ec30	                           sub rsp, 0x30	      4415	ldlang.c	FUNCTION_102
0x4007bbb	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4415	ldlang.c	FUNCTION_102
0x4007bbf	        0x488975d0	             mov qword [rbp - 0x30], rsi	      4415	ldlang.c	FUNCTION_102
0x4007bc3	      0xe800000000	                          call 0x4007bc8	      4418	ldlang.c	FUNCTION_102	CALL_1
0x4007bc8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4420	ldlang.c	FUNCTION_102	IF_1
0x4007bcc	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4420	ldlang.c	FUNCTION_102	IF_1
0x4007bd0	          0x4885c0	                           test rax, rax	      4420	ldlang.c	FUNCTION_102	IF_1
0x4007bd3	            0x746a	                            je 0x4007c3f	      4420	ldlang.c	FUNCTION_102	IF_1
0x4007bd5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007bd9	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007bdd	          0x488b00	                    mov rax, qword [rax]	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007be0	          0x4889c6	                            mov rsi, rax	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007be3	      0xbf00000000	                              mov edi, 0	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007be8	      0xb800000000	                              mov eax, 0	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007bed	      0xe800000000	                          call 0x4007bf2	      4423	ldlang.c	FUNCTION_102	IF_1	CALL_2
0x4007bf2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007bf6	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007bfa	        0x488b4008	                mov rax, qword [rax + 8]	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007bfe	        0x488945f0	             mov qword [rbp - 0x10], rax	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c02	            0xeb25	                           jmp 0x4007c29	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c04	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c08	          0x488b00	                    mov rax, qword [rax]	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c0b	          0x4889c6	                            mov rsi, rax	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c0e	      0xbf00000000	                              mov edi, 0	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c13	      0xb800000000	                              mov eax, 0	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c18	      0xe800000000	                          call 0x4007c1d	      4425	ldlang.c	FUNCTION_102	IF_1	CALL_3
0x4007c1d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c21	        0x488b4008	                mov rax, qword [rax + 8]	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c25	        0x488945f0	             mov qword [rbp - 0x10], rax	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c29	      0x48837df000	               cmp qword [rbp - 0x10], 0	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c2e	            0x75d4	                           jne 0x4007c04	      4424	ldlang.c	FUNCTION_102	IF_1	FOR_1
0x4007c30	      0xbf00000000	                              mov edi, 0	      4426	ldlang.c	FUNCTION_102	IF_1	CALL_4
0x4007c35	      0xb800000000	                              mov eax, 0	      4426	ldlang.c	FUNCTION_102	IF_1	CALL_4
0x4007c3a	      0xe800000000	                          call 0x4007c3f	      4426	ldlang.c	FUNCTION_102	IF_1	CALL_4
0x4007c3f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4429	ldlang.c	FUNCTION_102	IF_2
0x4007c43	          0x8b4018	            mov eax, dword [rax + 0x18] 	      4429	ldlang.c	FUNCTION_102	IF_2
0x4007c46	            0x85c0	                           test eax, eax	      4429	ldlang.c	FUNCTION_102	IF_2
0x4007c48	            0x740f	                            je 0x4007c59	      4429	ldlang.c	FUNCTION_102	IF_2
0x4007c4a	      0xbf00000000	                              mov edi, 0	      4430	ldlang.c	FUNCTION_102	CALL_5
0x4007c4f	      0xb800000000	                              mov eax, 0	      4430	ldlang.c	FUNCTION_102	CALL_5
0x4007c54	      0xe800000000	                          call 0x4007c59	      4430	ldlang.c	FUNCTION_102	CALL_5
0x4007c59	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4431	ldlang.c	FUNCTION_102	IF_3
0x4007c5d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4431	ldlang.c	FUNCTION_102	IF_3
0x4007c61	          0x4885c0	                           test rax, rax	      4431	ldlang.c	FUNCTION_102	IF_3
0x4007c64	            0x741c	                            je 0x4007c82	      4431	ldlang.c	FUNCTION_102	IF_3
0x4007c66	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c6a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c6e	          0x4889c6	                            mov rsi, rax	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c71	      0xbf00000000	                              mov edi, 0	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c76	      0xb800000000	                              mov eax, 0	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c7b	      0xe800000000	                          call 0x4007c80	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c80	            0xeb0f	                           jmp 0x4007c91	      4432	ldlang.c	FUNCTION_102	CALL_6
0x4007c82	      0xbf00000000	                              mov edi, 0	      4434	ldlang.c	FUNCTION_102	CALL_7
0x4007c87	      0xb800000000	                              mov eax, 0	      4434	ldlang.c	FUNCTION_102	CALL_7
0x4007c8c	      0xe800000000	                          call 0x4007c91	      4434	ldlang.c	FUNCTION_102	CALL_7
0x4007c91	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4435	ldlang.c	FUNCTION_102	IF_4
0x4007c95	          0x8b4018	            mov eax, dword [rax + 0x18] 	      4435	ldlang.c	FUNCTION_102	IF_4
0x4007c98	            0x85c0	                           test eax, eax	      4435	ldlang.c	FUNCTION_102	IF_4
0x4007c9a	            0x740f	                            je 0x4007cab	      4435	ldlang.c	FUNCTION_102	IF_4
0x4007c9c	      0xbf00000000	                              mov edi, 0	      4436	ldlang.c	FUNCTION_102	CALL_8
0x4007ca1	      0xb800000000	                              mov eax, 0	      4436	ldlang.c	FUNCTION_102	CALL_8
0x4007ca6	      0xe800000000	                          call 0x4007cab	      4436	ldlang.c	FUNCTION_102	CALL_8
0x4007cab	      0xbf00000000	                              mov edi, 0	      4438	ldlang.c	FUNCTION_102	CALL_9
0x4007cb0	      0xb800000000	                              mov eax, 0	      4438	ldlang.c	FUNCTION_102	CALL_9
0x4007cb5	      0xe800000000	                          call 0x4007cba	      4438	ldlang.c	FUNCTION_102	CALL_9
0x4007cba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007cbe	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007cc2	        0x488945e8	             mov qword [rbp - 0x18], rax	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007cc6	      0xe9a4010000	                           jmp 0x4007e6f	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007ccb	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      4441	ldlang.c	FUNCTION_102	FOR_2
0x4007cd2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007cd6	          0x8b4018	            mov eax, dword [rax + 0x18] 	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007cd9	          0x83f806	                              cmp eax, 6	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007cdc	     0xf879d000000	                            ja 0x4007d7f	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007ce2	            0x89c0	                            mov eax, eax	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007ce4	    0x488b04c50000	                  mov rax, qword [rax*8]	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007cec	            0xffe0	                                 jmp rax	      4443	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007cee	      0xbf00000000	                              mov edi, 0	      4449	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_10
0x4007cf3	      0xb800000000	                              mov eax, 0	      4449	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_10
0x4007cf8	      0xe800000000	                          call 0x4007cfd	      4449	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_10
0x4007cfd	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	      4450	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d04	            0xeb79	                           jmp 0x4007d7f	      4451	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d06	      0xbf00000000	                              mov edi, 0	      4454	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_11
0x4007d0b	      0xb800000000	                              mov eax, 0	      4454	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_11
0x4007d10	      0xe800000000	                          call 0x4007d15	      4454	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_11
0x4007d15	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	      4455	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d1c	            0xeb61	                           jmp 0x4007d7f	      4456	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d1e	      0xbf00000000	                              mov edi, 0	      4459	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_12
0x4007d23	      0xb800000000	                              mov eax, 0	      4459	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_12
0x4007d28	      0xe800000000	                          call 0x4007d2d	      4459	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_12
0x4007d2d	    0xc745e4020000	               mov dword [rbp - 0x1c], 2	      4460	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d34	            0xeb49	                           jmp 0x4007d7f	      4461	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d36	      0xbf00000000	                              mov edi, 0	      4464	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_13
0x4007d3b	      0xb800000000	                              mov eax, 0	      4464	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_13
0x4007d40	      0xe800000000	                          call 0x4007d45	      4464	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_13
0x4007d45	    0xc745e4020000	               mov dword [rbp - 0x1c], 2	      4465	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d4c	            0xeb31	                           jmp 0x4007d7f	      4466	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d4e	      0xbf00000000	                              mov edi, 0	      4469	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_14
0x4007d53	      0xb800000000	                              mov eax, 0	      4469	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_14
0x4007d58	      0xe800000000	                          call 0x4007d5d	      4469	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_14
0x4007d5d	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	      4470	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d64	            0xeb19	                           jmp 0x4007d7f	      4471	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d66	      0xbf00000000	                              mov edi, 0	      4474	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_15
0x4007d6b	      0xb800000000	                              mov eax, 0	      4474	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_15
0x4007d70	      0xe800000000	                          call 0x4007d75	      4474	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1	CALL_15
0x4007d75	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	      4475	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d7c	            0xeb01	                           jmp 0x4007d7f	      4476	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d7e	              0x90	                                     nop	      4446	ldlang.c	FUNCTION_102	FOR_2	SWITCH_1
0x4007d7f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4479	ldlang.c	FUNCTION_102	FOR_2	IF_5
0x4007d83	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4479	ldlang.c	FUNCTION_102	FOR_2	IF_5
0x4007d87	          0x4885c0	                           test rax, rax	      4479	ldlang.c	FUNCTION_102	FOR_2	IF_5
0x4007d8a	            0x746a	                            je 0x4007df6	      4479	ldlang.c	FUNCTION_102	FOR_2	IF_5
0x4007d8c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007d90	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007d94	          0x488b00	                    mov rax, qword [rax]	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007d97	          0x4889c6	                            mov rsi, rax	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007d9a	      0xbf00000000	                              mov edi, 0	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007d9f	      0xb800000000	                              mov eax, 0	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007da4	      0xe800000000	                          call 0x4007da9	      4482	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_16
0x4007da9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007dad	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007db1	        0x488b4008	                mov rax, qword [rax + 8]	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007db5	        0x488945f8	                mov qword [rbp - 8], rax	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007db9	            0xeb25	                           jmp 0x4007de0	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007dbb	        0x488b45f8	                mov rax, qword [rbp - 8]	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dbf	          0x488b00	                    mov rax, qword [rax]	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dc2	          0x4889c6	                            mov rsi, rax	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dc5	      0xbf00000000	                              mov edi, 0	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dca	      0xb800000000	                              mov eax, 0	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dcf	      0xe800000000	                          call 0x4007dd4	      4484	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_17
0x4007dd4	        0x488b45f8	                mov rax, qword [rbp - 8]	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007dd8	        0x488b4008	                mov rax, qword [rax + 8]	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007ddc	        0x488945f8	                mov qword [rbp - 8], rax	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007de0	      0x48837df800	                  cmp qword [rbp - 8], 0	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007de5	            0x75d4	                           jne 0x4007dbb	      4483	ldlang.c	FUNCTION_102	FOR_2	IF_5	FOR_3
0x4007de7	      0xbf00000000	                              mov edi, 0	      4485	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_18
0x4007dec	      0xb800000000	                              mov eax, 0	      4485	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_18
0x4007df1	      0xe800000000	                          call 0x4007df6	      4485	ldlang.c	FUNCTION_102	FOR_2	IF_5	CALL_18
0x4007df6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4487	ldlang.c	FUNCTION_102	FOR_2	IF_6
0x4007dfa	        0x488b4008	                mov rax, qword [rax + 8]	      4487	ldlang.c	FUNCTION_102	FOR_2	IF_6
0x4007dfe	          0x4885c0	                           test rax, rax	      4487	ldlang.c	FUNCTION_102	FOR_2	IF_6
0x4007e01	            0x741c	                            je 0x4007e1f	      4487	ldlang.c	FUNCTION_102	FOR_2	IF_6
0x4007e03	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e07	        0x488b4008	                mov rax, qword [rax + 8]	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e0b	          0x4889c6	                            mov rsi, rax	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e0e	      0xbf00000000	                              mov edi, 0	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e13	      0xb800000000	                              mov eax, 0	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e18	      0xe800000000	                          call 0x4007e1d	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e1d	            0xeb24	                           jmp 0x4007e43	      4488	ldlang.c	FUNCTION_102	FOR_2	CALL_19
0x4007e1f	      0xbf00000000	                              mov edi, 0	      4490	ldlang.c	FUNCTION_102	FOR_2	CALL_20
0x4007e24	      0xb800000000	                              mov eax, 0	      4490	ldlang.c	FUNCTION_102	FOR_2	CALL_20
0x4007e29	      0xe800000000	                          call 0x4007e2e	      4490	ldlang.c	FUNCTION_102	FOR_2	CALL_20
0x4007e2e	            0xeb13	                           jmp 0x4007e43	      4491	ldlang.c	FUNCTION_102	FOR_2	FOR_4
0x4007e30	      0xbf00000000	                              mov edi, 0	      4492	ldlang.c	FUNCTION_102	FOR_2	CALL_21
0x4007e35	      0xb800000000	                              mov eax, 0	      4492	ldlang.c	FUNCTION_102	FOR_2	CALL_21
0x4007e3a	      0xe800000000	                          call 0x4007e3f	      4492	ldlang.c	FUNCTION_102	FOR_2	CALL_21
0x4007e3f	        0x836de401	               sub dword [rbp - 0x1c], 1	      4491	ldlang.c	FUNCTION_102	FOR_2	FOR_4
0x4007e43	        0x837de400	               cmp dword [rbp - 0x1c], 0	      4491	ldlang.c	FUNCTION_102	FOR_2	FOR_4
0x4007e47	            0x7fe7	                            jg 0x4007e30	      4491	ldlang.c	FUNCTION_102	FOR_2	FOR_4
0x4007e49	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4493	ldlang.c	FUNCTION_102	FOR_2	IF_7
0x4007e4d	          0x488b00	                    mov rax, qword [rax]	      4493	ldlang.c	FUNCTION_102	FOR_2	IF_7
0x4007e50	          0x4885c0	                           test rax, rax	      4493	ldlang.c	FUNCTION_102	FOR_2	IF_7
0x4007e53	            0x740f	                            je 0x4007e64	      4493	ldlang.c	FUNCTION_102	FOR_2	IF_7
0x4007e55	      0xbf00000000	                              mov edi, 0	      4494	ldlang.c	FUNCTION_102	FOR_2	CALL_22
0x4007e5a	      0xb800000000	                              mov eax, 0	      4494	ldlang.c	FUNCTION_102	FOR_2	CALL_22
0x4007e5f	      0xe800000000	                          call 0x4007e64	      4494	ldlang.c	FUNCTION_102	FOR_2	CALL_22
0x4007e64	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007e68	          0x488b00	                    mov rax, qword [rax]	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007e6b	        0x488945e8	             mov qword [rbp - 0x18], rax	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007e6f	      0x48837de800	               cmp qword [rbp - 0x18], 0	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007e74	     0xf8551feffff	                           jne 0x4007ccb	      4439	ldlang.c	FUNCTION_102	FOR_2
0x4007e7a	      0xbf00000000	                              mov edi, 0	      4496	ldlang.c	FUNCTION_102	CALL_23
0x4007e7f	      0xb800000000	                              mov eax, 0	      4496	ldlang.c	FUNCTION_102	CALL_23
0x4007e84	      0xe800000000	                          call 0x4007e89	      4496	ldlang.c	FUNCTION_102	CALL_23
0x4007e89	      0xe800000000	                          call 0x4007e8e	      4498	ldlang.c	FUNCTION_102	CALL_24
0x4007e8e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007e92	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007e96	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007e9a	          0x4889d6	                            mov rsi, rdx	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007e9d	          0x4889c7	                            mov rdi, rax	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007ea0	      0xe869000000	           call sym.print_statement_list	      4500	ldlang.c	FUNCTION_102	CALL_25
0x4007ea5	              0x90	                                     nop	      4501	ldlang.c	FUNCTION_102
0x4007ea6	              0xc9	                                   leave	      4501	ldlang.c	FUNCTION_102
0x4007ea7	              0xc3	                                     ret	      4501	ldlang.c	FUNCTION_102
lang_output_section_statement_lookup	functions,0:ELSE,1:FOR,0:CALL,6:IF,7:DO,1:WHILE,0:SWITCH,0	108
0x40024e1	              0x55	                                push rbp	      1429	ldlang.c	FUNCTION_45
0x40024e2	          0x4889e5	                            mov rbp, rsp	      1429	ldlang.c	FUNCTION_45
0x40024e5	        0x4883ec20	                           sub rsp, 0x20	      1429	ldlang.c	FUNCTION_45
0x40024e9	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1429	ldlang.c	FUNCTION_45
0x40024ed	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1429	ldlang.c	FUNCTION_45
0x40024f0	          0x8955e0	             mov dword [rbp - 0x20], edx	      1429	ldlang.c	FUNCTION_45
0x40024f3	          0x8b55e0	             mov edx, dword [rbp - 0x20]	      1432	ldlang.c	FUNCTION_45
0x40024f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1432	ldlang.c	FUNCTION_45
0x40024fa	      0xb900000000	                              mov ecx, 0	      1432	ldlang.c	FUNCTION_45
0x40024ff	          0x4889c6	                            mov rsi, rax	      1432	ldlang.c	FUNCTION_45
0x4002502	      0xbf00000000	                              mov edi, 0	      1432	ldlang.c	FUNCTION_45
0x4002507	      0xe800000000	                          call 0x400250c	      1432	ldlang.c	FUNCTION_45
0x400250c	        0x488945f0	             mov qword [rbp - 0x10], rax	      1432	ldlang.c	FUNCTION_45
0x4002510	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1435	ldlang.c	FUNCTION_45	IF_1
0x4002515	            0x7531	                           jne 0x4002548	      1435	ldlang.c	FUNCTION_45	IF_1
0x4002517	        0x837de000	               cmp dword [rbp - 0x20], 0	      1437	ldlang.c	FUNCTION_45	IF_1	IF_2
0x400251b	            0x7421	                            je 0x400253e	      1437	ldlang.c	FUNCTION_45	IF_1	IF_2
0x400251d	      0xbf00000000	                              mov edi, 0	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x4002522	      0xe800000000	                          call 0x4002527	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x4002527	          0x4889c2	                            mov rdx, rax	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x400252a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x400252e	          0x4889c6	                            mov rsi, rax	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x4002531	          0x4889d7	                            mov rdi, rdx	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x4002534	      0xb800000000	                              mov eax, 0	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x4002539	      0xe800000000	                          call 0x400253e	      1438	ldlang.c	FUNCTION_45	IF_1	CALL_3
0x400253e	      0xb800000000	                              mov eax, 0	      1439	ldlang.c	FUNCTION_45	IF_1
0x4002543	      0xe931010000	                           jmp 0x4002679	      1439	ldlang.c	FUNCTION_45	IF_1
0x4002548	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1442	ldlang.c	FUNCTION_45	IF_3
0x400254c	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1442	ldlang.c	FUNCTION_45	IF_3
0x4002550	          0x4885c0	                           test rax, rax	      1442	ldlang.c	FUNCTION_45	IF_3
0x4002553	     0xf84ff000000	                            je 0x4002658	      1442	ldlang.c	FUNCTION_45	IF_3
0x4002559	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1448	ldlang.c	FUNCTION_45	IF_3
0x400255d	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1448	ldlang.c	FUNCTION_45	IF_3
0x4002561	        0x488945e8	             mov qword [rbp - 0x18], rax	      1448	ldlang.c	FUNCTION_45	IF_3
0x4002565	        0x837de000	               cmp dword [rbp - 0x20], 0	      1449	ldlang.c	FUNCTION_45	IF_3	IF_4
0x4002569	            0x7413	                            je 0x400257e	      1449	ldlang.c	FUNCTION_45	IF_3	IF_4
0x400256b	    0x817de47e0100	          cmp dword [rbp - 0x1c], 0x17e 	      1449	ldlang.c	FUNCTION_45	IF_3	IF_4
0x4002572	            0x750a	                           jne 0x400257e	      1449	ldlang.c	FUNCTION_45	IF_3	IF_4
0x4002574	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1453	ldlang.c	FUNCTION_45	IF_3	IF_4
0x4002578	        0x488945f8	                mov qword [rbp - 8], rax	      1453	ldlang.c	FUNCTION_45	IF_3	IF_4
0x400257c	            0xeb58	                           jmp 0x40025d6	      1453	ldlang.c	FUNCTION_45	IF_3	IF_4
0x400257e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1457	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x4002582	    0x8b809c000000	            mov eax, dword [rax + 0x9c] 	      1457	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x4002588	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      1457	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x400258b	            0x7414	                            je 0x40025a1	      1457	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x400258d	        0x837de400	               cmp dword [rbp - 0x1c], 0	      1458	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x4002591	            0x751b	                           jne 0x40025ae	      1458	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x4002593	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1459	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x4002597	    0x8b809c000000	            mov eax, dword [rax + 0x9c] 	      1459	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x400259d	            0x85c0	                           test eax, eax	      1459	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x400259f	            0x780d	                            js 0x40025ae	      1459	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x40025a1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1460	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x40025a5	        0x4883c018	                           add rax, 0x18	      1460	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x40025a9	      0xe9cb000000	                           jmp 0x4002679	      1460	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1	IF_5
0x40025ae	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1461	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1
0x40025b2	        0x488945f8	                mov qword [rbp - 8], rax	      1461	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1
0x40025b6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1462	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1
0x40025ba	          0x488b00	                    mov rax, qword [rax]	      1462	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1
0x40025bd	        0x488945f0	             mov qword [rbp - 0x10], rax	      1462	ldlang.c	FUNCTION_45	IF_3	ELSE_1	DO_1
0x40025c1	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025c6	            0x740e	                            je 0x40025d6	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025cc	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025d0	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025d4	            0x74a8	                            je 0x400257e	      1465	ldlang.c	FUNCTION_45	IF_3
0x40025d6	        0x837de000	               cmp dword [rbp - 0x20], 0	      1467	ldlang.c	FUNCTION_45	IF_3	IF_6
0x40025da	            0x750a	                           jne 0x40025e6	      1467	ldlang.c	FUNCTION_45	IF_3	IF_6
0x40025dc	      0xb800000000	                              mov eax, 0	      1468	ldlang.c	FUNCTION_45	IF_3	IF_6
0x40025e1	      0xe993000000	                           jmp 0x4002679	      1468	ldlang.c	FUNCTION_45	IF_3	IF_6
0x40025e6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1471	ldlang.c	FUNCTION_45	IF_3
0x40025ea	          0x4889c2	                            mov rdx, rax	      1471	ldlang.c	FUNCTION_45	IF_3
0x40025ed	      0xbe00000000	                              mov esi, 0	      1471	ldlang.c	FUNCTION_45	IF_3
0x40025f2	      0xbf00000000	                              mov edi, 0	      1471	ldlang.c	FUNCTION_45	IF_3
0x40025f7	      0xe8cdf8ffff	call sym.output_section_statement_newfunc	      1471	ldlang.c	FUNCTION_45	IF_3
0x40025fc	        0x488945f0	             mov qword [rbp - 0x10], rax	      1471	ldlang.c	FUNCTION_45	IF_3
0x4002600	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1475	ldlang.c	FUNCTION_45	IF_3	IF_7
0x4002605	            0x7528	                           jne 0x400262f	      1475	ldlang.c	FUNCTION_45	IF_3	IF_7
0x4002607	      0xbf00000000	                              mov edi, 0	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x400260c	      0xe800000000	                          call 0x4002611	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x4002611	          0x4889c2	                            mov rdx, rax	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x4002614	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x4002618	          0x4889c6	                            mov rsi, rax	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x400261b	          0x4889d7	                            mov rdi, rdx	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x400261e	      0xb800000000	                              mov eax, 0	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x4002623	      0xe800000000	                          call 0x4002628	      1477	ldlang.c	FUNCTION_45	IF_3	IF_7	CALL_6
0x4002628	      0xb800000000	                              mov eax, 0	      1478	ldlang.c	FUNCTION_45	IF_3	IF_7
0x400262d	            0xeb4a	                           jmp 0x4002679	      1478	ldlang.c	FUNCTION_45	IF_3	IF_7
0x400262f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1480	ldlang.c	FUNCTION_45	IF_3
0x4002633	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1480	ldlang.c	FUNCTION_45	IF_3
0x4002637	          0x488b0a	                    mov rcx, qword [rdx]	      1480	ldlang.c	FUNCTION_45	IF_3
0x400263a	          0x488908	                    mov qword [rax], rcx	      1480	ldlang.c	FUNCTION_45	IF_3
0x400263d	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1480	ldlang.c	FUNCTION_45	IF_3
0x4002641	        0x48894808	                mov qword [rax + 8], rcx	      1480	ldlang.c	FUNCTION_45	IF_3
0x4002645	        0x488b5210	            mov rdx, qword [rdx + 0x10] 	      1480	ldlang.c	FUNCTION_45	IF_3
0x4002649	        0x48895010	             mov qword [rax + 0x10], rdx	      1480	ldlang.c	FUNCTION_45	IF_3
0x400264d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1481	ldlang.c	FUNCTION_45	IF_3
0x4002651	        0x488b45f8	                mov rax, qword [rbp - 8]	      1481	ldlang.c	FUNCTION_45	IF_3
0x4002655	          0x488910	                    mov qword [rax], rdx	      1481	ldlang.c	FUNCTION_45	IF_3
0x4002658	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1484	ldlang.c	FUNCTION_45
0x400265c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1484	ldlang.c	FUNCTION_45
0x4002660	        0x48895048	             mov qword [rax + 0x48], rdx	      1484	ldlang.c	FUNCTION_45
0x4002664	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1485	ldlang.c	FUNCTION_45
0x4002668	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1485	ldlang.c	FUNCTION_45
0x400266b	    0x89909c000000	             mov dword [rax + 0x9c], edx	      1485	ldlang.c	FUNCTION_45
0x4002671	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1486	ldlang.c	FUNCTION_45
0x4002675	        0x4883c018	                           add rax, 0x18	      1486	ldlang.c	FUNCTION_45
0x4002679	              0xc9	                                   leave	      1487	ldlang.c	FUNCTION_45
0x400267a	              0xc3	                                     ret	      1487	ldlang.c	FUNCTION_45
new_statement	functions,0:ELSE,0:FOR,0:CALL,2:IF,0:DO,0:WHILE,0:SWITCH,0	24
0x4001a6f	              0x55	                                push rbp	      1036	ldlang.c	FUNCTION_33
0x4001a70	          0x4889e5	                            mov rbp, rsp	      1036	ldlang.c	FUNCTION_33
0x4001a73	        0x4883ec30	                           sub rsp, 0x30	      1036	ldlang.c	FUNCTION_33
0x4001a77	          0x897dec	             mov dword [rbp - 0x14], edi	      1036	ldlang.c	FUNCTION_33
0x4001a7a	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1036	ldlang.c	FUNCTION_33
0x4001a7e	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1036	ldlang.c	FUNCTION_33
0x4001a82	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1039	ldlang.c	FUNCTION_33	CALL_1
0x4001a86	          0x4889c7	                            mov rdi, rax	      1039	ldlang.c	FUNCTION_33	CALL_1
0x4001a89	      0xe800000000	                          call 0x4001a8e	      1039	ldlang.c	FUNCTION_33	CALL_1
0x4001a8e	        0x488945f8	                mov qword [rbp - 8], rax	      1039	ldlang.c	FUNCTION_33	CALL_1
0x4001a92	        0x488b45f8	                mov rax, qword [rbp - 8]	      1040	ldlang.c	FUNCTION_33
0x4001a96	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      1040	ldlang.c	FUNCTION_33
0x4001a99	          0x895008	                mov dword [rax + 8], edx	      1040	ldlang.c	FUNCTION_33
0x4001a9c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1041	ldlang.c	FUNCTION_33
0x4001aa0	    0x48c700000000	                      mov qword [rax], 0	      1041	ldlang.c	FUNCTION_33
0x4001aa7	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001aab	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001aaf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001ab3	          0x4889ce	                            mov rsi, rcx	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001ab6	          0x4889c7	                            mov rdi, rax	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001ab9	      0xe800000000	                          call 0x4001abe	      1042	ldlang.c	FUNCTION_33	CALL_2
0x4001abe	        0x488b45f8	                mov rax, qword [rbp - 8]	      1043	ldlang.c	FUNCTION_33
0x4001ac2	              0xc9	                                   leave	      1044	ldlang.c	FUNCTION_33
0x4001ac3	              0xc3	                                     ret	      1044	ldlang.c	FUNCTION_33
lang_set_flags	functions,0:ELSE,0:FOR,0:CALL,2:IF,0:DO,0:WHILE,1:SWITCH,1	99
0x400be9a	              0x55	                                push rbp	      6561	ldlang.c	FUNCTION_140
0x400be9b	          0x4889e5	                            mov rbp, rsp	      6561	ldlang.c	FUNCTION_140
0x400be9e	            0x4154	                                push r12	      6561	ldlang.c	FUNCTION_140
0x400bea0	              0x53	                                push rbx	      6561	ldlang.c	FUNCTION_140
0x400bea1	        0x4883ec30	                           sub rsp, 0x30	      6561	ldlang.c	FUNCTION_140
0x400bea5	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      6561	ldlang.c	FUNCTION_140
0x400bea9	        0x488975d0	             mov qword [rbp - 0x30], rsi	      6561	ldlang.c	FUNCTION_140
0x400bead	          0x8955cc	             mov dword [rbp - 0x34], edx	      6561	ldlang.c	FUNCTION_140
0x400beb0	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      6564	ldlang.c	FUNCTION_140
0x400beb4	            0x740a	                            je 0x400bec0	      6564	ldlang.c	FUNCTION_140
0x400beb6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6564	ldlang.c	FUNCTION_140
0x400beba	        0x4883c04c	                           add rax, 0x4c	      6564	ldlang.c	FUNCTION_140
0x400bebe	            0xeb08	                           jmp 0x400bec8	      6564	ldlang.c	FUNCTION_140
0x400bec0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6564	ldlang.c	FUNCTION_140
0x400bec4	        0x4883c048	                           add rax, 0x48	      6564	ldlang.c	FUNCTION_140
0x400bec8	        0x488945e8	             mov qword [rbp - 0x18], rax	      6564	ldlang.c	FUNCTION_140
0x400becc	      0xe9e6000000	                           jmp 0x400bfb7	      6566	ldlang.c	FUNCTION_140	WHILE_1
0x400bed1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bed5	           0xfb600	                   movzx eax, byte [rax]	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bed8	           0xfbec0	                           movsx eax, al	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bedb	          0x83e821	                           sub eax, 0x21	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bede	          0x83f857	                           cmp eax, 0x57	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bee1	     0xf8799000000	                            ja 0x400bf80	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bee7	            0x89c0	                            mov eax, eax	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bee9	    0x488b04c50000	                  mov rax, qword [rax*8]	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bef1	            0xffe0	                                 jmp rax	      6568	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bef3	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      6573	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bef7	           0xf94c0	                                 sete al	      6573	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400befa	           0xfb6c0	                           movzx eax, al	      6573	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400befd	          0x8945cc	             mov dword [rbp - 0x34], eax	      6573	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf00	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf04	            0x740a	                            je 0x400bf10	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf06	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf0a	        0x4883c04c	                           add rax, 0x4c	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf0e	            0xeb08	                           jmp 0x400bf18	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf10	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf14	        0x4883c048	                           add rax, 0x48	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf18	        0x488945e8	             mov qword [rbp - 0x18], rax	      6574	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf1c	      0xe991000000	                           jmp 0x400bfb2	      6575	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf21	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf25	            0x8b00	                    mov eax, dword [rax]	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf27	          0x83c801	                               or eax, 1	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf2a	            0x89c2	                            mov edx, eax	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf2c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf30	            0x8910	                    mov dword [rax], edx	      6578	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf32	            0xeb7e	                           jmp 0x400bfb2	      6579	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf34	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf38	            0x8b00	                    mov eax, dword [rax]	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf3a	          0x83c808	                               or eax, 8	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf3d	            0x89c2	                            mov edx, eax	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf3f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf43	            0x8910	                    mov dword [rax], edx	      6582	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf45	            0xeb6b	                           jmp 0x400bfb2	      6583	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf47	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf4b	            0x8b00	                    mov eax, dword [rax]	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf4d	          0x83c820	                            or eax, 0x20	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf50	            0x89c2	                            mov edx, eax	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf52	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf56	            0x8910	                    mov dword [rax], edx	      6586	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf58	            0xeb58	                           jmp 0x400bfb2	      6587	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf5a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf5e	            0x8b00	                    mov eax, dword [rax]	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf60	          0x83c810	                            or eax, 0x10	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf63	            0x89c2	                            mov edx, eax	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf65	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf69	            0x8910	                    mov dword [rax], edx	      6590	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf6b	            0xeb45	                           jmp 0x400bfb2	      6591	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf6d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf71	            0x8b00	                    mov eax, dword [rax]	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf73	          0x83c802	                               or eax, 2	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf76	            0x89c2	                            mov edx, eax	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf78	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf7c	            0x8910	                    mov dword [rax], edx	      6595	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf7e	            0xeb32	                           jmp 0x400bfb2	      6596	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf80	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6600	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf84	           0xfb600	                   movzx eax, byte [rax]	      6600	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf87	        0x440fbee0	                          movsx r12d, al	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bf8b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6600	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf8f	           0xfb600	                   movzx eax, byte [rax]	      6600	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bf92	           0xfbed8	                           movsx ebx, al	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bf95	      0xbf00000000	                              mov edi, 0	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bf9a	      0xe800000000	                          call 0x400bf9f	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bf9f	          0x4489e2	                           mov edx, r12d	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bfa2	            0x89de	                            mov esi, ebx	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bfa4	          0x4889c7	                            mov rdi, rax	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bfa7	      0xb800000000	                              mov eax, 0	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bfac	      0xe800000000	                          call 0x400bfb1	      6599	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1	CALL_2
0x400bfb1	              0x90	                                     nop	      6601	ldlang.c	FUNCTION_140	WHILE_1	SWITCH_1
0x400bfb2	      0x488345d001	               add qword [rbp - 0x30], 1	      6603	ldlang.c	FUNCTION_140	WHILE_1
0x400bfb7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6566	ldlang.c	FUNCTION_140	WHILE_1
0x400bfbb	           0xfb600	                   movzx eax, byte [rax]	      6566	ldlang.c	FUNCTION_140	WHILE_1
0x400bfbe	            0x84c0	                             test al, al	      6566	ldlang.c	FUNCTION_140	WHILE_1
0x400bfc0	     0xf850bffffff	                           jne 0x400bed1	      6566	ldlang.c	FUNCTION_140	WHILE_1
0x400bfc6	              0x90	                                     nop	      6605	ldlang.c	FUNCTION_140
0x400bfc7	        0x4883c430	                           add rsp, 0x30	      6605	ldlang.c	FUNCTION_140
0x400bfcb	              0x5b	                                 pop rbx	      6605	ldlang.c	FUNCTION_140
0x400bfcc	            0x415c	                                 pop r12	      6605	ldlang.c	FUNCTION_140
0x400bfce	              0x5d	                                 pop rbp	      6605	ldlang.c	FUNCTION_140
0x400bfcf	              0xc3	                                     ret	      6605	ldlang.c	FUNCTION_140
print_assignment	functions,0:ELSE,6:FOR,1:CALL,12:IF,10:DO,0:WHILE,0:SWITCH,0	158
0x4006ea9	              0x55	                                push rbp	      4028	ldlang.c	FUNCTION_91
0x4006eaa	          0x4889e5	                            mov rbp, rsp	      4028	ldlang.c	FUNCTION_91
0x4006ead	        0x4883ec40	                           sub rsp, 0x40	      4028	ldlang.c	FUNCTION_91
0x4006eb1	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      4028	ldlang.c	FUNCTION_91
0x4006eb5	        0x488975c0	             mov qword [rbp - 0x40], rsi	      4028	ldlang.c	FUNCTION_91
0x4006eb9	    0xc745d0000000	               mov dword [rbp - 0x30], 0	      4034	ldlang.c	FUNCTION_91	FOR_1
0x4006ec0	            0xeb09	                           jmp 0x4006ecb	      4034	ldlang.c	FUNCTION_91	FOR_1
0x4006ec2	      0xe800000000	                          call 0x4006ec7	      4035	ldlang.c	FUNCTION_91	CALL_1
0x4006ec7	        0x8345d001	               add dword [rbp - 0x30], 1	      4034	ldlang.c	FUNCTION_91	FOR_1
0x4006ecb	        0x837dd00f	            cmp dword [rbp - 0x30], 0xf 	      4034	ldlang.c	FUNCTION_91	FOR_1
0x4006ecf	            0x76f1	                           jbe 0x4006ec2	      4034	ldlang.c	FUNCTION_91	FOR_1
0x4006ed1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4037	ldlang.c	FUNCTION_91	IF_1
0x4006ed5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4037	ldlang.c	FUNCTION_91	IF_1
0x4006ed9	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4037	ldlang.c	FUNCTION_91	IF_1
0x4006edc	          0x83f808	                              cmp eax, 8	      4037	ldlang.c	FUNCTION_91	IF_1
0x4006edf	            0x7519	                           jne 0x4006efa	      4037	ldlang.c	FUNCTION_91	IF_1
0x4006ee1	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      4039	ldlang.c	FUNCTION_91	IF_1
0x4006ee8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4040	ldlang.c	FUNCTION_91	IF_1
0x4006eec	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4040	ldlang.c	FUNCTION_91	IF_1
0x4006ef0	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4040	ldlang.c	FUNCTION_91	IF_1
0x4006ef4	        0x488945d8	             mov qword [rbp - 0x28], rax	      4040	ldlang.c	FUNCTION_91	IF_1
0x4006ef8	            0xeb5a	                           jmp 0x4006f54	      4040	ldlang.c	FUNCTION_91	IF_1
0x4006efa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4044	ldlang.c	FUNCTION_91	ELSE_1
0x4006efe	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4044	ldlang.c	FUNCTION_91	ELSE_1
0x4006f02	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4044	ldlang.c	FUNCTION_91	ELSE_1
0x4006f06	        0x488945f0	             mov qword [rbp - 0x10], rax	      4044	ldlang.c	FUNCTION_91	ELSE_1
0x4006f0a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f0e	           0xfb600	                   movzx eax, byte [rax]	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f11	            0x3c2e	                            cmp al, 0x2e	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f13	            0x7516	                           jne 0x4006f2b	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f15	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f19	        0x4883c001	                              add rax, 1	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f1d	           0xfb600	                   movzx eax, byte [rax]	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f20	            0x84c0	                             test al, al	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f22	            0x7507	                           jne 0x4006f2b	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f24	      0xb801000000	                              mov eax, 1	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f29	            0xeb05	                           jmp 0x4006f30	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f2b	      0xb800000000	                              mov eax, 0	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f30	          0x8945d4	             mov dword [rbp - 0x2c], eax	      4046	ldlang.c	FUNCTION_91	ELSE_1
0x4006f33	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      4047	ldlang.c	FUNCTION_91	ELSE_1	IF_2
0x4006f37	            0x750b	                           jne 0x4006f44	      4047	ldlang.c	FUNCTION_91	ELSE_1	IF_2
0x4006f39	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4048	ldlang.c	FUNCTION_91	ELSE_1	IF_2
0x4006f3d	    0x488905000000	            mov qword [0x04006f44], rax 	      4048	ldlang.c	FUNCTION_91	ELSE_1	IF_2
0x4006f44	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4049	ldlang.c	FUNCTION_91	ELSE_1
0x4006f48	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4049	ldlang.c	FUNCTION_91	ELSE_1
0x4006f4c	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4049	ldlang.c	FUNCTION_91	ELSE_1
0x4006f50	        0x488945d8	             mov qword [rbp - 0x28], rax	      4049	ldlang.c	FUNCTION_91	ELSE_1
0x4006f54	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4052	ldlang.c	FUNCTION_91
0x4006f58	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4052	ldlang.c	FUNCTION_91
0x4006f5c	        0x488945e0	             mov qword [rbp - 0x20], rax	      4052	ldlang.c	FUNCTION_91
0x4006f60	      0x48837de000	               cmp qword [rbp - 0x20], 0	      4053	ldlang.c	FUNCTION_91	IF_3
0x4006f65	            0x7508	                           jne 0x4006f6f	      4053	ldlang.c	FUNCTION_91	IF_3
0x4006f67	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      4054	ldlang.c	FUNCTION_91	IF_3
0x4006f6f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4056	ldlang.c	FUNCTION_91	IF_4
0x4006f73	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4056	ldlang.c	FUNCTION_91	IF_4
0x4006f77	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4056	ldlang.c	FUNCTION_91	IF_4
0x4006f7a	          0x83f805	                              cmp eax, 5	      4056	ldlang.c	FUNCTION_91	IF_4
0x4006f7d	            0x741a	                            je 0x4006f99	      4056	ldlang.c	FUNCTION_91	IF_4
0x4006f7f	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f83	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f87	      0xba00000000	                              mov edx, 0	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f8c	          0x4889ce	                            mov rsi, rcx	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f8f	          0x4889c7	                            mov rdi, rax	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f92	      0xe800000000	                          call 0x4006f97	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f97	            0xeb0a	                           jmp 0x4006fa3	      4057	ldlang.c	FUNCTION_91	CALL_2
0x4006f99	    0xc70500000000	               mov dword [0x04006fa3], 0	      4059	ldlang.c	FUNCTION_91	ELSE_2
0x4006fa3	    0x8b0500000000	            mov eax, dword [0x04006fa9] 	      4061	ldlang.c	FUNCTION_91	ELSE_2	IF_5
0x4006fa9	            0x85c0	                           test eax, eax	      4061	ldlang.c	FUNCTION_91	ELSE_2	IF_5
0x4006fab	     0xf8407010000	                            je 0x40070b8	      4061	ldlang.c	FUNCTION_91	ELSE_2	IF_5
0x4006fb1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4065	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fb5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4065	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fb9	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4065	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fbc	          0x83f808	                              cmp eax, 8	      4065	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fbf	            0x7412	                            je 0x4006fd3	      4065	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fc1	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      4066	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fc5	            0x750c	                           jne 0x4006fd3	      4066	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fc7	    0x488b05000000	            mov rax, qword [0x04006fce] 	      4067	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fce	          0x4885c0	                           test rax, rax	      4067	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fd1	            0x7456	                            je 0x4007029	      4067	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fd3	    0x488b05000000	            mov rax, qword [0x04006fda] 	      4069	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fda	        0x488945e8	             mov qword [rbp - 0x18], rax	      4069	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6
0x4006fde	    0x488b05000000	            mov rax, qword [0x04006fe5] 	      4071	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006fe5	          0x4885c0	                           test rax, rax	      4071	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006fe8	            0x740f	                            je 0x4006ff9	      4071	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006fea	    0x488b05000000	            mov rax, qword [0x04006ff1] 	      4072	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006ff1	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4072	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006ff5	        0x480145e8	            add qword [rbp - 0x18], rax 	      4072	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_7
0x4006ff9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4074	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	CALL_3
0x4006ffd	          0x4889c6	                            mov rsi, rax	      4074	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	CALL_3
0x4007000	      0xbf00000000	                              mov edi, 0	      4074	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	CALL_3
0x4007005	      0xb800000000	                              mov eax, 0	      4074	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	CALL_3
0x400700a	      0xe800000000	                          call 0x400700f	      4074	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	CALL_3
0x400700f	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      4075	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_8
0x4007013	     0xf84de000000	                            je 0x40070f7	      4075	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_8
0x4007019	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4076	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_8
0x400701d	    0x488905000000	            mov qword [0x04007024], rax 	      4076	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_8
0x4007024	      0xe9ce000000	                           jmp 0x40070f7	      4075	ldlang.c	FUNCTION_91	ELSE_2	IF_5	IF_6	IF_8
0x4007029	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x400702d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007031	        0x488b7018	            mov rsi, qword [rax + 0x18] 	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007035	    0x488b05000000	            mov rax, qword [0x0400703c] 	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x400703c	    0x41b801000000	                              mov r8d, 1	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007042	      0xb900000000	                              mov ecx, 0	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007047	      0xba00000000	                              mov edx, 0	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x400704c	          0x4889c7	                            mov rdi, rax	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x400704f	      0xe800000000	                          call 0x4007054	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007054	        0x488945f8	                mov qword [rbp - 8], rax	      4082	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_4
0x4007058	      0x48837df800	                  cmp qword [rbp - 8], 0	      4084	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400705d	            0x7448	                            je 0x40070a7	      4084	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400705f	        0x488b45f8	                mov rax, qword [rbp - 8]	      4086	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007063	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4086	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007067	        0x488945e8	             mov qword [rbp - 0x18], rax	      4086	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400706b	        0x488b45f8	                mov rax, qword [rbp - 8]	      4087	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400706f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4087	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007073	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4087	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007077	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4087	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400707b	        0x480145e8	            add qword [rbp - 0x18], rax 	      4087	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400707f	        0x488b45f8	                mov rax, qword [rbp - 8]	      4088	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007083	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4088	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x4007087	        0x488b4060	            mov rax, qword [rax + 0x60] 	      4088	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400708b	        0x480145e8	            add qword [rbp - 0x18], rax 	      4088	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9
0x400708f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x4007093	          0x4889c6	                            mov rsi, rax	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x4007096	      0xbf00000000	                              mov edi, 0	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x400709b	      0xb800000000	                              mov eax, 0	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x40070a0	      0xe800000000	                          call 0x40070a5	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x40070a5	            0xeb50	                           jmp 0x40070f7	      4090	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	IF_9	CALL_5
0x40070a7	      0xbf00000000	                              mov edi, 0	      4093	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_6
0x40070ac	      0xb800000000	                              mov eax, 0	      4093	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_6
0x40070b1	      0xe800000000	                          call 0x40070b6	      4093	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_6
0x40070b6	            0xeb3f	                           jmp 0x40070f7	      4093	ldlang.c	FUNCTION_91	ELSE_2	IF_5	ELSE_3	CALL_6
0x40070b8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4098	ldlang.c	FUNCTION_91	ELSE_5	IF_10
0x40070bc	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4098	ldlang.c	FUNCTION_91	ELSE_5	IF_10
0x40070c0	          0x8b4010	            mov eax, dword [rax + 0x10] 	      4098	ldlang.c	FUNCTION_91	ELSE_5	IF_10
0x40070c3	          0x83f805	                              cmp eax, 5	      4098	ldlang.c	FUNCTION_91	ELSE_5	IF_10
0x40070c6	            0x7511	                           jne 0x40070d9	      4098	ldlang.c	FUNCTION_91	ELSE_5	IF_10
0x40070c8	      0xbf00000000	                              mov edi, 0	      4099	ldlang.c	FUNCTION_91	ELSE_5	CALL_7
0x40070cd	      0xb800000000	                              mov eax, 0	      4099	ldlang.c	FUNCTION_91	ELSE_5	CALL_7
0x40070d2	      0xe800000000	                          call 0x40070d7	      4099	ldlang.c	FUNCTION_91	ELSE_5	CALL_7
0x40070d7	            0xeb0f	                           jmp 0x40070e8	      4099	ldlang.c	FUNCTION_91	ELSE_5	CALL_7
0x40070d9	      0xbf00000000	                              mov edi, 0	      4101	ldlang.c	FUNCTION_91	ELSE_5	CALL_8
0x40070de	      0xb800000000	                              mov eax, 0	      4101	ldlang.c	FUNCTION_91	ELSE_5	CALL_8
0x40070e3	      0xe800000000	                          call 0x40070e8	      4101	ldlang.c	FUNCTION_91	ELSE_5	CALL_8
0x40070e8	      0xbf00000000	                              mov edi, 0	      4103	ldlang.c	FUNCTION_91	ELSE_5	CALL_9
0x40070ed	      0xb800000000	                              mov eax, 0	      4103	ldlang.c	FUNCTION_91	ELSE_5	CALL_9
0x40070f2	      0xe800000000	                          call 0x40070f7	      4103	ldlang.c	FUNCTION_91	ELSE_5	CALL_9
0x40070f7	    0x48c705000000	               mov qword [0x04007102], 0	      4106	ldlang.c	FUNCTION_91
0x4007102	      0xbf00000000	                              mov edi, 0	      4108	ldlang.c	FUNCTION_91	CALL_10
0x4007107	      0xb800000000	                              mov eax, 0	      4108	ldlang.c	FUNCTION_91	CALL_10
0x400710c	      0xe800000000	                          call 0x4007111	      4108	ldlang.c	FUNCTION_91	CALL_10
0x4007111	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4109	ldlang.c	FUNCTION_91	CALL_11
0x4007115	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4109	ldlang.c	FUNCTION_91	CALL_11
0x4007119	          0x4889c7	                            mov rdi, rax	      4109	ldlang.c	FUNCTION_91	CALL_11
0x400711c	      0xe800000000	                          call 0x4007121	      4109	ldlang.c	FUNCTION_91	CALL_11
0x4007121	      0xe800000000	                          call 0x4007126	      4110	ldlang.c	FUNCTION_91	CALL_12
0x4007126	              0x90	                                     nop	      4111	ldlang.c	FUNCTION_91
0x4007127	              0xc9	                                   leave	      4111	ldlang.c	FUNCTION_91
0x4007128	              0xc3	                                     ret	      4111	ldlang.c	FUNCTION_91
lang_size_segment	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	50
0x400a1b4	              0x55	                                push rbp	      5608	ldlang.c	FUNCTION_118
0x400a1b5	          0x4889e5	                            mov rbp, rsp	      5608	ldlang.c	FUNCTION_118
0x400a1b8	        0x48897de8	             mov qword [rbp - 0x18], rdi	      5608	ldlang.c	FUNCTION_118
0x400a1bc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5613	ldlang.c	FUNCTION_118
0x400a1c0	        0x488b4008	                mov rax, qword [rax + 8]	      5613	ldlang.c	FUNCTION_118
0x400a1c4	          0x48f7d8	                                 neg rax	      5613	ldlang.c	FUNCTION_118
0x400a1c7	          0x4889c2	                            mov rdx, rax	      5613	ldlang.c	FUNCTION_118
0x400a1ca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5613	ldlang.c	FUNCTION_118
0x400a1ce	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5613	ldlang.c	FUNCTION_118
0x400a1d2	        0x4883e801	                              sub rax, 1	      5613	ldlang.c	FUNCTION_118
0x400a1d6	          0x4821d0	                            and rax, rdx	      5613	ldlang.c	FUNCTION_118
0x400a1d9	        0x488945f0	             mov qword [rbp - 0x10], rax	      5613	ldlang.c	FUNCTION_118
0x400a1dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5614	ldlang.c	FUNCTION_118
0x400a1e1	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      5614	ldlang.c	FUNCTION_118
0x400a1e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5614	ldlang.c	FUNCTION_118
0x400a1e9	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5614	ldlang.c	FUNCTION_118
0x400a1ed	        0x4883e801	                              sub rax, 1	      5614	ldlang.c	FUNCTION_118
0x400a1f1	          0x4821d0	                            and rax, rdx	      5614	ldlang.c	FUNCTION_118
0x400a1f4	        0x488945f8	                mov qword [rbp - 8], rax	      5614	ldlang.c	FUNCTION_118
0x400a1f8	      0x48837df000	               cmp qword [rbp - 0x10], 0	      5615	ldlang.c	FUNCTION_118	IF_1
0x400a1fd	            0x7456	                            je 0x400a255	      5615	ldlang.c	FUNCTION_118	IF_1
0x400a1ff	      0x48837df800	                  cmp qword [rbp - 8], 0	      5615	ldlang.c	FUNCTION_118	IF_1
0x400a204	            0x744f	                            je 0x400a255	      5615	ldlang.c	FUNCTION_118	IF_1
0x400a206	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a20a	        0x488b5008	                mov rdx, qword [rax + 8]	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a20e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5617	ldlang.c	FUNCTION_118	IF_1
0x400a212	        0x488b4020	            mov rax, qword [rax + 0x20] 	      5617	ldlang.c	FUNCTION_118	IF_1
0x400a216	          0x4831c2	                            xor rdx, rax	      5617	ldlang.c	FUNCTION_118	IF_1
0x400a219	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a21d	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a221	          0x48f7d8	                                 neg rax	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a224	          0x4821d0	                            and rax, rdx	      5617	ldlang.c	FUNCTION_118	IF_1
0x400a227	          0x4885c0	                           test rax, rax	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a22a	            0x7429	                            je 0x400a255	      5616	ldlang.c	FUNCTION_118	IF_1
0x400a22c	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a230	        0x488b45f8	                mov rax, qword [rbp - 8]	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a234	          0x4801c2	                            add rdx, rax	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a237	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a23b	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a23f	          0x4839c2	                            cmp rdx, rax	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a242	            0x7711	                            ja 0x400a255	      5618	ldlang.c	FUNCTION_118	IF_1
0x400a244	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5620	ldlang.c	FUNCTION_118	IF_1
0x400a248	    0xc70005000000	                      mov dword [rax], 5	      5620	ldlang.c	FUNCTION_118	IF_1
0x400a24e	      0xb801000000	                              mov eax, 1	      5621	ldlang.c	FUNCTION_118	IF_1
0x400a253	            0xeb0f	                           jmp 0x400a264	      5621	ldlang.c	FUNCTION_118	IF_1
0x400a255	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5624	ldlang.c	FUNCTION_118
0x400a259	    0xc70006000000	                      mov dword [rax], 6	      5624	ldlang.c	FUNCTION_118
0x400a25f	      0xb800000000	                              mov eax, 0	      5625	ldlang.c	FUNCTION_118
0x400a264	              0x5d	                                 pop rbp	      5626	ldlang.c	FUNCTION_118
0x400a265	              0xc3	                                     ret	      5626	ldlang.c	FUNCTION_118
lang_leave_group	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	6
0x400d907	              0x55	                                push rbp	      7729	ldlang.c	FUNCTION_183
0x400d908	          0x4889e5	                            mov rbp, rsp	      7729	ldlang.c	FUNCTION_183
0x400d90b	      0xe800000000	                          call 0x400d910	      7730	ldlang.c	FUNCTION_183	CALL_1
0x400d910	              0x90	                                     nop	      7731	ldlang.c	FUNCTION_183
0x400d911	              0x5d	                                 pop rbp	      7731	ldlang.c	FUNCTION_183
0x400d912	              0xc3	                                     ret	      7731	ldlang.c	FUNCTION_183
lang_startup	functions,0:ELSE,0:FOR,0:CALL,2:IF,1:DO,0:WHILE,0:SWITCH,0	26
0x400d613	              0x55	                                push rbp	      7599	ldlang.c	FUNCTION_175
0x400d614	          0x4889e5	                            mov rbp, rsp	      7599	ldlang.c	FUNCTION_175
0x400d617	        0x4883ec10	                           sub rsp, 0x10	      7599	ldlang.c	FUNCTION_175
0x400d61b	        0x48897df8	                mov qword [rbp - 8], rdi	      7599	ldlang.c	FUNCTION_175
0x400d61f	    0x488b05000000	            mov rax, qword [0x0400d626] 	      7600	ldlang.c	FUNCTION_175	IF_1
0x400d626	        0x488b4010	            mov rax, qword [rax + 0x10] 	      7600	ldlang.c	FUNCTION_175	IF_1
0x400d62a	          0x4885c0	                           test rax, rax	      7600	ldlang.c	FUNCTION_175	IF_1
0x400d62d	            0x7417	                            je 0x400d646	      7600	ldlang.c	FUNCTION_175	IF_1
0x400d62f	      0xbf00000000	                              mov edi, 0	      7602	ldlang.c	FUNCTION_175	IF_1	CALL_2
0x400d634	      0xe800000000	                          call 0x400d639	      7602	ldlang.c	FUNCTION_175	IF_1	CALL_2
0x400d639	          0x4889c7	                            mov rdi, rax	      7602	ldlang.c	FUNCTION_175	IF_1	CALL_2
0x400d63c	      0xb800000000	                              mov eax, 0	      7602	ldlang.c	FUNCTION_175	IF_1	CALL_2
0x400d641	      0xe800000000	                          call 0x400d646	      7602	ldlang.c	FUNCTION_175	IF_1	CALL_2
0x400d646	    0x488b05000000	            mov rax, qword [0x0400d64d] 	      7604	ldlang.c	FUNCTION_175
0x400d64d	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7604	ldlang.c	FUNCTION_175
0x400d651	        0x48895010	             mov qword [rax + 0x10], rdx	      7604	ldlang.c	FUNCTION_175
0x400d655	    0x488b05000000	            mov rax, qword [0x0400d65c] 	      7605	ldlang.c	FUNCTION_175
0x400d65c	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7605	ldlang.c	FUNCTION_175
0x400d660	        0x48895018	             mov qword [rax + 0x18], rdx	      7605	ldlang.c	FUNCTION_175
0x400d664	    0x488b05000000	            mov rax, qword [0x0400d66b] 	      7606	ldlang.c	FUNCTION_175
0x400d66b	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      7606	ldlang.c	FUNCTION_175
0x400d66f	          0x83ca04	                               or edx, 4	      7606	ldlang.c	FUNCTION_175
0x400d672	          0x885049	               mov byte [rax + 0x49], dl	      7606	ldlang.c	FUNCTION_175
0x400d675	              0x90	                                     nop	      7607	ldlang.c	FUNCTION_175
0x400d676	              0xc9	                                   leave	      7607	ldlang.c	FUNCTION_175
0x400d677	              0xc3	                                     ret	      7607	ldlang.c	FUNCTION_175
init_os	functions,0:ELSE,0:FOR,0:CALL,10:IF,7:DO,0:WHILE,0:SWITCH,0	106
0x4003d15	              0x55	                                push rbp	      2165	ldlang.c	FUNCTION_55
0x4003d16	          0x4889e5	                            mov rbp, rsp	      2165	ldlang.c	FUNCTION_55
0x4003d19	            0x4154	                                push r12	      2165	ldlang.c	FUNCTION_55
0x4003d1b	              0x53	                                push rbx	      2165	ldlang.c	FUNCTION_55
0x4003d1c	        0x4883ec10	                           sub rsp, 0x10	      2165	ldlang.c	FUNCTION_55
0x4003d20	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2165	ldlang.c	FUNCTION_55
0x4003d24	          0x8975e4	             mov dword [rbp - 0x1c], esi	      2165	ldlang.c	FUNCTION_55
0x4003d27	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d2b	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d2f	      0xbe00000000	                              mov esi, 0	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d34	          0x4889c7	                            mov rdi, rax	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d37	      0xe800000000	                          call 0x4003d3c	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d3c	            0x85c0	                           test eax, eax	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d3e	            0x751c	                           jne 0x4003d5c	      2166	ldlang.c	FUNCTION_55	IF_1	CALL_1
0x4003d40	      0xbf00000000	                              mov edi, 0	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d45	      0xe800000000	                          call 0x4003d4a	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d4a	      0xbe00000000	                              mov esi, 0	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d4f	          0x4889c7	                            mov rdi, rax	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d52	      0xb800000000	                              mov eax, 0	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d57	      0xe800000000	                          call 0x4003d5c	      2167	ldlang.c	FUNCTION_55	CALL_3
0x4003d5c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2169	ldlang.c	FUNCTION_55	IF_2
0x4003d60	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      2169	ldlang.c	FUNCTION_55	IF_2
0x4003d66	      0x3d7e010000	                          cmp eax, 0x17e	      2169	ldlang.c	FUNCTION_55	IF_2
0x4003d6b	            0x7425	                            je 0x4003d92	      2169	ldlang.c	FUNCTION_55	IF_2
0x4003d6d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d71	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d75	    0x488b05000000	            mov rax, qword [0x04003d7c] 	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d7c	          0x4889d6	                            mov rsi, rdx	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d7f	          0x4889c7	                            mov rdi, rax	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d82	      0xe800000000	                          call 0x4003d87	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d87	          0x4889c2	                            mov rdx, rax	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d8e	        0x48895038	             mov qword [rax + 0x38], rdx	      2170	ldlang.c	FUNCTION_55	CALL_4
0x4003d92	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2171	ldlang.c	FUNCTION_55	IF_3
0x4003d96	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2171	ldlang.c	FUNCTION_55	IF_3
0x4003d9a	          0x4885c0	                           test rax, rax	      2171	ldlang.c	FUNCTION_55	IF_3
0x4003d9d	            0x7528	                           jne 0x4003dc7	      2171	ldlang.c	FUNCTION_55	IF_3
0x4003d9f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003da3	        0x488b4830	            mov rcx, qword [rax + 0x30] 	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003da7	    0x488b05000000	            mov rax, qword [0x04003dae] 	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003dae	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003db1	          0x4889ce	                            mov rsi, rcx	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003db4	          0x4889c7	                            mov rdi, rax	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003db7	      0xe800000000	                          call 0x4003dbc	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003dbc	          0x4889c2	                            mov rdx, rax	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003dbf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003dc3	        0x48895038	             mov qword [rax + 0x38], rdx	      2172	ldlang.c	FUNCTION_55	IF_3	CALL_5
0x4003dc7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2174	ldlang.c	FUNCTION_55	IF_4
0x4003dcb	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2174	ldlang.c	FUNCTION_55	IF_4
0x4003dcf	          0x4885c0	                           test rax, rax	      2174	ldlang.c	FUNCTION_55	IF_4
0x4003dd2	            0x7533	                           jne 0x4003e07	      2174	ldlang.c	FUNCTION_55	IF_4
0x4003dd4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003dd8	        0x4c8b6030	            mov r12, qword [rax + 0x30] 	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003ddc	    0x488b05000000	            mov rax, qword [0x04003de3] 	      2178	ldlang.c	FUNCTION_55	IF_4
0x4003de3	        0x488b4008	                mov rax, qword [rax + 8]	      2178	ldlang.c	FUNCTION_55	IF_4
0x4003de7	          0x488b18	                    mov rbx, qword [rax]	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003dea	      0xbf00000000	                              mov edi, 0	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003def	      0xe800000000	                          call 0x4003df4	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003df4	          0x4c89e2	                            mov rdx, r12	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003df7	          0x4889de	                            mov rsi, rbx	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003dfa	          0x4889c7	                            mov rdi, rax	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003dfd	      0xb800000000	                              mov eax, 0	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003e02	      0xe800000000	                          call 0x4003e07	      2176	ldlang.c	FUNCTION_55	IF_4	CALL_7
0x4003e07	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2180	ldlang.c	FUNCTION_55
0x4003e0b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2180	ldlang.c	FUNCTION_55
0x4003e0f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2180	ldlang.c	FUNCTION_55
0x4003e13	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2180	ldlang.c	FUNCTION_55
0x4003e17	        0x48895068	             mov qword [rax + 0x68], rdx	      2180	ldlang.c	FUNCTION_55
0x4003e1b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2181	ldlang.c	FUNCTION_55
0x4003e1f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2181	ldlang.c	FUNCTION_55
0x4003e23	    0x48c740600000	               mov qword [rax + 0x60], 0	      2181	ldlang.c	FUNCTION_55
0x4003e2b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2185	ldlang.c	FUNCTION_55	CALL_8
0x4003e2f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2185	ldlang.c	FUNCTION_55	CALL_8
0x4003e33	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2185	ldlang.c	FUNCTION_55	CALL_8
0x4003e37	    0x488990a80000	             mov qword [rax + 0xa8], rdx	      2185	ldlang.c	FUNCTION_55	CALL_8
0x4003e3e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2189	ldlang.c	FUNCTION_55	IF_5
0x4003e42	        0x488b4058	            mov rax, qword [rax + 0x58] 	      2189	ldlang.c	FUNCTION_55	IF_5
0x4003e46	          0x4885c0	                           test rax, rax	      2189	ldlang.c	FUNCTION_55	IF_5
0x4003e49	            0x7410	                            je 0x4003e5b	      2189	ldlang.c	FUNCTION_55	IF_5
0x4003e4b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2190	ldlang.c	FUNCTION_55	CALL_9
0x4003e4f	        0x488b4058	            mov rax, qword [rax + 0x58] 	      2190	ldlang.c	FUNCTION_55	CALL_9
0x4003e53	          0x4889c7	                            mov rdi, rax	      2190	ldlang.c	FUNCTION_55	CALL_9
0x4003e56	      0xe84b000000	                    call sym.exp_init_os	      2190	ldlang.c	FUNCTION_55	CALL_9
0x4003e5b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2192	ldlang.c	FUNCTION_55	IF_6
0x4003e5f	        0x488b4060	            mov rax, qword [rax + 0x60] 	      2192	ldlang.c	FUNCTION_55	IF_6
0x4003e63	          0x4885c0	                           test rax, rax	      2192	ldlang.c	FUNCTION_55	IF_6
0x4003e66	            0x7410	                            je 0x4003e78	      2192	ldlang.c	FUNCTION_55	IF_6
0x4003e68	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2193	ldlang.c	FUNCTION_55	CALL_10
0x4003e6c	        0x488b4060	            mov rax, qword [rax + 0x60] 	      2193	ldlang.c	FUNCTION_55	CALL_10
0x4003e70	          0x4889c7	                            mov rdi, rax	      2193	ldlang.c	FUNCTION_55	CALL_10
0x4003e73	      0xe82e000000	                    call sym.exp_init_os	      2193	ldlang.c	FUNCTION_55	CALL_10
0x4003e78	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2196	ldlang.c	FUNCTION_55	IF_7
0x4003e7c	    0x8b8080000000	            mov eax, dword [rax + 0x80] 	      2196	ldlang.c	FUNCTION_55	IF_7
0x4003e82	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      2196	ldlang.c	FUNCTION_55	IF_7
0x4003e85	            0x7415	                            je 0x4003e9c	      2196	ldlang.c	FUNCTION_55	IF_7
0x4003e87	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2197	ldlang.c	FUNCTION_55	IF_7
0x4003e8b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2197	ldlang.c	FUNCTION_55	IF_7
0x4003e8f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2197	ldlang.c	FUNCTION_55	IF_7
0x4003e93	    0x8b9280000000	            mov edx, dword [rdx + 0x80] 	      2197	ldlang.c	FUNCTION_55	IF_7
0x4003e99	          0x895070	             mov dword [rax + 0x70], edx	      2197	ldlang.c	FUNCTION_55	IF_7
0x4003e9c	              0x90	                                     nop	      2198	ldlang.c	FUNCTION_55
0x4003e9d	        0x4883c410	                           add rsp, 0x10	      2198	ldlang.c	FUNCTION_55
0x4003ea1	              0x5b	                                 pop rbx	      2198	ldlang.c	FUNCTION_55
0x4003ea2	            0x415c	                                 pop r12	      2198	ldlang.c	FUNCTION_55
0x4003ea4	              0x5d	                                 pop rbp	      2198	ldlang.c	FUNCTION_55
0x4003ea5	              0xc3	                                     ret	      2198	ldlang.c	FUNCTION_55
lang_memory_default	functions,0:ELSE,0:FOR,1:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	37
0x4002454	              0x55	                                push rbp	      1392	ldlang.c	FUNCTION_43
0x4002455	          0x4889e5	                            mov rbp, rsp	      1392	ldlang.c	FUNCTION_43
0x4002458	        0x4883ec20	                           sub rsp, 0x20	      1392	ldlang.c	FUNCTION_43
0x400245c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1392	ldlang.c	FUNCTION_43
0x4002460	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1395	ldlang.c	FUNCTION_43
0x4002464	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1395	ldlang.c	FUNCTION_43
0x4002467	          0x8945f4	              mov dword [rbp - 0xc], eax	      1395	ldlang.c	FUNCTION_43
0x400246a	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1398	ldlang.c	FUNCTION_43	IF_1
0x400246d	          0x83e019	                           and eax, 0x19	      1398	ldlang.c	FUNCTION_43	IF_1
0x4002470	          0x83f801	                              cmp eax, 1	      1398	ldlang.c	FUNCTION_43	IF_1
0x4002473	            0x7504	                           jne 0x4002479	      1398	ldlang.c	FUNCTION_43	IF_1
0x4002475	        0x834df420	              or dword [rbp - 0xc], 0x20	      1399	ldlang.c	FUNCTION_43	IF_1
0x4002479	    0x488b05000000	            mov rax, qword [0x04002480] 	      1401	ldlang.c	FUNCTION_43	FOR_1
0x4002480	        0x488945f8	                mov qword [rbp - 8], rax	      1401	ldlang.c	FUNCTION_43	FOR_1
0x4002484	            0xeb2e	                           jmp 0x40024b4	      1401	ldlang.c	FUNCTION_43	FOR_1
0x4002486	        0x488b45f8	                mov rax, qword [rbp - 8]	      1403	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x400248a	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1403	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x400248d	          0x2345f4	              and eax, dword [rbp - 0xc]	      1403	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x4002490	            0x85c0	                           test eax, eax	      1403	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x4002492	            0x7414	                            je 0x40024a8	      1403	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x4002494	        0x488b45f8	                mov rax, qword [rbp - 8]	      1404	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x4002498	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      1404	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x400249b	          0x2345f4	              and eax, dword [rbp - 0xc]	      1404	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x400249e	            0x85c0	                           test eax, eax	      1404	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x40024a0	            0x7506	                           jne 0x40024a8	      1404	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x40024a2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1406	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x40024a6	            0xeb22	                           jmp 0x40024ca	      1406	ldlang.c	FUNCTION_43	FOR_1	IF_2
0x40024a8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1401	ldlang.c	FUNCTION_43	FOR_1
0x40024ac	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1401	ldlang.c	FUNCTION_43	FOR_1
0x40024b0	        0x488945f8	                mov qword [rbp - 8], rax	      1401	ldlang.c	FUNCTION_43	FOR_1
0x40024b4	      0x48837df800	                  cmp qword [rbp - 8], 0	      1401	ldlang.c	FUNCTION_43	FOR_1
0x40024b9	            0x75cb	                           jne 0x4002486	      1401	ldlang.c	FUNCTION_43	FOR_1
0x40024bb	      0xbe00000000	                              mov esi, 0	      1409	ldlang.c	FUNCTION_43	CALL_1
0x40024c0	      0xbf00000000	                              mov edi, 0	      1409	ldlang.c	FUNCTION_43	CALL_1
0x40024c5	      0xe800000000	                          call 0x40024ca	      1409	ldlang.c	FUNCTION_43	CALL_1
0x40024ca	              0xc9	                                   leave	      1410	ldlang.c	FUNCTION_43
0x40024cb	              0xc3	                                     ret	      1410	ldlang.c	FUNCTION_43
lang_finalize_start_stop	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	7
0x400b272	              0x55	                                push rbp	      6164	ldlang.c	FUNCTION_132
0x400b273	          0x4889e5	                            mov rbp, rsp	      6164	ldlang.c	FUNCTION_132
0x400b276	      0xbf00000000	                              mov edi, 0	      6165	ldlang.c	FUNCTION_132	CALL_1
0x400b27b	      0xe857fdffff	             call sym.foreach_start_stop	      6165	ldlang.c	FUNCTION_132	CALL_1
0x400b280	              0x90	                                     nop	      6166	ldlang.c	FUNCTION_132
0x400b281	              0x5d	                                 pop rbp	      6166	ldlang.c	FUNCTION_132
0x400b282	              0xc3	                                     ret	      6166	ldlang.c	FUNCTION_132
name_match	functions,0:ELSE,0:FOR,0:CALL,2:IF,1:DO,0:WHILE,0:SWITCH,0	25
0x40001b5	              0x55	                                push rbp	       145	ldlang.c	FUNCTION_2
0x40001b6	          0x4889e5	                            mov rbp, rsp	       145	ldlang.c	FUNCTION_2
0x40001b9	        0x4883ec10	                           sub rsp, 0x10	       145	ldlang.c	FUNCTION_2
0x40001bd	        0x48897df8	                mov qword [rbp - 8], rdi	       145	ldlang.c	FUNCTION_2
0x40001c1	        0x488975f0	             mov qword [rbp - 0x10], rsi	       145	ldlang.c	FUNCTION_2
0x40001c5	        0x488b45f8	                mov rax, qword [rbp - 8]	       146	ldlang.c	FUNCTION_2	IF_1
0x40001c9	      0xbe00000000	                              mov esi, 0	       146	ldlang.c	FUNCTION_2	IF_1
0x40001ce	          0x4889c7	                            mov rdi, rax	       146	ldlang.c	FUNCTION_2	IF_1
0x40001d1	      0xe800000000	                          call 0x40001d6	       146	ldlang.c	FUNCTION_2	IF_1
0x40001d6	          0x4885c0	                           test rax, rax	       146	ldlang.c	FUNCTION_2	IF_1
0x40001d9	            0x741a	                            je 0x40001f5	       146	ldlang.c	FUNCTION_2	IF_1
0x40001db	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001df	        0x488b45f8	                mov rax, qword [rbp - 8]	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001e3	      0xba00000000	                              mov edx, 0	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001e8	          0x4889ce	                            mov rsi, rcx	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001eb	          0x4889c7	                            mov rdi, rax	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001ee	      0xe800000000	                          call 0x40001f3	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001f3	            0xeb13	                           jmp 0x4000208	       147	ldlang.c	FUNCTION_2	CALL_1
0x40001f5	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       148	ldlang.c	FUNCTION_2	CALL_2
0x40001f9	        0x488b45f8	                mov rax, qword [rbp - 8]	       148	ldlang.c	FUNCTION_2	CALL_2
0x40001fd	          0x4889d6	                            mov rsi, rdx	       148	ldlang.c	FUNCTION_2	CALL_2
0x4000200	          0x4889c7	                            mov rdi, rax	       148	ldlang.c	FUNCTION_2	CALL_2
0x4000203	      0xe800000000	                          call 0x4000208	       148	ldlang.c	FUNCTION_2	CALL_2
0x4000208	              0xc9	                                   leave	       149	ldlang.c	FUNCTION_2
0x4000209	              0xc3	                                     ret	       149	ldlang.c	FUNCTION_2
lang_register_vers_node	functions,0:ELSE,3:FOR,8:CALL,22:IF,12:DO,0:WHILE,2:SWITCH,0	323
0x400ed32	              0x55	                                push rbp	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed33	          0x4889e5	                            mov rbp, rsp	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed36	              0x53	                                push rbx	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed37	        0x4883ec58	                           sub rsp, 0x58	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed3b	        0x48897db8	             mov qword [rbp - 0x48], rdi	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed3f	        0x488975b0	             mov qword [rbp - 0x50], rsi	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed43	        0x488955a8	             mov qword [rbp - 0x58], rdx	      8452	ldlang.c	ELSE_4	FUNCTION_199
0x400ed47	      0x48837db800	               cmp qword [rbp - 0x48], 0	      8456	ldlang.c	ELSE_4	FUNCTION_199	IF_1
0x400ed4c	            0x7508	                           jne 0x400ed56	      8456	ldlang.c	ELSE_4	FUNCTION_199	IF_1
0x400ed4e	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      8457	ldlang.c	ELSE_4	FUNCTION_199	IF_1
0x400ed56	    0x488b05000000	            mov rax, qword [0x0400ed5d] 	      8459	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed5d	          0x4885c0	                           test rax, rax	      8459	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed60	            0x7445	                            je 0x400eda7	      8459	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed62	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed66	           0xfb600	                   movzx eax, byte [rax]	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed69	            0x84c0	                             test al, al	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed6b	            0x7412	                            je 0x400ed7f	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed6d	    0x488b05000000	            mov rax, qword [0x0400ed74] 	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed74	        0x488b4008	                mov rax, qword [rax + 8]	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed78	           0xfb600	                   movzx eax, byte [rax]	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed7b	            0x84c0	                             test al, al	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed7d	            0x7528	                           jne 0x400eda7	      8460	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400ed7f	      0xbf00000000	                              mov edi, 0	      8462	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_2
0x400ed84	      0xe800000000	                          call 0x400ed89	      8462	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_2
0x400ed89	          0x4889c7	                            mov rdi, rax	      8462	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_2
0x400ed8c	      0xb800000000	                              mov eax, 0	      8462	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_2
0x400ed91	      0xe800000000	                          call 0x400ed96	      8462	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_2
0x400ed96	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8464	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_3
0x400ed9a	          0x4889c7	                            mov rdi, rax	      8464	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_3
0x400ed9d	      0xe800000000	                          call 0x400eda2	      8464	ldlang.c	ELSE_4	FUNCTION_199	IF_2	CALL_3
0x400eda2	      0xe93f040000	                           jmp 0x400f1e6	      8465	ldlang.c	ELSE_4	FUNCTION_199	IF_2
0x400eda7	    0x488b05000000	            mov rax, qword [0x0400edae] 	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edae	        0x488945c8	             mov qword [rbp - 0x38], rax	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edb2	            0xeb47	                           jmp 0x400edfb	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edb4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edb8	        0x488b4008	                mov rax, qword [rax + 8]	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edbc	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edc0	          0x4889d6	                            mov rsi, rdx	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edc3	          0x4889c7	                            mov rdi, rax	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edc6	      0xe800000000	                          call 0x400edcb	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edcb	            0x85c0	                           test eax, eax	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edcd	            0x7521	                           jne 0x400edf0	      8470	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3	CALL_4
0x400edcf	      0xbf00000000	                              mov edi, 0	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400edd4	      0xe800000000	                          call 0x400edd9	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400edd9	          0x4889c2	                            mov rdx, rax	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400eddc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400ede0	          0x4889c6	                            mov rsi, rax	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400ede3	          0x4889d7	                            mov rdi, rdx	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400ede6	      0xb800000000	                              mov eax, 0	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400edeb	      0xe800000000	                          call 0x400edf0	      8471	ldlang.c	ELSE_4	FUNCTION_199	FOR_1	IF_3
0x400edf0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edf4	          0x488b00	                    mov rax, qword [rax]	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edf7	        0x488945c8	             mov qword [rbp - 0x38], rax	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400edfb	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400ee00	            0x75b2	                           jne 0x400edb4	      8469	ldlang.c	ELSE_4	FUNCTION_199	FOR_1
0x400ee02	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8473	ldlang.c	ELSE_4	FUNCTION_199	CALL_7
0x400ee06	        0x4883c018	                           add rax, 0x18	      8473	ldlang.c	ELSE_4	FUNCTION_199	CALL_7
0x400ee0a	          0x4889c7	                            mov rdi, rax	      8473	ldlang.c	ELSE_4	FUNCTION_199	CALL_7
0x400ee0d	      0xe8f7fcffff	call sym.lang_finalize_version_expr_head	      8473	ldlang.c	ELSE_4	FUNCTION_199	CALL_7
0x400ee12	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8474	ldlang.c	ELSE_4	FUNCTION_199	CALL_8
0x400ee16	        0x4883c038	                           add rax, 0x38	      8474	ldlang.c	ELSE_4	FUNCTION_199	CALL_8
0x400ee1a	          0x4889c7	                            mov rdi, rax	      8474	ldlang.c	ELSE_4	FUNCTION_199	CALL_8
0x400ee1d	      0xe8e7fcffff	call sym.lang_finalize_version_expr_head	      8474	ldlang.c	ELSE_4	FUNCTION_199	CALL_8
0x400ee22	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400ee26	        0x488b4018	            mov rax, qword [rax + 0x18] 	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400ee2a	        0x488945d8	             mov qword [rbp - 0x28], rax	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400ee2e	      0xe989010000	                           jmp 0x400efbc	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400ee33	    0x488b05000000	            mov rax, qword [0x0400ee3a] 	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400ee3a	        0x488945c8	             mov qword [rbp - 0x38], rax	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400ee3e	      0xe963010000	                           jmp 0x400efa6	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400ee43	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee47	        0x488b4040	            mov rax, qword [rax + 0x40] 	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee4b	          0x4885c0	                           test rax, rax	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee4e	     0xf84ae000000	                            je 0x400ef02	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee54	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee58	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee5c	          0x83e001	                              and eax, 1	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee5f	            0x84c0	                             test al, al	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee61	     0xf849b000000	                            je 0x400ef02	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee67	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8488	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	CALL_9
0x400ee6b	        0x488b4040	            mov rax, qword [rax + 0x40] 	      8488	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	CALL_9
0x400ee6f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      8487	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee73	          0x4889d6	                            mov rsi, rdx	      8487	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee76	          0x4889c7	                            mov rdi, rax	      8487	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee79	      0xe800000000	                          call 0x400ee7e	      8487	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee7e	        0x488945e0	             mov qword [rbp - 0x20], rax	      8487	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ee82	            0xeb4f	                           jmp 0x400eed3	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400ee84	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee88	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee8c	          0xc0e803	                               shr al, 3	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee8f	            0x89c2	                            mov edx, eax	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee91	          0x83e207	                              and edx, 7	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee94	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee98	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee9c	          0xc0e803	                               shr al, 3	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400ee9f	          0x83e007	                              and eax, 7	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400eea2	            0x38c2	                              cmp dl, al	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400eea4	            0x7522	                           jne 0x400eec8	      8491	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5
0x400eea6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eeaa	        0x488b5808	                mov rbx, qword [rax + 8]	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eeae	      0xbf00000000	                              mov edi, 0	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eeb3	      0xe800000000	                          call 0x400eeb8	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eeb8	          0x4889de	                            mov rsi, rbx	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eebb	          0x4889c7	                            mov rdi, rax	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eebe	      0xb800000000	                              mov eax, 0	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eec3	      0xe800000000	                          call 0x400eec8	      8492	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	IF_5	CALL_12
0x400eec8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8494	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1
0x400eecc	          0x488b00	                    mov rax, qword [rax]	      8494	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1
0x400eecf	        0x488945e0	             mov qword [rbp - 0x20], rax	      8494	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1
0x400eed3	      0x48837de000	               cmp qword [rbp - 0x20], 0	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eed8	     0xf84bc000000	                            je 0x400ef9a	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eede	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eee2	        0x488b5008	                mov rdx, qword [rax + 8]	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eee6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eeea	        0x488b4008	                mov rax, qword [rax + 8]	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eeee	          0x4889d6	                            mov rsi, rdx	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eef1	          0x4889c7	                            mov rdi, rax	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eef4	      0xe800000000	                          call 0x400eef9	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eef9	            0x85c0	                           test eax, eax	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eefb	            0x7487	                            je 0x400ee84	      8489	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4	WHILE_1	CALL_10
0x400eefd	      0xe998000000	                           jmp 0x400ef9a	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ef02	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8497	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6
0x400ef06	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8497	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6
0x400ef0a	          0x83e001	                              and eax, 1	      8497	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6
0x400ef0d	            0x84c0	                             test al, al	      8497	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6
0x400ef0f	     0xf8586000000	                           jne 0x400ef9b	      8497	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6
0x400ef15	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef19	        0x488b4048	            mov rax, qword [rax + 0x48] 	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef1d	        0x488945e0	             mov qword [rbp - 0x20], rax	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef21	            0xeb6e	                           jmp 0x400ef91	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef23	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef27	        0x488b5008	                mov rdx, qword [rax + 8]	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef2b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef2f	        0x488b4008	                mov rax, qword [rax + 8]	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef33	          0x4889d6	                            mov rsi, rdx	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef36	          0x4889c7	                            mov rdi, rax	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef39	      0xe800000000	                          call 0x400ef3e	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef3e	            0x85c0	                           test eax, eax	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef40	            0x7544	                           jne 0x400ef86	      8499	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_13
0x400ef42	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef46	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef4a	          0xc0e803	                               shr al, 3	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef4d	            0x89c2	                            mov edx, eax	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef4f	          0x83e207	                              and edx, 7	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef52	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef56	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef5a	          0xc0e803	                               shr al, 3	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef5d	          0x83e007	                              and eax, 7	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef60	            0x38c2	                              cmp dl, al	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef62	            0x7522	                           jne 0x400ef86	      8500	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7
0x400ef64	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef68	        0x488b5808	                mov rbx, qword [rax + 8]	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef6c	      0xbf00000000	                              mov edi, 0	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef71	      0xe800000000	                          call 0x400ef76	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef76	          0x4889de	                            mov rsi, rbx	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef79	          0x4889c7	                            mov rdi, rax	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef7c	      0xb800000000	                              mov eax, 0	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef81	      0xe800000000	                          call 0x400ef86	      8501	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4	IF_7	CALL_15
0x400ef86	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef8a	          0x488b00	                    mov rax, qword [rax]	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef8d	        0x488945e0	             mov qword [rbp - 0x20], rax	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef91	      0x48837de000	               cmp qword [rbp - 0x20], 0	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef96	            0x758b	                           jne 0x400ef23	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef98	            0xeb01	                           jmp 0x400ef9b	      8498	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	ELSE_1	IF_6	FOR_4
0x400ef9a	              0x90	                                     nop	      8485	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3	IF_4
0x400ef9b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400ef9f	          0x488b00	                    mov rax, qword [rax]	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400efa2	        0x488945c8	             mov qword [rbp - 0x38], rax	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400efa6	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400efab	     0xf8592feffff	                           jne 0x400ee43	      8481	ldlang.c	ELSE_4	FUNCTION_199	FOR_2	FOR_3
0x400efb1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400efb5	          0x488b00	                    mov rax, qword [rax]	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400efb8	        0x488945d8	             mov qword [rbp - 0x28], rax	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400efbc	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400efc1	     0xf856cfeffff	                           jne 0x400ee33	      8479	ldlang.c	ELSE_4	FUNCTION_199	FOR_2
0x400efc7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400efcb	        0x488b4038	            mov rax, qword [rax + 0x38] 	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400efcf	        0x488945d8	             mov qword [rbp - 0x28], rax	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400efd3	      0xe989010000	                           jmp 0x400f161	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400efd8	    0x488b05000000	            mov rax, qword [0x0400efdf] 	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400efdf	        0x488945c8	             mov qword [rbp - 0x38], rax	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400efe3	      0xe963010000	                           jmp 0x400f14b	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400efe8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400efec	        0x488b4020	            mov rax, qword [rax + 0x20] 	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400eff0	          0x4885c0	                           test rax, rax	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400eff3	     0xf84ae000000	                            je 0x400f0a7	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400eff9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400effd	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f001	          0x83e001	                              and eax, 1	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f004	            0x84c0	                             test al, al	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f006	     0xf849b000000	                            je 0x400f0a7	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f00c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8515	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	CALL_16
0x400f010	        0x488b4020	            mov rax, qword [rax + 0x20] 	      8515	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	CALL_16
0x400f014	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      8514	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f018	          0x4889d6	                            mov rsi, rdx	      8514	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f01b	          0x4889c7	                            mov rdi, rax	      8514	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f01e	      0xe800000000	                          call 0x400f023	      8514	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f023	        0x488945e8	             mov qword [rbp - 0x18], rax	      8514	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f027	            0xeb4f	                           jmp 0x400f078	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f029	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f02d	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f031	          0xc0e803	                               shr al, 3	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f034	            0x89c2	                            mov edx, eax	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f036	          0x83e207	                              and edx, 7	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f039	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f03d	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f041	          0xc0e803	                               shr al, 3	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f044	          0x83e007	                              and eax, 7	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f047	            0x38c2	                              cmp dl, al	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f049	            0x7522	                           jne 0x400f06d	      8518	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9
0x400f04b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f04f	        0x488b5808	                mov rbx, qword [rax + 8]	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f053	      0xbf00000000	                              mov edi, 0	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f058	      0xe800000000	                          call 0x400f05d	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f05d	          0x4889de	                            mov rsi, rbx	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f060	          0x4889c7	                            mov rdi, rax	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f063	      0xb800000000	                              mov eax, 0	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f068	      0xe800000000	                          call 0x400f06d	      8519	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	IF_9	CALL_19
0x400f06d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8522	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2
0x400f071	          0x488b00	                    mov rax, qword [rax]	      8522	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2
0x400f074	        0x488945e8	             mov qword [rbp - 0x18], rax	      8522	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2
0x400f078	      0x48837de800	               cmp qword [rbp - 0x18], 0	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f07d	     0xf84bc000000	                            je 0x400f13f	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f083	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f087	        0x488b5008	                mov rdx, qword [rax + 8]	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f08b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f08f	        0x488b4008	                mov rax, qword [rax + 8]	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f093	          0x4889d6	                            mov rsi, rdx	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f096	          0x4889c7	                            mov rdi, rax	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f099	      0xe800000000	                          call 0x400f09e	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f09e	            0x85c0	                           test eax, eax	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f0a0	            0x7487	                            je 0x400f029	      8516	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8	WHILE_2	CALL_17
0x400f0a2	      0xe998000000	                           jmp 0x400f13f	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f0a7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8525	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10
0x400f0ab	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8525	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10
0x400f0af	          0x83e001	                              and eax, 1	      8525	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10
0x400f0b2	            0x84c0	                             test al, al	      8525	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10
0x400f0b4	     0xf8586000000	                           jne 0x400f140	      8525	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10
0x400f0ba	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f0be	        0x488b4028	            mov rax, qword [rax + 0x28] 	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f0c2	        0x488945e8	             mov qword [rbp - 0x18], rax	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f0c6	            0xeb6e	                           jmp 0x400f136	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f0c8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0cc	        0x488b5008	                mov rdx, qword [rax + 8]	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0d0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0d4	        0x488b4008	                mov rax, qword [rax + 8]	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0d8	          0x4889d6	                            mov rsi, rdx	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0db	          0x4889c7	                            mov rdi, rax	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0de	      0xe800000000	                          call 0x400f0e3	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0e3	            0x85c0	                           test eax, eax	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0e5	            0x7544	                           jne 0x400f12b	      8527	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_20
0x400f0e7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0eb	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0ef	          0xc0e803	                               shr al, 3	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0f2	            0x89c2	                            mov edx, eax	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0f4	          0x83e207	                              and edx, 7	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0f7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0fb	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f0ff	          0xc0e803	                               shr al, 3	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f102	          0x83e007	                              and eax, 7	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f105	            0x38c2	                              cmp dl, al	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f107	            0x7522	                           jne 0x400f12b	      8528	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11
0x400f109	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f10d	        0x488b5808	                mov rbx, qword [rax + 8]	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f111	      0xbf00000000	                              mov edi, 0	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f116	      0xe800000000	                          call 0x400f11b	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f11b	          0x4889de	                            mov rsi, rbx	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f11e	          0x4889c7	                            mov rdi, rax	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f121	      0xb800000000	                              mov eax, 0	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f126	      0xe800000000	                          call 0x400f12b	      8529	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7	IF_11	CALL_22
0x400f12b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f12f	          0x488b00	                    mov rax, qword [rax]	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f132	        0x488945e8	             mov qword [rbp - 0x18], rax	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f136	      0x48837de800	               cmp qword [rbp - 0x18], 0	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f13b	            0x758b	                           jne 0x400f0c8	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f13d	            0xeb01	                           jmp 0x400f140	      8526	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	ELSE_2	IF_10	FOR_7
0x400f13f	              0x90	                                     nop	      8512	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6	IF_8
0x400f140	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400f144	          0x488b00	                    mov rax, qword [rax]	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400f147	        0x488945c8	             mov qword [rbp - 0x38], rax	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400f14b	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400f150	     0xf8592feffff	                           jne 0x400efe8	      8508	ldlang.c	ELSE_4	FUNCTION_199	FOR_5	FOR_6
0x400f156	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400f15a	          0x488b00	                    mov rax, qword [rax]	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400f15d	        0x488945d8	             mov qword [rbp - 0x28], rax	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400f161	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400f166	     0xf856cfeffff	                           jne 0x400efd8	      8506	ldlang.c	ELSE_4	FUNCTION_199	FOR_5
0x400f16c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8534	ldlang.c	ELSE_4	FUNCTION_199
0x400f170	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      8534	ldlang.c	ELSE_4	FUNCTION_199
0x400f174	        0x48895058	             mov qword [rax + 0x58], rdx	      8534	ldlang.c	ELSE_4	FUNCTION_199
0x400f178	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8535	ldlang.c	ELSE_4	FUNCTION_199
0x400f17c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      8535	ldlang.c	ELSE_4	FUNCTION_199
0x400f180	        0x48895008	                mov qword [rax + 8], rdx	      8535	ldlang.c	ELSE_4	FUNCTION_199
0x400f184	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8536	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f188	           0xfb600	                   movzx eax, byte [rax]	      8536	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f18b	            0x84c0	                             test al, al	      8536	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f18d	            0x7420	                            je 0x400f1af	      8536	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f18f	    0x8b0500000000	            mov eax, dword [0x0400f195] 	      8538	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f195	          0x83c001	                              add eax, 1	      8538	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f198	    0x890500000000	            mov dword [0x0400f19e], eax 	      8538	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f19e	    0x8b0500000000	            mov eax, dword [0x0400f1a4] 	      8539	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f1a4	            0x89c2	                            mov edx, eax	      8539	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f1a6	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8539	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f1aa	          0x895010	             mov dword [rax + 0x10], edx	      8539	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f1ad	            0xeb0b	                           jmp 0x400f1ba	      8539	ldlang.c	ELSE_4	FUNCTION_199	IF_12
0x400f1af	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      8542	ldlang.c	ELSE_4	FUNCTION_199	ELSE_3
0x400f1b3	    0xc74010000000	               mov dword [rax + 0x10], 0	      8542	ldlang.c	ELSE_4	FUNCTION_199	ELSE_3
0x400f1ba	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1c2	            0xeb0b	                           jmp 0x400f1cf	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1c4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1c8	          0x488b00	                    mov rax, qword [rax]	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1cb	        0x488945d0	             mov qword [rbp - 0x30], rax	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1cf	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1d3	          0x488b00	                    mov rax, qword [rax]	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1d6	          0x4885c0	                           test rax, rax	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1d9	            0x75e9	                           jne 0x400f1c4	      8544	ldlang.c	ELSE_4	FUNCTION_199	FOR_8
0x400f1db	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8546	ldlang.c	ELSE_4	FUNCTION_199
0x400f1df	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      8546	ldlang.c	ELSE_4	FUNCTION_199
0x400f1e3	          0x488910	                    mov qword [rax], rdx	      8546	ldlang.c	ELSE_4	FUNCTION_199
0x400f1e6	        0x4883c458	                           add rsp, 0x58	      8547	ldlang.c	ELSE_4	FUNCTION_199
0x400f1ea	              0x5b	                                 pop rbx	      8547	ldlang.c	ELSE_4	FUNCTION_199
0x400f1eb	              0x5d	                                 pop rbp	      8547	ldlang.c	ELSE_4	FUNCTION_199
0x400f1ec	              0xc3	                                     ret	      8547	ldlang.c	ELSE_4	FUNCTION_199
version_expr_head_hash	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	12
0x400ea9e	              0x55	                                push rbp	      8348	ldlang.c	FUNCTION_196
0x400ea9f	          0x4889e5	                            mov rbp, rsp	      8348	ldlang.c	FUNCTION_196
0x400eaa2	        0x4883ec20	                           sub rsp, 0x20	      8348	ldlang.c	FUNCTION_196
0x400eaa6	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8348	ldlang.c	FUNCTION_196
0x400eaaa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8349	ldlang.c	FUNCTION_196
0x400eaae	        0x488945f8	                mov qword [rbp - 8], rax	      8349	ldlang.c	FUNCTION_196
0x400eab2	        0x488b45f8	                mov rax, qword [rbp - 8]	      8352	ldlang.c	FUNCTION_196	CALL_1
0x400eab6	        0x488b4008	                mov rax, qword [rax + 8]	      8352	ldlang.c	FUNCTION_196	CALL_1
0x400eaba	          0x4889c7	                            mov rdi, rax	      8352	ldlang.c	FUNCTION_196	CALL_1
0x400eabd	      0xe800000000	                          call 0x400eac2	      8352	ldlang.c	FUNCTION_196	CALL_1
0x400eac2	              0xc9	                                   leave	      8353	ldlang.c	FUNCTION_196
0x400eac3	              0xc3	                                     ret	      8353	ldlang.c	FUNCTION_196
output_section_statement_newfunc	functions,0:ELSE,0:FOR,0:CALL,6:IF,4:DO,0:WHILE,0:SWITCH,0	76
0x4001ec9	              0x55	                                push rbp	      1183	ldlang.c	FUNCTION_36
0x4001eca	          0x4889e5	                            mov rbp, rsp	      1183	ldlang.c	FUNCTION_36
0x4001ecd	        0x4883ec30	                           sub rsp, 0x30	      1183	ldlang.c	FUNCTION_36
0x4001ed1	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1183	ldlang.c	FUNCTION_36
0x4001ed5	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1183	ldlang.c	FUNCTION_36
0x4001ed9	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1183	ldlang.c	FUNCTION_36
0x4001edd	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1187	ldlang.c	FUNCTION_36	IF_1
0x4001ee2	            0x7525	                           jne 0x4001f09	      1187	ldlang.c	FUNCTION_36	IF_1
0x4001ee4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1189	ldlang.c	FUNCTION_36	IF_1	CALL_1
0x4001ee8	      0xbeb0000000	                           mov esi, 0xb0	      1189	ldlang.c	FUNCTION_36	IF_1	CALL_1
0x4001eed	          0x4889c7	                            mov rdi, rax	      1189	ldlang.c	FUNCTION_36	IF_1	CALL_1
0x4001ef0	      0xe800000000	                          call 0x4001ef5	      1189	ldlang.c	FUNCTION_36	IF_1	CALL_1
0x4001ef5	        0x488945e8	             mov qword [rbp - 0x18], rax	      1189	ldlang.c	FUNCTION_36	IF_1	CALL_1
0x4001ef9	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1191	ldlang.c	FUNCTION_36	IF_1	IF_2
0x4001efe	            0x7509	                           jne 0x4001f09	      1191	ldlang.c	FUNCTION_36	IF_1	IF_2
0x4001f00	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1192	ldlang.c	FUNCTION_36	IF_1	IF_2
0x4001f04	      0xe9ff000000	                           jmp 0x4002008	      1192	ldlang.c	FUNCTION_36	IF_1	IF_2
0x4001f09	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f0d	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f11	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f15	          0x4889ce	                            mov rsi, rcx	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f18	          0x4889c7	                            mov rdi, rax	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f1b	      0xe800000000	                          call 0x4001f20	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f20	        0x488945e8	             mov qword [rbp - 0x18], rax	      1195	ldlang.c	FUNCTION_36	CALL_2
0x4001f24	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1196	ldlang.c	FUNCTION_36	IF_3
0x4001f29	            0x7509	                           jne 0x4001f34	      1196	ldlang.c	FUNCTION_36	IF_3
0x4001f2b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1197	ldlang.c	FUNCTION_36	IF_3
0x4001f2f	      0xe9d4000000	                           jmp 0x4002008	      1197	ldlang.c	FUNCTION_36	IF_3
0x4001f34	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1199	ldlang.c	FUNCTION_36
0x4001f38	        0x488945f0	             mov qword [rbp - 0x10], rax	      1199	ldlang.c	FUNCTION_36
0x4001f3c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f40	        0x4883c018	                           add rax, 0x18	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f44	      0xba98000000	                           mov edx, 0x98	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f49	      0xbe00000000	                              mov esi, 0	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f4e	          0x4889c7	                            mov rdi, rax	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f51	      0xe800000000	                          call 0x4001f56	      1200	ldlang.c	FUNCTION_36	CALL_3
0x4001f56	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1201	ldlang.c	FUNCTION_36
0x4001f5a	    0xc74020000000	               mov dword [rax + 0x20], 0	      1201	ldlang.c	FUNCTION_36
0x4001f61	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1202	ldlang.c	FUNCTION_36
0x4001f65	    0xc78094000000	     mov dword [rax + 0x94], 0xffffffff 	      1202	ldlang.c	FUNCTION_36
0x4001f6f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1203	ldlang.c	FUNCTION_36
0x4001f73	    0xc78098000000	     mov dword [rax + 0x98], 0xffffffff 	      1203	ldlang.c	FUNCTION_36
0x4001f7d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1204	ldlang.c	FUNCTION_36
0x4001f81	    0xc78090000000	               mov dword [rax + 0x90], 1	      1204	ldlang.c	FUNCTION_36
0x4001f8b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1205	ldlang.c	FUNCTION_36	CALL_4
0x4001f8f	        0x4883c028	                           add rax, 0x28	      1205	ldlang.c	FUNCTION_36	CALL_4
0x4001f93	          0x4889c7	                            mov rdi, rax	      1205	ldlang.c	FUNCTION_36	CALL_4
0x4001f96	      0xe800000000	                          call 0x4001f9b	      1205	ldlang.c	FUNCTION_36	CALL_4
0x4001f9b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001f9f	        0x488d5018	                   lea rdx, [rax + 0x18]	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fa3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fa7	        0x488d4818	                   lea rcx, [rax + 0x18]	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fab	    0x488b05000000	            mov rax, qword [0x04001fb2] 	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fb2	          0x4889ce	                            mov rsi, rcx	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fb5	          0x4889c7	                            mov rdi, rax	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fb8	      0xe800000000	                          call 0x4001fbd	      1206	ldlang.c	FUNCTION_36	CALL_5
0x4001fbd	    0x488b05000000	            mov rax, qword [0x04001fc4] 	      1211	ldlang.c	FUNCTION_36	IF_4
0x4001fc4	          0x4885c0	                           test rax, rax	      1211	ldlang.c	FUNCTION_36	IF_4
0x4001fc7	            0x7413	                            je 0x4001fdc	      1211	ldlang.c	FUNCTION_36	IF_4
0x4001fc9	    0x488b05000000	            mov rax, qword [0x04001fd0] 	      1214	ldlang.c	FUNCTION_36	IF_4
0x4001fd0	        0x488d50e0	                   lea rdx, [rax - 0x20]	      1213	ldlang.c	FUNCTION_36	IF_4
0x4001fd4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1213	ldlang.c	FUNCTION_36	IF_4
0x4001fd8	        0x48895040	             mov qword [rax + 0x40], rdx	      1213	ldlang.c	FUNCTION_36	IF_4
0x4001fdc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1220	ldlang.c	FUNCTION_36
0x4001fe0	        0x4883c038	                           add rax, 0x38	      1220	ldlang.c	FUNCTION_36
0x4001fe4	        0x488945f8	                mov qword [rbp - 8], rax	      1220	ldlang.c	FUNCTION_36
0x4001fe8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001fec	        0x488d4818	                   lea rcx, [rax + 0x18]	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001ff0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001ff4	          0x4889c2	                            mov rdx, rax	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001ff7	          0x4889ce	                            mov rsi, rcx	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001ffa	      0xbf00000000	                              mov edi, 0	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4001fff	      0xe800000000	                          call 0x4002004	      1221	ldlang.c	FUNCTION_36	CALL_6
0x4002004	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1224	ldlang.c	FUNCTION_36
0x4002008	              0xc9	                                   leave	      1225	ldlang.c	FUNCTION_36
0x4002009	              0xc3	                                     ret	      1225	ldlang.c	FUNCTION_36
lang_new_vers_node	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	22
0x400ea46	              0x55	                                push rbp	      8331	ldlang.c	FUNCTION_195
0x400ea47	          0x4889e5	                            mov rbp, rsp	      8331	ldlang.c	FUNCTION_195
0x400ea4a	        0x4883ec20	                           sub rsp, 0x20	      8331	ldlang.c	FUNCTION_195
0x400ea4e	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8331	ldlang.c	FUNCTION_195
0x400ea52	        0x488975e0	             mov qword [rbp - 0x20], rsi	      8331	ldlang.c	FUNCTION_195
0x400ea56	      0xbe70000000	                           mov esi, 0x70	      8334	ldlang.c	FUNCTION_195	CALL_1
0x400ea5b	      0xbf01000000	                              mov edi, 1	      8334	ldlang.c	FUNCTION_195	CALL_1
0x400ea60	      0xe800000000	                          call 0x400ea65	      8334	ldlang.c	FUNCTION_195	CALL_1
0x400ea65	        0x488945f8	                mov qword [rbp - 8], rax	      8334	ldlang.c	FUNCTION_195	CALL_1
0x400ea69	        0x488b45f8	                mov rax, qword [rbp - 8]	      8335	ldlang.c	FUNCTION_195
0x400ea6d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8335	ldlang.c	FUNCTION_195
0x400ea71	        0x48895018	             mov qword [rax + 0x18], rdx	      8335	ldlang.c	FUNCTION_195
0x400ea75	        0x488b45f8	                mov rax, qword [rbp - 8]	      8336	ldlang.c	FUNCTION_195
0x400ea79	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      8336	ldlang.c	FUNCTION_195
0x400ea7d	        0x48895038	             mov qword [rax + 0x38], rdx	      8336	ldlang.c	FUNCTION_195
0x400ea81	        0x488b45f8	                mov rax, qword [rbp - 8]	      8337	ldlang.c	FUNCTION_195
0x400ea85	    0x48c740680000	               mov qword [rax + 0x68], 0	      8337	ldlang.c	FUNCTION_195
0x400ea8d	        0x488b45f8	                mov rax, qword [rbp - 8]	      8338	ldlang.c	FUNCTION_195
0x400ea91	    0xc74060ffffff	     mov dword [rax + 0x60], 0xffffffff 	      8338	ldlang.c	FUNCTION_195
0x400ea98	        0x488b45f8	                mov rax, qword [rbp - 8]	      8339	ldlang.c	FUNCTION_195
0x400ea9c	              0xc9	                                   leave	      8340	ldlang.c	FUNCTION_195
0x400ea9d	              0xc3	                                     ret	      8340	ldlang.c	FUNCTION_195
map_input_to_output_sections	functions,0:ELSE,2:FOR,1:CALL,12:IF,9:DO,0:WHILE,0:SWITCH,2	202
0x4006330	              0x55	                                push rbp	      3593	ldlang.c	FUNCTION_86
0x4006331	          0x4889e5	                            mov rbp, rsp	      3593	ldlang.c	FUNCTION_86
0x4006334	        0x4883ec40	                           sub rsp, 0x40	      3593	ldlang.c	FUNCTION_86
0x4006338	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3593	ldlang.c	FUNCTION_86
0x400633c	        0x488975d0	             mov qword [rbp - 0x30], rsi	      3593	ldlang.c	FUNCTION_86
0x4006340	        0x488955c8	             mov qword [rbp - 0x38], rdx	      3593	ldlang.c	FUNCTION_86
0x4006344	      0xe9e3020000	                           jmp 0x400662c	      3594	ldlang.c	FUNCTION_86	FOR_1
0x4006349	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400634d	          0x8b4008	                mov eax, dword [rax + 8]	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006350	          0x83f80f	                            cmp eax, 0xf	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006353	     0xf87c8020000	                            ja 0x4006621	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006359	            0x89c0	                            mov eax, eax	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400635b	    0x488b04c50000	                  mov rax, qword [rax*8]	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006363	            0xffe0	                                 jmp rax	      3599	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006365	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x4006369	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x400636d	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x4006371	          0x4889ce	                            mov rsi, rcx	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x4006374	          0x4889c7	                            mov rdi, rax	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x4006377	      0xe865edffff	                           call sym.wild	      3602	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_1
0x400637c	      0xe9a0020000	                           jmp 0x4006621	      3603	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006381	    0x488b05000000	            mov rax, qword [0x04006388] 	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x4006388	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x400638c	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x4006390	          0x4889ce	                            mov rsi, rcx	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x4006393	          0x4889c7	                            mov rdi, rax	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x4006396	      0xe895ffffff	   call sym.map_input_to_output_sections	      3605	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_2
0x400639b	      0xe981020000	                           jmp 0x4006621	      3608	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x40063a0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3610	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x40063a4	        0x488945f0	             mov qword [rbp - 0x10], rax	      3610	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x40063a8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3611	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063ac	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3611	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063b2	            0x85c0	                           test eax, eax	      3611	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063b4	     0xf8491000000	                            je 0x400644b	      3611	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063ba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3613	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063be	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3613	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063c4	      0x3d7d010000	                          cmp eax, 0x17d	      3613	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063c9	            0x7415	                            je 0x40063e0	      3613	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063cb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3614	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063cf	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3614	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063d5	      0x3d7c010000	                          cmp eax, 0x17c	      3614	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063da	     0xf853a020000	                           jne 0x400661a	      3614	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x40063e0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3616	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063e4	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      3616	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063eb	          0x83ca04	                               or edx, 4	      3616	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063ee	    0x889090000000	               mov byte [rax + 0x90], dl	      3616	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1
0x40063f4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x40063f8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x40063fc	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x4006400	          0x4889d6	                            mov rsi, rdx	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x4006403	          0x4889c7	                            mov rdi, rax	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x4006406	      0xe8eafcffff	           call sym.check_input_sections	      3617	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	CALL_3
0x400640b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400640f	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006416	          0xc0e802	                               shr al, 2	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006419	          0x83e001	                              and eax, 1	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400641c	           0xfb6d0	                           movzx edx, al	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400641f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006423	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006429	      0x3d7c010000	                          cmp eax, 0x17c	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400642e	           0xf94c0	                                 sete al	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006431	           0xfb6c0	                           movzx eax, al	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006434	            0x39c2	                            cmp edx, eax	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006436	            0x7413	                            je 0x400644b	      3618	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006438	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3620	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400643c	    0xc78084000000	     mov dword [rax + 0x84], 0xffffffff 	      3620	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x4006446	      0xe9d6010000	                           jmp 0x4006621	      3621	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_3
0x400644b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x400644f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x4006453	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x4006457	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x400645b	          0x4889ce	                            mov rsi, rcx	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x400645e	          0x4889c7	                            mov rdi, rax	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x4006461	      0xe8cafeffff	   call sym.map_input_to_output_sections	      3624	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_4
0x4006466	      0xe9b6010000	                           jmp 0x4006621	      3627	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400646b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3631	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400646f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3631	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006473	        0x488945d0	             mov qword [rbp - 0x30], rax	      3631	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006477	      0xe9a5010000	                           jmp 0x4006621	      3632	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400647c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x4006480	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x4006484	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x4006488	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x400648c	          0x4889ce	                            mov rsi, rcx	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x400648f	          0x4889c7	                            mov rdi, rax	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x4006492	      0xe899feffff	   call sym.map_input_to_output_sections	      3634	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_5
0x4006497	      0xe985010000	                           jmp 0x4006621	      3637	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400649c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3641	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_6
0x40064a0	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3641	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_6
0x40064a4	          0x4889c7	                            mov rdi, rax	      3641	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_6
0x40064a7	      0xe8fad9ffff	                    call sym.exp_init_os	      3641	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_6
0x40064ac	    0xc745ec030100	          mov dword [rbp - 0x14], 0x103 	      3644	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x40064b3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064b7	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064bd	          0x83f802	                              cmp eax, 2	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064c0	            0x7413	                            je 0x40064d5	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064c2	          0x83f802	                              cmp eax, 2	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064c5	            0x7233	                            jb 0x40064fa	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064c7	          0x83f803	                              cmp eax, 3	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064ca	            0x752f	                           jne 0x40064fb	      3645	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064cc	    0xc745ec000100	          mov dword [rbp - 0x14], 0x100 	      3651	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064d3	            0xeb26	                           jmp 0x40064fb	      3652	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064d5	    0x488b05000000	            mov rax, qword [0x040064dc] 	      3654	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064dc	        0x488b4008	                mov rax, qword [rax + 8]	      3654	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064e0	          0x8b4008	                mov eax, dword [rax + 8]	      3654	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064e3	          0x83f805	                              cmp eax, 5	      3654	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064e6	            0x7509	                           jne 0x40064f1	      3654	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064e8	    0xc745ec010200	          mov dword [rbp - 0x14], 0x201 	      3656	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	IF_4
0x40064ef	            0xeb0a	                           jmp 0x40064fb	      3659	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064f1	    0xc745ec000300	          mov dword [rbp - 0x14], 0x300 	      3658	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2	ELSE_1
0x40064f8	            0xeb01	                           jmp 0x40064fb	      3659	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064fa	              0x90	                                     nop	      3649	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	SWITCH_2
0x40064fb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3661	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_5
0x40064ff	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3661	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_5
0x4006503	          0x4885c0	                           test rax, rax	      3661	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_5
0x4006506	            0x7516	                           jne 0x400651e	      3661	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_5
0x4006508	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3662	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_7
0x400650b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3662	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_7
0x400650f	            0x89d6	                            mov esi, edx	      3662	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_7
0x4006511	          0x4889c7	                            mov rdi, rax	      3662	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_7
0x4006514	      0xe8fcd7ffff	                        call sym.init_os	      3662	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_7
0x4006519	      0xe903010000	                           jmp 0x4006621	      3665	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400651e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x4006522	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x4006526	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x400652a	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x400652e	          0x8b5220	            mov edx, dword [rdx + 0x20] 	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x4006531	           0xb55ec	              or edx, dword [rbp - 0x14]	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x4006534	          0x895020	             mov dword [rax + 0x20], edx	      3664	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	ELSE_2
0x4006537	      0xe9e5000000	                           jmp 0x4006621	      3665	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400653c	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x4006541	     0xf84d6000000	                            je 0x400661d	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x4006547	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x400654b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x400654f	          0x4885c0	                           test rax, rax	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x4006552	     0xf85c5000000	                           jne 0x400661d	      3673	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_6
0x4006558	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3674	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_8
0x400655c	      0xbe00000000	                              mov esi, 0	      3674	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_8
0x4006561	          0x4889c7	                            mov rdi, rax	      3674	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_8
0x4006564	      0xe8acd7ffff	                        call sym.init_os	      3674	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_8
0x4006569	      0xe9af000000	                           jmp 0x400661d	      3675	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400656e	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x4006573	            0x741e	                            je 0x4006593	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x4006575	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x4006579	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x400657d	          0x4885c0	                           test rax, rax	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x4006580	            0x7511	                           jne 0x4006593	      3677	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_7
0x4006582	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3678	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_9
0x4006586	      0xbe00000000	                              mov esi, 0	      3678	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_9
0x400658b	          0x4889c7	                            mov rdi, rax	      3678	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_9
0x400658e	      0xe882d7ffff	                        call sym.init_os	      3678	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_9
0x4006593	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3682	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_10
0x4006597	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3682	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_10
0x400659b	          0x4889c7	                            mov rdi, rax	      3682	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_10
0x400659e	      0xe803d9ffff	                    call sym.exp_init_os	      3682	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	CALL_10
0x40065a3	            0xeb7c	                           jmp 0x4006621	      3683	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x40065a5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3694	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065a9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3694	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065ad	          0x4885c0	                           test rax, rax	      3694	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065b0	            0x740f	                            je 0x40065c1	      3694	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065b2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3695	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065b6	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3695	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065ba	          0x8b4018	            mov eax, dword [rax + 0x18] 	      3695	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065bd	            0x85c0	                           test eax, eax	      3695	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065bf	            0x755f	                           jne 0x4006620	      3695	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065c1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3697	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065c5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3697	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065c9	        0x488945f8	                mov qword [rbp - 8], rax	      3697	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065cd	        0x488b45f8	                mov rax, qword [rbp - 8]	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065d1	      0xba01000000	                              mov edx, 1	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065d6	      0xbe00000000	                              mov esi, 0	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065db	          0x4889c7	                            mov rdi, rax	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065de	      0xe800000000	                          call 0x40065e3	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065e3	        0x488945f0	             mov qword [rbp - 0x10], rax	      3705	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_11
0x40065e7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3706	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065eb	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      3706	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065ef	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3706	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065f3	        0x48895058	             mov qword [rax + 0x58], rdx	      3706	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8
0x40065f7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3707	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	IF_9
0x40065fb	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3707	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	IF_9
0x40065ff	          0x4885c0	                           test rax, rax	      3707	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	IF_9
0x4006602	            0x751c	                           jne 0x4006620	      3707	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	IF_9
0x4006604	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3708	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_12
0x4006608	      0xbe00000000	                              mov esi, 0	      3708	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_12
0x400660d	          0x4889c7	                            mov rdi, rax	      3708	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_12
0x4006610	      0xe800d7ffff	                        call sym.init_os	      3708	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_8	CALL_12
0x4006615	            0xeb09	                           jmp 0x4006620	      3710	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006617	              0x90	                                     nop	      3667	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006618	            0xeb07	                           jmp 0x4006621	      3667	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400661a	              0x90	                                     nop	      3615	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x400661b	            0xeb04	                           jmp 0x4006621	      3615	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1	IF_1	IF_2
0x400661d	              0x90	                                     nop	      3675	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x400661e	            0xeb01	                           jmp 0x4006621	      3675	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006620	              0x90	                                     nop	      3710	ldlang.c	FUNCTION_86	FOR_1	SWITCH_1
0x4006621	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3594	ldlang.c	FUNCTION_86	FOR_1
0x4006625	          0x488b00	                    mov rax, qword [rax]	      3594	ldlang.c	FUNCTION_86	FOR_1
0x4006628	        0x488945d8	             mov qword [rbp - 0x28], rax	      3594	ldlang.c	FUNCTION_86	FOR_1
0x400662c	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      3594	ldlang.c	FUNCTION_86	FOR_1
0x4006631	     0xf8512fdffff	                           jne 0x4006349	      3594	ldlang.c	FUNCTION_86	FOR_1
0x4006637	              0x90	                                     nop	      3715	ldlang.c	FUNCTION_86
0x4006638	              0xc9	                                   leave	      3715	ldlang.c	FUNCTION_86
0x4006639	              0xc3	                                     ret	      3715	ldlang.c	FUNCTION_86
ldlang_add_file	functions,0:ELSE,0:FOR,0:CALL,5:IF,0:DO,0:WHILE,0:SWITCH,0	54
0x400c048	              0x55	                                push rbp	      6636	ldlang.c	FUNCTION_143
0x400c049	          0x4889e5	                            mov rbp, rsp	      6636	ldlang.c	FUNCTION_143
0x400c04c	        0x4883ec10	                           sub rsp, 0x10	      6636	ldlang.c	FUNCTION_143
0x400c050	        0x48897df8	                mov qword [rbp - 8], rdi	      6636	ldlang.c	FUNCTION_143
0x400c054	        0x488b45f8	                mov rax, qword [rbp - 8]	      6639	ldlang.c	FUNCTION_143
0x400c058	        0x488d5030	                   lea rdx, [rax + 0x30]	      6639	ldlang.c	FUNCTION_143
0x400c05c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6637	ldlang.c	FUNCTION_143	CALL_1
0x400c060	          0x4889c6	                            mov rsi, rax	      6637	ldlang.c	FUNCTION_143	CALL_1
0x400c063	      0xbf00000000	                              mov edi, 0	      6637	ldlang.c	FUNCTION_143	CALL_1
0x400c068	      0xe800000000	                          call 0x400c06d	      6637	ldlang.c	FUNCTION_143	CALL_1
0x400c06d	        0x488b45f8	                mov rax, qword [rbp - 8]	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c071	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c075	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c07c	          0x4885c0	                           test rax, rax	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c07f	            0x740f	                            je 0x400c090	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c081	      0xbef3190000	                         mov esi, 0x19f3	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c086	      0xbf00000000	                              mov edi, 0	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c08b	      0xe800000000	                          call 0x400c090	      6643	ldlang.c	FUNCTION_143	CALL_2
0x400c090	        0x488b45f8	                mov rax, qword [rbp - 8]	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c094	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c098	    0x488b05000000	            mov rax, qword [0x0400c09f] 	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c09f	          0x4839c2	                            cmp rdx, rax	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c0a2	            0x750f	                           jne 0x400c0b3	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c0a4	      0xbef4190000	                         mov esi, 0x19f4	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c0a9	      0xbf00000000	                              mov edi, 0	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c0ae	      0xe800000000	                          call 0x400c0b3	      6644	ldlang.c	FUNCTION_143	CALL_3
0x400c0b3	    0x488b05000000	            mov rax, qword [0x0400c0ba] 	      6646	ldlang.c	FUNCTION_143
0x400c0ba	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6646	ldlang.c	FUNCTION_143
0x400c0be	        0x488b5220	            mov rdx, qword [rdx + 0x20] 	      6646	ldlang.c	FUNCTION_143
0x400c0c2	          0x488910	                    mov qword [rax], rdx	      6646	ldlang.c	FUNCTION_143
0x400c0c5	        0x488b45f8	                mov rax, qword [rbp - 8]	      6647	ldlang.c	FUNCTION_143
0x400c0c9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6647	ldlang.c	FUNCTION_143
0x400c0cd	    0x4805f0000000	                           add rax, 0xf0	      6647	ldlang.c	FUNCTION_143
0x400c0d3	    0x488905000000	            mov qword [0x0400c0da], rax 	      6647	ldlang.c	FUNCTION_143
0x400c0da	        0x488b45f8	                mov rax, qword [rbp - 8]	      6648	ldlang.c	FUNCTION_143
0x400c0de	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6648	ldlang.c	FUNCTION_143
0x400c0e2	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6648	ldlang.c	FUNCTION_143
0x400c0e6	    0x488990000100	            mov qword [rax + 0x100], rdx	      6648	ldlang.c	FUNCTION_143
0x400c0ed	    0x8b0500000000	            mov eax, dword [0x0400c0f3] 	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c0f3	            0x89c2	                            mov edx, eax	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c0f5	        0x488b45f8	                mov rax, qword [rbp - 8]	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c0f9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c0fd	            0x89d6	                            mov esi, edx	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c0ff	          0x4889c7	                            mov rdi, rax	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c102	      0xe800000000	                          call 0x400c107	      6649	ldlang.c	FUNCTION_143	CALL_4
0x400c107	        0x488b45f8	                mov rax, qword [rbp - 8]	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c10b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c10f	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c113	      0xbe00000000	                              mov esi, 0	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c118	          0x4889c7	                            mov rdi, rax	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c11b	      0xe800000000	                          call 0x400c120	      6661	ldlang.c	FUNCTION_143	CALL_5
0x400c120	              0x90	                                     nop	      6662	ldlang.c	FUNCTION_143
0x400c121	              0xc9	                                   leave	      6662	ldlang.c	FUNCTION_143
0x400c122	              0xc3	                                     ret	      6662	ldlang.c	FUNCTION_143
lang_init	functions,0:ELSE,0:FOR,0:CALL,8:IF,0:DO,0:WHILE,0:SWITCH,0	36
0x4002056	              0x55	                                push rbp	      1247	ldlang.c	FUNCTION_39
0x4002057	          0x4889e5	                            mov rbp, rsp	      1247	ldlang.c	FUNCTION_39
0x400205a	    0x41b800000000	                              mov r8d, 0	      1248	ldlang.c	FUNCTION_39	CALL_1
0x4002060	      0xb900000000	                              mov ecx, 0	      1248	ldlang.c	FUNCTION_39	CALL_1
0x4002065	      0xba00000000	                              mov edx, 0	      1248	ldlang.c	FUNCTION_39	CALL_1
0x400206a	      0xbee8030000	                          mov esi, 0x3e8	      1248	ldlang.c	FUNCTION_39	CALL_1
0x400206f	      0xbf00000000	                              mov edi, 0	      1248	ldlang.c	FUNCTION_39	CALL_1
0x4002074	      0xe800000000	                          call 0x4002079	      1248	ldlang.c	FUNCTION_39	CALL_1
0x4002079	    0x48c705000000	               mov qword [0x04002084], 0	      1250	ldlang.c	FUNCTION_39
0x4002084	      0xe881ffffff	call sym.output_section_statement_table_init	      1252	ldlang.c	FUNCTION_39	CALL_2
0x4002089	    0x488b05000000	            mov rax, qword [0x04002090] 	      1254	ldlang.c	FUNCTION_39	CALL_3
0x4002090	          0x4889c7	                            mov rdi, rax	      1254	ldlang.c	FUNCTION_39	CALL_3
0x4002093	      0xe800000000	                          call 0x4002098	      1254	ldlang.c	FUNCTION_39	CALL_3
0x4002098	      0xbf00000000	                              mov edi, 0	      1256	ldlang.c	FUNCTION_39	CALL_4
0x400209d	      0xe800000000	                          call 0x40020a2	      1256	ldlang.c	FUNCTION_39	CALL_4
0x40020a2	      0xbf00000000	                              mov edi, 0	      1257	ldlang.c	FUNCTION_39	CALL_5
0x40020a7	      0xe800000000	                          call 0x40020ac	      1257	ldlang.c	FUNCTION_39	CALL_5
0x40020ac	      0xbf00000000	                              mov edi, 0	      1258	ldlang.c	FUNCTION_39	CALL_6
0x40020b1	      0xe800000000	                          call 0x40020b6	      1258	ldlang.c	FUNCTION_39	CALL_6
0x40020b6	      0xba00000000	                              mov edx, 0	      1259	ldlang.c	FUNCTION_39	CALL_7
0x40020bb	      0xbe02000000	                              mov esi, 2	      1259	ldlang.c	FUNCTION_39	CALL_7
0x40020c0	      0xbf00000000	                              mov edi, 0	      1259	ldlang.c	FUNCTION_39	CALL_7
0x40020c5	      0xe800000000	                          call 0x40020ca	      1259	ldlang.c	FUNCTION_39	CALL_7
0x40020ca	    0x488905000000	            mov qword [0x040020d1], rax 	      1259	ldlang.c	FUNCTION_39	CALL_7
0x40020d1	      0xba01000000	                              mov edx, 1	      1262	ldlang.c	FUNCTION_39	CALL_8
0x40020d6	      0xbe00000000	                              mov esi, 0	      1262	ldlang.c	FUNCTION_39	CALL_8
0x40020db	      0xbf00000000	                              mov edi, 0	      1262	ldlang.c	FUNCTION_39	CALL_8
0x40020e0	      0xe800000000	                          call 0x40020e5	      1262	ldlang.c	FUNCTION_39	CALL_8
0x40020e5	    0x488905000000	            mov qword [0x040020ec], rax 	      1261	ldlang.c	FUNCTION_39
0x40020ec	    0x488b05000000	            mov rax, qword [0x040020f3] 	      1264	ldlang.c	FUNCTION_39
0x40020f3	    0x48c740380000	               mov qword [rax + 0x38], 0	      1264	ldlang.c	FUNCTION_39
0x40020fb	    0x48c705000000	               mov qword [0x04002106], 0	      1266	ldlang.c	FUNCTION_39
0x4002106	    0x48c705000000	               mov qword [0x04002111], 0	      1267	ldlang.c	FUNCTION_39
0x4002111	              0x90	                                     nop	      1268	ldlang.c	FUNCTION_39
0x4002112	              0x5d	                                 pop rbp	      1268	ldlang.c	FUNCTION_39
0x4002113	              0xc3	                                     ret	      1268	ldlang.c	FUNCTION_39
walk_wild_section	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	23
0x40012db	              0x55	                                push rbp	       744	ldlang.c	FUNCTION_23
0x40012dc	          0x4889e5	                            mov rbp, rsp	       744	ldlang.c	FUNCTION_23
0x40012df	        0x4883ec20	                           sub rsp, 0x20	       744	ldlang.c	FUNCTION_23
0x40012e3	        0x48897df8	                mov qword [rbp - 8], rdi	       744	ldlang.c	FUNCTION_23
0x40012e7	        0x488975f0	             mov qword [rbp - 0x10], rsi	       744	ldlang.c	FUNCTION_23
0x40012eb	        0x488955e8	             mov qword [rbp - 0x18], rdx	       744	ldlang.c	FUNCTION_23
0x40012ef	        0x48894de0	             mov qword [rbp - 0x20], rcx	       744	ldlang.c	FUNCTION_23
0x40012f3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       745	ldlang.c	FUNCTION_23	IF_1
0x40012f7	         0xfb64048	           movzx eax, byte [rax + 0x48] 	       745	ldlang.c	FUNCTION_23	IF_1
0x40012fb	          0x83e010	                           and eax, 0x10	       745	ldlang.c	FUNCTION_23	IF_1
0x40012fe	            0x84c0	                             test al, al	       745	ldlang.c	FUNCTION_23	IF_1
0x4001300	            0x751c	                           jne 0x400131e	       745	ldlang.c	FUNCTION_23	IF_1
0x4001302	        0x488b45f8	                mov rax, qword [rbp - 8]	       748	ldlang.c	FUNCTION_23
0x4001306	        0x488b4048	            mov rax, qword [rax + 0x48] 	       748	ldlang.c	FUNCTION_23
0x400130a	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       748	ldlang.c	FUNCTION_23
0x400130e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       748	ldlang.c	FUNCTION_23
0x4001312	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       748	ldlang.c	FUNCTION_23
0x4001316	        0x488b7df8	                mov rdi, qword [rbp - 8]	       748	ldlang.c	FUNCTION_23
0x400131a	            0xffd0	                                call rax	       748	ldlang.c	FUNCTION_23
0x400131c	            0xeb01	                           jmp 0x400131f	       748	ldlang.c	FUNCTION_23
0x400131e	              0x90	                                     nop	       746	ldlang.c	FUNCTION_23	IF_1
0x400131f	              0xc9	                                   leave	       749	ldlang.c	FUNCTION_23
0x4001320	              0xc3	                                     ret	       749	ldlang.c	FUNCTION_23
output_prev_sec_find	functions,0:ELSE,0:FOR,1:CALL,0:IF,2:DO,0:WHILE,0:SWITCH,0	32
0x4002d4d	              0x55	                                push rbp	      1730	ldlang.c	FUNCTION_48
0x4002d4e	          0x4889e5	                            mov rbp, rsp	      1730	ldlang.c	FUNCTION_48
0x4002d51	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1730	ldlang.c	FUNCTION_48
0x4002d55	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002d59	        0x488b4028	            mov rax, qword [rax + 0x28] 	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002d5d	        0x488945f8	                mov qword [rbp - 8], rax	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002d61	            0xeb46	                           jmp 0x4002da9	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002d63	        0x488b45f8	                mov rax, qword [rbp - 8]	      1735	ldlang.c	FUNCTION_48	FOR_1	IF_1
0x4002d67	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      1735	ldlang.c	FUNCTION_48	FOR_1	IF_1
0x4002d6d	            0x85c0	                           test eax, eax	      1735	ldlang.c	FUNCTION_48	FOR_1	IF_1
0x4002d6f	            0x782b	                            js 0x4002d9c	      1735	ldlang.c	FUNCTION_48	FOR_1	IF_1
0x4002d71	        0x488b45f8	                mov rax, qword [rbp - 8]	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d75	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d79	          0x4885c0	                           test rax, rax	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d7c	            0x741f	                            je 0x4002d9d	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d7e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d82	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d86	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d8d	          0x4885c0	                           test rax, rax	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d90	            0x740b	                            je 0x4002d9d	      1738	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d92	        0x488b45f8	                mov rax, qword [rbp - 8]	      1739	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d96	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1739	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d9a	            0xeb19	                           jmp 0x4002db5	      1739	ldlang.c	FUNCTION_48	FOR_1	IF_2
0x4002d9c	              0x90	                                     nop	      1736	ldlang.c	FUNCTION_48	FOR_1	IF_1
0x4002d9d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002da1	        0x488b4028	            mov rax, qword [rax + 0x28] 	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002da5	        0x488945f8	                mov qword [rbp - 8], rax	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002da9	      0x48837df800	                  cmp qword [rbp - 8], 0	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002dae	            0x75b3	                           jne 0x4002d63	      1733	ldlang.c	FUNCTION_48	FOR_1
0x4002db0	      0xb800000000	                              mov eax, 0	      1742	ldlang.c	FUNCTION_48
0x4002db5	              0x5d	                                 pop rbp	      1743	ldlang.c	FUNCTION_48
0x4002db6	              0xc3	                                     ret	      1743	ldlang.c	FUNCTION_48
analyze_walk_wild_section_handler	functions,0:ELSE,0:FOR,5:CALL,2:IF,7:DO,0:WHILE,0:SWITCH,1	172
0x40013bb	              0x55	                                push rbp	       781	ldlang.c	FUNCTION_25
0x40013bc	          0x4889e5	                            mov rbp, rsp	       781	ldlang.c	FUNCTION_25
0x40013bf	        0x4883ec30	                           sub rsp, 0x30	       781	ldlang.c	FUNCTION_25
0x40013c3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       781	ldlang.c	FUNCTION_25
0x40013c7	    0xc745e0000000	               mov dword [rbp - 0x20], 0	       782	ldlang.c	FUNCTION_25
0x40013ce	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       783	ldlang.c	FUNCTION_25
0x40013d5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       788	ldlang.c	FUNCTION_25
0x40013d9	    0x48c740480000	               mov qword [rax + 0x48], 0	       788	ldlang.c	FUNCTION_25
0x40013e1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       789	ldlang.c	FUNCTION_25
0x40013e5	    0x48c740500000	               mov qword [rax + 0x50], 0	       789	ldlang.c	FUNCTION_25
0x40013ed	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       790	ldlang.c	FUNCTION_25
0x40013f1	    0x48c740580000	               mov qword [rax + 0x58], 0	       790	ldlang.c	FUNCTION_25
0x40013f9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       791	ldlang.c	FUNCTION_25
0x40013fd	    0x48c740600000	               mov qword [rax + 0x60], 0	       791	ldlang.c	FUNCTION_25
0x4001405	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       792	ldlang.c	FUNCTION_25
0x4001409	    0x48c740680000	               mov qword [rax + 0x68], 0	       792	ldlang.c	FUNCTION_25
0x4001411	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       793	ldlang.c	FUNCTION_25
0x4001415	    0x48c740700000	               mov qword [rax + 0x70], 0	       793	ldlang.c	FUNCTION_25
0x400141d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001421	        0x488b4020	            mov rax, qword [rax + 0x20] 	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001425	        0x488945f0	             mov qword [rbp - 0x10], rax	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001429	            0xeb56	                           jmp 0x4001481	       801	ldlang.c	FUNCTION_25	FOR_1
0x400142b	        0x8345e001	               add dword [rbp - 0x20], 1	       803	ldlang.c	FUNCTION_25	FOR_1
0x400142f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       804	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x4001433	        0x488b4008	                mov rax, qword [rax + 8]	       804	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x4001437	          0x4885c0	                           test rax, rax	       804	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x400143a	     0xf84fd010000	                            je 0x400163d	       804	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x4001440	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x4001444	        0x488b4008	                mov rax, qword [rax + 8]	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x4001448	      0xbe00000000	                              mov esi, 0	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x400144d	          0x4889c7	                            mov rdi, rax	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x4001450	      0xe800000000	                          call 0x4001455	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x4001455	          0x4885c0	                           test rax, rax	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x4001458	            0x741c	                            je 0x4001476	       806	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x400145a	        0x8345e401	               add dword [rbp - 0x1c], 1	       808	ldlang.c	FUNCTION_25	FOR_1	IF_2
0x400145e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x4001462	        0x488b4008	                mov rax, qword [rax + 8]	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x4001466	          0x4889c7	                            mov rdi, rax	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x4001469	      0xe8c8f2ffff	                 call sym.is_simple_wild	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x400146e	            0x85c0	                           test eax, eax	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x4001470	     0xf84ca010000	                            je 0x4001640	       809	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3	CALL_1
0x4001476	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       801	ldlang.c	FUNCTION_25	FOR_1
0x400147a	          0x488b00	                    mov rax, qword [rax]	       801	ldlang.c	FUNCTION_25	FOR_1
0x400147d	        0x488945f0	             mov qword [rbp - 0x10], rax	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001481	      0x48837df000	               cmp qword [rbp - 0x10], 0	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001486	            0x75a3	                           jne 0x400142b	       801	ldlang.c	FUNCTION_25	FOR_1
0x4001488	        0x837de000	               cmp dword [rbp - 0x20], 0	       817	ldlang.c	FUNCTION_25	IF_4
0x400148c	     0xf84b1010000	                            je 0x4001643	       817	ldlang.c	FUNCTION_25	IF_4
0x4001492	        0x837de004	               cmp dword [rbp - 0x20], 4	       817	ldlang.c	FUNCTION_25	IF_4
0x4001496	     0xf8fa7010000	                            jg 0x4001643	       817	ldlang.c	FUNCTION_25	IF_4
0x400149c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014a0	        0x488b4020	            mov rax, qword [rax + 0x20] 	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014a4	        0x488945f0	             mov qword [rbp - 0x10], rax	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014a8	            0xeb4d	                           jmp 0x40014f7	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014aa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014ae	          0x488b00	                    mov rax, qword [rax]	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014b1	        0x488945f8	                mov qword [rbp - 8], rax	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014b5	            0xeb2e	                           jmp 0x40014e5	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014b7	        0x488b45f8	                mov rax, qword [rbp - 8]	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014bb	        0x488b5008	                mov rdx, qword [rax + 8]	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014bf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014c3	        0x488b4008	                mov rax, qword [rax + 8]	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014c7	          0x4889d6	                            mov rsi, rdx	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014ca	          0x4889c7	                            mov rdi, rax	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014cd	      0xe84ffeffff	          call sym.wild_spec_can_overlap	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014d2	            0x85c0	                           test eax, eax	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014d4	     0xf856c010000	                           jne 0x4001646	       826	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5	CALL_2
0x40014da	        0x488b45f8	                mov rax, qword [rbp - 8]	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014de	          0x488b00	                    mov rax, qword [rax]	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014e1	        0x488945f8	                mov qword [rbp - 8], rax	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014e5	      0x48837df800	                  cmp qword [rbp - 8], 0	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014ea	            0x75cb	                           jne 0x40014b7	       824	ldlang.c	FUNCTION_25	FOR_2	FOR_3
0x40014ec	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014f0	          0x488b00	                    mov rax, qword [rax]	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014f3	        0x488945f0	             mov qword [rbp - 0x10], rax	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014f7	      0x48837df000	               cmp qword [rbp - 0x10], 0	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014fc	            0x75ac	                           jne 0x40014aa	       821	ldlang.c	FUNCTION_25	FOR_2
0x40014fe	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       831	ldlang.c	FUNCTION_25
0x4001501	          0xc1e008	                              shl eax, 8	       831	ldlang.c	FUNCTION_25
0x4001504	            0x89c2	                            mov edx, eax	       831	ldlang.c	FUNCTION_25
0x4001506	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       831	ldlang.c	FUNCTION_25
0x4001509	             0x1d0	                            add eax, edx	       831	ldlang.c	FUNCTION_25
0x400150b	          0x8945ec	             mov dword [rbp - 0x14], eax	       831	ldlang.c	FUNCTION_25
0x400150e	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001511	      0x3d01020000	                          cmp eax, 0x201	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001516	            0x7449	                            je 0x4001561	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001518	      0x3d01020000	                          cmp eax, 0x201	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x400151d	            0x7f13	                            jg 0x4001532	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x400151f	      0x3d00010000	                          cmp eax, 0x100	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001524	            0x741f	                            je 0x4001545	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001526	      0x3d01010000	                          cmp eax, 0x101	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x400152b	            0x7426	                            je 0x4001553	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x400152d	      0xe915010000	                           jmp 0x4001647	       850	ldlang.c	FUNCTION_25	SWITCH_1
0x4001532	      0x3d02030000	                          cmp eax, 0x302	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001537	            0x7436	                            je 0x400156f	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001539	      0x3d02040000	                          cmp eax, 0x402	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x400153e	            0x743d	                            je 0x400157d	       832	ldlang.c	FUNCTION_25	SWITCH_1
0x4001540	      0xe902010000	                           jmp 0x4001647	       850	ldlang.c	FUNCTION_25	SWITCH_1
0x4001545	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       835	ldlang.c	FUNCTION_25	SWITCH_1
0x4001549	    0x48c740480000	               mov qword [rax + 0x48], 0	       835	ldlang.c	FUNCTION_25	SWITCH_1
0x4001551	            0xeb37	                           jmp 0x400158a	       836	ldlang.c	FUNCTION_25	SWITCH_1
0x4001553	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       838	ldlang.c	FUNCTION_25	SWITCH_1
0x4001557	    0x48c740480000	               mov qword [rax + 0x48], 0	       838	ldlang.c	FUNCTION_25	SWITCH_1
0x400155f	            0xeb29	                           jmp 0x400158a	       839	ldlang.c	FUNCTION_25	SWITCH_1
0x4001561	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       841	ldlang.c	FUNCTION_25	SWITCH_1
0x4001565	    0x48c740480000	               mov qword [rax + 0x48], 0	       841	ldlang.c	FUNCTION_25	SWITCH_1
0x400156d	            0xeb1b	                           jmp 0x400158a	       842	ldlang.c	FUNCTION_25	SWITCH_1
0x400156f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       844	ldlang.c	FUNCTION_25	SWITCH_1
0x4001573	    0x48c740480000	               mov qword [rax + 0x48], 0	       844	ldlang.c	FUNCTION_25	SWITCH_1
0x400157b	            0xeb0d	                           jmp 0x400158a	       845	ldlang.c	FUNCTION_25	SWITCH_1
0x400157d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       847	ldlang.c	FUNCTION_25	SWITCH_1
0x4001581	    0x48c740480000	               mov qword [rax + 0x48], 0	       847	ldlang.c	FUNCTION_25	SWITCH_1
0x4001589	              0x90	                                     nop	       848	ldlang.c	FUNCTION_25	SWITCH_1
0x400158a	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       858	ldlang.c	FUNCTION_25
0x4001591	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       859	ldlang.c	FUNCTION_25	FOR_4
0x4001595	        0x488b4020	            mov rax, qword [rax + 0x20] 	       859	ldlang.c	FUNCTION_25	FOR_4
0x4001599	        0x488945f0	             mov qword [rbp - 0x10], rax	       859	ldlang.c	FUNCTION_25	FOR_4
0x400159d	            0xeb40	                           jmp 0x40015df	       859	ldlang.c	FUNCTION_25	FOR_4
0x400159f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015a3	        0x488b4008	                mov rax, qword [rax + 8]	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015a7	      0xbe00000000	                              mov esi, 0	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015ac	          0x4889c7	                            mov rdi, rax	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015af	      0xe800000000	                          call 0x40015b4	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015b4	          0x4885c0	                           test rax, rax	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015b7	            0x751b	                           jne 0x40015d4	       860	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015b9	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015bc	          0x8d5001	                      lea edx, [rax + 1]	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015bf	          0x8955e8	             mov dword [rbp - 0x18], edx	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015c2	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015c6	            0x4898	                                    cdqe	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015c8	        0x488d480a	                    lea rcx, [rax + 0xa]	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015cc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015d0	        0x488904ca	            mov qword [rdx + rcx*8], rax	       861	ldlang.c	FUNCTION_25	FOR_4	IF_6
0x40015d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       859	ldlang.c	FUNCTION_25	FOR_4
0x40015d8	          0x488b00	                    mov rax, qword [rax]	       859	ldlang.c	FUNCTION_25	FOR_4
0x40015db	        0x488945f0	             mov qword [rbp - 0x10], rax	       859	ldlang.c	FUNCTION_25	FOR_4
0x40015df	      0x48837df000	               cmp qword [rbp - 0x10], 0	       859	ldlang.c	FUNCTION_25	FOR_4
0x40015e4	            0x75b9	                           jne 0x400159f	       859	ldlang.c	FUNCTION_25	FOR_4
0x40015e6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       862	ldlang.c	FUNCTION_25	FOR_5
0x40015ea	        0x488b4020	            mov rax, qword [rax + 0x20] 	       862	ldlang.c	FUNCTION_25	FOR_5
0x40015ee	        0x488945f0	             mov qword [rbp - 0x10], rax	       862	ldlang.c	FUNCTION_25	FOR_5
0x40015f2	            0xeb40	                           jmp 0x4001634	       862	ldlang.c	FUNCTION_25	FOR_5
0x40015f4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x40015f8	        0x488b4008	                mov rax, qword [rax + 8]	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x40015fc	      0xbe00000000	                              mov esi, 0	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001601	          0x4889c7	                            mov rdi, rax	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001604	      0xe800000000	                          call 0x4001609	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001609	          0x4885c0	                           test rax, rax	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x400160c	            0x741b	                            je 0x4001629	       863	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x400160e	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001611	          0x8d5001	                      lea edx, [rax + 1]	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001614	          0x8955e8	             mov dword [rbp - 0x18], edx	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001617	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x400161b	            0x4898	                                    cdqe	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x400161d	        0x488d480a	                    lea rcx, [rax + 0xa]	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001621	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001625	        0x488904ca	            mov qword [rdx + rcx*8], rax	       864	ldlang.c	FUNCTION_25	FOR_5	IF_7
0x4001629	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       862	ldlang.c	FUNCTION_25	FOR_5
0x400162d	          0x488b00	                    mov rax, qword [rax]	       862	ldlang.c	FUNCTION_25	FOR_5
0x4001630	        0x488945f0	             mov qword [rbp - 0x10], rax	       862	ldlang.c	FUNCTION_25	FOR_5
0x4001634	      0x48837df000	               cmp qword [rbp - 0x10], 0	       862	ldlang.c	FUNCTION_25	FOR_5
0x4001639	            0x75b9	                           jne 0x40015f4	       862	ldlang.c	FUNCTION_25	FOR_5
0x400163b	            0xeb0a	                           jmp 0x4001647	       862	ldlang.c	FUNCTION_25	FOR_5
0x400163d	              0x90	                                     nop	       805	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x400163e	            0xeb07	                           jmp 0x4001647	       805	ldlang.c	FUNCTION_25	FOR_1	IF_1
0x4001640	              0x90	                                     nop	       810	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3
0x4001641	            0xeb04	                           jmp 0x4001647	       810	ldlang.c	FUNCTION_25	FOR_1	IF_2	IF_3
0x4001643	              0x90	                                     nop	       818	ldlang.c	FUNCTION_25	IF_4
0x4001644	            0xeb01	                           jmp 0x4001647	       818	ldlang.c	FUNCTION_25	IF_4
0x4001646	              0x90	                                     nop	       827	ldlang.c	FUNCTION_25	FOR_2	FOR_3	IF_5
0x4001647	              0xc9	                                   leave	       865	ldlang.c	FUNCTION_25
0x4001648	              0xc3	                                     ret	       865	ldlang.c	FUNCTION_25
walk_wild_section_specs1_wild1	functions,0:ELSE,0:FOR,1:CALL,2:IF,1:DO,0:WHILE,0:SWITCH,0	48
0x4000d0b	              0x55	                                push rbp	       591	ldlang.c	FUNCTION_19
0x4000d0c	          0x4889e5	                            mov rbp, rsp	       591	ldlang.c	FUNCTION_19
0x4000d0f	        0x4883ec40	                           sub rsp, 0x40	       591	ldlang.c	FUNCTION_19
0x4000d13	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       591	ldlang.c	FUNCTION_19
0x4000d17	        0x488975d0	             mov qword [rbp - 0x30], rsi	       591	ldlang.c	FUNCTION_19
0x4000d1b	        0x488955c8	             mov qword [rbp - 0x38], rdx	       591	ldlang.c	FUNCTION_19
0x4000d1f	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       591	ldlang.c	FUNCTION_19
0x4000d23	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       593	ldlang.c	FUNCTION_19
0x4000d27	        0x488b4050	            mov rax, qword [rax + 0x50] 	       593	ldlang.c	FUNCTION_19
0x4000d2b	        0x488945f0	             mov qword [rbp - 0x10], rax	       593	ldlang.c	FUNCTION_19
0x4000d2f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000d33	        0x488b4020	            mov rax, qword [rax + 0x20] 	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000d37	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000d3e	        0x488945e8	             mov qword [rbp - 0x18], rax	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000d42	            0xeb65	                           jmp 0x4000da9	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000d44	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       597	ldlang.c	FUNCTION_19	FOR_1
0x4000d48	          0x488b00	                    mov rax, qword [rax]	       597	ldlang.c	FUNCTION_19	FOR_1
0x4000d4b	        0x488945f8	                mov qword [rbp - 8], rax	       597	ldlang.c	FUNCTION_19	FOR_1
0x4000d4f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d53	        0x488b4008	                mov rax, qword [rax + 8]	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d57	        0x488b55f8	                mov rdx, qword [rbp - 8]	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d5b	          0x4889d6	                            mov rsi, rdx	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d5e	          0x4889c7	                            mov rdi, rax	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d61	      0xe82efaffff	              call sym.match_simple_wild	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d66	            0x85c0	                           test eax, eax	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d68	           0xf94c0	                                 sete al	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d6b	           0xfb6c0	                           movzx eax, al	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d6e	          0x8945e4	             mov dword [rbp - 0x1c], eax	       598	ldlang.c	FUNCTION_19	FOR_1	CALL_1
0x4000d71	        0x837de400	               cmp dword [rbp - 0x1c], 0	       600	ldlang.c	FUNCTION_19	FOR_1	IF_1
0x4000d75	            0x7526	                           jne 0x4000d9d	       600	ldlang.c	FUNCTION_19	FOR_1	IF_1
0x4000d77	        0x4c8b45c0	              mov r8, qword [rbp - 0x40]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d7b	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d7f	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d83	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d87	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d8b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d8f	          0x4d89c1	                              mov r9, r8	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d92	          0x4989f8	                             mov r8, rdi	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d95	          0x4889c7	                            mov rdi, rax	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d98	      0xe872f7ffff	     call sym.walk_wild_consider_section	       601	ldlang.c	FUNCTION_19	FOR_1	CALL_2
0x4000d9d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000da1	        0x488b4010	            mov rax, qword [rax + 0x10] 	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000da5	        0x488945e8	             mov qword [rbp - 0x18], rax	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000da9	      0x48837de800	               cmp qword [rbp - 0x18], 0	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000dae	            0x7594	                           jne 0x4000d44	       595	ldlang.c	FUNCTION_19	FOR_1
0x4000db0	              0x90	                                     nop	       603	ldlang.c	FUNCTION_19
0x4000db1	              0xc9	                                   leave	       603	ldlang.c	FUNCTION_19
0x4000db2	              0xc3	                                     ret	       603	ldlang.c	FUNCTION_19
bfd_set_section_vma	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	19
0x4000040	              0x55	                                push rbp	      1686	bfd.h	FUNCTION_211
0x4000041	          0x4889e5	                            mov rbp, rsp	      1686	bfd.h	FUNCTION_211
0x4000044	        0x48897df8	                mov qword [rbp - 8], rdi	      1686	bfd.h	FUNCTION_211
0x4000048	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1686	bfd.h	FUNCTION_211
0x400004c	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1686	bfd.h	FUNCTION_211
0x4000050	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1687	bfd.h	FUNCTION_211
0x4000054	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1687	bfd.h	FUNCTION_211
0x4000058	        0x48895030	             mov qword [rax + 0x30], rdx	      1687	bfd.h	FUNCTION_211
0x400005c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1687	bfd.h	FUNCTION_211
0x4000060	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      1687	bfd.h	FUNCTION_211
0x4000064	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1687	bfd.h	FUNCTION_211
0x4000068	        0x48895028	             mov qword [rax + 0x28], rdx	      1687	bfd.h	FUNCTION_211
0x400006c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1688	bfd.h	FUNCTION_211
0x4000070	         0xfb65024	           movzx edx, byte [rax + 0x24] 	      1688	bfd.h	FUNCTION_211
0x4000074	          0x83ca01	                               or edx, 1	      1688	bfd.h	FUNCTION_211
0x4000077	          0x885024	               mov byte [rax + 0x24], dl	      1688	bfd.h	FUNCTION_211
0x400007a	      0xb801000000	                              mov eax, 1	      1689	bfd.h	FUNCTION_211
0x400007f	              0x5d	                                 pop rbp	      1690	bfd.h	FUNCTION_211
0x4000080	              0xc3	                                     ret	      1690	bfd.h	FUNCTION_211
output_section_statement_table_free	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	7
0x4002045	              0x55	                                push rbp	      1239	ldlang.c	FUNCTION_38
0x4002046	          0x4889e5	                            mov rbp, rsp	      1239	ldlang.c	FUNCTION_38
0x4002049	      0xbf00000000	                              mov edi, 0	      1240	ldlang.c	FUNCTION_38	CALL_1
0x400204e	      0xe800000000	                          call 0x4002053	      1240	ldlang.c	FUNCTION_38	CALL_1
0x4002053	              0x90	                                     nop	      1241	ldlang.c	FUNCTION_38
0x4002054	              0x5d	                                 pop rbp	      1241	ldlang.c	FUNCTION_38
0x4002055	              0xc3	                                     ret	      1241	ldlang.c	FUNCTION_38
find_rescan_insertion	functions,0:ELSE,0:FOR,2:CALL,0:IF,5:DO,0:WHILE,0:SWITCH,0	82
0x400c921	              0x55	                                push rbp	      7021	ldlang.c	FUNCTION_157
0x400c922	          0x4889e5	                            mov rbp, rsp	      7021	ldlang.c	FUNCTION_157
0x400c925	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      7021	ldlang.c	FUNCTION_157
0x400c929	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7022	ldlang.c	FUNCTION_157
0x400c92d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7022	ldlang.c	FUNCTION_157
0x400c931	        0x488945d8	             mov qword [rbp - 0x28], rax	      7022	ldlang.c	FUNCTION_157
0x400c935	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      7024	ldlang.c	FUNCTION_157
0x400c93d	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      7025	ldlang.c	FUNCTION_157
0x400c945	    0x48c745f80000	                  mov qword [rbp - 8], 0	      7026	ldlang.c	FUNCTION_157
0x400c94d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7028	ldlang.c	FUNCTION_157	IF_1
0x400c951	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7028	ldlang.c	FUNCTION_157	IF_1
0x400c958	          0x4885c0	                           test rax, rax	      7028	ldlang.c	FUNCTION_157	IF_1
0x400c95b	            0x740f	                            je 0x400c96c	      7028	ldlang.c	FUNCTION_157	IF_1
0x400c95d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7029	ldlang.c	FUNCTION_157	IF_1
0x400c961	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7029	ldlang.c	FUNCTION_157	IF_1
0x400c968	        0x488945d8	             mov qword [rbp - 0x28], rax	      7029	ldlang.c	FUNCTION_157	IF_1
0x400c96c	    0x488b05000000	            mov rax, qword [0x0400c973] 	      7038	ldlang.c	FUNCTION_157	FOR_1
0x400c973	        0x488945e0	             mov qword [rbp - 0x20], rax	      7038	ldlang.c	FUNCTION_157	FOR_1
0x400c977	            0xeb62	                           jmp 0x400c9db	      7038	ldlang.c	FUNCTION_157	FOR_1
0x400c979	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7042	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c97d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7042	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c981	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      7042	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c985	            0x7526	                           jne 0x400c9ad	      7042	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c987	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7044	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c98b	        0x488945f0	             mov qword [rbp - 0x10], rax	      7044	ldlang.c	FUNCTION_157	FOR_1	IF_2
0x400c98f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7045	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c993	        0x488b4030	            mov rax, qword [rax + 0x30] 	      7045	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c997	          0x4885c0	                           test rax, rax	      7045	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c99a	            0x7411	                            je 0x400c9ad	      7045	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c99c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7046	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c9a0	        0x488b4030	            mov rax, qword [rax + 0x30] 	      7046	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c9a4	        0x4883c030	                           add rax, 0x30	      7046	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c9a8	      0xe9a2000000	                           jmp 0x400ca4f	      7046	ldlang.c	FUNCTION_157	FOR_1	IF_2	IF_3
0x400c9ad	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9b1	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9b5	          0x4885c0	                           test rax, rax	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9b8	            0x7415	                            je 0x400c9cf	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9ba	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9be	        0x488b4030	            mov rax, qword [rax + 0x30] 	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9c2	          0x4885c0	                           test rax, rax	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9c5	            0x7408	                            je 0x400c9cf	      7048	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9c7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7049	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9cb	        0x488945e8	             mov qword [rbp - 0x18], rax	      7049	ldlang.c	FUNCTION_157	FOR_1	IF_4
0x400c9cf	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7040	ldlang.c	FUNCTION_157	FOR_1
0x400c9d3	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7040	ldlang.c	FUNCTION_157	FOR_1
0x400c9d7	        0x488945e0	             mov qword [rbp - 0x20], rax	      7040	ldlang.c	FUNCTION_157	FOR_1
0x400c9db	      0x48837de000	               cmp qword [rbp - 0x20], 0	      7038	ldlang.c	FUNCTION_157	FOR_1
0x400c9e0	            0x7597	                           jne 0x400c979	      7038	ldlang.c	FUNCTION_157	FOR_1
0x400c9e2	      0x48837df000	               cmp qword [rbp - 0x10], 0	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9e7	            0x740a	                            je 0x400c9f3	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9e9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9ed	        0x4883c030	                           add rax, 0x30	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9f1	            0xeb0b	                           jmp 0x400c9fe	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9f3	    0x488b05000000	            mov rax, qword [0x0400c9fa] 	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9fa	        0x4883c030	                           add rax, 0x30	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400c9fe	        0x488945f8	                mov qword [rbp - 8], rax	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400ca02	            0xeb38	                           jmp 0x400ca3c	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400ca04	        0x488b45f8	                mov rax, qword [rbp - 8]	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca08	          0x488b00	                    mov rax, qword [rax]	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca0b	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca0f	          0x83e040	                           and eax, 0x40	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca12	            0x84c0	                             test al, al	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca14	            0x7517	                           jne 0x400ca2d	      7055	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca16	        0x488b45f8	                mov rax, qword [rbp - 8]	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca1a	          0x488b00	                    mov rax, qword [rax]	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca1d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca21	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca28	          0x4885c0	                           test rax, rax	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca2b	            0x741d	                            je 0x400ca4a	      7056	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca2d	        0x488b45f8	                mov rax, qword [rbp - 8]	      7054	ldlang.c	FUNCTION_157	FOR_2
0x400ca31	          0x488b00	                    mov rax, qword [rax]	      7054	ldlang.c	FUNCTION_157	FOR_2
0x400ca34	        0x4883c030	                           add rax, 0x30	      7054	ldlang.c	FUNCTION_157	FOR_2
0x400ca38	        0x488945f8	                mov qword [rbp - 8], rax	      7054	ldlang.c	FUNCTION_157	FOR_2
0x400ca3c	        0x488b45f8	                mov rax, qword [rbp - 8]	      7053	ldlang.c	FUNCTION_157	FOR_2
0x400ca40	          0x488b00	                    mov rax, qword [rax]	      7053	ldlang.c	FUNCTION_157	FOR_2
0x400ca43	          0x4885c0	                           test rax, rax	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400ca46	            0x75bc	                           jne 0x400ca04	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400ca48	            0xeb01	                           jmp 0x400ca4b	      7052	ldlang.c	FUNCTION_157	FOR_2
0x400ca4a	              0x90	                                     nop	      7057	ldlang.c	FUNCTION_157	FOR_2	IF_5
0x400ca4b	        0x488b45f8	                mov rax, qword [rbp - 8]	      7059	ldlang.c	FUNCTION_157
0x400ca4f	              0x5d	                                 pop rbp	      7060	ldlang.c	FUNCTION_157
0x400ca50	              0xc3	                                     ret	      7060	ldlang.c	FUNCTION_157
lang_final	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	15
0x400c300	              0x55	                                push rbp	      6740	ldlang.c	FUNCTION_147
0x400c301	          0x4889e5	                            mov rbp, rsp	      6740	ldlang.c	FUNCTION_147
0x400c304	        0x4883ec10	                           sub rsp, 0x10	      6740	ldlang.c	FUNCTION_147
0x400c308	    0x488b05000000	            mov rax, qword [0x0400c30f] 	      6743	ldlang.c	FUNCTION_147
0x400c30f	          0x4889c2	                            mov rdx, rax	      6743	ldlang.c	FUNCTION_147
0x400c312	      0xbe18000000	                           mov esi, 0x18	      6743	ldlang.c	FUNCTION_147
0x400c317	      0xbf0b000000	                            mov edi, 0xb	      6743	ldlang.c	FUNCTION_147
0x400c31c	      0xe84e57ffff	                  call sym.new_statement	      6743	ldlang.c	FUNCTION_147
0x400c321	        0x488945f8	                mov qword [rbp - 8], rax	      6743	ldlang.c	FUNCTION_147
0x400c325	    0x488b15000000	            mov rdx, qword [0x0400c32c] 	      6744	ldlang.c	FUNCTION_147
0x400c32c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6744	ldlang.c	FUNCTION_147
0x400c330	        0x48895010	             mov qword [rax + 0x10], rdx	      6744	ldlang.c	FUNCTION_147
0x400c334	              0x90	                                     nop	      6745	ldlang.c	FUNCTION_147
0x400c335	              0xc9	                                   leave	      6745	ldlang.c	FUNCTION_147
0x400c336	              0xc3	                                     ret	      6745	ldlang.c	FUNCTION_147
lang_list_remove_tail	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	33
0x400caa2	              0x55	                                push rbp	      7083	ldlang.c	FUNCTION_159
0x400caa3	          0x4889e5	                            mov rbp, rsp	      7083	ldlang.c	FUNCTION_159
0x400caa6	        0x4883ec20	                           sub rsp, 0x20	      7083	ldlang.c	FUNCTION_159
0x400caaa	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7083	ldlang.c	FUNCTION_159
0x400caae	        0x488975e0	             mov qword [rbp - 0x20], rsi	      7083	ldlang.c	FUNCTION_159
0x400cab2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cab6	          0x488b10	                    mov rdx, qword [rax]	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cab9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cabd	          0x488b00	                    mov rax, qword [rax]	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cac0	          0x4839c2	                            cmp rdx, rax	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cac3	            0x740f	                            je 0x400cad4	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cac5	      0xbeae1b0000	                         mov esi, 0x1bae	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400caca	      0xbf00000000	                              mov edi, 0	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cacf	      0xe800000000	                          call 0x400cad4	      7086	ldlang.c	FUNCTION_159	CALL_1
0x400cad4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7087	ldlang.c	FUNCTION_159
0x400cad8	        0x488b4008	                mov rax, qword [rax + 8]	      7087	ldlang.c	FUNCTION_159
0x400cadc	        0x488945f8	                mov qword [rbp - 8], rax	      7087	ldlang.c	FUNCTION_159
0x400cae0	        0x488b45f8	                mov rax, qword [rbp - 8]	      7088	ldlang.c	FUNCTION_159
0x400cae4	          0x488b10	                    mov rdx, qword [rax]	      7088	ldlang.c	FUNCTION_159
0x400cae7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7088	ldlang.c	FUNCTION_159
0x400caeb	          0x488910	                    mov qword [rax], rdx	      7088	ldlang.c	FUNCTION_159
0x400caee	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7089	ldlang.c	FUNCTION_159
0x400caf2	        0x488b5008	                mov rdx, qword [rax + 8]	      7089	ldlang.c	FUNCTION_159
0x400caf6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7089	ldlang.c	FUNCTION_159
0x400cafa	        0x48895008	                mov qword [rax + 8], rdx	      7089	ldlang.c	FUNCTION_159
0x400cafe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7090	ldlang.c	FUNCTION_159
0x400cb02	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7090	ldlang.c	FUNCTION_159
0x400cb06	        0x48895008	                mov qword [rax + 8], rdx	      7090	ldlang.c	FUNCTION_159
0x400cb0a	        0x488b45f8	                mov rax, qword [rbp - 8]	      7091	ldlang.c	FUNCTION_159
0x400cb0e	    0x48c700000000	                      mov qword [rax], 0	      7091	ldlang.c	FUNCTION_159
0x400cb15	              0x90	                                     nop	      7092	ldlang.c	FUNCTION_159
0x400cb16	              0xc9	                                   leave	      7092	ldlang.c	FUNCTION_159
0x400cb17	              0xc3	                                     ret	      7092	ldlang.c	FUNCTION_159
section_already_linked	functions,0:ELSE,0:FOR,0:CALL,1:IF,3:DO,0:WHILE,0:SWITCH,0	56
0x4003fcb	              0x55	                                push rbp	      2256	ldlang.c	FUNCTION_57
0x4003fcc	          0x4889e5	                            mov rbp, rsp	      2256	ldlang.c	FUNCTION_57
0x4003fcf	        0x4883ec30	                           sub rsp, 0x30	      2256	ldlang.c	FUNCTION_57
0x4003fd3	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2256	ldlang.c	FUNCTION_57
0x4003fd7	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2256	ldlang.c	FUNCTION_57
0x4003fdb	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2256	ldlang.c	FUNCTION_57
0x4003fdf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2257	ldlang.c	FUNCTION_57
0x4003fe3	        0x488945f8	                mov qword [rbp - 8], rax	      2257	ldlang.c	FUNCTION_57
0x4003fe7	        0x488b45f8	                mov rax, qword [rbp - 8]	      2261	ldlang.c	FUNCTION_57	IF_1
0x4003feb	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      2261	ldlang.c	FUNCTION_57	IF_1
0x4003fef	          0x83e010	                           and eax, 0x10	      2261	ldlang.c	FUNCTION_57	IF_1
0x4003ff2	            0x84c0	                             test al, al	      2261	ldlang.c	FUNCTION_57	IF_1
0x4003ff4	            0x741f	                            je 0x4004015	      2261	ldlang.c	FUNCTION_57	IF_1
0x4003ff6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2263	ldlang.c	FUNCTION_57	IF_1
0x4003ffa	        0x488b4008	                mov rax, qword [rax + 8]	      2263	ldlang.c	FUNCTION_57	IF_1
0x4003ffe	    0x488b80c80200	           mov rax, qword [rax + 0x2c8] 	      2263	ldlang.c	FUNCTION_57	IF_1
0x4004005	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2263	ldlang.c	FUNCTION_57	IF_1
0x4004009	      0xbe00000000	                              mov esi, 0	      2263	ldlang.c	FUNCTION_57	IF_1
0x400400e	          0x4889d7	                            mov rdi, rdx	      2263	ldlang.c	FUNCTION_57	IF_1
0x4004011	            0xffd0	                                call rax	      2263	ldlang.c	FUNCTION_57	IF_1
0x4004013	            0xeb7c	                           jmp 0x4004091	      2264	ldlang.c	FUNCTION_57	IF_1
0x4004015	     0xfb605000000	           movzx eax, byte [0x0400401c] 	      2268	ldlang.c	FUNCTION_57	IF_2	CALL_1
0x400401c	          0x83e003	                              and eax, 3	      2268	ldlang.c	FUNCTION_57	IF_2	CALL_1
0x400401f	            0x3c02	                               cmp al, 2	      2268	ldlang.c	FUNCTION_57	IF_2	CALL_1
0x4004021	            0x7437	                            je 0x400405a	      2268	ldlang.c	FUNCTION_57	IF_2	CALL_1
0x4004023	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2269	ldlang.c	FUNCTION_57	IF_2
0x4004027	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2269	ldlang.c	FUNCTION_57	IF_2
0x400402a	          0xc1e805	                              shr eax, 5	      2269	ldlang.c	FUNCTION_57	IF_2
0x400402d	      0x25ffff0f00	                        and eax, 0xfffff	      2269	ldlang.c	FUNCTION_57	IF_2
0x4004032	      0x2500000100	                        and eax, 0x10000	      2269	ldlang.c	FUNCTION_57	IF_2
0x4004037	            0x85c0	                           test eax, eax	      2269	ldlang.c	FUNCTION_57	IF_2
0x4004039	            0x751f	                           jne 0x400405a	      2269	ldlang.c	FUNCTION_57	IF_2
0x400403b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2270	ldlang.c	FUNCTION_57	IF_2
0x400403f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2270	ldlang.c	FUNCTION_57	IF_2
0x4004042	      0x2500802002	                      and eax, 0x2208000	      2270	ldlang.c	FUNCTION_57	IF_2
0x4004047	      0x3d00800000	                         cmp eax, 0x8000	      2270	ldlang.c	FUNCTION_57	IF_2
0x400404c	            0x750c	                           jne 0x400405a	      2270	ldlang.c	FUNCTION_57	IF_2
0x400404e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2271	ldlang.c	FUNCTION_57	IF_2
0x4004052	    0x48c740680000	               mov qword [rax + 0x68], 0	      2271	ldlang.c	FUNCTION_57	IF_2
0x400405a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2273	ldlang.c	FUNCTION_57	IF_3
0x400405e	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2273	ldlang.c	FUNCTION_57	IF_3
0x4004061	          0xc1e805	                              shr eax, 5	      2273	ldlang.c	FUNCTION_57	IF_3
0x4004064	      0x25ffff0f00	                        and eax, 0xfffff	      2273	ldlang.c	FUNCTION_57	IF_3
0x4004069	          0x83e040	                           and eax, 0x40	      2273	ldlang.c	FUNCTION_57	IF_3
0x400406c	            0x85c0	                           test eax, eax	      2273	ldlang.c	FUNCTION_57	IF_3
0x400406e	            0x7521	                           jne 0x4004091	      2273	ldlang.c	FUNCTION_57	IF_3
0x4004070	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2274	ldlang.c	FUNCTION_57	IF_3
0x4004074	        0x488b4008	                mov rax, qword [rax + 8]	      2274	ldlang.c	FUNCTION_57	IF_3
0x4004078	    0x488b80180300	           mov rax, qword [rax + 0x318] 	      2274	ldlang.c	FUNCTION_57	IF_3
0x400407f	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      2274	ldlang.c	FUNCTION_57	IF_3
0x4004083	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      2274	ldlang.c	FUNCTION_57	IF_3
0x4004087	      0xba00000000	                              mov edx, 0	      2274	ldlang.c	FUNCTION_57	IF_3
0x400408c	          0x4889cf	                            mov rdi, rcx	      2274	ldlang.c	FUNCTION_57	IF_3
0x400408f	            0xffd0	                                call rax	      2274	ldlang.c	FUNCTION_57	IF_3
0x4004091	              0xc9	                                   leave	      2275	ldlang.c	FUNCTION_57
0x4004092	              0xc3	                                     ret	      2275	ldlang.c	FUNCTION_57
get_first_input_target	functions,1:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	47
0x400555a	              0x55	                                push rbp	      3063	ldlang.c	FUNCTION_73
0x400555b	          0x4889e5	                            mov rbp, rsp	      3063	ldlang.c	FUNCTION_73
0x400555e	        0x4883ec10	                           sub rsp, 0x10	      3063	ldlang.c	FUNCTION_73
0x4005562	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      3064	ldlang.c	FUNCTION_73
0x400556a	    0x488b05000000	            mov rax, qword [0x04005571] 	      3066	ldlang.c	FUNCTION_73
0x4005571	        0x488945f8	                mov qword [rbp - 8], rax	      3066	ldlang.c	FUNCTION_73
0x4005575	            0xeb73	                           jmp 0x40055ea	      3066	ldlang.c	FUNCTION_73
0x4005577	        0x488b45f8	                mov rax, qword [rbp - 8]	      3068	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x400557b	          0x8b4008	                mov eax, dword [rax + 8]	      3068	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x400557e	          0x83f802	                              cmp eax, 2	      3068	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x4005581	            0x755b	                           jne 0x40055de	      3068	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x4005583	        0x488b45f8	                mov rax, qword [rbp - 8]	      3069	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x4005587	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      3069	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x400558b	          0x83e004	                              and eax, 4	      3069	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x400558e	            0x84c0	                             test al, al	      3069	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x4005590	            0x744c	                            je 0x40055de	      3069	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1
0x4005592	        0x488b45f8	                mov rax, qword [rbp - 8]	      3071	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	CALL_1
0x4005596	          0x4889c7	                            mov rdi, rax	      3071	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	CALL_1
0x4005599	      0xe800000000	                          call 0x400559e	      3071	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	CALL_1
0x400559e	        0x488b45f8	                mov rax, qword [rbp - 8]	      3073	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055a2	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3073	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055a6	          0x4885c0	                           test rax, rax	      3073	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055a9	            0x7433	                            je 0x40055de	      3073	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055ab	        0x488b45f8	                mov rax, qword [rbp - 8]	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055af	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055b3	      0xbe01000000	                              mov esi, 1	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055b8	          0x4889c7	                            mov rdi, rax	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055bb	      0xe800000000	                          call 0x40055c0	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055c0	            0x85c0	                           test eax, eax	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055c2	            0x741a	                            je 0x40055de	      3074	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	CALL_2
0x40055c4	        0x488b45f8	                mov rax, qword [rbp - 8]	      3076	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055c8	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3076	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055cc	        0x488b4008	                mov rax, qword [rax + 8]	      3076	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055d0	          0x488b00	                    mov rax, qword [rax]	      3076	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055d3	        0x488945f0	             mov qword [rbp - 0x10], rax	      3076	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2
0x40055d7	      0x48837df000	               cmp qword [rbp - 0x10], 0	      3078	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	IF_3
0x40055dc	            0x7515	                           jne 0x40055f3	      3078	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	IF_3
0x40055de	        0x488b45f8	                mov rax, qword [rbp - 8]	      3066	ldlang.c	FUNCTION_73
0x40055e2	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3066	ldlang.c	FUNCTION_73
0x40055e6	        0x488945f8	                mov qword [rbp - 8], rax	      3066	ldlang.c	FUNCTION_73
0x40055ea	      0x48837df800	                  cmp qword [rbp - 8], 0	      3066	ldlang.c	FUNCTION_73
0x40055ef	            0x7586	                           jne 0x4005577	      3066	ldlang.c	FUNCTION_73
0x40055f1	            0xeb01	                           jmp 0x40055f4	      3066	ldlang.c	FUNCTION_73
0x40055f3	              0x90	                                     nop	      3079	ldlang.c	FUNCTION_73	FUNCTION_1	IF_1	IF_2	IF_3
0x40055f4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3084	ldlang.c	FUNCTION_73
0x40055f8	              0xc9	                                   leave	      3085	ldlang.c	FUNCTION_73
0x40055f9	              0xc3	                                     ret	      3085	ldlang.c	FUNCTION_73
print_input_section	functions,0:ELSE,2:FOR,0:CALL,12:IF,7:DO,0:WHILE,2:SWITCH,0	130
0x4007512	              0x55	                                push rbp	      4199	ldlang.c	FUNCTION_96
0x4007513	          0x4889e5	                            mov rbp, rsp	      4199	ldlang.c	FUNCTION_96
0x4007516	              0x53	                                push rbx	      4199	ldlang.c	FUNCTION_96
0x4007517	        0x4883ec38	                           sub rsp, 0x38	      4199	ldlang.c	FUNCTION_96
0x400751b	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      4199	ldlang.c	FUNCTION_96
0x400751f	          0x8975c4	             mov dword [rbp - 0x3c], esi	      4199	ldlang.c	FUNCTION_96
0x4007522	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4200	ldlang.c	FUNCTION_96
0x4007526	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4200	ldlang.c	FUNCTION_96
0x400752a	        0x488945e0	             mov qword [rbp - 0x20], rax	      4200	ldlang.c	FUNCTION_96
0x400752e	      0xe86ae5ffff	                       call sym.init_opb	      4204	ldlang.c	FUNCTION_96	CALL_1
0x4007533	      0xe800000000	                          call 0x4007538	      4206	ldlang.c	FUNCTION_96	CALL_2
0x4007538	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4207	ldlang.c	FUNCTION_96	CALL_3
0x400753c	          0x488b00	                    mov rax, qword [rax]	      4207	ldlang.c	FUNCTION_96	CALL_3
0x400753f	          0x4889c6	                            mov rsi, rax	      4207	ldlang.c	FUNCTION_96	CALL_3
0x4007542	      0xbf00000000	                              mov edi, 0	      4207	ldlang.c	FUNCTION_96	CALL_3
0x4007547	      0xb800000000	                              mov eax, 0	      4207	ldlang.c	FUNCTION_96	CALL_3
0x400754c	      0xe800000000	                          call 0x4007551	      4207	ldlang.c	FUNCTION_96	CALL_3
0x4007551	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4209	ldlang.c	FUNCTION_96	CALL_4
0x4007555	          0x488b00	                    mov rax, qword [rax]	      4209	ldlang.c	FUNCTION_96	CALL_4
0x4007558	          0x4889c7	                            mov rdi, rax	      4209	ldlang.c	FUNCTION_96	CALL_4
0x400755b	      0xe800000000	                          call 0x4007560	      4209	ldlang.c	FUNCTION_96	CALL_4
0x4007560	          0x83c001	                              add eax, 1	      4209	ldlang.c	FUNCTION_96	CALL_4
0x4007563	          0x8945dc	             mov dword [rbp - 0x24], eax	      4209	ldlang.c	FUNCTION_96	CALL_4
0x4007566	        0x837ddc0e	            cmp dword [rbp - 0x24], 0xe 	      4210	ldlang.c	FUNCTION_96	IF_1
0x400756a	            0x7e17	                           jle 0x4007583	      4210	ldlang.c	FUNCTION_96	IF_1
0x400756c	      0xe800000000	                          call 0x4007571	      4212	ldlang.c	FUNCTION_96	IF_1	CALL_5
0x4007571	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      4213	ldlang.c	FUNCTION_96	IF_1
0x4007578	            0xeb09	                           jmp 0x4007583	      4215	ldlang.c	FUNCTION_96	WHILE_1
0x400757a	      0xe800000000	                          call 0x400757f	      4217	ldlang.c	FUNCTION_96	WHILE_1	CALL_6
0x400757f	        0x8345dc01	               add dword [rbp - 0x24], 1	      4218	ldlang.c	FUNCTION_96	WHILE_1
0x4007583	        0x837ddc0f	            cmp dword [rbp - 0x24], 0xf 	      4215	ldlang.c	FUNCTION_96	WHILE_1
0x4007587	            0x7ef1	                           jle 0x400757a	      4215	ldlang.c	FUNCTION_96	WHILE_1
0x4007589	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4221	ldlang.c	FUNCTION_96	IF_2
0x400758d	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4221	ldlang.c	FUNCTION_96	IF_2
0x4007591	          0x4885c0	                           test rax, rax	      4221	ldlang.c	FUNCTION_96	IF_2
0x4007594	            0x7438	                            je 0x40075ce	      4221	ldlang.c	FUNCTION_96	IF_2
0x4007596	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4222	ldlang.c	FUNCTION_96	IF_2
0x400759a	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4222	ldlang.c	FUNCTION_96	IF_2
0x400759e	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      4222	ldlang.c	FUNCTION_96	IF_2
0x40075a5	    0x488b05000000	            mov rax, qword [0x040075ac] 	      4222	ldlang.c	FUNCTION_96	IF_2
0x40075ac	          0x4839c2	                            cmp rdx, rax	      4222	ldlang.c	FUNCTION_96	IF_2
0x40075af	            0x751d	                           jne 0x40075ce	      4222	ldlang.c	FUNCTION_96	IF_2
0x40075b1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075b5	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075b9	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075bd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075c1	        0x488b4060	            mov rax, qword [rax + 0x60] 	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075c5	          0x4801d0	                            add rax, rdx	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075c8	        0x488945e8	             mov qword [rbp - 0x18], rax	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075cc	            0xeb19	                           jmp 0x40075e7	      4223	ldlang.c	FUNCTION_96	IF_2
0x40075ce	    0x488b05000000	            mov rax, qword [0x040075d5] 	      4226	ldlang.c	FUNCTION_96	ELSE_1
0x40075d5	        0x488945e8	             mov qword [rbp - 0x18], rax	      4226	ldlang.c	FUNCTION_96	ELSE_1
0x40075d9	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      4227	ldlang.c	FUNCTION_96	ELSE_1	IF_3
0x40075dd	            0x7508	                           jne 0x40075e7	      4227	ldlang.c	FUNCTION_96	ELSE_1	IF_3
0x40075df	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      4228	ldlang.c	FUNCTION_96	ELSE_1	IF_3
0x40075e7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4231	ldlang.c	FUNCTION_96	CALL_7
0x40075eb	    0x488b88f00000	            mov rcx, qword [rax + 0xf0] 	      4231	ldlang.c	FUNCTION_96	CALL_7
0x40075f2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4231	ldlang.c	FUNCTION_96	CALL_7
0x40075f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4231	ldlang.c	FUNCTION_96	CALL_7
0x40075fa	          0x4889c6	                            mov rsi, rax	      4231	ldlang.c	FUNCTION_96	CALL_7
0x40075fd	      0xbf00000000	                              mov edi, 0	      4231	ldlang.c	FUNCTION_96	CALL_7
0x4007602	      0xb800000000	                              mov eax, 0	      4231	ldlang.c	FUNCTION_96	CALL_7
0x4007607	      0xe800000000	                          call 0x400760c	      4231	ldlang.c	FUNCTION_96	CALL_7
0x400760c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007610	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007614	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007618	            0x744b	                            je 0x4007665	      4233	ldlang.c	FUNCTION_96	IF_4
0x400761a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4233	ldlang.c	FUNCTION_96	IF_4
0x400761e	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007622	          0x4885c0	                           test rax, rax	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007625	            0x743e	                            je 0x4007665	      4233	ldlang.c	FUNCTION_96	IF_4
0x4007627	    0xc745dc130000	           mov dword [rbp - 0x24], 0x13 	      4235	ldlang.c	FUNCTION_96	IF_4
0x400762e	        0x8345dc10	            add dword [rbp - 0x24], 0x10	      4237	ldlang.c	FUNCTION_96	IF_4
0x4007632	            0xeb09	                           jmp 0x400763d	      4241	ldlang.c	FUNCTION_96	IF_4	WHILE_2
0x4007634	      0xe800000000	                          call 0x4007639	      4243	ldlang.c	FUNCTION_96	IF_4	WHILE_2	CALL_8
0x4007639	        0x836ddc01	               sub dword [rbp - 0x24], 1	      4244	ldlang.c	FUNCTION_96	IF_4	WHILE_2
0x400763d	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      4241	ldlang.c	FUNCTION_96	IF_4	WHILE_2
0x4007641	            0x7ff1	                            jg 0x4007634	      4241	ldlang.c	FUNCTION_96	IF_4	WHILE_2
0x4007643	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007647	        0x488b5840	            mov rbx, qword [rax + 0x40] 	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x400764b	      0xbf00000000	                              mov edi, 0	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007650	      0xe800000000	                          call 0x4007655	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007655	          0x4889de	                            mov rsi, rbx	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007658	          0x4889c7	                            mov rdi, rax	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x400765b	      0xb800000000	                              mov eax, 0	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007660	      0xe800000000	                          call 0x4007665	      4247	ldlang.c	FUNCTION_96	IF_4	CALL_10
0x4007665	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4250	ldlang.c	FUNCTION_96	IF_5
0x4007669	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4250	ldlang.c	FUNCTION_96	IF_5
0x400766d	          0x4885c0	                           test rax, rax	      4250	ldlang.c	FUNCTION_96	IF_5
0x4007670	     0xf848e000000	                            je 0x4007704	      4250	ldlang.c	FUNCTION_96	IF_5
0x4007676	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4251	ldlang.c	FUNCTION_96	IF_5
0x400767a	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4251	ldlang.c	FUNCTION_96	IF_5
0x400767e	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      4251	ldlang.c	FUNCTION_96	IF_5
0x4007685	    0x488b05000000	            mov rax, qword [0x0400768c] 	      4251	ldlang.c	FUNCTION_96	IF_5
0x400768c	          0x4839c2	                            cmp rdx, rax	      4251	ldlang.c	FUNCTION_96	IF_5
0x400768f	            0x7573	                           jne 0x4007704	      4251	ldlang.c	FUNCTION_96	IF_5
0x4007691	     0xfb605000000	           movzx eax, byte [0x04007698] 	      4253	ldlang.c	FUNCTION_96	IF_5	IF_6
0x4007698	          0x83e010	                           and eax, 0x10	      4253	ldlang.c	FUNCTION_96	IF_5	IF_6
0x400769b	            0x84c0	                             test al, al	      4253	ldlang.c	FUNCTION_96	IF_5	IF_6
0x400769d	            0x741a	                            je 0x40076b9	      4253	ldlang.c	FUNCTION_96	IF_5	IF_6
0x400769f	    0x488b05000000	            mov rax, qword [0x040076a6] 	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076a6	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076aa	      0xbe00000000	                              mov esi, 0	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076af	          0x4889c7	                            mov rdi, rax	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076b2	      0xe800000000	                          call 0x40076b7	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076b7	            0xeb0c	                           jmp 0x40076c5	      4254	ldlang.c	FUNCTION_96	IF_5	CALL_11
0x40076b9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4256	ldlang.c	FUNCTION_96	IF_5	CALL_12
0x40076bd	          0x4889c7	                            mov rdi, rax	      4256	ldlang.c	FUNCTION_96	IF_5	CALL_12
0x40076c0	      0xe8defbffff	              call sym.print_all_symbols	      4256	ldlang.c	FUNCTION_96	IF_5	CALL_12
0x40076c5	    0x8b0500000000	            mov eax, dword [0x040076cb] 	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076cb	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076cf	            0x89c1	                            mov ecx, eax	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076d1	          0x48d3ea	                             shr rdx, cl	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076d4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076d8	          0x4801c2	                            add rdx, rax	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076db	    0x488b05000000	            mov rax, qword [0x040076e2] 	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076e2	          0x4839c2	                            cmp rdx, rax	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076e5	            0x761d	                           jbe 0x4007704	      4261	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076e7	    0x8b0500000000	            mov eax, dword [0x040076ed] 	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076ed	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076f1	            0x89c1	                            mov ecx, eax	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076f3	          0x48d3ea	                             shr rdx, cl	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076fa	          0x4801d0	                            add rax, rdx	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x40076fd	    0x488905000000	            mov qword [0x04007704], rax 	      4262	ldlang.c	FUNCTION_96	IF_5	IF_7
0x4007704	              0x90	                                     nop	      4264	ldlang.c	FUNCTION_96
0x4007705	        0x4883c438	                           add rsp, 0x38	      4264	ldlang.c	FUNCTION_96
0x4007709	              0x5b	                                 pop rbx	      4264	ldlang.c	FUNCTION_96
0x400770a	              0x5d	                                 pop rbp	      4264	ldlang.c	FUNCTION_96
0x400770b	              0xc3	                                     ret	      4264	ldlang.c	FUNCTION_96
print_group	functions,0:ELSE,0:FOR,0:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	26
0x4007ea8	              0x55	                                push rbp	      4508	ldlang.c	FUNCTION_103
0x4007ea9	          0x4889e5	                            mov rbp, rsp	      4508	ldlang.c	FUNCTION_103
0x4007eac	        0x4883ec10	                           sub rsp, 0x10	      4508	ldlang.c	FUNCTION_103
0x4007eb0	        0x48897df8	                mov qword [rbp - 8], rdi	      4508	ldlang.c	FUNCTION_103
0x4007eb4	        0x488975f0	             mov qword [rbp - 0x10], rsi	      4508	ldlang.c	FUNCTION_103
0x4007eb8	    0x488b05000000	            mov rax, qword [0x04007ebf] 	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ebf	          0x4889c1	                            mov rcx, rax	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ec2	      0xba0c000000	                            mov edx, 0xc	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ec7	      0xbe01000000	                              mov esi, 1	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ecc	      0xbf00000000	                              mov edi, 0	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ed1	      0xe800000000	                          call 0x4007ed6	      4509	ldlang.c	FUNCTION_103	CALL_1
0x4007ed6	        0x488b45f8	                mov rax, qword [rbp - 8]	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007eda	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007ede	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007ee2	          0x4889d6	                            mov rsi, rdx	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007ee5	          0x4889c7	                            mov rdi, rax	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007ee8	      0xe821000000	           call sym.print_statement_list	      4510	ldlang.c	FUNCTION_103	CALL_2
0x4007eed	    0x488b05000000	            mov rax, qword [0x04007ef4] 	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007ef4	          0x4889c1	                            mov rcx, rax	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007ef7	      0xba0a000000	                            mov edx, 0xa	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007efc	      0xbe01000000	                              mov esi, 1	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007f01	      0xbf00000000	                              mov edi, 0	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007f06	      0xe800000000	                          call 0x4007f0b	      4511	ldlang.c	FUNCTION_103	CALL_3
0x4007f0b	              0x90	                                     nop	      4512	ldlang.c	FUNCTION_103
0x4007f0c	              0xc9	                                   leave	      4512	ldlang.c	FUNCTION_103
0x4007f0d	              0xc3	                                     ret	      4512	ldlang.c	FUNCTION_103
wild_sort_fast	functions,0:ELSE,1:FOR,0:CALL,1:IF,2:DO,0:WHILE,2:SWITCH,0	58
0x4000a66	              0x55	                                push rbp	       489	ldlang.c	FUNCTION_15
0x4000a67	          0x4889e5	                            mov rbp, rsp	       489	ldlang.c	FUNCTION_15
0x4000a6a	        0x4883ec30	                           sub rsp, 0x30	       489	ldlang.c	FUNCTION_15
0x4000a6e	        0x48897de8	             mov qword [rbp - 0x18], rdi	       489	ldlang.c	FUNCTION_15
0x4000a72	        0x488975e0	             mov qword [rbp - 0x20], rsi	       489	ldlang.c	FUNCTION_15
0x4000a76	        0x488955d8	             mov qword [rbp - 0x28], rdx	       489	ldlang.c	FUNCTION_15
0x4000a7a	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       489	ldlang.c	FUNCTION_15
0x4000a7e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       492	ldlang.c	FUNCTION_15
0x4000a82	        0x4883c070	                           add rax, 0x70	       492	ldlang.c	FUNCTION_15
0x4000a86	        0x488945f8	                mov qword [rbp - 8], rax	       492	ldlang.c	FUNCTION_15
0x4000a8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       493	ldlang.c	FUNCTION_15	IF_1
0x4000a8e	          0x8b4018	            mov eax, dword [rax + 0x18] 	       493	ldlang.c	FUNCTION_15	IF_1
0x4000a91	            0x85c0	                           test eax, eax	       493	ldlang.c	FUNCTION_15	IF_1
0x4000a93	            0x7578	                           jne 0x4000b0d	       493	ldlang.c	FUNCTION_15	IF_1
0x4000a95	      0x48837de000	               cmp qword [rbp - 0x20], 0	       494	ldlang.c	FUNCTION_15	IF_1
0x4000a9a	            0x741c	                            je 0x4000ab8	       494	ldlang.c	FUNCTION_15	IF_1
0x4000a9c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       494	ldlang.c	FUNCTION_15	IF_1
0x4000aa0	          0x8b4018	            mov eax, dword [rax + 0x18] 	       494	ldlang.c	FUNCTION_15	IF_1
0x4000aa3	            0x85c0	                           test eax, eax	       494	ldlang.c	FUNCTION_15	IF_1
0x4000aa5	            0x7566	                           jne 0x4000b0d	       494	ldlang.c	FUNCTION_15	IF_1
0x4000aa7	            0xeb0f	                           jmp 0x4000ab8	       497	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000aa9	        0x488b45f8	                mov rax, qword [rbp - 8]	       498	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000aad	          0x488b00	                    mov rax, qword [rax]	       498	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000ab0	        0x4883c010	                           add rax, 0x10	       498	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000ab4	        0x488945f8	                mov qword [rbp - 8], rax	       498	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000ab8	        0x488b45f8	                mov rax, qword [rbp - 8]	       497	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000abc	          0x488b00	                    mov rax, qword [rax]	       497	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000abf	          0x4885c0	                           test rax, rax	       497	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000ac2	            0x75e5	                           jne 0x4000aa9	       497	ldlang.c	FUNCTION_15	IF_1	WHILE_1
0x4000ac4	        0x488b45f8	                mov rax, qword [rbp - 8]	       499	ldlang.c	FUNCTION_15	IF_1
0x4000ac8	            0xeb53	                           jmp 0x4000b1d	       499	ldlang.c	FUNCTION_15	IF_1
0x4000aca	        0x488b45f8	                mov rax, qword [rbp - 8]	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ace	          0x488b00	                    mov rax, qword [rax]	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ad1	          0x488b10	                    mov rdx, qword [rax]	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ad4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ad8	          0x8b4018	            mov eax, dword [rax + 0x18] 	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000adb	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000adf	          0x4889ce	                            mov rsi, rcx	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ae2	            0x89c7	                            mov edi, eax	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ae4	      0xe878feffff	                call sym.compare_section	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000ae9	            0x85c0	                           test eax, eax	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000aeb	            0x7911	                           jns 0x4000afe	       505	ldlang.c	FUNCTION_15	WHILE_2	IF_2	CALL_1
0x4000aed	        0x488b45f8	                mov rax, qword [rbp - 8]	       506	ldlang.c	FUNCTION_15	WHILE_2	IF_2
0x4000af1	          0x488b00	                    mov rax, qword [rax]	       506	ldlang.c	FUNCTION_15	WHILE_2	IF_2
0x4000af4	        0x4883c008	                              add rax, 8	       506	ldlang.c	FUNCTION_15	WHILE_2	IF_2
0x4000af8	        0x488945f8	                mov qword [rbp - 8], rax	       506	ldlang.c	FUNCTION_15	WHILE_2	IF_2
0x4000afc	            0xeb0f	                           jmp 0x4000b0d	       506	ldlang.c	FUNCTION_15	WHILE_2	IF_2
0x4000afe	        0x488b45f8	                mov rax, qword [rbp - 8]	       508	ldlang.c	FUNCTION_15	WHILE_2	ELSE_1
0x4000b02	          0x488b00	                    mov rax, qword [rax]	       508	ldlang.c	FUNCTION_15	WHILE_2	ELSE_1
0x4000b05	        0x4883c010	                           add rax, 0x10	       508	ldlang.c	FUNCTION_15	WHILE_2	ELSE_1
0x4000b09	        0x488945f8	                mov qword [rbp - 8], rax	       508	ldlang.c	FUNCTION_15	WHILE_2	ELSE_1
0x4000b0d	        0x488b45f8	                mov rax, qword [rbp - 8]	       502	ldlang.c	FUNCTION_15	WHILE_2
0x4000b11	          0x488b00	                    mov rax, qword [rax]	       502	ldlang.c	FUNCTION_15	WHILE_2
0x4000b14	          0x4885c0	                           test rax, rax	       502	ldlang.c	FUNCTION_15	WHILE_2
0x4000b17	            0x75b1	                           jne 0x4000aca	       502	ldlang.c	FUNCTION_15	WHILE_2
0x4000b19	        0x488b45f8	                mov rax, qword [rbp - 8]	       511	ldlang.c	FUNCTION_15
0x4000b1d	              0xc9	                                   leave	       512	ldlang.c	FUNCTION_15
0x4000b1e	              0xc3	                                     ret	       512	ldlang.c	FUNCTION_15
lang_for_each_statement	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	12
0x4001980	              0x55	                                push rbp	      1000	ldlang.c	FUNCTION_29
0x4001981	          0x4889e5	                            mov rbp, rsp	      1000	ldlang.c	FUNCTION_29
0x4001984	        0x4883ec10	                           sub rsp, 0x10	      1000	ldlang.c	FUNCTION_29
0x4001988	        0x48897df8	                mov qword [rbp - 8], rdi	      1000	ldlang.c	FUNCTION_29
0x400198c	    0x488b15000000	            mov rdx, qword [0x04001993] 	      1001	ldlang.c	FUNCTION_29	CALL_1
0x4001993	        0x488b45f8	                mov rax, qword [rbp - 8]	      1001	ldlang.c	FUNCTION_29	CALL_1
0x4001997	          0x4889d6	                            mov rsi, rdx	      1001	ldlang.c	FUNCTION_29	CALL_1
0x400199a	          0x4889c7	                            mov rdi, rax	      1001	ldlang.c	FUNCTION_29	CALL_1
0x400199d	      0xe800000000	                          call 0x40019a2	      1001	ldlang.c	FUNCTION_29	CALL_1
0x40019a2	              0x90	                                     nop	      1002	ldlang.c	FUNCTION_29
0x40019a3	              0xc9	                                   leave	      1002	ldlang.c	FUNCTION_29
0x40019a4	              0xc3	                                     ret	      1002	ldlang.c	FUNCTION_29
lang_default_entry	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	8
0x400d419	              0x55	                                push rbp	      7507	ldlang.c	FUNCTION_167
0x400d41a	          0x4889e5	                            mov rbp, rsp	      7507	ldlang.c	FUNCTION_167
0x400d41d	        0x48897df8	                mov qword [rbp - 8], rdi	      7507	ldlang.c	FUNCTION_167
0x400d421	        0x488b45f8	                mov rax, qword [rbp - 8]	      7508	ldlang.c	FUNCTION_167
0x400d425	    0x488905000000	            mov qword [0x0400d42c], rax 	      7508	ldlang.c	FUNCTION_167
0x400d42c	              0x90	                                     nop	      7509	ldlang.c	FUNCTION_167
0x400d42d	              0x5d	                                 pop rbp	      7509	ldlang.c	FUNCTION_167
0x400d42e	              0xc3	                                     ret	      7509	ldlang.c	FUNCTION_167
lang_leave_overlay_section	functions,0:ELSE,0:FOR,1:CALL,19:IF,1:DO,0:WHILE,0:SWITCH,0	121
0x400dfe4	              0x55	                                push rbp	      7998	ldlang.c	FUNCTION_190
0x400dfe5	          0x4889e5	                            mov rbp, rsp	      7998	ldlang.c	FUNCTION_190
0x400dfe8	              0x53	                                push rbx	      7998	ldlang.c	FUNCTION_190
0x400dfe9	        0x4883ec48	                           sub rsp, 0x48	      7998	ldlang.c	FUNCTION_190
0x400dfed	        0x48897db8	             mov qword [rbp - 0x48], rdi	      7998	ldlang.c	FUNCTION_190
0x400dff1	        0x488975b0	             mov qword [rbp - 0x50], rsi	      7998	ldlang.c	FUNCTION_190
0x400dff5	    0x488b05000000	            mov rax, qword [0x0400dffc] 	      8004	ldlang.c	FUNCTION_190
0x400dffc	        0x488b4030	            mov rax, qword [rax + 0x30] 	      8004	ldlang.c	FUNCTION_190
0x400e000	        0x488945d8	             mov qword [rbp - 0x28], rax	      8004	ldlang.c	FUNCTION_190
0x400e004	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e008	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e00c	      0xb900000000	                              mov ecx, 0	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e011	      0xbe00000000	                              mov esi, 0	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e016	          0x4889c7	                            mov rdi, rax	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e019	      0xe800000000	                          call 0x400e01e	      8010	ldlang.c	FUNCTION_190	CALL_1
0x400e01e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e022	          0x4889c7	                            mov rdi, rax	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e025	      0xe800000000	                          call 0x400e02a	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e02a	        0x4883c001	                              add rax, 1	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e02e	          0x4889c7	                            mov rdi, rax	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e031	      0xe800000000	                          call 0x400e036	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e036	        0x488945e0	             mov qword [rbp - 0x20], rax	      8014	ldlang.c	FUNCTION_190	CALL_3
0x400e03a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8015	ldlang.c	FUNCTION_190
0x400e03e	        0x488945c8	             mov qword [rbp - 0x38], rax	      8015	ldlang.c	FUNCTION_190
0x400e042	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e046	        0x488945d0	             mov qword [rbp - 0x30], rax	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e04a	            0xeb48	                           jmp 0x400e094	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e04c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e050	           0xfb600	                   movzx eax, byte [rax]	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e053	           0xfbec0	                           movsx eax, al	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e056	           0xfb6c0	                           movzx eax, al	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e059	            0x4898	                                    cdqe	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e05b	     0xfb784000000	             movzx eax, word [rax + rax]	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e063	           0xfb7c0	                           movzx eax, ax	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e066	      0x258c000000	                           and eax, 0x8c	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e06b	            0x85c0	                           test eax, eax	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e06d	            0x750b	                           jne 0x400e07a	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e06f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e073	           0xfb600	                   movzx eax, byte [rax]	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e076	            0x3c5f	                            cmp al, 0x5f	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e078	            0x7515	                           jne 0x400e08f	      8017	ldlang.c	FUNCTION_190	FOR_1	IF_1	CALL_4
0x400e07a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e07e	        0x488d5001	                      lea rdx, [rax + 1]	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e082	        0x488955c8	             mov qword [rbp - 0x38], rdx	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e086	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e08a	           0xfb612	                   movzx edx, byte [rdx]	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e08d	            0x8810	                      mov byte [rax], dl	      8018	ldlang.c	FUNCTION_190	FOR_1	IF_1
0x400e08f	      0x488345d001	               add qword [rbp - 0x30], 1	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e094	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e098	           0xfb600	                   movzx eax, byte [rax]	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e09b	            0x84c0	                             test al, al	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e09d	            0x75ad	                           jne 0x400e04c	      8016	ldlang.c	FUNCTION_190	FOR_1
0x400e09f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8019	ldlang.c	FUNCTION_190
0x400e0a3	          0xc60000	                       mov byte [rax], 0	      8019	ldlang.c	FUNCTION_190
0x400e0a6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0aa	          0x4889c7	                            mov rdi, rax	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0ad	      0xe800000000	                          call 0x400e0b2	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0b2	        0x4883c00e	                            add rax, 0xe	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0b6	          0x4889c7	                            mov rdi, rax	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0b9	      0xe800000000	                          call 0x400e0be	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0be	        0x488945e8	             mov qword [rbp - 0x18], rax	      8021	ldlang.c	FUNCTION_190	CALL_6
0x400e0c2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0c6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0ca	      0xbe00000000	                              mov esi, 0	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0cf	          0x4889c7	                            mov rdi, rax	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0d2	      0xb800000000	                              mov eax, 0	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0d7	      0xe800000000	                          call 0x400e0dc	      8022	ldlang.c	FUNCTION_190	CALL_7
0x400e0dc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0e0	          0x4889c6	                            mov rsi, rax	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0e3	      0xbf44010000	                          mov edi, 0x144	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0e8	      0xe800000000	                          call 0x400e0ed	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0ed	          0x4889c1	                            mov rcx, rax	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0f4	      0xba00000000	                              mov edx, 0	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0f9	          0x4889ce	                            mov rsi, rcx	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0fc	          0x4889c7	                            mov rdi, rax	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e0ff	      0xe800000000	                          call 0x400e104	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e104	          0x4889c7	                            mov rdi, rax	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e107	      0xe800000000	                          call 0x400e10c	      8023	ldlang.c	FUNCTION_190	CALL_9
0x400e10c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e110	          0x4889c7	                            mov rdi, rax	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e113	      0xe800000000	                          call 0x400e118	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e118	        0x4883c00d	                            add rax, 0xd	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e11c	          0x4889c7	                            mov rdi, rax	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e11f	      0xe800000000	                          call 0x400e124	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e124	        0x488945e8	             mov qword [rbp - 0x18], rax	      8027	ldlang.c	FUNCTION_190	CALL_12
0x400e128	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e12c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e130	      0xbe00000000	                              mov esi, 0	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e135	          0x4889c7	                            mov rdi, rax	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e138	      0xb800000000	                              mov eax, 0	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e13d	      0xe800000000	                          call 0x400e142	      8028	ldlang.c	FUNCTION_190	CALL_13
0x400e142	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e146	          0x4889c6	                            mov rsi, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e149	      0xbf41010000	                          mov edi, 0x141	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e14e	      0xe800000000	                          call 0x400e153	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e153	          0x4889c3	                            mov rbx, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e156	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e15a	          0x4889c6	                            mov rsi, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e15d	      0xbf44010000	                          mov edi, 0x144	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e162	      0xe800000000	                          call 0x400e167	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e167	          0x4889da	                            mov rdx, rbx	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e16a	          0x4889c6	                            mov rsi, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e16d	      0xbf2b000000	                           mov edi, 0x2b	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e172	      0xe800000000	                          call 0x400e177	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e177	          0x4889c1	                            mov rcx, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e17a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e17e	      0xba00000000	                              mov edx, 0	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e183	          0x4889ce	                            mov rsi, rcx	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e186	          0x4889c7	                            mov rdi, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e189	      0xe800000000	                          call 0x400e18e	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e18e	          0x4889c7	                            mov rdi, rax	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e191	      0xe800000000	                          call 0x400e196	      8029	ldlang.c	FUNCTION_190	CALL_15
0x400e196	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8035	ldlang.c	FUNCTION_190	CALL_19
0x400e19a	          0x4889c7	                            mov rdi, rax	      8035	ldlang.c	FUNCTION_190	CALL_19
0x400e19d	      0xe800000000	                          call 0x400e1a2	      8035	ldlang.c	FUNCTION_190	CALL_19
0x400e1a2	              0x90	                                     nop	      8036	ldlang.c	FUNCTION_190
0x400e1a3	        0x4883c448	                           add rsp, 0x48	      8036	ldlang.c	FUNCTION_190
0x400e1a7	              0x5b	                                 pop rbx	      8036	ldlang.c	FUNCTION_190
0x400e1a8	              0x5d	                                 pop rbp	      8036	ldlang.c	FUNCTION_190
0x400e1a9	              0xc3	                                     ret	      8036	ldlang.c	FUNCTION_190
lang_undef_start_stop	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	7
0x400b0ad	              0x55	                                push rbp	      6101	ldlang.c	FUNCTION_129
0x400b0ae	          0x4889e5	                            mov rbp, rsp	      6101	ldlang.c	FUNCTION_129
0x400b0b1	      0xbf00000000	                              mov edi, 0	      6102	ldlang.c	FUNCTION_129	CALL_1
0x400b0b6	      0xe81cffffff	             call sym.foreach_start_stop	      6102	ldlang.c	FUNCTION_129	CALL_1
0x400b0bb	              0x90	                                     nop	      6103	ldlang.c	FUNCTION_129
0x400b0bc	              0x5d	                                 pop rbp	      6103	ldlang.c	FUNCTION_129
0x400b0bd	              0xc3	                                     ret	      6103	ldlang.c	FUNCTION_129
realsymbol	functions,0:ELSE,2:FOR,1:CALL,4:IF,3:DO,0:WHILE,0:SWITCH,0	74
0x400e7dd	              0x55	                                push rbp	      8244	ldlang.c	FUNCTION_193
0x400e7de	          0x4889e5	                            mov rbp, rsp	      8244	ldlang.c	FUNCTION_193
0x400e7e1	        0x4883ec30	                           sub rsp, 0x30	      8244	ldlang.c	FUNCTION_193
0x400e7e5	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      8244	ldlang.c	FUNCTION_193
0x400e7e9	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      8246	ldlang.c	FUNCTION_193
0x400e7f0	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      8246	ldlang.c	FUNCTION_193
0x400e7f7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e7fb	          0x4889c7	                            mov rdi, rax	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e7fe	      0xe800000000	                          call 0x400e803	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e803	        0x4883c001	                              add rax, 1	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e807	          0x4889c7	                            mov rdi, rax	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e80a	      0xe800000000	                          call 0x400e80f	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e80f	        0x488945f8	                mov qword [rbp - 8], rax	      8247	ldlang.c	FUNCTION_193	CALL_2
0x400e813	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e817	        0x488945e8	             mov qword [rbp - 0x18], rax	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e81b	        0x488b45f8	                mov rax, qword [rbp - 8]	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e81f	        0x488945f0	             mov qword [rbp - 0x10], rax	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e823	      0xe987000000	                           jmp 0x400e8af	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e828	        0x837de400	               cmp dword [rbp - 0x1c], 0	      8253	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e82c	            0x7421	                            je 0x400e84f	      8253	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e82e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8256	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e832	        0x488d50ff	                      lea rdx, [rax - 1]	      8256	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e836	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8256	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e83a	           0xfb600	                   movzx eax, byte [rax]	      8256	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e83d	            0x8802	                      mov byte [rdx], al	      8256	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e83f	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      8257	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e846	    0xc745e0010000	               mov dword [rbp - 0x20], 1	      8258	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e84d	            0xeb5b	                           jmp 0x400e8aa	      8258	ldlang.c	FUNCTION_193	FOR_1	IF_1
0x400e84f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e853	           0xfb600	                   movzx eax, byte [rax]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e856	            0x3c3f	                            cmp al, 0x3f	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e858	            0x7416	                            je 0x400e870	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e85a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e85e	           0xfb600	                   movzx eax, byte [rax]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e861	            0x3c2a	                            cmp al, 0x2a	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e863	            0x740b	                            je 0x400e870	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e865	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e869	           0xfb600	                   movzx eax, byte [rax]	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e86c	            0x3c5b	                            cmp al, 0x5b	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e86e	            0x7513	                           jne 0x400e883	      8262	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e870	        0x488b45f8	                mov rax, qword [rbp - 8]	      8264	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2	CALL_3
0x400e874	          0x4889c7	                            mov rdi, rax	      8264	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2	CALL_3
0x400e877	      0xe800000000	                          call 0x400e87c	      8264	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2	CALL_3
0x400e87c	      0xb800000000	                              mov eax, 0	      8265	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e881	            0xeb5e	                           jmp 0x400e8e1	      8265	ldlang.c	FUNCTION_193	FOR_1	ELSE_1	IF_2
0x400e883	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e887	        0x488d5001	                      lea rdx, [rax + 1]	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e88b	        0x488955f0	             mov qword [rbp - 0x10], rdx	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e88f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e893	           0xfb612	                   movzx edx, byte [rdx]	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e896	            0x8810	                      mov byte [rax], dl	      8268	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e898	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e89c	           0xfb600	                   movzx eax, byte [rax]	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e89f	            0x3c5c	                            cmp al, 0x5c	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e8a1	           0xf94c0	                                 sete al	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e8a4	           0xfb6c0	                           movzx eax, al	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e8a7	          0x8945e4	             mov dword [rbp - 0x1c], eax	      8269	ldlang.c	FUNCTION_193	FOR_1	ELSE_1
0x400e8aa	      0x488345e801	               add qword [rbp - 0x18], 1	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e8af	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e8b3	           0xfb600	                   movzx eax, byte [rax]	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e8b6	            0x84c0	                             test al, al	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e8b8	     0xf856affffff	                           jne 0x400e828	      8249	ldlang.c	FUNCTION_193	FOR_1
0x400e8be	        0x837de000	               cmp dword [rbp - 0x20], 0	      8273	ldlang.c	FUNCTION_193	IF_3
0x400e8c2	            0x740d	                            je 0x400e8d1	      8273	ldlang.c	FUNCTION_193	IF_3
0x400e8c4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8275	ldlang.c	FUNCTION_193	IF_3
0x400e8c8	          0xc60000	                       mov byte [rax], 0	      8275	ldlang.c	FUNCTION_193	IF_3
0x400e8cb	        0x488b45f8	                mov rax, qword [rbp - 8]	      8276	ldlang.c	FUNCTION_193	IF_3
0x400e8cf	            0xeb10	                           jmp 0x400e8e1	      8276	ldlang.c	FUNCTION_193	IF_3
0x400e8d1	        0x488b45f8	                mov rax, qword [rbp - 8]	      8280	ldlang.c	FUNCTION_193	ELSE_2	CALL_4
0x400e8d5	          0x4889c7	                            mov rdi, rax	      8280	ldlang.c	FUNCTION_193	ELSE_2	CALL_4
0x400e8d8	      0xe800000000	                          call 0x400e8dd	      8280	ldlang.c	FUNCTION_193	ELSE_2	CALL_4
0x400e8dd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8281	ldlang.c	FUNCTION_193	ELSE_2
0x400e8e1	              0xc9	                                   leave	      8283	ldlang.c	FUNCTION_193
0x400e8e2	              0xc3	                                     ret	      8283	ldlang.c	FUNCTION_193
lang_insert_orphan	functions,0:ELSE,3:FOR,0:CALL,11:IF,17:DO,0:WHILE,0:SWITCH,0	356
0x4002edf	              0x55	                                push rbp	      1829	ldlang.c	FUNCTION_50
0x4002ee0	          0x4889e5	                            mov rbp, rsp	      1829	ldlang.c	FUNCTION_50
0x4002ee3	    0x4881ec000100	                          sub rsp, 0x100	      1829	ldlang.c	FUNCTION_50
0x4002eea	    0x4889bd38ffff	             mov qword [rbp - 0xc8], rdi	      1829	ldlang.c	FUNCTION_50
0x4002ef1	    0x4889b530ffff	             mov qword [rbp - 0xd0], rsi	      1829	ldlang.c	FUNCTION_50
0x4002ef8	    0x89952cffffff	             mov dword [rbp - 0xd4], edx	      1829	ldlang.c	FUNCTION_50
0x4002efe	    0x48898d20ffff	             mov qword [rbp - 0xe0], rcx	      1829	ldlang.c	FUNCTION_50
0x4002f05	    0x4c898518ffff	              mov qword [rbp - 0xe8], r8	      1829	ldlang.c	FUNCTION_50
0x4002f0c	    0x4c898d10ffff	              mov qword [rbp - 0xf0], r9	      1829	ldlang.c	FUNCTION_50
0x4002f13	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      1829	ldlang.c	FUNCTION_50
0x4002f17	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	      1829	ldlang.c	FUNCTION_50
0x4002f1e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1829	ldlang.c	FUNCTION_50
0x4002f27	        0x488945f8	                mov qword [rbp - 8], rax	      1829	ldlang.c	FUNCTION_50
0x4002f2b	            0x31c0	                            xor eax, eax	      1829	ldlang.c	FUNCTION_50
0x4002f2d	    0x4883bd20ffff	               cmp qword [rbp - 0xe0], 0	      1837	ldlang.c	FUNCTION_50	IF_1
0x4002f35	            0x7418	                            je 0x4002f4f	      1837	ldlang.c	FUNCTION_50	IF_1
0x4002f37	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1839	ldlang.c	FUNCTION_50	IF_1	CALL_1
0x4002f3b	          0x4889c7	                            mov rdi, rax	      1839	ldlang.c	FUNCTION_50	IF_1	CALL_1
0x4002f3e	      0xe800000000	                          call 0x4002f43	      1839	ldlang.c	FUNCTION_50	IF_1	CALL_1
0x4002f43	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1840	ldlang.c	FUNCTION_50	IF_1	CALL_2
0x4002f47	          0x4889c7	                            mov rdi, rax	      1840	ldlang.c	FUNCTION_50	IF_1	CALL_2
0x4002f4a	      0xe800000000	                          call 0x4002f4f	      1840	ldlang.c	FUNCTION_50	IF_1	CALL_2
0x4002f4f	     0xfb605000000	           movzx eax, byte [0x04002f56] 	      1843	ldlang.c	FUNCTION_50	IF_2	CALL_3
0x4002f56	          0x83e003	                              and eax, 3	      1843	ldlang.c	FUNCTION_50	IF_2	CALL_3
0x4002f59	            0x3c02	                               cmp al, 2	      1843	ldlang.c	FUNCTION_50	IF_2	CALL_3
0x4002f5b	            0x7411	                            je 0x4002f6e	      1843	ldlang.c	FUNCTION_50	IF_2	CALL_3
0x4002f5d	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	      1844	ldlang.c	FUNCTION_50	IF_2
0x4002f64	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1844	ldlang.c	FUNCTION_50	IF_2
0x4002f67	          0x83e003	                              and eax, 3	      1844	ldlang.c	FUNCTION_50	IF_2
0x4002f6a	            0x85c0	                           test eax, eax	      1844	ldlang.c	FUNCTION_50	IF_2
0x4002f6c	            0x7511	                           jne 0x4002f7f	      1844	ldlang.c	FUNCTION_50	IF_2
0x4002f6e	      0xbf00000000	                              mov edi, 0	      1845	ldlang.c	FUNCTION_50	CALL_4
0x4002f73	      0xe800000000	                          call 0x4002f78	      1845	ldlang.c	FUNCTION_50	CALL_4
0x4002f78	    0x48898510ffff	             mov qword [rbp - 0xf0], rax	      1845	ldlang.c	FUNCTION_50	CALL_4
0x4002f7f	    0x488b05000000	            mov rax, qword [0x04002f86] 	      1847	ldlang.c	FUNCTION_50
0x4002f86	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	      1847	ldlang.c	FUNCTION_50
0x4002f8d	    0x488bb510ffff	             mov rsi, qword [rbp - 0xf0]	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002f94	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002f9b	            0x6a00	                                  push 0	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002f9d	    0x8b952cffffff	             mov edx, dword [rbp - 0xd4]	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fa3	              0x52	                                push rdx	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fa4	    0x41b900000000	                              mov r9d, 0	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002faa	    0x41b800000000	                              mov r8d, 0	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fb0	      0xb900000000	                              mov ecx, 0	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fb5	      0xba00000000	                              mov edx, 0	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fba	          0x4889c7	                            mov rdi, rax	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fbd	      0xe800000000	                          call 0x4002fc2	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fc2	        0x4883c410	                           add rsp, 0x10	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fc6	    0x48898550ffff	             mov qword [rbp - 0xb0], rax	      1849	ldlang.c	FUNCTION_50	CALL_5
0x4002fcd	    0x4883bd08ffff	               cmp qword [rbp - 0xf8], 0	      1852	ldlang.c	FUNCTION_50	IF_3
0x4002fd5	            0x7512	                           jne 0x4002fe9	      1852	ldlang.c	FUNCTION_50	IF_3
0x4002fd7	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      1853	ldlang.c	FUNCTION_50	IF_3
0x4002fde	        0x4883c010	                           add rax, 0x10	      1853	ldlang.c	FUNCTION_50	IF_3
0x4002fe2	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	      1853	ldlang.c	FUNCTION_50	IF_3
0x4002fe9	    0x488b9550ffff	             mov rdx, qword [rbp - 0xb0]	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4002ff0	    0x488bb538ffff	             mov rsi, qword [rbp - 0xc8]	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4002ff7	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4002ffe	          0x4889d1	                            mov rcx, rdx	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4003001	      0xba00000000	                              mov edx, 0	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4003006	          0x4889c7	                            mov rdi, rax	      1854	ldlang.c	FUNCTION_50	CALL_6
0x4003009	      0xe800000000	                          call 0x400300e	      1854	ldlang.c	FUNCTION_50	CALL_6
0x400300e	    0x4883bd20ffff	               cmp qword [rbp - 0xe0], 0	      1856	ldlang.c	FUNCTION_50	IF_4
0x4003016	     0xf8495000000	                            je 0x40030b1	      1856	ldlang.c	FUNCTION_50	IF_4
0x400301c	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	      1856	ldlang.c	FUNCTION_50	IF_4
0x4003023	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1856	ldlang.c	FUNCTION_50	IF_4
0x4003026	          0x83e003	                              and eax, 3	      1856	ldlang.c	FUNCTION_50	IF_4
0x4003029	            0x85c0	                           test eax, eax	      1856	ldlang.c	FUNCTION_50	IF_4
0x400302b	     0xf8480000000	                            je 0x40030b1	      1856	ldlang.c	FUNCTION_50	IF_4
0x4003031	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1858	ldlang.c	FUNCTION_50	IF_4
0x4003038	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1858	ldlang.c	FUNCTION_50	IF_4
0x400303c	          0x4885c0	                           test rax, rax	      1860	ldlang.c	FUNCTION_50	IF_4
0x400303f	            0x7410	                            je 0x4003051	      1860	ldlang.c	FUNCTION_50	IF_4
0x4003041	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1859	ldlang.c	FUNCTION_50	IF_4
0x4003048	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1859	ldlang.c	FUNCTION_50	IF_4
0x400304c	          0x488b00	                    mov rax, qword [rax]	      1860	ldlang.c	FUNCTION_50	IF_4
0x400304f	            0xeb05	                           jmp 0x4003056	      1860	ldlang.c	FUNCTION_50	IF_4
0x4003051	      0xb800000000	                              mov eax, 0	      1860	ldlang.c	FUNCTION_50	IF_4
0x4003056	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      1858	ldlang.c	FUNCTION_50	IF_4
0x400305d	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1861	ldlang.c	FUNCTION_50	IF_4
0x4003064	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1861	ldlang.c	FUNCTION_50	IF_4
0x4003068	          0x4885c0	                           test rax, rax	      1863	ldlang.c	FUNCTION_50	IF_4
0x400306b	            0x7410	                            je 0x400307d	      1863	ldlang.c	FUNCTION_50	IF_4
0x400306d	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1862	ldlang.c	FUNCTION_50	IF_4
0x4003074	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1862	ldlang.c	FUNCTION_50	IF_4
0x4003078	          0x488b00	                    mov rax, qword [rax]	      1863	ldlang.c	FUNCTION_50	IF_4
0x400307b	            0xeb05	                           jmp 0x4003082	      1863	ldlang.c	FUNCTION_50	IF_4
0x400307d	      0xb800000000	                              mov eax, 0	      1863	ldlang.c	FUNCTION_50	IF_4
0x4003082	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	      1861	ldlang.c	FUNCTION_50	IF_4
0x4003089	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x4003090	        0x488b5070	            mov rdx, qword [rax + 0x70] 	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x4003094	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x400309b	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x40030a2	          0x4889c6	                            mov rsi, rax	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x40030a5	      0xbf00000000	                              mov edi, 0	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x40030aa	      0xe800000000	                          call 0x40030af	      1864	ldlang.c	FUNCTION_50	IF_4	CALL_7
0x40030af	            0xeb19	                           jmp 0x40030ca	      1857	ldlang.c	FUNCTION_50	IF_4
0x40030b1	      0xb900000000	                              mov ecx, 0	      1868	ldlang.c	FUNCTION_50	ELSE_1	CALL_8
0x40030b6	      0xba00000000	                              mov edx, 0	      1868	ldlang.c	FUNCTION_50	ELSE_1	CALL_8
0x40030bb	      0xbe00000000	                              mov esi, 0	      1868	ldlang.c	FUNCTION_50	ELSE_1	CALL_8
0x40030c0	      0xbf00000000	                              mov edi, 0	      1868	ldlang.c	FUNCTION_50	ELSE_1	CALL_8
0x40030c5	      0xe800000000	                          call 0x40030ca	      1868	ldlang.c	FUNCTION_50	ELSE_1	CALL_8
0x40030ca	    0x4883bd20ffff	               cmp qword [rbp - 0xe0], 0	      1872	ldlang.c	FUNCTION_50	IF_5
0x40030d2	            0x7405	                            je 0x40030d9	      1872	ldlang.c	FUNCTION_50	IF_5
0x40030d4	      0xe800000000	                          call 0x40030d9	      1873	ldlang.c	FUNCTION_50	CALL_9
0x40030d9	    0x4883bd20ffff	               cmp qword [rbp - 0xe0], 0	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030e1	     0xf847c040000	                            je 0x4003563	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030e7	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030ee	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030f2	          0x4885c0	                           test rax, rax	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030f5	     0xf8468040000	                            je 0x4003563	      1875	ldlang.c	FUNCTION_50	IF_6
0x40030fb	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      1879	ldlang.c	FUNCTION_50	IF_6
0x4003102	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1879	ldlang.c	FUNCTION_50	IF_6
0x4003106	    0x48898568ffff	             mov qword [rbp - 0x98], rax	      1879	ldlang.c	FUNCTION_50	IF_6
0x400310d	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1883	ldlang.c	FUNCTION_50	IF_6	IF_7
0x4003114	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1883	ldlang.c	FUNCTION_50	IF_6	IF_7
0x4003118	          0x4885c0	                           test rax, rax	      1883	ldlang.c	FUNCTION_50	IF_6	IF_7
0x400311b	            0x7572	                           jne 0x400318f	      1883	ldlang.c	FUNCTION_50	IF_6	IF_7
0x400311d	    0x488b05000000	            mov rax, qword [0x04003124] 	      1884	ldlang.c	FUNCTION_50	IF_6	IF_7
0x4003124	    0x483b8520ffff	             cmp rax, qword [rbp - 0xe0]	      1884	ldlang.c	FUNCTION_50	IF_6	IF_7
0x400312b	            0x7462	                            je 0x400318f	      1884	ldlang.c	FUNCTION_50	IF_6	IF_7
0x400312d	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1887	ldlang.c	FUNCTION_50	IF_6	IF_7
0x4003134	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1887	ldlang.c	FUNCTION_50	IF_6	IF_7
0x4003138	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      1887	ldlang.c	FUNCTION_50	IF_6	IF_7
0x400313f	    0x4883bd40ffff	               cmp qword [rbp - 0xc0], 0	      1893	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_8
0x4003147	            0x7516	                           jne 0x400315f	      1893	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_8
0x4003149	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1894	ldlang.c	FUNCTION_50	IF_6	IF_7	CALL_10
0x4003150	          0x4889c7	                            mov rdi, rax	      1894	ldlang.c	FUNCTION_50	IF_6	IF_7	CALL_10
0x4003153	      0xe8f5fbffff	           call sym.output_prev_sec_find	      1894	ldlang.c	FUNCTION_50	IF_6	IF_7	CALL_10
0x4003158	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      1894	ldlang.c	FUNCTION_50	IF_6	IF_7	CALL_10
0x400315f	    0x4883bd40ffff	               cmp qword [rbp - 0xc0], 0	      1896	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003167	            0x7426	                            je 0x400318f	      1896	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003169	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1896	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003170	    0x483b8568ffff	             cmp rax, qword [rbp - 0x98]	      1896	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003177	            0x7416	                            je 0x400318f	      1896	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003179	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      1897	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003180	        0x488d5010	                   lea rdx, [rax + 0x10]	      1897	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x4003184	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1897	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x400318b	        0x48895018	             mov qword [rax + 0x18], rdx	      1897	ldlang.c	FUNCTION_50	IF_6	IF_7	IF_9
0x400318f	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1900	ldlang.c	FUNCTION_50	IF_6	IF_10
0x4003196	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1900	ldlang.c	FUNCTION_50	IF_6	IF_10
0x400319a	          0x4885c0	                           test rax, rax	      1900	ldlang.c	FUNCTION_50	IF_6	IF_10
0x400319d	            0x7519	                           jne 0x40031b8	      1900	ldlang.c	FUNCTION_50	IF_6	IF_10
0x400319f	    0x488b05000000	            mov rax, qword [0x040031a6] 	      1901	ldlang.c	FUNCTION_50	IF_6	IF_10
0x40031a6	    0x488d90900000	                   lea rdx, [rax + 0x90]	      1901	ldlang.c	FUNCTION_50	IF_6	IF_10
0x40031ad	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1901	ldlang.c	FUNCTION_50	IF_6	IF_10
0x40031b4	        0x48895018	             mov qword [rax + 0x18], rdx	      1901	ldlang.c	FUNCTION_50	IF_6	IF_10
0x40031b8	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1903	ldlang.c	FUNCTION_50	IF_6
0x40031bf	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1903	ldlang.c	FUNCTION_50	IF_6
0x40031c3	          0x488b00	                    mov rax, qword [rax]	      1903	ldlang.c	FUNCTION_50	IF_6
0x40031c6	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      1903	ldlang.c	FUNCTION_50	IF_6
0x40031cd	    0x4883bd70ffff	               cmp qword [rbp - 0x90], 0	      1905	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031d5	     0xf8503010000	                           jne 0x40032de	      1905	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031db	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031e2	    0x48898578ffff	             mov qword [rbp - 0x88], rax	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031e9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031f0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031f4	        0x48894580	             mov qword [rbp - 0x80], rax	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031f8	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40031ff	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003203	        0x48894588	             mov qword [rbp - 0x78], rax	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003207	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400320c	            0x740e	                            je 0x400321c	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400320e	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003212	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003216	        0x48895010	             mov qword [rax + 0x10], rdx	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400321a	            0xeb12	                           jmp 0x400322e	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400321c	    0x488b05000000	            mov rax, qword [0x04003223] 	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003223	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003227	    0x488990900000	             mov qword [rax + 0x90], rdx	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400322e	      0x48837d8000	               cmp qword [rbp - 0x80], 0	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003233	            0x740e	                            je 0x4003243	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003235	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003239	        0x488b5588	             mov rdx, qword [rbp - 0x78]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400323d	        0x48895018	             mov qword [rax + 0x18], rdx	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003241	            0xeb12	                           jmp 0x4003255	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003243	    0x488b05000000	            mov rax, qword [0x0400324a] 	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400324a	        0x488b5588	             mov rdx, qword [rbp - 0x78]	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400324e	    0x488990980000	             mov qword [rax + 0x98], rdx	      1910	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003255	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400325c	        0x48894590	             mov qword [rbp - 0x70], rax	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003260	    0x488b05000000	            mov rax, qword [0x04003267] 	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003267	        0x48894598	             mov qword [rbp - 0x68], rax	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400326b	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400326f	    0x48c740100000	               mov qword [rax + 0x10], 0	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003277	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400327b	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003282	          0x4885c0	                           test rax, rax	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003285	            0x7428	                            je 0x40032af	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003287	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400328b	    0x488b90980000	            mov rdx, qword [rax + 0x98] 	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003292	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x4003296	        0x48895018	             mov qword [rax + 0x18], rdx	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400329a	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x400329e	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032a5	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032a9	        0x48895010	             mov qword [rax + 0x10], rdx	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032ad	            0xeb1b	                           jmp 0x40032ca	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032af	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032b3	    0x48c740180000	               mov qword [rax + 0x18], 0	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032bb	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032bf	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032c3	    0x488990900000	             mov qword [rax + 0x90], rdx	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032ca	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032ce	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032d2	    0x488990980000	             mov qword [rax + 0x98], rdx	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032d9	      0xe90a010000	                           jmp 0x40033e8	      1913	ldlang.c	FUNCTION_50	IF_6	IF_11
0x40032de	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40032e5	    0x483b8568ffff	             cmp rax, qword [rbp - 0x98]	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40032ec	     0xf84f6000000	                            je 0x40033e8	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40032f2	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40032f9	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40032fd	    0x483b8568ffff	             cmp rax, qword [rbp - 0x98]	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003304	     0xf84de000000	                            je 0x40033e8	      1915	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400330a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003311	        0x488945a0	             mov qword [rbp - 0x60], rax	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003315	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003319	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400331d	        0x488945a8	             mov qword [rbp - 0x58], rax	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003321	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003325	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003329	        0x488945b0	             mov qword [rbp - 0x50], rax	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400332d	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003332	            0x740e	                            je 0x4003342	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003334	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003338	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400333c	        0x48895010	             mov qword [rax + 0x10], rdx	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003340	            0xeb12	                           jmp 0x4003354	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003342	    0x488b05000000	            mov rax, qword [0x04003349] 	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003349	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400334d	    0x488990900000	             mov qword [rax + 0x90], rdx	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003354	      0x48837da800	               cmp qword [rbp - 0x58], 0	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003359	            0x740e	                            je 0x4003369	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400335b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400335f	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003363	        0x48895018	             mov qword [rax + 0x18], rdx	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003367	            0xeb12	                           jmp 0x400337b	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003369	    0x488b05000000	            mov rax, qword [0x04003370] 	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003370	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003374	    0x488990980000	             mov qword [rax + 0x98], rdx	      1918	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400337b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003382	        0x488945b8	             mov qword [rbp - 0x48], rax	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003386	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400338d	        0x488945c0	             mov qword [rbp - 0x40], rax	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003391	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003395	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x4003399	        0x488945c8	             mov qword [rbp - 0x38], rax	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x400339d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033a1	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033a5	        0x48895018	             mov qword [rax + 0x18], rdx	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033a9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033ad	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033b1	        0x48895010	             mov qword [rax + 0x10], rdx	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033b5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033b9	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033bd	        0x48895018	             mov qword [rax + 0x18], rdx	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033c1	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033c6	            0x740e	                            je 0x40033d6	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033c8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033cc	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033d0	        0x48895010	             mov qword [rax + 0x10], rdx	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033d4	            0xeb12	                           jmp 0x40033e8	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033d6	    0x488b05000000	            mov rax, qword [0x040033dd] 	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033dd	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033e1	    0x488990900000	             mov qword [rax + 0x90], rdx	      1921	ldlang.c	FUNCTION_50	IF_6	ELSE_2	IF_12
0x40033e8	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1926	ldlang.c	FUNCTION_50	IF_6
0x40033ef	        0x488d5010	                   lea rdx, [rax + 0x10]	      1926	ldlang.c	FUNCTION_50	IF_6
0x40033f3	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1926	ldlang.c	FUNCTION_50	IF_6
0x40033fa	        0x48895018	             mov qword [rax + 0x18], rdx	      1926	ldlang.c	FUNCTION_50	IF_6
0x40033fe	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1937	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003402	          0x4885c0	                           test rax, rax	      1937	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003405	     0xf8458010000	                            je 0x4003563	      1937	ldlang.c	FUNCTION_50	IF_6	IF_13
0x400340b	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1941	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003412	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1941	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003416	          0x4885c0	                           test rax, rax	      1941	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003419	            0x7544	                           jne 0x400345f	      1941	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x400341b	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1943	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14	CALL_11
0x4003422	          0x4889c7	                            mov rdi, rax	      1943	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14	CALL_11
0x4003425	      0xe88df9ffff	                call sym.insert_os_after	      1943	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14	CALL_11
0x400342a	        0x488945d0	             mov qword [rbp - 0x30], rax	      1943	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14	CALL_11
0x400342e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1945	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003432	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1945	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003436	          0x488b12	                    mov rdx, qword [rdx]	      1945	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003439	          0x488910	                    mov qword [rax], rdx	      1945	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x400343c	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1946	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003440	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1946	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003444	          0x488910	                    mov qword [rax], rdx	      1946	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003447	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1948	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x400344e	        0x488d5020	                   lea rdx, [rax + 0x20]	      1948	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003452	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1948	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x4003459	        0x48895028	             mov qword [rax + 0x28], rdx	      1948	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x400345d	            0xeb27	                           jmp 0x4003486	      1948	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_14
0x400345f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1953	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x4003463	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	      1953	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x400346a	        0x488b5220	            mov rdx, qword [rdx + 0x20] 	      1953	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x400346e	          0x488b12	                    mov rdx, qword [rdx]	      1953	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x4003471	          0x488910	                    mov qword [rax], rdx	      1953	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x4003474	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1954	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x400347b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1954	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x400347f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1954	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x4003483	          0x488910	                    mov qword [rax], rdx	      1954	ldlang.c	FUNCTION_50	IF_6	IF_13	ELSE_3
0x4003486	    0x488b05000000	            mov rax, qword [0x0400348d] 	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x400348d	        0x488b4008	                mov rax, qword [rax + 8]	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x4003491	          0x488b10	                    mov rdx, qword [rax]	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x4003494	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x4003498	          0x4839c2	                            cmp rdx, rax	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x400349b	            0x750f	                           jne 0x40034ac	      1959	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x400349d	    0x488b05000000	            mov rax, qword [0x040034a4] 	      1960	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x40034a4	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1960	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x40034a8	        0x48895008	                mov qword [rax + 8], rdx	      1960	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_15
0x40034ac	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1963	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034b0	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1963	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034b7	        0x48895020	             mov qword [rax + 0x20], rdx	      1963	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034bb	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1966	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034c2	          0x488b00	                    mov rax, qword [rax]	      1966	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034c5	        0x488945d8	             mov qword [rbp - 0x28], rax	      1966	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034c9	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1967	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034d0	    0x48c700000000	                      mov qword [rax], 0	      1967	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034d7	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1969	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034de	        0x488b4028	            mov rax, qword [rax + 0x28] 	      1969	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034e2	        0x488d50e0	                   lea rdx, [rax - 0x20]	      1968	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034e6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1968	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034ea	        0x48895028	             mov qword [rax + 0x28], rdx	      1968	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034ee	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1971	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034f5	        0x488b4028	            mov rax, qword [rax + 0x28] 	      1971	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034f9	          0x488b10	                    mov rdx, qword [rax]	      1971	ldlang.c	FUNCTION_50	IF_6	IF_13
0x40034fc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1971	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003500	        0x48895020	             mov qword [rax + 0x20], rdx	      1971	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003504	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1972	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x4003508	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1972	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x400350c	          0x4885c0	                           test rax, rax	      1972	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x400350f	            0x7410	                            je 0x4003521	      1972	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x4003511	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1973	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x4003515	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1973	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x4003519	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1973	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x400351d	        0x48895028	             mov qword [rax + 0x28], rdx	      1973	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_16
0x4003521	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1974	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003528	        0x488b4028	            mov rax, qword [rax + 0x28] 	      1974	ldlang.c	FUNCTION_50	IF_6	IF_13
0x400352c	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1974	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003530	          0x488910	                    mov qword [rax], rdx	      1974	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003533	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1975	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003537	        0x488d5020	                   lea rdx, [rax + 0x20]	      1975	ldlang.c	FUNCTION_50	IF_6	IF_13
0x400353b	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	      1975	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003542	        0x48895028	             mov qword [rax + 0x28], rdx	      1975	ldlang.c	FUNCTION_50	IF_6	IF_13
0x4003546	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1982	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x400354d	          0x488b00	                    mov rax, qword [rax]	      1982	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x4003550	          0x4885c0	                           test rax, rax	      1982	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x4003553	            0x750e	                           jne 0x4003563	      1982	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x4003555	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	      1984	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x400355c	    0x488905000000	            mov qword [0x04003563], rax 	      1984	ldlang.c	FUNCTION_50	IF_6	IF_13	IF_17
0x4003563	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      1987	ldlang.c	FUNCTION_50
0x400356a	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1988	ldlang.c	FUNCTION_50
0x400356e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1988	ldlang.c	FUNCTION_50
0x4003577	            0x7405	                            je 0x400357e	      1988	ldlang.c	FUNCTION_50
0x4003579	      0xe800000000	                          call 0x400357e	      1988	ldlang.c	FUNCTION_50
0x400357e	              0xc9	                                   leave	      1988	ldlang.c	FUNCTION_50
0x400357f	              0xc3	                                     ret	      1988	ldlang.c	FUNCTION_50
lang_for_each_statement_worker	functions,0:ELSE,0:FOR,1:CALL,6:IF,1:DO,0:WHILE,0:SWITCH,1	63
0x40018a6	              0x55	                                push rbp	       955	ldlang.c	FUNCTION_28
0x40018a7	          0x4889e5	                            mov rbp, rsp	       955	ldlang.c	FUNCTION_28
0x40018aa	        0x4883ec10	                           sub rsp, 0x10	       955	ldlang.c	FUNCTION_28
0x40018ae	        0x48897df8	                mov qword [rbp - 8], rdi	       955	ldlang.c	FUNCTION_28
0x40018b2	        0x488975f0	             mov qword [rbp - 0x10], rsi	       955	ldlang.c	FUNCTION_28
0x40018b6	      0xe9b7000000	                           jmp 0x4001972	       956	ldlang.c	FUNCTION_28	FOR_1
0x40018bb	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       958	ldlang.c	FUNCTION_28	FOR_1	CALL_1
0x40018bf	        0x488b45f8	                mov rax, qword [rbp - 8]	       958	ldlang.c	FUNCTION_28	FOR_1	CALL_1
0x40018c3	          0x4889d7	                            mov rdi, rdx	       958	ldlang.c	FUNCTION_28	FOR_1	CALL_1
0x40018c6	            0xffd0	                                call rax	       958	ldlang.c	FUNCTION_28	FOR_1	CALL_1
0x40018c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018cc	          0x8b4008	                mov eax, dword [rax + 8]	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018cf	          0x83f80f	                            cmp eax, 0xf	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018d2	            0x777e	                            ja 0x4001952	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018d4	            0x89c0	                            mov eax, eax	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018d6	    0x488b04c50000	                  mov rax, qword [rax*8]	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018de	            0xffe0	                                 jmp rax	       960	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018e0	    0x488b15000000	            mov rdx, qword [0x040018e7] 	       963	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_2
0x40018e7	        0x488b45f8	                mov rax, qword [rbp - 8]	       963	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_2
0x40018eb	          0x4889d6	                            mov rsi, rdx	       963	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_2
0x40018ee	          0x4889c7	                            mov rdi, rax	       963	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_2
0x40018f1	      0xe800000000	                          call 0x40018f6	       963	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_2
0x40018f6	            0xeb6f	                           jmp 0x4001967	       964	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x40018f8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       966	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x40018fc	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	       966	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x4001902	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       966	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x4001905	            0x745f	                            je 0x4001966	       966	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x4001907	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       968	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x400190b	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       968	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1
0x400190f	        0x488b45f8	                mov rax, qword [rbp - 8]	       967	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1	CALL_3
0x4001913	          0x4889d6	                            mov rsi, rdx	       967	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1	CALL_3
0x4001916	          0x4889c7	                            mov rdi, rax	       967	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1	CALL_3
0x4001919	      0xe800000000	                          call 0x400191e	       967	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	IF_1	CALL_3
0x400191e	            0xeb46	                           jmp 0x4001966	       969	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001920	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       972	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001924	        0x488b5030	            mov rdx, qword [rax + 0x30] 	       972	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001928	        0x488b45f8	                mov rax, qword [rbp - 8]	       971	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_4
0x400192c	          0x4889d6	                            mov rsi, rdx	       971	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_4
0x400192f	          0x4889c7	                            mov rdi, rax	       971	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_4
0x4001932	      0xe800000000	                          call 0x4001937	       971	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_4
0x4001937	            0xeb2e	                           jmp 0x4001967	       973	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001939	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       976	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x400193d	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       976	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001941	        0x488b45f8	                mov rax, qword [rbp - 8]	       975	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_5
0x4001945	          0x4889d6	                            mov rsi, rdx	       975	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_5
0x4001948	          0x4889c7	                            mov rdi, rax	       975	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_5
0x400194b	      0xe800000000	                          call 0x4001950	       975	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_5
0x4001950	            0xeb15	                           jmp 0x4001967	       977	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001952	      0xbee0030000	                          mov esi, 0x3e0	       992	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_6
0x4001957	      0xbf00000000	                              mov edi, 0	       992	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_6
0x400195c	      0xe800000000	                          call 0x4001961	       992	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1	CALL_6
0x4001961	            0xeb04	                           jmp 0x4001967	       993	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001963	              0x90	                                     nop	       990	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001964	            0xeb01	                           jmp 0x4001967	       990	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001966	              0x90	                                     nop	       969	ldlang.c	FUNCTION_28	FOR_1	SWITCH_1
0x4001967	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       956	ldlang.c	FUNCTION_28	FOR_1
0x400196b	          0x488b00	                    mov rax, qword [rax]	       956	ldlang.c	FUNCTION_28	FOR_1
0x400196e	        0x488945f0	             mov qword [rbp - 0x10], rax	       956	ldlang.c	FUNCTION_28	FOR_1
0x4001972	      0x48837df000	               cmp qword [rbp - 0x10], 0	       956	ldlang.c	FUNCTION_28	FOR_1
0x4001977	     0xf853effffff	                           jne 0x40018bb	       956	ldlang.c	FUNCTION_28	FOR_1
0x400197d	              0x90	                                     nop	       996	ldlang.c	FUNCTION_28
0x400197e	              0xc9	                                   leave	       996	ldlang.c	FUNCTION_28
0x400197f	              0xc3	                                     ret	       996	ldlang.c	FUNCTION_28
output_section_callback_tree_to_list	functions,0:ELSE,0:FOR,0:CALL,4:IF,2:DO,0:WHILE,0:SWITCH,0	43
0x4000bc2	              0x55	                                push rbp	       549	ldlang.c	FUNCTION_17
0x4000bc3	          0x4889e5	                            mov rbp, rsp	       549	ldlang.c	FUNCTION_17
0x4000bc6	        0x4883ec20	                           sub rsp, 0x20	       549	ldlang.c	FUNCTION_17
0x4000bca	        0x48897df8	                mov qword [rbp - 8], rdi	       549	ldlang.c	FUNCTION_17
0x4000bce	        0x488975f0	             mov qword [rbp - 0x10], rsi	       549	ldlang.c	FUNCTION_17
0x4000bd2	        0x488955e8	             mov qword [rbp - 0x18], rdx	       549	ldlang.c	FUNCTION_17
0x4000bd6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       550	ldlang.c	FUNCTION_17	IF_1
0x4000bda	        0x488b4008	                mov rax, qword [rax + 8]	       550	ldlang.c	FUNCTION_17	IF_1
0x4000bde	          0x4885c0	                           test rax, rax	       550	ldlang.c	FUNCTION_17	IF_1
0x4000be1	            0x741b	                            je 0x4000bfe	       550	ldlang.c	FUNCTION_17	IF_1
0x4000be3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000be7	        0x488b4808	                mov rcx, qword [rax + 8]	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000beb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000bef	        0x488b45f8	                mov rax, qword [rbp - 8]	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000bf3	          0x4889ce	                            mov rsi, rcx	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000bf6	          0x4889c7	                            mov rdi, rax	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000bf9	      0xe8c4ffffff	call sym.output_section_callback_tree_to_list	       551	ldlang.c	FUNCTION_17	CALL_1
0x4000bfe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c02	          0x488b00	                    mov rax, qword [rax]	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c05	        0x488b55f8	                mov rdx, qword [rbp - 8]	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c09	        0x488d7a30	                   lea rdi, [rdx + 0x30]	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c0d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c11	          0x4889d1	                            mov rcx, rdx	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c14	      0xba00000000	                              mov edx, 0	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c19	          0x4889c6	                            mov rsi, rax	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c1c	      0xe800000000	                          call 0x4000c21	       553	ldlang.c	FUNCTION_17	CALL_2
0x4000c21	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       556	ldlang.c	FUNCTION_17	IF_2
0x4000c25	        0x488b4010	            mov rax, qword [rax + 0x10] 	       556	ldlang.c	FUNCTION_17	IF_2
0x4000c29	          0x4885c0	                           test rax, rax	       556	ldlang.c	FUNCTION_17	IF_2
0x4000c2c	            0x741b	                            je 0x4000c49	       556	ldlang.c	FUNCTION_17	IF_2
0x4000c2e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c32	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c36	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c3a	        0x488b45f8	                mov rax, qword [rbp - 8]	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c3e	          0x4889ce	                            mov rsi, rcx	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c41	          0x4889c7	                            mov rdi, rax	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c44	      0xe879ffffff	call sym.output_section_callback_tree_to_list	       557	ldlang.c	FUNCTION_17	CALL_3
0x4000c49	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       559	ldlang.c	FUNCTION_17	CALL_4
0x4000c4d	          0x4889c7	                            mov rdi, rax	       559	ldlang.c	FUNCTION_17	CALL_4
0x4000c50	      0xe800000000	                          call 0x4000c55	       559	ldlang.c	FUNCTION_17	CALL_4
0x4000c55	              0x90	                                     nop	       560	ldlang.c	FUNCTION_17
0x4000c56	              0xc9	                                   leave	       560	ldlang.c	FUNCTION_17
0x4000c57	              0xc3	                                     ret	       560	ldlang.c	FUNCTION_17
sort_sections_by_lma	functions,0:ELSE,3:FOR,0:CALL,0:IF,4:DO,0:WHILE,0:SWITCH,0	45
0x4008563	              0x55	                                push rbp	      4742	ldlang.c	FUNCTION_110
0x4008564	          0x4889e5	                            mov rbp, rsp	      4742	ldlang.c	FUNCTION_110
0x4008567	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4742	ldlang.c	FUNCTION_110
0x400856b	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4742	ldlang.c	FUNCTION_110
0x400856f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4743	ldlang.c	FUNCTION_110
0x4008573	          0x488b00	                    mov rax, qword [rax]	      4743	ldlang.c	FUNCTION_110
0x4008576	        0x488945f0	             mov qword [rbp - 0x10], rax	      4743	ldlang.c	FUNCTION_110
0x400857a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4744	ldlang.c	FUNCTION_110
0x400857e	          0x488b00	                    mov rax, qword [rax]	      4744	ldlang.c	FUNCTION_110
0x4008581	        0x488945f8	                mov qword [rbp - 8], rax	      4744	ldlang.c	FUNCTION_110
0x4008585	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4746	ldlang.c	FUNCTION_110	IF_1
0x4008589	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4746	ldlang.c	FUNCTION_110	IF_1
0x400858d	        0x488b45f8	                mov rax, qword [rbp - 8]	      4746	ldlang.c	FUNCTION_110	IF_1
0x4008591	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4746	ldlang.c	FUNCTION_110	IF_1
0x4008595	          0x4839c2	                            cmp rdx, rax	      4746	ldlang.c	FUNCTION_110	IF_1
0x4008598	            0x7307	                           jae 0x40085a1	      4746	ldlang.c	FUNCTION_110	IF_1
0x400859a	      0xb8ffffffff	                     mov eax, 0xffffffff	      4747	ldlang.c	FUNCTION_110	IF_1
0x400859f	            0xeb53	                           jmp 0x40085f4	      4747	ldlang.c	FUNCTION_110	IF_1
0x40085a1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085a5	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085a9	        0x488b45f8	                mov rax, qword [rbp - 8]	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085ad	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085b1	          0x4839c2	                            cmp rdx, rax	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085b4	            0x7607	                           jbe 0x40085bd	      4748	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085b6	      0xb801000000	                              mov eax, 1	      4749	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085bb	            0xeb37	                           jmp 0x40085f4	      4749	ldlang.c	FUNCTION_110	ELSE_1	IF_2
0x40085bd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085c1	          0x8b5008	                mov edx, dword [rax + 8]	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085c4	        0x488b45f8	                mov rax, qword [rbp - 8]	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085c8	          0x8b4008	                mov eax, dword [rax + 8]	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085cb	            0x39c2	                            cmp edx, eax	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085cd	            0x7307	                           jae 0x40085d6	      4750	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085cf	      0xb8ffffffff	                     mov eax, 0xffffffff	      4751	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085d4	            0xeb1e	                           jmp 0x40085f4	      4751	ldlang.c	FUNCTION_110	ELSE_2	IF_3
0x40085d6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085da	          0x8b5008	                mov edx, dword [rax + 8]	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085dd	        0x488b45f8	                mov rax, qword [rbp - 8]	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085e1	          0x8b4008	                mov eax, dword [rax + 8]	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085e4	            0x39c2	                            cmp edx, eax	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085e6	            0x7607	                           jbe 0x40085ef	      4752	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085e8	      0xb801000000	                              mov eax, 1	      4753	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085ed	            0xeb05	                           jmp 0x40085f4	      4753	ldlang.c	FUNCTION_110	ELSE_3	IF_4
0x40085ef	      0xb800000000	                              mov eax, 0	      4755	ldlang.c	FUNCTION_110
0x40085f4	              0x5d	                                 pop rbp	      4756	ldlang.c	FUNCTION_110
0x40085f5	              0xc3	                                     ret	      4756	ldlang.c	FUNCTION_110
lang_common	functions,0:ELSE,2:FOR,2:CALL,6:IF,4:DO,0:WHILE,0:SWITCH,0	78
0x400b776	              0x55	                                push rbp	      6347	ldlang.c	FUNCTION_136
0x400b777	          0x4889e5	                            mov rbp, rsp	      6347	ldlang.c	FUNCTION_136
0x400b77a	        0x4883ec10	                           sub rsp, 0x10	      6347	ldlang.c	FUNCTION_136
0x400b77e	    0x64488b042528	                mov rax, qword fs:[0x28]	      6347	ldlang.c	FUNCTION_136
0x400b787	        0x488945f8	                mov qword [rbp - 8], rax	      6347	ldlang.c	FUNCTION_136
0x400b78b	            0x31c0	                            xor eax, eax	      6347	ldlang.c	FUNCTION_136
0x400b78d	     0xfb605000000	           movzx eax, byte [0x0400b794] 	      6348	ldlang.c	FUNCTION_136	IF_1
0x400b794	          0x83e020	                           and eax, 0x20	      6348	ldlang.c	FUNCTION_136	IF_1
0x400b797	            0x84c0	                             test al, al	      6348	ldlang.c	FUNCTION_136	IF_1
0x400b799	     0xf85f4000000	                           jne 0x400b893	      6348	ldlang.c	FUNCTION_136	IF_1
0x400b79f	     0xfb605000000	           movzx eax, byte [0x0400b7a6] 	      6350	ldlang.c	FUNCTION_136	IF_2	CALL_1
0x400b7a6	          0x83e003	                              and eax, 3	      6350	ldlang.c	FUNCTION_136	IF_2	CALL_1
0x400b7a9	            0x3c02	                               cmp al, 2	      6350	ldlang.c	FUNCTION_136	IF_2	CALL_1
0x400b7ab	            0x750e	                           jne 0x400b7bb	      6350	ldlang.c	FUNCTION_136	IF_2	CALL_1
0x400b7ad	    0x8b0500000000	            mov eax, dword [0x0400b7b3] 	      6351	ldlang.c	FUNCTION_136	IF_2
0x400b7b3	            0x85c0	                           test eax, eax	      6351	ldlang.c	FUNCTION_136	IF_2
0x400b7b5	     0xf84db000000	                            je 0x400b896	      6351	ldlang.c	FUNCTION_136	IF_2
0x400b7bb	    0x8b0500000000	            mov eax, dword [0x0400b7c1] 	      6354	ldlang.c	FUNCTION_136	IF_3
0x400b7c1	            0x85c0	                           test eax, eax	      6354	ldlang.c	FUNCTION_136	IF_3
0x400b7c3	            0x751e	                           jne 0x400b7e3	      6354	ldlang.c	FUNCTION_136	IF_3
0x400b7c5	    0x488b05000000	            mov rax, qword [0x0400b7cc] 	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7cc	      0xba00000000	                              mov edx, 0	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7d1	      0xbe00000000	                              mov esi, 0	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7d6	          0x4889c7	                            mov rdi, rax	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7d9	      0xe800000000	                          call 0x400b7de	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7de	      0xe9b4000000	                           jmp 0x400b897	      6355	ldlang.c	FUNCTION_136	CALL_2
0x400b7e3	    0x8b0500000000	            mov eax, dword [0x0400b7e9] 	      6360	ldlang.c	FUNCTION_136	ELSE_1	IF_4
0x400b7e9	          0x83f802	                              cmp eax, 2	      6360	ldlang.c	FUNCTION_136	ELSE_1	IF_4
0x400b7ec	            0x7552	                           jne 0x400b840	      6360	ldlang.c	FUNCTION_136	ELSE_1	IF_4
0x400b7ee	    0xc745f4040000	                mov dword [rbp - 0xc], 4	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b7f5	            0xeb21	                           jmp 0x400b818	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b7f7	    0x488b05000000	            mov rax, qword [0x0400b7fe] 	      6363	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_3
0x400b7fe	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      6363	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_3
0x400b802	      0xbe00000000	                              mov esi, 0	      6363	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_3
0x400b807	          0x4889c7	                            mov rdi, rax	      6363	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_3
0x400b80a	      0xe800000000	                          call 0x400b80f	      6363	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_3
0x400b80f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b812	          0x83e801	                              sub eax, 1	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b815	          0x8945f4	              mov dword [rbp - 0xc], eax	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b818	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b81b	            0x85c0	                           test eax, eax	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b81d	            0x75d8	                           jne 0x400b7f7	      6362	ldlang.c	FUNCTION_136	ELSE_1	IF_4	FOR_1
0x400b81f	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      6365	ldlang.c	FUNCTION_136	ELSE_1	IF_4
0x400b826	    0x488b05000000	            mov rax, qword [0x0400b82d] 	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b82d	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b831	      0xbe00000000	                              mov esi, 0	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b836	          0x4889c7	                            mov rdi, rax	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b839	      0xe800000000	                          call 0x400b83e	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b83e	            0xeb57	                           jmp 0x400b897	      6366	ldlang.c	FUNCTION_136	ELSE_1	IF_4	CALL_4
0x400b840	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b847	            0xeb21	                           jmp 0x400b86a	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b849	    0x488b05000000	            mov rax, qword [0x0400b850] 	      6371	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_5
0x400b850	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      6371	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_5
0x400b854	      0xbe00000000	                              mov esi, 0	      6371	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_5
0x400b859	          0x4889c7	                            mov rdi, rax	      6371	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_5
0x400b85c	      0xe800000000	                          call 0x400b861	      6371	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_5
0x400b861	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b864	          0x83c001	                              add eax, 1	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b867	          0x8945f4	              mov dword [rbp - 0xc], eax	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b86a	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b86d	          0x83f804	                              cmp eax, 4	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b870	            0x76d7	                           jbe 0x400b849	      6370	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	FOR_2
0x400b872	    0xc745f4ffffff	      mov dword [rbp - 0xc], 0xffffffff 	      6373	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2
0x400b879	    0x488b05000000	            mov rax, qword [0x0400b880] 	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b880	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b884	      0xbe00000000	                              mov esi, 0	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b889	          0x4889c7	                            mov rdi, rax	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b88c	      0xe800000000	                          call 0x400b891	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b891	            0xeb04	                           jmp 0x400b897	      6374	ldlang.c	FUNCTION_136	ELSE_1	ELSE_2	CALL_6
0x400b893	              0x90	                                     nop	      6349	ldlang.c	FUNCTION_136	IF_1
0x400b894	            0xeb01	                           jmp 0x400b897	      6349	ldlang.c	FUNCTION_136	IF_1
0x400b896	              0x90	                                     nop	      6352	ldlang.c	FUNCTION_136	IF_2
0x400b897	        0x488b45f8	                mov rax, qword [rbp - 8]	      6377	ldlang.c	FUNCTION_136
0x400b89b	    0x644833042528	                xor rax, qword fs:[0x28]	      6377	ldlang.c	FUNCTION_136
0x400b8a4	            0x7405	                            je 0x400b8ab	      6377	ldlang.c	FUNCTION_136
0x400b8a6	      0xe800000000	                          call 0x400b8ab	      6377	ldlang.c	FUNCTION_136
0x400b8ab	              0xc9	                                   leave	      6377	ldlang.c	FUNCTION_136
0x400b8ac	              0xc3	                                     ret	      6377	ldlang.c	FUNCTION_136
walk_wild	functions,3:ELSE,3:FOR,0:CALL,3:IF,4:DO,0:WHILE,0:SWITCH,0	100
0x4001731	              0x55	                                push rbp	       909	ldlang.c	FUNCTION_27
0x4001732	          0x4889e5	                            mov rbp, rsp	       909	ldlang.c	FUNCTION_27
0x4001735	        0x4883ec50	                           sub rsp, 0x50	       909	ldlang.c	FUNCTION_27
0x4001739	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       909	ldlang.c	FUNCTION_27
0x400173d	        0x488975c0	             mov qword [rbp - 0x40], rsi	       909	ldlang.c	FUNCTION_27
0x4001741	        0x488955b8	             mov qword [rbp - 0x48], rdx	       909	ldlang.c	FUNCTION_27
0x4001745	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       910	ldlang.c	FUNCTION_27
0x4001749	        0x488b4010	            mov rax, qword [rax + 0x10] 	       910	ldlang.c	FUNCTION_27
0x400174d	        0x488945e8	             mov qword [rbp - 0x18], rax	       910	ldlang.c	FUNCTION_27
0x4001751	      0x48837de800	               cmp qword [rbp - 0x18], 0	       913	ldlang.c	FUNCTION_27	IF_1
0x4001756	            0x753d	                           jne 0x4001795	       913	ldlang.c	FUNCTION_27	IF_1
0x4001758	    0x488b05000000	            mov rax, qword [0x0400175f] 	       916	ldlang.c	FUNCTION_27	IF_1
0x400175f	        0x488945d0	             mov qword [rbp - 0x30], rax	       916	ldlang.c	FUNCTION_27	IF_1
0x4001763	            0xeb24	                           jmp 0x4001789	       916	ldlang.c	FUNCTION_27	IF_1
0x4001765	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x4001769	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x400176d	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x4001771	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x4001775	          0x4889c7	                            mov rdi, rax	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x4001778	      0xe8ccfeffff	                 call sym.walk_wild_file	       918	ldlang.c	FUNCTION_27	IF_1	FUNCTION_1	CALL_1
0x400177d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       916	ldlang.c	FUNCTION_27	IF_1
0x4001781	        0x488b4030	            mov rax, qword [rax + 0x30] 	       916	ldlang.c	FUNCTION_27	IF_1
0x4001785	        0x488945d0	             mov qword [rbp - 0x30], rax	       916	ldlang.c	FUNCTION_27	IF_1
0x4001789	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       916	ldlang.c	FUNCTION_27	IF_1
0x400178e	            0x75d5	                           jne 0x4001765	       916	ldlang.c	FUNCTION_27	IF_1
0x4001790	      0xe90e010000	                           jmp 0x40018a3	       946	ldlang.c	FUNCTION_27
0x4001795	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x4001799	          0x4889c7	                            mov rdi, rax	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x400179c	      0xe869eaffff	                   call sym.archive_path	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x40017a1	        0x488945f0	             mov qword [rbp - 0x10], rax	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x40017a5	      0x48837df000	               cmp qword [rbp - 0x10], 0	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x40017aa	            0x7458	                            je 0x4001804	       921	ldlang.c	FUNCTION_27	ELSE_1	IF_2	CALL_1
0x40017ac	    0x488b05000000	            mov rax, qword [0x040017b3] 	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017b3	        0x488945d8	             mov qword [rbp - 0x28], rax	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017b7	            0xeb3f	                           jmp 0x40017f8	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017b9	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017bd	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017c1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017c5	          0x4889ce	                            mov rsi, rcx	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017c8	          0x4889c7	                            mov rdi, rax	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017cb	      0xe881eaffff	call sym.input_statement_is_archive_path	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017d0	            0x85c0	                           test eax, eax	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017d2	            0x7418	                            je 0x40017ec	       925	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	IF_1	CALL_1
0x40017d4	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017d8	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017dc	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017e0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017e4	          0x4889c7	                            mov rdi, rax	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017e7	      0xe85dfeffff	                 call sym.walk_wild_file	       926	ldlang.c	FUNCTION_27	ELSE_1	IF_2	FUNCTION_2	CALL_2
0x40017ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017f0	        0x488b4030	            mov rax, qword [rax + 0x30] 	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017f4	        0x488945d8	             mov qword [rbp - 0x28], rax	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017f8	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017fd	            0x75ba	                           jne 0x40017b9	       923	ldlang.c	FUNCTION_27	ELSE_1	IF_2
0x40017ff	      0xe99f000000	                           jmp 0x40018a3	       946	ldlang.c	FUNCTION_27
0x4001804	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001808	      0xbe00000000	                              mov esi, 0	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x400180d	          0x4889c7	                            mov rdi, rax	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001810	      0xe800000000	                          call 0x4001815	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001815	          0x4885c0	                           test rax, rax	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001818	            0x745a	                            je 0x4001874	       929	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x400181a	    0x488b05000000	            mov rax, qword [0x04001821] 	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001821	        0x488945e0	             mov qword [rbp - 0x20], rax	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001825	            0xeb44	                           jmp 0x400186b	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001827	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x400182b	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x400182f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x4001833	      0xba00000000	                              mov edx, 0	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x4001838	          0x4889ce	                            mov rsi, rcx	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x400183b	          0x4889c7	                            mov rdi, rax	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x400183e	      0xe800000000	                          call 0x4001843	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x4001843	            0x85c0	                           test eax, eax	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x4001845	            0x7518	                           jne 0x400185f	       933	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	IF_1	CALL_1
0x4001847	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x400184b	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x400184f	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x4001853	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x4001857	          0x4889c7	                            mov rdi, rax	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x400185a	      0xe8eafdffff	                 call sym.walk_wild_file	       934	ldlang.c	FUNCTION_27	ELSE_2	IF_3	FUNCTION_3	CALL_2
0x400185f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001863	        0x488b4030	            mov rax, qword [rax + 0x30] 	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001867	        0x488945e0	             mov qword [rbp - 0x20], rax	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x400186b	      0x48837de000	               cmp qword [rbp - 0x20], 0	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001870	            0x75b5	                           jne 0x4001827	       931	ldlang.c	FUNCTION_27	ELSE_2	IF_3
0x4001872	            0xeb2f	                           jmp 0x40018a3	       946	ldlang.c	FUNCTION_27
0x4001874	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       942	ldlang.c	FUNCTION_27	ELSE_3	CALL_2
0x4001878	          0x4889c7	                            mov rdi, rax	       942	ldlang.c	FUNCTION_27	ELSE_3	CALL_2
0x400187b	      0xe82e300000	                    call sym.lookup_name	       942	ldlang.c	FUNCTION_27	ELSE_3	CALL_2
0x4001880	        0x488945f8	                mov qword [rbp - 8], rax	       942	ldlang.c	FUNCTION_27	ELSE_3	CALL_2
0x4001884	      0x48837df800	                  cmp qword [rbp - 8], 0	       943	ldlang.c	FUNCTION_27	ELSE_3	IF_4
0x4001889	            0x7418	                            je 0x40018a3	       943	ldlang.c	FUNCTION_27	ELSE_3	IF_4
0x400188b	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x400188f	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x4001893	        0x488b75f8	                mov rsi, qword [rbp - 8]	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x4001897	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x400189b	          0x4889c7	                            mov rdi, rax	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x400189e	      0xe8a6fdffff	                 call sym.walk_wild_file	       944	ldlang.c	FUNCTION_27	ELSE_3	CALL_3
0x40018a3	              0x90	                                     nop	       946	ldlang.c	FUNCTION_27
0x40018a4	              0xc9	                                   leave	       946	ldlang.c	FUNCTION_27
0x40018a5	              0xc3	                                     ret	       946	ldlang.c	FUNCTION_27
unique_section_p	functions,0:ELSE,0:FOR,1:CALL,2:IF,2:DO,0:WHILE,0:SWITCH,0	62
0x400033d	              0x55	                                push rbp	       205	ldlang.c	FUNCTION_5
0x400033e	          0x4889e5	                            mov rbp, rsp	       205	ldlang.c	FUNCTION_5
0x4000341	        0x4883ec20	                           sub rsp, 0x20	       205	ldlang.c	FUNCTION_5
0x4000345	        0x48897de8	             mov qword [rbp - 0x18], rdi	       205	ldlang.c	FUNCTION_5
0x4000349	        0x488975e0	             mov qword [rbp - 0x20], rsi	       205	ldlang.c	FUNCTION_5
0x400034d	     0xfb605000000	           movzx eax, byte [0x04000354] 	       209	ldlang.c	FUNCTION_5	IF_1
0x4000354	          0x83e010	                           and eax, 0x10	       209	ldlang.c	FUNCTION_5	IF_1
0x4000357	            0x84c0	                             test al, al	       209	ldlang.c	FUNCTION_5	IF_1
0x4000359	            0x756f	                           jne 0x40003ca	       209	ldlang.c	FUNCTION_5	IF_1
0x400035b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       210	ldlang.c	FUNCTION_5	IF_1
0x400035f	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	       210	ldlang.c	FUNCTION_5	IF_1
0x4000366	          0x4885c0	                           test rax, rax	       210	ldlang.c	FUNCTION_5	IF_1
0x4000369	            0x745f	                            je 0x40003ca	       210	ldlang.c	FUNCTION_5	IF_1
0x400036b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       211	ldlang.c	FUNCTION_5	IF_1
0x400036f	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	       211	ldlang.c	FUNCTION_5	IF_1
0x4000376	        0x488b4008	                mov rax, qword [rax + 8]	       211	ldlang.c	FUNCTION_5	IF_1
0x400037a	    0x488b80080300	           mov rax, qword [rax + 0x308] 	       211	ldlang.c	FUNCTION_5	IF_1
0x4000381	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       211	ldlang.c	FUNCTION_5	IF_1
0x4000385	    0x488b92f00000	            mov rdx, qword [rdx + 0xf0] 	       211	ldlang.c	FUNCTION_5	IF_1
0x400038c	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       211	ldlang.c	FUNCTION_5	IF_1
0x4000390	          0x4889ce	                            mov rsi, rcx	       211	ldlang.c	FUNCTION_5	IF_1
0x4000393	          0x4889d7	                            mov rdi, rdx	       211	ldlang.c	FUNCTION_5	IF_1
0x4000396	            0xffd0	                                call rax	       211	ldlang.c	FUNCTION_5	IF_1
0x4000398	            0x85c0	                           test eax, eax	       211	ldlang.c	FUNCTION_5	IF_1
0x400039a	            0x742e	                            je 0x40003ca	       211	ldlang.c	FUNCTION_5	IF_1
0x400039c	      0x48837de000	               cmp qword [rbp - 0x20], 0	       212	ldlang.c	FUNCTION_5	IF_1
0x40003a1	            0x7419	                            je 0x40003bc	       212	ldlang.c	FUNCTION_5	IF_1
0x40003a3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       213	ldlang.c	FUNCTION_5	CALL_1
0x40003a7	        0x488b4030	            mov rax, qword [rax + 0x30] 	       213	ldlang.c	FUNCTION_5	CALL_1
0x40003ab	      0xbe00000000	                              mov esi, 0	       213	ldlang.c	FUNCTION_5	CALL_1
0x40003b0	          0x4889c7	                            mov rdi, rax	       213	ldlang.c	FUNCTION_5	CALL_1
0x40003b3	      0xe800000000	                          call 0x40003b8	       213	ldlang.c	FUNCTION_5	CALL_1
0x40003b8	            0x85c0	                           test eax, eax	       212	ldlang.c	FUNCTION_5	IF_1
0x40003ba	            0x7407	                            je 0x40003c3	       212	ldlang.c	FUNCTION_5	IF_1
0x40003bc	      0xb801000000	                              mov eax, 1	       212	ldlang.c	FUNCTION_5	IF_1
0x40003c1	            0xeb58	                           jmp 0x400041b	       212	ldlang.c	FUNCTION_5	IF_1
0x40003c3	      0xb800000000	                              mov eax, 0	       212	ldlang.c	FUNCTION_5	IF_1
0x40003c8	            0xeb51	                           jmp 0x400041b	       212	ldlang.c	FUNCTION_5	IF_1
0x40003ca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       215	ldlang.c	FUNCTION_5
0x40003ce	          0x488b00	                    mov rax, qword [rax]	       215	ldlang.c	FUNCTION_5
0x40003d1	        0x488945f8	                mov qword [rbp - 8], rax	       215	ldlang.c	FUNCTION_5
0x40003d5	    0x488b05000000	            mov rax, qword [0x040003dc] 	       216	ldlang.c	FUNCTION_5	FOR_1
0x40003dc	        0x488945f0	             mov qword [rbp - 0x10], rax	       216	ldlang.c	FUNCTION_5	FOR_1
0x40003e0	            0xeb2d	                           jmp 0x400040f	       216	ldlang.c	FUNCTION_5	FOR_1
0x40003e2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003e6	        0x488b4008	                mov rax, qword [rax + 8]	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003ea	        0x488b55f8	                mov rdx, qword [rbp - 8]	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003ee	          0x4889d6	                            mov rsi, rdx	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003f1	          0x4889c7	                            mov rdi, rax	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003f4	      0xe8bcfdffff	                     call sym.name_match	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003f9	            0x85c0	                           test eax, eax	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003fb	            0x7507	                           jne 0x4000404	       217	ldlang.c	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003fd	      0xb801000000	                              mov eax, 1	       218	ldlang.c	FUNCTION_5	FOR_1	IF_2
0x4000402	            0xeb17	                           jmp 0x400041b	       218	ldlang.c	FUNCTION_5	FOR_1	IF_2
0x4000404	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       216	ldlang.c	FUNCTION_5	FOR_1
0x4000408	          0x488b00	                    mov rax, qword [rax]	       216	ldlang.c	FUNCTION_5	FOR_1
0x400040b	        0x488945f0	             mov qword [rbp - 0x10], rax	       216	ldlang.c	FUNCTION_5	FOR_1
0x400040f	      0x48837df000	               cmp qword [rbp - 0x10], 0	       216	ldlang.c	FUNCTION_5	FOR_1
0x4000414	            0x75cc	                           jne 0x40003e2	       216	ldlang.c	FUNCTION_5	FOR_1
0x4000416	      0xb800000000	                              mov eax, 0	       220	ldlang.c	FUNCTION_5
0x400041b	              0xc9	                                   leave	       221	ldlang.c	FUNCTION_5
0x400041c	              0xc3	                                     ret	       221	ldlang.c	FUNCTION_5
check_input_sections	functions,0:ELSE,0:FOR,1:CALL,3:IF,3:DO,0:WHILE,0:SWITCH,1	61
0x40060f5	              0x55	                                push rbp	      3490	ldlang.c	FUNCTION_84
0x40060f6	          0x4889e5	                            mov rbp, rsp	      3490	ldlang.c	FUNCTION_84
0x40060f9	        0x4883ec10	                           sub rsp, 0x10	      3490	ldlang.c	FUNCTION_84
0x40060fd	        0x48897df8	                mov qword [rbp - 8], rdi	      3490	ldlang.c	FUNCTION_84
0x4006101	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3490	ldlang.c	FUNCTION_84
0x4006105	      0xe9a8000000	                           jmp 0x40061b2	      3491	ldlang.c	FUNCTION_84	FOR_1
0x400610a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x400610e	          0x8b4008	                mov eax, dword [rax + 8]	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006111	          0x83f80d	                            cmp eax, 0xd	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006114	            0x7462	                            je 0x4006178	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006116	          0x83f80f	                            cmp eax, 0xf	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006119	            0x7433	                            je 0x400614e	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x400611b	          0x83f804	                              cmp eax, 4	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x400611e	            0x7405	                            je 0x4006125	      3493	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006120	      0xe982000000	                           jmp 0x40061a7	      3514	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x4006125	        0x488b45f8	                mov rax, qword [rbp - 8]	      3496	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_1
0x4006129	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3496	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_1
0x400612d	      0xbe00000000	                              mov esi, 0	      3496	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_1
0x4006132	          0x4889c7	                            mov rdi, rax	      3496	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_1
0x4006135	      0xe8f7b5ffff	                      call sym.walk_wild	      3496	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_1
0x400613a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3498	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x400613e	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      3498	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x4006145	          0x83e004	                              and eax, 4	      3498	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x4006148	            0x84c0	                             test al, al	      3498	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x400614a	            0x7557	                           jne 0x40061a3	      3498	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x400614c	            0xeb72	                           jmp 0x40061c0	      3499	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_1
0x400614e	    0x488b05000000	            mov rax, qword [0x04006155] 	      3502	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_2
0x4006155	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3502	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_2
0x4006159	          0x4889d6	                            mov rsi, rdx	      3502	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_2
0x400615c	          0x4889c7	                            mov rdi, rax	      3502	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_2
0x400615f	      0xe891ffffff	           call sym.check_input_sections	      3502	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_2
0x4006164	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3504	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x4006168	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      3504	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x400616f	          0x83e004	                              and eax, 4	      3504	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x4006172	            0x84c0	                             test al, al	      3504	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x4006174	            0x7530	                           jne 0x40061a6	      3504	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x4006176	            0xeb48	                           jmp 0x40061c0	      3505	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_2
0x4006178	        0x488b45f8	                mov rax, qword [rbp - 8]	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x400617c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x4006180	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x4006184	          0x4889d6	                            mov rsi, rdx	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x4006187	          0x4889c7	                            mov rdi, rax	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x400618a	      0xe866ffffff	           call sym.check_input_sections	      3508	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	CALL_3
0x400618f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3510	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x4006193	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      3510	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x400619a	          0x83e004	                              and eax, 4	      3510	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x400619d	            0x84c0	                             test al, al	      3510	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x400619f	            0x741e	                            je 0x40061bf	      3510	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x40061a1	            0xeb04	                           jmp 0x40061a7	      3512	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x40061a3	              0x90	                                     nop	      3500	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x40061a4	            0xeb01	                           jmp 0x40061a7	      3500	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x40061a6	              0x90	                                     nop	      3506	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1
0x40061a7	        0x488b45f8	                mov rax, qword [rbp - 8]	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061ab	          0x488b00	                    mov rax, qword [rax]	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061ae	        0x488945f8	                mov qword [rbp - 8], rax	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061b2	      0x48837df800	                  cmp qword [rbp - 8], 0	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061b7	     0xf854dffffff	                           jne 0x400610a	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061bd	            0xeb01	                           jmp 0x40061c0	      3491	ldlang.c	FUNCTION_84	FOR_1
0x40061bf	              0x90	                                     nop	      3511	ldlang.c	FUNCTION_84	FOR_1	SWITCH_1	IF_3
0x40061c0	              0xc9	                                   leave	      3517	ldlang.c	FUNCTION_84
0x40061c1	              0xc3	                                     ret	      3517	ldlang.c	FUNCTION_84
lang_print_asneeded	functions,0:ELSE,0:FOR,1:CALL,8:IF,3:DO,0:WHILE,1:SWITCH,0	59
0x4003580	              0x55	                                push rbp	      1992	ldlang.c	FUNCTION_51
0x4003581	          0x4889e5	                            mov rbp, rsp	      1992	ldlang.c	FUNCTION_51
0x4003584	        0x4883ec10	                           sub rsp, 0x10	      1992	ldlang.c	FUNCTION_51
0x4003588	    0x488b05000000	            mov rax, qword [0x0400358f] 	      1995	ldlang.c	FUNCTION_51	IF_1
0x400358f	          0x4885c0	                           test rax, rax	      1995	ldlang.c	FUNCTION_51	IF_1
0x4003592	     0xf84d5000000	                            je 0x400366d	      1995	ldlang.c	FUNCTION_51	IF_1
0x4003598	      0xbf00000000	                              mov edi, 0	      1998	ldlang.c	FUNCTION_51	CALL_2
0x400359d	      0xe800000000	                          call 0x40035a2	      1998	ldlang.c	FUNCTION_51	CALL_2
0x40035a2	          0x4889c7	                            mov rdi, rax	      1998	ldlang.c	FUNCTION_51	CALL_2
0x40035a5	      0xb800000000	                              mov eax, 0	      1998	ldlang.c	FUNCTION_51	CALL_2
0x40035aa	      0xe800000000	                          call 0x40035af	      1998	ldlang.c	FUNCTION_51	CALL_2
0x40035af	    0x488b05000000	            mov rax, qword [0x040035b6] 	      2000	ldlang.c	FUNCTION_51	FOR_1
0x40035b6	        0x488945f0	             mov qword [rbp - 0x10], rax	      2000	ldlang.c	FUNCTION_51	FOR_1
0x40035ba	      0xe9a1000000	                           jmp 0x4003660	      2000	ldlang.c	FUNCTION_51	FOR_1
0x40035bf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035c3	        0x488b4008	                mov rax, qword [rax + 8]	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035c7	          0x4889c6	                            mov rsi, rax	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035ca	      0xbf00000000	                              mov edi, 0	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035cf	      0xb800000000	                              mov eax, 0	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035d4	      0xe800000000	                          call 0x40035d9	      2004	ldlang.c	FUNCTION_51	FOR_1	CALL_3
0x40035d9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2005	ldlang.c	FUNCTION_51	FOR_1	CALL_4
0x40035dd	        0x488b4008	                mov rax, qword [rax + 8]	      2005	ldlang.c	FUNCTION_51	FOR_1	CALL_4
0x40035e1	          0x4889c7	                            mov rdi, rax	      2005	ldlang.c	FUNCTION_51	FOR_1	CALL_4
0x40035e4	      0xe800000000	                          call 0x40035e9	      2005	ldlang.c	FUNCTION_51	FOR_1	CALL_4
0x40035e9	        0x488945f8	                mov qword [rbp - 8], rax	      2005	ldlang.c	FUNCTION_51	FOR_1	CALL_4
0x40035ed	      0x48837df81c	               cmp qword [rbp - 8], 0x1c	      2007	ldlang.c	FUNCTION_51	FOR_1	IF_2
0x40035f2	            0x7619	                           jbe 0x400360d	      2007	ldlang.c	FUNCTION_51	FOR_1	IF_2
0x40035f4	      0xe800000000	                          call 0x40035f9	      2009	ldlang.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40035f9	    0x48c745f80000	                  mov qword [rbp - 8], 0	      2010	ldlang.c	FUNCTION_51	FOR_1	IF_2
0x4003601	            0xeb0a	                           jmp 0x400360d	      2012	ldlang.c	FUNCTION_51	FOR_1	WHILE_1
0x4003603	      0xe800000000	                          call 0x4003608	      2014	ldlang.c	FUNCTION_51	FOR_1	WHILE_1	CALL_6
0x4003608	      0x488345f801	                  add qword [rbp - 8], 1	      2015	ldlang.c	FUNCTION_51	FOR_1	WHILE_1
0x400360d	      0x48837df81d	               cmp qword [rbp - 8], 0x1d	      2012	ldlang.c	FUNCTION_51	FOR_1	WHILE_1
0x4003612	            0x76ef	                           jbe 0x4003603	      2012	ldlang.c	FUNCTION_51	FOR_1	WHILE_1
0x4003614	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2018	ldlang.c	FUNCTION_51	FOR_1	IF_3
0x4003618	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2018	ldlang.c	FUNCTION_51	FOR_1	IF_3
0x400361c	          0x4885c0	                           test rax, rax	      2018	ldlang.c	FUNCTION_51	FOR_1	IF_3
0x400361f	            0x741a	                            je 0x400363b	      2018	ldlang.c	FUNCTION_51	FOR_1	IF_3
0x4003621	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x4003625	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x4003629	          0x4889c6	                            mov rsi, rax	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x400362c	      0xbf00000000	                              mov edi, 0	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x4003631	      0xb800000000	                              mov eax, 0	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x4003636	      0xe800000000	                          call 0x400363b	      2019	ldlang.c	FUNCTION_51	FOR_1	CALL_7
0x400363b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x400363f	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x4003643	          0x4889c6	                            mov rsi, rax	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x4003646	      0xbf00000000	                              mov edi, 0	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x400364b	      0xb800000000	                              mov eax, 0	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x4003650	      0xe800000000	                          call 0x4003655	      2020	ldlang.c	FUNCTION_51	FOR_1	CALL_8
0x4003655	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2000	ldlang.c	FUNCTION_51	FOR_1
0x4003659	          0x488b00	                    mov rax, qword [rax]	      2000	ldlang.c	FUNCTION_51	FOR_1
0x400365c	        0x488945f0	             mov qword [rbp - 0x10], rax	      2000	ldlang.c	FUNCTION_51	FOR_1
0x4003660	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2000	ldlang.c	FUNCTION_51	FOR_1
0x4003665	     0xf8554ffffff	                           jne 0x40035bf	      2000	ldlang.c	FUNCTION_51	FOR_1
0x400366b	            0xeb01	                           jmp 0x400366e	      2000	ldlang.c	FUNCTION_51	FOR_1
0x400366d	              0x90	                                     nop	      1996	ldlang.c	FUNCTION_51	IF_1
0x400366e	              0xc9	                                   leave	      2022	ldlang.c	FUNCTION_51
0x400366f	              0xc3	                                     ret	      2022	ldlang.c	FUNCTION_51
walk_wild_file_in_exclude_list	functions,0:ELSE,2:FOR,1:CALL,4:IF,4:DO,0:WHILE,0:SWITCH,0	67
0x400041d	              0x55	                                push rbp	       231	ldlang.c	FUNCTION_6
0x400041e	          0x4889e5	                            mov rbp, rsp	       231	ldlang.c	FUNCTION_6
0x4000421	        0x4883ec20	                           sub rsp, 0x20	       231	ldlang.c	FUNCTION_6
0x4000425	        0x48897de8	             mov qword [rbp - 0x18], rdi	       231	ldlang.c	FUNCTION_6
0x4000429	        0x488975e0	             mov qword [rbp - 0x20], rsi	       231	ldlang.c	FUNCTION_6
0x400042d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       234	ldlang.c	FUNCTION_6	FOR_1
0x4000431	        0x488945f0	             mov qword [rbp - 0x10], rax	       234	ldlang.c	FUNCTION_6	FOR_1
0x4000435	      0xe9c3000000	                           jmp 0x40004fd	       234	ldlang.c	FUNCTION_6	FOR_1
0x400043a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       238	ldlang.c	FUNCTION_6	FOR_1	CALL_1
0x400043e	          0x488b00	                    mov rax, qword [rax]	       238	ldlang.c	FUNCTION_6	FOR_1	CALL_1
0x4000441	          0x4889c7	                            mov rdi, rax	       238	ldlang.c	FUNCTION_6	FOR_1	CALL_1
0x4000444	      0xe8c1fdffff	                   call sym.archive_path	       238	ldlang.c	FUNCTION_6	FOR_1	CALL_1
0x4000449	        0x488945f8	                mov qword [rbp - 8], rax	       238	ldlang.c	FUNCTION_6	FOR_1	CALL_1
0x400044d	      0x48837df800	                  cmp qword [rbp - 8], 0	       240	ldlang.c	FUNCTION_6	FOR_1	IF_1
0x4000452	            0x7428	                            je 0x400047c	       240	ldlang.c	FUNCTION_6	FOR_1	IF_1
0x4000454	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000458	          0x488b00	                    mov rax, qword [rax]	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x400045b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x400045f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000463	          0x4889ce	                            mov rsi, rcx	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000466	          0x4889c7	                            mov rdi, rax	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000469	      0xe8e3fdffff	call sym.input_statement_is_archive_path	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x400046e	            0x85c0	                           test eax, eax	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000470	            0x747f	                            je 0x40004f1	       242	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2	CALL_2
0x4000472	      0xb801000000	                              mov eax, 1	       243	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2
0x4000477	      0xe991000000	                           jmp 0x400050d	       243	ldlang.c	FUNCTION_6	FOR_1	IF_1	IF_2
0x400047c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000480	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000484	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000488	          0x488b00	                    mov rax, qword [rax]	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x400048b	          0x4889d6	                            mov rsi, rdx	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x400048e	          0x4889c7	                            mov rdi, rax	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000491	      0xe81ffdffff	                     call sym.name_match	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000496	            0x85c0	                           test eax, eax	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x4000498	            0x7507	                           jne 0x40004a1	       246	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3	CALL_3
0x400049a	      0xb801000000	                              mov eax, 1	       247	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3
0x400049f	            0xeb6c	                           jmp 0x400050d	       247	ldlang.c	FUNCTION_6	FOR_1	ELSE_1	IF_3
0x40004a1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       252	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004a5	        0x488b4020	            mov rax, qword [rax + 0x20] 	       252	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004a9	          0x4885c0	                           test rax, rax	       252	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004ac	            0x7443	                            je 0x40004f1	       252	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004ae	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       253	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004b2	        0x488b4020	            mov rax, qword [rax + 0x20] 	       253	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004b6	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       253	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004bd	          0x4885c0	                           test rax, rax	       253	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004c0	            0x742f	                            je 0x40004f1	       253	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004c2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       255	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004c6	        0x488b4020	            mov rax, qword [rax + 0x20] 	       255	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004ca	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	       255	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004d1	          0x488b10	                    mov rdx, qword [rax]	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004d8	          0x488b00	                    mov rax, qword [rax]	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004db	          0x4889d6	                            mov rsi, rdx	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004de	          0x4889c7	                            mov rdi, rax	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004e1	      0xe8cffcffff	                     call sym.name_match	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004e6	            0x85c0	                           test eax, eax	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004e8	            0x7507	                           jne 0x40004f1	       254	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4	CALL_4
0x40004ea	      0xb801000000	                              mov eax, 1	       256	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004ef	            0xeb1c	                           jmp 0x400050d	       256	ldlang.c	FUNCTION_6	FOR_1	ELSE_2	IF_4
0x40004f1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       236	ldlang.c	FUNCTION_6	FOR_1
0x40004f5	        0x488b4008	                mov rax, qword [rax + 8]	       236	ldlang.c	FUNCTION_6	FOR_1
0x40004f9	        0x488945f0	             mov qword [rbp - 0x10], rax	       236	ldlang.c	FUNCTION_6	FOR_1
0x40004fd	      0x48837df000	               cmp qword [rbp - 0x10], 0	       234	ldlang.c	FUNCTION_6	FOR_1
0x4000502	     0xf8532ffffff	                           jne 0x400043a	       234	ldlang.c	FUNCTION_6	FOR_1
0x4000508	      0xb800000000	                              mov eax, 0	       259	ldlang.c	FUNCTION_6
0x400050d	              0xc9	                                   leave	       260	ldlang.c	FUNCTION_6
0x400050e	              0xc3	                                     ret	       260	ldlang.c	FUNCTION_6
process_insert_statements	functions,0:ELSE,6:FOR,2:CALL,6:IF,19:DO,1:WHILE,1:SWITCH,0	287
0x400663a	              0x55	                                push rbp	      3725	ldlang.c	FUNCTION_87
0x400663b	          0x4889e5	                            mov rbp, rsp	      3725	ldlang.c	FUNCTION_87
0x400663e	              0x53	                                push rbx	      3725	ldlang.c	FUNCTION_87
0x400663f	        0x4883ec68	                           sub rsp, 0x68	      3725	ldlang.c	FUNCTION_87
0x4006643	    0x48c745980000	               mov qword [rbp - 0x68], 0	      3727	ldlang.c	FUNCTION_87
0x400664b	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      3728	ldlang.c	FUNCTION_87
0x4006653	    0x48c745900000	               mov qword [rbp - 0x70], 0	      3734	ldlang.c	FUNCTION_87
0x400665b	      0xe9ed030000	                           jmp 0x4006a4d	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006660	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3737	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x4006664	          0x488b00	                    mov rax, qword [rax]	      3737	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x4006667	          0x8b4008	                mov eax, dword [rax + 8]	      3737	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x400666a	            0x85c0	                           test eax, eax	      3737	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x400666c	            0x756a	                           jne 0x40066d8	      3737	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x400666e	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3741	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x4006672	          0x488b00	                    mov rax, qword [rax]	      3741	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x4006675	        0x488945a8	             mov qword [rbp - 0x58], rax	      3741	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x4006679	      0x48837da000	               cmp qword [rbp - 0x60], 0	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x400667e	            0x741d	                            je 0x400669d	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x4006680	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x4006684	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x4006688	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x400668c	            0x740f	                            je 0x400669d	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x400668e	      0xbe9f0e0000	                          mov esi, 0xe9f	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x4006693	      0xbf00000000	                              mov edi, 0	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x4006698	      0xe800000000	                          call 0x400669d	      3743	ldlang.c	FUNCTION_87	WHILE_1	IF_1	CALL_1
0x400669d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3744	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066a1	        0x488945a0	             mov qword [rbp - 0x60], rax	      3744	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066a5	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066a9	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066af	      0xbafeffffff	                     mov edx, 0xfffffffe	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066b4	            0x29c2	                            sub edx, eax	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066b6	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066ba	    0x899084000000	             mov dword [rax + 0x84], edx	      3750	ldlang.c	FUNCTION_87	WHILE_1	IF_1
0x40066c0	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      3751	ldlang.c	FUNCTION_87	WHILE_1	IF_1	IF_2
0x40066c5	     0xf8582030000	                           jne 0x4006a4d	      3751	ldlang.c	FUNCTION_87	WHILE_1	IF_1	IF_2
0x40066cb	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3752	ldlang.c	FUNCTION_87	WHILE_1	IF_1	IF_2
0x40066cf	        0x48894598	             mov qword [rbp - 0x68], rax	      3752	ldlang.c	FUNCTION_87	WHILE_1	IF_1	IF_2
0x40066d3	      0xe975030000	                           jmp 0x4006a4d	      3752	ldlang.c	FUNCTION_87	WHILE_1	IF_1	IF_2
0x40066d8	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3754	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066dc	          0x488b00	                    mov rax, qword [rax]	      3754	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066df	          0x8b4008	                mov eax, dword [rax + 8]	      3754	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066e2	          0x83f80e	                            cmp eax, 0xe	      3754	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066e5	     0xf8562030000	                           jne 0x4006a4d	      3754	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066eb	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3756	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066ef	          0x488b00	                    mov rax, qword [rax]	      3756	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066f2	        0x488945d0	             mov qword [rbp - 0x30], rax	      3756	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40066f6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x40066fa	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x40066fe	      0xba00000000	                              mov edx, 0	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x4006703	      0xbe00000000	                              mov esi, 0	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x4006708	          0x4889c7	                            mov rdi, rax	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x400670b	      0xe800000000	                          call 0x4006710	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x4006710	        0x488945b0	             mov qword [rbp - 0x50], rax	      3761	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_2
0x4006714	      0x48837db000	               cmp qword [rbp - 0x50], 0	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006719	            0x742c	                            je 0x4006747	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x400671b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x400671f	          0x8b4018	            mov eax, dword [rax + 0x18] 	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006722	            0x85c0	                           test eax, eax	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006724	            0x7421	                            je 0x4006747	      3762	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006726	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3765	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4	DO_1
0x400672a	        0x488b4028	            mov rax, qword [rax + 0x28] 	      3765	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4	DO_1
0x400672e	        0x488945b0	             mov qword [rbp - 0x50], rax	      3765	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4	DO_1
0x4006732	      0x48837db000	               cmp qword [rbp - 0x50], 0	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006737	            0x740e	                            je 0x4006747	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006739	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x400673d	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006743	            0x85c0	                           test eax, eax	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006745	            0x78df	                            js 0x4006726	      3766	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_4
0x4006747	      0x48837db000	               cmp qword [rbp - 0x50], 0	      3768	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5
0x400674c	            0x7527	                           jne 0x4006775	      3768	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5
0x400674e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006752	        0x488b5810	            mov rbx, qword [rax + 0x10] 	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006756	      0xbf00000000	                              mov edi, 0	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x400675b	      0xe800000000	                          call 0x4006760	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006760	          0x4889de	                            mov rsi, rbx	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006763	          0x4889c7	                            mov rdi, rax	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006766	      0xb800000000	                              mov eax, 0	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x400676b	      0xe800000000	                          call 0x4006770	      3770	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5	CALL_4
0x4006770	      0xe938030000	                           jmp 0x4006aad	      3771	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_5
0x4006775	      0x48837da000	               cmp qword [rbp - 0x60], 0	      3775	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x400677a	     0xf8463020000	                            je 0x40069e3	      3775	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x4006780	        0x488b4598	             mov rax, qword [rbp - 0x68]	      3781	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x4006784	        0x488b4028	            mov rax, qword [rax + 0x28] 	      3781	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x4006788	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3781	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x400678c	        0x488b5220	            mov rdx, qword [rdx + 0x20] 	      3781	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x4006790	        0x48895020	             mov qword [rax + 0x20], rdx	      3781	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x4006794	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3782	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x4006798	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3782	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x400679c	          0x4885c0	                           test rax, rax	      3782	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x400679f	            0x751d	                           jne 0x40067be	      3782	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067a1	        0x488b4598	             mov rax, qword [rbp - 0x68]	      3784	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067a5	        0x488b4028	            mov rax, qword [rax + 0x28] 	      3784	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067a9	        0x4883c020	                           add rax, 0x20	      3784	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067ad	        0x488945d8	             mov qword [rbp - 0x28], rax	      3784	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067b1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3786	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067b5	    0x488905000000	            mov qword [0x040067bc], rax 	      3786	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067bc	            0xeb14	                           jmp 0x40067d2	      3786	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_7
0x40067be	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3789	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067c2	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3789	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067c6	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      3789	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067ca	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      3789	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067ce	        0x48895028	             mov qword [rax + 0x28], rdx	      3789	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067d2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3791	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067d6	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      3791	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067da	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3791	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067de	        0x48895020	             mov qword [rax + 0x20], rdx	      3791	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2
0x40067e2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3792	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067e6	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3792	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067ea	          0x4885c0	                           test rax, rax	      3792	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067ed	            0x7519	                           jne 0x4006808	      3792	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067ef	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3794	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067f3	        0x4883c020	                           add rax, 0x20	      3794	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067f7	        0x488945d8	             mov qword [rbp - 0x28], rax	      3794	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067fb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3796	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x40067ff	    0x488905000000	            mov qword [0x04006806], rax 	      3796	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x4006806	            0xeb10	                           jmp 0x4006818	      3796	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_2	IF_8
0x4006808	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3799	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x400680c	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3799	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006810	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3799	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006814	        0x48895028	             mov qword [rax + 0x28], rdx	      3799	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006818	        0x488b4598	             mov rax, qword [rbp - 0x68]	      3800	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x400681c	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      3800	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006820	        0x48895028	             mov qword [rax + 0x28], rdx	      3800	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006824	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3801	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006828	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      3801	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x400682c	        0x48895020	             mov qword [rax + 0x20], rdx	      3801	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006830	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      3804	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006838	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      3805	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3
0x4006840	        0x488b4598	             mov rax, qword [rbp - 0x68]	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x4006844	        0x488945a8	             mov qword [rbp - 0x58], rax	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x4006848	            0xeb6d	                           jmp 0x40068b7	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x400684a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x400684e	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x4006854	      0xbafeffffff	                     mov edx, 0xfffffffe	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x4006859	            0x29c2	                            sub edx, eax	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x400685b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x400685f	    0x899084000000	             mov dword [rax + 0x84], edx	      3808	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x4006865	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3809	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006869	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3809	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x400686d	          0x4885c0	                           test rax, rax	      3809	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006870	            0x742f	                            je 0x40068a1	      3809	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006872	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3810	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006876	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3810	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x400687a	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      3810	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006881	          0x4885c0	                           test rax, rax	      3810	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006884	            0x741b	                            je 0x40068a1	      3810	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006886	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3812	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x400688a	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3812	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x400688e	        0x488945c0	             mov qword [rbp - 0x40], rax	      3812	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9
0x4006892	      0x48837db800	               cmp qword [rbp - 0x48], 0	      3813	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9	IF_10
0x4006897	            0x7508	                           jne 0x40068a1	      3813	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9	IF_10
0x4006899	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3814	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9	IF_10
0x400689d	        0x488945b8	             mov qword [rbp - 0x48], rax	      3814	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_9	IF_10
0x40068a1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3816	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_11
0x40068a5	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3816	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_11
0x40068a9	            0x7415	                            je 0x40068c0	      3816	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_11
0x40068ab	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068af	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068b3	        0x488945a8	             mov qword [rbp - 0x58], rax	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068b7	      0x48837da800	               cmp qword [rbp - 0x58], 0	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068bc	            0x758c	                           jne 0x400684a	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068be	            0xeb01	                           jmp 0x40068c1	      3806	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1
0x40068c0	              0x90	                                     nop	      3817	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	ELSE_3	FOR_1	IF_11
0x40068c1	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      3819	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12
0x40068c6	     0xf8407010000	                            je 0x40069d3	      3819	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12
0x40068cc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3821	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12
0x40068d0	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3821	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12
0x40068d4	        0x488945c8	             mov qword [rbp - 0x38], rax	      3821	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12
0x40068d8	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      3822	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_13
0x40068dd	            0x7510	                           jne 0x40068ef	      3822	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_13
0x40068df	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3823	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	CALL_5
0x40068e3	          0x4889c7	                            mov rdi, rax	      3823	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	CALL_5
0x40068e6	      0xe862c4ffff	           call sym.output_prev_sec_find	      3823	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	CALL_5
0x40068eb	        0x488945c8	             mov qword [rbp - 0x38], rax	      3823	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	CALL_5
0x40068ef	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      3829	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40068f4	     0xf84d9000000	                            je 0x40069d3	      3829	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40068fa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3829	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40068fe	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      3829	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x4006902	     0xf84cb000000	                            je 0x40069d3	      3829	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x4006908	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3832	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x400690c	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3832	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006910	          0x4885c0	                           test rax, rax	      3832	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006913	            0x7416	                            je 0x400692b	      3832	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006915	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006919	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x400691d	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006921	        0x488b5210	            mov rdx, qword [rdx + 0x10] 	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006925	        0x48895010	             mov qword [rax + 0x10], rdx	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x4006929	            0xeb16	                           jmp 0x4006941	      3833	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_15
0x400692b	    0x488b05000000	            mov rax, qword [0x04006932] 	      3835	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_4
0x4006932	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      3835	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_4
0x4006936	        0x488b5210	            mov rdx, qword [rdx + 0x10] 	      3835	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_4
0x400693a	    0x488990900000	             mov qword [rax + 0x90], rdx	      3835	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_4
0x4006941	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3836	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006945	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3836	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006949	          0x4885c0	                           test rax, rax	      3836	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x400694c	            0x7416	                            je 0x4006964	      3836	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x400694e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006952	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006956	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x400695a	        0x488b5218	            mov rdx, qword [rdx + 0x18] 	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x400695e	        0x48895018	             mov qword [rax + 0x18], rdx	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006962	            0xeb16	                           jmp 0x400697a	      3837	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_16
0x4006964	    0x488b05000000	            mov rax, qword [0x0400696b] 	      3839	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_5
0x400696b	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      3839	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_5
0x400696f	        0x488b5218	            mov rdx, qword [rdx + 0x18] 	      3839	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_5
0x4006973	    0x488990980000	             mov qword [rax + 0x98], rdx	      3839	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_5
0x400697a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3841	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x400697e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      3841	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x4006982	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3841	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x4006986	        0x48895010	             mov qword [rax + 0x10], rdx	      3841	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x400698a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3842	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x400698e	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3842	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x4006992	          0x4885c0	                           test rax, rax	      3842	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x4006995	            0x7412	                            je 0x40069a9	      3842	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x4006997	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3843	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x400699b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3843	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x400699f	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      3843	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x40069a3	        0x48895018	             mov qword [rax + 0x18], rdx	      3843	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x40069a7	            0xeb12	                           jmp 0x40069bb	      3843	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	IF_17
0x40069a9	    0x488b05000000	            mov rax, qword [0x040069b0] 	      3845	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_6
0x40069b0	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      3845	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_6
0x40069b4	    0x488990980000	             mov qword [rax + 0x98], rdx	      3845	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14	ELSE_6
0x40069bb	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3846	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069bf	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3846	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069c3	        0x48895018	             mov qword [rax + 0x18], rdx	      3846	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069c7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3847	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069cb	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      3847	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069cf	        0x48895010	             mov qword [rax + 0x10], rdx	      3847	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6	IF_12	IF_14
0x40069d3	    0x48c745980000	               mov qword [rbp - 0x68], 0	      3851	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x40069db	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      3852	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_6
0x40069e3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3855	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_6
0x40069e7	          0x4889c7	                            mov rdi, rax	      3855	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_6
0x40069ea	      0xe8c8c3ffff	                call sym.insert_os_after	      3855	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_6
0x40069ef	        0x488945e0	             mov qword [rbp - 0x20], rax	      3855	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	CALL_6
0x40069f3	    0x488b05000000	            mov rax, qword [0x040069fa] 	      3859	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40069fa	          0x488b00	                    mov rax, qword [rax]	      3859	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x40069fd	        0x488945e8	             mov qword [rbp - 0x18], rax	      3859	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a01	    0x488b05000000	            mov rax, qword [0x04006a08] 	      3860	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a08	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      3860	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a0c	          0x488b12	                    mov rdx, qword [rdx]	      3860	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a0f	          0x488b12	                    mov rdx, qword [rdx]	      3860	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a12	          0x488910	                    mov qword [rax], rdx	      3860	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a15	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3862	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a19	          0x488b10	                    mov rdx, qword [rax]	      3862	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a1c	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3862	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a20	          0x488910	                    mov qword [rax], rdx	      3862	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a23	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3863	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a27	          0x488b00	                    mov rax, qword [rax]	      3863	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a2a	          0x4885c0	                           test rax, rax	      3863	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a2d	            0x750b	                           jne 0x4006a3a	      3863	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a2f	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3864	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a33	    0x488905000000	            mov qword [0x04006a3a], rax 	      3864	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3	IF_18
0x4006a3a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3865	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a3e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      3865	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a42	          0x488910	                    mov qword [rax], rdx	      3865	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a45	    0x48c745900000	               mov qword [rbp - 0x70], 0	      3866	ldlang.c	FUNCTION_87	WHILE_1	ELSE_1	IF_3
0x4006a4d	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a51	          0x488b00	                    mov rax, qword [rax]	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a54	        0x48894590	             mov qword [rbp - 0x70], rax	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a58	        0x488b4590	             mov rax, qword [rbp - 0x70]	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a5c	          0x488b00	                    mov rax, qword [rax]	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a5f	          0x4885c0	                           test rax, rax	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a62	     0xf85f8fbffff	                           jne 0x4006660	      3735	ldlang.c	FUNCTION_87	WHILE_1
0x4006a68	        0x488b4598	             mov rax, qword [rbp - 0x68]	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006a6c	        0x488945a8	             mov qword [rbp - 0x58], rax	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006a70	            0xeb31	                           jmp 0x4006aa3	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006a72	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a76	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a7c	      0xbafeffffff	                     mov edx, 0xfffffffe	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a81	            0x29c2	                            sub edx, eax	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a83	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a87	    0x899084000000	             mov dword [rax + 0x84], edx	      3873	ldlang.c	FUNCTION_87	FOR_2
0x4006a8d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3874	ldlang.c	FUNCTION_87	FOR_2	IF_19
0x4006a91	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3874	ldlang.c	FUNCTION_87	FOR_2	IF_19
0x4006a95	            0x7415	                            je 0x4006aac	      3874	ldlang.c	FUNCTION_87	FOR_2	IF_19
0x4006a97	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006a9b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006a9f	        0x488945a8	             mov qword [rbp - 0x58], rax	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006aa3	      0x48837da800	               cmp qword [rbp - 0x58], 0	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006aa8	            0x75c8	                           jne 0x4006a72	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006aaa	            0xeb01	                           jmp 0x4006aad	      3871	ldlang.c	FUNCTION_87	FOR_2
0x4006aac	              0x90	                                     nop	      3875	ldlang.c	FUNCTION_87	FOR_2	IF_19
0x4006aad	        0x4883c468	                           add rsp, 0x68	      3877	ldlang.c	FUNCTION_87
0x4006ab1	              0x5b	                                 pop rbx	      3877	ldlang.c	FUNCTION_87
0x4006ab2	              0x5d	                                 pop rbp	      3877	ldlang.c	FUNCTION_87
0x4006ab3	              0xc3	                                     ret	      3877	ldlang.c	FUNCTION_87
ldlang_add_require_defined	functions,0:ELSE,0:FOR,0:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	25
0x4005ffc	              0x55	                                push rbp	      3453	ldlang.c	FUNCTION_82
0x4005ffd	          0x4889e5	                            mov rbp, rsp	      3453	ldlang.c	FUNCTION_82
0x4006000	        0x4883ec20	                           sub rsp, 0x20	      3453	ldlang.c	FUNCTION_82
0x4006004	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3453	ldlang.c	FUNCTION_82
0x4006008	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3456	ldlang.c	FUNCTION_82	CALL_1
0x400600c	      0xbe01000000	                              mov esi, 1	      3456	ldlang.c	FUNCTION_82	CALL_1
0x4006011	          0x4889c7	                            mov rdi, rax	      3456	ldlang.c	FUNCTION_82	CALL_1
0x4006014	      0xe800000000	                          call 0x4006019	      3456	ldlang.c	FUNCTION_82	CALL_1
0x4006019	      0xbf10000000	                           mov edi, 0x10	      3457	ldlang.c	FUNCTION_82	CALL_2
0x400601e	      0xe800000000	                          call 0x4006023	      3457	ldlang.c	FUNCTION_82	CALL_2
0x4006023	        0x488945f8	                mov qword [rbp - 8], rax	      3457	ldlang.c	FUNCTION_82	CALL_2
0x4006027	    0x488b15000000	            mov rdx, qword [0x0400602e] 	      3458	ldlang.c	FUNCTION_82
0x400602e	        0x488b45f8	                mov rax, qword [rbp - 8]	      3458	ldlang.c	FUNCTION_82
0x4006032	        0x48895008	                mov qword [rax + 8], rdx	      3458	ldlang.c	FUNCTION_82
0x4006036	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3459	ldlang.c	FUNCTION_82	CALL_3
0x400603a	          0x4889c7	                            mov rdi, rax	      3459	ldlang.c	FUNCTION_82	CALL_3
0x400603d	      0xe800000000	                          call 0x4006042	      3459	ldlang.c	FUNCTION_82	CALL_3
0x4006042	          0x4889c2	                            mov rdx, rax	      3459	ldlang.c	FUNCTION_82	CALL_3
0x4006045	        0x488b45f8	                mov rax, qword [rbp - 8]	      3459	ldlang.c	FUNCTION_82	CALL_3
0x4006049	          0x488910	                    mov qword [rax], rdx	      3459	ldlang.c	FUNCTION_82	CALL_3
0x400604c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3460	ldlang.c	FUNCTION_82
0x4006050	    0x488905000000	            mov qword [0x04006057], rax 	      3460	ldlang.c	FUNCTION_82
0x4006057	              0x90	                                     nop	      3461	ldlang.c	FUNCTION_82
0x4006058	              0xc9	                                   leave	      3461	ldlang.c	FUNCTION_82
0x4006059	              0xc3	                                     ret	      3461	ldlang.c	FUNCTION_82
lang_add_reloc	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	38
0x400d51b	              0x55	                                push rbp	      7567	ldlang.c	FUNCTION_172
0x400d51c	          0x4889e5	                            mov rbp, rsp	      7567	ldlang.c	FUNCTION_172
0x400d51f	        0x4883ec40	                           sub rsp, 0x40	      7567	ldlang.c	FUNCTION_172
0x400d523	          0x897dec	             mov dword [rbp - 0x14], edi	      7567	ldlang.c	FUNCTION_172
0x400d526	        0x488975e0	             mov qword [rbp - 0x20], rsi	      7567	ldlang.c	FUNCTION_172
0x400d52a	        0x488955d8	             mov qword [rbp - 0x28], rdx	      7567	ldlang.c	FUNCTION_172
0x400d52e	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      7567	ldlang.c	FUNCTION_172
0x400d532	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      7567	ldlang.c	FUNCTION_172
0x400d536	    0x488b05000000	            mov rax, qword [0x0400d53d] 	      7568	ldlang.c	FUNCTION_172
0x400d53d	          0x4889c2	                            mov rdx, rax	      7568	ldlang.c	FUNCTION_172
0x400d540	      0xbe50000000	                           mov esi, 0x50	      7568	ldlang.c	FUNCTION_172
0x400d545	      0xbf09000000	                              mov edi, 9	      7568	ldlang.c	FUNCTION_172
0x400d54a	      0xe82045ffff	                  call sym.new_statement	      7568	ldlang.c	FUNCTION_172
0x400d54f	        0x488945f8	                mov qword [rbp - 8], rax	      7568	ldlang.c	FUNCTION_172
0x400d553	        0x488b45f8	                mov rax, qword [rbp - 8]	      7570	ldlang.c	FUNCTION_172
0x400d557	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      7570	ldlang.c	FUNCTION_172
0x400d55a	          0x895010	             mov dword [rax + 0x10], edx	      7570	ldlang.c	FUNCTION_172
0x400d55d	        0x488b45f8	                mov rax, qword [rbp - 8]	      7571	ldlang.c	FUNCTION_172
0x400d561	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      7571	ldlang.c	FUNCTION_172
0x400d565	        0x48895018	             mov qword [rax + 0x18], rdx	      7571	ldlang.c	FUNCTION_172
0x400d569	        0x488b45f8	                mov rax, qword [rbp - 8]	      7572	ldlang.c	FUNCTION_172
0x400d56d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      7572	ldlang.c	FUNCTION_172
0x400d571	        0x48895020	             mov qword [rax + 0x20], rdx	      7572	ldlang.c	FUNCTION_172
0x400d575	        0x488b45f8	                mov rax, qword [rbp - 8]	      7573	ldlang.c	FUNCTION_172
0x400d579	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      7573	ldlang.c	FUNCTION_172
0x400d57d	        0x48895028	             mov qword [rax + 0x28], rdx	      7573	ldlang.c	FUNCTION_172
0x400d581	        0x488b45f8	                mov rax, qword [rbp - 8]	      7574	ldlang.c	FUNCTION_172
0x400d585	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      7574	ldlang.c	FUNCTION_172
0x400d589	        0x48895030	             mov qword [rax + 0x30], rdx	      7574	ldlang.c	FUNCTION_172
0x400d58d	        0x488b45f8	                mov rax, qword [rbp - 8]	      7576	ldlang.c	FUNCTION_172
0x400d591	    0x48c740380000	               mov qword [rax + 0x38], 0	      7576	ldlang.c	FUNCTION_172
0x400d599	        0x488b45f8	                mov rax, qword [rbp - 8]	      7577	ldlang.c	FUNCTION_172
0x400d59d	    0x48c740400000	               mov qword [rax + 0x40], 0	      7577	ldlang.c	FUNCTION_172
0x400d5a5	        0x488b45f8	                mov rax, qword [rbp - 8]	      7578	ldlang.c	FUNCTION_172
0x400d5a9	    0x48c740480000	               mov qword [rax + 0x48], 0	      7578	ldlang.c	FUNCTION_172
0x400d5b1	              0x90	                                     nop	      7579	ldlang.c	FUNCTION_172
0x400d5b2	              0xc9	                                   leave	      7579	ldlang.c	FUNCTION_172
0x400d5b3	              0xc3	                                     ret	      7579	ldlang.c	FUNCTION_172
undef_start_stop	functions,0:ELSE,0:FOR,0:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	41
0x400b020	              0x55	                                push rbp	      6085	ldlang.c	FUNCTION_128
0x400b021	          0x4889e5	                            mov rbp, rsp	      6085	ldlang.c	FUNCTION_128
0x400b024	        0x4883ec10	                           sub rsp, 0x10	      6085	ldlang.c	FUNCTION_128
0x400b028	        0x48897df8	                mov qword [rbp - 8], rdi	      6085	ldlang.c	FUNCTION_128
0x400b02c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6086	ldlang.c	FUNCTION_128	IF_1
0x400b030	         0xfb64019	           movzx eax, byte [rax + 0x19] 	      6086	ldlang.c	FUNCTION_128	IF_1
0x400b034	          0x83e008	                              and eax, 8	      6086	ldlang.c	FUNCTION_128	IF_1
0x400b037	            0x84c0	                             test al, al	      6086	ldlang.c	FUNCTION_128	IF_1
0x400b039	            0x756f	                           jne 0x400b0aa	      6086	ldlang.c	FUNCTION_128	IF_1
0x400b03b	        0x488b45f8	                mov rax, qword [rbp - 8]	      6089	ldlang.c	FUNCTION_128	IF_2
0x400b03f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6089	ldlang.c	FUNCTION_128	IF_2
0x400b043	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6089	ldlang.c	FUNCTION_128	IF_2
0x400b047	          0x4885c0	                           test rax, rax	      6089	ldlang.c	FUNCTION_128	IF_2
0x400b04a	            0x7448	                            je 0x400b094	      6089	ldlang.c	FUNCTION_128	IF_2
0x400b04c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b050	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b054	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b058	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b05f	    0x488b05000000	            mov rax, qword [0x0400b066] 	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b066	          0x4839c2	                            cmp rdx, rax	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b069	            0x7529	                           jne 0x400b094	      6090	ldlang.c	FUNCTION_128	IF_2
0x400b06b	        0x488b45f8	                mov rax, qword [rbp - 8]	      6092	ldlang.c	FUNCTION_128	IF_2
0x400b06f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6092	ldlang.c	FUNCTION_128	IF_2
0x400b073	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6092	ldlang.c	FUNCTION_128	IF_2
0x400b077	          0x488b10	                    mov rdx, qword [rax]	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b07a	        0x488b45f8	                mov rax, qword [rbp - 8]	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b07e	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b082	          0x488b00	                    mov rax, qword [rax]	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b085	          0x4889d6	                            mov rsi, rdx	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b088	          0x4889c7	                            mov rdi, rax	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b08b	      0xe800000000	                          call 0x400b090	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b090	            0x85c0	                           test eax, eax	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b092	            0x7417	                            je 0x400b0ab	      6091	ldlang.c	FUNCTION_128	IF_2	CALL_1
0x400b094	        0x488b45f8	                mov rax, qword [rbp - 8]	      6094	ldlang.c	FUNCTION_128	IF_2
0x400b098	        0xc6401801	                mov byte [rax + 0x18], 1	      6094	ldlang.c	FUNCTION_128	IF_2
0x400b09c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6095	ldlang.c	FUNCTION_128	IF_2
0x400b0a0	    0x48c740280000	               mov qword [rax + 0x28], 0	      6095	ldlang.c	FUNCTION_128	IF_2
0x400b0a8	            0xeb01	                           jmp 0x400b0ab	      6095	ldlang.c	FUNCTION_128	IF_2
0x400b0aa	              0x90	                                     nop	      6087	ldlang.c	FUNCTION_128	IF_1
0x400b0ab	              0xc9	                                   leave	      6097	ldlang.c	FUNCTION_128
0x400b0ac	              0xc3	                                     ret	      6097	ldlang.c	FUNCTION_128
lang_list_insert_after	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	25
0x400ca51	              0x55	                                push rbp	      7070	ldlang.c	FUNCTION_158
0x400ca52	          0x4889e5	                            mov rbp, rsp	      7070	ldlang.c	FUNCTION_158
0x400ca55	        0x48897df8	                mov qword [rbp - 8], rdi	      7070	ldlang.c	FUNCTION_158
0x400ca59	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7070	ldlang.c	FUNCTION_158
0x400ca5d	        0x488955e8	             mov qword [rbp - 0x18], rdx	      7070	ldlang.c	FUNCTION_158
0x400ca61	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7071	ldlang.c	FUNCTION_158
0x400ca65	        0x488b4008	                mov rax, qword [rax + 8]	      7071	ldlang.c	FUNCTION_158
0x400ca69	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7071	ldlang.c	FUNCTION_158
0x400ca6d	          0x488b12	                    mov rdx, qword [rdx]	      7071	ldlang.c	FUNCTION_158
0x400ca70	          0x488910	                    mov qword [rax], rdx	      7071	ldlang.c	FUNCTION_158
0x400ca73	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7072	ldlang.c	FUNCTION_158
0x400ca77	          0x488b10	                    mov rdx, qword [rax]	      7072	ldlang.c	FUNCTION_158
0x400ca7a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7072	ldlang.c	FUNCTION_158
0x400ca7e	          0x488910	                    mov qword [rax], rdx	      7072	ldlang.c	FUNCTION_158
0x400ca81	        0x488b45f8	                mov rax, qword [rbp - 8]	      7073	ldlang.c	FUNCTION_158	IF_1
0x400ca85	        0x488b4008	                mov rax, qword [rax + 8]	      7073	ldlang.c	FUNCTION_158	IF_1
0x400ca89	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      7073	ldlang.c	FUNCTION_158	IF_1
0x400ca8d	            0x7510	                           jne 0x400ca9f	      7073	ldlang.c	FUNCTION_158	IF_1
0x400ca8f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7074	ldlang.c	FUNCTION_158	IF_1
0x400ca93	        0x488b5008	                mov rdx, qword [rax + 8]	      7074	ldlang.c	FUNCTION_158	IF_1
0x400ca97	        0x488b45f8	                mov rax, qword [rbp - 8]	      7074	ldlang.c	FUNCTION_158	IF_1
0x400ca9b	        0x48895008	                mov qword [rax + 8], rdx	      7074	ldlang.c	FUNCTION_158	IF_1
0x400ca9f	              0x90	                                     nop	      7075	ldlang.c	FUNCTION_158
0x400caa0	              0x5d	                                 pop rbp	      7075	ldlang.c	FUNCTION_158
0x400caa1	              0xc3	                                     ret	      7075	ldlang.c	FUNCTION_158
output_section_callback	functions,0:ELSE,1:FOR,1:CALL,7:IF,3:DO,0:WHILE,0:SWITCH,0	90
0x40046ea	              0x55	                                push rbp	      2573	ldlang.c	FUNCTION_61
0x40046eb	          0x4889e5	                            mov rbp, rsp	      2573	ldlang.c	FUNCTION_61
0x40046ee	        0x4883ec70	                           sub rsp, 0x70	      2573	ldlang.c	FUNCTION_61
0x40046f2	        0x48897db8	             mov qword [rbp - 0x48], rdi	      2573	ldlang.c	FUNCTION_61
0x40046f6	        0x488975b0	             mov qword [rbp - 0x50], rsi	      2573	ldlang.c	FUNCTION_61
0x40046fa	        0x488955a8	             mov qword [rbp - 0x58], rdx	      2573	ldlang.c	FUNCTION_61
0x40046fe	        0x48894da0	             mov qword [rbp - 0x60], rcx	      2573	ldlang.c	FUNCTION_61
0x4004702	        0x4c894598	              mov qword [rbp - 0x68], r8	      2573	ldlang.c	FUNCTION_61
0x4004706	        0x4c894d90	              mov qword [rbp - 0x70], r9	      2573	ldlang.c	FUNCTION_61
0x400470a	    0x64488b042528	                mov rax, qword fs:[0x28]	      2573	ldlang.c	FUNCTION_61
0x4004713	        0x488945f8	                mov qword [rbp - 8], rax	      2573	ldlang.c	FUNCTION_61
0x4004717	            0x31c0	                            xor eax, eax	      2573	ldlang.c	FUNCTION_61
0x4004719	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2577	ldlang.c	FUNCTION_61
0x400471d	        0x488945d0	             mov qword [rbp - 0x30], rax	      2577	ldlang.c	FUNCTION_61
0x4004721	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x4004725	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x4004729	          0x4889d6	                            mov rsi, rdx	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x400472c	          0x4889c7	                            mov rdi, rax	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x400472f	      0xe809bcffff	               call sym.unique_section_p	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x4004734	            0x85c0	                           test eax, eax	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x4004736	     0xf85e8000000	                           jne 0x4004824	      2580	ldlang.c	FUNCTION_61	IF_1	CALL_1
0x400473c	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	      2583	ldlang.c	FUNCTION_61	CALL_2
0x4004740	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      2583	ldlang.c	FUNCTION_61	CALL_2
0x4004744	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      2583	ldlang.c	FUNCTION_61	CALL_2
0x4004748	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2583	ldlang.c	FUNCTION_61	CALL_2
0x400474c	          0x4889c7	                            mov rdi, rax	      2583	ldlang.c	FUNCTION_61	CALL_2
0x400474f	      0xe87bfdffff	                      call sym.wild_sort	      2583	ldlang.c	FUNCTION_61	CALL_2
0x4004754	        0x488945d8	             mov qword [rbp - 0x28], rax	      2583	ldlang.c	FUNCTION_61	CALL_2
0x4004758	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      2590	ldlang.c	FUNCTION_61	IF_2
0x400475d	            0x7521	                           jne 0x4004780	      2590	ldlang.c	FUNCTION_61	IF_2
0x400475f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2591	ldlang.c	FUNCTION_61	CALL_3
0x4004763	        0x488d7830	                   lea rdi, [rax + 0x30]	      2591	ldlang.c	FUNCTION_61	CALL_3
0x4004767	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2591	ldlang.c	FUNCTION_61	CALL_3
0x400476b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      2591	ldlang.c	FUNCTION_61	CALL_3
0x400476f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2591	ldlang.c	FUNCTION_61	CALL_3
0x4004773	          0x4889c6	                            mov rsi, rax	      2591	ldlang.c	FUNCTION_61	CALL_3
0x4004776	      0xe800000000	                          call 0x400477b	      2591	ldlang.c	FUNCTION_61	CALL_3
0x400477b	      0xe9a5000000	                           jmp 0x4004825	      2591	ldlang.c	FUNCTION_61	CALL_3
0x4004780	        0x488d45e0	                   lea rax, [rbp - 0x20]	      2597	ldlang.c	FUNCTION_61	ELSE_1	CALL_4
0x4004784	          0x4889c7	                            mov rdi, rax	      2597	ldlang.c	FUNCTION_61	ELSE_1	CALL_4
0x4004787	      0xe800000000	                          call 0x400478c	      2597	ldlang.c	FUNCTION_61	ELSE_1	CALL_4
0x400478c	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x4004790	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x4004794	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x4004798	        0x488d45e0	                   lea rax, [rbp - 0x20]	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x400479c	          0x4889c7	                            mov rdi, rax	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x400479f	      0xe800000000	                          call 0x40047a4	      2598	ldlang.c	FUNCTION_61	ELSE_1	CALL_5
0x40047a4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2602	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x40047a8	          0x4885c0	                           test rax, rax	      2602	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x40047ab	            0x7478	                            je 0x4004825	      2602	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x40047ad	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047b1	          0x488b00	                    mov rax, qword [rax]	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047b4	          0x4885c0	                           test rax, rax	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047b7	            0x740f	                            je 0x40047c8	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047b9	      0xbe2c0a0000	                          mov esi, 0xa2c	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047be	      0xbf00000000	                              mov edi, 0	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047c3	      0xe800000000	                          call 0x40047c8	      2604	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_6
0x40047c8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047cc	        0x4883c030	                           add rax, 0x30	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047d0	        0x488945c8	             mov qword [rbp - 0x38], rax	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047d4	            0xeb26	                           jmp 0x40047fc	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047d6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047da	          0x488b00	                    mov rax, qword [rax]	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047dd	          0x4885c0	                           test rax, rax	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047e0	            0x750f	                           jne 0x40047f1	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047e2	      0xbe310a0000	                          mov esi, 0xa31	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047e7	      0xbf00000000	                              mov edi, 0	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047ec	      0xe800000000	                          call 0x40047f1	      2609	ldlang.c	FUNCTION_61	ELSE_1	IF_3	CALL_7
0x40047f1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2608	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047f5	          0x488b00	                    mov rax, qword [rax]	      2608	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047f8	        0x488945c8	             mov qword [rbp - 0x38], rax	      2608	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x40047fc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2607	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x4004800	          0x488b00	                    mov rax, qword [rax]	      2607	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x4004803	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x4004807	            0x75cd	                           jne 0x40047d6	      2606	ldlang.c	FUNCTION_61	ELSE_1	IF_3	FOR_1
0x4004809	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2611	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x400480d	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2611	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x4004811	          0x488b12	                    mov rdx, qword [rdx]	      2611	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x4004814	          0x488910	                    mov qword [rax], rdx	      2611	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x4004817	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2612	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x400481b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2612	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x400481f	          0x488910	                    mov qword [rax], rdx	      2612	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x4004822	            0xeb01	                           jmp 0x4004825	      2612	ldlang.c	FUNCTION_61	ELSE_1	IF_3
0x4004824	              0x90	                                     nop	      2581	ldlang.c	FUNCTION_61	IF_1
0x4004825	        0x488b45f8	                mov rax, qword [rbp - 8]	      2615	ldlang.c	FUNCTION_61
0x4004829	    0x644833042528	                xor rax, qword fs:[0x28]	      2615	ldlang.c	FUNCTION_61
0x4004832	            0x7405	                            je 0x4004839	      2615	ldlang.c	FUNCTION_61
0x4004834	      0xe800000000	                          call 0x4004839	      2615	ldlang.c	FUNCTION_61
0x4004839	              0xc9	                                   leave	      2615	ldlang.c	FUNCTION_61
0x400483a	              0xc3	                                     ret	      2615	ldlang.c	FUNCTION_61
lang_clear_os_map	functions,0:ELSE,0:FOR,1:CALL,0:IF,3:DO,0:WHILE,0:SWITCH,0	35
0x4006ce4	              0x55	                                push rbp	      3952	ldlang.c	FUNCTION_89
0x4006ce5	          0x4889e5	                            mov rbp, rsp	      3952	ldlang.c	FUNCTION_89
0x4006ce8	    0x8b0500000000	            mov eax, dword [0x04006cee] 	      3955	ldlang.c	FUNCTION_89	IF_1
0x4006cee	            0x85c0	                           test eax, eax	      3955	ldlang.c	FUNCTION_89	IF_1
0x4006cf0	            0x7571	                           jne 0x4006d63	      3955	ldlang.c	FUNCTION_89	IF_1
0x4006cf2	    0x488b05000000	            mov rax, qword [0x04006cf9] 	      3958	ldlang.c	FUNCTION_89	FOR_1
0x4006cf9	        0x488945f0	             mov qword [rbp - 0x10], rax	      3958	ldlang.c	FUNCTION_89	FOR_1
0x4006cfd	            0xeb51	                           jmp 0x4006d50	      3958	ldlang.c	FUNCTION_89	FOR_1
0x4006cff	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3964	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d03	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3964	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d09	            0x85c0	                           test eax, eax	      3964	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d0b	            0x7833	                            js 0x4006d40	      3964	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d0d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3967	ldlang.c	FUNCTION_89	FOR_1
0x4006d11	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3967	ldlang.c	FUNCTION_89	FOR_1
0x4006d15	        0x488945f8	                mov qword [rbp - 8], rax	      3967	ldlang.c	FUNCTION_89	FOR_1
0x4006d19	      0x48837df800	                  cmp qword [rbp - 8], 0	      3968	ldlang.c	FUNCTION_89	FOR_1	IF_3
0x4006d1e	            0x7423	                            je 0x4006d43	      3968	ldlang.c	FUNCTION_89	FOR_1	IF_3
0x4006d20	        0x488b45f8	                mov rax, qword [rbp - 8]	      3972	ldlang.c	FUNCTION_89	FOR_1
0x4006d24	    0x48c780080100	              mov qword [rax + 0x108], 0	      3972	ldlang.c	FUNCTION_89	FOR_1
0x4006d2f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3973	ldlang.c	FUNCTION_89	FOR_1
0x4006d33	    0x48c780100100	              mov qword [rax + 0x110], 0	      3973	ldlang.c	FUNCTION_89	FOR_1
0x4006d3e	            0xeb04	                           jmp 0x4006d44	      3973	ldlang.c	FUNCTION_89	FOR_1
0x4006d40	              0x90	                                     nop	      3965	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d41	            0xeb01	                           jmp 0x4006d44	      3965	ldlang.c	FUNCTION_89	FOR_1	IF_2
0x4006d43	              0x90	                                     nop	      3969	ldlang.c	FUNCTION_89	FOR_1	IF_3
0x4006d44	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3960	ldlang.c	FUNCTION_89	FOR_1
0x4006d48	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3960	ldlang.c	FUNCTION_89	FOR_1
0x4006d4c	        0x488945f0	             mov qword [rbp - 0x10], rax	      3960	ldlang.c	FUNCTION_89	FOR_1
0x4006d50	      0x48837df000	               cmp qword [rbp - 0x10], 0	      3958	ldlang.c	FUNCTION_89	FOR_1
0x4006d55	            0x75a8	                           jne 0x4006cff	      3958	ldlang.c	FUNCTION_89	FOR_1
0x4006d57	    0xc70500000000	               mov dword [0x04006d61], 1	      3978	ldlang.c	FUNCTION_89
0x4006d61	            0xeb01	                           jmp 0x4006d64	      3978	ldlang.c	FUNCTION_89
0x4006d63	              0x90	                                     nop	      3956	ldlang.c	FUNCTION_89	IF_1
0x4006d64	              0x5d	                                 pop rbp	      3979	ldlang.c	FUNCTION_89
0x4006d65	              0xc3	                                     ret	      3979	ldlang.c	FUNCTION_89
lang_add_attribute	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	12
0x400d5ef	              0x55	                                push rbp	      7593	ldlang.c	FUNCTION_174
0x400d5f0	          0x4889e5	                            mov rbp, rsp	      7593	ldlang.c	FUNCTION_174
0x400d5f3	        0x4883ec10	                           sub rsp, 0x10	      7593	ldlang.c	FUNCTION_174
0x400d5f7	          0x897dfc	                mov dword [rbp - 4], edi	      7593	ldlang.c	FUNCTION_174
0x400d5fa	    0x488b15000000	            mov rdx, qword [0x0400d601] 	      7594	ldlang.c	FUNCTION_174	CALL_1
0x400d601	          0x8b45fc	                mov eax, dword [rbp - 4]	      7594	ldlang.c	FUNCTION_174	CALL_1
0x400d604	      0xbe10000000	                           mov esi, 0x10	      7594	ldlang.c	FUNCTION_174	CALL_1
0x400d609	            0x89c7	                            mov edi, eax	      7594	ldlang.c	FUNCTION_174	CALL_1
0x400d60b	      0xe85f44ffff	                  call sym.new_statement	      7594	ldlang.c	FUNCTION_174	CALL_1
0x400d610	              0x90	                                     nop	      7595	ldlang.c	FUNCTION_174
0x400d611	              0xc9	                                   leave	      7595	ldlang.c	FUNCTION_174
0x400d612	              0xc3	                                     ret	      7595	ldlang.c	FUNCTION_174
next_matching_output_section_statement	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,1:WHILE,0:SWITCH,0	43
0x400267b	              0x55	                                push rbp	      1496	ldlang.c	FUNCTION_46
0x400267c	          0x4889e5	                            mov rbp, rsp	      1496	ldlang.c	FUNCTION_46
0x400267f	        0x4883ec20	                           sub rsp, 0x20	      1496	ldlang.c	FUNCTION_46
0x4002683	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1496	ldlang.c	FUNCTION_46
0x4002687	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1496	ldlang.c	FUNCTION_46
0x400268a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1499	ldlang.c	FUNCTION_46
0x400268e	        0x4883e818	                           sub rax, 0x18	      1499	ldlang.c	FUNCTION_46
0x4002692	        0x488945f0	             mov qword [rbp - 0x10], rax	      1499	ldlang.c	FUNCTION_46
0x4002696	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1502	ldlang.c	FUNCTION_46
0x400269a	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1502	ldlang.c	FUNCTION_46
0x400269e	        0x488945f8	                mov qword [rbp - 8], rax	      1502	ldlang.c	FUNCTION_46
0x40026a2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026a6	        0x488b4008	                mov rax, qword [rax + 8]	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026aa	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026ae	            0x740f	                            je 0x40026bf	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026b0	      0xbee0050000	                          mov esi, 0x5e0	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026b5	      0xbf00000000	                              mov edi, 0	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026ba	      0xe800000000	                          call 0x40026bf	      1504	ldlang.c	FUNCTION_46	CALL_1
0x40026bf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1507	ldlang.c	FUNCTION_46	DO_1
0x40026c3	          0x488b00	                    mov rax, qword [rax]	      1507	ldlang.c	FUNCTION_46	DO_1
0x40026c6	        0x488945f0	             mov qword [rbp - 0x10], rax	      1507	ldlang.c	FUNCTION_46	DO_1
0x40026ca	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1508	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026cf	            0x740e	                            je 0x40026df	      1508	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026d1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1509	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026d5	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1509	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026d9	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1509	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026dd	            0x7407	                            je 0x40026e6	      1509	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026df	      0xb800000000	                              mov eax, 0	      1510	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026e4	            0xeb2b	                           jmp 0x4002711	      1510	ldlang.c	FUNCTION_46	DO_1	IF_1
0x40026e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1512	ldlang.c	FUNCTION_46
0x40026ea	    0x8b809c000000	            mov eax, dword [rax + 0x9c] 	      1512	ldlang.c	FUNCTION_46
0x40026f0	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      1514	ldlang.c	FUNCTION_46
0x40026f3	            0x7414	                            je 0x4002709	      1514	ldlang.c	FUNCTION_46
0x40026f5	        0x837de400	               cmp dword [rbp - 0x1c], 0	      1513	ldlang.c	FUNCTION_46
0x40026f9	            0x75c4	                           jne 0x40026bf	      1513	ldlang.c	FUNCTION_46
0x40026fb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1514	ldlang.c	FUNCTION_46
0x40026ff	    0x8b809c000000	            mov eax, dword [rax + 0x9c] 	      1514	ldlang.c	FUNCTION_46
0x4002705	            0x85c0	                           test eax, eax	      1514	ldlang.c	FUNCTION_46
0x4002707	            0x78b6	                            js 0x40026bf	      1514	ldlang.c	FUNCTION_46
0x4002709	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1516	ldlang.c	FUNCTION_46
0x400270d	        0x4883c018	                           add rax, 0x18	      1516	ldlang.c	FUNCTION_46
0x4002711	              0xc9	                                   leave	      1517	ldlang.c	FUNCTION_46
0x4002712	              0xc3	                                     ret	      1517	ldlang.c	FUNCTION_46
lang_find_relro_sections_1	functions,0:ELSE,0:FOR,1:CALL,4:IF,2:DO,0:WHILE,0:SWITCH,1	69
0x400c666	              0x55	                                push rbp	      6879	ldlang.c	FUNCTION_153
0x400c667	          0x4889e5	                            mov rbp, rsp	      6879	ldlang.c	FUNCTION_153
0x400c66a	        0x4883ec20	                           sub rsp, 0x20	      6879	ldlang.c	FUNCTION_153
0x400c66e	        0x48897df8	                mov qword [rbp - 8], rdi	      6879	ldlang.c	FUNCTION_153
0x400c672	        0x488975f0	             mov qword [rbp - 0x10], rsi	      6879	ldlang.c	FUNCTION_153
0x400c676	        0x488955e8	             mov qword [rbp - 0x18], rdx	      6879	ldlang.c	FUNCTION_153
0x400c67a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6880	ldlang.c	FUNCTION_153	IF_1
0x400c67e	            0x8b00	                    mov eax, dword [rax]	      6880	ldlang.c	FUNCTION_153	IF_1
0x400c680	            0x85c0	                           test eax, eax	      6880	ldlang.c	FUNCTION_153	IF_1
0x400c682	     0xf85be000000	                           jne 0x400c746	      6880	ldlang.c	FUNCTION_153	IF_1
0x400c688	      0xe9ac000000	                           jmp 0x400c739	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c68d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6885	ldlang.c	FUNCTION_153	FOR_1	IF_2
0x400c691	        0x488b4048	            mov rax, qword [rax + 0x48] 	      6885	ldlang.c	FUNCTION_153	FOR_1	IF_2
0x400c695	        0x483b45f8	                cmp rax, qword [rbp - 8]	      6885	ldlang.c	FUNCTION_153	FOR_1	IF_2
0x400c699	     0xf84aa000000	                            je 0x400c749	      6885	ldlang.c	FUNCTION_153	FOR_1	IF_2
0x400c69f	        0x488b45f8	                mov rax, qword [rbp - 8]	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6a3	          0x8b4008	                mov eax, dword [rax + 8]	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6a6	          0x83f804	                              cmp eax, 4	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6a9	            0x7417	                            je 0x400c6c2	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6ab	          0x83f804	                              cmp eax, 4	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6ae	            0x7706	                            ja 0x400c6b6	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6b0	            0x85c0	                           test eax, eax	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6b2	            0x7441	                            je 0x400c6f5	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6b4	            0xeb78	                           jmp 0x400c72e	      6908	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6b6	          0x83f80d	                            cmp eax, 0xd	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6b9	            0x7457	                            je 0x400c712	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6bb	          0x83f80f	                            cmp eax, 0xf	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6be	            0x7419	                            je 0x400c6d9	      6888	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6c0	            0xeb6c	                           jmp 0x400c72e	      6908	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6c2	        0x488b45f8	                mov rax, qword [rbp - 8]	      6891	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_1
0x400c6c6	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      6891	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_1
0x400c6ca	      0xbe00000000	                              mov esi, 0	      6891	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_1
0x400c6cf	          0x4889c7	                            mov rdi, rax	      6891	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_1
0x400c6d2	      0xe85a50ffff	                      call sym.walk_wild	      6891	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_1
0x400c6d7	            0xeb55	                           jmp 0x400c72e	      6894	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6d9	    0x488b05000000	            mov rax, qword [0x0400c6e0] 	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6e0	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6e4	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6e8	          0x4889ce	                            mov rsi, rcx	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6eb	          0x4889c7	                            mov rdi, rax	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6ee	      0xe873ffffff	     call sym.lang_find_relro_sections_1	      6896	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_2
0x400c6f3	            0xeb39	                           jmp 0x400c72e	      6898	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c6f5	        0x488b45f8	                mov rax, qword [rbp - 8]	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c6f9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c6fd	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c701	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c705	          0x4889ce	                            mov rsi, rcx	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c708	          0x4889c7	                            mov rdi, rax	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c70b	      0xe856ffffff	     call sym.lang_find_relro_sections_1	      6900	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_3
0x400c710	            0xeb1c	                           jmp 0x400c72e	      6902	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c712	        0x488b45f8	                mov rax, qword [rbp - 8]	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c716	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c71a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c71e	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c722	          0x4889ce	                            mov rsi, rcx	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c725	          0x4889c7	                            mov rdi, rax	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c728	      0xe839ffffff	     call sym.lang_find_relro_sections_1	      6904	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1	CALL_4
0x400c72d	              0x90	                                     nop	      6906	ldlang.c	FUNCTION_153	FOR_1	SWITCH_1
0x400c72e	        0x488b45f8	                mov rax, qword [rbp - 8]	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c732	          0x488b00	                    mov rax, qword [rax]	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c735	        0x488945f8	                mov qword [rbp - 8], rax	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c739	      0x48837df800	                  cmp qword [rbp - 8], 0	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c73e	     0xf8549ffffff	                           jne 0x400c68d	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c744	            0xeb04	                           jmp 0x400c74a	      6883	ldlang.c	FUNCTION_153	FOR_1
0x400c746	              0x90	                                     nop	      6881	ldlang.c	FUNCTION_153	IF_1
0x400c747	            0xeb01	                           jmp 0x400c74a	      6881	ldlang.c	FUNCTION_153	IF_1
0x400c749	              0x90	                                     nop	      6886	ldlang.c	FUNCTION_153	FOR_1	IF_2
0x400c74a	              0xc9	                                   leave	      6911	ldlang.c	FUNCTION_153
0x400c74b	              0xc3	                                     ret	      6911	ldlang.c	FUNCTION_153
lang_vers_match	functions,0:ELSE,6:FOR,1:CALL,15:IF,21:DO,0:WHILE,3:SWITCH,1	291
0x400e3de	              0x55	                                push rbp	      8126	ldlang.c	FUNCTION_192
0x400e3df	          0x4889e5	                            mov rbp, rsp	      8126	ldlang.c	FUNCTION_192
0x400e3e2	        0x4883ec70	                           sub rsp, 0x70	      8126	ldlang.c	FUNCTION_192
0x400e3e6	        0x48897da8	             mov qword [rbp - 0x58], rdi	      8126	ldlang.c	FUNCTION_192
0x400e3ea	        0x488975a0	             mov qword [rbp - 0x60], rsi	      8126	ldlang.c	FUNCTION_192
0x400e3ee	        0x48895598	             mov qword [rbp - 0x68], rdx	      8126	ldlang.c	FUNCTION_192
0x400e3f2	    0x64488b042528	                mov rax, qword fs:[0x28]	      8126	ldlang.c	FUNCTION_192
0x400e3fb	        0x488945f8	                mov qword [rbp - 8], rax	      8126	ldlang.c	FUNCTION_192
0x400e3ff	            0x31c0	                            xor eax, eax	      8126	ldlang.c	FUNCTION_192
0x400e401	        0x488b4598	             mov rax, qword [rbp - 0x68]	      8128	ldlang.c	FUNCTION_192
0x400e405	        0x488945c0	             mov qword [rbp - 0x40], rax	      8128	ldlang.c	FUNCTION_192
0x400e409	        0x488b4598	             mov rax, qword [rbp - 0x68]	      8129	ldlang.c	FUNCTION_192
0x400e40d	        0x488945c8	             mov qword [rbp - 0x38], rax	      8129	ldlang.c	FUNCTION_192
0x400e411	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      8130	ldlang.c	FUNCTION_192
0x400e419	    0x8b0500000000	            mov eax, dword [0x0400e41f] 	      8133	ldlang.c	FUNCTION_192
0x400e41f	          0x8945b4	             mov dword [rbp - 0x4c], eax	      8133	ldlang.c	FUNCTION_192
0x400e422	      0xbfffffffff	                     mov edi, 0xffffffff	      8134	ldlang.c	FUNCTION_192	CALL_1
0x400e427	      0xe800000000	                          call 0x400e42c	      8134	ldlang.c	FUNCTION_192	CALL_1
0x400e42c	    0x488b05000000	            mov rax, qword [0x0400e433] 	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e433	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e437	      0xba00000000	                              mov edx, 0	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e43c	          0x4889ce	                            mov rsi, rcx	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e43f	          0x4889c7	                            mov rdi, rax	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e442	      0xe800000000	                          call 0x400e447	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e447	        0x488945b8	             mov qword [rbp - 0x48], rax	      8135	ldlang.c	FUNCTION_192	CALL_2
0x400e44b	      0x48837db800	               cmp qword [rbp - 0x48], 0	      8136	ldlang.c	FUNCTION_192	IF_1
0x400e450	            0x7508	                           jne 0x400e45a	      8136	ldlang.c	FUNCTION_192	IF_1
0x400e452	        0x488b4598	             mov rax, qword [rbp - 0x68]	      8137	ldlang.c	FUNCTION_192	IF_1
0x400e456	        0x488945b8	             mov qword [rbp - 0x48], rax	      8137	ldlang.c	FUNCTION_192	IF_1
0x400e45a	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      8138	ldlang.c	FUNCTION_192	CALL_3
0x400e45d	            0x89c7	                            mov edi, eax	      8138	ldlang.c	FUNCTION_192	CALL_3
0x400e45f	      0xe800000000	                          call 0x400e464	      8138	ldlang.c	FUNCTION_192	CALL_3
0x400e464	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8140	ldlang.c	FUNCTION_192	IF_2
0x400e468	          0x8b4018	            mov eax, dword [rax + 0x18] 	      8140	ldlang.c	FUNCTION_192	IF_2
0x400e46b	          0x83e002	                              and eax, 2	      8140	ldlang.c	FUNCTION_192	IF_2
0x400e46e	            0x85c0	                           test eax, eax	      8140	ldlang.c	FUNCTION_192	IF_2
0x400e470	            0x742e	                            je 0x400e4a0	      8140	ldlang.c	FUNCTION_192	IF_2
0x400e472	    0x488b05000000	            mov rax, qword [0x0400e479] 	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e479	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e47d	      0xba03000000	                              mov edx, 3	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e482	          0x4889ce	                            mov rsi, rcx	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e485	          0x4889c7	                            mov rdi, rax	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e488	      0xe800000000	                          call 0x400e48d	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e48d	        0x488945c0	             mov qword [rbp - 0x40], rax	      8142	ldlang.c	FUNCTION_192	IF_2	CALL_4
0x400e491	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      8144	ldlang.c	FUNCTION_192	IF_2	IF_3
0x400e496	            0x7508	                           jne 0x400e4a0	      8144	ldlang.c	FUNCTION_192	IF_2	IF_3
0x400e498	        0x488b4598	             mov rax, qword [rbp - 0x68]	      8145	ldlang.c	FUNCTION_192	IF_2	IF_3
0x400e49c	        0x488945c0	             mov qword [rbp - 0x40], rax	      8145	ldlang.c	FUNCTION_192	IF_2	IF_3
0x400e4a0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8147	ldlang.c	FUNCTION_192	IF_4
0x400e4a4	          0x8b4018	            mov eax, dword [rax + 0x18] 	      8147	ldlang.c	FUNCTION_192	IF_4
0x400e4a7	          0x83e004	                              and eax, 4	      8147	ldlang.c	FUNCTION_192	IF_4
0x400e4aa	            0x85c0	                           test eax, eax	      8147	ldlang.c	FUNCTION_192	IF_4
0x400e4ac	            0x742e	                            je 0x400e4dc	      8147	ldlang.c	FUNCTION_192	IF_4
0x400e4ae	    0x488b05000000	            mov rax, qword [0x0400e4b5] 	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4b5	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4b9	      0xba04000000	                              mov edx, 4	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4be	          0x4889ce	                            mov rsi, rcx	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4c1	          0x4889c7	                            mov rdi, rax	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4c4	      0xe800000000	                          call 0x400e4c9	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4c9	        0x488945c8	             mov qword [rbp - 0x38], rax	      8149	ldlang.c	FUNCTION_192	IF_4	CALL_5
0x400e4cd	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8150	ldlang.c	FUNCTION_192	IF_4	IF_5
0x400e4d2	            0x7508	                           jne 0x400e4dc	      8150	ldlang.c	FUNCTION_192	IF_4	IF_5
0x400e4d4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      8151	ldlang.c	FUNCTION_192	IF_4	IF_5
0x400e4d8	        0x488945c8	             mov qword [rbp - 0x38], rax	      8151	ldlang.c	FUNCTION_192	IF_4	IF_5
0x400e4dc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4e0	        0x488b4008	                mov rax, qword [rax + 8]	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4e4	          0x4885c0	                           test rax, rax	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4e7	     0xf84af010000	                            je 0x400e69c	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4ed	      0x48837da000	               cmp qword [rbp - 0x60], 0	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4f2	            0x7413	                            je 0x400e507	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4f4	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4f8	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4fc	          0x83e001	                              and eax, 1	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e4ff	            0x84c0	                             test al, al	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e501	     0xf8495010000	                            je 0x400e69c	      8154	ldlang.c	FUNCTION_192	IF_6
0x400e507	      0x48837da000	               cmp qword [rbp - 0x60], 0	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e50c	            0x7413	                            je 0x400e521	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e50e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e512	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e516	          0xc0e803	                               shr al, 3	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e519	          0x83e007	                              and eax, 7	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e51c	           0xfb6c0	                           movzx eax, al	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e51f	            0xeb05	                           jmp 0x400e526	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e521	      0xb800000000	                              mov eax, 0	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e526	          0x83f801	                              cmp eax, 1	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e529	     0xf8485000000	                            je 0x400e5b4	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e52f	          0x83f802	                              cmp eax, 2	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e532	     0xf84ef000000	                            je 0x400e627	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e538	            0x85c0	                           test eax, eax	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e53a	            0x7405	                            je 0x400e541	      8158	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e53c	      0xe95a010000	                           jmp 0x400e69b	      8200	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e541	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8161	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e545	          0x8b4018	            mov eax, dword [rax + 0x18] 	      8161	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e548	          0x83e001	                              and eax, 1	      8161	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e54b	            0x85c0	                           test eax, eax	      8161	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e54d	            0x7465	                            je 0x400e5b4	      8161	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e54f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8163	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e553	        0x488945e8	             mov qword [rbp - 0x18], rax	      8163	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e557	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8165	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	CALL_6
0x400e55b	        0x488b4008	                mov rax, qword [rax + 8]	      8165	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	CALL_6
0x400e55f	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      8164	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e563	          0x4889d6	                            mov rsi, rdx	      8164	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e566	          0x4889c7	                            mov rdi, rax	      8164	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e569	      0xe800000000	                          call 0x400e56e	      8164	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e56e	        0x488945d0	             mov qword [rbp - 0x30], rax	      8164	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7
0x400e572	            0xeb1e	                           jmp 0x400e592	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e574	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8167	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e578	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8167	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e57c	          0x83e038	                           and eax, 0x38	      8167	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e57f	            0x3c08	                               cmp al, 8	      8167	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e581	     0xf84ed010000	                            je 0x400e774	      8167	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e587	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8170	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	ELSE_1
0x400e58b	          0x488b00	                    mov rax, qword [rax]	      8170	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	ELSE_1
0x400e58e	        0x488945d0	             mov qword [rbp - 0x30], rax	      8170	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	ELSE_1
0x400e592	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e597	            0x741b	                            je 0x400e5b4	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e599	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e59d	        0x488b4008	                mov rax, qword [rax + 8]	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5a1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5a5	          0x4889d6	                            mov rsi, rdx	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5a8	          0x4889c7	                            mov rdi, rax	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5ab	      0xe800000000	                          call 0x400e5b0	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5b0	            0x85c0	                           test eax, eax	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5b2	            0x74c0	                            je 0x400e574	      8166	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	CALL_7
0x400e5b4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8174	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5b8	          0x8b4018	            mov eax, dword [rax + 0x18] 	      8174	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5bb	          0x83e002	                              and eax, 2	      8174	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5be	            0x85c0	                           test eax, eax	      8174	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5c0	            0x7465	                            je 0x400e627	      8174	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5c2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      8176	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5c6	        0x488945e8	             mov qword [rbp - 0x18], rax	      8176	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5ca	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8178	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	CALL_8
0x400e5ce	        0x488b4008	                mov rax, qword [rax + 8]	      8178	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	CALL_8
0x400e5d2	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      8177	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5d6	          0x4889d6	                            mov rsi, rdx	      8177	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5d9	          0x4889c7	                            mov rdi, rax	      8177	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5dc	      0xe800000000	                          call 0x400e5e1	      8177	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5e1	        0x488945d0	             mov qword [rbp - 0x30], rax	      8177	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9
0x400e5e5	            0xeb1e	                           jmp 0x400e605	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e5e7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8180	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e5eb	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8180	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e5ef	          0x83e038	                           and eax, 0x38	      8180	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e5f2	            0x3c10	                            cmp al, 0x10	      8180	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e5f4	     0xf847d010000	                            je 0x400e777	      8180	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e5fa	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8183	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	ELSE_2
0x400e5fe	          0x488b00	                    mov rax, qword [rax]	      8183	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	ELSE_2
0x400e601	        0x488945d0	             mov qword [rbp - 0x30], rax	      8183	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	ELSE_2
0x400e605	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e60a	            0x741b	                            je 0x400e627	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e60c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e610	        0x488b4008	                mov rax, qword [rax + 8]	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e614	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e618	          0x4889d6	                            mov rsi, rdx	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e61b	          0x4889c7	                            mov rdi, rax	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e61e	      0xe800000000	                          call 0x400e623	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e623	            0x85c0	                           test eax, eax	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e625	            0x74c0	                            je 0x400e5e7	      8179	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	CALL_9
0x400e627	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8187	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e62b	          0x8b4018	            mov eax, dword [rax + 0x18] 	      8187	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e62e	          0x83e004	                              and eax, 4	      8187	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e631	            0x85c0	                           test eax, eax	      8187	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e633	            0x7466	                            je 0x400e69b	      8187	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e635	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8189	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e639	        0x488945e8	             mov qword [rbp - 0x18], rax	      8189	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e63d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8191	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	CALL_10
0x400e641	        0x488b4008	                mov rax, qword [rax + 8]	      8191	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	CALL_10
0x400e645	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      8190	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e649	          0x4889d6	                            mov rsi, rdx	      8190	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e64c	          0x4889c7	                            mov rdi, rax	      8190	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e64f	      0xe800000000	                          call 0x400e654	      8190	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e654	        0x488945d0	             mov qword [rbp - 0x30], rax	      8190	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11
0x400e658	            0xeb1e	                           jmp 0x400e678	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e65a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8193	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e65e	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8193	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e662	          0x83e038	                           and eax, 0x38	      8193	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e665	            0x3c20	                            cmp al, 0x20	      8193	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e667	     0xf840d010000	                            je 0x400e77a	      8193	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e66d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8196	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	ELSE_3
0x400e671	          0x488b00	                    mov rax, qword [rax]	      8196	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	ELSE_3
0x400e674	        0x488945d0	             mov qword [rbp - 0x30], rax	      8196	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	ELSE_3
0x400e678	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e67d	            0x741c	                            je 0x400e69b	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e67f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e683	        0x488b4008	                mov rax, qword [rax + 8]	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e687	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e68b	          0x4889d6	                            mov rsi, rdx	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e68e	          0x4889c7	                            mov rdi, rax	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e691	      0xe800000000	                          call 0x400e696	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e696	            0x85c0	                           test eax, eax	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e698	            0x74c0	                            je 0x400e65a	      8192	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	CALL_11
0x400e69a	              0x90	                                     nop	      8200	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e69b	              0x90	                                     nop	      8200	ldlang.c	FUNCTION_192	IF_6	SWITCH_1
0x400e69c	      0x48837da000	               cmp qword [rbp - 0x60], 0	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6a1	            0x740f	                            je 0x400e6b2	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6a3	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6a7	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6ab	          0x83e001	                              and eax, 1	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6ae	            0x84c0	                             test al, al	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6b0	            0x740e	                            je 0x400e6c0	      8205	ldlang.c	FUNCTION_192	IF_13
0x400e6b2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      8206	ldlang.c	FUNCTION_192	IF_13
0x400e6b6	        0x488b4010	            mov rax, qword [rax + 0x10] 	      8206	ldlang.c	FUNCTION_192	IF_13
0x400e6ba	        0x488945d0	             mov qword [rbp - 0x30], rax	      8206	ldlang.c	FUNCTION_192	IF_13
0x400e6be	            0xeb0b	                           jmp 0x400e6cb	      8206	ldlang.c	FUNCTION_192	IF_13
0x400e6c0	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      8208	ldlang.c	FUNCTION_192	ELSE_4
0x400e6c4	          0x488b00	                    mov rax, qword [rax]	      8208	ldlang.c	FUNCTION_192	ELSE_4
0x400e6c7	        0x488945d0	             mov qword [rbp - 0x30], rax	      8208	ldlang.c	FUNCTION_192	ELSE_4
0x400e6cb	      0xe997000000	                           jmp 0x400e767	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e6d0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8213	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_14
0x400e6d4	        0x488b4008	                mov rax, qword [rax + 8]	      8213	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_14
0x400e6d8	          0x4885c0	                           test rax, rax	      8213	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_14
0x400e6db	            0x747e	                            je 0x400e75b	      8213	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_14
0x400e6dd	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6e1	        0x488b4008	                mov rax, qword [rax + 8]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6e5	           0xfb600	                   movzx eax, byte [rax]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6e8	            0x3c2a	                            cmp al, 0x2a	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6ea	            0x7513	                           jne 0x400e6ff	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6ec	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6f0	        0x488b4008	                mov rax, qword [rax + 8]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6f4	        0x4883c001	                              add rax, 1	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6f8	           0xfb600	                   movzx eax, byte [rax]	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6fb	            0x84c0	                             test al, al	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6fd	            0x747e	                            je 0x400e77d	      8216	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e6ff	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8219	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e703	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8219	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e707	          0x83e038	                           and eax, 0x38	      8219	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e70a	            0x3c20	                            cmp al, 0x20	      8219	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e70c	            0x750a	                           jne 0x400e718	      8219	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e70e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8220	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e712	        0x488945d8	             mov qword [rbp - 0x28], rax	      8220	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e716	            0xeb21	                           jmp 0x400e739	      8220	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_16
0x400e718	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8221	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e71c	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8221	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e720	          0x83e038	                           and eax, 0x38	      8221	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e723	            0x3c10	                            cmp al, 0x10	      8221	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e725	            0x750a	                           jne 0x400e731	      8221	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e727	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      8222	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e72b	        0x488945d8	             mov qword [rbp - 0x28], rax	      8222	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e72f	            0xeb08	                           jmp 0x400e739	      8222	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_5	IF_17
0x400e731	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8224	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_6
0x400e735	        0x488945d8	             mov qword [rbp - 0x28], rax	      8224	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	ELSE_6
0x400e739	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e73d	        0x488b4008	                mov rax, qword [rax + 8]	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e741	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e745	      0xba00000000	                              mov edx, 0	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e74a	          0x4889ce	                            mov rsi, rcx	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e74d	          0x4889c7	                            mov rdi, rax	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e750	      0xe800000000	                          call 0x400e755	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e755	            0x85c0	                           test eax, eax	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e757	            0x7427	                            je 0x400e780	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e759	            0xeb01	                           jmp 0x400e75c	      8225	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18	CALL_12
0x400e75b	              0x90	                                     nop	      8214	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_14
0x400e75c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e760	          0x488b00	                    mov rax, qword [rax]	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e763	        0x488945d0	             mov qword [rbp - 0x30], rax	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e767	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e76c	     0xf855effffff	                           jne 0x400e6d0	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e772	            0xeb0d	                           jmp 0x400e781	      8209	ldlang.c	FUNCTION_192	ELSE_4	FOR_1
0x400e774	              0x90	                                     nop	      8168	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e775	            0xeb0a	                           jmp 0x400e781	      8168	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	IF_7	WHILE_1	IF_8
0x400e777	              0x90	                                     nop	      8181	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e778	            0xeb07	                           jmp 0x400e781	      8181	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_1	IF_9	WHILE_2	IF_10
0x400e77a	              0x90	                                     nop	      8194	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e77b	            0xeb04	                           jmp 0x400e781	      8194	ldlang.c	FUNCTION_192	IF_6	SWITCH_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400e77d	              0x90	                                     nop	      8217	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e77e	            0xeb01	                           jmp 0x400e781	      8217	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_15
0x400e780	              0x90	                                     nop	      8226	ldlang.c	FUNCTION_192	ELSE_4	FOR_1	IF_18
0x400e781	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8230	ldlang.c	FUNCTION_192	IF_19
0x400e785	        0x483b4598	             cmp rax, qword [rbp - 0x68]	      8230	ldlang.c	FUNCTION_192	IF_19
0x400e789	            0x740c	                            je 0x400e797	      8230	ldlang.c	FUNCTION_192	IF_19
0x400e78b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8231	ldlang.c	FUNCTION_192	CALL_13
0x400e78f	          0x4889c7	                            mov rdi, rax	      8231	ldlang.c	FUNCTION_192	CALL_13
0x400e792	      0xe800000000	                          call 0x400e797	      8231	ldlang.c	FUNCTION_192	CALL_13
0x400e797	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      8232	ldlang.c	FUNCTION_192	IF_20
0x400e79b	        0x483b4598	             cmp rax, qword [rbp - 0x68]	      8232	ldlang.c	FUNCTION_192	IF_20
0x400e79f	            0x740c	                            je 0x400e7ad	      8232	ldlang.c	FUNCTION_192	IF_20
0x400e7a1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      8233	ldlang.c	FUNCTION_192	CALL_14
0x400e7a5	          0x4889c7	                            mov rdi, rax	      8233	ldlang.c	FUNCTION_192	CALL_14
0x400e7a8	      0xe800000000	                          call 0x400e7ad	      8233	ldlang.c	FUNCTION_192	CALL_14
0x400e7ad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8234	ldlang.c	FUNCTION_192	IF_21
0x400e7b1	        0x483b4598	             cmp rax, qword [rbp - 0x68]	      8234	ldlang.c	FUNCTION_192	IF_21
0x400e7b5	            0x740c	                            je 0x400e7c3	      8234	ldlang.c	FUNCTION_192	IF_21
0x400e7b7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8235	ldlang.c	FUNCTION_192	CALL_15
0x400e7bb	          0x4889c7	                            mov rdi, rax	      8235	ldlang.c	FUNCTION_192	CALL_15
0x400e7be	      0xe800000000	                          call 0x400e7c3	      8235	ldlang.c	FUNCTION_192	CALL_15
0x400e7c3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8236	ldlang.c	FUNCTION_192
0x400e7c7	        0x488b4df8	                mov rcx, qword [rbp - 8]	      8237	ldlang.c	FUNCTION_192
0x400e7cb	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      8237	ldlang.c	FUNCTION_192
0x400e7d4	            0x7405	                            je 0x400e7db	      8237	ldlang.c	FUNCTION_192
0x400e7d6	      0xe800000000	                          call 0x400e7db	      8237	ldlang.c	FUNCTION_192
0x400e7db	              0xc9	                                   leave	      8237	ldlang.c	FUNCTION_192
0x400e7dc	              0xc3	                                     ret	      8237	ldlang.c	FUNCTION_192
lang_discard_section_p	functions,0:ELSE,0:FOR,0:CALL,0:IF,2:DO,0:WHILE,0:SWITCH,0	37
0x4004093	              0x55	                                push rbp	      2283	ldlang.c	FUNCTION_58
0x4004094	          0x4889e5	                            mov rbp, rsp	      2283	ldlang.c	FUNCTION_58
0x4004097	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2283	ldlang.c	FUNCTION_58
0x400409b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2285	ldlang.c	FUNCTION_58
0x400409f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2285	ldlang.c	FUNCTION_58
0x40040a2	          0x8945fc	                mov dword [rbp - 4], eax	      2285	ldlang.c	FUNCTION_58
0x40040a5	          0x8b45fc	                mov eax, dword [rbp - 4]	      2288	ldlang.c	FUNCTION_58
0x40040a8	      0x2500800000	                         and eax, 0x8000	      2288	ldlang.c	FUNCTION_58
0x40040ad	            0x85c0	                           test eax, eax	      2288	ldlang.c	FUNCTION_58
0x40040af	           0xf95c0	                                setne al	      2288	ldlang.c	FUNCTION_58
0x40040b2	           0xfb6c0	                           movzx eax, al	      2288	ldlang.c	FUNCTION_58
0x40040b5	          0x8945f8	                mov dword [rbp - 8], eax	      2288	ldlang.c	FUNCTION_58
0x40040b8	          0x8b45fc	                mov eax, dword [rbp - 4]	      2292	ldlang.c	FUNCTION_58	IF_1
0x40040bb	      0x2500000002	                      and eax, 0x2000000	      2292	ldlang.c	FUNCTION_58	IF_1
0x40040c0	            0x85c0	                           test eax, eax	      2292	ldlang.c	FUNCTION_58	IF_1
0x40040c2	            0x7415	                            je 0x40040d9	      2292	ldlang.c	FUNCTION_58	IF_1
0x40040c4	     0xfb605000000	           movzx eax, byte [0x040040cb] 	      2293	ldlang.c	FUNCTION_58	IF_1
0x40040cb	          0x83e010	                           and eax, 0x10	      2293	ldlang.c	FUNCTION_58	IF_1
0x40040ce	            0x84c0	                             test al, al	      2293	ldlang.c	FUNCTION_58	IF_1
0x40040d0	            0x7407	                            je 0x40040d9	      2293	ldlang.c	FUNCTION_58	IF_1
0x40040d2	    0xc745f8010000	                  mov dword [rbp - 8], 1	      2294	ldlang.c	FUNCTION_58	IF_1
0x40040d9	     0xfb605000000	           movzx eax, byte [0x040040e0] 	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040e0	          0x83e060	                           and eax, 0x60	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040e3	            0x3c20	                            cmp al, 0x20	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040e5	            0x740e	                            je 0x40040f5	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040e7	     0xfb605000000	           movzx eax, byte [0x040040ee] 	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040ee	          0x83e060	                           and eax, 0x60	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040f1	            0x3c60	                            cmp al, 0x60	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040f3	            0x7513	                           jne 0x4004108	      2298	ldlang.c	FUNCTION_58	IF_2
0x40040f5	          0x8b45fc	                mov eax, dword [rbp - 4]	      2299	ldlang.c	FUNCTION_58	IF_2
0x40040f8	      0x2500200000	                         and eax, 0x2000	      2299	ldlang.c	FUNCTION_58	IF_2
0x40040fd	            0x85c0	                           test eax, eax	      2299	ldlang.c	FUNCTION_58	IF_2
0x40040ff	            0x7407	                            je 0x4004108	      2299	ldlang.c	FUNCTION_58	IF_2
0x4004101	    0xc745f8010000	                  mov dword [rbp - 8], 1	      2300	ldlang.c	FUNCTION_58	IF_2
0x4004108	          0x8b45f8	                mov eax, dword [rbp - 8]	      2302	ldlang.c	FUNCTION_58
0x400410b	              0x5d	                                 pop rbp	      2303	ldlang.c	FUNCTION_58
0x400410c	              0xc3	                                     ret	      2303	ldlang.c	FUNCTION_58
lang_finish	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	6
0x4002114	              0x55	                                push rbp	      1272	ldlang.c	FUNCTION_40
0x4002115	          0x4889e5	                            mov rbp, rsp	      1272	ldlang.c	FUNCTION_40
0x4002118	      0xe828ffffff	call sym.output_section_statement_table_free	      1273	ldlang.c	FUNCTION_40	CALL_1
0x400211d	              0x90	                                     nop	      1274	ldlang.c	FUNCTION_40
0x400211e	              0x5d	                                 pop rbp	      1274	ldlang.c	FUNCTION_40
0x400211f	              0xc3	                                     ret	      1274	ldlang.c	FUNCTION_40
walk_wild_section_specs2_wild1	functions,0:ELSE,1:FOR,1:CALL,5:IF,3:DO,0:WHILE,0:SWITCH,0	88
0x4000db3	              0x55	                                push rbp	       610	ldlang.c	FUNCTION_20
0x4000db4	          0x4889e5	                            mov rbp, rsp	       610	ldlang.c	FUNCTION_20
0x4000db7	        0x4883ec60	                           sub rsp, 0x60	       610	ldlang.c	FUNCTION_20
0x4000dbb	        0x48897db8	             mov qword [rbp - 0x48], rdi	       610	ldlang.c	FUNCTION_20
0x4000dbf	        0x488975b0	             mov qword [rbp - 0x50], rsi	       610	ldlang.c	FUNCTION_20
0x4000dc3	        0x488955a8	             mov qword [rbp - 0x58], rdx	       610	ldlang.c	FUNCTION_20
0x4000dc7	        0x48894da0	             mov qword [rbp - 0x60], rcx	       610	ldlang.c	FUNCTION_20
0x4000dcb	    0x64488b042528	                mov rax, qword fs:[0x28]	       610	ldlang.c	FUNCTION_20
0x4000dd4	        0x488945f8	                mov qword [rbp - 8], rax	       610	ldlang.c	FUNCTION_20
0x4000dd8	            0x31c0	                            xor eax, eax	       610	ldlang.c	FUNCTION_20
0x4000dda	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       612	ldlang.c	FUNCTION_20
0x4000dde	        0x488b4050	            mov rax, qword [rax + 0x50] 	       612	ldlang.c	FUNCTION_20
0x4000de2	        0x488945d8	             mov qword [rbp - 0x28], rax	       612	ldlang.c	FUNCTION_20
0x4000de6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       613	ldlang.c	FUNCTION_20
0x4000dea	        0x488b4058	            mov rax, qword [rax + 0x58] 	       613	ldlang.c	FUNCTION_20
0x4000dee	        0x488945e0	             mov qword [rbp - 0x20], rax	       613	ldlang.c	FUNCTION_20
0x4000df2	        0x488d55c8	                   lea rdx, [rbp - 0x38]	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000df6	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000dfa	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000dfe	          0x4889ce	                            mov rsi, rcx	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000e01	          0x4889c7	                            mov rdi, rax	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000e04	      0xe8b4f8ffff	                   call sym.find_section	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000e09	        0x488945e8	             mov qword [rbp - 0x18], rax	       615	ldlang.c	FUNCTION_20	CALL_1
0x4000e0d	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       617	ldlang.c	FUNCTION_20	IF_1
0x4000e10	            0x85c0	                           test eax, eax	       617	ldlang.c	FUNCTION_20	IF_1
0x4000e12	            0x741d	                            je 0x4000e31	       617	ldlang.c	FUNCTION_20	IF_1
0x4000e14	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e18	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e1c	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e20	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e24	          0x4889c7	                            mov rdi, rax	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e27	      0xe845f7ffff	      call sym.walk_wild_section_general	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e2c	      0xe9ba000000	                           jmp 0x4000eeb	       619	ldlang.c	FUNCTION_20	IF_1	CALL_2
0x4000e31	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000e35	        0x488b4020	            mov rax, qword [rax + 0x20] 	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000e39	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000e40	        0x488945d0	             mov qword [rbp - 0x30], rax	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000e44	      0xe997000000	                           jmp 0x4000ee0	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000e49	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       630	ldlang.c	FUNCTION_20	FOR_1	IF_2
0x4000e4d	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       630	ldlang.c	FUNCTION_20	FOR_1	IF_2
0x4000e51	            0x7528	                           jne 0x4000e7b	       630	ldlang.c	FUNCTION_20	FOR_1	IF_2
0x4000e53	        0x4c8b45a0	              mov r8, qword [rbp - 0x60]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e57	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e5b	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e5f	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e63	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e67	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e6b	          0x4d89c1	                              mov r9, r8	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e6e	          0x4989f8	                             mov r8, rdi	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e71	          0x4889c7	                            mov rdi, rax	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e74	      0xe896f6ffff	     call sym.walk_wild_consider_section	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e79	            0xeb59	                           jmp 0x4000ed4	       631	ldlang.c	FUNCTION_20	FOR_1	CALL_3
0x4000e7b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       634	ldlang.c	FUNCTION_20	FOR_1	ELSE_1
0x4000e7f	          0x488b00	                    mov rax, qword [rax]	       634	ldlang.c	FUNCTION_20	FOR_1	ELSE_1
0x4000e82	        0x488945f0	             mov qword [rbp - 0x10], rax	       634	ldlang.c	FUNCTION_20	FOR_1	ELSE_1
0x4000e86	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e8a	        0x488b4008	                mov rax, qword [rax + 8]	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e8e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e92	          0x4889d6	                            mov rsi, rdx	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e95	          0x4889c7	                            mov rdi, rax	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e98	      0xe8f7f8ffff	              call sym.match_simple_wild	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e9d	            0x85c0	                           test eax, eax	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000e9f	           0xf94c0	                                 sete al	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000ea2	           0xfb6c0	                           movzx eax, al	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000ea5	          0x8945cc	             mov dword [rbp - 0x34], eax	       635	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	CALL_4
0x4000ea8	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       637	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3
0x4000eac	            0x7526	                           jne 0x4000ed4	       637	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3
0x4000eae	        0x4c8b45a0	              mov r8, qword [rbp - 0x60]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000eb2	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000eb6	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000eba	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ebe	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ec2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ec6	          0x4d89c1	                              mov r9, r8	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ec9	          0x4989f8	                             mov r8, rdi	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ecc	          0x4889c7	                            mov rdi, rax	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ecf	      0xe83bf6ffff	     call sym.walk_wild_consider_section	       638	ldlang.c	FUNCTION_20	FOR_1	ELSE_1	IF_3	CALL_5
0x4000ed4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000ed8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000edc	        0x488945d0	             mov qword [rbp - 0x30], rax	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000ee0	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000ee5	     0xf855effffff	                           jne 0x4000e49	       625	ldlang.c	FUNCTION_20	FOR_1
0x4000eeb	        0x488b45f8	                mov rax, qword [rbp - 8]	       642	ldlang.c	FUNCTION_20
0x4000eef	    0x644833042528	                xor rax, qword fs:[0x28]	       642	ldlang.c	FUNCTION_20
0x4000ef8	            0x7405	                            je 0x4000eff	       642	ldlang.c	FUNCTION_20
0x4000efa	      0xe800000000	                          call 0x4000eff	       642	ldlang.c	FUNCTION_20
0x4000eff	              0xc9	                                   leave	       642	ldlang.c	FUNCTION_20
0x4000f00	              0xc3	                                     ret	       642	ldlang.c	FUNCTION_20
pop_stat_ptr	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	18
0x4001a22	              0x55	                                push rbp	      1024	ldlang.c	FUNCTION_32
0x4001a23	          0x4889e5	                            mov rbp, rsp	      1024	ldlang.c	FUNCTION_32
0x4001a26	    0x488b05000000	            mov rax, qword [0x04001a2d] 	      1025	ldlang.c	FUNCTION_32	IF_1
0x4001a2d	    0x483d00000000	                              cmp rax, 0	      1025	ldlang.c	FUNCTION_32	IF_1
0x4001a33	            0x7714	                            ja 0x4001a49	      1025	ldlang.c	FUNCTION_32	IF_1
0x4001a35	      0xba00000000	                              mov edx, 0	      1026	ldlang.c	FUNCTION_32	CALL_1
0x4001a3a	      0xbe02040000	                          mov esi, 0x402	      1026	ldlang.c	FUNCTION_32	CALL_1
0x4001a3f	      0xbf00000000	                              mov edi, 0	      1026	ldlang.c	FUNCTION_32	CALL_1
0x4001a44	      0xe800000000	                          call 0x4001a49	      1026	ldlang.c	FUNCTION_32	CALL_1
0x4001a49	    0x488b05000000	            mov rax, qword [0x04001a50] 	      1027	ldlang.c	FUNCTION_32
0x4001a50	        0x4883e808	                              sub rax, 8	      1027	ldlang.c	FUNCTION_32
0x4001a54	    0x488905000000	            mov qword [0x04001a5b], rax 	      1027	ldlang.c	FUNCTION_32
0x4001a5b	    0x488b05000000	            mov rax, qword [0x04001a62] 	      1027	ldlang.c	FUNCTION_32
0x4001a62	          0x488b00	                    mov rax, qword [rax]	      1027	ldlang.c	FUNCTION_32
0x4001a65	    0x488905000000	            mov qword [0x04001a6c], rax 	      1027	ldlang.c	FUNCTION_32
0x4001a6c	              0x90	                                     nop	      1028	ldlang.c	FUNCTION_32
0x4001a6d	              0x5d	                                 pop rbp	      1028	ldlang.c	FUNCTION_32
0x4001a6e	              0xc3	                                     ret	      1028	ldlang.c	FUNCTION_32
ldlang_override_segment_assignment	functions,0:ELSE,0:FOR,0:CALL,2:IF,4:DO,0:WHILE,0:SWITCH,0	60
0x400a096	              0x55	                                push rbp	      5561	ldlang.c	FUNCTION_116
0x400a097	          0x4889e5	                            mov rbp, rsp	      5561	ldlang.c	FUNCTION_116
0x400a09a	        0x4883ec40	                           sub rsp, 0x40	      5561	ldlang.c	FUNCTION_116
0x400a09e	        0x48897de8	             mov qword [rbp - 0x18], rdi	      5561	ldlang.c	FUNCTION_116
0x400a0a2	        0x488975e0	             mov qword [rbp - 0x20], rsi	      5561	ldlang.c	FUNCTION_116
0x400a0a6	        0x488955d8	             mov qword [rbp - 0x28], rdx	      5561	ldlang.c	FUNCTION_116
0x400a0aa	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      5561	ldlang.c	FUNCTION_116
0x400a0ae	        0x448945cc	             mov dword [rbp - 0x34], r8d	      5561	ldlang.c	FUNCTION_116
0x400a0b2	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      5567	ldlang.c	FUNCTION_116	IF_1
0x400a0b6	            0x740a	                            je 0x400a0c2	      5567	ldlang.c	FUNCTION_116	IF_1
0x400a0b8	      0xb801000000	                              mov eax, 1	      5568	ldlang.c	FUNCTION_116	IF_1
0x400a0bd	      0xe9a4000000	                           jmp 0x400a166	      5568	ldlang.c	FUNCTION_116	IF_1
0x400a0c2	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      5571	ldlang.c	FUNCTION_116	IF_2
0x400a0c7	            0x7407	                            je 0x400a0d0	      5571	ldlang.c	FUNCTION_116	IF_2
0x400a0c9	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      5571	ldlang.c	FUNCTION_116	IF_2
0x400a0ce	            0x7508	                           jne 0x400a0d8	      5571	ldlang.c	FUNCTION_116	IF_2
0x400a0d0	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      5572	ldlang.c	FUNCTION_116	IF_2
0x400a0d3	      0xe98e000000	                           jmp 0x400a166	      5572	ldlang.c	FUNCTION_116	IF_2
0x400a0d8	    0x8b0500000000	            mov eax, dword [0x0400a0de] 	      5576	ldlang.c	FUNCTION_116	IF_3
0x400a0de	            0x85c0	                           test eax, eax	      5576	ldlang.c	FUNCTION_116	IF_3
0x400a0e0	            0x741e	                            je 0x400a100	      5576	ldlang.c	FUNCTION_116	IF_3
0x400a0e2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0e6	          0x8b5020	            mov edx, dword [rax + 0x20] 	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0e9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0ed	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0f0	            0x31d0	                            xor eax, edx	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0f2	          0x83e010	                           and eax, 0x10	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0f5	            0x85c0	                           test eax, eax	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0f7	            0x7407	                            je 0x400a100	      5577	ldlang.c	FUNCTION_116	IF_3
0x400a0f9	      0xb801000000	                              mov eax, 1	      5578	ldlang.c	FUNCTION_116	IF_3
0x400a0fe	            0xeb66	                           jmp 0x400a166	      5578	ldlang.c	FUNCTION_116	IF_3
0x400a100	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a104	          0x488b00	                    mov rax, qword [rax]	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a107	      0xba00000000	                              mov edx, 0	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a10c	      0xbe00000000	                              mov esi, 0	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a111	          0x4889c7	                            mov rdi, rax	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a114	      0xe800000000	                          call 0x400a119	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a119	        0x488945f0	             mov qword [rbp - 0x10], rax	      5584	ldlang.c	FUNCTION_116	CALL_1
0x400a11d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a121	          0x488b00	                    mov rax, qword [rax]	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a124	      0xba00000000	                              mov edx, 0	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a129	      0xbe00000000	                              mov esi, 0	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a12e	          0x4889c7	                            mov rdi, rax	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a131	      0xe800000000	                          call 0x400a136	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a136	        0x488945f8	                mov qword [rbp - 8], rax	      5585	ldlang.c	FUNCTION_116	CALL_2
0x400a13a	      0x48837df000	               cmp qword [rbp - 0x10], 0	      5588	ldlang.c	FUNCTION_116	IF_4
0x400a13f	            0x7407	                            je 0x400a148	      5588	ldlang.c	FUNCTION_116	IF_4
0x400a141	      0x48837df800	                  cmp qword [rbp - 8], 0	      5588	ldlang.c	FUNCTION_116	IF_4
0x400a146	            0x7505	                           jne 0x400a14d	      5588	ldlang.c	FUNCTION_116	IF_4
0x400a148	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      5589	ldlang.c	FUNCTION_116	IF_4
0x400a14b	            0xeb19	                           jmp 0x400a166	      5589	ldlang.c	FUNCTION_116	IF_4
0x400a14d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5595	ldlang.c	FUNCTION_116
0x400a151	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      5595	ldlang.c	FUNCTION_116
0x400a155	        0x488b45f8	                mov rax, qword [rbp - 8]	      5595	ldlang.c	FUNCTION_116
0x400a159	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5595	ldlang.c	FUNCTION_116
0x400a15d	          0x4839c2	                            cmp rdx, rax	      5595	ldlang.c	FUNCTION_116
0x400a160	           0xf95c0	                                setne al	      5595	ldlang.c	FUNCTION_116
0x400a163	           0xfb6c0	                           movzx eax, al	      5595	ldlang.c	FUNCTION_116
0x400a166	              0xc9	                                   leave	      5596	ldlang.c	FUNCTION_116
0x400a167	              0xc3	                                     ret	      5596	ldlang.c	FUNCTION_116
dprint_statement	functions,0:ELSE,1:FOR,0:CALL,2:IF,1:DO,0:WHILE,1:SWITCH,0	35
0x40081c3	              0x55	                                push rbp	      4617	ldlang.c	FUNCTION_107
0x40081c4	          0x4889e5	                            mov rbp, rsp	      4617	ldlang.c	FUNCTION_107
0x40081c7	        0x4883ec20	                           sub rsp, 0x20	      4617	ldlang.c	FUNCTION_107
0x40081cb	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4617	ldlang.c	FUNCTION_107
0x40081cf	          0x8975e4	             mov dword [rbp - 0x1c], esi	      4617	ldlang.c	FUNCTION_107
0x40081d2	    0x488b05000000	            mov rax, qword [0x040081d9] 	      4618	ldlang.c	FUNCTION_107
0x40081d9	        0x488945f8	                mov qword [rbp - 8], rax	      4618	ldlang.c	FUNCTION_107
0x40081dd	    0x488b05000000	            mov rax, qword [0x040081e4] 	      4620	ldlang.c	FUNCTION_107
0x40081e4	    0x488905000000	            mov qword [0x040081eb], rax 	      4620	ldlang.c	FUNCTION_107
0x40081eb	        0x837de400	               cmp dword [rbp - 0x1c], 0	      4622	ldlang.c	FUNCTION_107	IF_1
0x40081ef	            0x7939	                           jns 0x400822a	      4622	ldlang.c	FUNCTION_107	IF_1
0x40081f1	    0x488b15000000	            mov rdx, qword [0x040081f8] 	      4623	ldlang.c	FUNCTION_107	CALL_1
0x40081f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4623	ldlang.c	FUNCTION_107	CALL_1
0x40081fc	          0x4889d6	                            mov rsi, rdx	      4623	ldlang.c	FUNCTION_107	CALL_1
0x40081ff	          0x4889c7	                            mov rdi, rax	      4623	ldlang.c	FUNCTION_107	CALL_1
0x4008202	      0xe807fdffff	           call sym.print_statement_list	      4623	ldlang.c	FUNCTION_107	CALL_1
0x4008207	            0xeb32	                           jmp 0x400823b	      4623	ldlang.c	FUNCTION_107	CALL_1
0x4008209	    0x488b15000000	            mov rdx, qword [0x04008210] 	      4628	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1	CALL_2
0x4008210	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4628	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1	CALL_2
0x4008214	          0x4889d6	                            mov rsi, rdx	      4628	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1	CALL_2
0x4008217	          0x4889c7	                            mov rdi, rax	      4628	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1	CALL_2
0x400821a	      0xe829fdffff	                call sym.print_statement	      4628	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1	CALL_2
0x400821f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4629	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x4008223	          0x488b00	                    mov rax, qword [rax]	      4629	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x4008226	        0x488945e8	             mov qword [rbp - 0x18], rax	      4629	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x400822a	      0x48837de800	               cmp qword [rbp - 0x18], 0	      4626	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x400822f	            0x740a	                            je 0x400823b	      4626	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x4008231	        0x836de401	               sub dword [rbp - 0x1c], 1	      4626	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x4008235	        0x837de400	               cmp dword [rbp - 0x1c], 0	      4626	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x4008239	            0x79ce	                           jns 0x4008209	      4626	ldlang.c	FUNCTION_107	ELSE_1	WHILE_1
0x400823b	        0x488b45f8	                mov rax, qword [rbp - 8]	      4633	ldlang.c	FUNCTION_107
0x400823f	    0x488905000000	            mov qword [0x04008246], rax 	      4633	ldlang.c	FUNCTION_107
0x4008246	              0x90	                                     nop	      4634	ldlang.c	FUNCTION_107
0x4008247	              0xc9	                                   leave	      4634	ldlang.c	FUNCTION_107
0x4008248	              0xc3	                                     ret	      4634	ldlang.c	FUNCTION_107
lang_add_map	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,1:SWITCH,1	19
0x400d467	              0x55	                                push rbp	      7522	ldlang.c	FUNCTION_169
0x400d468	          0x4889e5	                            mov rbp, rsp	      7522	ldlang.c	FUNCTION_169
0x400d46b	        0x48897df8	                mov qword [rbp - 8], rdi	      7522	ldlang.c	FUNCTION_169
0x400d46f	            0xeb1f	                           jmp 0x400d490	      7523	ldlang.c	FUNCTION_169	WHILE_1
0x400d471	        0x488b45f8	                mov rax, qword [rbp - 8]	      7525	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d475	           0xfb600	                   movzx eax, byte [rax]	      7525	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d478	           0xfbec0	                           movsx eax, al	      7525	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d47b	          0x83f846	                           cmp eax, 0x46	      7525	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d47e	            0x750b	                           jne 0x400d48b	      7525	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d480	    0xc70500000000	               mov dword [0x0400d48a], 1	      7528	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d48a	              0x90	                                     nop	      7529	ldlang.c	FUNCTION_169	WHILE_1	SWITCH_1
0x400d48b	      0x488345f801	                  add qword [rbp - 8], 1	      7531	ldlang.c	FUNCTION_169	WHILE_1
0x400d490	        0x488b45f8	                mov rax, qword [rbp - 8]	      7523	ldlang.c	FUNCTION_169	WHILE_1
0x400d494	           0xfb600	                   movzx eax, byte [rax]	      7523	ldlang.c	FUNCTION_169	WHILE_1
0x400d497	            0x84c0	                             test al, al	      7523	ldlang.c	FUNCTION_169	WHILE_1
0x400d499	            0x75d6	                           jne 0x400d471	      7523	ldlang.c	FUNCTION_169	WHILE_1
0x400d49b	              0x90	                                     nop	      7533	ldlang.c	FUNCTION_169
0x400d49c	              0x5d	                                 pop rbp	      7533	ldlang.c	FUNCTION_169
0x400d49d	              0xc3	                                     ret	      7533	ldlang.c	FUNCTION_169
lang_propagate_lma_regions	functions,0:ELSE,0:FOR,1:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	41
0x400cbbe	              0x55	                                push rbp	      7139	ldlang.c	FUNCTION_162
0x400cbbf	          0x4889e5	                            mov rbp, rsp	      7139	ldlang.c	FUNCTION_162
0x400cbc2	    0x488b05000000	            mov rax, qword [0x0400cbc9] 	      7142	ldlang.c	FUNCTION_162	FOR_1
0x400cbc9	        0x488945f8	                mov qword [rbp - 8], rax	      7142	ldlang.c	FUNCTION_162	FOR_1
0x400cbcd	            0xeb6d	                           jmp 0x400cc3c	      7142	ldlang.c	FUNCTION_162	FOR_1
0x400cbcf	        0x488b45f8	                mov rax, qword [rbp - 8]	      7146	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbd3	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7146	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbd7	          0x4885c0	                           test rax, rax	      7146	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbda	            0x7454	                            je 0x400cc30	      7146	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbdc	        0x488b45f8	                mov rax, qword [rbp - 8]	      7147	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbe0	        0x488b4048	            mov rax, qword [rax + 0x48] 	      7147	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbe4	          0x4885c0	                           test rax, rax	      7147	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbe7	            0x7547	                           jne 0x400cc30	      7147	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbe9	        0x488b45f8	                mov rax, qword [rbp - 8]	      7148	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbed	        0x488b4060	            mov rax, qword [rax + 0x60] 	      7148	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbf1	          0x4885c0	                           test rax, rax	      7148	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbf4	            0x753a	                           jne 0x400cc30	      7148	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbf6	        0x488b45f8	                mov rax, qword [rbp - 8]	      7149	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbfa	        0x488b4058	            mov rax, qword [rax + 0x58] 	      7149	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cbfe	          0x4885c0	                           test rax, rax	      7149	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc01	            0x752d	                           jne 0x400cc30	      7149	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc03	        0x488b45f8	                mov rax, qword [rbp - 8]	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc07	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc0b	        0x488b45f8	                mov rax, qword [rbp - 8]	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc0f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc13	        0x488b4040	            mov rax, qword [rax + 0x40] 	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc17	          0x4839c2	                            cmp rdx, rax	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc1a	            0x7514	                           jne 0x400cc30	      7150	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc1c	        0x488b45f8	                mov rax, qword [rbp - 8]	      7151	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc20	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7151	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc24	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      7151	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc28	        0x488b45f8	                mov rax, qword [rbp - 8]	      7151	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc2c	        0x48895048	             mov qword [rax + 0x48], rdx	      7151	ldlang.c	FUNCTION_162	FOR_1	IF_1
0x400cc30	        0x488b45f8	                mov rax, qword [rbp - 8]	      7144	ldlang.c	FUNCTION_162	FOR_1
0x400cc34	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7144	ldlang.c	FUNCTION_162	FOR_1
0x400cc38	        0x488945f8	                mov qword [rbp - 8], rax	      7144	ldlang.c	FUNCTION_162	FOR_1
0x400cc3c	      0x48837df800	                  cmp qword [rbp - 8], 0	      7142	ldlang.c	FUNCTION_162	FOR_1
0x400cc41	            0x758c	                           jne 0x400cbcf	      7142	ldlang.c	FUNCTION_162	FOR_1
0x400cc43	              0x90	                                     nop	      7153	ldlang.c	FUNCTION_162
0x400cc44	              0x5d	                                 pop rbp	      7153	ldlang.c	FUNCTION_162
0x400cc45	              0xc3	                                     ret	      7153	ldlang.c	FUNCTION_162
lang_for_each_input_file	functions,0:ELSE,0:FOR,1:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	19
0x400bfd0	              0x55	                                push rbp	      6612	ldlang.c	FUNCTION_141
0x400bfd1	          0x4889e5	                            mov rbp, rsp	      6612	ldlang.c	FUNCTION_141
0x400bfd4	        0x4883ec20	                           sub rsp, 0x20	      6612	ldlang.c	FUNCTION_141
0x400bfd8	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6612	ldlang.c	FUNCTION_141
0x400bfdc	    0x488b05000000	            mov rax, qword [0x0400bfe3] 	      6615	ldlang.c	FUNCTION_141	FOR_1
0x400bfe3	        0x488945f8	                mov qword [rbp - 8], rax	      6615	ldlang.c	FUNCTION_141	FOR_1
0x400bfe7	            0xeb19	                           jmp 0x400c002	      6615	ldlang.c	FUNCTION_141	FOR_1
0x400bfe9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6618	ldlang.c	FUNCTION_141	CALL_1
0x400bfed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6618	ldlang.c	FUNCTION_141	CALL_1
0x400bff1	          0x4889d7	                            mov rdi, rdx	      6618	ldlang.c	FUNCTION_141	CALL_1
0x400bff4	            0xffd0	                                call rax	      6618	ldlang.c	FUNCTION_141	CALL_1
0x400bff6	        0x488b45f8	                mov rax, qword [rbp - 8]	      6617	ldlang.c	FUNCTION_141	FOR_1
0x400bffa	        0x488b4038	            mov rax, qword [rax + 0x38] 	      6617	ldlang.c	FUNCTION_141	FOR_1
0x400bffe	        0x488945f8	                mov qword [rbp - 8], rax	      6617	ldlang.c	FUNCTION_141	FOR_1
0x400c002	      0x48837df800	                  cmp qword [rbp - 8], 0	      6615	ldlang.c	FUNCTION_141	FOR_1
0x400c007	            0x75e0	                           jne 0x400bfe9	      6615	ldlang.c	FUNCTION_141	FOR_1
0x400c009	              0x90	                                     nop	      6619	ldlang.c	FUNCTION_141
0x400c00a	              0xc9	                                   leave	      6619	ldlang.c	FUNCTION_141
0x400c00b	              0xc3	                                     ret	      6619	ldlang.c	FUNCTION_141
lang_one_common	functions,0:ELSE,3:FOR,0:CALL,20:IF,9:DO,0:WHILE,2:SWITCH,0	170
0x400b8ad	              0x55	                                push rbp	      6383	ldlang.c	FUNCTION_137
0x400b8ae	          0x4889e5	                            mov rbp, rsp	      6383	ldlang.c	FUNCTION_137
0x400b8b1	              0x53	                                push rbx	      6383	ldlang.c	FUNCTION_137
0x400b8b2	        0x4883ec78	                           sub rsp, 0x78	      6383	ldlang.c	FUNCTION_137
0x400b8b6	        0x48897d88	             mov qword [rbp - 0x78], rdi	      6383	ldlang.c	FUNCTION_137
0x400b8ba	        0x48897580	             mov qword [rbp - 0x80], rsi	      6383	ldlang.c	FUNCTION_137
0x400b8be	    0x64488b042528	                mov rax, qword fs:[0x28]	      6383	ldlang.c	FUNCTION_137
0x400b8c7	        0x488945e8	             mov qword [rbp - 0x18], rax	      6383	ldlang.c	FUNCTION_137
0x400b8cb	            0x31c0	                            xor eax, eax	      6383	ldlang.c	FUNCTION_137
0x400b8cd	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6388	ldlang.c	FUNCTION_137	IF_1
0x400b8d1	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      6388	ldlang.c	FUNCTION_137	IF_1
0x400b8d5	            0x3c05	                               cmp al, 5	      6388	ldlang.c	FUNCTION_137	IF_1
0x400b8d7	            0x740a	                            je 0x400b8e3	      6388	ldlang.c	FUNCTION_137	IF_1
0x400b8d9	      0xb801000000	                              mov eax, 1	      6389	ldlang.c	FUNCTION_137	IF_1
0x400b8de	      0xe95d020000	                           jmp 0x400bb40	      6389	ldlang.c	FUNCTION_137	IF_1
0x400b8e3	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6391	ldlang.c	FUNCTION_137
0x400b8e7	        0x488b4030	            mov rax, qword [rax + 0x30] 	      6391	ldlang.c	FUNCTION_137
0x400b8eb	        0x48894598	             mov qword [rbp - 0x68], rax	      6391	ldlang.c	FUNCTION_137
0x400b8ef	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6392	ldlang.c	FUNCTION_137
0x400b8f3	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6392	ldlang.c	FUNCTION_137
0x400b8f7	            0x8b00	                    mov eax, dword [rax]	      6392	ldlang.c	FUNCTION_137
0x400b8f9	          0x894594	             mov dword [rbp - 0x6c], eax	      6392	ldlang.c	FUNCTION_137
0x400b8fc	    0x8b0500000000	            mov eax, dword [0x0400b902] 	      6394	ldlang.c	FUNCTION_137	IF_2
0x400b902	          0x83f802	                              cmp eax, 2	      6394	ldlang.c	FUNCTION_137	IF_2
0x400b905	            0x7515	                           jne 0x400b91c	      6394	ldlang.c	FUNCTION_137	IF_2
0x400b907	        0x488b4580	             mov rax, qword [rbp - 0x80]	      6395	ldlang.c	FUNCTION_137	IF_2
0x400b90b	            0x8b00	                    mov eax, dword [rax]	      6395	ldlang.c	FUNCTION_137	IF_2
0x400b90d	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      6395	ldlang.c	FUNCTION_137	IF_2
0x400b910	            0x760a	                           jbe 0x400b91c	      6395	ldlang.c	FUNCTION_137	IF_2
0x400b912	      0xb801000000	                              mov eax, 1	      6396	ldlang.c	FUNCTION_137	IF_2
0x400b917	      0xe924020000	                           jmp 0x400bb40	      6396	ldlang.c	FUNCTION_137	IF_2
0x400b91c	    0x8b0500000000	            mov eax, dword [0x0400b922] 	      6397	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b922	          0x83f801	                              cmp eax, 1	      6397	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b925	            0x7515	                           jne 0x400b93c	      6397	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b927	        0x488b4580	             mov rax, qword [rbp - 0x80]	      6398	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b92b	            0x8b00	                    mov eax, dword [rax]	      6398	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b92d	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      6398	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b930	            0x730a	                           jae 0x400b93c	      6398	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b932	      0xb801000000	                              mov eax, 1	      6399	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b937	      0xe904020000	                           jmp 0x400bb40	      6399	ldlang.c	FUNCTION_137	ELSE_1	IF_3
0x400b93c	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6401	ldlang.c	FUNCTION_137
0x400b940	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6401	ldlang.c	FUNCTION_137
0x400b944	        0x488b4008	                mov rax, qword [rax + 8]	      6401	ldlang.c	FUNCTION_137
0x400b948	        0x488945a0	             mov qword [rbp - 0x60], rax	      6401	ldlang.c	FUNCTION_137
0x400b94c	    0x488b05000000	            mov rax, qword [0x0400b953] 	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b953	        0x488b4008	                mov rax, qword [rax + 8]	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b957	    0x488b80200300	           mov rax, qword [rax + 0x320] 	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b95e	    0x488b0d000000	            mov rcx, qword [0x0400b965] 	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b965	        0x488b5588	             mov rdx, qword [rbp - 0x78]	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b969	      0xbe00000000	                              mov esi, 0	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b96e	          0x4889cf	                            mov rdi, rcx	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b971	            0xffd0	                                call rax	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b973	            0x85c0	                           test eax, eax	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b975	            0x7522	                           jne 0x400b999	      6402	ldlang.c	FUNCTION_137	IF_4
0x400b977	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b97b	        0x488b5808	                mov rbx, qword [rax + 8]	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b97f	      0xbf00000000	                              mov edi, 0	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b984	      0xe800000000	                          call 0x400b989	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b989	          0x4889de	                            mov rsi, rbx	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b98c	          0x4889c7	                            mov rdi, rax	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b98f	      0xb800000000	                              mov eax, 0	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b994	      0xe800000000	                          call 0x400b999	      6403	ldlang.c	FUNCTION_137	IF_4	CALL_2
0x400b999	    0x488b05000000	            mov rax, qword [0x0400b9a0] 	      6406	ldlang.c	FUNCTION_137	IF_5
0x400b9a0	          0x4885c0	                           test rax, rax	      6406	ldlang.c	FUNCTION_137	IF_5
0x400b9a3	     0xf8492010000	                            je 0x400bb3b	      6406	ldlang.c	FUNCTION_137	IF_5
0x400b9a9	    0x8b0500000000	            mov eax, dword [0x0400b9af] 	      6413	ldlang.c	FUNCTION_137	IF_5	IF_6
0x400b9af	            0x85c0	                           test eax, eax	      6413	ldlang.c	FUNCTION_137	IF_5	IF_6
0x400b9b1	            0x7538	                           jne 0x400b9eb	      6413	ldlang.c	FUNCTION_137	IF_5	IF_6
0x400b9b3	      0xbf00000000	                              mov edi, 0	      6415	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_4
0x400b9b8	      0xe800000000	                          call 0x400b9bd	      6415	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_4
0x400b9bd	          0x4889c7	                            mov rdi, rax	      6415	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_4
0x400b9c0	      0xb800000000	                              mov eax, 0	      6415	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_4
0x400b9c5	      0xe800000000	                          call 0x400b9ca	      6415	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_4
0x400b9ca	      0xbf00000000	                              mov edi, 0	      6416	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_6
0x400b9cf	      0xe800000000	                          call 0x400b9d4	      6416	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_6
0x400b9d4	          0x4889c7	                            mov rdi, rax	      6416	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_6
0x400b9d7	      0xb800000000	                              mov eax, 0	      6416	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_6
0x400b9dc	      0xe800000000	                          call 0x400b9e1	      6416	ldlang.c	FUNCTION_137	IF_5	IF_6	CALL_6
0x400b9e1	    0xc70500000000	               mov dword [0x0400b9eb], 1	      6417	ldlang.c	FUNCTION_137	IF_5	IF_6
0x400b9eb	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400b9ef	        0x488b4808	                mov rcx, qword [rax + 8]	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400b9f3	    0x488b05000000	            mov rax, qword [0x0400b9fa] 	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400b9fa	      0xba03000000	                              mov edx, 3	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400b9ff	          0x4889ce	                            mov rsi, rcx	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400ba02	          0x4889c7	                            mov rdi, rax	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400ba05	      0xe800000000	                          call 0x400ba0a	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400ba0a	        0x488945a8	             mov qword [rbp - 0x58], rax	      6420	ldlang.c	FUNCTION_137	IF_5	CALL_7
0x400ba0e	      0x48837da800	               cmp qword [rbp - 0x58], 0	      6422	ldlang.c	FUNCTION_137	IF_5	IF_7
0x400ba13	            0x752f	                           jne 0x400ba44	      6422	ldlang.c	FUNCTION_137	IF_5	IF_7
0x400ba15	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba19	        0x488b4008	                mov rax, qword [rax + 8]	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba1d	          0x4889c6	                            mov rsi, rax	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba20	      0xbf00000000	                              mov edi, 0	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba25	      0xb800000000	                              mov eax, 0	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba2a	      0xe800000000	                          call 0x400ba2f	      6424	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_8
0x400ba2f	        0x488b4588	             mov rax, qword [rbp - 0x78]	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba33	        0x488b4008	                mov rax, qword [rax + 8]	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba37	          0x4889c7	                            mov rdi, rax	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba3a	      0xe800000000	                          call 0x400ba3f	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba3f	          0x894590	             mov dword [rbp - 0x70], eax	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba42	            0xeb31	                           jmp 0x400ba75	      6425	ldlang.c	FUNCTION_137	IF_5	IF_7	CALL_9
0x400ba44	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      6429	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_10
0x400ba48	          0x4889c6	                            mov rsi, rax	      6429	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_10
0x400ba4b	      0xbf00000000	                              mov edi, 0	      6429	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_10
0x400ba50	      0xb800000000	                              mov eax, 0	      6429	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_10
0x400ba55	      0xe800000000	                          call 0x400ba5a	      6429	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_10
0x400ba5a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      6430	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_11
0x400ba5e	          0x4889c7	                            mov rdi, rax	      6430	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_11
0x400ba61	      0xe800000000	                          call 0x400ba66	      6430	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_11
0x400ba66	          0x894590	             mov dword [rbp - 0x70], eax	      6430	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_11
0x400ba69	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      6431	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_12
0x400ba6d	          0x4889c7	                            mov rdi, rax	      6431	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_12
0x400ba70	      0xe800000000	                          call 0x400ba75	      6431	ldlang.c	FUNCTION_137	IF_5	ELSE_2	CALL_12
0x400ba75	        0x837d9012	           cmp dword [rbp - 0x70], 0x12 	      6434	ldlang.c	FUNCTION_137	IF_5	IF_8
0x400ba79	            0x7e17	                           jle 0x400ba92	      6434	ldlang.c	FUNCTION_137	IF_5	IF_8
0x400ba7b	      0xe800000000	                          call 0x400ba80	      6436	ldlang.c	FUNCTION_137	IF_5	IF_8	CALL_13
0x400ba80	    0xc74590000000	               mov dword [rbp - 0x70], 0	      6437	ldlang.c	FUNCTION_137	IF_5	IF_8
0x400ba87	            0xeb09	                           jmp 0x400ba92	      6439	ldlang.c	FUNCTION_137	IF_5	WHILE_1
0x400ba89	      0xe800000000	                          call 0x400ba8e	      6441	ldlang.c	FUNCTION_137	IF_5	WHILE_1	CALL_14
0x400ba8e	        0x83459001	               add dword [rbp - 0x70], 1	      6442	ldlang.c	FUNCTION_137	IF_5	WHILE_1
0x400ba92	        0x837d9013	           cmp dword [rbp - 0x70], 0x13 	      6439	ldlang.c	FUNCTION_137	IF_5	WHILE_1
0x400ba96	            0x7ef1	                           jle 0x400ba89	      6439	ldlang.c	FUNCTION_137	IF_5	WHILE_1
0x400ba98	      0xbf00000000	                              mov edi, 0	      6445	ldlang.c	FUNCTION_137	IF_5	CALL_15
0x400ba9d	      0xb800000000	                              mov eax, 0	      6445	ldlang.c	FUNCTION_137	IF_5	CALL_15
0x400baa2	      0xe800000000	                          call 0x400baa7	      6445	ldlang.c	FUNCTION_137	IF_5	CALL_15
0x400baa7	      0xb8ffffffff	                     mov eax, 0xffffffff	      6446	ldlang.c	FUNCTION_137	IF_5	IF_9
0x400baac	        0x48394598	            cmp qword [rbp - 0x68], rax 	      6446	ldlang.c	FUNCTION_137	IF_5	IF_9
0x400bab0	            0x771c	                            ja 0x400bace	      6446	ldlang.c	FUNCTION_137	IF_5	IF_9
0x400bab2	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400bab6	        0x488d45b0	                   lea rax, [rbp - 0x50]	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400baba	      0xbe00000000	                              mov esi, 0	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400babf	          0x4889c7	                            mov rdi, rax	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400bac2	      0xb800000000	                              mov eax, 0	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400bac7	      0xe800000000	                          call 0x400bacc	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400bacc	            0xeb1a	                           jmp 0x400bae8	      6447	ldlang.c	FUNCTION_137	IF_5	CALL_16
0x400bace	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400bad2	        0x488d45b0	                   lea rax, [rbp - 0x50]	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400bad6	      0xbe00000000	                              mov esi, 0	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400badb	          0x4889c7	                            mov rdi, rax	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400bade	      0xb800000000	                              mov eax, 0	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400bae3	      0xe800000000	                          call 0x400bae8	      6449	ldlang.c	FUNCTION_137	IF_5	ELSE_3
0x400bae8	        0x488d45b0	                   lea rax, [rbp - 0x50]	      6450	ldlang.c	FUNCTION_137	IF_5	CALL_17
0x400baec	          0x4889c6	                            mov rsi, rax	      6450	ldlang.c	FUNCTION_137	IF_5	CALL_17
0x400baef	      0xbf00000000	                              mov edi, 0	      6450	ldlang.c	FUNCTION_137	IF_5	CALL_17
0x400baf4	      0xb800000000	                              mov eax, 0	      6450	ldlang.c	FUNCTION_137	IF_5	CALL_17
0x400baf9	      0xe800000000	                          call 0x400bafe	      6450	ldlang.c	FUNCTION_137	IF_5	CALL_17
0x400bafe	        0x488d45b0	                   lea rax, [rbp - 0x50]	      6451	ldlang.c	FUNCTION_137	IF_5	CALL_18
0x400bb02	          0x4889c7	                            mov rdi, rax	      6451	ldlang.c	FUNCTION_137	IF_5	CALL_18
0x400bb05	      0xe800000000	                          call 0x400bb0a	      6451	ldlang.c	FUNCTION_137	IF_5	CALL_18
0x400bb0a	          0x894590	             mov dword [rbp - 0x70], eax	      6451	ldlang.c	FUNCTION_137	IF_5	CALL_18
0x400bb0d	            0xeb09	                           jmp 0x400bb18	      6453	ldlang.c	FUNCTION_137	IF_5	WHILE_2
0x400bb0f	      0xe800000000	                          call 0x400bb14	      6455	ldlang.c	FUNCTION_137	IF_5	WHILE_2	CALL_19
0x400bb14	        0x83459001	               add dword [rbp - 0x70], 1	      6456	ldlang.c	FUNCTION_137	IF_5	WHILE_2
0x400bb18	        0x837d900f	            cmp dword [rbp - 0x70], 0xf 	      6453	ldlang.c	FUNCTION_137	IF_5	WHILE_2
0x400bb1c	            0x7ef1	                           jle 0x400bb0f	      6453	ldlang.c	FUNCTION_137	IF_5	WHILE_2
0x400bb1e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb22	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb29	          0x4889c6	                            mov rsi, rax	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb2c	      0xbf00000000	                              mov edi, 0	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb31	      0xb800000000	                              mov eax, 0	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb36	      0xe800000000	                          call 0x400bb3b	      6459	ldlang.c	FUNCTION_137	IF_5	CALL_20
0x400bb3b	      0xb801000000	                              mov eax, 1	      6462	ldlang.c	FUNCTION_137
0x400bb40	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      6463	ldlang.c	FUNCTION_137
0x400bb44	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      6463	ldlang.c	FUNCTION_137
0x400bb4d	            0x7405	                            je 0x400bb54	      6463	ldlang.c	FUNCTION_137
0x400bb4f	      0xe800000000	                          call 0x400bb54	      6463	ldlang.c	FUNCTION_137
0x400bb54	        0x4883c478	                           add rsp, 0x78	      6463	ldlang.c	FUNCTION_137
0x400bb58	              0x5b	                                 pop rbx	      6463	ldlang.c	FUNCTION_137
0x400bb59	              0x5d	                                 pop rbp	      6463	ldlang.c	FUNCTION_137
0x400bb5a	              0xc3	                                     ret	      6463	ldlang.c	FUNCTION_137
lang_size_sections_1	functions,0:ELSE,12:FOR,1:CALL,46:IF,49:DO,0:WHILE,0:SWITCH,2	1120
0x4008dee	              0x55	                                push rbp	      5011	ldlang.c	FUNCTION_115
0x4008def	          0x4889e5	                            mov rbp, rsp	      5011	ldlang.c	FUNCTION_115
0x4008df2	            0x4154	                                push r12	      5011	ldlang.c	FUNCTION_115
0x4008df4	              0x53	                                push rbx	      5011	ldlang.c	FUNCTION_115
0x4008df5	    0x4881ecc00000	                           sub rsp, 0xc0	      5011	ldlang.c	FUNCTION_115
0x4008dfc	    0x4889bd58ffff	             mov qword [rbp - 0xa8], rdi	      5011	ldlang.c	FUNCTION_115
0x4008e03	    0x4889b550ffff	             mov qword [rbp - 0xb0], rsi	      5011	ldlang.c	FUNCTION_115
0x4008e0a	    0x48899548ffff	             mov qword [rbp - 0xb8], rdx	      5011	ldlang.c	FUNCTION_115
0x4008e11	    0x48898d40ffff	             mov qword [rbp - 0xc0], rcx	      5011	ldlang.c	FUNCTION_115
0x4008e18	    0x4c898538ffff	              mov qword [rbp - 0xc8], r8	      5011	ldlang.c	FUNCTION_115
0x4008e1f	    0x44898d34ffff	             mov dword [rbp - 0xcc], r9d	      5011	ldlang.c	FUNCTION_115
0x4008e26	    0x64488b042528	                mov rax, qword fs:[0x28]	      5011	ldlang.c	FUNCTION_115
0x4008e2f	        0x488945e8	             mov qword [rbp - 0x18], rax	      5011	ldlang.c	FUNCTION_115
0x4008e33	            0x31c0	                            xor eax, eax	      5011	ldlang.c	FUNCTION_115
0x4008e35	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      5015	ldlang.c	FUNCTION_115	FOR_1
0x4008e3c	          0x488b00	                    mov rax, qword [rax]	      5015	ldlang.c	FUNCTION_115	FOR_1
0x4008e3f	    0x48898578ffff	             mov qword [rbp - 0x88], rax	      5015	ldlang.c	FUNCTION_115	FOR_1
0x4008e46	      0xe916120000	                           jmp 0x400a061	      5015	ldlang.c	FUNCTION_115	FOR_1
0x4008e4b	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e52	          0x8b4008	                mov eax, dword [rax + 8]	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e55	          0x83f80f	                            cmp eax, 0xf	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e58	     0xf87bd110000	                            ja 0x400a01b	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e5e	            0x89c0	                            mov eax, eax	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e60	    0x488b04c50000	                  mov rax, qword [rax*8]	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e68	            0xffe0	                                 jmp rax	      5017	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e6a	    0xc78564ffffff	               mov dword [rbp - 0x9c], 0	      5024	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e74	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5026	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e7b	        0x488945a8	             mov qword [rbp - 0x58], rax	      5026	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4008e7f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5027	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x4008e83	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      5027	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x4008e89	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      5027	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x4008e8c	     0xf849d110000	                            je 0x400a02f	      5027	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x4008e92	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5033	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008e96	        0x488b4058	            mov rax, qword [rax + 0x58] 	      5033	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008e9a	          0x4885c0	                           test rax, rax	      5033	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008e9d	            0x7536	                           jne 0x4008ed5	      5033	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008e9f	     0xfb605000000	           movzx eax, byte [0x04008ea6] 	      5034	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2	CALL_1
0x4008ea6	          0x83e003	                              and eax, 3	      5034	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2	CALL_1
0x4008ea9	            0x3c02	                               cmp al, 2	      5034	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2	CALL_1
0x4008eab	            0x7528	                           jne 0x4008ed5	      5034	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2	CALL_1
0x4008ead	    0x488b05000000	            mov rax, qword [0x04008eb4] 	      5035	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008eb4	        0x488b4008	                mov rax, qword [rax + 8]	      5035	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008eb8	          0x8b4008	                mov eax, dword [rax + 8]	      5035	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008ebb	          0x83f802	                              cmp eax, 2	      5035	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008ebe	            0x7515	                           jne 0x4008ed5	      5035	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_2
0x4008ec0	      0xbf00000000	                              mov edi, 0	      5037	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_2
0x4008ec5	      0xe800000000	                          call 0x4008eca	      5037	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_2
0x4008eca	          0x4889c2	                            mov rdx, rax	      5037	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_2
0x4008ecd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5037	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_2
0x4008ed1	        0x48895058	             mov qword [rax + 0x58], rdx	      5037	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_2
0x4008ed5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5038	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008ed9	        0x488b4058	            mov rax, qword [rax + 0x58] 	      5038	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008edd	          0x4885c0	                           test rax, rax	      5038	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008ee0	     0xf84aa000000	                            je 0x4008f90	      5038	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008ee6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5040	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008eea	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      5040	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008ef1	          0x83e2fe	                     and edx, 0xfffffffe	      5040	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008ef4	    0x889090000000	               mov byte [rax + 0x90], dl	      5040	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3
0x4008efa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008efe	        0x488b4058	            mov rax, qword [rax + 0x58] 	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008f02	    0x488d9540ffff	                   lea rdx, [rbp - 0xc0]	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008f09	      0xbe00000000	                              mov esi, 0	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008f0e	          0x4889c7	                            mov rdi, rax	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008f11	      0xe800000000	                          call 0x4008f16	      5041	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	CALL_3
0x4008f16	    0x8b0500000000	            mov eax, dword [0x04008f1c] 	      5043	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4
0x4008f1c	            0x85c0	                           test eax, eax	      5043	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4
0x4008f1e	            0x7438	                            je 0x4008f58	      5043	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4
0x4008f20	    0x488b05000000	            mov rax, qword [0x04008f27] 	      5045	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4
0x4008f27	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5045	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4
0x4008f2e	    0x488b05000000	            mov rax, qword [0x04008f35] 	      5046	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f35	          0x4885c0	                           test rax, rax	      5046	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f38	            0x7456	                            je 0x4008f90	      5046	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f3a	    0x488b05000000	            mov rax, qword [0x04008f41] 	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f41	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f45	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f4c	          0x4801d0	                            add rax, rdx	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f4f	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f56	            0xeb38	                           jmp 0x4008f90	      5047	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x4008f58	    0x8b0500000000	            mov eax, dword [0x04008f5e] 	      5049	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6
0x4008f5e	          0x83f801	                              cmp eax, 1	      5049	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6
0x4008f61	            0x742d	                            je 0x4008f90	      5049	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6
0x4008f63	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f67	        0x4c8b6030	            mov r12, qword [rax + 0x30] 	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f6b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f6f	        0x488b5858	            mov rbx, qword [rax + 0x58] 	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f73	      0xbf00000000	                              mov edi, 0	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f78	      0xe800000000	                          call 0x4008f7d	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f7d	          0x4c89e2	                            mov rdx, r12	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f80	          0x4889de	                            mov rsi, rbx	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f83	          0x4889c7	                            mov rdi, rax	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f86	      0xb800000000	                              mov eax, 0	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f8b	      0xe800000000	                          call 0x4008f90	      5050	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_3	ELSE_1	IF_6	CALL_5
0x4008f90	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5055	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x4008f94	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5055	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x4008f98	          0x4885c0	                           test rax, rax	      5055	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x4008f9b	     0xf8491100000	                            je 0x400a032	      5055	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x4008fa1	    0x488b05000000	            mov rax, qword [0x04008fa8] 	      5063	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fa8	        0x488b4008	                mov rax, qword [rax + 8]	      5063	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fac	          0x8b4008	                mov eax, dword [rax + 8]	      5063	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008faf	          0x83f803	                              cmp eax, 3	      5063	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fb2	            0x7417	                            je 0x4008fcb	      5063	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fb4	    0x488b05000000	            mov rax, qword [0x04008fbb] 	      5065	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fbb	        0x488b4008	                mov rax, qword [rax + 8]	      5065	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fbf	          0x8b4008	                mov eax, dword [rax + 8]	      5065	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fc2	          0x83f802	                              cmp eax, 2	      5065	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fc5	     0xf85d2000000	                           jne 0x400909d	      5065	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fcb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fcf	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fd3	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fd6	      0x2500000004	              and eax, obj.output_target	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fdb	            0x85c0	                           test eax, eax	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fdd	     0xf84ba000000	                            je 0x400909d	      5067	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4008fe3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5071	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008fe7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5071	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008feb	          0x4885c0	                           test rax, rax	      5071	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008fee	            0x7420	                            je 0x4009010	      5071	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008ff0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5072	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008ff4	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5072	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008ff8	          0x488b00	                    mov rax, qword [rax]	      5072	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008ffb	          0x4885c0	                           test rax, rax	      5072	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4008ffe	            0x7510	                           jne 0x4009010	      5072	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4009000	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5073	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4009004	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5073	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4009008	          0x8b4008	                mov eax, dword [rax + 8]	      5073	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x400900b	          0x83f805	                              cmp eax, 5	      5073	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x400900e	            0x7422	                            je 0x4009032	      5073	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9
0x4009010	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009014	        0x488b5830	            mov rbx, qword [rax + 0x30] 	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009018	      0xbf00000000	                              mov edi, 0	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x400901d	      0xe800000000	                          call 0x4009022	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009022	          0x4889de	                            mov rsi, rbx	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009025	          0x4889c7	                            mov rdi, rax	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009028	      0xb800000000	                              mov eax, 0	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x400902d	      0xe800000000	                          call 0x4009032	      5075	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_9	CALL_7
0x4009032	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5078	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4009036	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5078	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x400903a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5078	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x400903e	        0x488945b0	             mov qword [rbp - 0x50], rax	      5078	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x4009042	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009046	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x400904a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x400904e	        0x488b4838	            mov rcx, qword [rax + 0x38] 	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009052	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009056	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x400905a	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009061	          0x4889ce	                            mov rsi, rcx	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009064	          0x4889c7	                            mov rdi, rax	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x4009067	      0xe8d46fffff	            call sym.bfd_set_section_vma	      5079	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	CALL_8
0x400906c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009070	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009074	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009077	      0x2500080000	                          and eax, 0x800	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x400907c	            0x85c0	                           test eax, eax	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x400907e	     0xf85b10f0000	                           jne 0x400a035	      5082	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009084	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5083	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009088	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5083	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x400908c	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      5083	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009090	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5083	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009094	        0x48895038	             mov qword [rax + 0x38], rdx	      5083	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8	IF_10
0x4009098	      0xe9980f0000	                           jmp 0x400a035	      5084	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x400909d	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5087	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40090a4	        0x48894580	             mov qword [rbp - 0x80], rax	      5087	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40090a8	    0x48c745880000	               mov qword [rbp - 0x78], 0	      5088	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40090b0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5089	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11
0x40090b4	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5089	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11
0x40090b8	    0x483d00000000	                              cmp rax, 0	      5089	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11
0x40090be	            0x7529	                           jne 0x40090e9	      5089	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11
0x40090c0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090c4	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090c8	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090cc	          0x4885c0	                           test rax, rax	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090cf	     0xf84c6020000	                            je 0x400939b	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090d5	      0xbee4130000	                         mov esi, 0x13e4	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090da	      0xbf00000000	                              mov edi, 0	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090df	      0xe800000000	                          call 0x40090e4	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090e4	      0xe9b2020000	                           jmp 0x400939b	      5092	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_11	CALL_9
0x40090e9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5096	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40090ed	        0x488b4058	            mov rax, qword [rax + 0x58] 	      5096	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40090f1	          0x4885c0	                           test rax, rax	      5096	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40090f4	     0xf85ae010000	                           jne 0x40092a8	      5096	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40090fa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5100	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x40090fe	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5100	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009102	          0x4885c0	                           test rax, rax	      5100	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009105	            0x7440	                            je 0x4009147	      5100	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009107	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x400910b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x400910f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009112	          0x83e003	                              and eax, 3	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009115	            0x85c0	                           test eax, eax	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009117	            0x7449	                            je 0x4009162	      5101	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009119	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x400911d	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009121	          0x488b00	                    mov rax, qword [rax]	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009124	           0xfb600	                   movzx eax, byte [rax]	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009127	            0x3c2a	                            cmp al, 0x2a	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x4009129	            0x7537	                           jne 0x4009162	      5102	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13
0x400912b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x400912f	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x4009133	          0x488b00	                    mov rax, qword [rax]	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x4009136	      0xbe00000000	                              mov esi, 0	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x400913b	          0x4889c7	                            mov rdi, rax	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x400913e	      0xe800000000	                          call 0x4009143	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x4009143	            0x85c0	                           test eax, eax	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x4009145	            0x751b	                           jne 0x4009162	      5103	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_10
0x4009147	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x400914b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x400914f	          0x4889c7	                            mov rdi, rax	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x4009152	      0xe8fd92ffff	            call sym.lang_memory_default	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x4009157	          0x4889c2	                            mov rdx, rax	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x400915a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x400915e	        0x48895040	             mov qword [rax + 0x40], rdx	      5106	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_13	CALL_11
0x4009162	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5112	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009166	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5112	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400916d	          0x83e008	                              and eax, 8	      5112	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009170	            0x84c0	                             test al, al	      5112	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009172	     0xf850d010000	                           jne 0x4009285	      5112	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009178	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400917c	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009180	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009183	          0x83e001	                              and eax, 1	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009186	            0x85c0	                           test eax, eax	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009188	     0xf84f7000000	                            je 0x4009285	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400918e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009192	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009196	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009199	      0x2502040000	                          and eax, 0x402	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400919e	      0x3d00040000	                          cmp eax, 0x400	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091a3	     0xf84dc000000	                            je 0x4009285	      5113	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091a9	     0xfb605000000	           movzx eax, byte [0x040091b0] 	      5114	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_12
0x40091b0	          0x83e003	                              and eax, 3	      5114	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_12
0x40091b3	            0x3c02	                               cmp al, 2	      5114	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_12
0x40091b5	     0xf84ca000000	                            je 0x4009285	      5114	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_12
0x40091bb	    0x83bd34ffffff	               cmp dword [rbp - 0xcc], 0	      5115	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091c2	     0xf84bd000000	                            je 0x4009285	      5115	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091c8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091cc	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091d0	          0x488b00	                    mov rax, qword [rax]	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091d3	      0xbe00000000	                              mov esi, 0	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091d8	          0x4889c7	                            mov rdi, rax	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091db	      0xe800000000	                          call 0x40091e0	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091e0	            0x85c0	                           test eax, eax	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091e2	     0xf859d000000	                           jne 0x4009285	      5116	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_13
0x40091e8	    0x488b05000000	            mov rax, qword [0x040091ef] 	      5118	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091ef	          0x4885c0	                           test rax, rax	      5118	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091f2	     0xf848d000000	                            je 0x4009285	      5118	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x40091f8	    0x488b05000000	            mov rax, qword [0x040091ff] 	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x40091ff	          0x488b00	                    mov rax, qword [rax]	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x4009202	      0xbe00000000	                              mov esi, 0	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x4009207	          0x4889c7	                            mov rdi, rax	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x400920a	      0xe800000000	                          call 0x400920f	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x400920f	            0x85c0	                           test eax, eax	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x4009211	            0x7510	                           jne 0x4009223	      5119	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	CALL_14
0x4009213	    0x488b05000000	            mov rax, qword [0x0400921a] 	      5121	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400921a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5121	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400921e	          0x4885c0	                           test rax, rax	      5121	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009221	            0x7462	                            je 0x4009285	      5121	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009223	    0x8b0500000000	            mov eax, dword [0x04009229] 	      5122	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x4009229	          0x83f801	                              cmp eax, 1	      5122	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400922c	            0x7457	                            je 0x4009285	      5122	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14
0x400922e	     0xfb605000000	           movzx eax, byte [0x04009235] 	      5133	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15
0x4009235	            0x84c0	                             test al, al	      5133	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15
0x4009237	            0x7427	                            je 0x4009260	      5133	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15
0x4009239	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5136	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15
0x400923d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5136	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15
0x4009241	          0x488b18	                    mov rbx, qword [rax]	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009244	      0xbf00000000	                              mov edi, 0	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009249	      0xe800000000	                          call 0x400924e	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x400924e	          0x4889de	                            mov rsi, rbx	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009251	          0x4889c7	                            mov rdi, rax	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009254	      0xb800000000	                              mov eax, 0	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009259	      0xe800000000	                          call 0x400925e	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x400925e	            0xeb25	                           jmp 0x4009285	      5134	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	IF_15	CALL_16
0x4009260	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5141	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3
0x4009264	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5141	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3
0x4009268	          0x488b18	                    mov rbx, qword [rax]	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x400926b	      0xbf00000000	                              mov edi, 0	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x4009270	      0xe800000000	                          call 0x4009275	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x4009275	          0x4889de	                            mov rsi, rbx	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x4009278	          0x4889c7	                            mov rdi, rax	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x400927b	      0xb800000000	                              mov eax, 0	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x4009280	      0xe800000000	                          call 0x4009285	      5139	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12	IF_14	ELSE_3	CALL_18
0x4009285	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5145	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x4009289	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5145	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x400928d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5145	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x4009291	        0x48894580	             mov qword [rbp - 0x80], rax	      5145	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x4009295	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5146	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x4009299	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5146	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x400929d	          0x8b4070	            mov eax, dword [rax + 0x70] 	      5146	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40092a0	    0x898564ffffff	             mov dword [rbp - 0x9c], eax	      5146	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40092a6	            0xeb10	                           jmp 0x40092b8	      5146	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	IF_12
0x40092a8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5149	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4
0x40092ac	    0x8b8080000000	            mov eax, dword [rax + 0x80] 	      5149	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4
0x40092b2	    0x898564ffffff	             mov dword [rbp - 0x9c], eax	      5149	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4
0x40092b8	    0x83bd64ffffff	               cmp dword [rbp - 0x9c], 0	      5152	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092bf	     0xf8ead000000	                           jle 0x4009372	      5152	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092c5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      5154	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092c9	        0x488945b8	             mov qword [rbp - 0x48], rax	      5154	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092cd	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092d3	      0xba01000000	                              mov edx, 1	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092d8	            0x89c1	                            mov ecx, eax	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092da	          0x48d3e2	                             shl rdx, cl	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092dd	        0x488b4580	             mov rax, qword [rbp - 0x80]	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092e1	          0x4801d0	                            add rax, rdx	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092e4	        0x488d50ff	                      lea rdx, [rax - 1]	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092e8	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092ee	      0xbe01000000	                              mov esi, 1	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092f3	            0x89c1	                            mov ecx, eax	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092f5	          0x48d3e6	                             shl rsi, cl	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092f8	          0x4889f0	                            mov rax, rsi	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092fb	          0x48f7d8	                                 neg rax	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x40092fe	          0x4821d0	                            and rax, rdx	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x4009301	        0x48894580	             mov qword [rbp - 0x80], rax	      5155	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x4009305	        0x488b4580	             mov rax, qword [rbp - 0x80]	      5157	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x4009309	        0x482b45b8	             sub rax, qword [rbp - 0x48]	      5157	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x400930d	        0x48894588	             mov qword [rbp - 0x78], rax	      5157	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16
0x4009311	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      5158	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009316	            0x745a	                            je 0x4009372	      5158	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009318	    0x8b0500000000	            mov eax, dword [0x0400931e] 	      5159	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x400931e	            0x85c0	                           test eax, eax	      5159	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009320	            0x750d	                           jne 0x400932f	      5159	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009322	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5160	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009326	        0x488b4058	            mov rax, qword [rax + 0x58] 	      5160	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x400932a	          0x4885c0	                           test rax, rax	      5160	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x400932d	            0x7443	                            je 0x4009372	      5160	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x400932f	    0x8b0500000000	            mov eax, dword [0x04009335] 	      5161	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009335	          0x83f801	                              cmp eax, 1	      5161	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x4009338	            0x7438	                            je 0x4009372	      5161	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17
0x400933a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x400933e	        0x488b5830	            mov rbx, qword [rax + 0x30] 	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009342	        0x488b4588	             mov rax, qword [rbp - 0x78]	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009346	          0x4889c2	                            mov rdx, rax	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009349	      0xbe00000000	                              mov esi, 0	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x400934e	      0xbf00000000	                              mov edi, 0	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009353	      0xe800000000	                          call 0x4009358	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009358	          0x4889c1	                            mov rcx, rax	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x400935b	        0x488b4588	             mov rax, qword [rbp - 0x78]	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x400935f	          0x4889c2	                            mov rdx, rax	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009362	          0x4889de	                            mov rsi, rbx	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009365	          0x4889cf	                            mov rdi, rcx	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009368	      0xb800000000	                              mov eax, 0	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x400936d	      0xe800000000	                          call 0x4009372	      5162	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	ELSE_4	IF_16	IF_17	CALL_20
0x4009372	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x4009376	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x400937a	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x400937e	          0x4889c6	                            mov rsi, rax	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x4009381	      0xbf00000000	                              mov edi, 0	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x4009386	      0xe8b56cffff	            call sym.bfd_set_section_vma	      5170	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2	CALL_21
0x400938b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5172	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2
0x400938f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5172	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2
0x4009393	    0x48c740600000	               mov qword [rax + 0x60], 0	      5172	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_2
0x400939b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x400939f	        0x488b5050	            mov rdx, qword [rax + 0x50] 	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093a3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093a7	        0x488d7810	                   lea rdi, [rax + 0x10]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093ab	    0x448b8534ffff	             mov r8d, dword [rbp - 0xcc]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093b2	    0x488bb538ffff	             mov rsi, qword [rbp - 0xc8]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093b9	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093bd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093c1	          0x4589c1	                            mov r9d, r8d	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093c4	          0x4989f0	                             mov r8, rsi	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093c7	          0x4889c6	                            mov rsi, rax	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093ca	      0xe81ffaffff	           call sym.lang_size_sections_1	      5175	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_22
0x40093cf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5178	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40093d3	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      5178	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40093da	          0x83ca01	                               or edx, 1	      5178	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40093dd	    0x889090000000	               mov byte [rax + 0x90], dl	      5178	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40093e3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093e7	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093eb	    0x483d00000000	                              cmp rax, 0	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093f1	            0x7412	                            je 0x4009405	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093f3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093f7	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x40093fe	          0x83e008	                              and eax, 8	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x4009401	            0x84c0	                             test al, al	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x4009403	            0x7429	                            je 0x400942e	      5180	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_18
0x4009405	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x4009409	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x400940d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x4009411	          0x4885c0	                           test rax, rax	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x4009414	     0xf84af000000	                            je 0x40094c9	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x400941a	      0xbe42140000	                         mov esi, 0x1442	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x400941f	      0xbf00000000	                              mov edi, 0	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x4009424	      0xe800000000	                          call 0x4009429	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x4009429	      0xe99b000000	                           jmp 0x40094c9	      5186	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_23
0x400942e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5189	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009432	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5189	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009436	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5189	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400943a	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5189	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009441	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009445	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009449	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400944d	    0x8b0500000000	            mov eax, dword [0x04009453] 	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009453	            0x89c1	                            mov ecx, eax	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009455	          0x48d3ea	                             shr rdx, cl	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009458	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400945f	          0x4801c2	                            add rdx, rax	      5194	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009462	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5195	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009466	          0x8b4078	            mov eax, dword [rax + 0x78] 	      5195	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009469	            0x89c0	                            mov eax, eax	      5195	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400946b	          0x4801d0	                            add rax, rdx	      5195	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400946e	        0x488d50ff	                      lea rdx, [rax - 1]	      5195	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009472	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5196	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009476	          0x8b4078	            mov eax, dword [rax + 0x78] 	      5196	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009479	            0x89c0	                            mov eax, eax	      5196	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400947b	          0x48f7d8	                                 neg rax	      5196	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x400947e	          0x4821d0	                            and rax, rdx	      5193	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009481	        0x488945c0	             mov qword [rbp - 0x40], rax	      5193	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5
0x4009485	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x4009489	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x400948d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x4009490	      0x2500080000	                          and eax, 0x800	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x4009495	            0x85c0	                           test eax, eax	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x4009497	            0x7530	                           jne 0x40094c9	      5198	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x4009499	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x400949d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094a1	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094a5	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094a9	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094ad	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094b1	          0x4889ce	                            mov rsi, rcx	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094b4	          0x4829d6	                            sub rsi, rdx	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094b7	    0x8b1500000000	            mov edx, dword [0x040094bd] 	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094bd	            0x89d1	                            mov ecx, edx	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094bf	          0x48d3e6	                             shl rsi, cl	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094c2	          0x4889f2	                            mov rdx, rsi	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094c5	        0x48895038	             mov qword [rax + 0x38], rdx	      5199	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_5	IF_19
0x40094c9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5204	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40094cd	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5204	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40094d1	        0x48894590	             mov qword [rbp - 0x70], rax	      5204	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40094d5	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      5205	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_20
0x40094da	            0x7513	                           jne 0x40094ef	      5205	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_20
0x40094dc	      0xbe00000000	                              mov esi, 0	      5206	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_24
0x40094e1	      0xbf00000000	                              mov edi, 0	      5206	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_24
0x40094e6	      0xe800000000	                          call 0x40094eb	      5206	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_24
0x40094eb	        0x48894590	             mov qword [rbp - 0x70], rax	      5206	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_24
0x40094ef	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5208	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x40094f3	        0x488b4060	            mov rax, qword [rax + 0x60] 	      5208	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x40094f7	          0x4885c0	                           test rax, rax	      5208	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x40094fa	            0x7433	                            je 0x400952f	      5208	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x40094fc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x4009500	        0x488b4060	            mov rax, qword [rax + 0x60] 	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x4009504	      0xba00000000	                              mov edx, 0	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x4009509	      0xbe00000000	                              mov esi, 0	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x400950e	          0x4889c7	                            mov rdi, rax	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x4009511	      0xe800000000	                          call 0x4009516	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x4009516	        0x488945c8	             mov qword [rbp - 0x38], rax	      5210	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21	CALL_25
0x400951a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5211	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x400951e	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5211	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x4009522	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      5211	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x4009526	        0x48895030	             mov qword [rax + 0x30], rdx	      5211	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x400952a	      0xe92d020000	                           jmp 0x400975c	      5211	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_21
0x400952f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5213	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009533	        0x488b4048	            mov rax, qword [rax + 0x48] 	      5213	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009537	          0x4885c0	                           test rax, rax	      5213	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x400953a	     0xf84a7000000	                            je 0x40095e7	      5213	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009540	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5215	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009544	        0x488b4048	            mov rax, qword [rax + 0x48] 	      5215	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009548	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5215	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x400954c	        0x48894598	             mov qword [rbp - 0x68], rax	      5215	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x4009550	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5217	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x4009554	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5217	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x400955b	          0x83e040	                           and eax, 0x40	      5217	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x400955e	            0x84c0	                             test al, al	      5217	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x4009560	            0x740a	                            je 0x400956c	      5217	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x4009562	        0x488b4588	             mov rax, qword [rbp - 0x78]	      5218	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x4009566	        0x48014598	            add qword [rbp - 0x68], rax 	      5218	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x400956a	            0xeb66	                           jmp 0x40095d2	      5218	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	IF_23
0x400956c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009570	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009574	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009578	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x400957c	          0x4839c2	                            cmp rdx, rax	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x400957f	            0x7410	                            je 0x4009591	      5226	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009581	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5227	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009585	    0x8b8080000000	            mov eax, dword [rax + 0x80] 	      5227	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x400958b	    0x898564ffffff	             mov dword [rbp - 0x9c], eax	      5227	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_24
0x4009591	    0x83bd64ffffff	               cmp dword [rbp - 0x9c], 0	      5228	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x4009598	            0x7e38	                           jle 0x40095d2	      5228	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x400959a	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095a0	      0xba01000000	                              mov edx, 1	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095a5	            0x89c1	                            mov ecx, eax	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095a7	          0x48d3e2	                             shl rdx, cl	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095aa	        0x488b4598	             mov rax, qword [rbp - 0x68]	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095ae	          0x4801d0	                            add rax, rdx	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095b1	        0x488d50ff	                      lea rdx, [rax - 1]	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095b5	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095bb	      0xbe01000000	                              mov esi, 1	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095c0	            0x89c1	                            mov ecx, eax	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095c2	          0x48d3e6	                             shl rsi, cl	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095c5	          0x4889f0	                            mov rax, rsi	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095c8	          0x48f7d8	                                 neg rax	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095cb	          0x4821d0	                            and rax, rdx	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095ce	        0x48894598	             mov qword [rbp - 0x68], rax	      5229	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22	ELSE_7	IF_25
0x40095d2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5231	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x40095d6	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5231	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x40095da	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      5231	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x40095de	        0x48895030	             mov qword [rax + 0x30], rdx	      5231	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x40095e2	      0xe975010000	                           jmp 0x400975c	      5231	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_6	IF_22
0x40095e7	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5233	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x40095eb	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5233	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x40095ef	          0x4885c0	                           test rax, rax	      5233	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x40095f2	     0xf8464010000	                            je 0x400975c	      5233	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x40095f8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x40095fc	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009600	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009603	          0x83e001	                              and eax, 1	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009606	            0x85c0	                           test eax, eax	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009608	     0xf844e010000	                            je 0x400975c	      5234	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x400960e	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5239	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009612	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5239	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x4009616	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5239	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x400961a	        0x488945d0	             mov qword [rbp - 0x30], rax	      5239	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26
0x400961e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5245	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009622	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5245	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009626	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5245	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400962d	          0x4839c2	                            cmp rdx, rax	      5245	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009630	            0x767f	                           jbe 0x40096b1	      5245	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009632	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5246	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009636	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5246	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400963a	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5246	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400963e	          0x4885c0	                           test rax, rax	      5246	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009641	            0x746e	                            je 0x40096b1	      5246	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009643	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009647	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400964b	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400964f	    0x8b0500000000	            mov eax, dword [0x04009655] 	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009655	            0x89c1	                            mov ecx, eax	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009657	          0x48d3ea	                             shr rdx, cl	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400965a	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009661	          0x4801c2	                            add rdx, rax	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009664	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009668	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400966c	          0x4839c2	                            cmp rdx, rax	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x400966f	            0x7740	                            ja 0x40096b1	      5247	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27
0x4009671	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x4009675	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x4009679	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x400967d	        0x488b4030	            mov rax, qword [rax + 0x30] 	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x4009681	          0x4839c2	                            cmp rdx, rax	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x4009684	     0xf84d2000000	                            je 0x400975c	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x400968a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x400968e	        0x488b5830	            mov rbx, qword [rax + 0x30] 	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x4009692	      0xbf00000000	                              mov edi, 0	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x4009697	      0xe800000000	                          call 0x400969c	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x400969c	          0x4889de	                            mov rsi, rbx	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x400969f	          0x4889c7	                            mov rdi, rax	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x40096a2	      0xb800000000	                              mov eax, 0	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x40096a7	      0xe800000000	                          call 0x40096ac	      5256	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28	CALL_27
0x40096ac	      0xe9ab000000	                           jmp 0x400975c	      5255	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	IF_27	IF_28
0x40096b1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5263	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096b5	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      5263	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096bb	          0x83f801	                              cmp eax, 1	      5263	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096be	            0x7527	                           jne 0x40096e7	      5263	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096c0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096c4	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096c8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096cc	        0x488b7038	            mov rsi, qword [rax + 0x38] 	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096d0	    0x8b0500000000	            mov eax, dword [0x040096d6] 	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096d6	            0x89c1	                            mov ecx, eax	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096d8	          0x48d3ee	                             shr rsi, cl	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096db	          0x4889f0	                            mov rax, rsi	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096de	          0x4801d0	                            add rax, rdx	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096e1	        0x488945a0	             mov qword [rbp - 0x60], rax	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096e5	            0xeb24	                           jmp 0x400970b	      5264	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_29
0x40096e7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x40096eb	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x40096ef	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x40096f6	          0x4801c2	                            add rdx, rax	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x40096f9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x40096fd	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x4009701	          0x4829c2	                            sub rdx, rax	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x4009704	          0x4889d0	                            mov rax, rdx	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x4009707	        0x488945a0	             mov qword [rbp - 0x60], rax	      5269	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	ELSE_10
0x400970b	    0x83bd64ffffff	               cmp dword [rbp - 0x9c], 0	      5271	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009712	            0x7e38	                           jle 0x400974c	      5271	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009714	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400971a	      0xba01000000	                              mov edx, 1	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400971f	            0x89c1	                            mov ecx, eax	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009721	          0x48d3e2	                             shl rdx, cl	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009724	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009728	          0x4801d0	                            add rax, rdx	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400972b	        0x488d50ff	                      lea rdx, [rax - 1]	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400972f	    0x8b8564ffffff	             mov eax, dword [rbp - 0x9c]	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009735	      0xbe01000000	                              mov esi, 1	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400973a	            0x89c1	                            mov ecx, eax	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400973c	          0x48d3e6	                             shl rsi, cl	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400973f	          0x4889f0	                            mov rax, rsi	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009742	          0x48f7d8	                                 neg rax	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009745	          0x4821d0	                            and rax, rdx	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x4009748	        0x488945a0	             mov qword [rbp - 0x60], rax	      5272	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9	IF_30
0x400974c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5273	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9
0x4009750	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5273	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9
0x4009754	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      5273	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9
0x4009758	        0x48895030	             mov qword [rax + 0x30], rdx	      5273	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_8	IF_26	ELSE_9
0x400975c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5276	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009760	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      5276	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009767	          0x83ca02	                               or edx, 2	      5276	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400976a	    0x889090000000	               mov byte [rax + 0x90], dl	      5276	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009770	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009774	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009778	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400977b	          0x83e001	                              and eax, 1	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400977e	            0x85c0	                           test eax, eax	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009780	     0xf84a9000000	                            je 0x400982f	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009786	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400978a	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400978e	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009791	      0x2502040000	                          and eax, 0x402	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009796	      0x3d00040000	                          cmp eax, 0x400	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400979b	     0xf848e000000	                            je 0x400982f	      5292	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097a1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5293	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097a5	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5293	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097a9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5293	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097ad	          0x4885c0	                           test rax, rax	      5293	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097b0	            0x7553	                           jne 0x4009805	      5293	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097b2	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5294	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097b6	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5294	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097ba	          0x4885c0	                           test rax, rax	      5294	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097bd	            0x751d	                           jne 0x40097dc	      5294	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097bf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097c3	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097c7	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097cb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097cf	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097d3	        0x488b4030	            mov rax, qword [rax + 0x30] 	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097d7	          0x4839c2	                            cmp rdx, rax	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097da	            0x7529	                           jne 0x4009805	      5295	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097dc	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5296	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097e0	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5296	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097e4	          0x4885c0	                           test rax, rax	      5296	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097e7	            0x7446	                            je 0x400982f	      5296	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097e9	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5297	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097ed	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5297	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097f1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5298	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097f5	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5298	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x40097f9	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5297	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009800	          0x4839c2	                            cmp rdx, rax	      5297	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009803	            0x772a	                            ja 0x400982f	      5297	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009805	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5299	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009809	        0x488b4048	            mov rax, qword [rax + 0x48] 	      5299	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400980d	          0x4885c0	                           test rax, rax	      5299	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009810	            0x751d	                           jne 0x400982f	      5299	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009812	     0xfb605000000	           movzx eax, byte [0x04009819] 	      5300	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31	CALL_28
0x4009819	          0x83e003	                              and eax, 3	      5300	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31	CALL_28
0x400981c	            0x3c02	                               cmp al, 2	      5300	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31	CALL_28
0x400981e	            0x740f	                            je 0x400982f	      5300	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31	CALL_28
0x4009820	        0x488b4590	             mov rax, qword [rbp - 0x70]	      5301	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x4009824	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	      5301	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400982b	        0x48895040	             mov qword [rax + 0x40], rdx	      5301	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_31
0x400982f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009833	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009837	    0x483d00000000	                              cmp rax, 0	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x400983d	     0xf84ff070000	                            je 0x400a042	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009843	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009847	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x400984e	          0x83e008	                              and eax, 8	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009851	            0x84c0	                             test al, al	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009853	     0xf85e9070000	                           jne 0x400a042	      5303	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_32
0x4009859	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x400985d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009861	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009864	      0x2502040000	                          and eax, 0x402	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009869	      0x3d00040000	                          cmp eax, 0x400	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x400986e	            0x750e	                           jne 0x400987e	      5307	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009870	     0xfb605000000	           movzx eax, byte [0x04009877] 	      5308	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33	CALL_29
0x4009877	          0x83e003	                              and eax, 3	      5308	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33	CALL_29
0x400987a	            0x3c02	                               cmp al, 2	      5308	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33	CALL_29
0x400987c	            0x7520	                           jne 0x400989e	      5308	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33	CALL_29
0x400987e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009882	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009886	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x400988a	    0x8b0500000000	            mov eax, dword [0x04009890] 	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009890	            0x89c1	                            mov ecx, eax	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009892	          0x48d3ea	                             shr rdx, cl	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009895	          0x4889d0	                            mov rax, rdx	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x4009898	        0x48894588	             mov qword [rbp - 0x78], rax	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x400989c	            0xeb08	                           jmp 0x40098a6	      5309	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_33
0x400989e	    0x48c745880000	               mov qword [rbp - 0x78], 0	      5311	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	ELSE_11
0x40098a6	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      5312	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40098ad	        0x488b4588	             mov rax, qword [rbp - 0x78]	      5312	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40098b1	          0x4801d0	                            add rax, rdx	      5312	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40098b4	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5312	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40098bb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5314	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_34
0x40098bf	        0x488b4068	            mov rax, qword [rax + 0x68] 	      5314	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_34
0x40098c3	          0x4885c0	                           test rax, rax	      5314	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_34
0x40098c6	            0x741c	                            je 0x40098e4	      5314	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_34
0x40098c8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098cc	        0x488b4068	            mov rax, qword [rax + 0x68] 	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098d0	    0x488d9540ffff	                   lea rdx, [rbp - 0xc0]	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098d7	      0xbe00000000	                              mov esi, 0	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098dc	          0x4889c7	                            mov rdi, rax	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098df	      0xe800000000	                          call 0x40098e4	      5315	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_30
0x40098e4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5321	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098e8	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5321	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098ec	          0x4885c0	                           test rax, rax	      5321	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098ef	     0xf8443070000	                            je 0x400a038	      5321	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098f5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098f9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x40098fd	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x4009900	          0x83e003	                              and eax, 3	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x4009903	            0x85c0	                           test eax, eax	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x4009905	     0xf842d070000	                            je 0x400a038	      5322	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x400990b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5324	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x400990f	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5324	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x4009913	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      5324	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x400991a	        0x48895038	             mov qword [rax + 0x38], rdx	      5324	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35
0x400991e	    0x83bd34ffffff	               cmp dword [rbp - 0xcc], 0	      5326	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36
0x4009925	            0x7428	                            je 0x400994f	      5326	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36
0x4009927	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5329	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36
0x400992b	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5329	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36
0x400992f	        0x488b4828	            mov rcx, qword [rax + 0x28] 	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x4009933	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x4009937	        0x488b5058	            mov rdx, qword [rax + 0x58] 	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x400993b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x400993f	        0x488b7040	            mov rsi, qword [rax + 0x40] 	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x4009943	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x4009947	          0x4889c7	                            mov rdi, rax	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x400994a	      0xe8c5f2ffff	                call sym.os_region_check	      5328	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_36	CALL_31
0x400994f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009953	        0x488b4048	            mov rax, qword [rax + 0x48] 	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009957	          0x4885c0	                           test rax, rax	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400995a	     0xf84d8060000	                            je 0x400a038	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009960	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009964	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009968	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400996c	        0x488b4040	            mov rax, qword [rax + 0x40] 	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009970	          0x4839c2	                            cmp rdx, rax	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009973	     0xf84bf060000	                            je 0x400a038	      5331	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009979	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400997d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009981	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009984	          0x83e002	                              and eax, 2	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009987	            0x85c0	                           test eax, eax	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009989	            0x7516	                           jne 0x40099a1	      5332	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400998b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5333	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400998f	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5333	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009996	          0x83e040	                           and eax, 0x40	      5333	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x4009999	            0x84c0	                             test al, al	      5333	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x400999b	     0xf8497060000	                            je 0x400a038	      5333	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099a1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099a5	        0x488b4048	            mov rax, qword [rax + 0x48] 	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099a9	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099ad	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099b1	        0x488b4a30	            mov rcx, qword [rdx + 0x30] 	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099b5	        0x488b5588	             mov rdx, qword [rbp - 0x78]	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099b9	          0x4801ca	                            add rdx, rcx	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099bc	        0x48895038	             mov qword [rax + 0x38], rdx	      5335	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37
0x40099c0	    0x83bd34ffffff	               cmp dword [rbp - 0xcc], 0	      5337	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38
0x40099c7	     0xf846b060000	                            je 0x400a038	      5337	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38
0x40099cd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5339	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38
0x40099d1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5339	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38
0x40099d5	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099d9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099dd	        0x488b7048	            mov rsi, qword [rax + 0x48] 	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099e1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099e5	          0x4889d1	                            mov rcx, rdx	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099e8	      0xba00000000	                              mov edx, 0	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099ed	          0x4889c7	                            mov rdi, rax	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099f0	      0xe81ff2ffff	                call sym.os_region_check	      5338	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_35	IF_37	IF_38	CALL_32
0x40099f5	      0xe93e060000	                           jmp 0x400a038	      5343	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x40099fa	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a01	    0x8bbd34ffffff	             mov edi, dword [rbp - 0xcc]	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a07	    0x488bb538ffff	             mov rsi, qword [rbp - 0xc8]	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a0e	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a15	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a1c	          0x4189f9	                            mov r9d, edi	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a1f	          0x4989f0	                             mov r8, rsi	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a22	          0x4889c6	                            mov rsi, rax	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a25	      0xbf00000000	                              mov edi, 0	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a2a	      0xe8bff3ffff	           call sym.lang_size_sections_1	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a2f	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5346	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_33
0x4009a36	      0xe907060000	                           jmp 0x400a042	      5349	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a3b	    0xc78568ffffff	               mov dword [rbp - 0x98], 0	      5353	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a45	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      5356	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a4c	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5356	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a53	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5356	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a57	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5356	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a5b	          0x4829c2	                            sub rdx, rax	      5356	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a5e	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5355	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a65	        0x48895030	             mov qword [rax + 0x30], rdx	      5355	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a69	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5358	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a70	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5358	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a74	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5357	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a7b	        0x48895028	             mov qword [rax + 0x28], rdx	      5357	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009a7f	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a86	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a8a	    0x488d9540ffff	                   lea rdx, [rbp - 0xc0]	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a91	      0xbe00000000	                              mov esi, 0	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a96	          0x4889c7	                            mov rdi, rax	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a99	      0xe800000000	                          call 0x4009a9e	      5362	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_34
0x4009a9e	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009aa5	          0x8b4010	            mov eax, dword [rax + 0x10] 	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009aa8	      0x2d1a010000	                          sub eax, 0x11a	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009aad	          0x83f804	                              cmp eax, 4	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009ab0	            0x770c	                            ja 0x4009abe	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009ab2	            0x89c0	                            mov eax, eax	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009ab4	    0x488b04c50000	                  mov rax, qword [rax*8]	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009abc	            0xffe0	                                 jmp rax	      5364	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009abe	      0xba00000000	                              mov edx, 0	      5367	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2	CALL_35
0x4009ac3	      0xbef7140000	                         mov esi, 0x14f7	      5367	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2	CALL_35
0x4009ac8	      0xbf00000000	                              mov edi, 0	      5367	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2	CALL_35
0x4009acd	      0xe800000000	                          call 0x4009ad2	      5367	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2	CALL_35
0x4009ad2	    0xc78568ffffff	               mov dword [rbp - 0x98], 8	      5370	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009adc	            0xeb23	                           jmp 0x4009b01	      5371	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009ade	    0xc78568ffffff	               mov dword [rbp - 0x98], 4	      5373	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009ae8	            0xeb17	                           jmp 0x4009b01	      5374	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009aea	    0xc78568ffffff	               mov dword [rbp - 0x98], 2	      5376	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009af4	            0xeb0b	                           jmp 0x4009b01	      5377	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009af6	    0xc78568ffffff	               mov dword [rbp - 0x98], 1	      5379	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009b00	              0x90	                                     nop	      5380	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	SWITCH_2
0x4009b01	    0x8b0500000000	            mov eax, dword [0x04009b07] 	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b07	      0xba01000000	                              mov edx, 1	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b0c	            0x89c1	                            mov ecx, eax	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b0e	            0xd3e2	                             shl edx, cl	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b10	            0x89d0	                            mov eax, edx	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b12	    0x3b8568ffffff	             cmp eax, dword [rbp - 0x98]	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b18	            0x7617	                           jbe 0x4009b31	      5382	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b1a	    0x8b0500000000	            mov eax, dword [0x04009b20] 	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b20	      0xba01000000	                              mov edx, 1	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b25	            0x89c1	                            mov ecx, eax	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b27	            0xd3e2	                             shl edx, cl	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b29	            0x89d0	                            mov eax, edx	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b2b	    0x898568ffffff	             mov dword [rbp - 0x98], eax	      5383	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_39
0x4009b31	    0x8b0500000000	            mov eax, dword [0x04009b37] 	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b37	    0x8b9568ffffff	             mov edx, dword [rbp - 0x98]	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b3d	            0x89c1	                            mov ecx, eax	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b3f	            0xd3ea	                             shr edx, cl	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b41	            0x89d0	                            mov eax, edx	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b43	            0x89c2	                            mov edx, eax	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b45	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b4c	          0x4801d0	                            add rax, rdx	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b4f	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5384	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009b56	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5385	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b5d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5385	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b61	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5385	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b64	      0x2500080000	                          and eax, 0x800	      5386	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b69	            0x85c0	                           test eax, eax	      5385	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b6b	     0xf85ca040000	                           jne 0x400a03b	      5385	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b71	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5387	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b78	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5387	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b7c	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b83	    0x488b9550ffff	             mov rdx, qword [rbp - 0xb0]	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b8a	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b8e	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b92	          0x4829d1	                            sub rcx, rdx	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b95	          0x4889ce	                            mov rsi, rcx	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b98	    0x8b1500000000	            mov edx, dword [0x04009b9e] 	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009b9e	            0x89d1	                            mov ecx, edx	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009ba0	          0x48d3e6	                             shl rsi, cl	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009ba3	          0x4889f2	                            mov rdx, rsi	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009ba6	        0x48895038	             mov qword [rax + 0x38], rdx	      5388	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_40
0x4009baa	      0xe98c040000	                           jmp 0x400a03b	      5391	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009baf	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      5398	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bb6	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5398	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bbd	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5398	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bc1	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5398	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bc5	          0x4829c2	                            sub rdx, rax	      5398	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bc8	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5397	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bcf	        0x48895048	             mov qword [rax + 0x48], rdx	      5397	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bd3	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5400	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bda	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5400	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009bde	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5399	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009be5	        0x48895040	             mov qword [rax + 0x40], rdx	      5399	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009be9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5401	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_36
0x4009bf0	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5401	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_36
0x4009bf4	          0x4889c7	                            mov rdi, rax	      5401	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_36
0x4009bf7	      0xe800000000	                          call 0x4009bfc	      5401	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_36
0x4009bfc	    0x89856cffffff	             mov dword [rbp - 0x94], eax	      5401	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_36
0x4009c02	    0x8b0500000000	            mov eax, dword [0x04009c08] 	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c08	    0x8b956cffffff	             mov edx, dword [rbp - 0x94]	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c0e	            0x89c1	                            mov ecx, eax	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c10	            0xd3fa	                             sar edx, cl	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c12	            0x89d0	                            mov eax, edx	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c14	          0x4863d0	                         movsxd rdx, eax	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c17	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c1e	          0x4801d0	                            add rax, rdx	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c21	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5402	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c28	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5403	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c2f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5403	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c33	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5403	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c36	      0x2500080000	                          and eax, 0x800	      5404	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c3b	            0x85c0	                           test eax, eax	      5403	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c3d	     0xf85fb030000	                           jne 0x400a03e	      5403	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c43	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5405	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c4a	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5405	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c4e	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c55	    0x488b9550ffff	             mov rdx, qword [rbp - 0xb0]	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c5c	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c60	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c64	          0x4829d1	                            sub rcx, rdx	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c67	          0x4889ce	                            mov rsi, rcx	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c6a	    0x8b1500000000	            mov edx, dword [0x04009c70] 	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c70	            0x89d1	                            mov ecx, edx	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c72	          0x48d3e6	                             shl rsi, cl	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c75	          0x4889f2	                            mov rdx, rsi	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c78	        0x48895038	             mov qword [rax + 0x38], rdx	      5406	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_41
0x4009c7c	      0xe9bd030000	                           jmp 0x400a03e	      5408	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009c81	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009c88	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009c8f	        0x488d7830	                   lea rdi, [rax + 0x30]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009c93	    0x448b8534ffff	             mov r8d, dword [rbp - 0xcc]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009c9a	    0x488bb538ffff	             mov rsi, qword [rbp - 0xc8]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009ca1	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009ca8	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009caf	          0x4589c1	                            mov r9d, r8d	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009cb2	          0x4989f0	                             mov r8, rsi	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009cb5	          0x4889c6	                            mov rsi, rax	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009cb8	      0xe831f1ffff	           call sym.lang_size_sections_1	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009cbd	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5411	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_37
0x4009cc4	      0xe979030000	                           jmp 0x400a042	      5414	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009cc9	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5418	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009cd0	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5418	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009cd4	    0x488905000000	            mov qword [0x04009cdb], rax 	      5417	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009cdb	      0xe962030000	                           jmp 0x400a042	      5419	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009ce0	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5429	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009ce7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5429	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009ceb	        0x488945d8	             mov qword [rbp - 0x28], rax	      5429	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009cef	    0x4883bd38ffff	               cmp qword [rbp - 0xc8], 0	      5430	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42
0x4009cf7	            0x7468	                            je 0x4009d61	      5430	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42
0x4009cf9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009cfd	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d04	        0x488b4008	                mov rax, qword [rax + 8]	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d08	    0x488b80b00200	           mov rax, qword [rax + 0x2b0] 	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d0f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d13	    0x488bbaf00000	            mov rdi, qword [rdx + 0xf0] 	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d1a	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d21	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d25	          0x4889d1	                            mov rcx, rdx	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d28	      0xba00000000	                              mov edx, 0	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d2d	            0xffd0	                                call rax	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d2f	            0x85c0	                           test eax, eax	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d31	            0x7517	                           jne 0x4009d4a	      5434	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_43
0x4009d33	      0xbf00000000	                              mov edi, 0	      5435	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	CALL_39
0x4009d38	      0xe800000000	                          call 0x4009d3d	      5435	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	CALL_39
0x4009d3d	          0x4889c7	                            mov rdi, rax	      5435	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	CALL_39
0x4009d40	      0xb800000000	                              mov eax, 0	      5435	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	CALL_39
0x4009d45	      0xe800000000	                          call 0x4009d4a	      5435	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	CALL_39
0x4009d4a	    0x8b8570ffffff	             mov eax, dword [rbp - 0x90]	      5436	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_44
0x4009d50	            0x85c0	                           test eax, eax	      5436	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_44
0x4009d52	            0x740d	                            je 0x4009d61	      5436	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_44
0x4009d54	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	      5437	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_44
0x4009d5b	    0xc70001000000	                      mov dword [rax], 1	      5437	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_42	IF_44
0x4009d61	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d68	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d6f	    0x488bb550ffff	             mov rsi, qword [rbp - 0xb0]	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d76	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d7d	          0x4889c7	                            mov rdi, rax	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d80	      0xe80ee6ffff	             call sym.size_input_section	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d85	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5439	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_40
0x4009d8c	      0xe9b1020000	                           jmp 0x400a042	      5442	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009d91	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5449	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009d98	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5449	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009d9c	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5448	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009da3	        0x48895020	             mov qword [rax + 0x20], rdx	      5448	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009da7	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5451	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dae	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5451	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009db2	    0x48898548ffff	             mov qword [rbp - 0xb8], rax	      5451	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009db9	      0xe984020000	                           jmp 0x400a042	      5452	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dbe	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5456	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dc5	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      5456	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dcc	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5457	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dd3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5457	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009dd7	        0x488945e0	             mov qword [rbp - 0x20], rax	      5457	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009ddb	    0xc70500000000	               mov dword [0x04009de5], 0	      5459	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009de5	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009dec	        0x488b4838	            mov rcx, qword [rax + 0x38] 	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009df0	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009df7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009dfb	          0x4889ce	                            mov rsi, rcx	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009dfe	          0x4889c7	                            mov rdi, rax	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009e01	      0xe800000000	                          call 0x4009e06	      5461	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_41
0x4009e06	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5465	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_42
0x4009e0d	      0xbe00000000	                              mov esi, 0	      5465	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_42
0x4009e12	          0x4889c7	                            mov rdi, rax	      5465	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_42
0x4009e15	      0xe837efffff	      call sym.ldlang_check_relro_region	      5465	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_42
0x4009e1a	    0xc70500000000	               mov dword [0x04009e24], 0	      5467	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009e24	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5470	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e28	          0x8b4010	            mov eax, dword [rax + 0x10] 	      5470	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e2b	          0x83f806	                              cmp eax, 6	      5470	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e2e	            0x740c	                            je 0x4009e3c	      5470	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e30	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5471	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e34	          0x8b4010	            mov eax, dword [rax + 0x10] 	      5471	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e37	          0x83f804	                              cmp eax, 4	      5471	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e3a	            0x7539	                           jne 0x4009e75	      5471	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e3c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5472	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e40	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5472	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e44	           0xfb600	                   movzx eax, byte [rax]	      5472	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e47	            0x3c2e	                            cmp al, 0x2e	      5472	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e49	            0x7513	                           jne 0x4009e5e	      5472	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e4b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e4f	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e53	        0x4883c001	                              add rax, 1	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e57	           0xfb600	                   movzx eax, byte [rax]	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e5a	            0x84c0	                             test al, al	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e5c	            0x7417	                            je 0x4009e75	      5473	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e5e	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5474	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e65	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      5474	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e6c	          0x83ca10	                            or edx, 0x10	      5474	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e6f	    0x889090000000	               mov byte [rax + 0x90], dl	      5474	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_45
0x4009e75	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5476	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009e7c	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5476	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009e83	          0x83e008	                              and eax, 8	      5476	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009e86	            0x84c0	                             test al, al	      5476	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009e88	     0xf85b3010000	                           jne 0x400a041	      5476	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009e8e	    0x488b05000000	            mov rax, qword [0x04009e95] 	      5478	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009e95	    0x48398550ffff	            cmp qword [rbp - 0xb0], rax 	      5478	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009e9c	            0x7522	                           jne 0x4009ec0	      5478	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009e9e	      0xbe00000000	                              mov esi, 0	      5482	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47	CALL_43
0x4009ea3	      0xbf00000000	                              mov edi, 0	      5482	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47	CALL_43
0x4009ea8	      0xe800000000	                          call 0x4009ead	      5482	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47	CALL_43
0x4009ead	          0x4889c2	                            mov rdx, rax	      5482	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47	CALL_43
0x4009eb0	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      5483	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009eb7	        0x48894238	             mov qword [rdx + 0x38], rax	      5483	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009ebb	      0xe9ce000000	                           jmp 0x4009f8e	      5483	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	IF_47
0x4009ec0	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	      5485	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009ec7	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5485	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009ece	          0x4839c2	                            cmp rdx, rax	      5485	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009ed1	     0xf84b7000000	                            je 0x4009f8e	      5485	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009ed7	    0x4c8b8540ffff	              mov r8, qword [rbp - 0xc0]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009ede	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009ee5	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009ee9	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009ef0	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009ef7	          0x4829c1	                            sub rcx, rax	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009efa	          0x4889ce	                            mov rsi, rcx	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009efd	    0x8b0500000000	            mov eax, dword [0x04009f03] 	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f03	          0x4889f7	                            mov rdi, rsi	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f06	            0x89c1	                            mov ecx, eax	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f08	          0x48d3e7	                             shl rdi, cl	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f0b	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f12	    0x488bb548ffff	             mov rsi, qword [rbp - 0xb8]	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f19	          0x4889d1	                            mov rcx, rdx	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f1c	          0x4889fa	                            mov rdx, rdi	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f1f	          0x4889c7	                            mov rdi, rax	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f22	      0xe822e3ffff	                     call sym.insert_pad	      5490	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	CALL_44
0x4009f27	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5494	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009f2e	          0x488b00	                    mov rax, qword [rax]	      5494	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009f31	    0x48898578ffff	             mov qword [rbp - 0x88], rax	      5494	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48
0x4009f38	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5500	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f3f	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      5500	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f45	          0x83f803	                              cmp eax, 3	      5500	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f48	            0x7444	                            je 0x4009f8e	      5500	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f4a	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5501	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f51	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      5501	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f57	          0x83f802	                              cmp eax, 2	      5501	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f5a	            0x7513	                           jne 0x4009f6f	      5501	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f5c	    0x488b05000000	            mov rax, qword [0x04009f63] 	      5502	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f63	        0x488b4008	                mov rax, qword [rax + 8]	      5502	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f67	          0x8b4008	                mov eax, dword [rax + 8]	      5502	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f6a	          0x83f805	                              cmp eax, 5	      5502	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f6d	            0x751f	                           jne 0x4009f8e	      5502	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f6f	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f76	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f7a	    0x488b9550ffff	             mov rdx, qword [rbp - 0xb0]	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f81	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f85	          0x8b5220	            mov edx, dword [rdx + 0x20] 	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f88	          0x83ca01	                               or edx, 1	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f8b	          0x895020	             mov dword [rax + 0x20], edx	      5504	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46	ELSE_12	IF_48	IF_49
0x4009f8e	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      5506	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009f95	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5506	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_46
0x4009f9c	      0xe9a0000000	                           jmp 0x400a041	      5509	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fa1	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5517	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fa8	    0x48c740180000	               mov qword [rax + 0x18], 0	      5517	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fb0	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fb7	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fbe	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fc2	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fc6	          0x4829c2	                            sub rdx, rax	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fc9	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fd0	        0x48895010	             mov qword [rax + 0x10], rdx	      5525	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fd4	            0xeb6c	                           jmp 0x400a042	      5526	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x4009fd6	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009fdd	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009fe4	        0x488d7810	                   lea rdi, [rax + 0x10]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009fe8	    0x448b8534ffff	             mov r8d, dword [rbp - 0xcc]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009fef	    0x488bb538ffff	             mov rsi, qword [rbp - 0xc8]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009ff6	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x4009ffd	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a004	          0x4589c1	                            mov r9d, r8d	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a007	          0x4989f0	                             mov r8, rsi	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a00a	          0x4889c6	                            mov rsi, rax	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a00d	      0xe8dcedffff	           call sym.lang_size_sections_1	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a012	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	      5529	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_45
0x400a019	            0xeb27	                           jmp 0x400a042	      5532	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a01b	      0xbea6150000	                         mov esi, 0x15a6	      5542	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_46
0x400a020	      0xbf00000000	                              mov edi, 0	      5542	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_46
0x400a025	      0xe800000000	                          call 0x400a02a	      5542	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	CALL_46
0x400a02a	            0xeb16	                           jmp 0x400a042	      5543	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a02c	              0x90	                                     nop	      5445	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a02d	            0xeb13	                           jmp 0x400a042	      5445	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a02f	              0x90	                                     nop	      5028	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x400a030	            0xeb10	                           jmp 0x400a042	      5028	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_1
0x400a032	              0x90	                                     nop	      5057	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x400a033	            0xeb0d	                           jmp 0x400a042	      5057	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_7
0x400a035	              0x90	                                     nop	      5084	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x400a036	            0xeb0a	                           jmp 0x400a042	      5084	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1	IF_8
0x400a038	              0x90	                                     nop	      5343	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a039	            0xeb07	                           jmp 0x400a042	      5343	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a03b	              0x90	                                     nop	      5391	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a03c	            0xeb04	                           jmp 0x400a042	      5391	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a03e	              0x90	                                     nop	      5408	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a03f	            0xeb01	                           jmp 0x400a042	      5408	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a041	              0x90	                                     nop	      5509	ldlang.c	FUNCTION_115	FOR_1	SWITCH_1
0x400a042	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5545	ldlang.c	FUNCTION_115	FOR_1
0x400a049	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      5545	ldlang.c	FUNCTION_115	FOR_1
0x400a050	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      5015	ldlang.c	FUNCTION_115	FOR_1
0x400a057	          0x488b00	                    mov rax, qword [rax]	      5015	ldlang.c	FUNCTION_115	FOR_1
0x400a05a	    0x48898578ffff	             mov qword [rbp - 0x88], rax	      5015	ldlang.c	FUNCTION_115	FOR_1
0x400a061	    0x4883bd78ffff	               cmp qword [rbp - 0x88], 0	      5015	ldlang.c	FUNCTION_115	FOR_1
0x400a069	     0xf85dcedffff	                           jne 0x4008e4b	      5015	ldlang.c	FUNCTION_115	FOR_1
0x400a06f	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	      5547	ldlang.c	FUNCTION_115
0x400a076	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      5548	ldlang.c	FUNCTION_115
0x400a07a	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      5548	ldlang.c	FUNCTION_115
0x400a083	            0x7405	                            je 0x400a08a	      5548	ldlang.c	FUNCTION_115
0x400a085	      0xe800000000	                          call 0x400a08a	      5548	ldlang.c	FUNCTION_115
0x400a08a	    0x4881c4c00000	                           add rsp, 0xc0	      5548	ldlang.c	FUNCTION_115
0x400a091	              0x5b	                                 pop rbx	      5548	ldlang.c	FUNCTION_115
0x400a092	            0x415c	                                 pop r12	      5548	ldlang.c	FUNCTION_115
0x400a094	              0x5d	                                 pop rbp	      5548	ldlang.c	FUNCTION_115
0x400a095	              0xc3	                                     ret	      5548	ldlang.c	FUNCTION_115
lang_add_insert	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	22
0x400d86c	              0x55	                                push rbp	      7700	ldlang.c	FUNCTION_181
0x400d86d	          0x4889e5	                            mov rbp, rsp	      7700	ldlang.c	FUNCTION_181
0x400d870	        0x4883ec20	                           sub rsp, 0x20	      7700	ldlang.c	FUNCTION_181
0x400d874	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7700	ldlang.c	FUNCTION_181
0x400d878	          0x8975e4	             mov dword [rbp - 0x1c], esi	      7700	ldlang.c	FUNCTION_181
0x400d87b	    0x488b05000000	            mov rax, qword [0x0400d882] 	      7703	ldlang.c	FUNCTION_181
0x400d882	          0x4889c2	                            mov rdx, rax	      7703	ldlang.c	FUNCTION_181
0x400d885	      0xbe20000000	                           mov esi, 0x20	      7703	ldlang.c	FUNCTION_181
0x400d88a	      0xbf0e000000	                            mov edi, 0xe	      7703	ldlang.c	FUNCTION_181
0x400d88f	      0xe8db41ffff	                  call sym.new_statement	      7703	ldlang.c	FUNCTION_181
0x400d894	        0x488945f8	                mov qword [rbp - 8], rax	      7703	ldlang.c	FUNCTION_181
0x400d898	        0x488b45f8	                mov rax, qword [rbp - 8]	      7704	ldlang.c	FUNCTION_181
0x400d89c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7704	ldlang.c	FUNCTION_181
0x400d8a0	        0x48895010	             mov qword [rax + 0x10], rdx	      7704	ldlang.c	FUNCTION_181
0x400d8a4	        0x488b45f8	                mov rax, qword [rbp - 8]	      7705	ldlang.c	FUNCTION_181
0x400d8a8	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      7705	ldlang.c	FUNCTION_181
0x400d8ab	          0x895018	             mov dword [rax + 0x18], edx	      7705	ldlang.c	FUNCTION_181
0x400d8ae	    0x488b05000000	            mov rax, qword [0x0400d8b5] 	      7706	ldlang.c	FUNCTION_181
0x400d8b5	    0x488905000000	            mov qword [0x0400d8bc], rax 	      7706	ldlang.c	FUNCTION_181
0x400d8bc	              0x90	                                     nop	      7707	ldlang.c	FUNCTION_181
0x400d8bd	              0xc9	                                   leave	      7707	ldlang.c	FUNCTION_181
0x400d8be	              0xc3	                                     ret	      7707	ldlang.c	FUNCTION_181
update_wild_statements	functions,0:ELSE,0:FOR,2:CALL,6:IF,3:DO,0:WHILE,0:SWITCH,3	105
0x40061c2	              0x55	                                push rbp	      3523	ldlang.c	FUNCTION_85
0x40061c3	          0x4889e5	                            mov rbp, rsp	      3523	ldlang.c	FUNCTION_85
0x40061c6	        0x4883ec20	                           sub rsp, 0x20	      3523	ldlang.c	FUNCTION_85
0x40061ca	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3523	ldlang.c	FUNCTION_85
0x40061ce	    0x8b0500000000	            mov eax, dword [0x040061d4] 	      3526	ldlang.c	FUNCTION_85	SWITCH_1
0x40061d4	            0x85c0	                           test eax, eax	      3526	ldlang.c	FUNCTION_85	SWITCH_1
0x40061d6	     0xf8450010000	                            je 0x400632c	      3526	ldlang.c	FUNCTION_85	SWITCH_1
0x40061dc	          0x83f802	                              cmp eax, 2	      3526	ldlang.c	FUNCTION_85	SWITCH_1
0x40061df	            0x7614	                           jbe 0x40061f5	      3526	ldlang.c	FUNCTION_85	SWITCH_1
0x40061e1	      0xbec90d0000	                          mov esi, 0xdc9	      3529	ldlang.c	FUNCTION_85	SWITCH_1	CALL_1
0x40061e6	      0xbf00000000	                              mov edi, 0	      3529	ldlang.c	FUNCTION_85	SWITCH_1	CALL_1
0x40061eb	      0xe800000000	                          call 0x40061f0	      3529	ldlang.c	FUNCTION_85	SWITCH_1	CALL_1
0x40061f0	      0xe937010000	                           jmp 0x400632c	      3532	ldlang.c	FUNCTION_85	SWITCH_1
0x40061f5	      0xe925010000	                           jmp 0x400631f	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x40061fa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x40061fe	          0x8b4008	                mov eax, dword [rax + 8]	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006201	          0x83f804	                              cmp eax, 4	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006204	            0x7429	                            je 0x400622f	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006206	          0x83f804	                              cmp eax, 4	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006209	            0x770d	                            ja 0x4006218	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x400620b	            0x85c0	                           test eax, eax	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x400620d	     0xf84aa000000	                            je 0x40062bd	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006213	      0xe9fc000000	                           jmp 0x4006314	      3541	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006218	          0x83f80d	                            cmp eax, 0xd	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x400621b	     0xf84e0000000	                            je 0x4006301	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006221	          0x83f80f	                            cmp eax, 0xf	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006224	     0xf8482000000	                            je 0x40062ac	      3538	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x400622a	      0xe9e5000000	                           jmp 0x4006314	      3541	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x400622f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x4006233	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x4006237	        0x488945f8	                mov qword [rbp - 8], rax	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x400623b	            0xeb66	                           jmp 0x40062a3	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x400623d	        0x488b45f8	                mov rax, qword [rbp - 8]	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006241	          0x8b4018	            mov eax, dword [rax + 0x18] 	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006244	          0x83f801	                              cmp eax, 1	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006247	            0x741b	                            je 0x4006264	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006249	          0x83f801	                              cmp eax, 1	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x400624c	            0x7207	                            jb 0x4006255	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x400624e	          0x83f802	                              cmp eax, 2	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006251	            0x7429	                            je 0x400627c	      3547	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006253	            0xeb43	                           jmp 0x4006298	      3561	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006255	    0x8b1500000000	            mov edx, dword [0x0400625b] 	      3550	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x400625b	        0x488b45f8	                mov rax, qword [rbp - 8]	      3550	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x400625f	          0x895018	             mov dword [rax + 0x18], edx	      3550	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006262	            0xeb34	                           jmp 0x4006298	      3551	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006264	    0x8b0500000000	            mov eax, dword [0x0400626a] 	      3553	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_1
0x400626a	          0x83f802	                              cmp eax, 2	      3553	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_1
0x400626d	            0x7525	                           jne 0x4006294	      3553	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_1
0x400626f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3554	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_1
0x4006273	    0xc74018030000	               mov dword [rax + 0x18], 3	      3554	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_1
0x400627a	            0xeb18	                           jmp 0x4006294	      3555	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x400627c	    0x8b0500000000	            mov eax, dword [0x04006282] 	      3557	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_2
0x4006282	          0x83f801	                              cmp eax, 1	      3557	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_2
0x4006285	            0x7510	                           jne 0x4006297	      3557	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_2
0x4006287	        0x488b45f8	                mov rax, qword [rbp - 8]	      3558	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_2
0x400628b	    0xc74018040000	               mov dword [rax + 0x18], 4	      3558	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3	IF_2
0x4006292	            0xeb03	                           jmp 0x4006297	      3559	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006294	              0x90	                                     nop	      3555	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006295	            0xeb01	                           jmp 0x4006298	      3555	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006297	              0x90	                                     nop	      3559	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2	SWITCH_3
0x4006298	        0x488b45f8	                mov rax, qword [rbp - 8]	      3545	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x400629c	          0x488b00	                    mov rax, qword [rax]	      3545	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x400629f	        0x488945f8	                mov qword [rbp - 8], rax	      3545	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x40062a3	      0x48837df800	                  cmp qword [rbp - 8], 0	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x40062a8	            0x7593	                           jne 0x400623d	      3544	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	FOR_2
0x40062aa	            0xeb68	                           jmp 0x4006314	      3564	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x40062ac	    0x488b05000000	            mov rax, qword [0x040062b3] 	      3567	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_2
0x40062b3	          0x4889c7	                            mov rdi, rax	      3567	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_2
0x40062b6	      0xe807ffffff	         call sym.update_wild_statements	      3567	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_2
0x40062bb	            0xeb57	                           jmp 0x4006314	      3568	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x40062bd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062c1	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062c5	      0xbe00000000	                              mov esi, 0	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062ca	          0x4889c7	                            mov rdi, rax	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062cd	      0xe800000000	                          call 0x40062d2	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062d2	            0x85c0	                           test eax, eax	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062d4	            0x743d	                            je 0x4006313	      3572	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_3
0x40062d6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062da	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062de	      0xbe00000000	                              mov esi, 0	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062e3	          0x4889c7	                            mov rdi, rax	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062e6	      0xe800000000	                          call 0x40062eb	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062eb	            0x85c0	                           test eax, eax	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062ed	            0x7424	                            je 0x4006313	      3573	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_4
0x40062ef	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3575	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3
0x40062f3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3575	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3
0x40062f7	          0x4889c7	                            mov rdi, rax	      3574	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_5
0x40062fa	      0xe8c3feffff	         call sym.update_wild_statements	      3574	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	IF_3	CALL_5
0x40062ff	            0xeb12	                           jmp 0x4006313	      3576	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006301	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3579	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_6
0x4006305	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3579	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_6
0x4006309	          0x4889c7	                            mov rdi, rax	      3579	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_6
0x400630c	      0xe8b1feffff	         call sym.update_wild_statements	      3579	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2	CALL_6
0x4006311	            0xeb01	                           jmp 0x4006314	      3580	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006313	              0x90	                                     nop	      3576	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1	SWITCH_2
0x4006314	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x4006318	          0x488b00	                    mov rax, qword [rax]	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x400631b	        0x488945e8	             mov qword [rbp - 0x18], rax	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x400631f	      0x48837de800	               cmp qword [rbp - 0x18], 0	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x4006324	     0xf85d0feffff	                           jne 0x40061fa	      3536	ldlang.c	FUNCTION_85	SWITCH_1	FOR_1
0x400632a	            0xeb01	                           jmp 0x400632d	      3583	ldlang.c	FUNCTION_85	SWITCH_1
0x400632c	              0x90	                                     nop	      3532	ldlang.c	FUNCTION_85	SWITCH_1
0x400632d	              0x90	                                     nop	      3585	ldlang.c	FUNCTION_85
0x400632e	              0xc9	                                   leave	      3585	ldlang.c	FUNCTION_85
0x400632f	              0xc3	                                     ret	      3585	ldlang.c	FUNCTION_85
init_opb	functions,0:ELSE,0:FOR,0:CALL,2:IF,1:DO,0:WHILE,1:SWITCH,0	29
0x4005a9d	              0x55	                                push rbp	      3226	ldlang.c	ELSE_3	FUNCTION_77
0x4005a9e	          0x4889e5	                            mov rbp, rsp	      3226	ldlang.c	ELSE_3	FUNCTION_77
0x4005aa1	        0x4883ec10	                           sub rsp, 0x10	      3226	ldlang.c	ELSE_3	FUNCTION_77
0x4005aa5	    0x488b15000000	            mov rdx, qword [0x04005aac] 	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005aac	    0x8b0500000000	            mov eax, dword [0x04005ab2] 	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005ab2	          0x4889d6	                            mov rsi, rdx	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005ab5	            0x89c7	                            mov edi, eax	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005ab7	      0xe800000000	                          call 0x4005abc	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005abc	          0x8945fc	                mov dword [rbp - 4], eax	      3227	ldlang.c	ELSE_3	FUNCTION_77	CALL_1
0x4005abf	    0xc70500000000	               mov dword [0x04005ac9], 0	      3229	ldlang.c	ELSE_3	FUNCTION_77
0x4005ac9	        0x837dfc01	                  cmp dword [rbp - 4], 1	      3230	ldlang.c	ELSE_3	FUNCTION_77	IF_1
0x4005acd	            0x761e	                           jbe 0x4005aed	      3230	ldlang.c	ELSE_3	FUNCTION_77	IF_1
0x4005acf	            0xeb12	                           jmp 0x4005ae3	      3231	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ad1	          0xd16dfc	                  shr dword [rbp - 4], 1	      3233	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ad4	    0x8b0500000000	            mov eax, dword [0x04005ada] 	      3234	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ada	          0x83c001	                              add eax, 1	      3234	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005add	    0x890500000000	            mov dword [0x04005ae3], eax 	      3234	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ae3	          0x8b45fc	                mov eax, dword [rbp - 4]	      3231	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ae6	          0x83e001	                              and eax, 1	      3231	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005ae9	            0x85c0	                           test eax, eax	      3231	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005aeb	            0x74e4	                            je 0x4005ad1	      3231	ldlang.c	ELSE_3	FUNCTION_77	IF_1	WHILE_1
0x4005aed	        0x837dfc01	                  cmp dword [rbp - 4], 1	      3236	ldlang.c	ELSE_3	FUNCTION_77	CALL_2
0x4005af1	            0x740f	                            je 0x4005b02	      3236	ldlang.c	ELSE_3	FUNCTION_77	CALL_2
0x4005af3	      0xbea40c0000	                          mov esi, 0xca4	      3236	ldlang.c	ELSE_3	FUNCTION_77	CALL_2
0x4005af8	      0xbf00000000	                              mov edi, 0	      3236	ldlang.c	ELSE_3	FUNCTION_77	CALL_2
0x4005afd	      0xe800000000	                          call 0x4005b02	      3236	ldlang.c	ELSE_3	FUNCTION_77	CALL_2
0x4005b02	              0x90	                                     nop	      3237	ldlang.c	ELSE_3	FUNCTION_77
0x4005b03	              0xc9	                                   leave	      3237	ldlang.c	ELSE_3	FUNCTION_77
0x4005b04	              0xc3	                                     ret	      3237	ldlang.c	ELSE_3	FUNCTION_77
lang_do_version_exports_section	functions,1:ELSE,0:FOR,0:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	95
0x400f295	              0x55	                                push rbp	      8577	ldlang.c	FUNCTION_201
0x400f296	          0x4889e5	                            mov rbp, rsp	      8577	ldlang.c	FUNCTION_201
0x400f299	        0x4883ec40	                           sub rsp, 0x40	      8577	ldlang.c	FUNCTION_201
0x400f29d	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      8578	ldlang.c	FUNCTION_201
0x400f2a5	    0x488b05000000	            mov rax, qword [0x0400f2ac] 	      8580	ldlang.c	FUNCTION_201
0x400f2ac	        0x488945d0	             mov qword [rbp - 0x30], rax	      8580	ldlang.c	FUNCTION_201
0x400f2b0	      0xe9ff000000	                           jmp 0x400f3b4	      8580	ldlang.c	FUNCTION_201
0x400f2b5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2b9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2bd	      0xbe00000000	                              mov esi, 0	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2c2	          0x4889c7	                            mov rdi, rax	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2c5	      0xe800000000	                          call 0x400f2ca	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2ca	        0x488945e0	             mov qword [rbp - 0x20], rax	      8582	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_1
0x400f2ce	      0x48837de000	               cmp qword [rbp - 0x20], 0	      8586	ldlang.c	FUNCTION_201	FUNCTION_1	IF_1
0x400f2d3	     0xf84ce000000	                            je 0x400f3a7	      8586	ldlang.c	FUNCTION_201	FUNCTION_1	IF_1
0x400f2d9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8589	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f2dd	        0x488b4038	            mov rax, qword [rax + 0x38] 	      8589	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f2e1	        0x488945e8	             mov qword [rbp - 0x18], rax	      8589	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f2e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8590	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_2
0x400f2e9	          0x4889c7	                            mov rdi, rax	      8590	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_2
0x400f2ec	      0xe800000000	                          call 0x400f2f1	      8590	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_2
0x400f2f1	        0x488945f0	             mov qword [rbp - 0x10], rax	      8590	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_2
0x400f2f5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f2f9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f2fd	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f301	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f305	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f309	          0x4989c8	                             mov r8, rcx	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f30c	      0xb900000000	                              mov ecx, 0	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f311	          0x4889c7	                            mov rdi, rax	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f314	      0xe800000000	                          call 0x400f319	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f319	            0x85c0	                           test eax, eax	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f31b	            0x7521	                           jne 0x400f33e	      8591	ldlang.c	FUNCTION_201	FUNCTION_1	IF_2	CALL_3
0x400f31d	      0xbf00000000	                              mov edi, 0	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f322	      0xe800000000	                          call 0x400f327	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f327	          0x4889c2	                            mov rdx, rax	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f32a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f32e	          0x4889c6	                            mov rsi, rax	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f331	          0x4889d7	                            mov rdi, rdx	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f334	      0xb800000000	                              mov eax, 0	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f339	      0xe800000000	                          call 0x400f33e	      8592	ldlang.c	FUNCTION_201	FUNCTION_1	CALL_5
0x400f33e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8594	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f342	        0x488945d8	             mov qword [rbp - 0x28], rax	      8594	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f346	            0xeb37	                           jmp 0x400f37f	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f348	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f34c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f350	      0xb900000000	                              mov ecx, 0	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f355	      0xba00000000	                              mov edx, 0	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f35a	          0x4889c7	                            mov rdi, rax	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f35d	      0xe800000000	                          call 0x400f362	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f362	        0x488945c8	             mov qword [rbp - 0x38], rax	      8597	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_6
0x400f366	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f36a	      0xbe00000000	                              mov esi, 0	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f36f	          0x4889c7	                            mov rdi, rax	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f372	      0xe800000000	                          call 0x400f377	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f377	        0x4883c001	                              add rax, 1	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f37b	        0x488945d8	             mov qword [rbp - 0x28], rax	      8598	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1	CALL_7
0x400f37f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f383	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f387	          0x4801d0	                            add rax, rdx	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f38a	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f38e	            0x77b8	                            ja 0x400f348	      8595	ldlang.c	FUNCTION_201	FUNCTION_1	WHILE_1
0x400f390	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f394	          0x8b4020	            mov eax, dword [rax + 0x20] 	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f397	       0xd00802000	                        or eax, 0x208000	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f39c	            0x89c2	                            mov edx, eax	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f39e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f3a2	          0x895020	             mov dword [rax + 0x20], edx	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f3a5	            0xeb01	                           jmp 0x400f3a8	      8604	ldlang.c	FUNCTION_201	FUNCTION_1
0x400f3a7	              0x90	                                     nop	      8587	ldlang.c	FUNCTION_201	FUNCTION_1	IF_1
0x400f3a8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8580	ldlang.c	FUNCTION_201
0x400f3ac	        0x488b4030	            mov rax, qword [rax + 0x30] 	      8580	ldlang.c	FUNCTION_201
0x400f3b0	        0x488945d0	             mov qword [rbp - 0x30], rax	      8580	ldlang.c	FUNCTION_201
0x400f3b4	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8580	ldlang.c	FUNCTION_201
0x400f3b9	     0xf85f6feffff	                           jne 0x400f2b5	      8580	ldlang.c	FUNCTION_201
0x400f3bf	      0xb900000000	                              mov ecx, 0	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3c4	      0xba00000000	                              mov edx, 0	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3c9	      0xbe00000000	                              mov esi, 0	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3ce	      0xbf00000000	                              mov edi, 0	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3d3	      0xe800000000	                          call 0x400f3d8	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3d8	        0x488945f8	                mov qword [rbp - 8], rax	      8607	ldlang.c	FUNCTION_201	CALL_1
0x400f3dc	        0x488b55f8	                mov rdx, qword [rbp - 8]	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3e0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3e4	          0x4889d6	                            mov rsi, rdx	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3e7	          0x4889c7	                            mov rdi, rax	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3ea	      0xe800000000	                          call 0x400f3ef	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3ef	          0x4889c1	                            mov rcx, rax	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3f2	    0x488b05000000	            mov rax, qword [0x0400f3f9] 	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3f9	      0xba00000000	                              mov edx, 0	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f3fe	          0x4889ce	                            mov rsi, rcx	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f401	          0x4889c7	                            mov rdi, rax	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f404	      0xe800000000	                          call 0x400f409	      8608	ldlang.c	FUNCTION_201	CALL_2
0x400f409	              0x90	                                     nop	      8610	ldlang.c	FUNCTION_201
0x400f40a	              0xc9	                                   leave	      8610	ldlang.c	FUNCTION_201
0x400f40b	              0xc3	                                     ret	      8610	ldlang.c	FUNCTION_201
ldlang_open_output	functions,0:ELSE,3:FOR,0:CALL,4:IF,3:DO,0:WHILE,0:SWITCH,1	125
0x40058c5	              0x55	                                push rbp	      3194	ldlang.c	FUNCTION_76
0x40058c6	          0x4889e5	                            mov rbp, rsp	      3194	ldlang.c	FUNCTION_76
0x40058c9	        0x4883ec10	                           sub rsp, 0x10	      3194	ldlang.c	FUNCTION_76
0x40058cd	        0x48897df8	                mov qword [rbp - 8], rdi	      3194	ldlang.c	FUNCTION_76
0x40058d1	        0x488b45f8	                mov rax, qword [rbp - 8]	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058d5	          0x8b4008	                mov eax, dword [rax + 8]	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058d8	          0x83f80a	                            cmp eax, 0xa	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058db	     0xf84a9010000	                            je 0x4005a8a	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058e1	          0x83f80b	                            cmp eax, 0xb	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058e4	            0x7405	                            je 0x40058eb	      3195	ldlang.c	FUNCTION_76	SWITCH_1
0x40058e6	      0xe9af010000	                           jmp 0x4005a9a	      3220	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x40058eb	    0x488b05000000	            mov rax, qword [0x040058f2] 	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x40058f2	          0x4885c0	                           test rax, rax	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x40058f5	            0x740f	                            je 0x4005906	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x40058f7	      0xbe7e0c0000	                          mov esi, 0xc7e	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x40058fc	      0xbf00000000	                              mov edi, 0	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x4005901	      0xe800000000	                          call 0x4005906	      3198	ldlang.c	FUNCTION_76	SWITCH_1	CALL_1
0x4005906	        0x488b45f8	                mov rax, qword [rbp - 8]	      3199	ldlang.c	FUNCTION_76	SWITCH_1	CALL_2
0x400590a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3199	ldlang.c	FUNCTION_76	SWITCH_1	CALL_2
0x400590e	          0x4889c7	                            mov rdi, rax	      3199	ldlang.c	FUNCTION_76	SWITCH_1	CALL_2
0x4005911	      0xe848fdffff	                    call sym.open_output	      3199	ldlang.c	FUNCTION_76	SWITCH_1	CALL_2
0x4005916	      0xe800000000	                          call 0x400591b	      3200	ldlang.c	FUNCTION_76	SWITCH_1	CALL_3
0x400591b	    0x8b0500000000	            mov eax, dword [0x04005921] 	      3201	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005921	            0x85c0	                           test eax, eax	      3201	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005923	            0x7443	                            je 0x4005968	      3201	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005925	     0xfb605000000	           movzx eax, byte [0x0400592c] 	      3202	ldlang.c	FUNCTION_76	SWITCH_1	IF_1	CALL_4
0x400592c	          0x83e003	                              and eax, 3	      3202	ldlang.c	FUNCTION_76	SWITCH_1	IF_1	CALL_4
0x400592f	            0x3c02	                               cmp al, 2	      3202	ldlang.c	FUNCTION_76	SWITCH_1	IF_1	CALL_4
0x4005931	            0x7435	                            je 0x4005968	      3202	ldlang.c	FUNCTION_76	SWITCH_1	IF_1	CALL_4
0x4005933	    0x488b15000000	            mov rdx, qword [0x0400593a] 	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x400593a	    0x488b05000000	            mov rax, qword [0x04005941] 	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005941	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005944	          0xc1e805	                              shr eax, 5	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005947	      0x25ffff0f00	                        and eax, 0xfffff	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x400594c	          0x80cc01	                                or ah, 1	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x400594f	      0x25ffff0f00	                        and eax, 0xfffff	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005954	          0xc1e005	                              shl eax, 5	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005957	            0x89c1	                            mov ecx, eax	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005959	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x400595c	      0x251f0000fe	                     and eax, 0xfe00001f	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005961	             0x9c8	                             or eax, ecx	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005963	          0x894244	             mov dword [rdx + 0x44], eax	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005966	            0xeb35	                           jmp 0x400599d	      3203	ldlang.c	FUNCTION_76	SWITCH_1	IF_1
0x4005968	    0x488b15000000	            mov rdx, qword [0x0400596f] 	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400596f	    0x488b05000000	            mov rax, qword [0x04005976] 	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005976	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005979	          0xc1e805	                              shr eax, 5	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400597c	      0x25ffff0f00	                        and eax, 0xfffff	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005981	      0x25fffe0f00	                        and eax, 0xffeff	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005986	      0x25ffff0f00	                        and eax, 0xfffff	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400598b	          0xc1e005	                              shl eax, 5	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400598e	            0x89c1	                            mov ecx, eax	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005990	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005993	      0x251f0000fe	                     and eax, 0xfe00001f	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x4005998	             0x9c8	                             or eax, ecx	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400599a	          0x894244	             mov dword [rdx + 0x44], eax	      3205	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_1
0x400599d	    0x8b0500000000	            mov eax, dword [0x040059a3] 	      3206	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059a3	            0x85c0	                           test eax, eax	      3206	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059a5	            0x7434	                            je 0x40059db	      3206	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059a7	    0x488b15000000	            mov rdx, qword [0x040059ae] 	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059ae	    0x488b05000000	            mov rax, qword [0x040059b5] 	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059b5	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059b8	          0xc1e805	                              shr eax, 5	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059bb	      0x25ffff0f00	                        and eax, 0xfffff	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059c0	             0xc80	                             or al, 0x80	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059c2	      0x25ffff0f00	                        and eax, 0xfffff	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059c7	          0xc1e005	                              shl eax, 5	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059ca	            0x89c1	                            mov ecx, eax	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059cc	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059cf	      0x251f0000fe	                     and eax, 0xfe00001f	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059d4	             0x9c8	                             or eax, ecx	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059d6	          0x894244	             mov dword [rdx + 0x44], eax	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059d9	            0xeb35	                           jmp 0x4005a10	      3207	ldlang.c	FUNCTION_76	SWITCH_1	IF_2
0x40059db	    0x488b15000000	            mov rdx, qword [0x040059e2] 	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059e2	    0x488b05000000	            mov rax, qword [0x040059e9] 	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059e9	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059ec	          0xc1e805	                              shr eax, 5	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059ef	      0x25ffff0f00	                        and eax, 0xfffff	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059f4	      0x257fff0f00	                        and eax, 0xfff7f	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059f9	      0x25ffff0f00	                        and eax, 0xfffff	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x40059fe	          0xc1e005	                              shl eax, 5	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a01	            0x89c1	                            mov ecx, eax	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a03	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a06	      0x251f0000fe	                     and eax, 0xfe00001f	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a0b	             0x9c8	                             or eax, ecx	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a0d	          0x894244	             mov dword [rdx + 0x44], eax	      3209	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_2
0x4005a10	     0xfb605000000	           movzx eax, byte [0x04005a17] 	      3210	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a17	          0x83e020	                           and eax, 0x20	      3210	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a1a	            0x84c0	                             test al, al	      3210	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a1c	            0x7435	                            je 0x4005a53	      3210	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a1e	    0x488b15000000	            mov rdx, qword [0x04005a25] 	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a25	    0x488b05000000	            mov rax, qword [0x04005a2c] 	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a2c	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a2f	          0xc1e805	                              shr eax, 5	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a32	      0x25ffff0f00	                        and eax, 0xfffff	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a37	          0x80cc04	                                or ah, 4	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a3a	      0x25ffff0f00	                        and eax, 0xfffff	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a3f	          0xc1e005	                              shl eax, 5	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a42	            0x89c1	                            mov ecx, eax	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a44	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a47	      0x251f0000fe	                     and eax, 0xfe00001f	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a4c	             0x9c8	                             or eax, ecx	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a4e	          0x894244	             mov dword [rdx + 0x44], eax	      3211	ldlang.c	FUNCTION_76	SWITCH_1	IF_3
0x4005a51	            0xeb47	                           jmp 0x4005a9a	      3214	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a53	    0x488b15000000	            mov rdx, qword [0x04005a5a] 	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a5a	    0x488b05000000	            mov rax, qword [0x04005a61] 	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a61	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a64	          0xc1e805	                              shr eax, 5	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a67	      0x25ffff0f00	                        and eax, 0xfffff	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a6c	      0x25fffb0f00	                        and eax, 0xffbff	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a71	      0x25ffff0f00	                        and eax, 0xfffff	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a76	          0xc1e005	                              shl eax, 5	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a79	            0x89c1	                            mov ecx, eax	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a7b	          0x8b4244	            mov eax, dword [rdx + 0x44] 	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a7e	      0x251f0000fe	                     and eax, 0xfe00001f	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a83	             0x9c8	                             or eax, ecx	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a85	          0x894244	             mov dword [rdx + 0x44], eax	      3213	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a88	            0xeb10	                           jmp 0x4005a9a	      3214	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a8a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3217	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a8e	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3217	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a92	    0x488905000000	            mov qword [0x04005a99], rax 	      3217	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a99	              0x90	                                     nop	      3218	ldlang.c	FUNCTION_76	SWITCH_1	ELSE_3
0x4005a9a	              0x90	                                     nop	      3222	ldlang.c	FUNCTION_76	ELSE_3
0x4005a9b	              0xc9	                                   leave	      3222	ldlang.c	FUNCTION_76	ELSE_3
0x4005a9c	              0xc3	                                     ret	      3222	ldlang.c	FUNCTION_76	ELSE_3
print_fill_statement	functions,0:ELSE,0:FOR,1:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	38
0x400770c	              0x55	                                push rbp	      4268	ldlang.c	FUNCTION_97
0x400770d	          0x4889e5	                            mov rbp, rsp	      4268	ldlang.c	FUNCTION_97
0x4007710	        0x4883ec20	                           sub rsp, 0x20	      4268	ldlang.c	FUNCTION_97
0x4007714	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4268	ldlang.c	FUNCTION_97
0x4007718	    0x488b05000000	            mov rax, qword [0x0400771f] 	      4271	ldlang.c	FUNCTION_97	CALL_1
0x400771f	          0x4889c1	                            mov rcx, rax	      4271	ldlang.c	FUNCTION_97	CALL_1
0x4007722	      0xba0d000000	                            mov edx, 0xd	      4271	ldlang.c	FUNCTION_97	CALL_1
0x4007727	      0xbe01000000	                              mov esi, 1	      4271	ldlang.c	FUNCTION_97	CALL_1
0x400772c	      0xbf00000000	                              mov edi, 0	      4271	ldlang.c	FUNCTION_97	CALL_1
0x4007731	      0xe800000000	                          call 0x4007736	      4271	ldlang.c	FUNCTION_97	CALL_1
0x4007736	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400773a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400773e	        0x4883c008	                              add rax, 8	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007742	        0x488945f8	                mov qword [rbp - 8], rax	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007746	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400774a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400774e	          0x488b00	                    mov rax, qword [rax]	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007751	        0x488945f0	             mov qword [rbp - 0x10], rax	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007755	            0xeb2d	                           jmp 0x4007784	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007757	        0x488b45f8	                mov rax, qword [rbp - 8]	      4273	ldlang.c	FUNCTION_97	CALL_2
0x400775b	           0xfb600	                   movzx eax, byte [rax]	      4273	ldlang.c	FUNCTION_97	CALL_2
0x400775e	           0xfb6d0	                           movzx edx, al	      4273	ldlang.c	FUNCTION_97	CALL_2
0x4007761	    0x488b05000000	            mov rax, qword [0x04007768] 	      4273	ldlang.c	FUNCTION_97	CALL_2
0x4007768	      0xbe00000000	                              mov esi, 0	      4273	ldlang.c	FUNCTION_97	CALL_2
0x400776d	          0x4889c7	                            mov rdi, rax	      4273	ldlang.c	FUNCTION_97	CALL_2
0x4007770	      0xb800000000	                              mov eax, 0	      4273	ldlang.c	FUNCTION_97	CALL_2
0x4007775	      0xe800000000	                          call 0x400777a	      4273	ldlang.c	FUNCTION_97	CALL_2
0x400777a	      0x488345f801	                  add qword [rbp - 8], 1	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400777f	      0x48836df001	               sub qword [rbp - 0x10], 1	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007784	      0x48837df000	               cmp qword [rbp - 0x10], 0	      4272	ldlang.c	FUNCTION_97	FOR_1
0x4007789	            0x75cc	                           jne 0x4007757	      4272	ldlang.c	FUNCTION_97	FOR_1
0x400778b	    0x488b05000000	            mov rax, qword [0x04007792] 	      4274	ldlang.c	FUNCTION_97	CALL_3
0x4007792	          0x4889c6	                            mov rsi, rax	      4274	ldlang.c	FUNCTION_97	CALL_3
0x4007795	      0xbf0a000000	                            mov edi, 0xa	      4274	ldlang.c	FUNCTION_97	CALL_3
0x400779a	      0xe800000000	                          call 0x400779f	      4274	ldlang.c	FUNCTION_97	CALL_3
0x400779f	              0x90	                                     nop	      4275	ldlang.c	FUNCTION_97
0x40077a0	              0xc9	                                   leave	      4275	ldlang.c	FUNCTION_97
0x40077a1	              0xc3	                                     ret	      4275	ldlang.c	FUNCTION_97
get_target	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	18
0x40051e5	              0x55	                                push rbp	      2934	ldlang.c	FUNCTION_68
0x40051e6	          0x4889e5	                            mov rbp, rsp	      2934	ldlang.c	FUNCTION_68
0x40051e9	        0x4883ec20	                           sub rsp, 0x20	      2934	ldlang.c	FUNCTION_68
0x40051ed	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2934	ldlang.c	FUNCTION_68
0x40051f1	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2934	ldlang.c	FUNCTION_68
0x40051f5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2935	ldlang.c	FUNCTION_68
0x40051f9	        0x488945f8	                mov qword [rbp - 8], rax	      2935	ldlang.c	FUNCTION_68
0x40051fd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005201	          0x488b00	                    mov rax, qword [rax]	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005204	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005208	          0x4889d6	                            mov rsi, rdx	      2937	ldlang.c	FUNCTION_68	CALL_1
0x400520b	          0x4889c7	                            mov rdi, rax	      2937	ldlang.c	FUNCTION_68	CALL_1
0x400520e	      0xe800000000	                          call 0x4005213	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005213	            0x85c0	                           test eax, eax	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005215	           0xf94c0	                                 sete al	      2937	ldlang.c	FUNCTION_68	CALL_1
0x4005218	           0xfb6c0	                           movzx eax, al	      2937	ldlang.c	FUNCTION_68	CALL_1
0x400521b	              0xc9	                                   leave	      2938	ldlang.c	FUNCTION_68
0x400521c	              0xc3	                                     ret	      2938	ldlang.c	FUNCTION_68
lang_check	functions,0:ELSE,1:FOR,1:CALL,12:IF,9:DO,0:WHILE,0:SWITCH,0	140
0x400b55d	              0x55	                                push rbp	      6270	ldlang.c	FUNCTION_135
0x400b55e	          0x4889e5	                            mov rbp, rsp	      6270	ldlang.c	FUNCTION_135
0x400b561	            0x4155	                                push r13	      6270	ldlang.c	FUNCTION_135
0x400b563	            0x4154	                                push r12	      6270	ldlang.c	FUNCTION_135
0x400b565	              0x53	                                push rbx	      6270	ldlang.c	FUNCTION_135
0x400b566	        0x4883ec28	                           sub rsp, 0x28	      6270	ldlang.c	FUNCTION_135
0x400b56a	    0x488b05000000	            mov rax, qword [0x0400b571] 	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b571	        0x488945c0	             mov qword [rbp - 0x40], rax	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b575	      0xe9e5010000	                           jmp 0x400b75f	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b57a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      6279	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b57e	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      6279	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b582	          0x83e020	                           and eax, 0x20	      6279	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b585	            0x84c0	                             test al, al	      6279	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b587	     0xf85c5010000	                           jne 0x400b752	      6279	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b58d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      6282	ldlang.c	FUNCTION_135	FOR_1
0x400b591	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6282	ldlang.c	FUNCTION_135	FOR_1
0x400b595	        0x488945d0	             mov qword [rbp - 0x30], rax	      6282	ldlang.c	FUNCTION_135	FOR_1
0x400b599	    0x8b1500000000	            mov edx, dword [0x0400b59f] 	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b59f	    0x488b0d000000	            mov rcx, qword [0x0400b5a6] 	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5a6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5aa	          0x4889ce	                            mov rsi, rcx	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5ad	          0x4889c7	                            mov rdi, rax	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5b0	      0xe800000000	                          call 0x400b5b5	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5b5	        0x488945d8	             mov qword [rbp - 0x28], rax	      6284	ldlang.c	FUNCTION_135	FOR_1	CALL_1
0x400b5b9	     0xfb605000000	           movzx eax, byte [0x0400b5c0] 	      6293	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_2
0x400b5c0	          0x83e003	                              and eax, 3	      6293	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_2
0x400b5c3	            0x3c02	                               cmp al, 2	      6293	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_2
0x400b5c5	            0x7412	                            je 0x400b5d9	      6293	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_2
0x400b5c7	     0xfb605000000	           movzx eax, byte [0x0400b5ce] 	      6294	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5ce	          0x83e008	                              and eax, 8	      6294	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5d1	            0x84c0	                             test al, al	      6294	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5d3	     0xf8481000000	                            je 0x400b65a	      6294	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5d9	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      6295	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5de	            0x741d	                            je 0x400b5fd	      6295	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5e0	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6296	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5e4	        0x488b4008	                mov rax, qword [rax + 8]	      6296	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5e8	          0x8b5008	                mov edx, dword [rax + 8]	      6296	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5eb	    0x488b05000000	            mov rax, qword [0x0400b5f2] 	      6297	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5f2	        0x488b4008	                mov rax, qword [rax + 8]	      6297	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5f6	          0x8b4008	                mov eax, dword [rax + 8]	      6297	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5f9	            0x39c2	                            cmp edx, eax	      6296	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5fb	            0x745d	                            je 0x400b65a	      6296	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b5fd	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b601	          0x8b4044	            mov eax, dword [rax + 0x44] 	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b604	          0xc1e805	                              shr eax, 5	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b607	      0x25ffff0f00	                        and eax, 0xfffff	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b60c	          0x83e001	                              and eax, 1	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b60f	            0x85c0	                           test eax, eax	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b611	            0x7447	                            je 0x400b65a	      6298	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b613	    0x4c8b2d000000	            mov r13, qword [0x0400b61a] 	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b61a	    0x488b05000000	            mov rax, qword [0x0400b621] 	      6303	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b621	        0x488b4008	                mov rax, qword [rax + 8]	      6303	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b625	          0x4c8b20	                    mov r12, qword [rax]	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b628	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6302	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b62c	        0x488b4008	                mov rax, qword [rax + 8]	      6302	ldlang.c	FUNCTION_135	FOR_1	IF_2
0x400b630	          0x488b18	                    mov rbx, qword [rax]	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b633	      0xbf00000000	                              mov edi, 0	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b638	      0xe800000000	                          call 0x400b63d	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b63d	          0x4889c7	                            mov rdi, rax	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b640	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b644	          0x4d89e8	                             mov r8, r13	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b647	          0x4c89e1	                            mov rcx, r12	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b64a	          0x4889c2	                            mov rdx, rax	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b64d	          0x4889de	                            mov rsi, rbx	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b650	      0xb800000000	                              mov eax, 0	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b655	      0xe800000000	                          call 0x400b65a	      6300	ldlang.c	FUNCTION_135	FOR_1	IF_2	CALL_4
0x400b65a	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      6307	ldlang.c	FUNCTION_135	FOR_1	IF_3
0x400b65f	            0x7558	                           jne 0x400b6b9	      6307	ldlang.c	FUNCTION_135	FOR_1	IF_3
0x400b661	    0x8b0500000000	            mov eax, dword [0x0400b667] 	      6309	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4
0x400b667	            0x85c0	                           test eax, eax	      6309	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4
0x400b669	     0xf84e4000000	                            je 0x400b753	      6309	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4
0x400b66f	    0x488b05000000	            mov rax, qword [0x0400b676] 	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b676	          0x4889c7	                            mov rdi, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b679	      0xe800000000	                          call 0x400b67e	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b67e	          0x4989c4	                            mov r12, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b681	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b685	          0x4889c7	                            mov rdi, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b688	      0xe800000000	                          call 0x400b68d	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b68d	          0x4889c3	                            mov rbx, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b690	      0xbf00000000	                              mov edi, 0	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b695	      0xe800000000	                          call 0x400b69a	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b69a	          0x4889c7	                            mov rdi, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b69d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6a1	          0x4c89e1	                            mov rcx, r12	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6a4	          0x4889c2	                            mov rdx, rax	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6a7	          0x4889de	                            mov rsi, rbx	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6aa	      0xb800000000	                              mov eax, 0	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6af	      0xe800000000	                          call 0x400b6b4	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6b4	      0xe99a000000	                           jmp 0x400b753	      6310	ldlang.c	FUNCTION_135	FOR_1	IF_3	IF_4	CALL_6
0x400b6b9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6315	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5
0x400b6bd	    0x8b80a0000000	            mov eax, dword [rax + 0xa0] 	      6315	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5
0x400b6c3	            0x85c0	                           test eax, eax	      6315	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5
0x400b6c5	     0xf8488000000	                            je 0x400b753	      6315	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5
0x400b6cb	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      6320	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5
0x400b6d3	    0x8b0500000000	            mov eax, dword [0x0400b6d9] 	      6327	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_6
0x400b6d9	            0x85c0	                           test eax, eax	      6327	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_6
0x400b6db	            0x750e	                           jne 0x400b6eb	      6327	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_6
0x400b6dd	      0xbf00000000	                              mov edi, 0	      6328	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_9
0x400b6e2	      0xe800000000	                          call 0x400b6e7	      6328	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_9
0x400b6e7	        0x488945c8	             mov qword [rbp - 0x38], rax	      6328	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_9
0x400b6eb	    0x488b05000000	            mov rax, qword [0x0400b6f2] 	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b6f2	        0x488b4008	                mov rax, qword [rax + 8]	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b6f6	    0x488b80400100	           mov rax, qword [rax + 0x140] 	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b6fd	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b701	      0xbe00000000	                              mov esi, 0	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b706	          0x4889d7	                            mov rdi, rdx	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b709	            0xffd0	                                call rax	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b70b	            0x85c0	                           test eax, eax	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b70d	            0x752b	                           jne 0x400b73a	      6329	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7
0x400b70f	    0x8b0500000000	            mov eax, dword [0x0400b715] 	      6331	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8
0x400b715	            0x85c0	                           test eax, eax	      6331	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8
0x400b717	            0x7421	                            je 0x400b73a	      6331	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8
0x400b719	      0xbf00000000	                              mov edi, 0	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b71e	      0xe800000000	                          call 0x400b723	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b723	          0x4889c2	                            mov rdx, rax	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b726	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b72a	          0x4889c6	                            mov rsi, rax	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b72d	          0x4889d7	                            mov rdi, rdx	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b730	      0xb800000000	                              mov eax, 0	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b735	      0xe800000000	                          call 0x400b73a	      6332	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_7	IF_8	CALL_11
0x400b73a	    0x8b0500000000	            mov eax, dword [0x0400b740] 	      6335	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_9
0x400b740	            0x85c0	                           test eax, eax	      6335	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_9
0x400b742	            0x750f	                           jne 0x400b753	      6335	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	IF_9
0x400b744	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6336	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_12
0x400b748	          0x4889c7	                            mov rdi, rax	      6336	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_12
0x400b74b	      0xe800000000	                          call 0x400b750	      6336	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_12
0x400b750	            0xeb01	                           jmp 0x400b753	      6336	ldlang.c	FUNCTION_135	FOR_1	ELSE_1	IF_5	CALL_12
0x400b752	              0x90	                                     nop	      6280	ldlang.c	FUNCTION_135	FOR_1	IF_1
0x400b753	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b757	        0x488b4030	            mov rax, qword [rax + 0x30] 	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b75b	        0x488945c0	             mov qword [rbp - 0x40], rax	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b75f	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b764	     0xf8510feffff	                           jne 0x400b57a	      6275	ldlang.c	FUNCTION_135	FOR_1
0x400b76a	              0x90	                                     nop	      6339	ldlang.c	FUNCTION_135
0x400b76b	        0x4883c428	                           add rsp, 0x28	      6339	ldlang.c	FUNCTION_135
0x400b76f	              0x5b	                                 pop rbx	      6339	ldlang.c	FUNCTION_135
0x400b770	            0x415c	                                 pop r12	      6339	ldlang.c	FUNCTION_135
0x400b772	            0x415d	                                 pop r13	      6339	ldlang.c	FUNCTION_135
0x400b774	              0x5d	                                 pop rbp	      6339	ldlang.c	FUNCTION_135
0x400b775	              0xc3	                                     ret	      6339	ldlang.c	FUNCTION_135
lang_add_output_format	functions,0:ELSE,1:FOR,0:CALL,0:IF,3:DO,0:WHILE,0:SWITCH,0	31
0x400d803	              0x55	                                push rbp	      7684	ldlang.c	FUNCTION_180
0x400d804	          0x4889e5	                            mov rbp, rsp	      7684	ldlang.c	FUNCTION_180
0x400d807	        0x48897df8	                mov qword [rbp - 8], rdi	      7684	ldlang.c	FUNCTION_180
0x400d80b	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7684	ldlang.c	FUNCTION_180
0x400d80f	        0x488955e8	             mov qword [rbp - 0x18], rdx	      7684	ldlang.c	FUNCTION_180
0x400d813	          0x894de4	             mov dword [rbp - 0x1c], ecx	      7684	ldlang.c	FUNCTION_180
0x400d816	    0x488b05000000	            mov rax, qword [0x0400d81d] 	      7685	ldlang.c	FUNCTION_180	IF_1
0x400d81d	          0x4885c0	                           test rax, rax	      7685	ldlang.c	FUNCTION_180	IF_1
0x400d820	            0x7406	                            je 0x400d828	      7685	ldlang.c	FUNCTION_180	IF_1
0x400d822	        0x837de400	               cmp dword [rbp - 0x1c], 0	      7685	ldlang.c	FUNCTION_180	IF_1
0x400d826	            0x7541	                           jne 0x400d869	      7685	ldlang.c	FUNCTION_180	IF_1
0x400d828	    0x8b0500000000	            mov eax, dword [0x0400d82e] 	      7687	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d82e	          0x83f801	                              cmp eax, 1	      7687	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d831	            0x7511	                           jne 0x400d844	      7687	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d833	      0x48837df000	               cmp qword [rbp - 0x10], 0	      7688	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d838	            0x740a	                            je 0x400d844	      7688	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d83a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7689	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d83e	        0x488945f8	                mov qword [rbp - 8], rax	      7689	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d842	            0xeb1a	                           jmp 0x400d85e	      7689	ldlang.c	FUNCTION_180	IF_1	IF_2
0x400d844	    0x8b0500000000	            mov eax, dword [0x0400d84a] 	      7690	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d84a	          0x83f802	                              cmp eax, 2	      7690	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d84d	            0x750f	                           jne 0x400d85e	      7690	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d84f	      0x48837de800	               cmp qword [rbp - 0x18], 0	      7691	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d854	            0x7408	                            je 0x400d85e	      7691	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d856	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7692	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d85a	        0x488945f8	                mov qword [rbp - 8], rax	      7692	ldlang.c	FUNCTION_180	IF_1	ELSE_1	IF_3
0x400d85e	        0x488b45f8	                mov rax, qword [rbp - 8]	      7694	ldlang.c	FUNCTION_180	IF_1
0x400d862	    0x488905000000	            mov qword [0x0400d869], rax 	      7694	ldlang.c	FUNCTION_180	IF_1
0x400d869	              0x90	                                     nop	      7696	ldlang.c	FUNCTION_180
0x400d86a	              0x5d	                                 pop rbp	      7696	ldlang.c	FUNCTION_180
0x400d86b	              0xc3	                                     ret	      7696	ldlang.c	FUNCTION_180
lang_enter_overlay	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	24
0x400de9d	              0x55	                                push rbp	      7948	ldlang.c	FUNCTION_188
0x400de9e	          0x4889e5	                            mov rbp, rsp	      7948	ldlang.c	FUNCTION_188
0x400dea1	        0x4883ec10	                           sub rsp, 0x10	      7948	ldlang.c	FUNCTION_188
0x400dea5	        0x48897df8	                mov qword [rbp - 8], rdi	      7948	ldlang.c	FUNCTION_188
0x400dea9	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7948	ldlang.c	FUNCTION_188
0x400dead	    0x488b05000000	            mov rax, qword [0x0400deb4] 	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400deb4	          0x4885c0	                           test rax, rax	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400deb7	            0x7518	                           jne 0x400ded1	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400deb9	    0x488b05000000	            mov rax, qword [0x0400dec0] 	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400dec0	          0x4885c0	                           test rax, rax	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400dec3	            0x750c	                           jne 0x400ded1	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400dec5	    0x488b05000000	            mov rax, qword [0x0400decc] 	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400decc	          0x4885c0	                           test rax, rax	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400decf	            0x740f	                            je 0x400dee0	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400ded1	      0xbe101f0000	                         mov esi, 0x1f10	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400ded6	      0xbf00000000	                              mov edi, 0	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400dedb	      0xe800000000	                          call 0x400dee0	      7950	ldlang.c	FUNCTION_188	CALL_1
0x400dee0	        0x488b45f8	                mov rax, qword [rbp - 8]	      7954	ldlang.c	FUNCTION_188
0x400dee4	    0x488905000000	            mov qword [0x0400deeb], rax 	      7954	ldlang.c	FUNCTION_188
0x400deeb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7955	ldlang.c	FUNCTION_188
0x400deef	    0x488905000000	            mov qword [0x0400def6], rax 	      7955	ldlang.c	FUNCTION_188
0x400def6	              0x90	                                     nop	      7956	ldlang.c	FUNCTION_188
0x400def7	              0xc9	                                   leave	      7956	ldlang.c	FUNCTION_188
0x400def8	              0xc3	                                     ret	      7956	ldlang.c	FUNCTION_188
lang_memory_region_lookup	functions,0:ELSE,0:FOR,2:CALL,8:IF,4:DO,0:WHILE,0:SWITCH,0	103
0x4002120	              0x55	                                push rbp	      1304	ldlang.c	FUNCTION_41
0x4002121	          0x4889e5	                            mov rbp, rsp	      1304	ldlang.c	FUNCTION_41
0x4002124	        0x4883ec30	                           sub rsp, 0x30	      1304	ldlang.c	FUNCTION_41
0x4002128	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1304	ldlang.c	FUNCTION_41
0x400212c	          0x8975d4	             mov dword [rbp - 0x2c], esi	      1304	ldlang.c	FUNCTION_41
0x400212f	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1310	ldlang.c	FUNCTION_41	IF_1
0x4002134	            0x750a	                           jne 0x4002140	      1310	ldlang.c	FUNCTION_41	IF_1
0x4002136	      0xb800000000	                              mov eax, 0	      1311	ldlang.c	FUNCTION_41	IF_1
0x400213b	      0xe993010000	                           jmp 0x40022d3	      1311	ldlang.c	FUNCTION_41	IF_1
0x4002140	    0x488b05000000	            mov rax, qword [0x04002147] 	      1313	ldlang.c	FUNCTION_41	FOR_1
0x4002147	        0x488945f0	             mov qword [rbp - 0x10], rax	      1313	ldlang.c	FUNCTION_41	FOR_1
0x400214b	            0xeb78	                           jmp 0x40021c5	      1313	ldlang.c	FUNCTION_41	FOR_1
0x400214d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x4002151	        0x488945e8	             mov qword [rbp - 0x18], rax	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x4002155	            0xeb5b	                           jmp 0x40021b2	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x4002157	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x400215b	          0x488b00	                    mov rax, qword [rax]	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x400215e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x4002162	          0x4889d6	                            mov rsi, rdx	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x4002165	          0x4889c7	                            mov rdi, rax	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x4002168	      0xe800000000	                          call 0x400216d	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x400216d	            0x85c0	                           test eax, eax	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x400216f	            0x7535	                           jne 0x40021a6	      1315	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	CALL_1
0x4002171	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1317	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3
0x4002175	            0x7426	                            je 0x400219d	      1317	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3
0x4002177	      0xbf00000000	                              mov edi, 0	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x400217c	      0xe800000000	                          call 0x4002181	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002181	          0x4889c1	                            mov rcx, rax	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002184	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002188	          0x4889c2	                            mov rdx, rax	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x400218b	      0xbe00000000	                              mov esi, 0	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002190	          0x4889cf	                            mov rdi, rcx	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002193	      0xb800000000	                              mov eax, 0	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x4002198	      0xe800000000	                          call 0x400219d	      1318	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2	IF_3	CALL_3
0x400219d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1320	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2
0x40021a1	      0xe92d010000	                           jmp 0x40022d3	      1320	ldlang.c	FUNCTION_41	FOR_1	FOR_2	IF_2
0x40021a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x40021aa	        0x488b4008	                mov rax, qword [rax + 8]	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x40021ae	        0x488945e8	             mov qword [rbp - 0x18], rax	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x40021b2	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x40021b7	            0x759e	                           jne 0x4002157	      1314	ldlang.c	FUNCTION_41	FOR_1	FOR_2
0x40021b9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1313	ldlang.c	FUNCTION_41	FOR_1
0x40021bd	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1313	ldlang.c	FUNCTION_41	FOR_1
0x40021c1	        0x488945f0	             mov qword [rbp - 0x10], rax	      1313	ldlang.c	FUNCTION_41	FOR_1
0x40021c5	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1313	ldlang.c	FUNCTION_41	FOR_1
0x40021ca	            0x7581	                           jne 0x400214d	      1313	ldlang.c	FUNCTION_41	FOR_1
0x40021cc	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021d0	            0x753b	                           jne 0x400220d	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021d2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021d6	      0xbe00000000	                              mov esi, 0	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021db	          0x4889c7	                            mov rdi, rax	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021de	      0xe800000000	                          call 0x40021e3	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021e3	            0x85c0	                           test eax, eax	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021e5	            0x7426	                            je 0x400220d	      1323	ldlang.c	FUNCTION_41	IF_4	CALL_4
0x40021e7	      0xbf00000000	                              mov edi, 0	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x40021ec	      0xe800000000	                          call 0x40021f1	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x40021f1	          0x4889c1	                            mov rcx, rax	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x40021f4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x40021f8	          0x4889c2	                            mov rdx, rax	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x40021fb	      0xbe00000000	                              mov esi, 0	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x4002200	          0x4889cf	                            mov rdi, rcx	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x4002203	      0xb800000000	                              mov eax, 0	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x4002208	      0xe800000000	                          call 0x400220d	      1324	ldlang.c	FUNCTION_41	IF_4	CALL_6
0x400220d	      0xbf58000000	                           mov edi, 0x58	      1327	ldlang.c	FUNCTION_41
0x4002212	      0xe800000000	                          call 0x4002217	      1327	ldlang.c	FUNCTION_41
0x4002217	        0x488945f8	                mov qword [rbp - 8], rax	      1327	ldlang.c	FUNCTION_41
0x400221b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1330	ldlang.c	FUNCTION_41	CALL_8
0x400221f	          0x4889c7	                            mov rdi, rax	      1330	ldlang.c	FUNCTION_41	CALL_8
0x4002222	      0xe800000000	                          call 0x4002227	      1330	ldlang.c	FUNCTION_41	CALL_8
0x4002227	          0x4889c2	                            mov rdx, rax	      1330	ldlang.c	FUNCTION_41	CALL_8
0x400222a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1330	ldlang.c	FUNCTION_41	CALL_8
0x400222e	          0x488910	                    mov qword [rax], rdx	      1330	ldlang.c	FUNCTION_41	CALL_8
0x4002231	        0x488b45f8	                mov rax, qword [rbp - 8]	      1331	ldlang.c	FUNCTION_41
0x4002235	    0x48c740080000	                  mov qword [rax + 8], 0	      1331	ldlang.c	FUNCTION_41
0x400223d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1332	ldlang.c	FUNCTION_41
0x4002241	    0x48c740100000	               mov qword [rax + 0x10], 0	      1332	ldlang.c	FUNCTION_41
0x4002249	        0x488b45f8	                mov rax, qword [rbp - 8]	      1333	ldlang.c	FUNCTION_41
0x400224d	    0x48c740180000	               mov qword [rax + 0x18], 0	      1333	ldlang.c	FUNCTION_41
0x4002255	        0x488b45f8	                mov rax, qword [rbp - 8]	      1334	ldlang.c	FUNCTION_41
0x4002259	    0x48c740200000	               mov qword [rax + 0x20], 0	      1334	ldlang.c	FUNCTION_41
0x4002261	        0x488b45f8	                mov rax, qword [rbp - 8]	      1335	ldlang.c	FUNCTION_41
0x4002265	    0x48c740300000	               mov qword [rax + 0x30], 0	      1335	ldlang.c	FUNCTION_41
0x400226d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1336	ldlang.c	FUNCTION_41
0x4002271	    0x48c74028ffff	mov qword [rax + 0x28], 0xffffffffffffffff	      1336	ldlang.c	FUNCTION_41
0x4002279	        0x488b45f8	                mov rax, qword [rbp - 8]	      1337	ldlang.c	FUNCTION_41
0x400227d	    0x48c740380000	               mov qword [rax + 0x38], 0	      1337	ldlang.c	FUNCTION_41
0x4002285	        0x488b45f8	                mov rax, qword [rbp - 8]	      1338	ldlang.c	FUNCTION_41
0x4002289	    0x48c740400000	               mov qword [rax + 0x40], 0	      1338	ldlang.c	FUNCTION_41
0x4002291	        0x488b45f8	                mov rax, qword [rbp - 8]	      1339	ldlang.c	FUNCTION_41
0x4002295	    0xc74048000000	               mov dword [rax + 0x48], 0	      1339	ldlang.c	FUNCTION_41
0x400229c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1340	ldlang.c	FUNCTION_41
0x40022a0	    0xc7404c000000	               mov dword [rax + 0x4c], 0	      1340	ldlang.c	FUNCTION_41
0x40022a7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1341	ldlang.c	FUNCTION_41
0x40022ab	    0xc74050000000	               mov dword [rax + 0x50], 0	      1341	ldlang.c	FUNCTION_41
0x40022b2	    0x488b05000000	            mov rax, qword [0x040022b9] 	      1343	ldlang.c	FUNCTION_41
0x40022b9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1343	ldlang.c	FUNCTION_41
0x40022bd	          0x488910	                    mov qword [rax], rdx	      1343	ldlang.c	FUNCTION_41
0x40022c0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1344	ldlang.c	FUNCTION_41
0x40022c4	        0x4883c010	                           add rax, 0x10	      1344	ldlang.c	FUNCTION_41
0x40022c8	    0x488905000000	            mov qword [0x040022cf], rax 	      1344	ldlang.c	FUNCTION_41
0x40022cf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1346	ldlang.c	FUNCTION_41
0x40022d3	              0xc9	                                   leave	      1347	ldlang.c	FUNCTION_41
0x40022d4	              0xc3	                                     ret	      1347	ldlang.c	FUNCTION_41
output_section_statement_table_init	functions,0:ELSE,0:FOR,0:CALL,3:IF,1:DO,0:WHILE,0:SWITCH,0	17
0x400200a	              0x55	                                push rbp	      1229	ldlang.c	FUNCTION_37
0x400200b	          0x4889e5	                            mov rbp, rsp	      1229	ldlang.c	FUNCTION_37
0x400200e	      0xb93d000000	                           mov ecx, 0x3d	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x4002013	      0xbab0000000	                           mov edx, 0xb0	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x4002018	      0xbe00000000	                              mov esi, 0	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x400201d	      0xbf00000000	                              mov edi, 0	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x4002022	      0xe800000000	                          call 0x4002027	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x4002027	            0x85c0	                           test eax, eax	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x4002029	            0x7517	                           jne 0x4002042	      1230	ldlang.c	FUNCTION_37	IF_1	CALL_1
0x400202b	      0xbf00000000	                              mov edi, 0	      1234	ldlang.c	FUNCTION_37	CALL_3
0x4002030	      0xe800000000	                          call 0x4002035	      1234	ldlang.c	FUNCTION_37	CALL_3
0x4002035	          0x4889c7	                            mov rdi, rax	      1234	ldlang.c	FUNCTION_37	CALL_3
0x4002038	      0xb800000000	                              mov eax, 0	      1234	ldlang.c	FUNCTION_37	CALL_3
0x400203d	      0xe800000000	                          call 0x4002042	      1234	ldlang.c	FUNCTION_37	CALL_3
0x4002042	              0x90	                                     nop	      1235	ldlang.c	FUNCTION_37
0x4002043	              0x5d	                                 pop rbp	      1235	ldlang.c	FUNCTION_37
0x4002044	              0xc3	                                     ret	      1235	ldlang.c	FUNCTION_37
topower	functions,0:ELSE,0:FOR,1:CALL,0:IF,2:DO,0:WHILE,0:SWITCH,0	22
0x400c156	              0x55	                                push rbp	      6677	ldlang.c	FUNCTION_145
0x400c157	          0x4889e5	                            mov rbp, rsp	      6677	ldlang.c	FUNCTION_145
0x400c15a	          0x897dec	             mov dword [rbp - 0x14], edi	      6677	ldlang.c	FUNCTION_145
0x400c15d	    0xc745f8010000	                  mov dword [rbp - 8], 1	      6678	ldlang.c	FUNCTION_145
0x400c164	        0x837dec00	               cmp dword [rbp - 0x14], 0	      6681	ldlang.c	FUNCTION_145	IF_1
0x400c168	            0x7907	                           jns 0x400c171	      6681	ldlang.c	FUNCTION_145	IF_1
0x400c16a	      0xb8ffffffff	                     mov eax, 0xffffffff	      6682	ldlang.c	FUNCTION_145	IF_1
0x400c16f	            0xeb28	                           jmp 0x400c199	      6682	ldlang.c	FUNCTION_145	IF_1
0x400c171	    0xc745fc000000	                  mov dword [rbp - 4], 0	      6684	ldlang.c	FUNCTION_145	FOR_1
0x400c178	            0xeb14	                           jmp 0x400c18e	      6684	ldlang.c	FUNCTION_145	FOR_1
0x400c17a	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      6686	ldlang.c	FUNCTION_145	FOR_1	IF_2
0x400c17d	          0x3945f8	                cmp dword [rbp - 8], eax	      6686	ldlang.c	FUNCTION_145	FOR_1	IF_2
0x400c180	            0x7205	                            jb 0x400c187	      6686	ldlang.c	FUNCTION_145	FOR_1	IF_2
0x400c182	          0x8b45fc	                mov eax, dword [rbp - 4]	      6687	ldlang.c	FUNCTION_145	FOR_1	IF_2
0x400c185	            0xeb12	                           jmp 0x400c199	      6687	ldlang.c	FUNCTION_145	FOR_1	IF_2
0x400c187	          0xd165f8	                  shl dword [rbp - 8], 1	      6688	ldlang.c	FUNCTION_145	FOR_1
0x400c18a	        0x8345fc01	                  add dword [rbp - 4], 1	      6684	ldlang.c	FUNCTION_145	FOR_1
0x400c18e	        0x837dfc1f	               cmp dword [rbp - 4], 0x1f	      6684	ldlang.c	FUNCTION_145	FOR_1
0x400c192	            0x7ee6	                           jle 0x400c17a	      6684	ldlang.c	FUNCTION_145	FOR_1
0x400c194	      0xb800000000	                              mov eax, 0	      6691	ldlang.c	FUNCTION_145
0x400c199	              0x5d	                                 pop rbp	      6692	ldlang.c	FUNCTION_145
0x400c19a	              0xc3	                                     ret	      6692	ldlang.c	FUNCTION_145
version_expr_head_eq	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	21
0x400eac4	              0x55	                                push rbp	      8357	ldlang.c	FUNCTION_197
0x400eac5	          0x4889e5	                            mov rbp, rsp	      8357	ldlang.c	FUNCTION_197
0x400eac8	        0x4883ec20	                           sub rsp, 0x20	      8357	ldlang.c	FUNCTION_197
0x400eacc	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8357	ldlang.c	FUNCTION_197
0x400ead0	        0x488975e0	             mov qword [rbp - 0x20], rsi	      8357	ldlang.c	FUNCTION_197
0x400ead4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8358	ldlang.c	FUNCTION_197
0x400ead8	        0x488945f0	             mov qword [rbp - 0x10], rax	      8358	ldlang.c	FUNCTION_197
0x400eadc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8360	ldlang.c	FUNCTION_197
0x400eae0	        0x488945f8	                mov qword [rbp - 8], rax	      8360	ldlang.c	FUNCTION_197
0x400eae4	        0x488b45f8	                mov rax, qword [rbp - 8]	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eae8	        0x488b5008	                mov rdx, qword [rax + 8]	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eaec	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eaf0	        0x488b4008	                mov rax, qword [rax + 8]	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eaf4	          0x4889d6	                            mov rsi, rdx	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eaf7	          0x4889c7	                            mov rdi, rax	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eafa	      0xe800000000	                          call 0x400eaff	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eaff	            0x85c0	                           test eax, eax	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eb01	           0xf94c0	                                 sete al	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eb04	           0xfb6c0	                           movzx eax, al	      8363	ldlang.c	FUNCTION_197	CALL_1
0x400eb07	              0xc9	                                   leave	      8364	ldlang.c	FUNCTION_197
0x400eb08	              0xc3	                                     ret	      8364	ldlang.c	FUNCTION_197
exp_init_os	functions,0:ELSE,0:FOR,0:CALL,10:IF,1:DO,0:WHILE,0:SWITCH,2	81
0x4003ea6	              0x55	                                push rbp	      2205	ldlang.c	FUNCTION_56
0x4003ea7	          0x4889e5	                            mov rbp, rsp	      2205	ldlang.c	FUNCTION_56
0x4003eaa	        0x4883ec20	                           sub rsp, 0x20	      2205	ldlang.c	FUNCTION_56
0x4003eae	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2205	ldlang.c	FUNCTION_56
0x4003eb2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003eb6	          0x8b4010	            mov eax, dword [rax + 0x10] 	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003eb9	          0x83f808	                              cmp eax, 8	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ebc	     0xf8702010000	                            ja 0x4003fc4	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ec2	            0x89c0	                            mov eax, eax	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ec4	    0x488b04c50000	                  mov rax, qword [rax*8]	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ecc	            0xffe0	                                 jmp rax	      2206	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ece	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2211	ldlang.c	FUNCTION_56	SWITCH_1	CALL_1
0x4003ed2	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2211	ldlang.c	FUNCTION_56	SWITCH_1	CALL_1
0x4003ed6	          0x4889c7	                            mov rdi, rax	      2211	ldlang.c	FUNCTION_56	SWITCH_1	CALL_1
0x4003ed9	      0xe8c8ffffff	                    call sym.exp_init_os	      2211	ldlang.c	FUNCTION_56	SWITCH_1	CALL_1
0x4003ede	      0xe9e5000000	                           jmp 0x4003fc8	      2212	ldlang.c	FUNCTION_56	SWITCH_1
0x4003ee3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2215	ldlang.c	FUNCTION_56	SWITCH_1	CALL_2
0x4003ee7	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2215	ldlang.c	FUNCTION_56	SWITCH_1	CALL_2
0x4003eeb	          0x4889c7	                            mov rdi, rax	      2215	ldlang.c	FUNCTION_56	SWITCH_1	CALL_2
0x4003eee	      0xe8b3ffffff	                    call sym.exp_init_os	      2215	ldlang.c	FUNCTION_56	SWITCH_1	CALL_2
0x4003ef3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2216	ldlang.c	FUNCTION_56	SWITCH_1	CALL_3
0x4003ef7	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2216	ldlang.c	FUNCTION_56	SWITCH_1	CALL_3
0x4003efb	          0x4889c7	                            mov rdi, rax	      2216	ldlang.c	FUNCTION_56	SWITCH_1	CALL_3
0x4003efe	      0xe8a3ffffff	                    call sym.exp_init_os	      2216	ldlang.c	FUNCTION_56	SWITCH_1	CALL_3
0x4003f03	      0xe9c0000000	                           jmp 0x4003fc8	      2217	ldlang.c	FUNCTION_56	SWITCH_1
0x4003f08	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2220	ldlang.c	FUNCTION_56	SWITCH_1	CALL_4
0x4003f0c	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2220	ldlang.c	FUNCTION_56	SWITCH_1	CALL_4
0x4003f10	          0x4889c7	                            mov rdi, rax	      2220	ldlang.c	FUNCTION_56	SWITCH_1	CALL_4
0x4003f13	      0xe88effffff	                    call sym.exp_init_os	      2220	ldlang.c	FUNCTION_56	SWITCH_1	CALL_4
0x4003f18	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2221	ldlang.c	FUNCTION_56	SWITCH_1	CALL_5
0x4003f1c	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2221	ldlang.c	FUNCTION_56	SWITCH_1	CALL_5
0x4003f20	          0x4889c7	                            mov rdi, rax	      2221	ldlang.c	FUNCTION_56	SWITCH_1	CALL_5
0x4003f23	      0xe87effffff	                    call sym.exp_init_os	      2221	ldlang.c	FUNCTION_56	SWITCH_1	CALL_5
0x4003f28	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2222	ldlang.c	FUNCTION_56	SWITCH_1	CALL_6
0x4003f2c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2222	ldlang.c	FUNCTION_56	SWITCH_1	CALL_6
0x4003f30	          0x4889c7	                            mov rdi, rax	      2222	ldlang.c	FUNCTION_56	SWITCH_1	CALL_6
0x4003f33	      0xe86effffff	                    call sym.exp_init_os	      2222	ldlang.c	FUNCTION_56	SWITCH_1	CALL_6
0x4003f38	      0xe98b000000	                           jmp 0x4003fc8	      2223	ldlang.c	FUNCTION_56	SWITCH_1
0x4003f3d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2226	ldlang.c	FUNCTION_56	SWITCH_1	CALL_7
0x4003f41	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2226	ldlang.c	FUNCTION_56	SWITCH_1	CALL_7
0x4003f45	          0x4889c7	                            mov rdi, rax	      2226	ldlang.c	FUNCTION_56	SWITCH_1	CALL_7
0x4003f48	      0xe859ffffff	                    call sym.exp_init_os	      2226	ldlang.c	FUNCTION_56	SWITCH_1	CALL_7
0x4003f4d	            0xeb79	                           jmp 0x4003fc8	      2227	ldlang.c	FUNCTION_56	SWITCH_1
0x4003f4f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2230	ldlang.c	FUNCTION_56	SWITCH_1	CALL_8
0x4003f53	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2230	ldlang.c	FUNCTION_56	SWITCH_1	CALL_8
0x4003f57	          0x4889c7	                            mov rdi, rax	      2230	ldlang.c	FUNCTION_56	SWITCH_1	CALL_8
0x4003f5a	      0xe847ffffff	                    call sym.exp_init_os	      2230	ldlang.c	FUNCTION_56	SWITCH_1	CALL_8
0x4003f5f	            0xeb67	                           jmp 0x4003fc8	      2231	ldlang.c	FUNCTION_56	SWITCH_1
0x4003f61	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f65	            0x8b00	                    mov eax, dword [rax]	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f67	      0x3d41010000	                          cmp eax, 0x141	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f6c	            0x7411	                            je 0x4003f7f	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f6e	      0x3d41010000	                          cmp eax, 0x141	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f73	            0x7c52	                            jl 0x4003fc7	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f75	      0x2d43010000	                          sub eax, 0x143	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f7a	          0x83f801	                              cmp eax, 1	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f7d	            0x7748	                            ja 0x4003fc7	      2234	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2
0x4003f7f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f83	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f87	      0xba00000000	                              mov edx, 0	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f8c	      0xbe00000000	                              mov esi, 0	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f91	          0x4889c7	                            mov rdi, rax	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f94	      0xe800000000	                          call 0x4003f99	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f99	        0x488945f8	                mov qword [rbp - 8], rax	      2242	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_9
0x4003f9d	      0x48837df800	                  cmp qword [rbp - 8], 0	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003fa2	            0x7423	                            je 0x4003fc7	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003fa4	        0x488b45f8	                mov rax, qword [rbp - 8]	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003fa8	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003fac	          0x4885c0	                           test rax, rax	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003faf	            0x7516	                           jne 0x4003fc7	      2243	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	IF_1
0x4003fb1	        0x488b45f8	                mov rax, qword [rbp - 8]	      2244	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_10
0x4003fb5	      0xbe00000000	                              mov esi, 0	      2244	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_10
0x4003fba	          0x4889c7	                            mov rdi, rax	      2244	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_10
0x4003fbd	      0xe853fdffff	                        call sym.init_os	      2244	ldlang.c	FUNCTION_56	SWITCH_1	SWITCH_2	CALL_10
0x4003fc2	            0xeb03	                           jmp 0x4003fc7	      2247	ldlang.c	FUNCTION_56	SWITCH_1
0x4003fc4	              0x90	                                     nop	      2250	ldlang.c	FUNCTION_56	SWITCH_1
0x4003fc5	            0xeb01	                           jmp 0x4003fc8	      2250	ldlang.c	FUNCTION_56	SWITCH_1
0x4003fc7	              0x90	                                     nop	      2247	ldlang.c	FUNCTION_56	SWITCH_1
0x4003fc8	              0x90	                                     nop	      2252	ldlang.c	FUNCTION_56
0x4003fc9	              0xc9	                                   leave	      2252	ldlang.c	FUNCTION_56
0x4003fca	              0xc3	                                     ret	      2252	ldlang.c	FUNCTION_56
walk_wild_section_specs1_wild0	functions,0:ELSE,1:FOR,0:CALL,3:IF,2:DO,0:WHILE,0:SWITCH,0	49
0x4000c58	              0x55	                                push rbp	       570	ldlang.c	FUNCTION_18
0x4000c59	          0x4889e5	                            mov rbp, rsp	       570	ldlang.c	FUNCTION_18
0x4000c5c	        0x4883ec40	                           sub rsp, 0x40	       570	ldlang.c	FUNCTION_18
0x4000c60	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       570	ldlang.c	FUNCTION_18
0x4000c64	        0x488975d0	             mov qword [rbp - 0x30], rsi	       570	ldlang.c	FUNCTION_18
0x4000c68	        0x488955c8	             mov qword [rbp - 0x38], rdx	       570	ldlang.c	FUNCTION_18
0x4000c6c	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       570	ldlang.c	FUNCTION_18
0x4000c70	    0x64488b042528	                mov rax, qword fs:[0x28]	       570	ldlang.c	FUNCTION_18
0x4000c79	        0x488945f8	                mov qword [rbp - 8], rax	       570	ldlang.c	FUNCTION_18
0x4000c7d	            0x31c0	                            xor eax, eax	       570	ldlang.c	FUNCTION_18
0x4000c7f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       577	ldlang.c	FUNCTION_18
0x4000c83	        0x488b4050	            mov rax, qword [rax + 0x50] 	       577	ldlang.c	FUNCTION_18
0x4000c87	        0x488945e8	             mov qword [rbp - 0x18], rax	       577	ldlang.c	FUNCTION_18
0x4000c8b	        0x488d55e4	                   lea rdx, [rbp - 0x1c]	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000c8f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000c93	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000c97	          0x4889ce	                            mov rsi, rcx	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000c9a	          0x4889c7	                            mov rdi, rax	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000c9d	      0xe81bfaffff	                   call sym.find_section	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000ca2	        0x488945f0	             mov qword [rbp - 0x10], rax	       578	ldlang.c	FUNCTION_18	CALL_1
0x4000ca6	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       580	ldlang.c	FUNCTION_18	IF_1
0x4000ca9	            0x85c0	                           test eax, eax	       580	ldlang.c	FUNCTION_18	IF_1
0x4000cab	            0x741a	                            je 0x4000cc7	       580	ldlang.c	FUNCTION_18	IF_1
0x4000cad	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cb1	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cb5	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cb9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cbd	          0x4889c7	                            mov rdi, rax	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cc0	      0xe8acf8ffff	      call sym.walk_wild_section_general	       581	ldlang.c	FUNCTION_18	CALL_2
0x4000cc5	            0xeb2d	                           jmp 0x4000cf4	       584	ldlang.c	FUNCTION_18
0x4000cc7	      0x48837df000	               cmp qword [rbp - 0x10], 0	       582	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000ccc	            0x7426	                            je 0x4000cf4	       582	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cce	        0x4c8b45c0	              mov r8, qword [rbp - 0x40]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cd2	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cd6	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cda	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cde	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000ce2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000ce6	          0x4d89c1	                              mov r9, r8	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000ce9	          0x4989f8	                             mov r8, rdi	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cec	          0x4889c7	                            mov rdi, rax	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cef	      0xe81bf8ffff	     call sym.walk_wild_consider_section	       583	ldlang.c	FUNCTION_18	ELSE_1	IF_2
0x4000cf4	              0x90	                                     nop	       584	ldlang.c	FUNCTION_18
0x4000cf5	        0x488b45f8	                mov rax, qword [rbp - 8]	       584	ldlang.c	FUNCTION_18
0x4000cf9	    0x644833042528	                xor rax, qword fs:[0x28]	       584	ldlang.c	FUNCTION_18
0x4000d02	            0x7405	                            je 0x4000d09	       584	ldlang.c	FUNCTION_18
0x4000d04	      0xe800000000	                          call 0x4000d09	       584	ldlang.c	FUNCTION_18
0x4000d09	              0xc9	                                   leave	       584	ldlang.c	FUNCTION_18
0x4000d0a	              0xc3	                                     ret	       584	ldlang.c	FUNCTION_18
is_simple_wild	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	29
0x4000736	              0x55	                                push rbp	       364	ldlang.c	FUNCTION_11
0x4000737	          0x4889e5	                            mov rbp, rsp	       364	ldlang.c	FUNCTION_11
0x400073a	        0x4883ec20	                           sub rsp, 0x20	       364	ldlang.c	FUNCTION_11
0x400073e	        0x48897de8	             mov qword [rbp - 0x18], rdi	       364	ldlang.c	FUNCTION_11
0x4000742	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       365	ldlang.c	FUNCTION_11	CALL_1
0x4000746	      0xbe00000000	                              mov esi, 0	       365	ldlang.c	FUNCTION_11	CALL_1
0x400074b	          0x4889c7	                            mov rdi, rax	       365	ldlang.c	FUNCTION_11	CALL_1
0x400074e	      0xe800000000	                          call 0x4000753	       365	ldlang.c	FUNCTION_11	CALL_1
0x4000753	        0x488945f8	                mov qword [rbp - 8], rax	       365	ldlang.c	FUNCTION_11	CALL_1
0x4000757	      0x48837df803	                  cmp qword [rbp - 8], 3	       366	ldlang.c	FUNCTION_11
0x400075c	            0x762f	                           jbe 0x400078d	       366	ldlang.c	FUNCTION_11
0x400075e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       366	ldlang.c	FUNCTION_11
0x4000762	        0x488b45f8	                mov rax, qword [rbp - 8]	       366	ldlang.c	FUNCTION_11
0x4000766	          0x4801d0	                            add rax, rdx	       366	ldlang.c	FUNCTION_11
0x4000769	           0xfb600	                   movzx eax, byte [rax]	       366	ldlang.c	FUNCTION_11
0x400076c	            0x3c2a	                            cmp al, 0x2a	       366	ldlang.c	FUNCTION_11
0x400076e	            0x751d	                           jne 0x400078d	       366	ldlang.c	FUNCTION_11
0x4000770	        0x488b45f8	                mov rax, qword [rbp - 8]	       366	ldlang.c	FUNCTION_11
0x4000774	        0x488d5001	                      lea rdx, [rax + 1]	       366	ldlang.c	FUNCTION_11
0x4000778	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       366	ldlang.c	FUNCTION_11
0x400077c	          0x4801d0	                            add rax, rdx	       366	ldlang.c	FUNCTION_11
0x400077f	           0xfb600	                   movzx eax, byte [rax]	       366	ldlang.c	FUNCTION_11
0x4000782	            0x84c0	                             test al, al	       366	ldlang.c	FUNCTION_11
0x4000784	            0x7507	                           jne 0x400078d	       366	ldlang.c	FUNCTION_11
0x4000786	      0xb801000000	                              mov eax, 1	       366	ldlang.c	FUNCTION_11
0x400078b	            0xeb05	                           jmp 0x4000792	       366	ldlang.c	FUNCTION_11
0x400078d	      0xb800000000	                              mov eax, 0	       366	ldlang.c	FUNCTION_11
0x4000792	              0xc9	                                   leave	       367	ldlang.c	FUNCTION_11
0x4000793	              0xc3	                                     ret	       367	ldlang.c	FUNCTION_11
strip_excluded_output_sections	functions,0:ELSE,0:FOR,2:CALL,2:IF,7:DO,0:WHILE,0:SWITCH,0	141
0x4006ab4	              0x55	                                push rbp	      3885	ldlang.c	FUNCTION_88
0x4006ab5	          0x4889e5	                            mov rbp, rsp	      3885	ldlang.c	FUNCTION_88
0x4006ab8	        0x4883ec40	                           sub rsp, 0x40	      3885	ldlang.c	FUNCTION_88
0x4006abc	    0x8b0500000000	            mov eax, dword [0x04006ac2] 	      3889	ldlang.c	FUNCTION_88	IF_1
0x4006ac2	          0x83f801	                              cmp eax, 1	      3889	ldlang.c	FUNCTION_88	IF_1
0x4006ac5	            0x7428	                            je 0x4006aef	      3889	ldlang.c	FUNCTION_88	IF_1
0x4006ac7	    0xc70500000000	               mov dword [0x04006ad1], 1	      3891	ldlang.c	FUNCTION_88	IF_1
0x4006ad1	    0xc70500000000	               mov dword [0x04006adb], 0	      3892	ldlang.c	FUNCTION_88	IF_1
0x4006adb	      0xbe00000000	                              mov esi, 0	      3893	ldlang.c	FUNCTION_88	IF_1	CALL_1
0x4006ae0	      0xbf00000000	                              mov edi, 0	      3893	ldlang.c	FUNCTION_88	IF_1	CALL_1
0x4006ae5	      0xe800000000	                          call 0x4006aea	      3893	ldlang.c	FUNCTION_88	IF_1	CALL_1
0x4006aea	      0xe800000000	                          call 0x4006aef	      3894	ldlang.c	FUNCTION_88	IF_1	CALL_2
0x4006aef	    0x488b05000000	            mov rax, qword [0x04006af6] 	      3897	ldlang.c	FUNCTION_88	FOR_1
0x4006af6	        0x488945d0	             mov qword [rbp - 0x30], rax	      3897	ldlang.c	FUNCTION_88	FOR_1
0x4006afa	      0xe9d7010000	                           jmp 0x4006cd6	      3897	ldlang.c	FUNCTION_88	FOR_1
0x4006aff	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3904	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006b03	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      3904	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006b09	            0x85c0	                           test eax, eax	      3904	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006b0b	     0xf88b5010000	                            js 0x4006cc6	      3904	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006b11	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3907	ldlang.c	FUNCTION_88	FOR_1
0x4006b15	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3907	ldlang.c	FUNCTION_88	FOR_1
0x4006b19	        0x488945e0	             mov qword [rbp - 0x20], rax	      3907	ldlang.c	FUNCTION_88	FOR_1
0x4006b1d	      0x48837de000	               cmp qword [rbp - 0x20], 0	      3908	ldlang.c	FUNCTION_88	FOR_1	IF_3
0x4006b22	     0xf84a1010000	                            je 0x4006cc9	      3908	ldlang.c	FUNCTION_88	FOR_1	IF_3
0x4006b28	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3911	ldlang.c	FUNCTION_88	FOR_1
0x4006b2c	        0x488b4040	            mov rax, qword [rax + 0x40] 	      3911	ldlang.c	FUNCTION_88	FOR_1
0x4006b30	          0x4885c0	                           test rax, rax	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b33	            0x754c	                           jne 0x4006b81	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b35	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3912	ldlang.c	FUNCTION_88	FOR_1
0x4006b39	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3912	ldlang.c	FUNCTION_88	FOR_1
0x4006b3c	      0x2500002000	                       and eax, 0x200000	      3912	ldlang.c	FUNCTION_88	FOR_1
0x4006b41	            0x85c0	                           test eax, eax	      3912	ldlang.c	FUNCTION_88	FOR_1
0x4006b43	            0x753c	                           jne 0x4006b81	      3912	ldlang.c	FUNCTION_88	FOR_1
0x4006b45	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b49	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b4d	          0x4885c0	                           test rax, rax	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b50	            0x7516	                           jne 0x4006b68	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b52	    0x488b05000000	            mov rax, qword [0x04006b59] 	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b59	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b60	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b64	            0x7414	                            je 0x4006b7a	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b66	            0xeb19	                           jmp 0x4006b81	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b68	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b6c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b70	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b74	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b78	            0x7507	                           jne 0x4006b81	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b7a	      0xb801000000	                              mov eax, 1	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b7f	            0xeb05	                           jmp 0x4006b86	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b81	      0xb800000000	                              mov eax, 0	      3913	ldlang.c	FUNCTION_88	FOR_1
0x4006b86	          0x8945cc	             mov dword [rbp - 0x34], eax	      3911	ldlang.c	FUNCTION_88	FOR_1
0x4006b89	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b8d	            0x746e	                            je 0x4006bfd	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b8f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b93	    0x488b80080100	           mov rax, qword [rax + 0x108] 	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b9a	          0x4885c0	                           test rax, rax	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b9d	            0x745e	                            je 0x4006bfd	      3920	ldlang.c	FUNCTION_88	FOR_1	IF_4
0x4006b9f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006ba3	    0x488b80080100	           mov rax, qword [rax + 0x108] 	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006baa	        0x488945d8	             mov qword [rbp - 0x28], rax	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bae	            0xeb46	                           jmp 0x4006bf6	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bb0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3925	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bb4	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3925	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bb7	      0x2500800000	                         and eax, 0x8000	      3925	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bbc	            0x85c0	                           test eax, eax	      3925	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bbe	            0x7527	                           jne 0x4006be7	      3925	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bc0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3926	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bc4	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3926	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bc7	      0x2500001000	                       and eax, 0x100000	      3926	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bcc	            0x85c0	                           test eax, eax	      3926	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bce	            0x750e	                           jne 0x4006bde	      3926	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bd0	     0xfb605000000	           movzx eax, byte [0x04006bd7] 	      3927	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bd7	          0x83e008	                              and eax, 8	      3927	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bda	            0x84c0	                             test al, al	      3927	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bdc	            0x7409	                            je 0x4006be7	      3927	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006bde	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      3929	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006be5	            0xeb16	                           jmp 0x4006bfd	      3930	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2	IF_5
0x4006be7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006beb	    0x488b80080100	           mov rax, qword [rax + 0x108] 	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bf2	        0x488945d8	             mov qword [rbp - 0x28], rax	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bf6	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bfb	            0x75b3	                           jne 0x4006bb0	      3924	ldlang.c	FUNCTION_88	FOR_1	IF_4	FOR_2
0x4006bfd	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      3934	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c01	     0xf84c3000000	                            je 0x4006cca	      3934	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c07	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3938	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c0b	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      3938	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c12	          0x83e010	                           and eax, 0x10	      3938	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c15	            0x84c0	                             test al, al	      3938	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c17	            0x7514	                           jne 0x4006c2d	      3938	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c19	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3939	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c1d	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      3939	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c24	          0x83ca08	                               or edx, 8	      3939	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c27	    0x889090000000	               mov byte [rax + 0x90], dl	      3939	ldlang.c	FUNCTION_88	FOR_1	IF_6	IF_7
0x4006c2d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c31	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c34	          0x80cc80	                             or ah, 0x80	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c37	            0x89c2	                            mov edx, eax	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c39	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c3d	          0x895020	             mov dword [rax + 0x20], edx	      3940	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c40	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c44	        0x488945e8	             mov qword [rbp - 0x18], rax	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c48	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c4c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c50	        0x488945f0	             mov qword [rbp - 0x10], rax	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c54	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c58	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c5c	        0x488945f8	                mov qword [rbp - 8], rax	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c60	      0x48837df800	                  cmp qword [rbp - 8], 0	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c65	            0x740e	                            je 0x4006c75	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c67	        0x488b45f8	                mov rax, qword [rbp - 8]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c6b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c6f	        0x48895010	             mov qword [rax + 0x10], rdx	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c73	            0xeb12	                           jmp 0x4006c87	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c75	    0x488b05000000	            mov rax, qword [0x04006c7c] 	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c7c	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c80	    0x488990900000	             mov qword [rax + 0x90], rdx	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c87	      0x48837df000	               cmp qword [rbp - 0x10], 0	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c8c	            0x740e	                            je 0x4006c9c	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c8e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c92	        0x488b55f8	                mov rdx, qword [rbp - 8]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c96	        0x48895018	             mov qword [rax + 0x18], rdx	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c9a	            0xeb12	                           jmp 0x4006cae	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006c9c	    0x488b05000000	            mov rax, qword [0x04006ca3] 	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006ca3	        0x488b55f8	                mov rdx, qword [rbp - 8]	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006ca7	    0x488990980000	             mov qword [rax + 0x98], rdx	      3941	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cae	    0x488b05000000	            mov rax, qword [0x04006cb5] 	      3942	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cb5	    0x8b90a0000000	            mov edx, dword [rax + 0xa0] 	      3942	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cbb	          0x83ea01	                              sub edx, 1	      3942	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cbe	    0x8990a0000000	             mov dword [rax + 0xa0], edx	      3942	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cc4	            0xeb04	                           jmp 0x4006cca	      3942	ldlang.c	FUNCTION_88	FOR_1	IF_6
0x4006cc6	              0x90	                                     nop	      3905	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006cc7	            0xeb01	                           jmp 0x4006cca	      3905	ldlang.c	FUNCTION_88	FOR_1	IF_2
0x4006cc9	              0x90	                                     nop	      3909	ldlang.c	FUNCTION_88	FOR_1	IF_3
0x4006cca	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3899	ldlang.c	FUNCTION_88	FOR_1
0x4006cce	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3899	ldlang.c	FUNCTION_88	FOR_1
0x4006cd2	        0x488945d0	             mov qword [rbp - 0x30], rax	      3899	ldlang.c	FUNCTION_88	FOR_1
0x4006cd6	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      3897	ldlang.c	FUNCTION_88	FOR_1
0x4006cdb	     0xf851efeffff	                           jne 0x4006aff	      3897	ldlang.c	FUNCTION_88	FOR_1
0x4006ce1	              0x90	                                     nop	      3945	ldlang.c	FUNCTION_88
0x4006ce2	              0xc9	                                   leave	      3945	ldlang.c	FUNCTION_88
0x4006ce3	              0xc3	                                     ret	      3945	ldlang.c	FUNCTION_88
lang_reset_memory_regions	functions,0:ELSE,0:FOR,3:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	57
0x400c337	              0x55	                                push rbp	      6751	ldlang.c	FUNCTION_148
0x400c338	          0x4889e5	                            mov rbp, rsp	      6751	ldlang.c	FUNCTION_148
0x400c33b	    0x488b05000000	            mov rax, qword [0x0400c342] 	      6752	ldlang.c	FUNCTION_148
0x400c342	        0x488945e8	             mov qword [rbp - 0x18], rax	      6752	ldlang.c	FUNCTION_148
0x400c346	    0x488b05000000	            mov rax, qword [0x0400c34d] 	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c34d	        0x488945e8	             mov qword [rbp - 0x18], rax	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c351	            0xeb28	                           jmp 0x400c37b	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c353	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6758	ldlang.c	FUNCTION_148	FOR_1
0x400c357	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      6758	ldlang.c	FUNCTION_148	FOR_1
0x400c35b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6758	ldlang.c	FUNCTION_148	FOR_1
0x400c35f	        0x48895038	             mov qword [rax + 0x38], rdx	      6758	ldlang.c	FUNCTION_148	FOR_1
0x400c363	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6759	ldlang.c	FUNCTION_148	FOR_1
0x400c367	    0x48c740400000	               mov qword [rax + 0x40], 0	      6759	ldlang.c	FUNCTION_148	FOR_1
0x400c36f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c373	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c377	        0x488945e8	             mov qword [rbp - 0x18], rax	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c37b	      0x48837de800	               cmp qword [rbp - 0x18], 0	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c380	            0x75d1	                           jne 0x400c353	      6756	ldlang.c	FUNCTION_148	FOR_1
0x400c382	    0x488b05000000	            mov rax, qword [0x0400c389] 	      6762	ldlang.c	FUNCTION_148	FOR_2
0x400c389	        0x488945f8	                mov qword [rbp - 8], rax	      6762	ldlang.c	FUNCTION_148	FOR_2
0x400c38d	            0xeb34	                           jmp 0x400c3c3	      6762	ldlang.c	FUNCTION_148	FOR_2
0x400c38f	        0x488b45f8	                mov rax, qword [rbp - 8]	      6766	ldlang.c	FUNCTION_148	FOR_2
0x400c393	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      6766	ldlang.c	FUNCTION_148	FOR_2
0x400c39a	          0x83e2fe	                     and edx, 0xfffffffe	      6766	ldlang.c	FUNCTION_148	FOR_2
0x400c39d	    0x889090000000	               mov byte [rax + 0x90], dl	      6766	ldlang.c	FUNCTION_148	FOR_2
0x400c3a3	        0x488b45f8	                mov rax, qword [rbp - 8]	      6767	ldlang.c	FUNCTION_148	FOR_2
0x400c3a7	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      6767	ldlang.c	FUNCTION_148	FOR_2
0x400c3ae	          0x83e2fd	                     and edx, 0xfffffffd	      6767	ldlang.c	FUNCTION_148	FOR_2
0x400c3b1	    0x889090000000	               mov byte [rax + 0x90], dl	      6767	ldlang.c	FUNCTION_148	FOR_2
0x400c3b7	        0x488b45f8	                mov rax, qword [rbp - 8]	      6764	ldlang.c	FUNCTION_148	FOR_2
0x400c3bb	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6764	ldlang.c	FUNCTION_148	FOR_2
0x400c3bf	        0x488945f8	                mov qword [rbp - 8], rax	      6764	ldlang.c	FUNCTION_148	FOR_2
0x400c3c3	      0x48837df800	                  cmp qword [rbp - 8], 0	      6762	ldlang.c	FUNCTION_148	FOR_2
0x400c3c8	            0x75c5	                           jne 0x400c38f	      6762	ldlang.c	FUNCTION_148	FOR_2
0x400c3ca	    0x488b05000000	            mov rax, qword [0x0400c3d1] 	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c3d1	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c3d8	        0x488945f0	             mov qword [rbp - 0x10], rax	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c3dc	            0xeb38	                           jmp 0x400c416	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c3de	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6773	ldlang.c	FUNCTION_148	FOR_3
0x400c3e2	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      6773	ldlang.c	FUNCTION_148	FOR_3
0x400c3e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6773	ldlang.c	FUNCTION_148	FOR_3
0x400c3ea	        0x48895040	             mov qword [rax + 0x40], rdx	      6773	ldlang.c	FUNCTION_148	FOR_3
0x400c3ee	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6774	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c3f2	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6774	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c3f5	      0x2500080000	                          and eax, 0x800	      6774	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c3fa	            0x85c0	                           test eax, eax	      6774	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c3fc	            0x750c	                           jne 0x400c40a	      6774	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c3fe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6775	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c402	    0x48c740380000	               mov qword [rax + 0x38], 0	      6775	ldlang.c	FUNCTION_148	FOR_3	IF_1
0x400c40a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c40e	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c412	        0x488945f0	             mov qword [rbp - 0x10], rax	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c416	      0x48837df000	               cmp qword [rbp - 0x10], 0	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c41b	            0x75c1	                           jne 0x400c3de	      6770	ldlang.c	FUNCTION_148	FOR_3
0x400c41d	              0x90	                                     nop	      6777	ldlang.c	FUNCTION_148
0x400c41e	              0x5d	                                 pop rbp	      6777	ldlang.c	FUNCTION_148
0x400c41f	              0xc3	                                     ret	      6777	ldlang.c	FUNCTION_148
lang_append_dynamic_list	functions,0:ELSE,1:FOR,1:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	39
0x400f58f	              0x55	                                push rbp	      8664	ldlang.c	FUNCTION_204
0x400f590	          0x4889e5	                            mov rbp, rsp	      8664	ldlang.c	FUNCTION_204
0x400f593	        0x4883ec20	                           sub rsp, 0x20	      8664	ldlang.c	FUNCTION_204
0x400f597	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8664	ldlang.c	FUNCTION_204
0x400f59b	    0x488b05000000	            mov rax, qword [0x0400f5a2] 	      8665	ldlang.c	FUNCTION_204	IF_1
0x400f5a2	          0x4885c0	                           test rax, rax	      8665	ldlang.c	FUNCTION_204	IF_1
0x400f5a5	            0x7442	                            je 0x400f5e9	      8665	ldlang.c	FUNCTION_204	IF_1
0x400f5a7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5ab	        0x488945f0	             mov qword [rbp - 0x10], rax	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5af	            0xeb0b	                           jmp 0x400f5bc	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5b1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5b5	          0x488b00	                    mov rax, qword [rax]	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5b8	        0x488945f0	             mov qword [rbp - 0x10], rax	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5bc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5c0	          0x488b00	                    mov rax, qword [rax]	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5c3	          0x4885c0	                           test rax, rax	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5c6	            0x75e9	                           jne 0x400f5b1	      8668	ldlang.c	FUNCTION_204	IF_1	FOR_1
0x400f5c8	    0x488b05000000	            mov rax, qword [0x0400f5cf] 	      8670	ldlang.c	FUNCTION_204	IF_1
0x400f5cf	          0x488b10	                    mov rdx, qword [rax]	      8670	ldlang.c	FUNCTION_204	IF_1
0x400f5d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8670	ldlang.c	FUNCTION_204	IF_1
0x400f5d6	          0x488910	                    mov qword [rax], rdx	      8670	ldlang.c	FUNCTION_204	IF_1
0x400f5d9	    0x488b05000000	            mov rax, qword [0x0400f5e0] 	      8671	ldlang.c	FUNCTION_204	IF_1
0x400f5e0	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8671	ldlang.c	FUNCTION_204	IF_1
0x400f5e4	          0x488910	                    mov qword [rax], rdx	      8671	ldlang.c	FUNCTION_204	IF_1
0x400f5e7	            0xeb35	                           jmp 0x400f61e	      8682	ldlang.c	FUNCTION_204
0x400f5e9	      0xbe28000000	                           mov esi, 0x28	      8677	ldlang.c	FUNCTION_204	ELSE_1	CALL_1
0x400f5ee	      0xbf01000000	                              mov edi, 1	      8677	ldlang.c	FUNCTION_204	ELSE_1	CALL_1
0x400f5f3	      0xe800000000	                          call 0x400f5f8	      8677	ldlang.c	FUNCTION_204	ELSE_1	CALL_1
0x400f5f8	        0x488945f8	                mov qword [rbp - 8], rax	      8677	ldlang.c	FUNCTION_204	ELSE_1	CALL_1
0x400f5fc	        0x488b45f8	                mov rax, qword [rbp - 8]	      8678	ldlang.c	FUNCTION_204	ELSE_1
0x400f600	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8678	ldlang.c	FUNCTION_204	ELSE_1
0x400f604	          0x488910	                    mov qword [rax], rdx	      8678	ldlang.c	FUNCTION_204	ELSE_1
0x400f607	        0x488b45f8	                mov rax, qword [rbp - 8]	      8679	ldlang.c	FUNCTION_204	ELSE_1
0x400f60b	    0x48c740200000	               mov qword [rax + 0x20], 0	      8679	ldlang.c	FUNCTION_204	ELSE_1
0x400f613	        0x488b45f8	                mov rax, qword [rbp - 8]	      8680	ldlang.c	FUNCTION_204	ELSE_1
0x400f617	    0x488905000000	            mov qword [0x0400f61e], rax 	      8680	ldlang.c	FUNCTION_204	ELSE_1
0x400f61e	              0x90	                                     nop	      8682	ldlang.c	FUNCTION_204
0x400f61f	              0xc9	                                   leave	      8682	ldlang.c	FUNCTION_204
0x400f620	              0xc3	                                     ret	      8682	ldlang.c	FUNCTION_204
lang_leave_overlay	functions,0:ELSE,0:FOR,0:CALL,6:IF,6:DO,0:WHILE,1:SWITCH,0	132
0x400e1aa	              0x55	                                push rbp	      8048	ldlang.c	FUNCTION_191
0x400e1ab	          0x4889e5	                            mov rbp, rsp	      8048	ldlang.c	FUNCTION_191
0x400e1ae	              0x53	                                push rbx	      8048	ldlang.c	FUNCTION_191
0x400e1af	        0x4883ec78	                           sub rsp, 0x78	      8048	ldlang.c	FUNCTION_191
0x400e1b3	        0x48897da8	             mov qword [rbp - 0x58], rdi	      8048	ldlang.c	FUNCTION_191
0x400e1b7	          0x8975a4	             mov dword [rbp - 0x5c], esi	      8048	ldlang.c	FUNCTION_191
0x400e1ba	        0x48895598	             mov qword [rbp - 0x68], rdx	      8048	ldlang.c	FUNCTION_191
0x400e1be	        0x48894d90	             mov qword [rbp - 0x70], rcx	      8048	ldlang.c	FUNCTION_191
0x400e1c2	        0x4c894588	              mov qword [rbp - 0x78], r8	      8048	ldlang.c	FUNCTION_191
0x400e1c6	        0x4c894d80	              mov qword [rbp - 0x80], r9	      8048	ldlang.c	FUNCTION_191
0x400e1ca	    0x64488b042528	                mov rax, qword fs:[0x28]	      8048	ldlang.c	FUNCTION_191
0x400e1d3	        0x488945e8	             mov qword [rbp - 0x18], rax	      8048	ldlang.c	FUNCTION_191
0x400e1d7	            0x31c0	                            xor eax, eax	      8048	ldlang.c	FUNCTION_191
0x400e1d9	      0x48837da800	               cmp qword [rbp - 0x58], 0	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1de	           0xf95c0	                                setne al	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1e1	           0xfb6f8	                           movzx edi, al	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1e4	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1e8	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1ec	        0x488d75c0	                   lea rsi, [rbp - 0x40]	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1f0	        0x488d45b8	                   lea rax, [rbp - 0x48]	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1f4	    0x41b900000000	                              mov r9d, 0	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1fa	          0x4189f8	                            mov r8d, edi	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e1fd	          0x4889c7	                            mov rdi, rax	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e200	      0xe886f4ffff	               call sym.lang_get_regions	      8054	ldlang.c	FUNCTION_191	CALL_1
0x400e205	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      8058	ldlang.c	FUNCTION_191
0x400e20d	    0x488b05000000	            mov rax, qword [0x0400e214] 	      8062	ldlang.c	FUNCTION_191	IF_1
0x400e214	          0x4885c0	                           test rax, rax	      8062	ldlang.c	FUNCTION_191	IF_1
0x400e217	            0x7457	                            je 0x400e270	      8062	ldlang.c	FUNCTION_191	IF_1
0x400e219	    0x488b05000000	            mov rax, qword [0x0400e220] 	      8064	ldlang.c	FUNCTION_191	IF_1
0x400e220	        0x488b4008	                mov rax, qword [rax + 8]	      8064	ldlang.c	FUNCTION_191	IF_1
0x400e224	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      8064	ldlang.c	FUNCTION_191	IF_1
0x400e22b	          0x83ca10	                            or edx, 0x10	      8064	ldlang.c	FUNCTION_191	IF_1
0x400e22e	    0x889090000000	               mov byte [rax + 0x90], dl	      8064	ldlang.c	FUNCTION_191	IF_1
0x400e234	    0x488b05000000	            mov rax, qword [0x0400e23b] 	      8065	ldlang.c	FUNCTION_191	IF_1
0x400e23b	        0x488b5808	                mov rbx, qword [rax + 8]	      8065	ldlang.c	FUNCTION_191	IF_1
0x400e23f	    0x488b15000000	            mov rdx, qword [0x0400e246] 	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e246	    0x488b05000000	            mov rax, qword [0x0400e24d] 	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e24d	          0x4889c6	                            mov rsi, rax	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e250	      0xbf2b000000	                           mov edi, 0x2b	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e255	      0xe800000000	                          call 0x400e25a	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e25a	      0xba00000000	                              mov edx, 0	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e25f	          0x4889c6	                            mov rsi, rax	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e262	      0xbf00000000	                              mov edi, 0	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e267	      0xe800000000	                          call 0x400e26c	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e26c	        0x48894368	             mov qword [rbx + 0x68], rax	      8066	ldlang.c	FUNCTION_191	IF_1	CALL_3
0x400e270	    0x488b05000000	            mov rax, qword [0x0400e277] 	      8069	ldlang.c	FUNCTION_191
0x400e277	        0x488945c8	             mov qword [rbp - 0x38], rax	      8069	ldlang.c	FUNCTION_191
0x400e27b	      0xe9f8000000	                           jmp 0x400e378	      8070	ldlang.c	FUNCTION_191	WHILE_1
0x400e280	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e285	            0x7421	                            je 0x400e2a8	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e287	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e28b	        0x488b4008	                mov rax, qword [rax + 8]	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e28f	        0x488b4050	            mov rax, qword [rax + 0x50] 	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e293	          0x4885c0	                           test rax, rax	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e296	            0x7510	                           jne 0x400e2a8	      8074	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e298	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8075	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e29c	        0x488b4008	                mov rax, qword [rax + 8]	      8075	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e2a0	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      8075	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e2a4	        0x48895050	             mov qword [rax + 0x50], rdx	      8075	ldlang.c	FUNCTION_191	WHILE_1	IF_2
0x400e2a8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8077	ldlang.c	FUNCTION_191	WHILE_1
0x400e2ac	        0x488b4008	                mov rax, qword [rax + 8]	      8077	ldlang.c	FUNCTION_191	WHILE_1
0x400e2b0	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      8077	ldlang.c	FUNCTION_191	WHILE_1
0x400e2b4	        0x48895040	             mov qword [rax + 0x40], rdx	      8077	ldlang.c	FUNCTION_191	WHILE_1
0x400e2b8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8078	ldlang.c	FUNCTION_191	WHILE_1
0x400e2bc	        0x488b4008	                mov rax, qword [rax + 8]	      8078	ldlang.c	FUNCTION_191	WHILE_1
0x400e2c0	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      8078	ldlang.c	FUNCTION_191	WHILE_1
0x400e2c4	        0x48895048	             mov qword [rax + 0x48], rdx	      8078	ldlang.c	FUNCTION_191	WHILE_1
0x400e2c8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8084	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2cc	          0x488b00	                    mov rax, qword [rax]	      8084	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2cf	          0x4885c0	                           test rax, rax	      8084	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2d2	            0x7522	                           jne 0x400e2f6	      8084	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2d4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8086	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2d8	        0x488b4008	                mov rax, qword [rax + 8]	      8086	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2dc	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      8086	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2e0	        0x48895060	             mov qword [rax + 0x60], rdx	      8086	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2e4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8087	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2e8	        0x488b4008	                mov rax, qword [rax + 8]	      8087	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2ec	    0xc7808c000000	               mov dword [rax + 0x8c], 0	      8087	ldlang.c	FUNCTION_191	WHILE_1	IF_3
0x400e2f6	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e2fb	            0x7421	                            je 0x400e31e	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e2fd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e301	        0x488b4008	                mov rax, qword [rax + 8]	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e305	        0x488b4070	            mov rax, qword [rax + 0x70] 	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e309	          0x4885c0	                           test rax, rax	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e30c	            0x7510	                           jne 0x400e31e	      8089	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e30e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8090	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e312	        0x488b4008	                mov rax, qword [rax + 8]	      8090	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e316	        0x488b5588	             mov rdx, qword [rbp - 0x78]	      8090	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e31a	        0x48895070	             mov qword [rax + 0x70], rdx	      8090	ldlang.c	FUNCTION_191	WHILE_1	IF_4
0x400e31e	        0x837da400	               cmp dword [rbp - 0x5c], 0	      8092	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e322	            0x7435	                            je 0x400e359	      8092	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e324	      0xbf10000000	                           mov edi, 0x10	      8096	ldlang.c	FUNCTION_191	WHILE_1	IF_5	CALL_4
0x400e329	      0xe800000000	                          call 0x400e32e	      8096	ldlang.c	FUNCTION_191	WHILE_1	IF_5	CALL_4
0x400e32e	        0x488945d8	             mov qword [rbp - 0x28], rax	      8096	ldlang.c	FUNCTION_191	WHILE_1	IF_5	CALL_4
0x400e332	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8097	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e336	        0x488b4008	                mov rax, qword [rax + 8]	      8097	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e33a	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      8097	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e33e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8097	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e342	        0x48895008	                mov qword [rax + 8], rdx	      8097	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e346	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8098	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e34a	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      8098	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e34e	          0x488910	                    mov qword [rax], rdx	      8098	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e351	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8099	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e355	        0x488945d0	             mov qword [rbp - 0x30], rax	      8099	ldlang.c	FUNCTION_191	WHILE_1	IF_5
0x400e359	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8102	ldlang.c	FUNCTION_191	WHILE_1
0x400e35d	          0x488b00	                    mov rax, qword [rax]	      8102	ldlang.c	FUNCTION_191	WHILE_1
0x400e360	        0x488945e0	             mov qword [rbp - 0x20], rax	      8102	ldlang.c	FUNCTION_191	WHILE_1
0x400e364	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8103	ldlang.c	FUNCTION_191	WHILE_1	CALL_5
0x400e368	          0x4889c7	                            mov rdi, rax	      8103	ldlang.c	FUNCTION_191	WHILE_1	CALL_5
0x400e36b	      0xe800000000	                          call 0x400e370	      8103	ldlang.c	FUNCTION_191	WHILE_1	CALL_5
0x400e370	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8104	ldlang.c	FUNCTION_191	WHILE_1
0x400e374	        0x488945c8	             mov qword [rbp - 0x38], rax	      8104	ldlang.c	FUNCTION_191	WHILE_1
0x400e378	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8070	ldlang.c	FUNCTION_191	WHILE_1
0x400e37d	     0xf85fdfeffff	                           jne 0x400e280	      8070	ldlang.c	FUNCTION_191	WHILE_1
0x400e383	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      8107	ldlang.c	FUNCTION_191	IF_6
0x400e388	            0x740c	                            je 0x400e396	      8107	ldlang.c	FUNCTION_191	IF_6
0x400e38a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8108	ldlang.c	FUNCTION_191	CALL_6
0x400e38e	          0x4889c7	                            mov rdi, rax	      8108	ldlang.c	FUNCTION_191	CALL_6
0x400e391	      0xe800000000	                          call 0x400e396	      8108	ldlang.c	FUNCTION_191	CALL_6
0x400e396	    0x48c705000000	               mov qword [0x0400e3a1], 0	      8110	ldlang.c	FUNCTION_191
0x400e3a1	    0x48c705000000	               mov qword [0x0400e3ac], 0	      8111	ldlang.c	FUNCTION_191
0x400e3ac	    0x48c705000000	               mov qword [0x0400e3b7], 0	      8112	ldlang.c	FUNCTION_191
0x400e3b7	    0x48c705000000	               mov qword [0x0400e3c2], 0	      8113	ldlang.c	FUNCTION_191
0x400e3c2	              0x90	                                     nop	      8114	ldlang.c	FUNCTION_191
0x400e3c3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8114	ldlang.c	FUNCTION_191
0x400e3c7	    0x644833042528	                xor rax, qword fs:[0x28]	      8114	ldlang.c	FUNCTION_191
0x400e3d0	            0x7405	                            je 0x400e3d7	      8114	ldlang.c	FUNCTION_191
0x400e3d2	      0xe800000000	                          call 0x400e3d7	      8114	ldlang.c	FUNCTION_191
0x400e3d7	        0x4883c478	                           add rsp, 0x78	      8114	ldlang.c	FUNCTION_191
0x400e3db	              0x5b	                                 pop rbx	      8114	ldlang.c	FUNCTION_191
0x400e3dc	              0x5d	                                 pop rbp	      8114	ldlang.c	FUNCTION_191
0x400e3dd	              0xc3	                                     ret	      8114	ldlang.c	FUNCTION_191
ldlang_check_relro_region	functions,0:ELSE,3:FOR,0:CALL,2:IF,4:DO,0:WHILE,0:SWITCH,0	47
0x4008d51	              0x55	                                push rbp	      4980	ldlang.c	FUNCTION_114
0x4008d52	          0x4889e5	                            mov rbp, rsp	      4980	ldlang.c	FUNCTION_114
0x4008d55	        0x4883ec10	                           sub rsp, 0x10	      4980	ldlang.c	FUNCTION_114
0x4008d59	        0x48897df8	                mov qword [rbp - 8], rdi	      4980	ldlang.c	FUNCTION_114
0x4008d5d	        0x488975f0	             mov qword [rbp - 0x10], rsi	      4980	ldlang.c	FUNCTION_114
0x4008d61	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4981	ldlang.c	FUNCTION_114	IF_1
0x4008d65	          0x8b4038	            mov eax, dword [rax + 0x38] 	      4981	ldlang.c	FUNCTION_114	IF_1
0x4008d68	          0x83f801	                              cmp eax, 1	      4981	ldlang.c	FUNCTION_114	IF_1
0x4008d6b	            0x753a	                           jne 0x4008da7	      4981	ldlang.c	FUNCTION_114	IF_1
0x4008d6d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4983	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d71	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4983	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d75	          0x4885c0	                           test rax, rax	      4983	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d78	            0x750e	                           jne 0x4008d88	      4983	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d7a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4984	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d7e	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4984	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d82	        0x48895040	             mov qword [rax + 0x40], rdx	      4984	ldlang.c	FUNCTION_114	IF_1	IF_2
0x4008d86	            0xeb63	                           jmp 0x4008deb	      4999	ldlang.c	FUNCTION_114
0x4008d88	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008d8c	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008d90	        0x483b45f8	                cmp rax, qword [rbp - 8]	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008d94	            0x7455	                            je 0x4008deb	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008d96	      0xbe7b130000	                         mov esi, 0x137b	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008d9b	      0xbf00000000	                              mov edi, 0	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008da0	      0xe800000000	                          call 0x4008da5	      4987	ldlang.c	FUNCTION_114	IF_1	ELSE_1	CALL_1
0x4008da5	            0xeb44	                           jmp 0x4008deb	      4999	ldlang.c	FUNCTION_114
0x4008da7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4990	ldlang.c	FUNCTION_114	ELSE_2	IF_3
0x4008dab	          0x8b4038	            mov eax, dword [rax + 0x38] 	      4990	ldlang.c	FUNCTION_114	ELSE_2	IF_3
0x4008dae	          0x83f802	                              cmp eax, 2	      4990	ldlang.c	FUNCTION_114	ELSE_2	IF_3
0x4008db1	            0x7538	                           jne 0x4008deb	      4990	ldlang.c	FUNCTION_114	ELSE_2	IF_3
0x4008db3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4992	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008db7	        0x488b4048	            mov rax, qword [rax + 0x48] 	      4992	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dbb	          0x4885c0	                           test rax, rax	      4992	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dbe	            0x750e	                           jne 0x4008dce	      4992	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dc0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4993	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dc4	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4993	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dc8	        0x48895048	             mov qword [rax + 0x48], rdx	      4993	ldlang.c	FUNCTION_114	ELSE_2	IF_3	IF_4
0x4008dcc	            0xeb1d	                           jmp 0x4008deb	      4999	ldlang.c	FUNCTION_114
0x4008dce	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008dd2	        0x488b4048	            mov rax, qword [rax + 0x48] 	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008dd6	        0x483b45f8	                cmp rax, qword [rbp - 8]	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008dda	            0x740f	                            je 0x4008deb	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008ddc	      0xbe84130000	                         mov esi, 0x1384	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008de1	      0xbf00000000	                              mov edi, 0	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008de6	      0xe800000000	                          call 0x4008deb	      4996	ldlang.c	FUNCTION_114	ELSE_2	IF_3	ELSE_3	CALL_2
0x4008deb	              0x90	                                     nop	      4999	ldlang.c	FUNCTION_114
0x4008dec	              0xc9	                                   leave	      4999	ldlang.c	FUNCTION_114
0x4008ded	              0xc3	                                     ret	      4999	ldlang.c	FUNCTION_114
stricpy	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,1:SWITCH,0	25
0x400521d	              0x55	                                push rbp	      2944	ldlang.c	FUNCTION_69
0x400521e	          0x4889e5	                            mov rbp, rsp	      2944	ldlang.c	FUNCTION_69
0x4005221	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2944	ldlang.c	FUNCTION_69
0x4005225	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2944	ldlang.c	FUNCTION_69
0x4005229	            0xeb1f	                           jmp 0x400524a	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x400522b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2948	ldlang.c	FUNCTION_69	CALL_1
0x400522f	        0x488d5001	                      lea rdx, [rax + 1]	      2948	ldlang.c	FUNCTION_69	CALL_1
0x4005233	        0x488955e8	             mov qword [rbp - 0x18], rdx	      2948	ldlang.c	FUNCTION_69	CALL_1
0x4005237	         0xfbe55ff	               movsx edx, byte [rbp - 1]	      2948	ldlang.c	FUNCTION_69	CALL_1
0x400523b	           0xfb6d2	                           movzx edx, dl	      2948	ldlang.c	FUNCTION_69	CALL_1
0x400523e	          0x4863d2	                         movsxd rdx, edx	      2948	ldlang.c	FUNCTION_69	CALL_1
0x4005241	     0xfb692000000	                   movzx edx, byte [rdx]	      2948	ldlang.c	FUNCTION_69	CALL_1
0x4005248	            0x8810	                      mov byte [rax], dl	      2948	ldlang.c	FUNCTION_69	CALL_1
0x400524a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x400524e	        0x488d5001	                      lea rdx, [rax + 1]	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x4005252	        0x488955e0	             mov qword [rbp - 0x20], rdx	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x4005256	           0xfb600	                   movzx eax, byte [rax]	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x4005259	          0x8845ff	                  mov byte [rbp - 1], al	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x400525c	        0x807dff00	                   cmp byte [rbp - 1], 0	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x4005260	            0x75c9	                           jne 0x400522b	      2947	ldlang.c	FUNCTION_69	WHILE_1
0x4005262	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2950	ldlang.c	FUNCTION_69
0x4005266	          0xc60000	                       mov byte [rax], 0	      2950	ldlang.c	FUNCTION_69
0x4005269	              0x90	                                     nop	      2951	ldlang.c	FUNCTION_69
0x400526a	              0x5d	                                 pop rbp	      2951	ldlang.c	FUNCTION_69
0x400526b	              0xc3	                                     ret	      2951	ldlang.c	FUNCTION_69
wild_spec_can_overlap	functions,0:ELSE,0:FOR,0:CALL,3:IF,2:DO,0:WHILE,0:SWITCH,0	44
0x4001321	              0x55	                                push rbp	       758	ldlang.c	FUNCTION_24
0x4001322	          0x4889e5	                            mov rbp, rsp	       758	ldlang.c	FUNCTION_24
0x4001325	        0x4883ec30	                           sub rsp, 0x30	       758	ldlang.c	FUNCTION_24
0x4001329	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       758	ldlang.c	FUNCTION_24
0x400132d	        0x488975d0	             mov qword [rbp - 0x30], rsi	       758	ldlang.c	FUNCTION_24
0x4001331	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       759	ldlang.c	FUNCTION_24	CALL_1
0x4001335	      0xbe00000000	                              mov esi, 0	       759	ldlang.c	FUNCTION_24	CALL_1
0x400133a	          0x4889c7	                            mov rdi, rax	       759	ldlang.c	FUNCTION_24	CALL_1
0x400133d	      0xe800000000	                          call 0x4001342	       759	ldlang.c	FUNCTION_24	CALL_1
0x4001342	        0x488945e8	             mov qword [rbp - 0x18], rax	       759	ldlang.c	FUNCTION_24	CALL_1
0x4001346	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       760	ldlang.c	FUNCTION_24	CALL_2
0x400134a	      0xbe00000000	                              mov esi, 0	       760	ldlang.c	FUNCTION_24	CALL_2
0x400134f	          0x4889c7	                            mov rdi, rax	       760	ldlang.c	FUNCTION_24	CALL_2
0x4001352	      0xe800000000	                          call 0x4001357	       760	ldlang.c	FUNCTION_24	CALL_2
0x4001357	        0x488945f0	             mov qword [rbp - 0x10], rax	       760	ldlang.c	FUNCTION_24	CALL_2
0x400135b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       766	ldlang.c	FUNCTION_24	IF_1
0x400135f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       766	ldlang.c	FUNCTION_24	IF_1
0x4001363	          0x4801d0	                            add rax, rdx	       766	ldlang.c	FUNCTION_24	IF_1
0x4001366	           0xfb600	                   movzx eax, byte [rax]	       766	ldlang.c	FUNCTION_24	IF_1
0x4001369	            0x84c0	                             test al, al	       766	ldlang.c	FUNCTION_24	IF_1
0x400136b	            0x7505	                           jne 0x4001372	       766	ldlang.c	FUNCTION_24	IF_1
0x400136d	      0x488345e801	               add qword [rbp - 0x18], 1	       767	ldlang.c	FUNCTION_24	IF_1
0x4001372	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       768	ldlang.c	FUNCTION_24	IF_2
0x4001376	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       768	ldlang.c	FUNCTION_24	IF_2
0x400137a	          0x4801d0	                            add rax, rdx	       768	ldlang.c	FUNCTION_24	IF_2
0x400137d	           0xfb600	                   movzx eax, byte [rax]	       768	ldlang.c	FUNCTION_24	IF_2
0x4001380	            0x84c0	                             test al, al	       768	ldlang.c	FUNCTION_24	IF_2
0x4001382	            0x7505	                           jne 0x4001389	       768	ldlang.c	FUNCTION_24	IF_2
0x4001384	      0x488345f001	               add qword [rbp - 0x10], 1	       769	ldlang.c	FUNCTION_24	IF_2
0x4001389	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       771	ldlang.c	FUNCTION_24
0x400138d	        0x483945f0	            cmp qword [rbp - 0x10], rax 	       771	ldlang.c	FUNCTION_24
0x4001391	      0x480f4645f0	          cmovbe rax, qword [rbp - 0x10]	       771	ldlang.c	FUNCTION_24
0x4001396	        0x488945f8	                mov qword [rbp - 8], rax	       771	ldlang.c	FUNCTION_24
0x400139a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       773	ldlang.c	FUNCTION_24	CALL_3
0x400139e	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013a2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013a6	          0x4889ce	                            mov rsi, rcx	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013a9	          0x4889c7	                            mov rdi, rax	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013ac	      0xe800000000	                          call 0x40013b1	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013b1	            0x85c0	                           test eax, eax	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013b3	           0xf94c0	                                 sete al	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013b6	           0xfb6c0	                           movzx eax, al	       773	ldlang.c	FUNCTION_24	CALL_3
0x40013b9	              0xc9	                                   leave	       774	ldlang.c	FUNCTION_24
0x40013ba	              0xc3	                                     ret	       774	ldlang.c	FUNCTION_24
lang_output_section_get	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	7
0x40024cc	              0x55	                                push rbp	      1416	ldlang.c	FUNCTION_44
0x40024cd	          0x4889e5	                            mov rbp, rsp	      1416	ldlang.c	FUNCTION_44
0x40024d0	        0x48897df8	                mov qword [rbp - 8], rdi	      1416	ldlang.c	FUNCTION_44
0x40024d4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1417	ldlang.c	FUNCTION_44	CALL_1
0x40024d8	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	      1417	ldlang.c	FUNCTION_44	CALL_1
0x40024df	              0x5d	                                 pop rbp	      1418	ldlang.c	FUNCTION_44
0x40024e0	              0xc3	                                     ret	      1418	ldlang.c	FUNCTION_44
lang_do_memory_regions	functions,0:ELSE,2:FOR,1:CALL,6:IF,4:DO,0:WHILE,0:SWITCH,0	67
0x400f40c	              0x55	                                push rbp	      8616	ldlang.c	FUNCTION_202
0x400f40d	          0x4889e5	                            mov rbp, rsp	      8616	ldlang.c	FUNCTION_202
0x400f410	              0x53	                                push rbx	      8616	ldlang.c	FUNCTION_202
0x400f411	        0x4883ec18	                           sub rsp, 0x18	      8616	ldlang.c	FUNCTION_202
0x400f415	    0x488b05000000	            mov rax, qword [0x0400f41c] 	      8617	ldlang.c	FUNCTION_202
0x400f41c	        0x488945e8	             mov qword [rbp - 0x18], rax	      8617	ldlang.c	FUNCTION_202
0x400f420	      0xe9ce000000	                           jmp 0x400f4f3	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f425	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8621	ldlang.c	FUNCTION_202	FOR_1	IF_1
0x400f429	        0x488b4018	            mov rax, qword [rax + 0x18] 	      8621	ldlang.c	FUNCTION_202	FOR_1	IF_1
0x400f42d	          0x4885c0	                           test rax, rax	      8621	ldlang.c	FUNCTION_202	FOR_1	IF_1
0x400f430	            0x745c	                            je 0x400f48e	      8621	ldlang.c	FUNCTION_202	FOR_1	IF_1
0x400f432	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8623	ldlang.c	FUNCTION_202	FOR_1	IF_1	CALL_1
0x400f436	        0x488b4018	            mov rax, qword [rax + 0x18] 	      8623	ldlang.c	FUNCTION_202	FOR_1	IF_1	CALL_1
0x400f43a	          0x4889c7	                            mov rdi, rax	      8623	ldlang.c	FUNCTION_202	FOR_1	IF_1	CALL_1
0x400f43d	      0xe800000000	                          call 0x400f442	      8623	ldlang.c	FUNCTION_202	FOR_1	IF_1	CALL_1
0x400f442	    0x8b0500000000	            mov eax, dword [0x0400f448] 	      8624	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f448	            0x85c0	                           test eax, eax	      8624	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f44a	            0x7421	                            je 0x400f46d	      8624	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f44c	    0x488b15000000	            mov rdx, qword [0x0400f453] 	      8626	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f453	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8626	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f457	        0x48895020	             mov qword [rax + 0x20], rdx	      8626	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f45b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8627	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f45f	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      8627	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f463	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8627	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f467	        0x48895038	             mov qword [rax + 0x38], rdx	      8627	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f46b	            0xeb21	                           jmp 0x400f48e	      8627	ldlang.c	FUNCTION_202	FOR_1	IF_1	IF_2
0x400f46d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f471	          0x488b18	                    mov rbx, qword [rax]	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f474	      0xbf00000000	                              mov edi, 0	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f479	      0xe800000000	                          call 0x400f47e	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f47e	          0x4889de	                            mov rsi, rbx	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f481	          0x4889c7	                            mov rdi, rax	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f484	      0xb800000000	                              mov eax, 0	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f489	      0xe800000000	                          call 0x400f48e	      8630	ldlang.c	FUNCTION_202	FOR_1	IF_1	ELSE_1	CALL_3
0x400f48e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8633	ldlang.c	FUNCTION_202	FOR_1	IF_3
0x400f492	        0x488b4030	            mov rax, qword [rax + 0x30] 	      8633	ldlang.c	FUNCTION_202	FOR_1	IF_3
0x400f496	          0x4885c0	                           test rax, rax	      8633	ldlang.c	FUNCTION_202	FOR_1	IF_3
0x400f499	            0x744c	                            je 0x400f4e7	      8633	ldlang.c	FUNCTION_202	FOR_1	IF_3
0x400f49b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8635	ldlang.c	FUNCTION_202	FOR_1	IF_3	CALL_4
0x400f49f	        0x488b4030	            mov rax, qword [rax + 0x30] 	      8635	ldlang.c	FUNCTION_202	FOR_1	IF_3	CALL_4
0x400f4a3	          0x4889c7	                            mov rdi, rax	      8635	ldlang.c	FUNCTION_202	FOR_1	IF_3	CALL_4
0x400f4a6	      0xe800000000	                          call 0x400f4ab	      8635	ldlang.c	FUNCTION_202	FOR_1	IF_3	CALL_4
0x400f4ab	    0x8b0500000000	            mov eax, dword [0x0400f4b1] 	      8636	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4b1	            0x85c0	                           test eax, eax	      8636	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4b3	            0x7411	                            je 0x400f4c6	      8636	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4b5	    0x488b15000000	            mov rdx, qword [0x0400f4bc] 	      8637	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4bc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8637	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4c0	        0x48895028	             mov qword [rax + 0x28], rdx	      8637	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4c4	            0xeb21	                           jmp 0x400f4e7	      8637	ldlang.c	FUNCTION_202	FOR_1	IF_3	IF_4
0x400f4c6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4ca	          0x488b18	                    mov rbx, qword [rax]	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4cd	      0xbf00000000	                              mov edi, 0	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4d2	      0xe800000000	                          call 0x400f4d7	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4d7	          0x4889de	                            mov rsi, rbx	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4da	          0x4889c7	                            mov rdi, rax	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4dd	      0xb800000000	                              mov eax, 0	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4e2	      0xe800000000	                          call 0x400f4e7	      8639	ldlang.c	FUNCTION_202	FOR_1	IF_3	ELSE_2	CALL_6
0x400f4e7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f4eb	        0x488b4010	            mov rax, qword [rax + 0x10] 	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f4ef	        0x488945e8	             mov qword [rbp - 0x18], rax	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f4f3	      0x48837de800	               cmp qword [rbp - 0x18], 0	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f4f8	     0xf8527ffffff	                           jne 0x400f425	      8619	ldlang.c	FUNCTION_202	FOR_1
0x400f4fe	              0x90	                                     nop	      8643	ldlang.c	FUNCTION_202
0x400f4ff	        0x4883c418	                           add rsp, 0x18	      8643	ldlang.c	FUNCTION_202
0x400f503	              0x5b	                                 pop rbx	      8643	ldlang.c	FUNCTION_202
0x400f504	              0x5d	                                 pop rbp	      8643	ldlang.c	FUNCTION_202
0x400f505	              0xc3	                                     ret	      8643	ldlang.c	FUNCTION_202
print_one_symbol	functions,0:ELSE,0:FOR,1:CALL,3:IF,1:DO,0:WHILE,0:SWITCH,0	49
0x400718f	              0x55	                                push rbp	      4127	ldlang.c	FUNCTION_93
0x4007190	          0x4889e5	                            mov rbp, rsp	      4127	ldlang.c	FUNCTION_93
0x4007193	        0x4883ec20	                           sub rsp, 0x20	      4127	ldlang.c	FUNCTION_93
0x4007197	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4127	ldlang.c	FUNCTION_93
0x400719b	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4127	ldlang.c	FUNCTION_93
0x400719f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4128	ldlang.c	FUNCTION_93
0x40071a3	        0x488945f8	                mov qword [rbp - 8], rax	      4128	ldlang.c	FUNCTION_93
0x40071a7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4130	ldlang.c	FUNCTION_93	IF_1
0x40071ab	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      4130	ldlang.c	FUNCTION_93	IF_1
0x40071af	            0x3c03	                               cmp al, 3	      4130	ldlang.c	FUNCTION_93	IF_1
0x40071b1	            0x740c	                            je 0x40071bf	      4130	ldlang.c	FUNCTION_93	IF_1
0x40071b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4131	ldlang.c	FUNCTION_93	IF_1
0x40071b7	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      4131	ldlang.c	FUNCTION_93	IF_1
0x40071bb	            0x3c04	                               cmp al, 4	      4131	ldlang.c	FUNCTION_93	IF_1
0x40071bd	            0x757c	                           jne 0x400723b	      4131	ldlang.c	FUNCTION_93	IF_1
0x40071bf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4132	ldlang.c	FUNCTION_93	IF_1
0x40071c3	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4132	ldlang.c	FUNCTION_93	IF_1
0x40071c7	        0x483b45f8	                cmp rax, qword [rbp - 8]	      4132	ldlang.c	FUNCTION_93	IF_1
0x40071cb	            0x756e	                           jne 0x400723b	      4132	ldlang.c	FUNCTION_93	IF_1
0x40071cd	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      4136	ldlang.c	FUNCTION_93	IF_1	FOR_1
0x40071d4	            0xeb09	                           jmp 0x40071df	      4136	ldlang.c	FUNCTION_93	IF_1	FOR_1
0x40071d6	      0xe800000000	                          call 0x40071db	      4137	ldlang.c	FUNCTION_93	IF_1	CALL_1
0x40071db	        0x8345f401	                add dword [rbp - 0xc], 1	      4136	ldlang.c	FUNCTION_93	IF_1	FOR_1
0x40071df	        0x837df40f	              cmp dword [rbp - 0xc], 0xf	      4136	ldlang.c	FUNCTION_93	IF_1	FOR_1
0x40071e3	            0x7ef1	                           jle 0x40071d6	      4136	ldlang.c	FUNCTION_93	IF_1	FOR_1
0x40071e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4139	ldlang.c	FUNCTION_93	IF_1
0x40071e9	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4139	ldlang.c	FUNCTION_93	IF_1
0x40071ed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4140	ldlang.c	FUNCTION_93	IF_1
0x40071f1	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4140	ldlang.c	FUNCTION_93	IF_1
0x40071f5	        0x488b4060	            mov rax, qword [rax + 0x60] 	      4140	ldlang.c	FUNCTION_93	IF_1
0x40071f9	          0x4801c2	                            add rdx, rax	      4140	ldlang.c	FUNCTION_93	IF_1
0x40071fc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4141	ldlang.c	FUNCTION_93	IF_1
0x4007200	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4141	ldlang.c	FUNCTION_93	IF_1
0x4007204	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4141	ldlang.c	FUNCTION_93	IF_1
0x4007208	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4141	ldlang.c	FUNCTION_93	IF_1
0x400720c	          0x4801d0	                            add rax, rdx	      4138	ldlang.c	FUNCTION_93	IF_1	CALL_2
0x400720f	          0x4889c6	                            mov rsi, rax	      4138	ldlang.c	FUNCTION_93	IF_1	CALL_2
0x4007212	      0xbf00000000	                              mov edi, 0	      4138	ldlang.c	FUNCTION_93	IF_1	CALL_2
0x4007217	      0xb800000000	                              mov eax, 0	      4138	ldlang.c	FUNCTION_93	IF_1	CALL_2
0x400721c	      0xe800000000	                          call 0x4007221	      4138	ldlang.c	FUNCTION_93	IF_1	CALL_2
0x4007221	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x4007225	        0x488b4008	                mov rax, qword [rax + 8]	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x4007229	          0x4889c6	                            mov rsi, rax	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x400722c	      0xbf00000000	                              mov edi, 0	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x4007231	      0xb800000000	                              mov eax, 0	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x4007236	      0xe800000000	                          call 0x400723b	      4143	ldlang.c	FUNCTION_93	IF_1	CALL_3
0x400723b	      0xb801000000	                              mov eax, 1	      4146	ldlang.c	FUNCTION_93
0x4007240	              0xc9	                                   leave	      4147	ldlang.c	FUNCTION_93
0x4007241	              0xc3	                                     ret	      4147	ldlang.c	FUNCTION_93
lang_add_nocrossref_to	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	12
0x400de74	              0x55	                                push rbp	      7920	ldlang.c	FUNCTION_187
0x400de75	          0x4889e5	                            mov rbp, rsp	      7920	ldlang.c	FUNCTION_187
0x400de78	        0x4883ec10	                           sub rsp, 0x10	      7920	ldlang.c	FUNCTION_187
0x400de7c	        0x48897df8	                mov qword [rbp - 8], rdi	      7920	ldlang.c	FUNCTION_187
0x400de80	        0x488b45f8	                mov rax, qword [rbp - 8]	      7921	ldlang.c	FUNCTION_187	CALL_1
0x400de84	          0x4889c7	                            mov rdi, rax	      7921	ldlang.c	FUNCTION_187	CALL_1
0x400de87	      0xe800000000	                          call 0x400de8c	      7921	ldlang.c	FUNCTION_187	CALL_1
0x400de8c	    0x488b05000000	            mov rax, qword [0x0400de93] 	      7922	ldlang.c	FUNCTION_187
0x400de93	    0xc74010010000	               mov dword [rax + 0x10], 1	      7922	ldlang.c	FUNCTION_187
0x400de9a	              0x90	                                     nop	      7923	ldlang.c	FUNCTION_187
0x400de9b	              0xc9	                                   leave	      7923	ldlang.c	FUNCTION_187
0x400de9c	              0xc3	                                     ret	      7923	ldlang.c	FUNCTION_187
walk_wild_file	functions,0:ELSE,1:FOR,0:CALL,6:IF,3:DO,0:WHILE,1:SWITCH,0	64
0x4001649	              0x55	                                push rbp	       874	ldlang.c	FUNCTION_26
0x400164a	          0x4889e5	                            mov rbp, rsp	       874	ldlang.c	FUNCTION_26
0x400164d	        0x4883ec30	                           sub rsp, 0x30	       874	ldlang.c	FUNCTION_26
0x4001651	        0x48897de8	             mov qword [rbp - 0x18], rdi	       874	ldlang.c	FUNCTION_26
0x4001655	        0x488975e0	             mov qword [rbp - 0x20], rsi	       874	ldlang.c	FUNCTION_26
0x4001659	        0x488955d8	             mov qword [rbp - 0x28], rdx	       874	ldlang.c	FUNCTION_26
0x400165d	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       874	ldlang.c	FUNCTION_26
0x4001661	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001665	        0x488b4040	            mov rax, qword [rax + 0x40] 	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001669	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x400166d	          0x4889d6	                            mov rsi, rdx	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001670	          0x4889c7	                            mov rdi, rax	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001673	      0xe8a5edffff	 call sym.walk_wild_file_in_exclude_list	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001678	            0x85c0	                           test eax, eax	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x400167a	     0xf85ae000000	                           jne 0x400172e	       875	ldlang.c	FUNCTION_26	IF_1	CALL_1
0x4001680	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       878	ldlang.c	FUNCTION_26	IF_2
0x4001684	        0x488b4020	            mov rax, qword [rax + 0x20] 	       878	ldlang.c	FUNCTION_26	IF_2
0x4001688	          0x4885c0	                           test rax, rax	       878	ldlang.c	FUNCTION_26	IF_2
0x400168b	            0x7419	                            je 0x40016a6	       878	ldlang.c	FUNCTION_26	IF_2
0x400168d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x4001691	        0x488b4020	            mov rax, qword [rax + 0x20] 	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x4001695	      0xbe02000000	                              mov esi, 2	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x400169a	          0x4889c7	                            mov rdi, rax	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x400169d	      0xe800000000	                          call 0x40016a2	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x40016a2	            0x85c0	                           test eax, eax	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x40016a4	            0x751a	                           jne 0x40016c0	       879	ldlang.c	FUNCTION_26	IF_2	CALL_2
0x40016a6	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016aa	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016ae	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016b2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016b6	          0x4889c7	                            mov rdi, rax	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016b9	      0xe81dfcffff	              call sym.walk_wild_section	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016be	            0xeb6f	                           jmp 0x400172f	       880	ldlang.c	FUNCTION_26	CALL_3
0x40016c0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016c4	        0x488b4020	            mov rax, qword [rax + 0x20] 	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016c8	      0xbe00000000	                              mov esi, 0	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016cd	          0x4889c7	                            mov rdi, rax	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016d0	      0xe800000000	                          call 0x40016d5	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016d5	        0x488945f8	                mov qword [rbp - 8], rax	       887	ldlang.c	FUNCTION_26	ELSE_1	CALL_4
0x40016d9	            0xeb4a	                           jmp 0x4001725	       888	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1
0x40016db	        0x488b45f8	                mov rax, qword [rbp - 8]	       895	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016df	    0x488b80000100	           mov rax, qword [rax + 0x100] 	       895	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016e6	          0x4885c0	                           test rax, rax	       895	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016e9	            0x741f	                            je 0x400170a	       895	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016eb	        0x488b45f8	                mov rax, qword [rbp - 8]	       898	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016ef	    0x488bb0000100	           mov rsi, qword [rax + 0x100] 	       898	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3
0x40016f6	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       897	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3	CALL_5
0x40016fa	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       897	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3	CALL_5
0x40016fe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       897	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3	CALL_5
0x4001702	          0x4889c7	                            mov rdi, rax	       897	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3	CALL_5
0x4001705	      0xe8d1fbffff	              call sym.walk_wild_section	       897	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	IF_3	CALL_5
0x400170a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x400170e	        0x488b4020	            mov rax, qword [rax + 0x20] 	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x4001712	        0x488b55f8	                mov rdx, qword [rbp - 8]	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x4001716	          0x4889d6	                            mov rsi, rdx	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x4001719	          0x4889c7	                            mov rdi, rax	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x400171c	      0xe800000000	                          call 0x4001721	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x4001721	        0x488945f8	                mov qword [rbp - 8], rax	       902	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1	CALL_6
0x4001725	      0x48837df800	                  cmp qword [rbp - 8], 0	       888	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1
0x400172a	            0x75af	                           jne 0x40016db	       888	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1
0x400172c	            0xeb01	                           jmp 0x400172f	       888	ldlang.c	FUNCTION_26	ELSE_1	WHILE_1
0x400172e	              0x90	                                     nop	       876	ldlang.c	FUNCTION_26	IF_1
0x400172f	              0xc9	                                   leave	       905	ldlang.c	FUNCTION_26
0x4001730	              0xc3	                                     ret	       905	ldlang.c	FUNCTION_26
gc_section_callback	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	21
0x400c420	              0x55	                                push rbp	      6788	ldlang.c	FUNCTION_149
0x400c421	          0x4889e5	                            mov rbp, rsp	      6788	ldlang.c	FUNCTION_149
0x400c424	        0x48897df8	                mov qword [rbp - 8], rdi	      6788	ldlang.c	FUNCTION_149
0x400c428	        0x488975f0	             mov qword [rbp - 0x10], rsi	      6788	ldlang.c	FUNCTION_149
0x400c42c	        0x488955e8	             mov qword [rbp - 0x18], rdx	      6788	ldlang.c	FUNCTION_149
0x400c430	        0x48894de0	             mov qword [rbp - 0x20], rcx	      6788	ldlang.c	FUNCTION_149
0x400c434	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      6788	ldlang.c	FUNCTION_149
0x400c438	        0x4c894dd0	              mov qword [rbp - 0x30], r9	      6788	ldlang.c	FUNCTION_149
0x400c43c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6791	ldlang.c	FUNCTION_149	IF_1
0x400c440	          0x8b4028	            mov eax, dword [rax + 0x28] 	      6791	ldlang.c	FUNCTION_149	IF_1
0x400c443	            0x85c0	                           test eax, eax	      6791	ldlang.c	FUNCTION_149	IF_1
0x400c445	            0x7415	                            je 0x400c45c	      6791	ldlang.c	FUNCTION_149	IF_1
0x400c447	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c44b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c44e	       0xd00002000	                        or eax, 0x200000	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c453	            0x89c2	                            mov edx, eax	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c455	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c459	          0x895020	             mov dword [rax + 0x20], edx	      6792	ldlang.c	FUNCTION_149	IF_1
0x400c45c	              0x90	                                     nop	      6793	ldlang.c	FUNCTION_149
0x400c45d	              0x5d	                                 pop rbp	      6793	ldlang.c	FUNCTION_149
0x400c45e	              0xc3	                                     ret	      6793	ldlang.c	FUNCTION_149
lang_add_nocrossref	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	23
0x400de17	              0x55	                                push rbp	      7903	ldlang.c	FUNCTION_186
0x400de18	          0x4889e5	                            mov rbp, rsp	      7903	ldlang.c	FUNCTION_186
0x400de1b	        0x4883ec20	                           sub rsp, 0x20	      7903	ldlang.c	FUNCTION_186
0x400de1f	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7903	ldlang.c	FUNCTION_186
0x400de23	      0xbf18000000	                           mov edi, 0x18	      7906	ldlang.c	FUNCTION_186	CALL_1
0x400de28	      0xe800000000	                          call 0x400de2d	      7906	ldlang.c	FUNCTION_186	CALL_1
0x400de2d	        0x488945f8	                mov qword [rbp - 8], rax	      7906	ldlang.c	FUNCTION_186	CALL_1
0x400de31	    0x488b15000000	            mov rdx, qword [0x0400de38] 	      7907	ldlang.c	FUNCTION_186
0x400de38	        0x488b45f8	                mov rax, qword [rbp - 8]	      7907	ldlang.c	FUNCTION_186
0x400de3c	          0x488910	                    mov qword [rax], rdx	      7907	ldlang.c	FUNCTION_186
0x400de3f	        0x488b45f8	                mov rax, qword [rbp - 8]	      7908	ldlang.c	FUNCTION_186
0x400de43	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7908	ldlang.c	FUNCTION_186
0x400de47	        0x48895008	                mov qword [rax + 8], rdx	      7908	ldlang.c	FUNCTION_186
0x400de4b	        0x488b45f8	                mov rax, qword [rbp - 8]	      7909	ldlang.c	FUNCTION_186
0x400de4f	    0xc74010000000	               mov dword [rax + 0x10], 0	      7909	ldlang.c	FUNCTION_186
0x400de56	        0x488b45f8	                mov rax, qword [rbp - 8]	      7910	ldlang.c	FUNCTION_186
0x400de5a	    0x488905000000	            mov qword [0x0400de61], rax 	      7910	ldlang.c	FUNCTION_186
0x400de61	     0xfb605000000	           movzx eax, byte [0x0400de68] 	      7913	ldlang.c	FUNCTION_186
0x400de68	          0x83c801	                               or eax, 1	      7913	ldlang.c	FUNCTION_186
0x400de6b	    0x880500000000	               mov byte [0x0400de71], al	      7913	ldlang.c	FUNCTION_186
0x400de71	              0x90	                                     nop	      7914	ldlang.c	FUNCTION_186
0x400de72	              0xc9	                                   leave	      7914	ldlang.c	FUNCTION_186
0x400de73	              0xc3	                                     ret	      7914	ldlang.c	FUNCTION_186
set_start_stop	functions,0:ELSE,1:FOR,0:CALL,0:IF,4:DO,0:WHILE,0:SWITCH,0	67
0x400b188	              0x55	                                push rbp	      6132	ldlang.c	FUNCTION_131
0x400b189	          0x4889e5	                            mov rbp, rsp	      6132	ldlang.c	FUNCTION_131
0x400b18c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6132	ldlang.c	FUNCTION_131
0x400b190	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6133	ldlang.c	FUNCTION_131	IF_1
0x400b194	         0xfb64019	           movzx eax, byte [rax + 0x19] 	      6133	ldlang.c	FUNCTION_131	IF_1
0x400b198	          0x83e008	                              and eax, 8	      6133	ldlang.c	FUNCTION_131	IF_1
0x400b19b	            0x84c0	                             test al, al	      6133	ldlang.c	FUNCTION_131	IF_1
0x400b19d	     0xf85cc000000	                           jne 0x400b26f	      6133	ldlang.c	FUNCTION_131	IF_1
0x400b1a3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6134	ldlang.c	FUNCTION_131	IF_1
0x400b1a7	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      6134	ldlang.c	FUNCTION_131	IF_1
0x400b1ab	            0x3c03	                               cmp al, 3	      6134	ldlang.c	FUNCTION_131	IF_1
0x400b1ad	     0xf85bc000000	                           jne 0x400b26f	      6134	ldlang.c	FUNCTION_131	IF_1
0x400b1b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6137	ldlang.c	FUNCTION_131	IF_2
0x400b1b7	        0x488b4008	                mov rax, qword [rax + 8]	      6137	ldlang.c	FUNCTION_131	IF_2
0x400b1bb	           0xfb600	                   movzx eax, byte [rax]	      6137	ldlang.c	FUNCTION_131	IF_2
0x400b1be	            0x3c2e	                            cmp al, 0x2e	      6137	ldlang.c	FUNCTION_131	IF_2
0x400b1c0	            0x7544	                           jne 0x400b206	      6137	ldlang.c	FUNCTION_131	IF_2
0x400b1c2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1c6	        0x488b4008	                mov rax, qword [rax + 8]	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1ca	        0x4883c002	                              add rax, 2	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1ce	           0xfb600	                   movzx eax, byte [rax]	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1d1	            0x3c69	                            cmp al, 0x69	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1d3	     0xf8597000000	                           jne 0x400b270	      6141	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1d9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1dd	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1e1	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1e5	    0x8b0500000000	            mov eax, dword [0x0400b1eb] 	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1eb	            0x89c1	                            mov ecx, eax	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1ed	          0x48d3ea	                             shr rdx, cl	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1f4	        0x48895030	             mov qword [rax + 0x30], rdx	      6144	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6145	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b1fc	    0x48c740280000	               mov qword [rax + 0x28], 0	      6145	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b204	            0xeb6a	                           jmp 0x400b270	      6145	ldlang.c	FUNCTION_131	IF_2	IF_3
0x400b206	    0x488b05000000	            mov rax, qword [0x0400b20d] 	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b20d	        0x488b4008	                mov rax, qword [rax + 8]	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b211	         0xfb6401c	           movzx eax, byte [rax + 0x1c] 	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b215	            0x84c0	                             test al, al	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b217	           0xf95c0	                                setne al	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b21a	           0xfb6c0	                           movzx eax, al	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b21d	          0x8945fc	                mov dword [rbp - 4], eax	      6151	ldlang.c	FUNCTION_131	ELSE_1
0x400b220	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6153	ldlang.c	FUNCTION_131	ELSE_1
0x400b224	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6153	ldlang.c	FUNCTION_131	ELSE_1
0x400b228	        0x488b5068	            mov rdx, qword [rax + 0x68] 	      6153	ldlang.c	FUNCTION_131	ELSE_1
0x400b22c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6153	ldlang.c	FUNCTION_131	ELSE_1
0x400b230	        0x48895028	             mov qword [rax + 0x28], rdx	      6153	ldlang.c	FUNCTION_131	ELSE_1
0x400b234	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b238	        0x488b5008	                mov rdx, qword [rax + 8]	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b23c	          0x8b45fc	                mov eax, dword [rbp - 4]	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b23f	          0x83c004	                              add eax, 4	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b242	            0x4898	                                    cdqe	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b244	          0x4801d0	                            add rax, rdx	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b247	           0xfb600	                   movzx eax, byte [rax]	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b24a	            0x3c6f	                            cmp al, 0x6f	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b24c	            0x7522	                           jne 0x400b270	      6154	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b24e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b252	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b256	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b25a	    0x8b0500000000	            mov eax, dword [0x0400b260] 	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b260	            0x89c1	                            mov ecx, eax	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b262	          0x48d3ea	                             shr rdx, cl	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b265	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b269	        0x48895030	             mov qword [rax + 0x30], rdx	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b26d	            0xeb01	                           jmp 0x400b270	      6157	ldlang.c	FUNCTION_131	ELSE_1	IF_4
0x400b26f	              0x90	                                     nop	      6135	ldlang.c	FUNCTION_131	IF_1
0x400b270	              0x5d	                                 pop rbp	      6160	ldlang.c	FUNCTION_131
0x400b271	              0xc3	                                     ret	      6160	ldlang.c	FUNCTION_131
archive_path	functions,0:ELSE,0:FOR,0:CALL,3:IF,3:DO,0:WHILE,0:SWITCH,0	20
0x400020a	              0x55	                                push rbp	       156	ldlang.c	FUNCTION_3
0x400020b	          0x4889e5	                            mov rbp, rsp	       156	ldlang.c	FUNCTION_3
0x400020e	        0x4883ec20	                           sub rsp, 0x20	       156	ldlang.c	FUNCTION_3
0x4000212	        0x48897de8	             mov qword [rbp - 0x18], rdi	       156	ldlang.c	FUNCTION_3
0x4000216	    0x48c745f80000	                  mov qword [rbp - 8], 0	       157	ldlang.c	FUNCTION_3
0x400021e	     0xfb605000000	           movzx eax, byte [0x04000225] 	       159	ldlang.c	FUNCTION_3	IF_1
0x4000225	            0x84c0	                             test al, al	       159	ldlang.c	FUNCTION_3	IF_1
0x4000227	            0x7506	                           jne 0x400022f	       159	ldlang.c	FUNCTION_3	IF_1
0x4000229	        0x488b45f8	                mov rax, qword [rbp - 8]	       160	ldlang.c	FUNCTION_3	IF_1
0x400022d	            0xeb20	                           jmp 0x400024f	       160	ldlang.c	FUNCTION_3	IF_1
0x400022f	     0xfb605000000	           movzx eax, byte [0x04000236] 	       162	ldlang.c	FUNCTION_3	CALL_1
0x4000236	           0xfbed0	                           movsx edx, al	       162	ldlang.c	FUNCTION_3	CALL_1
0x4000239	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       162	ldlang.c	FUNCTION_3	CALL_1
0x400023d	            0x89d6	                            mov esi, edx	       162	ldlang.c	FUNCTION_3	CALL_1
0x400023f	          0x4889c7	                            mov rdi, rax	       162	ldlang.c	FUNCTION_3	CALL_1
0x4000242	      0xe800000000	                          call 0x4000247	       162	ldlang.c	FUNCTION_3	CALL_1
0x4000247	        0x488945f8	                mov qword [rbp - 8], rax	       162	ldlang.c	FUNCTION_3	CALL_1
0x400024b	        0x488b45f8	                mov rax, qword [rbp - 8]	       172	ldlang.c	FUNCTION_3
0x400024f	              0xc9	                                   leave	       173	ldlang.c	FUNCTION_3
0x4000250	              0xc3	                                     ret	       173	ldlang.c	FUNCTION_3
lang_gc_sections	functions,1:ELSE,0:FOR,0:CALL,2:IF,2:DO,0:WHILE,0:SWITCH,0	60
0x400c4f5	              0x55	                                push rbp	      6824	ldlang.c	FUNCTION_151
0x400c4f6	          0x4889e5	                            mov rbp, rsp	      6824	ldlang.c	FUNCTION_151
0x400c4f9	        0x4883ec10	                           sub rsp, 0x10	      6824	ldlang.c	FUNCTION_151
0x400c4fd	    0x488b05000000	            mov rax, qword [0x0400c504] 	      6826	ldlang.c	FUNCTION_151	CALL_1
0x400c504	          0x4889c7	                            mov rdi, rax	      6826	ldlang.c	FUNCTION_151	CALL_1
0x400c507	      0xe853ffffff	             call sym.lang_gc_sections_1	      6826	ldlang.c	FUNCTION_151	CALL_1
0x400c50c	     0xfb605000000	           movzx eax, byte [0x0400c513] 	      6831	ldlang.c	FUNCTION_151	IF_1	CALL_2
0x400c513	          0x83e003	                              and eax, 3	      6831	ldlang.c	FUNCTION_151	IF_1	CALL_2
0x400c516	            0x3c02	                               cmp al, 2	      6831	ldlang.c	FUNCTION_151	IF_1	CALL_2
0x400c518	            0x757d	                           jne 0x400c597	      6831	ldlang.c	FUNCTION_151	IF_1	CALL_2
0x400c51a	    0x488b05000000	            mov rax, qword [0x0400c521] 	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c521	        0x488945f0	             mov qword [rbp - 0x10], rax	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c525	            0xeb69	                           jmp 0x400c590	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c527	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6837	ldlang.c	FUNCTION_151	IF_1	FUNCTION_1
0x400c52b	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      6837	ldlang.c	FUNCTION_151	IF_1	FUNCTION_1
0x400c52f	          0x83e020	                           and eax, 0x20	      6837	ldlang.c	FUNCTION_151	IF_1	FUNCTION_1
0x400c532	            0x84c0	                             test al, al	      6837	ldlang.c	FUNCTION_151	IF_1	FUNCTION_1
0x400c534	            0x754d	                           jne 0x400c583	      6837	ldlang.c	FUNCTION_151	IF_1	FUNCTION_1
0x400c536	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c53a	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c53e	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c545	        0x488945f8	                mov qword [rbp - 8], rax	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c549	            0xeb2f	                           jmp 0x400c57a	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c54b	        0x488b45f8	                mov rax, qword [rbp - 8]	      6841	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c54f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6841	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c552	      0x2500200000	                         and eax, 0x2000	      6841	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c557	            0x85c0	                           test eax, eax	      6841	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c559	            0x7513	                           jne 0x400c56e	      6841	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c55b	        0x488b45f8	                mov rax, qword [rbp - 8]	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c55f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c562	          0x80e47f	                            and ah, 0x7f	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c565	            0x89c2	                            mov edx, eax	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c567	        0x488b45f8	                mov rax, qword [rbp - 8]	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c56b	          0x895020	             mov dword [rax + 0x20], edx	      6842	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1	IF_2
0x400c56e	        0x488b45f8	                mov rax, qword [rbp - 8]	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c572	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c576	        0x488945f8	                mov qword [rbp - 8], rax	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c57a	      0x48837df800	                  cmp qword [rbp - 8], 0	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c57f	            0x75ca	                           jne 0x400c54b	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c581	            0xeb01	                           jmp 0x400c584	      6840	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1	FOR_1
0x400c583	              0x90	                                     nop	      6838	ldlang.c	FUNCTION_151	FUNCTION_1	IF_1
0x400c584	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c588	        0x488b4030	            mov rax, qword [rax + 0x30] 	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c58c	        0x488945f0	             mov qword [rbp - 0x10], rax	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c590	      0x48837df000	               cmp qword [rbp - 0x10], 0	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c595	            0x7590	                           jne 0x400c527	      6833	ldlang.c	FUNCTION_151	IF_1
0x400c597	     0xfb605000000	           movzx eax, byte [0x0400c59e] 	      6846	ldlang.c	FUNCTION_151	IF_2
0x400c59e	          0x83e040	                           and eax, 0x40	      6846	ldlang.c	FUNCTION_151	IF_2
0x400c5a1	            0x84c0	                             test al, al	      6846	ldlang.c	FUNCTION_151	IF_2
0x400c5a3	            0x7423	                            je 0x400c5c8	      6846	ldlang.c	FUNCTION_151	IF_2
0x400c5a5	    0x488b05000000	            mov rax, qword [0x0400c5ac] 	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5ac	        0x488b4008	                mov rax, qword [rax + 8]	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5b0	    0x488b80f00200	           mov rax, qword [rax + 0x2f0] 	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5b7	    0x488b15000000	            mov rdx, qword [0x0400c5be] 	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5be	      0xbe00000000	                              mov esi, 0	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5c3	          0x4889d7	                            mov rdi, rdx	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5c6	            0xffd0	                                call rax	      6847	ldlang.c	FUNCTION_151	IF_2
0x400c5c8	              0x90	                                     nop	      6848	ldlang.c	FUNCTION_151
0x400c5c9	              0xc9	                                   leave	      6848	ldlang.c	FUNCTION_151
0x400c5ca	              0xc3	                                     ret	      6848	ldlang.c	FUNCTION_151
match_simple_wild	functions,0:ELSE,0:FOR,0:CALL,0:IF,2:DO,0:WHILE,1:SWITCH,0	58
0x4000794	              0x55	                                push rbp	       371	ldlang.c	FUNCTION_12
0x4000795	          0x4889e5	                            mov rbp, rsp	       371	ldlang.c	FUNCTION_12
0x4000798	        0x48897df8	                mov qword [rbp - 8], rdi	       371	ldlang.c	FUNCTION_12
0x400079c	        0x488975f0	             mov qword [rbp - 0x10], rsi	       371	ldlang.c	FUNCTION_12
0x40007a0	        0x488b45f8	                mov rax, qword [rbp - 8]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007a4	           0xfb610	                   movzx edx, byte [rax]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007a7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007ab	           0xfb600	                   movzx eax, byte [rax]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007ae	            0x38c2	                              cmp dl, al	       374	ldlang.c	FUNCTION_12	IF_1
0x40007b0	            0x754e	                           jne 0x4000800	       374	ldlang.c	FUNCTION_12	IF_1
0x40007b2	        0x488b45f8	                mov rax, qword [rbp - 8]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007b6	        0x4883c001	                              add rax, 1	       374	ldlang.c	FUNCTION_12	IF_1
0x40007ba	           0xfb610	                   movzx edx, byte [rax]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007bd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007c1	        0x4883c001	                              add rax, 1	       374	ldlang.c	FUNCTION_12	IF_1
0x40007c5	           0xfb600	                   movzx eax, byte [rax]	       374	ldlang.c	FUNCTION_12	IF_1
0x40007c8	            0x38c2	                              cmp dl, al	       374	ldlang.c	FUNCTION_12	IF_1
0x40007ca	            0x7534	                           jne 0x4000800	       374	ldlang.c	FUNCTION_12	IF_1
0x40007cc	        0x488b45f8	                mov rax, qword [rbp - 8]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007d0	        0x4883c002	                              add rax, 2	       375	ldlang.c	FUNCTION_12	IF_1
0x40007d4	           0xfb610	                   movzx edx, byte [rax]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007d7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007db	        0x4883c002	                              add rax, 2	       375	ldlang.c	FUNCTION_12	IF_1
0x40007df	           0xfb600	                   movzx eax, byte [rax]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007e2	            0x38c2	                              cmp dl, al	       375	ldlang.c	FUNCTION_12	IF_1
0x40007e4	            0x751a	                           jne 0x4000800	       375	ldlang.c	FUNCTION_12	IF_1
0x40007e6	        0x488b45f8	                mov rax, qword [rbp - 8]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007ea	        0x4883c003	                              add rax, 3	       375	ldlang.c	FUNCTION_12	IF_1
0x40007ee	           0xfb610	                   movzx edx, byte [rax]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007f1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007f5	        0x4883c003	                              add rax, 3	       375	ldlang.c	FUNCTION_12	IF_1
0x40007f9	           0xfb600	                   movzx eax, byte [rax]	       375	ldlang.c	FUNCTION_12	IF_1
0x40007fc	            0x38c2	                              cmp dl, al	       375	ldlang.c	FUNCTION_12	IF_1
0x40007fe	            0x7407	                            je 0x4000807	       375	ldlang.c	FUNCTION_12	IF_1
0x4000800	      0xb800000000	                              mov eax, 0	       376	ldlang.c	FUNCTION_12	IF_1
0x4000805	            0xeb45	                           jmp 0x400084c	       376	ldlang.c	FUNCTION_12	IF_1
0x4000807	      0x488345f804	                  add qword [rbp - 8], 4	       378	ldlang.c	FUNCTION_12
0x400080c	      0x488345f004	               add qword [rbp - 0x10], 4	       379	ldlang.c	FUNCTION_12
0x4000811	            0xeb29	                           jmp 0x400083c	       380	ldlang.c	FUNCTION_12	WHILE_1
0x4000813	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000817	        0x488d5001	                      lea rdx, [rax + 1]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400081b	        0x488955f0	             mov qword [rbp - 0x10], rdx	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400081f	           0xfb608	                   movzx ecx, byte [rax]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000822	        0x488b45f8	                mov rax, qword [rbp - 8]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000826	        0x488d5001	                      lea rdx, [rax + 1]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400082a	        0x488955f8	                mov qword [rbp - 8], rdx	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400082e	           0xfb600	                   movzx eax, byte [rax]	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000831	            0x38c1	                              cmp cl, al	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000833	            0x7407	                            je 0x400083c	       381	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x4000835	      0xb800000000	                              mov eax, 0	       382	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400083a	            0xeb10	                           jmp 0x400084c	       382	ldlang.c	FUNCTION_12	WHILE_1	IF_2
0x400083c	        0x488b45f8	                mov rax, qword [rbp - 8]	       380	ldlang.c	FUNCTION_12	WHILE_1
0x4000840	           0xfb600	                   movzx eax, byte [rax]	       380	ldlang.c	FUNCTION_12	WHILE_1
0x4000843	            0x3c2a	                            cmp al, 0x2a	       380	ldlang.c	FUNCTION_12	WHILE_1
0x4000845	            0x75cc	                           jne 0x4000813	       380	ldlang.c	FUNCTION_12	WHILE_1
0x4000847	      0xb801000000	                              mov eax, 1	       384	ldlang.c	FUNCTION_12
0x400084c	              0x5d	                                 pop rbp	       385	ldlang.c	FUNCTION_12
0x400084d	              0xc3	                                     ret	       385	ldlang.c	FUNCTION_12
sort_def_symbol	functions,0:ELSE,1:FOR,0:CALL,4:IF,3:DO,0:WHILE,0:SWITCH,0	148
0x4003ad5	              0x55	                                push rbp	      2131	ldlang.c	FUNCTION_54
0x4003ad6	          0x4889e5	                            mov rbp, rsp	      2131	ldlang.c	FUNCTION_54
0x4003ad9	        0x4883ec50	                           sub rsp, 0x50	      2131	ldlang.c	FUNCTION_54
0x4003add	        0x48897db8	             mov qword [rbp - 0x48], rdi	      2131	ldlang.c	FUNCTION_54
0x4003ae1	        0x488975b0	             mov qword [rbp - 0x50], rsi	      2131	ldlang.c	FUNCTION_54
0x4003ae5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2132	ldlang.c	FUNCTION_54	IF_1
0x4003ae9	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      2132	ldlang.c	FUNCTION_54	IF_1
0x4003aed	            0x3c03	                               cmp al, 3	      2132	ldlang.c	FUNCTION_54	IF_1
0x4003aef	            0x7410	                            je 0x4003b01	      2132	ldlang.c	FUNCTION_54	IF_1
0x4003af1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2133	ldlang.c	FUNCTION_54	IF_1
0x4003af5	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      2133	ldlang.c	FUNCTION_54	IF_1
0x4003af9	            0x3c04	                               cmp al, 4	      2133	ldlang.c	FUNCTION_54	IF_1
0x4003afb	     0xf850d020000	                           jne 0x4003d0e	      2133	ldlang.c	FUNCTION_54	IF_1
0x4003b01	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b05	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b09	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b10	    0x488b05000000	            mov rax, qword [0x04003b17] 	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b17	          0x4839c2	                            cmp rdx, rax	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b1a	     0xf84ee010000	                            je 0x4003d0e	      2134	ldlang.c	FUNCTION_54	IF_1
0x4003b20	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2135	ldlang.c	FUNCTION_54	IF_1
0x4003b24	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2135	ldlang.c	FUNCTION_54	IF_1
0x4003b28	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2135	ldlang.c	FUNCTION_54	IF_1
0x4003b2f	          0x4885c0	                           test rax, rax	      2135	ldlang.c	FUNCTION_54	IF_1
0x4003b32	     0xf84d6010000	                            je 0x4003d0e	      2135	ldlang.c	FUNCTION_54	IF_1
0x4003b38	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2141	ldlang.c	FUNCTION_54	IF_1	CALL_1
0x4003b3c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2141	ldlang.c	FUNCTION_54	IF_1	CALL_1
0x4003b40	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	      2140	ldlang.c	FUNCTION_54	IF_1
0x4003b47	        0x488945c0	             mov qword [rbp - 0x40], rax	      2140	ldlang.c	FUNCTION_54	IF_1
0x4003b4b	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2142	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b50	            0x753b	                           jne 0x4003b8d	      2142	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b52	      0xbf18000000	                           mov edi, 0x18	      2144	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_2
0x4003b57	      0xe800000000	                          call 0x4003b5c	      2144	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_2
0x4003b5c	        0x488945c0	             mov qword [rbp - 0x40], rax	      2144	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_2
0x4003b60	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2145	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_3
0x4003b64	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2145	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_3
0x4003b68	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2145	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_3
0x4003b6c	    0x488990a80000	             mov qword [rax + 0xa8], rdx	      2145	ldlang.c	FUNCTION_54	IF_1	IF_2	CALL_3
0x4003b73	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2146	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b77	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2146	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b7b	        0x48895008	                mov qword [rax + 8], rdx	      2146	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b7f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2147	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b83	    0x48c740100000	               mov qword [rax + 0x10], 0	      2147	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b8b	            0xeb19	                           jmp 0x4003ba6	      2147	ldlang.c	FUNCTION_54	IF_1	IF_2
0x4003b8d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2149	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003b91	        0x488b4008	                mov rax, qword [rax + 8]	      2149	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003b95	          0x4885c0	                           test rax, rax	      2149	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003b98	            0x750c	                           jne 0x4003ba6	      2149	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003b9a	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2150	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003b9e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2150	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003ba2	        0x48895008	                mov qword [rax + 8], rdx	      2150	ldlang.c	FUNCTION_54	IF_1	ELSE_1	IF_3
0x4003ba6	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bb2	        0x488945d0	             mov qword [rbp - 0x30], rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bb6	    0x48c745d81000	           mov qword [rbp - 0x28], 0x10 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bbe	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bc2	        0x488945e0	             mov qword [rbp - 0x20], rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bc6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bca	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bce	          0x4889c2	                            mov rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bd1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bd5	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bd9	          0x4829c2	                            sub rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bdc	          0x4889d0	                            mov rax, rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bdf	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003be3	            0x7313	                           jae 0x4003bf8	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003be5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003be9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bed	          0x4889d6	                            mov rsi, rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bf0	          0x4889c7	                            mov rdi, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bf3	      0xe800000000	                          call 0x4003bf8	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bf8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003bfc	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c00	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c04	          0x4801c2	                            add rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c07	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c0b	        0x48895018	             mov qword [rax + 0x18], rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c0f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c13	        0x488945e8	             mov qword [rbp - 0x18], rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c17	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c1b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c1f	        0x488945f0	             mov qword [rbp - 0x10], rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c23	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c27	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c2b	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c2f	            0x750e	                           jne 0x4003c3f	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c31	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c35	         0xfb65050	           movzx edx, byte [rax + 0x50] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c39	          0x83ca02	                               or edx, 2	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c3c	          0x885050	               mov byte [rax + 0x50], dl	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c3f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c43	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c47	          0x4889c2	                            mov rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c4a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c4e	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c52	          0x4801c2	                            add rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c55	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c59	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c5d	          0x48f7d0	                                 not rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c60	          0x4821d0	                            and rax, rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c63	          0x4889c2	                            mov rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c66	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c6a	        0x48895018	             mov qword [rax + 0x18], rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c6e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c72	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c76	          0x4889c2	                            mov rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c79	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c7d	        0x488b4008	                mov rax, qword [rax + 8]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c81	          0x4829c2	                            sub rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c84	          0x4889d0	                            mov rax, rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c87	          0x4889c2	                            mov rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c8e	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c92	          0x4889c1	                            mov rcx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c95	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c99	        0x488b4008	                mov rax, qword [rax + 8]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003c9d	          0x4829c1	                            sub rcx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003ca0	          0x4889c8	                            mov rax, rcx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003ca3	          0x4839c2	                            cmp rdx, rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003ca6	            0x7610	                           jbe 0x4003cb8	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003ca8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cac	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cb0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cb4	        0x48895018	             mov qword [rax + 0x18], rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cb8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cbc	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cc0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cc4	        0x48895010	             mov qword [rax + 0x10], rdx	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cc8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003ccc	        0x488945f8	                mov qword [rbp - 8], rax	      2152	ldlang.c	FUNCTION_54	IF_1	CALL_4
0x4003cd0	        0x488b45f8	                mov rax, qword [rbp - 8]	      2153	ldlang.c	FUNCTION_54	IF_1
0x4003cd4	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2153	ldlang.c	FUNCTION_54	IF_1
0x4003cd8	          0x488910	                    mov qword [rax], rdx	      2153	ldlang.c	FUNCTION_54	IF_1
0x4003cdb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2154	ldlang.c	FUNCTION_54	IF_1
0x4003cdf	        0x488b4008	                mov rax, qword [rax + 8]	      2154	ldlang.c	FUNCTION_54	IF_1
0x4003ce3	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2154	ldlang.c	FUNCTION_54	IF_1
0x4003ce7	          0x488910	                    mov qword [rax], rdx	      2154	ldlang.c	FUNCTION_54	IF_1
0x4003cea	        0x488b45f8	                mov rax, qword [rbp - 8]	      2155	ldlang.c	FUNCTION_54	IF_1
0x4003cee	        0x488d5008	                      lea rdx, [rax + 8]	      2155	ldlang.c	FUNCTION_54	IF_1
0x4003cf2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2155	ldlang.c	FUNCTION_54	IF_1
0x4003cf6	        0x48895008	                mov qword [rax + 8], rdx	      2155	ldlang.c	FUNCTION_54	IF_1
0x4003cfa	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2156	ldlang.c	FUNCTION_54	IF_1
0x4003cfe	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2156	ldlang.c	FUNCTION_54	IF_1
0x4003d02	        0x488d5001	                      lea rdx, [rax + 1]	      2156	ldlang.c	FUNCTION_54	IF_1
0x4003d06	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2156	ldlang.c	FUNCTION_54	IF_1
0x4003d0a	        0x48895010	             mov qword [rax + 0x10], rdx	      2156	ldlang.c	FUNCTION_54	IF_1
0x4003d0e	      0xb801000000	                              mov eax, 1	      2158	ldlang.c	FUNCTION_54
0x4003d13	              0xc9	                                   leave	      2159	ldlang.c	FUNCTION_54
0x4003d14	              0xc3	                                     ret	      2159	ldlang.c	FUNCTION_54
name_compare	functions,0:ELSE,0:FOR,1:CALL,12:IF,1:DO,0:WHILE,0:SWITCH,0	83
0x40052e8	              0x55	                                push rbp	      2977	ldlang.c	FUNCTION_71
0x40052e9	          0x4889e5	                            mov rbp, rsp	      2977	ldlang.c	FUNCTION_71
0x40052ec	        0x4883ec30	                           sub rsp, 0x30	      2977	ldlang.c	FUNCTION_71
0x40052f0	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      2977	ldlang.c	FUNCTION_71
0x40052f4	        0x488975d0	             mov qword [rbp - 0x30], rsi	      2977	ldlang.c	FUNCTION_71
0x40052f8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2982	ldlang.c	FUNCTION_71	CALL_2
0x40052fc	          0x4889c7	                            mov rdi, rax	      2982	ldlang.c	FUNCTION_71	CALL_2
0x40052ff	      0xe800000000	                          call 0x4005304	      2982	ldlang.c	FUNCTION_71	CALL_2
0x4005304	        0x4883c001	                              add rax, 1	      2982	ldlang.c	FUNCTION_71	CALL_2
0x4005308	          0x4889c7	                            mov rdi, rax	      2982	ldlang.c	FUNCTION_71	CALL_2
0x400530b	      0xe800000000	                          call 0x4005310	      2982	ldlang.c	FUNCTION_71	CALL_2
0x4005310	        0x488945f0	             mov qword [rbp - 0x10], rax	      2982	ldlang.c	FUNCTION_71	CALL_2
0x4005314	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2983	ldlang.c	FUNCTION_71	CALL_4
0x4005318	          0x4889c7	                            mov rdi, rax	      2983	ldlang.c	FUNCTION_71	CALL_4
0x400531b	      0xe800000000	                          call 0x4005320	      2983	ldlang.c	FUNCTION_71	CALL_4
0x4005320	        0x4883c001	                              add rax, 1	      2983	ldlang.c	FUNCTION_71	CALL_4
0x4005324	          0x4889c7	                            mov rdi, rax	      2983	ldlang.c	FUNCTION_71	CALL_4
0x4005327	      0xe800000000	                          call 0x400532c	      2983	ldlang.c	FUNCTION_71	CALL_4
0x400532c	        0x488945f8	                mov qword [rbp - 8], rax	      2983	ldlang.c	FUNCTION_71	CALL_4
0x4005330	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2986	ldlang.c	FUNCTION_71	CALL_5
0x4005334	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2986	ldlang.c	FUNCTION_71	CALL_5
0x4005338	          0x4889d6	                            mov rsi, rdx	      2986	ldlang.c	FUNCTION_71	CALL_5
0x400533b	          0x4889c7	                            mov rdi, rax	      2986	ldlang.c	FUNCTION_71	CALL_5
0x400533e	      0xe8dafeffff	                        call sym.stricpy	      2986	ldlang.c	FUNCTION_71	CALL_5
0x4005343	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2987	ldlang.c	FUNCTION_71	CALL_6
0x4005347	        0x488b45f8	                mov rax, qword [rbp - 8]	      2987	ldlang.c	FUNCTION_71	CALL_6
0x400534b	          0x4889d6	                            mov rsi, rdx	      2987	ldlang.c	FUNCTION_71	CALL_6
0x400534e	          0x4889c7	                            mov rdi, rax	      2987	ldlang.c	FUNCTION_71	CALL_6
0x4005351	      0xe8c7feffff	                        call sym.stricpy	      2987	ldlang.c	FUNCTION_71	CALL_6
0x4005356	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2990	ldlang.c	FUNCTION_71	CALL_7
0x400535a	      0xbe00000000	                              mov esi, 0	      2990	ldlang.c	FUNCTION_71	CALL_7
0x400535f	          0x4889c7	                            mov rdi, rax	      2990	ldlang.c	FUNCTION_71	CALL_7
0x4005362	      0xe805ffffff	                         call sym.strcut	      2990	ldlang.c	FUNCTION_71	CALL_7
0x4005367	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2991	ldlang.c	FUNCTION_71	CALL_8
0x400536b	      0xbe00000000	                              mov esi, 0	      2991	ldlang.c	FUNCTION_71	CALL_8
0x4005370	          0x4889c7	                            mov rdi, rax	      2991	ldlang.c	FUNCTION_71	CALL_8
0x4005373	      0xe8f4feffff	                         call sym.strcut	      2991	ldlang.c	FUNCTION_71	CALL_8
0x4005378	        0x488b45f8	                mov rax, qword [rbp - 8]	      2992	ldlang.c	FUNCTION_71	CALL_9
0x400537c	      0xbe00000000	                              mov esi, 0	      2992	ldlang.c	FUNCTION_71	CALL_9
0x4005381	          0x4889c7	                            mov rdi, rax	      2992	ldlang.c	FUNCTION_71	CALL_9
0x4005384	      0xe8e3feffff	                         call sym.strcut	      2992	ldlang.c	FUNCTION_71	CALL_9
0x4005389	        0x488b45f8	                mov rax, qword [rbp - 8]	      2993	ldlang.c	FUNCTION_71	CALL_10
0x400538d	      0xbe00000000	                              mov esi, 0	      2993	ldlang.c	FUNCTION_71	CALL_10
0x4005392	          0x4889c7	                            mov rdi, rax	      2993	ldlang.c	FUNCTION_71	CALL_10
0x4005395	      0xe8d2feffff	                         call sym.strcut	      2993	ldlang.c	FUNCTION_71	CALL_10
0x400539a	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053a1	            0xeb29	                           jmp 0x40053cc	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053a3	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053a6	          0x4863d0	                         movsxd rdx, eax	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053a9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053ad	          0x4801d0	                            add rax, rdx	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053b0	           0xfb600	                   movzx eax, byte [rax]	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053b3	            0x84c0	                             test al, al	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053b5	            0x7511	                           jne 0x40053c8	      2999	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053b7	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053ba	            0x89d0	                            mov eax, edx	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053bc	          0xc1e002	                              shl eax, 2	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053bf	             0x1d0	                            add eax, edx	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053c1	             0x1c0	                            add eax, eax	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053c3	          0x8945ec	             mov dword [rbp - 0x14], eax	      3001	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053c6	            0xeb28	                           jmp 0x40053f0	      3002	ldlang.c	FUNCTION_71	FOR_1	IF_1
0x40053c8	        0x8345ec01	               add dword [rbp - 0x14], 1	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053cc	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053cf	          0x4863d0	                         movsxd rdx, eax	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053d6	          0x4801d0	                            add rax, rdx	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053d9	           0xfb610	                   movzx edx, byte [rax]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053dc	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053df	          0x4863c8	                         movsxd rcx, eax	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053e2	        0x488b45f8	                mov rax, qword [rbp - 8]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053e6	          0x4801c8	                            add rax, rcx	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053e9	           0xfb600	                   movzx eax, byte [rax]	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053ec	            0x38c2	                              cmp dl, al	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053ee	            0x74b3	                            je 0x40053a3	      2998	ldlang.c	FUNCTION_71	FOR_1
0x40053f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3005	ldlang.c	FUNCTION_71	CALL_11
0x40053f4	          0x4889c7	                            mov rdi, rax	      3005	ldlang.c	FUNCTION_71	CALL_11
0x40053f7	      0xe800000000	                          call 0x40053fc	      3005	ldlang.c	FUNCTION_71	CALL_11
0x40053fc	        0x488b45f8	                mov rax, qword [rbp - 8]	      3006	ldlang.c	FUNCTION_71	CALL_12
0x4005400	          0x4889c7	                            mov rdi, rax	      3006	ldlang.c	FUNCTION_71	CALL_12
0x4005403	      0xe800000000	                          call 0x4005408	      3006	ldlang.c	FUNCTION_71	CALL_12
0x4005408	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3008	ldlang.c	FUNCTION_71
0x400540b	              0xc9	                                   leave	      3009	ldlang.c	FUNCTION_71
0x400540c	              0xc3	                                     ret	      3009	ldlang.c	FUNCTION_71
lang_print_memory_usage	functions,0:ELSE,0:FOR,1:CALL,5:IF,0:DO,0:WHILE,0:SWITCH,0	77
0x400f8ef	              0x55	                                push rbp	      8774	ldlang.c	FUNCTION_209
0x400f8f0	          0x4889e5	                            mov rbp, rsp	      8774	ldlang.c	FUNCTION_209
0x400f8f3	        0x4883ec30	                           sub rsp, 0x30	      8774	ldlang.c	FUNCTION_209
0x400f8f7	      0xbf00000000	                              mov edi, 0	      8777	ldlang.c	FUNCTION_209	CALL_1
0x400f8fc	      0xb800000000	                              mov eax, 0	      8777	ldlang.c	FUNCTION_209	CALL_1
0x400f901	      0xe800000000	                          call 0x400f906	      8777	ldlang.c	FUNCTION_209	CALL_1
0x400f906	    0x488b05000000	            mov rax, qword [0x0400f90d] 	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400f90d	        0x488945e8	             mov qword [rbp - 0x18], rax	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400f911	      0xe9ee000000	                           jmp 0x400fa04	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400f916	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f91a	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f91e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f922	        0x488b4020	            mov rax, qword [rax + 0x20] 	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f926	          0x4829c2	                            sub rdx, rax	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f929	          0x4889d0	                            mov rax, rdx	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f92c	        0x488945f0	             mov qword [rbp - 0x10], rax	      8780	ldlang.c	FUNCTION_209	FOR_1
0x400f930	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f934	          0x488b00	                    mov rax, qword [rax]	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f937	          0x4889c6	                            mov rsi, rax	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f93a	      0xbf00000000	                              mov edi, 0	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f93f	      0xb800000000	                              mov eax, 0	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f944	      0xe800000000	                          call 0x400f949	      8783	ldlang.c	FUNCTION_209	FOR_1	CALL_2
0x400f949	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8784	ldlang.c	FUNCTION_209	FOR_1	CALL_3
0x400f94d	          0x4889c7	                            mov rdi, rax	      8784	ldlang.c	FUNCTION_209	FOR_1	CALL_3
0x400f950	      0xe8f7feffff	         call sym.lang_print_memory_size	      8784	ldlang.c	FUNCTION_209	FOR_1	CALL_3
0x400f955	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8785	ldlang.c	FUNCTION_209	FOR_1	CALL_4
0x400f959	        0x488b4028	            mov rax, qword [rax + 0x28] 	      8785	ldlang.c	FUNCTION_209	FOR_1	CALL_4
0x400f95d	          0x4889c7	                            mov rdi, rax	      8785	ldlang.c	FUNCTION_209	FOR_1	CALL_4
0x400f960	      0xe8e7feffff	         call sym.lang_print_memory_size	      8785	ldlang.c	FUNCTION_209	FOR_1	CALL_4
0x400f965	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f969	          0x4885c0	                           test rax, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f96c	            0x780b	                            js 0x400f979	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f96e	        0x660fefc0	                         pxor xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f972	      0xf2480f2ac0	                      cvtsi2sd xmm0, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f977	            0xeb19	                           jmp 0x400f992	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f979	          0x4889c2	                            mov rdx, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f97c	          0x48d1ea	                              shr rdx, 1	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f97f	          0x83e001	                              and eax, 1	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f982	          0x4809c2	                             or rdx, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f985	        0x660fefc0	                         pxor xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f989	      0xf2480f2ac2	                      cvtsi2sd xmm0, rdx	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f98e	        0xf20f58c0	                        addsd xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f992	    0xf20f100d0000	         movsd xmm1, qword [0x0400f99a] 	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f99a	        0xf20f59c8	                        mulsd xmm1, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f99e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9a2	        0x488b4028	            mov rax, qword [rax + 0x28] 	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9a6	          0x4885c0	                           test rax, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9a9	            0x780b	                            js 0x400f9b6	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9ab	        0x660fefc0	                         pxor xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9af	      0xf2480f2ac0	                      cvtsi2sd xmm0, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9b4	            0xeb19	                           jmp 0x400f9cf	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9b6	          0x4889c2	                            mov rdx, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9b9	          0x48d1ea	                              shr rdx, 1	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9bc	          0x83e001	                              and eax, 1	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9bf	          0x4809c2	                             or rdx, rax	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9c2	        0x660fefc0	                         pxor xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9c6	      0xf2480f2ac2	                      cvtsi2sd xmm0, rdx	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9cb	        0xf20f58c0	                        addsd xmm0, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9cf	        0xf20f5ec8	                        divsd xmm1, xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9d3	        0x660f28c1	                       movapd xmm0, xmm1	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9d7	      0xf20f1145f8	             movsd qword [rbp - 8], xmm0	      8787	ldlang.c	FUNCTION_209	FOR_1
0x400f9dc	        0x488b45f8	                mov rax, qword [rbp - 8]	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9e0	        0x488945d8	             mov qword [rbp - 0x28], rax	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9e4	      0xf20f1045d8	          movsd xmm0, qword [rbp - 0x28]	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9e9	      0xbf00000000	                              mov edi, 0	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9ee	      0xb801000000	                              mov eax, 1	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9f3	      0xe800000000	                          call 0x400f9f8	      8789	ldlang.c	FUNCTION_209	FOR_1	CALL_5
0x400f9f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400f9fc	        0x488b4010	            mov rax, qword [rax + 0x10] 	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa00	        0x488945e8	             mov qword [rbp - 0x18], rax	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa04	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa08	        0x488b4010	            mov rax, qword [rax + 0x10] 	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa0c	          0x4885c0	                           test rax, rax	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa0f	     0xf8501ffffff	                           jne 0x400f916	      8778	ldlang.c	FUNCTION_209	FOR_1
0x400fa15	              0x90	                                     nop	      8791	ldlang.c	FUNCTION_209
0x400fa16	              0xc9	                                   leave	      8791	ldlang.c	FUNCTION_209
0x400fa17	              0xc3	                                     ret	      8791	ldlang.c	FUNCTION_209
print_statement	functions,0:ELSE,1:FOR,0:CALL,23:IF,3:DO,0:WHILE,0:SWITCH,1	150
0x4007f48	              0x55	                                push rbp	      4534	ldlang.c	FUNCTION_105
0x4007f49	          0x4889e5	                            mov rbp, rsp	      4534	ldlang.c	FUNCTION_105
0x4007f4c	              0x53	                                push rbx	      4534	ldlang.c	FUNCTION_105
0x4007f4d	        0x4883ec18	                           sub rsp, 0x18	      4534	ldlang.c	FUNCTION_105
0x4007f51	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4534	ldlang.c	FUNCTION_105
0x4007f55	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4534	ldlang.c	FUNCTION_105
0x4007f59	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f5d	          0x8b4008	                mov eax, dword [rax + 8]	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f60	          0x83f80f	                            cmp eax, 0xf	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f63	            0x770c	                            ja 0x4007f71	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f65	            0x89c0	                            mov eax, eax	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f67	    0x488b04c50000	                  mov rax, qword [rax*8]	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f6f	            0xffe0	                                 jmp rax	      4535	ldlang.c	FUNCTION_105	SWITCH_1
0x4007f71	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f75	          0x8b5808	                mov ebx, dword [rax + 8]	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f78	      0xbf00000000	                              mov edi, 0	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f7d	      0xe800000000	                          call 0x4007f82	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f82	          0x4889c1	                            mov rcx, rax	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f85	    0x488b05000000	            mov rax, qword [0x04007f8c] 	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f8c	            0x89da	                            mov edx, ebx	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f8e	          0x4889ce	                            mov rsi, rcx	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f91	          0x4889c7	                            mov rdi, rax	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f94	      0xb800000000	                              mov eax, 0	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f99	      0xe800000000	                          call 0x4007f9e	      4538	ldlang.c	FUNCTION_105	SWITCH_1	CALL_2
0x4007f9e	      0xbebb110000	                         mov esi, 0x11bb	      4539	ldlang.c	FUNCTION_105	SWITCH_1	CALL_3
0x4007fa3	      0xbf00000000	                              mov edi, 0	      4539	ldlang.c	FUNCTION_105	SWITCH_1	CALL_3
0x4007fa8	      0xe800000000	                          call 0x4007fad	      4539	ldlang.c	FUNCTION_105	SWITCH_1	CALL_3
0x4007fad	      0xe9e9010000	                           jmp 0x400819b	      4540	ldlang.c	FUNCTION_105	SWITCH_1
0x4007fb2	    0x488b05000000	            mov rax, qword [0x04007fb9] 	      4542	ldlang.c	FUNCTION_105	SWITCH_1	IF_1
0x4007fb9	          0x4885c0	                           test rax, rax	      4542	ldlang.c	FUNCTION_105	SWITCH_1	IF_1
0x4007fbc	     0xf84d8010000	                            je 0x400819a	      4542	ldlang.c	FUNCTION_105	SWITCH_1	IF_1
0x4007fc2	    0x8b0500000000	            mov eax, dword [0x04007fc8] 	      4544	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	IF_2
0x4007fc8	            0x85c0	                           test eax, eax	      4544	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	IF_2
0x4007fca	            0x7411	                            je 0x4007fdd	      4544	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	IF_2
0x4007fcc	      0xbf00000000	                              mov edi, 0	      4545	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_4
0x4007fd1	      0xb800000000	                              mov eax, 0	      4545	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_4
0x4007fd6	      0xe800000000	                          call 0x4007fdb	      4545	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_4
0x4007fdb	            0xeb0f	                           jmp 0x4007fec	      4545	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_4
0x4007fdd	      0xbf00000000	                              mov edi, 0	      4547	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_5
0x4007fe2	      0xb800000000	                              mov eax, 0	      4547	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_5
0x4007fe7	      0xe800000000	                          call 0x4007fec	      4547	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_5
0x4007fec	    0x488b05000000	            mov rax, qword [0x04007ff3] 	      4548	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_6
0x4007ff3	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4548	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_6
0x4007ff7	          0x4889d6	                            mov rsi, rdx	      4548	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_6
0x4007ffa	          0x4889c7	                            mov rdi, rax	      4548	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_6
0x4007ffd	      0xe80cffffff	           call sym.print_statement_list	      4548	ldlang.c	FUNCTION_105	SWITCH_1	IF_1	CALL_6
0x4008002	      0xe993010000	                           jmp 0x400819a	      4550	ldlang.c	FUNCTION_105	SWITCH_1
0x4008007	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4552	ldlang.c	FUNCTION_105	SWITCH_1	CALL_7
0x400800b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4552	ldlang.c	FUNCTION_105	SWITCH_1	CALL_7
0x400800f	          0x4889d6	                            mov rsi, rdx	      4552	ldlang.c	FUNCTION_105	SWITCH_1	CALL_7
0x4008012	          0x4889c7	                            mov rdi, rax	      4552	ldlang.c	FUNCTION_105	SWITCH_1	CALL_7
0x4008015	      0xe899fbffff	           call sym.print_wild_statement	      4552	ldlang.c	FUNCTION_105	SWITCH_1	CALL_7
0x400801a	      0xe97c010000	                           jmp 0x400819b	      4553	ldlang.c	FUNCTION_105	SWITCH_1
0x400801f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4555	ldlang.c	FUNCTION_105	SWITCH_1	CALL_8
0x4008023	          0x4889c7	                            mov rdi, rax	      4555	ldlang.c	FUNCTION_105	SWITCH_1	CALL_8
0x4008026	      0xe80af9ffff	        call sym.print_address_statement	      4555	ldlang.c	FUNCTION_105	SWITCH_1	CALL_8
0x400802b	      0xe96b010000	                           jmp 0x400819b	      4556	ldlang.c	FUNCTION_105	SWITCH_1
0x4008030	      0xbf00000000	                              mov edi, 0	      4558	ldlang.c	FUNCTION_105	SWITCH_1	CALL_9
0x4008035	      0xb800000000	                              mov eax, 0	      4558	ldlang.c	FUNCTION_105	SWITCH_1	CALL_9
0x400803a	      0xe800000000	                          call 0x400803f	      4558	ldlang.c	FUNCTION_105	SWITCH_1	CALL_9
0x400803f	      0xe957010000	                           jmp 0x400819b	      4559	ldlang.c	FUNCTION_105	SWITCH_1
0x4008044	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4561	ldlang.c	FUNCTION_105	SWITCH_1	CALL_10
0x4008048	          0x4889c7	                            mov rdi, rax	      4561	ldlang.c	FUNCTION_105	SWITCH_1	CALL_10
0x400804b	      0xe8bcf6ffff	           call sym.print_fill_statement	      4561	ldlang.c	FUNCTION_105	SWITCH_1	CALL_10
0x4008050	      0xe946010000	                           jmp 0x400819b	      4562	ldlang.c	FUNCTION_105	SWITCH_1
0x4008055	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4564	ldlang.c	FUNCTION_105	SWITCH_1	CALL_11
0x4008059	          0x4889c7	                            mov rdi, rax	      4564	ldlang.c	FUNCTION_105	SWITCH_1	CALL_11
0x400805c	      0xe841f7ffff	           call sym.print_data_statement	      4564	ldlang.c	FUNCTION_105	SWITCH_1	CALL_11
0x4008061	      0xe935010000	                           jmp 0x400819b	      4565	ldlang.c	FUNCTION_105	SWITCH_1
0x4008066	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4567	ldlang.c	FUNCTION_105	SWITCH_1	CALL_12
0x400806a	          0x4889c7	                            mov rdi, rax	      4567	ldlang.c	FUNCTION_105	SWITCH_1	CALL_12
0x400806d	      0xe80ff9ffff	          call sym.print_reloc_statement	      4567	ldlang.c	FUNCTION_105	SWITCH_1	CALL_12
0x4008072	      0xe924010000	                           jmp 0x400819b	      4568	ldlang.c	FUNCTION_105	SWITCH_1
0x4008077	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4570	ldlang.c	FUNCTION_105	SWITCH_1	CALL_13
0x400807b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4570	ldlang.c	FUNCTION_105	SWITCH_1	CALL_13
0x400807f	      0xbe00000000	                              mov esi, 0	      4570	ldlang.c	FUNCTION_105	SWITCH_1	CALL_13
0x4008084	          0x4889c7	                            mov rdi, rax	      4570	ldlang.c	FUNCTION_105	SWITCH_1	CALL_13
0x4008087	      0xe886f4ffff	            call sym.print_input_section	      4570	ldlang.c	FUNCTION_105	SWITCH_1	CALL_13
0x400808c	      0xe90a010000	                           jmp 0x400819b	      4571	ldlang.c	FUNCTION_105	SWITCH_1
0x4008091	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4573	ldlang.c	FUNCTION_105	SWITCH_1	CALL_14
0x4008095	          0x4889c7	                            mov rdi, rax	      4573	ldlang.c	FUNCTION_105	SWITCH_1	CALL_14
0x4008098	      0xe8fef9ffff	        call sym.print_padding_statement	      4573	ldlang.c	FUNCTION_105	SWITCH_1	CALL_14
0x400809d	      0xe9f9000000	                           jmp 0x400819b	      4574	ldlang.c	FUNCTION_105	SWITCH_1
0x40080a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4576	ldlang.c	FUNCTION_105	SWITCH_1	CALL_15
0x40080a6	          0x4889c7	                            mov rdi, rax	      4576	ldlang.c	FUNCTION_105	SWITCH_1	CALL_15
0x40080a9	      0xe8b8ecffff	 call sym.print_output_section_statement	      4576	ldlang.c	FUNCTION_105	SWITCH_1	CALL_15
0x40080ae	      0xe9e8000000	                           jmp 0x400819b	      4577	ldlang.c	FUNCTION_105	SWITCH_1
0x40080b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4579	ldlang.c	FUNCTION_105	SWITCH_1	CALL_16
0x40080b7	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4579	ldlang.c	FUNCTION_105	SWITCH_1	CALL_16
0x40080bb	          0x4889d6	                            mov rsi, rdx	      4579	ldlang.c	FUNCTION_105	SWITCH_1	CALL_16
0x40080be	          0x4889c7	                            mov rdi, rax	      4579	ldlang.c	FUNCTION_105	SWITCH_1	CALL_16
0x40080c1	      0xe8e3edffff	               call sym.print_assignment	      4579	ldlang.c	FUNCTION_105	SWITCH_1	CALL_16
0x40080c6	      0xe9d0000000	                           jmp 0x400819b	      4580	ldlang.c	FUNCTION_105	SWITCH_1
0x40080cb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080cf	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080d3	    0x488b05000000	            mov rax, qword [0x040080da] 	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080da	      0xbe00000000	                              mov esi, 0	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080df	          0x4889c7	                            mov rdi, rax	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080e2	      0xb800000000	                              mov eax, 0	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080e7	      0xe800000000	                          call 0x40080ec	      4582	ldlang.c	FUNCTION_105	SWITCH_1	CALL_17
0x40080ec	      0xe9aa000000	                           jmp 0x400819b	      4583	ldlang.c	FUNCTION_105	SWITCH_1
0x40080f1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x40080f5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x40080f9	          0x4889c6	                            mov rsi, rax	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x40080fc	      0xbf00000000	                              mov edi, 0	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x4008101	      0xb800000000	                              mov eax, 0	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x4008106	      0xe800000000	                          call 0x400810b	      4585	ldlang.c	FUNCTION_105	SWITCH_1	CALL_18
0x400810b	    0x488b05000000	            mov rax, qword [0x04008112] 	      4586	ldlang.c	FUNCTION_105	SWITCH_1	IF_3
0x4008112	          0x4885c0	                           test rax, rax	      4586	ldlang.c	FUNCTION_105	SWITCH_1	IF_3
0x4008115	            0x7419	                            je 0x4008130	      4586	ldlang.c	FUNCTION_105	SWITCH_1	IF_3
0x4008117	    0x488b05000000	            mov rax, qword [0x0400811e] 	      4587	ldlang.c	FUNCTION_105	SWITCH_1	CALL_19
0x400811e	          0x4889c6	                            mov rsi, rax	      4587	ldlang.c	FUNCTION_105	SWITCH_1	CALL_19
0x4008121	      0xbf00000000	                              mov edi, 0	      4587	ldlang.c	FUNCTION_105	SWITCH_1	CALL_19
0x4008126	      0xb800000000	                              mov eax, 0	      4587	ldlang.c	FUNCTION_105	SWITCH_1	CALL_19
0x400812b	      0xe800000000	                          call 0x4008130	      4587	ldlang.c	FUNCTION_105	SWITCH_1	CALL_19
0x4008130	      0xbf00000000	                              mov edi, 0	      4588	ldlang.c	FUNCTION_105	SWITCH_1	CALL_20
0x4008135	      0xb800000000	                              mov eax, 0	      4588	ldlang.c	FUNCTION_105	SWITCH_1	CALL_20
0x400813a	      0xe800000000	                          call 0x400813f	      4588	ldlang.c	FUNCTION_105	SWITCH_1	CALL_20
0x400813f	            0xeb5a	                           jmp 0x400819b	      4589	ldlang.c	FUNCTION_105	SWITCH_1
0x4008141	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4591	ldlang.c	FUNCTION_105	SWITCH_1	CALL_21
0x4008145	          0x4889c7	                            mov rdi, rax	      4591	ldlang.c	FUNCTION_105	SWITCH_1	CALL_21
0x4008148	      0xe8dcefffff	          call sym.print_input_statement	      4591	ldlang.c	FUNCTION_105	SWITCH_1	CALL_21
0x400814d	            0xeb4c	                           jmp 0x400819b	      4592	ldlang.c	FUNCTION_105	SWITCH_1
0x400814f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4594	ldlang.c	FUNCTION_105	SWITCH_1	CALL_22
0x4008153	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4594	ldlang.c	FUNCTION_105	SWITCH_1	CALL_22
0x4008157	          0x4889d6	                            mov rsi, rdx	      4594	ldlang.c	FUNCTION_105	SWITCH_1	CALL_22
0x400815a	          0x4889c7	                            mov rdi, rax	      4594	ldlang.c	FUNCTION_105	SWITCH_1	CALL_22
0x400815d	      0xe846fdffff	                    call sym.print_group	      4594	ldlang.c	FUNCTION_105	SWITCH_1	CALL_22
0x4008162	            0xeb37	                           jmp 0x400819b	      4595	ldlang.c	FUNCTION_105	SWITCH_1
0x4008164	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008168	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x400816c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      4598	ldlang.c	FUNCTION_105	SWITCH_1
0x4008170	          0x8b5218	            mov edx, dword [rdx + 0x18] 	      4598	ldlang.c	FUNCTION_105	SWITCH_1
0x4008173	            0x85d2	                           test edx, edx	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008175	            0x7407	                            je 0x400817e	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008177	      0xb900000000	                              mov ecx, 0	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x400817c	            0xeb05	                           jmp 0x4008183	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x400817e	      0xb900000000	                              mov ecx, 0	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008183	          0x4889c2	                            mov rdx, rax	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008186	          0x4889ce	                            mov rsi, rcx	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008189	      0xbf00000000	                              mov edi, 0	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x400818e	      0xb800000000	                              mov eax, 0	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008193	      0xe800000000	                          call 0x4008198	      4597	ldlang.c	FUNCTION_105	SWITCH_1	CALL_23
0x4008198	            0xeb01	                           jmp 0x400819b	      4600	ldlang.c	FUNCTION_105	SWITCH_1
0x400819a	              0x90	                                     nop	      4550	ldlang.c	FUNCTION_105	SWITCH_1
0x400819b	              0x90	                                     nop	      4602	ldlang.c	FUNCTION_105
0x400819c	        0x4883c418	                           add rsp, 0x18	      4602	ldlang.c	FUNCTION_105
0x40081a0	              0x5b	                                 pop rbx	      4602	ldlang.c	FUNCTION_105
0x40081a1	              0x5d	                                 pop rbp	      4602	ldlang.c	FUNCTION_105
0x40081a2	              0xc3	                                     ret	      4602	ldlang.c	FUNCTION_105
print_address_statement	functions,0:ELSE,0:FOR,0:CALL,4:IF,0:DO,0:WHILE,0:SWITCH,0	23
0x4007935	              0x55	                                push rbp	      4339	ldlang.c	FUNCTION_99
0x4007936	          0x4889e5	                            mov rbp, rsp	      4339	ldlang.c	FUNCTION_99
0x4007939	              0x53	                                push rbx	      4339	ldlang.c	FUNCTION_99
0x400793a	        0x4883ec18	                           sub rsp, 0x18	      4339	ldlang.c	FUNCTION_99
0x400793e	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4339	ldlang.c	FUNCTION_99
0x4007942	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4340	ldlang.c	FUNCTION_99	CALL_2
0x4007946	        0x488b5810	            mov rbx, qword [rax + 0x10] 	      4340	ldlang.c	FUNCTION_99	CALL_2
0x400794a	      0xbf00000000	                              mov edi, 0	      4340	ldlang.c	FUNCTION_99	CALL_2
0x400794f	      0xe800000000	                          call 0x4007954	      4340	ldlang.c	FUNCTION_99	CALL_2
0x4007954	          0x4889de	                            mov rsi, rbx	      4340	ldlang.c	FUNCTION_99	CALL_2
0x4007957	          0x4889c7	                            mov rdi, rax	      4340	ldlang.c	FUNCTION_99	CALL_2
0x400795a	      0xb800000000	                              mov eax, 0	      4340	ldlang.c	FUNCTION_99	CALL_2
0x400795f	      0xe800000000	                          call 0x4007964	      4340	ldlang.c	FUNCTION_99	CALL_2
0x4007964	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4341	ldlang.c	FUNCTION_99	CALL_3
0x4007968	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4341	ldlang.c	FUNCTION_99	CALL_3
0x400796c	          0x4889c7	                            mov rdi, rax	      4341	ldlang.c	FUNCTION_99	CALL_3
0x400796f	      0xe800000000	                          call 0x4007974	      4341	ldlang.c	FUNCTION_99	CALL_3
0x4007974	      0xe800000000	                          call 0x4007979	      4342	ldlang.c	FUNCTION_99	CALL_4
0x4007979	              0x90	                                     nop	      4343	ldlang.c	FUNCTION_99
0x400797a	        0x4883c418	                           add rsp, 0x18	      4343	ldlang.c	FUNCTION_99
0x400797e	              0x5b	                                 pop rbx	      4343	ldlang.c	FUNCTION_99
0x400797f	              0x5d	                                 pop rbp	      4343	ldlang.c	FUNCTION_99
0x4007980	              0xc3	                                     ret	      4343	ldlang.c	FUNCTION_99
lang_new_phdr	functions,0:ELSE,0:FOR,1:CALL,4:IF,1:DO,0:WHILE,0:SWITCH,0	88
0x400d913	              0x55	                                push rbp	      7743	ldlang.c	FUNCTION_184
0x400d914	          0x4889e5	                            mov rbp, rsp	      7743	ldlang.c	FUNCTION_184
0x400d917	        0x4883ec50	                           sub rsp, 0x50	      7743	ldlang.c	FUNCTION_184
0x400d91b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      7743	ldlang.c	FUNCTION_184
0x400d91f	        0x488975d0	             mov qword [rbp - 0x30], rsi	      7743	ldlang.c	FUNCTION_184
0x400d923	          0x8955cc	             mov dword [rbp - 0x34], edx	      7743	ldlang.c	FUNCTION_184
0x400d926	          0x894dc8	             mov dword [rbp - 0x38], ecx	      7743	ldlang.c	FUNCTION_184
0x400d929	        0x4c8945c0	              mov qword [rbp - 0x40], r8	      7743	ldlang.c	FUNCTION_184
0x400d92d	        0x4c894db8	              mov qword [rbp - 0x48], r9	      7743	ldlang.c	FUNCTION_184
0x400d931	      0xbf30000000	                           mov edi, 0x30	      7747	ldlang.c	FUNCTION_184	CALL_1
0x400d936	      0xe800000000	                          call 0x400d93b	      7747	ldlang.c	FUNCTION_184	CALL_1
0x400d93b	        0x488945f8	                mov qword [rbp - 8], rax	      7747	ldlang.c	FUNCTION_184	CALL_1
0x400d93f	        0x488b45f8	                mov rax, qword [rbp - 8]	      7748	ldlang.c	FUNCTION_184
0x400d943	    0x48c700000000	                      mov qword [rax], 0	      7748	ldlang.c	FUNCTION_184
0x400d94a	        0x488b45f8	                mov rax, qword [rbp - 8]	      7749	ldlang.c	FUNCTION_184
0x400d94e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      7749	ldlang.c	FUNCTION_184
0x400d952	        0x48895008	                mov qword [rax + 8], rdx	      7749	ldlang.c	FUNCTION_184
0x400d956	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d95a	      0xba00000000	                              mov edx, 0	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d95f	      0xbe00000000	                              mov esi, 0	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d964	          0x4889c7	                            mov rdi, rax	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d967	      0xe800000000	                          call 0x400d96c	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d96c	          0x4863d0	                         movsxd rdx, eax	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d96f	        0x488b45f8	                mov rax, qword [rbp - 8]	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d973	        0x48895010	             mov qword [rax + 0x10], rdx	      7750	ldlang.c	FUNCTION_184	CALL_2
0x400d977	        0x488b45f8	                mov rax, qword [rbp - 8]	      7751	ldlang.c	FUNCTION_184
0x400d97b	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      7751	ldlang.c	FUNCTION_184
0x400d97e	          0x895018	             mov dword [rax + 0x18], edx	      7751	ldlang.c	FUNCTION_184
0x400d981	        0x488b45f8	                mov rax, qword [rbp - 8]	      7752	ldlang.c	FUNCTION_184
0x400d985	          0x8b55c8	             mov edx, dword [rbp - 0x38]	      7752	ldlang.c	FUNCTION_184
0x400d988	          0x89501c	             mov dword [rax + 0x1c], edx	      7752	ldlang.c	FUNCTION_184
0x400d98b	        0x488b45f8	                mov rax, qword [rbp - 8]	      7753	ldlang.c	FUNCTION_184
0x400d98f	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      7753	ldlang.c	FUNCTION_184
0x400d993	        0x48895020	             mov qword [rax + 0x20], rdx	      7753	ldlang.c	FUNCTION_184
0x400d997	        0x488b45f8	                mov rax, qword [rbp - 8]	      7754	ldlang.c	FUNCTION_184
0x400d99b	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      7754	ldlang.c	FUNCTION_184
0x400d99f	        0x48895028	             mov qword [rax + 0x28], rdx	      7754	ldlang.c	FUNCTION_184
0x400d9a3	        0x488b45f8	                mov rax, qword [rbp - 8]	      7756	ldlang.c	FUNCTION_184
0x400d9a7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      7756	ldlang.c	FUNCTION_184
0x400d9ab	        0x4883f801	                              cmp rax, 1	      7756	ldlang.c	FUNCTION_184
0x400d9af	            0x7513	                           jne 0x400d9c4	      7756	ldlang.c	FUNCTION_184
0x400d9b1	        0x837dc800	               cmp dword [rbp - 0x38], 0	      7756	ldlang.c	FUNCTION_184
0x400d9b5	            0x7506	                           jne 0x400d9bd	      7756	ldlang.c	FUNCTION_184
0x400d9b7	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      7756	ldlang.c	FUNCTION_184
0x400d9bb	            0x7407	                            je 0x400d9c4	      7756	ldlang.c	FUNCTION_184
0x400d9bd	      0xb801000000	                              mov eax, 1	      7756	ldlang.c	FUNCTION_184
0x400d9c2	            0xeb05	                           jmp 0x400d9c9	      7756	ldlang.c	FUNCTION_184
0x400d9c4	      0xb800000000	                              mov eax, 0	      7756	ldlang.c	FUNCTION_184
0x400d9c9	          0x8945ec	             mov dword [rbp - 0x14], eax	      7756	ldlang.c	FUNCTION_184
0x400d9cc	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400d9d4	            0xeb61	                           jmp 0x400da37	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400d9d6	        0x837dec00	               cmp dword [rbp - 0x14], 0	      7759	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9da	            0x7450	                            je 0x400da2c	      7759	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7760	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9e0	          0x488b00	                    mov rax, qword [rax]	      7760	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9e3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      7760	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9e7	        0x4883f801	                              cmp rax, 1	      7760	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9eb	            0x753f	                           jne 0x400da2c	      7760	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9ed	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9f1	          0x488b00	                    mov rax, qword [rax]	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9f4	          0x8b4018	            mov eax, dword [rax + 0x18] 	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9f7	            0x85c0	                           test eax, eax	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9f9	            0x7531	                           jne 0x400da2c	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9fb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400d9ff	          0x488b00	                    mov rax, qword [rax]	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400da02	          0x8b401c	            mov eax, dword [rax + 0x1c] 	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400da05	            0x85c0	                           test eax, eax	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400da07	            0x7523	                           jne 0x400da2c	      7761	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400da09	      0xbf00000000	                              mov edi, 0	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da0e	      0xe800000000	                          call 0x400da13	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da13	      0xbe00000000	                              mov esi, 0	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da18	          0x4889c7	                            mov rdi, rax	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da1b	      0xb800000000	                              mov eax, 0	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da20	      0xe800000000	                          call 0x400da25	      7763	ldlang.c	FUNCTION_184	FOR_1	IF_1	CALL_4
0x400da25	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      7765	ldlang.c	FUNCTION_184	FOR_1	IF_1
0x400da2c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da30	          0x488b00	                    mov rax, qword [rax]	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da33	        0x488945f0	             mov qword [rbp - 0x10], rax	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da37	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da3b	          0x488b00	                    mov rax, qword [rax]	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da3e	          0x4885c0	                           test rax, rax	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da41	            0x7593	                           jne 0x400d9d6	      7758	ldlang.c	FUNCTION_184	FOR_1
0x400da43	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7768	ldlang.c	FUNCTION_184
0x400da47	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7768	ldlang.c	FUNCTION_184
0x400da4b	          0x488910	                    mov qword [rax], rdx	      7768	ldlang.c	FUNCTION_184
0x400da4e	              0x90	                                     nop	      7769	ldlang.c	FUNCTION_184
0x400da4f	              0xc9	                                   leave	      7769	ldlang.c	FUNCTION_184
0x400da50	              0xc3	                                     ret	      7769	ldlang.c	FUNCTION_184
stat_alloc	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	85
0x4000081	              0x55	                                push rbp	       139	ldlang.c	FUNCTION_1
0x4000082	          0x4889e5	                            mov rbp, rsp	       139	ldlang.c	FUNCTION_1
0x4000085	        0x4883ec40	                           sub rsp, 0x40	       139	ldlang.c	FUNCTION_1
0x4000089	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       139	ldlang.c	FUNCTION_1
0x400008d	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000095	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000099	        0x488945d8	             mov qword [rbp - 0x28], rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400009d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000a1	        0x488945e0	             mov qword [rbp - 0x20], rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000a5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000a9	        0x488945e8	             mov qword [rbp - 0x18], rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000ad	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000b1	        0x488b4020	            mov rax, qword [rax + 0x20] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000b5	          0x4889c2	                            mov rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000b8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000bc	        0x488b4018	            mov rax, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000c0	          0x4829c2	                            sub rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000c3	          0x4889d0	                            mov rax, rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000c6	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000ca	            0x7313	                           jae 0x40000df	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000cc	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000d0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000d4	          0x4889d6	                            mov rsi, rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000d7	          0x4889c7	                            mov rdi, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000da	      0xe800000000	                          call 0x40000df	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000df	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000e3	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000e7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000eb	          0x4801c2	                            add rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000ee	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000f2	        0x48895018	             mov qword [rax + 0x18], rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000f6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000fa	        0x488945f0	             mov qword [rbp - 0x10], rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x40000fe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000102	        0x488b4010	            mov rax, qword [rax + 0x10] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000106	        0x488945f8	                mov qword [rbp - 8], rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400010a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x400010e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000112	        0x483b45f8	                cmp rax, qword [rbp - 8]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000116	            0x750e	                           jne 0x4000126	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000118	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x400011c	         0xfb65050	           movzx edx, byte [rax + 0x50] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000120	          0x83ca02	                               or edx, 2	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000123	          0x885050	               mov byte [rax + 0x50], dl	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000126	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x400012a	        0x488b4018	            mov rax, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x400012e	          0x4889c2	                            mov rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000131	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000135	        0x488b4030	            mov rax, qword [rax + 0x30] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000139	          0x4801c2	                            add rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400013c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000140	        0x488b4030	            mov rax, qword [rax + 0x30] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000144	          0x48f7d0	                                 not rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000147	          0x4821d0	                            and rax, rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x400014a	          0x4889c2	                            mov rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400014d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000151	        0x48895018	             mov qword [rax + 0x18], rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000155	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000159	        0x488b4018	            mov rax, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x400015d	          0x4889c2	                            mov rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000160	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000164	        0x488b4008	                mov rax, qword [rax + 8]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000168	          0x4829c2	                            sub rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400016b	          0x4889d0	                            mov rax, rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x400016e	          0x4889c2	                            mov rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000171	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000175	        0x488b4020	            mov rax, qword [rax + 0x20] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000179	          0x4889c1	                            mov rcx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400017c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000180	        0x488b4008	                mov rax, qword [rax + 8]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000184	          0x4829c1	                            sub rcx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000187	          0x4889c8	                            mov rax, rcx	       140	ldlang.c	FUNCTION_1	CALL_1
0x400018a	          0x4839c2	                            cmp rdx, rax	       140	ldlang.c	FUNCTION_1	CALL_1
0x400018d	            0x7610	                           jbe 0x400019f	       140	ldlang.c	FUNCTION_1	CALL_1
0x400018f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000193	        0x488b5020	            mov rdx, qword [rax + 0x20] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x4000197	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x400019b	        0x48895018	             mov qword [rax + 0x18], rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x400019f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40001a3	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       140	ldlang.c	FUNCTION_1	CALL_1
0x40001a7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40001ab	        0x48895010	             mov qword [rax + 0x10], rdx	       140	ldlang.c	FUNCTION_1	CALL_1
0x40001af	        0x488b45f8	                mov rax, qword [rbp - 8]	       140	ldlang.c	FUNCTION_1	CALL_1
0x40001b3	              0xc9	                                   leave	       141	ldlang.c	FUNCTION_1
0x40001b4	              0xc3	                                     ret	       141	ldlang.c	FUNCTION_1
lang_get_regions	functions,0:ELSE,1:FOR,0:CALL,5:IF,2:DO,0:WHILE,0:SWITCH,0	51
0x400d68b	              0x55	                                push rbp	      7634	ldlang.c	FUNCTION_177
0x400d68c	          0x4889e5	                            mov rbp, rsp	      7634	ldlang.c	FUNCTION_177
0x400d68f	        0x4883ec30	                           sub rsp, 0x30	      7634	ldlang.c	FUNCTION_177
0x400d693	        0x48897df8	                mov qword [rbp - 8], rdi	      7634	ldlang.c	FUNCTION_177
0x400d697	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7634	ldlang.c	FUNCTION_177
0x400d69b	        0x488955e8	             mov qword [rbp - 0x18], rdx	      7634	ldlang.c	FUNCTION_177
0x400d69f	        0x48894de0	             mov qword [rbp - 0x20], rcx	      7634	ldlang.c	FUNCTION_177
0x400d6a3	        0x448945dc	             mov dword [rbp - 0x24], r8d	      7634	ldlang.c	FUNCTION_177
0x400d6a7	        0x44894dd8	             mov dword [rbp - 0x28], r9d	      7634	ldlang.c	FUNCTION_177
0x400d6ab	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6af	      0xbe00000000	                              mov esi, 0	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6b4	          0x4889c7	                            mov rdi, rax	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6b7	      0xe800000000	                          call 0x400d6bc	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6bc	          0x4889c2	                            mov rdx, rax	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6bf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6c3	          0x488910	                    mov qword [rax], rdx	      7635	ldlang.c	FUNCTION_177	CALL_1
0x400d6c6	      0x48837de000	               cmp qword [rbp - 0x20], 0	      7640	ldlang.c	FUNCTION_177	IF_1
0x400d6cb	            0x742b	                            je 0x400d6f8	      7640	ldlang.c	FUNCTION_177	IF_1
0x400d6cd	        0x837dd800	               cmp dword [rbp - 0x28], 0	      7641	ldlang.c	FUNCTION_177	IF_1
0x400d6d1	            0x7525	                           jne 0x400d6f8	      7641	ldlang.c	FUNCTION_177	IF_1
0x400d6d3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6d7	      0xbe00000000	                              mov esi, 0	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6dc	          0x4889c7	                            mov rdi, rax	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6df	      0xe800000000	                          call 0x400d6e4	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6e4	            0x85c0	                           test eax, eax	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6e6	            0x7510	                           jne 0x400d6f8	      7642	ldlang.c	FUNCTION_177	IF_1	CALL_2
0x400d6e8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7643	ldlang.c	FUNCTION_177	IF_1
0x400d6ec	          0x488b10	                    mov rdx, qword [rax]	      7643	ldlang.c	FUNCTION_177	IF_1
0x400d6ef	        0x488b45f8	                mov rax, qword [rbp - 8]	      7643	ldlang.c	FUNCTION_177	IF_1
0x400d6f3	          0x488910	                    mov qword [rax], rdx	      7643	ldlang.c	FUNCTION_177	IF_1
0x400d6f6	            0xeb1b	                           jmp 0x400d713	      7643	ldlang.c	FUNCTION_177	IF_1
0x400d6f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d6fc	      0xbe00000000	                              mov esi, 0	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d701	          0x4889c7	                            mov rdi, rax	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d704	      0xe800000000	                          call 0x400d709	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d709	          0x4889c2	                            mov rdx, rax	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d70c	        0x488b45f8	                mov rax, qword [rbp - 8]	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d710	          0x488910	                    mov qword [rax], rdx	      7645	ldlang.c	FUNCTION_177	CALL_3
0x400d713	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      7647	ldlang.c	FUNCTION_177	IF_2
0x400d717	            0x7423	                            je 0x400d73c	      7647	ldlang.c	FUNCTION_177	IF_2
0x400d719	      0x48837de000	               cmp qword [rbp - 0x20], 0	      7647	ldlang.c	FUNCTION_177	IF_2
0x400d71e	            0x741c	                            je 0x400d73c	      7647	ldlang.c	FUNCTION_177	IF_2
0x400d720	      0xbf00000000	                              mov edi, 0	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d725	      0xe800000000	                          call 0x400d72a	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d72a	      0xbe00000000	                              mov esi, 0	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d72f	          0x4889c7	                            mov rdi, rax	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d732	      0xb800000000	                              mov eax, 0	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d737	      0xe800000000	                          call 0x400d73c	      7648	ldlang.c	FUNCTION_177	IF_2	CALL_5
0x400d73c	              0x90	                                     nop	      7650	ldlang.c	FUNCTION_177
0x400d73d	              0xc9	                                   leave	      7650	ldlang.c	FUNCTION_177
0x400d73e	              0xc3	                                     ret	      7650	ldlang.c	FUNCTION_177
lang_map	functions,1:ELSE,0:FOR,1:CALL,24:IF,4:DO,0:WHILE,1:SWITCH,0	212
0x40036fb	              0x55	                                push rbp	      2045	ldlang.c	FUNCTION_53
0x40036fc	          0x4889e5	                            mov rbp, rsp	      2045	ldlang.c	FUNCTION_53
0x40036ff	            0x4155	                                push r13	      2045	ldlang.c	FUNCTION_53
0x4003701	            0x4154	                                push r12	      2045	ldlang.c	FUNCTION_53
0x4003703	              0x53	                                push rbx	      2045	ldlang.c	FUNCTION_53
0x4003704	    0x4881ec980000	                           sub rsp, 0x98	      2045	ldlang.c	FUNCTION_53
0x400370b	    0x64488b042528	                mov rax, qword fs:[0x28]	      2045	ldlang.c	FUNCTION_53
0x4003714	        0x488945d8	             mov qword [rbp - 0x28], rax	      2045	ldlang.c	FUNCTION_53
0x4003718	            0x31c0	                            xor eax, eax	      2045	ldlang.c	FUNCTION_53
0x400371a	    0xc78550ffffff	               mov dword [rbp - 0xb0], 0	      2047	ldlang.c	FUNCTION_53
0x4003724	    0x488b05000000	            mov rax, qword [0x0400372b] 	      2049	ldlang.c	FUNCTION_53
0x400372b	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	      2049	ldlang.c	FUNCTION_53
0x4003732	      0xe918010000	                           jmp 0x400384f	      2049	ldlang.c	FUNCTION_53
0x4003737	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x400373e	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003742	          0x8b4044	            mov eax, dword [rax + 0x44] 	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003745	          0xc1e805	                              shr eax, 5	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003748	      0x25ffff0f00	                        and eax, 0xfffff	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x400374d	      0x2540100000	                         and eax, 0x1040	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003752	            0x85c0	                           test eax, eax	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003754	     0xf85e2000000	                           jne 0x400383c	      2053	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x400375a	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2054	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003761	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      2054	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003765	          0x83e010	                           and eax, 0x10	      2054	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003768	            0x84c0	                             test al, al	      2054	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x400376a	     0xf85cc000000	                           jne 0x400383c	      2054	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x4003770	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003777	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x400377b	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003782	    0x48898568ffff	             mov qword [rbp - 0x98], rax	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003789	      0xe99e000000	                           jmp 0x400382c	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x400378e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2058	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x4003795	        0x488b4068	            mov rax, qword [rax + 0x68] 	      2058	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x4003799	          0x4885c0	                           test rax, rax	      2058	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x400379c	            0x741e	                            je 0x40037bc	      2058	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x400379e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037a5	        0x488b4068	            mov rax, qword [rax + 0x68] 	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037a9	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037b0	    0x488b05000000	            mov rax, qword [0x040037b7] 	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037b7	          0x4839c2	                            cmp rdx, rax	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037ba	            0x745e	                            je 0x400381a	      2059	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037bc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2060	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037c3	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2060	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037c6	      0x2500003000	                       and eax, 0x300000	      2060	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037cb	            0x85c0	                           test eax, eax	      2060	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037cd	            0x754b	                           jne 0x400381a	      2060	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2
0x40037cf	    0x83bd50ffffff	               cmp dword [rbp - 0xb0], 0	      2062	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3
0x40037d6	            0x752e	                           jne 0x4003806	      2062	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3
0x40037d8	      0xbf00000000	                              mov edi, 0	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037dd	      0xe800000000	                          call 0x40037e2	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037e2	          0x4889c2	                            mov rdx, rax	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037e5	    0x488b05000000	            mov rax, qword [0x040037ec] 	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037ec	          0x4889d6	                            mov rsi, rdx	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037ef	          0x4889c7	                            mov rdi, rax	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037f2	      0xb800000000	                              mov eax, 0	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037f7	      0xe800000000	                          call 0x40037fc	      2064	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3	CALL_2
0x40037fc	    0xc78550ffffff	               mov dword [rbp - 0xb0], 1	      2065	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	IF_3
0x4003806	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2068	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	CALL_3
0x400380d	      0xbe01000000	                              mov esi, 1	      2068	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	CALL_3
0x4003812	          0x4889c7	                            mov rdi, rax	      2068	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	CALL_3
0x4003815	      0xe8f83c0000	            call sym.print_input_section	      2068	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1	IF_2	CALL_3
0x400381a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003821	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003825	    0x48898568ffff	             mov qword [rbp - 0x98], rax	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x400382c	    0x4883bd68ffff	               cmp qword [rbp - 0x98], 0	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x4003834	     0xf8554ffffff	                           jne 0x400378e	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x400383a	            0xeb01	                           jmp 0x400383d	      2057	ldlang.c	FUNCTION_53	FUNCTION_1	FOR_1
0x400383c	              0x90	                                     nop	      2055	ldlang.c	FUNCTION_53	FUNCTION_1	IF_1
0x400383d	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2049	ldlang.c	FUNCTION_53
0x4003844	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2049	ldlang.c	FUNCTION_53
0x4003848	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	      2049	ldlang.c	FUNCTION_53
0x400384f	    0x4883bd60ffff	               cmp qword [rbp - 0xa0], 0	      2049	ldlang.c	FUNCTION_53
0x4003857	     0xf85dafeffff	                           jne 0x4003737	      2049	ldlang.c	FUNCTION_53
0x400385d	      0xbf00000000	                              mov edi, 0	      2072	ldlang.c	FUNCTION_53	CALL_2
0x4003862	      0xe800000000	                          call 0x4003867	      2072	ldlang.c	FUNCTION_53	CALL_2
0x4003867	          0x4889c7	                            mov rdi, rax	      2072	ldlang.c	FUNCTION_53	CALL_2
0x400386a	      0xb800000000	                              mov eax, 0	      2072	ldlang.c	FUNCTION_53	CALL_2
0x400386f	      0xe800000000	                          call 0x4003874	      2072	ldlang.c	FUNCTION_53	CALL_2
0x4003874	      0xbf00000000	                              mov edi, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x4003879	      0xe800000000	                          call 0x400387e	      2073	ldlang.c	FUNCTION_53	CALL_3
0x400387e	          0x4989c5	                            mov r13, rax	      2073	ldlang.c	FUNCTION_53	CALL_3
0x4003881	      0xbf00000000	                              mov edi, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x4003886	      0xe800000000	                          call 0x400388b	      2073	ldlang.c	FUNCTION_53	CALL_3
0x400388b	          0x4989c4	                            mov r12, rax	      2073	ldlang.c	FUNCTION_53	CALL_3
0x400388e	      0xbf00000000	                              mov edi, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x4003893	      0xe800000000	                          call 0x4003898	      2073	ldlang.c	FUNCTION_53	CALL_3
0x4003898	          0x4889c3	                            mov rbx, rax	      2073	ldlang.c	FUNCTION_53	CALL_3
0x400389b	      0xbf00000000	                              mov edi, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038a0	      0xe800000000	                          call 0x40038a5	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038a5	          0x4889c2	                            mov rdx, rax	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038a8	    0x488b05000000	            mov rax, qword [0x040038af] 	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038af	          0x4d89e9	                             mov r9, r13	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038b2	          0x4d89e0	                             mov r8, r12	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038b5	          0x4889d9	                            mov rcx, rbx	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038b8	      0xbe00000000	                              mov esi, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038bd	          0x4889c7	                            mov rdi, rax	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038c0	      0xb800000000	                              mov eax, 0	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038c5	      0xe800000000	                          call 0x40038ca	      2073	ldlang.c	FUNCTION_53	CALL_3
0x40038ca	    0x488b05000000	            mov rax, qword [0x040038d1] 	      2076	ldlang.c	FUNCTION_53	FOR_1
0x40038d1	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2076	ldlang.c	FUNCTION_53	FOR_1
0x40038d8	      0xe92e010000	                           jmp 0x4003a0b	      2076	ldlang.c	FUNCTION_53	FOR_1
0x40038dd	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038e4	          0x488b10	                    mov rdx, qword [rax]	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038e7	    0x488b05000000	            mov rax, qword [0x040038ee] 	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038ee	      0xbe00000000	                              mov esi, 0	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038f3	          0x4889c7	                            mov rdi, rax	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038f6	      0xb800000000	                              mov eax, 0	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x40038fb	      0xe800000000	                          call 0x4003900	      2081	ldlang.c	FUNCTION_53	FOR_1	CALL_8
0x4003900	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2083	ldlang.c	FUNCTION_53	FOR_1
0x4003907	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      2083	ldlang.c	FUNCTION_53	FOR_1
0x400390b	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	      2083	ldlang.c	FUNCTION_53	FOR_1
0x4003912	      0xbe00000000	                              mov esi, 0	      2083	ldlang.c	FUNCTION_53	FOR_1
0x4003917	          0x4889c7	                            mov rdi, rax	      2083	ldlang.c	FUNCTION_53	FOR_1
0x400391a	      0xb800000000	                              mov eax, 0	      2083	ldlang.c	FUNCTION_53	FOR_1
0x400391f	      0xe800000000	                          call 0x4003924	      2083	ldlang.c	FUNCTION_53	FOR_1
0x4003924	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	      2084	ldlang.c	FUNCTION_53	FOR_1	CALL_9
0x400392b	          0x4889c6	                            mov rsi, rax	      2084	ldlang.c	FUNCTION_53	FOR_1	CALL_9
0x400392e	      0xbf00000000	                              mov edi, 0	      2084	ldlang.c	FUNCTION_53	FOR_1	CALL_9
0x4003933	      0xb800000000	                              mov eax, 0	      2084	ldlang.c	FUNCTION_53	FOR_1	CALL_9
0x4003938	      0xe800000000	                          call 0x400393d	      2084	ldlang.c	FUNCTION_53	FOR_1	CALL_9
0x400393d	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	      2085	ldlang.c	FUNCTION_53	FOR_1	CALL_10
0x4003944	          0x4889c7	                            mov rdi, rax	      2085	ldlang.c	FUNCTION_53	FOR_1	CALL_10
0x4003947	      0xe800000000	                          call 0x400394c	      2085	ldlang.c	FUNCTION_53	FOR_1	CALL_10
0x400394c	    0x898554ffffff	             mov dword [rbp - 0xac], eax	      2085	ldlang.c	FUNCTION_53	FOR_1	CALL_10
0x4003952	            0xeb0c	                           jmp 0x4003960	      2086	ldlang.c	FUNCTION_53	FOR_1	WHILE_1
0x4003954	      0xe800000000	                          call 0x4003959	      2088	ldlang.c	FUNCTION_53	FOR_1	WHILE_1	CALL_11
0x4003959	    0x838554ffffff	               add dword [rbp - 0xac], 1	      2089	ldlang.c	FUNCTION_53	FOR_1	WHILE_1
0x4003960	    0x83bd54ffffff	            cmp dword [rbp - 0xac], 0xf 	      2086	ldlang.c	FUNCTION_53	FOR_1	WHILE_1
0x4003967	            0x7eeb	                           jle 0x4003954	      2086	ldlang.c	FUNCTION_53	FOR_1	WHILE_1
0x4003969	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x4003970	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x4003974	          0x4889c6	                            mov rsi, rax	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x4003977	      0xbf00000000	                              mov edi, 0	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x400397c	      0xb800000000	                              mov eax, 0	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x4003981	      0xe800000000	                          call 0x4003986	      2092	ldlang.c	FUNCTION_53	FOR_1	CALL_12
0x4003986	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x400398d	          0x8b4048	            mov eax, dword [rax + 0x48] 	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x4003990	            0x85c0	                           test eax, eax	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x4003992	            0x750e	                           jne 0x40039a2	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x4003994	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x400399b	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x400399e	            0x85c0	                           test eax, eax	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x40039a0	            0x7452	                            je 0x40039f4	      2093	ldlang.c	FUNCTION_53	FOR_1	IF_1
0x40039a2	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2098	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2
0x40039a9	          0x8b4048	            mov eax, dword [rax + 0x48] 	      2098	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2
0x40039ac	            0x85c0	                           test eax, eax	      2098	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2
0x40039ae	            0x7416	                            je 0x40039c6	      2098	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2
0x40039b0	      0xe800000000	                          call 0x40039b5	      2100	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2	CALL_14
0x40039b5	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2101	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2	CALL_15
0x40039bc	          0x8b4048	            mov eax, dword [rax + 0x48] 	      2101	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2	CALL_15
0x40039bf	            0x89c7	                            mov edi, eax	      2101	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2	CALL_15
0x40039c1	      0xe8aafcffff	                 call sym.lang_map_flags	      2101	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_2	CALL_15
0x40039c6	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2104	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3
0x40039cd	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      2104	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3
0x40039d0	            0x85c0	                           test eax, eax	      2104	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3
0x40039d2	            0x7420	                            je 0x40039f4	      2104	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3
0x40039d4	      0xbf00000000	                              mov edi, 0	      2106	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_16
0x40039d9	      0xb800000000	                              mov eax, 0	      2106	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_16
0x40039de	      0xe800000000	                          call 0x40039e3	      2106	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_16
0x40039e3	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2107	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_17
0x40039ea	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      2107	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_17
0x40039ed	            0x89c7	                            mov edi, eax	      2107	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_17
0x40039ef	      0xe87cfcffff	                 call sym.lang_map_flags	      2107	ldlang.c	FUNCTION_53	FOR_1	IF_1	IF_3	CALL_17
0x40039f4	      0xe800000000	                          call 0x40039f9	      2111	ldlang.c	FUNCTION_53	FOR_1	CALL_18
0x40039f9	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2076	ldlang.c	FUNCTION_53	FOR_1
0x4003a00	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2076	ldlang.c	FUNCTION_53	FOR_1
0x4003a04	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2076	ldlang.c	FUNCTION_53	FOR_1
0x4003a0b	    0x4883bd58ffff	               cmp qword [rbp - 0xa8], 0	      2076	ldlang.c	FUNCTION_53	FOR_1
0x4003a13	     0xf85c4feffff	                           jne 0x40038dd	      2076	ldlang.c	FUNCTION_53	FOR_1
0x4003a19	      0xbf00000000	                              mov edi, 0	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a1e	      0xe800000000	                          call 0x4003a23	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a23	          0x4889c2	                            mov rdx, rax	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a26	    0x488b05000000	            mov rax, qword [0x04003a2d] 	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a2d	          0x4889d6	                            mov rsi, rdx	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a30	          0x4889c7	                            mov rdi, rax	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a33	      0xb800000000	                              mov eax, 0	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a38	      0xe800000000	                          call 0x4003a3d	      2114	ldlang.c	FUNCTION_53	CALL_20
0x4003a3d	     0xfb605000000	           movzx eax, byte [0x04003a44] 	      2116	ldlang.c	FUNCTION_53	IF_4
0x4003a44	          0x83e010	                           and eax, 0x10	      2116	ldlang.c	FUNCTION_53	IF_4
0x4003a47	            0x84c0	                             test al, al	      2116	ldlang.c	FUNCTION_53	IF_4
0x4003a49	            0x7538	                           jne 0x4003a83	      2116	ldlang.c	FUNCTION_53	IF_4
0x4003a4b	    0x41b800000000	                              mov r8d, 0	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a51	      0xb900000000	                              mov ecx, 0	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a56	      0xba00000000	                              mov edx, 0	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a5b	      0xbee8030000	                          mov esi, 0x3e8	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a60	      0xbf00000000	                              mov edi, 0	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a65	      0xe800000000	                          call 0x4003a6a	      2118	ldlang.c	FUNCTION_53	IF_4	CALL_21
0x4003a6a	    0x488b05000000	            mov rax, qword [0x04003a71] 	      2119	ldlang.c	FUNCTION_53	IF_4	CALL_22
0x4003a71	      0xba00000000	                              mov edx, 0	      2119	ldlang.c	FUNCTION_53	IF_4	CALL_22
0x4003a76	      0xbe00000000	                              mov esi, 0	      2119	ldlang.c	FUNCTION_53	IF_4	CALL_22
0x4003a7b	          0x4889c7	                            mov rdi, rax	      2119	ldlang.c	FUNCTION_53	IF_4	CALL_22
0x4003a7e	      0xe800000000	                          call 0x4003a83	      2119	ldlang.c	FUNCTION_53	IF_4	CALL_22
0x4003a83	    0x8b0500000000	            mov eax, dword [0x04003a89] 	      2121	ldlang.c	FUNCTION_53
0x4003a89	          0x83c001	                              add eax, 1	      2121	ldlang.c	FUNCTION_53
0x4003a8c	    0x890500000000	            mov dword [0x04003a92], eax 	      2121	ldlang.c	FUNCTION_53
0x4003a92	      0xe80c470000	               call sym.print_statements	      2122	ldlang.c	FUNCTION_53	CALL_23
0x4003a97	    0x488b15000000	            mov rdx, qword [0x04003a9e] 	      2124	ldlang.c	FUNCTION_53	CALL_24
0x4003a9e	    0x488b05000000	            mov rax, qword [0x04003aa5] 	      2124	ldlang.c	FUNCTION_53	CALL_24
0x4003aa5	      0xbe00000000	                              mov esi, 0	      2124	ldlang.c	FUNCTION_53	CALL_24
0x4003aaa	          0x4889c7	                            mov rdi, rax	      2124	ldlang.c	FUNCTION_53	CALL_24
0x4003aad	      0xe800000000	                          call 0x4003ab2	      2124	ldlang.c	FUNCTION_53	CALL_24
0x4003ab2	              0x90	                                     nop	      2126	ldlang.c	FUNCTION_53
0x4003ab3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2126	ldlang.c	FUNCTION_53
0x4003ab7	    0x644833042528	                xor rax, qword fs:[0x28]	      2126	ldlang.c	FUNCTION_53
0x4003ac0	            0x7405	                            je 0x4003ac7	      2126	ldlang.c	FUNCTION_53
0x4003ac2	      0xe800000000	                          call 0x4003ac7	      2126	ldlang.c	FUNCTION_53
0x4003ac7	    0x4881c4980000	                           add rsp, 0x98	      2126	ldlang.c	FUNCTION_53
0x4003ace	              0x5b	                                 pop rbx	      2126	ldlang.c	FUNCTION_53
0x4003acf	            0x415c	                                 pop r12	      2126	ldlang.c	FUNCTION_53
0x4003ad1	            0x415d	                                 pop r13	      2126	ldlang.c	FUNCTION_53
0x4003ad3	              0x5d	                                 pop rbp	      2126	ldlang.c	FUNCTION_53
0x4003ad4	              0xc3	                                     ret	      2126	ldlang.c	FUNCTION_53
insert_pad	functions,0:ELSE,2:FOR,0:CALL,1:IF,5:DO,0:WHILE,0:SWITCH,0	88
0x4008249	              0x55	                                push rbp	      4642	ldlang.c	FUNCTION_108
0x400824a	          0x4889e5	                            mov rbp, rsp	      4642	ldlang.c	FUNCTION_108
0x400824d	        0x4883ec40	                           sub rsp, 0x40	      4642	ldlang.c	FUNCTION_108
0x4008251	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4642	ldlang.c	FUNCTION_108
0x4008255	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4642	ldlang.c	FUNCTION_108
0x4008259	        0x488955d8	             mov qword [rbp - 0x28], rdx	      4642	ldlang.c	FUNCTION_108
0x400825d	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      4642	ldlang.c	FUNCTION_108
0x4008261	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      4642	ldlang.c	FUNCTION_108
0x4008265	    0x48c745f80000	                  mov qword [rbp - 8], 0	      4644	ldlang.c	FUNCTION_108
0x400826d	    0x48817de80000	               cmp qword [rbp - 0x18], 0	      4646	ldlang.c	FUNCTION_108	IF_1
0x4008275	            0x7408	                            je 0x400827f	      4646	ldlang.c	FUNCTION_108	IF_1
0x4008277	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4647	ldlang.c	FUNCTION_108	IF_1
0x400827b	        0x488945f8	                mov qword [rbp - 8], rax	      4647	ldlang.c	FUNCTION_108	IF_1
0x400827f	      0x48837df800	                  cmp qword [rbp - 8], 0	      4649	ldlang.c	FUNCTION_108	IF_2
0x4008284	            0x741e	                            je 0x40082a4	      4649	ldlang.c	FUNCTION_108	IF_2
0x4008286	        0x488b45f8	                mov rax, qword [rbp - 8]	      4650	ldlang.c	FUNCTION_108	IF_2
0x400828a	          0x8b4008	                mov eax, dword [rax + 8]	      4650	ldlang.c	FUNCTION_108	IF_2
0x400828d	          0x83f80c	                            cmp eax, 0xc	      4650	ldlang.c	FUNCTION_108	IF_2
0x4008290	            0x7512	                           jne 0x40082a4	      4650	ldlang.c	FUNCTION_108	IF_2
0x4008292	        0x488b45f8	                mov rax, qword [rbp - 8]	      4651	ldlang.c	FUNCTION_108	IF_2
0x4008296	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4651	ldlang.c	FUNCTION_108	IF_2
0x400829a	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      4651	ldlang.c	FUNCTION_108	IF_2
0x400829e	     0xf8485000000	                            je 0x4008329	      4651	ldlang.c	FUNCTION_108	IF_2
0x40082a4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4655	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082a8	          0x488b00	                    mov rax, qword [rax]	      4655	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082ab	        0x488945f8	                mov qword [rbp - 8], rax	      4655	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082af	      0x48837df800	                  cmp qword [rbp - 8], 0	      4655	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082b4	            0x741a	                            je 0x40082d0	      4655	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082b6	        0x488b45f8	                mov rax, qword [rbp - 8]	      4656	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082ba	          0x8b4008	                mov eax, dword [rax + 8]	      4656	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082bd	          0x83f80c	                            cmp eax, 0xc	      4656	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082c0	            0x750e	                           jne 0x40082d0	      4656	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082c2	        0x488b45f8	                mov rax, qword [rbp - 8]	      4657	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082c6	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4657	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082ca	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      4657	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082ce	            0x7459	                            je 0x4008329	      4657	ldlang.c	FUNCTION_108	ELSE_1	IF_3
0x40082d0	      0xbf30000000	                           mov edi, 0x30	      4664	ldlang.c	FUNCTION_108	ELSE_2
0x40082d5	      0xe800000000	                          call 0x40082da	      4664	ldlang.c	FUNCTION_108	ELSE_2
0x40082da	        0x488945f8	                mov qword [rbp - 8], rax	      4664	ldlang.c	FUNCTION_108	ELSE_2
0x40082de	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4666	ldlang.c	FUNCTION_108	ELSE_2
0x40082e2	          0x488b10	                    mov rdx, qword [rax]	      4666	ldlang.c	FUNCTION_108	ELSE_2
0x40082e5	        0x488b45f8	                mov rax, qword [rbp - 8]	      4666	ldlang.c	FUNCTION_108	ELSE_2
0x40082e9	          0x488910	                    mov qword [rax], rdx	      4666	ldlang.c	FUNCTION_108	ELSE_2
0x40082ec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4667	ldlang.c	FUNCTION_108	ELSE_2
0x40082f0	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4667	ldlang.c	FUNCTION_108	ELSE_2
0x40082f4	          0x488910	                    mov qword [rax], rdx	      4667	ldlang.c	FUNCTION_108	ELSE_2
0x40082f7	        0x488b45f8	                mov rax, qword [rbp - 8]	      4668	ldlang.c	FUNCTION_108	ELSE_2
0x40082fb	    0xc740080c0000	                mov dword [rax + 8], 0xc	      4668	ldlang.c	FUNCTION_108	ELSE_2
0x4008302	        0x488b45f8	                mov rax, qword [rbp - 8]	      4669	ldlang.c	FUNCTION_108	ELSE_2
0x4008306	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      4669	ldlang.c	FUNCTION_108	ELSE_2
0x400830a	        0x48895020	             mov qword [rax + 0x20], rdx	      4669	ldlang.c	FUNCTION_108	ELSE_2
0x400830e	      0x48837de000	               cmp qword [rbp - 0x20], 0	      4670	ldlang.c	FUNCTION_108	ELSE_2	IF_4
0x4008313	            0x7508	                           jne 0x400831d	      4670	ldlang.c	FUNCTION_108	ELSE_2	IF_4
0x4008315	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      4671	ldlang.c	FUNCTION_108	ELSE_2	IF_4
0x400831d	        0x488b45f8	                mov rax, qword [rbp - 8]	      4672	ldlang.c	FUNCTION_108	ELSE_2
0x4008321	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      4672	ldlang.c	FUNCTION_108	ELSE_2
0x4008325	        0x48895028	             mov qword [rax + 0x28], rdx	      4672	ldlang.c	FUNCTION_108	ELSE_2
0x4008329	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4674	ldlang.c	FUNCTION_108
0x400832d	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4674	ldlang.c	FUNCTION_108
0x4008331	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      4674	ldlang.c	FUNCTION_108
0x4008335	          0x4829c2	                            sub rdx, rax	      4674	ldlang.c	FUNCTION_108
0x4008338	        0x488b45f8	                mov rax, qword [rbp - 8]	      4674	ldlang.c	FUNCTION_108
0x400833c	        0x48895010	             mov qword [rax + 0x10], rdx	      4674	ldlang.c	FUNCTION_108
0x4008340	        0x488b45f8	                mov rax, qword [rbp - 8]	      4675	ldlang.c	FUNCTION_108
0x4008344	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      4675	ldlang.c	FUNCTION_108
0x4008348	        0x48895018	             mov qword [rax + 0x18], rdx	      4675	ldlang.c	FUNCTION_108
0x400834c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4676	ldlang.c	FUNCTION_108	IF_5
0x4008350	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4676	ldlang.c	FUNCTION_108	IF_5
0x4008353	      0x2500080000	                          and eax, 0x800	      4676	ldlang.c	FUNCTION_108	IF_5
0x4008358	            0x85c0	                           test eax, eax	      4676	ldlang.c	FUNCTION_108	IF_5
0x400835a	            0x7534	                           jne 0x4008390	      4676	ldlang.c	FUNCTION_108	IF_5
0x400835c	    0x8b0500000000	            mov eax, dword [0x04008362] 	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008362	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008366	            0x89c1	                            mov ecx, eax	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008368	          0x48d3ea	                             shr rdx, cl	      4677	ldlang.c	FUNCTION_108	IF_5
0x400836b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4677	ldlang.c	FUNCTION_108	IF_5
0x400836f	          0x4801c2	                            add rdx, rax	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008372	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008376	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4677	ldlang.c	FUNCTION_108	IF_5
0x400837a	          0x4829c2	                            sub rdx, rax	      4677	ldlang.c	FUNCTION_108	IF_5
0x400837d	    0x8b0500000000	            mov eax, dword [0x04008383] 	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008383	            0x89c1	                            mov ecx, eax	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008385	          0x48d3e2	                             shl rdx, cl	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008388	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4677	ldlang.c	FUNCTION_108	IF_5
0x400838c	        0x48895038	             mov qword [rax + 0x38], rdx	      4677	ldlang.c	FUNCTION_108	IF_5
0x4008390	              0x90	                                     nop	      4679	ldlang.c	FUNCTION_108
0x4008391	              0xc9	                                   leave	      4679	ldlang.c	FUNCTION_108
0x4008392	              0xc3	                                     ret	      4679	ldlang.c	FUNCTION_108
lang_add_entry	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	19
0x400d3db	              0x55	                                push rbp	      7491	ldlang.c	FUNCTION_166
0x400d3dc	          0x4889e5	                            mov rbp, rsp	      7491	ldlang.c	FUNCTION_166
0x400d3df	        0x48897df8	                mov qword [rbp - 8], rdi	      7491	ldlang.c	FUNCTION_166
0x400d3e3	          0x8975f4	              mov dword [rbp - 0xc], esi	      7491	ldlang.c	FUNCTION_166
0x400d3e6	    0x488b05000000	            mov rax, qword [0x0400d3ed] 	      7492	ldlang.c	FUNCTION_166	IF_1
0x400d3ed	          0x4885c0	                           test rax, rax	      7492	ldlang.c	FUNCTION_166	IF_1
0x400d3f0	            0x7410	                            je 0x400d402	      7492	ldlang.c	FUNCTION_166	IF_1
0x400d3f2	        0x837df400	                cmp dword [rbp - 0xc], 0	      7493	ldlang.c	FUNCTION_166	IF_1
0x400d3f6	            0x750a	                           jne 0x400d402	      7493	ldlang.c	FUNCTION_166	IF_1
0x400d3f8	    0x8b0500000000	            mov eax, dword [0x0400d3fe] 	      7494	ldlang.c	FUNCTION_166	IF_1
0x400d3fe	            0x85c0	                           test eax, eax	      7494	ldlang.c	FUNCTION_166	IF_1
0x400d400	            0x7514	                           jne 0x400d416	      7494	ldlang.c	FUNCTION_166	IF_1
0x400d402	        0x488b45f8	                mov rax, qword [rbp - 8]	      7496	ldlang.c	FUNCTION_166	IF_1
0x400d406	    0x488905000000	            mov qword [0x0400d40d], rax 	      7496	ldlang.c	FUNCTION_166	IF_1
0x400d40d	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      7497	ldlang.c	FUNCTION_166	IF_1
0x400d410	    0x890500000000	            mov dword [0x0400d416], eax 	      7497	ldlang.c	FUNCTION_166	IF_1
0x400d416	              0x90	                                     nop	      7499	ldlang.c	FUNCTION_166
0x400d417	              0x5d	                                 pop rbp	      7499	ldlang.c	FUNCTION_166
0x400d418	              0xc3	                                     ret	      7499	ldlang.c	FUNCTION_166
os_region_check	functions,0:ELSE,1:FOR,0:CALL,4:IF,3:DO,0:WHILE,0:SWITCH,0	89
0x4008c14	              0x55	                                push rbp	      4950	ldlang.c	FUNCTION_113
0x4008c15	          0x4889e5	                            mov rbp, rsp	      4950	ldlang.c	FUNCTION_113
0x4008c18	            0x4156	                                push r14	      4950	ldlang.c	FUNCTION_113
0x4008c1a	            0x4155	                                push r13	      4950	ldlang.c	FUNCTION_113
0x4008c1c	            0x4154	                                push r12	      4950	ldlang.c	FUNCTION_113
0x4008c1e	              0x53	                                push rbx	      4950	ldlang.c	FUNCTION_113
0x4008c1f	        0x4883ec20	                           sub rsp, 0x20	      4950	ldlang.c	FUNCTION_113
0x4008c23	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4950	ldlang.c	FUNCTION_113
0x4008c27	        0x488975d0	             mov qword [rbp - 0x30], rsi	      4950	ldlang.c	FUNCTION_113
0x4008c2b	        0x488955c8	             mov qword [rbp - 0x38], rdx	      4950	ldlang.c	FUNCTION_113
0x4008c2f	        0x48894dc0	             mov qword [rbp - 0x40], rcx	      4950	ldlang.c	FUNCTION_113
0x4008c33	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c37	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c3b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c3f	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c43	          0x4839c2	                            cmp rdx, rax	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c46	            0x7224	                            jb 0x4008c6c	      4951	ldlang.c	FUNCTION_113	IF_1
0x4008c48	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c4c	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c50	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c54	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c58	          0x4829c2	                            sub rdx, rax	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c5b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c5f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c63	          0x4839c2	                            cmp rdx, rax	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c66	     0xf86d7000000	                           jbe 0x4008d43	      4952	ldlang.c	FUNCTION_113	IF_1
0x4008c6c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c70	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c74	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c78	        0x488b4820	            mov rcx, qword [rax + 0x20] 	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c7c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c80	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c84	          0x4801c8	                            add rax, rcx	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c87	          0x4839c2	                            cmp rdx, rax	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c8a	            0x750b	                           jne 0x4008c97	      4953	ldlang.c	FUNCTION_113	IF_1
0x4008c8c	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      4954	ldlang.c	FUNCTION_113	IF_1
0x4008c91	     0xf85ac000000	                           jne 0x4008d43	      4954	ldlang.c	FUNCTION_113	IF_1
0x4008c97	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      4956	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008c9c	            0x744e	                            je 0x4008cec	      4956	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008c9e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008ca2	          0x4c8b30	                    mov r14, qword [rax]	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008ca5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4962	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008ca9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4962	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008cad	          0x4c8b28	                    mov r13, qword [rax]	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cb0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4961	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008cb4	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4961	ldlang.c	FUNCTION_113	IF_1	IF_2
0x4008cb8	    0x4c8ba0f00000	            mov r12, qword [rax + 0xf0] 	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cbf	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cc3	        0x488b5838	            mov rbx, qword [rax + 0x38] 	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cc7	      0xbf00000000	                              mov edi, 0	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008ccc	      0xe800000000	                          call 0x4008cd1	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cd1	          0x4d89f0	                             mov r8, r14	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cd4	          0x4c89e9	                            mov rcx, r13	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cd7	          0x4c89e2	                            mov rdx, r12	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cda	          0x4889de	                            mov rsi, rbx	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cdd	          0x4889c7	                            mov rdi, rax	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008ce0	      0xb800000000	                              mov eax, 0	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008ce5	      0xe800000000	                          call 0x4008cea	      4958	ldlang.c	FUNCTION_113	IF_1	IF_2	CALL_2
0x4008cea	            0xeb57	                           jmp 0x4008d43	      4975	ldlang.c	FUNCTION_113
0x4008cec	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4965	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008cf0	          0x8b4050	            mov eax, dword [rax + 0x50] 	      4965	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008cf3	            0x85c0	                           test eax, eax	      4965	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008cf5	            0x754c	                           jne 0x4008d43	      4965	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008cf7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4967	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008cfb	    0xc74050010000	               mov dword [rax + 0x50], 1	      4967	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008d02	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d06	          0x4c8b28	                    mov r13, qword [rax]	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d09	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4971	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008d0d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4971	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008d11	          0x4c8b20	                    mov r12, qword [rax]	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d14	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4970	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008d18	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4970	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3
0x4008d1c	    0x488b98f00000	            mov rbx, qword [rax + 0xf0] 	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d23	      0xbf00000000	                              mov edi, 0	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d28	      0xe800000000	                          call 0x4008d2d	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d2d	          0x4c89e9	                            mov rcx, r13	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d30	          0x4c89e2	                            mov rdx, r12	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d33	          0x4889de	                            mov rsi, rbx	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d36	          0x4889c7	                            mov rdi, rax	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d39	      0xb800000000	                              mov eax, 0	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d3e	      0xe800000000	                          call 0x4008d43	      4969	ldlang.c	FUNCTION_113	IF_1	ELSE_1	IF_3	CALL_4
0x4008d43	              0x90	                                     nop	      4975	ldlang.c	FUNCTION_113
0x4008d44	        0x4883c420	                           add rsp, 0x20	      4975	ldlang.c	FUNCTION_113
0x4008d48	              0x5b	                                 pop rbx	      4975	ldlang.c	FUNCTION_113
0x4008d49	            0x415c	                                 pop r12	      4975	ldlang.c	FUNCTION_113
0x4008d4b	            0x415d	                                 pop r13	      4975	ldlang.c	FUNCTION_113
0x4008d4d	            0x415e	                                 pop r14	      4975	ldlang.c	FUNCTION_113
0x4008d4f	              0x5d	                                 pop rbp	      4975	ldlang.c	FUNCTION_113
0x4008d50	              0xc3	                                     ret	      4975	ldlang.c	FUNCTION_113
lang_append_dynamic_list_cpp_new	functions,0:ELSE,0:FOR,1:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	32
0x400f6a8	              0x55	                                push rbp	      8710	ldlang.c	FUNCTION_206
0x400f6a9	          0x4889e5	                            mov rbp, rsp	      8710	ldlang.c	FUNCTION_206
0x400f6ac	        0x4883ec30	                           sub rsp, 0x30	      8710	ldlang.c	FUNCTION_206
0x400f6b0	    0x64488b042528	                mov rax, qword fs:[0x28]	      8710	ldlang.c	FUNCTION_206
0x400f6b9	        0x488945f8	                mov qword [rbp - 8], rax	      8710	ldlang.c	FUNCTION_206
0x400f6bd	            0x31c0	                            xor eax, eax	      8710	ldlang.c	FUNCTION_206
0x400f6bf	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      8711	ldlang.c	FUNCTION_206
0x400f6c7	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      8711	ldlang.c	FUNCTION_206
0x400f6cf	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      8716	ldlang.c	FUNCTION_206
0x400f6d7	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      8719	ldlang.c	FUNCTION_206	FOR_1	CALL_1
0x400f6de	            0xeb26	                           jmp 0x400f706	      8719	ldlang.c	FUNCTION_206	FOR_1	CALL_1
0x400f6e0	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6e3	      0x488b74c5e0	     mov rsi, qword [rbp + rax*8 - 0x20]	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6e8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6ec	      0xb900000000	                              mov ecx, 0	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6f1	      0xba00000000	                              mov edx, 0	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6f6	          0x4889c7	                            mov rdi, rax	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6f9	      0xe800000000	                          call 0x400f6fe	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f6fe	        0x488945d8	             mov qword [rbp - 0x28], rax	      8720	ldlang.c	FUNCTION_206	FOR_1	CALL_2
0x400f702	        0x8345d401	               add dword [rbp - 0x2c], 1	      8719	ldlang.c	FUNCTION_206	FOR_1	CALL_1
0x400f706	        0x837dd401	               cmp dword [rbp - 0x2c], 1	      8719	ldlang.c	FUNCTION_206	FOR_1	CALL_1
0x400f70a	            0x76d4	                           jbe 0x400f6e0	      8719	ldlang.c	FUNCTION_206	FOR_1	CALL_1
0x400f70c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8723	ldlang.c	FUNCTION_206	CALL_3
0x400f710	          0x4889c7	                            mov rdi, rax	      8723	ldlang.c	FUNCTION_206	CALL_3
0x400f713	      0xe800000000	                          call 0x400f718	      8723	ldlang.c	FUNCTION_206	CALL_3
0x400f718	              0x90	                                     nop	      8724	ldlang.c	FUNCTION_206
0x400f719	        0x488b45f8	                mov rax, qword [rbp - 8]	      8724	ldlang.c	FUNCTION_206
0x400f71d	    0x644833042528	                xor rax, qword fs:[0x28]	      8724	ldlang.c	FUNCTION_206
0x400f726	            0x7405	                            je 0x400f72d	      8724	ldlang.c	FUNCTION_206
0x400f728	      0xe800000000	                          call 0x400f72d	      8724	ldlang.c	FUNCTION_206
0x400f72d	              0xc9	                                   leave	      8724	ldlang.c	FUNCTION_206
0x400f72e	              0xc3	                                     ret	      8724	ldlang.c	FUNCTION_206
lang_add_section	functions,0:ELSE,4:FOR,0:CALL,5:IF,19:DO,0:WHILE,0:SWITCH,1	250
0x400410d	              0x55	                                push rbp	      2319	ldlang.c	FUNCTION_59
0x400410e	          0x4889e5	                            mov rbp, rsp	      2319	ldlang.c	FUNCTION_59
0x4004111	        0x4883ec50	                           sub rsp, 0x50	      2319	ldlang.c	FUNCTION_59
0x4004115	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      2319	ldlang.c	FUNCTION_59
0x4004119	        0x488975c0	             mov qword [rbp - 0x40], rsi	      2319	ldlang.c	FUNCTION_59
0x400411d	        0x488955b8	             mov qword [rbp - 0x48], rdx	      2319	ldlang.c	FUNCTION_59
0x4004121	        0x48894db0	             mov qword [rbp - 0x50], rcx	      2319	ldlang.c	FUNCTION_59
0x4004125	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2320	ldlang.c	FUNCTION_59
0x4004129	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2320	ldlang.c	FUNCTION_59
0x400412c	          0x8945dc	             mov dword [rbp - 0x24], eax	      2320	ldlang.c	FUNCTION_59
0x400412f	    0x488b05000000	            mov rax, qword [0x04004136] 	      2324	ldlang.c	FUNCTION_59
0x4004136	        0x488945e8	             mov qword [rbp - 0x18], rax	      2324	ldlang.c	FUNCTION_59
0x400413a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2327	ldlang.c	FUNCTION_59	CALL_1
0x400413e	          0x4889c7	                            mov rdi, rax	      2327	ldlang.c	FUNCTION_59	CALL_1
0x4004141	      0xe84dffffff	         call sym.lang_discard_section_p	      2327	ldlang.c	FUNCTION_59	CALL_1
0x4004146	          0x8945e0	             mov dword [rbp - 0x20], eax	      2327	ldlang.c	FUNCTION_59	CALL_1
0x4004149	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x400414d	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x4004151	      0xbe00000000	                              mov esi, 0	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x4004156	          0x4889c7	                            mov rdi, rax	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x4004159	      0xe800000000	                          call 0x400415e	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x400415e	            0x85c0	                           test eax, eax	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x4004160	            0x7507	                           jne 0x4004169	      2331	ldlang.c	FUNCTION_59	IF_1	CALL_2
0x4004162	    0xc745e0010000	               mov dword [rbp - 0x20], 1	      2332	ldlang.c	FUNCTION_59	IF_1
0x4004169	        0x837de000	               cmp dword [rbp - 0x20], 0	      2334	ldlang.c	FUNCTION_59	IF_2
0x400416d	            0x7422	                            je 0x4004191	      2334	ldlang.c	FUNCTION_59	IF_2
0x400416f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2336	ldlang.c	FUNCTION_59	IF_2	IF_3
0x4004173	        0x488b4068	            mov rax, qword [rax + 0x68] 	      2336	ldlang.c	FUNCTION_59	IF_2	IF_3
0x4004177	          0x4885c0	                           test rax, rax	      2336	ldlang.c	FUNCTION_59	IF_2	IF_3
0x400417a	     0xf8546030000	                           jne 0x40044c6	      2336	ldlang.c	FUNCTION_59	IF_2	IF_3
0x4004180	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2339	ldlang.c	FUNCTION_59	IF_2	IF_3
0x4004184	    0x48c740680000	               mov qword [rax + 0x68], 0	      2339	ldlang.c	FUNCTION_59	IF_2	IF_3
0x400418c	      0xe935030000	                           jmp 0x40044c6	      2341	ldlang.c	FUNCTION_59	IF_2
0x4004191	      0x48837db800	               cmp qword [rbp - 0x48], 0	      2344	ldlang.c	FUNCTION_59	IF_4
0x4004196	            0x742e	                            je 0x40041c6	      2344	ldlang.c	FUNCTION_59	IF_4
0x4004198	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2348	ldlang.c	FUNCTION_59	IF_4
0x400419c	        0x488b4008	                mov rax, qword [rax + 8]	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041a0	    0x488b80f80200	           mov rax, qword [rax + 0x2f8] 	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041a7	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041ab	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041af	          0x4889ce	                            mov rsi, rcx	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041b2	      0xbf00000000	                              mov edi, 0	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041b7	            0xffd0	                                call rax	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041b9	          0x8945e4	             mov dword [rbp - 0x1c], eax	      2348	ldlang.c	FUNCTION_59	IF_4
0x40041bc	        0x837de400	               cmp dword [rbp - 0x1c], 0	      2349	ldlang.c	FUNCTION_59	IF_4	IF_5
0x40041c0	     0xf8403030000	                            je 0x40044c9	      2349	ldlang.c	FUNCTION_59	IF_4	IF_5
0x40041c6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2353	ldlang.c	FUNCTION_59	IF_6
0x40041ca	        0x488b4068	            mov rax, qword [rax + 0x68] 	      2353	ldlang.c	FUNCTION_59	IF_6
0x40041ce	          0x4885c0	                           test rax, rax	      2353	ldlang.c	FUNCTION_59	IF_6
0x40041d1	     0xf85f5020000	                           jne 0x40044cc	      2353	ldlang.c	FUNCTION_59	IF_6
0x40041d7	    0x8165dcfffdff	      and dword [rbp - 0x24], 0xfffffdff	      2362	ldlang.c	FUNCTION_59
0x40041de	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      2368	ldlang.c	FUNCTION_59	IF_7
0x40041e1	      0x2500000202	                      and eax, 0x2020000	      2368	ldlang.c	FUNCTION_59	IF_7
0x40041e6	      0x3d00000202	                      cmp eax, 0x2020000	      2368	ldlang.c	FUNCTION_59	IF_7
0x40041eb	            0x7520	                           jne 0x400420d	      2368	ldlang.c	FUNCTION_59	IF_7
0x40041ed	     0xfb605000000	           movzx eax, byte [0x040041f4] 	      2370	ldlang.c	FUNCTION_59	IF_7	IF_8
0x40041f4	          0x83e010	                           and eax, 0x10	      2370	ldlang.c	FUNCTION_59	IF_7	IF_8
0x40041f7	            0x84c0	                             test al, al	      2370	ldlang.c	FUNCTION_59	IF_7	IF_8
0x40041f9	            0x7409	                            je 0x4004204	      2370	ldlang.c	FUNCTION_59	IF_7	IF_8
0x40041fb	    0x8165dcfbfff1	      and dword [rbp - 0x24], 0xfff1fffb	      2371	ldlang.c	FUNCTION_59	IF_7	IF_8
0x4004202	            0xeb1e	                           jmp 0x4004222	      2371	ldlang.c	FUNCTION_59	IF_7	IF_8
0x4004204	    0x8165dcfbfff3	      and dword [rbp - 0x24], 0xfff3fffb	      2373	ldlang.c	FUNCTION_59	IF_7	ELSE_1
0x400420b	            0xeb15	                           jmp 0x4004222	      2373	ldlang.c	FUNCTION_59	IF_7	ELSE_1
0x400420d	     0xfb605000000	           movzx eax, byte [0x04004214] 	      2375	ldlang.c	FUNCTION_59	ELSE_2	IF_9	CALL_3
0x4004214	          0x83e003	                              and eax, 3	      2375	ldlang.c	FUNCTION_59	ELSE_2	IF_9	CALL_3
0x4004217	            0x3c02	                               cmp al, 2	      2375	ldlang.c	FUNCTION_59	ELSE_2	IF_9	CALL_3
0x4004219	            0x7407	                            je 0x4004222	      2375	ldlang.c	FUNCTION_59	ELSE_2	IF_9	CALL_3
0x400421b	    0x8165dcfbfff1	      and dword [rbp - 0x24], 0xfff1fffb	      2376	ldlang.c	FUNCTION_59	ELSE_2	IF_9
0x4004222	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x4004226	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x400422c	          0x83f802	                              cmp eax, 2	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x400422f	            0x7410	                            je 0x4004241	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x4004231	          0x83f802	                              cmp eax, 2	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x4004234	            0x7238	                            jb 0x400426e	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x4004236	          0x83f803	                              cmp eax, 3	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x4004239	            0x7534	                           jne 0x400426f	      2378	ldlang.c	FUNCTION_59	SWITCH_1
0x400423b	        0x8365dcfe	      and dword [rbp - 0x24], 0xfffffffe	      2384	ldlang.c	FUNCTION_59	SWITCH_1
0x400423f	            0xeb2e	                           jmp 0x400426f	      2385	ldlang.c	FUNCTION_59	SWITCH_1
0x4004241	        0x8365dcfd	      and dword [rbp - 0x24], 0xfffffffd	      2387	ldlang.c	FUNCTION_59	SWITCH_1
0x4004245	    0x814ddc000200	            or dword [rbp - 0x24], 0x200	      2388	ldlang.c	FUNCTION_59	SWITCH_1
0x400424c	    0x488b05000000	            mov rax, qword [0x04004253] 	      2393	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x4004253	        0x488b4008	                mov rax, qword [rax + 8]	      2393	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x4004257	          0x8b4008	                mov eax, dword [rax + 8]	      2393	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x400425a	          0x83f805	                              cmp eax, 5	      2393	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x400425d	            0x7509	                           jne 0x4004268	      2393	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x400425f	    0x8165dcfffeff	      and dword [rbp - 0x24], 0xfffffeff	      2394	ldlang.c	FUNCTION_59	SWITCH_1	IF_10
0x4004266	            0xeb07	                           jmp 0x400426f	      2397	ldlang.c	FUNCTION_59	SWITCH_1
0x4004268	        0x8365dcfe	      and dword [rbp - 0x24], 0xfffffffe	      2396	ldlang.c	FUNCTION_59	SWITCH_1	ELSE_3
0x400426c	            0xeb01	                           jmp 0x400426f	      2397	ldlang.c	FUNCTION_59	SWITCH_1
0x400426e	              0x90	                                     nop	      2382	ldlang.c	FUNCTION_59	SWITCH_1
0x400426f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2400	ldlang.c	FUNCTION_59	IF_11
0x4004273	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2400	ldlang.c	FUNCTION_59	IF_11
0x4004277	          0x4885c0	                           test rax, rax	      2400	ldlang.c	FUNCTION_59	IF_11
0x400427a	            0x7511	                           jne 0x400428d	      2400	ldlang.c	FUNCTION_59	IF_11
0x400427c	          0x8b55dc	             mov edx, dword [rbp - 0x24]	      2401	ldlang.c	FUNCTION_59	CALL_4
0x400427f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2401	ldlang.c	FUNCTION_59	CALL_4
0x4004283	            0x89d6	                            mov esi, edx	      2401	ldlang.c	FUNCTION_59	CALL_4
0x4004285	          0x4889c7	                            mov rdi, rax	      2401	ldlang.c	FUNCTION_59	CALL_4
0x4004288	      0xe888faffff	                        call sym.init_os	      2401	ldlang.c	FUNCTION_59	CALL_4
0x400428d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2405	ldlang.c	FUNCTION_59
0x4004291	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2405	ldlang.c	FUNCTION_59
0x4004295	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2405	ldlang.c	FUNCTION_59
0x4004299	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2405	ldlang.c	FUNCTION_59
0x400429d	          0x8b5220	            mov edx, dword [rdx + 0x20] 	      2405	ldlang.c	FUNCTION_59
0x40042a0	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	      2405	ldlang.c	FUNCTION_59
0x40042a3	          0x83c9f7	                      or ecx, 0xfffffff7	      2405	ldlang.c	FUNCTION_59
0x40042a6	            0x21ca	                            and edx, ecx	      2405	ldlang.c	FUNCTION_59
0x40042a8	          0x895020	             mov dword [rax + 0x20], edx	      2405	ldlang.c	FUNCTION_59
0x40042ab	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042af	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042b3	         0xfb64024	           movzx eax, byte [rax + 0x24] 	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042b7	          0x83e004	                              and eax, 4	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042ba	            0x84c0	                             test al, al	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042bc	            0x7466	                            je 0x4004324	      2407	ldlang.c	FUNCTION_59	IF_12
0x40042be	        0x8365dcf7	      and dword [rbp - 0x24], 0xfffffff7	      2410	ldlang.c	FUNCTION_59	IF_12
0x40042c2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2413	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042c6	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2413	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042ca	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2413	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042cd	          0x3345dc	             xor eax, dword [rbp - 0x24]	      2414	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042d0	      0x2500008001	                      and eax, 0x1800000	      2414	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042d5	            0x85c0	                           test eax, eax	      2413	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042d7	            0x7528	                           jne 0x4004301	      2413	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042d9	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      2415	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042dc	      0x2500008000	                       and eax, 0x800000	      2415	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042e1	            0x85c0	                           test eax, eax	      2415	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042e3	            0x743f	                            je 0x4004324	      2415	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042e5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042e9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042ed	    0x8b90c4000000	            mov edx, dword [rax + 0xc4] 	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042f3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042f7	    0x8b80c4000000	            mov eax, dword [rax + 0xc4] 	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042fd	            0x39c2	                            cmp edx, eax	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x40042ff	            0x7423	                            je 0x4004324	      2416	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004301	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004305	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004309	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x400430d	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004311	          0x8b5220	            mov edx, dword [rdx + 0x20] 	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004314	    0x81e2ffff7ffe	                     and edx, 0xfe7fffff	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x400431a	          0x895020	             mov dword [rax + 0x20], edx	      2418	ldlang.c	FUNCTION_59	IF_12	IF_13
0x400431d	    0x8165dcffff7f	      and dword [rbp - 0x24], 0xfe7fffff	      2419	ldlang.c	FUNCTION_59	IF_12	IF_13
0x4004324	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2422	ldlang.c	FUNCTION_59
0x4004328	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2422	ldlang.c	FUNCTION_59
0x400432c	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2422	ldlang.c	FUNCTION_59
0x4004330	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	      2422	ldlang.c	FUNCTION_59
0x4004334	          0x8b5220	            mov edx, dword [rdx + 0x20] 	      2422	ldlang.c	FUNCTION_59
0x4004337	           0xb55dc	              or edx, dword [rbp - 0x24]	      2422	ldlang.c	FUNCTION_59
0x400433a	          0x895020	             mov dword [rax + 0x20], edx	      2422	ldlang.c	FUNCTION_59
0x400433d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2424	ldlang.c	FUNCTION_59	IF_14
0x4004341	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2424	ldlang.c	FUNCTION_59	IF_14
0x4004345	         0xfb64024	           movzx eax, byte [rax + 0x24] 	      2424	ldlang.c	FUNCTION_59	IF_14
0x4004349	          0x83e004	                              and eax, 4	      2424	ldlang.c	FUNCTION_59	IF_14
0x400434c	            0x84c0	                             test al, al	      2424	ldlang.c	FUNCTION_59	IF_14
0x400434e	            0x756e	                           jne 0x40043be	      2424	ldlang.c	FUNCTION_59	IF_14
0x4004350	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2426	ldlang.c	FUNCTION_59	IF_14
0x4004354	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2426	ldlang.c	FUNCTION_59	IF_14
0x4004358	         0xfb65024	           movzx edx, byte [rax + 0x24] 	      2426	ldlang.c	FUNCTION_59	IF_14
0x400435c	          0x83ca04	                               or edx, 4	      2426	ldlang.c	FUNCTION_59	IF_14
0x400435f	          0x885024	               mov byte [rax + 0x24], dl	      2426	ldlang.c	FUNCTION_59	IF_14
0x4004362	    0x488b05000000	            mov rax, qword [0x04004369] 	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004369	        0x488b4008	                mov rax, qword [rax + 8]	      2430	ldlang.c	FUNCTION_59	IF_14
0x400436d	    0x488b80480100	           mov rax, qword [rax + 0x148] 	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004374	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004378	        0x488b4a38	            mov rcx, qword [rdx + 0x38] 	      2430	ldlang.c	FUNCTION_59	IF_14
0x400437c	    0x488b15000000	            mov rdx, qword [0x04004383] 	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004383	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004387	    0x488bbef00000	            mov rdi, qword [rsi + 0xf0] 	      2430	ldlang.c	FUNCTION_59	IF_14
0x400438e	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004392	    0x41b800000000	                              mov r8d, 0	      2430	ldlang.c	FUNCTION_59	IF_14
0x4004398	            0xffd0	                                call rax	      2430	ldlang.c	FUNCTION_59	IF_14
0x400439a	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      2434	ldlang.c	FUNCTION_59	IF_14	IF_15
0x400439d	      0x2500008000	                       and eax, 0x800000	      2434	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043a2	            0x85c0	                           test eax, eax	      2434	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043a4	            0x7418	                            je 0x40043be	      2434	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043a6	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2435	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043aa	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2435	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043ae	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2435	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043b2	    0x8b92c4000000	            mov edx, dword [rdx + 0xc4] 	      2435	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043b8	    0x8990c4000000	             mov dword [rax + 0xc4], edx	      2435	ldlang.c	FUNCTION_59	IF_14	IF_15
0x40043be	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      2438	ldlang.c	FUNCTION_59	IF_16
0x40043c1	      0x2500000010	                     and eax, 0x10000000	      2438	ldlang.c	FUNCTION_59	IF_16
0x40043c6	            0x85c0	                           test eax, eax	      2438	ldlang.c	FUNCTION_59	IF_16
0x40043c8	            0x7423	                            je 0x40043ed	      2438	ldlang.c	FUNCTION_59	IF_16
0x40043ca	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043ce	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043d5	          0x4889c7	                            mov rdi, rax	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043d8	      0xe800000000	                          call 0x40043dd	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043dd	          0x83f826	                           cmp eax, 0x26	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043e0	            0x750b	                           jne 0x40043ed	      2439	ldlang.c	FUNCTION_59	IF_16	CALL_5
0x40043e2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2442	ldlang.c	FUNCTION_59	IF_16
0x40043e6	    0xc74078800000	           mov dword [rax + 0x78], 0x80 	      2442	ldlang.c	FUNCTION_59	IF_16
0x40043ed	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2445	ldlang.c	FUNCTION_59	IF_17
0x40043f1	          0x8b5070	            mov edx, dword [rax + 0x70] 	      2445	ldlang.c	FUNCTION_59	IF_17
0x40043f4	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2445	ldlang.c	FUNCTION_59	IF_17
0x40043f8	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2445	ldlang.c	FUNCTION_59	IF_17
0x40043fc	          0x8b4070	            mov eax, dword [rax + 0x70] 	      2445	ldlang.c	FUNCTION_59	IF_17
0x40043ff	            0x39c2	                            cmp edx, eax	      2445	ldlang.c	FUNCTION_59	IF_17
0x4004401	            0x7612	                           jbe 0x4004415	      2445	ldlang.c	FUNCTION_59	IF_17
0x4004403	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2446	ldlang.c	FUNCTION_59	IF_17
0x4004407	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2446	ldlang.c	FUNCTION_59	IF_17
0x400440b	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2446	ldlang.c	FUNCTION_59	IF_17
0x400440f	          0x8b5270	            mov edx, dword [rdx + 0x70] 	      2446	ldlang.c	FUNCTION_59	IF_17
0x4004412	          0x895070	             mov dword [rax + 0x70], edx	      2446	ldlang.c	FUNCTION_59	IF_17
0x4004415	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2448	ldlang.c	FUNCTION_59
0x4004419	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      2448	ldlang.c	FUNCTION_59
0x400441d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2448	ldlang.c	FUNCTION_59
0x4004421	        0x48895068	             mov qword [rax + 0x68], rdx	      2448	ldlang.c	FUNCTION_59
0x4004425	    0x8b0500000000	            mov eax, dword [0x0400442b] 	      2450	ldlang.c	FUNCTION_59	IF_18
0x400442b	            0x85c0	                           test eax, eax	      2450	ldlang.c	FUNCTION_59	IF_18
0x400442d	            0x756f	                           jne 0x400449e	      2450	ldlang.c	FUNCTION_59	IF_18
0x400442f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2452	ldlang.c	FUNCTION_59	IF_18
0x4004433	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2452	ldlang.c	FUNCTION_59	IF_18
0x4004437	    0x488b80100100	           mov rax, qword [rax + 0x110] 	      2452	ldlang.c	FUNCTION_59	IF_18
0x400443e	        0x488945f0	             mov qword [rbp - 0x10], rax	      2452	ldlang.c	FUNCTION_59	IF_18
0x4004442	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2453	ldlang.c	FUNCTION_59	IF_18
0x4004446	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2453	ldlang.c	FUNCTION_59	IF_18
0x400444a	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2453	ldlang.c	FUNCTION_59	IF_18
0x400444e	    0x488990100100	            mov qword [rax + 0x110], rdx	      2453	ldlang.c	FUNCTION_59	IF_18
0x4004455	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2454	ldlang.c	FUNCTION_59	IF_18
0x4004459	    0x48c780080100	              mov qword [rax + 0x108], 0	      2454	ldlang.c	FUNCTION_59	IF_18
0x4004464	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2455	ldlang.c	FUNCTION_59	IF_18
0x4004468	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2455	ldlang.c	FUNCTION_59	IF_18
0x400446c	    0x488990100100	            mov qword [rax + 0x110], rdx	      2455	ldlang.c	FUNCTION_59	IF_18
0x4004473	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2456	ldlang.c	FUNCTION_59	IF_18	IF_19
0x4004478	            0x7411	                            je 0x400448b	      2456	ldlang.c	FUNCTION_59	IF_18	IF_19
0x400447a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2457	ldlang.c	FUNCTION_59	IF_18	IF_19
0x400447e	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2457	ldlang.c	FUNCTION_59	IF_18	IF_19
0x4004482	    0x488990080100	            mov qword [rax + 0x108], rdx	      2457	ldlang.c	FUNCTION_59	IF_18	IF_19
0x4004489	            0xeb13	                           jmp 0x400449e	      2457	ldlang.c	FUNCTION_59	IF_18	IF_19
0x400448b	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2459	ldlang.c	FUNCTION_59	IF_18	ELSE_4
0x400448f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      2459	ldlang.c	FUNCTION_59	IF_18	ELSE_4
0x4004493	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2459	ldlang.c	FUNCTION_59	IF_18	ELSE_4
0x4004497	    0x488990080100	            mov qword [rax + 0x108], rdx	      2459	ldlang.c	FUNCTION_59	IF_18	ELSE_4
0x400449e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2463	ldlang.c	FUNCTION_59
0x40044a2	          0x4889c2	                            mov rdx, rax	      2463	ldlang.c	FUNCTION_59
0x40044a5	      0xbe18000000	                           mov esi, 0x18	      2463	ldlang.c	FUNCTION_59
0x40044aa	      0xbf05000000	                              mov edi, 5	      2463	ldlang.c	FUNCTION_59
0x40044af	      0xe8bbd5ffff	                  call sym.new_statement	      2463	ldlang.c	FUNCTION_59
0x40044b4	        0x488945f8	                mov qword [rbp - 8], rax	      2463	ldlang.c	FUNCTION_59
0x40044b8	        0x488b45f8	                mov rax, qword [rbp - 8]	      2464	ldlang.c	FUNCTION_59
0x40044bc	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2464	ldlang.c	FUNCTION_59
0x40044c0	        0x48895010	             mov qword [rax + 0x10], rdx	      2464	ldlang.c	FUNCTION_59
0x40044c4	            0xeb07	                           jmp 0x40044cd	      2464	ldlang.c	FUNCTION_59
0x40044c6	              0x90	                                     nop	      2341	ldlang.c	FUNCTION_59	IF_2
0x40044c7	            0xeb04	                           jmp 0x40044cd	      2341	ldlang.c	FUNCTION_59	IF_2
0x40044c9	              0x90	                                     nop	      2350	ldlang.c	FUNCTION_59	IF_4	IF_5
0x40044ca	            0xeb01	                           jmp 0x40044cd	      2350	ldlang.c	FUNCTION_59	IF_4	IF_5
0x40044cc	              0x90	                                     nop	      2354	ldlang.c	FUNCTION_59	IF_6
0x40044cd	              0xc9	                                   leave	      2465	ldlang.c	FUNCTION_59
0x40044ce	              0xc3	                                     ret	      2465	ldlang.c	FUNCTION_59
lang_new_vers_pattern	functions,0:ELSE,3:FOR,0:CALL,8:IF,4:DO,0:WHILE,0:SWITCH,0	101
0x400e8e3	              0x55	                                push rbp	      8294	ldlang.c	FUNCTION_194
0x400e8e4	          0x4889e5	                            mov rbp, rsp	      8294	ldlang.c	FUNCTION_194
0x400e8e7	        0x4883ec30	                           sub rsp, 0x30	      8294	ldlang.c	FUNCTION_194
0x400e8eb	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8294	ldlang.c	FUNCTION_194
0x400e8ef	        0x488975e0	             mov qword [rbp - 0x20], rsi	      8294	ldlang.c	FUNCTION_194
0x400e8f3	        0x488955d8	             mov qword [rbp - 0x28], rdx	      8294	ldlang.c	FUNCTION_194
0x400e8f7	          0x894dd4	             mov dword [rbp - 0x2c], ecx	      8294	ldlang.c	FUNCTION_194
0x400e8fa	      0xbf18000000	                           mov edi, 0x18	      8297	ldlang.c	FUNCTION_194	CALL_1
0x400e8ff	      0xe800000000	                          call 0x400e904	      8297	ldlang.c	FUNCTION_194	CALL_1
0x400e904	        0x488945f8	                mov qword [rbp - 8], rax	      8297	ldlang.c	FUNCTION_194	CALL_1
0x400e908	        0x488b45f8	                mov rax, qword [rbp - 8]	      8298	ldlang.c	FUNCTION_194
0x400e90c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8298	ldlang.c	FUNCTION_194
0x400e910	          0x488910	                    mov qword [rax], rdx	      8298	ldlang.c	FUNCTION_194
0x400e913	        0x488b45f8	                mov rax, qword [rbp - 8]	      8299	ldlang.c	FUNCTION_194
0x400e917	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8299	ldlang.c	FUNCTION_194
0x400e91b	          0x83e2fd	                     and edx, 0xfffffffd	      8299	ldlang.c	FUNCTION_194
0x400e91e	          0x885010	               mov byte [rax + 0x10], dl	      8299	ldlang.c	FUNCTION_194
0x400e921	        0x488b45f8	                mov rax, qword [rbp - 8]	      8300	ldlang.c	FUNCTION_194
0x400e925	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8300	ldlang.c	FUNCTION_194
0x400e929	          0x83e2fb	                     and edx, 0xfffffffb	      8300	ldlang.c	FUNCTION_194
0x400e92c	          0x885010	               mov byte [rax + 0x10], dl	      8300	ldlang.c	FUNCTION_194
0x400e92f	        0x488b45f8	                mov rax, qword [rbp - 8]	      8301	ldlang.c	FUNCTION_194
0x400e933	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8301	ldlang.c	FUNCTION_194
0x400e937	          0x83ca01	                               or edx, 1	      8301	ldlang.c	FUNCTION_194
0x400e93a	          0x885010	               mov byte [rax + 0x10], dl	      8301	ldlang.c	FUNCTION_194
0x400e93d	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e941	            0x750e	                           jne 0x400e951	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e943	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e947	          0x4889c7	                            mov rdi, rax	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e94a	      0xe88efeffff	                     call sym.realsymbol	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e94f	            0xeb04	                           jmp 0x400e955	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e951	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e955	        0x488b55f8	                mov rdx, qword [rbp - 8]	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e959	        0x48894208	                mov qword [rdx + 8], rax	      8302	ldlang.c	FUNCTION_194	CALL_2
0x400e95d	        0x488b45f8	                mov rax, qword [rbp - 8]	      8303	ldlang.c	FUNCTION_194	IF_1
0x400e961	        0x488b4008	                mov rax, qword [rax + 8]	      8303	ldlang.c	FUNCTION_194	IF_1
0x400e965	          0x4885c0	                           test rax, rax	      8303	ldlang.c	FUNCTION_194	IF_1
0x400e968	            0x751a	                           jne 0x400e984	      8303	ldlang.c	FUNCTION_194	IF_1
0x400e96a	        0x488b45f8	                mov rax, qword [rbp - 8]	      8305	ldlang.c	FUNCTION_194	IF_1
0x400e96e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      8305	ldlang.c	FUNCTION_194	IF_1
0x400e972	        0x48895008	                mov qword [rax + 8], rdx	      8305	ldlang.c	FUNCTION_194	IF_1
0x400e976	        0x488b45f8	                mov rax, qword [rbp - 8]	      8306	ldlang.c	FUNCTION_194	IF_1
0x400e97a	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8306	ldlang.c	FUNCTION_194	IF_1
0x400e97e	          0x83e2fe	                     and edx, 0xfffffffe	      8306	ldlang.c	FUNCTION_194	IF_1
0x400e981	          0x885010	               mov byte [rax + 0x10], dl	      8306	ldlang.c	FUNCTION_194	IF_1
0x400e984	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e989	            0x7415	                            je 0x400e9a0	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e98b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e98f	      0xbe00000000	                              mov esi, 0	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e994	          0x4889c7	                            mov rdi, rax	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e997	      0xe800000000	                          call 0x400e99c	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e99c	            0x85c0	                           test eax, eax	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e99e	            0x7516	                           jne 0x400e9b6	      8309	ldlang.c	FUNCTION_194	IF_2	CALL_3
0x400e9a0	        0x488b45f8	                mov rax, qword [rbp - 8]	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9a4	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9a8	          0x83e2c7	                     and edx, 0xffffffc7	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9ab	          0x83ca08	                               or edx, 8	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9ae	          0x885010	               mov byte [rax + 0x10], dl	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9b1	      0xe982000000	                           jmp 0x400ea38	      8310	ldlang.c	FUNCTION_194	IF_2
0x400e9b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9ba	      0xbe00000000	                              mov esi, 0	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9bf	          0x4889c7	                            mov rdi, rax	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9c2	      0xe800000000	                          call 0x400e9c7	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9c7	            0x85c0	                           test eax, eax	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9c9	            0x7513	                           jne 0x400e9de	      8311	ldlang.c	FUNCTION_194	ELSE_1	IF_3	CALL_4
0x400e9cb	        0x488b45f8	                mov rax, qword [rbp - 8]	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9cf	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9d3	          0x83e2c7	                     and edx, 0xffffffc7	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9d6	          0x83ca10	                            or edx, 0x10	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9d9	          0x885010	               mov byte [rax + 0x10], dl	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9dc	            0xeb5a	                           jmp 0x400ea38	      8312	ldlang.c	FUNCTION_194	ELSE_1	IF_3
0x400e9de	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9e2	      0xbe00000000	                              mov esi, 0	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9e7	          0x4889c7	                            mov rdi, rax	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9ea	      0xe800000000	                          call 0x400e9ef	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9ef	            0x85c0	                           test eax, eax	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9f1	            0x7513	                           jne 0x400ea06	      8313	ldlang.c	FUNCTION_194	ELSE_2	IF_4	CALL_5
0x400e9f3	        0x488b45f8	                mov rax, qword [rbp - 8]	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400e9f7	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400e9fb	          0x83e2c7	                     and edx, 0xffffffc7	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400e9fe	          0x83ca20	                            or edx, 0x20	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400ea01	          0x885010	               mov byte [rax + 0x10], dl	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400ea04	            0xeb32	                           jmp 0x400ea38	      8314	ldlang.c	FUNCTION_194	ELSE_2	IF_4
0x400ea06	      0xbf00000000	                              mov edi, 0	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea0b	      0xe800000000	                          call 0x400ea10	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea10	          0x4889c2	                            mov rdx, rax	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea13	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea17	          0x4889c6	                            mov rsi, rax	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea1a	          0x4889d7	                            mov rdi, rdx	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea1d	      0xb800000000	                              mov eax, 0	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea22	      0xe800000000	                          call 0x400ea27	      8317	ldlang.c	FUNCTION_194	ELSE_3	CALL_7
0x400ea27	        0x488b45f8	                mov rax, qword [rbp - 8]	      8319	ldlang.c	FUNCTION_194	ELSE_3
0x400ea2b	         0xfb65010	           movzx edx, byte [rax + 0x10] 	      8319	ldlang.c	FUNCTION_194	ELSE_3
0x400ea2f	          0x83e2c7	                     and edx, 0xffffffc7	      8319	ldlang.c	FUNCTION_194	ELSE_3
0x400ea32	          0x83ca08	                               or edx, 8	      8319	ldlang.c	FUNCTION_194	ELSE_3
0x400ea35	          0x885010	               mov byte [rax + 0x10], dl	      8319	ldlang.c	FUNCTION_194	ELSE_3
0x400ea38	        0x488b45f8	                mov rax, qword [rbp - 8]	      8322	ldlang.c	FUNCTION_194	CALL_8
0x400ea3c	          0x4889c7	                            mov rdi, rax	      8322	ldlang.c	FUNCTION_194	CALL_8
0x400ea3f	      0xe800000000	                          call 0x400ea44	      8322	ldlang.c	FUNCTION_194	CALL_8
0x400ea44	              0xc9	                                   leave	      8323	ldlang.c	FUNCTION_194
0x400ea45	              0xc3	                                     ret	      8323	ldlang.c	FUNCTION_194
load_symbols	functions,0:ELSE,2:FOR,2:CALL,30:IF,15:DO,0:WHILE,0:SWITCH,1	346
0x4004b89	              0x55	                                push rbp	      2744	ldlang.c	FUNCTION_66
0x4004b8a	          0x4889e5	                            mov rbp, rsp	      2744	ldlang.c	FUNCTION_66
0x4004b8d	              0x53	                                push rbx	      2744	ldlang.c	FUNCTION_66
0x4004b8e	        0x4883ec58	                           sub rsp, 0x58	      2744	ldlang.c	FUNCTION_66
0x4004b92	        0x48897da8	             mov qword [rbp - 0x58], rdi	      2744	ldlang.c	FUNCTION_66
0x4004b96	        0x488975a0	             mov qword [rbp - 0x60], rsi	      2744	ldlang.c	FUNCTION_66
0x4004b9a	    0x64488b042528	                mov rax, qword fs:[0x28]	      2744	ldlang.c	FUNCTION_66
0x4004ba3	        0x488945e8	             mov qword [rbp - 0x18], rax	      2744	ldlang.c	FUNCTION_66
0x4004ba7	            0x31c0	                            xor eax, eax	      2744	ldlang.c	FUNCTION_66
0x4004ba9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2747	ldlang.c	FUNCTION_66	IF_1
0x4004bad	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2747	ldlang.c	FUNCTION_66	IF_1
0x4004bb1	          0x83e002	                              and eax, 2	      2747	ldlang.c	FUNCTION_66	IF_1
0x4004bb4	            0x84c0	                             test al, al	      2747	ldlang.c	FUNCTION_66	IF_1
0x4004bb6	            0x740a	                            je 0x4004bc2	      2747	ldlang.c	FUNCTION_66	IF_1
0x4004bb8	      0xb801000000	                              mov eax, 1	      2748	ldlang.c	FUNCTION_66	IF_1
0x4004bbd	      0xe904050000	                           jmp 0x40050c6	      2748	ldlang.c	FUNCTION_66	IF_1
0x4004bc2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2750	ldlang.c	FUNCTION_66	CALL_1
0x4004bc6	          0x4889c7	                            mov rdi, rax	      2750	ldlang.c	FUNCTION_66	CALL_1
0x4004bc9	      0xe800000000	                          call 0x4004bce	      2750	ldlang.c	FUNCTION_66	CALL_1
0x4004bce	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2753	ldlang.c	FUNCTION_66	IF_2
0x4004bd2	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2753	ldlang.c	FUNCTION_66	IF_2
0x4004bd6	          0x83e008	                              and eax, 8	      2753	ldlang.c	FUNCTION_66	IF_2
0x4004bd9	            0x84c0	                             test al, al	      2753	ldlang.c	FUNCTION_66	IF_2
0x4004bdb	            0x740a	                            je 0x4004be7	      2753	ldlang.c	FUNCTION_66	IF_2
0x4004bdd	      0xb801000000	                              mov eax, 1	      2754	ldlang.c	FUNCTION_66	IF_2
0x4004be2	      0xe9df040000	                           jmp 0x40050c6	      2754	ldlang.c	FUNCTION_66	IF_2
0x4004be7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004beb	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004bef	      0xbe02000000	                              mov esi, 2	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004bf4	          0x4889c7	                            mov rdi, rax	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004bf7	      0xe800000000	                          call 0x4004bfc	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004bfc	            0x85c0	                           test eax, eax	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004bfe	     0xf8562020000	                           jne 0x4004e66	      2756	ldlang.c	FUNCTION_66	IF_3	CALL_2
0x4004c04	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c08	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c0c	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c10	      0xbe01000000	                              mov esi, 1	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c15	          0x4889c7	                            mov rdi, rax	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c18	      0xe800000000	                          call 0x4004c1d	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c1d	            0x85c0	                           test eax, eax	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c1f	     0xf8541020000	                           jne 0x4004e66	      2757	ldlang.c	FUNCTION_66	IF_3	CALL_3
0x4004c25	      0xe800000000	                          call 0x4004c2a	      2763	ldlang.c	FUNCTION_66	IF_3	CALL_4
0x4004c2a	          0x8945b4	             mov dword [rbp - 0x4c], eax	      2763	ldlang.c	FUNCTION_66	IF_3	CALL_4
0x4004c2d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2766	ldlang.c	FUNCTION_66	IF_3	IF_4	CALL_5
0x4004c31	          0x4889c7	                            mov rdi, rax	      2766	ldlang.c	FUNCTION_66	IF_3	IF_4	CALL_5
0x4004c34	      0xe800000000	                          call 0x4004c39	      2766	ldlang.c	FUNCTION_66	IF_3	IF_4	CALL_5
0x4004c39	            0x85c0	                           test eax, eax	      2766	ldlang.c	FUNCTION_66	IF_3	IF_4	CALL_5
0x4004c3b	            0x740a	                            je 0x4004c47	      2766	ldlang.c	FUNCTION_66	IF_3	IF_4	CALL_5
0x4004c3d	      0xb801000000	                              mov eax, 1	      2767	ldlang.c	FUNCTION_66	IF_3	IF_4
0x4004c42	      0xe97f040000	                           jmp 0x40050c6	      2767	ldlang.c	FUNCTION_66	IF_3	IF_4
0x4004c47	        0x837db40d	            cmp dword [rbp - 0x4c], 0xd 	      2769	ldlang.c	FUNCTION_66	IF_3	IF_5
0x4004c4b	            0x7567	                           jne 0x4004cb4	      2769	ldlang.c	FUNCTION_66	IF_3	IF_5
0x4004c4d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c51	        0x488b5820	            mov rbx, qword [rax + 0x20] 	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c55	      0xbf00000000	                              mov edi, 0	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c5a	      0xe800000000	                          call 0x4004c5f	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c5f	          0x4889de	                            mov rsi, rbx	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c62	          0x4889c7	                            mov rdi, rax	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c65	      0xb800000000	                              mov eax, 0	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c6a	      0xe800000000	                          call 0x4004c6f	      2773	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_7
0x4004c6f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c73	        0x488945c0	             mov qword [rbp - 0x40], rax	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c77	            0xeb1e	                           jmp 0x4004c97	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c79	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c7d	          0x488b00	                    mov rax, qword [rax]	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c80	          0x4889c6	                            mov rsi, rax	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c83	      0xbf00000000	                              mov edi, 0	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c88	      0xb800000000	                              mov eax, 0	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c8d	      0xe800000000	                          call 0x4004c92	      2776	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_8
0x4004c92	      0x488345c008	               add qword [rbp - 0x40], 8	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c97	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c9b	          0x488b00	                    mov rax, qword [rax]	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004c9e	          0x4885c0	                           test rax, rax	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004ca1	            0x75d6	                           jne 0x4004c79	      2775	ldlang.c	FUNCTION_66	IF_3	IF_5	FOR_1
0x4004ca3	      0xbf00000000	                              mov edi, 0	      2777	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_9
0x4004ca8	      0xb800000000	                              mov eax, 0	      2777	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_9
0x4004cad	      0xe800000000	                          call 0x4004cb2	      2777	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_9
0x4004cb2	            0xeb2f	                           jmp 0x4004ce3	      2777	ldlang.c	FUNCTION_66	IF_3	IF_5	CALL_9
0x4004cb4	        0x837db40c	            cmp dword [rbp - 0x4c], 0xc 	      2779	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cb8	            0x7507	                           jne 0x4004cc1	      2779	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cba	      0x48837da000	               cmp qword [rbp - 0x60], 0	      2780	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cbf	            0x7522	                           jne 0x4004ce3	      2780	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cc1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cc5	        0x488b5820	            mov rbx, qword [rax + 0x20] 	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cc9	      0xbf00000000	                              mov edi, 0	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cce	      0xe800000000	                          call 0x4004cd3	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cd3	          0x4889de	                            mov rsi, rbx	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cd6	          0x4889c7	                            mov rdi, rax	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cd9	      0xb800000000	                              mov eax, 0	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004cde	      0xe800000000	                          call 0x4004ce3	      2781	ldlang.c	FUNCTION_66	IF_3	ELSE_1	IF_6
0x4004ce3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2783	ldlang.c	FUNCTION_66	IF_3	CALL_12
0x4004ce7	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2783	ldlang.c	FUNCTION_66	IF_3	CALL_12
0x4004ceb	          0x4889c7	                            mov rdi, rax	      2783	ldlang.c	FUNCTION_66	IF_3	CALL_12
0x4004cee	      0xe800000000	                          call 0x4004cf3	      2783	ldlang.c	FUNCTION_66	IF_3	CALL_12
0x4004cf3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2784	ldlang.c	FUNCTION_66	IF_3
0x4004cf7	    0x48c740200000	               mov qword [rax + 0x20], 0	      2784	ldlang.c	FUNCTION_66	IF_3
0x4004cff	    0x488b05000000	            mov rax, qword [0x04004d06] 	      2787	ldlang.c	FUNCTION_66	IF_3
0x4004d06	    0x488b15000000	            mov rdx, qword [0x04004d0d] 	      2787	ldlang.c	FUNCTION_66	IF_3
0x4004d0d	        0x488945d0	             mov qword [rbp - 0x30], rax	      2787	ldlang.c	FUNCTION_66	IF_3
0x4004d11	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2787	ldlang.c	FUNCTION_66	IF_3
0x4004d15	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2788	ldlang.c	FUNCTION_66	IF_3	CALL_13
0x4004d19	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2788	ldlang.c	FUNCTION_66	IF_3	CALL_13
0x4004d1d	          0x4889c7	                            mov rdi, rax	      2788	ldlang.c	FUNCTION_66	IF_3	CALL_13
0x4004d20	      0xe800000000	                          call 0x4004d25	      2788	ldlang.c	FUNCTION_66	IF_3	CALL_13
0x4004d25	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2790	ldlang.c	FUNCTION_66	IF_3	CALL_14
0x4004d29	          0x4889c7	                            mov rdi, rax	      2790	ldlang.c	FUNCTION_66	IF_3	CALL_14
0x4004d2c	      0xe800000000	                          call 0x4004d31	      2790	ldlang.c	FUNCTION_66	IF_3	CALL_14
0x4004d31	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d35	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d39	          0xc0e807	                               shr al, 7	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d3c	          0xc1e007	                              shl eax, 7	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d3f	            0x89c2	                            mov edx, eax	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d41	     0xfb605000000	           movzx eax, byte [0x04004d48] 	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d48	          0x83e07f	                           and eax, 0x7f	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d4b	             0x9d0	                             or eax, edx	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d4d	    0x880500000000	               mov byte [0x04004d53], al	      2792	ldlang.c	FUNCTION_66	IF_3
0x4004d53	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d57	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d5b	          0xc0e806	                               shr al, 6	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d5e	          0x83e001	                              and eax, 1	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d61	          0x83e001	                              and eax, 1	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d64	          0xc1e006	                              shl eax, 6	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d67	            0x89c2	                            mov edx, eax	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d69	     0xfb605000000	           movzx eax, byte [0x04004d70] 	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d70	          0x83e0bf	                     and eax, 0xffffffbf	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d73	             0x9d0	                             or eax, edx	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d75	    0x880500000000	               mov byte [0x04004d7b], al	      2794	ldlang.c	FUNCTION_66	IF_3
0x4004d7b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d7f	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d83	          0x83e001	                              and eax, 1	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d86	          0x83e001	                              and eax, 1	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d89	            0x89c2	                            mov edx, eax	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d8b	     0xfb605000000	           movzx eax, byte [0x04004d92] 	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d92	          0x83e0fe	                     and eax, 0xfffffffe	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d95	             0x9d0	                             or eax, edx	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d97	    0x880500000000	               mov byte [0x04004d9d], al	      2795	ldlang.c	FUNCTION_66	IF_3
0x4004d9d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004da1	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004da5	          0xc0e805	                               shr al, 5	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004da8	          0x83e001	                              and eax, 1	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dab	          0x83e001	                              and eax, 1	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dae	          0xc1e005	                              shl eax, 5	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004db1	            0x89c2	                            mov edx, eax	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004db3	     0xfb605000000	           movzx eax, byte [0x04004dba] 	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dba	          0x83e0df	                     and eax, 0xffffffdf	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dbd	             0x9d0	                             or eax, edx	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dbf	    0x880500000000	               mov byte [0x04004dc5], al	      2796	ldlang.c	FUNCTION_66	IF_3
0x4004dc5	    0xc70500000000	               mov dword [0x04004dcf], 1	      2798	ldlang.c	FUNCTION_66	IF_3
0x4004dcf	    0xc70500000000	               mov dword [0x04004dd9], 1	      2799	ldlang.c	FUNCTION_66	IF_3
0x4004dd9	      0xe800000000	                          call 0x4004dde	      2800	ldlang.c	FUNCTION_66	IF_3	CALL_15
0x4004dde	    0xc70500000000	               mov dword [0x04004de8], 0	      2801	ldlang.c	FUNCTION_66	IF_3
0x4004de8	         0xfb645d1	            movzx eax, byte [rbp - 0x2f]	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004dec	          0xc0e803	                               shr al, 3	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004def	            0x89c2	                            mov edx, eax	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004df1	          0x83e201	                              and edx, 1	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004df4	     0xfb605000000	           movzx eax, byte [0x04004dfb] 	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004dfb	          0xc0e803	                               shr al, 3	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004dfe	          0x83e001	                              and eax, 1	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e01	             0x9d0	                             or eax, edx	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e03	          0x83e001	                              and eax, 1	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e06	    0x8d14c5000000	                        lea edx, [rax*8]	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e0d	         0xfb645d1	            movzx eax, byte [rbp - 0x2f]	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e11	          0x83e0f7	                     and eax, 0xfffffff7	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e14	             0x9d0	                             or eax, edx	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e16	          0x8845d1	               mov byte [rbp - 0x2f], al	      2806	ldlang.c	FUNCTION_66	IF_3
0x4004e19	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2807	ldlang.c	FUNCTION_66	IF_3
0x4004e1d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2807	ldlang.c	FUNCTION_66	IF_3
0x4004e21	    0x488905000000	            mov qword [0x04004e28], rax 	      2807	ldlang.c	FUNCTION_66	IF_3
0x4004e28	    0x488915000000	            mov qword [0x04004e2f], rdx 	      2807	ldlang.c	FUNCTION_66	IF_3
0x4004e2f	      0xe800000000	                          call 0x4004e34	      2808	ldlang.c	FUNCTION_66	IF_3	CALL_16
0x4004e34	    0x488b05000000	            mov rax, qword [0x04004e3b] 	      2809	ldlang.c	FUNCTION_66	IF_3	CALL_17
0x4004e3b	          0x4889c7	                            mov rdi, rax	      2809	ldlang.c	FUNCTION_66	IF_3	CALL_17
0x4004e3e	      0xe800000000	                          call 0x4004e43	      2809	ldlang.c	FUNCTION_66	IF_3	CALL_17
0x4004e43	    0x48c705000000	               mov qword [0x04004e4e], 0	      2810	ldlang.c	FUNCTION_66	IF_3
0x4004e4e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2811	ldlang.c	FUNCTION_66	IF_3
0x4004e52	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      2811	ldlang.c	FUNCTION_66	IF_3
0x4004e56	          0x83ca02	                               or edx, 2	      2811	ldlang.c	FUNCTION_66	IF_3
0x4004e59	          0x885049	               mov byte [rax + 0x49], dl	      2811	ldlang.c	FUNCTION_66	IF_3
0x4004e5c	      0xb801000000	                              mov eax, 1	      2813	ldlang.c	FUNCTION_66	IF_3
0x4004e61	      0xe960020000	                           jmp 0x40050c6	      2813	ldlang.c	FUNCTION_66	IF_3
0x4004e66	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2816	ldlang.c	FUNCTION_66	IF_7	CALL_18
0x4004e6a	          0x4889c7	                            mov rdi, rax	      2816	ldlang.c	FUNCTION_66	IF_7	CALL_18
0x4004e6d	      0xe800000000	                          call 0x4004e72	      2816	ldlang.c	FUNCTION_66	IF_7	CALL_18
0x4004e72	            0x85c0	                           test eax, eax	      2816	ldlang.c	FUNCTION_66	IF_7	CALL_18
0x4004e74	            0x740a	                            je 0x4004e80	      2816	ldlang.c	FUNCTION_66	IF_7	CALL_18
0x4004e76	      0xb801000000	                              mov eax, 1	      2817	ldlang.c	FUNCTION_66	IF_7
0x4004e7b	      0xe946020000	                           jmp 0x40050c6	      2817	ldlang.c	FUNCTION_66	IF_7
0x4004e80	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e84	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e88	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e8c	          0x83e007	                              and eax, 7	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e8f	           0xfb6c0	                           movzx eax, al	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e92	          0x83f801	                              cmp eax, 1	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e95	            0x740a	                            je 0x4004ea1	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e97	          0x83f802	                              cmp eax, 2	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e9a	            0x7453	                            je 0x4004eef	      2823	ldlang.c	FUNCTION_66	SWITCH_1
0x4004e9c	      0xe9ba010000	                           jmp 0x400505b	      2826	ldlang.c	FUNCTION_66	SWITCH_1
0x4004ea1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2829	ldlang.c	FUNCTION_66	SWITCH_1	IF_8
0x4004ea5	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2829	ldlang.c	FUNCTION_66	SWITCH_1	IF_8
0x4004ea9	          0x83e010	                           and eax, 0x10	      2829	ldlang.c	FUNCTION_66	SWITCH_1	IF_8
0x4004eac	            0x84c0	                             test al, al	      2829	ldlang.c	FUNCTION_66	SWITCH_1	IF_8
0x4004eae	            0x750c	                           jne 0x4004ebc	      2829	ldlang.c	FUNCTION_66	SWITCH_1	IF_8
0x4004eb0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2830	ldlang.c	FUNCTION_66	SWITCH_1	CALL_19
0x4004eb4	          0x4889c7	                            mov rdi, rax	      2830	ldlang.c	FUNCTION_66	SWITCH_1	CALL_19
0x4004eb7	      0xe800000000	                          call 0x4004ebc	      2830	ldlang.c	FUNCTION_66	SWITCH_1	CALL_19
0x4004ebc	    0x8b0500000000	            mov eax, dword [0x04004ec2] 	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ec2	            0x85c0	                           test eax, eax	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ec4	            0x750e	                           jne 0x4004ed4	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ec6	    0x8b0500000000	            mov eax, dword [0x04004ecc] 	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ecc	            0x85c0	                           test eax, eax	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ece	     0xf8483010000	                            je 0x4005057	      2831	ldlang.c	FUNCTION_66	SWITCH_1	IF_9
0x4004ed4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2832	ldlang.c	FUNCTION_66	SWITCH_1	CALL_20
0x4004ed8	          0x4889c6	                            mov rsi, rax	      2832	ldlang.c	FUNCTION_66	SWITCH_1	CALL_20
0x4004edb	      0xbf00000000	                              mov edi, 0	      2832	ldlang.c	FUNCTION_66	SWITCH_1	CALL_20
0x4004ee0	      0xb800000000	                              mov eax, 0	      2832	ldlang.c	FUNCTION_66	SWITCH_1	CALL_20
0x4004ee5	      0xe800000000	                          call 0x4004eea	      2832	ldlang.c	FUNCTION_66	SWITCH_1	CALL_20
0x4004eea	      0xe968010000	                           jmp 0x4005057	      2833	ldlang.c	FUNCTION_66	SWITCH_1
0x4004eef	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2836	ldlang.c	FUNCTION_66	SWITCH_1	CALL_21
0x4004ef3	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2836	ldlang.c	FUNCTION_66	SWITCH_1	CALL_21
0x4004ef7	          0x4889c7	                            mov rdi, rax	      2836	ldlang.c	FUNCTION_66	SWITCH_1	CALL_21
0x4004efa	      0xe87ffbffff	            call sym.check_excluded_libs	      2836	ldlang.c	FUNCTION_66	SWITCH_1	CALL_21
0x4004eff	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2838	ldlang.c	FUNCTION_66	SWITCH_1
0x4004f03	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2838	ldlang.c	FUNCTION_66	SWITCH_1
0x4004f07	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      2838	ldlang.c	FUNCTION_66	SWITCH_1
0x4004f0b	    0x488990000100	            mov qword [rax + 0x100], rdx	      2838	ldlang.c	FUNCTION_66	SWITCH_1
0x4004f12	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2839	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f16	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2839	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f1a	          0x83e001	                              and eax, 1	      2839	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f1d	            0x84c0	                             test al, al	      2839	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f1f	     0xf8435010000	                            je 0x400505a	      2839	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f25	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      2841	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f2d	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2842	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f34	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f38	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f3c	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f40	          0x4889d6	                            mov rsi, rdx	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f43	          0x4889c7	                            mov rdi, rax	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f46	      0xe800000000	                          call 0x4004f4b	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f4b	        0x488945c8	             mov qword [rbp - 0x38], rax	      2847	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_22
0x4004f4f	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      2849	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_11
0x4004f54	            0x7526	                           jne 0x4004f7c	      2849	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_11
0x4004f56	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f59	          0x83e001	                              and eax, 1	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f5c	            0x89c2	                            mov edx, eax	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f5e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f62	          0x83e201	                              and edx, 1	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f65	          0x8d0c12	                    lea ecx, [rdx + rdx]	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f68	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f6c	          0x83e2fd	                     and edx, 0xfffffffd	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f6f	             0x9ca	                             or edx, ecx	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f71	          0x885049	               mov byte [rax + 0x49], dl	      2874	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f74	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      2875	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f77	      0xe94a010000	                           jmp 0x40050c6	      2875	ldlang.c	FUNCTION_66	SWITCH_1	IF_10
0x4004f7c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f80	      0xbe01000000	                              mov esi, 1	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f85	          0x4889c7	                            mov rdi, rax	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f88	      0xe800000000	                          call 0x4004f8d	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f8d	            0x85c0	                           test eax, eax	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f8f	            0x7533	                           jne 0x4004fc4	      2852	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_23
0x4004f91	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004f95	        0x488b5820	            mov rbx, qword [rax + 0x20] 	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004f99	      0xbf00000000	                              mov edi, 0	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004f9e	      0xe800000000	                          call 0x4004fa3	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fa3	          0x4889c1	                            mov rcx, rax	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fa6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004faa	          0x4889c2	                            mov rdx, rax	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fad	          0x4889de	                            mov rsi, rbx	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fb0	          0x4889cf	                            mov rdi, rcx	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fb3	      0xb800000000	                              mov eax, 0	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fb8	      0xe800000000	                          call 0x4004fbd	      2854	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12	CALL_25
0x4004fbd	    0xc745b0000000	               mov dword [rbp - 0x50], 0	      2856	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_12
0x4004fc4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2859	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2
0x4004fc8	        0x488945d0	             mov qword [rbp - 0x30], rax	      2859	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2
0x4004fcc	    0x488b05000000	            mov rax, qword [0x04004fd3] 	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fd3	          0x488b00	                    mov rax, qword [rax]	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fd6	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fda	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fde	          0x4889d1	                            mov rcx, rdx	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fe1	      0xba00000000	                              mov edx, 0	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fe6	      0xbf00000000	                              mov edi, 0	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004feb	            0xffd0	                                call rax	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fed	            0x85c0	                           test eax, eax	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004fef	            0x7514	                           jne 0x4005005	      2860	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_13
0x4004ff1	      0xba00000000	                              mov edx, 0	      2863	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_26
0x4004ff6	      0xbe2f0b0000	                          mov esi, 0xb2f	      2863	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_26
0x4004ffb	      0xbf00000000	                              mov edi, 0	      2863	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_26
0x4005000	      0xe800000000	                          call 0x4005005	      2863	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	CALL_26
0x4005005	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005009	        0x488b4008	                mov rax, qword [rax + 8]	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x400500d	    0x488b80c00200	           mov rax, qword [rax + 0x2c0] 	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005014	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005018	      0xbe00000000	                              mov esi, 0	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x400501d	          0x4889d7	                            mov rdi, rdx	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005020	            0xffd0	                                call rax	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005022	            0x85c0	                           test eax, eax	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005024	     0xf850affffff	                           jne 0x4004f34	      2867	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x400502a	      0xbf00000000	                              mov edi, 0	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x400502f	      0xe800000000	                          call 0x4005034	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x4005034	          0x4889c2	                            mov rdx, rax	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x4005037	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x400503b	          0x4889c6	                            mov rsi, rax	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x400503e	          0x4889d7	                            mov rdi, rdx	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x4005041	      0xb800000000	                              mov eax, 0	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x4005046	      0xe800000000	                          call 0x400504b	      2869	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14	CALL_28
0x400504b	    0xc745b0000000	               mov dword [rbp - 0x50], 0	      2870	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2	IF_14
0x4005052	      0xe9ddfeffff	                           jmp 0x4004f34	      2872	ldlang.c	FUNCTION_66	SWITCH_1	IF_10	FOR_2
0x4005057	              0x90	                                     nop	      2833	ldlang.c	FUNCTION_66	SWITCH_1
0x4005058	            0xeb01	                           jmp 0x400505b	      2833	ldlang.c	FUNCTION_66	SWITCH_1
0x400505a	              0x90	                                     nop	      2877	ldlang.c	FUNCTION_66	SWITCH_1
0x400505b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2880	ldlang.c	FUNCTION_66	IF_15
0x400505f	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005063	        0x488b4008	                mov rax, qword [rax + 8]	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005067	    0x488b80c00200	           mov rax, qword [rax + 0x2c0] 	      2880	ldlang.c	FUNCTION_66	IF_15
0x400506e	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005072	        0x488b5220	            mov rdx, qword [rdx + 0x20] 	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005076	      0xbe00000000	                              mov esi, 0	      2880	ldlang.c	FUNCTION_66	IF_15
0x400507b	          0x4889d7	                            mov rdi, rdx	      2880	ldlang.c	FUNCTION_66	IF_15
0x400507e	            0xffd0	                                call rax	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005080	            0x85c0	                           test eax, eax	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005082	            0x7410	                            je 0x4005094	      2880	ldlang.c	FUNCTION_66	IF_15
0x4005084	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2881	ldlang.c	FUNCTION_66	IF_15
0x4005088	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      2881	ldlang.c	FUNCTION_66	IF_15
0x400508c	          0x83ca02	                               or edx, 2	      2881	ldlang.c	FUNCTION_66	IF_15
0x400508f	          0x885049	               mov byte [rax + 0x49], dl	      2881	ldlang.c	FUNCTION_66	IF_15
0x4005092	            0xeb22	                           jmp 0x40050b6	      2881	ldlang.c	FUNCTION_66	IF_15
0x4005094	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2883	ldlang.c	FUNCTION_66	CALL_30
0x4005098	        0x488b5820	            mov rbx, qword [rax + 0x20] 	      2883	ldlang.c	FUNCTION_66	CALL_30
0x400509c	      0xbf00000000	                              mov edi, 0	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050a1	      0xe800000000	                          call 0x40050a6	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050a6	          0x4889de	                            mov rsi, rbx	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050a9	          0x4889c7	                            mov rdi, rax	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050ac	      0xb800000000	                              mov eax, 0	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050b1	      0xe800000000	                          call 0x40050b6	      2883	ldlang.c	FUNCTION_66	CALL_30
0x40050b6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2885	ldlang.c	FUNCTION_66
0x40050ba	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      2885	ldlang.c	FUNCTION_66
0x40050be	            0xd0e8	                               shr al, 1	      2885	ldlang.c	FUNCTION_66
0x40050c0	          0x83e001	                              and eax, 1	      2885	ldlang.c	FUNCTION_66
0x40050c3	           0xfb6c0	                           movzx eax, al	      2885	ldlang.c	FUNCTION_66
0x40050c6	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      2886	ldlang.c	FUNCTION_66
0x40050ca	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      2886	ldlang.c	FUNCTION_66
0x40050d3	            0x7405	                            je 0x40050da	      2886	ldlang.c	FUNCTION_66
0x40050d5	      0xe800000000	                          call 0x40050da	      2886	ldlang.c	FUNCTION_66
0x40050da	        0x4883c458	                           add rsp, 0x58	      2886	ldlang.c	FUNCTION_66
0x40050de	              0x5b	                                 pop rbx	      2886	ldlang.c	FUNCTION_66
0x40050df	              0x5d	                                 pop rbp	      2886	ldlang.c	FUNCTION_66
0x40050e0	              0xc3	                                     ret	      2886	ldlang.c	FUNCTION_66
lang_ld_feature	functions,0:ELSE,1:FOR,0:CALL,5:IF,2:DO,0:WHILE,3:SWITCH,0	84
0x400f72f	              0x55	                                push rbp	      8730	ldlang.c	FUNCTION_207
0x400f730	          0x4889e5	                            mov rbp, rsp	      8730	ldlang.c	FUNCTION_207
0x400f733	        0x4883ec30	                           sub rsp, 0x30	      8730	ldlang.c	FUNCTION_207
0x400f737	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      8730	ldlang.c	FUNCTION_207
0x400f73b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8733	ldlang.c	FUNCTION_207
0x400f73f	        0x488945f0	             mov qword [rbp - 0x10], rax	      8733	ldlang.c	FUNCTION_207
0x400f743	      0xe9ef000000	                           jmp 0x400f837	      8734	ldlang.c	FUNCTION_207	WHILE_1
0x400f748	      0x488345f001	               add qword [rbp - 0x10], 1	      8738	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2
0x400f74d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f751	           0xfb600	                   movzx eax, byte [rax]	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f754	            0x3c2c	                            cmp al, 0x2c	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f756	            0x74f0	                            je 0x400f748	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f758	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f75c	           0xfb600	                   movzx eax, byte [rax]	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f75f	           0xfbec0	                           movsx eax, al	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f762	           0xfb6c0	                           movzx eax, al	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f765	            0x4898	                                    cdqe	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f767	     0xfb784000000	             movzx eax, word [rax + rax]	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f76f	           0xfb7c0	                           movzx eax, ax	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f772	          0x83e040	                           and eax, 0x40	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f775	            0x85c0	                           test eax, eax	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f777	            0x75cf	                           jne 0x400f748	      8737	ldlang.c	FUNCTION_207	WHILE_1	WHILE_2	CALL_1
0x400f779	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8739	ldlang.c	FUNCTION_207	WHILE_1	IF_1
0x400f77d	           0xfb600	                   movzx eax, byte [rax]	      8739	ldlang.c	FUNCTION_207	WHILE_1	IF_1
0x400f780	            0x84c0	                             test al, al	      8739	ldlang.c	FUNCTION_207	WHILE_1	IF_1
0x400f782	     0xf84c0000000	                            je 0x400f848	      8739	ldlang.c	FUNCTION_207	WHILE_1	IF_1
0x400f788	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8741	ldlang.c	FUNCTION_207	WHILE_1
0x400f78c	        0x4883c001	                              add rax, 1	      8741	ldlang.c	FUNCTION_207	WHILE_1
0x400f790	        0x488945f8	                mov qword [rbp - 8], rax	      8741	ldlang.c	FUNCTION_207	WHILE_1
0x400f794	            0xeb05	                           jmp 0x400f79b	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f796	      0x488345f801	                  add qword [rbp - 8], 1	      8743	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3
0x400f79b	        0x488b45f8	                mov rax, qword [rbp - 8]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f79f	           0xfb600	                   movzx eax, byte [rax]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7a2	            0x84c0	                             test al, al	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7a4	            0x742c	                            je 0x400f7d2	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7a6	        0x488b45f8	                mov rax, qword [rbp - 8]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7aa	           0xfb600	                   movzx eax, byte [rax]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7ad	            0x3c2c	                            cmp al, 0x2c	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7af	            0x7421	                            je 0x400f7d2	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7b1	        0x488b45f8	                mov rax, qword [rbp - 8]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7b5	           0xfb600	                   movzx eax, byte [rax]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7b8	           0xfbec0	                           movsx eax, al	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7bb	           0xfb6c0	                           movzx eax, al	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7be	            0x4898	                                    cdqe	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7c0	     0xfb784000000	             movzx eax, word [rax + rax]	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7c8	           0xfb7c0	                           movzx eax, ax	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7cb	          0x83e040	                           and eax, 0x40	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7ce	            0x85c0	                           test eax, eax	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7d0	            0x74c4	                            je 0x400f796	      8742	ldlang.c	FUNCTION_207	WHILE_1	WHILE_3	CALL_2
0x400f7d2	        0x488b45f8	                mov rax, qword [rbp - 8]	      8744	ldlang.c	FUNCTION_207	WHILE_1
0x400f7d6	           0xfb600	                   movzx eax, byte [rax]	      8744	ldlang.c	FUNCTION_207	WHILE_1
0x400f7d9	          0x8845ef	               mov byte [rbp - 0x11], al	      8744	ldlang.c	FUNCTION_207	WHILE_1
0x400f7dc	        0x488b45f8	                mov rax, qword [rbp - 8]	      8745	ldlang.c	FUNCTION_207	WHILE_1
0x400f7e0	          0xc60000	                       mov byte [rax], 0	      8745	ldlang.c	FUNCTION_207	WHILE_1
0x400f7e3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7e7	      0xbe00000000	                              mov esi, 0	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7ec	          0x4889c7	                            mov rdi, rax	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7ef	      0xe800000000	                          call 0x400f7f4	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7f4	            0x85c0	                           test eax, eax	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7f6	            0x750c	                           jne 0x400f804	      8746	ldlang.c	FUNCTION_207	WHILE_1	IF_2	CALL_3
0x400f7f8	    0xc70500000000	               mov dword [0x0400f802], 1	      8747	ldlang.c	FUNCTION_207	WHILE_1	IF_2
0x400f802	            0xeb21	                           jmp 0x400f825	      8747	ldlang.c	FUNCTION_207	WHILE_1	IF_2
0x400f804	      0xbf00000000	                              mov edi, 0	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f809	      0xe800000000	                          call 0x400f80e	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f80e	          0x4889c2	                            mov rdx, rax	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f811	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f815	          0x4889c6	                            mov rsi, rax	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f818	          0x4889d7	                            mov rdi, rdx	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f81b	      0xb800000000	                              mov eax, 0	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f820	      0xe800000000	                          call 0x400f825	      8749	ldlang.c	FUNCTION_207	WHILE_1	CALL_5
0x400f825	        0x488b45f8	                mov rax, qword [rbp - 8]	      8750	ldlang.c	FUNCTION_207	WHILE_1
0x400f829	         0xfb655ef	            movzx edx, byte [rbp - 0x11]	      8750	ldlang.c	FUNCTION_207	WHILE_1
0x400f82d	            0x8810	                      mov byte [rax], dl	      8750	ldlang.c	FUNCTION_207	WHILE_1
0x400f82f	        0x488b45f8	                mov rax, qword [rbp - 8]	      8751	ldlang.c	FUNCTION_207	WHILE_1
0x400f833	        0x488945f0	             mov qword [rbp - 0x10], rax	      8751	ldlang.c	FUNCTION_207	WHILE_1
0x400f837	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8734	ldlang.c	FUNCTION_207	WHILE_1
0x400f83b	           0xfb600	                   movzx eax, byte [rax]	      8734	ldlang.c	FUNCTION_207	WHILE_1
0x400f83e	            0x84c0	                             test al, al	      8734	ldlang.c	FUNCTION_207	WHILE_1
0x400f840	     0xf8507ffffff	                           jne 0x400f74d	      8734	ldlang.c	FUNCTION_207	WHILE_1
0x400f846	            0xeb01	                           jmp 0x400f849	      8753	ldlang.c	FUNCTION_207
0x400f848	              0x90	                                     nop	      8740	ldlang.c	FUNCTION_207	WHILE_1	IF_1
0x400f849	              0x90	                                     nop	      8753	ldlang.c	FUNCTION_207
0x400f84a	              0xc9	                                   leave	      8753	ldlang.c	FUNCTION_207
0x400f84b	              0xc3	                                     ret	      8753	ldlang.c	FUNCTION_207
lang_enter_overlay_section	functions,0:ELSE,1:FOR,0:CALL,5:IF,2:DO,0:WHILE,0:SWITCH,0	55
0x400def9	              0x55	                                push rbp	      7964	ldlang.c	FUNCTION_189
0x400defa	          0x4889e5	                            mov rbp, rsp	      7964	ldlang.c	FUNCTION_189
0x400defd	        0x4883ec20	                           sub rsp, 0x20	      7964	ldlang.c	FUNCTION_189
0x400df01	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7964	ldlang.c	FUNCTION_189
0x400df05	    0x488b15000000	            mov rdx, qword [0x0400df0c] 	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df0c	    0x488b35000000	            mov rsi, qword [0x0400df13] 	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df13	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df17	            0x6a00	                                  push 0	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df19	            0x6a00	                                  push 0	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df1b	    0x41b900000000	                              mov r9d, 0	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df21	          0x4989d0	                             mov r8, rdx	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df24	      0xb900000000	                              mov ecx, 0	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df29	      0xba01000000	                              mov edx, 1	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df2e	          0x4889c7	                            mov rdi, rax	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df31	      0xe800000000	                          call 0x400df36	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df36	        0x4883c410	                           add rsp, 0x10	      7968	ldlang.c	FUNCTION_189	CALL_1
0x400df3a	    0x488b05000000	            mov rax, qword [0x0400df41] 	      7974	ldlang.c	FUNCTION_189	IF_1
0x400df41	          0x4885c0	                           test rax, rax	      7974	ldlang.c	FUNCTION_189	IF_1
0x400df44	            0x7518	                           jne 0x400df5e	      7974	ldlang.c	FUNCTION_189	IF_1
0x400df46	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7975	ldlang.c	FUNCTION_189	CALL_2
0x400df4a	          0x4889c6	                            mov rsi, rax	      7975	ldlang.c	FUNCTION_189	CALL_2
0x400df4d	      0xbf43010000	                          mov edi, 0x143	      7975	ldlang.c	FUNCTION_189	CALL_2
0x400df52	      0xe800000000	                          call 0x400df57	      7975	ldlang.c	FUNCTION_189	CALL_2
0x400df57	    0x488905000000	            mov qword [0x0400df5e], rax 	      7975	ldlang.c	FUNCTION_189	CALL_2
0x400df5e	      0xbf10000000	                           mov edi, 0x10	      7978	ldlang.c	FUNCTION_189	CALL_3
0x400df63	      0xe800000000	                          call 0x400df68	      7978	ldlang.c	FUNCTION_189	CALL_3
0x400df68	        0x488945f0	             mov qword [rbp - 0x10], rax	      7978	ldlang.c	FUNCTION_189	CALL_3
0x400df6c	    0x488b15000000	            mov rdx, qword [0x0400df73] 	      7979	ldlang.c	FUNCTION_189
0x400df73	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7979	ldlang.c	FUNCTION_189
0x400df77	        0x48895008	                mov qword [rax + 8], rdx	      7979	ldlang.c	FUNCTION_189
0x400df7b	    0x488b15000000	            mov rdx, qword [0x0400df82] 	      7980	ldlang.c	FUNCTION_189
0x400df82	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7980	ldlang.c	FUNCTION_189
0x400df86	          0x488910	                    mov qword [rax], rdx	      7980	ldlang.c	FUNCTION_189
0x400df89	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7981	ldlang.c	FUNCTION_189
0x400df8d	    0x488905000000	            mov qword [0x0400df94], rax 	      7981	ldlang.c	FUNCTION_189
0x400df94	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7983	ldlang.c	FUNCTION_189	CALL_4
0x400df98	          0x4889c6	                            mov rsi, rax	      7983	ldlang.c	FUNCTION_189	CALL_4
0x400df9b	      0xbf41010000	                          mov edi, 0x141	      7983	ldlang.c	FUNCTION_189	CALL_4
0x400dfa0	      0xe800000000	                          call 0x400dfa5	      7983	ldlang.c	FUNCTION_189	CALL_4
0x400dfa5	        0x488945f8	                mov qword [rbp - 8], rax	      7983	ldlang.c	FUNCTION_189	CALL_4
0x400dfa9	    0x488b05000000	            mov rax, qword [0x0400dfb0] 	      7986	ldlang.c	FUNCTION_189	IF_2
0x400dfb0	          0x4885c0	                           test rax, rax	      7986	ldlang.c	FUNCTION_189	IF_2
0x400dfb3	            0x750d	                           jne 0x400dfc2	      7986	ldlang.c	FUNCTION_189	IF_2
0x400dfb5	        0x488b45f8	                mov rax, qword [rbp - 8]	      7987	ldlang.c	FUNCTION_189	IF_2
0x400dfb9	    0x488905000000	            mov qword [0x0400dfc0], rax 	      7987	ldlang.c	FUNCTION_189	IF_2
0x400dfc0	            0xeb1f	                           jmp 0x400dfe1	      7990	ldlang.c	FUNCTION_189
0x400dfc2	    0x488b05000000	            mov rax, qword [0x0400dfc9] 	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfc9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfcd	          0x4889c6	                            mov rsi, rax	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfd0	      0xbf45010000	                          mov edi, 0x145	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfd5	      0xe800000000	                          call 0x400dfda	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfda	    0x488905000000	            mov qword [0x0400dfe1], rax 	      7989	ldlang.c	FUNCTION_189	CALL_5
0x400dfe1	              0x90	                                     nop	      7990	ldlang.c	FUNCTION_189
0x400dfe2	              0xc9	                                   leave	      7990	ldlang.c	FUNCTION_189
0x400dfe3	              0xc3	                                     ret	      7990	ldlang.c	FUNCTION_189
find_replacements_insert_point	functions,0:ELSE,0:FOR,1:CALL,0:IF,2:DO,0:WHILE,0:SWITCH,0	40
0x400c899	              0x55	                                push rbp	      6997	ldlang.c	FUNCTION_156
0x400c89a	          0x4889e5	                            mov rbp, rsp	      6997	ldlang.c	FUNCTION_156
0x400c89d	    0x488b05000000	            mov rax, qword [0x0400c8a4] 	      6999	ldlang.c	FUNCTION_156
0x400c8a4	        0x488945f8	                mov qword [rbp - 8], rax	      6999	ldlang.c	FUNCTION_156
0x400c8a8	    0x488b05000000	            mov rax, qword [0x0400c8af] 	      7000	ldlang.c	FUNCTION_156	FOR_1
0x400c8af	        0x488945f0	             mov qword [rbp - 0x10], rax	      7000	ldlang.c	FUNCTION_156	FOR_1
0x400c8b3	            0xeb5f	                           jmp 0x400c914	      7000	ldlang.c	FUNCTION_156	FOR_1
0x400c8b5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7004	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8b9	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      7004	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8bd	          0x83e020	                           and eax, 0x20	      7004	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8c0	            0x84c0	                             test al, al	      7004	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8c2	            0x741b	                            je 0x400c8df	      7004	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8c4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8c8	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8cc	          0x83e040	                           and eax, 0x40	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8cf	            0x84c0	                             test al, al	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8d1	            0x7406	                            je 0x400c8d9	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8d3	        0x488b45f8	                mov rax, qword [rbp - 8]	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8d7	            0xeb46	                           jmp 0x400c91f	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8d9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8dd	            0xeb40	                           jmp 0x400c91f	      7005	ldlang.c	FUNCTION_156	FOR_1	IF_1
0x400c8df	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8e3	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8e7	          0x4885c0	                           test rax, rax	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8ea	            0x741c	                            je 0x400c908	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8ec	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8f0	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8f4	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8fb	          0x4885c0	                           test rax, rax	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c8fe	            0x7508	                           jne 0x400c908	      7007	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c900	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7008	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c904	        0x488945f8	                mov qword [rbp - 8], rax	      7008	ldlang.c	FUNCTION_156	FOR_1	IF_2
0x400c908	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7002	ldlang.c	FUNCTION_156	FOR_1
0x400c90c	        0x488b4030	            mov rax, qword [rax + 0x30] 	      7002	ldlang.c	FUNCTION_156	FOR_1
0x400c910	        0x488945f0	             mov qword [rbp - 0x10], rax	      7002	ldlang.c	FUNCTION_156	FOR_1
0x400c914	      0x48837df000	               cmp qword [rbp - 0x10], 0	      7000	ldlang.c	FUNCTION_156	FOR_1
0x400c919	            0x759a	                           jne 0x400c8b5	      7000	ldlang.c	FUNCTION_156	FOR_1
0x400c91b	        0x488b45f8	                mov rax, qword [rbp - 8]	      7013	ldlang.c	FUNCTION_156
0x400c91f	              0x5d	                                 pop rbp	      7014	ldlang.c	FUNCTION_156
0x400c920	              0xc3	                                     ret	      7014	ldlang.c	FUNCTION_156
lang_add_assignment	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	16
0x400d5b4	              0x55	                                push rbp	      7583	ldlang.c	FUNCTION_173
0x400d5b5	          0x4889e5	                            mov rbp, rsp	      7583	ldlang.c	FUNCTION_173
0x400d5b8	        0x4883ec20	                           sub rsp, 0x20	      7583	ldlang.c	FUNCTION_173
0x400d5bc	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7583	ldlang.c	FUNCTION_173
0x400d5c0	    0x488b05000000	            mov rax, qword [0x0400d5c7] 	      7586	ldlang.c	FUNCTION_173
0x400d5c7	          0x4889c2	                            mov rdx, rax	      7586	ldlang.c	FUNCTION_173
0x400d5ca	      0xbe18000000	                           mov esi, 0x18	      7586	ldlang.c	FUNCTION_173
0x400d5cf	      0xbf01000000	                              mov edi, 1	      7586	ldlang.c	FUNCTION_173
0x400d5d4	      0xe89644ffff	                  call sym.new_statement	      7586	ldlang.c	FUNCTION_173
0x400d5d9	        0x488945f8	                mov qword [rbp - 8], rax	      7586	ldlang.c	FUNCTION_173
0x400d5dd	        0x488b45f8	                mov rax, qword [rbp - 8]	      7587	ldlang.c	FUNCTION_173
0x400d5e1	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7587	ldlang.c	FUNCTION_173
0x400d5e5	        0x48895010	             mov qword [rax + 0x10], rdx	      7587	ldlang.c	FUNCTION_173
0x400d5e9	        0x488b45f8	                mov rax, qword [rbp - 8]	      7588	ldlang.c	FUNCTION_173
0x400d5ed	              0xc9	                                   leave	      7589	ldlang.c	FUNCTION_173
0x400d5ee	              0xc3	                                     ret	      7589	ldlang.c	FUNCTION_173
print_reloc_statement	functions,0:ELSE,1:FOR,1:CALL,8:IF,2:DO,0:WHILE,0:SWITCH,0	75
0x4007981	              0x55	                                push rbp	      4349	ldlang.c	FUNCTION_100
0x4007982	          0x4889e5	                            mov rbp, rsp	      4349	ldlang.c	FUNCTION_100
0x4007985	        0x4883ec30	                           sub rsp, 0x30	      4349	ldlang.c	FUNCTION_100
0x4007989	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4349	ldlang.c	FUNCTION_100
0x400798d	      0xe80be1ffff	                       call sym.init_opb	      4354	ldlang.c	FUNCTION_100	CALL_1
0x4007992	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      4355	ldlang.c	FUNCTION_100	FOR_1
0x4007999	            0xeb09	                           jmp 0x40079a4	      4355	ldlang.c	FUNCTION_100	FOR_1
0x400799b	      0xe800000000	                          call 0x40079a0	      4356	ldlang.c	FUNCTION_100	CALL_2
0x40079a0	        0x8345ec01	               add dword [rbp - 0x14], 1	      4355	ldlang.c	FUNCTION_100	FOR_1
0x40079a4	        0x837dec0f	            cmp dword [rbp - 0x14], 0xf 	      4355	ldlang.c	FUNCTION_100	FOR_1
0x40079a8	            0x7ef1	                           jle 0x400799b	      4355	ldlang.c	FUNCTION_100	FOR_1
0x40079aa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4358	ldlang.c	FUNCTION_100
0x40079ae	        0x488b4048	            mov rax, qword [rax + 0x48] 	      4358	ldlang.c	FUNCTION_100
0x40079b2	        0x488945f0	             mov qword [rbp - 0x10], rax	      4358	ldlang.c	FUNCTION_100
0x40079b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4359	ldlang.c	FUNCTION_100	IF_1
0x40079ba	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4359	ldlang.c	FUNCTION_100	IF_1
0x40079be	          0x4885c0	                           test rax, rax	      4359	ldlang.c	FUNCTION_100	IF_1
0x40079c1	            0x7410	                            je 0x40079d3	      4359	ldlang.c	FUNCTION_100	IF_1
0x40079c3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4360	ldlang.c	FUNCTION_100	IF_1
0x40079c7	        0x488b4040	            mov rax, qword [rax + 0x40] 	      4360	ldlang.c	FUNCTION_100	IF_1
0x40079cb	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4360	ldlang.c	FUNCTION_100	IF_1
0x40079cf	        0x480145f0	            add qword [rbp - 0x10], rax 	      4360	ldlang.c	FUNCTION_100	IF_1
0x40079d3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079d7	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079db	          0x4889c7	                            mov rdi, rax	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079de	      0xe800000000	                          call 0x40079e3	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079e3	            0x89c0	                            mov eax, eax	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079e5	        0x488945f8	                mov qword [rbp - 8], rax	      4362	ldlang.c	FUNCTION_100	CALL_3
0x40079e9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4364	ldlang.c	FUNCTION_100	CALL_4
0x40079ed	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4364	ldlang.c	FUNCTION_100	CALL_4
0x40079f1	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4364	ldlang.c	FUNCTION_100	CALL_4
0x40079f5	    0x8b0500000000	            mov eax, dword [0x040079fb] 	      4364	ldlang.c	FUNCTION_100	CALL_4
0x40079fb	        0x488b75f8	                mov rsi, qword [rbp - 8]	      4364	ldlang.c	FUNCTION_100	CALL_4
0x40079ff	            0x89c1	                            mov ecx, eax	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a01	          0x48d3ee	                             shr rsi, cl	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a04	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a08	          0x4889d1	                            mov rcx, rdx	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a0b	          0x4889f2	                            mov rdx, rsi	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a0e	          0x4889c6	                            mov rsi, rax	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a11	      0xbf00000000	                              mov edi, 0	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a16	      0xb800000000	                              mov eax, 0	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a1b	      0xe800000000	                          call 0x4007a20	      4364	ldlang.c	FUNCTION_100	CALL_4
0x4007a20	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4366	ldlang.c	FUNCTION_100	IF_2
0x4007a24	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4366	ldlang.c	FUNCTION_100	IF_2
0x4007a28	          0x4885c0	                           test rax, rax	      4366	ldlang.c	FUNCTION_100	IF_2
0x4007a2b	            0x741c	                            je 0x4007a49	      4366	ldlang.c	FUNCTION_100	IF_2
0x4007a2d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a31	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a35	          0x4889c6	                            mov rsi, rax	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a38	      0xbf00000000	                              mov edi, 0	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a3d	      0xb800000000	                              mov eax, 0	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a42	      0xe800000000	                          call 0x4007a47	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a47	            0xeb1d	                           jmp 0x4007a66	      4367	ldlang.c	FUNCTION_100	CALL_5
0x4007a49	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a4d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a51	          0x488b00	                    mov rax, qword [rax]	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a54	          0x4889c6	                            mov rsi, rax	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a57	      0xbf00000000	                              mov edi, 0	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a5c	      0xb800000000	                              mov eax, 0	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a61	      0xe800000000	                          call 0x4007a66	      4369	ldlang.c	FUNCTION_100	CALL_6
0x4007a66	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4371	ldlang.c	FUNCTION_100	CALL_7
0x4007a6a	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4371	ldlang.c	FUNCTION_100	CALL_7
0x4007a6e	          0x4889c7	                            mov rdi, rax	      4371	ldlang.c	FUNCTION_100	CALL_7
0x4007a71	      0xe800000000	                          call 0x4007a76	      4371	ldlang.c	FUNCTION_100	CALL_7
0x4007a76	      0xe800000000	                          call 0x4007a7b	      4373	ldlang.c	FUNCTION_100	CALL_8
0x4007a7b	    0x8b0500000000	            mov eax, dword [0x04007a81] 	      4375	ldlang.c	FUNCTION_100
0x4007a81	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4375	ldlang.c	FUNCTION_100
0x4007a85	            0x89c1	                            mov ecx, eax	      4375	ldlang.c	FUNCTION_100
0x4007a87	          0x48d3ea	                             shr rdx, cl	      4375	ldlang.c	FUNCTION_100
0x4007a8a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4375	ldlang.c	FUNCTION_100
0x4007a8e	          0x4801d0	                            add rax, rdx	      4375	ldlang.c	FUNCTION_100
0x4007a91	    0x488905000000	            mov qword [0x04007a98], rax 	      4375	ldlang.c	FUNCTION_100
0x4007a98	              0x90	                                     nop	      4376	ldlang.c	FUNCTION_100
0x4007a99	              0xc9	                                   leave	      4376	ldlang.c	FUNCTION_100
0x4007a9a	              0xc3	                                     ret	      4376	ldlang.c	FUNCTION_100
ldlang_add_undef	functions,0:ELSE,0:FOR,0:CALL,3:IF,1:DO,0:WHILE,0:SWITCH,0	38
0x4005e8d	              0x55	                                push rbp	      3388	ldlang.c	FUNCTION_79
0x4005e8e	          0x4889e5	                            mov rbp, rsp	      3388	ldlang.c	FUNCTION_79
0x4005e91	        0x4883ec20	                           sub rsp, 0x20	      3388	ldlang.c	FUNCTION_79
0x4005e95	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3388	ldlang.c	FUNCTION_79
0x4005e99	          0x8975e4	             mov dword [rbp - 0x1c], esi	      3388	ldlang.c	FUNCTION_79
0x4005e9c	    0x8b0500000000	            mov eax, dword [0x04005ea2] 	      3391	ldlang.c	FUNCTION_79
0x4005ea2	            0x85c0	                           test eax, eax	      3391	ldlang.c	FUNCTION_79
0x4005ea4	            0x7506	                           jne 0x4005eac	      3391	ldlang.c	FUNCTION_79
0x4005ea6	        0x837de400	               cmp dword [rbp - 0x1c], 0	      3391	ldlang.c	FUNCTION_79
0x4005eaa	            0x7407	                            je 0x4005eb3	      3391	ldlang.c	FUNCTION_79
0x4005eac	      0xb801000000	                              mov eax, 1	      3391	ldlang.c	FUNCTION_79
0x4005eb1	            0xeb05	                           jmp 0x4005eb8	      3391	ldlang.c	FUNCTION_79
0x4005eb3	      0xb800000000	                              mov eax, 0	      3391	ldlang.c	FUNCTION_79
0x4005eb8	    0x890500000000	            mov dword [0x04005ebe], eax 	      3391	ldlang.c	FUNCTION_79
0x4005ebe	      0xbf10000000	                           mov edi, 0x10	      3392	ldlang.c	FUNCTION_79	CALL_1
0x4005ec3	      0xe800000000	                          call 0x4005ec8	      3392	ldlang.c	FUNCTION_79	CALL_1
0x4005ec8	        0x488945f8	                mov qword [rbp - 8], rax	      3392	ldlang.c	FUNCTION_79	CALL_1
0x4005ecc	    0x488b15000000	            mov rdx, qword [0x04005ed3] 	      3393	ldlang.c	FUNCTION_79
0x4005ed3	        0x488b45f8	                mov rax, qword [rbp - 8]	      3393	ldlang.c	FUNCTION_79
0x4005ed7	          0x488910	                    mov qword [rax], rdx	      3393	ldlang.c	FUNCTION_79
0x4005eda	        0x488b45f8	                mov rax, qword [rbp - 8]	      3394	ldlang.c	FUNCTION_79
0x4005ede	    0x488905000000	            mov qword [0x04005ee5], rax 	      3394	ldlang.c	FUNCTION_79
0x4005ee5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005ee9	          0x4889c7	                            mov rdi, rax	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005eec	      0xe800000000	                          call 0x4005ef1	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005ef1	          0x4889c2	                            mov rdx, rax	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005ef4	        0x488b45f8	                mov rax, qword [rbp - 8]	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005ef8	        0x48895008	                mov qword [rax + 8], rdx	      3396	ldlang.c	FUNCTION_79	CALL_2
0x4005efc	    0x488b05000000	            mov rax, qword [0x04005f03] 	      3398	ldlang.c	FUNCTION_79	IF_1
0x4005f03	          0x4885c0	                           test rax, rax	      3398	ldlang.c	FUNCTION_79	IF_1
0x4005f06	            0x7410	                            je 0x4005f18	      3398	ldlang.c	FUNCTION_79	IF_1
0x4005f08	        0x488b45f8	                mov rax, qword [rbp - 8]	      3399	ldlang.c	FUNCTION_79	CALL_3
0x4005f0c	        0x488b4008	                mov rax, qword [rax + 8]	      3399	ldlang.c	FUNCTION_79	CALL_3
0x4005f10	          0x4889c7	                            mov rdi, rax	      3399	ldlang.c	FUNCTION_79	CALL_3
0x4005f13	      0xe803000000	               call sym.insert_undefined	      3399	ldlang.c	FUNCTION_79	CALL_3
0x4005f18	              0x90	                                     nop	      3400	ldlang.c	FUNCTION_79
0x4005f19	              0xc9	                                   leave	      3400	ldlang.c	FUNCTION_79
0x4005f1a	              0xc3	                                     ret	      3400	ldlang.c	FUNCTION_79
lang_relax_sections	functions,0:ELSE,0:FOR,0:CALL,6:IF,2:DO,1:WHILE,1:SWITCH,0	56
0x400c7b0	              0x55	                                push rbp	      6931	ldlang.c	FUNCTION_155
0x400c7b1	          0x4889e5	                            mov rbp, rsp	      6931	ldlang.c	FUNCTION_155
0x400c7b4	        0x4883ec20	                           sub rsp, 0x20	      6931	ldlang.c	FUNCTION_155
0x400c7b8	          0x897dec	             mov dword [rbp - 0x14], edi	      6931	ldlang.c	FUNCTION_155
0x400c7bb	    0x64488b042528	                mov rax, qword fs:[0x28]	      6931	ldlang.c	FUNCTION_155
0x400c7c4	        0x488945f8	                mov qword [rbp - 8], rax	      6931	ldlang.c	FUNCTION_155
0x400c7c8	            0x31c0	                            xor eax, eax	      6931	ldlang.c	FUNCTION_155
0x400c7ca	    0x8b0500000000	            mov eax, dword [0x0400c7d0] 	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7d0	            0x85c0	                           test eax, eax	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7d2	            0x740b	                            je 0x400c7df	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7d4	    0x8b0500000000	            mov eax, dword [0x0400c7da] 	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7da	          0x83f801	                              cmp eax, 1	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7dd	            0x757f	                           jne 0x400c85e	      6932	ldlang.c	FUNCTION_155	IF_1
0x400c7df	    0x8b0500000000	            mov eax, dword [0x0400c7e5] 	      6935	ldlang.c	FUNCTION_155	IF_1
0x400c7e5	          0x8945f4	              mov dword [rbp - 0xc], eax	      6935	ldlang.c	FUNCTION_155	IF_1
0x400c7e8	    0xc70500000000	               mov dword [0x0400c7f2], 0	      6938	ldlang.c	FUNCTION_155	IF_1
0x400c7f2	            0xeb56	                           jmp 0x400c84a	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c7f4	    0xc70500000000	     mov dword [0x0400c7fe], 0xffffffff 	      6945	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c7fe	    0x8b0500000000	            mov eax, dword [0x0400c804] 	      6948	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1
0x400c804	          0x83c001	                              add eax, 1	      6948	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1
0x400c807	    0x890500000000	            mov dword [0x0400c80d], eax 	      6948	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1
0x400c80d	      0xbf03000000	                              mov edi, 3	      6956	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_1
0x400c812	      0xe800000000	                          call 0x400c817	      6956	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_1
0x400c817	      0xe800000000	                          call 0x400c81c	      6960	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_2
0x400c81c	    0xc745f0000000	               mov dword [rbp - 0x10], 0	      6964	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1
0x400c823	        0x488d45f0	                   lea rax, [rbp - 0x10]	      6965	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_3
0x400c827	      0xbe00000000	                              mov esi, 0	      6965	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_3
0x400c82c	          0x4889c7	                            mov rdi, rax	      6965	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_3
0x400c82f	      0xe800000000	                          call 0x400c834	      6965	ldlang.c	FUNCTION_155	IF_1	WHILE_1	DO_1	CALL_3
0x400c834	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      6967	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c837	            0x85c0	                           test eax, eax	      6967	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c839	            0x75c3	                           jne 0x400c7fe	      6967	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c83b	    0x8b0500000000	            mov eax, dword [0x0400c841] 	      6969	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c841	          0x83c001	                              add eax, 1	      6969	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c844	    0x890500000000	            mov dword [0x0400c84a], eax 	      6969	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c84a	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c84d	          0x8d50ff	                      lea edx, [rax - 1]	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c850	          0x8955f4	              mov dword [rbp - 0xc], edx	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c853	            0x85c0	                           test eax, eax	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c855	            0x759d	                           jne 0x400c7f4	      6940	ldlang.c	FUNCTION_155	IF_1	WHILE_1
0x400c857	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      6971	ldlang.c	FUNCTION_155	IF_1
0x400c85e	        0x837dec00	               cmp dword [rbp - 0x14], 0	      6974	ldlang.c	FUNCTION_155	IF_2
0x400c862	            0x741e	                            je 0x400c882	      6974	ldlang.c	FUNCTION_155	IF_2
0x400c864	      0xbf03000000	                              mov edi, 3	      6977	ldlang.c	FUNCTION_155	IF_2	CALL_4
0x400c869	      0xe800000000	                          call 0x400c86e	      6977	ldlang.c	FUNCTION_155	IF_2	CALL_4
0x400c86e	      0xe800000000	                          call 0x400c873	      6978	ldlang.c	FUNCTION_155	IF_2	CALL_5
0x400c873	      0xbe01000000	                              mov esi, 1	      6979	ldlang.c	FUNCTION_155	IF_2	CALL_6
0x400c878	      0xbf00000000	                              mov edi, 0	      6979	ldlang.c	FUNCTION_155	IF_2	CALL_6
0x400c87d	      0xe800000000	                          call 0x400c882	      6979	ldlang.c	FUNCTION_155	IF_2	CALL_6
0x400c882	              0x90	                                     nop	      6981	ldlang.c	FUNCTION_155
0x400c883	        0x488b45f8	                mov rax, qword [rbp - 8]	      6981	ldlang.c	FUNCTION_155
0x400c887	    0x644833042528	                xor rax, qword fs:[0x28]	      6981	ldlang.c	FUNCTION_155
0x400c890	            0x7405	                            je 0x400c897	      6981	ldlang.c	FUNCTION_155
0x400c892	      0xe800000000	                          call 0x400c897	      6981	ldlang.c	FUNCTION_155
0x400c897	              0xc9	                                   leave	      6981	ldlang.c	FUNCTION_155
0x400c898	              0xc3	                                     ret	      6981	ldlang.c	FUNCTION_155
ignore_bfd_errors	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	7
0x400b54e	              0x55	                                push rbp	      6260	ldlang.c	FUNCTION_134
0x400b54f	          0x4889e5	                            mov rbp, rsp	      6260	ldlang.c	FUNCTION_134
0x400b552	        0x48897df8	                mov qword [rbp - 8], rdi	      6260	ldlang.c	FUNCTION_134
0x400b556	        0x488975f0	             mov qword [rbp - 0x10], rsi	      6260	ldlang.c	FUNCTION_134
0x400b55a	              0x90	                                     nop	      6262	ldlang.c	FUNCTION_134
0x400b55b	              0x5d	                                 pop rbp	      6262	ldlang.c	FUNCTION_134
0x400b55c	              0xc3	                                     ret	      6262	ldlang.c	FUNCTION_134
output_section_callback_fast	functions,0:ELSE,0:FOR,0:CALL,3:IF,2:DO,0:WHILE,0:SWITCH,0	44
0x4000b1f	              0x55	                                push rbp	       523	ldlang.c	FUNCTION_16
0x4000b20	          0x4889e5	                            mov rbp, rsp	       523	ldlang.c	FUNCTION_16
0x4000b23	        0x4883ec50	                           sub rsp, 0x50	       523	ldlang.c	FUNCTION_16
0x4000b27	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       523	ldlang.c	FUNCTION_16
0x4000b2b	        0x488975d0	             mov qword [rbp - 0x30], rsi	       523	ldlang.c	FUNCTION_16
0x4000b2f	        0x488955c8	             mov qword [rbp - 0x38], rdx	       523	ldlang.c	FUNCTION_16
0x4000b33	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       523	ldlang.c	FUNCTION_16
0x4000b37	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       523	ldlang.c	FUNCTION_16
0x4000b3b	        0x4c894db0	              mov qword [rbp - 0x50], r9	       523	ldlang.c	FUNCTION_16
0x4000b3f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       528	ldlang.c	FUNCTION_16
0x4000b43	        0x488945e8	             mov qword [rbp - 0x18], rax	       528	ldlang.c	FUNCTION_16
0x4000b47	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b4b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b4f	          0x4889d6	                            mov rsi, rdx	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b52	          0x4889c7	                            mov rdi, rax	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b55	      0xe8e3f7ffff	               call sym.unique_section_p	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b5a	            0x85c0	                           test eax, eax	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b5c	            0x7561	                           jne 0x4000bbf	       530	ldlang.c	FUNCTION_16	IF_1	CALL_1
0x4000b5e	      0xbf18000000	                           mov edi, 0x18	       533	ldlang.c	FUNCTION_16	CALL_2
0x4000b63	      0xe800000000	                          call 0x4000b68	       533	ldlang.c	FUNCTION_16	CALL_2
0x4000b68	        0x488945f0	             mov qword [rbp - 0x10], rax	       533	ldlang.c	FUNCTION_16	CALL_2
0x4000b6c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       534	ldlang.c	FUNCTION_16
0x4000b70	    0x48c740080000	                  mov qword [rax + 8], 0	       534	ldlang.c	FUNCTION_16
0x4000b78	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       535	ldlang.c	FUNCTION_16
0x4000b7c	    0x48c740100000	               mov qword [rax + 0x10], 0	       535	ldlang.c	FUNCTION_16
0x4000b84	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       536	ldlang.c	FUNCTION_16
0x4000b88	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       536	ldlang.c	FUNCTION_16
0x4000b8c	          0x488910	                    mov qword [rax], rdx	       536	ldlang.c	FUNCTION_16
0x4000b8f	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000b93	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000b97	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000b9b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000b9f	          0x4889c7	                            mov rdi, rax	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000ba2	      0xe8bffeffff	                 call sym.wild_sort_fast	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000ba7	        0x488945f8	                mov qword [rbp - 8], rax	       538	ldlang.c	FUNCTION_16	CALL_3
0x4000bab	      0x48837df800	                  cmp qword [rbp - 8], 0	       539	ldlang.c	FUNCTION_16	IF_2
0x4000bb0	            0x740e	                            je 0x4000bc0	       539	ldlang.c	FUNCTION_16	IF_2
0x4000bb2	        0x488b45f8	                mov rax, qword [rbp - 8]	       540	ldlang.c	FUNCTION_16	IF_2
0x4000bb6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       540	ldlang.c	FUNCTION_16	IF_2
0x4000bba	          0x488910	                    mov qword [rax], rdx	       540	ldlang.c	FUNCTION_16	IF_2
0x4000bbd	            0xeb01	                           jmp 0x4000bc0	       540	ldlang.c	FUNCTION_16	IF_2
0x4000bbf	              0x90	                                     nop	       531	ldlang.c	FUNCTION_16	IF_1
0x4000bc0	              0xc9	                                   leave	       541	ldlang.c	FUNCTION_16
0x4000bc1	              0xc3	                                     ret	       541	ldlang.c	FUNCTION_16
lang_section_start	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	24
0x400d383	              0x55	                                push rbp	      7475	ldlang.c	FUNCTION_165
0x400d384	          0x4889e5	                            mov rbp, rsp	      7475	ldlang.c	FUNCTION_165
0x400d387	        0x4883ec30	                           sub rsp, 0x30	      7475	ldlang.c	FUNCTION_165
0x400d38b	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7475	ldlang.c	FUNCTION_165
0x400d38f	        0x488975e0	             mov qword [rbp - 0x20], rsi	      7475	ldlang.c	FUNCTION_165
0x400d393	        0x488955d8	             mov qword [rbp - 0x28], rdx	      7475	ldlang.c	FUNCTION_165
0x400d397	    0x488b05000000	            mov rax, qword [0x0400d39e] 	      7478	ldlang.c	FUNCTION_165
0x400d39e	          0x4889c2	                            mov rdx, rax	      7478	ldlang.c	FUNCTION_165
0x400d3a1	      0xbe28000000	                           mov esi, 0x28	      7478	ldlang.c	FUNCTION_165
0x400d3a6	      0xbf03000000	                              mov edi, 3	      7478	ldlang.c	FUNCTION_165
0x400d3ab	      0xe8bf46ffff	                  call sym.new_statement	      7478	ldlang.c	FUNCTION_165
0x400d3b0	        0x488945f8	                mov qword [rbp - 8], rax	      7478	ldlang.c	FUNCTION_165
0x400d3b4	        0x488b45f8	                mov rax, qword [rbp - 8]	      7479	ldlang.c	FUNCTION_165
0x400d3b8	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7479	ldlang.c	FUNCTION_165
0x400d3bc	        0x48895010	             mov qword [rax + 0x10], rdx	      7479	ldlang.c	FUNCTION_165
0x400d3c0	        0x488b45f8	                mov rax, qword [rbp - 8]	      7480	ldlang.c	FUNCTION_165
0x400d3c4	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      7480	ldlang.c	FUNCTION_165
0x400d3c8	        0x48895018	             mov qword [rax + 0x18], rdx	      7480	ldlang.c	FUNCTION_165
0x400d3cc	        0x488b45f8	                mov rax, qword [rbp - 8]	      7481	ldlang.c	FUNCTION_165
0x400d3d0	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      7481	ldlang.c	FUNCTION_165
0x400d3d4	        0x48895020	             mov qword [rax + 0x20], rdx	      7481	ldlang.c	FUNCTION_165
0x400d3d8	              0x90	                                     nop	      7482	ldlang.c	FUNCTION_165
0x400d3d9	              0xc9	                                   leave	      7482	ldlang.c	FUNCTION_165
0x400d3da	              0xc3	                                     ret	      7482	ldlang.c	FUNCTION_165
walk_wild_consider_section	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	30
0x400050f	              0x55	                                push rbp	       274	ldlang.c	FUNCTION_7
0x4000510	          0x4889e5	                            mov rbp, rsp	       274	ldlang.c	FUNCTION_7
0x4000513	        0x4883ec30	                           sub rsp, 0x30	       274	ldlang.c	FUNCTION_7
0x4000517	        0x48897df8	                mov qword [rbp - 8], rdi	       274	ldlang.c	FUNCTION_7
0x400051b	        0x488975f0	             mov qword [rbp - 0x10], rsi	       274	ldlang.c	FUNCTION_7
0x400051f	        0x488955e8	             mov qword [rbp - 0x18], rdx	       274	ldlang.c	FUNCTION_7
0x4000523	        0x48894de0	             mov qword [rbp - 0x20], rcx	       274	ldlang.c	FUNCTION_7
0x4000527	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       274	ldlang.c	FUNCTION_7
0x400052b	        0x4c894dd0	              mov qword [rbp - 0x30], r9	       274	ldlang.c	FUNCTION_7
0x400052f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x4000533	        0x488b4010	            mov rax, qword [rax + 0x10] 	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x4000537	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x400053b	          0x4889d6	                            mov rsi, rdx	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x400053e	          0x4889c7	                            mov rdi, rax	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x4000541	      0xe8d7feffff	 call sym.walk_wild_file_in_exclude_list	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x4000546	            0x85c0	                           test eax, eax	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x4000548	            0x7524	                           jne 0x400056e	       276	ldlang.c	FUNCTION_7	IF_1	CALL_1
0x400054a	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	ldlang.c	FUNCTION_7
0x400054e	        0x488b4878	            mov rcx, qword [rax + 0x78] 	       279	ldlang.c	FUNCTION_7
0x4000552	        0x4c8b4dd0	              mov r9, qword [rbp - 0x30]	       279	ldlang.c	FUNCTION_7
0x4000556	        0x4c8b45f0	              mov r8, qword [rbp - 0x10]	       279	ldlang.c	FUNCTION_7
0x400055a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       279	ldlang.c	FUNCTION_7
0x400055e	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       279	ldlang.c	FUNCTION_7
0x4000562	        0x488b7df8	                mov rdi, qword [rbp - 8]	       279	ldlang.c	FUNCTION_7
0x4000566	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       279	ldlang.c	FUNCTION_7
0x400056a	            0xffd0	                                call rax	       279	ldlang.c	FUNCTION_7
0x400056c	            0xeb01	                           jmp 0x400056f	       279	ldlang.c	FUNCTION_7
0x400056e	              0x90	                                     nop	       277	ldlang.c	FUNCTION_7	IF_1
0x400056f	              0xc9	                                   leave	       280	ldlang.c	FUNCTION_7
0x4000570	              0xc3	                                     ret	       280	ldlang.c	FUNCTION_7
lang_add_vers_depend	functions,0:ELSE,0:FOR,1:CALL,4:IF,1:DO,0:WHILE,0:SWITCH,0	45
0x400f1ed	              0x55	                                push rbp	      8553	ldlang.c	FUNCTION_200
0x400f1ee	          0x4889e5	                            mov rbp, rsp	      8553	ldlang.c	FUNCTION_200
0x400f1f1	        0x4883ec20	                           sub rsp, 0x20	      8553	ldlang.c	FUNCTION_200
0x400f1f5	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8553	ldlang.c	FUNCTION_200
0x400f1f9	        0x488975e0	             mov qword [rbp - 0x20], rsi	      8553	ldlang.c	FUNCTION_200
0x400f1fd	      0xbf10000000	                           mov edi, 0x10	      8557	ldlang.c	FUNCTION_200	CALL_1
0x400f202	      0xe800000000	                          call 0x400f207	      8557	ldlang.c	FUNCTION_200	CALL_1
0x400f207	        0x488945f8	                mov qword [rbp - 8], rax	      8557	ldlang.c	FUNCTION_200	CALL_1
0x400f20b	        0x488b45f8	                mov rax, qword [rbp - 8]	      8558	ldlang.c	FUNCTION_200
0x400f20f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8558	ldlang.c	FUNCTION_200
0x400f213	          0x488910	                    mov qword [rax], rdx	      8558	ldlang.c	FUNCTION_200
0x400f216	    0x488b05000000	            mov rax, qword [0x0400f21d] 	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f21d	        0x488945f0	             mov qword [rbp - 0x10], rax	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f221	            0xeb38	                           jmp 0x400f25b	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f223	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f227	        0x488b4008	                mov rax, qword [rax + 8]	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f22b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f22f	          0x4889d6	                            mov rsi, rdx	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f232	          0x4889c7	                            mov rdi, rax	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f235	      0xe800000000	                          call 0x400f23a	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f23a	            0x85c0	                           test eax, eax	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f23c	            0x7512	                           jne 0x400f250	      8562	ldlang.c	FUNCTION_200	FOR_1	IF_1	CALL_2
0x400f23e	        0x488b45f8	                mov rax, qword [rbp - 8]	      8564	ldlang.c	FUNCTION_200	FOR_1	IF_1
0x400f242	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      8564	ldlang.c	FUNCTION_200	FOR_1	IF_1
0x400f246	        0x48895008	                mov qword [rax + 8], rdx	      8564	ldlang.c	FUNCTION_200	FOR_1	IF_1
0x400f24a	        0x488b45f8	                mov rax, qword [rbp - 8]	      8565	ldlang.c	FUNCTION_200	FOR_1	IF_1
0x400f24e	            0xeb43	                           jmp 0x400f293	      8565	ldlang.c	FUNCTION_200	FOR_1	IF_1
0x400f250	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f254	          0x488b00	                    mov rax, qword [rax]	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f257	        0x488945f0	             mov qword [rbp - 0x10], rax	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f25b	      0x48837df000	               cmp qword [rbp - 0x10], 0	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f260	            0x75c1	                           jne 0x400f223	      8560	ldlang.c	FUNCTION_200	FOR_1
0x400f262	      0xbf00000000	                              mov edi, 0	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f267	      0xe800000000	                          call 0x400f26c	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f26c	          0x4889c2	                            mov rdx, rax	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f26f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f273	          0x4889c6	                            mov rsi, rax	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f276	          0x4889d7	                            mov rdi, rdx	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f279	      0xb800000000	                              mov eax, 0	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f27e	      0xe800000000	                          call 0x400f283	      8569	ldlang.c	FUNCTION_200	CALL_4
0x400f283	        0x488b45f8	                mov rax, qword [rbp - 8]	      8571	ldlang.c	FUNCTION_200
0x400f287	    0x48c740080000	                  mov qword [rax + 8], 0	      8571	ldlang.c	FUNCTION_200
0x400f28f	        0x488b45f8	                mov rax, qword [rbp - 8]	      8572	ldlang.c	FUNCTION_200
0x400f293	              0xc9	                                   leave	      8573	ldlang.c	FUNCTION_200
0x400f294	              0xc3	                                     ret	      8573	ldlang.c	FUNCTION_200
ldlang_check_require_defined_symbols	functions,0:ELSE,0:FOR,1:CALL,3:IF,1:DO,0:WHILE,0:SWITCH,0	44
0x400605a	              0x55	                                push rbp	      3468	ldlang.c	FUNCTION_83
0x400605b	          0x4889e5	                            mov rbp, rsp	      3468	ldlang.c	FUNCTION_83
0x400605e	              0x53	                                push rbx	      3468	ldlang.c	FUNCTION_83
0x400605f	        0x4883ec18	                           sub rsp, 0x18	      3468	ldlang.c	FUNCTION_83
0x4006063	    0x488b05000000	            mov rax, qword [0x0400606a] 	      3471	ldlang.c	FUNCTION_83	FOR_1
0x400606a	        0x488945e0	             mov qword [rbp - 0x20], rax	      3471	ldlang.c	FUNCTION_83	FOR_1
0x400606e	            0xeb76	                           jmp 0x40060e6	      3471	ldlang.c	FUNCTION_83	FOR_1
0x4006070	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006074	          0x488b30	                    mov rsi, qword [rax]	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006077	    0x488b05000000	            mov rax, qword [0x0400607e] 	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x400607e	    0x41b801000000	                              mov r8d, 1	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006084	      0xb900000000	                              mov ecx, 0	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006089	      0xba00000000	                              mov edx, 0	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x400608e	          0x4889c7	                            mov rdi, rax	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006091	      0xe800000000	                          call 0x4006096	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x4006096	        0x488945e8	             mov qword [rbp - 0x18], rax	      3475	ldlang.c	FUNCTION_83	FOR_1	CALL_1
0x400609a	      0x48837de800	               cmp qword [rbp - 0x18], 0	      3477	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x400609f	            0x7418	                            je 0x40060b9	      3477	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3478	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060a5	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      3478	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060a9	            0x3c03	                               cmp al, 3	      3478	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060ab	            0x742d	                            je 0x40060da	      3478	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060ad	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3479	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060b1	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      3479	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060b5	            0x3c04	                               cmp al, 4	      3479	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060b7	            0x7421	                            je 0x40060da	      3479	ldlang.c	FUNCTION_83	FOR_1	IF_1
0x40060b9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060bd	          0x488b18	                    mov rbx, qword [rax]	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060c0	      0xbf00000000	                              mov edi, 0	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060c5	      0xe800000000	                          call 0x40060ca	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060ca	          0x4889de	                            mov rsi, rbx	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060cd	          0x4889c7	                            mov rdi, rax	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060d0	      0xb800000000	                              mov eax, 0	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060d5	      0xe800000000	                          call 0x40060da	      3480	ldlang.c	FUNCTION_83	FOR_1	CALL_3
0x40060da	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3471	ldlang.c	FUNCTION_83	FOR_1
0x40060de	        0x488b4008	                mov rax, qword [rax + 8]	      3471	ldlang.c	FUNCTION_83	FOR_1
0x40060e2	        0x488945e0	             mov qword [rbp - 0x20], rax	      3471	ldlang.c	FUNCTION_83	FOR_1
0x40060e6	      0x48837de000	               cmp qword [rbp - 0x20], 0	      3471	ldlang.c	FUNCTION_83	FOR_1
0x40060eb	            0x7583	                           jne 0x4006070	      3471	ldlang.c	FUNCTION_83	FOR_1
0x40060ed	              0x90	                                     nop	      3482	ldlang.c	FUNCTION_83
0x40060ee	        0x4883c418	                           add rsp, 0x18	      3482	ldlang.c	FUNCTION_83
0x40060f2	              0x5b	                                 pop rbx	      3482	ldlang.c	FUNCTION_83
0x40060f3	              0x5d	                                 pop rbp	      3482	ldlang.c	FUNCTION_83
0x40060f4	              0xc3	                                     ret	      3482	ldlang.c	FUNCTION_83
lang_add_unique	functions,0:ELSE,0:FOR,1:CALL,3:IF,1:DO,0:WHILE,0:SWITCH,0	38
0x400f506	              0x55	                                push rbp	      8647	ldlang.c	FUNCTION_203
0x400f507	          0x4889e5	                            mov rbp, rsp	      8647	ldlang.c	FUNCTION_203
0x400f50a	        0x4883ec20	                           sub rsp, 0x20	      8647	ldlang.c	FUNCTION_203
0x400f50e	        0x48897de8	             mov qword [rbp - 0x18], rdi	      8647	ldlang.c	FUNCTION_203
0x400f512	    0x488b05000000	            mov rax, qword [0x0400f519] 	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f519	        0x488945f8	                mov qword [rbp - 8], rax	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f51d	            0xeb26	                           jmp 0x400f545	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f51f	        0x488b45f8	                mov rax, qword [rbp - 8]	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f523	        0x488b4008	                mov rax, qword [rax + 8]	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f527	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f52b	          0x4889d6	                            mov rsi, rdx	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f52e	          0x4889c7	                            mov rdi, rax	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f531	      0xe800000000	                          call 0x400f536	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f536	            0x85c0	                           test eax, eax	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f538	            0x7452	                            je 0x400f58c	      8651	ldlang.c	FUNCTION_203	FOR_1	IF_1	CALL_1
0x400f53a	        0x488b45f8	                mov rax, qword [rbp - 8]	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f53e	          0x488b00	                    mov rax, qword [rax]	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f541	        0x488945f8	                mov qword [rbp - 8], rax	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f545	      0x48837df800	                  cmp qword [rbp - 8], 0	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f54a	            0x75d3	                           jne 0x400f51f	      8650	ldlang.c	FUNCTION_203	FOR_1
0x400f54c	      0xbf10000000	                           mov edi, 0x10	      8654	ldlang.c	FUNCTION_203	CALL_2
0x400f551	      0xe800000000	                          call 0x400f556	      8654	ldlang.c	FUNCTION_203	CALL_2
0x400f556	        0x488945f8	                mov qword [rbp - 8], rax	      8654	ldlang.c	FUNCTION_203	CALL_2
0x400f55a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f55e	          0x4889c7	                            mov rdi, rax	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f561	      0xe800000000	                          call 0x400f566	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f566	          0x4889c2	                            mov rdx, rax	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f569	        0x488b45f8	                mov rax, qword [rbp - 8]	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f56d	        0x48895008	                mov qword [rax + 8], rdx	      8655	ldlang.c	FUNCTION_203	CALL_3
0x400f571	    0x488b15000000	            mov rdx, qword [0x0400f578] 	      8656	ldlang.c	FUNCTION_203
0x400f578	        0x488b45f8	                mov rax, qword [rbp - 8]	      8656	ldlang.c	FUNCTION_203
0x400f57c	          0x488910	                    mov qword [rax], rdx	      8656	ldlang.c	FUNCTION_203
0x400f57f	        0x488b45f8	                mov rax, qword [rbp - 8]	      8657	ldlang.c	FUNCTION_203
0x400f583	    0x488905000000	            mov qword [0x0400f58a], rax 	      8657	ldlang.c	FUNCTION_203
0x400f58a	            0xeb01	                           jmp 0x400f58d	      8657	ldlang.c	FUNCTION_203
0x400f58c	              0x90	                                     nop	      8652	ldlang.c	FUNCTION_203	FOR_1	IF_1
0x400f58d	              0xc9	                                   leave	      8658	ldlang.c	FUNCTION_203
0x400f58e	              0xc3	                                     ret	      8658	ldlang.c	FUNCTION_203
find_relro_section_callback	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	45
0x400c5cb	              0x55	                                push rbp	      6859	ldlang.c	FUNCTION_152
0x400c5cc	          0x4889e5	                            mov rbp, rsp	      6859	ldlang.c	FUNCTION_152
0x400c5cf	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6859	ldlang.c	FUNCTION_152
0x400c5d3	        0x488975e0	             mov qword [rbp - 0x20], rsi	      6859	ldlang.c	FUNCTION_152
0x400c5d7	        0x488955d8	             mov qword [rbp - 0x28], rdx	      6859	ldlang.c	FUNCTION_152
0x400c5db	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      6859	ldlang.c	FUNCTION_152
0x400c5df	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      6859	ldlang.c	FUNCTION_152
0x400c5e3	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      6859	ldlang.c	FUNCTION_152
0x400c5e7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6862	ldlang.c	FUNCTION_152	IF_1
0x400c5eb	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6862	ldlang.c	FUNCTION_152	IF_1
0x400c5ef	          0x4885c0	                           test rax, rax	      6862	ldlang.c	FUNCTION_152	IF_1
0x400c5f2	            0x746f	                            je 0x400c663	      6862	ldlang.c	FUNCTION_152	IF_1
0x400c5f4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c5f8	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c5fc	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c603	    0x488b05000000	            mov rax, qword [0x0400c60a] 	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c60a	          0x4839c2	                            cmp rdx, rax	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c60d	            0x7554	                           jne 0x400c663	      6863	ldlang.c	FUNCTION_152	IF_1
0x400c60f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c613	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c617	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c61a	      0x2500800000	                         and eax, 0x8000	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c61f	            0x85c0	                           test eax, eax	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c621	            0x7540	                           jne 0x400c663	      6864	ldlang.c	FUNCTION_152	IF_1
0x400c623	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c627	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c62a	          0x83e001	                              and eax, 1	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c62d	            0x85c0	                           test eax, eax	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c62f	            0x7432	                            je 0x400c663	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c631	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c635	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c638	      0x2502040000	                          and eax, 0x402	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c63d	      0x3d00040000	                          cmp eax, 0x400	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c642	            0x741f	                            je 0x400c663	      6865	ldlang.c	FUNCTION_152	IF_1
0x400c644	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6866	ldlang.c	FUNCTION_152	IF_1
0x400c648	        0x488b4038	            mov rax, qword [rax + 0x38] 	      6866	ldlang.c	FUNCTION_152	IF_1
0x400c64c	          0x4885c0	                           test rax, rax	      6866	ldlang.c	FUNCTION_152	IF_1
0x400c64f	            0x7412	                            je 0x400c663	      6866	ldlang.c	FUNCTION_152	IF_1
0x400c651	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      6868	ldlang.c	FUNCTION_152	IF_1
0x400c655	        0x488945f8	                mov qword [rbp - 8], rax	      6868	ldlang.c	FUNCTION_152	IF_1
0x400c659	        0x488b45f8	                mov rax, qword [rbp - 8]	      6869	ldlang.c	FUNCTION_152	IF_1
0x400c65d	    0xc70001000000	                      mov dword [rax], 1	      6869	ldlang.c	FUNCTION_152	IF_1
0x400c663	              0x90	                                     nop	      6871	ldlang.c	FUNCTION_152
0x400c664	              0x5d	                                 pop rbp	      6871	ldlang.c	FUNCTION_152
0x400c665	              0xc3	                                     ret	      6871	ldlang.c	FUNCTION_152
section_iterator_callback	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	21
0x4000675	              0x55	                                push rbp	       330	ldlang.c	FUNCTION_9
0x4000676	          0x4889e5	                            mov rbp, rsp	       330	ldlang.c	FUNCTION_9
0x4000679	        0x48897de8	             mov qword [rbp - 0x18], rdi	       330	ldlang.c	FUNCTION_9
0x400067d	        0x488975e0	             mov qword [rbp - 0x20], rsi	       330	ldlang.c	FUNCTION_9
0x4000681	        0x488955d8	             mov qword [rbp - 0x28], rdx	       330	ldlang.c	FUNCTION_9
0x4000685	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       331	ldlang.c	FUNCTION_9
0x4000689	        0x488945f8	                mov qword [rbp - 8], rax	       331	ldlang.c	FUNCTION_9
0x400068d	        0x488b45f8	                mov rax, qword [rbp - 8]	       333	ldlang.c	FUNCTION_9	IF_1
0x4000691	          0x488b00	                    mov rax, qword [rax]	       333	ldlang.c	FUNCTION_9	IF_1
0x4000694	          0x4885c0	                           test rax, rax	       333	ldlang.c	FUNCTION_9	IF_1
0x4000697	            0x7412	                            je 0x40006ab	       333	ldlang.c	FUNCTION_9	IF_1
0x4000699	        0x488b45f8	                mov rax, qword [rbp - 8]	       335	ldlang.c	FUNCTION_9	IF_1
0x400069d	    0xc74008010000	                  mov dword [rax + 8], 1	       335	ldlang.c	FUNCTION_9	IF_1
0x40006a4	      0xb801000000	                              mov eax, 1	       336	ldlang.c	FUNCTION_9	IF_1
0x40006a9	            0xeb10	                           jmp 0x40006bb	       336	ldlang.c	FUNCTION_9	IF_1
0x40006ab	        0x488b45f8	                mov rax, qword [rbp - 8]	       339	ldlang.c	FUNCTION_9
0x40006af	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       339	ldlang.c	FUNCTION_9
0x40006b3	          0x488910	                    mov qword [rax], rdx	       339	ldlang.c	FUNCTION_9
0x40006b6	      0xb800000000	                              mov eax, 0	       340	ldlang.c	FUNCTION_9
0x40006bb	              0x5d	                                 pop rbp	       341	ldlang.c	FUNCTION_9
0x40006bc	              0xc3	                                     ret	       341	ldlang.c	FUNCTION_9
print_statement_list	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,1:SWITCH,0	19
0x4007f0e	              0x55	                                push rbp	      4520	ldlang.c	FUNCTION_104
0x4007f0f	          0x4889e5	                            mov rbp, rsp	      4520	ldlang.c	FUNCTION_104
0x4007f12	        0x4883ec10	                           sub rsp, 0x10	      4520	ldlang.c	FUNCTION_104
0x4007f16	        0x48897df8	                mov qword [rbp - 8], rdi	      4520	ldlang.c	FUNCTION_104
0x4007f1a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      4520	ldlang.c	FUNCTION_104
0x4007f1e	            0xeb1e	                           jmp 0x4007f3e	      4521	ldlang.c	FUNCTION_104	WHILE_1
0x4007f20	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      4523	ldlang.c	FUNCTION_104	WHILE_1	CALL_1
0x4007f24	        0x488b45f8	                mov rax, qword [rbp - 8]	      4523	ldlang.c	FUNCTION_104	WHILE_1	CALL_1
0x4007f28	          0x4889d6	                            mov rsi, rdx	      4523	ldlang.c	FUNCTION_104	WHILE_1	CALL_1
0x4007f2b	          0x4889c7	                            mov rdi, rax	      4523	ldlang.c	FUNCTION_104	WHILE_1	CALL_1
0x4007f2e	      0xe815000000	                call sym.print_statement	      4523	ldlang.c	FUNCTION_104	WHILE_1	CALL_1
0x4007f33	        0x488b45f8	                mov rax, qword [rbp - 8]	      4524	ldlang.c	FUNCTION_104	WHILE_1
0x4007f37	          0x488b00	                    mov rax, qword [rax]	      4524	ldlang.c	FUNCTION_104	WHILE_1
0x4007f3a	        0x488945f8	                mov qword [rbp - 8], rax	      4524	ldlang.c	FUNCTION_104	WHILE_1
0x4007f3e	      0x48837df800	                  cmp qword [rbp - 8], 0	      4521	ldlang.c	FUNCTION_104	WHILE_1
0x4007f43	            0x75db	                           jne 0x4007f20	      4521	ldlang.c	FUNCTION_104	WHILE_1
0x4007f45	              0x90	                                     nop	      4526	ldlang.c	FUNCTION_104
0x4007f46	              0xc9	                                   leave	      4526	ldlang.c	FUNCTION_104
0x4007f47	              0xc3	                                     ret	      4526	ldlang.c	FUNCTION_104
lang_define_start_stop	functions,0:ELSE,0:FOR,0:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	42
0x400ad89	              0x55	                                push rbp	      6012	ldlang.c	FUNCTION_125
0x400ad8a	          0x4889e5	                            mov rbp, rsp	      6012	ldlang.c	FUNCTION_125
0x400ad8d	        0x4883ec20	                           sub rsp, 0x20	      6012	ldlang.c	FUNCTION_125
0x400ad91	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6012	ldlang.c	FUNCTION_125
0x400ad95	        0x488975e0	             mov qword [rbp - 0x20], rsi	      6012	ldlang.c	FUNCTION_125
0x400ad99	    0x488b05000000	            mov rax, qword [0x0400ada0] 	      6015	ldlang.c	FUNCTION_125
0x400ada0	        0x488b4008	                mov rax, qword [rax + 8]	      6015	ldlang.c	FUNCTION_125
0x400ada4	    0x488b80300300	           mov rax, qword [rax + 0x330] 	      6015	ldlang.c	FUNCTION_125
0x400adab	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      6015	ldlang.c	FUNCTION_125
0x400adaf	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      6015	ldlang.c	FUNCTION_125
0x400adb3	          0x4889ce	                            mov rsi, rcx	      6015	ldlang.c	FUNCTION_125
0x400adb6	      0xbf00000000	                              mov edi, 0	      6015	ldlang.c	FUNCTION_125
0x400adbb	            0xffd0	                                call rax	      6015	ldlang.c	FUNCTION_125
0x400adbd	        0x488945f8	                mov qword [rbp - 8], rax	      6015	ldlang.c	FUNCTION_125
0x400adc1	      0x48837df800	                  cmp qword [rbp - 8], 0	      6016	ldlang.c	FUNCTION_125	IF_1
0x400adc6	            0x7478	                            je 0x400ae40	      6016	ldlang.c	FUNCTION_125	IF_1
0x400adc8	    0x488b15000000	            mov rdx, qword [0x0400adcf] 	      6018	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400adcf	    0x488b05000000	            mov rax, qword [0x0400add6] 	      6018	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400add6	          0x4839c2	                            cmp rdx, rax	      6018	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400add9	            0x753d	                           jne 0x400ae18	      6018	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400addb	    0x488b05000000	            mov rax, qword [0x0400ade2] 	      6020	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400ade2	        0x4883c005	                              add rax, 5	      6020	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400ade6	          0x4801c0	                            add rax, rax	      6020	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400ade9	    0x488905000000	            mov qword [0x0400adf0], rax 	      6020	ldlang.c	FUNCTION_125	IF_1	IF_2
0x400adf0	    0x488b05000000	            mov rax, qword [0x0400adf7] 	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400adf7	    0x488d14c50000	                        lea rdx, [rax*8]	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400adff	    0x488b05000000	            mov rax, qword [0x0400ae06] 	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400ae06	          0x4889d6	                            mov rsi, rdx	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400ae09	          0x4889c7	                            mov rdi, rax	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400ae0c	      0xe800000000	                          call 0x400ae11	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400ae11	    0x488905000000	            mov qword [0x0400ae18], rax 	      6022	ldlang.c	FUNCTION_125	IF_1	IF_2	CALL_1
0x400ae18	    0x488b0d000000	            mov rcx, qword [0x0400ae1f] 	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae1f	    0x488b05000000	            mov rax, qword [0x0400ae26] 	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae26	        0x488d5001	                      lea rdx, [rax + 1]	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae2a	    0x488915000000	            mov qword [0x0400ae31], rdx 	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae31	        0x48c1e003	                              shl rax, 3	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae35	        0x488d1401	                    lea rdx, [rcx + rax]	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae39	        0x488b45f8	                mov rax, qword [rbp - 8]	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae3d	          0x488902	                    mov qword [rdx], rax	      6025	ldlang.c	FUNCTION_125	IF_1
0x400ae40	              0x90	                                     nop	      6027	ldlang.c	FUNCTION_125
0x400ae41	              0xc9	                                   leave	      6027	ldlang.c	FUNCTION_125
0x400ae42	              0xc3	                                     ret	      6027	ldlang.c	FUNCTION_125
lang_end	functions,0:ELSE,4:FOR,0:CALL,21:IF,11:DO,0:WHILE,0:SWITCH,0	178
0x400b283	              0x55	                                push rbp	      6170	ldlang.c	FUNCTION_133
0x400b284	          0x4889e5	                            mov rbp, rsp	      6170	ldlang.c	FUNCTION_133
0x400b287	            0x4154	                                push r12	      6170	ldlang.c	FUNCTION_133
0x400b289	              0x53	                                push rbx	      6170	ldlang.c	FUNCTION_133
0x400b28a	        0x4883ec40	                           sub rsp, 0x40	      6170	ldlang.c	FUNCTION_133
0x400b28e	    0x64488b042528	                mov rax, qword fs:[0x28]	      6170	ldlang.c	FUNCTION_133
0x400b297	        0x488945e8	             mov qword [rbp - 0x18], rax	      6170	ldlang.c	FUNCTION_133
0x400b29b	            0x31c0	                            xor eax, eax	      6170	ldlang.c	FUNCTION_133
0x400b29d	     0xfb605000000	           movzx eax, byte [0x0400b2a4] 	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2a4	          0x83e003	                              and eax, 3	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2a7	            0x3c02	                               cmp al, 2	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2a9	            0x750e	                           jne 0x400b2b9	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2ab	     0xfb605000000	           movzx eax, byte [0x0400b2b2] 	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2b2	          0x83e040	                           and eax, 0x40	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2b5	            0x84c0	                             test al, al	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2b7	            0x740e	                            je 0x400b2c7	      6174	ldlang.c	FUNCTION_133	IF_1	CALL_1
0x400b2b9	     0xfb605000000	           movzx eax, byte [0x0400b2c0] 	      6175	ldlang.c	FUNCTION_133	IF_1	CALL_2
0x400b2c0	          0x83e003	                              and eax, 3	      6175	ldlang.c	FUNCTION_133	IF_1	CALL_2
0x400b2c3	            0x3c03	                               cmp al, 3	      6175	ldlang.c	FUNCTION_133	IF_1	CALL_2
0x400b2c5	            0x750b	                           jne 0x400b2d2	      6175	ldlang.c	FUNCTION_133	IF_1	CALL_2
0x400b2c7	    0x8b0500000000	            mov eax, dword [0x0400b2cd] 	      6176	ldlang.c	FUNCTION_133	IF_1
0x400b2cd	          0x8945bc	             mov dword [rbp - 0x44], eax	      6176	ldlang.c	FUNCTION_133	IF_1
0x400b2d0	            0xeb07	                           jmp 0x400b2d9	      6176	ldlang.c	FUNCTION_133	IF_1
0x400b2d2	    0xc745bc010000	               mov dword [rbp - 0x44], 1	      6178	ldlang.c	FUNCTION_133	ELSE_1
0x400b2d9	     0xfb605000000	           movzx eax, byte [0x0400b2e0] 	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2e0	          0x83e040	                           and eax, 0x40	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2e3	            0x84c0	                             test al, al	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2e5	            0x7439	                            je 0x400b320	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2e7	     0xfb605000000	           movzx eax, byte [0x0400b2ee] 	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2ee	          0x83e003	                              and eax, 3	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2f1	            0x3c02	                               cmp al, 2	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2f3	            0x752b	                           jne 0x400b320	      6182	ldlang.c	FUNCTION_133	IF_2	CALL_3
0x400b2f5	    0x8b0500000000	            mov eax, dword [0x0400b2fb] 	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b2fb	            0x85c0	                           test eax, eax	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b2fd	            0x7521	                           jne 0x400b320	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b2ff	    0x8b0500000000	            mov eax, dword [0x0400b305] 	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b305	            0x85c0	                           test eax, eax	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b307	            0x7517	                           jne 0x400b320	      6183	ldlang.c	FUNCTION_133	IF_2
0x400b309	      0xbf00000000	                              mov edi, 0	      6184	ldlang.c	FUNCTION_133	IF_2	CALL_5
0x400b30e	      0xe800000000	                          call 0x400b313	      6184	ldlang.c	FUNCTION_133	IF_2	CALL_5
0x400b313	          0x4889c7	                            mov rdi, rax	      6184	ldlang.c	FUNCTION_133	IF_2	CALL_5
0x400b316	      0xb800000000	                              mov eax, 0	      6184	ldlang.c	FUNCTION_133	IF_2	CALL_5
0x400b31b	      0xe800000000	                          call 0x400b320	      6184	ldlang.c	FUNCTION_133	IF_2	CALL_5
0x400b320	    0x488b05000000	            mov rax, qword [0x0400b327] 	      6187	ldlang.c	FUNCTION_133	IF_3
0x400b327	          0x4885c0	                           test rax, rax	      6187	ldlang.c	FUNCTION_133	IF_3
0x400b32a	            0x7515	                           jne 0x400b341	      6187	ldlang.c	FUNCTION_133	IF_3
0x400b32c	    0x488b05000000	            mov rax, qword [0x0400b333] 	      6191	ldlang.c	FUNCTION_133	IF_3
0x400b333	    0x488905000000	            mov qword [0x0400b33a], rax 	      6191	ldlang.c	FUNCTION_133	IF_3
0x400b33a	    0xc745bc000000	               mov dword [rbp - 0x44], 0	      6192	ldlang.c	FUNCTION_133	IF_3
0x400b341	    0x488b35000000	            mov rsi, qword [0x0400b348] 	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b348	    0x488b05000000	            mov rax, qword [0x0400b34f] 	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b34f	    0x41b801000000	                              mov r8d, 1	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b355	      0xb900000000	                              mov ecx, 0	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b35a	      0xba00000000	                              mov edx, 0	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b35f	          0x4889c7	                            mov rdi, rax	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b362	      0xe800000000	                          call 0x400b367	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b367	        0x488945c8	             mov qword [rbp - 0x38], rax	      6195	ldlang.c	FUNCTION_133	CALL_6
0x400b36b	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      6197	ldlang.c	FUNCTION_133	IF_4
0x400b370	     0xf849f000000	                            je 0x400b415	      6197	ldlang.c	FUNCTION_133	IF_4
0x400b376	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6198	ldlang.c	FUNCTION_133	IF_4
0x400b37a	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      6198	ldlang.c	FUNCTION_133	IF_4
0x400b37e	            0x3c03	                               cmp al, 3	      6198	ldlang.c	FUNCTION_133	IF_4
0x400b380	            0x7410	                            je 0x400b392	      6198	ldlang.c	FUNCTION_133	IF_4
0x400b382	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6199	ldlang.c	FUNCTION_133	IF_4
0x400b386	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      6199	ldlang.c	FUNCTION_133	IF_4
0x400b38a	            0x3c04	                               cmp al, 4	      6199	ldlang.c	FUNCTION_133	IF_4
0x400b38c	     0xf8583000000	                           jne 0x400b415	      6199	ldlang.c	FUNCTION_133	IF_4
0x400b392	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6200	ldlang.c	FUNCTION_133	IF_4
0x400b396	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6200	ldlang.c	FUNCTION_133	IF_4
0x400b39a	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6200	ldlang.c	FUNCTION_133	IF_4
0x400b39e	          0x4885c0	                           test rax, rax	      6200	ldlang.c	FUNCTION_133	IF_4
0x400b3a1	            0x7472	                            je 0x400b415	      6200	ldlang.c	FUNCTION_133	IF_4
0x400b3a3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6204	ldlang.c	FUNCTION_133	IF_4
0x400b3a7	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      6204	ldlang.c	FUNCTION_133	IF_4
0x400b3ab	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6205	ldlang.c	FUNCTION_133	IF_4
0x400b3af	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6205	ldlang.c	FUNCTION_133	IF_4
0x400b3b3	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6205	ldlang.c	FUNCTION_133	IF_4
0x400b3b7	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6205	ldlang.c	FUNCTION_133	IF_4
0x400b3bb	          0x4801c2	                            add rdx, rax	      6205	ldlang.c	FUNCTION_133	IF_4
0x400b3be	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6207	ldlang.c	FUNCTION_133	IF_4
0x400b3c2	        0x488b4028	            mov rax, qword [rax + 0x28] 	      6207	ldlang.c	FUNCTION_133	IF_4
0x400b3c6	        0x488b4060	            mov rax, qword [rax + 0x60] 	      6207	ldlang.c	FUNCTION_133	IF_4
0x400b3ca	          0x4801d0	                            add rax, rdx	      6204	ldlang.c	FUNCTION_133	IF_4
0x400b3cd	        0x488945d0	             mov qword [rbp - 0x30], rax	      6204	ldlang.c	FUNCTION_133	IF_4
0x400b3d1	    0x488b05000000	            mov rax, qword [0x0400b3d8] 	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3d8	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3dc	          0x4889d6	                            mov rsi, rdx	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3df	          0x4889c7	                            mov rdi, rax	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3e2	      0xe800000000	                          call 0x400b3e7	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3e7	            0x85c0	                           test eax, eax	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3e9	     0xf8540010000	                           jne 0x400b52f	      6208	ldlang.c	FUNCTION_133	IF_4	IF_5	CALL_7
0x400b3ef	    0x488b1d000000	            mov rbx, qword [0x0400b3f6] 	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b3f6	      0xbf00000000	                              mov edi, 0	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b3fb	      0xe800000000	                          call 0x400b400	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b400	          0x4889de	                            mov rsi, rbx	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b403	          0x4889c7	                            mov rdi, rax	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b406	      0xb800000000	                              mov eax, 0	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b40b	      0xe800000000	                          call 0x400b410	      6209	ldlang.c	FUNCTION_133	IF_4	CALL_9
0x400b410	      0xe91a010000	                           jmp 0x400b52f	      6201	ldlang.c	FUNCTION_133	IF_4
0x400b415	    0x488b05000000	            mov rax, qword [0x0400b41c] 	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b41c	        0x488d4dc0	                   lea rcx, [rbp - 0x40]	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b420	      0xba00000000	                              mov edx, 0	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b425	          0x4889ce	                            mov rsi, rcx	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b428	          0x4889c7	                            mov rdi, rax	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b42b	      0xe800000000	                          call 0x400b430	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b430	        0x488945d8	             mov qword [rbp - 0x28], rax	      6218	ldlang.c	FUNCTION_133	ELSE_2	CALL_10
0x400b434	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      6219	ldlang.c	FUNCTION_133	ELSE_2	IF_6
0x400b438	           0xfb600	                   movzx eax, byte [rax]	      6219	ldlang.c	FUNCTION_133	ELSE_2	IF_6
0x400b43b	            0x84c0	                             test al, al	      6219	ldlang.c	FUNCTION_133	ELSE_2	IF_6
0x400b43d	            0x753a	                           jne 0x400b479	      6219	ldlang.c	FUNCTION_133	ELSE_2	IF_6
0x400b43f	    0x488b05000000	            mov rax, qword [0x0400b446] 	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b446	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b44a	          0x4889d6	                            mov rsi, rdx	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b44d	          0x4889c7	                            mov rdi, rax	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b450	      0xe800000000	                          call 0x400b455	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b455	            0x85c0	                           test eax, eax	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b457	     0xf85d3000000	                           jne 0x400b530	      6221	ldlang.c	FUNCTION_133	ELSE_2	IF_6	IF_7	CALL_11
0x400b45d	      0xbf00000000	                              mov edi, 0	      6222	ldlang.c	FUNCTION_133	ELSE_2	IF_6	CALL_13
0x400b462	      0xe800000000	                          call 0x400b467	      6222	ldlang.c	FUNCTION_133	ELSE_2	IF_6	CALL_13
0x400b467	          0x4889c7	                            mov rdi, rax	      6222	ldlang.c	FUNCTION_133	ELSE_2	IF_6	CALL_13
0x400b46a	      0xb800000000	                              mov eax, 0	      6222	ldlang.c	FUNCTION_133	ELSE_2	IF_6	CALL_13
0x400b46f	      0xe800000000	                          call 0x400b474	      6222	ldlang.c	FUNCTION_133	ELSE_2	IF_6	CALL_13
0x400b474	      0xe9b7000000	                           jmp 0x400b530	      6252	ldlang.c	FUNCTION_133
0x400b479	    0x488b15000000	            mov rdx, qword [0x0400b480] 	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b480	    0x488b05000000	            mov rax, qword [0x0400b487] 	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b487	          0x4889d6	                            mov rsi, rdx	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b48a	          0x4889c7	                            mov rdi, rax	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b48d	      0xe800000000	                          call 0x400b492	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b492	        0x488945e0	             mov qword [rbp - 0x20], rax	      6230	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	CALL_14
0x400b496	      0x48837de000	               cmp qword [rbp - 0x20], 0	      6231	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8
0x400b49b	            0x7469	                            je 0x400b506	      6231	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8
0x400b49d	        0x837dbc00	               cmp dword [rbp - 0x44], 0	      6233	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9
0x400b4a1	            0x742c	                            je 0x400b4cf	      6233	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9
0x400b4a3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4a7	        0x4c8b6028	            mov r12, qword [rax + 0x28] 	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4ab	    0x488b1d000000	            mov rbx, qword [0x0400b4b2] 	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4b2	      0xbf00000000	                              mov edi, 0	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4b7	      0xe800000000	                          call 0x400b4bc	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4bc	          0x4c89e2	                            mov rdx, r12	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4bf	          0x4889de	                            mov rsi, rbx	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4c2	          0x4889c7	                            mov rdi, rax	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4c5	      0xb800000000	                              mov eax, 0	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4ca	      0xe800000000	                          call 0x400b4cf	      6234	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_9	CALL_16
0x400b4cf	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4d3	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4d7	    0x488b05000000	            mov rax, qword [0x0400b4de] 	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4de	          0x4889d6	                            mov rsi, rdx	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4e1	          0x4889c7	                            mov rdi, rax	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4e4	      0xe800000000	                          call 0x400b4e9	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4e9	            0x85c0	                           test eax, eax	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4eb	            0x7543	                           jne 0x400b530	      6238	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	IF_10	CALL_17
0x400b4ed	      0xbf00000000	                              mov edi, 0	      6241	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	CALL_19
0x400b4f2	      0xe800000000	                          call 0x400b4f7	      6241	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	CALL_19
0x400b4f7	          0x4889c7	                            mov rdi, rax	      6241	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	CALL_19
0x400b4fa	      0xb800000000	                              mov eax, 0	      6241	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	CALL_19
0x400b4ff	      0xe800000000	                          call 0x400b504	      6241	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	IF_8	CALL_19
0x400b504	            0xeb2a	                           jmp 0x400b530	      6252	ldlang.c	FUNCTION_133
0x400b506	        0x837dbc00	               cmp dword [rbp - 0x44], 0	      6245	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11
0x400b50a	            0x7424	                            je 0x400b530	      6245	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11
0x400b50c	    0x488b1d000000	            mov rbx, qword [0x0400b513] 	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b513	      0xbf00000000	                              mov edi, 0	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b518	      0xe800000000	                          call 0x400b51d	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b51d	          0x4889de	                            mov rsi, rbx	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b520	          0x4889c7	                            mov rdi, rax	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b523	      0xb800000000	                              mov eax, 0	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b528	      0xe800000000	                          call 0x400b52d	      6246	ldlang.c	FUNCTION_133	ELSE_2	ELSE_3	ELSE_4	IF_11	CALL_21
0x400b52d	            0xeb01	                           jmp 0x400b530	      6252	ldlang.c	FUNCTION_133
0x400b52f	              0x90	                                     nop	      6201	ldlang.c	FUNCTION_133	IF_4
0x400b530	              0x90	                                     nop	      6252	ldlang.c	FUNCTION_133
0x400b531	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6252	ldlang.c	FUNCTION_133
0x400b535	    0x644833042528	                xor rax, qword fs:[0x28]	      6252	ldlang.c	FUNCTION_133
0x400b53e	            0x7405	                            je 0x400b545	      6252	ldlang.c	FUNCTION_133
0x400b540	      0xe800000000	                          call 0x400b545	      6252	ldlang.c	FUNCTION_133
0x400b545	        0x4883c440	                           add rsp, 0x40	      6252	ldlang.c	FUNCTION_133
0x400b549	              0x5b	                                 pop rbx	      6252	ldlang.c	FUNCTION_133
0x400b54a	            0x415c	                                 pop r12	      6252	ldlang.c	FUNCTION_133
0x400b54c	              0x5d	                                 pop rbp	      6252	ldlang.c	FUNCTION_133
0x400b54d	              0xc3	                                     ret	      6252	ldlang.c	FUNCTION_133
wild	functions,0:ELSE,1:FOR,1:CALL,4:IF,4:DO,0:WHILE,0:SWITCH,0	75
0x40050e1	              0x55	                                push rbp	      2898	ldlang.c	FUNCTION_67
0x40050e2	          0x4889e5	                            mov rbp, rsp	      2898	ldlang.c	FUNCTION_67
0x40050e5	        0x4883ec30	                           sub rsp, 0x30	      2898	ldlang.c	FUNCTION_67
0x40050e9	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2898	ldlang.c	FUNCTION_67
0x40050ed	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2898	ldlang.c	FUNCTION_67
0x40050f1	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2898	ldlang.c	FUNCTION_67
0x40050f5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2901	ldlang.c	FUNCTION_67	IF_1
0x40050f9	        0x488b4050	            mov rax, qword [rax + 0x50] 	      2901	ldlang.c	FUNCTION_67	IF_1
0x40050fd	          0x4885c0	                           test rax, rax	      2901	ldlang.c	FUNCTION_67	IF_1
0x4005100	            0x7468	                            je 0x400516a	      2901	ldlang.c	FUNCTION_67	IF_1
0x4005102	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2902	ldlang.c	FUNCTION_67	IF_1
0x4005106	        0x488b4050	            mov rax, qword [rax + 0x50] 	      2902	ldlang.c	FUNCTION_67	IF_1
0x400510a	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2902	ldlang.c	FUNCTION_67	IF_1
0x400510d	          0x83f801	                              cmp eax, 1	      2902	ldlang.c	FUNCTION_67	IF_1
0x4005110	            0x7558	                           jne 0x400516a	      2902	ldlang.c	FUNCTION_67	IF_1
0x4005112	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2903	ldlang.c	FUNCTION_67	IF_1
0x4005116	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2903	ldlang.c	FUNCTION_67	IF_1
0x4005119	            0x85c0	                           test eax, eax	      2903	ldlang.c	FUNCTION_67	IF_1
0x400511b	            0x754d	                           jne 0x400516a	      2903	ldlang.c	FUNCTION_67	IF_1
0x400511d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2907	ldlang.c	FUNCTION_67	IF_1	CALL_1
0x4005121	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2907	ldlang.c	FUNCTION_67	IF_1	CALL_1
0x4005125	      0xbe00000000	                              mov esi, 0	      2907	ldlang.c	FUNCTION_67	IF_1	CALL_1
0x400512a	          0x4889c7	                            mov rdi, rax	      2907	ldlang.c	FUNCTION_67	IF_1	CALL_1
0x400512d	      0xe8ffc5ffff	                      call sym.walk_wild	      2907	ldlang.c	FUNCTION_67	IF_1	CALL_1
0x4005132	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2909	ldlang.c	FUNCTION_67	IF_1
0x4005136	        0x488b4070	            mov rax, qword [rax + 0x70] 	      2909	ldlang.c	FUNCTION_67	IF_1
0x400513a	        0x488945f8	                mov qword [rbp - 8], rax	      2909	ldlang.c	FUNCTION_67	IF_1
0x400513e	      0x48837df800	                  cmp qword [rbp - 8], 0	      2910	ldlang.c	FUNCTION_67	IF_1	IF_2
0x4005143	            0x743c	                            je 0x4005181	      2910	ldlang.c	FUNCTION_67	IF_1	IF_2
0x4005145	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x4005149	        0x488b4df8	                mov rcx, qword [rbp - 8]	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x400514d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x4005151	          0x4889ce	                            mov rsi, rcx	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x4005154	          0x4889c7	                            mov rdi, rax	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x4005157	      0xe866baffff	call sym.output_section_callback_tree_to_list	      2912	ldlang.c	FUNCTION_67	IF_1	IF_2	CALL_2
0x400515c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2913	ldlang.c	FUNCTION_67	IF_1	IF_2
0x4005160	    0x48c740700000	               mov qword [rax + 0x70], 0	      2913	ldlang.c	FUNCTION_67	IF_1	IF_2
0x4005168	            0xeb17	                           jmp 0x4005181	      2904	ldlang.c	FUNCTION_67	IF_1
0x400516a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2917	ldlang.c	FUNCTION_67	CALL_3
0x400516e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2917	ldlang.c	FUNCTION_67	CALL_3
0x4005172	      0xbe00000000	                              mov esi, 0	      2917	ldlang.c	FUNCTION_67	CALL_3
0x4005177	          0x4889c7	                            mov rdi, rax	      2917	ldlang.c	FUNCTION_67	CALL_3
0x400517a	      0xe8b2c5ffff	                      call sym.walk_wild	      2917	ldlang.c	FUNCTION_67	CALL_3
0x400517f	            0xeb01	                           jmp 0x4005182	      2917	ldlang.c	FUNCTION_67	CALL_3
0x4005181	              0x90	                                     nop	      2904	ldlang.c	FUNCTION_67	IF_1
0x4005182	    0x488b05000000	            mov rax, qword [0x04005189] 	      2919	ldlang.c	FUNCTION_67	IF_3
0x4005189	          0x4885c0	                           test rax, rax	      2919	ldlang.c	FUNCTION_67	IF_3
0x400518c	            0x7554	                           jne 0x40051e2	      2919	ldlang.c	FUNCTION_67	IF_3
0x400518e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x4005192	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x4005196	        0x488945f0	             mov qword [rbp - 0x10], rax	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x400519a	            0xeb3f	                           jmp 0x40051db	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x400519c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051a0	        0x488b4008	                mov rax, qword [rax + 8]	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051a4	          0x4885c0	                           test rax, rax	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051a7	            0x7427	                            je 0x40051d0	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051a9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051ad	        0x488b4008	                mov rax, qword [rax + 8]	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051b1	      0xbe00000000	                              mov esi, 0	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051b6	          0x4889c7	                            mov rdi, rax	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051b9	      0xe800000000	                          call 0x40051be	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051be	            0x85c0	                           test eax, eax	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051c0	            0x750e	                           jne 0x40051d0	      2921	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4	CALL_4
0x40051c2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2925	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4
0x40051c6	    0x488905000000	            mov qword [0x040051cd], rax 	      2925	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4
0x40051cd	              0x90	                                     nop	      2926	ldlang.c	FUNCTION_67	IF_3	FOR_1	IF_4
0x40051ce	            0xeb12	                           jmp 0x40051e2	      2928	ldlang.c	FUNCTION_67
0x40051d0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x40051d4	          0x488b00	                    mov rax, qword [rax]	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x40051d7	        0x488945f0	             mov qword [rbp - 0x10], rax	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x40051db	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x40051e0	            0x75ba	                           jne 0x400519c	      2920	ldlang.c	FUNCTION_67	IF_3	FOR_1
0x40051e2	              0x90	                                     nop	      2928	ldlang.c	FUNCTION_67
0x40051e3	              0xc9	                                   leave	      2928	ldlang.c	FUNCTION_67
0x40051e4	              0xc3	                                     ret	      2928	ldlang.c	FUNCTION_67
walk_wild_section_specs4_wild2	functions,0:ELSE,3:FOR,1:CALL,10:IF,6:DO,0:WHILE,0:SWITCH,0	148
0x40010ae	              0x55	                                push rbp	       690	ldlang.c	FUNCTION_22
0x40010af	          0x4889e5	                            mov rbp, rsp	       690	ldlang.c	FUNCTION_22
0x40010b2	        0x4883ec70	                           sub rsp, 0x70	       690	ldlang.c	FUNCTION_22
0x40010b6	        0x48897da8	             mov qword [rbp - 0x58], rdi	       690	ldlang.c	FUNCTION_22
0x40010ba	        0x488975a0	             mov qword [rbp - 0x60], rsi	       690	ldlang.c	FUNCTION_22
0x40010be	        0x48895598	             mov qword [rbp - 0x68], rdx	       690	ldlang.c	FUNCTION_22
0x40010c2	        0x48894d90	             mov qword [rbp - 0x70], rcx	       690	ldlang.c	FUNCTION_22
0x40010c6	    0x64488b042528	                mov rax, qword fs:[0x28]	       690	ldlang.c	FUNCTION_22
0x40010cf	        0x488945f8	                mov qword [rbp - 8], rax	       690	ldlang.c	FUNCTION_22
0x40010d3	            0x31c0	                            xor eax, eax	       690	ldlang.c	FUNCTION_22
0x40010d5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       692	ldlang.c	FUNCTION_22
0x40010d9	        0x488b4050	            mov rax, qword [rax + 0x50] 	       692	ldlang.c	FUNCTION_22
0x40010dd	        0x488945c0	             mov qword [rbp - 0x40], rax	       692	ldlang.c	FUNCTION_22
0x40010e1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       693	ldlang.c	FUNCTION_22
0x40010e5	        0x488b4058	            mov rax, qword [rax + 0x58] 	       693	ldlang.c	FUNCTION_22
0x40010e9	        0x488945c8	             mov qword [rbp - 0x38], rax	       693	ldlang.c	FUNCTION_22
0x40010ed	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       694	ldlang.c	FUNCTION_22
0x40010f1	        0x488b4060	            mov rax, qword [rax + 0x60] 	       694	ldlang.c	FUNCTION_22
0x40010f5	        0x488945d0	             mov qword [rbp - 0x30], rax	       694	ldlang.c	FUNCTION_22
0x40010f9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       695	ldlang.c	FUNCTION_22
0x40010fd	        0x488b4068	            mov rax, qword [rax + 0x68] 	       695	ldlang.c	FUNCTION_22
0x4001101	        0x488945d8	             mov qword [rbp - 0x28], rax	       695	ldlang.c	FUNCTION_22
0x4001105	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       697	ldlang.c	FUNCTION_22	CALL_1
0x4001109	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       697	ldlang.c	FUNCTION_22	CALL_1
0x400110d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       697	ldlang.c	FUNCTION_22	CALL_1
0x4001111	          0x4889ce	                            mov rsi, rcx	       697	ldlang.c	FUNCTION_22	CALL_1
0x4001114	          0x4889c7	                            mov rdi, rax	       697	ldlang.c	FUNCTION_22	CALL_1
0x4001117	      0xe8a1f5ffff	                   call sym.find_section	       697	ldlang.c	FUNCTION_22	CALL_1
0x400111c	        0x488945e0	             mov qword [rbp - 0x20], rax	       697	ldlang.c	FUNCTION_22	CALL_1
0x4001120	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       699	ldlang.c	FUNCTION_22	IF_1
0x4001123	            0x85c0	                           test eax, eax	       699	ldlang.c	FUNCTION_22	IF_1
0x4001125	            0x741d	                            je 0x4001144	       699	ldlang.c	FUNCTION_22	IF_1
0x4001127	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x400112b	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x400112f	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x4001133	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x4001137	          0x4889c7	                            mov rdi, rax	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x400113a	      0xe832f4ffff	      call sym.walk_wild_section_general	       701	ldlang.c	FUNCTION_22	IF_1	CALL_2
0x400113f	      0xe981010000	                           jmp 0x40012c5	       702	ldlang.c	FUNCTION_22	IF_1
0x4001144	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       705	ldlang.c	FUNCTION_22	CALL_3
0x4001148	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       705	ldlang.c	FUNCTION_22	CALL_3
0x400114c	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       705	ldlang.c	FUNCTION_22	CALL_3
0x4001150	          0x4889ce	                            mov rsi, rcx	       705	ldlang.c	FUNCTION_22	CALL_3
0x4001153	          0x4889c7	                            mov rdi, rax	       705	ldlang.c	FUNCTION_22	CALL_3
0x4001156	      0xe862f5ffff	                   call sym.find_section	       705	ldlang.c	FUNCTION_22	CALL_3
0x400115b	        0x488945e8	             mov qword [rbp - 0x18], rax	       705	ldlang.c	FUNCTION_22	CALL_3
0x400115f	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       706	ldlang.c	FUNCTION_22	IF_2
0x4001162	            0x85c0	                           test eax, eax	       706	ldlang.c	FUNCTION_22	IF_2
0x4001164	            0x741d	                            je 0x4001183	       706	ldlang.c	FUNCTION_22	IF_2
0x4001166	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x400116a	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x400116e	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x4001172	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x4001176	          0x4889c7	                            mov rdi, rax	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x4001179	      0xe8f3f3ffff	      call sym.walk_wild_section_general	       708	ldlang.c	FUNCTION_22	IF_2	CALL_4
0x400117e	      0xe942010000	                           jmp 0x40012c5	       709	ldlang.c	FUNCTION_22	IF_2
0x4001183	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       712	ldlang.c	FUNCTION_22	FOR_1
0x4001187	        0x488b4020	            mov rax, qword [rax + 0x20] 	       712	ldlang.c	FUNCTION_22	FOR_1
0x400118b	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       712	ldlang.c	FUNCTION_22	FOR_1
0x4001192	        0x488945b8	             mov qword [rbp - 0x48], rax	       712	ldlang.c	FUNCTION_22	FOR_1
0x4001196	      0xe91f010000	                           jmp 0x40012ba	       712	ldlang.c	FUNCTION_22	FOR_1
0x400119b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       714	ldlang.c	FUNCTION_22	FOR_1	IF_3
0x400119f	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       714	ldlang.c	FUNCTION_22	FOR_1	IF_3
0x40011a3	            0x752b	                           jne 0x40011d0	       714	ldlang.c	FUNCTION_22	FOR_1	IF_3
0x40011a5	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011a9	        0x488b7d98	             mov rdi, qword [rbp - 0x68]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011ad	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011b1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011b5	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011b9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011bd	          0x4d89c1	                              mov r9, r8	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011c0	          0x4989f8	                             mov r8, rdi	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011c3	          0x4889c7	                            mov rdi, rax	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011c6	      0xe844f3ffff	     call sym.walk_wild_consider_section	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011cb	      0xe9de000000	                           jmp 0x40012ae	       715	ldlang.c	FUNCTION_22	FOR_1	CALL_5
0x40011d0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       717	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011d4	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       717	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011d8	            0x752b	                           jne 0x4001205	       717	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011da	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011de	        0x488b7d98	             mov rdi, qword [rbp - 0x68]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011e2	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011e6	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011ea	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011ee	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011f2	          0x4d89c1	                              mov r9, r8	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011f5	          0x4989f8	                             mov r8, rdi	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011f8	          0x4889c7	                            mov rdi, rax	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x40011fb	      0xe80ff3ffff	     call sym.walk_wild_consider_section	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x4001200	      0xe9a9000000	                           jmp 0x40012ae	       718	ldlang.c	FUNCTION_22	FOR_1	ELSE_1	IF_4
0x4001205	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       721	ldlang.c	FUNCTION_22	FOR_1	ELSE_2
0x4001209	          0x488b00	                    mov rax, qword [rax]	       721	ldlang.c	FUNCTION_22	FOR_1	ELSE_2
0x400120c	        0x488945f0	             mov qword [rbp - 0x10], rax	       721	ldlang.c	FUNCTION_22	FOR_1	ELSE_2
0x4001210	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001214	        0x488b4008	                mov rax, qword [rax + 8]	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001218	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x400121c	          0x4889d6	                            mov rsi, rdx	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x400121f	          0x4889c7	                            mov rdi, rax	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001222	      0xe86df5ffff	              call sym.match_simple_wild	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001227	            0x85c0	                           test eax, eax	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001229	           0xf94c0	                                 sete al	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x400122c	           0xfb6c0	                           movzx eax, al	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x400122f	          0x8945b4	             mov dword [rbp - 0x4c], eax	       722	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	CALL_7
0x4001232	        0x837db400	               cmp dword [rbp - 0x4c], 0	       725	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5
0x4001236	            0x7528	                           jne 0x4001260	       725	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5
0x4001238	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x400123c	        0x488b7d98	             mov rdi, qword [rbp - 0x68]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001240	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001244	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001248	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x400124c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001250	          0x4d89c1	                              mov r9, r8	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001253	          0x4989f8	                             mov r8, rdi	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001256	          0x4889c7	                            mov rdi, rax	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001259	      0xe8b1f2ffff	     call sym.walk_wild_consider_section	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x400125e	            0xeb4e	                           jmp 0x40012ae	       726	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	IF_5	CALL_8
0x4001260	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001264	        0x488b4008	                mov rax, qword [rax + 8]	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001268	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x400126c	          0x4889d6	                            mov rsi, rdx	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x400126f	          0x4889c7	                            mov rdi, rax	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001272	      0xe81df5ffff	              call sym.match_simple_wild	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001277	            0x85c0	                           test eax, eax	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001279	           0xf94c0	                                 sete al	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x400127c	           0xfb6c0	                           movzx eax, al	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x400127f	          0x8945b4	             mov dword [rbp - 0x4c], eax	       730	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	CALL_9
0x4001282	        0x837db400	               cmp dword [rbp - 0x4c], 0	       731	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6
0x4001286	            0x7526	                           jne 0x40012ae	       731	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6
0x4001288	        0x4c8b4590	              mov r8, qword [rbp - 0x70]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x400128c	        0x488b7d98	             mov rdi, qword [rbp - 0x68]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x4001290	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x4001294	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x4001298	        0x488b75a0	             mov rsi, qword [rbp - 0x60]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x400129c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x40012a0	          0x4d89c1	                              mov r9, r8	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x40012a3	          0x4989f8	                             mov r8, rdi	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x40012a6	          0x4889c7	                            mov rdi, rax	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x40012a9	      0xe861f2ffff	     call sym.walk_wild_consider_section	       732	ldlang.c	FUNCTION_22	FOR_1	ELSE_2	ELSE_3	IF_6	CALL_10
0x40012ae	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       712	ldlang.c	FUNCTION_22	FOR_1
0x40012b2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       712	ldlang.c	FUNCTION_22	FOR_1
0x40012b6	        0x488945b8	             mov qword [rbp - 0x48], rax	       712	ldlang.c	FUNCTION_22	FOR_1
0x40012ba	      0x48837db800	               cmp qword [rbp - 0x48], 0	       712	ldlang.c	FUNCTION_22	FOR_1
0x40012bf	     0xf85d6feffff	                           jne 0x400119b	       712	ldlang.c	FUNCTION_22	FOR_1
0x40012c5	        0x488b45f8	                mov rax, qword [rbp - 8]	       737	ldlang.c	FUNCTION_22
0x40012c9	    0x644833042528	                xor rax, qword fs:[0x28]	       737	ldlang.c	FUNCTION_22
0x40012d2	            0x7405	                            je 0x40012d9	       737	ldlang.c	FUNCTION_22
0x40012d4	      0xe800000000	                          call 0x40012d9	       737	ldlang.c	FUNCTION_22
0x40012d9	              0xc9	                                   leave	       737	ldlang.c	FUNCTION_22
0x40012da	              0xc3	                                     ret	       737	ldlang.c	FUNCTION_22
print_all_symbols	functions,0:ELSE,0:FOR,2:CALL,5:IF,1:DO,0:WHILE,0:SWITCH,0	164
0x40072a3	              0x55	                                push rbp	      4165	ldlang.c	ELSE_2	FUNCTION_95
0x40072a4	          0x4889e5	                            mov rbp, rsp	      4165	ldlang.c	ELSE_2	FUNCTION_95
0x40072a7	        0x4883ec70	                           sub rsp, 0x70	      4165	ldlang.c	ELSE_2	FUNCTION_95
0x40072ab	        0x48897d98	             mov qword [rbp - 0x68], rdi	      4165	ldlang.c	ELSE_2	FUNCTION_95
0x40072af	        0x488b4598	             mov rax, qword [rbp - 0x68]	      4166	ldlang.c	ELSE_2	FUNCTION_95
0x40072b3	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	      4166	ldlang.c	ELSE_2	FUNCTION_95
0x40072ba	        0x488945b0	             mov qword [rbp - 0x50], rax	      4166	ldlang.c	ELSE_2	FUNCTION_95
0x40072be	      0x48837db000	               cmp qword [rbp - 0x50], 0	      4172	ldlang.c	ELSE_2	FUNCTION_95	IF_1
0x40072c3	     0xf8446020000	                            je 0x400750f	      4172	ldlang.c	ELSE_2	FUNCTION_95	IF_1
0x40072c9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4175	ldlang.c	ELSE_2	FUNCTION_95
0x40072cd	        0x488b4008	                mov rax, qword [rax + 8]	      4175	ldlang.c	ELSE_2	FUNCTION_95
0x40072d1	    0x48c700000000	                      mov qword [rax], 0	      4175	ldlang.c	ELSE_2	FUNCTION_95
0x40072d8	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072e0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072e4	        0x488945c0	             mov qword [rbp - 0x40], rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072e8	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072ec	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072f0	        0x48c1e003	                              shl rax, 3	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072f4	        0x488945c8	             mov qword [rbp - 0x38], rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072f8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40072fc	        0x488945d0	             mov qword [rbp - 0x30], rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007300	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007304	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007308	          0x4889c2	                            mov rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400730b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400730f	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007313	          0x4829c2	                            sub rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007316	          0x4889d0	                            mov rax, rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007319	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400731d	            0x7313	                           jae 0x4007332	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400731f	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007323	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007327	          0x4889d6	                            mov rsi, rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400732a	          0x4889c7	                            mov rdi, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400732d	      0xe800000000	                          call 0x4007332	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007332	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007336	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400733a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400733e	          0x4801c2	                            add rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007341	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007345	        0x48895018	             mov qword [rax + 0x18], rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007349	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400734d	        0x488945d8	             mov qword [rbp - 0x28], rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007351	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007355	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007359	        0x488945e0	             mov qword [rbp - 0x20], rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400735d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007361	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007365	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007369	            0x750e	                           jne 0x4007379	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400736b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400736f	         0xfb65050	           movzx edx, byte [rax + 0x50] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007373	          0x83ca02	                               or edx, 2	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007376	          0x885050	               mov byte [rax + 0x50], dl	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007379	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400737d	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007381	          0x4889c2	                            mov rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007384	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007388	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400738c	          0x4801c2	                            add rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400738f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007393	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007397	          0x48f7d0	                                 not rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400739a	          0x4821d0	                            and rax, rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x400739d	          0x4889c2	                            mov rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073a0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073a4	        0x48895018	             mov qword [rax + 0x18], rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073a8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073ac	        0x488b4018	            mov rax, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073b0	          0x4889c2	                            mov rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073b3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073b7	        0x488b4008	                mov rax, qword [rax + 8]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073bb	          0x4829c2	                            sub rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073be	          0x4889d0	                            mov rax, rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073c1	          0x4889c2	                            mov rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073c4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073c8	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073cc	          0x4889c1	                            mov rcx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073cf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073d3	        0x488b4008	                mov rax, qword [rax + 8]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073d7	          0x4829c1	                            sub rcx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073da	          0x4889c8	                            mov rax, rcx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073dd	          0x4839c2	                            cmp rdx, rax	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073e0	            0x7610	                           jbe 0x40073f2	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073e2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073e6	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073ea	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073ee	        0x48895018	             mov qword [rax + 0x18], rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073f2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073f6	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073fa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x40073fe	        0x48895010	             mov qword [rax + 0x10], rdx	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007402	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4179	ldlang.c	ELSE_2	FUNCTION_95	CALL_2
0x4007406	        0x488945e8	             mov qword [rbp - 0x18], rax	      4178	ldlang.c	ELSE_2	FUNCTION_95
0x400740a	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007411	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007415	          0x488b00	                    mov rax, qword [rax]	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007418	        0x488945a8	             mov qword [rbp - 0x58], rax	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400741c	            0xeb2c	                           jmp 0x400744a	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400741e	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007421	    0x488d14c50000	                        lea rdx, [rax*8]	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007429	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400742d	          0x4801c2	                            add rdx, rax	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007430	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007434	          0x488b00	                    mov rax, qword [rax]	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007437	          0x488902	                    mov qword [rdx], rax	      4183	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400743a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400743e	        0x488b4008	                mov rax, qword [rax + 8]	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007442	        0x488945a8	             mov qword [rbp - 0x58], rax	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007446	        0x8345a401	               add dword [rbp - 0x5c], 1	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400744a	      0x48837da800	               cmp qword [rbp - 0x58], 0	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x400744f	            0x75cd	                           jne 0x400741e	      4182	ldlang.c	ELSE_2	FUNCTION_95	FOR_1
0x4007451	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x4007455	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x4007459	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x400745d	      0xb900000000	                              mov ecx, 0	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x4007462	      0xba08000000	                              mov edx, 8	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x4007467	          0x4889c7	                            mov rdi, rax	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x400746a	      0xe800000000	                          call 0x400746f	      4185	ldlang.c	ELSE_2	FUNCTION_95	CALL_3
0x400746f	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x4007476	            0xeb28	                           jmp 0x40074a0	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x4007478	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x400747b	    0x488d14c50000	                        lea rdx, [rax*8]	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x4007483	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x4007487	          0x4801d0	                            add rax, rdx	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x400748a	          0x488b00	                    mov rax, qword [rax]	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x400748d	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x4007491	          0x4889d6	                            mov rsi, rdx	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x4007494	          0x4889c7	                            mov rdi, rax	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x4007497	      0xe8f3fcffff	               call sym.print_one_symbol	      4190	ldlang.c	ELSE_2	FUNCTION_95	CALL_4
0x400749c	        0x8345a401	               add dword [rbp - 0x5c], 1	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074a0	          0x8b55a4	             mov edx, dword [rbp - 0x5c]	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074a3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074a7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074ab	          0x4839c2	                            cmp rdx, rax	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074ae	            0x72c8	                            jb 0x4007478	      4189	ldlang.c	ELSE_2	FUNCTION_95	FOR_2
0x40074b0	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074b8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074bc	        0x488945f8	                mov qword [rbp - 8], rax	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074c0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074c4	        0x488b4008	                mov rax, qword [rax + 8]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074c8	        0x483b45f8	                cmp rax, qword [rbp - 8]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074cc	            0x732c	                           jae 0x40074fa	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074ce	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074d2	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074d6	        0x483b45f8	                cmp rax, qword [rbp - 8]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074da	            0x761e	                           jbe 0x40074fa	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074e0	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074e4	        0x48895010	             mov qword [rax + 0x10], rdx	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074e8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074ec	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074f4	        0x48895018	             mov qword [rax + 0x18], rdx	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074f8	            0xeb16	                           jmp 0x4007510	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074fa	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x40074fe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x4007502	          0x4889d6	                            mov rsi, rdx	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x4007505	          0x4889c7	                            mov rdi, rax	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x4007508	      0xe800000000	                          call 0x400750d	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x400750d	            0xeb01	                           jmp 0x4007510	      4192	ldlang.c	ELSE_2	FUNCTION_95	CALL_5
0x400750f	              0x90	                                     nop	      4173	ldlang.c	ELSE_2	FUNCTION_95	IF_1
0x4007510	              0xc9	                                   leave	      4193	ldlang.c	ELSE_2	FUNCTION_95
0x4007511	              0xc3	                                     ret	      4193	ldlang.c	ELSE_2	FUNCTION_95
lang_print_memory_size	functions,0:ELSE,3:FOR,0:CALL,4:IF,3:DO,0:WHILE,0:SWITCH,0	45
0x400f84c	              0x55	                                push rbp	      8759	ldlang.c	FUNCTION_208
0x400f84d	          0x4889e5	                            mov rbp, rsp	      8759	ldlang.c	FUNCTION_208
0x400f850	        0x4883ec10	                           sub rsp, 0x10	      8759	ldlang.c	FUNCTION_208
0x400f854	        0x48897df8	                mov qword [rbp - 8], rdi	      8759	ldlang.c	FUNCTION_208
0x400f858	        0x488b45f8	                mov rax, qword [rbp - 8]	      8760	ldlang.c	FUNCTION_208	IF_1
0x400f85c	      0x25ffffff3f	                     and eax, 0x3fffffff	      8760	ldlang.c	FUNCTION_208	IF_1
0x400f861	          0x4885c0	                           test rax, rax	      8760	ldlang.c	FUNCTION_208	IF_1
0x400f864	            0x751c	                           jne 0x400f882	      8760	ldlang.c	FUNCTION_208	IF_1
0x400f866	        0x488b45f8	                mov rax, qword [rbp - 8]	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f86a	        0x48c1e81e	                           shr rax, 0x1e	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f86e	          0x4889c6	                            mov rsi, rax	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f871	      0xbf00000000	                              mov edi, 0	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f876	      0xb800000000	                              mov eax, 0	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f87b	      0xe800000000	                          call 0x400f880	      8761	ldlang.c	FUNCTION_208	CALL_1
0x400f880	            0xeb6a	                           jmp 0x400f8ec	      8768	ldlang.c	FUNCTION_208
0x400f882	        0x488b45f8	                mov rax, qword [rbp - 8]	      8762	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f886	      0x25ffff0f00	                        and eax, 0xfffff	      8762	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f88b	          0x4885c0	                           test rax, rax	      8762	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f88e	            0x751c	                           jne 0x400f8ac	      8762	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f890	        0x488b45f8	                mov rax, qword [rbp - 8]	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f894	        0x48c1e814	                           shr rax, 0x14	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f898	          0x4889c6	                            mov rsi, rax	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f89b	      0xbf00000000	                              mov edi, 0	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f8a0	      0xb800000000	                              mov eax, 0	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f8a5	      0xe800000000	                          call 0x400f8aa	      8763	ldlang.c	FUNCTION_208	ELSE_1	IF_2
0x400f8aa	            0xeb40	                           jmp 0x400f8ec	      8768	ldlang.c	FUNCTION_208
0x400f8ac	        0x488b45f8	                mov rax, qword [rbp - 8]	      8764	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8b0	      0x25ff030000	                          and eax, 0x3ff	      8764	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8b5	          0x4885c0	                           test rax, rax	      8764	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8b8	            0x751c	                           jne 0x400f8d6	      8764	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8ba	        0x488b45f8	                mov rax, qword [rbp - 8]	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8be	        0x48c1e80a	                            shr rax, 0xa	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8c2	          0x4889c6	                            mov rsi, rax	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8c5	      0xbf00000000	                              mov edi, 0	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8ca	      0xb800000000	                              mov eax, 0	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8cf	      0xe800000000	                          call 0x400f8d4	      8765	ldlang.c	FUNCTION_208	ELSE_2	IF_3
0x400f8d4	            0xeb16	                           jmp 0x400f8ec	      8768	ldlang.c	FUNCTION_208
0x400f8d6	        0x488b45f8	                mov rax, qword [rbp - 8]	      8767	ldlang.c	FUNCTION_208	CALL_4
0x400f8da	          0x4889c6	                            mov rsi, rax	      8767	ldlang.c	FUNCTION_208	CALL_4
0x400f8dd	      0xbf00000000	                              mov edi, 0	      8767	ldlang.c	FUNCTION_208	CALL_4
0x400f8e2	      0xb800000000	                              mov eax, 0	      8767	ldlang.c	FUNCTION_208	CALL_4
0x400f8e7	      0xe800000000	                          call 0x400f8ec	      8767	ldlang.c	FUNCTION_208	CALL_4
0x400f8ec	              0x90	                                     nop	      8768	ldlang.c	FUNCTION_208
0x400f8ed	              0xc9	                                   leave	      8768	ldlang.c	FUNCTION_208
0x400f8ee	              0xc3	                                     ret	      8768	ldlang.c	FUNCTION_208
lang_add_output	functions,0:ELSE,0:FOR,0:CALL,0:IF,1:DO,0:WHILE,0:SWITCH,0	15
0x400c123	              0x55	                                push rbp	      6666	ldlang.c	FUNCTION_144
0x400c124	          0x4889e5	                            mov rbp, rsp	      6666	ldlang.c	FUNCTION_144
0x400c127	        0x48897df8	                mov qword [rbp - 8], rdi	      6666	ldlang.c	FUNCTION_144
0x400c12b	          0x8975f4	              mov dword [rbp - 0xc], esi	      6666	ldlang.c	FUNCTION_144
0x400c12e	    0x8b0500000000	            mov eax, dword [0x0400c134] 	      6668	ldlang.c	FUNCTION_144	IF_1
0x400c134	            0x85c0	                           test eax, eax	      6668	ldlang.c	FUNCTION_144	IF_1
0x400c136	            0x7406	                            je 0x400c13e	      6668	ldlang.c	FUNCTION_144	IF_1
0x400c138	        0x837df400	                cmp dword [rbp - 0xc], 0	      6668	ldlang.c	FUNCTION_144	IF_1
0x400c13c	            0x7515	                           jne 0x400c153	      6668	ldlang.c	FUNCTION_144	IF_1
0x400c13e	        0x488b45f8	                mov rax, qword [rbp - 8]	      6670	ldlang.c	FUNCTION_144	IF_1
0x400c142	    0x488905000000	            mov qword [0x0400c149], rax 	      6670	ldlang.c	FUNCTION_144	IF_1
0x400c149	    0xc70500000000	               mov dword [0x0400c153], 1	      6671	ldlang.c	FUNCTION_144	IF_1
0x400c153	              0x90	                                     nop	      6673	ldlang.c	FUNCTION_144
0x400c154	              0x5d	                                 pop rbp	      6673	ldlang.c	FUNCTION_144
0x400c155	              0xc3	                                     ret	      6673	ldlang.c	FUNCTION_144
lang_size_relro_segment_1	functions,0:ELSE,0:FOR,1:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	98
0x400a266	              0x55	                                push rbp	      5630	ldlang.c	FUNCTION_119
0x400a267	          0x4889e5	                            mov rbp, rsp	      5630	ldlang.c	FUNCTION_119
0x400a26a	        0x4883ec40	                           sub rsp, 0x40	      5630	ldlang.c	FUNCTION_119
0x400a26e	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      5630	ldlang.c	FUNCTION_119
0x400a272	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5635	ldlang.c	FUNCTION_119
0x400a276	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      5635	ldlang.c	FUNCTION_119
0x400a27a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5635	ldlang.c	FUNCTION_119
0x400a27e	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5635	ldlang.c	FUNCTION_119
0x400a282	          0x4801d0	                            add rax, rdx	      5635	ldlang.c	FUNCTION_119
0x400a285	        0x488d50ff	                      lea rdx, [rax - 1]	      5635	ldlang.c	FUNCTION_119
0x400a289	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5636	ldlang.c	FUNCTION_119
0x400a28d	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5636	ldlang.c	FUNCTION_119
0x400a291	          0x48f7d8	                                 neg rax	      5636	ldlang.c	FUNCTION_119
0x400a294	          0x4821d0	                            and rax, rdx	      5635	ldlang.c	FUNCTION_119
0x400a297	        0x488945e8	             mov qword [rbp - 0x18], rax	      5635	ldlang.c	FUNCTION_119
0x400a29b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5639	ldlang.c	FUNCTION_119
0x400a29f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5639	ldlang.c	FUNCTION_119
0x400a2a3	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      5639	ldlang.c	FUNCTION_119
0x400a2a7	          0x4829c2	                            sub rdx, rax	      5639	ldlang.c	FUNCTION_119
0x400a2aa	          0x4889d0	                            mov rax, rdx	      5639	ldlang.c	FUNCTION_119
0x400a2ad	        0x488945d0	             mov qword [rbp - 0x30], rax	      5639	ldlang.c	FUNCTION_119
0x400a2b1	    0x488b05000000	            mov rax, qword [0x0400a2b8] 	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a2b8	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a2bf	        0x488945d8	             mov qword [rbp - 0x28], rax	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a2c3	      0xe9d2000000	                           jmp 0x400a39a	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a2c8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5643	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2cc	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5643	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2cf	          0x83e001	                              and eax, 1	      5643	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2d2	            0x85c0	                           test eax, eax	      5643	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2d4	     0xf84b4000000	                            je 0x400a38e	      5643	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2de	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2e2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2e6	        0x488b4008	                mov rax, qword [rax + 8]	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2ea	          0x4839c2	                            cmp rdx, rax	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2ed	     0xf829b000000	                            jb 0x400a38e	      5644	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2f3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2f7	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2fb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a2ff	        0x488b4818	            mov rcx, qword [rax + 0x18] 	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a303	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a307	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a30b	          0x4829c1	                            sub rcx, rax	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a30e	          0x4889c8	                            mov rax, rcx	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a311	          0x4839c2	                            cmp rdx, rax	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a314	            0x7378	                           jae 0x400a38e	      5645	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a316	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5651	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a31a	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5651	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a31e	        0x488945f0	             mov qword [rbp - 0x10], rax	      5651	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a322	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5651	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a326	        0x488945e0	             mov qword [rbp - 0x20], rax	      5651	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a32a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5652	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a32e	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5652	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a331	      0x2502040000	                          and eax, 0x402	      5652	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a336	      0x3d00040000	                          cmp eax, 0x400	      5652	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a33b	            0x741a	                            je 0x400a357	      5652	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a33d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a341	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a345	    0x8b0500000000	            mov eax, dword [0x0400a34b] 	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a34b	            0x89c1	                            mov ecx, eax	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a34d	          0x48d3ea	                             shr rdx, cl	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a350	          0x4889d0	                            mov rax, rdx	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a353	        0x480145e0	            add qword [rbp - 0x20], rax 	      5653	ldlang.c	FUNCTION_119	FOR_1	IF_1	IF_2
0x400a357	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      5654	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a35b	        0x482b45e0	             sub rax, qword [rbp - 0x20]	      5654	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a35f	        0x488945f8	                mov qword [rbp - 8], rax	      5654	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a363	        0x488b45f8	                mov rax, qword [rbp - 8]	      5657	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a367	        0x480145f0	            add qword [rbp - 0x10], rax 	      5657	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a36b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a36f	          0x8b4070	            mov eax, dword [rax + 0x70] 	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a372	      0xba01000000	                              mov edx, 1	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a377	            0x89c1	                            mov ecx, eax	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a379	          0x48d3e2	                             shl rdx, cl	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a37c	          0x4889d0	                            mov rax, rdx	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a37f	          0x48f7d8	                                 neg rax	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a382	        0x482145f0	             and qword [rbp - 0x10], rax	      5658	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a386	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5660	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a38a	        0x488945d0	             mov qword [rbp - 0x30], rax	      5660	ldlang.c	FUNCTION_119	FOR_1	IF_1
0x400a38e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a392	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a396	        0x488945d8	             mov qword [rbp - 0x28], rax	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a39a	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a39f	     0xf8523ffffff	                           jne 0x400a2c8	      5642	ldlang.c	FUNCTION_119	FOR_1
0x400a3a5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5663	ldlang.c	FUNCTION_119
0x400a3a9	    0xc70004000000	                      mov dword [rax], 4	      5663	ldlang.c	FUNCTION_119
0x400a3af	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3b3	        0x488b4008	                mov rax, qword [rax + 8]	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3b7	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3bb	            0x760f	                           jbe 0x400a3cc	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3bd	      0xbe20160000	                         mov esi, 0x1620	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3c2	      0xbf00000000	                              mov edi, 0	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3c7	      0xe800000000	                          call 0x400a3cc	      5664	ldlang.c	FUNCTION_119	CALL_1
0x400a3cc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5665	ldlang.c	FUNCTION_119
0x400a3d0	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      5665	ldlang.c	FUNCTION_119
0x400a3d4	        0x48895008	                mov qword [rax + 8], rdx	      5665	ldlang.c	FUNCTION_119
0x400a3d8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5666	ldlang.c	FUNCTION_119
0x400a3dc	              0xc9	                                   leave	      5667	ldlang.c	FUNCTION_119
0x400a3dd	              0xc3	                                     ret	      5667	ldlang.c	FUNCTION_119
compare_section	functions,0:ELSE,1:FOR,0:CALL,5:IF,4:DO,0:WHILE,0:SWITCH,1	82
0x4000961	              0x55	                                push rbp	       429	ldlang.c	FUNCTION_14
0x4000962	          0x4889e5	                            mov rbp, rsp	       429	ldlang.c	FUNCTION_14
0x4000965	        0x4883ec40	                           sub rsp, 0x40	       429	ldlang.c	FUNCTION_14
0x4000969	          0x897ddc	             mov dword [rbp - 0x24], edi	       429	ldlang.c	FUNCTION_14
0x400096c	        0x488975d0	             mov qword [rbp - 0x30], rsi	       429	ldlang.c	FUNCTION_14
0x4000970	        0x488955c8	             mov qword [rbp - 0x38], rdx	       429	ldlang.c	FUNCTION_14
0x4000974	        0x837ddc06	               cmp dword [rbp - 0x24], 6	       433	ldlang.c	FUNCTION_14	SWITCH_1
0x4000978	            0x770d	                            ja 0x4000987	       433	ldlang.c	FUNCTION_14	SWITCH_1
0x400097a	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       433	ldlang.c	FUNCTION_14	SWITCH_1
0x400097d	    0x488b04c50000	                  mov rax, qword [rax*8]	       433	ldlang.c	FUNCTION_14	SWITCH_1
0x4000985	            0xffe0	                                 jmp rax	       433	ldlang.c	FUNCTION_14	SWITCH_1
0x4000987	      0xba00000000	                              mov edx, 0	       436	ldlang.c	FUNCTION_14	SWITCH_1	CALL_1
0x400098c	      0xbeb4010000	                          mov esi, 0x1b4	       436	ldlang.c	FUNCTION_14	SWITCH_1	CALL_1
0x4000991	      0xbf00000000	                              mov edi, 0	       436	ldlang.c	FUNCTION_14	SWITCH_1	CALL_1
0x4000996	      0xe800000000	                          call 0x400099b	       436	ldlang.c	FUNCTION_14	SWITCH_1	CALL_1
0x400099b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       440	ldlang.c	FUNCTION_14	SWITCH_1	CALL_2
0x400099f	          0x488b00	                    mov rax, qword [rax]	       440	ldlang.c	FUNCTION_14	SWITCH_1	CALL_2
0x40009a2	          0x4889c7	                            mov rdi, rax	       440	ldlang.c	FUNCTION_14	SWITCH_1	CALL_2
0x40009a5	      0xe8a4feffff	              call sym.get_init_priority	       440	ldlang.c	FUNCTION_14	SWITCH_1	CALL_2
0x40009aa	        0x488945f0	             mov qword [rbp - 0x10], rax	       440	ldlang.c	FUNCTION_14	SWITCH_1	CALL_2
0x40009ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       442	ldlang.c	FUNCTION_14	SWITCH_1	CALL_3
0x40009b2	          0x488b00	                    mov rax, qword [rax]	       442	ldlang.c	FUNCTION_14	SWITCH_1	CALL_3
0x40009b5	          0x4889c7	                            mov rdi, rax	       442	ldlang.c	FUNCTION_14	SWITCH_1	CALL_3
0x40009b8	      0xe891feffff	              call sym.get_init_priority	       442	ldlang.c	FUNCTION_14	SWITCH_1	CALL_3
0x40009bd	        0x488945f8	                mov qword [rbp - 8], rax	       442	ldlang.c	FUNCTION_14	SWITCH_1	CALL_3
0x40009c1	      0x48837df000	               cmp qword [rbp - 0x10], 0	       443	ldlang.c	FUNCTION_14	SWITCH_1	IF_1
0x40009c6	            0x743e	                            je 0x4000a06	       443	ldlang.c	FUNCTION_14	SWITCH_1	IF_1
0x40009c8	      0x48837df800	                  cmp qword [rbp - 8], 0	       443	ldlang.c	FUNCTION_14	SWITCH_1	IF_1
0x40009cd	            0x7437	                            je 0x4000a06	       443	ldlang.c	FUNCTION_14	SWITCH_1	IF_1
0x40009cf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009d3	            0x89c2	                            mov edx, eax	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009d5	        0x488b45f8	                mov rax, qword [rbp - 8]	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009d9	            0x29c2	                            sub edx, eax	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009db	            0x89d0	                            mov eax, edx	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009dd	          0x8945ec	             mov dword [rbp - 0x14], eax	       445	ldlang.c	FUNCTION_14	SWITCH_1
0x40009e0	        0x837dec00	               cmp dword [rbp - 0x14], 0	       446	ldlang.c	FUNCTION_14	SWITCH_1	IF_2
0x40009e4	            0x741f	                            je 0x4000a05	       446	ldlang.c	FUNCTION_14	SWITCH_1	IF_2
0x40009e6	            0xeb79	                           jmp 0x4000a61	       447	ldlang.c	FUNCTION_14	SWITCH_1	IF_2
0x40009e8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       452	ldlang.c	FUNCTION_14	SWITCH_1
0x40009ec	          0x8b5070	            mov edx, dword [rax + 0x70] 	       452	ldlang.c	FUNCTION_14	SWITCH_1
0x40009ef	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       453	ldlang.c	FUNCTION_14	SWITCH_1
0x40009f3	          0x8b4070	            mov eax, dword [rax + 0x70] 	       453	ldlang.c	FUNCTION_14	SWITCH_1
0x40009f6	            0x29c2	                            sub edx, eax	       453	ldlang.c	FUNCTION_14	SWITCH_1
0x40009f8	            0x89d0	                            mov eax, edx	       453	ldlang.c	FUNCTION_14	SWITCH_1
0x40009fa	          0x8945ec	             mov dword [rbp - 0x14], eax	       452	ldlang.c	FUNCTION_14	SWITCH_1
0x40009fd	        0x837dec00	               cmp dword [rbp - 0x14], 0	       454	ldlang.c	FUNCTION_14	SWITCH_1	IF_3
0x4000a01	            0x755a	                           jne 0x4000a5d	       454	ldlang.c	FUNCTION_14	SWITCH_1	IF_3
0x4000a03	            0xeb01	                           jmp 0x4000a06	       454	ldlang.c	FUNCTION_14	SWITCH_1	IF_3
0x4000a05	              0x90	                                     nop	       449	ldlang.c	FUNCTION_14	SWITCH_1	ELSE_1
0x4000a06	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a0a	          0x488b10	                    mov rdx, qword [rax]	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a0d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a11	          0x488b00	                    mov rax, qword [rax]	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a14	          0x4889d6	                            mov rsi, rdx	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a17	          0x4889c7	                            mov rdi, rax	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a1a	      0xe800000000	                          call 0x4000a1f	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a1f	          0x8945ec	             mov dword [rbp - 0x14], eax	       460	ldlang.c	FUNCTION_14	SWITCH_1	CALL_4
0x4000a22	            0xeb3d	                           jmp 0x4000a61	       462	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a24	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a28	          0x488b10	                    mov rdx, qword [rax]	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a2b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a2f	          0x488b00	                    mov rax, qword [rax]	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a32	          0x4889d6	                            mov rsi, rdx	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a35	          0x4889c7	                            mov rdi, rax	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a38	      0xe800000000	                          call 0x4000a3d	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a3d	          0x8945ec	             mov dword [rbp - 0x14], eax	       465	ldlang.c	FUNCTION_14	SWITCH_1	CALL_5
0x4000a40	        0x837dec00	               cmp dword [rbp - 0x14], 0	       467	ldlang.c	FUNCTION_14	SWITCH_1	IF_4
0x4000a44	            0x751a	                           jne 0x4000a60	       467	ldlang.c	FUNCTION_14	SWITCH_1	IF_4
0x4000a46	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       472	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a4a	          0x8b5070	            mov edx, dword [rax + 0x70] 	       472	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a4d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       473	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a51	          0x8b4070	            mov eax, dword [rax + 0x70] 	       473	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a54	            0x29c2	                            sub edx, eax	       473	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a56	            0x89d0	                            mov eax, edx	       473	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a58	          0x8945ec	             mov dword [rbp - 0x14], eax	       472	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a5b	            0xeb04	                           jmp 0x4000a61	       474	ldlang.c	FUNCTION_14	SWITCH_1
0x4000a5d	              0x90	                                     nop	       455	ldlang.c	FUNCTION_14	SWITCH_1	IF_3
0x4000a5e	            0xeb01	                           jmp 0x4000a61	       455	ldlang.c	FUNCTION_14	SWITCH_1	IF_3
0x4000a60	              0x90	                                     nop	       468	ldlang.c	FUNCTION_14	SWITCH_1	IF_4
0x4000a61	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       477	ldlang.c	FUNCTION_14
0x4000a64	              0xc9	                                   leave	       478	ldlang.c	FUNCTION_14
0x4000a65	              0xc3	                                     ret	       478	ldlang.c	FUNCTION_14
lang_check_relocs	functions,0:ELSE,0:FOR,1:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	25
0x400cb63	              0x55	                                push rbp	      7116	ldlang.c	FUNCTION_161
0x400cb64	          0x4889e5	                            mov rbp, rsp	      7116	ldlang.c	FUNCTION_161
0x400cb67	        0x4883ec10	                           sub rsp, 0x10	      7116	ldlang.c	FUNCTION_161
0x400cb6b	     0xfb605000000	           movzx eax, byte [0x0400cb72] 	      7117	ldlang.c	FUNCTION_161	IF_1
0x400cb72	          0x83e020	                           and eax, 0x20	      7117	ldlang.c	FUNCTION_161	IF_1
0x400cb75	            0x84c0	                             test al, al	      7117	ldlang.c	FUNCTION_161	IF_1
0x400cb77	            0x7442	                            je 0x400cbbb	      7117	ldlang.c	FUNCTION_161	IF_1
0x400cb79	    0x488b05000000	            mov rax, qword [0x0400cb80] 	      7121	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cb80	        0x488945f8	                mov qword [rbp - 8], rax	      7121	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cb84	            0xeb2e	                           jmp 0x400cbb4	      7121	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cb86	        0x488b45f8	                mov rax, qword [rbp - 8]	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb8a	      0xbe00000000	                              mov esi, 0	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb8f	          0x4889c7	                            mov rdi, rax	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb92	      0xe800000000	                          call 0x400cb97	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb97	            0x85c0	                           test eax, eax	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb99	            0x750a	                           jne 0x400cba5	      7123	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2	CALL_1
0x400cb9b	    0xc70500000000	               mov dword [0x0400cba5], 0	      7126	ldlang.c	FUNCTION_161	IF_1	FOR_1	IF_2
0x400cba5	        0x488b45f8	                mov rax, qword [rbp - 8]	      7122	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cba9	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      7122	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cbb0	        0x488945f8	                mov qword [rbp - 8], rax	      7122	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cbb4	      0x48837df800	                  cmp qword [rbp - 8], 0	      7121	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cbb9	            0x75cb	                           jne 0x400cb86	      7121	ldlang.c	FUNCTION_161	IF_1	FOR_1
0x400cbbb	              0x90	                                     nop	      7132	ldlang.c	FUNCTION_161
0x400cbbc	              0xc9	                                   leave	      7132	ldlang.c	FUNCTION_161
0x400cbbd	              0xc3	                                     ret	      7132	ldlang.c	FUNCTION_161
find_section	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	30
0x40006bd	              0x55	                                push rbp	       347	ldlang.c	FUNCTION_10
0x40006be	          0x4889e5	                            mov rbp, rsp	       347	ldlang.c	FUNCTION_10
0x40006c1	        0x4883ec40	                           sub rsp, 0x40	       347	ldlang.c	FUNCTION_10
0x40006c5	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       347	ldlang.c	FUNCTION_10
0x40006c9	        0x488975d0	             mov qword [rbp - 0x30], rsi	       347	ldlang.c	FUNCTION_10
0x40006cd	        0x488955c8	             mov qword [rbp - 0x38], rdx	       347	ldlang.c	FUNCTION_10
0x40006d1	    0x64488b042528	                mov rax, qword fs:[0x28]	       347	ldlang.c	FUNCTION_10
0x40006da	        0x488945f8	                mov qword [rbp - 8], rax	       347	ldlang.c	FUNCTION_10
0x40006de	            0x31c0	                            xor eax, eax	       347	ldlang.c	FUNCTION_10
0x40006e0	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       348	ldlang.c	FUNCTION_10
0x40006e8	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       348	ldlang.c	FUNCTION_10
0x40006ef	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       350	ldlang.c	FUNCTION_10	CALL_1
0x40006f3	        0x488b7008	                mov rsi, qword [rax + 8]	       350	ldlang.c	FUNCTION_10	CALL_1
0x40006f7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       350	ldlang.c	FUNCTION_10	CALL_1
0x40006fb	        0x488b4020	            mov rax, qword [rax + 0x20] 	       350	ldlang.c	FUNCTION_10	CALL_1
0x40006ff	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       350	ldlang.c	FUNCTION_10	CALL_1
0x4000703	          0x4889d1	                            mov rcx, rdx	       350	ldlang.c	FUNCTION_10	CALL_1
0x4000706	      0xba00000000	                              mov edx, 0	       350	ldlang.c	FUNCTION_10	CALL_1
0x400070b	          0x4889c7	                            mov rdi, rax	       350	ldlang.c	FUNCTION_10	CALL_1
0x400070e	      0xe800000000	                          call 0x4000713	       350	ldlang.c	FUNCTION_10	CALL_1
0x4000713	          0x8b55e8	             mov edx, dword [rbp - 0x18]	       352	ldlang.c	FUNCTION_10
0x4000716	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       352	ldlang.c	FUNCTION_10
0x400071a	            0x8910	                    mov dword [rax], edx	       352	ldlang.c	FUNCTION_10
0x400071c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       353	ldlang.c	FUNCTION_10
0x4000720	        0x488b4df8	                mov rcx, qword [rbp - 8]	       354	ldlang.c	FUNCTION_10
0x4000724	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       354	ldlang.c	FUNCTION_10
0x400072d	            0x7405	                            je 0x4000734	       354	ldlang.c	FUNCTION_10
0x400072f	      0xe800000000	                          call 0x4000734	       354	ldlang.c	FUNCTION_10
0x4000734	              0xc9	                                   leave	       354	ldlang.c	FUNCTION_10
0x4000735	              0xc3	                                     ret	       354	ldlang.c	FUNCTION_10
check_section_callback	functions,0:ELSE,0:FOR,0:CALL,1:IF,2:DO,0:WHILE,0:SWITCH,0	35
0x400483b	              0x55	                                push rbp	      2627	ldlang.c	FUNCTION_62
0x400483c	          0x4889e5	                            mov rbp, rsp	      2627	ldlang.c	FUNCTION_62
0x400483f	        0x4883ec40	                           sub rsp, 0x40	      2627	ldlang.c	FUNCTION_62
0x4004843	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2627	ldlang.c	FUNCTION_62
0x4004847	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2627	ldlang.c	FUNCTION_62
0x400484b	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2627	ldlang.c	FUNCTION_62
0x400484f	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      2627	ldlang.c	FUNCTION_62
0x4004853	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      2627	ldlang.c	FUNCTION_62
0x4004857	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      2627	ldlang.c	FUNCTION_62
0x400485b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2630	ldlang.c	FUNCTION_62
0x400485f	        0x488945f8	                mov qword [rbp - 8], rax	      2630	ldlang.c	FUNCTION_62
0x4004863	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x4004867	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x400486b	          0x4889d6	                            mov rsi, rdx	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x400486e	          0x4889c7	                            mov rdi, rax	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x4004871	      0xe8c7baffff	               call sym.unique_section_p	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x4004876	            0x85c0	                           test eax, eax	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x4004878	            0x7531	                           jne 0x40048ab	      2633	ldlang.c	FUNCTION_62	IF_1	CALL_1
0x400487a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2636	ldlang.c	FUNCTION_62	IF_2
0x400487e	        0x488b4068	            mov rax, qword [rax + 0x68] 	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004882	          0x4885c0	                           test rax, rax	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004885	            0x7525	                           jne 0x40048ac	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004887	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2636	ldlang.c	FUNCTION_62	IF_2
0x400488b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2636	ldlang.c	FUNCTION_62	IF_2
0x400488e	          0x83e008	                              and eax, 8	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004891	            0x85c0	                           test eax, eax	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004893	            0x7517	                           jne 0x40048ac	      2636	ldlang.c	FUNCTION_62	IF_2
0x4004895	        0x488b45f8	                mov rax, qword [rbp - 8]	      2637	ldlang.c	FUNCTION_62	IF_2
0x4004899	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      2637	ldlang.c	FUNCTION_62	IF_2
0x40048a0	          0x83e2fb	                     and edx, 0xfffffffb	      2637	ldlang.c	FUNCTION_62	IF_2
0x40048a3	    0x889090000000	               mov byte [rax + 0x90], dl	      2637	ldlang.c	FUNCTION_62	IF_2
0x40048a9	            0xeb01	                           jmp 0x40048ac	      2637	ldlang.c	FUNCTION_62	IF_2
0x40048ab	              0x90	                                     nop	      2634	ldlang.c	FUNCTION_62	IF_1
0x40048ac	              0xc9	                                   leave	      2638	ldlang.c	FUNCTION_62
0x40048ad	              0xc3	                                     ret	      2638	ldlang.c	FUNCTION_62
lang_do_assignments_1	functions,0:ELSE,3:FOR,1:CALL,17:IF,16:DO,0:WHILE,1:SWITCH,2	346
0x400a565	              0x55	                                push rbp	      5750	ldlang.c	FUNCTION_122
0x400a566	          0x4889e5	                            mov rbp, rsp	      5750	ldlang.c	FUNCTION_122
0x400a569	        0x4883ec60	                           sub rsp, 0x60	      5750	ldlang.c	FUNCTION_122
0x400a56d	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      5750	ldlang.c	FUNCTION_122
0x400a571	        0x488975c0	             mov qword [rbp - 0x40], rsi	      5750	ldlang.c	FUNCTION_122
0x400a575	        0x488955b8	             mov qword [rbp - 0x48], rdx	      5750	ldlang.c	FUNCTION_122
0x400a579	        0x48894db0	             mov qword [rbp - 0x50], rcx	      5750	ldlang.c	FUNCTION_122
0x400a57d	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      5750	ldlang.c	FUNCTION_122
0x400a581	      0xe9f8040000	                           jmp 0x400aa7e	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400a586	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a58a	          0x8b4008	                mov eax, dword [rax + 8]	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a58d	          0x83f80f	                            cmp eax, 0xf	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a590	     0xf87c5040000	                            ja 0x400aa5b	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a596	            0x89c0	                            mov eax, eax	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a598	    0x488b04c50000	                  mov rax, qword [rax*8]	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5a0	            0xffe0	                                 jmp rax	      5753	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5a2	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5a6	    0x488b05000000	            mov rax, qword [0x0400a5ad] 	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5ad	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5b1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5b5	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5b9	          0x4989f8	                             mov r8, rdi	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5bc	          0x4889c7	                            mov rdi, rax	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5bf	      0xe8a1ffffff	          call sym.lang_do_assignments_1	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5c4	        0x488945b0	             mov qword [rbp - 0x50], rax	      5756	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_1
0x400a5c8	      0xe9a6040000	                           jmp 0x400aa73	      5758	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5cd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5765	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5d1	        0x488945e8	             mov qword [rbp - 0x18], rax	      5765	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5d5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5d9	            0x8b00	                    mov eax, dword [rax]	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5db	          0x83e001	                              and eax, 1	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5de	            0x89c2	                            mov edx, eax	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5e0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5e4	          0x83e201	                              and edx, 1	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5e7	            0x89d1	                            mov ecx, edx	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5e9	          0xc1e105	                              shl ecx, 5	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5ec	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5f3	          0x83e2df	                     and edx, 0xffffffdf	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5f6	             0x9ca	                             or edx, ecx	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5f8	    0x889090000000	               mov byte [rax + 0x90], dl	      5766	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a5fe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a602	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a606	          0x4885c0	                           test rax, rax	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a609	            0x7449	                            je 0x400a654	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a60b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a60f	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a616	          0x83e008	                              and eax, 8	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a619	            0x84c0	                             test al, al	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a61b	            0x7537	                           jne 0x400a654	      5767	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a61d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a621	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a625	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a628	          0x83e001	                              and eax, 1	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a62b	            0x85c0	                           test eax, eax	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a62d	            0x7415	                            je 0x400a644	      5769	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a62f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5771	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a633	    0x488905000000	            mov qword [0x0400a63a], rax 	      5771	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a63a	    0xc70500000000	               mov dword [0x0400a644], 0	      5772	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1	IF_2
0x400a644	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5774	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a648	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5774	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a64c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5774	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a650	        0x488945b0	             mov qword [rbp - 0x50], rax	      5774	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_1
0x400a654	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a658	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a65c	        0x488b5050	            mov rdx, qword [rax + 0x50] 	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a660	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a664	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a668	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a66c	        0x488b75e8	             mov rsi, qword [rbp - 0x18]	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a670	          0x4989f8	                             mov r8, rdi	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a673	          0x4889c7	                            mov rdi, rax	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a676	      0xe8eafeffff	          call sym.lang_do_assignments_1	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a67b	        0x488945f0	             mov qword [rbp - 0x10], rax	      5776	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_2
0x400a67f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5778	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3
0x400a683	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5778	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3
0x400a68a	          0x83e008	                              and eax, 8	      5778	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3
0x400a68d	            0x84c0	                             test al, al	      5778	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3
0x400a68f	     0xf85da030000	                           jne 0x400aa6f	      5778	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3
0x400a695	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5780	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4
0x400a699	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5780	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4
0x400a69d	          0x4885c0	                           test rax, rax	      5780	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4
0x400a6a0	            0x7476	                            je 0x400a718	      5780	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4
0x400a6a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6a6	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6aa	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6ad	      0x2502040000	                          and eax, 0x402	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6b2	      0x3d00040000	                          cmp eax, 0x400	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6b7	            0x750e	                           jne 0x400a6c7	      5783	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6b9	     0xfb605000000	           movzx eax, byte [0x0400a6c0] 	      5784	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5	CALL_3
0x400a6c0	          0x83e003	                              and eax, 3	      5784	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5	CALL_3
0x400a6c3	            0x3c02	                               cmp al, 2	      5784	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5	CALL_3
0x400a6c5	            0x7522	                           jne 0x400a6e9	      5784	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5	CALL_3
0x400a6c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6cb	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6cf	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6d3	    0x8b0500000000	            mov eax, dword [0x0400a6d9] 	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6d9	            0x89c1	                            mov ecx, eax	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6db	          0x48d3ea	                             shr rdx, cl	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6de	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6e2	          0x4801d0	                            add rax, rdx	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6e5	        0x488945b0	             mov qword [rbp - 0x50], rax	      5785	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_5
0x400a6e9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5787	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6
0x400a6ed	        0x488b4068	            mov rax, qword [rax + 0x68] 	      5787	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6
0x400a6f1	          0x4885c0	                           test rax, rax	      5787	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6
0x400a6f4	     0xf8475030000	                            je 0x400aa6f	      5787	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6
0x400a6fa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a6fe	        0x488b4068	            mov rax, qword [rax + 0x68] 	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a702	        0x488d55b0	                   lea rdx, [rbp - 0x50]	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a706	      0xbe00000000	                              mov esi, 0	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a70b	          0x4889c7	                            mov rdi, rax	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a70e	      0xe800000000	                          call 0x400a713	      5788	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	IF_4	IF_6	CALL_4
0x400a713	      0xe957030000	                           jmp 0x400aa6f	      5795	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a718	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5792	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	ELSE_1
0x400a71c	        0x488945b0	             mov qword [rbp - 0x50], rax	      5792	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_3	ELSE_1
0x400a720	      0xe94a030000	                           jmp 0x400aa6f	      5795	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a725	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a729	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a72d	        0x488b4030	            mov rax, qword [rax + 0x30] 	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a731	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a735	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a739	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a73d	          0x4989f8	                             mov r8, rdi	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a740	          0x4889c7	                            mov rdi, rax	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a743	      0xe81dfeffff	          call sym.lang_do_assignments_1	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a748	        0x488945b0	             mov qword [rbp - 0x50], rax	      5799	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_5
0x400a74c	      0xe922030000	                           jmp 0x400aa73	      5801	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a751	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a755	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a759	        0x488d55b0	                   lea rdx, [rbp - 0x50]	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a75d	      0xbe00000000	                              mov esi, 0	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a762	          0x4889c7	                            mov rdi, rax	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a765	      0xe800000000	                          call 0x400a76a	      5809	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_6
0x400a76a	    0x8b0500000000	            mov eax, dword [0x0400a770] 	      5810	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a770	            0x85c0	                           test eax, eax	      5810	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a772	            0x743b	                            je 0x400a7af	      5810	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a774	    0x488b15000000	            mov rdx, qword [0x0400a77b] 	      5812	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a77b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5812	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a77f	        0x48895020	             mov qword [rax + 0x20], rdx	      5812	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7
0x400a783	    0x488b05000000	            mov rax, qword [0x0400a78a] 	      5813	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a78a	          0x4885c0	                           test rax, rax	      5813	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a78d	            0x7442	                            je 0x400a7d1	      5813	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a78f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a793	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a797	    0x488b05000000	            mov rax, qword [0x0400a79e] 	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a79e	        0x488b4028	            mov rax, qword [rax + 0x28] 	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a7a2	          0x4801c2	                            add rdx, rax	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a7a5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a7a9	        0x48895020	             mov qword [rax + 0x20], rdx	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a7ad	            0xeb22	                           jmp 0x400a7d1	      5814	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_7	IF_8
0x400a7af	    0x8b0500000000	            mov eax, dword [0x0400a7b5] 	      5816	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7b5	          0x83f804	                              cmp eax, 4	      5816	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7b8	            0x7517	                           jne 0x400a7d1	      5816	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7ba	      0xbf00000000	                              mov edi, 0	      5817	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7bf	      0xe800000000	                          call 0x400a7c4	      5817	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7c4	          0x4889c7	                            mov rdi, rax	      5817	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7c7	      0xb800000000	                              mov eax, 0	      5817	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7cc	      0xe800000000	                          call 0x400a7d1	      5817	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_2	IF_9
0x400a7d1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7d5	          0x8b4010	            mov eax, dword [rax + 0x10] 	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7d8	      0x2d1a010000	                          sub eax, 0x11a	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7dd	          0x83f804	                              cmp eax, 4	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7e0	            0x770c	                            ja 0x400a7ee	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7e2	            0x89c0	                            mov eax, eax	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7e4	    0x488b04c50000	                  mov rax, qword [rax*8]	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7ec	            0xffe0	                                 jmp rax	      5820	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a7ee	      0xba00000000	                              mov edx, 0	      5823	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2	CALL_9
0x400a7f3	      0xbebf160000	                         mov esi, 0x16bf	      5823	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2	CALL_9
0x400a7f8	      0xbf00000000	                              mov edi, 0	      5823	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2	CALL_9
0x400a7fd	      0xe800000000	                          call 0x400a802	      5823	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2	CALL_9
0x400a802	    0xc745dc080000	               mov dword [rbp - 0x24], 8	      5826	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a809	            0xeb1a	                           jmp 0x400a825	      5827	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a80b	    0xc745dc040000	               mov dword [rbp - 0x24], 4	      5829	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a812	            0xeb11	                           jmp 0x400a825	      5830	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a814	    0xc745dc020000	               mov dword [rbp - 0x24], 2	      5832	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a81b	            0xeb08	                           jmp 0x400a825	      5833	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a81d	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      5835	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a824	              0x90	                                     nop	      5836	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	SWITCH_2
0x400a825	    0x8b0500000000	            mov eax, dword [0x0400a82b] 	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a82b	      0xba01000000	                              mov edx, 1	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a830	            0x89c1	                            mov ecx, eax	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a832	            0xd3e2	                             shl edx, cl	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a834	            0x89d0	                            mov eax, edx	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a836	          0x3b45dc	             cmp eax, dword [rbp - 0x24]	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a839	            0x7614	                           jbe 0x400a84f	      5838	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a83b	    0x8b0500000000	            mov eax, dword [0x0400a841] 	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a841	      0xba01000000	                              mov edx, 1	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a846	            0x89c1	                            mov ecx, eax	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a848	            0xd3e2	                             shl edx, cl	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a84a	            0x89d0	                            mov eax, edx	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a84c	          0x8945dc	             mov dword [rbp - 0x24], eax	      5839	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_10
0x400a84f	    0x8b0500000000	            mov eax, dword [0x0400a855] 	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a855	          0x8b55dc	             mov edx, dword [rbp - 0x24]	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a858	            0x89c1	                            mov ecx, eax	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a85a	            0xd3ea	                             shr edx, cl	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a85c	            0x89d0	                            mov eax, edx	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a85e	            0x89c2	                            mov edx, eax	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a860	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a864	          0x4801d0	                            add rax, rdx	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a867	        0x488945b0	             mov qword [rbp - 0x50], rax	      5840	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a86b	      0xe903020000	                           jmp 0x400aa73	      5842	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a870	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a874	        0x488b4030	            mov rax, qword [rax + 0x30] 	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a878	        0x488d55b0	                   lea rdx, [rbp - 0x50]	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a87c	      0xbe00000000	                              mov esi, 0	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a881	          0x4889c7	                            mov rdi, rax	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a884	      0xe800000000	                          call 0x400a889	      5845	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_10
0x400a889	    0x8b0500000000	            mov eax, dword [0x0400a88f] 	      5847	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a88f	            0x85c0	                           test eax, eax	      5847	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a891	            0x7411	                            je 0x400a8a4	      5847	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a893	    0x488b15000000	            mov rdx, qword [0x0400a89a] 	      5848	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a89a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5848	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a89e	        0x48895038	             mov qword [rax + 0x38], rdx	      5848	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a8a2	            0xeb22	                           jmp 0x400a8c6	      5848	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_11
0x400a8a4	    0x8b0500000000	            mov eax, dword [0x0400a8aa] 	      5849	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8aa	          0x83f804	                              cmp eax, 4	      5849	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8ad	            0x7517	                           jne 0x400a8c6	      5849	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8af	      0xbf00000000	                              mov edi, 0	      5850	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8b4	      0xe800000000	                          call 0x400a8b9	      5850	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8b9	          0x4889c7	                            mov rdi, rax	      5850	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8bc	      0xb800000000	                              mov eax, 0	      5850	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8c1	      0xe800000000	                          call 0x400a8c6	      5850	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	ELSE_3	IF_12
0x400a8c6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8ca	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8ce	          0x4889c7	                            mov rdi, rax	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8d1	      0xe800000000	                          call 0x400a8d6	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8d6	            0x89c2	                            mov edx, eax	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8d8	    0x8b0500000000	            mov eax, dword [0x0400a8de] 	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8de	            0x89c1	                            mov ecx, eax	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8e0	            0xd3ea	                             shr edx, cl	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8e2	            0x89d0	                            mov eax, edx	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8e4	            0x89c2	                            mov edx, eax	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8e6	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8ea	          0x4801d0	                            add rax, rdx	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8ed	        0x488945b0	             mov qword [rbp - 0x50], rax	      5851	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_13
0x400a8f1	      0xe97d010000	                           jmp 0x400aa73	      5852	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a8f6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5856	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a8fa	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5856	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a8fe	        0x488945f8	                mov qword [rbp - 8], rax	      5856	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a902	        0x488b45f8	                mov rax, qword [rbp - 8]	      5858	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a906	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5858	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a909	      0x2500800000	                         and eax, 0x8000	      5858	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a90e	            0x85c0	                           test eax, eax	      5858	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a910	     0xf855c010000	                           jne 0x400aa72	      5858	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a916	        0x488b45f8	                mov rax, qword [rbp - 8]	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a91a	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a91e	    0x8b0500000000	            mov eax, dword [0x0400a924] 	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a924	            0x89c1	                            mov ecx, eax	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a926	          0x48d3ea	                             shr rdx, cl	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a929	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a92d	          0x4801d0	                            add rax, rdx	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a930	        0x488945b0	             mov qword [rbp - 0x50], rax	      5859	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_13
0x400a934	      0xe939010000	                           jmp 0x400aa72	      5861	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a939	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5867	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a93d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5867	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a941	        0x488945b8	             mov qword [rbp - 0x48], rax	      5867	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a945	      0xe929010000	                           jmp 0x400aa73	      5868	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a94a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5871	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a94e	    0x488905000000	            mov qword [0x0400a955], rax 	      5871	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a955	    0x488b05000000	            mov rax, qword [0x0400a95c] 	      5872	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a95c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5872	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a960	          0x8b4010	            mov eax, dword [rax + 0x10] 	      5872	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a963	          0x83f808	                              cmp eax, 8	      5872	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a966	            0x7475	                            je 0x400a9dd	      5872	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a968	    0x488b05000000	            mov rax, qword [0x0400a96f] 	      5874	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a96f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5874	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a973	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5874	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a977	        0x488945e0	             mov qword [rbp - 0x20], rax	      5874	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14
0x400a97b	    0x488b05000000	            mov rax, qword [0x0400a982] 	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a982	        0x483945c0	            cmp qword [rbp - 0x40], rax 	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a986	            0x752b	                           jne 0x400a9b3	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a988	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a98c	           0xfb600	                   movzx eax, byte [rax]	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a98f	            0x3c2e	                            cmp al, 0x2e	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a991	            0x7520	                           jne 0x400a9b3	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a993	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a997	        0x4883c001	                              add rax, 1	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a99b	           0xfb600	                   movzx eax, byte [rax]	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a99e	            0x84c0	                             test al, al	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a9a0	            0x7511	                           jne 0x400a9b3	      5876	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a9a2	    0xc70500000000	               mov dword [0x0400a9ac], 1	      5877	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_15
0x400a9ac	            0xeb05	                           jmp 0x400a9b3	      5879	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9ae	      0x488345e001	               add qword [rbp - 0x20], 1	      5880	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9b3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5879	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9b7	           0xfb600	                   movzx eax, byte [rax]	      5879	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9ba	            0x3c5f	                            cmp al, 0x5f	      5879	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9bc	            0x74f0	                            je 0x400a9ae	      5879	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	WHILE_1
0x400a9be	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9c2	      0xbe00000000	                              mov esi, 0	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9c7	          0x4889c7	                            mov rdi, rax	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9ca	      0xe800000000	                          call 0x400a9cf	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9cf	            0x85c0	                           test eax, eax	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9d1	            0x750a	                           jne 0x400a9dd	      5881	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16	CALL_14
0x400a9d3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      5882	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16
0x400a9d7	    0xc70001000000	                      mov dword [rax], 1	      5882	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	IF_14	IF_16
0x400a9dd	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      5885	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a9e1	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5885	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400a9e5	          0x4885c0	                           test rax, rax	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9e8	            0x740a	                            je 0x400a9f4	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9ea	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9ee	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9f2	            0xeb05	                           jmp 0x400a9f9	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9f4	      0xb800000000	                              mov eax, 0	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9f9	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400a9fd	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400aa01	        0x488d55b0	                   lea rdx, [rbp - 0x50]	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400aa05	          0x4889c6	                            mov rsi, rax	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400aa08	          0x4889cf	                            mov rdi, rcx	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400aa0b	      0xe800000000	                          call 0x400aa10	      5884	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_15
0x400aa10	            0xeb61	                           jmp 0x400aa73	      5888	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa12	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa16	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa1a	    0x8b0500000000	            mov eax, dword [0x0400aa20] 	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa20	            0x89c1	                            mov ecx, eax	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa22	          0x48d3ea	                             shr rdx, cl	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa25	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa29	          0x4801d0	                            add rax, rdx	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa2c	        0x488945b0	             mov qword [rbp - 0x50], rax	      5891	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa30	            0xeb41	                           jmp 0x400aa73	      5892	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa32	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa3a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa3e	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa42	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa46	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa4a	          0x4989f8	                             mov r8, rdi	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa4d	          0x4889c7	                            mov rdi, rax	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa50	      0xe810fbffff	          call sym.lang_do_assignments_1	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa55	        0x488945b0	             mov qword [rbp - 0x50], rax	      5895	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_16
0x400aa59	            0xeb18	                           jmp 0x400aa73	      5897	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa5b	      0xbe12170000	                         mov esi, 0x1712	      5906	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_17
0x400aa60	      0xbf00000000	                              mov edi, 0	      5906	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_17
0x400aa65	      0xe800000000	                          call 0x400aa6a	      5906	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1	CALL_17
0x400aa6a	            0xeb07	                           jmp 0x400aa73	      5907	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa6c	              0x90	                                     nop	      5864	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa6d	            0xeb04	                           jmp 0x400aa73	      5864	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa6f	              0x90	                                     nop	      5795	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa70	            0xeb01	                           jmp 0x400aa73	      5795	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa72	              0x90	                                     nop	      5861	ldlang.c	FUNCTION_122	FOR_1	SWITCH_1
0x400aa73	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400aa77	          0x488b00	                    mov rax, qword [rax]	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400aa7a	        0x488945c8	             mov qword [rbp - 0x38], rax	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400aa7e	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400aa83	     0xf85fdfaffff	                           jne 0x400a586	      5751	ldlang.c	FUNCTION_122	FOR_1
0x400aa89	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      5910	ldlang.c	FUNCTION_122
0x400aa8d	              0xc9	                                   leave	      5911	ldlang.c	FUNCTION_122
0x400aa8e	              0xc3	                                     ret	      5911	ldlang.c	FUNCTION_122
walk_wild_section_specs3_wild2	functions,0:ELSE,2:FOR,1:CALL,7:IF,4:DO,0:WHILE,0:SWITCH,0	114
0x4000f01	              0x55	                                push rbp	       649	ldlang.c	FUNCTION_21
0x4000f02	          0x4889e5	                            mov rbp, rsp	       649	ldlang.c	FUNCTION_21
0x4000f05	        0x4883ec60	                           sub rsp, 0x60	       649	ldlang.c	FUNCTION_21
0x4000f09	        0x48897db8	             mov qword [rbp - 0x48], rdi	       649	ldlang.c	FUNCTION_21
0x4000f0d	        0x488975b0	             mov qword [rbp - 0x50], rsi	       649	ldlang.c	FUNCTION_21
0x4000f11	        0x488955a8	             mov qword [rbp - 0x58], rdx	       649	ldlang.c	FUNCTION_21
0x4000f15	        0x48894da0	             mov qword [rbp - 0x60], rcx	       649	ldlang.c	FUNCTION_21
0x4000f19	    0x64488b042528	                mov rax, qword fs:[0x28]	       649	ldlang.c	FUNCTION_21
0x4000f22	        0x488945f8	                mov qword [rbp - 8], rax	       649	ldlang.c	FUNCTION_21
0x4000f26	            0x31c0	                            xor eax, eax	       649	ldlang.c	FUNCTION_21
0x4000f28	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       651	ldlang.c	FUNCTION_21
0x4000f2c	        0x488b4050	            mov rax, qword [rax + 0x50] 	       651	ldlang.c	FUNCTION_21
0x4000f30	        0x488945d0	             mov qword [rbp - 0x30], rax	       651	ldlang.c	FUNCTION_21
0x4000f34	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       652	ldlang.c	FUNCTION_21
0x4000f38	        0x488b4058	            mov rax, qword [rax + 0x58] 	       652	ldlang.c	FUNCTION_21
0x4000f3c	        0x488945d8	             mov qword [rbp - 0x28], rax	       652	ldlang.c	FUNCTION_21
0x4000f40	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       653	ldlang.c	FUNCTION_21
0x4000f44	        0x488b4060	            mov rax, qword [rax + 0x60] 	       653	ldlang.c	FUNCTION_21
0x4000f48	        0x488945e0	             mov qword [rbp - 0x20], rax	       653	ldlang.c	FUNCTION_21
0x4000f4c	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f50	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f54	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f58	          0x4889ce	                            mov rsi, rcx	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f5b	          0x4889c7	                            mov rdi, rax	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f5e	      0xe85af7ffff	                   call sym.find_section	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f63	        0x488945e8	             mov qword [rbp - 0x18], rax	       655	ldlang.c	FUNCTION_21	CALL_1
0x4000f67	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       657	ldlang.c	FUNCTION_21	IF_1
0x4000f6a	            0x85c0	                           test eax, eax	       657	ldlang.c	FUNCTION_21	IF_1
0x4000f6c	            0x741d	                            je 0x4000f8b	       657	ldlang.c	FUNCTION_21	IF_1
0x4000f6e	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f72	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f76	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f7a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f7e	          0x4889c7	                            mov rdi, rax	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f81	      0xe8ebf5ffff	      call sym.walk_wild_section_general	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f86	      0xe90d010000	                           jmp 0x4001098	       659	ldlang.c	FUNCTION_21	IF_1	CALL_2
0x4000f8b	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       663	ldlang.c	FUNCTION_21	FOR_1
0x4000f8f	        0x488b4020	            mov rax, qword [rax + 0x20] 	       663	ldlang.c	FUNCTION_21	FOR_1
0x4000f93	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       663	ldlang.c	FUNCTION_21	FOR_1
0x4000f9a	        0x488945c8	             mov qword [rbp - 0x38], rax	       663	ldlang.c	FUNCTION_21	FOR_1
0x4000f9e	      0xe9ea000000	                           jmp 0x400108d	       663	ldlang.c	FUNCTION_21	FOR_1
0x4000fa3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       665	ldlang.c	FUNCTION_21	FOR_1	IF_2
0x4000fa7	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       665	ldlang.c	FUNCTION_21	FOR_1	IF_2
0x4000fab	            0x752b	                           jne 0x4000fd8	       665	ldlang.c	FUNCTION_21	FOR_1	IF_2
0x4000fad	        0x4c8b45a0	              mov r8, qword [rbp - 0x60]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fb1	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fb5	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fb9	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fbd	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fc1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fc5	          0x4d89c1	                              mov r9, r8	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fc8	          0x4989f8	                             mov r8, rdi	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fcb	          0x4889c7	                            mov rdi, rax	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fce	      0xe83cf5ffff	     call sym.walk_wild_consider_section	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fd3	      0xe9a9000000	                           jmp 0x4001081	       666	ldlang.c	FUNCTION_21	FOR_1	CALL_3
0x4000fd8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       669	ldlang.c	FUNCTION_21	FOR_1	ELSE_1
0x4000fdc	          0x488b00	                    mov rax, qword [rax]	       669	ldlang.c	FUNCTION_21	FOR_1	ELSE_1
0x4000fdf	        0x488945f0	             mov qword [rbp - 0x10], rax	       669	ldlang.c	FUNCTION_21	FOR_1	ELSE_1
0x4000fe3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000fe7	        0x488b4008	                mov rax, qword [rax + 8]	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000feb	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000fef	          0x4889d6	                            mov rsi, rdx	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000ff2	          0x4889c7	                            mov rdi, rax	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000ff5	      0xe89af7ffff	              call sym.match_simple_wild	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000ffa	            0x85c0	                           test eax, eax	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000ffc	           0xf94c0	                                 sete al	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4000fff	           0xfb6c0	                           movzx eax, al	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4001002	          0x8945c4	             mov dword [rbp - 0x3c], eax	       670	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_4
0x4001005	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       672	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	IF_3
0x4001009	            0x7528	                           jne 0x4001033	       672	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	IF_3
0x400100b	        0x4c8b45a0	              mov r8, qword [rbp - 0x60]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x400100f	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001013	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001017	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x400101b	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x400101f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001023	          0x4d89c1	                              mov r9, r8	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001026	          0x4989f8	                             mov r8, rdi	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001029	          0x4889c7	                            mov rdi, rax	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x400102c	      0xe8def4ffff	     call sym.walk_wild_consider_section	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001031	            0xeb4e	                           jmp 0x4001081	       673	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	CALL_5
0x4001033	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x4001037	        0x488b4008	                mov rax, qword [rax + 8]	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x400103b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x400103f	          0x4889d6	                            mov rsi, rdx	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x4001042	          0x4889c7	                            mov rdi, rax	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x4001045	      0xe84af7ffff	              call sym.match_simple_wild	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x400104a	            0x85c0	                           test eax, eax	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x400104c	           0xf94c0	                                 sete al	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x400104f	           0xfb6c0	                           movzx eax, al	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x4001052	          0x8945c4	             mov dword [rbp - 0x3c], eax	       676	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	CALL_6
0x4001055	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       677	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4
0x4001059	            0x7526	                           jne 0x4001081	       677	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4
0x400105b	        0x4c8b45a0	              mov r8, qword [rbp - 0x60]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x400105f	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001063	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001067	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x400106b	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x400106f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001073	          0x4d89c1	                              mov r9, r8	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001076	          0x4989f8	                             mov r8, rdi	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001079	          0x4889c7	                            mov rdi, rax	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x400107c	      0xe88ef4ffff	     call sym.walk_wild_consider_section	       678	ldlang.c	FUNCTION_21	FOR_1	ELSE_1	ELSE_2	IF_4	CALL_7
0x4001081	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       663	ldlang.c	FUNCTION_21	FOR_1
0x4001085	        0x488b4010	            mov rax, qword [rax + 0x10] 	       663	ldlang.c	FUNCTION_21	FOR_1
0x4001089	        0x488945c8	             mov qword [rbp - 0x38], rax	       663	ldlang.c	FUNCTION_21	FOR_1
0x400108d	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       663	ldlang.c	FUNCTION_21	FOR_1
0x4001092	     0xf850bffffff	                           jne 0x4000fa3	       663	ldlang.c	FUNCTION_21	FOR_1
0x4001098	        0x488b45f8	                mov rax, qword [rbp - 8]	       683	ldlang.c	FUNCTION_21
0x400109c	    0x644833042528	                xor rax, qword fs:[0x28]	       683	ldlang.c	FUNCTION_21
0x40010a5	            0x7405	                            je 0x40010ac	       683	ldlang.c	FUNCTION_21
0x40010a7	      0xe800000000	                          call 0x40010ac	       683	ldlang.c	FUNCTION_21
0x40010ac	              0xc9	                                   leave	       683	ldlang.c	FUNCTION_21
0x40010ad	              0xc3	                                     ret	       683	ldlang.c	FUNCTION_21
lang_append_dynamic_list_cpp_typeinfo	functions,0:ELSE,0:FOR,1:CALL,3:IF,0:DO,0:WHILE,0:SWITCH,0	32
0x400f621	              0x55	                                push rbp	      8689	ldlang.c	FUNCTION_205
0x400f622	          0x4889e5	                            mov rbp, rsp	      8689	ldlang.c	FUNCTION_205
0x400f625	        0x4883ec30	                           sub rsp, 0x30	      8689	ldlang.c	FUNCTION_205
0x400f629	    0x64488b042528	                mov rax, qword fs:[0x28]	      8689	ldlang.c	FUNCTION_205
0x400f632	        0x488945f8	                mov qword [rbp - 8], rax	      8689	ldlang.c	FUNCTION_205
0x400f636	            0x31c0	                            xor eax, eax	      8689	ldlang.c	FUNCTION_205
0x400f638	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      8690	ldlang.c	FUNCTION_205
0x400f640	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      8690	ldlang.c	FUNCTION_205
0x400f648	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      8695	ldlang.c	FUNCTION_205
0x400f650	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      8698	ldlang.c	FUNCTION_205	FOR_1	CALL_1
0x400f657	            0xeb26	                           jmp 0x400f67f	      8698	ldlang.c	FUNCTION_205	FOR_1	CALL_1
0x400f659	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f65c	      0x488b74c5e0	     mov rsi, qword [rbp + rax*8 - 0x20]	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f661	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f665	      0xb900000000	                              mov ecx, 0	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f66a	      0xba00000000	                              mov edx, 0	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f66f	          0x4889c7	                            mov rdi, rax	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f672	      0xe800000000	                          call 0x400f677	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f677	        0x488945d8	             mov qword [rbp - 0x28], rax	      8699	ldlang.c	FUNCTION_205	FOR_1	CALL_2
0x400f67b	        0x8345d401	               add dword [rbp - 0x2c], 1	      8698	ldlang.c	FUNCTION_205	FOR_1	CALL_1
0x400f67f	        0x837dd401	               cmp dword [rbp - 0x2c], 1	      8698	ldlang.c	FUNCTION_205	FOR_1	CALL_1
0x400f683	            0x76d4	                           jbe 0x400f659	      8698	ldlang.c	FUNCTION_205	FOR_1	CALL_1
0x400f685	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8702	ldlang.c	FUNCTION_205	CALL_3
0x400f689	          0x4889c7	                            mov rdi, rax	      8702	ldlang.c	FUNCTION_205	CALL_3
0x400f68c	      0xe800000000	                          call 0x400f691	      8702	ldlang.c	FUNCTION_205	CALL_3
0x400f691	              0x90	                                     nop	      8703	ldlang.c	FUNCTION_205
0x400f692	        0x488b45f8	                mov rax, qword [rbp - 8]	      8703	ldlang.c	FUNCTION_205
0x400f696	    0x644833042528	                xor rax, qword fs:[0x28]	      8703	ldlang.c	FUNCTION_205
0x400f69f	            0x7405	                            je 0x400f6a6	      8703	ldlang.c	FUNCTION_205
0x400f6a1	      0xe800000000	                          call 0x400f6a6	      8703	ldlang.c	FUNCTION_205
0x400f6a6	              0xc9	                                   leave	      8703	ldlang.c	FUNCTION_205
0x400f6a7	              0xc3	                                     ret	      8703	ldlang.c	FUNCTION_205
ldlang_place_orphan	functions,0:ELSE,1:FOR,0:CALL,14:IF,7:DO,0:WHILE,0:SWITCH,0	133
0x400bb5b	              0x55	                                push rbp	      6471	ldlang.c	FUNCTION_138
0x400bb5c	          0x4889e5	                            mov rbp, rsp	      6471	ldlang.c	FUNCTION_138
0x400bb5f	            0x4154	                                push r12	      6471	ldlang.c	FUNCTION_138
0x400bb61	              0x53	                                push rbx	      6471	ldlang.c	FUNCTION_138
0x400bb62	        0x4883ec30	                           sub rsp, 0x30	      6471	ldlang.c	FUNCTION_138
0x400bb66	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      6471	ldlang.c	FUNCTION_138
0x400bb6a	    0x8b0500000000	            mov eax, dword [0x0400bb70] 	      6472	ldlang.c	FUNCTION_138	IF_1
0x400bb70	          0x83f801	                              cmp eax, 1	      6472	ldlang.c	FUNCTION_138	IF_1
0x400bb73	            0x757b	                           jne 0x400bbf0	      6472	ldlang.c	FUNCTION_138	IF_1
0x400bb75	      0xba01000000	                              mov edx, 1	      6475	ldlang.c	FUNCTION_138	IF_1	CALL_1
0x400bb7a	      0xbe00000000	                              mov esi, 0	      6475	ldlang.c	FUNCTION_138	IF_1	CALL_1
0x400bb7f	      0xbf00000000	                              mov edi, 0	      6475	ldlang.c	FUNCTION_138	IF_1	CALL_1
0x400bb84	      0xe800000000	                          call 0x400bb89	      6475	ldlang.c	FUNCTION_138	IF_1	CALL_1
0x400bb89	        0x488945e0	             mov qword [rbp - 0x20], rax	      6475	ldlang.c	FUNCTION_138	IF_1	CALL_1
0x400bb8d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6477	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bb91	        0x488b4058	            mov rax, qword [rax + 0x58] 	      6477	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bb95	          0x4885c0	                           test rax, rax	      6477	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bb98	            0x7531	                           jne 0x400bbcb	      6477	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bb9a	     0xfb605000000	           movzx eax, byte [0x0400bba1] 	      6478	ldlang.c	FUNCTION_138	IF_1	IF_2	CALL_2
0x400bba1	          0x83e003	                              and eax, 3	      6478	ldlang.c	FUNCTION_138	IF_1	IF_2	CALL_2
0x400bba4	            0x3c02	                               cmp al, 2	      6478	ldlang.c	FUNCTION_138	IF_1	IF_2	CALL_2
0x400bba6	            0x740e	                            je 0x400bbb6	      6478	ldlang.c	FUNCTION_138	IF_1	IF_2	CALL_2
0x400bba8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6479	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bbac	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6479	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bbaf	          0x83e003	                              and eax, 3	      6479	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bbb2	            0x85c0	                           test eax, eax	      6479	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bbb4	            0x7515	                           jne 0x400bbcb	      6479	ldlang.c	FUNCTION_138	IF_1	IF_2
0x400bbb6	      0xbf00000000	                              mov edi, 0	      6480	ldlang.c	FUNCTION_138	IF_1	CALL_3
0x400bbbb	      0xe800000000	                          call 0x400bbc0	      6480	ldlang.c	FUNCTION_138	IF_1	CALL_3
0x400bbc0	          0x4889c2	                            mov rdx, rax	      6480	ldlang.c	FUNCTION_138	IF_1	CALL_3
0x400bbc3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6480	ldlang.c	FUNCTION_138	IF_1	CALL_3
0x400bbc7	        0x48895058	             mov qword [rax + 0x58], rdx	      6480	ldlang.c	FUNCTION_138	IF_1	CALL_3
0x400bbcb	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbcf	        0x488d7810	                   lea rdi, [rax + 0x10]	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbd3	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbd7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbdb	          0x4889d1	                            mov rcx, rdx	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbde	      0xba00000000	                              mov edx, 0	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbe3	          0x4889c6	                            mov rsi, rax	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbe6	      0xe800000000	                          call 0x400bbeb	      6481	ldlang.c	FUNCTION_138	IF_1	CALL_4
0x400bbeb	      0xe94d010000	                           jmp 0x400bd3d	      6512	ldlang.c	FUNCTION_138
0x400bbf0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6486	ldlang.c	FUNCTION_138	ELSE_1
0x400bbf4	          0x488b00	                    mov rax, qword [rax]	      6486	ldlang.c	FUNCTION_138	ELSE_1
0x400bbf7	        0x488945e8	             mov qword [rbp - 0x18], rax	      6486	ldlang.c	FUNCTION_138	ELSE_1
0x400bbfb	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      6487	ldlang.c	FUNCTION_138	ELSE_1
0x400bc02	    0x8b0500000000	            mov eax, dword [0x0400bc08] 	      6489	ldlang.c	FUNCTION_138	ELSE_1	IF_3
0x400bc08	          0x83f803	                              cmp eax, 3	      6489	ldlang.c	FUNCTION_138	ELSE_1	IF_3
0x400bc0b	            0x752f	                           jne 0x400bc3c	      6489	ldlang.c	FUNCTION_138	ELSE_1	IF_3
0x400bc0d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc11	    0x488b98f00000	            mov rbx, qword [rax + 0xf0] 	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc18	      0xbf00000000	                              mov edi, 0	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc1d	      0xe800000000	                          call 0x400bc22	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc22	          0x4889c1	                            mov rcx, rax	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc25	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc29	          0x4889da	                            mov rdx, rbx	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc2c	          0x4889c6	                            mov rsi, rax	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc2f	          0x4889cf	                            mov rdi, rcx	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc32	      0xb800000000	                              mov eax, 0	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc37	      0xe800000000	                          call 0x400bc3c	      6490	ldlang.c	FUNCTION_138	ELSE_1	IF_3	CALL_6
0x400bc3c	    0x8b0500000000	            mov eax, dword [0x0400bc42] 	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc42	            0x85c0	                           test eax, eax	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc44	            0x7515	                           jne 0x400bc5b	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc46	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc4a	      0xbe00000000	                              mov esi, 0	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc4f	          0x4889c7	                            mov rdi, rax	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc52	      0xe8e646ffff	               call sym.unique_section_p	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc57	            0x85c0	                           test eax, eax	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc59	            0x7407	                            je 0x400bc62	      6493	ldlang.c	FUNCTION_138	ELSE_1	IF_4	CALL_7
0x400bc5b	    0xc745d47e0100	          mov dword [rbp - 0x2c], 0x17e 	      6494	ldlang.c	FUNCTION_138	ELSE_1	IF_4
0x400bc62	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc65	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc69	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc6d	          0x4889ce	                            mov rsi, rcx	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc70	          0x4889c7	                            mov rdi, rax	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc73	      0xe800000000	                          call 0x400bc78	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc78	        0x488945d8	             mov qword [rbp - 0x28], rax	      6496	ldlang.c	FUNCTION_138	ELSE_1	CALL_8
0x400bc7c	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      6497	ldlang.c	FUNCTION_138	ELSE_1	IF_5
0x400bc81	            0x7578	                           jne 0x400bcfb	      6497	ldlang.c	FUNCTION_138	ELSE_1	IF_5
0x400bc83	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc86	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc8a	      0xba01000000	                              mov edx, 1	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc8f	            0x89ce	                            mov esi, ecx	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc91	          0x4889c7	                            mov rdi, rax	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc94	      0xe800000000	                          call 0x400bc99	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc99	        0x488945d8	             mov qword [rbp - 0x28], rax	      6499	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_9
0x400bc9d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6500	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bca1	        0x488b4058	            mov rax, qword [rax + 0x58] 	      6500	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bca5	          0x4885c0	                           test rax, rax	      6500	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bca8	            0x7531	                           jne 0x400bcdb	      6500	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcaa	     0xfb605000000	           movzx eax, byte [0x0400bcb1] 	      6501	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6	CALL_10
0x400bcb1	          0x83e003	                              and eax, 3	      6501	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6	CALL_10
0x400bcb4	            0x3c02	                               cmp al, 2	      6501	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6	CALL_10
0x400bcb6	            0x740e	                            je 0x400bcc6	      6501	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6	CALL_10
0x400bcb8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6502	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcbc	          0x8b4020	            mov eax, dword [rax + 0x20] 	      6502	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcbf	          0x83e003	                              and eax, 3	      6502	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcc2	            0x85c0	                           test eax, eax	      6502	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcc4	            0x7515	                           jne 0x400bcdb	      6502	ldlang.c	FUNCTION_138	ELSE_1	IF_5	IF_6
0x400bcc6	      0xbf00000000	                              mov edi, 0	      6503	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_11
0x400bccb	      0xe800000000	                          call 0x400bcd0	      6503	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_11
0x400bcd0	          0x4889c2	                            mov rdx, rax	      6503	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_11
0x400bcd3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6503	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_11
0x400bcd7	        0x48895058	             mov qword [rax + 0x58], rdx	      6503	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_11
0x400bcdb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bcdf	        0x488d7810	                   lea rdi, [rax + 0x10]	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bce3	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bce7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bceb	          0x4889d1	                            mov rcx, rdx	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bcee	      0xba00000000	                              mov edx, 0	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bcf3	          0x4889c6	                            mov rsi, rax	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bcf6	      0xe800000000	                          call 0x400bcfb	      6504	ldlang.c	FUNCTION_138	ELSE_1	IF_5	CALL_12
0x400bcfb	    0x8b0500000000	            mov eax, dword [0x0400bd01] 	      6507	ldlang.c	FUNCTION_138	ELSE_1	IF_7
0x400bd01	          0x83f802	                              cmp eax, 2	      6507	ldlang.c	FUNCTION_138	ELSE_1	IF_7
0x400bd04	            0x7537	                           jne 0x400bd3d	      6507	ldlang.c	FUNCTION_138	ELSE_1	IF_7
0x400bd06	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd0a	        0x4c8b6030	            mov r12, qword [rax + 0x30] 	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd0e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd12	    0x488b98f00000	            mov rbx, qword [rax + 0xf0] 	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd19	      0xbf00000000	                              mov edi, 0	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd1e	      0xe800000000	                          call 0x400bd23	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd23	          0x4889c7	                            mov rdi, rax	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd26	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd2a	          0x4c89e1	                            mov rcx, r12	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd2d	          0x4889da	                            mov rdx, rbx	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd30	          0x4889c6	                            mov rsi, rax	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd33	      0xb800000000	                              mov eax, 0	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd38	      0xe800000000	                          call 0x400bd3d	      6508	ldlang.c	FUNCTION_138	ELSE_1	IF_7	CALL_14
0x400bd3d	              0x90	                                     nop	      6512	ldlang.c	FUNCTION_138
0x400bd3e	        0x4883c430	                           add rsp, 0x30	      6512	ldlang.c	FUNCTION_138
0x400bd42	              0x5b	                                 pop rbx	      6512	ldlang.c	FUNCTION_138
0x400bd43	            0x415c	                                 pop r12	      6512	ldlang.c	FUNCTION_138
0x400bd45	              0x5d	                                 pop rbp	      6512	ldlang.c	FUNCTION_138
0x400bd46	              0xc3	                                     ret	      6512	ldlang.c	FUNCTION_138
print_statements	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	10
0x40081a3	              0x55	                                push rbp	      4606	ldlang.c	FUNCTION_106
0x40081a4	          0x4889e5	                            mov rbp, rsp	      4606	ldlang.c	FUNCTION_106
0x40081a7	    0x488b15000000	            mov rdx, qword [0x040081ae] 	      4607	ldlang.c	FUNCTION_106	CALL_1
0x40081ae	    0x488b05000000	            mov rax, qword [0x040081b5] 	      4607	ldlang.c	FUNCTION_106	CALL_1
0x40081b5	          0x4889d6	                            mov rsi, rdx	      4607	ldlang.c	FUNCTION_106	CALL_1
0x40081b8	          0x4889c7	                            mov rdi, rax	      4607	ldlang.c	FUNCTION_106	CALL_1
0x40081bb	      0xe84efdffff	           call sym.print_statement_list	      4607	ldlang.c	FUNCTION_106	CALL_1
0x40081c0	              0x90	                                     nop	      4608	ldlang.c	FUNCTION_106
0x40081c1	              0x5d	                                 pop rbp	      4608	ldlang.c	FUNCTION_106
0x40081c2	              0xc3	                                     ret	      4608	ldlang.c	FUNCTION_106
print_padding_statement	functions,0:ELSE,0:FOR,1:CALL,6:IF,2:DO,0:WHILE,1:SWITCH,0	73
0x4007a9b	              0x55	                                push rbp	      4380	ldlang.c	FUNCTION_101
0x4007a9c	          0x4889e5	                            mov rbp, rsp	      4380	ldlang.c	FUNCTION_101
0x4007a9f	        0x4883ec30	                           sub rsp, 0x30	      4380	ldlang.c	FUNCTION_101
0x4007aa3	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4380	ldlang.c	FUNCTION_101
0x4007aa7	      0xe8f1dfffff	                       call sym.init_opb	      4384	ldlang.c	FUNCTION_101	CALL_1
0x4007aac	      0xbf00000000	                              mov edi, 0	      4385	ldlang.c	FUNCTION_101	CALL_2
0x4007ab1	      0xb800000000	                              mov eax, 0	      4385	ldlang.c	FUNCTION_101	CALL_2
0x4007ab6	      0xe800000000	                          call 0x4007abb	      4385	ldlang.c	FUNCTION_101	CALL_2
0x4007abb	    0xc745e4070000	               mov dword [rbp - 0x1c], 7	      4387	ldlang.c	FUNCTION_101
0x4007ac2	            0xeb09	                           jmp 0x4007acd	      4388	ldlang.c	FUNCTION_101	WHILE_1
0x4007ac4	      0xe800000000	                          call 0x4007ac9	      4390	ldlang.c	FUNCTION_101	WHILE_1	CALL_3
0x4007ac9	        0x8345e401	               add dword [rbp - 0x1c], 1	      4391	ldlang.c	FUNCTION_101	WHILE_1
0x4007acd	        0x837de40f	            cmp dword [rbp - 0x1c], 0xf 	      4388	ldlang.c	FUNCTION_101	WHILE_1
0x4007ad1	            0x7ef1	                           jle 0x4007ac4	      4388	ldlang.c	FUNCTION_101	WHILE_1
0x4007ad3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4394	ldlang.c	FUNCTION_101
0x4007ad7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4394	ldlang.c	FUNCTION_101
0x4007adb	        0x488945e8	             mov qword [rbp - 0x18], rax	      4394	ldlang.c	FUNCTION_101
0x4007adf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4395	ldlang.c	FUNCTION_101	IF_1
0x4007ae3	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4395	ldlang.c	FUNCTION_101	IF_1
0x4007ae7	          0x4885c0	                           test rax, rax	      4395	ldlang.c	FUNCTION_101	IF_1
0x4007aea	            0x7410	                            je 0x4007afc	      4395	ldlang.c	FUNCTION_101	IF_1
0x4007aec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4396	ldlang.c	FUNCTION_101	IF_1
0x4007af0	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4396	ldlang.c	FUNCTION_101	IF_1
0x4007af4	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4396	ldlang.c	FUNCTION_101	IF_1
0x4007af8	        0x480145e8	            add qword [rbp - 0x18], rax 	      4396	ldlang.c	FUNCTION_101	IF_1
0x4007afc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b00	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b04	    0x8b0500000000	            mov eax, dword [0x04007b0a] 	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b0a	            0x89c1	                            mov ecx, eax	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b0c	          0x48d3ea	                             shr rdx, cl	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b0f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b13	          0x4889c6	                            mov rsi, rax	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b16	      0xbf00000000	                              mov edi, 0	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b1b	      0xb800000000	                              mov eax, 0	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b20	      0xe800000000	                          call 0x4007b25	      4397	ldlang.c	FUNCTION_101	CALL_4
0x4007b25	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4399	ldlang.c	FUNCTION_101	IF_2
0x4007b29	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4399	ldlang.c	FUNCTION_101	IF_2
0x4007b2d	          0x488b00	                    mov rax, qword [rax]	      4399	ldlang.c	FUNCTION_101	IF_2
0x4007b30	          0x4885c0	                           test rax, rax	      4399	ldlang.c	FUNCTION_101	IF_2
0x4007b33	            0x7455	                            je 0x4007b8a	      4399	ldlang.c	FUNCTION_101	IF_2
0x4007b35	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b39	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b3d	        0x4883c008	                              add rax, 8	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b41	        0x488945f8	                mov qword [rbp - 8], rax	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b45	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b49	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b4d	          0x488b00	                    mov rax, qword [rax]	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b50	        0x488945f0	             mov qword [rbp - 0x10], rax	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b54	            0xeb2d	                           jmp 0x4007b83	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b56	        0x488b45f8	                mov rax, qword [rbp - 8]	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b5a	           0xfb600	                   movzx eax, byte [rax]	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b5d	           0xfb6d0	                           movzx edx, al	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b60	    0x488b05000000	            mov rax, qword [0x04007b67] 	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b67	      0xbe00000000	                              mov esi, 0	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b6c	          0x4889c7	                            mov rdi, rax	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b6f	      0xb800000000	                              mov eax, 0	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b74	      0xe800000000	                          call 0x4007b79	      4404	ldlang.c	FUNCTION_101	IF_2	CALL_5
0x4007b79	      0x488345f801	                  add qword [rbp - 8], 1	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b7e	      0x48836df001	               sub qword [rbp - 0x10], 1	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b83	      0x48837df000	               cmp qword [rbp - 0x10], 0	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b88	            0x75cc	                           jne 0x4007b56	      4403	ldlang.c	FUNCTION_101	IF_2	FOR_1
0x4007b8a	      0xe800000000	                          call 0x4007b8f	      4407	ldlang.c	FUNCTION_101	CALL_6
0x4007b8f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4409	ldlang.c	FUNCTION_101
0x4007b93	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      4409	ldlang.c	FUNCTION_101
0x4007b97	    0x8b0500000000	            mov eax, dword [0x04007b9d] 	      4409	ldlang.c	FUNCTION_101
0x4007b9d	            0x89c1	                            mov ecx, eax	      4409	ldlang.c	FUNCTION_101
0x4007b9f	          0x48d3ea	                             shr rdx, cl	      4409	ldlang.c	FUNCTION_101
0x4007ba2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4409	ldlang.c	FUNCTION_101
0x4007ba6	          0x4801d0	                            add rax, rdx	      4409	ldlang.c	FUNCTION_101
0x4007ba9	    0x488905000000	            mov qword [0x04007bb0], rax 	      4409	ldlang.c	FUNCTION_101
0x4007bb0	              0x90	                                     nop	      4410	ldlang.c	FUNCTION_101
0x4007bb1	              0xc9	                                   leave	      4410	ldlang.c	FUNCTION_101
0x4007bb2	              0xc3	                                     ret	      4410	ldlang.c	FUNCTION_101
lang_finalize_version_expr_head	functions,0:ELSE,4:FOR,2:CALL,4:IF,6:DO,1:WHILE,0:SWITCH,0	150
0x400eb09	              0x55	                                push rbp	      8368	ldlang.c	FUNCTION_198
0x400eb0a	          0x4889e5	                            mov rbp, rsp	      8368	ldlang.c	FUNCTION_198
0x400eb0d	        0x4883ec50	                           sub rsp, 0x50	      8368	ldlang.c	FUNCTION_198
0x400eb11	        0x48897db8	             mov qword [rbp - 0x48], rdi	      8368	ldlang.c	FUNCTION_198
0x400eb15	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      8369	ldlang.c	FUNCTION_198
0x400eb1d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb21	          0x488b00	                    mov rax, qword [rax]	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb24	        0x488945c8	             mov qword [rbp - 0x38], rax	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb28	            0xeb40	                           jmp 0x400eb6a	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb2a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8375	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb2e	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8375	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb32	          0x83e001	                              and eax, 1	      8375	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb35	            0x84c0	                             test al, al	      8375	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb37	            0x7405	                            je 0x400eb3e	      8375	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb39	      0x488345c001	               add qword [rbp - 0x40], 1	      8376	ldlang.c	FUNCTION_198	FOR_1	IF_1
0x400eb3e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb42	          0x8b5018	            mov edx, dword [rax + 0x18] 	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb45	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb49	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb4d	          0xc0e803	                               shr al, 3	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb50	          0x83e007	                              and eax, 7	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb53	           0xfb6c0	                           movzx eax, al	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb56	             0x9c2	                             or edx, eax	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb58	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb5c	          0x895018	             mov dword [rax + 0x18], edx	      8377	ldlang.c	FUNCTION_198	FOR_1
0x400eb5f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb63	          0x488b00	                    mov rax, qword [rax]	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb66	        0x488945c8	             mov qword [rbp - 0x38], rax	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb6a	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb6f	            0x75b9	                           jne 0x400eb2a	      8373	ldlang.c	FUNCTION_198	FOR_1
0x400eb71	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      8380	ldlang.c	FUNCTION_198	IF_2
0x400eb76	     0xf84a4010000	                            je 0x400ed20	      8380	ldlang.c	FUNCTION_198	IF_2
0x400eb7c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb80	          0x4801c0	                            add rax, rax	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb83	      0xb900000000	                              mov ecx, 0	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb88	      0xba00000000	                              mov edx, 0	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb8d	      0xbe00000000	                              mov esi, 0	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb92	          0x4889c7	                            mov rdi, rax	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb95	      0xe800000000	                          call 0x400eb9a	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb9a	          0x4889c2	                            mov rdx, rax	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eb9d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eba1	        0x48895008	                mov qword [rax + 8], rdx	      8382	ldlang.c	FUNCTION_198	IF_2	CALL_1
0x400eba5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8384	ldlang.c	FUNCTION_198	IF_2
0x400eba9	        0x488945d0	             mov qword [rbp - 0x30], rax	      8384	ldlang.c	FUNCTION_198	IF_2
0x400ebad	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8385	ldlang.c	FUNCTION_198	IF_2
0x400ebb1	        0x4883c010	                           add rax, 0x10	      8385	ldlang.c	FUNCTION_198	IF_2
0x400ebb5	        0x488945d8	             mov qword [rbp - 0x28], rax	      8385	ldlang.c	FUNCTION_198	IF_2
0x400ebb9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebbd	          0x488b00	                    mov rax, qword [rax]	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebc0	        0x488945c8	             mov qword [rbp - 0x38], rax	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebc4	      0xe930010000	                           jmp 0x400ecf9	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebc9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8388	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebcd	          0x488b00	                    mov rax, qword [rax]	      8388	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebd0	        0x488945f0	             mov qword [rbp - 0x10], rax	      8388	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ebd4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8389	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebd8	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8389	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebdc	          0x83e001	                              and eax, 1	      8389	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebdf	            0x84c0	                             test al, al	      8389	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebe1	            0x7518	                           jne 0x400ebfb	      8389	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebe3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8391	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebe7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      8391	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebeb	          0x488910	                    mov qword [rax], rdx	      8391	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebee	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8392	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebf2	        0x488945d8	             mov qword [rbp - 0x28], rax	      8392	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebf6	      0xe9f6000000	                           jmp 0x400ecf1	      8392	ldlang.c	FUNCTION_198	IF_2	FOR_2	IF_3
0x400ebfb	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ebff	        0x488b4008	                mov rax, qword [rax + 8]	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec03	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec07	      0xba01000000	                              mov edx, 1	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec0c	          0x4889ce	                            mov rsi, rcx	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec0f	          0x4889c7	                            mov rdi, rax	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec12	      0xe800000000	                          call 0x400ec17	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec17	        0x488945f8	                mov qword [rbp - 8], rax	      8396	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	CALL_2
0x400ec1b	        0x488b45f8	                mov rax, qword [rbp - 8]	      8398	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec1f	          0x488b00	                    mov rax, qword [rax]	      8398	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec22	          0x4885c0	                           test rax, rax	      8398	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec25	     0xf84a8000000	                            je 0x400ecd3	      8398	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec2b	        0x488b45f8	                mov rax, qword [rbp - 8]	      8402	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec2f	          0x488b00	                    mov rax, qword [rax]	      8402	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec32	        0x488945e0	             mov qword [rbp - 0x20], rax	      8402	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec36	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      8403	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4
0x400ec3e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec42	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec46	          0xc0e803	                               shr al, 3	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec49	            0x89c2	                            mov edx, eax	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec4b	          0x83e207	                              and edx, 7	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec4e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec52	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec56	          0xc0e803	                               shr al, 3	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec59	          0x83e007	                              and eax, 7	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec5c	            0x38c2	                              cmp dl, al	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec5e	            0x750a	                           jne 0x400ec6a	      8406	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec60	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      8408	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec68	            0xeb39	                           jmp 0x400eca3	      8409	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1	IF_5
0x400ec6a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8411	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1
0x400ec6e	        0x488945e8	             mov qword [rbp - 0x18], rax	      8411	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1
0x400ec72	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8412	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1
0x400ec76	          0x488b00	                    mov rax, qword [rax]	      8412	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1
0x400ec79	        0x488945e0	             mov qword [rbp - 0x20], rax	      8412	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	DO_1
0x400ec7d	      0x48837de000	               cmp qword [rbp - 0x20], 0	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec82	            0x741f	                            je 0x400eca3	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec84	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec88	        0x488b5008	                mov rdx, qword [rax + 8]	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec8c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec90	        0x488b4008	                mov rax, qword [rax + 8]	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec94	          0x4889d6	                            mov rsi, rdx	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec97	          0x4889c7	                            mov rdi, rax	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec9a	      0xe800000000	                          call 0x400ec9f	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400ec9f	            0x85c0	                           test eax, eax	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400eca1	            0x749b	                            je 0x400ec3e	      8414	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	CALL_3
0x400eca3	      0x48837de800	               cmp qword [rbp - 0x18], 0	      8416	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6
0x400eca8	            0x750e	                           jne 0x400ecb8	      8416	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6
0x400ecaa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8422	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6	CALL_4
0x400ecae	          0x4889c7	                            mov rdi, rax	      8422	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6	CALL_4
0x400ecb1	      0xe800000000	                          call 0x400ecb6	      8422	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6	CALL_4
0x400ecb6	            0xeb39	                           jmp 0x400ecf1	      8422	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	IF_6	CALL_4
0x400ecb8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8426	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecbc	          0x488b10	                    mov rdx, qword [rax]	      8426	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecbf	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8426	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecc3	          0x488910	                    mov qword [rax], rdx	      8426	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecc6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      8427	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecca	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      8427	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecce	          0x488910	                    mov qword [rax], rdx	      8427	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecd1	            0xeb1e	                           jmp 0x400ecf1	      8427	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	IF_4	ELSE_2
0x400ecd3	        0x488b45f8	                mov rax, qword [rbp - 8]	      8432	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ecd7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      8432	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ecdb	          0x488910	                    mov qword [rax], rdx	      8432	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ecde	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8433	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ece2	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      8433	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ece6	          0x488910	                    mov qword [rax], rdx	      8433	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ece9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      8434	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400eced	        0x488945d0	             mov qword [rbp - 0x30], rax	      8434	ldlang.c	FUNCTION_198	IF_2	FOR_2	ELSE_1	ELSE_3
0x400ecf1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ecf5	        0x488945c8	             mov qword [rbp - 0x38], rax	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ecf9	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ecfe	     0xf85c5feffff	                           jne 0x400ebc9	      8386	ldlang.c	FUNCTION_198	IF_2	FOR_2
0x400ed04	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      8438	ldlang.c	FUNCTION_198	IF_2
0x400ed08	    0x48c700000000	                      mov qword [rax], 0	      8438	ldlang.c	FUNCTION_198	IF_2
0x400ed0f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8439	ldlang.c	FUNCTION_198	IF_2
0x400ed13	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      8439	ldlang.c	FUNCTION_198	IF_2
0x400ed17	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      8439	ldlang.c	FUNCTION_198	IF_2
0x400ed1b	          0x488910	                    mov qword [rax], rdx	      8439	ldlang.c	FUNCTION_198	IF_2
0x400ed1e	            0xeb0f	                           jmp 0x400ed2f	      8443	ldlang.c	FUNCTION_198	ELSE_4
0x400ed20	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8442	ldlang.c	FUNCTION_198	ELSE_4
0x400ed24	          0x488b10	                    mov rdx, qword [rax]	      8442	ldlang.c	FUNCTION_198	ELSE_4
0x400ed27	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      8442	ldlang.c	FUNCTION_198	ELSE_4
0x400ed2b	        0x48895010	             mov qword [rax + 0x10], rdx	      8442	ldlang.c	FUNCTION_198	ELSE_4
0x400ed2f	              0x90	                                     nop	      8443	ldlang.c	FUNCTION_198	ELSE_4
0x400ed30	              0xc9	                                   leave	      8443	ldlang.c	FUNCTION_198	ELSE_4
0x400ed31	              0xc3	                                     ret	      8443	ldlang.c	FUNCTION_198	ELSE_4
wild_sort	functions,0:ELSE,4:FOR,1:CALL,3:IF,14:DO,0:WHILE,0:SWITCH,0	149
0x40044cf	              0x55	                                push rbp	      2477	ldlang.c	FUNCTION_60
0x40044d0	          0x4889e5	                            mov rbp, rsp	      2477	ldlang.c	FUNCTION_60
0x40044d3	        0x4883ec50	                           sub rsp, 0x50	      2477	ldlang.c	FUNCTION_60
0x40044d7	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      2477	ldlang.c	FUNCTION_60
0x40044db	        0x488975c0	             mov qword [rbp - 0x40], rsi	      2477	ldlang.c	FUNCTION_60
0x40044df	        0x488955b8	             mov qword [rbp - 0x48], rdx	      2477	ldlang.c	FUNCTION_60
0x40044e3	        0x48894db0	             mov qword [rbp - 0x50], rcx	      2477	ldlang.c	FUNCTION_60
0x40044e7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2480	ldlang.c	FUNCTION_60	IF_1
0x40044eb	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2480	ldlang.c	FUNCTION_60	IF_1
0x40044ee	            0x85c0	                           test eax, eax	      2480	ldlang.c	FUNCTION_60	IF_1
0x40044f0	            0x751c	                           jne 0x400450e	      2480	ldlang.c	FUNCTION_60	IF_1
0x40044f2	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2481	ldlang.c	FUNCTION_60	IF_1
0x40044f7	            0x740b	                            je 0x4004504	      2481	ldlang.c	FUNCTION_60	IF_1
0x40044f9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2481	ldlang.c	FUNCTION_60	IF_1
0x40044fd	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2481	ldlang.c	FUNCTION_60	IF_1
0x4004500	            0x85c0	                           test eax, eax	      2481	ldlang.c	FUNCTION_60	IF_1
0x4004502	            0x750a	                           jne 0x400450e	      2481	ldlang.c	FUNCTION_60	IF_1
0x4004504	      0xb800000000	                              mov eax, 0	      2482	ldlang.c	FUNCTION_60	IF_1
0x4004509	      0xe9da010000	                           jmp 0x40046e8	      2482	ldlang.c	FUNCTION_60	IF_1
0x400450e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2484	ldlang.c	FUNCTION_60	FOR_1
0x4004512	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2484	ldlang.c	FUNCTION_60	FOR_1
0x4004516	        0x488945e0	             mov qword [rbp - 0x20], rax	      2484	ldlang.c	FUNCTION_60	FOR_1
0x400451a	      0xe9b1010000	                           jmp 0x40046d0	      2484	ldlang.c	FUNCTION_60	FOR_1
0x400451f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2488	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x4004523	          0x8b4008	                mov eax, dword [rax + 8]	      2488	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x4004526	          0x83f805	                              cmp eax, 5	      2488	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x4004529	     0xf858f010000	                           jne 0x40046be	      2488	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x400452f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2490	ldlang.c	FUNCTION_60	FOR_1
0x4004533	        0x488945f8	                mov qword [rbp - 8], rax	      2490	ldlang.c	FUNCTION_60	FOR_1
0x4004537	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2495	ldlang.c	FUNCTION_60	FOR_1	IF_3
0x400453b	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2495	ldlang.c	FUNCTION_60	FOR_1	IF_3
0x400453e	            0x85c0	                           test eax, eax	      2495	ldlang.c	FUNCTION_60	FOR_1	IF_3
0x4004540	     0xf8437010000	                            je 0x400467d	      2495	ldlang.c	FUNCTION_60	FOR_1	IF_3
0x4004546	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2506	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400454a	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2506	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400454e	          0x4885c0	                           test rax, rax	      2506	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004551	            0x7433	                            je 0x4004586	      2506	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004553	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2507	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004557	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2507	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400455b	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      2507	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004562	          0x4885c0	                           test rax, rax	      2507	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004565	            0x741f	                            je 0x4004586	      2507	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004567	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2509	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400456b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2509	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400456f	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      2509	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004576	          0x488b00	                    mov rax, qword [rax]	      2509	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004579	        0x488945e8	             mov qword [rbp - 0x18], rax	      2509	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x400457d	    0xc745d4010000	               mov dword [rbp - 0x2c], 1	      2510	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004584	            0xeb13	                           jmp 0x4004599	      2510	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_4
0x4004586	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2514	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_1
0x400458a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2514	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_1
0x400458e	        0x488945e8	             mov qword [rbp - 0x18], rax	      2514	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_1
0x4004592	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      2515	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_1
0x4004599	        0x488b45f8	                mov rax, qword [rbp - 8]	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x400459d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045a1	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045a8	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045af	          0x4885c0	                           test rax, rax	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045b2	            0x7426	                            je 0x40045da	      2518	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045b4	        0x488b45f8	                mov rax, qword [rbp - 8]	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045b8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045bc	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045c3	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045ca	          0x488b00	                    mov rax, qword [rax]	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045cd	        0x488945f0	             mov qword [rbp - 0x10], rax	      2520	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045d1	    0xc745d8010000	               mov dword [rbp - 0x28], 1	      2521	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045d8	            0xeb1d	                           jmp 0x40045f7	      2521	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_5
0x40045da	        0x488b45f8	                mov rax, qword [rbp - 8]	      2525	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045de	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2525	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045e2	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2525	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045e9	          0x488b00	                    mov rax, qword [rax]	      2525	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045ec	        0x488945f0	             mov qword [rbp - 0x10], rax	      2525	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045f0	    0xc745d8000000	               mov dword [rbp - 0x28], 0	      2526	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_2
0x40045f7	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x40045fb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x40045ff	          0x4889d6	                            mov rsi, rdx	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x4004602	          0x4889c7	                            mov rdi, rax	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x4004605	      0xe800000000	                          call 0x400460a	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x400460a	          0x8945dc	             mov dword [rbp - 0x24], eax	      2529	ldlang.c	FUNCTION_60	FOR_1	IF_3	CALL_1
0x400460d	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2530	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_6
0x4004611	     0xf8faa000000	                            jg 0x40046c1	      2530	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_6
0x4004617	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2532	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_3	IF_7
0x400461b	     0xf88bc000000	                            js 0x40046dd	      2532	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_3	IF_7
0x4004621	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2535	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8
0x4004625	            0x7506	                           jne 0x400462d	      2535	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8
0x4004627	        0x837dd800	               cmp dword [rbp - 0x28], 0	      2535	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8
0x400462b	            0x7450	                            je 0x400467d	      2535	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8
0x400462d	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2537	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_9
0x4004631	            0x740c	                            je 0x400463f	      2537	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_9
0x4004633	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2538	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_9
0x4004637	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2538	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_9
0x400463b	        0x488945e8	             mov qword [rbp - 0x18], rax	      2538	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_9
0x400463f	        0x837dd800	               cmp dword [rbp - 0x28], 0	      2539	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x4004643	            0x7416	                            je 0x400465b	      2539	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x4004645	        0x488b45f8	                mov rax, qword [rbp - 8]	      2540	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x4004649	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2540	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x400464d	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      2540	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x4004654	          0x488b00	                    mov rax, qword [rax]	      2540	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x4004657	        0x488945f0	             mov qword [rbp - 0x10], rax	      2540	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_10
0x400465b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x400465f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x4004663	          0x4889d6	                            mov rsi, rdx	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x4004666	          0x4889c7	                            mov rdi, rax	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x4004669	      0xe800000000	                          call 0x400466e	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x400466e	          0x8945dc	             mov dword [rbp - 0x24], eax	      2542	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	CALL_2
0x4004671	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2543	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_11
0x4004675	            0x7f4d	                            jg 0x40046c4	      2543	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_11
0x4004677	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2545	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	ELSE_4	IF_12
0x400467b	            0x7863	                            js 0x40046e0	      2545	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	ELSE_4	IF_12
0x400467d	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      2553	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004682	            0x7441	                            je 0x40046c5	      2553	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004684	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2554	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004688	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2554	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x400468b	            0x85c0	                           test eax, eax	      2554	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x400468d	            0x7436	                            je 0x40046c5	      2554	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x400468f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2555	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004693	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2555	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004696	          0x83f805	                              cmp eax, 5	      2555	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x4004699	            0x742a	                            je 0x40046c5	      2555	ldlang.c	FUNCTION_60	FOR_1	IF_13
0x400469b	        0x488b45f8	                mov rax, qword [rbp - 8]	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x400469f	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046a3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046a7	          0x8b4018	            mov eax, dword [rax + 0x18] 	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046aa	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046ae	          0x4889ce	                            mov rsi, rcx	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046b1	            0x89c7	                            mov edi, eax	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046b3	      0xe8a9c2ffff	                call sym.compare_section	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046b8	            0x85c0	                           test eax, eax	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046ba	            0x7827	                            js 0x40046e3	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046bc	            0xeb07	                           jmp 0x40046c5	      2556	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14	CALL_3
0x40046be	              0x90	                                     nop	      2489	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x40046bf	            0xeb04	                           jmp 0x40046c5	      2489	ldlang.c	FUNCTION_60	FOR_1	IF_2
0x40046c1	              0x90	                                     nop	      2531	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_6
0x40046c2	            0xeb01	                           jmp 0x40046c5	      2531	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_6
0x40046c4	              0x90	                                     nop	      2544	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	IF_11
0x40046c5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046c9	          0x488b00	                    mov rax, qword [rax]	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046cc	        0x488945e0	             mov qword [rbp - 0x20], rax	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046d0	      0x48837de000	               cmp qword [rbp - 0x20], 0	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046d5	     0xf8544feffff	                           jne 0x400451f	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046db	            0xeb07	                           jmp 0x40046e4	      2484	ldlang.c	FUNCTION_60	FOR_1
0x40046dd	              0x90	                                     nop	      2533	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_3	IF_7
0x40046de	            0xeb04	                           jmp 0x40046e4	      2533	ldlang.c	FUNCTION_60	FOR_1	IF_3	ELSE_3	IF_7
0x40046e0	              0x90	                                     nop	      2546	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	ELSE_4	IF_12
0x40046e1	            0xeb01	                           jmp 0x40046e4	      2546	ldlang.c	FUNCTION_60	FOR_1	IF_3	IF_8	ELSE_4	IF_12
0x40046e3	              0x90	                                     nop	      2557	ldlang.c	FUNCTION_60	FOR_1	IF_13	IF_14
0x40046e4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2560	ldlang.c	FUNCTION_60
0x40046e8	              0xc9	                                   leave	      2561	ldlang.c	FUNCTION_60
0x40046e9	              0xc3	                                     ret	      2561	ldlang.c	FUNCTION_60
lang_size_sections	functions,0:ELSE,0:FOR,0:CALL,4:IF,4:DO,0:WHILE,0:SWITCH,0	47
0x400a4a8	              0x55	                                push rbp	      5710	ldlang.c	FUNCTION_121
0x400a4a9	          0x4889e5	                            mov rbp, rsp	      5710	ldlang.c	FUNCTION_121
0x400a4ac	        0x4883ec20	                           sub rsp, 0x20	      5710	ldlang.c	FUNCTION_121
0x400a4b0	        0x48897de8	             mov qword [rbp - 0x18], rdi	      5710	ldlang.c	FUNCTION_121
0x400a4b4	          0x8975e4	             mov dword [rbp - 0x1c], esi	      5710	ldlang.c	FUNCTION_121
0x400a4b7	    0xc70500000000	               mov dword [0x0400a4c1], 2	      5711	ldlang.c	FUNCTION_121
0x400a4c1	    0xc70500000000	               mov dword [0x0400a4cb], 0	      5712	ldlang.c	FUNCTION_121
0x400a4cb	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      5714	ldlang.c	FUNCTION_121	CALL_1
0x400a4ce	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5714	ldlang.c	FUNCTION_121	CALL_1
0x400a4d2	            0x89d6	                            mov esi, edx	      5714	ldlang.c	FUNCTION_121	CALL_1
0x400a4d4	          0x4889c7	                            mov rdi, rax	      5714	ldlang.c	FUNCTION_121	CALL_1
0x400a4d7	      0xe800000000	                          call 0x400a4dc	      5714	ldlang.c	FUNCTION_121	CALL_1
0x400a4dc	    0x8b0500000000	            mov eax, dword [0x0400a4e2] 	      5716	ldlang.c	FUNCTION_121	IF_1
0x400a4e2	          0x83f803	                              cmp eax, 3	      5716	ldlang.c	FUNCTION_121	IF_1
0x400a4e5	            0x740a	                            je 0x400a4f1	      5716	ldlang.c	FUNCTION_121	IF_1
0x400a4e7	    0xc70500000000	               mov dword [0x0400a4f1], 6	      5717	ldlang.c	FUNCTION_121	IF_1
0x400a4f1	    0x8b0500000000	            mov eax, dword [0x0400a4f7] 	      5719	ldlang.c	FUNCTION_121	IF_2
0x400a4f7	          0x83f803	                              cmp eax, 3	      5719	ldlang.c	FUNCTION_121	IF_2
0x400a4fa	            0x7566	                           jne 0x400a562	      5719	ldlang.c	FUNCTION_121	IF_2
0x400a4fc	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a4ff	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a503	            0x89d6	                            mov esi, edx	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a505	          0x4889c7	                            mov rdi, rax	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a508	      0xe8d1feffff	        call sym.lang_size_relro_segment	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a50d	          0x8945fc	                mov dword [rbp - 4], eax	      5721	ldlang.c	FUNCTION_121	IF_2
0x400a510	        0x837dfc00	                  cmp dword [rbp - 4], 0	      5724	ldlang.c	FUNCTION_121	IF_2	IF_3
0x400a514	            0x7416	                            je 0x400a52c	      5724	ldlang.c	FUNCTION_121	IF_2	IF_3
0x400a516	      0xe800000000	                          call 0x400a51b	      5726	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_3
0x400a51b	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      5727	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_4
0x400a51e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5727	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_4
0x400a522	            0x89d6	                            mov esi, edx	      5727	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_4
0x400a524	          0x4889c7	                            mov rdi, rax	      5727	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_4
0x400a527	      0xe800000000	                          call 0x400a52c	      5727	ldlang.c	FUNCTION_121	IF_2	IF_3	CALL_4
0x400a52c	     0xfb605000000	           movzx eax, byte [0x0400a533] 	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a533	          0x83e010	                           and eax, 0x10	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a536	            0x84c0	                             test al, al	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a538	            0x7428	                            je 0x400a562	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a53a	    0x488b05000000	            mov rax, qword [0x0400a541] 	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a541	          0x4885c0	                           test rax, rax	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a544	            0x741c	                            je 0x400a562	      5730	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a546	    0x488b05000000	            mov rax, qword [0x0400a54d] 	      5732	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a54d	    0x488905000000	            mov qword [0x0400a554], rax 	      5732	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a554	    0x488b05000000	            mov rax, qword [0x0400a55b] 	      5733	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a55b	    0x488905000000	            mov qword [0x0400a562], rax 	      5733	ldlang.c	FUNCTION_121	IF_2	IF_4
0x400a562	              0x90	                                     nop	      5736	ldlang.c	FUNCTION_121
0x400a563	              0xc9	                                   leave	      5736	ldlang.c	FUNCTION_121
0x400a564	              0xc3	                                     ret	      5736	ldlang.c	FUNCTION_121
lang_map_flags	functions,0:ELSE,0:FOR,0:CALL,5:IF,5:DO,0:WHILE,0:SWITCH,0	42
0x4003670	              0x55	                                push rbp	      2026	ldlang.c	FUNCTION_52
0x4003671	          0x4889e5	                            mov rbp, rsp	      2026	ldlang.c	FUNCTION_52
0x4003674	        0x4883ec10	                           sub rsp, 0x10	      2026	ldlang.c	FUNCTION_52
0x4003678	          0x897dfc	                mov dword [rbp - 4], edi	      2026	ldlang.c	FUNCTION_52
0x400367b	          0x8b45fc	                mov eax, dword [rbp - 4]	      2027	ldlang.c	FUNCTION_52	IF_1
0x400367e	          0x83e001	                              and eax, 1	      2027	ldlang.c	FUNCTION_52	IF_1
0x4003681	            0x85c0	                           test eax, eax	      2027	ldlang.c	FUNCTION_52	IF_1
0x4003683	            0x740f	                            je 0x4003694	      2027	ldlang.c	FUNCTION_52	IF_1
0x4003685	      0xbf00000000	                              mov edi, 0	      2028	ldlang.c	FUNCTION_52	CALL_1
0x400368a	      0xb800000000	                              mov eax, 0	      2028	ldlang.c	FUNCTION_52	CALL_1
0x400368f	      0xe800000000	                          call 0x4003694	      2028	ldlang.c	FUNCTION_52	CALL_1
0x4003694	          0x8b45fc	                mov eax, dword [rbp - 4]	      2030	ldlang.c	FUNCTION_52	IF_2
0x4003697	          0x83e010	                           and eax, 0x10	      2030	ldlang.c	FUNCTION_52	IF_2
0x400369a	            0x85c0	                           test eax, eax	      2030	ldlang.c	FUNCTION_52	IF_2
0x400369c	            0x740f	                            je 0x40036ad	      2030	ldlang.c	FUNCTION_52	IF_2
0x400369e	      0xbf00000000	                              mov edi, 0	      2031	ldlang.c	FUNCTION_52	CALL_2
0x40036a3	      0xb800000000	                              mov eax, 0	      2031	ldlang.c	FUNCTION_52	CALL_2
0x40036a8	      0xe800000000	                          call 0x40036ad	      2031	ldlang.c	FUNCTION_52	CALL_2
0x40036ad	          0x8b45fc	                mov eax, dword [rbp - 4]	      2033	ldlang.c	FUNCTION_52	IF_3
0x40036b0	          0x83e008	                              and eax, 8	      2033	ldlang.c	FUNCTION_52	IF_3
0x40036b3	            0x85c0	                           test eax, eax	      2033	ldlang.c	FUNCTION_52	IF_3
0x40036b5	            0x740f	                            je 0x40036c6	      2033	ldlang.c	FUNCTION_52	IF_3
0x40036b7	      0xbf00000000	                              mov edi, 0	      2034	ldlang.c	FUNCTION_52	CALL_3
0x40036bc	      0xb800000000	                              mov eax, 0	      2034	ldlang.c	FUNCTION_52	CALL_3
0x40036c1	      0xe800000000	                          call 0x40036c6	      2034	ldlang.c	FUNCTION_52	CALL_3
0x40036c6	          0x8b45fc	                mov eax, dword [rbp - 4]	      2036	ldlang.c	FUNCTION_52	IF_4
0x40036c9	          0x83e020	                           and eax, 0x20	      2036	ldlang.c	FUNCTION_52	IF_4
0x40036cc	            0x85c0	                           test eax, eax	      2036	ldlang.c	FUNCTION_52	IF_4
0x40036ce	            0x740f	                            je 0x40036df	      2036	ldlang.c	FUNCTION_52	IF_4
0x40036d0	      0xbf00000000	                              mov edi, 0	      2037	ldlang.c	FUNCTION_52	CALL_4
0x40036d5	      0xb800000000	                              mov eax, 0	      2037	ldlang.c	FUNCTION_52	CALL_4
0x40036da	      0xe800000000	                          call 0x40036df	      2037	ldlang.c	FUNCTION_52	CALL_4
0x40036df	          0x8b45fc	                mov eax, dword [rbp - 4]	      2039	ldlang.c	FUNCTION_52	IF_5
0x40036e2	          0x83e002	                              and eax, 2	      2039	ldlang.c	FUNCTION_52	IF_5
0x40036e5	            0x85c0	                           test eax, eax	      2039	ldlang.c	FUNCTION_52	IF_5
0x40036e7	            0x740f	                            je 0x40036f8	      2039	ldlang.c	FUNCTION_52	IF_5
0x40036e9	      0xbf00000000	                              mov edi, 0	      2040	ldlang.c	FUNCTION_52	CALL_5
0x40036ee	      0xb800000000	                              mov eax, 0	      2040	ldlang.c	FUNCTION_52	CALL_5
0x40036f3	      0xe800000000	                          call 0x40036f8	      2040	ldlang.c	FUNCTION_52	CALL_5
0x40036f8	              0x90	                                     nop	      2041	ldlang.c	FUNCTION_52
0x40036f9	              0xc9	                                   leave	      2041	ldlang.c	FUNCTION_52
0x40036fa	              0xc3	                                     ret	      2041	ldlang.c	FUNCTION_52
lang_list_init	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	11
0x40019a5	              0x55	                                push rbp	      1008	ldlang.c	FUNCTION_30
0x40019a6	          0x4889e5	                            mov rbp, rsp	      1008	ldlang.c	FUNCTION_30
0x40019a9	        0x48897df8	                mov qword [rbp - 8], rdi	      1008	ldlang.c	FUNCTION_30
0x40019ad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1009	ldlang.c	FUNCTION_30
0x40019b1	    0x48c700000000	                      mov qword [rax], 0	      1009	ldlang.c	FUNCTION_30
0x40019b8	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1010	ldlang.c	FUNCTION_30
0x40019bc	        0x488b45f8	                mov rax, qword [rbp - 8]	      1010	ldlang.c	FUNCTION_30
0x40019c0	        0x48895008	                mov qword [rax + 8], rdx	      1010	ldlang.c	FUNCTION_30
0x40019c4	              0x90	                                     nop	      1011	ldlang.c	FUNCTION_30
0x40019c5	              0x5d	                                 pop rbp	      1011	ldlang.c	FUNCTION_30
0x40019c6	              0xc3	                                     ret	      1011	ldlang.c	FUNCTION_30
lang_leave_output_section_statement	functions,0:ELSE,0:FOR,0:CALL,2:IF,0:DO,0:WHILE,0:SWITCH,0	38
0x400d73f	              0x55	                                push rbp	      7656	ldlang.c	FUNCTION_178
0x400d740	          0x4889e5	                            mov rbp, rsp	      7656	ldlang.c	FUNCTION_178
0x400d743	        0x4883ec20	                           sub rsp, 0x20	      7656	ldlang.c	FUNCTION_178
0x400d747	        0x48897df8	                mov qword [rbp - 8], rdi	      7656	ldlang.c	FUNCTION_178
0x400d74b	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7656	ldlang.c	FUNCTION_178
0x400d74f	        0x488955e8	             mov qword [rbp - 0x18], rdx	      7656	ldlang.c	FUNCTION_178
0x400d753	        0x48894de0	             mov qword [rbp - 0x20], rcx	      7656	ldlang.c	FUNCTION_178
0x400d757	    0x488b05000000	            mov rax, qword [0x0400d75e] 	      7661	ldlang.c	FUNCTION_178
0x400d75e	        0x488b4058	            mov rax, qword [rax + 0x58] 	      7661	ldlang.c	FUNCTION_178
0x400d762	          0x4885c0	                           test rax, rax	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d765	           0xf95c0	                                setne al	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d768	        0x440fb6c0	                           movzx r8d, al	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d76c	    0x488b05000000	            mov rax, qword [0x0400d773] 	      7660	ldlang.c	FUNCTION_178
0x400d773	        0x488b4060	            mov rax, qword [rax + 0x60] 	      7660	ldlang.c	FUNCTION_178
0x400d777	          0x4885c0	                           test rax, rax	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d77a	           0xf95c0	                                setne al	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d77d	           0xfb6c8	                           movzx ecx, al	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d780	    0x488b05000000	            mov rax, qword [0x0400d787] 	      7658	ldlang.c	FUNCTION_178
0x400d787	        0x488d7048	                   lea rsi, [rax + 0x48]	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d78b	    0x488b05000000	            mov rax, qword [0x0400d792] 	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d792	        0x488d7840	                   lea rdi, [rax + 0x40]	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d796	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d79a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d79e	          0x4589c1	                            mov r9d, r8d	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d7a1	          0x4189c8	                            mov r8d, ecx	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d7a4	          0x4889d1	                            mov rcx, rdx	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d7a7	          0x4889c2	                            mov rdx, rax	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d7aa	      0xe8dcfeffff	               call sym.lang_get_regions	      7657	ldlang.c	FUNCTION_178	CALL_1
0x400d7af	    0x488b05000000	            mov rax, qword [0x0400d7b6] 	      7663	ldlang.c	FUNCTION_178
0x400d7b6	        0x488b55f8	                mov rdx, qword [rbp - 8]	      7663	ldlang.c	FUNCTION_178
0x400d7ba	        0x48895050	             mov qword [rax + 0x50], rdx	      7663	ldlang.c	FUNCTION_178
0x400d7be	    0x488b05000000	            mov rax, qword [0x0400d7c5] 	      7664	ldlang.c	FUNCTION_178
0x400d7c5	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7664	ldlang.c	FUNCTION_178
0x400d7c9	        0x48895070	             mov qword [rax + 0x70], rdx	      7664	ldlang.c	FUNCTION_178
0x400d7cd	      0xe800000000	                          call 0x400d7d2	      7665	ldlang.c	FUNCTION_178	CALL_2
0x400d7d2	              0x90	                                     nop	      7666	ldlang.c	FUNCTION_178
0x400d7d3	              0xc9	                                   leave	      7666	ldlang.c	FUNCTION_178
0x400d7d4	              0xc3	                                     ret	      7666	ldlang.c	FUNCTION_178
open_output	functions,0:ELSE,3:FOR,0:CALL,19:IF,11:DO,0:WHILE,0:SWITCH,0	143
0x400565e	              0x55	                                push rbp	      3114	ldlang.c	FUNCTION_75
0x400565f	          0x4889e5	                            mov rbp, rsp	      3114	ldlang.c	FUNCTION_75
0x4005662	              0x53	                                push rbx	      3114	ldlang.c	FUNCTION_75
0x4005663	        0x4883ec28	                           sub rsp, 0x28	      3114	ldlang.c	FUNCTION_75
0x4005667	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3114	ldlang.c	FUNCTION_75
0x400566b	      0xe800000000	                          call 0x4005670	      3115	ldlang.c	FUNCTION_75	CALL_1
0x4005670	    0x488905000000	            mov qword [0x04005677], rax 	      3115	ldlang.c	FUNCTION_75	CALL_1
0x4005677	    0x8b0500000000	            mov eax, dword [0x0400567d] 	      3119	ldlang.c	FUNCTION_75	IF_1
0x400567d	            0x85c0	                           test eax, eax	      3119	ldlang.c	FUNCTION_75	IF_1
0x400567f	     0xf84cf000000	                            je 0x4005754	      3119	ldlang.c	FUNCTION_75	IF_1
0x4005685	    0x488b05000000	            mov rax, qword [0x0400568c] 	      3123	ldlang.c	FUNCTION_75	IF_1	CALL_2
0x400568c	          0x4889c6	                            mov rsi, rax	      3122	ldlang.c	FUNCTION_75	IF_1
0x400568f	      0xbf00000000	                              mov edi, 0	      3122	ldlang.c	FUNCTION_75	IF_1
0x4005694	      0xe800000000	                          call 0x4005699	      3122	ldlang.c	FUNCTION_75	IF_1
0x4005699	        0x488945e8	             mov qword [rbp - 0x18], rax	      3122	ldlang.c	FUNCTION_75	IF_1
0x400569d	      0x48837de800	               cmp qword [rbp - 0x18], 0	      3126	ldlang.c	FUNCTION_75	IF_1	IF_2
0x40056a2	     0xf84ac000000	                            je 0x4005754	      3126	ldlang.c	FUNCTION_75	IF_1	IF_2
0x40056a8	    0x8b0500000000	            mov eax, dword [0x040056ae] 	      3130	ldlang.c	FUNCTION_75	IF_1	IF_2	IF_3
0x40056ae	          0x83f801	                              cmp eax, 1	      3130	ldlang.c	FUNCTION_75	IF_1	IF_2	IF_3
0x40056b1	            0x7509	                           jne 0x40056bc	      3130	ldlang.c	FUNCTION_75	IF_1	IF_2	IF_3
0x40056b3	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      3131	ldlang.c	FUNCTION_75	IF_1	IF_2	IF_3
0x40056ba	            0xeb07	                           jmp 0x40056c3	      3131	ldlang.c	FUNCTION_75	IF_1	IF_2	IF_3
0x40056bc	    0xc745e4010000	               mov dword [rbp - 0x1c], 1	      3133	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1
0x40056c3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3139	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4
0x40056c7	          0x8b400c	              mov eax, dword [rax + 0xc]	      3139	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4
0x40056ca	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3139	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4
0x40056cd	     0xf8481000000	                            je 0x4005754	      3139	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4
0x40056d3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3143	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056d7	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      3143	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056de	          0x4885c0	                           test rax, rax	      3143	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056e1	            0x742a	                            je 0x400570d	      3143	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056e3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3144	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056e7	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      3144	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056ee	          0x8b400c	              mov eax, dword [rax + 0xc]	      3144	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056f1	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3144	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056f4	            0x7517	                           jne 0x400570d	      3144	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3145	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x40056fa	    0x488b80600300	           mov rax, qword [rax + 0x360] 	      3145	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x4005701	          0x488b00	                    mov rax, qword [rax]	      3145	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x4005704	    0x488905000000	            mov qword [0x0400570b], rax 	      3145	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x400570b	            0xeb47	                           jmp 0x4005754	      3145	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	IF_5
0x400570d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3151	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	CALL_3
0x4005711	          0x4889c6	                            mov rsi, rax	      3151	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	CALL_3
0x4005714	      0xbf00000000	                              mov edi, 0	      3151	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	CALL_3
0x4005719	      0xe800000000	                          call 0x400571e	      3151	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	CALL_3
0x400571e	    0x488b05000000	            mov rax, qword [0x04005725] 	      3156	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6
0x4005725	          0x4885c0	                           test rax, rax	      3156	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6
0x4005728	            0x7519	                           jne 0x4005743	      3156	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6
0x400572a	      0xbf00000000	                              mov edi, 0	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x400572f	      0xe800000000	                          call 0x4005734	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x4005734	          0x4889c7	                            mov rdi, rax	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x4005737	      0xb800000000	                              mov eax, 0	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x400573c	      0xe800000000	                          call 0x4005741	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x4005741	            0xeb11	                           jmp 0x4005754	      3157	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	IF_6	CALL_5
0x4005743	    0x488b05000000	            mov rax, qword [0x0400574a] 	      3160	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	ELSE_3
0x400574a	          0x488b00	                    mov rax, qword [rax]	      3160	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	ELSE_3
0x400574d	    0x488905000000	            mov qword [0x04005754], rax 	      3160	ldlang.c	FUNCTION_75	IF_1	IF_2	ELSE_1	IF_4	ELSE_2	ELSE_3
0x4005754	    0x488b15000000	            mov rdx, qword [0x0400575b] 	      3166	ldlang.c	FUNCTION_75	CALL_6
0x400575b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3166	ldlang.c	FUNCTION_75	CALL_6
0x400575f	          0x4889d6	                            mov rsi, rdx	      3166	ldlang.c	FUNCTION_75	CALL_6
0x4005762	          0x4889c7	                            mov rdi, rax	      3166	ldlang.c	FUNCTION_75	CALL_6
0x4005765	      0xe800000000	                          call 0x400576a	      3166	ldlang.c	FUNCTION_75	CALL_6
0x400576a	    0x488905000000	            mov qword [0x04005771], rax 	      3166	ldlang.c	FUNCTION_75	CALL_6
0x4005771	    0x488b05000000	            mov rax, qword [0x04005778] 	      3168	ldlang.c	FUNCTION_75	IF_7
0x4005778	          0x4885c0	                           test rax, rax	      3168	ldlang.c	FUNCTION_75	IF_7
0x400577b	            0x754c	                           jne 0x40057c9	      3168	ldlang.c	FUNCTION_75	IF_7
0x400577d	      0xe800000000	                          call 0x4005782	      3170	ldlang.c	FUNCTION_75	IF_7	IF_8	CALL_7
0x4005782	          0x83f802	                              cmp eax, 2	      3170	ldlang.c	FUNCTION_75	IF_7	IF_8	CALL_7
0x4005785	            0x7521	                           jne 0x40057a8	      3170	ldlang.c	FUNCTION_75	IF_7	IF_8	CALL_7
0x4005787	    0x488b1d000000	            mov rbx, qword [0x0400578e] 	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x400578e	      0xbf00000000	                              mov edi, 0	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x4005793	      0xe800000000	                          call 0x4005798	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x4005798	          0x4889de	                            mov rsi, rbx	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x400579b	          0x4889c7	                            mov rdi, rax	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x400579e	      0xb800000000	                              mov eax, 0	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x40057a3	      0xe800000000	                          call 0x40057a8	      3171	ldlang.c	FUNCTION_75	IF_7	CALL_9
0x40057a8	      0xbf00000000	                              mov edi, 0	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057ad	      0xe800000000	                          call 0x40057b2	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057b2	          0x4889c2	                            mov rdx, rax	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057b5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057b9	          0x4889c6	                            mov rsi, rax	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057bc	          0x4889d7	                            mov rdi, rdx	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057bf	      0xb800000000	                              mov eax, 0	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057c4	      0xe800000000	                          call 0x40057c9	      3173	ldlang.c	FUNCTION_75	IF_7	CALL_11
0x40057c9	    0xc70500000000	               mov dword [0x040057d3], 1	      3176	ldlang.c	FUNCTION_75
0x40057d3	    0x488b05000000	            mov rax, qword [0x040057da] 	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057da	      0xbe01000000	                              mov esi, 1	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057df	          0x4889c7	                            mov rdi, rax	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057e2	      0xe800000000	                          call 0x40057e7	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057e7	            0x85c0	                           test eax, eax	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057e9	            0x7521	                           jne 0x400580c	      3178	ldlang.c	FUNCTION_75	IF_9	CALL_12
0x40057eb	      0xbf00000000	                              mov edi, 0	      3179	ldlang.c	FUNCTION_75	CALL_14
0x40057f0	      0xe800000000	                          call 0x40057f5	      3179	ldlang.c	FUNCTION_75	CALL_14
0x40057f5	          0x4889c2	                            mov rdx, rax	      3179	ldlang.c	FUNCTION_75	CALL_14
0x40057f8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3179	ldlang.c	FUNCTION_75	CALL_14
0x40057fc	          0x4889c6	                            mov rsi, rax	      3179	ldlang.c	FUNCTION_75	CALL_14
0x40057ff	          0x4889d7	                            mov rdi, rdx	      3179	ldlang.c	FUNCTION_75	CALL_14
0x4005802	      0xb800000000	                              mov eax, 0	      3179	ldlang.c	FUNCTION_75	CALL_14
0x4005807	      0xe800000000	                          call 0x400580c	      3179	ldlang.c	FUNCTION_75	CALL_14
0x400580c	    0x488b05000000	            mov rax, qword [0x04005813] 	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005813	        0x488b4008	                mov rax, qword [rax + 8]	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005817	    0x488b80900200	           mov rax, qword [rax + 0x290] 	      3180	ldlang.c	FUNCTION_75	IF_10
0x400581e	    0x488b15000000	            mov rdx, qword [0x04005825] 	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005825	    0x8b3500000000	            mov esi, dword [0x0400582b] 	      3180	ldlang.c	FUNCTION_75	IF_10
0x400582b	    0x488b0d000000	            mov rcx, qword [0x04005832] 	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005832	          0x4889cf	                            mov rdi, rcx	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005835	            0xffd0	                                call rax	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005837	            0x85c0	                           test eax, eax	      3180	ldlang.c	FUNCTION_75	IF_10
0x4005839	            0x7521	                           jne 0x400585c	      3180	ldlang.c	FUNCTION_75	IF_10
0x400583b	      0xbf00000000	                              mov edi, 0	      3183	ldlang.c	FUNCTION_75	CALL_16
0x4005840	      0xe800000000	                          call 0x4005845	      3183	ldlang.c	FUNCTION_75	CALL_16
0x4005845	          0x4889c2	                            mov rdx, rax	      3183	ldlang.c	FUNCTION_75	CALL_16
0x4005848	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3183	ldlang.c	FUNCTION_75	CALL_16
0x400584c	          0x4889c6	                            mov rsi, rax	      3183	ldlang.c	FUNCTION_75	CALL_16
0x400584f	          0x4889d7	                            mov rdi, rdx	      3183	ldlang.c	FUNCTION_75	CALL_16
0x4005852	      0xb800000000	                              mov eax, 0	      3183	ldlang.c	FUNCTION_75	CALL_16
0x4005857	      0xe800000000	                          call 0x400585c	      3183	ldlang.c	FUNCTION_75	CALL_16
0x400585c	    0x488b05000000	            mov rax, qword [0x04005863] 	      3185	ldlang.c	FUNCTION_75
0x4005863	        0x488b4008	                mov rax, qword [rax + 8]	      3185	ldlang.c	FUNCTION_75
0x4005867	    0x488b80b80200	           mov rax, qword [rax + 0x2b8] 	      3185	ldlang.c	FUNCTION_75
0x400586e	    0x488b15000000	            mov rdx, qword [0x04005875] 	      3185	ldlang.c	FUNCTION_75
0x4005875	          0x4889d7	                            mov rdi, rdx	      3185	ldlang.c	FUNCTION_75
0x4005878	            0xffd0	                                call rax	      3185	ldlang.c	FUNCTION_75
0x400587a	    0x488905000000	            mov qword [0x04005881], rax 	      3185	ldlang.c	FUNCTION_75
0x4005881	    0x488b05000000	            mov rax, qword [0x04005888] 	      3186	ldlang.c	FUNCTION_75	IF_11
0x4005888	          0x4885c0	                           test rax, rax	      3186	ldlang.c	FUNCTION_75	IF_11
0x400588b	            0x7517	                           jne 0x40058a4	      3186	ldlang.c	FUNCTION_75	IF_11
0x400588d	      0xbf00000000	                              mov edi, 0	      3187	ldlang.c	FUNCTION_75	CALL_18
0x4005892	      0xe800000000	                          call 0x4005897	      3187	ldlang.c	FUNCTION_75	CALL_18
0x4005897	          0x4889c7	                            mov rdi, rax	      3187	ldlang.c	FUNCTION_75	CALL_18
0x400589a	      0xb800000000	                              mov eax, 0	      3187	ldlang.c	FUNCTION_75	CALL_18
0x400589f	      0xe800000000	                          call 0x40058a4	      3187	ldlang.c	FUNCTION_75	CALL_18
0x40058a4	    0x8b0500000000	            mov eax, dword [0x040058aa] 	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058aa	            0x89c2	                            mov edx, eax	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058ac	    0x488b05000000	            mov rax, qword [0x040058b3] 	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058b3	            0x89d6	                            mov esi, edx	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058b5	          0x4889c7	                            mov rdi, rax	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058b8	      0xe800000000	                          call 0x40058bd	      3189	ldlang.c	FUNCTION_75	CALL_19
0x40058bd	              0x90	                                     nop	      3190	ldlang.c	FUNCTION_75
0x40058be	        0x4883c428	                           add rsp, 0x28	      3190	ldlang.c	FUNCTION_75
0x40058c2	              0x5b	                                 pop rbx	      3190	ldlang.c	FUNCTION_75
0x40058c3	              0x5d	                                 pop rbp	      3190	ldlang.c	FUNCTION_75
0x40058c4	              0xc3	                                     ret	      3190	ldlang.c	FUNCTION_75
lang_enter_group	functions,0:ELSE,0:FOR,0:CALL,2:IF,0:DO,0:WHILE,0:SWITCH,0	20
0x400d8bf	              0x55	                                push rbp	      7714	ldlang.c	FUNCTION_182
0x400d8c0	          0x4889e5	                            mov rbp, rsp	      7714	ldlang.c	FUNCTION_182
0x400d8c3	        0x4883ec10	                           sub rsp, 0x10	      7714	ldlang.c	FUNCTION_182
0x400d8c7	    0x488b05000000	            mov rax, qword [0x0400d8ce] 	      7717	ldlang.c	FUNCTION_182
0x400d8ce	          0x4889c2	                            mov rdx, rax	      7717	ldlang.c	FUNCTION_182
0x400d8d1	      0xbe20000000	                           mov esi, 0x20	      7717	ldlang.c	FUNCTION_182
0x400d8d6	      0xbf0d000000	                            mov edi, 0xd	      7717	ldlang.c	FUNCTION_182
0x400d8db	      0xe88f41ffff	                  call sym.new_statement	      7717	ldlang.c	FUNCTION_182
0x400d8e0	        0x488945f8	                mov qword [rbp - 8], rax	      7717	ldlang.c	FUNCTION_182
0x400d8e4	        0x488b45f8	                mov rax, qword [rbp - 8]	      7718	ldlang.c	FUNCTION_182	CALL_1
0x400d8e8	        0x4883c010	                           add rax, 0x10	      7718	ldlang.c	FUNCTION_182	CALL_1
0x400d8ec	          0x4889c7	                            mov rdi, rax	      7718	ldlang.c	FUNCTION_182	CALL_1
0x400d8ef	      0xe800000000	                          call 0x400d8f4	      7718	ldlang.c	FUNCTION_182	CALL_1
0x400d8f4	        0x488b45f8	                mov rax, qword [rbp - 8]	      7719	ldlang.c	FUNCTION_182	CALL_2
0x400d8f8	        0x4883c010	                           add rax, 0x10	      7719	ldlang.c	FUNCTION_182	CALL_2
0x400d8fc	          0x4889c7	                            mov rdi, rax	      7719	ldlang.c	FUNCTION_182	CALL_2
0x400d8ff	      0xe800000000	                          call 0x400d904	      7719	ldlang.c	FUNCTION_182	CALL_2
0x400d904	              0x90	                                     nop	      7720	ldlang.c	FUNCTION_182
0x400d905	              0xc9	                                   leave	      7720	ldlang.c	FUNCTION_182
0x400d906	              0xc3	                                     ret	      7720	ldlang.c	FUNCTION_182
lang_do_assignments	functions,0:ELSE,0:FOR,0:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	30
0x400aa8f	              0x55	                                push rbp	      5915	ldlang.c	FUNCTION_123
0x400aa90	          0x4889e5	                            mov rbp, rsp	      5915	ldlang.c	FUNCTION_123
0x400aa93	        0x4883ec20	                           sub rsp, 0x20	      5915	ldlang.c	FUNCTION_123
0x400aa97	          0x897dec	             mov dword [rbp - 0x14], edi	      5915	ldlang.c	FUNCTION_123
0x400aa9a	    0x64488b042528	                mov rax, qword fs:[0x28]	      5915	ldlang.c	FUNCTION_123
0x400aaa3	        0x488945f8	                mov qword [rbp - 8], rax	      5915	ldlang.c	FUNCTION_123
0x400aaa7	            0x31c0	                            xor eax, eax	      5915	ldlang.c	FUNCTION_123
0x400aaa9	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      5916	ldlang.c	FUNCTION_123
0x400aab0	    0x48c705000000	               mov qword [0x0400aabb], 0	      5918	ldlang.c	FUNCTION_123
0x400aabb	    0xc70500000000	               mov dword [0x0400aac5], 0	      5919	ldlang.c	FUNCTION_123
0x400aac5	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      5920	ldlang.c	FUNCTION_123
0x400aac8	    0x890500000000	            mov dword [0x0400aace], eax 	      5920	ldlang.c	FUNCTION_123
0x400aace	    0x8b0500000000	            mov eax, dword [0x0400aad4] 	      5921	ldlang.c	FUNCTION_123
0x400aad4	          0x83c001	                              add eax, 1	      5921	ldlang.c	FUNCTION_123
0x400aad7	    0x890500000000	            mov dword [0x0400aadd], eax 	      5921	ldlang.c	FUNCTION_123
0x400aadd	    0x488b35000000	            mov rsi, qword [0x0400aae4] 	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aae4	    0x488b05000000	            mov rax, qword [0x0400aaeb] 	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aaeb	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aaef	          0x4989d0	                             mov r8, rdx	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aaf2	      0xb900000000	                              mov ecx, 0	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aaf7	      0xba00000000	                              mov edx, 0	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aafc	          0x4889c7	                            mov rdi, rax	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400aaff	      0xe861faffff	          call sym.lang_do_assignments_1	      5922	ldlang.c	FUNCTION_123	CALL_1
0x400ab04	              0x90	                                     nop	      5924	ldlang.c	FUNCTION_123
0x400ab05	        0x488b45f8	                mov rax, qword [rbp - 8]	      5924	ldlang.c	FUNCTION_123
0x400ab09	    0x644833042528	                xor rax, qword fs:[0x28]	      5924	ldlang.c	FUNCTION_123
0x400ab12	            0x7405	                            je 0x400ab19	      5924	ldlang.c	FUNCTION_123
0x400ab14	      0xe800000000	                          call 0x400ab19	      5924	ldlang.c	FUNCTION_123
0x400ab19	              0xc9	                                   leave	      5924	ldlang.c	FUNCTION_123
0x400ab1a	              0xc3	                                     ret	      5924	ldlang.c	FUNCTION_123
lang_get_output_target	functions,0:ELSE,0:FOR,0:CALL,1:IF,3:DO,0:WHILE,0:SWITCH,0	26
0x40055fa	              0x55	                                push rbp	      3089	ldlang.c	FUNCTION_74
0x40055fb	          0x4889e5	                            mov rbp, rsp	      3089	ldlang.c	FUNCTION_74
0x40055fe	        0x4883ec10	                           sub rsp, 0x10	      3089	ldlang.c	FUNCTION_74
0x4005602	    0x488b05000000	            mov rax, qword [0x04005609] 	      3093	ldlang.c	FUNCTION_74	IF_1
0x4005609	          0x4885c0	                           test rax, rax	      3093	ldlang.c	FUNCTION_74	IF_1
0x400560c	            0x7409	                            je 0x4005617	      3093	ldlang.c	FUNCTION_74	IF_1
0x400560e	    0x488b05000000	            mov rax, qword [0x04005615] 	      3094	ldlang.c	FUNCTION_74	IF_1
0x4005615	            0xeb45	                           jmp 0x400565c	      3094	ldlang.c	FUNCTION_74	IF_1
0x4005617	    0x488b15000000	            mov rdx, qword [0x0400561e] 	      3098	ldlang.c	FUNCTION_74	IF_2
0x400561e	    0x488b05000000	            mov rax, qword [0x04005625] 	      3098	ldlang.c	FUNCTION_74	IF_2
0x4005625	          0x4839c2	                            cmp rdx, rax	      3098	ldlang.c	FUNCTION_74	IF_2
0x4005628	            0x7415	                            je 0x400563f	      3098	ldlang.c	FUNCTION_74	IF_2
0x400562a	    0x488b05000000	            mov rax, qword [0x04005631] 	      3098	ldlang.c	FUNCTION_74	IF_2
0x4005631	          0x4885c0	                           test rax, rax	      3098	ldlang.c	FUNCTION_74	IF_2
0x4005634	            0x7409	                            je 0x400563f	      3098	ldlang.c	FUNCTION_74	IF_2
0x4005636	    0x488b05000000	            mov rax, qword [0x0400563d] 	      3099	ldlang.c	FUNCTION_74	IF_2
0x400563d	            0xeb1d	                           jmp 0x400565c	      3099	ldlang.c	FUNCTION_74	IF_2
0x400563f	      0xe816ffffff	         call sym.get_first_input_target	      3102	ldlang.c	FUNCTION_74	CALL_1
0x4005644	        0x488945f8	                mov qword [rbp - 8], rax	      3102	ldlang.c	FUNCTION_74	CALL_1
0x4005648	      0x48837df800	                  cmp qword [rbp - 8], 0	      3103	ldlang.c	FUNCTION_74	IF_3
0x400564d	            0x7406	                            je 0x4005655	      3103	ldlang.c	FUNCTION_74	IF_3
0x400564f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3104	ldlang.c	FUNCTION_74	IF_3
0x4005653	            0xeb07	                           jmp 0x400565c	      3104	ldlang.c	FUNCTION_74	IF_3
0x4005655	    0x488b05000000	            mov rax, qword [0x0400565c] 	      3107	ldlang.c	FUNCTION_74
0x400565c	              0xc9	                                   leave	      3108	ldlang.c	FUNCTION_74
0x400565d	              0xc3	                                     ret	      3108	ldlang.c	FUNCTION_74
lang_add_gc_name	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	21
0x400cb18	              0x55	                                push rbp	      7099	ldlang.c	FUNCTION_160
0x400cb19	          0x4889e5	                            mov rbp, rsp	      7099	ldlang.c	FUNCTION_160
0x400cb1c	        0x4883ec20	                           sub rsp, 0x20	      7099	ldlang.c	FUNCTION_160
0x400cb20	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7099	ldlang.c	FUNCTION_160
0x400cb24	      0x48837de800	               cmp qword [rbp - 0x18], 0	      7102	ldlang.c	FUNCTION_160	IF_1
0x400cb29	            0x7435	                            je 0x400cb60	      7102	ldlang.c	FUNCTION_160	IF_1
0x400cb2b	      0xbf10000000	                           mov edi, 0x10	      7105	ldlang.c	FUNCTION_160	CALL_1
0x400cb30	      0xe800000000	                          call 0x400cb35	      7105	ldlang.c	FUNCTION_160	CALL_1
0x400cb35	        0x488945f8	                mov qword [rbp - 8], rax	      7105	ldlang.c	FUNCTION_160	CALL_1
0x400cb39	    0x488b15000000	            mov rdx, qword [0x0400cb40] 	      7107	ldlang.c	FUNCTION_160
0x400cb40	        0x488b45f8	                mov rax, qword [rbp - 8]	      7107	ldlang.c	FUNCTION_160
0x400cb44	          0x488910	                    mov qword [rax], rdx	      7107	ldlang.c	FUNCTION_160
0x400cb47	        0x488b45f8	                mov rax, qword [rbp - 8]	      7108	ldlang.c	FUNCTION_160
0x400cb4b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7108	ldlang.c	FUNCTION_160
0x400cb4f	        0x48895008	                mov qword [rax + 8], rdx	      7108	ldlang.c	FUNCTION_160
0x400cb53	        0x488b45f8	                mov rax, qword [rbp - 8]	      7109	ldlang.c	FUNCTION_160
0x400cb57	    0x488905000000	            mov qword [0x0400cb5e], rax 	      7109	ldlang.c	FUNCTION_160
0x400cb5e	            0xeb01	                           jmp 0x400cb61	      7109	ldlang.c	FUNCTION_160
0x400cb60	              0x90	                                     nop	      7103	ldlang.c	FUNCTION_160	IF_1
0x400cb61	              0xc9	                                   leave	      7110	ldlang.c	FUNCTION_160
0x400cb62	              0xc3	                                     ret	      7110	ldlang.c	FUNCTION_160
lang_init_start_stop	functions,0:ELSE,0:FOR,3:CALL,8:IF,2:DO,0:WHILE,0:SWITCH,0	107
0x400ae43	              0x55	                                push rbp	      6035	ldlang.c	FUNCTION_126
0x400ae44	          0x4889e5	                            mov rbp, rsp	      6035	ldlang.c	FUNCTION_126
0x400ae47	        0x4883ec30	                           sub rsp, 0x30	      6035	ldlang.c	FUNCTION_126
0x400ae4b	    0x488b05000000	            mov rax, qword [0x0400ae52] 	      6038	ldlang.c	FUNCTION_126
0x400ae52	        0x488b4008	                mov rax, qword [rax + 8]	      6038	ldlang.c	FUNCTION_126
0x400ae56	         0xfb6401c	           movzx eax, byte [rax + 0x1c] 	      6038	ldlang.c	FUNCTION_126
0x400ae5a	          0x8845d7	               mov byte [rbp - 0x29], al	      6038	ldlang.c	FUNCTION_126
0x400ae5d	    0x488b05000000	            mov rax, qword [0x0400ae64] 	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400ae64	        0x488945d8	             mov qword [rbp - 0x28], rax	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400ae68	      0xe95c010000	                           jmp 0x400afc9	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400ae6d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae71	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae78	        0x488945e0	             mov qword [rbp - 0x20], rax	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae7c	      0xe92e010000	                           jmp 0x400afaf	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae81	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6044	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae85	          0x488b00	                    mov rax, qword [rax]	      6044	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae88	        0x488945f0	             mov qword [rbp - 0x10], rax	      6044	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400ae8c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400ae90	        0x488945e8	             mov qword [rbp - 0x18], rax	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400ae94	            0xeb30	                           jmp 0x400aec6	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400ae96	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400ae9a	           0xfb600	                   movzx eax, byte [rax]	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400ae9d	           0xfb6c0	                           movzx eax, al	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aea0	            0x4898	                                    cdqe	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aea2	     0xfb784000000	             movzx eax, word [rax + rax]	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aeaa	           0xfb7c0	                           movzx eax, ax	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aead	      0x258c000000	                           and eax, 0x8c	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aeb2	            0x85c0	                           test eax, eax	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aeb4	            0x750b	                           jne 0x400aec1	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aeb6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aeba	           0xfb600	                   movzx eax, byte [rax]	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aebd	            0x3c5f	                            cmp al, 0x5f	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aebf	            0x7512	                           jne 0x400aed3	      6047	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1	CALL_1
0x400aec1	      0x488345e801	               add qword [rbp - 0x18], 1	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aec6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aeca	           0xfb600	                   movzx eax, byte [rax]	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aecd	            0x84c0	                             test al, al	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aecf	            0x75c5	                           jne 0x400ae96	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aed1	            0xeb01	                           jmp 0x400aed4	      6046	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3
0x400aed3	              0x90	                                     nop	      6048	ldlang.c	FUNCTION_126	FOR_1	FOR_2	FOR_3	IF_1
0x400aed4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6049	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400aed8	           0xfb600	                   movzx eax, byte [rax]	      6049	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400aedb	            0x84c0	                             test al, al	      6049	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400aedd	     0xf85c0000000	                           jne 0x400afa3	      6049	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400aee3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aee7	          0x4889c7	                            mov rdi, rax	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aeea	      0xe800000000	                          call 0x400aeef	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aeef	        0x4883c00a	                            add rax, 0xa	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aef3	          0x4889c7	                            mov rdi, rax	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aef6	      0xe800000000	                          call 0x400aefb	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aefb	        0x488945f8	                mov qword [rbp - 8], rax	      6051	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_3
0x400aeff	        0x488b45f8	                mov rax, qword [rbp - 8]	      6053	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af03	         0xfb655d7	            movzx edx, byte [rbp - 0x29]	      6053	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af07	            0x8810	                      mov byte [rax], dl	      6053	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af09	        0x807dd700	                cmp byte [rbp - 0x29], 0	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af0d	           0xf95c0	                                setne al	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af10	           0xfb6d0	                           movzx edx, al	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af13	        0x488b45f8	                mov rax, qword [rbp - 8]	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af17	        0x488d0c02	                    lea rcx, [rdx + rax]	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af1b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af1f	          0x4889c2	                            mov rdx, rax	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af22	      0xbe00000000	                              mov esi, 0	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af27	          0x4889cf	                            mov rdi, rcx	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af2a	      0xb800000000	                              mov eax, 0	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af2f	      0xe800000000	                          call 0x400af34	      6054	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_4
0x400af34	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      6055	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_5
0x400af38	        0x488b45f8	                mov rax, qword [rbp - 8]	      6055	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_5
0x400af3c	          0x4889d6	                            mov rsi, rdx	      6055	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_5
0x400af3f	          0x4889c7	                            mov rdi, rax	      6055	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_5
0x400af42	      0xe842feffff	         call sym.lang_define_start_stop	      6055	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_5
0x400af47	        0x488b45f8	                mov rax, qword [rbp - 8]	      6057	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af4b	        0x488d5001	                      lea rdx, [rax + 1]	      6057	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af4f	         0xfb645d7	            movzx eax, byte [rbp - 0x29]	      6057	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af53	            0x8802	                      mov byte [rdx], al	      6057	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2
0x400af55	        0x807dd700	                cmp byte [rbp - 0x29], 0	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af59	            0x7407	                            je 0x400af62	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af5b	      0xba02000000	                              mov edx, 2	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af60	            0xeb05	                           jmp 0x400af67	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af62	      0xba01000000	                              mov edx, 1	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af67	        0x488b45f8	                mov rax, qword [rbp - 8]	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af6b	          0x4801d0	                            add rax, rdx	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af6e	      0xba06000000	                              mov edx, 6	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af73	      0xbe00000000	                              mov esi, 0	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af78	          0x4889c7	                            mov rdi, rax	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af7b	      0xe800000000	                          call 0x400af80	      6058	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_6
0x400af80	        0x488b45f8	                mov rax, qword [rbp - 8]	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af84	        0x488d5001	                      lea rdx, [rax + 1]	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af88	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af8c	          0x4889c6	                            mov rsi, rax	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af8f	          0x4889d7	                            mov rdi, rdx	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af92	      0xe8f2fdffff	         call sym.lang_define_start_stop	      6059	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_7
0x400af97	        0x488b45f8	                mov rax, qword [rbp - 8]	      6061	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_8
0x400af9b	          0x4889c7	                            mov rdi, rax	      6061	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_8
0x400af9e	      0xe800000000	                          call 0x400afa3	      6061	ldlang.c	FUNCTION_126	FOR_1	FOR_2	IF_2	CALL_8
0x400afa3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400afa7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400afab	        0x488945e0	             mov qword [rbp - 0x20], rax	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400afaf	      0x48837de000	               cmp qword [rbp - 0x20], 0	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400afb4	     0xf85c7feffff	                           jne 0x400ae81	      6041	ldlang.c	FUNCTION_126	FOR_1	FOR_2
0x400afba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400afbe	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400afc5	        0x488945d8	             mov qword [rbp - 0x28], rax	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400afc9	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400afce	     0xf8599feffff	                           jne 0x400ae6d	      6040	ldlang.c	FUNCTION_126	FOR_1
0x400afd4	              0x90	                                     nop	      6064	ldlang.c	FUNCTION_126
0x400afd5	              0xc9	                                   leave	      6064	ldlang.c	FUNCTION_126
0x400afd6	              0xc3	                                     ret	      6064	ldlang.c	FUNCTION_126
hash_entry_addr_cmp	functions,0:ELSE,2:FOR,0:CALL,0:IF,2:DO,0:WHILE,0:SWITCH,0	29
0x4007242	              0x55	                                push rbp	      4151	ldlang.c	FUNCTION_94
0x4007243	          0x4889e5	                            mov rbp, rsp	      4151	ldlang.c	FUNCTION_94
0x4007246	        0x48897de8	             mov qword [rbp - 0x18], rdi	      4151	ldlang.c	FUNCTION_94
0x400724a	        0x488975e0	             mov qword [rbp - 0x20], rsi	      4151	ldlang.c	FUNCTION_94
0x400724e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4152	ldlang.c	FUNCTION_94
0x4007252	          0x488b00	                    mov rax, qword [rax]	      4152	ldlang.c	FUNCTION_94
0x4007255	        0x488945f0	             mov qword [rbp - 0x10], rax	      4152	ldlang.c	FUNCTION_94
0x4007259	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4153	ldlang.c	FUNCTION_94
0x400725d	          0x488b00	                    mov rax, qword [rax]	      4153	ldlang.c	FUNCTION_94
0x4007260	        0x488945f8	                mov qword [rbp - 8], rax	      4153	ldlang.c	FUNCTION_94
0x4007264	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4155	ldlang.c	FUNCTION_94	IF_1
0x4007268	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4155	ldlang.c	FUNCTION_94	IF_1
0x400726c	        0x488b45f8	                mov rax, qword [rbp - 8]	      4155	ldlang.c	FUNCTION_94	IF_1
0x4007270	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4155	ldlang.c	FUNCTION_94	IF_1
0x4007274	          0x4839c2	                            cmp rdx, rax	      4155	ldlang.c	FUNCTION_94	IF_1
0x4007277	            0x7307	                           jae 0x4007280	      4155	ldlang.c	FUNCTION_94	IF_1
0x4007279	      0xb8ffffffff	                     mov eax, 0xffffffff	      4156	ldlang.c	FUNCTION_94	IF_1
0x400727e	            0xeb21	                           jmp 0x40072a1	      4156	ldlang.c	FUNCTION_94	IF_1
0x4007280	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x4007284	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x4007288	        0x488b45f8	                mov rax, qword [rbp - 8]	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x400728c	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x4007290	          0x4839c2	                            cmp rdx, rax	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x4007293	            0x7607	                           jbe 0x400729c	      4157	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x4007295	      0xb801000000	                              mov eax, 1	      4158	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x400729a	            0xeb05	                           jmp 0x40072a1	      4158	ldlang.c	FUNCTION_94	ELSE_1	IF_2
0x400729c	      0xb800000000	                              mov eax, 0	      4160	ldlang.c	FUNCTION_94	ELSE_2
0x40072a1	              0x5d	                                 pop rbp	      4161	ldlang.c	FUNCTION_94	ELSE_2
0x40072a2	              0xc3	                                     ret	      4161	ldlang.c	FUNCTION_94	ELSE_2
lang_enter_output_section_statement	functions,0:ELSE,1:FOR,0:CALL,8:IF,3:DO,0:WHILE,0:SWITCH,0	89
0x400c19b	              0x55	                                push rbp	      6703	ldlang.c	FUNCTION_146
0x400c19c	          0x4889e5	                            mov rbp, rsp	      6703	ldlang.c	FUNCTION_146
0x400c19f	        0x4883ec40	                           sub rsp, 0x40	      6703	ldlang.c	FUNCTION_146
0x400c1a3	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6703	ldlang.c	FUNCTION_146
0x400c1a7	        0x488975e0	             mov qword [rbp - 0x20], rsi	      6703	ldlang.c	FUNCTION_146
0x400c1ab	          0x8955dc	             mov dword [rbp - 0x24], edx	      6703	ldlang.c	FUNCTION_146
0x400c1ae	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      6703	ldlang.c	FUNCTION_146
0x400c1b2	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      6703	ldlang.c	FUNCTION_146
0x400c1b6	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      6703	ldlang.c	FUNCTION_146
0x400c1ba	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1be	      0xba01000000	                              mov edx, 1	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1c3	          0x8b7510	            mov esi, dword [rbp + 0x10] 	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1c6	          0x4889c7	                            mov rdi, rax	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1c9	      0xe800000000	                          call 0x400c1ce	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1ce	        0x488945f8	                mov qword [rbp - 8], rax	      6706	ldlang.c	FUNCTION_146	CALL_1
0x400c1d2	        0x488b45f8	                mov rax, qword [rbp - 8]	      6708	ldlang.c	FUNCTION_146
0x400c1d6	    0x488905000000	            mov qword [0x0400c1dd], rax 	      6708	ldlang.c	FUNCTION_146
0x400c1dd	        0x488b45f8	                mov rax, qword [rbp - 8]	      6710	ldlang.c	FUNCTION_146	IF_1
0x400c1e1	        0x488b4058	            mov rax, qword [rax + 0x58] 	      6710	ldlang.c	FUNCTION_146	IF_1
0x400c1e5	          0x4885c0	                           test rax, rax	      6710	ldlang.c	FUNCTION_146	IF_1
0x400c1e8	            0x750c	                           jne 0x400c1f6	      6710	ldlang.c	FUNCTION_146	IF_1
0x400c1ea	        0x488b45f8	                mov rax, qword [rbp - 8]	      6712	ldlang.c	FUNCTION_146	IF_1
0x400c1ee	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      6712	ldlang.c	FUNCTION_146	IF_1
0x400c1f2	        0x48895058	             mov qword [rax + 0x58], rdx	      6712	ldlang.c	FUNCTION_146	IF_1
0x400c1f6	        0x488b45f8	                mov rax, qword [rbp - 8]	      6714	ldlang.c	FUNCTION_146
0x400c1fa	          0x8b55dc	             mov edx, dword [rbp - 0x24]	      6714	ldlang.c	FUNCTION_146
0x400c1fd	    0x89908c000000	             mov dword [rax + 0x8c], edx	      6714	ldlang.c	FUNCTION_146
0x400c203	        0x837ddc02	               cmp dword [rbp - 0x24], 2	      6715	ldlang.c	FUNCTION_146	IF_2
0x400c207	            0x7410	                            je 0x400c219	      6715	ldlang.c	FUNCTION_146	IF_2
0x400c209	        0x488b45f8	                mov rax, qword [rbp - 8]	      6716	ldlang.c	FUNCTION_146	IF_2
0x400c20d	    0xc78088000000	               mov dword [rax + 0x88], 0	      6716	ldlang.c	FUNCTION_146	IF_2
0x400c217	            0xeb0e	                           jmp 0x400c227	      6716	ldlang.c	FUNCTION_146	IF_2
0x400c219	        0x488b45f8	                mov rax, qword [rbp - 8]	      6718	ldlang.c	FUNCTION_146	ELSE_1
0x400c21d	    0xc78088000000	          mov dword [rax + 0x88], 0x200 	      6718	ldlang.c	FUNCTION_146	ELSE_1
0x400c227	        0x488b45f8	                mov rax, qword [rbp - 8]	      6719	ldlang.c	FUNCTION_146
0x400c22b	    0xc74078010000	               mov dword [rax + 0x78], 1	      6719	ldlang.c	FUNCTION_146
0x400c232	        0x488b45f8	                mov rax, qword [rbp - 8]	      6722	ldlang.c	FUNCTION_146	CALL_2
0x400c236	        0x4883c010	                           add rax, 0x10	      6722	ldlang.c	FUNCTION_146	CALL_2
0x400c23a	          0x4889c7	                            mov rdi, rax	      6722	ldlang.c	FUNCTION_146	CALL_2
0x400c23d	      0xe800000000	                          call 0x400c242	      6722	ldlang.c	FUNCTION_146	CALL_2
0x400c242	    0x817d18800100	          cmp dword [rbp + 0x18], 0x180 	      6724	ldlang.c	FUNCTION_146
0x400c249	           0xf94c2	                                 sete dl	      6724	ldlang.c	FUNCTION_146
0x400c24c	        0x488b45f8	                mov rax, qword [rbp - 8]	      6724	ldlang.c	FUNCTION_146
0x400c250	          0x83e201	                              and edx, 1	      6724	ldlang.c	FUNCTION_146
0x400c253	            0x89d1	                            mov ecx, edx	      6724	ldlang.c	FUNCTION_146
0x400c255	          0xc1e106	                              shl ecx, 6	      6724	ldlang.c	FUNCTION_146
0x400c258	     0xfb690900000	           movzx edx, byte [rax + 0x90] 	      6724	ldlang.c	FUNCTION_146
0x400c25f	          0x83e2bf	                     and edx, 0xffffffbf	      6724	ldlang.c	FUNCTION_146
0x400c262	             0x9ca	                             or edx, ecx	      6724	ldlang.c	FUNCTION_146
0x400c264	    0x889090000000	               mov byte [rax + 0x90], dl	      6724	ldlang.c	FUNCTION_146
0x400c26a	        0x488b45f8	                mov rax, qword [rbp - 8]	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c26e	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c275	          0x83e040	                           and eax, 0x40	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c278	            0x84c0	                             test al, al	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c27a	            0x7423	                            je 0x400c29f	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c27c	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c281	            0x741c	                            je 0x400c29f	      6725	ldlang.c	FUNCTION_146	IF_3
0x400c283	      0xbf00000000	                              mov edi, 0	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c288	      0xe800000000	                          call 0x400c28d	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c28d	      0xbe00000000	                              mov esi, 0	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c292	          0x4889c7	                            mov rdi, rax	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c295	      0xb800000000	                              mov eax, 0	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c29a	      0xe800000000	                          call 0x400c29f	      6726	ldlang.c	FUNCTION_146	IF_3	CALL_4
0x400c29f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2a3	      0xba00000000	                              mov edx, 0	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2a8	      0xbeffffffff	                     mov esi, 0xffffffff	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2ad	          0x4889c7	                            mov rdi, rax	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2b0	      0xe800000000	                          call 0x400c2b5	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2b5	            0x89c7	                            mov edi, eax	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2b7	      0xe89afeffff	                        call sym.topower	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2bc	            0x89c2	                            mov edx, eax	      6730	ldlang.c	FUNCTION_146	CALL_6
0x400c2be	        0x488b45f8	                mov rax, qword [rbp - 8]	      6729	ldlang.c	FUNCTION_146
0x400c2c2	          0x89507c	             mov dword [rax + 0x7c], edx	      6729	ldlang.c	FUNCTION_146
0x400c2c5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2c9	      0xba00000000	                              mov edx, 0	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2ce	      0xbeffffffff	                     mov esi, 0xffffffff	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2d3	          0x4889c7	                            mov rdi, rax	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2d6	      0xe800000000	                          call 0x400c2db	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2db	            0x89c7	                            mov edi, eax	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2dd	      0xe874feffff	                        call sym.topower	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2e2	            0x89c2	                            mov edx, eax	      6732	ldlang.c	FUNCTION_146	CALL_8
0x400c2e4	        0x488b45f8	                mov rax, qword [rbp - 8]	      6731	ldlang.c	FUNCTION_146
0x400c2e8	    0x899080000000	             mov dword [rax + 0x80], edx	      6731	ldlang.c	FUNCTION_146
0x400c2ee	        0x488b45f8	                mov rax, qword [rbp - 8]	      6734	ldlang.c	FUNCTION_146
0x400c2f2	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      6734	ldlang.c	FUNCTION_146
0x400c2f6	        0x48895060	             mov qword [rax + 0x60], rdx	      6734	ldlang.c	FUNCTION_146
0x400c2fa	        0x488b45f8	                mov rax, qword [rbp - 8]	      6735	ldlang.c	FUNCTION_146
0x400c2fe	              0xc9	                                   leave	      6736	ldlang.c	FUNCTION_146
0x400c2ff	              0xc3	                                     ret	      6736	ldlang.c	FUNCTION_146
lang_find_relro_sections	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	25
0x400c74c	              0x55	                                push rbp	      6915	ldlang.c	FUNCTION_154
0x400c74d	          0x4889e5	                            mov rbp, rsp	      6915	ldlang.c	FUNCTION_154
0x400c750	        0x4883ec10	                           sub rsp, 0x10	      6915	ldlang.c	FUNCTION_154
0x400c754	    0x64488b042528	                mov rax, qword fs:[0x28]	      6915	ldlang.c	FUNCTION_154
0x400c75d	        0x488945f8	                mov qword [rbp - 8], rax	      6915	ldlang.c	FUNCTION_154
0x400c761	            0x31c0	                            xor eax, eax	      6915	ldlang.c	FUNCTION_154
0x400c763	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      6916	ldlang.c	FUNCTION_154
0x400c76a	    0x488b05000000	            mov rax, qword [0x0400c771] 	      6920	ldlang.c	FUNCTION_154	CALL_1
0x400c771	        0x488d55f4	                    lea rdx, [rbp - 0xc]	      6920	ldlang.c	FUNCTION_154	CALL_1
0x400c775	      0xbe00000000	                              mov esi, 0	      6920	ldlang.c	FUNCTION_154	CALL_1
0x400c77a	          0x4889c7	                            mov rdi, rax	      6920	ldlang.c	FUNCTION_154	CALL_1
0x400c77d	      0xe8e4feffff	     call sym.lang_find_relro_sections_1	      6920	ldlang.c	FUNCTION_154	CALL_1
0x400c782	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      6923	ldlang.c	FUNCTION_154	IF_1
0x400c785	            0x85c0	                           test eax, eax	      6923	ldlang.c	FUNCTION_154	IF_1
0x400c787	            0x7510	                           jne 0x400c799	      6923	ldlang.c	FUNCTION_154	IF_1
0x400c789	     0xfb605000000	           movzx eax, byte [0x0400c790] 	      6924	ldlang.c	FUNCTION_154	IF_1
0x400c790	          0x83e0ef	                     and eax, 0xffffffef	      6924	ldlang.c	FUNCTION_154	IF_1
0x400c793	    0x880500000000	               mov byte [0x0400c799], al	      6924	ldlang.c	FUNCTION_154	IF_1
0x400c799	              0x90	                                     nop	      6925	ldlang.c	FUNCTION_154
0x400c79a	        0x488b45f8	                mov rax, qword [rbp - 8]	      6925	ldlang.c	FUNCTION_154
0x400c79e	    0x644833042528	                xor rax, qword fs:[0x28]	      6925	ldlang.c	FUNCTION_154
0x400c7a7	            0x7405	                            je 0x400c7ae	      6925	ldlang.c	FUNCTION_154
0x400c7a9	      0xe800000000	                          call 0x400c7ae	      6925	ldlang.c	FUNCTION_154
0x400c7ae	              0xc9	                                   leave	      6925	ldlang.c	FUNCTION_154
0x400c7af	              0xc3	                                     ret	      6925	ldlang.c	FUNCTION_154
print_output_section_statement	functions,0:ELSE,0:FOR,0:CALL,10:IF,5:DO,0:WHILE,1:SWITCH,0	83
0x4006d66	              0x55	                                push rbp	      3984	ldlang.c	FUNCTION_90
0x4006d67	          0x4889e5	                            mov rbp, rsp	      3984	ldlang.c	FUNCTION_90
0x4006d6a	              0x53	                                push rbx	      3984	ldlang.c	FUNCTION_90
0x4006d6b	        0x4883ec28	                           sub rsp, 0x28	      3984	ldlang.c	FUNCTION_90
0x4006d6f	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3984	ldlang.c	FUNCTION_90
0x4006d73	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3985	ldlang.c	FUNCTION_90
0x4006d77	        0x488b4038	            mov rax, qword [rax + 0x38] 	      3985	ldlang.c	FUNCTION_90
0x4006d7b	        0x488945e8	             mov qword [rbp - 0x18], rax	      3985	ldlang.c	FUNCTION_90
0x4006d7f	    0x488b05000000	            mov rax, qword [0x04006d86] 	      3988	ldlang.c	FUNCTION_90	IF_1
0x4006d86	        0x483945d8	            cmp qword [rbp - 0x28], rax 	      3988	ldlang.c	FUNCTION_90	IF_1
0x4006d8a	     0xf84fa000000	                            je 0x4006e8a	      3988	ldlang.c	FUNCTION_90	IF_1
0x4006d90	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006d94	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006d98	          0x4889c6	                            mov rsi, rax	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006d9b	      0xbf00000000	                              mov edi, 0	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006da0	      0xb800000000	                              mov eax, 0	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006da5	      0xe800000000	                          call 0x4006daa	      3990	ldlang.c	FUNCTION_90	IF_1	CALL_1
0x4006daa	      0x48837de800	               cmp qword [rbp - 0x18], 0	      3992	ldlang.c	FUNCTION_90	IF_1	IF_2
0x4006daf	     0xf84d0000000	                            je 0x4006e85	      3992	ldlang.c	FUNCTION_90	IF_1	IF_2
0x4006db5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3994	ldlang.c	FUNCTION_90	IF_1	IF_2
0x4006db9	        0x488b4028	            mov rax, qword [rax + 0x28] 	      3994	ldlang.c	FUNCTION_90	IF_1	IF_2
0x4006dbd	    0x488905000000	            mov qword [0x04006dc4], rax 	      3994	ldlang.c	FUNCTION_90	IF_1	IF_2
0x4006dc4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3996	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_2
0x4006dc8	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3996	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_2
0x4006dcc	          0x4889c7	                            mov rdi, rax	      3996	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_2
0x4006dcf	      0xe800000000	                          call 0x4006dd4	      3996	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_2
0x4006dd4	          0x8945e4	             mov dword [rbp - 0x1c], eax	      3996	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_2
0x4006dd7	        0x837de40e	            cmp dword [rbp - 0x1c], 0xe 	      3997	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_3
0x4006ddb	            0x7e17	                           jle 0x4006df4	      3997	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_3
0x4006ddd	      0xe800000000	                          call 0x4006de2	      3999	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_3	CALL_3
0x4006de2	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      4000	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_3
0x4006de9	            0xeb09	                           jmp 0x4006df4	      4002	ldlang.c	FUNCTION_90	IF_1	IF_2	WHILE_1
0x4006deb	      0xe800000000	                          call 0x4006df0	      4004	ldlang.c	FUNCTION_90	IF_1	IF_2	WHILE_1	CALL_4
0x4006df0	        0x8345e401	               add dword [rbp - 0x1c], 1	      4005	ldlang.c	FUNCTION_90	IF_1	IF_2	WHILE_1
0x4006df4	        0x837de40f	            cmp dword [rbp - 0x1c], 0xf 	      4002	ldlang.c	FUNCTION_90	IF_1	IF_2	WHILE_1
0x4006df8	            0x7ef1	                           jle 0x4006deb	      4002	ldlang.c	FUNCTION_90	IF_1	IF_2	WHILE_1
0x4006dfa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006dfe	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e02	    0x8b0500000000	            mov eax, dword [0x04006e08] 	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e08	            0x89c1	                            mov ecx, eax	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e0a	          0x48d3ea	                             shr rdx, cl	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e0d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e11	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e15	          0x4889c6	                            mov rsi, rax	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e18	      0xbf00000000	                              mov edi, 0	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e1d	      0xb800000000	                              mov eax, 0	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e22	      0xe800000000	                          call 0x4006e27	      4008	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_5
0x4006e27	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e2b	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e2f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e33	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e37	          0x4839c2	                            cmp rdx, rax	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e3a	            0x7422	                            je 0x4006e5e	      4010	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_4
0x4006e3c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e40	        0x488b5830	            mov rbx, qword [rax + 0x30] 	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e44	      0xbf00000000	                              mov edi, 0	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e49	      0xe800000000	                          call 0x4006e4e	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e4e	          0x4889de	                            mov rsi, rbx	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e51	          0x4889c7	                            mov rdi, rax	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e54	      0xb800000000	                              mov eax, 0	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e59	      0xe800000000	                          call 0x4006e5e	      4011	ldlang.c	FUNCTION_90	IF_1	IF_2	CALL_7
0x4006e5e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4013	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5
0x4006e62	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4013	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5
0x4006e66	          0x4885c0	                           test rax, rax	      4013	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5
0x4006e69	            0x741a	                            je 0x4006e85	      4013	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5
0x4006e6b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e6f	        0x488b4068	            mov rax, qword [rax + 0x68] 	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e73	      0xba00000000	                              mov edx, 0	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e78	      0xbe00000000	                              mov esi, 0	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e7d	          0x4889c7	                            mov rdi, rax	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e80	      0xe800000000	                          call 0x4006e85	      4014	ldlang.c	FUNCTION_90	IF_1	IF_2	IF_5	CALL_8
0x4006e85	      0xe800000000	                          call 0x4006e8a	      4018	ldlang.c	FUNCTION_90	IF_1	CALL_9
0x4006e8a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006e8e	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006e92	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006e96	          0x4889d6	                            mov rsi, rdx	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006e99	          0x4889c7	                            mov rdi, rax	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006e9c	      0xe86d100000	           call sym.print_statement_list	      4021	ldlang.c	FUNCTION_90	CALL_10
0x4006ea1	              0x90	                                     nop	      4023	ldlang.c	FUNCTION_90
0x4006ea2	        0x4883c428	                           add rsp, 0x28	      4023	ldlang.c	FUNCTION_90
0x4006ea6	              0x5b	                                 pop rbx	      4023	ldlang.c	FUNCTION_90
0x4006ea7	              0x5d	                                 pop rbp	      4023	ldlang.c	FUNCTION_90
0x4006ea8	              0xc3	                                     ret	      4023	ldlang.c	FUNCTION_90
lang_for_each_file	functions,1:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	19
0x400c00c	              0x55	                                push rbp	      6627	ldlang.c	FUNCTION_142
0x400c00d	          0x4889e5	                            mov rbp, rsp	      6627	ldlang.c	FUNCTION_142
0x400c010	        0x4883ec20	                           sub rsp, 0x20	      6627	ldlang.c	FUNCTION_142
0x400c014	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6627	ldlang.c	FUNCTION_142
0x400c018	    0x488b05000000	            mov rax, qword [0x0400c01f] 	      6628	ldlang.c	FUNCTION_142
0x400c01f	        0x488945f8	                mov qword [rbp - 8], rax	      6628	ldlang.c	FUNCTION_142
0x400c023	            0xeb19	                           jmp 0x400c03e	      6628	ldlang.c	FUNCTION_142
0x400c025	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6630	ldlang.c	FUNCTION_142	FUNCTION_1	CALL_1
0x400c029	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6630	ldlang.c	FUNCTION_142	FUNCTION_1	CALL_1
0x400c02d	          0x4889d7	                            mov rdi, rdx	      6630	ldlang.c	FUNCTION_142	FUNCTION_1	CALL_1
0x400c030	            0xffd0	                                call rax	      6630	ldlang.c	FUNCTION_142	FUNCTION_1	CALL_1
0x400c032	        0x488b45f8	                mov rax, qword [rbp - 8]	      6628	ldlang.c	FUNCTION_142
0x400c036	        0x488b4030	            mov rax, qword [rax + 0x30] 	      6628	ldlang.c	FUNCTION_142
0x400c03a	        0x488945f8	                mov qword [rbp - 8], rax	      6628	ldlang.c	FUNCTION_142
0x400c03e	      0x48837df800	                  cmp qword [rbp - 8], 0	      6628	ldlang.c	FUNCTION_142
0x400c043	            0x75e0	                           jne 0x400c025	      6628	ldlang.c	FUNCTION_142
0x400c045	              0x90	                                     nop	      6632	ldlang.c	FUNCTION_142
0x400c046	              0xc9	                                   leave	      6632	ldlang.c	FUNCTION_142
0x400c047	              0xc3	                                     ret	      6632	ldlang.c	FUNCTION_142
lang_add_target	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	16
0x400d42f	              0x55	                                push rbp	      7513	ldlang.c	FUNCTION_168
0x400d430	          0x4889e5	                            mov rbp, rsp	      7513	ldlang.c	FUNCTION_168
0x400d433	        0x4883ec20	                           sub rsp, 0x20	      7513	ldlang.c	FUNCTION_168
0x400d437	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7513	ldlang.c	FUNCTION_168
0x400d43b	    0x488b05000000	            mov rax, qword [0x0400d442] 	      7516	ldlang.c	FUNCTION_168
0x400d442	          0x4889c2	                            mov rdx, rax	      7516	ldlang.c	FUNCTION_168
0x400d445	      0xbe18000000	                           mov esi, 0x18	      7516	ldlang.c	FUNCTION_168
0x400d44a	      0xbf0a000000	                            mov edi, 0xa	      7516	ldlang.c	FUNCTION_168
0x400d44f	      0xe81b46ffff	                  call sym.new_statement	      7516	ldlang.c	FUNCTION_168
0x400d454	        0x488945f8	                mov qword [rbp - 8], rax	      7516	ldlang.c	FUNCTION_168
0x400d458	        0x488b45f8	                mov rax, qword [rbp - 8]	      7517	ldlang.c	FUNCTION_168
0x400d45c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7517	ldlang.c	FUNCTION_168
0x400d460	        0x48895010	             mov qword [rax + 0x10], rdx	      7517	ldlang.c	FUNCTION_168
0x400d464	              0x90	                                     nop	      7518	ldlang.c	FUNCTION_168
0x400d465	              0xc9	                                   leave	      7518	ldlang.c	FUNCTION_168
0x400d466	              0xc3	                                     ret	      7518	ldlang.c	FUNCTION_168
lang_init_startof_sizeof	functions,0:ELSE,0:FOR,1:CALL,7:IF,0:DO,0:WHILE,0:SWITCH,0	51
0x400b0be	              0x55	                                push rbp	      6111	ldlang.c	FUNCTION_130
0x400b0bf	          0x4889e5	                            mov rbp, rsp	      6111	ldlang.c	FUNCTION_130
0x400b0c2	        0x4883ec20	                           sub rsp, 0x20	      6111	ldlang.c	FUNCTION_130
0x400b0c6	    0x488b05000000	            mov rax, qword [0x0400b0cd] 	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b0cd	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b0d4	        0x488945e8	             mov qword [rbp - 0x18], rax	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b0d8	      0xe99d000000	                           jmp 0x400b17a	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b0dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6116	ldlang.c	FUNCTION_130	FOR_1
0x400b0e1	          0x488b00	                    mov rax, qword [rax]	      6116	ldlang.c	FUNCTION_130	FOR_1
0x400b0e4	        0x488945f0	             mov qword [rbp - 0x10], rax	      6116	ldlang.c	FUNCTION_130	FOR_1
0x400b0e8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b0ec	          0x4889c7	                            mov rdi, rax	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b0ef	      0xe800000000	                          call 0x400b0f4	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b0f4	        0x4883c00a	                            add rax, 0xa	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b0f8	          0x4889c7	                            mov rdi, rax	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b0fb	      0xe800000000	                          call 0x400b100	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b100	        0x488945f8	                mov qword [rbp - 8], rax	      6117	ldlang.c	FUNCTION_130	FOR_1	CALL_2
0x400b104	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b108	        0x488b45f8	                mov rax, qword [rbp - 8]	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b10c	      0xbe00000000	                              mov esi, 0	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b111	          0x4889c7	                            mov rdi, rax	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b114	      0xb800000000	                              mov eax, 0	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b119	      0xe800000000	                          call 0x400b11e	      6119	ldlang.c	FUNCTION_130	FOR_1	CALL_3
0x400b11e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      6120	ldlang.c	FUNCTION_130	FOR_1	CALL_4
0x400b122	        0x488b45f8	                mov rax, qword [rbp - 8]	      6120	ldlang.c	FUNCTION_130	FOR_1	CALL_4
0x400b126	          0x4889d6	                            mov rsi, rdx	      6120	ldlang.c	FUNCTION_130	FOR_1	CALL_4
0x400b129	          0x4889c7	                            mov rdi, rax	      6120	ldlang.c	FUNCTION_130	FOR_1	CALL_4
0x400b12c	      0xe858fcffff	         call sym.lang_define_start_stop	      6120	ldlang.c	FUNCTION_130	FOR_1	CALL_4
0x400b131	        0x488b45f8	                mov rax, qword [rbp - 8]	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b135	        0x4883c001	                              add rax, 1	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b139	      0xba05000000	                              mov edx, 5	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b13e	      0xbe00000000	                              mov esi, 0	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b143	          0x4889c7	                            mov rdi, rax	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b146	      0xe800000000	                          call 0x400b14b	      6122	ldlang.c	FUNCTION_130	FOR_1	CALL_5
0x400b14b	        0x488b45f8	                mov rax, qword [rbp - 8]	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b14f	        0x488d5001	                      lea rdx, [rax + 1]	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b153	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b157	          0x4889c6	                            mov rsi, rax	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b15a	          0x4889d7	                            mov rdi, rdx	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b15d	      0xe827fcffff	         call sym.lang_define_start_stop	      6123	ldlang.c	FUNCTION_130	FOR_1	CALL_6
0x400b162	        0x488b45f8	                mov rax, qword [rbp - 8]	      6124	ldlang.c	FUNCTION_130	FOR_1	CALL_7
0x400b166	          0x4889c7	                            mov rdi, rax	      6124	ldlang.c	FUNCTION_130	FOR_1	CALL_7
0x400b169	      0xe800000000	                          call 0x400b16e	      6124	ldlang.c	FUNCTION_130	FOR_1	CALL_7
0x400b16e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b172	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b176	        0x488945e8	             mov qword [rbp - 0x18], rax	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b17a	      0x48837de800	               cmp qword [rbp - 0x18], 0	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b17f	     0xf8558ffffff	                           jne 0x400b0dd	      6114	ldlang.c	FUNCTION_130	FOR_1
0x400b185	              0x90	                                     nop	      6126	ldlang.c	FUNCTION_130
0x400b186	              0xc9	                                   leave	      6126	ldlang.c	FUNCTION_130
0x400b187	              0xc3	                                     ret	      6126	ldlang.c	FUNCTION_130
size_input_section	functions,0:ELSE,2:FOR,0:CALL,1:IF,6:DO,0:WHILE,0:SWITCH,0	131
0x4008393	              0x55	                                push rbp	      4689	ldlang.c	FUNCTION_109
0x4008394	          0x4889e5	                            mov rbp, rsp	      4689	ldlang.c	FUNCTION_109
0x4008397	        0x4883ec40	                           sub rsp, 0x40	      4689	ldlang.c	FUNCTION_109
0x400839b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      4689	ldlang.c	FUNCTION_109
0x400839f	        0x488975d0	             mov qword [rbp - 0x30], rsi	      4689	ldlang.c	FUNCTION_109
0x40083a3	        0x488955c8	             mov qword [rbp - 0x38], rdx	      4689	ldlang.c	FUNCTION_109
0x40083a7	        0x48894dc0	             mov qword [rbp - 0x40], rcx	      4689	ldlang.c	FUNCTION_109
0x40083ab	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4690	ldlang.c	FUNCTION_109
0x40083af	          0x488b00	                    mov rax, qword [rax]	      4690	ldlang.c	FUNCTION_109
0x40083b2	        0x488945e0	             mov qword [rbp - 0x20], rax	      4690	ldlang.c	FUNCTION_109
0x40083b6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4691	ldlang.c	FUNCTION_109
0x40083ba	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4691	ldlang.c	FUNCTION_109
0x40083be	        0x488945e8	             mov qword [rbp - 0x18], rax	      4691	ldlang.c	FUNCTION_109
0x40083c2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4692	ldlang.c	FUNCTION_109
0x40083c6	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4692	ldlang.c	FUNCTION_109
0x40083ca	        0x488945f0	             mov qword [rbp - 0x10], rax	      4692	ldlang.c	FUNCTION_109
0x40083ce	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4694	ldlang.c	FUNCTION_109	IF_1
0x40083d2	         0xfb74024	           movzx eax, word [rax + 0x24] 	      4694	ldlang.c	FUNCTION_109	IF_1
0x40083d6	        0x66258003	                           and ax, 0x380	      4694	ldlang.c	FUNCTION_109	IF_1
0x40083da	        0x663d0002	                           cmp ax, 0x200	      4694	ldlang.c	FUNCTION_109	IF_1
0x40083de	            0x7520	                           jne 0x4008400	      4694	ldlang.c	FUNCTION_109	IF_1
0x40083e0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083e4	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083e8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083ec	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083f0	          0x4829c2	                            sub rdx, rax	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083f7	        0x48895060	             mov qword [rax + 0x60], rdx	      4695	ldlang.c	FUNCTION_109	IF_1
0x40083fb	      0xe95d010000	                           jmp 0x400855d	      4695	ldlang.c	FUNCTION_109	IF_1
0x4008400	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4696	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008404	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4696	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008407	      0x2500800000	                         and eax, 0x8000	      4696	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400840c	            0x85c0	                           test eax, eax	      4696	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400840e	            0x7512	                           jne 0x4008422	      4696	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008410	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4697	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008414	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      4697	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400841b	          0x83e008	                              and eax, 8	      4697	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400841e	            0x84c0	                             test al, al	      4697	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008420	            0x741c	                            je 0x400843e	      4697	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008422	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008426	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400842a	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400842e	          0x4829c2	                            sub rdx, rax	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008431	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008435	        0x48895060	             mov qword [rax + 0x60], rdx	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x4008439	      0xe91f010000	                           jmp 0x400855d	      4698	ldlang.c	FUNCTION_109	ELSE_1	IF_2
0x400843e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4708	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008442	          0x8b407c	            mov eax, dword [rax + 0x7c] 	      4708	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008445	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      4708	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008448	            0x7410	                            je 0x400845a	      4708	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x400844a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4709	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x400844e	          0x8b407c	            mov eax, dword [rax + 0x7c] 	      4709	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008451	            0x89c2	                            mov edx, eax	      4709	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008453	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4709	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x4008457	          0x895070	             mov dword [rax + 0x70], edx	      4709	ldlang.c	FUNCTION_109	ELSE_2	IF_3
0x400845a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x400845e	          0x8b5070	            mov edx, dword [rax + 0x70] 	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008461	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008465	          0x8b4070	            mov eax, dword [rax + 0x70] 	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008468	            0x39c2	                            cmp edx, eax	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x400846a	            0x730e	                           jae 0x400847a	      4711	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x400846c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4712	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008470	          0x8b5070	            mov edx, dword [rax + 0x70] 	      4712	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008473	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4712	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x4008477	          0x895070	             mov dword [rax + 0x70], edx	      4712	ldlang.c	FUNCTION_109	ELSE_2	IF_4
0x400847a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x400847e	          0x8b4070	            mov eax, dword [rax + 0x70] 	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x4008481	      0xba01000000	                              mov edx, 1	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x4008486	            0x89c1	                            mov ecx, eax	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x4008488	          0x48d3e2	                             shl rdx, cl	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x400848b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x400848f	          0x4801d0	                            add rax, rdx	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x4008492	        0x488d50ff	                      lea rdx, [rax - 1]	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x4008496	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x400849a	          0x8b4070	            mov eax, dword [rax + 0x70] 	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x400849d	      0xbe01000000	                              mov esi, 1	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084a2	            0x89c1	                            mov ecx, eax	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084a4	          0x48d3e6	                             shl rsi, cl	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084a7	          0x4889f0	                            mov rax, rsi	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084aa	          0x48f7d8	                                 neg rax	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084ad	          0x4821d0	                            and rax, rdx	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084b0	        0x482b45c0	             sub rax, qword [rbp - 0x40]	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084b4	        0x488945f8	                mov qword [rbp - 8], rax	      4714	ldlang.c	FUNCTION_109	ELSE_2
0x40084b8	      0x48837df800	                  cmp qword [rbp - 8], 0	      4716	ldlang.c	FUNCTION_109	ELSE_2	IF_5
0x40084bd	            0x743b	                            je 0x40084fa	      4716	ldlang.c	FUNCTION_109	ELSE_2	IF_5
0x40084bf	    0x8b0500000000	            mov eax, dword [0x040084c5] 	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084c5	        0x488b55f8	                mov rdx, qword [rbp - 8]	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084c9	          0x4889d7	                            mov rdi, rdx	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084cc	            0x89c1	                            mov ecx, eax	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084ce	          0x48d3e7	                             shl rdi, cl	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084d1	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084d5	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084d9	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084dd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084e1	          0x4989c8	                             mov r8, rcx	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084e4	          0x4889d1	                            mov rcx, rdx	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084e7	          0x4889fa	                            mov rdx, rdi	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084ea	          0x4889c7	                            mov rdi, rax	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084ed	      0xe857fdffff	                     call sym.insert_pad	      4718	ldlang.c	FUNCTION_109	ELSE_2	IF_5	CALL_1
0x40084f2	        0x488b45f8	                mov rax, qword [rbp - 8]	      4719	ldlang.c	FUNCTION_109	ELSE_2	IF_5
0x40084f6	        0x480145c0	            add qword [rbp - 0x40], rax 	      4719	ldlang.c	FUNCTION_109	ELSE_2	IF_5
0x40084fa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x40084fe	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x4008502	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x4008506	          0x4829c2	                            sub rdx, rax	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x4008509	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x400850d	        0x48895060	             mov qword [rax + 0x60], rdx	      4723	ldlang.c	FUNCTION_109	ELSE_2
0x4008511	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x4008515	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x4008519	    0x8b0500000000	            mov eax, dword [0x0400851f] 	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x400851f	            0x89c1	                            mov ecx, eax	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x4008521	          0x48d3ea	                             shr rdx, cl	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x4008524	          0x4889d0	                            mov rax, rdx	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x4008527	        0x480145c0	            add qword [rbp - 0x40], rax 	      4726	ldlang.c	FUNCTION_109	ELSE_2
0x400852b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4727	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x400852f	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4727	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008532	      0x2500080000	                          and eax, 0x800	      4727	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008537	            0x85c0	                           test eax, eax	      4727	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008539	            0x7522	                           jne 0x400855d	      4727	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x400853b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x400853f	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008543	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008547	          0x4829c2	                            sub rdx, rax	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x400854a	    0x8b0500000000	            mov eax, dword [0x04008550] 	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008550	            0x89c1	                            mov ecx, eax	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008552	          0x48d3e2	                             shl rdx, cl	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008555	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x4008559	        0x48895038	             mov qword [rax + 0x38], rdx	      4728	ldlang.c	FUNCTION_109	ELSE_2	IF_6
0x400855d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4731	ldlang.c	FUNCTION_109
0x4008561	              0xc9	                                   leave	      4732	ldlang.c	FUNCTION_109
0x4008562	              0xc3	                                     ret	      4732	ldlang.c	FUNCTION_109
new_afile	functions,0:ELSE,2:FOR,0:CALL,5:IF,2:DO,0:WHILE,0:SWITCH,1	204
0x4001ac4	              0x55	                                push rbp	      1060	ldlang.c	FUNCTION_34
0x4001ac5	          0x4889e5	                            mov rbp, rsp	      1060	ldlang.c	FUNCTION_34
0x4001ac8	        0x4883ec30	                           sub rsp, 0x30	      1060	ldlang.c	FUNCTION_34
0x4001acc	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1060	ldlang.c	FUNCTION_34
0x4001ad0	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1060	ldlang.c	FUNCTION_34
0x4001ad3	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1060	ldlang.c	FUNCTION_34
0x4001ad7	          0x894de0	             mov dword [rbp - 0x20], ecx	      1060	ldlang.c	FUNCTION_34
0x4001ada	    0xc70500000000	               mov dword [0x04001ae4], 1	      1063	ldlang.c	FUNCTION_34
0x4001ae4	        0x837de000	               cmp dword [rbp - 0x20], 0	      1065	ldlang.c	FUNCTION_34	IF_1
0x4001ae8	            0x741f	                            je 0x4001b09	      1065	ldlang.c	FUNCTION_34	IF_1
0x4001aea	    0x488b05000000	            mov rax, qword [0x04001af1] 	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001af1	          0x4889c2	                            mov rdx, rax	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001af4	      0xbe58000000	                           mov esi, 0x58	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001af9	      0xbf02000000	                              mov edi, 2	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001afe	      0xe86cffffff	                  call sym.new_statement	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001b03	        0x488945f8	                mov qword [rbp - 8], rax	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001b07	            0xeb24	                           jmp 0x4001b2d	      1066	ldlang.c	FUNCTION_34	IF_1
0x4001b09	      0xbf58000000	                           mov edi, 0x58	      1069	ldlang.c	FUNCTION_34	ELSE_1
0x4001b0e	      0xe800000000	                          call 0x4001b13	      1069	ldlang.c	FUNCTION_34	ELSE_1
0x4001b13	        0x488945f8	                mov qword [rbp - 8], rax	      1069	ldlang.c	FUNCTION_34	ELSE_1
0x4001b17	        0x488b45f8	                mov rax, qword [rbp - 8]	      1071	ldlang.c	FUNCTION_34	ELSE_1
0x4001b1b	    0xc74008020000	                  mov dword [rax + 8], 2	      1071	ldlang.c	FUNCTION_34	ELSE_1
0x4001b22	        0x488b45f8	                mov rax, qword [rbp - 8]	      1072	ldlang.c	FUNCTION_34	ELSE_1
0x4001b26	    0x48c700000000	                      mov qword [rax], 0	      1072	ldlang.c	FUNCTION_34	ELSE_1
0x4001b2d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b31	        0x4883c020	                           add rax, 0x20	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b35	      0xba38000000	                           mov edx, 0x38	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b3a	      0xbe00000000	                              mov esi, 0	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b3f	          0x4889c7	                            mov rdi, rax	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b42	      0xe800000000	                          call 0x4001b47	      1075	ldlang.c	FUNCTION_34	CALL_2
0x4001b47	        0x488b45f8	                mov rax, qword [rbp - 8]	      1077	ldlang.c	FUNCTION_34
0x4001b4b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1077	ldlang.c	FUNCTION_34
0x4001b4f	        0x48895040	             mov qword [rax + 0x40], rdx	      1077	ldlang.c	FUNCTION_34
0x4001b53	     0xfb605000000	           movzx eax, byte [0x04001b5a] 	      1078	ldlang.c	FUNCTION_34
0x4001b5a	          0xc0e805	                               shr al, 5	      1078	ldlang.c	FUNCTION_34
0x4001b5d	          0x83e001	                              and eax, 1	      1078	ldlang.c	FUNCTION_34
0x4001b60	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1078	ldlang.c	FUNCTION_34
0x4001b64	          0x83e001	                              and eax, 1	      1078	ldlang.c	FUNCTION_34
0x4001b67	          0xc1e005	                              shl eax, 5	      1078	ldlang.c	FUNCTION_34
0x4001b6a	            0x89c1	                            mov ecx, eax	      1078	ldlang.c	FUNCTION_34
0x4001b6c	         0xfb64248	           movzx eax, byte [rdx + 0x48] 	      1078	ldlang.c	FUNCTION_34
0x4001b70	          0x83e0df	                     and eax, 0xffffffdf	      1078	ldlang.c	FUNCTION_34
0x4001b73	             0x9c8	                             or eax, ecx	      1078	ldlang.c	FUNCTION_34
0x4001b75	          0x884248	               mov byte [rdx + 0x48], al	      1078	ldlang.c	FUNCTION_34
0x4001b78	     0xfb605000000	           movzx eax, byte [0x04001b7f] 	      1079	ldlang.c	FUNCTION_34
0x4001b7f	          0xc0e806	                               shr al, 6	      1079	ldlang.c	FUNCTION_34
0x4001b82	          0x83e001	                              and eax, 1	      1079	ldlang.c	FUNCTION_34
0x4001b85	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1079	ldlang.c	FUNCTION_34
0x4001b89	          0x83e001	                              and eax, 1	      1079	ldlang.c	FUNCTION_34
0x4001b8c	          0xc1e006	                              shl eax, 6	      1079	ldlang.c	FUNCTION_34
0x4001b8f	            0x89c1	                            mov ecx, eax	      1079	ldlang.c	FUNCTION_34
0x4001b91	         0xfb64248	           movzx eax, byte [rdx + 0x48] 	      1079	ldlang.c	FUNCTION_34
0x4001b95	          0x83e0bf	                     and eax, 0xffffffbf	      1079	ldlang.c	FUNCTION_34
0x4001b98	             0x9c8	                             or eax, ecx	      1079	ldlang.c	FUNCTION_34
0x4001b9a	          0x884248	               mov byte [rdx + 0x48], al	      1079	ldlang.c	FUNCTION_34
0x4001b9d	     0xfb605000000	           movzx eax, byte [0x04001ba4] 	      1080	ldlang.c	FUNCTION_34
0x4001ba4	          0xc0e807	                               shr al, 7	      1080	ldlang.c	FUNCTION_34
0x4001ba7	            0x89c2	                            mov edx, eax	      1080	ldlang.c	FUNCTION_34
0x4001ba9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1080	ldlang.c	FUNCTION_34
0x4001bad	            0x89d1	                            mov ecx, edx	      1080	ldlang.c	FUNCTION_34
0x4001baf	          0xc1e107	                              shl ecx, 7	      1080	ldlang.c	FUNCTION_34
0x4001bb2	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1080	ldlang.c	FUNCTION_34
0x4001bb6	          0x83e27f	                           and edx, 0x7f	      1080	ldlang.c	FUNCTION_34
0x4001bb9	             0x9ca	                             or edx, ecx	      1080	ldlang.c	FUNCTION_34
0x4001bbb	          0x885048	               mov byte [rax + 0x48], dl	      1080	ldlang.c	FUNCTION_34
0x4001bbe	     0xfb605000000	           movzx eax, byte [0x04001bc5] 	      1081	ldlang.c	FUNCTION_34
0x4001bc5	          0x83e001	                              and eax, 1	      1081	ldlang.c	FUNCTION_34
0x4001bc8	            0x89c2	                            mov edx, eax	      1081	ldlang.c	FUNCTION_34
0x4001bca	        0x488b45f8	                mov rax, qword [rbp - 8]	      1081	ldlang.c	FUNCTION_34
0x4001bce	            0x89d1	                            mov ecx, edx	      1081	ldlang.c	FUNCTION_34
0x4001bd0	          0x83e101	                              and ecx, 1	      1081	ldlang.c	FUNCTION_34
0x4001bd3	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      1081	ldlang.c	FUNCTION_34
0x4001bd7	          0x83e2fe	                     and edx, 0xfffffffe	      1081	ldlang.c	FUNCTION_34
0x4001bda	             0x9ca	                             or edx, ecx	      1081	ldlang.c	FUNCTION_34
0x4001bdc	          0x885049	               mov byte [rax + 0x49], dl	      1081	ldlang.c	FUNCTION_34
0x4001bdf	     0xfb605000000	           movzx eax, byte [0x04001be6] 	      1082	ldlang.c	FUNCTION_34
0x4001be6	          0xc0e803	                               shr al, 3	      1082	ldlang.c	FUNCTION_34
0x4001be9	          0x83e001	                              and eax, 1	      1082	ldlang.c	FUNCTION_34
0x4001bec	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1082	ldlang.c	FUNCTION_34
0x4001bf0	          0x83e001	                              and eax, 1	      1082	ldlang.c	FUNCTION_34
0x4001bf3	    0x8d0cc5000000	                        lea ecx, [rax*8]	      1082	ldlang.c	FUNCTION_34
0x4001bfa	         0xfb64248	           movzx eax, byte [rdx + 0x48] 	      1082	ldlang.c	FUNCTION_34
0x4001bfe	          0x83e0f7	                     and eax, 0xfffffff7	      1082	ldlang.c	FUNCTION_34
0x4001c01	             0x9c8	                             or eax, ecx	      1082	ldlang.c	FUNCTION_34
0x4001c03	          0x884248	               mov byte [rdx + 0x48], al	      1082	ldlang.c	FUNCTION_34
0x4001c06	        0x837de405	               cmp dword [rbp - 0x1c], 5	      1084	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c0a	     0xf8784010000	                            ja 0x4001d94	      1084	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c10	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1084	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c13	    0x488b04c50000	                  mov rax, qword [rax*8]	      1084	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c1b	            0xffe0	                                 jmp rax	      1084	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c1d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1087	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c21	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1087	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c25	        0x48895010	             mov qword [rax + 0x10], rdx	      1087	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c29	        0x488b45f8	                mov rax, qword [rbp - 8]	      1088	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c2d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1088	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c31	        0x48895018	             mov qword [rax + 0x18], rdx	      1088	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c35	        0x488b45f8	                mov rax, qword [rbp - 8]	      1089	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c39	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      1089	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c3d	          0x83ca04	                               or edx, 4	      1089	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c40	          0x885049	               mov byte [rax + 0x49], dl	      1089	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c43	        0x488b45f8	                mov rax, qword [rbp - 8]	      1090	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c47	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1090	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c4b	          0x83ca10	                            or edx, 0x10	      1090	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c4e	          0x885048	               mov byte [rax + 0x48], dl	      1090	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c51	      0xe94d010000	                           jmp 0x4001da3	      1091	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c56	        0x488b45f8	                mov rax, qword [rbp - 8]	      1093	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c5a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1093	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c5e	        0x48895010	             mov qword [rax + 0x10], rdx	      1093	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c62	        0x488b45f8	                mov rax, qword [rbp - 8]	      1094	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c66	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1094	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c6a	        0x48895018	             mov qword [rax + 0x18], rdx	      1094	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c6e	      0xe930010000	                           jmp 0x4001da3	      1095	ldlang.c	FUNCTION_34	SWITCH_1
0x4001c73	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c77	           0xfb600	                   movzx eax, byte [rax]	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c7a	            0x3c3a	                            cmp al, 0x3a	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c7c	            0x752f	                           jne 0x4001cad	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c7e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c82	        0x4883c001	                              add rax, 1	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c86	           0xfb600	                   movzx eax, byte [rax]	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c89	            0x84c0	                             test al, al	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c8b	            0x7420	                            je 0x4001cad	      1097	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c8d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1099	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c91	        0x488d5001	                      lea rdx, [rax + 1]	      1099	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c95	        0x488b45f8	                mov rax, qword [rbp - 8]	      1099	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c99	        0x48895010	             mov qword [rax + 0x10], rdx	      1099	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001c9d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1100	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001ca1	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1100	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001ca5	          0x83ca02	                               or edx, 2	      1100	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001ca8	          0x885048	               mov byte [rax + 0x48], dl	      1100	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001cab	            0xeb0c	                           jmp 0x4001cb9	      1100	ldlang.c	FUNCTION_34	SWITCH_1	IF_2
0x4001cad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1103	ldlang.c	FUNCTION_34	SWITCH_1	ELSE_2
0x4001cb1	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1103	ldlang.c	FUNCTION_34	SWITCH_1	ELSE_2
0x4001cb5	        0x48895010	             mov qword [rax + 0x10], rdx	      1103	ldlang.c	FUNCTION_34	SWITCH_1	ELSE_2
0x4001cb9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cbd	      0xba00000000	                              mov edx, 0	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cc2	          0x4889c6	                            mov rsi, rax	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cc5	      0xbf00000000	                              mov edi, 0	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cca	      0xb800000000	                              mov eax, 0	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001ccf	      0xe800000000	                          call 0x4001cd4	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cd4	          0x4889c2	                            mov rdx, rax	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cd7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cdb	        0x48895018	             mov qword [rax + 0x18], rdx	      1104	ldlang.c	FUNCTION_34	SWITCH_1	CALL_3
0x4001cdf	        0x488b45f8	                mov rax, qword [rbp - 8]	      1105	ldlang.c	FUNCTION_34	SWITCH_1
0x4001ce3	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1105	ldlang.c	FUNCTION_34	SWITCH_1
0x4001ce7	          0x83ca01	                               or edx, 1	      1105	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cea	          0x885048	               mov byte [rax + 0x48], dl	      1105	ldlang.c	FUNCTION_34	SWITCH_1
0x4001ced	        0x488b45f8	                mov rax, qword [rbp - 8]	      1106	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cf1	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      1106	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cf5	          0x83ca04	                               or edx, 4	      1106	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cf8	          0x885049	               mov byte [rax + 0x49], dl	      1106	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cfb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1107	ldlang.c	FUNCTION_34	SWITCH_1
0x4001cff	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1107	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d03	          0x83ca04	                               or edx, 4	      1107	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d06	          0x885048	               mov byte [rax + 0x48], dl	      1107	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d09	      0xe995000000	                           jmp 0x4001da3	      1108	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d0e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1110	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d12	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1110	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d16	        0x48895010	             mov qword [rax + 0x10], rdx	      1110	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d1a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1111	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d1e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1111	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d22	        0x48895018	             mov qword [rax + 0x18], rdx	      1111	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d26	        0x488b45f8	                mov rax, qword [rbp - 8]	      1112	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d2a	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1112	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d2e	          0x83ca04	                               or edx, 4	      1112	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d31	          0x885048	               mov byte [rax + 0x48], dl	      1112	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d34	            0xeb6d	                           jmp 0x4001da3	      1113	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d36	        0x488b45f8	                mov rax, qword [rbp - 8]	      1115	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d3a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1115	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d3e	        0x48895010	             mov qword [rax + 0x10], rdx	      1115	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d42	        0x488b45f8	                mov rax, qword [rbp - 8]	      1116	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d46	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1116	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d4a	        0x48895018	             mov qword [rax + 0x18], rdx	      1116	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d4e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1117	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d52	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      1117	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d56	          0x83ca04	                               or edx, 4	      1117	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d59	          0x885049	               mov byte [rax + 0x49], dl	      1117	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d5c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1118	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d60	         0xfb65048	           movzx edx, byte [rax + 0x48] 	      1118	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d64	          0x83ca04	                               or edx, 4	      1118	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d67	          0x885048	               mov byte [rax + 0x48], dl	      1118	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d6a	            0xeb37	                           jmp 0x4001da3	      1119	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d6c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1121	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d70	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1121	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d74	        0x48895010	             mov qword [rax + 0x10], rdx	      1121	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d78	        0x488b45f8	                mov rax, qword [rbp - 8]	      1122	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d7c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1122	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d80	        0x48895018	             mov qword [rax + 0x18], rdx	      1122	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d84	        0x488b45f8	                mov rax, qword [rbp - 8]	      1123	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d88	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      1123	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d8c	          0x83ca04	                               or edx, 4	      1123	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d8f	          0x885049	               mov byte [rax + 0x49], dl	      1123	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d92	            0xeb0f	                           jmp 0x4001da3	      1124	ldlang.c	FUNCTION_34	SWITCH_1
0x4001d94	      0xbe66040000	                          mov esi, 0x466	      1126	ldlang.c	FUNCTION_34	SWITCH_1	CALL_4
0x4001d99	      0xbf00000000	                              mov edi, 0	      1126	ldlang.c	FUNCTION_34	SWITCH_1	CALL_4
0x4001d9e	      0xe800000000	                          call 0x4001da3	      1126	ldlang.c	FUNCTION_34	SWITCH_1	CALL_4
0x4001da3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1131	ldlang.c	FUNCTION_34
0x4001da7	        0x488d5038	                   lea rdx, [rax + 0x38]	      1131	ldlang.c	FUNCTION_34
0x4001dab	        0x488b45f8	                mov rax, qword [rbp - 8]	      1129	ldlang.c	FUNCTION_34	CALL_5
0x4001daf	          0x4889c6	                            mov rsi, rax	      1129	ldlang.c	FUNCTION_34	CALL_5
0x4001db2	      0xbf00000000	                              mov edi, 0	      1129	ldlang.c	FUNCTION_34	CALL_5
0x4001db7	      0xe800000000	                          call 0x4001dbc	      1129	ldlang.c	FUNCTION_34	CALL_5
0x4001dbc	        0x488b45f8	                mov rax, qword [rbp - 8]	      1132	ldlang.c	FUNCTION_34
0x4001dc0	              0xc9	                                   leave	      1133	ldlang.c	FUNCTION_34
0x4001dc1	              0xc3	                                     ret	      1133	ldlang.c	FUNCTION_34
closest_target_match	functions,0:ELSE,0:FOR,0:CALL,6:IF,6:DO,0:WHILE,0:SWITCH,0	95
0x400540d	              0x55	                                push rbp	      3020	ldlang.c	FUNCTION_72
0x400540e	          0x4889e5	                            mov rbp, rsp	      3020	ldlang.c	FUNCTION_72
0x4005411	              0x53	                                push rbx	      3020	ldlang.c	FUNCTION_72
0x4005412	        0x4883ec28	                           sub rsp, 0x28	      3020	ldlang.c	FUNCTION_72
0x4005416	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3020	ldlang.c	FUNCTION_72
0x400541a	        0x488975d0	             mov qword [rbp - 0x30], rsi	      3020	ldlang.c	FUNCTION_72
0x400541e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3021	ldlang.c	FUNCTION_72
0x4005422	        0x488945e8	             mov qword [rbp - 0x18], rax	      3021	ldlang.c	FUNCTION_72
0x4005426	    0x8b0500000000	            mov eax, dword [0x0400542c] 	      3023	ldlang.c	FUNCTION_72	IF_1
0x400542c	          0x83f801	                              cmp eax, 1	      3023	ldlang.c	FUNCTION_72	IF_1
0x400542f	            0x7515	                           jne 0x4005446	      3023	ldlang.c	FUNCTION_72	IF_1
0x4005431	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3024	ldlang.c	FUNCTION_72	IF_1
0x4005435	          0x8b400c	              mov eax, dword [rax + 0xc]	      3024	ldlang.c	FUNCTION_72	IF_1
0x4005438	            0x85c0	                           test eax, eax	      3024	ldlang.c	FUNCTION_72	IF_1
0x400543a	            0x740a	                            je 0x4005446	      3024	ldlang.c	FUNCTION_72	IF_1
0x400543c	      0xb800000000	                              mov eax, 0	      3025	ldlang.c	FUNCTION_72	IF_1
0x4005441	      0xe90d010000	                           jmp 0x4005553	      3025	ldlang.c	FUNCTION_72	IF_1
0x4005446	    0x8b0500000000	            mov eax, dword [0x0400544c] 	      3027	ldlang.c	FUNCTION_72	IF_2
0x400544c	          0x83f802	                              cmp eax, 2	      3027	ldlang.c	FUNCTION_72	IF_2
0x400544f	            0x7516	                           jne 0x4005467	      3027	ldlang.c	FUNCTION_72	IF_2
0x4005451	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3028	ldlang.c	FUNCTION_72	IF_2
0x4005455	          0x8b400c	              mov eax, dword [rax + 0xc]	      3028	ldlang.c	FUNCTION_72	IF_2
0x4005458	          0x83f801	                              cmp eax, 1	      3028	ldlang.c	FUNCTION_72	IF_2
0x400545b	            0x740a	                            je 0x4005467	      3028	ldlang.c	FUNCTION_72	IF_2
0x400545d	      0xb800000000	                              mov eax, 0	      3029	ldlang.c	FUNCTION_72	IF_2
0x4005462	      0xe9ec000000	                           jmp 0x4005553	      3029	ldlang.c	FUNCTION_72	IF_2
0x4005467	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3032	ldlang.c	FUNCTION_72	IF_3
0x400546b	          0x8b5008	                mov edx, dword [rax + 8]	      3032	ldlang.c	FUNCTION_72	IF_3
0x400546e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3032	ldlang.c	FUNCTION_72	IF_3
0x4005472	          0x8b4008	                mov eax, dword [rax + 8]	      3032	ldlang.c	FUNCTION_72	IF_3
0x4005475	            0x39c2	                            cmp edx, eax	      3032	ldlang.c	FUNCTION_72	IF_3
0x4005477	            0x740a	                            je 0x4005483	      3032	ldlang.c	FUNCTION_72	IF_3
0x4005479	      0xb800000000	                              mov eax, 0	      3033	ldlang.c	FUNCTION_72	IF_3
0x400547e	      0xe9d0000000	                           jmp 0x4005553	      3033	ldlang.c	FUNCTION_72	IF_3
0x4005483	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x4005487	          0x488b00	                    mov rax, qword [rax]	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x400548a	      0xbe00000000	                              mov esi, 0	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x400548f	          0x4889c7	                            mov rdi, rax	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x4005492	      0xe800000000	                          call 0x4005497	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x4005497	            0x85c0	                           test eax, eax	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x4005499	            0x7448	                            je 0x40054e3	      3036	ldlang.c	FUNCTION_72	IF_4	CALL_1
0x400549b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x400549f	          0x488b00	                    mov rax, qword [rax]	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054a2	      0xbe00000000	                              mov esi, 0	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054a7	          0x4889c7	                            mov rdi, rax	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054aa	      0xe800000000	                          call 0x40054af	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054af	            0x85c0	                           test eax, eax	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054b1	            0x7430	                            je 0x40054e3	      3037	ldlang.c	FUNCTION_72	IF_4	CALL_2
0x40054b3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054b7	          0x488b00	                    mov rax, qword [rax]	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054ba	      0xbe00000000	                              mov esi, 0	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054bf	          0x4889c7	                            mov rdi, rax	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054c2	      0xe800000000	                          call 0x40054c7	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054c7	            0x85c0	                           test eax, eax	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054c9	            0x7418	                            je 0x40054e3	      3038	ldlang.c	FUNCTION_72	IF_4	CALL_3
0x40054cb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054cf	          0x488b00	                    mov rax, qword [rax]	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054d2	      0xbe00000000	                              mov esi, 0	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054d7	          0x4889c7	                            mov rdi, rax	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054da	      0xe800000000	                          call 0x40054df	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054df	            0x85c0	                           test eax, eax	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054e1	            0x7507	                           jne 0x40054ea	      3039	ldlang.c	FUNCTION_72	IF_4	CALL_4
0x40054e3	      0xb800000000	                              mov eax, 0	      3040	ldlang.c	FUNCTION_72	IF_4
0x40054e8	            0xeb69	                           jmp 0x4005553	      3040	ldlang.c	FUNCTION_72	IF_4
0x40054ea	    0x488b05000000	            mov rax, qword [0x040054f1] 	      3043	ldlang.c	FUNCTION_72	IF_5
0x40054f1	          0x4885c0	                           test rax, rax	      3043	ldlang.c	FUNCTION_72	IF_5
0x40054f4	            0x7512	                           jne 0x4005508	      3043	ldlang.c	FUNCTION_72	IF_5
0x40054f6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3045	ldlang.c	FUNCTION_72	IF_5
0x40054fa	    0x488905000000	            mov qword [0x04005501], rax 	      3045	ldlang.c	FUNCTION_72	IF_5
0x4005501	      0xb800000000	                              mov eax, 0	      3046	ldlang.c	FUNCTION_72	IF_5
0x4005506	            0xeb4b	                           jmp 0x4005553	      3046	ldlang.c	FUNCTION_72	IF_5
0x4005508	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x400550c	          0x488b10	                    mov rdx, qword [rax]	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x400550f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005513	          0x488b00	                    mov rax, qword [rax]	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005516	          0x4889d6	                            mov rsi, rdx	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005519	          0x4889c7	                            mov rdi, rax	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x400551c	      0xe8c7fdffff	                   call sym.name_compare	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005521	            0x89c3	                            mov ebx, eax	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005523	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x4005527	          0x488b10	                    mov rdx, qword [rax]	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x400552a	    0x488b05000000	            mov rax, qword [0x04005531] 	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x4005531	          0x488b00	                    mov rax, qword [rax]	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x4005534	          0x4889d6	                            mov rsi, rdx	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x4005537	          0x4889c7	                            mov rdi, rax	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x400553a	      0xe8a9fdffff	                   call sym.name_compare	      3052	ldlang.c	FUNCTION_72	IF_6	CALL_6
0x400553f	            0x39c3	                            cmp ebx, eax	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005541	            0x7e0b	                           jle 0x400554e	      3051	ldlang.c	FUNCTION_72	IF_6	CALL_5
0x4005543	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3053	ldlang.c	FUNCTION_72	IF_6
0x4005547	    0x488905000000	            mov qword [0x0400554e], rax 	      3053	ldlang.c	FUNCTION_72	IF_6
0x400554e	      0xb800000000	                              mov eax, 0	      3056	ldlang.c	FUNCTION_72
0x4005553	        0x4883c428	                           add rsp, 0x28	      3057	ldlang.c	FUNCTION_72
0x4005557	              0x5b	                                 pop rbx	      3057	ldlang.c	FUNCTION_72
0x4005558	              0x5d	                                 pop rbp	      3057	ldlang.c	FUNCTION_72
0x4005559	              0xc3	                                     ret	      3057	ldlang.c	FUNCTION_72
walk_wild_section_general	functions,0:ELSE,0:FOR,1:CALL,2:IF,3:DO,0:WHILE,1:SWITCH,0	70
0x4000571	              0x55	                                push rbp	       290	ldlang.c	FUNCTION_8
0x4000572	          0x4889e5	                            mov rbp, rsp	       290	ldlang.c	FUNCTION_8
0x4000575	        0x4883ec40	                           sub rsp, 0x40	       290	ldlang.c	FUNCTION_8
0x4000579	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       290	ldlang.c	FUNCTION_8
0x400057d	        0x488975d0	             mov qword [rbp - 0x30], rsi	       290	ldlang.c	FUNCTION_8
0x4000581	        0x488955c8	             mov qword [rbp - 0x38], rdx	       290	ldlang.c	FUNCTION_8
0x4000585	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       290	ldlang.c	FUNCTION_8
0x4000589	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       294	ldlang.c	FUNCTION_8	FOR_1
0x400058d	        0x488b4020	            mov rax, qword [rax + 0x20] 	       294	ldlang.c	FUNCTION_8	FOR_1
0x4000591	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       294	ldlang.c	FUNCTION_8	FOR_1
0x4000598	        0x488945e8	             mov qword [rbp - 0x18], rax	       294	ldlang.c	FUNCTION_8	FOR_1
0x400059c	      0xe9c6000000	                           jmp 0x4000667	       294	ldlang.c	FUNCTION_8	FOR_1
0x40005a1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       296	ldlang.c	FUNCTION_8	FOR_1
0x40005a5	        0x488b4020	            mov rax, qword [rax + 0x20] 	       296	ldlang.c	FUNCTION_8	FOR_1
0x40005a9	        0x488945f0	             mov qword [rbp - 0x10], rax	       296	ldlang.c	FUNCTION_8	FOR_1
0x40005ad	      0x48837df000	               cmp qword [rbp - 0x10], 0	       297	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005b2	     0xf859c000000	                           jne 0x4000654	       297	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005b8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005bc	        0x488b4878	            mov rcx, qword [rax + 0x78] 	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005c0	        0x4c8b4dc0	              mov r9, qword [rbp - 0x40]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005c4	        0x4c8b45d0	              mov r8, qword [rbp - 0x30]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005c8	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005cc	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005d0	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005d4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005d8	            0xffd0	                                call rax	       298	ldlang.c	FUNCTION_8	FOR_1	IF_1
0x40005da	            0xeb78	                           jmp 0x4000654	       300	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x40005dc	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       302	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x40005e3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       304	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005e7	        0x488b4008	                mov rax, qword [rax + 8]	       304	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005eb	          0x4885c0	                           test rax, rax	       304	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005ee	            0x742d	                            je 0x400061d	       304	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       306	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005f4	          0x488b00	                    mov rax, qword [rax]	       306	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005f7	        0x488945f8	                mov qword [rbp - 8], rax	       306	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2
0x40005fb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x40005ff	        0x488b4008	                mov rax, qword [rax + 8]	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x4000603	        0x488b55f8	                mov rdx, qword [rbp - 8]	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x4000607	          0x4889d6	                            mov rsi, rdx	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x400060a	          0x4889c7	                            mov rdi, rax	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x400060d	      0xe8a3fbffff	                     call sym.name_match	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x4000612	            0x85c0	                           test eax, eax	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x4000614	           0xf95c0	                                setne al	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x4000617	           0xfb6c0	                           movzx eax, al	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x400061a	          0x8945e4	             mov dword [rbp - 0x1c], eax	       308	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_2	CALL_1
0x400061d	        0x837de400	               cmp dword [rbp - 0x1c], 0	       311	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_3
0x4000621	            0x7526	                           jne 0x4000649	       311	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	IF_3
0x4000623	        0x4c8b45c0	              mov r8, qword [rbp - 0x40]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000627	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x400062b	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x400062f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000633	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000637	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x400063b	          0x4d89c1	                              mov r9, r8	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x400063e	          0x4989f8	                             mov r8, rdi	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000641	          0x4889c7	                            mov rdi, rax	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000644	      0xe8c6feffff	     call sym.walk_wild_consider_section	       312	ldlang.c	FUNCTION_8	FOR_1	WHILE_1	CALL_2
0x4000649	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       314	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x400064d	          0x488b00	                    mov rax, qword [rax]	       314	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x4000650	        0x488945f0	             mov qword [rbp - 0x10], rax	       314	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x4000654	      0x48837df000	               cmp qword [rbp - 0x10], 0	       300	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x4000659	            0x7581	                           jne 0x40005dc	       300	ldlang.c	FUNCTION_8	FOR_1	WHILE_1
0x400065b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       294	ldlang.c	FUNCTION_8	FOR_1
0x400065f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       294	ldlang.c	FUNCTION_8	FOR_1
0x4000663	        0x488945e8	             mov qword [rbp - 0x18], rax	       294	ldlang.c	FUNCTION_8	FOR_1
0x4000667	      0x48837de800	               cmp qword [rbp - 0x18], 0	       294	ldlang.c	FUNCTION_8	FOR_1
0x400066c	     0xf852fffffff	                           jne 0x40005a1	       294	ldlang.c	FUNCTION_8	FOR_1
0x4000672	              0x90	                                     nop	       317	ldlang.c	FUNCTION_8
0x4000673	              0xc9	                                   leave	       317	ldlang.c	FUNCTION_8
0x4000674	              0xc3	                                     ret	       317	ldlang.c	FUNCTION_8
insert_undefined	functions,0:ELSE,0:FOR,0:CALL,5:IF,3:DO,0:WHILE,0:SWITCH,0	43
0x4005f1b	              0x55	                                push rbp	      3406	ldlang.c	FUNCTION_80
0x4005f1c	          0x4889e5	                            mov rbp, rsp	      3406	ldlang.c	FUNCTION_80
0x4005f1f	        0x4883ec20	                           sub rsp, 0x20	      3406	ldlang.c	FUNCTION_80
0x4005f23	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3406	ldlang.c	FUNCTION_80
0x4005f27	    0x488b05000000	            mov rax, qword [0x04005f2e] 	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f2e	        0x488b75e8	             mov rsi, qword [rbp - 0x18]	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f32	    0x41b801000000	                              mov r8d, 1	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f38	      0xb900000000	                              mov ecx, 0	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f3d	      0xba01000000	                              mov edx, 1	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f42	          0x4889c7	                            mov rdi, rax	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f45	      0xe800000000	                          call 0x4005f4a	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f4a	        0x488945f8	                mov qword [rbp - 8], rax	      3409	ldlang.c	FUNCTION_80	CALL_1
0x4005f4e	      0x48837df800	                  cmp qword [rbp - 8], 0	      3410	ldlang.c	FUNCTION_80	IF_1
0x4005f53	            0x7517	                           jne 0x4005f6c	      3410	ldlang.c	FUNCTION_80	IF_1
0x4005f55	      0xbf00000000	                              mov edi, 0	      3411	ldlang.c	FUNCTION_80	CALL_3
0x4005f5a	      0xe800000000	                          call 0x4005f5f	      3411	ldlang.c	FUNCTION_80	CALL_3
0x4005f5f	          0x4889c7	                            mov rdi, rax	      3411	ldlang.c	FUNCTION_80	CALL_3
0x4005f62	      0xb800000000	                              mov eax, 0	      3411	ldlang.c	FUNCTION_80	CALL_3
0x4005f67	      0xe800000000	                          call 0x4005f6c	      3411	ldlang.c	FUNCTION_80	CALL_3
0x4005f6c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3412	ldlang.c	FUNCTION_80	IF_2
0x4005f70	         0xfb64018	           movzx eax, byte [rax + 0x18] 	      3412	ldlang.c	FUNCTION_80	IF_2
0x4005f74	            0x84c0	                             test al, al	      3412	ldlang.c	FUNCTION_80	IF_2
0x4005f76	            0x7547	                           jne 0x4005fbf	      3412	ldlang.c	FUNCTION_80	IF_2
0x4005f78	        0x488b45f8	                mov rax, qword [rbp - 8]	      3414	ldlang.c	FUNCTION_80	IF_2
0x4005f7c	        0xc6401801	                mov byte [rax + 0x18], 1	      3414	ldlang.c	FUNCTION_80	IF_2
0x4005f80	        0x488b45f8	                mov rax, qword [rbp - 8]	      3415	ldlang.c	FUNCTION_80	IF_2
0x4005f84	    0x48c740280000	               mov qword [rax + 0x28], 0	      3415	ldlang.c	FUNCTION_80	IF_2
0x4005f8c	    0x488b05000000	            mov rax, qword [0x04005f93] 	      3416	ldlang.c	FUNCTION_80	IF_2	IF_3	CALL_4
0x4005f93	          0x8b4040	            mov eax, dword [rax + 0x40] 	      3416	ldlang.c	FUNCTION_80	IF_2	IF_3	CALL_4
0x4005f96	          0x83f801	                              cmp eax, 1	      3416	ldlang.c	FUNCTION_80	IF_2	IF_3	CALL_4
0x4005f99	            0x750e	                           jne 0x4005fa9	      3416	ldlang.c	FUNCTION_80	IF_2	IF_3	CALL_4
0x4005f9b	        0x488b45f8	                mov rax, qword [rbp - 8]	      3417	ldlang.c	FUNCTION_80	IF_2	IF_3
0x4005f9f	         0xfb65064	           movzx edx, byte [rax + 0x64] 	      3417	ldlang.c	FUNCTION_80	IF_2	IF_3
0x4005fa3	          0x83ca20	                            or edx, 0x20	      3417	ldlang.c	FUNCTION_80	IF_2	IF_3
0x4005fa6	          0x885064	               mov byte [rax + 0x64], dl	      3417	ldlang.c	FUNCTION_80	IF_2	IF_3
0x4005fa9	    0x488b05000000	            mov rax, qword [0x04005fb0] 	      3418	ldlang.c	FUNCTION_80	IF_2	CALL_5
0x4005fb0	        0x488b55f8	                mov rdx, qword [rbp - 8]	      3418	ldlang.c	FUNCTION_80	IF_2	CALL_5
0x4005fb4	          0x4889d6	                            mov rsi, rdx	      3418	ldlang.c	FUNCTION_80	IF_2	CALL_5
0x4005fb7	          0x4889c7	                            mov rdi, rax	      3418	ldlang.c	FUNCTION_80	IF_2	CALL_5
0x4005fba	      0xe800000000	                          call 0x4005fbf	      3418	ldlang.c	FUNCTION_80	IF_2	CALL_5
0x4005fbf	              0x90	                                     nop	      3420	ldlang.c	FUNCTION_80
0x4005fc0	              0xc9	                                   leave	      3420	ldlang.c	FUNCTION_80
0x4005fc1	              0xc3	                                     ret	      3420	ldlang.c	FUNCTION_80
lang_add_fill	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	16
0x400d49e	              0x55	                                push rbp	      7537	ldlang.c	FUNCTION_170
0x400d49f	          0x4889e5	                            mov rbp, rsp	      7537	ldlang.c	FUNCTION_170
0x400d4a2	        0x4883ec20	                           sub rsp, 0x20	      7537	ldlang.c	FUNCTION_170
0x400d4a6	        0x48897de8	             mov qword [rbp - 0x18], rdi	      7537	ldlang.c	FUNCTION_170
0x400d4aa	    0x488b05000000	            mov rax, qword [0x0400d4b1] 	      7540	ldlang.c	FUNCTION_170
0x400d4b1	          0x4889c2	                            mov rdx, rax	      7540	ldlang.c	FUNCTION_170
0x400d4b4	      0xbe28000000	                           mov esi, 0x28	      7540	ldlang.c	FUNCTION_170
0x400d4b9	      0xbf07000000	                              mov edi, 7	      7540	ldlang.c	FUNCTION_170
0x400d4be	      0xe8ac45ffff	                  call sym.new_statement	      7540	ldlang.c	FUNCTION_170
0x400d4c3	        0x488945f8	                mov qword [rbp - 8], rax	      7540	ldlang.c	FUNCTION_170
0x400d4c7	        0x488b45f8	                mov rax, qword [rbp - 8]	      7541	ldlang.c	FUNCTION_170
0x400d4cb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7541	ldlang.c	FUNCTION_170
0x400d4cf	        0x48895010	             mov qword [rax + 0x10], rdx	      7541	ldlang.c	FUNCTION_170
0x400d4d3	              0x90	                                     nop	      7542	ldlang.c	FUNCTION_170
0x400d4d4	              0xc9	                                   leave	      7542	ldlang.c	FUNCTION_170
0x400d4d5	              0xc3	                                     ret	      7542	ldlang.c	FUNCTION_170
foreach_start_stop	functions,0:ELSE,0:FOR,1:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	21
0x400afd7	              0x55	                                push rbp	      6070	ldlang.c	FUNCTION_127
0x400afd8	          0x4889e5	                            mov rbp, rsp	      6070	ldlang.c	FUNCTION_127
0x400afdb	        0x4883ec20	                           sub rsp, 0x20	      6070	ldlang.c	FUNCTION_127
0x400afdf	        0x48897de8	             mov qword [rbp - 0x18], rdi	      6070	ldlang.c	FUNCTION_127
0x400afe3	    0x48c745f80000	                  mov qword [rbp - 8], 0	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400afeb	            0xeb23	                           jmp 0x400b010	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400afed	    0x488b05000000	            mov rax, qword [0x0400aff4] 	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400aff4	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400aff8	        0x48c1e203	                              shl rdx, 3	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400affc	          0x4801d0	                            add rax, rdx	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400afff	          0x488b10	                    mov rdx, qword [rax]	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400b002	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400b006	          0x4889d7	                            mov rdi, rdx	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400b009	            0xffd0	                                call rax	      6074	ldlang.c	FUNCTION_127	CALL_1
0x400b00b	      0x488345f801	                  add qword [rbp - 8], 1	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400b010	    0x488b05000000	            mov rax, qword [0x0400b017] 	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400b017	        0x483945f8	                cmp qword [rbp - 8], rax	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400b01b	            0x72d0	                            jb 0x400afed	      6073	ldlang.c	FUNCTION_127	FOR_1
0x400b01d	              0x90	                                     nop	      6075	ldlang.c	FUNCTION_127
0x400b01e	              0xc9	                                   leave	      6075	ldlang.c	FUNCTION_127
0x400b01f	              0xc3	                                     ret	      6075	ldlang.c	FUNCTION_127
lang_process	functions,0:ELSE,2:FOR,1:CALL,66:IF,21:DO,0:WHILE,1:SWITCH,0	341
0x400cc46	              0x55	                                push rbp	      7157	ldlang.c	FUNCTION_163
0x400cc47	          0x4889e5	                            mov rbp, rsp	      7157	ldlang.c	FUNCTION_163
0x400cc4a	              0x53	                                push rbx	      7157	ldlang.c	FUNCTION_163
0x400cc4b	        0x4883ec78	                           sub rsp, 0x78	      7157	ldlang.c	FUNCTION_163
0x400cc4f	    0x64488b042528	                mov rax, qword fs:[0x28]	      7157	ldlang.c	FUNCTION_163
0x400cc58	        0x488945e8	             mov qword [rbp - 0x18], rax	      7157	ldlang.c	FUNCTION_163
0x400cc5c	            0x31c0	                            xor eax, eax	      7157	ldlang.c	FUNCTION_163
0x400cc5e	    0x488b05000000	            mov rax, qword [0x0400cc65] 	      7159	ldlang.c	FUNCTION_163	IF_1
0x400cc65	          0x4885c0	                           test rax, rax	      7159	ldlang.c	FUNCTION_163	IF_1
0x400cc68	            0x740f	                            je 0x400cc79	      7159	ldlang.c	FUNCTION_163	IF_1
0x400cc6a	    0x488b05000000	            mov rax, qword [0x0400cc71] 	      7160	ldlang.c	FUNCTION_163	CALL_1
0x400cc71	          0x4889c7	                            mov rdi, rax	      7160	ldlang.c	FUNCTION_163	CALL_1
0x400cc74	      0xe8901e0000	call sym.lang_finalize_version_expr_head	      7160	ldlang.c	FUNCTION_163	CALL_1
0x400cc79	    0x488b05000000	            mov rax, qword [0x0400cc80] 	      7162	ldlang.c	FUNCTION_163
0x400cc80	    0x488905000000	            mov qword [0x0400cc87], rax 	      7162	ldlang.c	FUNCTION_163
0x400cc87	      0xbf00000000	                              mov edi, 0	      7165	ldlang.c	FUNCTION_163	CALL_2
0x400cc8c	      0xe800000000	                          call 0x400cc91	      7165	ldlang.c	FUNCTION_163	CALL_2
0x400cc91	      0xe8078effff	                       call sym.init_opb	      7166	ldlang.c	FUNCTION_163	CALL_3
0x400cc96	      0xe800000000	                          call 0x400cc9b	      7168	ldlang.c	FUNCTION_163	CALL_4
0x400cc9b	      0xe82293ffff	          call sym.lang_place_undefineds	      7171	ldlang.c	FUNCTION_163	CALL_5
0x400cca0	      0xe800000000	                          call 0x400cca5	      7173	ldlang.c	FUNCTION_163	IF_2	CALL_6
0x400cca5	            0x85c0	                           test eax, eax	      7173	ldlang.c	FUNCTION_163	IF_2	CALL_6
0x400cca7	            0x7517	                           jne 0x400ccc0	      7173	ldlang.c	FUNCTION_163	IF_2	CALL_6
0x400cca9	      0xbf00000000	                              mov edi, 0	      7174	ldlang.c	FUNCTION_163	CALL_8
0x400ccae	      0xe800000000	                          call 0x400ccb3	      7174	ldlang.c	FUNCTION_163	CALL_8
0x400ccb3	          0x4889c7	                            mov rdi, rax	      7174	ldlang.c	FUNCTION_163	CALL_8
0x400ccb6	      0xb800000000	                              mov eax, 0	      7174	ldlang.c	FUNCTION_163	CALL_8
0x400ccbb	      0xe800000000	                          call 0x400ccc0	      7174	ldlang.c	FUNCTION_163	CALL_8
0x400ccc0	    0x488b05000000	            mov rax, qword [0x0400ccc7] 	      7177	ldlang.c	FUNCTION_163
0x400ccc7	    0x488905000000	            mov qword [0x0400ccce], rax 	      7177	ldlang.c	FUNCTION_163
0x400ccce	    0x8b0500000000	            mov eax, dword [0x0400ccd4] 	      7178	ldlang.c	FUNCTION_163
0x400ccd4	          0x83c001	                              add eax, 1	      7178	ldlang.c	FUNCTION_163
0x400ccd7	    0x890500000000	            mov dword [0x0400ccdd], eax 	      7178	ldlang.c	FUNCTION_163
0x400ccdd	    0x488b05000000	            mov rax, qword [0x0400cce4] 	      7179	ldlang.c	FUNCTION_163	CALL_9
0x400cce4	      0xbe00000000	                              mov esi, 0	      7179	ldlang.c	FUNCTION_163	CALL_9
0x400cce9	          0x4889c7	                            mov rdi, rax	      7179	ldlang.c	FUNCTION_163	CALL_9
0x400ccec	      0xe8148effff	                call sym.open_input_bfds	      7179	ldlang.c	FUNCTION_163	CALL_9
0x400ccf1	     0xfb605000000	           movzx eax, byte [0x0400ccf8] 	      7182	ldlang.c	FUNCTION_163	IF_3
0x400ccf8	          0x83e002	                              and eax, 2	      7182	ldlang.c	FUNCTION_163	IF_3
0x400ccfb	            0x84c0	                             test al, al	      7182	ldlang.c	FUNCTION_163	IF_3
0x400ccfd	     0xf8490020000	                            je 0x400cf93	      7182	ldlang.c	FUNCTION_163	IF_3
0x400cd03	    0x488b05000000	            mov rax, qword [0x0400cd0a] 	      7193	ldlang.c	FUNCTION_163	IF_3
0x400cd0a	        0x488b5008	                mov rdx, qword [rax + 8]	      7193	ldlang.c	FUNCTION_163	IF_3
0x400cd0e	          0x488b00	                    mov rax, qword [rax]	      7193	ldlang.c	FUNCTION_163	IF_3
0x400cd11	        0x488945b0	             mov qword [rbp - 0x50], rax	      7193	ldlang.c	FUNCTION_163	IF_3
0x400cd15	        0x488955b8	             mov qword [rbp - 0x48], rdx	      7193	ldlang.c	FUNCTION_163	IF_3
0x400cd19	    0x488b05000000	            mov rax, qword [0x0400cd20] 	      7195	ldlang.c	FUNCTION_163	IF_3
0x400cd20	    0x488b15000000	            mov rdx, qword [0x0400cd27] 	      7195	ldlang.c	FUNCTION_163	IF_3
0x400cd27	        0x488945c0	             mov qword [rbp - 0x40], rax	      7195	ldlang.c	FUNCTION_163	IF_3
0x400cd2b	        0x488955c8	             mov qword [rbp - 0x38], rdx	      7195	ldlang.c	FUNCTION_163	IF_3
0x400cd2f	    0x488b05000000	            mov rax, qword [0x0400cd36] 	      7196	ldlang.c	FUNCTION_163	IF_3
0x400cd36	    0x488b15000000	            mov rdx, qword [0x0400cd3d] 	      7196	ldlang.c	FUNCTION_163	IF_3
0x400cd3d	        0x488945d0	             mov qword [rbp - 0x30], rax	      7196	ldlang.c	FUNCTION_163	IF_3
0x400cd41	        0x488955d8	             mov qword [rbp - 0x28], rdx	      7196	ldlang.c	FUNCTION_163	IF_3
0x400cd45	      0xe800000000	                          call 0x400cd4a	      7197	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_10
0x400cd4a	            0x85c0	                           test eax, eax	      7197	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_10
0x400cd4c	            0x7422	                            je 0x400cd70	      7197	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_10
0x400cd4e	      0xe800000000	                          call 0x400cd53	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd53	          0x4889c3	                            mov rbx, rax	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd56	      0xbf00000000	                              mov edi, 0	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd5b	      0xe800000000	                          call 0x400cd60	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd60	          0x4889de	                            mov rsi, rbx	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd63	          0x4889c7	                            mov rdi, rax	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd66	      0xb800000000	                              mov eax, 0	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd6b	      0xe800000000	                          call 0x400cd70	      7198	ldlang.c	FUNCTION_163	IF_3	IF_4	CALL_12
0x400cd70	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      7201	ldlang.c	FUNCTION_163	IF_3	CALL_14
0x400cd74	          0x488b00	                    mov rax, qword [rax]	      7201	ldlang.c	FUNCTION_163	IF_3	CALL_14
0x400cd77	      0xbe00000000	                              mov esi, 0	      7201	ldlang.c	FUNCTION_163	IF_3	CALL_14
0x400cd7c	          0x4889c7	                            mov rdi, rax	      7201	ldlang.c	FUNCTION_163	IF_3	CALL_14
0x400cd7f	      0xe8818dffff	                call sym.open_input_bfds	      7201	ldlang.c	FUNCTION_163	IF_3	CALL_14
0x400cd84	    0x488b05000000	            mov rax, qword [0x0400cd8b] 	      7203	ldlang.c	FUNCTION_163	IF_3	CALL_15
0x400cd8b	        0x488d55b0	                   lea rdx, [rbp - 0x50]	      7203	ldlang.c	FUNCTION_163	IF_3	CALL_15
0x400cd8f	          0x4889d6	                            mov rsi, rdx	      7203	ldlang.c	FUNCTION_163	IF_3	CALL_15
0x400cd92	          0x4889c7	                            mov rdi, rax	      7203	ldlang.c	FUNCTION_163	IF_3	CALL_15
0x400cd95	      0xe808fdffff	          call sym.lang_list_remove_tail	      7203	ldlang.c	FUNCTION_163	IF_3	CALL_15
0x400cd9a	        0x488d45c0	                   lea rax, [rbp - 0x40]	      7205	ldlang.c	FUNCTION_163	IF_3	CALL_16
0x400cd9e	          0x4889c6	                            mov rsi, rax	      7205	ldlang.c	FUNCTION_163	IF_3	CALL_16
0x400cda1	      0xbf00000000	                              mov edi, 0	      7205	ldlang.c	FUNCTION_163	IF_3	CALL_16
0x400cda6	      0xe8f7fcffff	          call sym.lang_list_remove_tail	      7205	ldlang.c	FUNCTION_163	IF_3	CALL_16
0x400cdab	        0x488d45d0	                   lea rax, [rbp - 0x30]	      7206	ldlang.c	FUNCTION_163	IF_3	CALL_17
0x400cdaf	          0x4889c6	                            mov rsi, rax	      7206	ldlang.c	FUNCTION_163	IF_3	CALL_17
0x400cdb2	      0xbf00000000	                              mov edi, 0	      7206	ldlang.c	FUNCTION_163	IF_3	CALL_17
0x400cdb7	      0xe8e6fcffff	          call sym.lang_list_remove_tail	      7206	ldlang.c	FUNCTION_163	IF_3	CALL_17
0x400cdbc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      7208	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400cdc0	          0x4885c0	                           test rax, rax	      7208	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400cdc3	     0xf84ca010000	                            je 0x400cf93	      7208	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400cdc9	      0xe8cbfaffff	 call sym.find_replacements_insert_point	      7212	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_18
0x400cdce	    0x488905000000	            mov qword [0x0400cdd5], rax 	      7212	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_18
0x400cdd5	    0x488b05000000	            mov rax, qword [0x0400cddc] 	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cddc	          0x4885c0	                           test rax, rax	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cddf	            0x750f	                           jne 0x400cdf0	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cde1	      0xbe311c0000	                         mov esi, 0x1c31	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cde6	      0xbf00000000	                              mov edi, 0	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cdeb	      0xe800000000	                          call 0x400cdf0	      7217	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_19
0x400cdf0	    0x488b05000000	            mov rax, qword [0x0400cdf7] 	      7220	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400cdf7	          0x4889c2	                            mov rdx, rax	      7220	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400cdfa	    0x488b05000000	            mov rax, qword [0x0400ce01] 	      7219	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_20
0x400ce01	        0x488d4db0	                   lea rcx, [rbp - 0x50]	      7219	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_20
0x400ce05	          0x4889ce	                            mov rsi, rcx	      7219	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_20
0x400ce08	          0x4889c7	                            mov rdi, rax	      7219	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_20
0x400ce0b	      0xe841fcffff	         call sym.lang_list_insert_after	      7219	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_20
0x400ce10	    0x488b05000000	            mov rax, qword [0x0400ce17] 	      7223	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce17	        0x488d5038	                   lea rdx, [rax + 0x38]	      7223	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce1b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      7222	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_21
0x400ce1f	          0x4889c6	                            mov rsi, rax	      7222	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_21
0x400ce22	      0xbf00000000	                              mov edi, 0	      7222	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_21
0x400ce27	      0xe825fcffff	         call sym.lang_list_insert_after	      7222	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_21
0x400ce2c	    0x488b05000000	            mov rax, qword [0x0400ce33] 	      7227	ldlang.c	FUNCTION_163	IF_3	IF_5	IF_6
0x400ce33	        0x488b4010	            mov rax, qword [rax + 0x10] 	      7227	ldlang.c	FUNCTION_163	IF_3	IF_5	IF_6
0x400ce37	          0x4885c0	                           test rax, rax	      7227	ldlang.c	FUNCTION_163	IF_3	IF_5	IF_6
0x400ce3a	            0x741e	                            je 0x400ce5a	      7227	ldlang.c	FUNCTION_163	IF_3	IF_5	IF_6
0x400ce3c	    0x488b05000000	            mov rax, qword [0x0400ce43] 	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce43	        0x488d5030	                   lea rdx, [rax + 0x30]	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce47	        0x488d45c0	                   lea rax, [rbp - 0x40]	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce4b	          0x4889c6	                            mov rsi, rax	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce4e	      0xbf00000000	                              mov edi, 0	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce53	      0xe8f9fbffff	         call sym.lang_list_insert_after	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce58	            0xeb16	                           jmp 0x400ce70	      7228	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_22
0x400ce5a	        0x488d45c0	                   lea rax, [rbp - 0x40]	      7230	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_23
0x400ce5e	      0xba00000000	                              mov edx, 0	      7230	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_23
0x400ce63	          0x4889c6	                            mov rsi, rax	      7230	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_23
0x400ce66	      0xbf00000000	                              mov edi, 0	      7230	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_23
0x400ce6b	      0xe8e1fbffff	         call sym.lang_list_insert_after	      7230	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_23
0x400ce70	    0x488b05000000	            mov rax, qword [0x0400ce77] 	      7233	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce77	    0x488b15000000	            mov rdx, qword [0x0400ce7e] 	      7233	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce7e	        0x488945c0	             mov qword [rbp - 0x40], rax	      7233	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce82	        0x488955c8	             mov qword [rbp - 0x38], rdx	      7233	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce86	    0x8b0500000000	            mov eax, dword [0x0400ce8c] 	      7234	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce8c	          0x83c001	                              add eax, 1	      7234	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce8f	    0x890500000000	            mov dword [0x0400ce95], eax 	      7234	ldlang.c	FUNCTION_163	IF_3	IF_5
0x400ce95	    0x488b05000000	            mov rax, qword [0x0400ce9c] 	      7235	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_24
0x400ce9c	      0xbe02000000	                              mov esi, 2	      7235	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_24
0x400cea1	          0x4889c7	                            mov rdi, rax	      7235	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_24
0x400cea4	      0xe85c8cffff	                call sym.open_input_bfds	      7235	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_24
0x400cea9	        0x488d45c0	                   lea rax, [rbp - 0x40]	      7236	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_25
0x400cead	          0x4889c6	                            mov rsi, rax	      7236	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_25
0x400ceb0	      0xbf00000000	                              mov edi, 0	      7236	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_25
0x400ceb5	      0xe8e8fbffff	          call sym.lang_list_remove_tail	      7236	ldlang.c	FUNCTION_163	IF_3	IF_5	CALL_25
0x400ceba	      0xe9c7000000	                           jmp 0x400cf86	      7237	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cebf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7243	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	CALL_26
0x400cec3	          0x4889c7	                            mov rdi, rax	      7243	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	CALL_26
0x400cec6	      0xe856faffff	          call sym.find_rescan_insertion	      7243	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	CALL_26
0x400cecb	        0x48894588	             mov qword [rbp - 0x78], rax	      7243	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	CALL_26
0x400cecf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7245	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400ced3	        0x4883c030	                           add rax, 0x30	      7245	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400ced7	        0x48894580	             mov qword [rbp - 0x80], rax	      7245	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cedb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7246	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cedf	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7246	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cee3	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7246	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400ceea	        0x48894590	             mov qword [rbp - 0x70], rax	      7246	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400ceee	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      7247	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7
0x400cef3	            0x7438	                            je 0x400cf2d	      7247	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7
0x400cef5	            0xeb27	                           jmp 0x400cf1e	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cef7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cefb	          0x488b00	                    mov rax, qword [rax]	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cefe	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cf02	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cf09	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cf0d	            0x751d	                           jne 0x400cf2c	      7249	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cf0f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf13	          0x488b00	                    mov rax, qword [rax]	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf16	        0x4883c030	                           add rax, 0x30	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf1a	        0x48894580	             mov qword [rbp - 0x80], rax	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf1e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf22	          0x488b00	                    mov rax, qword [rax]	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf25	          0x4885c0	                           test rax, rax	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf28	            0x75cd	                           jne 0x400cef7	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf2a	            0xeb01	                           jmp 0x400cf2d	      7248	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1
0x400cf2c	              0x90	                                     nop	      7250	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_7	FOR_1	IF_8
0x400cf2d	        0x488b4588	             mov rax, qword [rbp - 0x78]	      7251	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf31	          0x488b00	                    mov rax, qword [rax]	      7251	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf34	        0x48894598	             mov qword [rbp - 0x68], rax	      7251	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf38	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      7252	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf3c	        0x488b4588	             mov rax, qword [rbp - 0x78]	      7252	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf40	          0x488910	                    mov qword [rax], rdx	      7252	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf43	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7253	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf47	          0x488b00	                    mov rax, qword [rax]	      7253	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf4a	        0x488945c0	             mov qword [rbp - 0x40], rax	      7253	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf4e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7254	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf52	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      7254	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf56	          0x488910	                    mov qword [rax], rdx	      7254	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf59	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      7255	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9
0x400cf5e	            0x7426	                            je 0x400cf86	      7255	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9
0x400cf60	        0x488b4590	             mov rax, qword [rbp - 0x70]	      7257	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9
0x400cf64	    0x488b80000100	           mov rax, qword [rax + 0x100] 	      7257	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9
0x400cf6b	        0x488945a0	             mov qword [rbp - 0x60], rax	      7257	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9
0x400cf6f	      0x48837da000	               cmp qword [rbp - 0x60], 0	      7258	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf74	            0x7410	                            je 0x400cf86	      7258	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf76	        0x488b4580	             mov rax, qword [rbp - 0x80]	      7259	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf7a	        0x488d50d0	                   lea rdx, [rax - 0x30]	      7259	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf7e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      7259	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf82	        0x48895030	             mov qword [rax + 0x30], rdx	      7259	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1	IF_9	IF_10
0x400cf86	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7237	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf8a	          0x4885c0	                           test rax, rax	      7237	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf8d	     0xf852cffffff	                           jne 0x400cebf	      7237	ldlang.c	FUNCTION_163	IF_3	IF_5	WHILE_1
0x400cf93	    0x488b05000000	            mov rax, qword [0x0400cf9a] 	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cf9a	          0x4885c0	                           test rax, rax	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cf9d	            0x740f	                            je 0x400cfae	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cf9f	      0xbe661c0000	                         mov esi, 0x1c66	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cfa4	      0xbf00000000	                              mov edi, 0	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cfa9	      0xe800000000	                          call 0x400cfae	      7270	ldlang.c	FUNCTION_163	CALL_27
0x400cfae	    0x48c705000000	               mov qword [0x0400cfb9], 0	      7272	ldlang.c	FUNCTION_163
0x400cfb9	    0x488b05000000	            mov rax, qword [0x0400cfc0] 	      7274	ldlang.c	FUNCTION_163	IF_11
0x400cfc0	          0x4885c0	                           test rax, rax	      7274	ldlang.c	FUNCTION_163	IF_11
0x400cfc3	            0x751d	                           jne 0x400cfe2	      7274	ldlang.c	FUNCTION_163	IF_11
0x400cfc5	    0x488b05000000	            mov rax, qword [0x0400cfcc] 	      7276	ldlang.c	FUNCTION_163	IF_11
0x400cfcc	    0x488905000000	            mov qword [0x0400cfd3], rax 	      7276	ldlang.c	FUNCTION_163	IF_11
0x400cfd3	    0x488b05000000	            mov rax, qword [0x0400cfda] 	      7286	ldlang.c	FUNCTION_163	IF_11	CALL_28
0x400cfda	          0x4889c7	                            mov rdi, rax	      7286	ldlang.c	FUNCTION_163	IF_11	CALL_28
0x400cfdd	      0xe800000000	                          call 0x400cfe2	      7286	ldlang.c	FUNCTION_163	IF_11	CALL_28
0x400cfe2	    0x488b05000000	            mov rax, qword [0x0400cfe9] 	      7289	ldlang.c	FUNCTION_163	CALL_29
0x400cfe9	          0x4889c7	                            mov rdi, rax	      7289	ldlang.c	FUNCTION_163	CALL_29
0x400cfec	      0xe800000000	                          call 0x400cff1	      7289	ldlang.c	FUNCTION_163	CALL_29
0x400cff1	    0x488b05000000	            mov rax, qword [0x0400cff8] 	      7290	ldlang.c	FUNCTION_163	CALL_30
0x400cff8	          0x4889c7	                            mov rdi, rax	      7290	ldlang.c	FUNCTION_163	CALL_30
0x400cffb	      0xe800000000	                          call 0x400d000	      7290	ldlang.c	FUNCTION_163	CALL_30
0x400d000	      0xe800000000	                          call 0x400d005	      7292	ldlang.c	FUNCTION_163	CALL_31
0x400d005	    0x488b05000000	            mov rax, qword [0x0400d00c] 	      7293	ldlang.c	FUNCTION_163	IF_12
0x400d00c	          0x4885c0	                           test rax, rax	      7293	ldlang.c	FUNCTION_163	IF_12
0x400d00f	            0x7405	                            je 0x400d016	      7293	ldlang.c	FUNCTION_163	IF_12
0x400d011	      0xe86a65ffff	            call sym.lang_print_asneeded	      7294	ldlang.c	FUNCTION_163	CALL_32
0x400d016	      0xe800000000	                          call 0x400d01b	      7296	ldlang.c	FUNCTION_163	CALL_33
0x400d01b	      0xe83de5ffff	                     call sym.lang_check	      7303	ldlang.c	FUNCTION_163	CALL_34
0x400d020	    0x488b05000000	            mov rax, qword [0x0400d027] 	      7306	ldlang.c	FUNCTION_163	IF_13
0x400d027	          0x4885c0	                           test rax, rax	      7306	ldlang.c	FUNCTION_163	IF_13
0x400d02a	            0x7405	                            je 0x400d031	      7306	ldlang.c	FUNCTION_163	IF_13
0x400d02c	      0xe864220000	call sym.lang_do_version_exports_section	      7307	ldlang.c	FUNCTION_163	CALL_35
0x400d031	      0xe800000000	                          call 0x400d036	      7311	ldlang.c	FUNCTION_163	CALL_36
0x400d036	    0x8b0500000000	            mov eax, dword [0x0400d03c] 	      7316	ldlang.c	FUNCTION_163	IF_14
0x400d03c	            0x85c0	                           test eax, eax	      7316	ldlang.c	FUNCTION_163	IF_14
0x400d03e	            0x7405	                            je 0x400d045	      7316	ldlang.c	FUNCTION_163	IF_14
0x400d040	      0xe8feddffff	           call sym.lang_init_start_stop	      7317	ldlang.c	FUNCTION_163	CALL_37
0x400d045	      0xbf01000000	                              mov edi, 1	      7321	ldlang.c	FUNCTION_163	CALL_38
0x400d04a	      0xe800000000	                          call 0x400d04f	      7321	ldlang.c	FUNCTION_163	CALL_38
0x400d04f	      0xe8b8230000	         call sym.lang_do_memory_regions	      7323	ldlang.c	FUNCTION_163	CALL_39
0x400d054	    0xc70500000000	               mov dword [0x0400d05e], 0	      7324	ldlang.c	FUNCTION_163
0x400d05e	      0xe813e7ffff	                    call sym.lang_common	      7327	ldlang.c	FUNCTION_163	CALL_40
0x400d063	      0xe88df4ffff	               call sym.lang_gc_sections	      7330	ldlang.c	FUNCTION_163	CALL_41
0x400d068	      0xe8f6faffff	              call sym.lang_check_relocs	      7333	ldlang.c	FUNCTION_163	CALL_42
0x400d06d	      0xe800000000	                          call 0x400d072	      7335	ldlang.c	FUNCTION_163	CALL_43
0x400d072	    0x488b05000000	            mov rax, qword [0x0400d079] 	      7338	ldlang.c	FUNCTION_163	CALL_44
0x400d079	          0x4889c7	                            mov rdi, rax	      7338	ldlang.c	FUNCTION_163	CALL_44
0x400d07c	      0xe84191ffff	         call sym.update_wild_statements	      7338	ldlang.c	FUNCTION_163	CALL_44
0x400d081	    0x8b0500000000	            mov eax, dword [0x0400d087] 	      7342	ldlang.c	FUNCTION_163
0x400d087	          0x83c001	                              add eax, 1	      7342	ldlang.c	FUNCTION_163
0x400d08a	    0x890500000000	            mov dword [0x0400d090], eax 	      7342	ldlang.c	FUNCTION_163
0x400d090	    0x488b05000000	            mov rax, qword [0x0400d097] 	      7343	ldlang.c	FUNCTION_163	CALL_45
0x400d097	      0xba00000000	                              mov edx, 0	      7343	ldlang.c	FUNCTION_163	CALL_45
0x400d09c	      0xbe00000000	                              mov esi, 0	      7343	ldlang.c	FUNCTION_163	CALL_45
0x400d0a1	          0x4889c7	                            mov rdi, rax	      7343	ldlang.c	FUNCTION_163	CALL_45
0x400d0a4	      0xe88792ffff	   call sym.map_input_to_output_sections	      7343	ldlang.c	FUNCTION_163	CALL_45
0x400d0a9	      0xe88c95ffff	      call sym.process_insert_statements	      7345	ldlang.c	FUNCTION_163	CALL_46
0x400d0ae	      0xe894ecffff	             call sym.lang_place_orphans	      7348	ldlang.c	FUNCTION_163	CALL_47
0x400d0b3	     0xfb605000000	           movzx eax, byte [0x0400d0ba] 	      7350	ldlang.c	FUNCTION_163	IF_15	CALL_48
0x400d0ba	          0x83e003	                              and eax, 3	      7350	ldlang.c	FUNCTION_163	IF_15	CALL_48
0x400d0bd	            0x3c02	                               cmp al, 2	      7350	ldlang.c	FUNCTION_163	IF_15	CALL_48
0x400d0bf	            0x7474	                            je 0x400d135	      7350	ldlang.c	FUNCTION_163	IF_15	CALL_48
0x400d0c1	    0x488b05000000	            mov rax, qword [0x0400d0c8] 	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0c8	        0x488b4008	                mov rax, qword [rax + 8]	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0cc	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0d3	    0x488b15000000	            mov rdx, qword [0x0400d0da] 	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0da	      0xbe00000000	                              mov esi, 0	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0df	          0x4889d7	                            mov rdi, rdx	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0e2	            0xffd0	                                call rax	      7358	ldlang.c	FUNCTION_163	IF_15
0x400d0e4	    0x488b05000000	            mov rax, qword [0x0400d0eb] 	      7361	ldlang.c	FUNCTION_163	IF_15	CALL_49
0x400d0eb	      0xbe00000000	                              mov esi, 0	      7361	ldlang.c	FUNCTION_163	IF_15	CALL_49
0x400d0f0	          0x4889c7	                            mov rdi, rax	      7361	ldlang.c	FUNCTION_163	IF_15	CALL_49
0x400d0f3	      0xe800000000	                          call 0x400d0f8	      7361	ldlang.c	FUNCTION_163	IF_15	CALL_49
0x400d0f8	        0x488945a8	             mov qword [rbp - 0x58], rax	      7361	ldlang.c	FUNCTION_163	IF_15	CALL_49
0x400d0fc	      0x48837da800	               cmp qword [rbp - 0x58], 0	      7363	ldlang.c	FUNCTION_163	IF_15	IF_16
0x400d101	            0x7432	                            je 0x400d135	      7363	ldlang.c	FUNCTION_163	IF_15	IF_16
0x400d103	    0x8b0500000000	            mov eax, dword [0x0400d109] 	      7365	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d109	            0x85c0	                           test eax, eax	      7365	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d10b	            0x7415	                            je 0x400d122	      7365	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d10d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d111	          0x8b4020	            mov eax, dword [rax + 0x20] 	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d114	          0x83c808	                               or eax, 8	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d117	            0x89c2	                            mov edx, eax	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d119	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d11d	          0x895020	             mov dword [rax + 0x20], edx	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d120	            0xeb13	                           jmp 0x400d135	      7366	ldlang.c	FUNCTION_163	IF_15	IF_16	IF_17
0x400d122	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d126	          0x8b4020	            mov eax, dword [rax + 0x20] 	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d129	          0x83e0f7	                     and eax, 0xfffffff7	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d12c	            0x89c2	                            mov edx, eax	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d12e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d132	          0x895020	             mov dword [rax + 0x20], edx	      7368	ldlang.c	FUNCTION_163	IF_15	IF_16	ELSE_2
0x400d135	      0xe884faffff	     call sym.lang_propagate_lma_regions	      7373	ldlang.c	FUNCTION_163	CALL_50
0x400d13a	    0x8b0500000000	            mov eax, dword [0x0400d140] 	      7378	ldlang.c	FUNCTION_163	IF_18
0x400d140	            0x85c0	                           test eax, eax	      7378	ldlang.c	FUNCTION_163	IF_18
0x400d142	            0x7405	                            je 0x400d149	      7378	ldlang.c	FUNCTION_163	IF_18
0x400d144	      0xe864dfffff	          call sym.lang_undef_start_stop	      7379	ldlang.c	FUNCTION_163	CALL_51
0x400d149	     0xfb605000000	           movzx eax, byte [0x0400d150] 	      7383	ldlang.c	FUNCTION_163	IF_19	CALL_52
0x400d150	          0x83e003	                              and eax, 3	      7383	ldlang.c	FUNCTION_163	IF_19	CALL_52
0x400d153	            0x3c02	                               cmp al, 2	      7383	ldlang.c	FUNCTION_163	IF_19	CALL_52
0x400d155	            0x7405	                            je 0x400d15c	      7383	ldlang.c	FUNCTION_163	IF_19	CALL_52
0x400d157	      0xe862dfffff	       call sym.lang_init_startof_sizeof	      7384	ldlang.c	FUNCTION_163	CALL_53
0x400d15c	      0xe800000000	                          call 0x400d161	      7388	ldlang.c	FUNCTION_163	CALL_54
0x400d161	      0xe8eb080000	              call sym.lang_record_phdrs	      7392	ldlang.c	FUNCTION_163	CALL_55
0x400d166	     0xfb605000000	           movzx eax, byte [0x0400d16d] 	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d16d	          0x83e010	                           and eax, 0x10	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d170	            0x84c0	                             test al, al	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d172	            0x7413	                            je 0x400d187	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d174	     0xfb605000000	           movzx eax, byte [0x0400d17b] 	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d17b	          0x83e003	                              and eax, 3	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d17e	            0x3c02	                               cmp al, 2	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d180	            0x7405	                            je 0x400d187	      7395	ldlang.c	FUNCTION_163	IF_20	CALL_56
0x400d182	      0xe8c5f5ffff	       call sym.lang_find_relro_sections	      7396	ldlang.c	FUNCTION_163	CALL_57
0x400d187	    0x8b0500000000	            mov eax, dword [0x0400d18d] 	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d18d	            0x85c0	                           test eax, eax	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d18f	            0x7412	                            je 0x400d1a3	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d191	    0x8b0500000000	            mov eax, dword [0x0400d197] 	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d197	          0x83f801	                              cmp eax, 1	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d19a	            0x7407	                            je 0x400d1a3	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d19c	      0xb801000000	                              mov eax, 1	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1a1	            0xeb05	                           jmp 0x400d1a8	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1a3	      0xb800000000	                              mov eax, 0	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1a8	            0x89c6	                            mov esi, eax	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1aa	      0xbf00000000	                              mov edi, 0	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1af	      0xe800000000	                          call 0x400d1b4	      7399	ldlang.c	FUNCTION_163	CALL_58
0x400d1b4	      0xe800000000	                          call 0x400d1b9	      7403	ldlang.c	FUNCTION_163	CALL_59
0x400d1b9	      0xe8b4e0ffff	       call sym.lang_finalize_start_stop	      7406	ldlang.c	FUNCTION_163	CALL_60
0x400d1be	      0xbf04000000	                              mov edi, 4	      7410	ldlang.c	FUNCTION_163	CALL_61
0x400d1c3	      0xe800000000	                          call 0x400d1c8	      7410	ldlang.c	FUNCTION_163	CALL_61
0x400d1c8	      0xe800000000	                          call 0x400d1cd	      7412	ldlang.c	FUNCTION_163	CALL_62
0x400d1cd	      0xe800000000	                          call 0x400d1d2	      7415	ldlang.c	FUNCTION_163	CALL_63
0x400d1d2	     0xfb605000000	           movzx eax, byte [0x0400d1d9] 	      7418	ldlang.c	FUNCTION_163	IF_21
0x400d1d9	            0x84c0	                             test al, al	      7418	ldlang.c	FUNCTION_163	IF_21
0x400d1db	            0x7405	                            je 0x400d1e2	      7418	ldlang.c	FUNCTION_163	IF_21
0x400d1dd	      0xe8a7b4ffff	   call sym.lang_check_section_addresses	      7419	ldlang.c	FUNCTION_163	CALL_64
0x400d1e2	      0xe8738effff	call sym.ldlang_check_require_defined_symbols	      7422	ldlang.c	FUNCTION_163	CALL_65
0x400d1e7	      0xe897e0ffff	                       call sym.lang_end	      7424	ldlang.c	FUNCTION_163	CALL_66
0x400d1ec	              0x90	                                     nop	      7425	ldlang.c	FUNCTION_163
0x400d1ed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7425	ldlang.c	FUNCTION_163
0x400d1f1	    0x644833042528	                xor rax, qword fs:[0x28]	      7425	ldlang.c	FUNCTION_163
0x400d1fa	            0x7405	                            je 0x400d201	      7425	ldlang.c	FUNCTION_163
0x400d1fc	      0xe800000000	                          call 0x400d201	      7425	ldlang.c	FUNCTION_163
0x400d201	        0x4883c478	                           add rsp, 0x78	      7425	ldlang.c	FUNCTION_163
0x400d205	              0x5b	                                 pop rbx	      7425	ldlang.c	FUNCTION_163
0x400d206	              0x5d	                                 pop rbp	      7425	ldlang.c	FUNCTION_163
0x400d207	              0xc3	                                     ret	      7425	ldlang.c	FUNCTION_163
lang_size_relro_segment	functions,0:ELSE,1:FOR,0:CALL,4:IF,4:DO,0:WHILE,0:SWITCH,0	50
0x400a3de	              0x55	                                push rbp	      5671	ldlang.c	FUNCTION_120
0x400a3df	          0x4889e5	                            mov rbp, rsp	      5671	ldlang.c	FUNCTION_120
0x400a3e2	        0x4883ec30	                           sub rsp, 0x30	      5671	ldlang.c	FUNCTION_120
0x400a3e6	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      5671	ldlang.c	FUNCTION_120
0x400a3ea	          0x8975d4	             mov dword [rbp - 0x2c], esi	      5671	ldlang.c	FUNCTION_120
0x400a3ed	    0xc745e8000000	               mov dword [rbp - 0x18], 0	      5672	ldlang.c	FUNCTION_120
0x400a3f4	     0xfb605000000	           movzx eax, byte [0x0400a3fb] 	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a3fb	          0x83e010	                           and eax, 0x10	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a3fe	            0x84c0	                             test al, al	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a400	            0x742e	                            je 0x400a430	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a402	    0x488b05000000	            mov rax, qword [0x0400a409] 	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a409	          0x4885c0	                           test rax, rax	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a40c	            0x7422	                            je 0x400a430	      5676	ldlang.c	FUNCTION_120	IF_1
0x400a40e	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      5678	ldlang.c	FUNCTION_120	IF_1
0x400a415	    0x488b05000000	            mov rax, qword [0x0400a41c] 	      5679	ldlang.c	FUNCTION_120	IF_1
0x400a41c	        0x488945f0	             mov qword [rbp - 0x10], rax	      5679	ldlang.c	FUNCTION_120	IF_1
0x400a420	      0xbf00000000	                              mov edi, 0	      5680	ldlang.c	FUNCTION_120	IF_1	CALL_1
0x400a425	      0xe83cfeffff	      call sym.lang_size_relro_segment_1	      5680	ldlang.c	FUNCTION_120	IF_1	CALL_1
0x400a42a	        0x488945f8	                mov qword [rbp - 8], rax	      5680	ldlang.c	FUNCTION_120	IF_1	CALL_1
0x400a42e	            0xeb17	                           jmp 0x400a447	      5680	ldlang.c	FUNCTION_120	IF_1	CALL_1
0x400a430	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      5684	ldlang.c	FUNCTION_120	ELSE_1
0x400a437	    0x48c745f80000	                  mov qword [rbp - 8], 0	      5685	ldlang.c	FUNCTION_120	ELSE_1
0x400a43f	        0x488b45f8	                mov rax, qword [rbp - 8]	      5685	ldlang.c	FUNCTION_120	ELSE_1
0x400a443	        0x488945f0	             mov qword [rbp - 0x10], rax	      5685	ldlang.c	FUNCTION_120	ELSE_1
0x400a447	        0x837dec00	               cmp dword [rbp - 0x14], 0	      5688	ldlang.c	FUNCTION_120	IF_2
0x400a44b	            0x743b	                            je 0x400a488	      5688	ldlang.c	FUNCTION_120	IF_2
0x400a44d	      0xe800000000	                          call 0x400a452	      5690	ldlang.c	FUNCTION_120	IF_2	CALL_2
0x400a452	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      5691	ldlang.c	FUNCTION_120	IF_2	CALL_3
0x400a455	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      5691	ldlang.c	FUNCTION_120	IF_2	CALL_3
0x400a459	            0x89d6	                            mov esi, edx	      5691	ldlang.c	FUNCTION_120	IF_2	CALL_3
0x400a45b	          0x4889c7	                            mov rdi, rax	      5691	ldlang.c	FUNCTION_120	IF_2	CALL_3
0x400a45e	      0xe800000000	                          call 0x400a463	      5691	ldlang.c	FUNCTION_120	IF_2	CALL_3
0x400a463	        0x837dec00	               cmp dword [rbp - 0x14], 0	      5695	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a467	            0x741f	                            je 0x400a488	      5695	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a469	    0x488b05000000	            mov rax, qword [0x0400a470] 	      5695	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a470	        0x483b45f8	                cmp rax, qword [rbp - 8]	      5695	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a474	            0x7612	                           jbe 0x400a488	      5695	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a476	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5697	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a47a	    0x488905000000	            mov qword [0x0400a481], rax 	      5697	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a481	    0xc745e8010000	               mov dword [rbp - 0x18], 1	      5698	ldlang.c	FUNCTION_120	IF_2	IF_3
0x400a488	        0x837dec00	               cmp dword [rbp - 0x14], 0	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a48c	            0x7515	                           jne 0x400a4a3	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a48e	      0xbf00000000	                              mov edi, 0	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a493	      0xe81cfdffff	              call sym.lang_size_segment	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a498	            0x85c0	                           test eax, eax	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a49a	            0x7407	                            je 0x400a4a3	      5702	ldlang.c	FUNCTION_120	IF_4	CALL_4
0x400a49c	    0xc745e8010000	               mov dword [rbp - 0x18], 1	      5703	ldlang.c	FUNCTION_120	IF_4
0x400a4a3	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      5705	ldlang.c	FUNCTION_120
0x400a4a6	              0xc9	                                   leave	      5706	ldlang.c	FUNCTION_120
0x400a4a7	              0xc3	                                     ret	      5706	ldlang.c	FUNCTION_120
lang_record_phdrs	functions,0:ELSE,3:FOR,6:CALL,14:IF,15:DO,0:WHILE,0:SWITCH,0	254
0x400da51	              0x55	                                push rbp	      7776	ldlang.c	FUNCTION_185
0x400da52	          0x4889e5	                            mov rbp, rsp	      7776	ldlang.c	FUNCTION_185
0x400da55	            0x4154	                                push r12	      7776	ldlang.c	FUNCTION_185
0x400da57	              0x53	                                push rbx	      7776	ldlang.c	FUNCTION_185
0x400da58	        0x4883ec50	                           sub rsp, 0x50	      7776	ldlang.c	FUNCTION_185
0x400da5c	    0xc745a40a0000	             mov dword [rbp - 0x5c], 0xa	      7783	ldlang.c	FUNCTION_185
0x400da63	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      7784	ldlang.c	FUNCTION_185	CALL_1
0x400da66	        0x48c1e003	                              shl rax, 3	      7784	ldlang.c	FUNCTION_185	CALL_1
0x400da6a	          0x4889c7	                            mov rdi, rax	      7784	ldlang.c	FUNCTION_185	CALL_1
0x400da6d	      0xe800000000	                          call 0x400da72	      7784	ldlang.c	FUNCTION_185	CALL_1
0x400da72	        0x488945b0	             mov qword [rbp - 0x50], rax	      7784	ldlang.c	FUNCTION_185	CALL_1
0x400da76	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      7785	ldlang.c	FUNCTION_185
0x400da7e	    0x488b05000000	            mov rax, qword [0x0400da85] 	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400da85	        0x488945c0	             mov qword [rbp - 0x40], rax	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400da89	      0xe9ae020000	                           jmp 0x400dd3c	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400da8e	    0xc745a8000000	               mov dword [rbp - 0x58], 0	      7793	ldlang.c	FUNCTION_185	FOR_1
0x400da95	    0x488b05000000	            mov rax, qword [0x0400da9c] 	      7794	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400da9c	        0x488945c8	             mov qword [rbp - 0x38], rax	      7794	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400daa0	      0xe998010000	                           jmp 0x400dc3d	      7794	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400daa5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7800	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400daa9	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      7800	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400daaf	            0x85c0	                           test eax, eax	      7800	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400dab1	     0xf8870010000	                            js 0x400dc27	      7800	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400dab7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7803	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dabb	        0x488b4070	            mov rax, qword [rax + 0x70] 	      7803	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dabf	        0x488945d8	             mov qword [rbp - 0x28], rax	      7803	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dac3	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      7804	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_2
0x400dac8	            0x740d	                            je 0x400dad7	      7804	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_2
0x400daca	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7805	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_2
0x400dace	        0x488945b8	             mov qword [rbp - 0x48], rax	      7805	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_2
0x400dad2	      0xe9b1000000	                           jmp 0x400db88	      7805	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_2
0x400dad7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7808	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dadb	    0x8b808c000000	            mov eax, dword [rax + 0x8c] 	      7808	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dae1	          0x83f802	                              cmp eax, 2	      7808	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dae4	     0xf8440010000	                            je 0x400dc2a	      7808	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400daea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7809	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400daee	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7809	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400daf2	          0x4885c0	                           test rax, rax	      7809	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400daf5	     0xf842f010000	                            je 0x400dc2a	      7809	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dafb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400daff	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400db03	          0x8b4020	            mov eax, dword [rax + 0x20] 	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400db06	          0x83e001	                              and eax, 1	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400db09	            0x85c0	                           test eax, eax	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400db0b	     0xf8419010000	                            je 0x400dc2a	      7810	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400db11	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7814	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400db15	        0x488b4010	            mov rax, qword [rax + 0x10] 	      7814	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400db19	        0x4883f803	                              cmp rax, 3	      7814	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400db1d	     0xf840a010000	                            je 0x400dc2d	      7814	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400db23	      0x48837db800	               cmp qword [rbp - 0x48], 0	      7817	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5
0x400db28	            0x7556	                           jne 0x400db80	      7817	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5
0x400db2a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db2e	        0x488945e0	             mov qword [rbp - 0x20], rax	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db32	            0xeb27	                           jmp 0x400db5b	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db34	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7830	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db38	        0x488b4070	            mov rax, qword [rax + 0x70] 	      7830	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db3c	          0x4885c0	                           test rax, rax	      7830	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db3f	            0x740e	                            je 0x400db4f	      7830	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db41	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7832	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db45	        0x488b4070	            mov rax, qword [rax + 0x70] 	      7832	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db49	        0x488945b8	             mov qword [rbp - 0x48], rax	      7832	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db4d	            0xeb13	                           jmp 0x400db62	      7833	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3	IF_6
0x400db4f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db53	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db57	        0x488945e0	             mov qword [rbp - 0x20], rax	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db5b	      0x48837de000	               cmp qword [rbp - 0x20], 0	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db60	            0x75d2	                           jne 0x400db34	      7829	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	FOR_3
0x400db62	      0x48837db800	               cmp qword [rbp - 0x48], 0	      7835	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	IF_7
0x400db67	            0x7517	                           jne 0x400db80	      7835	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	IF_7
0x400db69	      0xbf00000000	                              mov edi, 0	      7836	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	CALL_3
0x400db6e	      0xe800000000	                          call 0x400db73	      7836	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	CALL_3
0x400db73	          0x4889c7	                            mov rdi, rax	      7836	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	CALL_3
0x400db76	      0xb800000000	                              mov eax, 0	      7836	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	CALL_3
0x400db7b	      0xe800000000	                          call 0x400db80	      7836	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_5	CALL_3
0x400db80	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      7838	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1
0x400db84	        0x488945d8	             mov qword [rbp - 0x28], rax	      7838	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1
0x400db88	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7841	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_8
0x400db8c	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7841	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_8
0x400db90	          0x4885c0	                           test rax, rax	      7841	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_8
0x400db93	     0xf8497000000	                            je 0x400dc30	      7841	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_8
0x400db99	            0xeb7f	                           jmp 0x400dc1a	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400db9b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400db9f	        0x488b5008	                mov rdx, qword [rax + 8]	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dba3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dba7	        0x488b4008	                mov rax, qword [rax + 8]	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbab	          0x4889d6	                            mov rsi, rdx	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbae	          0x4889c7	                            mov rdi, rax	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbb1	      0xe800000000	                          call 0x400dbb6	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbb6	            0x85c0	                           test eax, eax	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbb8	            0x7555	                           jne 0x400dc0f	      7846	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	CALL_4
0x400dbba	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      7848	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10
0x400dbbd	          0x3b45a4	             cmp eax, dword [rbp - 0x5c]	      7848	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10
0x400dbc0	            0x7221	                            jb 0x400dbe3	      7848	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10
0x400dbc2	          0xd165a4	               shl dword [rbp - 0x5c], 1	      7850	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10
0x400dbc5	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbc8	    0x488d14c50000	                        lea rdx, [rax*8]	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbd0	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbd4	          0x4889d6	                            mov rsi, rdx	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbd7	          0x4889c7	                            mov rdi, rax	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbda	      0xe800000000	                          call 0x400dbdf	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbdf	        0x488945b0	             mov qword [rbp - 0x50], rax	      7851	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9	IF_10	CALL_5
0x400dbe3	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbe6	    0x488d14c50000	                        lea rdx, [rax*8]	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbee	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbf2	          0x4801c2	                            add rdx, rax	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbf5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbf9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dbfd	          0x488902	                    mov qword [rdx], rax	      7854	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dc00	        0x8345a801	               add dword [rbp - 0x58], 1	      7855	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dc04	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7856	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dc08	    0xc74010010000	               mov dword [rax + 0x10], 1	      7856	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4	IF_9
0x400dc0f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc13	          0x488b00	                    mov rax, qword [rax]	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc16	        0x488945d8	             mov qword [rbp - 0x28], rax	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc1a	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc1f	     0xf8576ffffff	                           jne 0x400db9b	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc25	            0xeb0a	                           jmp 0x400dc31	      7844	ldlang.c	FUNCTION_185	FOR_1	FOR_2	FOR_4
0x400dc27	              0x90	                                     nop	      7801	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400dc28	            0xeb07	                           jmp 0x400dc31	      7801	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_1
0x400dc2a	              0x90	                                     nop	      7811	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dc2b	            0xeb04	                           jmp 0x400dc31	      7811	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_3
0x400dc2d	              0x90	                                     nop	      7815	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400dc2e	            0xeb01	                           jmp 0x400dc31	      7815	ldlang.c	FUNCTION_185	FOR_1	FOR_2	ELSE_1	IF_4
0x400dc30	              0x90	                                     nop	      7842	ldlang.c	FUNCTION_185	FOR_1	FOR_2	IF_8
0x400dc31	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7796	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dc35	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7796	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dc39	        0x488945c8	             mov qword [rbp - 0x38], rax	      7796	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dc3d	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      7794	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dc42	     0xf855dfeffff	                           jne 0x400daa5	      7794	ldlang.c	FUNCTION_185	FOR_1	FOR_2
0x400dc48	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7861	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc4c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7861	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc50	          0x4885c0	                           test rax, rax	      7861	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc53	            0x7509	                           jne 0x400dc5e	      7861	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc55	    0xc745ac000000	               mov dword [rbp - 0x54], 0	      7862	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc5c	            0xeb1d	                           jmp 0x400dc7b	      7862	ldlang.c	FUNCTION_185	FOR_1	IF_11
0x400dc5e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc62	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc66	      0xba00000000	                              mov edx, 0	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc6b	      0xbe00000000	                              mov esi, 0	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc70	          0x4889c7	                            mov rdi, rax	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc73	      0xe800000000	                          call 0x400dc78	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc78	          0x8945ac	             mov dword [rbp - 0x54], eax	      7864	ldlang.c	FUNCTION_185	FOR_1	CALL_6
0x400dc7b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7866	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc7f	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7866	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc83	          0x4885c0	                           test rax, rax	      7866	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc86	            0x750a	                           jne 0x400dc92	      7866	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc88	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      7867	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc90	            0xeb1e	                           jmp 0x400dcb0	      7867	ldlang.c	FUNCTION_185	FOR_1	IF_12
0x400dc92	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dc96	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dc9a	      0xba00000000	                              mov edx, 0	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dc9f	      0xbe00000000	                              mov esi, 0	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dca4	          0x4889c7	                            mov rdi, rax	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dca7	      0xe800000000	                          call 0x400dcac	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dcac	        0x488945d0	             mov qword [rbp - 0x30], rax	      7869	ldlang.c	FUNCTION_185	FOR_1	CALL_7
0x400dcb0	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcb4	        0x448b401c	            mov r8d, dword [rax + 0x1c] 	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcb8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcbc	          0x8b7818	            mov edi, dword [rax + 0x18] 	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcbf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7872	ldlang.c	FUNCTION_185	FOR_1	IF_13
0x400dcc3	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7872	ldlang.c	FUNCTION_185	FOR_1	IF_13
0x400dcc7	          0x4885c0	                           test rax, rax	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcca	           0xf95c0	                                setne al	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dccd	        0x440fb6d0	                          movzx r10d, al	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcd1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7872	ldlang.c	FUNCTION_185	FOR_1	IF_13
0x400dcd5	        0x488b4028	            mov rax, qword [rax + 0x28] 	      7872	ldlang.c	FUNCTION_185	FOR_1	IF_13
0x400dcd9	          0x4885c0	                           test rax, rax	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcdc	           0xf95c0	                                setne al	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcdf	           0xfb6d0	                           movzx edx, al	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dce2	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dce6	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcea	    0x488b05000000	            mov rax, qword [0x0400dcf1] 	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcf1	        0x4c8b5dd0	             mov r11, qword [rbp - 0x30]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcf5	          0x8b4dac	             mov ecx, dword [rbp - 0x54]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcf8	          0xff75b0	                 push qword [rbp - 0x50]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcfb	        0x448b4da8	             mov r9d, dword [rbp - 0x58]	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dcff	            0x4151	                                 push r9	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd01	            0x4150	                                 push r8	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd03	              0x57	                                push rdi	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd04	          0x4d89d9	                             mov r9, r11	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd07	          0x4589d0	                           mov r8d, r10d	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd0a	          0x4889c7	                            mov rdi, rax	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd0d	      0xe800000000	                          call 0x400dd12	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd12	        0x4883c420	                           add rsp, 0x20	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd16	            0x85c0	                           test eax, eax	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd18	            0x7517	                           jne 0x400dd31	      7871	ldlang.c	FUNCTION_185	FOR_1	IF_13	CALL_8
0x400dd1a	      0xbf00000000	                              mov edi, 0	      7874	ldlang.c	FUNCTION_185	FOR_1	CALL_10
0x400dd1f	      0xe800000000	                          call 0x400dd24	      7874	ldlang.c	FUNCTION_185	FOR_1	CALL_10
0x400dd24	          0x4889c7	                            mov rdi, rax	      7874	ldlang.c	FUNCTION_185	FOR_1	CALL_10
0x400dd27	      0xb800000000	                              mov eax, 0	      7874	ldlang.c	FUNCTION_185	FOR_1	CALL_10
0x400dd2c	      0xe800000000	                          call 0x400dd31	      7874	ldlang.c	FUNCTION_185	FOR_1	CALL_10
0x400dd31	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400dd35	          0x488b00	                    mov rax, qword [rax]	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400dd38	        0x488945c0	             mov qword [rbp - 0x40], rax	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400dd3c	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400dd41	     0xf8547fdffff	                           jne 0x400da8e	      7787	ldlang.c	FUNCTION_185	FOR_1
0x400dd47	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      7877	ldlang.c	FUNCTION_185	CALL_11
0x400dd4b	          0x4889c7	                            mov rdi, rax	      7877	ldlang.c	FUNCTION_185	CALL_11
0x400dd4e	      0xe800000000	                          call 0x400dd53	      7877	ldlang.c	FUNCTION_185	CALL_11
0x400dd53	    0x488b05000000	            mov rax, qword [0x0400dd5a] 	      7880	ldlang.c	FUNCTION_185	FOR_5
0x400dd5a	        0x488945c8	             mov qword [rbp - 0x38], rax	      7880	ldlang.c	FUNCTION_185	FOR_5
0x400dd5e	      0xe99f000000	                           jmp 0x400de02	      7880	ldlang.c	FUNCTION_185	FOR_5
0x400dd63	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7886	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd67	    0x8b8084000000	            mov eax, dword [rax + 0x84] 	      7886	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd6d	            0x85c0	                           test eax, eax	      7886	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd6f	     0xf8880000000	                            js 0x400ddf5	      7886	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd75	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7887	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd79	        0x488b4038	            mov rax, qword [rax + 0x38] 	      7887	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd7d	          0x4885c0	                           test rax, rax	      7887	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd80	            0x7473	                            je 0x400ddf5	      7887	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400dd82	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dd86	        0x488b4070	            mov rax, qword [rax + 0x70] 	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dd8a	        0x488945e8	             mov qword [rbp - 0x18], rax	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dd8e	            0xeb5c	                           jmp 0x400ddec	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dd90	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dd94	          0x8b4010	            mov eax, dword [rax + 0x10] 	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dd97	            0x85c0	                           test eax, eax	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dd99	            0x7546	                           jne 0x400dde1	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dd9b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dd9f	        0x488b4008	                mov rax, qword [rax + 8]	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dda3	      0xbe00000000	                              mov esi, 0	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400dda8	          0x4889c7	                            mov rdi, rax	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400ddab	      0xe800000000	                          call 0x400ddb0	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400ddb0	            0x85c0	                           test eax, eax	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400ddb2	            0x742d	                            je 0x400dde1	      7893	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_12
0x400ddb4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddb8	        0x4c8b6008	                mov r12, qword [rax + 8]	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddbc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddc0	        0x488b5830	            mov rbx, qword [rax + 0x30] 	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddc4	      0xbf00000000	                              mov edi, 0	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddc9	      0xe800000000	                          call 0x400ddce	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddce	          0x4c89e2	                            mov rdx, r12	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddd1	          0x4889de	                            mov rsi, rbx	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddd4	          0x4889c7	                            mov rdi, rax	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400ddd7	      0xb800000000	                              mov eax, 0	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400dddc	      0xe800000000	                          call 0x400dde1	      7894	ldlang.c	FUNCTION_185	FOR_5	FOR_6	IF_15	CALL_14
0x400dde1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7892	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dde5	          0x488b00	                    mov rax, qword [rax]	      7892	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400dde8	        0x488945e8	             mov qword [rbp - 0x18], rax	      7892	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400ddec	      0x48837de800	               cmp qword [rbp - 0x18], 0	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400ddf1	            0x759d	                           jne 0x400dd90	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400ddf3	            0xeb01	                           jmp 0x400ddf6	      7890	ldlang.c	FUNCTION_185	FOR_5	FOR_6
0x400ddf5	              0x90	                                     nop	      7888	ldlang.c	FUNCTION_185	FOR_5	IF_14
0x400ddf6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      7882	ldlang.c	FUNCTION_185	FOR_5
0x400ddfa	        0x488b4020	            mov rax, qword [rax + 0x20] 	      7882	ldlang.c	FUNCTION_185	FOR_5
0x400ddfe	        0x488945c8	             mov qword [rbp - 0x38], rax	      7882	ldlang.c	FUNCTION_185	FOR_5
0x400de02	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      7880	ldlang.c	FUNCTION_185	FOR_5
0x400de07	     0xf8556ffffff	                           jne 0x400dd63	      7880	ldlang.c	FUNCTION_185	FOR_5
0x400de0d	              0x90	                                     nop	      7897	ldlang.c	FUNCTION_185
0x400de0e	        0x488d65f0	                   lea rsp, [rbp - 0x10]	      7897	ldlang.c	FUNCTION_185
0x400de12	              0x5b	                                 pop rbx	      7897	ldlang.c	FUNCTION_185
0x400de13	            0x415c	                                 pop r12	      7897	ldlang.c	FUNCTION_185
0x400de15	              0x5d	                                 pop rbp	      7897	ldlang.c	FUNCTION_185
0x400de16	              0xc3	                                     ret	      7897	ldlang.c	FUNCTION_185
lang_place_undefineds	functions,0:ELSE,0:FOR,1:CALL,1:IF,0:DO,0:WHILE,0:SWITCH,0	18
0x4005fc2	              0x55	                                push rbp	      3428	ldlang.c	FUNCTION_81
0x4005fc3	          0x4889e5	                            mov rbp, rsp	      3428	ldlang.c	FUNCTION_81
0x4005fc6	        0x4883ec10	                           sub rsp, 0x10	      3428	ldlang.c	FUNCTION_81
0x4005fca	    0x488b05000000	            mov rax, qword [0x04005fd1] 	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005fd1	        0x488945f8	                mov qword [rbp - 8], rax	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005fd5	            0xeb1b	                           jmp 0x4005ff2	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005fd7	        0x488b45f8	                mov rax, qword [rbp - 8]	      3432	ldlang.c	FUNCTION_81	CALL_1
0x4005fdb	        0x488b4008	                mov rax, qword [rax + 8]	      3432	ldlang.c	FUNCTION_81	CALL_1
0x4005fdf	          0x4889c7	                            mov rdi, rax	      3432	ldlang.c	FUNCTION_81	CALL_1
0x4005fe2	      0xe834ffffff	               call sym.insert_undefined	      3432	ldlang.c	FUNCTION_81	CALL_1
0x4005fe7	        0x488b45f8	                mov rax, qword [rbp - 8]	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005feb	          0x488b00	                    mov rax, qword [rax]	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005fee	        0x488945f8	                mov qword [rbp - 8], rax	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005ff2	      0x48837df800	                  cmp qword [rbp - 8], 0	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005ff7	            0x75de	                           jne 0x4005fd7	      3431	ldlang.c	FUNCTION_81	FOR_1
0x4005ff9	              0x90	                                     nop	      3433	ldlang.c	FUNCTION_81
0x4005ffa	              0xc9	                                   leave	      3433	ldlang.c	FUNCTION_81
0x4005ffb	              0xc3	                                     ret	      3433	ldlang.c	FUNCTION_81
lang_add_input_file	functions,0:ELSE,0:FOR,0:CALL,4:IF,1:DO,0:WHILE,0:SWITCH,0	68
0x4001dc2	              0x55	                                push rbp	      1139	ldlang.c	FUNCTION_35
0x4001dc3	          0x4889e5	                            mov rbp, rsp	      1139	ldlang.c	FUNCTION_35
0x4001dc6	        0x4883ec40	                           sub rsp, 0x40	      1139	ldlang.c	FUNCTION_35
0x4001dca	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1139	ldlang.c	FUNCTION_35
0x4001dce	          0x8975d4	             mov dword [rbp - 0x2c], esi	      1139	ldlang.c	FUNCTION_35
0x4001dd1	        0x488955c8	             mov qword [rbp - 0x38], rdx	      1139	ldlang.c	FUNCTION_35
0x4001dd5	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1140	ldlang.c	FUNCTION_35	IF_1
0x4001dda	     0xf84cf000000	                            je 0x4001eaf	      1140	ldlang.c	FUNCTION_35	IF_1
0x4001de0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001de4	           0xfb600	                   movzx eax, byte [rax]	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001de7	            0x3c3d	                            cmp al, 0x3d	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001de9	            0x741e	                            je 0x4001e09	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001deb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001def	      0xba08000000	                              mov edx, 8	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001df4	      0xbe00000000	                              mov esi, 0	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001df9	          0x4889c7	                            mov rdi, rax	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001dfc	      0xe800000000	                          call 0x4001e01	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001e01	            0x85c0	                           test eax, eax	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001e03	     0xf85a6000000	                           jne 0x4001eaf	      1141	ldlang.c	FUNCTION_35	IF_1
0x4001e09	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1146	ldlang.c	FUNCTION_35	IF_1	CALL_2
0x4001e0d	           0xfb600	                   movzx eax, byte [rax]	      1146	ldlang.c	FUNCTION_35	IF_1	CALL_2
0x4001e10	            0x3c3d	                            cmp al, 0x3d	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e12	            0x7507	                           jne 0x4001e1b	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e14	      0xba01000000	                              mov edx, 1	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e19	            0xeb05	                           jmp 0x4001e20	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e1b	      0xba08000000	                              mov edx, 8	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e20	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e24	        0x488d0c02	                    lea rcx, [rdx + rax]	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e28	    0x488b05000000	            mov rax, qword [0x04001e2f] 	      1145	ldlang.c	FUNCTION_35	IF_1	CALL_1
0x4001e2f	      0xba00000000	                              mov edx, 0	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e34	          0x4889ce	                            mov rsi, rcx	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e37	          0x4889c7	                            mov rdi, rax	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e3a	      0xb800000000	                              mov eax, 0	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e3f	      0xe800000000	                          call 0x4001e44	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e44	        0x488945f0	             mov qword [rbp - 0x10], rax	      1144	ldlang.c	FUNCTION_35	IF_1
0x4001e48	     0xfb605000000	           movzx eax, byte [0x04001e4f] 	      1156	ldlang.c	FUNCTION_35	IF_1
0x4001e4f	          0xc0e803	                               shr al, 3	      1156	ldlang.c	FUNCTION_35	IF_1
0x4001e52	          0x83e001	                              and eax, 1	      1156	ldlang.c	FUNCTION_35	IF_1
0x4001e55	           0xfb6c0	                           movzx eax, al	      1156	ldlang.c	FUNCTION_35	IF_1
0x4001e58	          0x8945ec	             mov dword [rbp - 0x14], eax	      1156	ldlang.c	FUNCTION_35	IF_1
0x4001e5b	     0xfb605000000	           movzx eax, byte [0x04001e62] 	      1157	ldlang.c	FUNCTION_35	IF_1
0x4001e62	          0x83e0f7	                     and eax, 0xfffffff7	      1157	ldlang.c	FUNCTION_35	IF_1
0x4001e65	    0x880500000000	               mov byte [0x04001e6b], al	      1157	ldlang.c	FUNCTION_35	IF_1
0x4001e6b	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e6f	          0x8b75d4	             mov esi, dword [rbp - 0x2c]	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e72	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e76	      0xb901000000	                              mov ecx, 1	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e7b	          0x4889c7	                            mov rdi, rax	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e7e	      0xe841fcffff	                      call sym.new_afile	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e83	        0x488945f8	                mov qword [rbp - 8], rax	      1158	ldlang.c	FUNCTION_35	IF_1	CALL_3
0x4001e87	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001e8a	          0x83e001	                              and eax, 1	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001e8d	          0x83e001	                              and eax, 1	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001e90	    0x8d14c5000000	                        lea edx, [rax*8]	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001e97	     0xfb605000000	           movzx eax, byte [0x04001e9e] 	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001e9e	          0x83e0f7	                     and eax, 0xfffffff7	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001ea1	             0x9d0	                             or eax, edx	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001ea3	    0x880500000000	               mov byte [0x04001ea9], al	      1159	ldlang.c	FUNCTION_35	IF_1
0x4001ea9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1160	ldlang.c	FUNCTION_35	IF_1
0x4001ead	            0xeb18	                           jmp 0x4001ec7	      1160	ldlang.c	FUNCTION_35	IF_1
0x4001eaf	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001eb3	          0x8b75d4	             mov esi, dword [rbp - 0x2c]	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001eb6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001eba	      0xb901000000	                              mov ecx, 1	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001ebf	          0x4889c7	                            mov rdi, rax	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001ec2	      0xe8fdfbffff	                      call sym.new_afile	      1163	ldlang.c	FUNCTION_35	CALL_4
0x4001ec7	              0xc9	                                   leave	      1164	ldlang.c	FUNCTION_35
0x4001ec8	              0xc3	                                     ret	      1164	ldlang.c	FUNCTION_35
lang_float	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	8
0x400d678	              0x55	                                push rbp	      7611	ldlang.c	FUNCTION_176
0x400d679	          0x4889e5	                            mov rbp, rsp	      7611	ldlang.c	FUNCTION_176
0x400d67c	          0x897dfc	                mov dword [rbp - 4], edi	      7611	ldlang.c	FUNCTION_176
0x400d67f	          0x8b45fc	                mov eax, dword [rbp - 4]	      7612	ldlang.c	FUNCTION_176
0x400d682	    0x890500000000	            mov dword [0x0400d688], eax 	      7612	ldlang.c	FUNCTION_176
0x400d688	              0x90	                                     nop	      7613	ldlang.c	FUNCTION_176
0x400d689	              0x5d	                                 pop rbp	      7613	ldlang.c	FUNCTION_176
0x400d68a	              0xc3	                                     ret	      7613	ldlang.c	FUNCTION_176
lang_statement_append	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	15
0x400d7d5	              0x55	                                push rbp	      7672	ldlang.c	FUNCTION_179
0x400d7d6	          0x4889e5	                            mov rbp, rsp	      7672	ldlang.c	FUNCTION_179
0x400d7d9	        0x48897df8	                mov qword [rbp - 8], rdi	      7672	ldlang.c	FUNCTION_179
0x400d7dd	        0x488975f0	             mov qword [rbp - 0x10], rsi	      7672	ldlang.c	FUNCTION_179
0x400d7e1	        0x488955e8	             mov qword [rbp - 0x18], rdx	      7672	ldlang.c	FUNCTION_179
0x400d7e5	        0x488b45f8	                mov rax, qword [rbp - 8]	      7673	ldlang.c	FUNCTION_179
0x400d7e9	        0x488b4008	                mov rax, qword [rax + 8]	      7673	ldlang.c	FUNCTION_179
0x400d7ed	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      7673	ldlang.c	FUNCTION_179
0x400d7f1	          0x488910	                    mov qword [rax], rdx	      7673	ldlang.c	FUNCTION_179
0x400d7f4	        0x488b45f8	                mov rax, qword [rbp - 8]	      7674	ldlang.c	FUNCTION_179
0x400d7f8	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      7674	ldlang.c	FUNCTION_179
0x400d7fc	        0x48895008	                mov qword [rax + 8], rdx	      7674	ldlang.c	FUNCTION_179
0x400d800	              0x90	                                     nop	      7675	ldlang.c	FUNCTION_179
0x400d801	              0x5d	                                 pop rbp	      7675	ldlang.c	FUNCTION_179
0x400d802	              0xc3	                                     ret	      7675	ldlang.c	FUNCTION_179
lang_gc_sections_1	functions,0:ELSE,0:FOR,1:CALL,4:IF,0:DO,0:WHILE,0:SWITCH,1	47
0x400c45f	              0x55	                                push rbp	      6799	ldlang.c	FUNCTION_150
0x400c460	          0x4889e5	                            mov rbp, rsp	      6799	ldlang.c	FUNCTION_150
0x400c463	        0x4883ec10	                           sub rsp, 0x10	      6799	ldlang.c	FUNCTION_150
0x400c467	        0x48897df8	                mov qword [rbp - 8], rdi	      6799	ldlang.c	FUNCTION_150
0x400c46b	            0xeb7a	                           jmp 0x400c4e7	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c46d	        0x488b45f8	                mov rax, qword [rbp - 8]	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c471	          0x8b4008	                mov eax, dword [rax + 8]	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c474	          0x83f804	                              cmp eax, 4	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c477	            0x7417	                            je 0x400c490	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c479	          0x83f804	                              cmp eax, 4	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c47c	            0x7706	                            ja 0x400c484	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c47e	            0x85c0	                           test eax, eax	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c480	            0x7437	                            je 0x400c4b9	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c482	            0xeb58	                           jmp 0x400c4dc	      6817	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c484	          0x83f80d	                            cmp eax, 0xd	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c487	            0x7442	                            je 0x400c4cb	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c489	          0x83f80f	                            cmp eax, 0xf	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c48c	            0x741a	                            je 0x400c4a8	      6802	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c48e	            0xeb4c	                           jmp 0x400c4dc	      6817	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c490	        0x488b45f8	                mov rax, qword [rbp - 8]	      6805	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_1
0x400c494	      0xba00000000	                              mov edx, 0	      6805	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_1
0x400c499	      0xbe00000000	                              mov esi, 0	      6805	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_1
0x400c49e	          0x4889c7	                            mov rdi, rax	      6805	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_1
0x400c4a1	      0xe88b52ffff	                      call sym.walk_wild	      6805	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_1
0x400c4a6	            0xeb34	                           jmp 0x400c4dc	      6806	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c4a8	    0x488b05000000	            mov rax, qword [0x0400c4af] 	      6808	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_2
0x400c4af	          0x4889c7	                            mov rdi, rax	      6808	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_2
0x400c4b2	      0xe8a8ffffff	             call sym.lang_gc_sections_1	      6808	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_2
0x400c4b7	            0xeb23	                           jmp 0x400c4dc	      6809	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c4b9	        0x488b45f8	                mov rax, qword [rbp - 8]	      6811	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_3
0x400c4bd	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6811	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_3
0x400c4c1	          0x4889c7	                            mov rdi, rax	      6811	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_3
0x400c4c4	      0xe896ffffff	             call sym.lang_gc_sections_1	      6811	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_3
0x400c4c9	            0xeb11	                           jmp 0x400c4dc	      6812	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c4cb	        0x488b45f8	                mov rax, qword [rbp - 8]	      6814	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_4
0x400c4cf	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6814	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_4
0x400c4d3	          0x4889c7	                            mov rdi, rax	      6814	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_4
0x400c4d6	      0xe884ffffff	             call sym.lang_gc_sections_1	      6814	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1	CALL_4
0x400c4db	              0x90	                                     nop	      6815	ldlang.c	FUNCTION_150	FOR_1	SWITCH_1
0x400c4dc	        0x488b45f8	                mov rax, qword [rbp - 8]	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c4e0	          0x488b00	                    mov rax, qword [rax]	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c4e3	        0x488945f8	                mov qword [rbp - 8], rax	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c4e7	      0x48837df800	                  cmp qword [rbp - 8], 0	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c4ec	     0xf857bffffff	                           jne 0x400c46d	      6800	ldlang.c	FUNCTION_150	FOR_1
0x400c4f2	              0x90	                                     nop	      6820	ldlang.c	FUNCTION_150
0x400c4f3	              0xc9	                                   leave	      6820	ldlang.c	FUNCTION_150
0x400c4f4	              0xc3	                                     ret	      6820	ldlang.c	FUNCTION_150
lang_place_orphans	functions,1:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	84
0x400bd47	              0x55	                                push rbp	      6520	ldlang.c	FUNCTION_139
0x400bd48	          0x4889e5	                            mov rbp, rsp	      6520	ldlang.c	FUNCTION_139
0x400bd4b	        0x4883ec10	                           sub rsp, 0x10	      6520	ldlang.c	FUNCTION_139
0x400bd4f	    0x488b05000000	            mov rax, qword [0x0400bd56] 	      6521	ldlang.c	FUNCTION_139
0x400bd56	        0x488945f0	             mov qword [rbp - 0x10], rax	      6521	ldlang.c	FUNCTION_139
0x400bd5a	      0xe92d010000	                           jmp 0x400be8c	      6521	ldlang.c	FUNCTION_139
0x400bd5f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400bd63	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400bd67	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400bd6e	        0x488945f8	                mov qword [rbp - 8], rax	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400bd72	      0xe9fe000000	                           jmp 0x400be75	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400bd77	        0x488b45f8	                mov rax, qword [rbp - 8]	      6527	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1
0x400bd7b	        0x488b4068	            mov rax, qword [rax + 0x68] 	      6527	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1
0x400bd7f	          0x4885c0	                           test rax, rax	      6527	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1
0x400bd82	     0xf85e1000000	                           jne 0x400be69	      6527	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1
0x400bd88	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6532	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd8c	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      6532	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd90	          0x83e010	                           and eax, 0x10	      6532	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd93	            0x84c0	                             test al, al	      6532	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd95	            0x7426	                            je 0x400bdbd	      6532	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd97	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd9b	        0x488b4020	            mov rax, qword [rax + 0x20] 	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bd9f	        0x488b4008	                mov rax, qword [rax + 8]	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bda3	    0x488b80c80200	           mov rax, qword [rax + 0x2c8] 	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdaa	        0x488b55f8	                mov rdx, qword [rbp - 8]	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdae	      0xbe00000000	                              mov esi, 0	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdb3	          0x4889d7	                            mov rdi, rdx	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdb6	            0xffd0	                                call rax	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdb8	      0xe9ac000000	                           jmp 0x400be69	      6533	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	IF_2
0x400bdbd	        0x488b45f8	                mov rax, qword [rbp - 8]	      6534	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3	CALL_1
0x400bdc1	          0x4889c7	                            mov rdi, rax	      6534	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3	CALL_1
0x400bdc4	      0xe8ca82ffff	         call sym.lang_discard_section_p	      6534	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3	CALL_1
0x400bdc9	            0x85c0	                           test eax, eax	      6534	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3	CALL_1
0x400bdcb	            0x7411	                            je 0x400bdde	      6534	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3	CALL_1
0x400bdcd	        0x488b45f8	                mov rax, qword [rbp - 8]	      6535	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3
0x400bdd1	    0x48c740680000	               mov qword [rax + 0x68], 0	      6535	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3
0x400bdd9	      0xe98b000000	                           jmp 0x400be69	      6535	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_1	IF_3
0x400bdde	        0x488b45f8	                mov rax, qword [rbp - 8]	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bde2	          0x488b00	                    mov rax, qword [rax]	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bde5	      0xbe00000000	                              mov esi, 0	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bdea	          0x4889c7	                            mov rdi, rax	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bded	      0xe800000000	                          call 0x400bdf2	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bdf2	            0x85c0	                           test eax, eax	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bdf4	            0x7567	                           jne 0x400be5d	      6536	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	CALL_2
0x400bdf6	     0xfb605000000	           movzx eax, byte [0x0400bdfd] 	      6541	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_3
0x400bdfd	          0x83e003	                              and eax, 3	      6541	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_3
0x400be00	            0x3c02	                               cmp al, 2	      6541	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_3
0x400be02	            0x750a	                           jne 0x400be0e	      6541	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_3
0x400be04	    0x8b0500000000	            mov eax, dword [0x0400be0a] 	      6542	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5
0x400be0a	            0x85c0	                           test eax, eax	      6542	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5
0x400be0c	            0x745b	                            je 0x400be69	      6542	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5
0x400be0e	    0x488b05000000	            mov rax, qword [0x0400be15] 	      6544	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6
0x400be15	          0x4885c0	                           test rax, rax	      6544	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6
0x400be18	            0x751b	                           jne 0x400be35	      6544	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6
0x400be1a	      0xba01000000	                              mov edx, 1	      6546	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6	CALL_4
0x400be1f	      0xbe00000000	                              mov esi, 0	      6546	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6	CALL_4
0x400be24	      0xbf00000000	                              mov edi, 0	      6546	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6	CALL_4
0x400be29	      0xe800000000	                          call 0x400be2e	      6546	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6	CALL_4
0x400be2e	    0x488905000000	            mov qword [0x0400be35], rax 	      6546	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	IF_6	CALL_4
0x400be35	    0x488b15000000	            mov rdx, qword [0x0400be3c] 	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be3c	    0x488b05000000	            mov rax, qword [0x0400be43] 	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be43	        0x488d7810	                   lea rdi, [rax + 0x10]	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be47	        0x488b45f8	                mov rax, qword [rbp - 8]	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be4b	          0x4889d1	                            mov rcx, rdx	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be4e	      0xba00000000	                              mov edx, 0	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be53	          0x4889c6	                            mov rsi, rax	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be56	      0xe800000000	                          call 0x400be5b	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be5b	            0xeb0c	                           jmp 0x400be69	      6548	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	ELSE_2	IF_4	IF_5	CALL_5
0x400be5d	        0x488b45f8	                mov rax, qword [rbp - 8]	      6553	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	CALL_6
0x400be61	          0x4889c7	                            mov rdi, rax	      6553	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	CALL_6
0x400be64	      0xe8f2fcffff	            call sym.ldlang_place_orphan	      6553	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1	IF_1	CALL_6
0x400be69	        0x488b45f8	                mov rax, qword [rbp - 8]	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400be6d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400be71	        0x488945f8	                mov qword [rbp - 8], rax	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400be75	      0x48837df800	                  cmp qword [rbp - 8], 0	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400be7a	     0xf85f7feffff	                           jne 0x400bd77	      6525	ldlang.c	FUNCTION_139	FUNCTION_1	FOR_1
0x400be80	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      6521	ldlang.c	FUNCTION_139
0x400be84	        0x488b4030	            mov rax, qword [rax + 0x30] 	      6521	ldlang.c	FUNCTION_139
0x400be88	        0x488945f0	             mov qword [rbp - 0x10], rax	      6521	ldlang.c	FUNCTION_139
0x400be8c	      0x48837df000	               cmp qword [rbp - 0x10], 0	      6521	ldlang.c	FUNCTION_139
0x400be91	     0xf85c8feffff	                           jne 0x400bd5f	      6521	ldlang.c	FUNCTION_139
0x400be97	              0x90	                                     nop	      6557	ldlang.c	FUNCTION_139
0x400be98	              0xc9	                                   leave	      6557	ldlang.c	FUNCTION_139
0x400be99	              0xc3	                                     ret	      6557	ldlang.c	FUNCTION_139
check_excluded_libs	functions,0:ELSE,0:FOR,0:CALL,4:IF,2:DO,0:WHILE,1:SWITCH,0	81
0x4004a7e	              0x55	                                push rbp	      2712	ldlang.c	FUNCTION_65
0x4004a7f	          0x4889e5	                            mov rbp, rsp	      2712	ldlang.c	FUNCTION_65
0x4004a82	        0x4883ec30	                           sub rsp, 0x30	      2712	ldlang.c	FUNCTION_65
0x4004a86	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      2712	ldlang.c	FUNCTION_65
0x4004a8a	    0x488b05000000	            mov rax, qword [0x04004a91] 	      2713	ldlang.c	FUNCTION_65
0x4004a91	        0x488945f0	             mov qword [rbp - 0x10], rax	      2713	ldlang.c	FUNCTION_65
0x4004a95	      0xe9e2000000	                           jmp 0x4004b7c	      2715	ldlang.c	FUNCTION_65	WHILE_1
0x4004a9a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2717	ldlang.c	FUNCTION_65	WHILE_1	CALL_1
0x4004a9e	          0x488b00	                    mov rax, qword [rax]	      2717	ldlang.c	FUNCTION_65	WHILE_1	CALL_1
0x4004aa1	          0x4889c7	                            mov rdi, rax	      2717	ldlang.c	FUNCTION_65	WHILE_1	CALL_1
0x4004aa4	      0xe800000000	                          call 0x4004aa9	      2717	ldlang.c	FUNCTION_65	WHILE_1	CALL_1
0x4004aa9	          0x8945ec	             mov dword [rbp - 0x14], eax	      2717	ldlang.c	FUNCTION_65	WHILE_1	CALL_1
0x4004aac	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2718	ldlang.c	FUNCTION_65	WHILE_1	CALL_2
0x4004ab0	          0x488b00	                    mov rax, qword [rax]	      2718	ldlang.c	FUNCTION_65	WHILE_1	CALL_2
0x4004ab3	          0x4889c7	                            mov rdi, rax	      2718	ldlang.c	FUNCTION_65	WHILE_1	CALL_2
0x4004ab6	      0xe800000000	                          call 0x4004abb	      2718	ldlang.c	FUNCTION_65	WHILE_1	CALL_2
0x4004abb	        0x488945f8	                mov qword [rbp - 8], rax	      2718	ldlang.c	FUNCTION_65	WHILE_1	CALL_2
0x4004abf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ac3	          0x488b00	                    mov rax, qword [rax]	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ac6	      0xbe00000000	                              mov esi, 0	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004acb	          0x4889c7	                            mov rdi, rax	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ace	      0xe800000000	                          call 0x4004ad3	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ad3	            0x85c0	                           test eax, eax	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ad5	            0x7513	                           jne 0x4004aea	      2720	ldlang.c	FUNCTION_65	WHILE_1	IF_1	CALL_3
0x4004ad7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2722	ldlang.c	FUNCTION_65	WHILE_1	IF_1
0x4004adb	         0xfb65047	           movzx edx, byte [rax + 0x47] 	      2722	ldlang.c	FUNCTION_65	WHILE_1	IF_1
0x4004adf	          0x83ca20	                            or edx, 0x20	      2722	ldlang.c	FUNCTION_65	WHILE_1	IF_1
0x4004ae2	          0x885047	               mov byte [rax + 0x47], dl	      2722	ldlang.c	FUNCTION_65	WHILE_1	IF_1
0x4004ae5	      0xe99d000000	                           jmp 0x4004b87	      2723	ldlang.c	FUNCTION_65	WHILE_1	IF_1
0x4004aea	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004aed	          0x4863d0	                         movsxd rdx, eax	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004af0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004af4	          0x488b00	                    mov rax, qword [rax]	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004af7	        0x488b4df8	                mov rcx, qword [rbp - 8]	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004afb	          0x4889ce	                            mov rsi, rcx	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004afe	          0x4889c7	                            mov rdi, rax	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004b01	      0xe800000000	                          call 0x4004b06	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004b06	            0x85c0	                           test eax, eax	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004b08	            0x7566	                           jne 0x4004b70	      2726	ldlang.c	FUNCTION_65	WHILE_1	IF_2	CALL_4
0x4004b0a	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b0d	          0x4863d0	                         movsxd rdx, eax	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b10	        0x488b45f8	                mov rax, qword [rbp - 8]	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b14	          0x4801d0	                            add rax, rdx	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b17	           0xfb600	                   movzx eax, byte [rax]	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b1a	            0x84c0	                             test al, al	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b1c	            0x7442	                            je 0x4004b60	      2727	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b1e	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b21	          0x4863d0	                         movsxd rdx, eax	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b24	        0x488b45f8	                mov rax, qword [rbp - 8]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b28	          0x4801d0	                            add rax, rdx	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b2b	           0xfb600	                   movzx eax, byte [rax]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b2e	            0x3c2e	                            cmp al, 0x2e	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b30	            0x753e	                           jne 0x4004b70	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b32	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b35	            0x4898	                                    cdqe	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b37	        0x488d5001	                      lea rdx, [rax + 1]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b3b	        0x488b45f8	                mov rax, qword [rbp - 8]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b3f	          0x4801d0	                            add rax, rdx	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b42	           0xfb600	                   movzx eax, byte [rax]	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b45	            0x3c61	                            cmp al, 0x61	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b47	            0x7527	                           jne 0x4004b70	      2728	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b49	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b4c	            0x4898	                                    cdqe	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b4e	        0x488d5002	                      lea rdx, [rax + 2]	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b52	        0x488b45f8	                mov rax, qword [rbp - 8]	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b56	          0x4801d0	                            add rax, rdx	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b59	           0xfb600	                   movzx eax, byte [rax]	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b5c	            0x84c0	                             test al, al	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b5e	            0x7510	                           jne 0x4004b70	      2729	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b60	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2731	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b64	         0xfb65047	           movzx edx, byte [rax + 0x47] 	      2731	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b68	          0x83ca20	                            or edx, 0x20	      2731	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b6b	          0x885047	               mov byte [rax + 0x47], dl	      2731	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b6e	            0xeb17	                           jmp 0x4004b87	      2732	ldlang.c	FUNCTION_65	WHILE_1	IF_2
0x4004b70	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2735	ldlang.c	FUNCTION_65	WHILE_1
0x4004b74	        0x488b4008	                mov rax, qword [rax + 8]	      2735	ldlang.c	FUNCTION_65	WHILE_1
0x4004b78	        0x488945f0	             mov qword [rbp - 0x10], rax	      2735	ldlang.c	FUNCTION_65	WHILE_1
0x4004b7c	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2715	ldlang.c	FUNCTION_65	WHILE_1
0x4004b81	     0xf8513ffffff	                           jne 0x4004a9a	      2715	ldlang.c	FUNCTION_65	WHILE_1
0x4004b87	              0xc9	                                   leave	      2737	ldlang.c	FUNCTION_65
0x4004b88	              0xc3	                                     ret	      2737	ldlang.c	FUNCTION_65
print_input_statement	functions,0:ELSE,0:FOR,0:CALL,1:IF,1:DO,0:WHILE,0:SWITCH,0	30
0x4007129	              0x55	                                push rbp	      4115	ldlang.c	FUNCTION_92
0x400712a	          0x4889e5	                            mov rbp, rsp	      4115	ldlang.c	FUNCTION_92
0x400712d	        0x4883ec10	                           sub rsp, 0x10	      4115	ldlang.c	FUNCTION_92
0x4007131	        0x48897df8	                mov qword [rbp - 8], rdi	      4115	ldlang.c	FUNCTION_92
0x4007135	        0x488b45f8	                mov rax, qword [rbp - 8]	      4116	ldlang.c	FUNCTION_92	IF_1
0x4007139	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4116	ldlang.c	FUNCTION_92	IF_1
0x400713d	          0x4885c0	                           test rax, rax	      4116	ldlang.c	FUNCTION_92	IF_1
0x4007140	            0x744a	                            je 0x400718c	      4116	ldlang.c	FUNCTION_92	IF_1
0x4007142	        0x488b45f8	                mov rax, qword [rbp - 8]	      4117	ldlang.c	FUNCTION_92	IF_1
0x4007146	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4117	ldlang.c	FUNCTION_92	IF_1
0x400714a	          0x4885c0	                           test rax, rax	      4117	ldlang.c	FUNCTION_92	IF_1
0x400714d	            0x741c	                            je 0x400716b	      4117	ldlang.c	FUNCTION_92	IF_1
0x400714f	        0x488b45f8	                mov rax, qword [rbp - 8]	      4118	ldlang.c	FUNCTION_92	IF_1
0x4007153	        0x488b4020	            mov rax, qword [rax + 0x20] 	      4118	ldlang.c	FUNCTION_92	IF_1
0x4007157	          0x8b4044	            mov eax, dword [rax + 0x44] 	      4118	ldlang.c	FUNCTION_92	IF_1
0x400715a	          0xc1e805	                              shr eax, 5	      4118	ldlang.c	FUNCTION_92	IF_1
0x400715d	      0x25ffff0f00	                        and eax, 0xfffff	      4118	ldlang.c	FUNCTION_92	IF_1
0x4007162	      0x2500100000	                         and eax, 0x1000	      4118	ldlang.c	FUNCTION_92	IF_1
0x4007167	            0x85c0	                           test eax, eax	      4118	ldlang.c	FUNCTION_92	IF_1
0x4007169	            0x7521	                           jne 0x400718c	      4118	ldlang.c	FUNCTION_92	IF_1
0x400716b	        0x488b45f8	                mov rax, qword [rbp - 8]	      4119	ldlang.c	FUNCTION_92	CALL_1
0x400716f	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      4119	ldlang.c	FUNCTION_92	CALL_1
0x4007173	    0x488b05000000	            mov rax, qword [0x0400717a] 	      4119	ldlang.c	FUNCTION_92	CALL_1
0x400717a	      0xbe00000000	                              mov esi, 0	      4119	ldlang.c	FUNCTION_92	CALL_1
0x400717f	          0x4889c7	                            mov rdi, rax	      4119	ldlang.c	FUNCTION_92	CALL_1
0x4007182	      0xb800000000	                              mov eax, 0	      4119	ldlang.c	FUNCTION_92	CALL_1
0x4007187	      0xe800000000	                          call 0x400718c	      4119	ldlang.c	FUNCTION_92	CALL_1
0x400718c	              0x90	                                     nop	      4120	ldlang.c	FUNCTION_92
0x400718d	              0xc9	                                   leave	      4120	ldlang.c	FUNCTION_92
0x400718e	              0xc3	                                     ret	      4120	ldlang.c	FUNCTION_92
add_excluded_libs	functions,0:ELSE,0:FOR,0:CALL,5:IF,2:DO,0:WHILE,1:SWITCH,0	74
0x4004975	              0x55	                                push rbp	      2689	ldlang.c	FUNCTION_64
0x4004976	          0x4889e5	                            mov rbp, rsp	      2689	ldlang.c	FUNCTION_64
0x4004979	        0x4883ec30	                           sub rsp, 0x30	      2689	ldlang.c	FUNCTION_64
0x400497d	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      2689	ldlang.c	FUNCTION_64
0x4004981	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2690	ldlang.c	FUNCTION_64
0x4004985	        0x488945e8	             mov qword [rbp - 0x18], rax	      2690	ldlang.c	FUNCTION_64
0x4004989	      0xe9db000000	                           jmp 0x4004a69	      2692	ldlang.c	FUNCTION_64	WHILE_1
0x400498e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2695	ldlang.c	FUNCTION_64	WHILE_1	CALL_1
0x4004992	      0xbe00000000	                              mov esi, 0	      2695	ldlang.c	FUNCTION_64	WHILE_1	CALL_1
0x4004997	          0x4889c7	                            mov rdi, rax	      2695	ldlang.c	FUNCTION_64	WHILE_1	CALL_1
0x400499a	      0xe800000000	                          call 0x400499f	      2695	ldlang.c	FUNCTION_64	WHILE_1	CALL_1
0x400499f	        0x488945f0	             mov qword [rbp - 0x10], rax	      2695	ldlang.c	FUNCTION_64	WHILE_1	CALL_1
0x40049a3	      0x48837df000	               cmp qword [rbp - 0x10], 0	      2696	ldlang.c	FUNCTION_64	WHILE_1	IF_1
0x40049a8	            0x751a	                           jne 0x40049c4	      2696	ldlang.c	FUNCTION_64	WHILE_1	IF_1
0x40049aa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049ae	          0x4889c7	                            mov rdi, rax	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049b1	      0xe800000000	                          call 0x40049b6	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049b6	          0x4889c2	                            mov rdx, rax	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049b9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049bd	          0x4801d0	                            add rax, rdx	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049c0	        0x488945f0	             mov qword [rbp - 0x10], rax	      2697	ldlang.c	FUNCTION_64	WHILE_1	CALL_2
0x40049c4	      0xbf10000000	                           mov edi, 0x10	      2698	ldlang.c	FUNCTION_64	WHILE_1	CALL_3
0x40049c9	      0xe800000000	                          call 0x40049ce	      2698	ldlang.c	FUNCTION_64	WHILE_1	CALL_3
0x40049ce	        0x488945f8	                mov qword [rbp - 8], rax	      2698	ldlang.c	FUNCTION_64	WHILE_1	CALL_3
0x40049d2	    0x488b15000000	            mov rdx, qword [0x040049d9] 	      2699	ldlang.c	FUNCTION_64	WHILE_1
0x40049d9	        0x488b45f8	                mov rax, qword [rbp - 8]	      2699	ldlang.c	FUNCTION_64	WHILE_1
0x40049dd	        0x48895008	                mov qword [rax + 8], rdx	      2699	ldlang.c	FUNCTION_64	WHILE_1
0x40049e1	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049e9	          0x4829c2	                            sub rdx, rax	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049ec	          0x4889d0	                            mov rax, rdx	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049ef	        0x4883c001	                              add rax, 1	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049f3	          0x4889c7	                            mov rdi, rax	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049f6	      0xe800000000	                          call 0x40049fb	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049fb	          0x4889c2	                            mov rdx, rax	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x40049fe	        0x488b45f8	                mov rax, qword [rbp - 8]	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x4004a02	          0x488910	                    mov qword [rax], rdx	      2700	ldlang.c	FUNCTION_64	WHILE_1	CALL_4
0x4004a05	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a09	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a0d	          0x4829c2	                            sub rdx, rax	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a10	          0x4889d0	                            mov rax, rdx	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a13	          0x4889c2	                            mov rdx, rax	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a16	        0x488b45f8	                mov rax, qword [rbp - 8]	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a1a	          0x488b00	                    mov rax, qword [rax]	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a1d	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a21	          0x4889ce	                            mov rsi, rcx	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a24	          0x4889c7	                            mov rdi, rax	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a27	      0xe800000000	                          call 0x4004a2c	      2701	ldlang.c	FUNCTION_64	WHILE_1	CALL_5
0x4004a2c	        0x488b45f8	                mov rax, qword [rbp - 8]	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a30	          0x488b00	                    mov rax, qword [rax]	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a33	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a37	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a3b	          0x4829d1	                            sub rcx, rdx	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a3e	          0x4889ca	                            mov rdx, rcx	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a41	          0x4801d0	                            add rax, rdx	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a44	          0xc60000	                       mov byte [rax], 0	      2702	ldlang.c	FUNCTION_64	WHILE_1
0x4004a47	        0x488b45f8	                mov rax, qword [rbp - 8]	      2703	ldlang.c	FUNCTION_64	WHILE_1
0x4004a4b	    0x488905000000	            mov qword [0x04004a52], rax 	      2703	ldlang.c	FUNCTION_64	WHILE_1
0x4004a52	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2704	ldlang.c	FUNCTION_64	WHILE_1	IF_2
0x4004a56	           0xfb600	                   movzx eax, byte [rax]	      2704	ldlang.c	FUNCTION_64	WHILE_1	IF_2
0x4004a59	            0x84c0	                             test al, al	      2704	ldlang.c	FUNCTION_64	WHILE_1	IF_2
0x4004a5b	            0x741d	                            je 0x4004a7a	      2704	ldlang.c	FUNCTION_64	WHILE_1	IF_2
0x4004a5d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2706	ldlang.c	FUNCTION_64	WHILE_1
0x4004a61	        0x4883c001	                              add rax, 1	      2706	ldlang.c	FUNCTION_64	WHILE_1
0x4004a65	        0x488945e8	             mov qword [rbp - 0x18], rax	      2706	ldlang.c	FUNCTION_64	WHILE_1
0x4004a69	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2692	ldlang.c	FUNCTION_64	WHILE_1
0x4004a6d	           0xfb600	                   movzx eax, byte [rax]	      2692	ldlang.c	FUNCTION_64	WHILE_1
0x4004a70	            0x84c0	                             test al, al	      2692	ldlang.c	FUNCTION_64	WHILE_1
0x4004a72	     0xf8516ffffff	                           jne 0x400498e	      2692	ldlang.c	FUNCTION_64	WHILE_1
0x4004a78	            0xeb01	                           jmp 0x4004a7b	      2708	ldlang.c	FUNCTION_64
0x4004a7a	              0x90	                                     nop	      2705	ldlang.c	FUNCTION_64	WHILE_1	IF_2
0x4004a7b	              0x90	                                     nop	      2708	ldlang.c	FUNCTION_64
0x4004a7c	              0xc9	                                   leave	      2708	ldlang.c	FUNCTION_64
0x4004a7d	              0xc3	                                     ret	      2708	ldlang.c	FUNCTION_64
lang_check_section_addresses	functions,0:ELSE,1:FOR,6:CALL,16:IF,12:DO,0:WHILE,0:SWITCH,0	364
0x4008689	              0x55	                                push rbp	      4789	ldlang.c	FUNCTION_112
0x400868a	          0x4889e5	                            mov rbp, rsp	      4789	ldlang.c	FUNCTION_112
0x400868d	            0x4154	                                push r12	      4789	ldlang.c	FUNCTION_112
0x400868f	              0x53	                                push rbx	      4789	ldlang.c	FUNCTION_112
0x4008690	        0x4883ec70	                           sub rsp, 0x70	      4789	ldlang.c	FUNCTION_112
0x4008694	    0x48c745b00000	               mov qword [rbp - 0x50], 0	      4796	ldlang.c	FUNCTION_112
0x400869c	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      4797	ldlang.c	FUNCTION_112
0x40086a4	    0x488b05000000	            mov rax, qword [0x040086ab] 	      4803	ldlang.c	FUNCTION_112	CALL_1
0x40086ab	          0x4889c7	                            mov rdi, rax	      4803	ldlang.c	FUNCTION_112	CALL_1
0x40086ae	      0xe800000000	                          call 0x40086b3	      4803	ldlang.c	FUNCTION_112	CALL_1
0x40086b3	          0x83e801	                              sub eax, 1	      4803	ldlang.c	FUNCTION_112	CALL_1
0x40086b6	      0xba01000000	                              mov edx, 1	      4802	ldlang.c	FUNCTION_112
0x40086bb	            0x89c1	                            mov ecx, eax	      4802	ldlang.c	FUNCTION_112
0x40086bd	          0x48d3e2	                             shl rdx, cl	      4802	ldlang.c	FUNCTION_112
0x40086c0	          0x4889d0	                            mov rax, rdx	      4802	ldlang.c	FUNCTION_112
0x40086c3	        0x4883e801	                              sub rax, 1	      4802	ldlang.c	FUNCTION_112
0x40086c7	        0x488945c8	             mov qword [rbp - 0x38], rax	      4802	ldlang.c	FUNCTION_112
0x40086cb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      4804	ldlang.c	FUNCTION_112
0x40086cf	          0x4801c0	                            add rax, rax	      4804	ldlang.c	FUNCTION_112
0x40086d2	        0x4883c001	                              add rax, 1	      4804	ldlang.c	FUNCTION_112
0x40086d6	        0x488945c8	             mov qword [rbp - 0x38], rax	      4804	ldlang.c	FUNCTION_112
0x40086da	    0x488b05000000	            mov rax, qword [0x040086e1] 	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40086e1	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40086e8	        0x48894590	             mov qword [rbp - 0x70], rax	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40086ec	      0xe9ca000000	                           jmp 0x40087bb	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40086f1	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4806	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x40086f5	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4806	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x40086f8	          0x83e001	                              and eax, 1	      4806	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x40086fb	            0x85c0	                           test eax, eax	      4806	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x40086fd	     0xf84ac000000	                            je 0x40087af	      4806	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x4008703	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x4008707	        0x488b5028	            mov rdx, qword [rax + 0x28] 	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x400870b	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x400870f	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x4008713	          0x4801d0	                            add rax, rdx	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x4008716	        0x482345c8	             and rax, qword [rbp - 0x38]	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x400871a	        0x488945d0	             mov qword [rbp - 0x30], rax	      4808	ldlang.c	FUNCTION_112	FOR_1	IF_1
0x400871e	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008723	            0x7435	                            je 0x400875a	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008725	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008729	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x400872d	        0x482345c8	             and rax, qword [rbp - 0x38]	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008731	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008735	            0x7623	                           jbe 0x400875a	      4809	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2
0x4008737	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x400873b	          0x488b18	                    mov rbx, qword [rax]	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x400873e	      0xbf00000000	                              mov edi, 0	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x4008743	      0xe800000000	                          call 0x4008748	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x4008748	          0x4889de	                            mov rsi, rbx	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x400874b	          0x4889c7	                            mov rdi, rax	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x400874e	      0xb800000000	                              mov eax, 0	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x4008753	      0xe800000000	                          call 0x4008758	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x4008758	            0xeb55	                           jmp 0x40087af	      4810	ldlang.c	FUNCTION_112	FOR_1	IF_1	IF_2	CALL_3
0x400875a	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x400875e	        0x488b5030	            mov rdx, qword [rax + 0x30] 	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x4008762	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x4008766	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x400876a	          0x4801d0	                            add rax, rdx	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x400876d	        0x482345c8	             and rax, qword [rbp - 0x38]	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x4008771	        0x488945d0	             mov qword [rbp - 0x30], rax	      4814	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1
0x4008775	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x400877a	            0x7433	                            je 0x40087af	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x400877c	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x4008780	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x4008784	        0x482345c8	             and rax, qword [rbp - 0x38]	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x4008788	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x400878c	            0x7621	                           jbe 0x40087af	      4815	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3
0x400878e	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x4008792	          0x488b18	                    mov rbx, qword [rax]	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x4008795	      0xbf00000000	                              mov edi, 0	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x400879a	      0xe800000000	                          call 0x400879f	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x400879f	          0x4889de	                            mov rsi, rbx	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x40087a2	          0x4889c7	                            mov rdi, rax	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x40087a5	      0xb800000000	                              mov eax, 0	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x40087aa	      0xe800000000	                          call 0x40087af	      4816	ldlang.c	FUNCTION_112	FOR_1	IF_1	ELSE_1	IF_3	CALL_5
0x40087af	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40087b3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40087b7	        0x48894590	             mov qword [rbp - 0x70], rax	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40087bb	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40087c0	     0xf852bffffff	                           jne 0x40086f1	      4805	ldlang.c	FUNCTION_112	FOR_1
0x40087c6	    0x488b05000000	            mov rax, qword [0x040087cd] 	      4821	ldlang.c	FUNCTION_112	IF_4
0x40087cd	    0x8b80a0000000	            mov eax, dword [rax + 0xa0] 	      4821	ldlang.c	FUNCTION_112	IF_4
0x40087d3	          0x83f801	                              cmp eax, 1	      4821	ldlang.c	FUNCTION_112	IF_4
0x40087d6	     0xf862e040000	                           jbe 0x4008c0a	      4821	ldlang.c	FUNCTION_112	IF_4
0x40087dc	    0x488b05000000	            mov rax, qword [0x040087e3] 	      4824	ldlang.c	FUNCTION_112
0x40087e3	    0x8b80a0000000	            mov eax, dword [rax + 0xa0] 	      4824	ldlang.c	FUNCTION_112
0x40087e9	            0x89c0	                            mov eax, eax	      4824	ldlang.c	FUNCTION_112
0x40087eb	        0x488945a8	             mov qword [rbp - 0x58], rax	      4824	ldlang.c	FUNCTION_112
0x40087ef	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      4825	ldlang.c	FUNCTION_112	CALL_6
0x40087f3	        0x48c1e004	                              shl rax, 4	      4825	ldlang.c	FUNCTION_112	CALL_6
0x40087f7	          0x4889c7	                            mov rdi, rax	      4825	ldlang.c	FUNCTION_112	CALL_6
0x40087fa	      0xe800000000	                          call 0x40087ff	      4825	ldlang.c	FUNCTION_112	CALL_6
0x40087ff	        0x488945d8	             mov qword [rbp - 0x28], rax	      4825	ldlang.c	FUNCTION_112	CALL_6
0x4008803	    0x48c745a80000	               mov qword [rbp - 0x58], 0	      4828	ldlang.c	FUNCTION_112
0x400880b	    0x488b05000000	            mov rax, qword [0x04008812] 	      4829	ldlang.c	FUNCTION_112	FOR_2
0x4008812	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      4829	ldlang.c	FUNCTION_112	FOR_2
0x4008819	        0x48894590	             mov qword [rbp - 0x70], rax	      4829	ldlang.c	FUNCTION_112	FOR_2
0x400881d	            0xeb74	                           jmp 0x4008893	      4829	ldlang.c	FUNCTION_112	FOR_2
0x400881f	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008823	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008826	          0x83e001	                              and eax, 1	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008829	            0x85c0	                           test eax, eax	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x400882b	            0x7459	                            je 0x4008886	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x400882d	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008831	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008834	      0x2502040000	                          and eax, 0x402	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008839	      0x3d00040000	                          cmp eax, 0x400	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x400883e	            0x7446	                            je 0x4008886	      4831	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008840	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4832	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008844	        0x488b4038	            mov rax, qword [rax + 0x38] 	      4832	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008848	          0x4885c0	                           test rax, rax	      4832	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x400884b	            0x7439	                            je 0x4008886	      4832	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x400884d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      4835	ldlang.c	FUNCTION_112	FOR_2
0x4008851	        0x48c1e004	                              shl rax, 4	      4835	ldlang.c	FUNCTION_112	FOR_2
0x4008855	          0x4889c2	                            mov rdx, rax	      4835	ldlang.c	FUNCTION_112	FOR_2
0x4008858	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4835	ldlang.c	FUNCTION_112	FOR_2
0x400885c	          0x4801c2	                            add rdx, rax	      4835	ldlang.c	FUNCTION_112	FOR_2
0x400885f	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4835	ldlang.c	FUNCTION_112	FOR_2
0x4008863	          0x488902	                    mov qword [rdx], rax	      4835	ldlang.c	FUNCTION_112	FOR_2
0x4008866	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      4836	ldlang.c	FUNCTION_112	FOR_2
0x400886a	        0x48c1e004	                              shl rax, 4	      4836	ldlang.c	FUNCTION_112	FOR_2
0x400886e	          0x4889c2	                            mov rdx, rax	      4836	ldlang.c	FUNCTION_112	FOR_2
0x4008871	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4836	ldlang.c	FUNCTION_112	FOR_2
0x4008875	          0x4801d0	                            add rax, rdx	      4836	ldlang.c	FUNCTION_112	FOR_2
0x4008878	    0xc74008000000	                  mov dword [rax + 8], 0	      4836	ldlang.c	FUNCTION_112	FOR_2
0x400887f	      0x488345a801	               add qword [rbp - 0x58], 1	      4837	ldlang.c	FUNCTION_112	FOR_2
0x4008884	            0xeb01	                           jmp 0x4008887	      4837	ldlang.c	FUNCTION_112	FOR_2
0x4008886	              0x90	                                     nop	      4833	ldlang.c	FUNCTION_112	FOR_2	IF_5
0x4008887	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4829	ldlang.c	FUNCTION_112	FOR_2
0x400888b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4829	ldlang.c	FUNCTION_112	FOR_2
0x400888f	        0x48894590	             mov qword [rbp - 0x70], rax	      4829	ldlang.c	FUNCTION_112	FOR_2
0x4008893	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      4829	ldlang.c	FUNCTION_112	FOR_2
0x4008898	            0x7585	                           jne 0x400881f	      4829	ldlang.c	FUNCTION_112	FOR_2
0x400889a	      0x48837da801	               cmp qword [rbp - 0x58], 1	      4840	ldlang.c	FUNCTION_112	IF_6
0x400889f	            0x7711	                            ja 0x40088b2	      4840	ldlang.c	FUNCTION_112	IF_6
0x40088a1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4842	ldlang.c	FUNCTION_112	IF_6	CALL_7
0x40088a5	          0x4889c7	                            mov rdi, rax	      4842	ldlang.c	FUNCTION_112	IF_6	CALL_7
0x40088a8	      0xe800000000	                          call 0x40088ad	      4842	ldlang.c	FUNCTION_112	IF_6	CALL_7
0x40088ad	      0xe959030000	                           jmp 0x4008c0b	      4843	ldlang.c	FUNCTION_112	IF_6
0x40088b2	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088ba	      0xb900000000	                              mov ecx, 0	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088bf	      0xba10000000	                           mov edx, 0x10	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088c4	          0x4889c7	                            mov rdi, rax	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088c7	      0xe800000000	                          call 0x40088cc	      4846	ldlang.c	FUNCTION_112	CALL_8
0x40088cc	    0x48c745980000	               mov qword [rbp - 0x68], 0	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40088d4	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40088dc	      0xe9f5000000	                           jmp 0x40089d6	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40088e1	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088e5	        0x48c1e004	                              shl rax, 4	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088e9	          0x4889c2	                            mov rdx, rax	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088f0	          0x4801d0	                            add rax, rdx	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088f3	          0x488b00	                    mov rax, qword [rax]	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088f6	        0x48894590	             mov qword [rbp - 0x70], rax	      4852	ldlang.c	FUNCTION_112	FOR_3
0x40088fa	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4853	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40088fe	          0x8b4020	            mov eax, dword [rax + 0x20] 	      4853	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008901	          0x83e002	                              and eax, 2	      4853	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008904	            0x85c0	                           test eax, eax	      4853	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008906	     0xf84c5000000	                            je 0x40089d1	      4853	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x400890c	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4855	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008910	        0x488b4030	            mov rax, qword [rax + 0x30] 	      4855	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008914	        0x488945e0	             mov qword [rbp - 0x20], rax	      4855	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008918	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x400891c	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008920	    0x8b0500000000	            mov eax, dword [0x04008926] 	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008926	            0x89c1	                            mov ecx, eax	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008928	          0x48d3ea	                             shr rdx, cl	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x400892b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x400892f	          0x4801d0	                            add rax, rdx	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008932	        0x4883e801	                              sub rax, 1	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x4008936	        0x488945d0	             mov qword [rbp - 0x30], rax	      4856	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x400893a	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      4863	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x400893f	            0x7478	                            je 0x40089b9	      4863	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x4008941	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4864	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x4008945	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      4864	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x4008949	            0x760a	                           jbe 0x4008955	      4864	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x400894b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      4865	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x400894f	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	      4865	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x4008953	            0x7364	                           jae 0x40089b9	      4865	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x4008955	        0x488b4598	             mov rax, qword [rbp - 0x68]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008959	          0x4c8b20	                    mov r12, qword [rax]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400895c	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008960	          0x488b18	                    mov rbx, qword [rax]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008963	      0xbf00000000	                              mov edi, 0	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008968	      0xe800000000	                          call 0x400896d	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400896d	          0x4889c7	                            mov rdi, rax	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008970	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008974	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008978	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400897c	        0x4883ec08	                              sub rsp, 8	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008980	          0xff75b8	                 push qword [rbp - 0x48]	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008983	          0x4989c9	                             mov r9, rcx	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008986	          0x4d89e0	                             mov r8, r12	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008989	          0x4889d1	                            mov rcx, rdx	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400898c	          0x4889c2	                            mov rdx, rax	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400898f	          0x4889de	                            mov rsi, rbx	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008992	      0xb800000000	                              mov eax, 0	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x4008997	      0xe800000000	                          call 0x400899c	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x400899c	        0x4883c410	                           add rsp, 0x10	      4867	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8	CALL_10
0x40089a0	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089a4	        0x48c1e004	                              shl rax, 4	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089a8	          0x4889c2	                            mov rdx, rax	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089ab	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089af	          0x4801d0	                            add rax, rdx	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089b2	    0xc74008010000	                  mov dword [rax + 8], 1	      4870	ldlang.c	FUNCTION_112	FOR_3	IF_7	IF_8
0x40089b9	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4872	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089bd	        0x48894598	             mov qword [rbp - 0x68], rax	      4872	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089c1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4873	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089c5	        0x488945b0	             mov qword [rbp - 0x50], rax	      4873	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089c9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4874	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089cd	        0x488945b8	             mov qword [rbp - 0x48], rax	      4874	ldlang.c	FUNCTION_112	FOR_3	IF_7
0x40089d1	      0x488345a001	               add qword [rbp - 0x60], 1	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40089d6	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40089da	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40089de	     0xf82fdfeffff	                            jb 0x40088e1	      4850	ldlang.c	FUNCTION_112	FOR_3
0x40089e4	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089e8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089ec	      0xb900000000	                              mov ecx, 0	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089f1	      0xba10000000	                           mov edx, 0x10	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089f6	          0x4889c7	                            mov rdi, rax	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089f9	      0xe800000000	                          call 0x40089fe	      4883	ldlang.c	FUNCTION_112	CALL_11
0x40089fe	    0xc7458c000000	               mov dword [rbp - 0x74], 0	      4884	ldlang.c	FUNCTION_112
0x4008a05	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4885	ldlang.c	FUNCTION_112
0x4008a09	          0x488b00	                    mov rax, qword [rax]	      4885	ldlang.c	FUNCTION_112
0x4008a0c	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4885	ldlang.c	FUNCTION_112
0x4008a10	        0x488945b0	             mov qword [rbp - 0x50], rax	      4885	ldlang.c	FUNCTION_112
0x4008a14	    0x48c745a00100	               mov qword [rbp - 0x60], 1	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a1c	            0xeb3d	                           jmp 0x4008a5b	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a1e	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a22	        0x48c1e004	                              shl rax, 4	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a26	          0x4889c2	                            mov rdx, rax	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a29	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a2d	          0x4801d0	                            add rax, rdx	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a30	          0x488b00	                    mov rax, qword [rax]	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a33	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a37	        0x488945e0	             mov qword [rbp - 0x20], rax	      4888	ldlang.c	FUNCTION_112	FOR_4
0x4008a3b	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      4889	ldlang.c	FUNCTION_112	FOR_4	IF_9
0x4008a3f	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      4889	ldlang.c	FUNCTION_112	FOR_4	IF_9
0x4008a43	            0x7509	                           jne 0x4008a4e	      4889	ldlang.c	FUNCTION_112	FOR_4	IF_9
0x4008a45	    0xc7458c010000	               mov dword [rbp - 0x74], 1	      4891	ldlang.c	FUNCTION_112	FOR_4	IF_9
0x4008a4c	            0xeb17	                           jmp 0x4008a65	      4892	ldlang.c	FUNCTION_112	FOR_4	IF_9
0x4008a4e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4894	ldlang.c	FUNCTION_112	FOR_4
0x4008a52	        0x488945b0	             mov qword [rbp - 0x50], rax	      4894	ldlang.c	FUNCTION_112	FOR_4
0x4008a56	      0x488345a001	               add qword [rbp - 0x60], 1	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a5b	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a5f	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a63	            0x72b9	                            jb 0x4008a1e	      4886	ldlang.c	FUNCTION_112	FOR_4
0x4008a65	        0x837d8c00	               cmp dword [rbp - 0x74], 0	      4898	ldlang.c	FUNCTION_112	IF_10
0x4008a69	     0xf8506010000	                           jne 0x4008b75	      4898	ldlang.c	FUNCTION_112	IF_10
0x4008a6f	    0x48c745980000	               mov qword [rbp - 0x68], 0	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a77	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a7f	      0xe9e3000000	                           jmp 0x4008b67	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a84	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a88	        0x48c1e004	                              shl rax, 4	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a8c	          0x4889c2	                            mov rdx, rax	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a8f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a93	          0x4801d0	                            add rax, rdx	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a96	          0x488b00	                    mov rax, qword [rax]	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a99	        0x48894590	             mov qword [rbp - 0x70], rax	      4902	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008a9d	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4903	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008aa1	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4903	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008aa5	        0x488945e0	             mov qword [rbp - 0x20], rax	      4903	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008aa9	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008aad	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ab1	    0x8b0500000000	            mov eax, dword [0x04008ab7] 	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ab7	            0x89c1	                            mov ecx, eax	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ab9	          0x48d3ea	                             shr rdx, cl	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008abc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ac0	          0x4801d0	                            add rax, rdx	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ac3	        0x4883e801	                              sub rax, 1	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008ac7	        0x488945d0	             mov qword [rbp - 0x30], rax	      4904	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008acb	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      4906	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ad0	            0x7478	                            je 0x4008b4a	      4906	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ad2	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ad6	        0x48c1e004	                              shl rax, 4	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ada	          0x4889c2	                            mov rdx, rax	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008add	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ae1	          0x4801d0	                            add rax, rdx	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ae4	          0x8b4008	                mov eax, dword [rax + 8]	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ae7	            0x85c0	                           test eax, eax	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008ae9	            0x755f	                           jne 0x4008b4a	      4907	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008aeb	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4908	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008aef	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      4908	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008af3	            0x760a	                           jbe 0x4008aff	      4908	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008af5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      4909	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008af9	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	      4909	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008afd	            0x734b	                           jae 0x4008b4a	      4909	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11
0x4008aff	        0x488b4598	             mov rax, qword [rbp - 0x68]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b03	          0x4c8b20	                    mov r12, qword [rax]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b06	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b0a	          0x488b18	                    mov rbx, qword [rax]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b0d	      0xbf00000000	                              mov edi, 0	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b12	      0xe800000000	                          call 0x4008b17	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b17	          0x4889c7	                            mov rdi, rax	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b1a	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b1e	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b22	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b26	        0x4883ec08	                              sub rsp, 8	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b2a	          0xff75b8	                 push qword [rbp - 0x48]	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b2d	          0x4989c9	                             mov r9, rcx	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b30	          0x4d89e0	                             mov r8, r12	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b33	          0x4889d1	                            mov rcx, rdx	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b36	          0x4889c2	                            mov rdx, rax	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b39	          0x4889de	                            mov rsi, rbx	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b3c	      0xb800000000	                              mov eax, 0	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b41	      0xe800000000	                          call 0x4008b46	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b46	        0x4883c410	                           add rsp, 0x10	      4910	ldlang.c	FUNCTION_112	IF_10	FOR_5	IF_11	CALL_13
0x4008b4a	        0x488b4590	             mov rax, qword [rbp - 0x70]	      4913	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b4e	        0x48894598	             mov qword [rbp - 0x68], rax	      4913	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b52	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      4914	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b56	        0x488945b0	             mov qword [rbp - 0x50], rax	      4914	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b5a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      4915	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b5e	        0x488945b8	             mov qword [rbp - 0x48], rax	      4915	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b62	      0x488345a001	               add qword [rbp - 0x60], 1	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b67	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b6b	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b6f	     0xf820fffffff	                            jb 0x4008a84	      4900	ldlang.c	FUNCTION_112	IF_10	FOR_5
0x4008b75	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      4919	ldlang.c	FUNCTION_112	CALL_14
0x4008b79	          0x4889c7	                            mov rdi, rax	      4919	ldlang.c	FUNCTION_112	CALL_14
0x4008b7c	      0xe800000000	                          call 0x4008b81	      4919	ldlang.c	FUNCTION_112	CALL_14
0x4008b81	    0x488b05000000	            mov rax, qword [0x04008b88] 	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008b88	        0x488945c0	             mov qword [rbp - 0x40], rax	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008b8c	            0xeb73	                           jmp 0x4008c01	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008b8e	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4930	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008b92	          0x8b4050	            mov eax, dword [rax + 0x50] 	      4930	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008b95	            0x85c0	                           test eax, eax	      4930	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008b97	            0x745c	                            je 0x4008bf5	      4930	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008b99	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008b9d	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008ba1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008ba5	        0x488b4820	            mov rcx, qword [rax + 0x20] 	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008ba9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bad	        0x488b4028	            mov rax, qword [rax + 0x28] 	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bb1	          0x4801c8	                            add rax, rcx	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bb4	          0x4829c2	                            sub rdx, rax	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bb7	          0x4889d0	                            mov rax, rdx	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bba	        0x488945e8	             mov qword [rbp - 0x18], rax	      4932	ldlang.c	FUNCTION_112	FOR_6	IF_12
0x4008bbe	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bc2	          0x488b18	                    mov rbx, qword [rax]	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bc5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bc9	          0x4889c2	                            mov rdx, rax	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bcc	      0xbe00000000	                              mov esi, 0	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bd1	      0xbf00000000	                              mov edi, 0	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bd6	      0xe800000000	                          call 0x4008bdb	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bdb	          0x4889c1	                            mov rcx, rax	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bde	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008be2	          0x4889c2	                            mov rdx, rax	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008be5	          0x4889de	                            mov rsi, rbx	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008be8	          0x4889cf	                            mov rdi, rcx	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008beb	      0xb800000000	                              mov eax, 0	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bf0	      0xe800000000	                          call 0x4008bf5	      4933	ldlang.c	FUNCTION_112	FOR_6	IF_12	CALL_16
0x4008bf5	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008bf9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008bfd	        0x488945c0	             mov qword [rbp - 0x40], rax	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008c01	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008c06	            0x7586	                           jne 0x4008b8e	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008c08	            0xeb01	                           jmp 0x4008c0b	      4929	ldlang.c	FUNCTION_112	FOR_6
0x4008c0a	              0x90	                                     nop	      4822	ldlang.c	FUNCTION_112	IF_4
0x4008c0b	        0x488d65f0	                   lea rsp, [rbp - 0x10]	      4938	ldlang.c	FUNCTION_112
0x4008c0f	              0x5b	                                 pop rbx	      4938	ldlang.c	FUNCTION_112
0x4008c10	            0x415c	                                 pop r12	      4938	ldlang.c	FUNCTION_112
0x4008c12	              0x5d	                                 pop rbp	      4938	ldlang.c	FUNCTION_112
0x4008c13	              0xc3	                                     ret	      4938	ldlang.c	FUNCTION_112
lang_add_data	functions,0:ELSE,0:FOR,0:CALL,0:IF,0:DO,0:WHILE,0:SWITCH,0	20
0x400d4d6	              0x55	                                push rbp	      7546	ldlang.c	FUNCTION_171
0x400d4d7	          0x4889e5	                            mov rbp, rsp	      7546	ldlang.c	FUNCTION_171
0x400d4da	        0x4883ec20	                           sub rsp, 0x20	      7546	ldlang.c	FUNCTION_171
0x400d4de	          0x897dec	             mov dword [rbp - 0x14], edi	      7546	ldlang.c	FUNCTION_171
0x400d4e1	        0x488975e0	             mov qword [rbp - 0x20], rsi	      7546	ldlang.c	FUNCTION_171
0x400d4e5	    0x488b05000000	            mov rax, qword [0x0400d4ec] 	      7549	ldlang.c	FUNCTION_171
0x400d4ec	          0x4889c2	                            mov rdx, rax	      7549	ldlang.c	FUNCTION_171
0x400d4ef	      0xbe38000000	                           mov esi, 0x38	      7549	ldlang.c	FUNCTION_171
0x400d4f4	      0xbf08000000	                              mov edi, 8	      7549	ldlang.c	FUNCTION_171
0x400d4f9	      0xe87145ffff	                  call sym.new_statement	      7549	ldlang.c	FUNCTION_171
0x400d4fe	        0x488945f8	                mov qword [rbp - 8], rax	      7549	ldlang.c	FUNCTION_171
0x400d502	        0x488b45f8	                mov rax, qword [rbp - 8]	      7550	ldlang.c	FUNCTION_171
0x400d506	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      7550	ldlang.c	FUNCTION_171
0x400d50a	        0x48895018	             mov qword [rax + 0x18], rdx	      7550	ldlang.c	FUNCTION_171
0x400d50e	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      7551	ldlang.c	FUNCTION_171
0x400d511	        0x488b45f8	                mov rax, qword [rbp - 8]	      7551	ldlang.c	FUNCTION_171
0x400d515	          0x895010	             mov dword [rax + 0x10], edx	      7551	ldlang.c	FUNCTION_171
0x400d518	              0x90	                                     nop	      7552	ldlang.c	FUNCTION_171
0x400d519	              0xc9	                                   leave	      7552	ldlang.c	FUNCTION_171
0x400d51a	              0xc3	                                     ret	      7552	ldlang.c	FUNCTION_171
section_for_dot	functions,0:ELSE,1:FOR,1:CALL,0:IF,7:DO,0:WHILE,4:SWITCH,0	172
0x400ab1b	              0x55	                                push rbp	      5932	ldlang.c	FUNCTION_124
0x400ab1c	          0x4889e5	                            mov rbp, rsp	      5932	ldlang.c	FUNCTION_124
0x400ab1f	    0x488b05000000	            mov rax, qword [0x0400ab26] 	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab26	          0x4885c0	                           test rax, rax	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab29	            0x740e	                            je 0x400ab39	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab2b	    0x8b0500000000	            mov eax, dword [0x0400ab31] 	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab31	            0x85c0	                           test eax, eax	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab33	     0xf8469010000	                            je 0x400aca2	      5943	ldlang.c	FUNCTION_124	IF_1
0x400ab39	    0x488b05000000	            mov rax, qword [0x0400ab40] 	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab40	        0x488945f0	             mov qword [rbp - 0x10], rax	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab44	            0xeb16	                           jmp 0x400ab5c	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab46	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5951	ldlang.c	FUNCTION_124	IF_1	FOR_1	IF_2
0x400ab4a	          0x8b4008	                mov eax, dword [rax + 8]	      5951	ldlang.c	FUNCTION_124	IF_1	FOR_1	IF_2
0x400ab4d	            0x85c0	                           test eax, eax	      5951	ldlang.c	FUNCTION_124	IF_1	FOR_1	IF_2
0x400ab4f	            0x7414	                            je 0x400ab65	      5951	ldlang.c	FUNCTION_124	IF_1	FOR_1	IF_2
0x400ab51	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5950	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab55	          0x488b00	                    mov rax, qword [rax]	      5950	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab58	        0x488945f0	             mov qword [rbp - 0x10], rax	      5950	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab5c	      0x48837df000	               cmp qword [rbp - 0x10], 0	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab61	            0x75e3	                           jne 0x400ab46	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab63	            0xeb01	                           jmp 0x400ab66	      5948	ldlang.c	FUNCTION_124	IF_1	FOR_1
0x400ab65	              0x90	                                     nop	      5952	ldlang.c	FUNCTION_124	IF_1	FOR_1	IF_2
0x400ab66	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      5954	ldlang.c	FUNCTION_124	IF_1
0x400ab6a	        0x488945f8	                mov qword [rbp - 8], rax	      5954	ldlang.c	FUNCTION_124	IF_1
0x400ab6e	            0xeb0c	                           jmp 0x400ab7c	      5955	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab70	        0x488b45f8	                mov rax, qword [rbp - 8]	      5961	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab74	        0x488b4020	            mov rax, qword [rax + 0x20] 	      5961	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab78	        0x488945f8	                mov qword [rbp - 8], rax	      5961	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab7c	      0x48837df800	                  cmp qword [rbp - 8], 0	      5955	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab81	     0xf8482000000	                            je 0x400ac09	      5955	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab87	        0x488b45f8	                mov rax, qword [rbp - 8]	      5956	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab8b	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5956	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab92	          0x83e020	                           and eax, 0x20	      5956	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab95	            0x84c0	                             test al, al	      5956	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab97	            0x7570	                           jne 0x400ac09	      5956	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab99	        0x488b45f8	                mov rax, qword [rbp - 8]	      5957	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ab9d	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5957	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400aba1	          0x4885c0	                           test rax, rax	      5957	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400aba4	            0x74ca	                            je 0x400ab70	      5957	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400aba6	        0x488b45f8	                mov rax, qword [rbp - 8]	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abaa	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abae	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abb1	      0x2500800000	                         and eax, 0x8000	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abb6	            0x85c0	                           test eax, eax	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abb8	            0x75b6	                           jne 0x400ab70	      5958	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abba	        0x488b45f8	                mov rax, qword [rbp - 8]	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abbe	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abc2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abc6	          0x4885c0	                           test rax, rax	      5955	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abc9	            0x751d	                           jne 0x400abe8	      5955	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abcb	    0x488b05000000	            mov rax, qword [0x0400abd2] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abd2	    0x488b90980000	            mov rdx, qword [rax + 0x98] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abd9	        0x488b45f8	                mov rax, qword [rbp - 8]	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abdd	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abe1	          0x4839c2	                            cmp rdx, rax	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abe4	            0x758a	                           jne 0x400ab70	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abe6	            0xeb21	                           jmp 0x400ac09	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abe8	        0x488b45f8	                mov rax, qword [rbp - 8]	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abec	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abf0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abf4	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abf8	        0x488b45f8	                mov rax, qword [rbp - 8]	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400abfc	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ac00	          0x4839c2	                            cmp rdx, rax	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ac03	     0xf8567ffffff	                           jne 0x400ab70	      5959	ldlang.c	FUNCTION_124	IF_1	WHILE_1
0x400ac09	    0x488b05000000	            mov rax, qword [0x0400ac10] 	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac10	          0x4885c0	                           test rax, rax	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac13	            0x7419	                            je 0x400ac2e	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac15	      0x48837df800	                  cmp qword [rbp - 8], 0	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac1a	            0x7412	                            je 0x400ac2e	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac1c	        0x488b45f8	                mov rax, qword [rbp - 8]	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac20	     0xfb680900000	           movzx eax, byte [rax + 0x90] 	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac27	          0x83e020	                           and eax, 0x20	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac2a	            0x84c0	                             test al, al	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac2c	            0x7574	                           jne 0x400aca2	      5963	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac2e	      0x48837df800	                  cmp qword [rbp - 8], 0	      5965	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac33	            0x740e	                            je 0x400ac43	      5965	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac35	        0x488b45f8	                mov rax, qword [rbp - 8]	      5966	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac39	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5966	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac3d	        0x488945e8	             mov qword [rbp - 0x18], rax	      5966	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac41	            0xeb20	                           jmp 0x400ac63	      5966	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_4
0x400ac43	    0x488b05000000	            mov rax, qword [0x0400ac4a] 	      5968	ldlang.c	FUNCTION_124	IF_1	IF_3	ELSE_1
0x400ac4a	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      5968	ldlang.c	FUNCTION_124	IF_1	IF_3	ELSE_1
0x400ac51	        0x488945e8	             mov qword [rbp - 0x18], rax	      5968	ldlang.c	FUNCTION_124	IF_1	IF_3	ELSE_1
0x400ac55	            0xeb0c	                           jmp 0x400ac63	      5969	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac57	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5972	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac5b	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5972	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac5f	        0x488945e8	             mov qword [rbp - 0x18], rax	      5972	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac63	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5969	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac68	            0x741e	                            je 0x400ac88	      5969	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac6a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5970	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac6e	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5970	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac71	          0x83e001	                              and eax, 1	      5970	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac74	            0x85c0	                           test eax, eax	      5970	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac76	            0x74df	                            je 0x400ac57	      5970	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac78	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5971	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac7c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5971	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac7f	      0x2500040000	                          and eax, 0x400	      5971	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac84	            0x85c0	                           test eax, eax	      5971	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac86	            0x75cf	                           jne 0x400ac57	      5971	ldlang.c	FUNCTION_124	IF_1	IF_3	WHILE_2
0x400ac88	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5973	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_5
0x400ac8d	            0x7409	                            je 0x400ac98	      5973	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_5
0x400ac8f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5974	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_5
0x400ac93	      0xe9ef000000	                           jmp 0x400ad87	      5974	ldlang.c	FUNCTION_124	IF_1	IF_3	IF_5
0x400ac98	      0xb800000000	                              mov eax, 0	      5976	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400ac9d	      0xe9e5000000	                           jmp 0x400ad87	      5976	ldlang.c	FUNCTION_124	IF_1	IF_3
0x400aca2	    0x488b05000000	            mov rax, qword [0x0400aca9] 	      5980	ldlang.c	FUNCTION_124
0x400aca9	        0x488b4038	            mov rax, qword [rax + 0x38] 	      5980	ldlang.c	FUNCTION_124
0x400acad	        0x488945e8	             mov qword [rbp - 0x18], rax	      5980	ldlang.c	FUNCTION_124
0x400acb1	            0xeb0c	                           jmp 0x400acbf	      5983	ldlang.c	FUNCTION_124	WHILE_3
0x400acb3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5988	ldlang.c	FUNCTION_124	WHILE_3
0x400acb7	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5988	ldlang.c	FUNCTION_124	WHILE_3
0x400acbb	        0x488945e8	             mov qword [rbp - 0x18], rax	      5988	ldlang.c	FUNCTION_124	WHILE_3
0x400acbf	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5983	ldlang.c	FUNCTION_124	WHILE_3
0x400acc4	            0x7463	                            je 0x400ad29	      5983	ldlang.c	FUNCTION_124	WHILE_3
0x400acc6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5984	ldlang.c	FUNCTION_124	WHILE_3
0x400acca	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5984	ldlang.c	FUNCTION_124	WHILE_3
0x400accd	      0x2500800000	                         and eax, 0x8000	      5984	ldlang.c	FUNCTION_124	WHILE_3
0x400acd2	            0x85c0	                           test eax, eax	      5984	ldlang.c	FUNCTION_124	WHILE_3
0x400acd4	            0x75dd	                           jne 0x400acb3	      5984	ldlang.c	FUNCTION_124	WHILE_3
0x400acd6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5985	ldlang.c	FUNCTION_124	WHILE_3
0x400acda	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5985	ldlang.c	FUNCTION_124	WHILE_3
0x400acdd	          0x83e001	                              and eax, 1	      5985	ldlang.c	FUNCTION_124	WHILE_3
0x400ace0	            0x85c0	                           test eax, eax	      5985	ldlang.c	FUNCTION_124	WHILE_3
0x400ace2	            0x74cf	                            je 0x400acb3	      5985	ldlang.c	FUNCTION_124	WHILE_3
0x400ace4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5986	ldlang.c	FUNCTION_124	WHILE_3
0x400ace8	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5986	ldlang.c	FUNCTION_124	WHILE_3
0x400aceb	      0x2500040000	                          and eax, 0x400	      5986	ldlang.c	FUNCTION_124	WHILE_3
0x400acf0	            0x85c0	                           test eax, eax	      5986	ldlang.c	FUNCTION_124	WHILE_3
0x400acf2	            0x75bf	                           jne 0x400acb3	      5986	ldlang.c	FUNCTION_124	WHILE_3
0x400acf4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400acf8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400acfc	          0x4885c0	                           test rax, rax	      5983	ldlang.c	FUNCTION_124	WHILE_3
0x400acff	            0x7516	                           jne 0x400ad17	      5983	ldlang.c	FUNCTION_124	WHILE_3
0x400ad01	    0x488b05000000	            mov rax, qword [0x0400ad08] 	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad08	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad0f	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad13	            0x759e	                           jne 0x400acb3	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad15	            0xeb12	                           jmp 0x400ad29	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad17	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad1b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad1f	        0x488b4018	            mov rax, qword [rax + 0x18] 	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad23	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad27	            0x758a	                           jne 0x400acb3	      5987	ldlang.c	FUNCTION_124	WHILE_3
0x400ad29	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5989	ldlang.c	FUNCTION_124	IF_6
0x400ad2e	            0x7520	                           jne 0x400ad50	      5989	ldlang.c	FUNCTION_124	IF_6
0x400ad30	    0x488b05000000	            mov rax, qword [0x0400ad37] 	      5990	ldlang.c	FUNCTION_124	IF_6
0x400ad37	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      5990	ldlang.c	FUNCTION_124	IF_6
0x400ad3e	        0x488945e8	             mov qword [rbp - 0x18], rax	      5990	ldlang.c	FUNCTION_124	IF_6
0x400ad42	            0xeb0c	                           jmp 0x400ad50	      5991	ldlang.c	FUNCTION_124	WHILE_4
0x400ad44	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5994	ldlang.c	FUNCTION_124	WHILE_4
0x400ad48	        0x488b4010	            mov rax, qword [rax + 0x10] 	      5994	ldlang.c	FUNCTION_124	WHILE_4
0x400ad4c	        0x488945e8	             mov qword [rbp - 0x18], rax	      5994	ldlang.c	FUNCTION_124	WHILE_4
0x400ad50	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5991	ldlang.c	FUNCTION_124	WHILE_4
0x400ad55	            0x741e	                            je 0x400ad75	      5991	ldlang.c	FUNCTION_124	WHILE_4
0x400ad57	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5992	ldlang.c	FUNCTION_124	WHILE_4
0x400ad5b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5992	ldlang.c	FUNCTION_124	WHILE_4
0x400ad5e	          0x83e001	                              and eax, 1	      5992	ldlang.c	FUNCTION_124	WHILE_4
0x400ad61	            0x85c0	                           test eax, eax	      5992	ldlang.c	FUNCTION_124	WHILE_4
0x400ad63	            0x74df	                            je 0x400ad44	      5992	ldlang.c	FUNCTION_124	WHILE_4
0x400ad65	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5993	ldlang.c	FUNCTION_124	WHILE_4
0x400ad69	          0x8b4020	            mov eax, dword [rax + 0x20] 	      5993	ldlang.c	FUNCTION_124	WHILE_4
0x400ad6c	      0x2500040000	                          and eax, 0x400	      5993	ldlang.c	FUNCTION_124	WHILE_4
0x400ad71	            0x85c0	                           test eax, eax	      5993	ldlang.c	FUNCTION_124	WHILE_4
0x400ad73	            0x75cf	                           jne 0x400ad44	      5993	ldlang.c	FUNCTION_124	WHILE_4
0x400ad75	      0x48837de800	               cmp qword [rbp - 0x18], 0	      5995	ldlang.c	FUNCTION_124	IF_7
0x400ad7a	            0x7406	                            je 0x400ad82	      5995	ldlang.c	FUNCTION_124	IF_7
0x400ad7c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      5996	ldlang.c	FUNCTION_124	IF_7
0x400ad80	            0xeb05	                           jmp 0x400ad87	      5996	ldlang.c	FUNCTION_124	IF_7
0x400ad82	      0xb800000000	                              mov eax, 0	      5998	ldlang.c	FUNCTION_124
0x400ad87	              0x5d	                                 pop rbp	      5999	ldlang.c	FUNCTION_124
0x400ad88	              0xc3	                                     ret	      5999	ldlang.c	FUNCTION_124
open_input_bfds	functions,0:ELSE,1:FOR,1:CALL,13:IF,9:DO,1:WHILE,0:SWITCH,1	242
0x4005b05	              0x55	                                push rbp	      3253	ldlang.c	FUNCTION_78
0x4005b06	          0x4889e5	                            mov rbp, rsp	      3253	ldlang.c	FUNCTION_78
0x4005b09	              0x53	                                push rbx	      3253	ldlang.c	FUNCTION_78
0x4005b0a	        0x4883ec58	                           sub rsp, 0x58	      3253	ldlang.c	FUNCTION_78
0x4005b0e	        0x48897da8	             mov qword [rbp - 0x58], rdi	      3253	ldlang.c	FUNCTION_78
0x4005b12	          0x8975a4	             mov dword [rbp - 0x5c], esi	      3253	ldlang.c	FUNCTION_78
0x4005b15	    0x64488b042528	                mov rax, qword fs:[0x28]	      3253	ldlang.c	FUNCTION_78
0x4005b1e	        0x488945e8	             mov qword [rbp - 0x18], rax	      3253	ldlang.c	FUNCTION_78
0x4005b22	            0x31c0	                            xor eax, eax	      3253	ldlang.c	FUNCTION_78
0x4005b24	      0xe920030000	                           jmp 0x4005e49	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005b29	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b2d	          0x8b4008	                mov eax, dword [rax + 8]	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b30	          0x83f80f	                            cmp eax, 0xf	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b33	     0xf87fe020000	                            ja 0x4005e37	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b39	            0x89c0	                            mov eax, eax	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b3b	    0x488b04c50000	                  mov rax, qword [rax*8]	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b43	            0xffe0	                                 jmp rax	      3256	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b45	    0x488b05000000	            mov rax, qword [0x04005b4c] 	      3259	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_1
0x4005b4c	          0x8b55a4	             mov edx, dword [rbp - 0x5c]	      3259	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_1
0x4005b4f	            0x89d6	                            mov esi, edx	      3259	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_1
0x4005b51	          0x4889c7	                            mov rdi, rax	      3259	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_1
0x4005b54	      0xe8acffffff	                call sym.open_input_bfds	      3259	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_1
0x4005b59	      0xe9e0020000	                           jmp 0x4005e3e	      3260	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b5e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b62	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b66	          0x8b55a4	             mov edx, dword [rbp - 0x5c]	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b69	            0x89d6	                            mov esi, edx	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b6b	          0x4889c7	                            mov rdi, rax	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b6e	      0xe892ffffff	                call sym.open_input_bfds	      3262	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_2
0x4005b73	      0xe9c6020000	                           jmp 0x4005e3e	      3263	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005b78	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      3266	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b7b	          0x83e002	                              and eax, 2	      3266	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b7e	            0x85c0	                           test eax, eax	      3266	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b80	            0x754c	                           jne 0x4005bce	      3266	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b82	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3267	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b86	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3267	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b8a	          0x4885c0	                           test rax, rax	      3267	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b8d	            0x743f	                            je 0x4005bce	      3267	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b8f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b93	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b97	      0xbe00000000	                              mov esi, 0	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b9c	          0x4889c7	                            mov rdi, rax	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005b9f	      0xe800000000	                          call 0x4005ba4	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005ba4	          0x4885c0	                           test rax, rax	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005ba7	            0x7525	                           jne 0x4005bce	      3268	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1
0x4005ba9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bad	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bb1	          0x4889c7	                            mov rdi, rax	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bb4	      0xe851a6ffff	                   call sym.archive_path	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bb9	          0x4885c0	                           test rax, rax	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bbc	            0x7510	                           jne 0x4005bce	      3269	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_1	CALL_3
0x4005bbe	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3270	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_4
0x4005bc2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3270	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_4
0x4005bc6	          0x4889c7	                            mov rdi, rax	      3270	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_4
0x4005bc9	      0xe8e0ecffff	                    call sym.lookup_name	      3270	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_4
0x4005bce	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005bd2	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005bd6	          0x8b55a4	             mov edx, dword [rbp - 0x5c]	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005bd9	            0x89d6	                            mov esi, edx	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005bdb	          0x4889c7	                            mov rdi, rax	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005bde	      0xe822ffffff	                call sym.open_input_bfds	      3271	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_5
0x4005be3	      0xe956020000	                           jmp 0x4005e3e	      3272	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005be8	    0x488b05000000	            mov rax, qword [0x04005bef] 	      3283	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bef	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3283	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bf3	        0x488945b8	             mov qword [rbp - 0x48], rax	      3283	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bf7	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      3285	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bfa	          0x83c801	                               or eax, 1	      3285	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bfd	            0x89c2	                            mov edx, eax	      3285	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1
0x4005bff	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3284	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1	CALL_6
0x4005c03	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3284	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1	CALL_6
0x4005c07	            0x89d6	                            mov esi, edx	      3284	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1	CALL_6
0x4005c09	          0x4889c7	                            mov rdi, rax	      3284	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1	CALL_6
0x4005c0c	      0xe8f4feffff	                call sym.open_input_bfds	      3284	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	DO_1	CALL_6
0x4005c11	    0x488b05000000	            mov rax, qword [0x04005c18] 	      3287	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c18	        0x488b4030	            mov rax, qword [rax + 0x30] 	      3287	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c1c	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      3287	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c20	            0x75c6	                           jne 0x4005be8	      3287	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c22	      0xe917020000	                           jmp 0x4005e3e	      3289	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c27	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3291	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c2b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3291	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c2f	    0x488905000000	            mov qword [0x04005c36], rax 	      3291	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c36	      0xe903020000	                           jmp 0x4005e3e	      3292	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005c3b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3294	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c3f	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      3294	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c43	          0x83e004	                              and eax, 4	      3294	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c46	            0x84c0	                             test al, al	      3294	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c48	     0xf84aa010000	                            je 0x4005df8	      3294	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c4e	    0x488b15000000	            mov rdx, qword [0x04005c55] 	      3300	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c55	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3300	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c59	        0x48895040	             mov qword [rax + 0x40], rdx	      3300	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005c5d	        0x837da400	               cmp dword [rbp - 0x5c], 0	      3307	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c61	     0xf84e5000000	                            je 0x4005d4c	      3307	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c67	          0x8b45a4	             mov eax, dword [rbp - 0x5c]	      3309	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c6a	          0x83e002	                              and eax, 2	      3309	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c6d	            0x85c0	                           test eax, eax	      3309	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c6f	            0x7410	                            je 0x4005c81	      3309	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c71	    0x488b05000000	            mov rax, qword [0x04005c78] 	      3310	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c78	          0x4885c0	                           test rax, rax	      3310	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c7b	     0xf85cb000000	                           jne 0x4005d4c	      3310	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c81	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3312	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c85	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      3312	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c89	          0x83e002	                              and eax, 2	      3312	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c8c	            0x84c0	                             test al, al	      3312	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c8e	     0xf84b8000000	                            je 0x4005d4c	      3312	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c94	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3313	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c98	        0x488b4020	            mov rax, qword [rax + 0x20] 	      3313	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005c9c	        0x488945c0	             mov qword [rbp - 0x40], rax	      3313	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005ca0	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      3313	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005ca5	     0xf84a1000000	                            je 0x4005d4c	      3313	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cab	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3314	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005caf	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      3314	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cb3	          0x83e007	                              and eax, 7	      3314	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cb6	            0x3c02	                               cmp al, 2	      3314	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cb8	            0x750f	                           jne 0x4005cc9	      3314	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cba	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3315	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cbe	         0xfb64049	           movzx eax, byte [rax + 0x49] 	      3315	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cc2	          0x83e001	                              and eax, 1	      3315	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cc5	            0x84c0	                             test al, al	      3315	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cc7	            0x7467	                            je 0x4005d30	      3315	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cc9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3316	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005ccd	         0xfb64044	           movzx eax, byte [rax + 0x44] 	      3316	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cd1	          0x83e007	                              and eax, 7	      3316	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cd4	            0x3c01	                               cmp al, 1	      3316	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cd6	            0x7574	                           jne 0x4005d4c	      3316	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cd8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cdc	          0x8b4044	            mov eax, dword [rax + 0x44] 	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cdf	          0xc1e805	                              shr eax, 5	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005ce2	      0x25ffff0f00	                        and eax, 0xfffff	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005ce7	          0x83e040	                           and eax, 0x40	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cea	            0x85c0	                           test eax, eax	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cec	            0x745e	                            je 0x4005d4c	      3317	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cee	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3318	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cf2	         0xfb64048	           movzx eax, byte [rax + 0x48] 	      3318	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cf6	          0x83e080	                     and eax, 0xffffff80	      3318	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cf9	            0x84c0	                             test al, al	      3318	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cfb	            0x744f	                            je 0x4005d4c	      3318	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005cfd	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3319	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d01	        0x488b4008	                mov rax, qword [rax + 8]	      3319	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d05	          0x8b4008	                mov eax, dword [rax + 8]	      3319	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d08	          0x83f805	                              cmp eax, 5	      3319	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d0b	            0x753f	                           jne 0x4005d4c	      3319	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d0d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d11	    0x488b80f80000	            mov rax, qword [rax + 0xf8] 	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d18	     0xfb7808c0c00	          movzx eax, word [rax + 0xc8c] 	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d1f	        0x66c1e806	                               shr ax, 6	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d23	          0x83e00f	                            and eax, 0xf	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d26	           0xfb6c0	                           movzx eax, al	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d29	          0x83e001	                              and eax, 1	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d2c	            0x85c0	                           test eax, eax	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d2e	            0x741c	                            je 0x4005d4c	      3320	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3	CALL_7
0x4005d30	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3322	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d34	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      3322	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d38	          0x83e2fd	                     and edx, 0xfffffffd	      3322	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d3b	          0x885049	               mov byte [rax + 0x49], dl	      3322	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d3e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3323	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d42	         0xfb65049	           movzx edx, byte [rax + 0x49] 	      3323	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d46	          0x83ca10	                            or edx, 0x10	      3323	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d49	          0x885049	               mov byte [rax + 0x49], dl	      3323	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_3
0x4005d4c	    0x488b05000000	            mov rax, qword [0x04005d53] 	      3326	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005d53	        0x488945c8	             mov qword [rbp - 0x38], rax	      3326	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2
0x4005d57	        0x488d45d0	                   lea rax, [rbp - 0x30]	      3327	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	CALL_8
0x4005d5b	          0x4889c7	                            mov rdi, rax	      3327	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	CALL_8
0x4005d5e	      0xe800000000	                          call 0x4005d63	      3327	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	CALL_8
0x4005d63	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d67	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d6b	          0x4889d6	                            mov rsi, rdx	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d6e	          0x4889c7	                            mov rdi, rax	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d71	      0xe800000000	                          call 0x4005d76	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d76	            0x85c0	                           test eax, eax	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d78	            0x750a	                           jne 0x4005d84	      3329	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4	CALL_9
0x4005d7a	    0xc70500000000	               mov dword [0x04005d84], 0	      3330	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_4
0x4005d84	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3332	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5
0x4005d88	          0x4885c0	                           test rax, rax	      3332	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5
0x4005d8b	            0x746b	                            je 0x4005df8	      3332	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5
0x4005d8d	    0x488b05000000	            mov rax, qword [0x04005d94] 	      3340	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005d94	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	      3340	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005d98	            0x7445	                            je 0x4005ddf	      3340	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005d9a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005d9e	        0x488b5810	            mov rbx, qword [rax + 0x10] 	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005da2	      0xbf00000000	                              mov edi, 0	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005da7	      0xe800000000	                          call 0x4005dac	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005dac	          0x4889de	                            mov rsi, rbx	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005daf	          0x4889c7	                            mov rdi, rax	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005db2	      0xb800000000	                              mov eax, 0	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005db7	      0xe800000000	                          call 0x4005dbc	      3342	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6	CALL_11
0x4005dbc	    0x488b05000000	            mov rax, qword [0x04005dc3] 	      3345	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dc3	        0x488b4008	                mov rax, qword [rax + 8]	      3345	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dc7	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3345	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dcb	          0x488910	                    mov qword [rax], rdx	      3345	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dce	    0x488b05000000	            mov rax, qword [0x04005dd5] 	      3346	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dd5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      3346	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005dd9	        0x48895008	                mov qword [rax + 8], rdx	      3346	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005ddd	            0xeb19	                           jmp 0x4005df8	      3346	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	IF_6
0x4005ddf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3350	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005de3	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3350	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005de7	          0x488b12	                    mov rdx, qword [rdx]	      3350	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005dea	          0x488910	                    mov qword [rax], rdx	      3350	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005ded	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3351	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005df1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3351	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005df5	          0x488910	                    mov qword [rax], rdx	      3351	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_2	IF_5	ELSE_1
0x4005df8	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3358	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_7
0x4005dfc	    0x488b05000000	            mov rax, qword [0x04005e03] 	      3358	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_7
0x4005e03	          0x4839c2	                            cmp rdx, rax	      3358	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_7
0x4005e06	            0x7532	                           jne 0x4005e3a	      3358	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_7
0x4005e08	    0x48c705000000	               mov qword [0x04005e13], 0	      3359	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_7
0x4005e13	            0xeb25	                           jmp 0x4005e3a	      3361	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e15	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3363	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_8
0x4005e19	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3363	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_8
0x4005e1d	          0x8b4010	            mov eax, dword [rax + 0x10] 	      3363	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_8
0x4005e20	          0x83f808	                              cmp eax, 8	      3363	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_8
0x4005e23	            0x7418	                            je 0x4005e3d	      3363	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	IF_8
0x4005e25	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3364	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_12
0x4005e29	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3364	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_12
0x4005e2d	          0x4889c7	                            mov rdi, rax	      3364	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_12
0x4005e30	      0xe800000000	                          call 0x4005e35	      3364	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1	CALL_12
0x4005e35	            0xeb06	                           jmp 0x4005e3d	      3365	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e37	              0x90	                                     nop	      3367	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e38	            0xeb04	                           jmp 0x4005e3e	      3367	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e3a	              0x90	                                     nop	      3361	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e3b	            0xeb01	                           jmp 0x4005e3e	      3361	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e3d	              0x90	                                     nop	      3365	ldlang.c	FUNCTION_78	FOR_1	SWITCH_1
0x4005e3e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005e42	          0x488b00	                    mov rax, qword [rax]	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005e45	        0x488945a8	             mov qword [rbp - 0x58], rax	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005e49	      0x48837da800	               cmp qword [rbp - 0x58], 0	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005e4e	     0xf85d5fcffff	                           jne 0x4005b29	      3254	ldlang.c	FUNCTION_78	FOR_1
0x4005e54	     0xfb605000000	           movzx eax, byte [0x04005e5b] 	      3372	ldlang.c	FUNCTION_78	IF_9
0x4005e5b	          0x83e008	                              and eax, 8	      3372	ldlang.c	FUNCTION_78	IF_9
0x4005e5e	            0x84c0	                             test al, al	      3372	ldlang.c	FUNCTION_78	IF_9
0x4005e60	            0x740f	                            je 0x4005e71	      3372	ldlang.c	FUNCTION_78	IF_9
0x4005e62	      0xbf00000000	                              mov edi, 0	      3373	ldlang.c	FUNCTION_78	CALL_13
0x4005e67	      0xb800000000	                              mov eax, 0	      3373	ldlang.c	FUNCTION_78	CALL_13
0x4005e6c	      0xe800000000	                          call 0x4005e71	      3373	ldlang.c	FUNCTION_78	CALL_13
0x4005e71	              0x90	                                     nop	      3374	ldlang.c	FUNCTION_78
0x4005e72	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3374	ldlang.c	FUNCTION_78
0x4005e76	    0x644833042528	                xor rax, qword fs:[0x28]	      3374	ldlang.c	FUNCTION_78
0x4005e7f	            0x7405	                            je 0x4005e86	      3374	ldlang.c	FUNCTION_78
0x4005e81	      0xe800000000	                          call 0x4005e86	      3374	ldlang.c	FUNCTION_78
0x4005e86	        0x4883c458	                           add rsp, 0x58	      3374	ldlang.c	FUNCTION_78
0x4005e8a	              0x5b	                                 pop rbx	      3374	ldlang.c	FUNCTION_78
0x4005e8b	              0x5d	                                 pop rbp	      3374	ldlang.c	FUNCTION_78
0x4005e8c	              0xc3	                                     ret	      3374	ldlang.c	FUNCTION_78
lang_add_wild	functions,0:ELSE,1:FOR,1:CALL,3:IF,4:DO,0:WHILE,0:SWITCH,0	97
0x400d208	              0x55	                                push rbp	      7433	ldlang.c	FUNCTION_164
0x400d209	          0x4889e5	                            mov rbp, rsp	      7433	ldlang.c	FUNCTION_164
0x400d20c	        0x4883ec40	                           sub rsp, 0x40	      7433	ldlang.c	FUNCTION_164
0x400d210	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      7433	ldlang.c	FUNCTION_164
0x400d214	        0x488975d0	             mov qword [rbp - 0x30], rsi	      7433	ldlang.c	FUNCTION_164
0x400d218	          0x8955cc	             mov dword [rbp - 0x34], edx	      7433	ldlang.c	FUNCTION_164
0x400d21b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d21f	        0x488945e8	             mov qword [rbp - 0x18], rax	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d223	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d22b	            0xeb26	                           jmp 0x400d253	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d22d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7442	ldlang.c	FUNCTION_164	FOR_1
0x400d231	          0x488b00	                    mov rax, qword [rax]	      7442	ldlang.c	FUNCTION_164	FOR_1
0x400d234	        0x488945f0	             mov qword [rbp - 0x10], rax	      7442	ldlang.c	FUNCTION_164	FOR_1
0x400d238	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7443	ldlang.c	FUNCTION_164	FOR_1
0x400d23c	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      7443	ldlang.c	FUNCTION_164	FOR_1
0x400d240	          0x488910	                    mov qword [rax], rdx	      7443	ldlang.c	FUNCTION_164	FOR_1
0x400d243	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      7440	ldlang.c	FUNCTION_164	FOR_1
0x400d247	        0x488945d0	             mov qword [rbp - 0x30], rax	      7440	ldlang.c	FUNCTION_164	FOR_1
0x400d24b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      7440	ldlang.c	FUNCTION_164	FOR_1
0x400d24f	        0x488945e8	             mov qword [rbp - 0x18], rax	      7440	ldlang.c	FUNCTION_164	FOR_1
0x400d253	      0x48837de800	               cmp qword [rbp - 0x18], 0	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d258	            0x75d3	                           jne 0x400d22d	      7438	ldlang.c	FUNCTION_164	FOR_1
0x400d25a	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d25f	            0x7454	                            je 0x400d2b5	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d261	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d265	          0x488b00	                    mov rax, qword [rax]	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d268	          0x4885c0	                           test rax, rax	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d26b	            0x7448	                            je 0x400d2b5	      7446	ldlang.c	FUNCTION_164	IF_1
0x400d26d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d271	          0x488b00	                    mov rax, qword [rax]	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d274	      0xbe00000000	                              mov esi, 0	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d279	          0x4889c7	                            mov rdi, rax	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d27c	      0xe800000000	                          call 0x400d281	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d281	            0x85c0	                           test eax, eax	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d283	            0x750d	                           jne 0x400d292	      7448	ldlang.c	FUNCTION_164	IF_1	IF_2	CALL_1
0x400d285	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7449	ldlang.c	FUNCTION_164	IF_1	IF_2
0x400d289	    0x48c700000000	                      mov qword [rax], 0	      7449	ldlang.c	FUNCTION_164	IF_1	IF_2
0x400d290	            0xeb23	                           jmp 0x400d2b5	      7449	ldlang.c	FUNCTION_164	IF_1	IF_2
0x400d292	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d296	          0x488b00	                    mov rax, qword [rax]	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d299	      0xbe00000000	                              mov esi, 0	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d29e	          0x4889c7	                            mov rdi, rax	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d2a1	      0xe800000000	                          call 0x400d2a6	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d2a6	          0x4885c0	                           test rax, rax	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d2a9	            0x750a	                           jne 0x400d2b5	      7450	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d2ab	    0xc70500000000	               mov dword [0x0400d2b5], 1	      7451	ldlang.c	FUNCTION_164	IF_1	ELSE_1	IF_3
0x400d2b5	    0x488b05000000	            mov rax, qword [0x0400d2bc] 	      7454	ldlang.c	FUNCTION_164
0x400d2bc	          0x4889c2	                            mov rdx, rax	      7454	ldlang.c	FUNCTION_164
0x400d2bf	      0xbe80000000	                           mov esi, 0x80	      7454	ldlang.c	FUNCTION_164
0x400d2c4	      0xbf04000000	                              mov edi, 4	      7454	ldlang.c	FUNCTION_164
0x400d2c9	      0xe8a147ffff	                  call sym.new_statement	      7454	ldlang.c	FUNCTION_164
0x400d2ce	        0x488945f8	                mov qword [rbp - 8], rax	      7454	ldlang.c	FUNCTION_164
0x400d2d2	        0x488b45f8	                mov rax, qword [rbp - 8]	      7455	ldlang.c	FUNCTION_164
0x400d2d6	    0x48c740100000	               mov qword [rax + 0x10], 0	      7455	ldlang.c	FUNCTION_164
0x400d2de	        0x488b45f8	                mov rax, qword [rbp - 8]	      7456	ldlang.c	FUNCTION_164
0x400d2e2	    0xc74018000000	               mov dword [rax + 0x18], 0	      7456	ldlang.c	FUNCTION_164
0x400d2e9	        0x488b45f8	                mov rax, qword [rbp - 8]	      7457	ldlang.c	FUNCTION_164
0x400d2ed	    0x48c740780000	               mov qword [rax + 0x78], 0	      7457	ldlang.c	FUNCTION_164
0x400d2f5	        0x488b45f8	                mov rax, qword [rbp - 8]	      7458	ldlang.c	FUNCTION_164
0x400d2f9	    0x48c740400000	               mov qword [rax + 0x40], 0	      7458	ldlang.c	FUNCTION_164
0x400d301	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      7459	ldlang.c	FUNCTION_164	IF_4
0x400d306	            0x7446	                            je 0x400d34e	      7459	ldlang.c	FUNCTION_164	IF_4
0x400d308	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7461	ldlang.c	FUNCTION_164	IF_4
0x400d30c	          0x488b10	                    mov rdx, qword [rax]	      7461	ldlang.c	FUNCTION_164	IF_4
0x400d30f	        0x488b45f8	                mov rax, qword [rbp - 8]	      7461	ldlang.c	FUNCTION_164	IF_4
0x400d313	        0x48895010	             mov qword [rax + 0x10], rdx	      7461	ldlang.c	FUNCTION_164	IF_4
0x400d317	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d31b	          0x8b4010	            mov eax, dword [rax + 0x10] 	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d31e	          0x83f801	                              cmp eax, 1	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d321	           0xf94c0	                                 sete al	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d324	           0xfb6d0	                           movzx edx, al	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d327	        0x488b45f8	                mov rax, qword [rbp - 8]	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d32b	          0x895018	             mov dword [rax + 0x18], edx	      7462	ldlang.c	FUNCTION_164	IF_4
0x400d32e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7463	ldlang.c	FUNCTION_164	IF_4
0x400d332	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      7463	ldlang.c	FUNCTION_164	IF_4
0x400d336	        0x488b45f8	                mov rax, qword [rbp - 8]	      7463	ldlang.c	FUNCTION_164	IF_4
0x400d33a	        0x48895078	             mov qword [rax + 0x78], rdx	      7463	ldlang.c	FUNCTION_164	IF_4
0x400d33e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      7464	ldlang.c	FUNCTION_164	IF_4
0x400d342	        0x488b5008	                mov rdx, qword [rax + 8]	      7464	ldlang.c	FUNCTION_164	IF_4
0x400d346	        0x488b45f8	                mov rax, qword [rbp - 8]	      7464	ldlang.c	FUNCTION_164	IF_4
0x400d34a	        0x48895040	             mov qword [rax + 0x40], rdx	      7464	ldlang.c	FUNCTION_164	IF_4
0x400d34e	        0x488b45f8	                mov rax, qword [rbp - 8]	      7466	ldlang.c	FUNCTION_164
0x400d352	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      7466	ldlang.c	FUNCTION_164
0x400d356	        0x48895020	             mov qword [rax + 0x20], rdx	      7466	ldlang.c	FUNCTION_164
0x400d35a	        0x488b45f8	                mov rax, qword [rbp - 8]	      7467	ldlang.c	FUNCTION_164
0x400d35e	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      7467	ldlang.c	FUNCTION_164
0x400d361	          0x895028	             mov dword [rax + 0x28], edx	      7467	ldlang.c	FUNCTION_164
0x400d364	        0x488b45f8	                mov rax, qword [rbp - 8]	      7468	ldlang.c	FUNCTION_164	CALL_2
0x400d368	        0x4883c030	                           add rax, 0x30	      7468	ldlang.c	FUNCTION_164	CALL_2
0x400d36c	          0x4889c7	                            mov rdi, rax	      7468	ldlang.c	FUNCTION_164	CALL_2
0x400d36f	      0xe800000000	                          call 0x400d374	      7468	ldlang.c	FUNCTION_164	CALL_2
0x400d374	        0x488b45f8	                mov rax, qword [rbp - 8]	      7469	ldlang.c	FUNCTION_164	CALL_3
0x400d378	          0x4889c7	                            mov rdi, rax	      7469	ldlang.c	FUNCTION_164	CALL_3
0x400d37b	      0xe83b40ffff	call sym.analyze_walk_wild_section_handler	      7469	ldlang.c	FUNCTION_164	CALL_3
0x400d380	              0x90	                                     nop	      7470	ldlang.c	FUNCTION_164
0x400d381	              0xc9	                                   leave	      7470	ldlang.c	FUNCTION_164
0x400d382	              0xc3	                                     ret	      7470	ldlang.c	FUNCTION_164
