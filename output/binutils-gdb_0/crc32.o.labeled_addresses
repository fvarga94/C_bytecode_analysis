xcrc32	CALL,0:WHILE,1:IF,0:FOR,0:ELSE,0:DO,0:functions,0:SWITCH,0	32
0x4000040	              0x55	                                push rbp	       171	crc32.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       171	crc32.c	FUNCTION_1
0x4000044	        0x48897de8	             mov qword [rbp - 0x18], rdi	       171	crc32.c	FUNCTION_1
0x4000048	          0x8975e4	             mov dword [rbp - 0x1c], esi	       171	crc32.c	FUNCTION_1
0x400004b	          0x8955e0	             mov dword [rbp - 0x20], edx	       171	crc32.c	FUNCTION_1
0x400004e	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       172	crc32.c	FUNCTION_1
0x4000051	          0x8945fc	                mov dword [rbp - 4], eax	       172	crc32.c	FUNCTION_1
0x4000054	            0xeb32	                           jmp 0x4000088	       173	crc32.c	FUNCTION_1	WHILE_1
0x4000056	          0x8b45fc	                mov eax, dword [rbp - 4]	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000059	          0xc1e008	                              shl eax, 8	       175	crc32.c	FUNCTION_1	WHILE_1
0x400005c	            0x89c2	                            mov edx, eax	       175	crc32.c	FUNCTION_1	WHILE_1
0x400005e	          0x8b45fc	                mov eax, dword [rbp - 4]	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000061	          0xc1e818	                           shr eax, 0x18	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000064	            0x89c1	                            mov ecx, eax	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000066	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       175	crc32.c	FUNCTION_1	WHILE_1
0x400006a	           0xfb600	                   movzx eax, byte [rax]	       175	crc32.c	FUNCTION_1	WHILE_1
0x400006d	           0xfb6c0	                           movzx eax, al	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000070	            0x31c8	                            xor eax, ecx	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000072	           0xfb6c0	                           movzx eax, al	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000075	            0x89c0	                            mov eax, eax	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000077	    0x8b0485000000	                  mov eax, dword [rax*4]	       175	crc32.c	FUNCTION_1	WHILE_1
0x400007e	            0x31d0	                            xor eax, edx	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000080	          0x8945fc	                mov dword [rbp - 4], eax	       175	crc32.c	FUNCTION_1	WHILE_1
0x4000083	      0x488345e801	               add qword [rbp - 0x18], 1	       176	crc32.c	FUNCTION_1	WHILE_1
0x4000088	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       173	crc32.c	FUNCTION_1	WHILE_1
0x400008b	          0x8d50ff	                      lea edx, [rax - 1]	       173	crc32.c	FUNCTION_1	WHILE_1
0x400008e	          0x8955e4	             mov dword [rbp - 0x1c], edx	       173	crc32.c	FUNCTION_1	WHILE_1
0x4000091	            0x85c0	                           test eax, eax	       173	crc32.c	FUNCTION_1	WHILE_1
0x4000093	            0x75c1	                           jne 0x4000056	       173	crc32.c	FUNCTION_1	WHILE_1
0x4000095	          0x8b45fc	                mov eax, dword [rbp - 4]	       178	crc32.c	FUNCTION_1
0x4000098	              0x5d	                                 pop rbp	       179	crc32.c	FUNCTION_1
0x4000099	              0xc3	                                     ret	       179	crc32.c	FUNCTION_1
