i8042_free_irqs	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,2:IF,2	14
0x4000790	    0x803d00000000	                cmp byte [0x04000797], 0	      1421	i8042.c	FUNCTION_46	IF_1
0x4000797	            0x752a	                           jne 0x40007c3	      1421	i8042.c	FUNCTION_46	IF_1
0x4000799	    0x803d00000000	                cmp byte [0x040007a0], 0	      1423	i8042.c	FUNCTION_46	IF_2
0x40007a0	            0x7412	                            je 0x40007b4	      1423	i8042.c	FUNCTION_46	IF_2
0x40007a2	    0x488b35000000	            mov rsi, qword [0x040007a9] 	      1424	i8042.c	FUNCTION_46	CALL_2
0x40007a9	    0x8b3d00000000	            mov edi, dword [0x040007af] 	      1424	i8042.c	FUNCTION_46	CALL_2
0x40007af	      0xe800000000	                          call 0x40007b4	      1424	i8042.c	FUNCTION_46	CALL_2
0x40007b4	    0xc60500000000	                mov byte [0x040007bb], 0	      1426	i8042.c	FUNCTION_46
0x40007bb	    0xc60500000000	                mov byte [0x040007c2], 0	      1426	i8042.c	FUNCTION_46
0x40007c2	              0xc3	                                     ret	      1426	i8042.c	FUNCTION_46
0x40007c3	    0x488b35000000	            mov rsi, qword [0x040007ca] 	      1422	i8042.c	FUNCTION_46	CALL_1
0x40007ca	    0x8b3d00000000	            mov edi, dword [0x040007d0] 	      1422	i8042.c	FUNCTION_46	CALL_1
0x40007d0	      0xe800000000	                          call 0x40007d5	      1422	i8042.c	FUNCTION_46	CALL_1
0x40007d5	            0xebc2	                           jmp 0x4000799	      1422	i8042.c	FUNCTION_46	CALL_1
i8042_aux_write	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	16
0x4000c60	        0x4883ec08	                              sub rsp, 8	       382	i8042.c	FUNCTION_12
0x4000c64	          0x488b07	                    mov rax, qword [rdi]	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c67	      0x4088742404	                 mov byte [rsp + 4], sil	       382	i8042.c	FUNCTION_12
0x4000c6c	         0xfbe700e	            movsx esi, byte [rax + 0xe] 	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c70	        0x4080feff	                           cmp sil, 0xff	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c74	            0x7415	                            je 0x4000c8b	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c76	      0x488d7c2404	                      lea rdi, [rsp + 4]	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c7b	    0x81c690100000	                         add esi, 0x1090	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c81	      0xe800000000	                          call 0x4000c86	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c86	        0x4883c408	                              add rsp, 8	       388	i8042.c	FUNCTION_12
0x4000c8a	              0xc3	                                     ret	       388	i8042.c	FUNCTION_12
0x4000c8b	      0x488d7c2404	                      lea rdi, [rsp + 4]	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c90	      0xbed4100000	                         mov esi, 0x10d4	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c95	      0xe800000000	                          call 0x4000c9a	       385	i8042.c	FUNCTION_12	CALL_1
0x4000c9a	        0x4883c408	                              add rsp, 8	       388	i8042.c	FUNCTION_12
0x4000c9e	              0xc3	                                     ret	       388	i8042.c	FUNCTION_12
i8042_lock_chip	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	2
0x4000180	    0x48c7c7000000	                              mov rdi, 0	       180	i8042.c	FUNCTION_2	CALL_1
0x4000187	      0xe900000000	                           jmp 0x400018c	       180	i8042.c	FUNCTION_2	CALL_1
i8042_dritek_enable	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,2:IF,1	20
0x4000b00	        0x4883ec10	                           sub rsp, 0x10	      1136	i8042.c	FUNCTION_31
0x4000b04	      0xbe59100000	                         mov esi, 0x1059	      1140	i8042.c	FUNCTION_31	CALL_1
0x4000b09	      0x488d7c2407	                      lea rdi, [rsp + 7]	      1140	i8042.c	FUNCTION_31	CALL_1
0x4000b0e	      0xc644240790	                mov byte [rsp + 7], 0x90	      1137	i8042.c	FUNCTION_31
0x4000b13	    0x65488b042528	                mov rax, qword gs:[0x28]	      1136	i8042.c	FUNCTION_31
0x4000b1c	      0x4889442408	                mov qword [rsp + 8], rax	      1136	i8042.c	FUNCTION_31
0x4000b21	            0x31c0	                            xor eax, eax	      1136	i8042.c	FUNCTION_31
0x4000b23	      0xe800000000	                          call 0x4000b28	      1140	i8042.c	FUNCTION_31	CALL_1
0x4000b28	            0x85c0	                           test eax, eax	      1141	i8042.c	FUNCTION_31	IF_1
0x4000b2a	            0x7515	                           jne 0x4000b41	      1141	i8042.c	FUNCTION_31	IF_1
0x4000b2c	      0x488b442408	                mov rax, qword [rsp + 8]	      1143	i8042.c	FUNCTION_31
0x4000b31	    0x654833042528	                xor rax, qword gs:[0x28]	      1143	i8042.c	FUNCTION_31
0x4000b3a	            0x7515	                           jne 0x4000b51	      1143	i8042.c	FUNCTION_31
0x4000b3c	        0x4883c410	                           add rsp, 0x10	      1143	i8042.c	FUNCTION_31
0x4000b40	              0xc3	                                     ret	      1143	i8042.c	FUNCTION_31
0x4000b41	            0x89c6	                            mov esi, eax	      1142	i8042.c	FUNCTION_31	CALL_2
0x4000b43	    0x48c7c7000000	                              mov rdi, 0	      1142	i8042.c	FUNCTION_31	CALL_2
0x4000b4a	      0xe800000000	                          call 0x4000b4f	      1142	i8042.c	FUNCTION_31	CALL_2
0x4000b4f	            0xebdb	                           jmp 0x4000b2c	      1143	i8042.c	FUNCTION_31
0x4000b51	      0xe800000000	                          call 0x4000b56	      1143	i8042.c	FUNCTION_31
i8042_port_close	functions,0:WHILE,0:DO,0:FOR,0:ELSE,1:SWITCH,0:CALL,6:IF,3	46
0x4000d70	    0x48393d000000	            cmp qword [0x04000d77], rdi 	       402	i8042.c	FUNCTION_13	IF_1
0x4000d77	            0x4154	                                push r12	       397	i8042.c	FUNCTION_13
0x4000d79	      0xb8dfffffff	                     mov eax, 0xffffffdf	       402	i8042.c	FUNCTION_13	IF_1
0x4000d7e	              0x55	                                push rbp	       397	i8042.c	FUNCTION_13
0x4000d7f	      0xbdefffffff	                     mov ebp, 0xffffffef	       402	i8042.c	FUNCTION_13	IF_1
0x4000d84	              0x53	                                push rbx	       397	i8042.c	FUNCTION_13
0x4000d85	    0x48c7c2000000	                              mov rdx, 0	       402	i8042.c	FUNCTION_13	IF_1
0x4000d8c	    0x49c7c4000000	                              mov r12, 0	       402	i8042.c	FUNCTION_13	IF_1
0x4000d93	      0xbe60100000	                         mov esi, 0x1060	       413	i8042.c	FUNCTION_13	IF_2	CALL_1
0x4000d98	           0xf44e8	                          cmove ebp, eax	       402	i8042.c	FUNCTION_13	IF_1
0x4000d9b	           0xf95c0	                                setne al	       402	i8042.c	FUNCTION_13	IF_1
0x4000d9e	          0x83e803	                              sub eax, 3	       402	i8042.c	FUNCTION_13	IF_1
0x4000da1	    0x48393d000000	            cmp qword [0x04000da8], rdi 	       402	i8042.c	FUNCTION_13	IF_1
0x4000da8	           0xf94c3	                                 sete bl	       402	i8042.c	FUNCTION_13	IF_1
0x4000dab	          0x83c301	                              add ebx, 1	       402	i8042.c	FUNCTION_13	IF_1
0x4000dae	    0x48393d000000	            cmp qword [0x04000db5], rdi 	       402	i8042.c	FUNCTION_13	IF_1
0x4000db5	    0x48c7c7000000	                              mov rdi, 0	       413	i8042.c	FUNCTION_13	IF_2	CALL_1
0x4000dbc	        0x4c0f44e2	                          cmove r12, rdx	       402	i8042.c	FUNCTION_13	IF_1
0x4000dc0	    0x200500000000	               and byte [0x04000dc6], al	       412	i8042.c	FUNCTION_13
0x4000dc6	      0xe800000000	                          call 0x4000dcb	       413	i8042.c	FUNCTION_13	IF_2	CALL_1
0x4000dcb	            0x85c0	                           test eax, eax	       413	i8042.c	FUNCTION_13	IF_2	CALL_1
0x4000dcd	            0x753b	                           jne 0x4000e0a	       413	i8042.c	FUNCTION_13	IF_2	CALL_1
0x4000dcf	      0xbfde460300	                        mov edi, 0x346de	       416	i8042.c	FUNCTION_13	CALL_3
0x4000dd4	      0xe800000000	                          call 0x4000dd9	       416	i8042.c	FUNCTION_13	CALL_3
0x4000dd9	    0x40222d000000	              and bpl, byte [0x04000de0]	       419	i8042.c	FUNCTION_13
0x4000de0	      0xbe60100000	                         mov esi, 0x1060	       420	i8042.c	FUNCTION_13	IF_3	CALL_4
0x4000de5	    0x48c7c7000000	                              mov rdi, 0	       420	i8042.c	FUNCTION_13	IF_3	CALL_4
0x4000dec	             0x9eb	                             or ebx, ebp	       419	i8042.c	FUNCTION_13
0x4000dee	    0x881d00000000	               mov byte [0x04000df4], bl	       419	i8042.c	FUNCTION_13
0x4000df4	      0xe800000000	                          call 0x4000df9	       420	i8042.c	FUNCTION_13	IF_3	CALL_4
0x4000df9	            0x85c0	                           test eax, eax	       420	i8042.c	FUNCTION_13	IF_3	CALL_4
0x4000dfb	            0x751e	                           jne 0x4000e1b	       420	i8042.c	FUNCTION_13	IF_3	CALL_4
0x4000dfd	              0x5b	                                 pop rbx	       428	i8042.c	FUNCTION_13
0x4000dfe	              0x5d	                                 pop rbp	       428	i8042.c	FUNCTION_13
0x4000dff	            0x415c	                                 pop r12	       428	i8042.c	FUNCTION_13
0x4000e01	            0x31f6	                            xor esi, esi	       427	i8042.c	FUNCTION_13	CALL_6
0x4000e03	            0x31ff	                            xor edi, edi	       427	i8042.c	FUNCTION_13	CALL_6
0x4000e05	      0xe9f6f5ffff	                 jmp sym.i8042_interrupt	       427	i8042.c	FUNCTION_13	CALL_6
0x4000e0a	          0x4c89e6	                            mov rsi, r12	       414	i8042.c	FUNCTION_13	CALL_2
0x4000e0d	    0x48c7c7000000	                              mov rdi, 0	       414	i8042.c	FUNCTION_13	CALL_2
0x4000e14	      0xe800000000	                          call 0x4000e19	       414	i8042.c	FUNCTION_13	CALL_2
0x4000e19	            0xebb4	                           jmp 0x4000dcf	       414	i8042.c	FUNCTION_13	CALL_2
0x4000e1b	          0x4c89e6	                            mov rsi, r12	       421	i8042.c	FUNCTION_13	CALL_5
0x4000e1e	    0x48c7c7000000	                              mov rdi, 0	       421	i8042.c	FUNCTION_13	CALL_5
0x4000e25	      0xe800000000	                          call 0x4000e2a	       421	i8042.c	FUNCTION_13	CALL_5
0x4000e2a	            0xebd1	                           jmp 0x4000dfd	       421	i8042.c	FUNCTION_13	CALL_5
i8042_pm_restore	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	2
0x4001030	            0x31ff	                            xor edi, edi	      1283	i8042.c	FUNCTION_38	CALL_1
0x4001032	      0xe9b9feffff	         jmp sym.i8042_controller_resume	      1283	i8042.c	FUNCTION_38	CALL_1
i8042_controller_selftest	functions,0:WHILE,0:DO,1:FOR,0:ELSE,0:SWITCH,0:CALL,6:IF,2	44
0x4000e30	              0x55	                                push rbp	       927	i8042.c	FUNCTION_27
0x4000e31	              0x53	                                push rbx	       927	i8042.c	FUNCTION_27
0x4000e32	      0xbb06000000	                              mov ebx, 6	       927	i8042.c	FUNCTION_27
0x4000e37	        0x4883ec10	                           sub rsp, 0x10	       927	i8042.c	FUNCTION_27
0x4000e3b	    0x65488b042528	                mov rax, qword gs:[0x28]	       927	i8042.c	FUNCTION_27
0x4000e44	      0x4889442408	                mov qword [rsp + 8], rax	       927	i8042.c	FUNCTION_27
0x4000e49	            0x31c0	                            xor eax, eax	       927	i8042.c	FUNCTION_27
0x4000e4b	      0x488d7c2407	                      lea rdi, [rsp + 7]	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e50	      0xbeaa010000	                          mov esi, 0x1aa	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e55	      0xe800000000	                          call 0x4000e5a	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e5a	            0x85c0	                           test eax, eax	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e5c	            0x89c5	                            mov ebp, eax	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e5e	            0x7546	                           jne 0x4000ea6	       937	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_1
0x4000e60	       0xfb6442407	               movzx eax, byte [rsp + 7]	       942	i8042.c	FUNCTION_27	DO_1	IF_2
0x4000e65	            0x3c55	                            cmp al, 0x55	       942	i8042.c	FUNCTION_27	DO_1	IF_2
0x4000e67	            0x7424	                            je 0x4000e8d	       942	i8042.c	FUNCTION_27	DO_1	IF_2
0x4000e69	    0x803d00000000	                cmp byte [0x04000e70], 0	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000e70	            0x7547	                           jne 0x4000eb9	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000e72	      0xbf32000000	                           mov edi, 0x32	       947	i8042.c	FUNCTION_27	DO_1	CALL_4
0x4000e77	      0xe800000000	                          call 0x4000e7c	       947	i8042.c	FUNCTION_27	DO_1	CALL_4
0x4000e7c	          0x83eb01	                              sub ebx, 1	       948	i8042.c	FUNCTION_27	DO_1
0x4000e7f	            0x75ca	                           jne 0x4000e4b	       948	i8042.c	FUNCTION_27	DO_1
0x4000e81	    0x48c7c7000000	                              mov rdi, 0	       957	i8042.c	FUNCTION_27	CALL_5
0x4000e88	      0xe800000000	                          call 0x4000e8d	       957	i8042.c	FUNCTION_27	CALL_5
0x4000e8d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       963	i8042.c	FUNCTION_27
0x4000e92	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       963	i8042.c	FUNCTION_27
0x4000e9b	            0x89e8	                            mov eax, ebp	       963	i8042.c	FUNCTION_27
0x4000e9d	            0x753d	                           jne 0x4000edc	       963	i8042.c	FUNCTION_27
0x4000e9f	        0x4883c410	                           add rsp, 0x10	       963	i8042.c	FUNCTION_27
0x4000ea3	              0x5b	                                 pop rbx	       963	i8042.c	FUNCTION_27
0x4000ea4	              0x5d	                                 pop rbp	       963	i8042.c	FUNCTION_27
0x4000ea5	              0xc3	                                     ret	       963	i8042.c	FUNCTION_27
0x4000ea6	    0x48c7c7000000	                              mov rdi, 0	       938	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_2
0x4000ead	      0xbdedffffff	                     mov ebp, 0xffffffed	       939	i8042.c	FUNCTION_27	DO_1	IF_1
0x4000eb2	      0xe800000000	                          call 0x4000eb7	       938	i8042.c	FUNCTION_27	DO_1	IF_1	CALL_2
0x4000eb7	            0xebd4	                           jmp 0x4000e8d	       939	i8042.c	FUNCTION_27	DO_1	IF_1
0x4000eb9	    0x488b35000000	            mov rsi, qword [0x04000ec0] 	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000ec0	    0x2b3500000000	             sub esi, dword [0x04000ec6]	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000ec6	           0xfb6d0	                           movzx edx, al	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000ec9	      0xb955000000	                           mov ecx, 0x55	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000ece	    0x48c7c7000000	                              mov rdi, 0	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000ed5	      0xe800000000	                          call 0x4000eda	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000eda	            0xeb96	                           jmp 0x4000e72	       945	i8042.c	FUNCTION_27	DO_1	CALL_3
0x4000edc	      0xe800000000	                          call 0x4000ee1	       963	i8042.c	FUNCTION_27
i8042_free_aux_ports	functions,0:WHILE,0:DO,0:FOR,1:ELSE,0:SWITCH,0:CALL,1:IF,0	14
0x40000e9	       0x500000000	                              add eax, 0	      1504	i8042.c	FUNCTION_49	IF_1
0x40000ee	            0x7403	                            je 0x40000f3	      1504	i8042.c	FUNCTION_49	IF_1
0x40000f0	            0x31c0	                            xor eax, eax	      1518	i8042.c	FUNCTION_49
0x40000f2	              0xc3	                                     ret	      1518	i8042.c	FUNCTION_49
0x40000f3	        0x4883fe05	                              cmp rsi, 5	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x40000f7	    0x488b82a8feff	            mov rax, qword [rdx - 0x158]	      1502	i8042.c	FUNCTION_49
0x40000fe	            0x740c	                            je 0x400010c	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000100	        0x4883fe06	                              cmp rsi, 6	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000104	            0x75ea	                           jne 0x40000f0	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000106	        0xc6400d00	                 mov byte [rax + 0xd], 0	      1513	i8042.c	FUNCTION_49	SWITCH_1
0x400010a	            0xebe4	                           jmp 0x40000f0	      1514	i8042.c	FUNCTION_49	SWITCH_1
0x400010c	              0xc6	                                 invalid	      1509	i8042.c	FUNCTION_49	SWITCH_1
0x400010d	              0x40	                                 invalid	      1509	i8042.c	FUNCTION_49	SWITCH_1
0x400010e	               0xd	                                 invalid	      1509	i8042.c	FUNCTION_49	SWITCH_1
i8042_unlock_chip	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	2
0x4000190	    0x48c7c7000000	                              mov rdi, 0	       186	i8042.c	FUNCTION_3	CALL_1
0x4000197	      0xe900000000	                           jmp 0x400019c	       186	i8042.c	FUNCTION_3	CALL_1
i8042_controller_reset	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,7:IF,4	39
0x40010a0	              0x53	                                push rbx	      1061	i8042.c	FUNCTION_29
0x40010a1	            0x89fb	                            mov ebx, edi	      1061	i8042.c	FUNCTION_29
0x40010a3	      0xe8b8f1ffff	                    call sym.i8042_flush	      1062	i8042.c	FUNCTION_29	CALL_1
0x40010a8	     0xfb605000000	           movzx eax, byte [0x040010af] 	      1069	i8042.c	FUNCTION_29
0x40010af	      0xbe60100000	                         mov esi, 0x1060	      1071	i8042.c	FUNCTION_29	IF_1	CALL_2
0x40010b4	    0x48c7c7000000	                              mov rdi, 0	      1071	i8042.c	FUNCTION_29	IF_1	CALL_2
0x40010bb	          0x83e0fc	                     and eax, 0xfffffffc	      1069	i8042.c	FUNCTION_29
0x40010be	          0x83c830	                            or eax, 0x30	      1069	i8042.c	FUNCTION_29
0x40010c1	    0x880500000000	               mov byte [0x040010c7], al	      1069	i8042.c	FUNCTION_29
0x40010c7	      0xe800000000	                          call 0x40010cc	      1071	i8042.c	FUNCTION_29	IF_1	CALL_2
0x40010cc	            0x85c0	                           test eax, eax	      1071	i8042.c	FUNCTION_29	IF_1	CALL_2
0x40010ce	            0x7551	                           jne 0x4001121	      1071	i8042.c	FUNCTION_29	IF_1	CALL_2
0x40010d0	    0x803d00000000	                cmp byte [0x040010d7], 0	      1078	i8042.c	FUNCTION_29	IF_2
0x40010d7	            0x7530	                           jne 0x4001109	      1078	i8042.c	FUNCTION_29	IF_2
0x40010d9	    0x8b0500000000	            mov eax, dword [0x040010df] 	      1085	i8042.c	FUNCTION_29	IF_3
0x40010df	          0x83f801	                              cmp eax, 1	      1085	i8042.c	FUNCTION_29	IF_3
0x40010e2	            0x7409	                            je 0x40010ed	      1085	i8042.c	FUNCTION_29	IF_3
0x40010e4	          0x83f802	                              cmp eax, 2	      1086	i8042.c	FUNCTION_29	IF_3
0x40010e7	            0x7509	                           jne 0x40010f2	      1086	i8042.c	FUNCTION_29	IF_3
0x40010e9	            0x84db	                             test bl, bl	      1086	i8042.c	FUNCTION_29	IF_3
0x40010eb	            0x7405	                            je 0x40010f2	      1086	i8042.c	FUNCTION_29	IF_3
0x40010ed	      0xe83efdffff	      call sym.i8042_controller_selftest	      1087	i8042.c	FUNCTION_29	IF_3	CALL_5
0x40010f2	      0xbe60100000	                         mov esi, 0x1060	      1094	i8042.c	FUNCTION_29	IF_4	CALL_6
0x40010f7	    0x48c7c7000000	                              mov rdi, 0	      1094	i8042.c	FUNCTION_29	IF_4	CALL_6
0x40010fe	      0xe800000000	                          call 0x4001103	      1094	i8042.c	FUNCTION_29	IF_4	CALL_6
0x4001103	            0x85c0	                           test eax, eax	      1094	i8042.c	FUNCTION_29	IF_4	CALL_6
0x4001105	            0x750d	                           jne 0x4001114	      1094	i8042.c	FUNCTION_29	IF_4	CALL_6
0x4001107	              0x5b	                                 pop rbx	      1096	i8042.c	FUNCTION_29
0x4001108	              0xc3	                                     ret	      1096	i8042.c	FUNCTION_29
0x4001109	            0x31f6	                            xor esi, esi	      1079	i8042.c	FUNCTION_29	CALL_4
0x400110b	            0x31ff	                            xor edi, edi	      1079	i8042.c	FUNCTION_29	CALL_4
0x400110d	      0xe88efbffff	             call sym.i8042_set_mux_mode	      1079	i8042.c	FUNCTION_29	CALL_4
0x4001112	            0xebc5	                           jmp 0x40010d9	      1079	i8042.c	FUNCTION_29	CALL_4
0x4001114	              0x5b	                                 pop rbx	      1096	i8042.c	FUNCTION_29
0x4001115	    0x48c7c7000000	                              mov rdi, 0	      1095	i8042.c	FUNCTION_29	CALL_7
0x400111c	      0xe900000000	                           jmp 0x4001121	      1095	i8042.c	FUNCTION_29	CALL_7
0x4001121	    0x48c7c7000000	                              mov rdi, 0	      1072	i8042.c	FUNCTION_29	CALL_3
0x4001128	      0xe800000000	                          call 0x400112d	      1072	i8042.c	FUNCTION_29	CALL_3
0x400112d	            0xeba1	                           jmp 0x40010d0	      1072	i8042.c	FUNCTION_29	CALL_3
i8042_set_reset	functions,0:WHILE,0:DO,0:FOR,0:ELSE,1:SWITCH,0:CALL,1:IF,2	24
0x4000120	              0x53	                                push rbx	        59	i8042.c	FUNCTION_1
0x4000121	        0x4883ec10	                           sub rsp, 0x10	        59	i8042.c	FUNCTION_1
0x4000125	        0x488b5e20	            mov rbx, qword [rsi + 0x20] 	        60	i8042.c	FUNCTION_1
0x4000129	    0x65488b042528	                mov rax, qword gs:[0x28]	        59	i8042.c	FUNCTION_1
0x4000132	      0x4889442408	                mov qword [rsp + 8], rax	        59	i8042.c	FUNCTION_1
0x4000137	            0x31c0	                            xor eax, eax	        59	i8042.c	FUNCTION_1
0x4000139	          0x4885ff	                           test rdi, rdi	        64	i8042.c	FUNCTION_1	IF_1
0x400013c	            0x742d	                            je 0x400016b	        64	i8042.c	FUNCTION_1	IF_1
0x400013e	      0x488d742407	                      lea rsi, [rsp + 7]	        65	i8042.c	FUNCTION_1	IF_1	CALL_1
0x4000143	      0xe800000000	                          call 0x4000148	        65	i8042.c	FUNCTION_1	IF_1	CALL_1
0x4000148	            0x85c0	                           test eax, eax	        66	i8042.c	FUNCTION_1	IF_1	IF_2
0x400014a	            0x7509	                           jne 0x4000155	        66	i8042.c	FUNCTION_1	IF_1	IF_2
0x400014c	       0xfb6442407	               movzx eax, byte [rsp + 7]	        66	i8042.c	FUNCTION_1	IF_1	IF_2
0x4000151	            0x8903	                    mov dword [rbx], eax	        72	i8042.c	FUNCTION_1
0x4000153	            0x31c0	                            xor eax, eax	        73	i8042.c	FUNCTION_1
0x4000155	      0x488b542408	                mov rdx, qword [rsp + 8]	        74	i8042.c	FUNCTION_1
0x400015a	    0x654833142528	                xor rdx, qword gs:[0x28]	        74	i8042.c	FUNCTION_1
0x4000163	            0x750d	                           jne 0x4000172	        74	i8042.c	FUNCTION_1
0x4000165	        0x4883c410	                           add rsp, 0x10	        74	i8042.c	FUNCTION_1
0x4000169	              0x5b	                                 pop rbx	        74	i8042.c	FUNCTION_1
0x400016a	              0xc3	                                     ret	        74	i8042.c	FUNCTION_1
0x400016b	      0xb801000000	                              mov eax, 1	        74	i8042.c	FUNCTION_1
0x4000170	            0xebdf	                           jmp 0x4000151	        74	i8042.c	FUNCTION_1
0x4000172	      0xe800000000	                          call 0x4000177	        74	i8042.c	FUNCTION_1
i8042_enable_mux_ports	functions,0:WHILE,0:DO,0:FOR,1:ELSE,0:SWITCH,0:CALL,3:IF,0	23
0x4000bb0	              0x53	                                push rbx	       636	i8042.c	FUNCTION_20
0x4000bb1	      0xbb90000000	                           mov ebx, 0x90	       636	i8042.c	FUNCTION_20
0x4000bb6	        0x4883ec10	                           sub rsp, 0x10	       636	i8042.c	FUNCTION_20
0x4000bba	    0x65488b042528	                mov rax, qword gs:[0x28]	       636	i8042.c	FUNCTION_20
0x4000bc3	      0x4889442408	                mov qword [rsp + 8], rax	       636	i8042.c	FUNCTION_20
0x4000bc8	            0x31c0	                            xor eax, eax	       636	i8042.c	FUNCTION_20
0x4000bca	      0x488d7c2407	                      lea rdi, [rsp + 7]	       641	i8042.c	FUNCTION_20	FOR_1	CALL_1
0x4000bcf	            0x89de	                            mov esi, ebx	       641	i8042.c	FUNCTION_20	FOR_1	CALL_1
0x4000bd1	          0x83c301	                              add ebx, 1	       641	i8042.c	FUNCTION_20	FOR_1	CALL_1
0x4000bd4	      0xe800000000	                          call 0x4000bd9	       641	i8042.c	FUNCTION_20	FOR_1	CALL_1
0x4000bd9	      0x488d7c2407	                      lea rdi, [rsp + 7]	       642	i8042.c	FUNCTION_20	FOR_1	CALL_2
0x4000bde	      0xbea8000000	                           mov esi, 0xa8	       642	i8042.c	FUNCTION_20	FOR_1	CALL_2
0x4000be3	      0xe800000000	                          call 0x4000be8	       642	i8042.c	FUNCTION_20	FOR_1	CALL_2
0x4000be8	    0x81fb94000000	                           cmp ebx, 0x94	       640	i8042.c	FUNCTION_20	FOR_1
0x4000bee	            0x75da	                           jne 0x4000bca	       640	i8042.c	FUNCTION_20	FOR_1
0x4000bf0	      0xe86bffffff	          call sym.i8042_enable_aux_port	       645	i8042.c	FUNCTION_20	CALL_3
0x4000bf5	      0x488b542408	                mov rdx, qword [rsp + 8]	       646	i8042.c	FUNCTION_20
0x4000bfa	    0x654833142528	                xor rdx, qword gs:[0x28]	       646	i8042.c	FUNCTION_20
0x4000c03	            0x7506	                           jne 0x4000c0b	       646	i8042.c	FUNCTION_20
0x4000c05	        0x4883c410	                           add rsp, 0x10	       646	i8042.c	FUNCTION_20
0x4000c09	              0x5b	                                 pop rbx	       646	i8042.c	FUNCTION_20
0x4000c0a	              0xc3	                                     ret	       646	i8042.c	FUNCTION_20
0x4000c0b	      0xe800000000	          call sym.i8042_enable_kbd_port	       646	i8042.c	FUNCTION_20
i8042_pm_reset	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	4
0x4001130	            0x31ff	                            xor edi, edi	      1276	i8042.c	FUNCTION_37	CALL_1
0x4001132	      0xe869ffffff	         call sym.i8042_controller_reset	      1276	i8042.c	FUNCTION_37	CALL_1
0x4001137	            0x31c0	                            xor eax, eax	      1279	i8042.c	FUNCTION_37
0x4001139	              0xc3	                                     ret	      1279	i8042.c	FUNCTION_37
i8042_pm_thaw	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	5
0x4000780	            0x31f6	                            xor esi, esi	      1269	i8042.c	FUNCTION_36	CALL_1
0x4000782	            0x31ff	                            xor edi, edi	      1269	i8042.c	FUNCTION_36	CALL_1
0x4000784	      0xe877fcffff	                call sym.i8042_interrupt	      1269	i8042.c	FUNCTION_36	CALL_1
0x4000789	            0x31c0	                            xor eax, eax	      1272	i8042.c	FUNCTION_36
0x400078b	              0xc3	                                     ret	      1272	i8042.c	FUNCTION_36
i8042_set_mux_mode	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,4:IF,5	59
0x4000ca0	            0x4154	                                push r12	       655	i8042.c	FUNCTION_21
0x4000ca2	              0x55	                                push rbp	       655	i8042.c	FUNCTION_21
0x4000ca3	          0x4989f4	                            mov r12, rsi	       655	i8042.c	FUNCTION_21
0x4000ca6	              0x53	                                push rbx	       655	i8042.c	FUNCTION_21
0x4000ca7	            0x89fd	                            mov ebp, edi	       655	i8042.c	FUNCTION_21
0x4000ca9	        0x4883ec10	                           sub rsp, 0x10	       655	i8042.c	FUNCTION_21
0x4000cad	    0x65488b042528	                mov rax, qword gs:[0x28]	       655	i8042.c	FUNCTION_21
0x4000cb6	      0x4889442408	                mov qword [rsp + 8], rax	       655	i8042.c	FUNCTION_21
0x4000cbb	            0x31c0	                            xor eax, eax	       655	i8042.c	FUNCTION_21
0x4000cbd	      0xe89ef5ffff	                    call sym.i8042_flush	       662	i8042.c	FUNCTION_21	CALL_1
0x4000cc2	      0x488d7c2407	                      lea rdi, [rsp + 7]	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000cc7	      0xbed3110000	                         mov esi, 0x11d3	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000ccc	      0xc6442407f0	                mov byte [rsp + 7], 0xf0	       669	i8042.c	FUNCTION_21
0x4000cd1	      0xe800000000	                          call 0x4000cd6	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000cd6	            0x85c0	                           test eax, eax	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000cd8	     0xf8582000000	                           jne 0x4000d60	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000cde	      0x807c2407f0	                cmp byte [rsp + 7], 0xf0	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000ce3	            0x757b	                           jne 0x4000d60	       670	i8042.c	FUNCTION_21	IF_1	CALL_2
0x4000ce5	        0x4080fd01	                              cmp bpl, 1	       672	i8042.c	FUNCTION_21
0x4000ce9	      0x488d7c2407	                      lea rdi, [rsp + 7]	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000cee	      0xbed3110000	                         mov esi, 0x11d3	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000cf3	            0x19db	                            sbb ebx, ebx	       672	i8042.c	FUNCTION_21
0x4000cf5	          0x83e3a0	                     and ebx, 0xffffffa0	       672	i8042.c	FUNCTION_21
0x4000cf8	          0x83c356	                           add ebx, 0x56	       672	i8042.c	FUNCTION_21
0x4000cfb	        0x885c2407	                  mov byte [rsp + 7], bl	       672	i8042.c	FUNCTION_21
0x4000cff	      0xe800000000	                          call 0x4000d04	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000d04	            0x85c0	                           test eax, eax	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000d06	            0x7558	                           jne 0x4000d60	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000d08	        0x3a5c2407	                  cmp bl, byte [rsp + 7]	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000d0c	            0x7552	                           jne 0x4000d60	       673	i8042.c	FUNCTION_21	IF_2	CALL_3
0x4000d0e	        0x4080fd01	                              cmp bpl, 1	       675	i8042.c	FUNCTION_21
0x4000d12	      0x488d7c2407	                      lea rdi, [rsp + 7]	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d17	      0xbed3110000	                         mov esi, 0x11d3	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d1c	            0x19db	                            sbb ebx, ebx	       675	i8042.c	FUNCTION_21
0x4000d1e	            0xf7d3	                                 not ebx	       675	i8042.c	FUNCTION_21
0x4000d20	          0x83eb5b	                           sub ebx, 0x5b	       675	i8042.c	FUNCTION_21
0x4000d23	        0x885c2407	                  mov byte [rsp + 7], bl	       675	i8042.c	FUNCTION_21
0x4000d27	      0xe800000000	                          call 0x4000d2c	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d2c	            0x85c0	                           test eax, eax	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d2e	            0x7530	                           jne 0x4000d60	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d30	       0xfb6542407	               movzx edx, byte [rsp + 7]	       676	i8042.c	FUNCTION_21	IF_3	CALL_4
0x4000d35	            0x38d3	                              cmp bl, dl	       683	i8042.c	FUNCTION_21	IF_4
0x4000d37	            0x7427	                            je 0x4000d60	       683	i8042.c	FUNCTION_21	IF_4
0x4000d39	          0x80faac	                            cmp dl, 0xac	       683	i8042.c	FUNCTION_21	IF_4
0x4000d3c	            0x7422	                            je 0x4000d60	       683	i8042.c	FUNCTION_21	IF_4
0x4000d3e	          0x4d85e4	                           test r12, r12	       686	i8042.c	FUNCTION_21	IF_5
0x4000d41	            0x7404	                            je 0x4000d47	       686	i8042.c	FUNCTION_21	IF_5
0x4000d43	        0x41881424	                      mov byte [r12], dl	       687	i8042.c	FUNCTION_21	IF_5
0x4000d47	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       690	i8042.c	FUNCTION_21
0x4000d4c	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       690	i8042.c	FUNCTION_21
0x4000d55	            0x7510	                           jne 0x4000d67	       690	i8042.c	FUNCTION_21
0x4000d57	        0x4883c410	                           add rsp, 0x10	       690	i8042.c	FUNCTION_21
0x4000d5b	              0x5b	                                 pop rbx	       690	i8042.c	FUNCTION_21
0x4000d5c	              0x5d	                                 pop rbp	       690	i8042.c	FUNCTION_21
0x4000d5d	            0x415c	                                 pop r12	       690	i8042.c	FUNCTION_21
0x4000d5f	              0xc3	                                     ret	       690	i8042.c	FUNCTION_21
0x4000d60	      0xb8ffffffff	                     mov eax, 0xffffffff	       671	i8042.c	FUNCTION_21	IF_1
0x4000d65	            0xebe0	                           jmp 0x4000d47	       671	i8042.c	FUNCTION_21	IF_1
0x4000d67	      0xe800000000	                          call 0x4000d6c	       690	i8042.c	FUNCTION_21
i8042_kbd_bind_notifier	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,1:CALL,1:IF,1	14
0x40000e0	    0x488d82a8feff	                  lea rax, [rdx - 0x158]	      1504	i8042.c	FUNCTION_49	IF_1
0x40000e7	    0x483905000000	            cmp qword [0x040000ee], rax 	      1504	i8042.c	FUNCTION_49	IF_1
0x40000ee	            0x7403	                            je 0x40000f3	      1504	i8042.c	FUNCTION_49	IF_1
0x40000f0	            0x31c0	                            xor eax, eax	      1518	i8042.c	FUNCTION_49
0x40000f2	              0xc3	                                     ret	      1518	i8042.c	FUNCTION_49
0x40000f3	        0x4883fe05	                              cmp rsi, 5	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x40000f7	    0x488b82a8feff	            mov rax, qword [rdx - 0x158]	      1502	i8042.c	FUNCTION_49
0x40000fe	            0x740c	                            je 0x400010c	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000100	        0x4883fe06	                              cmp rsi, 6	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000104	            0x75ea	                           jne 0x40000f0	      1507	i8042.c	FUNCTION_49	SWITCH_1
0x4000106	        0xc6400d00	                 mov byte [rax + 0xd], 0	      1513	i8042.c	FUNCTION_49	SWITCH_1
0x400010a	            0xebe4	                           jmp 0x40000f0	      1514	i8042.c	FUNCTION_49	SWITCH_1
0x400010c	        0xc6400d01	                 mov byte [rax + 0xd], 1	      1509	i8042.c	FUNCTION_49	SWITCH_1
0x4000110	            0xebde	                           jmp 0x40000f0	      1510	i8042.c	FUNCTION_49	SWITCH_1
i8042_remove	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,3:IF,0	17
0x40011b0	              0x53	                                push rbx	      1569	i8042.c	FUNCTION_51
0x40011b1	            0x31db	                            xor ebx, ebx	      1569	i8042.c	FUNCTION_51
0x40011b3	    0x488bbb000000	                    mov rdi, qword [rbx]	      1412	i8042.c	FUNCTION_45	FOR_1	IF_1
0x40011ba	          0x4885ff	                           test rdi, rdi	      1412	i8042.c	FUNCTION_45	FOR_1	IF_1
0x40011bd	            0x7410	                            je 0x40011cf	      1412	i8042.c	FUNCTION_45	FOR_1	IF_1
0x40011bf	      0xe800000000	                          call 0x40011c4	      1413	i8042.c	FUNCTION_45	FOR_1	IF_1	CALL_1
0x40011c4	    0x48c783000000	                      mov qword [rbx], 0	      1414	i8042.c	FUNCTION_45	FOR_1	IF_1
0x40011cf	        0x4883c310	                           add rbx, 0x10	      1414	i8042.c	FUNCTION_45	FOR_1	IF_1
0x40011d3	        0x4883fb60	                           cmp rbx, 0x60	      1411	i8042.c	FUNCTION_45	FOR_1
0x40011d7	            0x75da	                           jne 0x40011b3	      1411	i8042.c	FUNCTION_45	FOR_1
0x40011d9	      0xe8b2f5ffff	                call sym.i8042_free_irqs	      1571	i8042.c	FUNCTION_51	CALL_2
0x40011de	            0x31ff	                            xor edi, edi	      1572	i8042.c	FUNCTION_51	CALL_3
0x40011e0	      0xe8bbfeffff	         call sym.i8042_controller_reset	      1572	i8042.c	FUNCTION_51	CALL_3
0x40011e5	            0x31c0	                            xor eax, eax	      1576	i8042.c	FUNCTION_51
0x40011e7	    0x48c705000000	               mov qword [0x040011f2], 0	      1573	i8042.c	FUNCTION_51
0x40011f2	              0x5b	                                 pop rbx	      1576	i8042.c	FUNCTION_51
0x40011f3	              0xc3	                                     ret	      1576	i8042.c	FUNCTION_51
i8042_shutdown	functions,0:WHILE,0:DO,0:FOR,0:ELSE,0:SWITCH,0:CALL,1:IF,0	2
0x4001140	            0x31ff	                            xor edi, edi	      1304	i8042.c	FUNCTION_39	CALL_1
0x4001142	      0xe959ffffff	          jmp sym.i8042_controller_reset	      1304	i8042.c	FUNCTION_39	CALL_1
