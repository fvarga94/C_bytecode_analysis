nlmclnt_rpc_release	IF,0:DO,0:WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0	1
0x40008e0	            0xeb9e	            jmp sym.nlmclnt_release_call	       236	clntproc.c	FUNCTION_13	CALL_1
nlm_stat_to_errno	IF,0:DO,0:WHILE,0:CALL,4:ELSE,0:FOR,0:functions,0:SWITCH,1	27
0x40002a0	            0x89fe	                            mov esi, edi	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002a2	             0xfce	                               bswap esi	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002a4	          0x83fe09	                              cmp esi, 9	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002a7	            0x770f	                            ja 0x40002b8	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002a9	            0x89f7	                            mov edi, esi	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002ab	    0x488b04fd0000	                  mov rax, qword [rdi*8]	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002b3	      0xe900000000	                           jmp 0x40002b8	       835	clntproc.c	FUNCTION_33	SWITCH_1	CALL_1
0x40002b8	    0x48c7c7000000	                              mov rdi, 0	       859	clntproc.c	FUNCTION_33	CALL_3
0x40002bf	      0xe800000000	                          call 0x40002c4	       859	clntproc.c	FUNCTION_33	CALL_3
0x40002c4	      0xb8dbffffff	                     mov eax, 0xffffffdb	       861	clntproc.c	FUNCTION_33
0x40002c9	              0xc3	                                     ret	       861	clntproc.c	FUNCTION_33
0x40002ca	            0x31c0	                            xor eax, eax	       837	clntproc.c	FUNCTION_33	SWITCH_1
0x40002cc	              0xc3	                                     ret	       862	clntproc.c	FUNCTION_33
0x40002cd	      0xb8ddffffff	                     mov eax, 0xffffffdd	       848	clntproc.c	FUNCTION_33	SWITCH_1
0x40002d2	              0xc3	                                     ret	       848	clntproc.c	FUNCTION_33	SWITCH_1
0x40002d3	      0xb8e2ffffff	                     mov eax, 0xffffffe2	       850	clntproc.c	FUNCTION_33	SWITCH_1
0x40002d8	              0xc3	                                     ret	       850	clntproc.c	FUNCTION_33	SWITCH_1
0x40002d9	      0xb88cffffff	                     mov eax, 0xffffff8c	       852	clntproc.c	FUNCTION_33	SWITCH_1
0x40002de	              0xc3	                                     ret	       852	clntproc.c	FUNCTION_33	SWITCH_1
0x40002df	      0xb8b5ffffff	                     mov eax, 0xffffffb5	       854	clntproc.c	FUNCTION_33	SWITCH_1
0x40002e4	              0xc3	                                     ret	       854	clntproc.c	FUNCTION_33	SWITCH_1
0x40002e5	    0x48c7c7000000	                              mov rdi, 0	       844	clntproc.c	FUNCTION_33	SWITCH_1	CALL_2
0x40002ec	      0xe800000000	                          call 0x40002f1	       844	clntproc.c	FUNCTION_33	SWITCH_1	CALL_2
0x40002f1	      0xb8dbffffff	                     mov eax, 0xffffffdb	       845	clntproc.c	FUNCTION_33	SWITCH_1
0x40002f6	              0xc3	                                     ret	       845	clntproc.c	FUNCTION_33	SWITCH_1
0x40002f7	      0xb8f5ffffff	                     mov eax, 0xfffffff5	       839	clntproc.c	FUNCTION_33	SWITCH_1
0x40002fc	              0xc3	                                     ret	       839	clntproc.c	FUNCTION_33	SWITCH_1
nlmclnt_unlock_prepare	IF,2:DO,0:WHILE,0:CALL,2:ELSE,0:FOR,0:functions,0:SWITCH,0	18
0x4000360	              0x53	                                push rbx	       701	clntproc.c	FUNCTION_29
0x4000361	        0x488b4608	                mov rax, qword [rsi + 8]	       703	clntproc.c	FUNCTION_29
0x4000365	          0x4889fb	                            mov rbx, rdi	       701	clntproc.c	FUNCTION_29
0x4000368	    0x488b80500200	           mov rax, qword [rax + 0x250] 	       703	clntproc.c	FUNCTION_29
0x400036f	          0x4885c0	                           test rax, rax	       706	clntproc.c	FUNCTION_29	IF_1
0x4000372	            0x741b	                            je 0x400038f	       706	clntproc.c	FUNCTION_29	IF_1
0x4000374	        0x488b4008	                mov rax, qword [rax + 8]	       706	clntproc.c	FUNCTION_29	IF_1
0x4000378	          0x4885c0	                           test rax, rax	       706	clntproc.c	FUNCTION_29	IF_1
0x400037b	            0x7412	                            je 0x400038f	       706	clntproc.c	FUNCTION_29	IF_1
0x400037d	    0x488bb6b00300	           mov rsi, qword [rsi + 0x3b0] 	       707	clntproc.c	FUNCTION_29	CALL_1
0x4000384	      0xe800000000	                          call 0x4000389	       707	clntproc.c	FUNCTION_29	CALL_1
0x4000389	            0x84c0	                             test al, al	       709	clntproc.c	FUNCTION_29	IF_2
0x400038b	            0x7402	                            je 0x400038f	       709	clntproc.c	FUNCTION_29	IF_2
0x400038d	              0x5b	                                 pop rbx	       711	clntproc.c	FUNCTION_29
0x400038e	              0xc3	                                     ret	       711	clntproc.c	FUNCTION_29
0x400038f	          0x4889df	                            mov rdi, rbx	       710	clntproc.c	FUNCTION_29	CALL_2
0x4000392	              0x5b	                                 pop rbx	       711	clntproc.c	FUNCTION_29
0x4000393	      0xe900000000	                           jmp 0x4000398	       710	clntproc.c	FUNCTION_29	CALL_2
nlm_async_call	IF,0:DO,0:WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0	24
0x4001000	        0x4883ec28	                           sub rsp, 0x28	       380	clntproc.c	FUNCTION_18
0x4001004	          0x4889d1	                            mov rcx, rdx	       369	clntproc.c	FUNCTION_17	CALL_1
0x4001007	    0x65488b042528	                mov rax, qword gs:[0x28]	       380	clntproc.c	FUNCTION_18
0x4001010	      0x4889442420	             mov qword [rsp + 0x20], rax	       380	clntproc.c	FUNCTION_18
0x4001015	            0x31c0	                            xor eax, eax	       380	clntproc.c	FUNCTION_18
0x4001017	        0x488d4710	                   lea rax, [rdi + 0x10]	       382	clntproc.c	FUNCTION_18
0x400101b	          0x4889e2	                            mov rdx, rsp	       369	clntproc.c	FUNCTION_17	CALL_1
0x400101e	    0x48c704240000	                      mov qword [rsp], 0	       381	clntproc.c	FUNCTION_18
0x4001026	    0x48c744241800	               mov qword [rsp + 0x18], 0	       381	clntproc.c	FUNCTION_18
0x400102f	      0x4889442408	                mov qword [rsp + 8], rax	       382	clntproc.c	FUNCTION_18
0x4001034	    0x488d87c00100	                  lea rax, [rdi + 0x1c0]	       383	clntproc.c	FUNCTION_18
0x400103b	      0x4889442410	             mov qword [rsp + 0x10], rax	       383	clntproc.c	FUNCTION_18
0x4001040	      0xe84bf6ffff	               call sym.__nlm_async_call	       369	clntproc.c	FUNCTION_17	CALL_1
0x4001045	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       370	clntproc.c	FUNCTION_17	IF_1	CALL_2
0x400104b	            0x770a	                            ja 0x4001057	       370	clntproc.c	FUNCTION_17	IF_1	CALL_2
0x400104d	          0x4889c7	                            mov rdi, rax	       372	clntproc.c	FUNCTION_17	CALL_4
0x4001050	      0xe800000000	                          call 0x4001055	       372	clntproc.c	FUNCTION_17	CALL_4
0x4001055	            0x31c0	                            xor eax, eax	       373	clntproc.c	FUNCTION_17
0x4001057	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	       386	clntproc.c	FUNCTION_18
0x400105c	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       386	clntproc.c	FUNCTION_18
0x4001065	            0x7505	                           jne 0x400106c	       386	clntproc.c	FUNCTION_18
0x4001067	        0x4883c428	                           add rsp, 0x28	       386	clntproc.c	FUNCTION_18
0x400106b	              0xc3	                                     ret	       386	clntproc.c	FUNCTION_18
0x400106c	      0xe800000000	                          call 0x4001071	       386	clntproc.c	FUNCTION_18
nlm_async_reply	IF,0:DO,0:WHILE,0:CALL,1:ELSE,0:FOR,0:functions,0:SWITCH,0	23
0x4001080	        0x4883ec28	                           sub rsp, 0x28	       389	clntproc.c	FUNCTION_19
0x4001084	          0x4889d1	                            mov rcx, rdx	       369	clntproc.c	FUNCTION_17	CALL_1
0x4001087	    0x65488b042528	                mov rax, qword gs:[0x28]	       389	clntproc.c	FUNCTION_19
0x4001090	      0x4889442420	             mov qword [rsp + 0x20], rax	       389	clntproc.c	FUNCTION_19
0x4001095	            0x31c0	                            xor eax, eax	       389	clntproc.c	FUNCTION_19
0x4001097	    0x488d87c00100	                  lea rax, [rdi + 0x1c0]	       391	clntproc.c	FUNCTION_19
0x400109e	          0x4889e2	                            mov rdx, rsp	       369	clntproc.c	FUNCTION_17	CALL_1
0x40010a1	    0x48c704240000	                      mov qword [rsp], 0	       390	clntproc.c	FUNCTION_19
0x40010a9	    0x48c744241000	               mov qword [rsp + 0x10], 0	       390	clntproc.c	FUNCTION_19
0x40010b2	    0x48c744241800	               mov qword [rsp + 0x18], 0	       390	clntproc.c	FUNCTION_19
0x40010bb	      0x4889442408	                mov qword [rsp + 8], rax	       391	clntproc.c	FUNCTION_19
0x40010c0	      0xe8cbf5ffff	               call sym.__nlm_async_call	       369	clntproc.c	FUNCTION_17	CALL_1
0x40010c5	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       370	clntproc.c	FUNCTION_17	IF_1	CALL_2
0x40010cb	            0x770a	                            ja 0x40010d7	       370	clntproc.c	FUNCTION_17	IF_1	CALL_2
0x40010cd	          0x4889c7	                            mov rdi, rax	       372	clntproc.c	FUNCTION_17	CALL_4
0x40010d0	      0xe800000000	                          call 0x40010d5	       372	clntproc.c	FUNCTION_17	CALL_4
0x40010d5	            0x31c0	                            xor eax, eax	       373	clntproc.c	FUNCTION_17
0x40010d7	      0x488b4c2420	            mov rcx, qword [rsp + 0x20] 	       394	clntproc.c	FUNCTION_19
0x40010dc	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       394	clntproc.c	FUNCTION_19
0x40010e5	            0x7505	                           jne 0x40010ec	       394	clntproc.c	FUNCTION_19
0x40010e7	        0x4883c428	                           add rsp, 0x28	       394	clntproc.c	FUNCTION_19
0x40010eb	              0xc3	                                     ret	       394	clntproc.c	FUNCTION_19
0x40010ec	      0xe800000000	                          call 0x40010f1	       394	clntproc.c	FUNCTION_19
nlmclnt_unlock_callback	IF,4:DO,0:WHILE,0:CALL,7:ELSE,0:FOR,0:functions,0:SWITCH,1	31
0x4000300	    0xf687d5000000	               test byte [rdi + 0xd5], 1	       718	clntproc.c	FUNCTION_30	IF_1	CALL_2
0x4000307	    0x8b86e4010000	           mov eax, dword [rsi + 0x1e4] 	       716	clntproc.c	FUNCTION_30	CALL_1
0x400030d	            0x7517	                           jne 0x4000326	       718	clntproc.c	FUNCTION_30	IF_1	CALL_2
0x400030f	              0x53	                                push rbx	       714	clntproc.c	FUNCTION_30
0x4000310	          0x8b5704	                mov edx, dword [rdi + 4]	       721	clntproc.c	FUNCTION_30	IF_2
0x4000313	          0x4889fb	                            mov rbx, rdi	       721	clntproc.c	FUNCTION_30	IF_2
0x4000316	            0x85d2	                           test edx, edx	       721	clntproc.c	FUNCTION_30	IF_2
0x4000318	            0x780e	                            js 0x4000328	       721	clntproc.c	FUNCTION_30	IF_2
0x400031a	             0xfc8	                               bswap eax	       721	clntproc.c	FUNCTION_30	IF_2
0x400031c	          0x83f804	                              cmp eax, 4	       731	clntproc.c	FUNCTION_30	IF_3
0x400031f	            0x7423	                            je 0x4000344	       731	clntproc.c	FUNCTION_30	IF_3
0x4000321	            0x85c0	                           test eax, eax	       735	clntproc.c	FUNCTION_30	IF_4
0x4000323	            0x752b	                           jne 0x4000350	       735	clntproc.c	FUNCTION_30	IF_4
0x4000325	              0x5b	                                 pop rbx	       743	clntproc.c	FUNCTION_30
0x4000326	            0xf3c3	                                     ret	       743	clntproc.c	FUNCTION_30
0x4000328	          0x83faf3	             cmp edx, 0xfffffffffffffff3	       723	clntproc.c	FUNCTION_30	IF_2	SWITCH_1
0x400032b	            0x74f8	                            je 0x4000325	       723	clntproc.c	FUNCTION_30	IF_2	SWITCH_1
0x400032d	          0x83fafb	             cmp edx, 0xfffffffffffffffb	       723	clntproc.c	FUNCTION_30	IF_2	SWITCH_1
0x4000330	            0x74f3	                            je 0x4000325	       723	clntproc.c	FUNCTION_30	IF_2	SWITCH_1
0x4000332	        0x488b7e08	                mov rdi, qword [rsi + 8]	       740	clntproc.c	FUNCTION_30	CALL_6
0x4000336	      0xe800000000	                          call 0x400033b	       740	clntproc.c	FUNCTION_30	CALL_6
0x400033b	          0x4889df	                            mov rdi, rbx	       742	clntproc.c	FUNCTION_30	CALL_7
0x400033e	              0x5b	                                 pop rbx	       743	clntproc.c	FUNCTION_30
0x400033f	      0xe900000000	                           jmp 0x4000344	       742	clntproc.c	FUNCTION_30	CALL_7
0x4000344	      0xbe88130000	                         mov esi, 0x1388	       732	clntproc.c	FUNCTION_30	IF_3	CALL_4
0x4000349	      0xe800000000	                          call 0x400034e	       732	clntproc.c	FUNCTION_30	IF_3	CALL_4
0x400034e	            0xebeb	                           jmp 0x400033b	       733	clntproc.c	FUNCTION_30	IF_3
0x4000350	              0x5b	                                 pop rbx	       743	clntproc.c	FUNCTION_30
0x4000351	            0x89c6	                            mov esi, eax	       736	clntproc.c	FUNCTION_30	CALL_5
0x4000353	    0x48c7c7000000	                              mov rdi, 0	       736	clntproc.c	FUNCTION_30	CALL_5
0x400035a	      0xe900000000	                           jmp 0x400035f	       736	clntproc.c	FUNCTION_30	CALL_5
