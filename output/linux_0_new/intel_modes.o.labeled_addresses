intel_ddc_get_modes	SWITCH,0:DO,0:ELSE,0:IF,1:WHILE,0:functions,0:FOR,0:CALL,3	21
0x4000060	              0x55	                                push rbp	        58	intel_modes.c	FUNCTION_2
0x4000061	              0x53	                                push rbx	        58	intel_modes.c	FUNCTION_2
0x4000062	          0x4889fb	                            mov rbx, rdi	        58	intel_modes.c	FUNCTION_2
0x4000065	      0xe800000000	                          call 0x400006a	        62	intel_modes.c	FUNCTION_2	CALL_1
0x400006a	          0x4889c5	                            mov rbp, rax	        62	intel_modes.c	FUNCTION_2	CALL_1
0x400006d	            0x31c0	                            xor eax, eax	        62	intel_modes.c	FUNCTION_2	CALL_1
0x400006f	          0x4885ed	                           test rbp, rbp	        63	intel_modes.c	FUNCTION_2	IF_1
0x4000072	            0x7422	                            je 0x4000096	        63	intel_modes.c	FUNCTION_2	IF_1
0x4000074	          0x4889df	                            mov rdi, rbx	        43	intel_modes.c	FUNCTION_1	CALL_1
0x4000077	          0x4889ee	                            mov rsi, rbp	        43	intel_modes.c	FUNCTION_1	CALL_1
0x400007a	      0xe800000000	                          call 0x400007f	        43	intel_modes.c	FUNCTION_1	CALL_1
0x400007f	          0x4889df	                            mov rdi, rbx	        44	intel_modes.c	FUNCTION_1	CALL_2
0x4000082	          0x4889ee	                            mov rsi, rbp	        44	intel_modes.c	FUNCTION_1	CALL_2
0x4000085	      0xe800000000	                          call 0x400008a	        44	intel_modes.c	FUNCTION_1	CALL_2
0x400008a	          0x4889ef	                            mov rdi, rbp	        67	intel_modes.c	FUNCTION_2	CALL_3
0x400008d	            0x89c3	                            mov ebx, eax	        44	intel_modes.c	FUNCTION_1	CALL_2
0x400008f	      0xe800000000	                          call 0x4000094	        67	intel_modes.c	FUNCTION_2	CALL_3
0x4000094	            0x89d8	                            mov eax, ebx	        69	intel_modes.c	FUNCTION_2
0x4000096	              0x5b	                                 pop rbx	        70	intel_modes.c	FUNCTION_2
0x4000097	              0x5d	                                 pop rbp	        70	intel_modes.c	FUNCTION_2
0x4000098	              0xc3	                                     ret	        70	intel_modes.c	FUNCTION_2
intel_attach_force_audio_property	SWITCH,0:DO,0:ELSE,0:IF,2:WHILE,0:functions,0:FOR,0:CALL,4	29
0x40000a0	              0x55	                                push rbp	        81	intel_modes.c	FUNCTION_3
0x40000a1	              0x53	                                push rbx	        81	intel_modes.c	FUNCTION_3
0x40000a2	          0x4889fb	                            mov rbx, rdi	        81	intel_modes.c	FUNCTION_3
0x40000a5	          0x488b2f	                    mov rbp, qword [rdi]	        82	intel_modes.c	FUNCTION_3
0x40000a8	    0x488bb5486f00	          mov rsi, qword [rbp + 0x6f48] 	        86	intel_modes.c	FUNCTION_3
0x40000af	          0x4885f6	                           test rsi, rsi	        87	intel_modes.c	FUNCTION_3	IF_1
0x40000b2	            0x740d	                            je 0x40000c1	        87	intel_modes.c	FUNCTION_3	IF_1
0x40000b4	        0x488d7b28	                   lea rdi, [rbx + 0x28]	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000b8	            0x31d2	                            xor edx, edx	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000ba	              0x5b	                                 pop rbx	        98	intel_modes.c	FUNCTION_3
0x40000bb	              0x5d	                                 pop rbp	        98	intel_modes.c	FUNCTION_3
0x40000bc	      0xe900000000	                           jmp 0x40000c1	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000c1	    0x41b804000000	                              mov r8d, 4	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000c7	    0x48c7c1000000	                              mov rcx, 0	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000ce	    0x48c7c2000000	                              mov rdx, 0	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000d5	          0x4889ef	                            mov rdi, rbp	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000d8	      0xe800000000	                          call 0x40000dd	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000dd	          0x4885c0	                           test rax, rax	        92	intel_modes.c	FUNCTION_3	IF_1	IF_2
0x40000e0	          0x4889c6	                            mov rsi, rax	        88	intel_modes.c	FUNCTION_3	IF_1	CALL_2
0x40000e3	            0x7414	                            je 0x40000f9	        92	intel_modes.c	FUNCTION_3	IF_1	IF_2
0x40000e5	    0x488985486f00	          mov qword [rbp + 0x6f48], rax 	        95	intel_modes.c	FUNCTION_3	IF_1
0x40000ec	        0x488d7b28	                   lea rdi, [rbx + 0x28]	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000f0	            0x31d2	                            xor edx, edx	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000f2	              0x5b	                                 pop rbx	        98	intel_modes.c	FUNCTION_3
0x40000f3	              0x5d	                                 pop rbp	        98	intel_modes.c	FUNCTION_3
0x40000f4	      0xe900000000	                           jmp 0x40000f9	        97	intel_modes.c	FUNCTION_3	CALL_4
0x40000f9	              0x5b	                                 pop rbx	        98	intel_modes.c	FUNCTION_3
0x40000fa	              0x5d	                                 pop rbp	        98	intel_modes.c	FUNCTION_3
0x40000fb	              0xc3	                                     ret	        98	intel_modes.c	FUNCTION_3
intel_attach_broadcast_rgb_property	SWITCH,0:DO,0:ELSE,0:IF,2:WHILE,0:functions,0:FOR,0:CALL,4	30
0x4000100	              0x55	                                push rbp	       108	intel_modes.c	FUNCTION_4
0x4000101	              0x53	                                push rbx	       108	intel_modes.c	FUNCTION_4
0x4000102	          0x4889fb	                            mov rbx, rdi	       108	intel_modes.c	FUNCTION_4
0x4000105	          0x488b2f	                    mov rbp, qword [rdi]	       109	intel_modes.c	FUNCTION_4
0x4000108	    0x488bb5406f00	          mov rsi, qword [rbp + 0x6f40] 	       113	intel_modes.c	FUNCTION_4
0x400010f	          0x4885f6	                           test rsi, rsi	       114	intel_modes.c	FUNCTION_4	IF_1
0x4000112	            0x740d	                            je 0x4000121	       114	intel_modes.c	FUNCTION_4	IF_1
0x4000114	        0x488d7b28	                   lea rdi, [rbx + 0x28]	       125	intel_modes.c	FUNCTION_4	CALL_4
0x4000118	            0x31d2	                            xor edx, edx	       125	intel_modes.c	FUNCTION_4	CALL_4
0x400011a	              0x5b	                                 pop rbx	       126	intel_modes.c	FUNCTION_4
0x400011b	              0x5d	                                 pop rbp	       126	intel_modes.c	FUNCTION_4
0x400011c	      0xe900000000	                           jmp 0x4000121	       125	intel_modes.c	FUNCTION_4	CALL_4
0x4000121	      0xbe08000000	                              mov esi, 8	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x4000126	    0x41b803000000	                              mov r8d, 3	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x400012c	    0x48c7c1000000	                              mov rcx, 0	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x4000133	    0x48c7c2000000	                              mov rdx, 0	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x400013a	          0x4889ef	                            mov rdi, rbp	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x400013d	      0xe800000000	                          call 0x4000142	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x4000142	          0x4885c0	                           test rax, rax	       119	intel_modes.c	FUNCTION_4	IF_1	IF_2
0x4000145	          0x4889c6	                            mov rsi, rax	       115	intel_modes.c	FUNCTION_4	IF_1	CALL_2
0x4000148	            0x7414	                            je 0x400015e	       119	intel_modes.c	FUNCTION_4	IF_1	IF_2
0x400014a	    0x488985406f00	          mov qword [rbp + 0x6f40], rax 	       122	intel_modes.c	FUNCTION_4	IF_1
0x4000151	        0x488d7b28	                   lea rdi, [rbx + 0x28]	       125	intel_modes.c	FUNCTION_4	CALL_4
0x4000155	            0x31d2	                            xor edx, edx	       125	intel_modes.c	FUNCTION_4	CALL_4
0x4000157	              0x5b	                                 pop rbx	       126	intel_modes.c	FUNCTION_4
0x4000158	              0x5d	                                 pop rbp	       126	intel_modes.c	FUNCTION_4
0x4000159	      0xe900000000	                           jmp 0x400015e	       125	intel_modes.c	FUNCTION_4	CALL_4
0x400015e	              0x5b	                                 pop rbx	       126	intel_modes.c	FUNCTION_4
0x400015f	              0x5d	                                 pop rbp	       126	intel_modes.c	FUNCTION_4
0x4000160	              0xc3	                                     ret	       126	intel_modes.c	FUNCTION_4
intel_attach_aspect_ratio_property	SWITCH,0:DO,0:ELSE,0:IF,1:WHILE,0:functions,0:FOR,0:CALL,2	14
0x4000170	              0x53	                                push rbx	       130	intel_modes.c	FUNCTION_5
0x4000171	          0x4889fb	                            mov rbx, rdi	       130	intel_modes.c	FUNCTION_5
0x4000174	          0x488b3f	                    mov rdi, qword [rdi]	       131	intel_modes.c	FUNCTION_5	IF_1	CALL_1
0x4000177	      0xe800000000	                          call 0x400017c	       131	intel_modes.c	FUNCTION_5	IF_1	CALL_1
0x400017c	            0x85c0	                           test eax, eax	       131	intel_modes.c	FUNCTION_5	IF_1	CALL_1
0x400017e	            0x7402	                            je 0x4000182	       131	intel_modes.c	FUNCTION_5	IF_1	CALL_1
0x4000180	              0x5b	                                 pop rbx	       135	intel_modes.c	FUNCTION_5
0x4000181	              0xc3	                                     ret	       135	intel_modes.c	FUNCTION_5
0x4000182	          0x488b03	                    mov rax, qword [rbx]	       132	intel_modes.c	FUNCTION_5	IF_1	CALL_2
0x4000185	        0x488d7b28	                   lea rdi, [rbx + 0x28]	       132	intel_modes.c	FUNCTION_5	IF_1	CALL_2
0x4000189	            0x31d2	                            xor edx, edx	       132	intel_modes.c	FUNCTION_5	IF_1	CALL_2
0x400018b	              0x5b	                                 pop rbx	       135	intel_modes.c	FUNCTION_5
0x400018c	    0x488bb0580500	           mov rsi, qword [rax + 0x558] 	       132	intel_modes.c	FUNCTION_5	IF_1	CALL_2
0x4000193	      0xe900000000	                   jmp section_end..text	       132	intel_modes.c	FUNCTION_5	IF_1	CALL_2
