acpi_ac_get_state	WHILE,0:functions,0:IF,2:SWITCH,0:CALL,3:ELSE,0:DO,0:FOR,0	26
0x4000040	          0x4885ff	                           test rdi, rdi	       299	ac.c	FUNCTION_8
0x4000043	            0x7426	                            je 0x400006b	       299	ac.c	FUNCTION_8
0x4000045	              0x53	                                push rbx	       299	ac.c	FUNCTION_8
0x4000046	        0x488b4758	            mov rax, qword [rdi + 0x58] 	       299	ac.c	FUNCTION_8
0x400004a	        0x488d4f60	                   lea rcx, [rdi + 0x60]	       301	ac.c	FUNCTION_8
0x400004e	          0x4889fb	                            mov rbx, rdi	       305	ac.c	FUNCTION_9
0x4000051	            0x31d2	                            xor edx, edx	       305	ac.c	FUNCTION_9
0x4000053	    0x48c7c6000000	                              mov rsi, 0	       305	ac.c	FUNCTION_9
0x400005a	        0x488b7808	                mov rdi, qword [rax + 8]	       443	ac.c	FUNCTION_12
0x400005e	      0xe800000000	                          call 0x4000063	       447	ac.c	FUNCTION_12	IF_1
0x4000063	            0x85c0	                           test eax, eax	       447	ac.c	FUNCTION_12	IF_1
0x4000065	            0x750a	                           jne 0x4000071	       450	ac.c	FUNCTION_12	CALL_1
0x4000067	            0x31c0	                            xor eax, eax	       450	ac.c	FUNCTION_12	CALL_1
0x4000069	              0x5b	                                 pop rbx	       450	ac.c	FUNCTION_12	CALL_1
0x400006a	              0xc3	                                     ret	       450	ac.c	FUNCTION_12	CALL_1
0x400006b	      0xb8eaffffff	                     mov eax, 0xffffffea	       450	ac.c	FUNCTION_12	CALL_1
0x4000070	              0xc3	                                     ret	       450	ac.c	FUNCTION_12	CALL_1
0x4000071	            0x89c2	                            mov edx, eax	       452	ac.c	FUNCTION_12	IF_2
0x4000073	    0x48c7c1000000	                              mov rcx, 0	       452	ac.c	FUNCTION_12	IF_2
0x400007a	      0xbe81000000	                           mov esi, 0x81	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x400007f	    0x48c7c7000000	                              mov rdi, 0	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000086	      0xe800000000	                          call 0x400008b	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x400008b	    0x48c74360ff00	           mov qword [rbx + 0x60], 0xff 	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000093	      0xb8edffffff	                     mov eax, 0xffffffed	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000098	              0x5b	                                 pop rbx	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000099	              0xc3	                                     ret	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
ac_do_not_check_pmic_quirk	WHILE,0:functions,0:IF,0:SWITCH,0:CALL,0:ELSE,0:DO,0:FOR,0	4
0x400004d	              0x60	                                 invalid	       305	ac.c	FUNCTION_9
0x400004e	          0x4889fb	                            mov rbx, rdi	       305	ac.c	FUNCTION_9
0x4000051	            0x31d2	                            xor edx, edx	       305	ac.c	FUNCTION_9
0x4000053	    0x48c7c6000000	                              mov rsi, 0	       305	ac.c	FUNCTION_9
acpi_ac_battery_notify	WHILE,0:functions,0:IF,1:SWITCH,0:CALL,3:ELSE,0:DO,0:FOR,0	14
0x40001c0	        0x488d7210	                   lea rsi, [rdx + 0x10]	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001c4	          0x4989f8	                             mov r8, rdi	       279	ac.c	FUNCTION_7
0x40001c7	      0xb908000000	                              mov ecx, 8	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001cc	    0x48c7c7000000	                              mov rdi, 0	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001d3	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001d5	            0x7509	                           jne 0x40001e0	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001d7	    0x817a2c800000	           cmp dword [rdx + 0x2c], 0x80 	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001de	            0x7406	                            je 0x40001e6	       290	ac.c	FUNCTION_7	IF_1	CALL_2
0x40001e0	      0xb801000000	                              mov eax, 1	       295	ac.c	FUNCTION_7
0x40001e5	              0xc3	                                     ret	       295	ac.c	FUNCTION_7
0x40001e6	        0x498d7898	                    lea rdi, [r8 - 0x68]	       292	ac.c	FUNCTION_7	CALL_3
0x40001ea	      0xe851feffff	              call sym.acpi_ac_get_state	       292	ac.c	FUNCTION_7	CALL_3
0x40001ef	      0xb801000000	                              mov eax, 1	       295	ac.c	FUNCTION_7
0x40001f4	              0xc3	                                     ret	       295	ac.c	FUNCTION_7
acpi_ac_init	WHILE,0:functions,0:IF,5:SWITCH,0:CALL,7:ELSE,0:DO,0:FOR,1	47
0x400005a	        0x488b7808	                mov rdi, qword [rax + 8]	       443	ac.c	FUNCTION_12
0x400005e	      0xe800000000	                          call 0x4000063	       447	ac.c	FUNCTION_12	IF_1
0x4000063	            0x85c0	                           test eax, eax	       447	ac.c	FUNCTION_12	IF_1
0x4000065	            0x750a	                           jne 0x4000071	       450	ac.c	FUNCTION_12	CALL_1
0x4000067	            0x31c0	                            xor eax, eax	       450	ac.c	FUNCTION_12	CALL_1
0x4000069	              0x5b	                                 pop rbx	       450	ac.c	FUNCTION_12	CALL_1
0x400006a	              0xc3	                                     ret	       450	ac.c	FUNCTION_12	CALL_1
0x400006b	      0xb8eaffffff	                     mov eax, 0xffffffea	       450	ac.c	FUNCTION_12	CALL_1
0x4000070	              0xc3	                                     ret	       450	ac.c	FUNCTION_12	CALL_1
0x4000071	            0x89c2	                            mov edx, eax	       452	ac.c	FUNCTION_12	IF_2
0x4000073	    0x48c7c1000000	                              mov rcx, 0	       452	ac.c	FUNCTION_12	IF_2
0x400007a	      0xbe81000000	                           mov esi, 0x81	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x400007f	    0x48c7c7000000	                              mov rdi, 0	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000086	      0xe800000000	                          call 0x400008b	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x400008b	    0x48c74360ff00	           mov qword [rbx + 0x60], 0xff 	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000093	      0xb8edffffff	                     mov eax, 0xffffffed	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000098	              0x5b	                                 pop rbx	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x4000099	              0xc3	                                     ret	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x400009a	    0x660f1f440000	                    nop word [rax + rax]	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a0	          0x4885ff	                           test rdi, rdi	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a3	            0x4154	                                push r12	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a5	              0x55	                                push rbp	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a6	              0x53	                                push rbx	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a7	            0x7445	                            je 0x40000ee	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000a9	        0x488b5ff8	                mov rbx, qword [rdi - 8]	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000ad	          0x4885db	                           test rbx, rbx	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000b0	            0x743c	                            je 0x40000ee	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000b2	          0x4889df	                            mov rdi, rbx	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000b5	        0x4c8b6360	            mov r12, qword [rbx + 0x60] 	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000b9	      0xe882ffffff	              call sym.acpi_ac_get_state	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000be	            0x85c0	                           test eax, eax	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000c0	            0x89c5	                            mov ebp, eax	       454	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_3
0x40000c2	            0x7521	                           jne 0x40000e5	       456	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_4
0x40000c4	          0x4589e4	                          mov r12d, r12d	       456	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_4
0x40000c7	        0x4c3b6360	            cmp r12, qword [rbx + 0x60] 	       456	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_4
0x40000cb	            0x7411	                            je 0x40000de	       456	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3	CALL_4
0x40000cd	          0x488b3b	                    mov rdi, qword [rbx]	       458	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3
0x40000d0	      0xbe02000000	                              mov esi, 2	       458	ac.c	FUNCTION_12	IF_2	FOR_1	IF_3
0x40000d5	        0x4883c748	                           add rdi, 0x48	       469	ac.c	FUNCTION_12	CALL_6
0x40000d9	      0xe800000000	                          call 0x40000de	       469	ac.c	FUNCTION_12	CALL_6
0x40000de	            0x89e8	                            mov eax, ebp	       469	ac.c	FUNCTION_12	CALL_6
0x40000e0	              0x5b	                                 pop rbx	       470	ac.c	FUNCTION_12	IF_5
0x40000e1	              0x5d	                                 pop rbp	       470	ac.c	FUNCTION_12	IF_5
0x40000e2	            0x415c	                                 pop r12	       470	ac.c	FUNCTION_12	IF_5
0x40000e4	              0xc3	                                     ret	       478	ac.c	FUNCTION_12
0x40000e5	            0x31ed	                            xor ebp, ebp	       478	ac.c	FUNCTION_12
0x40000e7	              0x89	                                 invalid	       478	ac.c	FUNCTION_12
acpi_ac_remove	WHILE,0:functions,0:IF,1:SWITCH,0:CALL,6:ELSE,0:DO,0:FOR,0	20
0x4000180	          0x4885ff	                           test rdi, rdi	       425	ac.c	FUNCTION_11	IF_1	CALL_1
0x4000183	            0x7431	                            je 0x40001b6	       425	ac.c	FUNCTION_11	IF_1	CALL_1
0x4000185	              0x53	                                push rbx	       421	ac.c	FUNCTION_11
0x4000186	    0x488b9f480200	           mov rbx, qword [rdi + 0x248] 	       421	ac.c	FUNCTION_11
0x400018d	          0x4885db	                           test rbx, rbx	       425	ac.c	FUNCTION_11	IF_1	CALL_1
0x4000190	            0x741d	                            je 0x40001af	       425	ac.c	FUNCTION_11	IF_1	CALL_1
0x4000192	          0x488b3b	                    mov rdi, qword [rbx]	       430	ac.c	FUNCTION_11	CALL_3
0x4000195	      0xe800000000	                          call 0x400019a	       430	ac.c	FUNCTION_11	CALL_3
0x400019a	        0x488d7b68	                   lea rdi, [rbx + 0x68]	       431	ac.c	FUNCTION_11	CALL_4
0x400019e	      0xe800000000	                          call 0x40001a3	       431	ac.c	FUNCTION_11	CALL_4
0x40001a3	          0x4889df	                            mov rdi, rbx	       437	ac.c	FUNCTION_11	CALL_6
0x40001a6	      0xe800000000	                          call 0x40001ab	       437	ac.c	FUNCTION_11	CALL_6
0x40001ab	            0x31c0	                            xor eax, eax	       439	ac.c	FUNCTION_11
0x40001ad	              0x5b	                                 pop rbx	       440	ac.c	FUNCTION_11
0x40001ae	              0xc3	                                     ret	       440	ac.c	FUNCTION_11
0x40001af	      0xb8eaffffff	                     mov eax, 0xffffffea	       426	ac.c	FUNCTION_11	IF_1
0x40001b4	              0x5b	                                 pop rbx	       440	ac.c	FUNCTION_11
0x40001b5	              0xc3	                                     ret	       440	ac.c	FUNCTION_11
0x40001b6	      0xb8eaffffff	                     mov eax, 0xffffffea	       426	ac.c	FUNCTION_11	IF_1
0x40001bb	              0xc3	                                     ret	       440	ac.c	FUNCTION_11
get_ac_property	WHILE,0:functions,0:IF,2:SWITCH,1:CALL,1:ELSE,0:DO,0:FOR,0	25
0x4000200	            0x4154	                                push r12	       143	ac.c	FUNCTION_2
0x4000202	              0x55	                                push rbp	       143	ac.c	FUNCTION_2
0x4000203	          0x4989d4	                            mov r12, rdx	       143	ac.c	FUNCTION_2
0x4000206	              0x53	                                push rbx	       143	ac.c	FUNCTION_2
0x4000207	            0x89f5	                            mov ebp, esi	       143	ac.c	FUNCTION_2
0x4000209	      0xe800000000	                          call 0x400020e	       144	ac.c	FUNCTION_2
0x400020e	          0x4885c0	                           test rax, rax	       146	ac.c	FUNCTION_2	IF_1
0x4000211	            0x7421	                            je 0x4000234	       146	ac.c	FUNCTION_2	IF_1
0x4000213	          0x4889c7	                            mov rdi, rax	       149	ac.c	FUNCTION_2	IF_2	CALL_1
0x4000216	          0x4889c3	                            mov rbx, rax	       149	ac.c	FUNCTION_2	IF_2	CALL_1
0x4000219	      0xe822feffff	              call sym.acpi_ac_get_state	       149	ac.c	FUNCTION_2	IF_2	CALL_1
0x400021e	            0x85c0	                           test eax, eax	       149	ac.c	FUNCTION_2	IF_2	CALL_1
0x4000220	            0x7512	                           jne 0x4000234	       149	ac.c	FUNCTION_2	IF_2	CALL_1
0x4000222	          0x83fd04	                              cmp ebp, 4	       152	ac.c	FUNCTION_2	SWITCH_1
0x4000225	            0x7514	                           jne 0x400023b	       152	ac.c	FUNCTION_2	SWITCH_1
0x4000227	        0x488b5360	            mov rdx, qword [rbx + 0x60] 	       154	ac.c	FUNCTION_2	SWITCH_1
0x400022b	        0x41891424	                    mov dword [r12], edx	       154	ac.c	FUNCTION_2	SWITCH_1
0x400022f	              0x5b	                                 pop rbx	       160	ac.c	FUNCTION_2
0x4000230	              0x5d	                                 pop rbp	       160	ac.c	FUNCTION_2
0x4000231	            0x415c	                                 pop r12	       160	ac.c	FUNCTION_2
0x4000233	              0xc3	                                     ret	       160	ac.c	FUNCTION_2
0x4000234	      0xb8edffffff	                     mov eax, 0xffffffed	       147	ac.c	FUNCTION_2	IF_1
0x4000239	            0xebf4	                           jmp 0x400022f	       147	ac.c	FUNCTION_2	IF_1
0x400023b	      0xb8eaffffff	                     mov eax, 0xffffffea	       157	ac.c	FUNCTION_2	SWITCH_1
0x4000240	            0xebed	                           jmp 0x400022f	       157	ac.c	FUNCTION_2	SWITCH_1
thinkpad_e530_quirk	WHILE,0:functions,0:IF,0:SWITCH,0:CALL,0:ELSE,0:DO,0:FOR,0	7
0x4000040	          0x4885ff	                           test rdi, rdi	       299	ac.c	FUNCTION_8
0x4000043	            0x7426	                            je 0x400006b	       299	ac.c	FUNCTION_8
0x4000045	              0x53	                                push rbx	       299	ac.c	FUNCTION_8
0x4000046	        0x488b4758	            mov rax, qword [rdi + 0x58] 	       299	ac.c	FUNCTION_8
0x400004a	              0x48	                                 invalid	       301	ac.c	FUNCTION_8
0x400004b	              0x8d	                                 invalid	       301	ac.c	FUNCTION_8
0x400004c	              0x4f	                                 invalid	       301	ac.c	FUNCTION_8
acpi_ac_exit	WHILE,0:functions,0:IF,0:SWITCH,0:CALL,2:ELSE,0:DO,0:FOR,0	6
0x4000040	          0x4885ff	                           test rdi, rdi	       299	ac.c	FUNCTION_8
0x4000043	            0x7426	                            je 0x400006b	       299	ac.c	FUNCTION_8
0x4000045	              0x53	                                push rbx	       299	ac.c	FUNCTION_8
0x4000046	        0x488b4758	            mov rax, qword [rdi + 0x58] 	       299	ac.c	FUNCTION_8
0x400004a	              0x48	                                 invalid	       301	ac.c	FUNCTION_8
0x400004b	              0x8d	                                 invalid	       301	ac.c	FUNCTION_8
