mq_walk	DO,0:WHILE,0:CALL,2:SWITCH,0:FOR,1:ELSE,0:IF,2:functions,0	33
0x4000130	            0x8b06	                    mov eax, dword [rsi]	       219	sch_mq.c	FUNCTION_12	IF_1
0x4000132	            0x85c0	                           test eax, eax	       219	sch_mq.c	FUNCTION_12	IF_1
0x4000134	            0x7556	                           jne 0x400018c	       219	sch_mq.c	FUNCTION_12	IF_1
0x4000136	            0x4155	                                push r13	       215	sch_mq.c	FUNCTION_12
0x4000138	            0x4154	                                push r12	       215	sch_mq.c	FUNCTION_12
0x400013a	          0x4989fc	                            mov r12, rdi	       215	sch_mq.c	FUNCTION_12
0x400013d	              0x55	                                push rbp	       215	sch_mq.c	FUNCTION_12
0x400013e	              0x53	                                push rbx	       215	sch_mq.c	FUNCTION_12
0x400013f	          0x4889f3	                            mov rbx, rsi	       215	sch_mq.c	FUNCTION_12
0x4000142	        0x488b4740	            mov rax, qword [rdi + 0x40] 	       417	sch_generic.h	FUNCTION_32
0x4000146	          0x8b6e04	                mov ebp, dword [rsi + 4]	       222	sch_mq.c	FUNCTION_12
0x4000149	          0x4c8b28	                    mov r13, qword [rax]	       417	sch_generic.h	FUNCTION_32
0x400014c	          0x896e08	                mov dword [rsi + 8], ebp	       222	sch_mq.c	FUNCTION_12
0x400014f	    0x413bad880300	           cmp ebp, dword [r13 + 0x388] 	       223	sch_mq.c	FUNCTION_12	FOR_1
0x4000156	            0x720f	                            jb 0x4000167	       223	sch_mq.c	FUNCTION_12	FOR_1
0x4000158	            0xeb2c	                           jmp 0x4000186	       223	sch_mq.c	FUNCTION_12	FOR_1
0x400015a	        0x83430801	                  add dword [rbx + 8], 1	       228	sch_mq.c	FUNCTION_12	FOR_1
0x400015e	    0x4139ad880300	           cmp dword [r13 + 0x388], ebp 	       223	sch_mq.c	FUNCTION_12	FOR_1
0x4000165	            0x761f	                           jbe 0x4000186	       223	sch_mq.c	FUNCTION_12	FOR_1
0x4000167	          0x8d7501	                      lea esi, [rbp + 1]	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x400016a	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x400016e	          0x4889da	                            mov rdx, rbx	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x4000171	          0x4c89e7	                            mov rdi, r12	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x4000174	          0x4889f5	                            mov rbp, rsi	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x4000177	      0xe800000000	                          call 0x400017c	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x400017c	            0x85c0	                           test eax, eax	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x400017e	            0x79da	                           jns 0x400015a	       224	sch_mq.c	FUNCTION_12	FOR_1	IF_2	CALL_2
0x4000180	    0xc70301000000	                      mov dword [rbx], 1	       225	sch_mq.c	FUNCTION_12	FOR_1	IF_2
0x4000186	              0x5b	                                 pop rbx	       230	sch_mq.c	FUNCTION_12
0x4000187	              0x5d	                                 pop rbp	       230	sch_mq.c	FUNCTION_12
0x4000188	            0x415c	                                 pop r12	       230	sch_mq.c	FUNCTION_12
0x400018a	            0x415d	                                 pop r13	       230	sch_mq.c	FUNCTION_12
0x400018c	            0xf3c3	                                     ret	       230	sch_mq.c	FUNCTION_12
mq_destroy	DO,0:WHILE,0:CALL,4:SWITCH,0:FOR,1:ELSE,0:IF,1:functions,0	35
0x40003e0	            0x4154	                                push r12	        27	sch_mq.c	FUNCTION_1
0x40003e2	              0x55	                                push rbp	        27	sch_mq.c	FUNCTION_1
0x40003e3	              0x53	                                push rbx	        27	sch_mq.c	FUNCTION_1
0x40003e4	        0x488b4740	            mov rax, qword [rdi + 0x40] 	       417	sch_generic.h	FUNCTION_32
0x40003e8	          0x4c8b20	                    mov r12, qword [rax]	       417	sch_generic.h	FUNCTION_32
0x40003eb	    0x488b87800100	           mov rax, qword [rdi + 0x180] 	        32	sch_mq.c	FUNCTION_1	IF_1
0x40003f2	          0x4885c0	                           test rax, rax	        32	sch_mq.c	FUNCTION_1	IF_1
0x40003f5	            0x744b	                            je 0x4000442	        32	sch_mq.c	FUNCTION_1	IF_1
0x40003f7	    0x418b94248803	           mov edx, dword [r12 + 0x388] 	        34	sch_mq.c	FUNCTION_1	FOR_1
0x40003ff	            0x85d2	                           test edx, edx	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000401	            0x7433	                            je 0x4000436	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000403	          0x4889fd	                            mov rbp, rdi	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000406	          0x488b38	                    mov rdi, qword [rax]	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000409	          0x4885ff	                           test rdi, rdi	        34	sch_mq.c	FUNCTION_1	FOR_1
0x400040c	            0x7428	                            je 0x4000436	        34	sch_mq.c	FUNCTION_1	FOR_1
0x400040e	            0x31db	                            xor ebx, ebx	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000410	            0xeb0b	                           jmp 0x400041d	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000412	            0x89da	                            mov edx, ebx	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000414	        0x488b3cd0	            mov rdi, qword [rax + rdx*8]	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000418	          0x4885ff	                           test rdi, rdi	        34	sch_mq.c	FUNCTION_1	FOR_1
0x400041b	            0x7419	                            je 0x4000436	        34	sch_mq.c	FUNCTION_1	FOR_1
0x400041d	      0xe800000000	                          call 0x4000422	        35	sch_mq.c	FUNCTION_1	CALL_3
0x4000422	          0x83c301	                              add ebx, 1	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000425	    0x41399c248803	           cmp dword [r12 + 0x388], ebx 	        34	sch_mq.c	FUNCTION_1	FOR_1
0x400042d	    0x488b85800100	           mov rax, qword [rbp + 0x180] 	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000434	            0x77dc	                            ja 0x4000412	        34	sch_mq.c	FUNCTION_1	FOR_1
0x4000436	              0x5b	                                 pop rbx	        37	sch_mq.c	FUNCTION_1
0x4000437	              0x5d	                                 pop rbp	        37	sch_mq.c	FUNCTION_1
0x4000438	            0x415c	                                 pop r12	        37	sch_mq.c	FUNCTION_1
0x400043a	          0x4889c7	                            mov rdi, rax	        36	sch_mq.c	FUNCTION_1	CALL_4
0x400043d	      0xe900000000	                           jmp 0x4000442	        36	sch_mq.c	FUNCTION_1	CALL_4
0x4000442	              0x5b	                                 pop rbx	        37	sch_mq.c	FUNCTION_1
0x4000443	              0x5d	                                 pop rbp	        37	sch_mq.c	FUNCTION_1
0x4000444	            0x415c	                                 pop r12	        37	sch_mq.c	FUNCTION_1
0x4000446	              0xc3	                                     ret	        37	sch_mq.c	FUNCTION_1
mq_attach	DO,0:WHILE,0:CALL,6:SWITCH,0:FOR,1:ELSE,0:IF,2:functions,0	41
0x4000340	            0x4155	                                push r13	        77	sch_mq.c	FUNCTION_3
0x4000342	            0x4154	                                push r12	        77	sch_mq.c	FUNCTION_3
0x4000344	          0x4989fd	                            mov r13, rdi	        77	sch_mq.c	FUNCTION_3
0x4000347	              0x55	                                push rbp	        77	sch_mq.c	FUNCTION_3
0x4000348	              0x53	                                push rbx	        77	sch_mq.c	FUNCTION_3
0x4000349	            0x31db	                            xor ebx, ebx	        77	sch_mq.c	FUNCTION_3
0x400034b	        0x488b4740	            mov rax, qword [rdi + 0x40] 	       417	sch_generic.h	FUNCTION_32
0x400034f	          0x4c8b20	                    mov r12, qword [rax]	       417	sch_generic.h	FUNCTION_32
0x4000352	    0x418b84248803	           mov eax, dword [r12 + 0x388] 	        83	sch_mq.c	FUNCTION_3	FOR_1
0x400035a	            0x85c0	                           test eax, eax	        83	sch_mq.c	FUNCTION_3	FOR_1
0x400035c	            0x750f	                           jne 0x400036d	        83	sch_mq.c	FUNCTION_3	FOR_1
0x400035e	            0xeb54	                           jmp 0x40003b4	        83	sch_mq.c	FUNCTION_3	FOR_1
0x4000360	          0x83c301	                              add ebx, 1	        83	sch_mq.c	FUNCTION_3	FOR_1
0x4000363	    0x41399c248803	           cmp dword [r12 + 0x388], ebx 	        83	sch_mq.c	FUNCTION_3	FOR_1
0x400036b	            0x7647	                           jbe 0x40003b4	        83	sch_mq.c	FUNCTION_3	FOR_1
0x400036d	    0x498b95800100	           mov rdx, qword [r13 + 0x180] 	        84	sch_mq.c	FUNCTION_3	FOR_1
0x4000374	            0x89d8	                            mov eax, ebx	        84	sch_mq.c	FUNCTION_3	FOR_1
0x4000376	        0x488b2cc2	            mov rbp, qword [rdx + rax*8]	        84	sch_mq.c	FUNCTION_3	FOR_1
0x400037a	        0x488b7d40	            mov rdi, qword [rbp + 0x40] 	        85	sch_mq.c	FUNCTION_3	FOR_1	CALL_3
0x400037e	          0x4889ee	                            mov rsi, rbp	        85	sch_mq.c	FUNCTION_3	FOR_1	CALL_3
0x4000381	      0xe800000000	                          call 0x4000386	        85	sch_mq.c	FUNCTION_3	FOR_1	CALL_3
0x4000386	          0x4885c0	                           test rax, rax	        86	sch_mq.c	FUNCTION_3	FOR_1	IF_1
0x4000389	            0x7408	                            je 0x4000393	        86	sch_mq.c	FUNCTION_3	FOR_1	IF_1
0x400038b	          0x4889c7	                            mov rdi, rax	        87	sch_mq.c	FUNCTION_3	FOR_1	CALL_4
0x400038e	      0xe800000000	                          call 0x4000393	        87	sch_mq.c	FUNCTION_3	FOR_1	CALL_4
0x4000393	    0x41399c248c03	           cmp dword [r12 + 0x38c], ebx 	        89	sch_mq.c	FUNCTION_3	FOR_1	IF_2
0x400039b	            0x76c3	                           jbe 0x4000360	        89	sch_mq.c	FUNCTION_3	FOR_1	IF_2
0x400039d	            0x31f6	                            xor esi, esi	        90	sch_mq.c	FUNCTION_3	FOR_1	CALL_5
0x400039f	          0x4889ef	                            mov rdi, rbp	        90	sch_mq.c	FUNCTION_3	FOR_1	CALL_5
0x40003a2	          0x83c301	                              add ebx, 1	        83	sch_mq.c	FUNCTION_3	FOR_1
0x40003a5	      0xe800000000	                          call 0x40003aa	        90	sch_mq.c	FUNCTION_3	FOR_1	CALL_5
0x40003aa	    0x41399c248803	           cmp dword [r12 + 0x388], ebx 	        83	sch_mq.c	FUNCTION_3	FOR_1
0x40003b2	            0x77b9	                            ja 0x400036d	        83	sch_mq.c	FUNCTION_3	FOR_1
0x40003b4	    0x498bbd800100	           mov rdi, qword [r13 + 0x180] 	        94	sch_mq.c	FUNCTION_3	CALL_6
0x40003bb	      0xe800000000	                          call 0x40003c0	        94	sch_mq.c	FUNCTION_3	CALL_6
0x40003c0	    0x49c785800100	              mov qword [r13 + 0x180], 0	        95	sch_mq.c	FUNCTION_3
0x40003cb	              0x5b	                                 pop rbx	        96	sch_mq.c	FUNCTION_3
0x40003cc	              0x5d	                                 pop rbp	        96	sch_mq.c	FUNCTION_3
0x40003cd	            0x415c	                                 pop r12	        96	sch_mq.c	FUNCTION_3
0x40003cf	            0x415d	                                 pop r13	        96	sch_mq.c	FUNCTION_3
0x40003d1	              0xc3	                                     ret	        96	sch_mq.c	FUNCTION_3
mq_find	DO,0:WHILE,0:CALL,2:SWITCH,0:FOR,0:ELSE,0:IF,1:functions,0	15
0x40000a0	        0x488b5740	            mov rdx, qword [rdi + 0x40] 	       417	sch_generic.h	FUNCTION_32
0x40000a4	           0xfb7c6	                           movzx eax, si	       186	sch_mq.c	FUNCTION_9	IF_1	CALL_2
0x40000a7	          0x488b0a	                    mov rcx, qword [rdx]	       417	sch_generic.h	FUNCTION_32
0x40000aa	        0x488d50ff	                      lea rdx, [rax - 1]	       145	sch_mq.c	FUNCTION_5
0x40000ae	    0x8bb188030000	           mov esi, dword [rcx + 0x388] 	       147	sch_mq.c	FUNCTION_5	IF_1
0x40000b4	          0x4839f2	                            cmp rdx, rsi	       147	sch_mq.c	FUNCTION_5	IF_1
0x40000b7	            0x7319	                           jae 0x40000d2	       147	sch_mq.c	FUNCTION_5	IF_1
0x40000b9	        0x488d1492	                  lea rdx, [rdx + rdx*4]	       186	sch_mq.c	FUNCTION_9	IF_1	CALL_2
0x40000bd	        0x48c1e206	                              shl rdx, 6	       186	sch_mq.c	FUNCTION_9	IF_1	CALL_2
0x40000c1	    0x480391800300	            add rdx, qword [rcx + 0x380]	       187	sch_mq.c	FUNCTION_9	IF_1
0x40000c8	      0xba00000000	                              mov edx, 0	       187	sch_mq.c	FUNCTION_9	IF_1
0x40000cd	        0x480f44c2	                          cmove rax, rdx	       187	sch_mq.c	FUNCTION_9	IF_1
0x40000d1	              0xc3	                                     ret	       187	sch_mq.c	FUNCTION_9	IF_1
0x40000d2	            0x31c0	                            xor eax, eax	       187	sch_mq.c	FUNCTION_9	IF_1
0x40000d4	              0xc3	                                     ret	       189	sch_mq.c	FUNCTION_9
