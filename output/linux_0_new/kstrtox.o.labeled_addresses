_kstrtoull	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,2:IF,4:WHILE,0	42
0x40001f0	              0x55	                                push rbp	        86	kstrtox.c	FUNCTION_3
0x40001f1	              0x53	                                push rbx	        86	kstrtox.c	FUNCTION_3
0x40001f2	          0x4889d5	                            mov rbp, rdx	        86	kstrtox.c	FUNCTION_3
0x40001f5	        0x4883ec18	                           sub rsp, 0x18	        86	kstrtox.c	FUNCTION_3
0x40001f9	        0x89742404	                mov dword [rsp + 4], esi	        86	kstrtox.c	FUNCTION_3
0x40001fd	      0x488d742404	                      lea rsi, [rsp + 4]	        90	kstrtox.c	FUNCTION_3	CALL_1
0x4000202	    0x65488b042528	                mov rax, qword gs:[0x28]	        86	kstrtox.c	FUNCTION_3
0x400020b	      0x4889442410	             mov qword [rsp + 0x10], rax	        86	kstrtox.c	FUNCTION_3
0x4000210	            0x31c0	                            xor eax, eax	        86	kstrtox.c	FUNCTION_3
0x4000212	      0xe800000000	                          call 0x4000217	        90	kstrtox.c	FUNCTION_3	CALL_1
0x4000217	        0x8b742404	                mov esi, dword [rsp + 4]	        91	kstrtox.c	FUNCTION_3	CALL_2
0x400021b	      0x488d542408	                      lea rdx, [rsp + 8]	        91	kstrtox.c	FUNCTION_3	CALL_2
0x4000220	          0x4889c7	                            mov rdi, rax	        91	kstrtox.c	FUNCTION_3	CALL_2
0x4000223	          0x4889c3	                            mov rbx, rax	        90	kstrtox.c	FUNCTION_3	CALL_1
0x4000226	      0xe800000000	                          call 0x400022b	        91	kstrtox.c	FUNCTION_3	CALL_2
0x400022b	            0x85c0	                           test eax, eax	        92	kstrtox.c	FUNCTION_3	IF_1
0x400022d	            0x7842	                            js 0x4000271	        92	kstrtox.c	FUNCTION_3	IF_1
0x400022f	            0x7439	                            je 0x400026a	        94	kstrtox.c	FUNCTION_3	IF_2
0x4000231	            0x89c0	                            mov eax, eax	        96	kstrtox.c	FUNCTION_3
0x4000233	          0x4801d8	                            add rax, rbx	        96	kstrtox.c	FUNCTION_3
0x4000236	           0xfb610	                   movzx edx, byte [rax]	        97	kstrtox.c	FUNCTION_3	IF_3
0x4000239	          0x80fa0a	                             cmp dl, 0xa	        97	kstrtox.c	FUNCTION_3	IF_3
0x400023c	            0x7426	                            je 0x4000264	        97	kstrtox.c	FUNCTION_3	IF_3
0x400023e	            0x84d2	                             test dl, dl	        99	kstrtox.c	FUNCTION_3	IF_4
0x4000240	            0x7528	                           jne 0x400026a	        99	kstrtox.c	FUNCTION_3	IF_4
0x4000242	      0x488b442408	                mov rax, qword [rsp + 8]	       101	kstrtox.c	FUNCTION_3
0x4000247	        0x48894500	                    mov qword [rbp], rax	       101	kstrtox.c	FUNCTION_3
0x400024b	            0x31c0	                            xor eax, eax	       102	kstrtox.c	FUNCTION_3
0x400024d	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       103	kstrtox.c	FUNCTION_3
0x4000252	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       103	kstrtox.c	FUNCTION_3
0x400025b	            0x751b	                           jne 0x4000278	       103	kstrtox.c	FUNCTION_3
0x400025d	        0x4883c418	                           add rsp, 0x18	       103	kstrtox.c	FUNCTION_3
0x4000261	              0x5b	                                 pop rbx	       103	kstrtox.c	FUNCTION_3
0x4000262	              0x5d	                                 pop rbp	       103	kstrtox.c	FUNCTION_3
0x4000263	              0xc3	                                     ret	       103	kstrtox.c	FUNCTION_3
0x4000264	         0xfb65001	               movzx edx, byte [rax + 1]	       103	kstrtox.c	FUNCTION_3
0x4000268	            0xebd4	                           jmp 0x400023e	       103	kstrtox.c	FUNCTION_3
0x400026a	      0xb8eaffffff	                     mov eax, 0xffffffea	        95	kstrtox.c	FUNCTION_3	IF_2
0x400026f	            0xebdc	                           jmp 0x400024d	        95	kstrtox.c	FUNCTION_3	IF_2
0x4000271	      0xb8deffffff	                     mov eax, 0xffffffde	        93	kstrtox.c	FUNCTION_3	IF_1
0x4000276	            0xebd5	                           jmp 0x400024d	        93	kstrtox.c	FUNCTION_3	IF_1
0x4000278	      0xe800000000	                          call 0x400027d	       103	kstrtox.c	FUNCTION_3
kstrtou16	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,1:IF,2:WHILE,0	28
0x40003d0	              0x53	                                push rbx	       264	kstrtox.c	FUNCTION_10
0x40003d1	          0x4889d3	                            mov rbx, rdx	       264	kstrtox.c	FUNCTION_10
0x40003d4	        0x4883ec10	                           sub rsp, 0x10	       264	kstrtox.c	FUNCTION_10
0x40003d8	    0x65488b042528	                mov rax, qword gs:[0x28]	       264	kstrtox.c	FUNCTION_10
0x40003e1	      0x4889442408	                mov qword [rsp + 8], rax	       264	kstrtox.c	FUNCTION_10
0x40003e6	            0x31c0	                            xor eax, eax	       264	kstrtox.c	FUNCTION_10
0x40003e8	            0x31c0	                            xor eax, eax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40003ea	          0x803f2b	                    cmp byte [rdi], 0x2b	       124	kstrtox.c	FUNCTION_4	IF_1
0x40003ed	          0x4889e2	                            mov rdx, rsp	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40003f0	           0xf94c0	                                 sete al	       124	kstrtox.c	FUNCTION_4	IF_1
0x40003f3	          0x4801c7	                            add rdi, rax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40003f6	      0xe8f5fdffff	                     call sym._kstrtoull	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40003fb	            0x85c0	                           test eax, eax	       269	kstrtox.c	FUNCTION_10	IF_1
0x40003fd	            0x7816	                            js 0x4000415	       269	kstrtox.c	FUNCTION_10	IF_1
0x40003ff	        0x488b1424	                    mov rdx, qword [rsp]	       271	kstrtox.c	FUNCTION_10	IF_2
0x4000403	      0xb8deffffff	                     mov eax, 0xffffffde	       272	kstrtox.c	FUNCTION_10	IF_2
0x4000408	           0xfb7ca	                           movzx ecx, dx	       271	kstrtox.c	FUNCTION_10	IF_2
0x400040b	          0x4839ca	                            cmp rdx, rcx	       271	kstrtox.c	FUNCTION_10	IF_2
0x400040e	            0x7505	                           jne 0x4000415	       271	kstrtox.c	FUNCTION_10	IF_2
0x4000410	          0x668913	                      mov word [rbx], dx	       273	kstrtox.c	FUNCTION_10
0x4000413	            0x31c0	                            xor eax, eax	       274	kstrtox.c	FUNCTION_10
0x4000415	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       275	kstrtox.c	FUNCTION_10
0x400041a	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       275	kstrtox.c	FUNCTION_10
0x4000423	            0x7506	                           jne 0x400042b	       275	kstrtox.c	FUNCTION_10
0x4000425	        0x4883c410	                           add rsp, 0x10	       275	kstrtox.c	FUNCTION_10
0x4000429	              0x5b	                                 pop rbx	       275	kstrtox.c	FUNCTION_10
0x400042a	              0xc3	                                     ret	       275	kstrtox.c	FUNCTION_10
0x400042b	      0xe800000000	            call sym.kstrtou16_from_user	       275	kstrtox.c	FUNCTION_10
_kstrtol	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,1:IF,2:WHILE,0	20
0x40006c0	              0x53	                                push rbx	       187	kstrtox.c	FUNCTION_7
0x40006c1	          0x4889d3	                            mov rbx, rdx	       187	kstrtox.c	FUNCTION_7
0x40006c4	        0x4883ec10	                           sub rsp, 0x10	       187	kstrtox.c	FUNCTION_7
0x40006c8	          0x4889e2	                            mov rdx, rsp	       191	kstrtox.c	FUNCTION_7	CALL_1
0x40006cb	    0x65488b042528	                mov rax, qword gs:[0x28]	       187	kstrtox.c	FUNCTION_7
0x40006d4	      0x4889442408	                mov qword [rsp + 8], rax	       187	kstrtox.c	FUNCTION_7
0x40006d9	            0x31c0	                            xor eax, eax	       187	kstrtox.c	FUNCTION_7
0x40006db	      0xe800000000	                          call 0x40006e0	       191	kstrtox.c	FUNCTION_7	CALL_1
0x40006e0	            0x85c0	                           test eax, eax	       192	kstrtox.c	FUNCTION_7	IF_1
0x40006e2	            0x7809	                            js 0x40006ed	       192	kstrtox.c	FUNCTION_7	IF_1
0x40006e4	        0x488b0424	                    mov rax, qword [rsp]	       196	kstrtox.c	FUNCTION_7
0x40006e8	          0x488903	                    mov qword [rbx], rax	       196	kstrtox.c	FUNCTION_7
0x40006eb	            0x31c0	                            xor eax, eax	       197	kstrtox.c	FUNCTION_7
0x40006ed	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       198	kstrtox.c	FUNCTION_7
0x40006f2	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       198	kstrtox.c	FUNCTION_7
0x40006fb	            0x7506	                           jne 0x4000703	       198	kstrtox.c	FUNCTION_7
0x40006fd	        0x4883c410	                           add rsp, 0x10	       198	kstrtox.c	FUNCTION_7
0x4000701	              0x5b	                                 pop rbx	       198	kstrtox.c	FUNCTION_7
0x4000702	              0xc3	                                     ret	       198	kstrtox.c	FUNCTION_7
0x4000703	      0xe800000000	                          call 0x4000708	       198	kstrtox.c	FUNCTION_7
_parse_integer	functions,0:ELSE,2:DO,0:SWITCH,0:FOR,0:CALL,2:IF,5:WHILE,1	40
0x4000170	              0x53	                                push rbx	        49	kstrtox.c	FUNCTION_2
0x4000171	          0x4531c9	                            xor r9d, r9d	        54	kstrtox.c	FUNCTION_2
0x4000174	          0x4889d3	                            mov rbx, rdx	        49	kstrtox.c	FUNCTION_2
0x4000177	          0x4531c0	                            xor r8d, r8d	        53	kstrtox.c	FUNCTION_2
0x400017a	    0x49bb00000000	          movabs r11, 0xf000000000000000	        73	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	CALL_1
0x4000184	          0x4189f2	                           mov r10d, esi	        26	math64.h	FUNCTION_16
0x4000187	            0xeb0f	                           jmp 0x4000198	        26	math64.h	FUNCTION_16
0x4000189	        0x4d0fafc2	                            imul r8, r10	        77	kstrtox.c	FUNCTION_2	WHILE_1
0x400018d	        0x4183c101	                              add r9d, 1	        78	kstrtox.c	FUNCTION_2	WHILE_1
0x4000191	        0x4883c701	                              add rdi, 1	        79	kstrtox.c	FUNCTION_2	WHILE_1
0x4000195	          0x4901c8	                             add r8, rcx	        77	kstrtox.c	FUNCTION_2	WHILE_1
0x4000198	           0xfbe07	                   movsx eax, byte [rdi]	        56	kstrtox.c	FUNCTION_2	WHILE_1
0x400019b	            0x89c2	                            mov edx, eax	        56	kstrtox.c	FUNCTION_2	WHILE_1
0x400019d	          0x83e830	                           sub eax, 0x30	        60	kstrtox.c	FUNCTION_2	WHILE_1	IF_1
0x40001a0	          0x83f809	                              cmp eax, 9	        60	kstrtox.c	FUNCTION_2	WHILE_1	IF_1
0x40001a3	            0x7611	                           jbe 0x40001b6	        60	kstrtox.c	FUNCTION_2	WHILE_1	IF_1
0x40001a5	          0x83ca20	                            or edx, 0x20	        57	kstrtox.c	FUNCTION_2	WHILE_1
0x40001a8	           0xfbec2	                           movsx eax, dl	        57	kstrtox.c	FUNCTION_2	WHILE_1
0x40001ab	          0x8d509f	                   lea edx, [rax - 0x61]	        62	kstrtox.c	FUNCTION_2	WHILE_1	ELSE_1	IF_2
0x40001ae	          0x83fa05	                              cmp edx, 5	        62	kstrtox.c	FUNCTION_2	WHILE_1	ELSE_1	IF_2
0x40001b1	            0x772b	                            ja 0x40001de	        62	kstrtox.c	FUNCTION_2	WHILE_1	ELSE_1	IF_2
0x40001b3	          0x83e857	                           sub eax, 0x57	        63	kstrtox.c	FUNCTION_2	WHILE_1	ELSE_1	IF_2
0x40001b6	            0x39f0	                            cmp eax, esi	        67	kstrtox.c	FUNCTION_2	WHILE_1	IF_3
0x40001b8	            0x7324	                           jae 0x40001de	        67	kstrtox.c	FUNCTION_2	WHILE_1	IF_3
0x40001ba	          0x4d85d8	                            test r8, r11	        73	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	CALL_1
0x40001bd	            0x89c1	                            mov ecx, eax	        74	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5	CALL_2
0x40001bf	            0x74c8	                            je 0x4000189	        73	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	CALL_1
0x40001c1	          0x4889c8	                            mov rax, rcx	        74	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5	CALL_2
0x40001c4	            0x31d2	                            xor edx, edx	        74	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5	CALL_2
0x40001c6	          0x48f7d0	                                 not rax	        74	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5	CALL_2
0x40001c9	          0x49f7f2	                                 div r10	        74	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5	CALL_2
0x40001cc	          0x4489ca	                            mov edx, r9d	        75	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5
0x40001cf	    0x81ca00000080	                      or edx, 0x80000000	        75	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5
0x40001d5	          0x4939c0	                             cmp r8, rax	        75	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5
0x40001d8	        0x440f47ca	                          cmova r9d, edx	        75	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5
0x40001dc	            0xebab	                           jmp 0x4000189	        75	kstrtox.c	FUNCTION_2	WHILE_1	IF_4	IF_5
0x40001de	          0x4c8903	                     mov qword [rbx], r8	        81	kstrtox.c	FUNCTION_2
0x40001e1	          0x4489c8	                            mov eax, r9d	        83	kstrtox.c	FUNCTION_2
0x40001e4	              0x5b	                                 pop rbx	        83	kstrtox.c	FUNCTION_2
0x40001e5	              0xc3	                                     ret	        83	kstrtox.c	FUNCTION_2
_kstrtoul	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,1:IF,2:WHILE,0	24
0x4000290	              0x53	                                push rbx	       171	kstrtox.c	FUNCTION_6
0x4000291	          0x4889d3	                            mov rbx, rdx	       171	kstrtox.c	FUNCTION_6
0x4000294	        0x4883ec10	                           sub rsp, 0x10	       171	kstrtox.c	FUNCTION_6
0x4000298	    0x65488b042528	                mov rax, qword gs:[0x28]	       171	kstrtox.c	FUNCTION_6
0x40002a1	      0x4889442408	                mov qword [rsp + 8], rax	       171	kstrtox.c	FUNCTION_6
0x40002a6	            0x31c0	                            xor eax, eax	       171	kstrtox.c	FUNCTION_6
0x40002a8	            0x31c0	                            xor eax, eax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40002aa	          0x803f2b	                    cmp byte [rdi], 0x2b	       124	kstrtox.c	FUNCTION_4	IF_1
0x40002ad	          0x4889e2	                            mov rdx, rsp	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40002b0	           0xf94c0	                                 sete al	       124	kstrtox.c	FUNCTION_4	IF_1
0x40002b3	          0x4801c7	                            add rdi, rax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40002b6	      0xe835ffffff	                     call sym._kstrtoull	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40002bb	            0x85c0	                           test eax, eax	       176	kstrtox.c	FUNCTION_6	IF_1
0x40002bd	            0x7809	                            js 0x40002c8	       176	kstrtox.c	FUNCTION_6	IF_1
0x40002bf	        0x488b0424	                    mov rax, qword [rsp]	       180	kstrtox.c	FUNCTION_6
0x40002c3	          0x488903	                    mov qword [rbx], rax	       180	kstrtox.c	FUNCTION_6
0x40002c6	            0x31c0	                            xor eax, eax	       181	kstrtox.c	FUNCTION_6
0x40002c8	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       182	kstrtox.c	FUNCTION_6
0x40002cd	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       182	kstrtox.c	FUNCTION_6
0x40002d6	            0x7506	                           jne 0x40002de	       182	kstrtox.c	FUNCTION_6
0x40002d8	        0x4883c410	                           add rsp, 0x10	       182	kstrtox.c	FUNCTION_6
0x40002dc	              0x5b	                                 pop rbx	       182	kstrtox.c	FUNCTION_6
0x40002dd	              0xc3	                                     ret	       182	kstrtox.c	FUNCTION_6
0x40002de	      0xe800000000	                          call 0x40002e3	       182	kstrtox.c	FUNCTION_6
kstrtou8	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,1:IF,2:WHILE,0	28
0x40004b0	              0x53	                                push rbx	       294	kstrtox.c	FUNCTION_12
0x40004b1	          0x4889d3	                            mov rbx, rdx	       294	kstrtox.c	FUNCTION_12
0x40004b4	        0x4883ec10	                           sub rsp, 0x10	       294	kstrtox.c	FUNCTION_12
0x40004b8	    0x65488b042528	                mov rax, qword gs:[0x28]	       294	kstrtox.c	FUNCTION_12
0x40004c1	      0x4889442408	                mov qword [rsp + 8], rax	       294	kstrtox.c	FUNCTION_12
0x40004c6	            0x31c0	                            xor eax, eax	       294	kstrtox.c	FUNCTION_12
0x40004c8	            0x31c0	                            xor eax, eax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40004ca	          0x803f2b	                    cmp byte [rdi], 0x2b	       124	kstrtox.c	FUNCTION_4	IF_1
0x40004cd	          0x4889e2	                            mov rdx, rsp	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40004d0	           0xf94c0	                                 sete al	       124	kstrtox.c	FUNCTION_4	IF_1
0x40004d3	          0x4801c7	                            add rdi, rax	       124	kstrtox.c	FUNCTION_4	IF_1
0x40004d6	      0xe815fdffff	                     call sym._kstrtoull	       125	kstrtox.c	FUNCTION_4	CALL_1
0x40004db	            0x85c0	                           test eax, eax	       299	kstrtox.c	FUNCTION_12	IF_1
0x40004dd	            0x7815	                            js 0x40004f4	       299	kstrtox.c	FUNCTION_12	IF_1
0x40004df	        0x488b1424	                    mov rdx, qword [rsp]	       301	kstrtox.c	FUNCTION_12	IF_2
0x40004e3	      0xb8deffffff	                     mov eax, 0xffffffde	       302	kstrtox.c	FUNCTION_12	IF_2
0x40004e8	           0xfb6ca	                           movzx ecx, dl	       301	kstrtox.c	FUNCTION_12	IF_2
0x40004eb	          0x4839ca	                            cmp rdx, rcx	       301	kstrtox.c	FUNCTION_12	IF_2
0x40004ee	            0x7504	                           jne 0x40004f4	       301	kstrtox.c	FUNCTION_12	IF_2
0x40004f0	            0x8813	                      mov byte [rbx], dl	       303	kstrtox.c	FUNCTION_12
0x40004f2	            0x31c0	                            xor eax, eax	       304	kstrtox.c	FUNCTION_12
0x40004f4	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       305	kstrtox.c	FUNCTION_12
0x40004f9	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       305	kstrtox.c	FUNCTION_12
0x4000502	            0x7506	                           jne 0x400050a	       305	kstrtox.c	FUNCTION_12
0x4000504	        0x4883c410	                           add rsp, 0x10	       305	kstrtox.c	FUNCTION_12
0x4000508	              0x5b	                                 pop rbx	       305	kstrtox.c	FUNCTION_12
0x4000509	              0xc3	                                     ret	       305	kstrtox.c	FUNCTION_12
0x400050a	      0xe800000000	                          call 0x400050f	       305	kstrtox.c	FUNCTION_12
kstrtouint	functions,0:ELSE,0:DO,0:SWITCH,0:FOR,0:CALL,1:IF,2:WHILE,0	28
0x40002f0	              0x53	                                push rbx	       218	kstrtox.c	FUNCTION_8
0x40002f1	          0x4889d3	                            mov rbx, rdx	       218	kstrtox.c	FUNCTION_8
0x40002f4	        0x4883ec10	                           sub rsp, 0x10	       218	kstrtox.c	FUNCTION_8
0x40002f8	    0x65488b042528	                mov rax, qword gs:[0x28]	       218	kstrtox.c	FUNCTION_8
0x4000301	      0x4889442408	                mov qword [rsp + 8], rax	       218	kstrtox.c	FUNCTION_8
0x4000306	            0x31c0	                            xor eax, eax	       218	kstrtox.c	FUNCTION_8
0x4000308	            0x31c0	                            xor eax, eax	       124	kstrtox.c	FUNCTION_4	IF_1
0x400030a	          0x803f2b	                    cmp byte [rdi], 0x2b	       124	kstrtox.c	FUNCTION_4	IF_1
0x400030d	          0x4889e2	                            mov rdx, rsp	       125	kstrtox.c	FUNCTION_4	CALL_1
0x4000310	           0xf94c0	                                 sete al	       124	kstrtox.c	FUNCTION_4	IF_1
0x4000313	          0x4801c7	                            add rdi, rax	       124	kstrtox.c	FUNCTION_4	IF_1
0x4000316	      0xe8d5feffff	                     call sym._kstrtoull	       125	kstrtox.c	FUNCTION_4	CALL_1
0x400031b	            0x85c0	                           test eax, eax	       223	kstrtox.c	FUNCTION_8	IF_1
0x400031d	            0x7814	                            js 0x4000333	       223	kstrtox.c	FUNCTION_8	IF_1
0x400031f	        0x488b1424	                    mov rdx, qword [rsp]	       225	kstrtox.c	FUNCTION_8	IF_2
0x4000323	      0xb8deffffff	                     mov eax, 0xffffffde	       226	kstrtox.c	FUNCTION_8	IF_2
0x4000328	            0x89d1	                            mov ecx, edx	       225	kstrtox.c	FUNCTION_8	IF_2
0x400032a	          0x4839ca	                            cmp rdx, rcx	       225	kstrtox.c	FUNCTION_8	IF_2
0x400032d	            0x7504	                           jne 0x4000333	       225	kstrtox.c	FUNCTION_8	IF_2
0x400032f	            0x8913	                    mov dword [rbx], edx	       227	kstrtox.c	FUNCTION_8
0x4000331	            0x31c0	                            xor eax, eax	       228	kstrtox.c	FUNCTION_8
0x4000333	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       229	kstrtox.c	FUNCTION_8
0x4000338	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       229	kstrtox.c	FUNCTION_8
0x4000341	            0x7506	                           jne 0x4000349	       229	kstrtox.c	FUNCTION_8
0x4000343	        0x4883c410	                           add rsp, 0x10	       229	kstrtox.c	FUNCTION_8
0x4000347	              0x5b	                                 pop rbx	       229	kstrtox.c	FUNCTION_8
0x4000348	              0xc3	                                     ret	       229	kstrtox.c	FUNCTION_8
0x4000349	      0xe800000000	                          call 0x400034e	       229	kstrtox.c	FUNCTION_8
