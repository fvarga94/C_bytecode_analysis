acpi_ds_eval_bank_field_operands	WHILE,1:functions,0:SWITCH,0:ELSE,0:CALL,14:IF,4:FOR,0:DO,0	44
0x4000678	            0x4154	                                push r12	       664	dsopcode.c	FUNCTION_7
0x400067a	              0x55	                                push rbp	       664	dsopcode.c	FUNCTION_7
0x400067b	          0x4989f4	                            mov r12, rsi	       664	dsopcode.c	FUNCTION_7
0x400067e	              0x53	                                push rbx	       664	dsopcode.c	FUNCTION_7
0x400067f	        0x488b4628	            mov rax, qword [rsi + 0x28] 	       681	dsopcode.c	FUNCTION_7
0x4000683	            0x31d2	                            xor edx, edx	       699	dsopcode.c	FUNCTION_7	CALL_2
0x4000685	          0x4889fb	                            mov rbx, rdi	       664	dsopcode.c	FUNCTION_7
0x4000688	        0x488b4018	            mov rax, qword [rax + 0x18] 	       685	dsopcode.c	FUNCTION_7
0x400068c	        0x488b7018	            mov rsi, qword [rax + 0x18] 	       689	dsopcode.c	FUNCTION_7
0x4000690	        0xc6470e00	                 mov byte [rdi + 0xe], 0	       697	dsopcode.c	FUNCTION_7
0x4000694	      0xe800000000	                          call 0x4000699	       699	dsopcode.c	FUNCTION_7	CALL_2
0x4000699	            0x85c0	                           test eax, eax	       700	dsopcode.c	FUNCTION_7	IF_1	CALL_3
0x400069b	            0x7562	                           jne 0x40006ff	       700	dsopcode.c	FUNCTION_7	IF_1	CALL_3
0x400069d	    0x488dbbe00200	                  lea rdi, [rbx + 0x2e0]	       704	dsopcode.c	FUNCTION_7	CALL_5
0x40006a4	          0x4889de	                            mov rsi, rbx	       704	dsopcode.c	FUNCTION_7	CALL_5
0x40006a7	      0xe800000000	                          call 0x40006ac	       704	dsopcode.c	FUNCTION_7	CALL_5
0x40006ac	            0x85c0	                           test eax, eax	       705	dsopcode.c	FUNCTION_7	IF_2	CALL_6
0x40006ae	            0x754f	                           jne 0x40006ff	       705	dsopcode.c	FUNCTION_7	IF_2	CALL_6
0x40006b0	      0xbe04000000	                              mov esi, 4	       719	dsopcode.c	FUNCTION_7	CALL_10
0x40006b5	          0x4c89e7	                            mov rdi, r12	       719	dsopcode.c	FUNCTION_7	CALL_10
0x40006b8	    0x488babe00200	           mov rbp, qword [rbx + 0x2e0] 	       715	dsopcode.c	FUNCTION_7
0x40006bf	      0xe800000000	                          call 0x40006c4	       719	dsopcode.c	FUNCTION_7	CALL_10
0x40006c4	          0x4889c3	                            mov rbx, rax	       719	dsopcode.c	FUNCTION_7	CALL_10
0x40006c7	          0x4885db	                           test rbx, rbx	       720	dsopcode.c	FUNCTION_7	WHILE_1
0x40006ca	            0x7422	                            je 0x40006ee	       720	dsopcode.c	FUNCTION_7	WHILE_1
0x40006cc	      0x66837b0a30	              cmp word [rbx + 0xa], 0x30	       724	dsopcode.c	FUNCTION_7	WHILE_1	IF_3
0x40006d1	            0x7515	                           jne 0x40006e8	       724	dsopcode.c	FUNCTION_7	WHILE_1	IF_3
0x40006d3	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       727	dsopcode.c	FUNCTION_7	WHILE_1	IF_3	CALL_11
0x40006d7	      0xe800000000	                          call 0x40006dc	       727	dsopcode.c	FUNCTION_7	WHILE_1	IF_3	CALL_11
0x40006dc	          0x4885c0	                           test rax, rax	       728	dsopcode.c	FUNCTION_7	WHILE_1	IF_3	IF_4
0x40006df	            0x7419	                            je 0x40006fa	       728	dsopcode.c	FUNCTION_7	WHILE_1	IF_3	IF_4
0x40006e1	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       732	dsopcode.c	FUNCTION_7	WHILE_1	IF_3
0x40006e5	          0x895020	             mov dword [rax + 0x20], edx	       732	dsopcode.c	FUNCTION_7	WHILE_1	IF_3
0x40006e8	        0x488b5b18	            mov rbx, qword [rbx + 0x18] 	       738	dsopcode.c	FUNCTION_7	WHILE_1
0x40006ec	            0xebd9	                           jmp 0x40006c7	       738	dsopcode.c	FUNCTION_7	WHILE_1
0x40006ee	          0x4889ef	                            mov rdi, rbp	       741	dsopcode.c	FUNCTION_7	CALL_13
0x40006f1	      0xe800000000	                          call 0x40006f6	       741	dsopcode.c	FUNCTION_7	CALL_13
0x40006f6	            0x31c0	                            xor eax, eax	       742	dsopcode.c	FUNCTION_7	CALL_14
0x40006f8	            0xeb05	                           jmp 0x40006ff	       742	dsopcode.c	FUNCTION_7	CALL_14
0x40006fa	      0xb806000000	                              mov eax, 6	       729	dsopcode.c	FUNCTION_7	WHILE_1	IF_3	IF_4	CALL_12
0x40006ff	              0x5b	                                 pop rbx	       743	dsopcode.c	FUNCTION_7
0x4000700	              0x5d	                                 pop rbp	       743	dsopcode.c	FUNCTION_7
0x4000701	            0x415c	                                 pop r12	       743	dsopcode.c	FUNCTION_7
0x4000703	              0xc3	                                     ret	       743	dsopcode.c	FUNCTION_7
acpi_ds_init_buffer_field	WHILE,0:functions,0:SWITCH,1:ELSE,1:CALL,19:IF,7:FOR,0:DO,0	146
0x4000040	            0x4157	                                push r15	        81	dsopcode.c	FUNCTION_2
0x4000042	            0x4156	                                push r14	        81	dsopcode.c	FUNCTION_2
0x4000044	          0x4d89c6	                             mov r14, r8	        81	dsopcode.c	FUNCTION_2
0x4000047	            0x4155	                                push r13	        81	dsopcode.c	FUNCTION_2
0x4000049	            0x4154	                                push r12	        81	dsopcode.c	FUNCTION_2
0x400004b	          0x4d89cd	                             mov r13, r9	        81	dsopcode.c	FUNCTION_2
0x400004e	              0x55	                                push rbp	        81	dsopcode.c	FUNCTION_2
0x400004f	              0x53	                                push rbx	        81	dsopcode.c	FUNCTION_2
0x4000050	          0x4989f4	                            mov r12, rsi	        81	dsopcode.c	FUNCTION_2
0x4000053	            0x89fb	                            mov ebx, edi	        81	dsopcode.c	FUNCTION_2
0x4000055	          0x4889d5	                            mov rbp, rdx	        81	dsopcode.c	FUNCTION_2
0x4000058	        0x4883ec18	                           sub rsp, 0x18	        81	dsopcode.c	FUNCTION_2
0x400005c	        0x807a0903	                   cmp byte [rdx + 9], 3	        92	dsopcode.c	FUNCTION_2	IF_1
0x4000060	        0x48890c24	                    mov qword [rsp], rcx	        81	dsopcode.c	FUNCTION_2
0x4000064	            0x7425	                            je 0x400008b	        92	dsopcode.c	FUNCTION_2	IF_1
0x4000066	          0x4889d7	                            mov rdi, rdx	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x4000069	      0xe800000000	                          call 0x400006e	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x400006e	    0x48c7c2000000	                              mov rdx, 0	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x4000075	          0x4889c1	                            mov rcx, rax	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x4000078	      0xbe5f000000	                           mov esi, 0x5f	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x400007d	    0x48c7c7000000	                              mov rdi, 0	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x4000084	      0xe800000000	                          call 0x4000089	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x4000089	            0xeb3c	                           jmp 0x40000c7	        93	dsopcode.c	FUNCTION_2	IF_1	CALL_2
0x400008b	      0x418079080f	                  cmp byte [r9 + 8], 0xf	       106	dsopcode.c	FUNCTION_2	IF_2	CALL_4
0x4000090	            0x7440	                            je 0x40000d2	       106	dsopcode.c	FUNCTION_2	IF_2	CALL_4
0x4000092	          0x4c89cf	                             mov rdi, r9	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x4000095	      0xe800000000	                          call 0x400009a	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x400009a	           0xfb7fb	                           movzx edi, bx	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x400009d	      0x4889442408	                mov qword [rsp + 8], rax	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000a2	      0xe800000000	                          call 0x40000a7	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000a7	      0x4c8b442408	                 mov r8, qword [rsp + 8]	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000ac	          0x4889c1	                            mov rcx, rax	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000af	    0x48c7c2000000	                              mov rdx, 0	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000b6	      0xbe6e000000	                           mov esi, 0x6e	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000bb	    0x48c7c7000000	                              mov rdi, 0	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000c2	      0xe800000000	                          call 0x40000c7	       107	dsopcode.c	FUNCTION_2	IF_2	CALL_5
0x40000c7	    0x41bf03300000	                        mov r15d, 0x3003	       112	dsopcode.c	FUNCTION_2	IF_2
0x40000cd	      0xe981010000	                           jmp 0x4000253	       113	dsopcode.c	FUNCTION_2	IF_2
0x40000d2	        0x488b0424	                    mov rax, qword [rsp]	       116	dsopcode.c	FUNCTION_2
0x40000d6	      0x6681ff8c00	                            cmp di, 0x8c	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000db	        0x488b4010	            mov rax, qword [rax + 0x10] 	       116	dsopcode.c	FUNCTION_2
0x40000df	          0x4189c7	                           mov r15d, eax	       116	dsopcode.c	FUNCTION_2
0x40000e2	     0xf8481000000	                            je 0x4000169	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000e8	            0x772e	                            ja 0x4000118	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000ea	      0x6681ff8a00	                            cmp di, 0x8a	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000ef	     0xf8489000000	                            je 0x400017e	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000f5	      0x6681ff8b00	                            cmp di, 0x8b	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x40000fa	     0xf85a8000000	                           jne 0x40001a8	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000100	    0x448d3cc50000	                       lea r15d, [rax*8]	       162	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000108	      0xbe02000000	                              mov esi, 2	       164	dsopcode.c	FUNCTION_2	SWITCH_1
0x400010d	    0x41b810000000	                           mov r8d, 0x10	       163	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000113	      0xe9c1000000	                           jmp 0x40001d9	       165	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000118	      0x6681ff8f00	                            cmp di, 0x8f	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x400011d	            0x7474	                            je 0x4000193	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x400011f	      0x6681ff135b	                          cmp di, 0x5b13	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000124	            0x740c	                            je 0x4000132	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000126	      0x6681ff8d00	                            cmp di, 0x8d	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x400012b	            0x757b	                           jne 0x40001a8	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x400012d	      0xe99c000000	                           jmp 0x40001ce	       121	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000132	        0x498b4010	              mov rax, qword [r8 + 0x10]	       128	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000136	      0xbe01000000	                              mov esi, 1	       126	dsopcode.c	FUNCTION_2	SWITCH_1
0x400013b	            0x85c0	                           test eax, eax	       132	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3
0x400013d	          0x4189c0	                            mov r8d, eax	       128	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000140	     0xf8593000000	                           jne 0x40001d9	       132	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3
0x4000146	    0x48c7c2000000	                              mov rdx, 0	       133	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3	CALL_8
0x400014d	      0xbe86000000	                           mov esi, 0x86	       133	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3	CALL_8
0x4000152	    0x48c7c7000000	                              mov rdi, 0	       133	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3	CALL_8
0x4000159	      0xe800000000	                          call 0x400015e	       133	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3	CALL_8
0x400015e	    0x41bf04300000	                        mov r15d, 0x3004	       135	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3
0x4000164	      0xe9ea000000	                           jmp 0x4000253	       136	dsopcode.c	FUNCTION_2	SWITCH_1	IF_3
0x4000169	    0x448d3cc50000	                       lea r15d, [rax*8]	       153	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000171	      0xbe01000000	                              mov esi, 1	       155	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000176	    0x41b808000000	                              mov r8d, 8	       154	dsopcode.c	FUNCTION_2	SWITCH_1
0x400017c	            0xeb5b	                           jmp 0x40001d9	       156	dsopcode.c	FUNCTION_2	SWITCH_1
0x400017e	    0x448d3cc50000	                       lea r15d, [rax*8]	       171	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000186	      0xbe03000000	                              mov esi, 3	       173	dsopcode.c	FUNCTION_2	SWITCH_1
0x400018b	    0x41b820000000	                           mov r8d, 0x20	       172	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000191	            0xeb46	                           jmp 0x40001d9	       174	dsopcode.c	FUNCTION_2	SWITCH_1
0x4000193	    0x448d3cc50000	                       lea r15d, [rax*8]	       180	dsopcode.c	FUNCTION_2	SWITCH_1
0x400019b	      0xbe04000000	                              mov esi, 4	       182	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001a0	    0x41b840000000	                           mov r8d, 0x40	       181	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001a6	            0xeb31	                           jmp 0x40001d9	       183	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001a8	           0xfb7cb	                           movzx ecx, bx	       187	dsopcode.c	FUNCTION_2	SWITCH_1	CALL_9
0x40001ab	    0x48c7c2000000	                              mov rdx, 0	       187	dsopcode.c	FUNCTION_2	SWITCH_1	CALL_9
0x40001b2	      0xbebd000000	                           mov esi, 0xbd	       187	dsopcode.c	FUNCTION_2	SWITCH_1	CALL_9
0x40001b7	    0x48c7c7000000	                              mov rdi, 0	       187	dsopcode.c	FUNCTION_2	SWITCH_1	CALL_9
0x40001be	    0x41bf01300000	                        mov r15d, 0x3001	       190	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001c4	      0xe800000000	                          call 0x40001c9	       187	dsopcode.c	FUNCTION_2	SWITCH_1	CALL_9
0x40001c9	      0xe985000000	                           jmp 0x4000253	       191	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001ce	      0xbe01000000	                              mov esi, 1	       146	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001d3	    0x41b801000000	                              mov r8d, 1	       145	dsopcode.c	FUNCTION_2	SWITCH_1
0x40001d9	          0x8b4518	            mov eax, dword [rbp + 0x18] 	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001dc	    0x8d14c5000000	                        lea edx, [rax*8]	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001e3	        0x438d0407	                     lea eax, [r15 + r8]	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001e7	            0x39d0	                            cmp eax, edx	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001e9	        0x89542414	             mov dword [rsp + 0x14], edx	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001ed	            0x7641	                           jbe 0x4000230	       196	dsopcode.c	FUNCTION_2	IF_4
0x40001ef	          0x4c89ef	                            mov rdi, r13	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x40001f2	      0x4489442408	                mov dword [rsp + 8], r8d	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x40001f7	      0xe800000000	                          call 0x40001fc	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x40001fc	        0x8b542414	            mov edx, dword [rsp + 0x14] 	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000200	          0x4889c1	                            mov rcx, rax	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000203	      0xbec9000000	                           mov esi, 0xc9	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000208	    0x48c7c7000000	                              mov rdi, 0	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x400020f	              0x52	                                push rdx	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000210	      0x448b442410	            mov r8d, dword [rsp + 0x10] 	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000215	    0x48c7c2000000	                              mov rdx, 0	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x400021c	          0x4589c1	                            mov r9d, r8d	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x400021f	          0x4589f8	                           mov r8d, r15d	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x4000222	    0x41bf0a300000	                        mov r15d, 0x300a	       202	dsopcode.c	FUNCTION_2	IF_4
0x4000228	      0xe800000000	                          call 0x400022d	       197	dsopcode.c	FUNCTION_2	IF_4	CALL_10
0x400022d	              0x58	                                 pop rax	       203	dsopcode.c	FUNCTION_2	IF_4
0x400022e	            0xeb23	                           jmp 0x4000253	       203	dsopcode.c	FUNCTION_2	IF_4
0x4000230	          0x4489f9	                           mov ecx, r15d	       211	dsopcode.c	FUNCTION_2
0x4000233	            0x31d2	                            xor edx, edx	       211	dsopcode.c	FUNCTION_2
0x4000235	          0x4c89e7	                            mov rdi, r12	       211	dsopcode.c	FUNCTION_2
0x4000238	      0xe800000000	                          call 0x400023d	       211	dsopcode.c	FUNCTION_2
0x400023d	            0x85c0	                           test eax, eax	       214	dsopcode.c	FUNCTION_2	IF_5	CALL_13
0x400023f	          0x4189c7	                           mov r15d, eax	       211	dsopcode.c	FUNCTION_2
0x4000242	            0x750f	                           jne 0x4000253	       214	dsopcode.c	FUNCTION_2	IF_5	CALL_13
0x4000244	      0x49896c2428	             mov qword [r12 + 0x28], rbp	       218	dsopcode.c	FUNCTION_2
0x4000249	    0x66418b54240a	                mov dx, word [r12 + 0xa]	       222	dsopcode.c	FUNCTION_2
0x400024f	        0x6601550a	                add word [rbp + 0xa], dx	       222	dsopcode.c	FUNCTION_2
0x4000253	        0x488b3c24	                    mov rdi, qword [rsp]	       230	dsopcode.c	FUNCTION_2	CALL_14
0x4000257	      0xe800000000	                          call 0x400025c	       230	dsopcode.c	FUNCTION_2	CALL_14
0x400025c	          0x4889ef	                            mov rdi, rbp	       231	dsopcode.c	FUNCTION_2	CALL_15
0x400025f	      0xe800000000	                          call 0x4000264	       231	dsopcode.c	FUNCTION_2	CALL_15
0x4000264	      0x6681fb135b	                          cmp bx, 0x5b13	       233	dsopcode.c	FUNCTION_2	IF_6
0x4000269	            0x7508	                           jne 0x4000273	       233	dsopcode.c	FUNCTION_2	IF_6
0x400026b	          0x4c89f7	                            mov rdi, r14	       234	dsopcode.c	FUNCTION_2	IF_6	CALL_16
0x400026e	      0xe800000000	                          call 0x4000273	       234	dsopcode.c	FUNCTION_2	IF_6	CALL_16
0x4000273	          0x4585ff	                         test r15d, r15d	       239	dsopcode.c	FUNCTION_2	IF_7	CALL_17
0x4000276	            0x740a	                            je 0x4000282	       239	dsopcode.c	FUNCTION_2	IF_7	CALL_17
0x4000278	          0x4c89ef	                            mov rdi, r13	       240	dsopcode.c	FUNCTION_2	IF_7	CALL_18
0x400027b	      0xe800000000	                          call 0x4000280	       240	dsopcode.c	FUNCTION_2	IF_7	CALL_18
0x4000280	            0xeb06	                           jmp 0x4000288	       240	dsopcode.c	FUNCTION_2	IF_7	CALL_18
0x4000282	    0x41804c240c04	                  or byte [r12 + 0xc], 4	       244	dsopcode.c	FUNCTION_2	ELSE_1
0x4000288	        0x4883c418	                           add rsp, 0x18	       248	dsopcode.c	FUNCTION_2
0x400028c	          0x4489f8	                           mov eax, r15d	       248	dsopcode.c	FUNCTION_2
0x400028f	              0x5b	                                 pop rbx	       248	dsopcode.c	FUNCTION_2
0x4000290	              0x5d	                                 pop rbp	       248	dsopcode.c	FUNCTION_2
0x4000291	            0x415c	                                 pop r12	       248	dsopcode.c	FUNCTION_2
0x4000293	            0x415d	                                 pop r13	       248	dsopcode.c	FUNCTION_2
0x4000295	            0x415e	                                 pop r14	       248	dsopcode.c	FUNCTION_2
0x4000297	            0x415f	                                 pop r15	       248	dsopcode.c	FUNCTION_2
0x4000299	              0xc3	                                     ret	       248	dsopcode.c	FUNCTION_2
acpi_ds_initialize_region	WHILE,0:functions,0:SWITCH,0:ELSE,0:CALL,2:IF,0:FOR,0:DO,0	3
0x400029a	      0xe800000000	                          call 0x400029f	        49	dsopcode.c	FUNCTION_1	CALL_1
0x400029f	          0x4889c7	                            mov rdi, rax	        53	dsopcode.c	FUNCTION_1	CALL_2
0x40002a2	      0xe900000000	jmp sym.acpi_ds_eval_buffer_field_operands	        53	dsopcode.c	FUNCTION_1	CALL_2
acpi_ds_eval_region_operands	WHILE,0:functions,0:SWITCH,0:ELSE,0:CALL,14:IF,3:FOR,0:DO,0	46
0x400037a	            0x4154	                                push r12	       352	dsopcode.c	FUNCTION_4
0x400037c	              0x55	                                push rbp	       352	dsopcode.c	FUNCTION_4
0x400037d	          0x4989f4	                            mov r12, rsi	       352	dsopcode.c	FUNCTION_4
0x4000380	              0x53	                                push rbx	       352	dsopcode.c	FUNCTION_4
0x4000381	        0x488b4628	            mov rax, qword [rsi + 0x28] 	       369	dsopcode.c	FUNCTION_4
0x4000385	          0x4889fb	                            mov rbx, rdi	       352	dsopcode.c	FUNCTION_4
0x4000388	        0x488b6e20	            mov rbp, qword [rsi + 0x20] 	       365	dsopcode.c	FUNCTION_4
0x400038c	        0x488b7018	            mov rsi, qword [rax + 0x18] 	       377	dsopcode.c	FUNCTION_4	CALL_2
0x4000390	      0xe800000000	                          call 0x4000395	       377	dsopcode.c	FUNCTION_4	CALL_2
0x4000395	            0x85c0	                           test eax, eax	       378	dsopcode.c	FUNCTION_4	IF_1	CALL_3
0x4000397	            0x7577	                           jne 0x4000410	       378	dsopcode.c	FUNCTION_4	IF_1	CALL_3
0x4000399	         0xfb6430d	            movzx eax, byte [rbx + 0xd] 	       385	dsopcode.c	FUNCTION_4	CALL_5
0x400039d	    0x410fb77c240a	            movzx edi, word [r12 + 0xa] 	       384	dsopcode.c	FUNCTION_4
0x40003a3	          0x4889da	                            mov rdx, rbx	       384	dsopcode.c	FUNCTION_4
0x40003a6	            0xffc8	                                 dec eax	       385	dsopcode.c	FUNCTION_4	CALL_5
0x40003a8	            0x4898	                                    cdqe	       385	dsopcode.c	FUNCTION_4	CALL_5
0x40003aa	    0x488db4c3e002	         lea rsi, [rbx + rax*8 + 0x2e0] 	       385	dsopcode.c	FUNCTION_4	CALL_5
0x40003b2	      0xe800000000	                          call 0x40003b7	       384	dsopcode.c	FUNCTION_4
0x40003b7	            0x85c0	                           test eax, eax	       387	dsopcode.c	FUNCTION_4	IF_2	CALL_6
0x40003b9	            0x7555	                           jne 0x4000410	       387	dsopcode.c	FUNCTION_4	IF_2	CALL_6
0x40003bb	          0x4889ef	                            mov rdi, rbp	       391	dsopcode.c	FUNCTION_4	CALL_8
0x40003be	      0xe800000000	                          call 0x40003c3	       391	dsopcode.c	FUNCTION_4	CALL_8
0x40003c3	          0x4889c5	                            mov rbp, rax	       391	dsopcode.c	FUNCTION_4	CALL_8
0x40003c6	      0xb806000000	                              mov eax, 6	       393	dsopcode.c	FUNCTION_4	IF_3	CALL_9
0x40003cb	          0x4885ed	                           test rbp, rbp	       392	dsopcode.c	FUNCTION_4	IF_3
0x40003ce	            0x7440	                            je 0x4000410	       392	dsopcode.c	FUNCTION_4	IF_3
0x40003d0	         0xfb6430d	            movzx eax, byte [rbx + 0xd] 	       400	dsopcode.c	FUNCTION_4
0x40003d4	            0xffc8	                                 dec eax	       400	dsopcode.c	FUNCTION_4
0x40003d6	            0x4898	                                    cdqe	       400	dsopcode.c	FUNCTION_4
0x40003d8	    0x488bbcc3e002	   mov rdi, qword [rbx + rax*8 + 0x2e0] 	       400	dsopcode.c	FUNCTION_4
0x40003e0	        0x488b4710	            mov rax, qword [rdi + 0x10] 	       402	dsopcode.c	FUNCTION_4
0x40003e4	          0x894530	            mov dword [rbp + 0x30], eax 	       402	dsopcode.c	FUNCTION_4
0x40003e7	      0xe800000000	                          call 0x40003ec	       403	dsopcode.c	FUNCTION_4	CALL_10
0x40003ec	         0xfb6430d	            movzx eax, byte [rbx + 0xd] 	       409	dsopcode.c	FUNCTION_4
0x40003f0	          0x83e802	                              sub eax, 2	       409	dsopcode.c	FUNCTION_4
0x40003f3	            0x4898	                                    cdqe	       409	dsopcode.c	FUNCTION_4
0x40003f5	    0x488bbcc3e002	   mov rdi, qword [rbx + rax*8 + 0x2e0] 	       409	dsopcode.c	FUNCTION_4
0x40003fd	        0x488b4710	            mov rax, qword [rdi + 0x10] 	       412	dsopcode.c	FUNCTION_4
0x4000401	        0x48894528	            mov qword [rbp + 0x28], rax 	       411	dsopcode.c	FUNCTION_4
0x4000405	      0xe800000000	                          call 0x400040a	       413	dsopcode.c	FUNCTION_4	CALL_11
0x400040a	        0x804d0c04	                  or byte [rbp + 0xc], 4	       422	dsopcode.c	FUNCTION_4
0x400040e	            0x31c0	                            xor eax, eax	       423	dsopcode.c	FUNCTION_4	CALL_14
0x4000410	              0x5b	                                 pop rbx	       424	dsopcode.c	FUNCTION_4
0x4000411	              0x5d	                                 pop rbp	       424	dsopcode.c	FUNCTION_4
0x4000412	            0x415c	                                 pop r12	       424	dsopcode.c	FUNCTION_4
0x4000414	              0xc3	                                     ret	       424	dsopcode.c	FUNCTION_4
acpi_ds_eval_buffer_field_operands	WHILE,0:functions,0:SWITCH,0:ELSE,1:CALL,14:IF,4:FOR,0:DO,0	59
0x40002a7	            0x4155	                                push r13	       267	dsopcode.c	FUNCTION_3
0x40002a9	            0x4154	                                push r12	       267	dsopcode.c	FUNCTION_3
0x40002ab	          0x4989f4	                            mov r12, rsi	       267	dsopcode.c	FUNCTION_3
0x40002ae	              0x55	                                push rbp	       267	dsopcode.c	FUNCTION_3
0x40002af	              0x53	                                push rbx	       267	dsopcode.c	FUNCTION_3
0x40002b0	          0x4889fd	                            mov rbp, rdi	       267	dsopcode.c	FUNCTION_3
0x40002b3	        0x488b5e20	            mov rbx, qword [rsi + 0x20] 	       279	dsopcode.c	FUNCTION_3
0x40002b7	        0x488b7628	            mov rsi, qword [rsi + 0x28] 	       287	dsopcode.c	FUNCTION_3	CALL_2
0x40002bb	      0xe800000000	                          call 0x40002c0	       287	dsopcode.c	FUNCTION_3	CALL_2
0x40002c0	            0x85c0	                           test eax, eax	       288	dsopcode.c	FUNCTION_3	IF_1	CALL_3
0x40002c2	     0xf85ab000000	                           jne 0x4000373	       288	dsopcode.c	FUNCTION_3	IF_1	CALL_3
0x40002c8	          0x4889df	                            mov rdi, rbx	       292	dsopcode.c	FUNCTION_3	CALL_5
0x40002cb	      0xe800000000	                          call 0x40002d0	       292	dsopcode.c	FUNCTION_3	CALL_5
0x40002d0	          0x4885c0	                           test rax, rax	       293	dsopcode.c	FUNCTION_3	IF_2
0x40002d3	          0x4989c5	                            mov r13, rax	       292	dsopcode.c	FUNCTION_3	CALL_5
0x40002d6	     0xf8492000000	                            je 0x400036e	       293	dsopcode.c	FUNCTION_3	IF_2
0x40002dc	         0xfb6450d	            movzx eax, byte [rbp + 0xd] 	       300	dsopcode.c	FUNCTION_3	CALL_7
0x40002e0	    0x410fb77c240a	            movzx edi, word [r12 + 0xa] 	       299	dsopcode.c	FUNCTION_3
0x40002e6	          0x4889ea	                            mov rdx, rbp	       299	dsopcode.c	FUNCTION_3
0x40002e9	            0xffc8	                                 dec eax	       300	dsopcode.c	FUNCTION_3	CALL_7
0x40002eb	            0x4898	                                    cdqe	       300	dsopcode.c	FUNCTION_3	CALL_7
0x40002ed	    0x488db4c5e002	         lea rsi, [rbp + rax*8 + 0x2e0] 	       300	dsopcode.c	FUNCTION_3	CALL_7
0x40002f5	      0xe800000000	                          call 0x40002fa	       299	dsopcode.c	FUNCTION_3
0x40002fa	            0x85c0	                           test eax, eax	       302	dsopcode.c	FUNCTION_3	IF_3	CALL_8
0x40002fc	            0x89c3	                            mov ebx, eax	       299	dsopcode.c	FUNCTION_3
0x40002fe	    0x410fb77c240a	            movzx edi, word [r12 + 0xa] 	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x4000304	            0x7427	                            je 0x400032d	       302	dsopcode.c	FUNCTION_3	IF_3	CALL_8
0x4000306	      0xe800000000	                          call 0x400030b	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x400030b	          0x4189d8	                            mov r8d, ebx	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x400030e	          0x4889c1	                            mov rcx, rax	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x4000311	    0x48c7c2000000	                              mov rdx, 0	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x4000318	      0xbe31010000	                          mov esi, 0x131	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x400031d	    0x48c7c7000000	                              mov rdi, 0	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x4000324	      0xe800000000	                          call 0x4000329	       303	dsopcode.c	FUNCTION_3	IF_3	CALL_9
0x4000329	            0x89d8	                            mov eax, ebx	       307	dsopcode.c	FUNCTION_3	IF_3	CALL_11
0x400032b	            0xeb46	                           jmp 0x4000373	       307	dsopcode.c	FUNCTION_3	IF_3	CALL_11
0x400032d	      0x6681ff135b	                          cmp di, 0x5b13	       312	dsopcode.c	FUNCTION_3	IF_4
0x4000332	    0x4c8b85f00200	            mov r8, qword [rbp + 0x2f0] 	       312	dsopcode.c	FUNCTION_3	IF_4
0x4000339	    0x488b8de80200	           mov rcx, qword [rbp + 0x2e8] 	       312	dsopcode.c	FUNCTION_3	IF_4
0x4000340	    0x488b95e00200	           mov rdx, qword [rbp + 0x2e0] 	       312	dsopcode.c	FUNCTION_3	IF_4
0x4000347	            0x7511	                           jne 0x400035a	       312	dsopcode.c	FUNCTION_3	IF_4
0x4000349	    0x4c8b8df80200	            mov r9, qword [rbp + 0x2f8] 	       316	dsopcode.c	FUNCTION_3	IF_4
0x4000350	          0x4c89ee	                            mov rsi, r13	       316	dsopcode.c	FUNCTION_3	IF_4
0x4000353	      0xbf135b0000	                         mov edi, 0x5b13	       316	dsopcode.c	FUNCTION_3	IF_4
0x4000358	            0xeb09	                           jmp 0x4000363	       316	dsopcode.c	FUNCTION_3	IF_4
0x400035a	          0x4d89c1	                              mov r9, r8	       325	dsopcode.c	FUNCTION_3	ELSE_1
0x400035d	          0x4c89ee	                            mov rsi, r13	       325	dsopcode.c	FUNCTION_3	ELSE_1
0x4000360	          0x4531c0	                            xor r8d, r8d	       325	dsopcode.c	FUNCTION_3	ELSE_1
0x4000363	              0x5b	                                 pop rbx	       333	dsopcode.c	FUNCTION_3
0x4000364	              0x5d	                                 pop rbp	       333	dsopcode.c	FUNCTION_3
0x4000365	            0x415c	                                 pop r12	       333	dsopcode.c	FUNCTION_3
0x4000367	            0x415d	                                 pop r13	       333	dsopcode.c	FUNCTION_3
0x4000369	      0xe9d2fcffff	       jmp sym.acpi_ds_init_buffer_field	       325	dsopcode.c	FUNCTION_3	ELSE_1
0x400036e	      0xb806000000	                              mov eax, 6	       294	dsopcode.c	FUNCTION_3	IF_2	CALL_6
0x4000373	              0x5b	                                 pop rbx	       333	dsopcode.c	FUNCTION_3
0x4000374	              0x5d	                                 pop rbp	       333	dsopcode.c	FUNCTION_3
0x4000375	            0x415c	                                 pop r12	       333	dsopcode.c	FUNCTION_3
0x4000377	            0x415d	                                 pop r13	       333	dsopcode.c	FUNCTION_3
0x4000379	              0xc3	                                     ret	       333	dsopcode.c	FUNCTION_3
acpi_ds_eval_data_object_operands	WHILE,0:functions,0:SWITCH,1:ELSE,0:CALL,18:IF,6:FOR,0:DO,0	85
0x400055e	            0x4155	                                push r13	       553	dsopcode.c	FUNCTION_6
0x4000560	            0x4154	                                push r12	       553	dsopcode.c	FUNCTION_6
0x4000562	              0x55	                                push rbp	       553	dsopcode.c	FUNCTION_6
0x4000563	              0x53	                                push rbx	       553	dsopcode.c	FUNCTION_6
0x4000564	          0x4889f3	                            mov rbx, rsi	       553	dsopcode.c	FUNCTION_6
0x4000567	              0x51	                                push rcx	       553	dsopcode.c	FUNCTION_6
0x4000568	          0x8a470d	                mov al, byte [rdi + 0xd]	       566	dsopcode.c	FUNCTION_6
0x400056b	        0x48891424	                    mov qword [rsp], rdx	       553	dsopcode.c	FUNCTION_6
0x400056f	          0x88470e	                mov byte [rdi + 0xe], al	       566	dsopcode.c	FUNCTION_6
0x4000572	        0x488b7628	            mov rsi, qword [rsi + 0x28] 	       570	dsopcode.c	FUNCTION_6	IF_1
0x4000576	          0x4885f6	                           test rsi, rsi	       570	dsopcode.c	FUNCTION_6	IF_1
0x4000579	            0x7524	                           jne 0x400059f	       570	dsopcode.c	FUNCTION_6	IF_1
0x400057b	         0xfb74b0a	            movzx ecx, word [rbx + 0xa] 	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x400057f	          0x4989d8	                             mov r8, rbx	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x4000582	    0x48c7c2000000	                              mov rdx, 0	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x4000589	      0xbe3d020000	                          mov esi, 0x23d	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x400058e	    0x48c7c7000000	                              mov rdi, 0	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x4000595	      0xe800000000	                          call 0x400059a	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x400059a	      0xe9cf000000	                           jmp 0x400066e	       571	dsopcode.c	FUNCTION_6	IF_1	CALL_2
0x400059f	      0xba01000000	                              mov edx, 1	       577	dsopcode.c	FUNCTION_6	CALL_4
0x40005a4	          0x4889fd	                            mov rbp, rdi	       577	dsopcode.c	FUNCTION_6	CALL_4
0x40005a7	      0xe800000000	                          call 0x40005ac	       577	dsopcode.c	FUNCTION_6	CALL_4
0x40005ac	            0x85c0	                           test eax, eax	       578	dsopcode.c	FUNCTION_6	IF_2	CALL_5
0x40005ae	     0xf85bc000000	                           jne 0x4000670	       578	dsopcode.c	FUNCTION_6	IF_2	CALL_5
0x40005b4	         0xfb6450d	            movzx eax, byte [rbp + 0xd] 	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005b8	         0xfb77d0a	            movzx edi, word [rbp + 0xa] 	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005bc	          0x4889ea	                            mov rdx, rbp	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005bf	            0xffc8	                                 dec eax	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005c1	            0x4898	                                    cdqe	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005c3	    0x488db4c5e002	         lea rsi, [rbp + rax*8 + 0x2e0] 	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005cb	      0xe800000000	                          call 0x40005d0	       582	dsopcode.c	FUNCTION_6	CALL_7
0x40005d0	            0x85c0	                           test eax, eax	       586	dsopcode.c	FUNCTION_6	IF_3	CALL_8
0x40005d2	     0xf8598000000	                           jne 0x4000670	       586	dsopcode.c	FUNCTION_6	IF_3	CALL_8
0x40005d8	         0xfb6450d	            movzx eax, byte [rbp + 0xd] 	       592	dsopcode.c	FUNCTION_6
0x40005dc	          0x4889ee	                            mov rsi, rbp	       597	dsopcode.c	FUNCTION_6	CALL_10
0x40005df	      0xbf01000000	                              mov edi, 1	       597	dsopcode.c	FUNCTION_6	CALL_10
0x40005e4	            0xffc8	                                 dec eax	       592	dsopcode.c	FUNCTION_6
0x40005e6	            0x4898	                                    cdqe	       592	dsopcode.c	FUNCTION_6
0x40005e8	    0x4c8bacc5e002	   mov r13, qword [rbp + rax*8 + 0x2e0] 	       592	dsopcode.c	FUNCTION_6
0x40005f0	        0x4d8b6510	            mov r12, qword [r13 + 0x10] 	       593	dsopcode.c	FUNCTION_6
0x40005f4	      0xe800000000	                          call 0x40005f9	       597	dsopcode.c	FUNCTION_6	CALL_10
0x40005f9	            0x85c0	                           test eax, eax	       598	dsopcode.c	FUNCTION_6	IF_4	CALL_11
0x40005fb	            0x7573	                           jne 0x4000670	       598	dsopcode.c	FUNCTION_6	IF_4	CALL_11
0x40005fd	          0x4c89ef	                            mov rdi, r13	       602	dsopcode.c	FUNCTION_6	CALL_13
0x4000600	      0xe800000000	                          call 0x4000605	       602	dsopcode.c	FUNCTION_6	CALL_13
0x4000605	        0x668b430a	                mov ax, word [rbx + 0xa]	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000609	        0x6683f811	                            cmp ax, 0x11	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x400060d	            0x741b	                            je 0x400062a	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x400060f	            0x7256	                            jb 0x4000667	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000611	        0x6683f813	                            cmp ax, 0x13	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000615	            0x7750	                            ja 0x4000667	       607	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000617	          0x4889e1	                            mov rcx, rsp	       618	dsopcode.c	FUNCTION_6	SWITCH_1
0x400061a	          0x4489e2	                           mov edx, r12d	       618	dsopcode.c	FUNCTION_6	SWITCH_1
0x400061d	          0x4889de	                            mov rsi, rbx	       618	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000620	          0x4889ef	                            mov rdi, rbp	       618	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000623	      0xe800000000	                          call 0x4000628	       618	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000628	            0xeb11	                           jmp 0x400063b	       621	dsopcode.c	FUNCTION_6	SWITCH_1
0x400062a	          0x4889e1	                            mov rcx, rsp	       610	dsopcode.c	FUNCTION_6	SWITCH_1
0x400062d	          0x4489e2	                           mov edx, r12d	       610	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000630	          0x4889de	                            mov rsi, rbx	       610	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000633	          0x4889ef	                            mov rdi, rbp	       610	dsopcode.c	FUNCTION_6	SWITCH_1
0x4000636	      0xe800000000	                          call 0x400063b	       610	dsopcode.c	FUNCTION_6	SWITCH_1
0x400063b	            0x85c0	                           test eax, eax	       628	dsopcode.c	FUNCTION_6	IF_5	CALL_17
0x400063d	            0x7531	                           jne 0x4000670	       628	dsopcode.c	FUNCTION_6	IF_5	CALL_17
0x400063f	          0x488b03	                    mov rax, qword [rbx]	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000642	          0x4885c0	                           test rax, rax	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000645	            0x7413	                            je 0x400065a	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000647	        0x668b400a	                mov ax, word [rax + 0xa]	       635	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x400064b	          0x8d50ee	                   lea edx, [rax - 0x12]	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x400064e	        0x6683fa01	                               cmp dx, 1	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000652	            0x761a	                           jbe 0x400066e	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000654	        0x6683f808	                               cmp ax, 8	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000658	            0x7414	                            je 0x400066e	       634	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x400065a	        0x488b0424	                    mov rax, qword [rsp]	       640	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x400065e	    0x488985900300	           mov qword [rbp + 0x390], rax 	       640	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000665	            0xeb07	                           jmp 0x400066e	       640	dsopcode.c	FUNCTION_6	IF_5	IF_6
0x4000667	      0xb801300000	                         mov eax, 0x3001	       625	dsopcode.c	FUNCTION_6	SWITCH_1	CALL_16
0x400066c	            0xeb02	                           jmp 0x4000670	       625	dsopcode.c	FUNCTION_6	SWITCH_1	CALL_16
0x400066e	            0x31c0	                            xor eax, eax	       625	dsopcode.c	FUNCTION_6	SWITCH_1	CALL_16
0x4000670	              0x5a	                                 pop rdx	       645	dsopcode.c	FUNCTION_6
0x4000671	              0x5b	                                 pop rbx	       645	dsopcode.c	FUNCTION_6
0x4000672	              0x5d	                                 pop rbp	       645	dsopcode.c	FUNCTION_6
0x4000673	            0x415c	                                 pop r12	       645	dsopcode.c	FUNCTION_6
0x4000675	            0x415d	                                 pop r13	       645	dsopcode.c	FUNCTION_6
0x4000677	              0xc3	                                     ret	       645	dsopcode.c	FUNCTION_6
acpi_ds_eval_table_region_operands	WHILE,0:functions,0:SWITCH,0:ELSE,0:CALL,19:IF,6:FOR,0:DO,0	81
0x4000415	            0x4154	                                push r12	       444	dsopcode.c	FUNCTION_5
0x4000417	              0x55	                                push rbp	       444	dsopcode.c	FUNCTION_5
0x4000418	          0x4889fd	                            mov rbp, rdi	       444	dsopcode.c	FUNCTION_5
0x400041b	              0x53	                                push rbx	       444	dsopcode.c	FUNCTION_5
0x400041c	          0x4889f3	                            mov rbx, rsi	       444	dsopcode.c	FUNCTION_5
0x400041f	        0x4883ec18	                           sub rsp, 0x18	       444	dsopcode.c	FUNCTION_5
0x4000423	        0x4c8b6620	            mov r12, qword [rsi + 0x20] 	       459	dsopcode.c	FUNCTION_5
0x4000427	        0x488b7628	            mov rsi, qword [rsi + 0x28] 	       469	dsopcode.c	FUNCTION_5	CALL_2
0x400042b	    0x65488b042528	                mov rax, qword gs:[0x28]	       444	dsopcode.c	FUNCTION_5
0x4000434	      0x4889442410	             mov qword [rsp + 0x10], rax	       444	dsopcode.c	FUNCTION_5
0x4000439	            0x31c0	                            xor eax, eax	       444	dsopcode.c	FUNCTION_5
0x400043b	      0xe800000000	                          call 0x4000440	       469	dsopcode.c	FUNCTION_5	CALL_2
0x4000440	            0x85c0	                           test eax, eax	       470	dsopcode.c	FUNCTION_5	IF_1	CALL_3
0x4000442	     0xf85f8000000	                           jne 0x4000540	       470	dsopcode.c	FUNCTION_5	IF_1	CALL_3
0x4000448	         0xfb6450d	            movzx eax, byte [rbp + 0xd] 	       481	dsopcode.c	FUNCTION_5	CALL_5
0x400044c	         0xfb77b0a	            movzx edi, word [rbx + 0xa] 	       480	dsopcode.c	FUNCTION_5
0x4000450	          0x4889ea	                            mov rdx, rbp	       480	dsopcode.c	FUNCTION_5
0x4000453	            0xffc8	                                 dec eax	       481	dsopcode.c	FUNCTION_5	CALL_5
0x4000455	            0x4898	                                    cdqe	       481	dsopcode.c	FUNCTION_5	CALL_5
0x4000457	    0x488db4c5e002	         lea rsi, [rbp + rax*8 + 0x2e0] 	       481	dsopcode.c	FUNCTION_5	CALL_5
0x400045f	      0xe800000000	                          call 0x4000464	       480	dsopcode.c	FUNCTION_5
0x4000464	            0x85c0	                           test eax, eax	       483	dsopcode.c	FUNCTION_5	IF_2	CALL_6
0x4000466	            0x89c3	                            mov ebx, eax	       480	dsopcode.c	FUNCTION_5
0x4000468	     0xf85ac000000	                           jne 0x400051a	       483	dsopcode.c	FUNCTION_5	IF_2	CALL_6
0x400046e	    0x488b85f00200	           mov rax, qword [rbp + 0x2f0] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000475	      0x488d4c2404	                      lea rcx, [rsp + 4]	       489	dsopcode.c	FUNCTION_5	CALL_7
0x400047a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x400047e	    0x488b85e80200	           mov rax, qword [rbp + 0x2e8] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000485	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000489	    0x488b85e00200	           mov rax, qword [rbp + 0x2e0] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000490	        0x488b7810	            mov rdi, qword [rax + 0x10] 	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000494	      0xe800000000	                          call 0x4000499	       489	dsopcode.c	FUNCTION_5	CALL_7
0x4000499	            0x85c0	                           test eax, eax	       492	dsopcode.c	FUNCTION_5	IF_3	CALL_8
0x400049b	            0x89c3	                            mov ebx, eax	       489	dsopcode.c	FUNCTION_5	CALL_7
0x400049d	            0x7440	                            je 0x40004df	       492	dsopcode.c	FUNCTION_5	IF_3	CALL_8
0x400049f	          0x83f805	                              cmp eax, 5	       493	dsopcode.c	FUNCTION_5	IF_3	IF_4
0x40004a2	            0x7576	                           jne 0x400051a	       493	dsopcode.c	FUNCTION_5	IF_3	IF_4
0x40004a4	    0x488b95f00200	           mov rdx, qword [rbp + 0x2f0] 	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004ab	    0x488b85e80200	           mov rax, qword [rbp + 0x2e8] 	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004b2	      0xbef2010000	                          mov esi, 0x1f2	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004b7	    0x488b8de00200	           mov rcx, qword [rbp + 0x2e0] 	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004be	    0x48c7c7000000	                              mov rdi, 0	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004c5	        0x4c8b4a10	              mov r9, qword [rdx + 0x10]	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004c9	        0x4c8b4010	              mov r8, qword [rax + 0x10]	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004cd	    0x48c7c2000000	                              mov rdx, 0	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004d4	        0x488b4910	            mov rcx, qword [rcx + 0x10] 	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004d8	      0xe800000000	                          call 0x40004dd	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004dd	            0xeb3b	                           jmp 0x400051a	       494	dsopcode.c	FUNCTION_5	IF_3	IF_4	CALL_9
0x40004df	        0x8b7c2404	                mov edi, dword [rsp + 4]	       503	dsopcode.c	FUNCTION_5	CALL_10
0x40004e3	      0x488d742408	                      lea rsi, [rsp + 8]	       503	dsopcode.c	FUNCTION_5	CALL_10
0x40004e8	      0xe800000000	                          call 0x40004ed	       503	dsopcode.c	FUNCTION_5	CALL_10
0x40004ed	            0x85c0	                           test eax, eax	       504	dsopcode.c	FUNCTION_5	IF_5	CALL_11
0x40004ef	            0x89c3	                            mov ebx, eax	       503	dsopcode.c	FUNCTION_5	CALL_10
0x40004f1	            0x7527	                           jne 0x400051a	       504	dsopcode.c	FUNCTION_5	IF_5	CALL_11
0x40004f3	          0x4c89e7	                            mov rdi, r12	       508	dsopcode.c	FUNCTION_5	CALL_12
0x40004f6	      0xe800000000	                          call 0x40004fb	       508	dsopcode.c	FUNCTION_5	CALL_12
0x40004fb	          0x4885c0	                           test rax, rax	       509	dsopcode.c	FUNCTION_5	IF_6
0x40004fe	            0x7415	                            je 0x4000515	       509	dsopcode.c	FUNCTION_5	IF_6
0x4000500	      0x488b542408	                mov rdx, qword [rsp + 8]	       514	dsopcode.c	FUNCTION_5	CALL_13
0x4000505	        0x48895028	             mov qword [rax + 0x28], rdx	       514	dsopcode.c	FUNCTION_5	CALL_13
0x4000509	          0x8b5204	                mov edx, dword [rdx + 4]	       515	dsopcode.c	FUNCTION_5
0x400050c	        0x80480c04	                  or byte [rax + 0xc], 4	       524	dsopcode.c	FUNCTION_5
0x4000510	          0x895030	             mov dword [rax + 0x30], edx	       515	dsopcode.c	FUNCTION_5
0x4000513	            0xeb05	                           jmp 0x400051a	       515	dsopcode.c	FUNCTION_5
0x4000515	      0xbb06000000	                              mov ebx, 6	       510	dsopcode.c	FUNCTION_5	IF_6
0x400051a	    0x488bbde00200	           mov rdi, qword [rbp + 0x2e0] 	       527	dsopcode.c	FUNCTION_5	CALL_16
0x4000521	      0xe800000000	                          call 0x4000526	       527	dsopcode.c	FUNCTION_5	CALL_16
0x4000526	    0x488bbde80200	           mov rdi, qword [rbp + 0x2e8] 	       528	dsopcode.c	FUNCTION_5	CALL_17
0x400052d	      0xe800000000	                          call 0x4000532	       528	dsopcode.c	FUNCTION_5	CALL_17
0x4000532	    0x488bbdf00200	           mov rdi, qword [rbp + 0x2f0] 	       529	dsopcode.c	FUNCTION_5	CALL_18
0x4000539	      0xe800000000	                          call 0x400053e	       529	dsopcode.c	FUNCTION_5	CALL_18
0x400053e	            0x89d8	                            mov eax, ebx	       531	dsopcode.c	FUNCTION_5	CALL_19
0x4000540	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       532	dsopcode.c	FUNCTION_5
0x4000545	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       532	dsopcode.c	FUNCTION_5
0x400054e	            0x7405	                            je 0x4000555	       532	dsopcode.c	FUNCTION_5
0x4000550	      0xe800000000	                          call 0x4000555	       532	dsopcode.c	FUNCTION_5
0x4000555	        0x4883c418	                           add rsp, 0x18	       532	dsopcode.c	FUNCTION_5
0x4000559	              0x5b	                                 pop rbx	       532	dsopcode.c	FUNCTION_5
0x400055a	              0x5d	                                 pop rbp	       532	dsopcode.c	FUNCTION_5
0x400055b	            0x415c	                                 pop r12	       532	dsopcode.c	FUNCTION_5
0x400055d	              0xc3	                                     ret	       532	dsopcode.c	FUNCTION_5
