fasync_free_rcu	DO,0:functions,0:SWITCH,0:IF,0:ELSE,0:CALL,2:WHILE,0:FOR,0	3
0x40003b0	        0x488d77e0	                   lea rsi, [rdi - 0x20]	       850	fcntl.c	FUNCTION_31	CALL_1
0x40003b4	    0x488b3d000000	            mov rdi, qword [0x040003bb] 	       850	fcntl.c	FUNCTION_31	CALL_1
0x40003bb	      0xe900000000	                        jmp sym.f_delown	       850	fcntl.c	FUNCTION_31	CALL_1
fasync_helper	DO,0:functions,0:SWITCH,0:IF,1:ELSE,0:CALL,2:WHILE,0:FOR,0	39
0x4001260	            0x85d2	                           test edx, edx	       976	fcntl.c	FUNCTION_37	IF_1
0x4001262	          0x4889f0	                            mov rax, rsi	       975	fcntl.c	FUNCTION_37
0x4001265	            0x745d	                            je 0x40012c4	       976	fcntl.c	FUNCTION_37	IF_1
0x4001267	            0x4155	                                push r13	       975	fcntl.c	FUNCTION_37
0x4001269	            0x4154	                                push r12	       975	fcntl.c	FUNCTION_37
0x400126b	          0x4189fc	                           mov r12d, edi	       975	fcntl.c	FUNCTION_37
0x400126e	    0x488b3d000000	            mov rdi, qword [0x04001275] 	       891	fcntl.c	FUNCTION_33	CALL_1
0x4001275	              0x55	                                push rbp	       975	fcntl.c	FUNCTION_37
0x4001276	          0x4889cd	                            mov rbp, rcx	       975	fcntl.c	FUNCTION_37
0x4001279	              0x53	                                push rbx	       975	fcntl.c	FUNCTION_37
0x400127a	          0x4889f3	                            mov rbx, rsi	       975	fcntl.c	FUNCTION_37
0x400127d	      0xbec0004001	                      mov esi, 0x14000c0	       891	fcntl.c	FUNCTION_33	CALL_1
0x4001282	      0xe800000000	                          call 0x4001287	       891	fcntl.c	FUNCTION_33	CALL_1
0x4001287	          0x4885c0	                           test rax, rax	       950	fcntl.c	FUNCTION_36	IF_1
0x400128a	          0x4989c5	                            mov r13, rax	       891	fcntl.c	FUNCTION_33	CALL_1
0x400128d	            0x7440	                            je 0x40012cf	       950	fcntl.c	FUNCTION_36	IF_1
0x400128f	          0x4889ea	                            mov rdx, rbp	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x4001292	          0x4889c1	                            mov rcx, rax	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x4001295	          0x4889de	                            mov rsi, rbx	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x4001298	          0x4489e7	                           mov edi, r12d	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x400129b	      0xe800000000	                          call 0x40012a0	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x40012a0	          0x4885c0	                           test rax, rax	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x40012a3	      0xba01000000	                              mov edx, 1	       965	fcntl.c	FUNCTION_36
0x40012a8	            0x7411	                            je 0x40012bb	       960	fcntl.c	FUNCTION_36	IF_2	CALL_2
0x40012aa	    0x488b3d000000	            mov rdi, qword [0x040012b1] 	       901	fcntl.c	FUNCTION_34	CALL_1
0x40012b1	          0x4c89ee	                            mov rsi, r13	       901	fcntl.c	FUNCTION_34	CALL_1
0x40012b4	      0xe800000000	                          call 0x40012b9	       901	fcntl.c	FUNCTION_34	CALL_1
0x40012b9	            0x31d2	                            xor edx, edx	       962	fcntl.c	FUNCTION_36	IF_2
0x40012bb	              0x5b	                                 pop rbx	       979	fcntl.c	FUNCTION_37
0x40012bc	            0x89d0	                            mov eax, edx	       979	fcntl.c	FUNCTION_37
0x40012be	              0x5d	                                 pop rbp	       979	fcntl.c	FUNCTION_37
0x40012bf	            0x415c	                                 pop r12	       979	fcntl.c	FUNCTION_37
0x40012c1	            0x415d	                                 pop r13	       979	fcntl.c	FUNCTION_37
0x40012c3	              0xc3	                                     ret	       979	fcntl.c	FUNCTION_37
0x40012c4	          0x4889ce	                            mov rsi, rcx	       977	fcntl.c	FUNCTION_37	CALL_1
0x40012c7	          0x4889c7	                            mov rdi, rax	       977	fcntl.c	FUNCTION_37	CALL_1
0x40012ca	      0xe911feffff	             jmp sym.fasync_remove_entry	       977	fcntl.c	FUNCTION_37	CALL_1
0x40012cf	      0xbaf4ffffff	                     mov edx, 0xfffffff4	       951	fcntl.c	FUNCTION_36	IF_1
0x40012d4	            0xebe5	                           jmp 0x40012bb	       951	fcntl.c	FUNCTION_36	IF_1
fcntl_init	DO,0:functions,0:SWITCH,0:IF,0:ELSE,0:CALL,3:WHILE,0:FOR,0	14
0x4000040	            0x4155	                                push r13	        89	fcntl.c	FUNCTION_2
0x4000042	            0x4154	                                push r12	        89	fcntl.c	FUNCTION_2
0x4000044	          0x4189cc	                           mov r12d, ecx	        89	fcntl.c	FUNCTION_2
0x4000047	              0x55	                                push rbp	        89	fcntl.c	FUNCTION_2
0x4000048	              0x53	                                push rbx	        89	fcntl.c	FUNCTION_2
0x4000049	          0x4889fb	                            mov rbx, rdi	        89	fcntl.c	FUNCTION_2
0x400004c	        0x4883c770	                           add rdi, 0x70	        90	fcntl.c	FUNCTION_2	CALL_1
0x4000050	          0x4889f5	                            mov rbp, rsi	        89	fcntl.c	FUNCTION_2
0x4000053	          0x4189d5	                           mov r13d, edx	        89	fcntl.c	FUNCTION_2
0x4000056	      0xe800000000	                          call 0x400005b	        90	fcntl.c	FUNCTION_2	CALL_1
0x400005b	          0x4585e4	                         test r12d, r12d	        91	fcntl.c	FUNCTION_2	IF_1
0x400005e	        0x488b7b78	            mov rdi, qword [rbx + 0x78] 	        91	fcntl.c	FUNCTION_2	IF_1
0x4000062	            0x7511	                           jne 0x4000075	        91	fcntl.c	FUNCTION_2	IF_1
0x4000064	              0x48	                                 invalid	        91	fcntl.c	FUNCTION_2	IF_1
f_setown	DO,0:functions,0:SWITCH,0:IF,5:ELSE,0:CALL,4:WHILE,0:FOR,0	37
0x4000100	            0x85f6	                           test esi, esi	       120	fcntl.c	FUNCTION_4	IF_1
0x4000102	            0x4155	                                push r13	       114	fcntl.c	FUNCTION_4
0x4000104	            0x4154	                                push r12	       114	fcntl.c	FUNCTION_4
0x4000106	          0x4189d4	                           mov r12d, edx	       114	fcntl.c	FUNCTION_4
0x4000109	              0x55	                                push rbp	       114	fcntl.c	FUNCTION_4
0x400010a	              0x53	                                push rbx	       114	fcntl.c	FUNCTION_4
0x400010b	          0x4889fb	                            mov rbx, rdi	       114	fcntl.c	FUNCTION_4
0x400010e	            0x89f7	                            mov edi, esi	       117	fcntl.c	FUNCTION_4
0x4000110	            0x782f	                            js 0x4000141	       120	fcntl.c	FUNCTION_4	IF_1
0x4000112	    0x41bd00000000	                             mov r13d, 0	       119	fcntl.c	FUNCTION_4
0x4000118	      0xbd00000000	                              mov ebp, 0	       116	fcntl.c	FUNCTION_4
0x400011d	            0x7532	                           jne 0x4000151	       130	fcntl.c	FUNCTION_4	IF_3
0x400011f	          0x4889df	                            mov rdi, rbx	       108	fcntl.c	FUNCTION_3	CALL_1
0x4000122	      0xe800000000	                          call 0x4000127	       108	fcntl.c	FUNCTION_3	CALL_1
0x4000127	          0x4489e1	                           mov ecx, r12d	       109	fcntl.c	FUNCTION_3	CALL_2
0x400012a	          0x4489ea	                           mov edx, r13d	       109	fcntl.c	FUNCTION_3	CALL_2
0x400012d	          0x4889ee	                            mov rsi, rbp	       109	fcntl.c	FUNCTION_3	CALL_2
0x4000130	          0x4889df	                            mov rdi, rbx	       109	fcntl.c	FUNCTION_3	CALL_2
0x4000133	      0xe808ffffff	                       call sym.f_modown	       109	fcntl.c	FUNCTION_3	CALL_2
0x4000138	            0x31c0	                            xor eax, eax	       109	fcntl.c	FUNCTION_3	CALL_2
0x400013a	              0x5b	                                 pop rbx	       141	fcntl.c	FUNCTION_4
0x400013b	              0x5d	                                 pop rbp	       141	fcntl.c	FUNCTION_4
0x400013c	            0x415c	                                 pop r12	       141	fcntl.c	FUNCTION_4
0x400013e	            0x415d	                                 pop r13	       141	fcntl.c	FUNCTION_4
0x4000140	              0xc3	                                     ret	       141	fcntl.c	FUNCTION_4
0x4000141	    0x81fe00000080	                     cmp esi, 0x80000000	       122	fcntl.c	FUNCTION_4	IF_1	IF_2
0x4000147	            0x741c	                            je 0x4000165	       122	fcntl.c	FUNCTION_4	IF_1	IF_2
0x4000149	            0xf7df	                                 neg edi	       126	fcntl.c	FUNCTION_4	IF_1
0x400014b	    0x41bd01000000	                             mov r13d, 1	       125	fcntl.c	FUNCTION_4	IF_1
0x4000151	      0xe800000000	                          call 0x4000156	       131	fcntl.c	FUNCTION_4	IF_3	CALL_2
0x4000156	          0x4889c5	                            mov rbp, rax	       131	fcntl.c	FUNCTION_4	IF_3	CALL_2
0x4000159	      0xb8fdffffff	                     mov eax, 0xfffffffd	       133	fcntl.c	FUNCTION_4	IF_3	IF_4
0x400015e	          0x4885ed	                           test rbp, rbp	       132	fcntl.c	FUNCTION_4	IF_3	IF_4
0x4000161	            0x75bc	                           jne 0x400011f	       132	fcntl.c	FUNCTION_4	IF_3	IF_4
0x4000163	            0xebd5	                           jmp 0x400013a	       132	fcntl.c	FUNCTION_4	IF_3	IF_4
0x4000165	      0xb8eaffffff	                     mov eax, 0xffffffea	       123	fcntl.c	FUNCTION_4	IF_1	IF_2
0x400016a	            0xebce	                           jmp 0x400013a	       123	fcntl.c	FUNCTION_4	IF_1	IF_2
