byd_process_byte	IF,4:FOR,0:CALL,6:SWITCH,1:ELSE,0:functions,0:WHILE,0:DO,0	103
0x40001b0	              0x55	                                push rbp	       277	byd.c	FUNCTION_3
0x40001b1	              0x53	                                push rbx	       277	byd.c	FUNCTION_3
0x40001b2	        0x4883ec08	                              sub rsp, 8	       277	byd.c	FUNCTION_3
0x40001b6	     0xfb687e10000	           movzx eax, byte [rdi + 0xe1] 	       281	byd.c	FUNCTION_3	IF_1
0x40001bd	            0x84c0	                             test al, al	       281	byd.c	FUNCTION_3	IF_1
0x40001bf	            0x7410	                            je 0x40001d1	       281	byd.c	FUNCTION_3	IF_1
0x40001c1	     0xfb697d80000	           movzx edx, byte [rdi + 0xd8] 	       281	byd.c	FUNCTION_3	IF_1
0x40001c8	          0xf6c208	                              test dl, 8	       281	byd.c	FUNCTION_3	IF_1
0x40001cb	     0xf844e010000	                            je 0x400031f	       281	byd.c	FUNCTION_3	IF_1
0x40001d1	    0x3a87e2000000	               cmp al, byte [rdi + 0xe2]	       287	byd.c	FUNCTION_3	IF_2
0x40001d7	      0xbd01000000	                              mov ebp, 1	       288	byd.c	FUNCTION_3	IF_2
0x40001dc	     0xf82b7000000	                            jb 0x4000299	       287	byd.c	FUNCTION_3	IF_2
0x40001e2	    0x440fb68fdb00	           movzx r9d, byte [rdi + 0xdb] 	       291	byd.c	FUNCTION_3	SWITCH_1
0x40001ea	          0x488b1f	                    mov rbx, qword [rdi]	       278	byd.c	FUNCTION_3
0x40001ed	          0x4584c9	                           test r9b, r9b	       291	byd.c	FUNCTION_3	SWITCH_1
0x40001f0	     0xf84e6000000	                            je 0x40002dc	       291	byd.c	FUNCTION_3	SWITCH_1
0x40001f6	        0x4180f9f8	                           cmp r9b, 0xf8	       291	byd.c	FUNCTION_3	SWITCH_1
0x40001fa	     0xf85a2000000	                           jne 0x40002a2	       291	byd.c	FUNCTION_3	SWITCH_1
0x4000200	        0x807b4200	                cmp byte [rbx + 0x42], 0	       294	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000204	            0x7542	                           jne 0x4000248	       294	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000206	        0x488b4338	            mov rax, qword [rbx + 0x38] 	       297	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x400020a	        0x4883c040	                           add rax, 0x40	       297	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x400020e	        0x48890424	                    mov qword [rsp], rax	       296	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_2
0x4000212	        0x488b0424	                    mov rax, qword [rsp]	       298	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_3
0x4000216	    0x488b15000000	            mov rdx, qword [0x0400021d] 	       298	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_3
0x400021d	          0x4829d0	                            sub rax, rdx	       298	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_3
0x4000220	        0x48c1e83f	                           shr rax, 0x3f	       298	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_3
0x4000224	          0x884342	               mov byte [rbx + 0x42], al	       298	byd.c	FUNCTION_3	SWITCH_1	IF_3	CALL_3
0x4000227	     0xfb687d90000	           movzx eax, byte [rdi + 0xd9] 	       301	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x400022e	          0x6bc02c	                     imul eax, eax, 0x2c	       301	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000231	          0x894330	             mov dword [rbx + 0x30], eax	       301	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000234	     0xfb697da0000	           movzx edx, byte [rdi + 0xda] 	       302	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x400023b	      0xb8ff000000	                           mov eax, 0xff	       302	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000240	            0x29d0	                            sub eax, edx	       302	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000242	          0x6bc01a	                     imul eax, eax, 0x1a	       302	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000245	          0x894334	             mov dword [rbx + 0x34], eax	       302	byd.c	FUNCTION_3	SWITCH_1	IF_3
0x4000248	     0xfb687d80000	           movzx eax, byte [rdi + 0xd8] 	       328	byd.c	FUNCTION_3
0x400024f	      0xbd02000000	                              mov ebp, 2	       339	byd.c	FUNCTION_3
0x4000254	          0x83e001	                              and eax, 1	       328	byd.c	FUNCTION_3
0x4000257	          0x884340	               mov byte [rbx + 0x40], al	       328	byd.c	FUNCTION_3
0x400025a	     0xfb687d80000	           movzx eax, byte [rdi + 0xd8] 	       329	byd.c	FUNCTION_3
0x4000261	            0xd0e8	                               shr al, 1	       329	byd.c	FUNCTION_3
0x4000263	          0x83e001	                              and eax, 1	       329	byd.c	FUNCTION_3
0x4000266	          0x884341	               mov byte [rbx + 0x41], al	       329	byd.c	FUNCTION_3
0x4000269	        0x488b7708	                mov rsi, qword [rdi + 8]	       331	byd.c	FUNCTION_3	CALL_5
0x400026d	          0x488b3f	                    mov rdi, qword [rdi]	       331	byd.c	FUNCTION_3	CALL_5
0x4000270	      0xe89bfeffff	        call sym.byd_report_input.isra.0	       331	byd.c	FUNCTION_3	CALL_5
0x4000275	        0x807b4200	                cmp byte [rbx + 0x42], 0	       334	byd.c	FUNCTION_3	IF_4
0x4000279	            0x741e	                            je 0x4000299	       334	byd.c	FUNCTION_3	IF_4
0x400027b	    0x488b05000000	            mov rax, qword [0x04000282] 	       335	byd.c	FUNCTION_3	IF_4
0x4000282	          0x4889df	                            mov rdi, rbx	       336	byd.c	FUNCTION_3	IF_4	CALL_6
0x4000285	        0x48894338	             mov qword [rbx + 0x38], rax	       335	byd.c	FUNCTION_3	IF_4
0x4000289	    0x488b35000000	            mov rsi, qword [0x04000290] 	       336	byd.c	FUNCTION_3	IF_4	CALL_6
0x4000290	        0x4883c640	                           add rsi, 0x40	       336	byd.c	FUNCTION_3	IF_4	CALL_6
0x4000294	      0xe800000000	                          call 0x4000299	       336	byd.c	FUNCTION_3	IF_4	CALL_6
0x4000299	        0x4883c408	                              add rsp, 8	       340	byd.c	FUNCTION_3
0x400029d	            0x89e8	                            mov eax, ebp	       340	byd.c	FUNCTION_3
0x400029f	              0x5b	                                 pop rbx	       340	byd.c	FUNCTION_3
0x40002a0	              0x5d	                                 pop rbp	       340	byd.c	FUNCTION_3
0x40002a1	              0xc3	                                     ret	       340	byd.c	FUNCTION_3
0x40002a2	        0x488b4710	            mov rax, qword [rdi + 0x10] 	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002a6	     0xfb68fd90000	           movzx ecx, byte [rdi + 0xd9] 	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002ad	    0x48c7c6000000	                              mov rsi, 0	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002b4	     0xfb697d80000	           movzx edx, byte [rdi + 0xd8] 	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002bb	    0x440fb687da00	           movzx r8d, byte [rdi + 0xda] 	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002c3	            0x31ed	                            xor ebp, ebp	       325	byd.c	FUNCTION_3	SWITCH_1
0x40002c5	    0x480558010000	                          add rax, 0x158	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002cb	          0x4889c7	                            mov rdi, rax	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002ce	      0xe800000000	                          call 0x40002d3	       321	byd.c	FUNCTION_3	SWITCH_1	CALL_4
0x40002d3	        0x4883c408	                              add rsp, 8	       340	byd.c	FUNCTION_3
0x40002d7	            0x89e8	                            mov eax, ebp	       340	byd.c	FUNCTION_3
0x40002d9	              0x5b	                                 pop rbx	       340	byd.c	FUNCTION_3
0x40002da	              0x5d	                                 pop rbp	       340	byd.c	FUNCTION_3
0x40002db	              0xc3	                                     ret	       340	byd.c	FUNCTION_3
0x40002dc	     0xfb687d80000	           movzx eax, byte [rdi + 0xd8] 	       308	byd.c	FUNCTION_3	SWITCH_1
0x40002e3	     0xfb68fda0000	           movzx ecx, byte [rdi + 0xda] 	       311	byd.c	FUNCTION_3	SWITCH_1
0x40002ea	            0x89c2	                            mov edx, eax	       308	byd.c	FUNCTION_3	SWITCH_1
0x40002ec	          0xc1e01a	                           shl eax, 0x1a	       309	byd.c	FUNCTION_3	SWITCH_1
0x40002ef	          0xc1f81f	                           sar eax, 0x1f	       309	byd.c	FUNCTION_3	SWITCH_1
0x40002f2	          0xc1e21b	                           shl edx, 0x1b	       308	byd.c	FUNCTION_3	SWITCH_1
0x40002f5	            0x30c0	                              xor al, al	       309	byd.c	FUNCTION_3	SWITCH_1
0x40002f7	          0xc1fa1f	                           sar edx, 0x1f	       308	byd.c	FUNCTION_3	SWITCH_1
0x40002fa	             0x9c8	                             or eax, ecx	       311	byd.c	FUNCTION_3	SWITCH_1
0x40002fc	     0xfb68fd90000	           movzx ecx, byte [rdi + 0xd9] 	       314	byd.c	FUNCTION_3	SWITCH_1
0x4000303	            0x30d2	                              xor dl, dl	       308	byd.c	FUNCTION_3	SWITCH_1
0x4000305	          0x6bc0f5	       imul eax, eax, 0xfffffffffffffff5	       315	byd.c	FUNCTION_3	SWITCH_1
0x4000308	        0xc6434201	                mov byte [rbx + 0x42], 1	       317	byd.c	FUNCTION_3	SWITCH_1
0x400030c	           0x14334	             add dword [rbx + 0x34], eax	       315	byd.c	FUNCTION_3	SWITCH_1
0x400030f	             0x9ca	                             or edx, ecx	       314	byd.c	FUNCTION_3	SWITCH_1
0x4000311	          0x8d0c92	                  lea ecx, [rdx + rdx*4]	       314	byd.c	FUNCTION_3	SWITCH_1
0x4000314	          0x8d144a	                  lea edx, [rdx + rcx*2]	       314	byd.c	FUNCTION_3	SWITCH_1
0x4000317	           0x15330	             add dword [rbx + 0x30], edx	       314	byd.c	FUNCTION_3	SWITCH_1
0x400031a	      0xe929ffffff	                           jmp 0x4000248	       318	byd.c	FUNCTION_3	SWITCH_1
0x400031f	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       282	byd.c	FUNCTION_3	IF_1	CALL_1
0x4000323	    0x48c7c6000000	                              mov rsi, 0	       282	byd.c	FUNCTION_3	IF_1	CALL_1
0x400032a	            0x31ed	                            xor ebp, ebp	       284	byd.c	FUNCTION_3	IF_1
0x400032c	    0x4881c7580100	                          add rdi, 0x158	       282	byd.c	FUNCTION_3	IF_1	CALL_1
0x4000333	      0xe800000000	                          call 0x4000338	       282	byd.c	FUNCTION_3	IF_1	CALL_1
0x4000338	        0x4883c408	                              add rsp, 8	       340	byd.c	FUNCTION_3
0x400033c	            0x89e8	                            mov eax, ebp	       340	byd.c	FUNCTION_3
0x400033e	              0x5b	                                 pop rbx	       340	byd.c	FUNCTION_3
0x400033f	              0x5d	                                 pop rbp	       340	byd.c	FUNCTION_3
0x4000340	              0xc3	                                     ret	       340	byd.c	FUNCTION_3
byd_detect	IF,7:FOR,0:CALL,6:SWITCH,0:ELSE,0:functions,0:WHILE,0:DO,0	65
0x40003a0	            0x4154	                                push r12	       439	byd.c	FUNCTION_7
0x40003a2	              0x55	                                push rbp	       439	byd.c	FUNCTION_7
0x40003a3	          0x4189f4	                           mov r12d, esi	       439	byd.c	FUNCTION_7
0x40003a6	              0x53	                                push rbx	       439	byd.c	FUNCTION_7
0x40003a7	        0x488d5f10	                   lea rbx, [rdi + 0x10]	       440	byd.c	FUNCTION_7
0x40003ab	          0x4889fd	                            mov rbp, rdi	       439	byd.c	FUNCTION_7
0x40003ae	      0xbae8100000	                         mov edx, 0x10e8	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003b3	        0x4883ec10	                           sub rsp, 0x10	       439	byd.c	FUNCTION_7
0x40003b7	          0x4889df	                            mov rdi, rbx	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003ba	      0x488d742404	                      lea rsi, [rsp + 4]	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003bf	      0xc644240403	                   mov byte [rsp + 4], 3	       441	byd.c	FUNCTION_7
0x40003c4	      0xc644240500	                   mov byte [rsp + 5], 0	       441	byd.c	FUNCTION_7
0x40003c9	    0x65488b042528	                mov rax, qword gs:[0x28]	       439	byd.c	FUNCTION_7
0x40003d2	      0x4889442408	                mov qword [rsp + 8], rax	       439	byd.c	FUNCTION_7
0x40003d7	            0x31c0	                            xor eax, eax	       439	byd.c	FUNCTION_7
0x40003d9	      0xc644240600	                   mov byte [rsp + 6], 0	       441	byd.c	FUNCTION_7
0x40003de	      0xc644240700	                   mov byte [rsp + 7], 0	       441	byd.c	FUNCTION_7
0x40003e3	      0xe800000000	                          call 0x40003e8	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003e8	            0x85c0	                           test eax, eax	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003ea	     0xf859e000000	                           jne 0x400048e	       443	byd.c	FUNCTION_7	IF_1	CALL_1
0x40003f0	      0x488d742404	                      lea rsi, [rsp + 4]	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x40003f5	      0xbae8100000	                         mov edx, 0x10e8	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x40003fa	          0x4889df	                            mov rdi, rbx	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x40003fd	      0xe800000000	                          call 0x4000402	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x4000402	            0x85c0	                           test eax, eax	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x4000404	     0xf8584000000	                           jne 0x400048e	       445	byd.c	FUNCTION_7	IF_2	CALL_2
0x400040a	      0x488d742404	                      lea rsi, [rsp + 4]	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x400040f	      0xbae8100000	                         mov edx, 0x10e8	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x4000414	          0x4889df	                            mov rdi, rbx	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x4000417	      0xe800000000	                          call 0x400041c	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x400041c	            0x85c0	                           test eax, eax	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x400041e	            0x756e	                           jne 0x400048e	       447	byd.c	FUNCTION_7	IF_3	CALL_3
0x4000420	      0x488d742404	                      lea rsi, [rsp + 4]	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x4000425	      0xbae8100000	                         mov edx, 0x10e8	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x400042a	          0x4889df	                            mov rdi, rbx	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x400042d	      0xe800000000	                          call 0x4000432	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x4000432	            0x85c0	                           test eax, eax	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x4000434	            0x7558	                           jne 0x400048e	       449	byd.c	FUNCTION_7	IF_4	CALL_4
0x4000436	      0x488d742404	                      lea rsi, [rsp + 4]	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x400043b	      0xbae9030000	                          mov edx, 0x3e9	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x4000440	          0x4889df	                            mov rdi, rbx	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x4000443	      0xe800000000	                          call 0x4000448	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x4000448	            0x85c0	                           test eax, eax	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x400044a	            0x7542	                           jne 0x400048e	       451	byd.c	FUNCTION_7	IF_5	CALL_5
0x400044c	      0x807c240503	                   cmp byte [rsp + 5], 3	       454	byd.c	FUNCTION_7	IF_6
0x4000451	            0x7542	                           jne 0x4000495	       454	byd.c	FUNCTION_7	IF_6
0x4000453	      0x807c240664	                cmp byte [rsp + 6], 0x64	       454	byd.c	FUNCTION_7	IF_6
0x4000458	            0x753b	                           jne 0x4000495	       454	byd.c	FUNCTION_7	IF_6
0x400045a	          0x4584e4	                         test r12b, r12b	       459	byd.c	FUNCTION_7	IF_7
0x400045d	            0x7416	                            je 0x4000475	       459	byd.c	FUNCTION_7	IF_7
0x400045f	    0x48c785c00000	               mov qword [rbp + 0xc0], 0	       460	byd.c	FUNCTION_7	IF_7
0x400046a	    0x48c785c80000	               mov qword [rbp + 0xc8], 0	       461	byd.c	FUNCTION_7	IF_7
0x4000475	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       465	byd.c	FUNCTION_7
0x400047a	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       465	byd.c	FUNCTION_7
0x4000483	            0x7517	                           jne 0x400049c	       465	byd.c	FUNCTION_7
0x4000485	        0x4883c410	                           add rsp, 0x10	       465	byd.c	FUNCTION_7
0x4000489	              0x5b	                                 pop rbx	       465	byd.c	FUNCTION_7
0x400048a	              0x5d	                                 pop rbp	       465	byd.c	FUNCTION_7
0x400048b	            0x415c	                                 pop r12	       465	byd.c	FUNCTION_7
0x400048d	              0xc3	                                     ret	       465	byd.c	FUNCTION_7
0x400048e	      0xb8ffffffff	                     mov eax, 0xffffffff	       444	byd.c	FUNCTION_7	IF_1
0x4000493	            0xebe0	                           jmp 0x4000475	       444	byd.c	FUNCTION_7	IF_1
0x4000495	      0xb8edffffff	                     mov eax, 0xffffffed	       455	byd.c	FUNCTION_7	IF_6
0x400049a	            0xebd9	                           jmp 0x4000475	       455	byd.c	FUNCTION_7	IF_6
0x400049c	      0xe800000000	                          call 0x40004a1	       465	byd.c	FUNCTION_7
byd_reset_touchpad	IF,1:FOR,1:CALL,4:SWITCH,0:ELSE,0:functions,0:WHILE,0:DO,0	41
0x4000070	            0x4154	                                push r12	       343	byd.c	FUNCTION_4
0x4000072	              0x55	                                push rbp	       343	byd.c	FUNCTION_4
0x4000073	          0x4989fc	                            mov r12, rdi	       343	byd.c	FUNCTION_4
0x4000076	              0x53	                                push rbx	       343	byd.c	FUNCTION_4
0x4000077	        0x488d6f10	                   lea rbp, [rdi + 0x10]	       344	byd.c	FUNCTION_4
0x400007b	    0x48c7c3000000	                              mov rbx, 0	       344	byd.c	FUNCTION_4
0x4000082	      0xbaf3100000	                         mov edx, 0x10f3	       344	byd.c	FUNCTION_4
0x4000087	        0x4883ec18	                           sub rsp, 0x18	       343	byd.c	FUNCTION_4
0x400008b	    0x65488b042528	                mov rax, qword gs:[0x28]	       343	byd.c	FUNCTION_4
0x4000094	      0x4889442410	             mov qword [rsp + 0x10], rax	       343	byd.c	FUNCTION_4
0x4000099	            0x31c0	                            xor eax, eax	       343	byd.c	FUNCTION_4
0x400009b	      0xb8c8ffffff	                     mov eax, 0xffffffc8	       344	byd.c	FUNCTION_4
0x40000a0	            0xeb14	                           jmp 0x40000b6	       344	byd.c	FUNCTION_4
0x40000a2	    0x4881fb000000	                              cmp rbx, 0	       390	byd.c	FUNCTION_4	FOR_1	CALL_1
0x40000a9	            0x7446	                            je 0x40000f1	       390	byd.c	FUNCTION_4	FOR_1	CALL_1
0x40000ab	           0xfb603	                   movzx eax, byte [rbx]	       390	byd.c	FUNCTION_4	FOR_1	CALL_1
0x40000ae	         0xfb753fe	               movzx edx, word [rbx - 2]	       390	byd.c	FUNCTION_4	FOR_1	CALL_1
0x40000b2	        0x4883c304	                              add rbx, 4	       390	byd.c	FUNCTION_4	FOR_1	CALL_1
0x40000b6	      0x488d74240c	                    lea rsi, [rsp + 0xc]	       393	byd.c	FUNCTION_4	FOR_1	IF_1	CALL_3
0x40000bb	          0x4889ef	                            mov rdi, rbp	       393	byd.c	FUNCTION_4	FOR_1	IF_1	CALL_3
0x40000be	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       391	byd.c	FUNCTION_4	FOR_1	CALL_2
0x40000c6	        0x8844240c	                mov byte [rsp + 0xc], al	       392	byd.c	FUNCTION_4	FOR_1
0x40000ca	      0xe800000000	                          call 0x40000cf	       393	byd.c	FUNCTION_4	FOR_1	IF_1	CALL_3
0x40000cf	            0x85c0	                           test eax, eax	       393	byd.c	FUNCTION_4	FOR_1	IF_1	CALL_3
0x40000d1	            0x74cf	                            je 0x40000a2	       393	byd.c	FUNCTION_4	FOR_1	IF_1	CALL_3
0x40000d3	      0xb8fbffffff	                     mov eax, 0xfffffffb	       394	byd.c	FUNCTION_4	FOR_1	IF_1
0x40000d8	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       399	byd.c	FUNCTION_4
0x40000dd	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       399	byd.c	FUNCTION_4
0x40000e6	            0x7520	                           jne 0x4000108	       399	byd.c	FUNCTION_4
0x40000e8	        0x4883c418	                           add rsp, 0x18	       399	byd.c	FUNCTION_4
0x40000ec	              0x5b	                                 pop rbx	       399	byd.c	FUNCTION_4
0x40000ed	              0x5d	                                 pop rbp	       399	byd.c	FUNCTION_4
0x40000ee	            0x415c	                                 pop r12	       399	byd.c	FUNCTION_4
0x40000f0	              0xc3	                                     ret	       399	byd.c	FUNCTION_4
0x40000f1	      0xbe04000000	                              mov esi, 4	       397	byd.c	FUNCTION_4	CALL_4
0x40000f6	          0x4c89e7	                            mov rdi, r12	       397	byd.c	FUNCTION_4	CALL_4
0x40000f9	        0x89442404	                mov dword [rsp + 4], eax	       397	byd.c	FUNCTION_4	CALL_4
0x40000fd	      0xe800000000	                          call 0x4000102	       397	byd.c	FUNCTION_4	CALL_4
0x4000102	        0x8b442404	                mov eax, dword [rsp + 4]	       398	byd.c	FUNCTION_4
0x4000106	            0xebd0	                           jmp 0x40000d8	       398	byd.c	FUNCTION_4
0x4000108	      0xe800000000	                          call 0x400010d	       399	byd.c	FUNCTION_4
byd_disconnect	IF,1:FOR,0:CALL,2:SWITCH,0:ELSE,0:functions,0:WHILE,0:DO,0	12
0x4000040	          0x4889f8	                            mov rax, rdi	       428	byd.c	FUNCTION_6
0x4000043	          0x488b3f	                    mov rdi, qword [rdi]	       429	byd.c	FUNCTION_6
0x4000046	          0x4885ff	                           test rdi, rdi	       431	byd.c	FUNCTION_6	IF_1
0x4000049	            0x7419	                            je 0x4000064	       431	byd.c	FUNCTION_6	IF_1
0x400004b	              0x53	                                push rbx	       428	byd.c	FUNCTION_6
0x400004c	          0x4889c3	                            mov rbx, rax	       428	byd.c	FUNCTION_6
0x400004f	      0xe800000000	                          call 0x4000054	       432	byd.c	FUNCTION_6	IF_1	CALL_1
0x4000054	          0x488b3b	                    mov rdi, qword [rbx]	       433	byd.c	FUNCTION_6	IF_1	CALL_2
0x4000057	      0xe800000000	                          call 0x400005c	       433	byd.c	FUNCTION_6	IF_1	CALL_2
0x400005c	    0x48c703000000	                      mov qword [rbx], 0	       434	byd.c	FUNCTION_6	IF_1
0x4000063	              0x5b	                                 pop rbx	       436	byd.c	FUNCTION_6
0x4000064	            0xf3c3	                                     ret	       436	byd.c	FUNCTION_6
