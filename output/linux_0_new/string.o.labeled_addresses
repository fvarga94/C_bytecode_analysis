match_string	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,1:DO,0	25
0x40005a0	          0x4885f6	                           test rsi, rsi	       648	string.c	FUNCTION_25	FOR_1
0x40005a3	            0x743b	                            je 0x40005e0	       648	string.c	FUNCTION_25	FOR_1
0x40005a5	          0x488b0f	                    mov rcx, qword [rdi]	       649	string.c	FUNCTION_25	FOR_1
0x40005a8	            0x31c0	                            xor eax, eax	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005aa	          0x4885c9	                           test rcx, rcx	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005ad	            0x7431	                            je 0x40005e0	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005af	          0x4989d0	                             mov r8, rdx	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005b2	            0xeb05	                           jmp 0x40005b9	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005b4	          0x4584c9	                           test r9b, r9b	       331	string.c	FUNCTION_10	WHILE_1	IF_2
0x40005b7	            0x742d	                            je 0x40005e6	       331	string.c	FUNCTION_10	WHILE_1	IF_2
0x40005b9	        0x4883c101	                              add rcx, 1	       327	string.c	FUNCTION_10	WHILE_1
0x40005bd	      0x440fb649ff	               movzx r9d, byte [rcx - 1]	       327	string.c	FUNCTION_10	WHILE_1
0x40005c2	        0x4983c001	                               add r8, 1	       328	string.c	FUNCTION_10	WHILE_1
0x40005c6	        0x453a48ff	                  cmp r9b, byte [r8 - 1]	       329	string.c	FUNCTION_10	WHILE_1	IF_1
0x40005ca	            0x74e8	                            je 0x40005b4	       329	string.c	FUNCTION_10	WHILE_1	IF_1
0x40005cc	          0x83c001	                              add eax, 1	       648	string.c	FUNCTION_25	FOR_1
0x40005cf	          0x4863c8	                         movsxd rcx, eax	       648	string.c	FUNCTION_25	FOR_1
0x40005d2	          0x4839f1	                            cmp rcx, rsi	       648	string.c	FUNCTION_25	FOR_1
0x40005d5	            0x7309	                           jae 0x40005e0	       648	string.c	FUNCTION_25	FOR_1
0x40005d7	        0x488b0ccf	            mov rcx, qword [rdi + rcx*8]	       649	string.c	FUNCTION_25	FOR_1
0x40005db	          0x4885c9	                           test rcx, rcx	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005de	            0x75cf	                           jne 0x40005af	       650	string.c	FUNCTION_25	FOR_1	IF_1
0x40005e0	      0xb8eaffffff	                     mov eax, 0xffffffea	       656	string.c	FUNCTION_25
0x40005e5	              0xc3	                                     ret	       657	string.c	FUNCTION_25
0x40005e6	            0xf3c3	                                     ret	       657	string.c	FUNCTION_25
memzero_explicit	FOR,0:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,0:CALL,2:DO,0	7
0x4000910	              0x53	                                push rbx	       721	string.c	FUNCTION_28
0x4000911	          0x4889f2	                            mov rdx, rsi	       721	string.c	FUNCTION_28
0x4000914	            0x31f6	                            xor esi, esi	       722	string.c	FUNCTION_28	CALL_1
0x4000916	          0x4889fb	                            mov rbx, rdi	       721	string.c	FUNCTION_28
0x4000919	      0xe800000000	                          call 0x400091e	       722	string.c	FUNCTION_28	CALL_1
0x400091e	              0x5b	                                 pop rbx	       724	string.c	FUNCTION_28
0x400091f	              0xc3	                                     ret	       724	string.c	FUNCTION_28
memscan	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	17
0x4000680	          0x4885d2	                           test rdx, rdx	       882	string.c	FUNCTION_35	WHILE_1
0x4000683	          0x4889f8	                            mov rax, rdi	       879	string.c	FUNCTION_35
0x4000686	            0x7423	                            je 0x40006ab	       882	string.c	FUNCTION_35	WHILE_1
0x4000688	           0xfb60f	                   movzx ecx, byte [rdi]	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x400068b	            0x39ce	                            cmp esi, ecx	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x400068d	            0x741c	                            je 0x40006ab	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x400068f	        0x488d4f01	                      lea rcx, [rdi + 1]	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x4000693	          0x4801fa	                            add rdx, rdi	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x4000696	            0xeb0b	                           jmp 0x40006a3	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x4000698	           0xfb638	                   movzx edi, byte [rax]	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x400069b	        0x4883c101	                              add rcx, 1	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x400069f	            0x39f7	                            cmp edi, esi	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x40006a1	            0x7408	                            je 0x40006ab	       883	string.c	FUNCTION_35	WHILE_1	IF_1
0x40006a3	          0x4839d1	                            cmp rcx, rdx	       882	string.c	FUNCTION_35	WHILE_1
0x40006a6	          0x4889c8	                            mov rax, rcx	       885	string.c	FUNCTION_35	WHILE_1
0x40006a9	            0x75ed	                           jne 0x4000698	       882	string.c	FUNCTION_35	WHILE_1
0x40006ab	            0xf3c3	                                     ret	       889	string.c	FUNCTION_35
strchr	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	15
0x40002c0	           0xfb607	                   movzx eax, byte [rdi]	       372	string.c	FUNCTION_12	FOR_1
0x40002c3	            0x89f2	                            mov edx, esi	       372	string.c	FUNCTION_12	FOR_1
0x40002c5	          0x4038f0	                             cmp al, sil	       372	string.c	FUNCTION_12	FOR_1
0x40002c8	            0x750d	                           jne 0x40002d7	       372	string.c	FUNCTION_12	FOR_1
0x40002ca	            0xeb12	                           jmp 0x40002de	       372	string.c	FUNCTION_12	FOR_1
0x40002cc	        0x4883c701	                              add rdi, 1	       372	string.c	FUNCTION_12	FOR_1
0x40002d0	           0xfb607	                   movzx eax, byte [rdi]	       372	string.c	FUNCTION_12	FOR_1
0x40002d3	            0x38d0	                              cmp al, dl	       372	string.c	FUNCTION_12	FOR_1
0x40002d5	            0x7407	                            je 0x40002de	       372	string.c	FUNCTION_12	FOR_1
0x40002d7	            0x84c0	                             test al, al	       373	string.c	FUNCTION_12	FOR_1	IF_1
0x40002d9	            0x75f1	                           jne 0x40002cc	       373	string.c	FUNCTION_12	FOR_1	IF_1
0x40002db	            0x31c0	                            xor eax, eax	       374	string.c	FUNCTION_12	FOR_1	IF_1
0x40002dd	              0xc3	                                     ret	       376	string.c	FUNCTION_12
0x40002de	          0x4889f8	                            mov rax, rdi	       372	string.c	FUNCTION_12	FOR_1
0x40002e1	              0xc3	                                     ret	       372	string.c	FUNCTION_12	FOR_1
strchrnul	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,0:CALL,0:DO,0	15
0x40002f0	           0xfb617	                   movzx edx, byte [rdi]	       391	string.c	FUNCTION_13	WHILE_1
0x40002f3	          0x4889f8	                            mov rax, rdi	       390	string.c	FUNCTION_13
0x40002f6	            0x84d2	                             test dl, dl	       391	string.c	FUNCTION_13	WHILE_1
0x40002f8	            0x7418	                            je 0x4000312	       391	string.c	FUNCTION_13	WHILE_1
0x40002fa	          0x4038f2	                             cmp dl, sil	       391	string.c	FUNCTION_13	WHILE_1
0x40002fd	            0x89f1	                            mov ecx, esi	       391	string.c	FUNCTION_13	WHILE_1
0x40002ff	            0x7506	                           jne 0x4000307	       391	string.c	FUNCTION_13	WHILE_1
0x4000301	            0xeb0f	                           jmp 0x4000312	       391	string.c	FUNCTION_13	WHILE_1
0x4000303	            0x38ca	                              cmp dl, cl	       391	string.c	FUNCTION_13	WHILE_1
0x4000305	            0x740b	                            je 0x4000312	       391	string.c	FUNCTION_13	WHILE_1
0x4000307	        0x4883c001	                              add rax, 1	       392	string.c	FUNCTION_13	WHILE_1
0x400030b	           0xfb610	                   movzx edx, byte [rax]	       391	string.c	FUNCTION_13	WHILE_1
0x400030e	            0x84d2	                             test dl, dl	       391	string.c	FUNCTION_13	WHILE_1
0x4000310	            0x75f1	                           jne 0x4000303	       391	string.c	FUNCTION_13	WHILE_1
0x4000312	            0xf3c3	                                     ret	       394	string.c	FUNCTION_13
memchr	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	14
0x4000760	          0x4801fa	                            add rdx, rdi	       954	string.c	FUNCTION_38
0x4000763	        0x400fb6f6	                          movzx esi, sil	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x4000767	            0xeb0e	                           jmp 0x4000777	       956	string.c	FUNCTION_38	WHILE_1
0x4000769	           0xfb60f	                   movzx ecx, byte [rdi]	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x400076c	        0x488d4701	                      lea rax, [rdi + 1]	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x4000770	            0x39ce	                            cmp esi, ecx	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x4000772	            0x740b	                            je 0x400077f	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x4000774	          0x4889c7	                            mov rdi, rax	       957	string.c	FUNCTION_38	WHILE_1	IF_1
0x4000777	          0x4839d7	                            cmp rdi, rdx	       956	string.c	FUNCTION_38	WHILE_1
0x400077a	            0x75ed	                           jne 0x4000769	       956	string.c	FUNCTION_38	WHILE_1
0x400077c	            0x31c0	                            xor eax, eax	       961	string.c	FUNCTION_38
0x400077e	              0xc3	                                     ret	       961	string.c	FUNCTION_38
0x400077f	          0x4889f8	                            mov rax, rdi	       961	string.c	FUNCTION_38
0x4000782	              0xc3	                                     ret	       962	string.c	FUNCTION_38
strreplace	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	17
0x40008a0	           0xfb60f	                   movzx ecx, byte [rdi]	      1042	string.c	FUNCTION_41	FOR_1
0x40008a3	          0x4889f8	                            mov rax, rdi	      1041	string.c	FUNCTION_41
0x40008a6	            0x84c9	                             test cl, cl	      1042	string.c	FUNCTION_41	FOR_1
0x40008a8	            0x750d	                           jne 0x40008b7	      1042	string.c	FUNCTION_41	FOR_1
0x40008aa	            0xeb1d	                           jmp 0x40008c9	      1042	string.c	FUNCTION_41	FOR_1
0x40008ac	        0x4883c001	                              add rax, 1	      1042	string.c	FUNCTION_41	FOR_1
0x40008b0	           0xfb608	                   movzx ecx, byte [rax]	      1042	string.c	FUNCTION_41	FOR_1
0x40008b3	            0x84c9	                             test cl, cl	      1042	string.c	FUNCTION_41	FOR_1
0x40008b5	            0x7412	                            je 0x40008c9	      1042	string.c	FUNCTION_41	FOR_1
0x40008b7	          0x4038ce	                             cmp sil, cl	      1043	string.c	FUNCTION_41	FOR_1	IF_1
0x40008ba	            0x75f0	                           jne 0x40008ac	      1043	string.c	FUNCTION_41	FOR_1	IF_1
0x40008bc	            0x8810	                      mov byte [rax], dl	      1044	string.c	FUNCTION_41	FOR_1	IF_1
0x40008be	        0x4883c001	                              add rax, 1	      1042	string.c	FUNCTION_41	FOR_1
0x40008c2	           0xfb608	                   movzx ecx, byte [rax]	      1042	string.c	FUNCTION_41	FOR_1
0x40008c5	            0x84c9	                             test cl, cl	      1042	string.c	FUNCTION_41	FOR_1
0x40008c7	            0x75ee	                           jne 0x40008b7	      1042	string.c	FUNCTION_41	FOR_1
0x40008c9	            0xf3c3	                                     ret	      1046	string.c	FUNCTION_41
strncmp	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,0:DO,0	26
0x4000270	          0x4885d2	                           test rdx, rdx	       350	string.c	FUNCTION_11	WHILE_1
0x4000273	            0x7435	                            je 0x40002aa	       350	string.c	FUNCTION_11	WHILE_1
0x4000275	           0xfb60f	                   movzx ecx, byte [rdi]	       351	string.c	FUNCTION_11	WHILE_1
0x4000278	        0x440fb606	                   movzx r8d, byte [rsi]	       352	string.c	FUNCTION_11	WHILE_1
0x400027c	          0x4438c1	                             cmp cl, r8b	       353	string.c	FUNCTION_11	WHILE_1	IF_1
0x400027f	            0x752c	                           jne 0x40002ad	       353	string.c	FUNCTION_11	WHILE_1	IF_1
0x4000281	            0x84c9	                             test cl, cl	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x4000283	            0x7425	                            je 0x40002aa	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x4000285	        0x4883ea01	                              sub rdx, 1	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x4000289	            0x31c0	                            xor eax, eax	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x400028b	            0xeb18	                           jmp 0x40002a5	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x400028d	       0xfb64c0701	        movzx ecx, byte [rdi + rax + 1] 	       351	string.c	FUNCTION_11	WHILE_1
0x4000292	    0x440fb6440601	        movzx r8d, byte [rsi + rax + 1] 	       352	string.c	FUNCTION_11	WHILE_1
0x4000298	          0x4438c1	                             cmp cl, r8b	       353	string.c	FUNCTION_11	WHILE_1	IF_1
0x400029b	            0x7510	                           jne 0x40002ad	       353	string.c	FUNCTION_11	WHILE_1	IF_1
0x400029d	        0x4883c001	                              add rax, 1	       353	string.c	FUNCTION_11	WHILE_1	IF_1
0x40002a1	            0x84c9	                             test cl, cl	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x40002a3	            0x7405	                            je 0x40002aa	       355	string.c	FUNCTION_11	WHILE_1	IF_2
0x40002a5	          0x4839d0	                            cmp rax, rdx	       350	string.c	FUNCTION_11	WHILE_1
0x40002a8	            0x75e3	                           jne 0x400028d	       350	string.c	FUNCTION_11	WHILE_1
0x40002aa	            0x31c0	                            xor eax, eax	       359	string.c	FUNCTION_11
0x40002ac	              0xc3	                                     ret	       360	string.c	FUNCTION_11
0x40002ad	          0x4438c1	                             cmp cl, r8b	       354	string.c	FUNCTION_11	WHILE_1	IF_1
0x40002b0	            0x19c0	                            sbb eax, eax	       354	string.c	FUNCTION_11	WHILE_1	IF_1
0x40002b2	          0x83c801	                               or eax, 1	       354	string.c	FUNCTION_11	WHILE_1	IF_1
0x40002b5	              0xc3	                                     ret	       354	string.c	FUNCTION_11	WHILE_1	IF_1
strnchr	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	24
0x4000340	          0x4885f6	                           test rsi, rsi	       425	string.c	FUNCTION_15	FOR_1
0x4000343	            0x742f	                            je 0x4000374	       425	string.c	FUNCTION_15	FOR_1
0x4000345	           0xfb607	                   movzx eax, byte [rdi]	       425	string.c	FUNCTION_15	FOR_1
0x4000348	            0x84c0	                             test al, al	       425	string.c	FUNCTION_15	FOR_1
0x400034a	            0x7428	                            je 0x4000374	       425	string.c	FUNCTION_15	FOR_1
0x400034c	            0x38d0	                              cmp al, dl	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400034e	          0x4189d0	                            mov r8d, edx	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x4000351	            0x7425	                            je 0x4000378	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x4000353	        0x488d5701	                      lea rdx, [rdi + 1]	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x4000357	          0x4801f7	                            add rdi, rsi	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400035a	            0xeb10	                           jmp 0x400036c	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400035c	           0xfb60a	                   movzx ecx, byte [rdx]	       425	string.c	FUNCTION_15	FOR_1
0x400035f	            0x84c9	                             test cl, cl	       425	string.c	FUNCTION_15	FOR_1
0x4000361	            0x7411	                            je 0x4000374	       425	string.c	FUNCTION_15	FOR_1
0x4000363	        0x4883c201	                              add rdx, 1	       425	string.c	FUNCTION_15	FOR_1
0x4000367	          0x4438c1	                             cmp cl, r8b	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400036a	            0x740a	                            je 0x4000376	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400036c	          0x4839fa	                            cmp rdx, rdi	       425	string.c	FUNCTION_15	FOR_1
0x400036f	          0x4889d0	                            mov rax, rdx	       425	string.c	FUNCTION_15	FOR_1
0x4000372	            0x75e8	                           jne 0x400035c	       425	string.c	FUNCTION_15	FOR_1
0x4000374	            0x31c0	                            xor eax, eax	       428	string.c	FUNCTION_15
0x4000376	            0xf3c3	                                     ret	       429	string.c	FUNCTION_15
0x4000378	          0x4889f8	                            mov rax, rdi	       426	string.c	FUNCTION_15	FOR_1	IF_1
0x400037b	              0xc3	                                     ret	       426	string.c	FUNCTION_15	FOR_1	IF_1
strlcpy	FOR,0:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,2:DO,0	24
0x40008d0	          0x803e00	                       cmp byte [rsi], 0	       482	string.c	FUNCTION_18	FOR_1
0x40008d3	              0x55	                                push rbp	       141	string.c	FUNCTION_5
0x40008d4	              0x53	                                push rbx	       141	string.c	FUNCTION_5
0x40008d5	            0x7434	                            je 0x400090b	       482	string.c	FUNCTION_18	FOR_1
0x40008d7	          0x4889f0	                            mov rax, rsi	       482	string.c	FUNCTION_18	FOR_1
0x40008da	        0x4883c001	                              add rax, 1	       482	string.c	FUNCTION_18	FOR_1
0x40008de	          0x803800	                       cmp byte [rax], 0	       482	string.c	FUNCTION_18	FOR_1
0x40008e1	            0x75f7	                           jne 0x40008da	       482	string.c	FUNCTION_18	FOR_1
0x40008e3	          0x4829f0	                            sub rax, rsi	       482	string.c	FUNCTION_18	FOR_1
0x40008e6	          0x4889c3	                            mov rbx, rax	       482	string.c	FUNCTION_18	FOR_1
0x40008e9	          0x4885d2	                           test rdx, rdx	       144	string.c	FUNCTION_5	IF_1
0x40008ec	            0x7417	                            je 0x4000905	       144	string.c	FUNCTION_5	IF_1
0x40008ee	        0x488d6aff	                      lea rbp, [rdx - 1]	       145	string.c	FUNCTION_5	IF_1
0x40008f2	          0x4839da	                            cmp rdx, rbx	       145	string.c	FUNCTION_5	IF_1
0x40008f5	        0x480f47eb	                          cmova rbp, rbx	       145	string.c	FUNCTION_5	IF_1
0x40008f9	          0x4889ea	                            mov rdx, rbp	       146	string.c	FUNCTION_5	IF_1	CALL_2
0x40008fc	      0xe800000000	                          call 0x4000901	       146	string.c	FUNCTION_5	IF_1	CALL_2
0x4000901	        0xc6042800	                 mov byte [rax + rbp], 0	       147	string.c	FUNCTION_5	IF_1
0x4000905	          0x4889d8	                            mov rax, rbx	       150	string.c	FUNCTION_5
0x4000908	              0x5b	                                 pop rbx	       150	string.c	FUNCTION_5
0x4000909	              0x5d	                                 pop rbp	       150	string.c	FUNCTION_5
0x400090a	              0xc3	                                     ret	       150	string.c	FUNCTION_5
0x400090b	            0x31db	                            xor ebx, ebx	       482	string.c	FUNCTION_18	FOR_1
0x400090d	            0xebda	                           jmp 0x40008e9	       482	string.c	FUNCTION_18	FOR_1
sysfs_streq	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,3:CALL,0:DO,0	31
0x4000550	           0xfb607	                   movzx eax, byte [rdi]	       619	string.c	FUNCTION_24	WHILE_1
0x4000553	            0x84c0	                             test al, al	       619	string.c	FUNCTION_24	WHILE_1
0x4000555	            0x7511	                           jne 0x4000568	       619	string.c	FUNCTION_24	WHILE_1
0x4000557	            0xeb21	                           jmp 0x400057a	       619	string.c	FUNCTION_24	WHILE_1
0x4000559	        0x4883c701	                              add rdi, 1	       620	string.c	FUNCTION_24	WHILE_1
0x400055d	           0xfb607	                   movzx eax, byte [rdi]	       619	string.c	FUNCTION_24	WHILE_1
0x4000560	        0x4883c601	                              add rsi, 1	       621	string.c	FUNCTION_24	WHILE_1
0x4000564	            0x84c0	                             test al, al	       619	string.c	FUNCTION_24	WHILE_1
0x4000566	            0x7412	                            je 0x400057a	       619	string.c	FUNCTION_24	WHILE_1
0x4000568	           0xfb616	                   movzx edx, byte [rsi]	       619	string.c	FUNCTION_24	WHILE_1
0x400056b	            0x38d0	                              cmp al, dl	       619	string.c	FUNCTION_24	WHILE_1
0x400056d	            0x74ea	                            je 0x4000559	       619	string.c	FUNCTION_24	WHILE_1
0x400056f	            0x3c0a	                             cmp al, 0xa	       628	string.c	FUNCTION_24	IF_3
0x4000571	            0x751c	                           jne 0x400058f	       628	string.c	FUNCTION_24	IF_3
0x4000573	           0xa5701	                   or dl, byte [rdi + 1]	       628	string.c	FUNCTION_24	IF_3
0x4000576	           0xf94c0	                                 sete al	       628	string.c	FUNCTION_24	IF_3
0x4000579	              0xc3	                                     ret	       628	string.c	FUNCTION_24	IF_3
0x400057a	           0xfb616	                   movzx edx, byte [rsi]	       624	string.c	FUNCTION_24	IF_1
0x400057d	      0xb801000000	                              mov eax, 1	       627	string.c	FUNCTION_24	IF_2
0x4000582	            0x84d2	                             test dl, dl	       624	string.c	FUNCTION_24	IF_1
0x4000584	            0x7414	                            je 0x400059a	       624	string.c	FUNCTION_24	IF_1
0x4000586	            0x31c0	                            xor eax, eax	       630	string.c	FUNCTION_24
0x4000588	          0x80fa0a	                             cmp dl, 0xa	       626	string.c	FUNCTION_24	IF_2
0x400058b	            0x7405	                            je 0x4000592	       626	string.c	FUNCTION_24	IF_2
0x400058d	            0xf3c3	                                     ret	       631	string.c	FUNCTION_24
0x400058f	            0x31c0	                            xor eax, eax	       630	string.c	FUNCTION_24
0x4000591	              0xc3	                                     ret	       631	string.c	FUNCTION_24
0x4000592	        0x807e0100	                   cmp byte [rsi + 1], 0	       626	string.c	FUNCTION_24	IF_2
0x4000596	           0xf94c0	                                 sete al	       626	string.c	FUNCTION_24	IF_2
0x4000599	              0xc3	                                     ret	       626	string.c	FUNCTION_24	IF_2
0x400059a	            0xf3c3	                                     ret	       626	string.c	FUNCTION_24	IF_2
__sysfs_match_string	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,1:DO,0	25
0x40005f0	          0x4885f6	                           test rsi, rsi	       674	string.c	FUNCTION_26	FOR_1
0x40005f3	          0x4989f9	                             mov r9, rdi	       670	string.c	FUNCTION_26
0x40005f6	            0x7435	                            je 0x400062d	       674	string.c	FUNCTION_26	FOR_1
0x40005f8	          0x488b3f	                    mov rdi, qword [rdi]	       675	string.c	FUNCTION_26	FOR_1
0x40005fb	          0x4885ff	                           test rdi, rdi	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x40005fe	            0x742d	                            je 0x400062d	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x4000600	          0x4989d2	                            mov r10, rdx	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x4000603	          0x4989f0	                             mov r8, rsi	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x4000606	            0x31c9	                            xor ecx, ecx	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x4000608	            0xeb14	                           jmp 0x400061e	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x400060a	          0x83c101	                              add ecx, 1	       674	string.c	FUNCTION_26	FOR_1
0x400060d	          0x4863c1	                         movsxd rax, ecx	       674	string.c	FUNCTION_26	FOR_1
0x4000610	          0x4c39c0	                             cmp rax, r8	       674	string.c	FUNCTION_26	FOR_1
0x4000613	            0x7318	                           jae 0x400062d	       674	string.c	FUNCTION_26	FOR_1
0x4000615	        0x498b3cc1	             mov rdi, qword [r9 + rax*8]	       675	string.c	FUNCTION_26	FOR_1
0x4000619	          0x4885ff	                           test rdi, rdi	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x400061c	            0x740f	                            je 0x400062d	       676	string.c	FUNCTION_26	FOR_1	IF_1
0x400061e	          0x4c89d6	                            mov rsi, r10	       678	string.c	FUNCTION_26	FOR_1	IF_2	CALL_1
0x4000621	      0xe800000000	                          call 0x4000626	       678	string.c	FUNCTION_26	FOR_1	IF_2	CALL_1
0x4000626	            0x84c0	                             test al, al	       678	string.c	FUNCTION_26	FOR_1	IF_2	CALL_1
0x4000628	            0x74e0	                            je 0x400060a	       678	string.c	FUNCTION_26	FOR_1	IF_2	CALL_1
0x400062a	            0x89c8	                            mov eax, ecx	       678	string.c	FUNCTION_26	FOR_1	IF_2	CALL_1
0x400062c	              0xc3	                                     ret	       683	string.c	FUNCTION_26
0x400062d	      0xb8eaffffff	                     mov eax, 0xffffffea	       682	string.c	FUNCTION_26
0x4000632	              0xc3	                                     ret	       682	string.c	FUNCTION_26
strncpy	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	13
0x40000a0	          0x4885d2	                           test rdx, rdx	       117	string.c	FUNCTION_4	WHILE_1
0x40000a3	          0x4889f8	                            mov rax, rdi	       114	string.c	FUNCTION_4
0x40000a6	        0x4c8d0417	                     lea r8, [rdi + rdx]	       114	string.c	FUNCTION_4
0x40000aa	          0x4889f9	                            mov rcx, rdi	       117	string.c	FUNCTION_4	WHILE_1
0x40000ad	            0x7415	                            je 0x40000c4	       117	string.c	FUNCTION_4	WHILE_1
0x40000af	           0xfb616	                   movzx edx, byte [rsi]	       118	string.c	FUNCTION_4	WHILE_1	IF_1
0x40000b2	          0x80fa01	                               cmp dl, 1	       119	string.c	FUNCTION_4	WHILE_1	IF_1
0x40000b5	            0x8811	                      mov byte [rcx], dl	       118	string.c	FUNCTION_4	WHILE_1	IF_1
0x40000b7	        0x4883deff	             sbb rsi, 0xffffffffffffffff	       119	string.c	FUNCTION_4	WHILE_1	IF_1
0x40000bb	        0x4883c101	                              add rcx, 1	       120	string.c	FUNCTION_4	WHILE_1
0x40000bf	          0x4939c8	                             cmp r8, rcx	       117	string.c	FUNCTION_4	WHILE_1
0x40000c2	            0x75eb	                           jne 0x40000af	       117	string.c	FUNCTION_4	WHILE_1
0x40000c4	            0xf3c3	                                     ret	       124	string.c	FUNCTION_4
strcat	FOR,0:WHILE,2:ELSE,0:SWITCH,0:functions,0:IF,0:CALL,0:DO,0	14
0x4000220	          0x803f00	                       cmp byte [rdi], 0	       250	string.c	FUNCTION_7	WHILE_1
0x4000223	          0x4889f8	                            mov rax, rdi	       247	string.c	FUNCTION_7
0x4000226	          0x4889fa	                            mov rdx, rdi	       250	string.c	FUNCTION_7	WHILE_1
0x4000229	            0x7409	                            je 0x4000234	       250	string.c	FUNCTION_7	WHILE_1
0x400022b	        0x4883c201	                              add rdx, 1	       251	string.c	FUNCTION_7	WHILE_1
0x400022f	          0x803a00	                       cmp byte [rdx], 0	       250	string.c	FUNCTION_7	WHILE_1
0x4000232	            0x75f7	                           jne 0x400022b	       250	string.c	FUNCTION_7	WHILE_1
0x4000234	        0x4883c601	                              add rsi, 1	       252	string.c	FUNCTION_7	WHILE_2
0x4000238	         0xfb64eff	               movzx ecx, byte [rsi - 1]	       252	string.c	FUNCTION_7	WHILE_2
0x400023c	        0x4883c201	                              add rdx, 1	       252	string.c	FUNCTION_7	WHILE_2
0x4000240	            0x84c9	                             test cl, cl	       252	string.c	FUNCTION_7	WHILE_2
0x4000242	          0x884aff	                  mov byte [rdx - 1], cl	       252	string.c	FUNCTION_7	WHILE_2
0x4000245	            0x75ed	                           jne 0x4000234	       252	string.c	FUNCTION_7	WHILE_2
0x4000247	            0xf3c3	                                     ret	       255	string.c	FUNCTION_7
strstr	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,3:DO,0	33
0x40006b0	          0x803e00	                       cmp byte [rsi], 0	       482	string.c	FUNCTION_18	FOR_1
0x40006b3	            0x7447	                            je 0x40006fc	       482	string.c	FUNCTION_18	FOR_1
0x40006b5	          0x4889f2	                            mov rdx, rsi	       482	string.c	FUNCTION_18	FOR_1
0x40006b8	        0x4883c201	                              add rdx, 1	       482	string.c	FUNCTION_18	FOR_1
0x40006bc	          0x803a00	                       cmp byte [rdx], 0	       482	string.c	FUNCTION_18	FOR_1
0x40006bf	            0x75f7	                           jne 0x40006b8	       482	string.c	FUNCTION_18	FOR_1
0x40006c1	          0x4829f2	                            sub rdx, rsi	       904	string.c	FUNCTION_36	IF_1
0x40006c4	          0x4889f8	                            mov rax, rdi	       905	string.c	FUNCTION_36	IF_1
0x40006c7	            0x7442	                            je 0x400070b	       904	string.c	FUNCTION_36	IF_1
0x40006c9	          0x803f00	                       cmp byte [rdi], 0	       482	string.c	FUNCTION_18	FOR_1
0x40006cc	            0x743b	                            je 0x4000709	       482	string.c	FUNCTION_18	FOR_1
0x40006ce	          0x4889f9	                            mov rcx, rdi	       482	string.c	FUNCTION_18	FOR_1
0x40006d1	        0x4883c101	                              add rcx, 1	       482	string.c	FUNCTION_18	FOR_1
0x40006d5	          0x803900	                       cmp byte [rcx], 0	       482	string.c	FUNCTION_18	FOR_1
0x40006d8	            0x75f7	                           jne 0x40006d1	       482	string.c	FUNCTION_18	FOR_1
0x40006da	          0x4829f9	                            sub rcx, rdi	       482	string.c	FUNCTION_18	FOR_1
0x40006dd	          0x4839ca	                            cmp rdx, rcx	       907	string.c	FUNCTION_36	WHILE_1
0x40006e0	            0x7727	                            ja 0x4000709	       907	string.c	FUNCTION_36	WHILE_1
0x40006e2	        0x4883e901	                              sub rcx, 1	       908	string.c	FUNCTION_36	WHILE_1
0x40006e6	            0x31c0	                            xor eax, eax	       908	string.c	FUNCTION_36	WHILE_1
0x40006e8	      0x440fb60406	             movzx r8d, byte [rsi + rax]	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x40006ed	        0x44380407	               cmp byte [rdi + rax], r8b	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x40006f1	            0x750d	                           jne 0x4000700	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x40006f3	        0x4883c001	                              add rax, 1	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x40006f7	          0x4839d0	                            cmp rax, rdx	       860	string.c	FUNCTION_34	FOR_1
0x40006fa	            0x75ec	                           jne 0x40006e8	       860	string.c	FUNCTION_34	FOR_1
0x40006fc	          0x4889f8	                            mov rax, rdi	       905	string.c	FUNCTION_36	IF_1
0x40006ff	              0xc3	                                     ret	       905	string.c	FUNCTION_36	IF_1
0x4000700	        0x4883c701	                              add rdi, 1	       911	string.c	FUNCTION_36	WHILE_1
0x4000704	          0x4839d1	                            cmp rcx, rdx	       907	string.c	FUNCTION_36	WHILE_1
0x4000707	            0x73d9	                           jae 0x40006e2	       907	string.c	FUNCTION_36	WHILE_1
0x4000709	            0x31c0	                            xor eax, eax	       913	string.c	FUNCTION_36
0x400070b	            0xf3c3	                                     ret	       914	string.c	FUNCTION_36
strsep	FOR,0:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,1:DO,0	35
0x40004f0	          0x488b07	                    mov rax, qword [rdi]	       592	string.c	FUNCTION_23
0x40004f3	          0x4885c0	                           test rax, rax	       595	string.c	FUNCTION_23	IF_1
0x40004f6	            0x7453	                            je 0x400054b	       595	string.c	FUNCTION_23	IF_1
0x40004f8	        0x440fb600	                   movzx r8d, byte [rax]	       567	string.c	FUNCTION_22	FOR_1
0x40004fc	          0x4584c0	                           test r8b, r8b	       567	string.c	FUNCTION_22	FOR_1
0x40004ff	            0x7433	                            je 0x4000534	       567	string.c	FUNCTION_22	FOR_1
0x4000501	        0x440fb616	                  movzx r10d, byte [rsi]	       567	string.c	FUNCTION_22	FOR_1
0x4000505	          0x4989c1	                             mov r9, rax	       567	string.c	FUNCTION_22	FOR_1
0x4000508	          0x4584d2	                         test r10b, r10b	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x400050b	            0x741a	                            je 0x4000527	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x400050d	          0x4538c2	                           cmp r10b, r8b	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x4000510	            0x7428	                            je 0x400053a	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x4000512	          0x4889f2	                            mov rdx, rsi	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x4000515	            0xeb05	                           jmp 0x400051c	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x4000517	          0x4438c1	                             cmp cl, r8b	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x400051a	            0x741e	                            je 0x400053a	       569	string.c	FUNCTION_22	FOR_1	FOR_2	IF_1
0x400051c	        0x4883c201	                              add rdx, 1	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x4000520	           0xfb60a	                   movzx ecx, byte [rdx]	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x4000523	            0x84c9	                             test cl, cl	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x4000525	            0x75f0	                           jne 0x4000517	       568	string.c	FUNCTION_22	FOR_1	FOR_2
0x4000527	        0x4983c101	                               add r9, 1	       567	string.c	FUNCTION_22	FOR_1
0x400052b	        0x450fb601	                    movzx r8d, byte [r9]	       567	string.c	FUNCTION_22	FOR_1
0x400052f	          0x4584c0	                           test r8b, r8b	       567	string.c	FUNCTION_22	FOR_1
0x4000532	            0x75d4	                           jne 0x4000508	       567	string.c	FUNCTION_22	FOR_1
0x4000534	            0x31d2	                            xor edx, edx	       567	string.c	FUNCTION_22	FOR_1
0x4000536	          0x488917	                    mov qword [rdi], rdx	       601	string.c	FUNCTION_23
0x4000539	              0xc3	                                     ret	       602	string.c	FUNCTION_23
0x400053a	          0x4d85c9	                             test r9, r9	       599	string.c	FUNCTION_23	IF_2
0x400053d	            0x74f5	                            je 0x4000534	       599	string.c	FUNCTION_23	IF_2
0x400053f	        0x498d5101	                       lea rdx, [r9 + 1]	       600	string.c	FUNCTION_23	IF_2
0x4000543	        0x41c60100	                        mov byte [r9], 0	       600	string.c	FUNCTION_23	IF_2
0x4000547	          0x488917	                    mov qword [rdi], rdx	       601	string.c	FUNCTION_23
0x400054a	              0xc3	                                     ret	       602	string.c	FUNCTION_23
0x400054b	            0x31c0	                            xor eax, eax	       596	string.c	FUNCTION_23	IF_1
0x400054d	              0xc3	                                     ret	       603	string.c	FUNCTION_23
strrchr	FOR,0:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,1	8
0x4000320	            0x31c0	                            xor eax, eax	       406	string.c	FUNCTION_14
0x4000322	           0xfb617	                   movzx edx, byte [rdi]	       408	string.c	FUNCTION_14	DO_1	IF_1
0x4000325	          0x4038f2	                             cmp dl, sil	       409	string.c	FUNCTION_14	DO_1	IF_1
0x4000328	        0x480f44c7	                          cmove rax, rdi	       409	string.c	FUNCTION_14	DO_1	IF_1
0x400032c	        0x4883c701	                              add rdi, 1	       410	string.c	FUNCTION_14	DO_1
0x4000330	            0x84d2	                             test dl, dl	       410	string.c	FUNCTION_14	DO_1
0x4000332	            0x75ee	                           jne 0x4000322	       410	string.c	FUNCTION_14	DO_1
0x4000334	            0xf3c3	                                     ret	       412	string.c	FUNCTION_14
strspn	FOR,2:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,0:DO,0	25
0x4000410	        0x440fb607	                   movzx r8d, byte [rdi]	       518	string.c	FUNCTION_20	FOR_1
0x4000414	          0x4584c0	                           test r8b, r8b	       518	string.c	FUNCTION_20	FOR_1
0x4000417	            0x7437	                            je 0x4000450	       518	string.c	FUNCTION_20	FOR_1
0x4000419	        0x440fb60e	                   movzx r9d, byte [rsi]	       518	string.c	FUNCTION_20	FOR_1
0x400041d	            0x31c0	                            xor eax, eax	       518	string.c	FUNCTION_20	FOR_1
0x400041f	          0x4584c9	                           test r9b, r9b	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x4000422	            0x742a	                            je 0x400044e	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x4000424	          0x4538c1	                            cmp r9b, r8b	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x4000427	            0x7417	                            je 0x4000440	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x4000429	          0x4889f2	                            mov rdx, rsi	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x400042c	            0xeb05	                           jmp 0x4000433	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x400042e	          0x4438c1	                             cmp cl, r8b	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x4000431	            0x740d	                            je 0x4000440	       520	string.c	FUNCTION_20	FOR_1	FOR_2	IF_1
0x4000433	        0x4883c201	                              add rdx, 1	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x4000437	           0xfb60a	                   movzx ecx, byte [rdx]	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x400043a	            0x84c9	                             test cl, cl	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x400043c	            0x75f0	                           jne 0x400042e	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x400043e	            0xf3c3	                                     ret	       519	string.c	FUNCTION_20	FOR_1	FOR_2
0x4000440	        0x4883c001	                              add rax, 1	       525	string.c	FUNCTION_20	FOR_1
0x4000444	      0x440fb60407	             movzx r8d, byte [rdi + rax]	       518	string.c	FUNCTION_20	FOR_1
0x4000449	          0x4584c0	                           test r8b, r8b	       518	string.c	FUNCTION_20	FOR_1
0x400044c	            0x75d1	                           jne 0x400041f	       518	string.c	FUNCTION_20	FOR_1
0x400044e	            0xf3c3	                                     ret	       528	string.c	FUNCTION_20
0x4000450	            0x31c0	                            xor eax, eax	       516	string.c	FUNCTION_20
0x4000452	              0xc3	                                     ret	       516	string.c	FUNCTION_20
strnstr	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,2:CALL,2:DO,0	26
0x4000710	          0x803e00	                       cmp byte [rsi], 0	       482	string.c	FUNCTION_18	FOR_1
0x4000713	            0x7433	                            je 0x4000748	       482	string.c	FUNCTION_18	FOR_1
0x4000715	          0x4889f1	                            mov rcx, rsi	       482	string.c	FUNCTION_18	FOR_1
0x4000718	        0x4883c101	                              add rcx, 1	       482	string.c	FUNCTION_18	FOR_1
0x400071c	          0x803900	                       cmp byte [rcx], 0	       482	string.c	FUNCTION_18	FOR_1
0x400071f	            0x75f7	                           jne 0x4000718	       482	string.c	FUNCTION_18	FOR_1
0x4000721	          0x4829f1	                            sub rcx, rsi	       930	string.c	FUNCTION_37	IF_1
0x4000724	          0x4889f8	                            mov rax, rdi	       931	string.c	FUNCTION_37	IF_1
0x4000727	            0x742e	                            je 0x4000757	       930	string.c	FUNCTION_37	IF_1
0x4000729	          0x4839ca	                            cmp rdx, rcx	       932	string.c	FUNCTION_37	WHILE_1
0x400072c	            0x7227	                            jb 0x4000755	       932	string.c	FUNCTION_37	WHILE_1
0x400072e	        0x4883ea01	                              sub rdx, 1	       933	string.c	FUNCTION_37	WHILE_1
0x4000732	            0x31c0	                            xor eax, eax	       933	string.c	FUNCTION_37	WHILE_1
0x4000734	      0x440fb60406	             movzx r8d, byte [rsi + rax]	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x4000739	        0x44380407	               cmp byte [rdi + rax], r8b	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x400073d	            0x750d	                           jne 0x400074c	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x400073f	        0x4883c001	                              add rax, 1	       861	string.c	FUNCTION_34	FOR_1	IF_1
0x4000743	          0x4839c1	                            cmp rcx, rax	       860	string.c	FUNCTION_34	FOR_1
0x4000746	            0x75ec	                           jne 0x4000734	       860	string.c	FUNCTION_34	FOR_1
0x4000748	          0x4889f8	                            mov rax, rdi	       931	string.c	FUNCTION_37	IF_1
0x400074b	              0xc3	                                     ret	       931	string.c	FUNCTION_37	IF_1
0x400074c	        0x4883c701	                              add rdi, 1	       936	string.c	FUNCTION_37	WHILE_1
0x4000750	          0x4839ca	                            cmp rdx, rcx	       932	string.c	FUNCTION_37	WHILE_1
0x4000753	            0x73d9	                           jae 0x400072e	       932	string.c	FUNCTION_37	WHILE_1
0x4000755	            0x31c0	                            xor eax, eax	       938	string.c	FUNCTION_37
0x4000757	            0xf3c3	                                     ret	       939	string.c	FUNCTION_37
strcpy	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,0:CALL,0:DO,0	9
0x4000080	          0x4889f8	                            mov rax, rdi	        89	string.c	FUNCTION_3
0x4000083	          0x4889fa	                            mov rdx, rdi	        92	string.c	FUNCTION_3	WHILE_1
0x4000086	        0x4883c601	                              add rsi, 1	        92	string.c	FUNCTION_3	WHILE_1
0x400008a	         0xfb64eff	               movzx ecx, byte [rsi - 1]	        92	string.c	FUNCTION_3	WHILE_1
0x400008e	        0x4883c201	                              add rdx, 1	        92	string.c	FUNCTION_3	WHILE_1
0x4000092	            0x84c9	                             test cl, cl	        92	string.c	FUNCTION_3	WHILE_1
0x4000094	          0x884aff	                  mov byte [rdx - 1], cl	        92	string.c	FUNCTION_3	WHILE_1
0x4000097	            0x75ed	                           jne 0x4000086	        92	string.c	FUNCTION_3	WHILE_1
0x4000099	            0xf3c3	                                     ret	        95	string.c	FUNCTION_3
memchr_inv	FOR,0:WHILE,1:ELSE,0:SWITCH,0:functions,0:IF,4:CALL,4:DO,0	83
0x4000790	        0x4883fa10	                           cmp rdx, 0x10	       992	string.c	FUNCTION_40	IF_1
0x4000794	            0x89f1	                            mov ecx, esi	       988	string.c	FUNCTION_40
0x4000796	            0x772f	                            ja 0x40007c7	       992	string.c	FUNCTION_40	IF_1
0x4000798	          0x4885d2	                           test rdx, rdx	       968	string.c	FUNCTION_39	WHILE_1
0x400079b	            0x89d0	                            mov eax, edx	       993	string.c	FUNCTION_40	CALL_1
0x400079d	            0x7424	                            je 0x40007c3	       968	string.c	FUNCTION_39	WHILE_1
0x400079f	          0x403a37	                     cmp sil, byte [rdi]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007a2	     0xf85c3000000	                           jne 0x400086b	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007a8	          0x83e801	                              sub eax, 1	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007ab	      0x488d440701	                lea rax, [rdi + rax + 1]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007b0	            0xeb08	                           jmp 0x40007ba	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007b2	            0x3a0f	                      cmp cl, byte [rdi]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007b4	     0xf85b1000000	                           jne 0x400086b	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x40007ba	        0x4883c701	                              add rdi, 1	       971	string.c	FUNCTION_39	WHILE_1
0x40007be	          0x4839c7	                            cmp rdi, rax	       968	string.c	FUNCTION_39	WHILE_1
0x40007c1	            0x75ef	                           jne 0x40007b2	       968	string.c	FUNCTION_39	WHILE_1
0x40007c3	            0x31c0	                            xor eax, eax	       974	string.c	FUNCTION_39
0x40007c5	            0xf3c3	                                     ret	      1029	string.c	FUNCTION_40
0x40007c7	          0x4189f8	                            mov r8d, edi	      1008	string.c	FUNCTION_40	IF_2
0x40007ca	        0x4183e007	                              and r8d, 7	      1008	string.c	FUNCTION_40	IF_2
0x40007ce	            0x7565	                           jne 0x4000835	      1008	string.c	FUNCTION_40	IF_2
0x40007d0	          0x4989d1	                             mov r9, rdx	      1019	string.c	FUNCTION_40
0x40007d3	        0x49c1e903	                               shr r9, 3	      1019	string.c	FUNCTION_40
0x40007d7	          0x4585c9	                           test r9d, r9d	      1021	string.c	FUNCTION_40	WHILE_1
0x40007da	     0xf84ae000000	                            je 0x400088e	      1021	string.c	FUNCTION_40	WHILE_1
0x40007e0	    0x48b801010101	           movabs rax, 0x101010101010101	       997	string.c	FUNCTION_40
0x40007ea	        0x440fb6c1	                           movzx r8d, cl	       995	string.c	FUNCTION_40
0x40007ee	        0x4c0fafc0	                            imul r8, rax	       997	string.c	FUNCTION_40
0x40007f2	        0x418d41ff	                       lea eax, [r9 - 1]	       997	string.c	FUNCTION_40
0x40007f6	          0x4c3b07	                     cmp r8, qword [rdi]	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x40007f9	      0x488d44c708	              lea rax, [rdi + rax*8 + 8]	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x40007fe	            0x7407	                            je 0x4000807	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x4000800	            0xeb6d	                           jmp 0x400086f	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x4000802	          0x4c3b07	                     cmp r8, qword [rdi]	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x4000805	            0x7568	                           jne 0x400086f	      1022	string.c	FUNCTION_40	WHILE_1	IF_4
0x4000807	        0x4883c708	                              add rdi, 8	      1024	string.c	FUNCTION_40	WHILE_1
0x400080b	          0x4839c7	                            cmp rdi, rax	      1021	string.c	FUNCTION_40	WHILE_1
0x400080e	            0x75f2	                           jne 0x4000802	      1021	string.c	FUNCTION_40	WHILE_1
0x4000810	          0x83e207	                              and edx, 7	       968	string.c	FUNCTION_39	WHILE_1
0x4000813	            0x74ae	                            je 0x40007c3	       968	string.c	FUNCTION_39	WHILE_1
0x4000815	          0x403a30	                     cmp sil, byte [rax]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000818	            0x75ab	                           jne 0x40007c5	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x400081a	          0x83ea01	                              sub edx, 1	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x400081d	      0x488d541001	                lea rdx, [rax + rdx + 1]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000822	            0xeb04	                           jmp 0x4000828	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000824	            0x3a08	                      cmp cl, byte [rax]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000826	            0x759d	                           jne 0x40007c5	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000828	        0x4883c001	                              add rax, 1	       971	string.c	FUNCTION_39	WHILE_1
0x400082c	          0x4839c2	                            cmp rdx, rax	       968	string.c	FUNCTION_39	WHILE_1
0x400082f	            0x75f3	                           jne 0x4000824	       968	string.c	FUNCTION_39	WHILE_1
0x4000831	            0x31c0	                            xor eax, eax	       974	string.c	FUNCTION_39
0x4000833	            0xeb90	                           jmp 0x40007c5	       974	string.c	FUNCTION_39
0x4000835	      0xb808000000	                              mov eax, 8	      1011	string.c	FUNCTION_40	IF_2
0x400083a	          0x4429c0	                            sub eax, r8d	      1011	string.c	FUNCTION_40	IF_2
0x400083d	          0x4189c1	                            mov r9d, eax	      1011	string.c	FUNCTION_40	IF_2
0x4000840	      0xb807000000	                              mov eax, 7	      1011	string.c	FUNCTION_40	IF_2
0x4000845	          0x4429c0	                            sub eax, r8d	      1011	string.c	FUNCTION_40	IF_2
0x4000848	      0x4c8d440701	                 lea r8, [rdi + rax + 1]	      1011	string.c	FUNCTION_40	IF_2
0x400084d	          0x4889f8	                            mov rax, rdi	      1011	string.c	FUNCTION_40	IF_2
0x4000850	            0x3a08	                      cmp cl, byte [rax]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000852	            0x7533	                           jne 0x4000887	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000854	        0x4883c001	                              add rax, 1	       971	string.c	FUNCTION_39	WHILE_1
0x4000858	          0x4c39c0	                             cmp rax, r8	       968	string.c	FUNCTION_39	WHILE_1
0x400085b	            0x75f3	                           jne 0x4000850	       968	string.c	FUNCTION_39	WHILE_1
0x400085d	          0x4489c8	                            mov eax, r9d	      1015	string.c	FUNCTION_40	IF_2
0x4000860	          0x4801c7	                            add rdi, rax	      1015	string.c	FUNCTION_40	IF_2
0x4000863	          0x4829c2	                            sub rdx, rax	      1016	string.c	FUNCTION_40	IF_2
0x4000866	      0xe965ffffff	                           jmp 0x40007d0	      1016	string.c	FUNCTION_40	IF_2
0x400086b	          0x4889f8	                            mov rax, rdi	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x400086e	              0xc3	                                     ret	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x400086f	        0x488d4708	                      lea rax, [rdi + 8]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000873	            0x3a0f	                      cmp cl, byte [rdi]	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000875	            0x75f4	                           jne 0x400086b	       969	string.c	FUNCTION_39	WHILE_1	IF_1
0x4000877	        0x4883c701	                              add rdi, 1	       971	string.c	FUNCTION_39	WHILE_1
0x400087b	          0x4839c7	                            cmp rdi, rax	       968	string.c	FUNCTION_39	WHILE_1
0x400087e	            0x75f3	                           jne 0x4000873	       968	string.c	FUNCTION_39	WHILE_1
0x4000880	            0x31c0	                            xor eax, eax	       974	string.c	FUNCTION_39
0x4000882	      0xe93effffff	                           jmp 0x40007c5	       974	string.c	FUNCTION_39
0x4000887	          0x4885c0	                           test rax, rax	      1013	string.c	FUNCTION_40	IF_2	IF_3
0x400088a	            0x74d1	                            je 0x400085d	      1013	string.c	FUNCTION_40	IF_2	IF_3
0x400088c	            0xf3c3	                                     ret	      1029	string.c	FUNCTION_40
0x400088e	          0x4889f8	                            mov rax, rdi	      1021	string.c	FUNCTION_40	WHILE_1
0x4000891	      0xe97affffff	                           jmp 0x4000810	      1021	string.c	FUNCTION_40	WHILE_1
strcspn	FOR,2:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,1:CALL,0:DO,0	26
0x4000460	        0x440fb607	                   movzx r8d, byte [rdi]	       545	string.c	FUNCTION_21	FOR_1
0x4000464	          0x4584c0	                           test r8b, r8b	       545	string.c	FUNCTION_21	FOR_1
0x4000467	            0x7439	                            je 0x40004a2	       545	string.c	FUNCTION_21	FOR_1
0x4000469	        0x440fb60e	                   movzx r9d, byte [rsi]	       545	string.c	FUNCTION_21	FOR_1
0x400046d	            0x31c0	                            xor eax, eax	       545	string.c	FUNCTION_21	FOR_1
0x400046f	          0x4584c9	                           test r9b, r9b	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x4000472	            0x741a	                            je 0x400048e	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x4000474	          0x4538c1	                            cmp r9b, r8b	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x4000477	            0x7427	                            je 0x40004a0	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x4000479	          0x4889f2	                            mov rdx, rsi	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x400047c	            0xeb05	                           jmp 0x4000483	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x400047e	          0x4438c1	                             cmp cl, r8b	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x4000481	            0x741b	                            je 0x400049e	       547	string.c	FUNCTION_21	FOR_1	FOR_2	IF_1
0x4000483	        0x4883c201	                              add rdx, 1	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x4000487	           0xfb60a	                   movzx ecx, byte [rdx]	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x400048a	            0x84c9	                             test cl, cl	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x400048c	            0x75f0	                           jne 0x400047e	       546	string.c	FUNCTION_21	FOR_1	FOR_2
0x400048e	        0x4883c001	                              add rax, 1	       550	string.c	FUNCTION_21	FOR_1
0x4000492	      0x440fb60407	             movzx r8d, byte [rdi + rax]	       545	string.c	FUNCTION_21	FOR_1
0x4000497	          0x4584c0	                           test r8b, r8b	       545	string.c	FUNCTION_21	FOR_1
0x400049a	            0x75d3	                           jne 0x400046f	       545	string.c	FUNCTION_21	FOR_1
0x400049c	            0xf3c3	                                     ret	       553	string.c	FUNCTION_21
0x400049e	            0xf3c3	                                     ret	       553	string.c	FUNCTION_21
0x40004a0	            0xf3c3	                                     ret	       553	string.c	FUNCTION_21
0x40004a2	            0x31c0	                            xor eax, eax	       543	string.c	FUNCTION_21
0x40004a4	              0xc3	                                     ret	       553	string.c	FUNCTION_21
strnlen	FOR,1:WHILE,0:ELSE,0:SWITCH,0:functions,0:IF,0:CALL,0:DO,0	20
0x40003d0	          0x4885f6	                           test rsi, rsi	       499	string.c	FUNCTION_19	FOR_1
0x40003d3	            0x742c	                            je 0x4000401	       499	string.c	FUNCTION_19	FOR_1
0x40003d5	          0x803f00	                       cmp byte [rdi], 0	       499	string.c	FUNCTION_19	FOR_1
0x40003d8	            0x7427	                            je 0x4000401	       499	string.c	FUNCTION_19	FOR_1
0x40003da	        0x488d5701	                      lea rdx, [rdi + 1]	       499	string.c	FUNCTION_19	FOR_1
0x40003de	        0x488d0437	                    lea rax, [rdi + rsi]	       499	string.c	FUNCTION_19	FOR_1
0x40003e2	            0xeb0d	                           jmp 0x40003f1	       499	string.c	FUNCTION_19	FOR_1
0x40003e4	        0x488d4a01	                      lea rcx, [rdx + 1]	       499	string.c	FUNCTION_19	FOR_1
0x40003e8	        0x8079ff00	                   cmp byte [rcx - 1], 0	       499	string.c	FUNCTION_19	FOR_1
0x40003ec	            0x740c	                            je 0x40003fa	       499	string.c	FUNCTION_19	FOR_1
0x40003ee	          0x4889ca	                            mov rdx, rcx	       499	string.c	FUNCTION_19	FOR_1
0x40003f1	          0x4839d0	                            cmp rax, rdx	       499	string.c	FUNCTION_19	FOR_1
0x40003f4	            0x75ee	                           jne 0x40003e4	       499	string.c	FUNCTION_19	FOR_1
0x40003f6	          0x4829f8	                            sub rax, rdi	       499	string.c	FUNCTION_19	FOR_1
0x40003f9	              0xc3	                                     ret	       499	string.c	FUNCTION_19	FOR_1
0x40003fa	          0x4889d0	                            mov rax, rdx	       499	string.c	FUNCTION_19	FOR_1
0x40003fd	          0x4829f8	                            sub rax, rdi	       499	string.c	FUNCTION_19	FOR_1
0x4000400	              0xc3	                                     ret	       499	string.c	FUNCTION_19	FOR_1
0x4000401	            0x31c0	                            xor eax, eax	       499	string.c	FUNCTION_19	FOR_1
0x4000403	              0xc3	                                     ret	       502	string.c	FUNCTION_19
