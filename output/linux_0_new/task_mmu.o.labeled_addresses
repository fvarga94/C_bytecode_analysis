tid_smaps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x4000440	      0xb930000000	                           mov ecx, 0x30	       256	task_mmu.c	FUNCTION_16	CALL_1
0x4000445	    0x48c7c2000000	                              mov rdx, 0	       256	task_mmu.c	FUNCTION_16	CALL_1
0x400044c	      0xe92fffffff	                  jmp sym.proc_maps_open	       256	task_mmu.c	FUNCTION_16	CALL_1
clear_refs_test_walk	ELSE,0:SWITCH,0:WHILE,0:CALL,0:IF,3:DO,0:functions,0:FOR,0	20
0x4000040	        0x488b4a38	            mov rcx, qword [rdx + 0x38] 	      1055	task_mmu.c	FUNCTION_45
0x4000044	      0xb801000000	                              mov eax, 1	      1058	task_mmu.c	FUNCTION_45	IF_1
0x4000049	        0xf6415104	               test byte [rcx + 0x51], 4	      1057	task_mmu.c	FUNCTION_45	IF_1
0x400004d	            0x7512	                           jne 0x4000061	      1057	task_mmu.c	FUNCTION_45	IF_1
0x400004f	        0x488b4240	            mov rax, qword [rdx + 0x40] 	      1066	task_mmu.c	FUNCTION_45	IF_2
0x4000053	            0x8b10	                    mov edx, dword [rax]	      1066	task_mmu.c	FUNCTION_45	IF_2
0x4000055	          0x83fa02	                              cmp edx, 2	      1066	task_mmu.c	FUNCTION_45	IF_2
0x4000058	            0x7409	                            je 0x4000063	      1066	task_mmu.c	FUNCTION_45	IF_2
0x400005a	            0x31c0	                            xor eax, eax	      1070	task_mmu.c	FUNCTION_45
0x400005c	          0x83fa03	                              cmp edx, 3	      1068	task_mmu.c	FUNCTION_45	IF_3
0x400005f	            0x7410	                            je 0x4000071	      1068	task_mmu.c	FUNCTION_45	IF_3
0x4000061	            0xf3c3	                                     ret	      1071	task_mmu.c	FUNCTION_45
0x4000063	            0x31c0	                            xor eax, eax	      1058	task_mmu.c	FUNCTION_45	IF_1
0x4000065	    0x4883b9a00000	               cmp qword [rcx + 0xa0], 0	      1058	task_mmu.c	FUNCTION_45	IF_1
0x400006d	           0xf95c0	                                setne al	      1058	task_mmu.c	FUNCTION_45	IF_1
0x4000070	              0xc3	                                     ret	      1058	task_mmu.c	FUNCTION_45	IF_1
0x4000071	            0x31c0	                            xor eax, eax	      1058	task_mmu.c	FUNCTION_45	IF_1
0x4000073	    0x4883b9a00000	               cmp qword [rcx + 0xa0], 0	      1058	task_mmu.c	FUNCTION_45	IF_1
0x400007b	           0xf94c0	                                 sete al	      1058	task_mmu.c	FUNCTION_45	IF_1
0x400007e	              0xc3	                                     ret	      1071	task_mmu.c	FUNCTION_45
pid_smaps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x4000420	      0xb930000000	                           mov ecx, 0x30	       256	task_mmu.c	FUNCTION_16	CALL_1
0x4000425	    0x48c7c2000000	                              mov rdx, 0	       256	task_mmu.c	FUNCTION_16	CALL_1
0x400042c	      0xe94fffffff	                  jmp sym.proc_maps_open	       256	task_mmu.c	FUNCTION_16	CALL_1
arch_show_smap	ELSE,0:SWITCH,0:WHILE,0:CALL,0:IF,0:DO,0:functions,0:FOR,0	1
0x40021c0	            0xf3c3	                                     ret	       731	task_mmu.c	FUNCTION_33
pid_maps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x40003f0	      0xb930000000	                           mov ecx, 0x30	       256	task_mmu.c	FUNCTION_16	CALL_1
0x40003f5	    0x48c7c2000000	                              mov rdx, 0	       256	task_mmu.c	FUNCTION_16	CALL_1
0x40003fc	            0xeb82	                  jmp sym.proc_maps_open	       256	task_mmu.c	FUNCTION_16	CALL_1
proc_maps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,5:IF,2:DO,0:functions,0:FOR,0	34
0x4000380	            0x4155	                                push r13	       223	task_mmu.c	FUNCTION_14
0x4000382	          0x4989f5	                            mov r13, rsi	       223	task_mmu.c	FUNCTION_14
0x4000385	            0x4154	                                push r12	       223	task_mmu.c	FUNCTION_14
0x4000387	              0x55	                                push rbp	       223	task_mmu.c	FUNCTION_14
0x4000388	              0x53	                                push rbx	       223	task_mmu.c	FUNCTION_14
0x4000389	          0x4889d6	                            mov rsi, rdx	       223	task_mmu.c	FUNCTION_14
0x400038c	          0x4889fd	                            mov rbp, rdi	       223	task_mmu.c	FUNCTION_14
0x400038f	            0x89ca	                            mov edx, ecx	       223	task_mmu.c	FUNCTION_14
0x4000391	          0x4c89ef	                            mov rdi, r13	       224	task_mmu.c	FUNCTION_14	CALL_1
0x4000394	      0xe800000000	                          call 0x4000399	       224	task_mmu.c	FUNCTION_14	CALL_1
0x4000399	          0x4885c0	                           test rax, rax	       226	task_mmu.c	FUNCTION_14	IF_1
0x400039c	            0x743c	                            je 0x40003da	       226	task_mmu.c	FUNCTION_14	IF_1
0x400039e	          0x488928	                    mov qword [rax], rbp	       229	task_mmu.c	FUNCTION_14
0x40003a1	      0xbe01000000	                              mov esi, 1	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003a6	          0x4889ef	                            mov rdi, rbp	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003a9	          0x4889c3	                            mov rbx, rax	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003ac	      0xe800000000	                          call 0x40003b1	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003b1	          0x4989c4	                            mov r12, rax	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003b4	        0x48894310	             mov qword [rbx + 0x10], rax	       230	task_mmu.c	FUNCTION_14	CALL_2
0x40003b8	            0x31c0	                            xor eax, eax	       238	task_mmu.c	FUNCTION_14
0x40003ba	    0x4981fc00f0ff	             cmp r12, 0xfffffffffffff000	       231	task_mmu.c	FUNCTION_14	IF_2	CALL_3
0x40003c1	            0x7707	                            ja 0x40003ca	       231	task_mmu.c	FUNCTION_14	IF_2	CALL_3
0x40003c3	              0x5b	                                 pop rbx	       239	task_mmu.c	FUNCTION_14
0x40003c4	              0x5d	                                 pop rbp	       239	task_mmu.c	FUNCTION_14
0x40003c5	            0x415c	                                 pop r12	       239	task_mmu.c	FUNCTION_14
0x40003c7	            0x415d	                                 pop r13	       239	task_mmu.c	FUNCTION_14
0x40003c9	              0xc3	                                     ret	       239	task_mmu.c	FUNCTION_14
0x40003ca	          0x4c89ee	                            mov rsi, r13	       234	task_mmu.c	FUNCTION_14	IF_2	CALL_5
0x40003cd	          0x4889ef	                            mov rdi, rbp	       234	task_mmu.c	FUNCTION_14	IF_2	CALL_5
0x40003d0	      0xe800000000	                          call 0x40003d5	       234	task_mmu.c	FUNCTION_14	IF_2	CALL_5
0x40003d5	          0x4489e0	                           mov eax, r12d	       235	task_mmu.c	FUNCTION_14	IF_2
0x40003d8	            0xebe9	                           jmp 0x40003c3	       235	task_mmu.c	FUNCTION_14	IF_2
0x40003da	      0xb8f4ffffff	                     mov eax, 0xfffffff4	       227	task_mmu.c	FUNCTION_14	IF_1
0x40003df	            0xebe2	                           jmp 0x40003c3	       227	task_mmu.c	FUNCTION_14	IF_1
tid_numa_maps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x4000480	      0xb968020000	                          mov ecx, 0x268	      1834	task_mmu.c	FUNCTION_65	CALL_1
0x4000485	    0x48c7c2000000	                              mov rdx, 0	      1834	task_mmu.c	FUNCTION_65	CALL_1
0x400048c	      0xe9effeffff	                  jmp sym.proc_maps_open	      1834	task_mmu.c	FUNCTION_65	CALL_1
m_next	ELSE,0:SWITCH,0:WHILE,0:CALL,2:IF,1:DO,0:functions,0:FOR,0	15
0x4000240	        0x488b7f78	            mov rdi, qword [rdi + 0x78] 	       199	task_mmu.c	FUNCTION_12
0x4000244	        0x48830201	                      add qword [rdx], 1	       202	task_mmu.c	FUNCTION_12
0x4000248	        0x488b5720	            mov rdx, qword [rdi + 0x20] 	       202	task_mmu.c	FUNCTION_12
0x400024c	          0x4839d6	                            cmp rsi, rdx	       137	task_mmu.c	FUNCTION_9	IF_1
0x400024f	            0x7413	                            je 0x4000264	       137	task_mmu.c	FUNCTION_9	IF_1
0x4000251	        0x488b4610	            mov rax, qword [rsi + 0x10] 	       139	task_mmu.c	FUNCTION_9
0x4000255	          0x4885c0	                           test rax, rax	       139	task_mmu.c	FUNCTION_9
0x4000258	            0x7402	                            je 0x400025c	       139	task_mmu.c	FUNCTION_9
0x400025a	            0xf3c3	                                     ret	       207	task_mmu.c	FUNCTION_12
0x400025c	          0x4885d2	                           test rdx, rdx	       204	task_mmu.c	FUNCTION_12	IF_1
0x400025f	          0x4889d0	                            mov rax, rdx	       204	task_mmu.c	FUNCTION_12	IF_1
0x4000262	            0x75f6	                           jne 0x400025a	       204	task_mmu.c	FUNCTION_12	IF_1
0x4000264	      0xe8a7ffffff	                       call sym.vma_stop	       205	task_mmu.c	FUNCTION_12	CALL_2
0x4000269	            0x31c0	                            xor eax, eax	       205	task_mmu.c	FUNCTION_12	CALL_2
0x400026b	              0xc3	                                     ret	       207	task_mmu.c	FUNCTION_12
tid_maps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x4000400	      0xb930000000	                           mov ecx, 0x30	       256	task_mmu.c	FUNCTION_16	CALL_1
0x4000405	    0x48c7c2000000	                              mov rdx, 0	       256	task_mmu.c	FUNCTION_16	CALL_1
0x400040c	      0xe96fffffff	                  jmp sym.proc_maps_open	       256	task_mmu.c	FUNCTION_16	CALL_1
task_vsize	ELSE,0:SWITCH,0:WHILE,0:CALL,0:IF,0:DO,0:functions,0:FOR,0	3
0x4002130	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	        83	task_mmu.c	FUNCTION_2
0x4002137	        0x48c1e00c	                            shl rax, 0xc	        83	task_mmu.c	FUNCTION_2
0x400213b	              0xc3	                                     ret	        84	task_mmu.c	FUNCTION_2
pagemap_open	ELSE,0:SWITCH,0:WHILE,0:CALL,3:IF,1:DO,0:functions,0:FOR,0	10
0x40004a0	              0x53	                                push rbx	      1534	task_mmu.c	FUNCTION_54
0x40004a1	          0x4889f3	                            mov rbx, rsi	      1534	task_mmu.c	FUNCTION_54
0x40004a4	      0xbe01000000	                              mov esi, 1	      1537	task_mmu.c	FUNCTION_54	CALL_1
0x40004a9	      0xe800000000	                          call 0x40004ae	      1537	task_mmu.c	FUNCTION_54	CALL_1
0x40004ae	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	      1538	task_mmu.c	FUNCTION_54	IF_1	CALL_2
0x40004b4	            0x7709	                            ja 0x40004bf	      1538	task_mmu.c	FUNCTION_54	IF_1	CALL_2
0x40004b6	    0x488983c80000	             mov qword [rbx + 0xc8], rax	      1540	task_mmu.c	FUNCTION_54
0x40004bd	            0x31c0	                            xor eax, eax	      1541	task_mmu.c	FUNCTION_54
0x40004bf	              0x5b	                                 pop rbx	      1542	task_mmu.c	FUNCTION_54
0x40004c0	              0xc3	                                     ret	      1542	task_mmu.c	FUNCTION_54
pagemap_pte_hole	ELSE,1:SWITCH,0:WHILE,1:CALL,7:IF,5:DO,0:functions,0:FOR,2	82
0x4000270	          0x4839f7	                            cmp rdi, rsi	      1210	task_mmu.c	FUNCTION_49	WHILE_1
0x4000273	            0x4155	                                push r13	      1205	task_mmu.c	FUNCTION_49
0x4000275	          0x4989d5	                            mov r13, rdx	      1205	task_mmu.c	FUNCTION_49
0x4000278	            0x4154	                                push r12	      1205	task_mmu.c	FUNCTION_49
0x400027a	          0x4989f4	                            mov r12, rsi	      1205	task_mmu.c	FUNCTION_49
0x400027d	              0x55	                                push rbp	      1205	task_mmu.c	FUNCTION_49
0x400027e	          0x4889fd	                            mov rbp, rdi	      1205	task_mmu.c	FUNCTION_49
0x4000281	              0x53	                                push rbx	      1205	task_mmu.c	FUNCTION_49
0x4000282	        0x488b5a40	            mov rbx, qword [rdx + 0x40] 	      1206	task_mmu.c	FUNCTION_49
0x4000286	     0xf83e0000000	                           jae 0x400036c	      1210	task_mmu.c	FUNCTION_49	WHILE_1
0x400028c	        0x498b7d30	            mov rdi, qword [r13 + 0x30] 	      1211	task_mmu.c	FUNCTION_49	WHILE_1	CALL_1
0x4000290	          0x4889ee	                            mov rsi, rbp	      1211	task_mmu.c	FUNCTION_49	WHILE_1	CALL_1
0x4000293	      0xe800000000	                          call 0x4000298	      1211	task_mmu.c	FUNCTION_49	WHILE_1	CALL_1
0x4000298	          0x4885c0	                           test rax, rax	      1216	task_mmu.c	FUNCTION_49	WHILE_1	IF_1
0x400029b	     0xf84cf000000	                            je 0x4000370	      1216	task_mmu.c	FUNCTION_49	WHILE_1	IF_1
0x40002a1	          0x4c3920	                    cmp qword [rax], r12	      1217	task_mmu.c	FUNCTION_49	WHILE_1	CALL_3
0x40002a4	          0x4d89e0	                             mov r8, r12	      1217	task_mmu.c	FUNCTION_49	WHILE_1	CALL_3
0x40002a7	        0x4c0f4600	                  cmovbe r8, qword [rax]	      1217	task_mmu.c	FUNCTION_49	WHILE_1	CALL_3
0x40002ab	          0x4939e8	                             cmp r8, rbp	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002ae	            0x7652	                           jbe 0x4000302	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002b0	          0x486313	                 movsxd rdx, dword [rbx]	      1197	task_mmu.c	FUNCTION_48
0x40002b3	        0x488b4b08	                mov rcx, qword [rbx + 8]	      1197	task_mmu.c	FUNCTION_48
0x40002b7	          0x8d7201	                      lea esi, [rdx + 1]	      1197	task_mmu.c	FUNCTION_48
0x40002ba	            0x8933	                    mov dword [rbx], esi	      1197	task_mmu.c	FUNCTION_48
0x40002bc	    0x48c704d10000	              mov qword [rcx + rdx*8], 0	      1197	task_mmu.c	FUNCTION_48
0x40002c4	          0x48630b	                 movsxd rcx, dword [rbx]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002c7	          0x3b4b04	                cmp ecx, dword [rbx + 4]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002ca	            0x7d25	                           jge 0x40002f1	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002cc	    0x4881c5001000	                         add rbp, 0x1000	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002d3	          0x4c39c5	                             cmp rbp, r8	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002d6	            0x7325	                           jae 0x40002fd	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002d8	        0x488b7308	                mov rsi, qword [rbx + 8]	      1197	task_mmu.c	FUNCTION_48
0x40002dc	          0x8d7901	                      lea edi, [rcx + 1]	      1197	task_mmu.c	FUNCTION_48
0x40002df	            0x893b	                    mov dword [rbx], edi	      1197	task_mmu.c	FUNCTION_48
0x40002e1	    0x48c704ce0000	              mov qword [rsi + rcx*8], 0	      1197	task_mmu.c	FUNCTION_48
0x40002e9	          0x48630b	                 movsxd rcx, dword [rbx]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002ec	          0x3b4b04	                cmp ecx, dword [rbx + 4]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002ef	            0x7cdb	                            jl 0x40002cc	      1198	task_mmu.c	FUNCTION_48	IF_1
0x40002f1	      0xb801000000	                              mov eax, 1	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x40002f6	              0x5b	                                 pop rbx	      1241	task_mmu.c	FUNCTION_49
0x40002f7	              0x5d	                                 pop rbp	      1241	task_mmu.c	FUNCTION_49
0x40002f8	            0x415c	                                 pop r12	      1241	task_mmu.c	FUNCTION_49
0x40002fa	            0x415d	                                 pop r13	      1241	task_mmu.c	FUNCTION_49
0x40002fc	              0xc3	                                     ret	      1241	task_mmu.c	FUNCTION_49
0x40002fd	          0x4885c0	                           test rax, rax	      1227	task_mmu.c	FUNCTION_49	WHILE_1	IF_3
0x4000300	            0x746a	                            je 0x400036c	      1227	task_mmu.c	FUNCTION_49	WHILE_1	IF_3
0x4000302	        0x4c396008	                cmp qword [rax + 8], r12	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000306	          0x4c89e2	                            mov rdx, r12	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000309	      0x480f465008	             cmovbe rdx, qword [rax + 8]	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x400030e	          0x4839ea	                            cmp rdx, rbp	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000311	            0x7650	                           jbe 0x4000363	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000313	          0x486313	                 movsxd rdx, dword [rbx]	      1197	task_mmu.c	FUNCTION_48
0x4000316	        0x488b4b08	                mov rcx, qword [rbx + 8]	      1197	task_mmu.c	FUNCTION_48
0x400031a	          0x8d7201	                      lea esi, [rdx + 1]	      1197	task_mmu.c	FUNCTION_48
0x400031d	            0x8933	                    mov dword [rbx], esi	      1197	task_mmu.c	FUNCTION_48
0x400031f	    0x48c704d10000	              mov qword [rcx + rdx*8], 0	      1197	task_mmu.c	FUNCTION_48
0x4000327	            0x8b3b	                    mov edi, dword [rbx]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x4000329	          0x397b04	                cmp dword [rbx + 4], edi	      1198	task_mmu.c	FUNCTION_48	IF_1
0x400032c	            0x7ec3	                           jle 0x40002f1	      1198	task_mmu.c	FUNCTION_48	IF_1
0x400032e	    0x4881c5001000	                         add rbp, 0x1000	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000335	        0x4c396008	                cmp qword [rax + 8], r12	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000339	          0x4c89e2	                            mov rdx, r12	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x400033c	      0x480f465008	             cmovbe rdx, qword [rax + 8]	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000341	          0x4839ea	                            cmp rdx, rbp	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000344	            0x761d	                           jbe 0x4000363	      1233	task_mmu.c	FUNCTION_49	WHILE_1	FOR_2	CALL_6
0x4000346	          0x48630b	                 movsxd rcx, dword [rbx]	      1197	task_mmu.c	FUNCTION_48
0x4000349	        0x488b5308	                mov rdx, qword [rbx + 8]	      1197	task_mmu.c	FUNCTION_48
0x400034d	          0x8d7101	                      lea esi, [rcx + 1]	      1197	task_mmu.c	FUNCTION_48
0x4000350	            0x8933	                    mov dword [rbx], esi	      1197	task_mmu.c	FUNCTION_48
0x4000352	    0x48c704ca0000	              mov qword [rdx + rcx*8], 0	      1197	task_mmu.c	FUNCTION_48
0x400035a	          0x8b7b04	                mov edi, dword [rbx + 4]	      1198	task_mmu.c	FUNCTION_48	IF_1
0x400035d	            0x393b	                    cmp dword [rbx], edi	      1198	task_mmu.c	FUNCTION_48	IF_1
0x400035f	            0x7ccd	                            jl 0x400032e	      1198	task_mmu.c	FUNCTION_48	IF_1
0x4000361	            0xeb8e	                           jmp 0x40002f1	      1198	task_mmu.c	FUNCTION_48	IF_1
0x4000363	          0x4939ec	                            cmp r12, rbp	      1210	task_mmu.c	FUNCTION_49	WHILE_1
0x4000366	     0xf8720ffffff	                            ja 0x400028c	      1210	task_mmu.c	FUNCTION_49	WHILE_1
0x400036c	            0x31c0	                            xor eax, eax	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x400036e	            0xeb86	                           jmp 0x40002f6	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x4000370	          0x4939ec	                            cmp r12, rbp	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x4000373	            0x76f7	                           jbe 0x400036c	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x4000375	          0x4d89e0	                             mov r8, r12	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
0x4000378	      0xe933ffffff	                           jmp 0x40002b0	      1221	task_mmu.c	FUNCTION_49	WHILE_1	ELSE_1	FOR_1
smaps_pte_hole	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	13
0x40004d0	              0x53	                                push rbx	       509	task_mmu.c	ELSE_4	FUNCTION_26
0x40004d1	        0x488b5a40	            mov rbx, qword [rdx + 0x40] 	       510	task_mmu.c	ELSE_4	FUNCTION_26
0x40004d5	          0x4889f8	                            mov rax, rdi	       509	task_mmu.c	ELSE_4	FUNCTION_26
0x40004d8	        0x488b5238	            mov rdx, qword [rdx + 0x38] 	       513	task_mmu.c	ELSE_4	FUNCTION_26
0x40004dc	    0x488b92a00000	            mov rdx, qword [rdx + 0xa0] 	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004e3	    0x488bbaf00000	            mov rdi, qword [rdx + 0xf0] 	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004ea	          0x4889f2	                            mov rdx, rsi	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004ed	          0x4889c6	                            mov rsi, rax	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004f0	      0xe800000000	                          call 0x40004f5	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004f5	        0x48014358	            add qword [rbx + 0x58], rax 	       512	task_mmu.c	ELSE_4	FUNCTION_26	CALL_1
0x40004f9	            0x31c0	                            xor eax, eax	       516	task_mmu.c	ELSE_4	FUNCTION_26
0x40004fb	              0x5b	                                 pop rbx	       516	task_mmu.c	ELSE_4	FUNCTION_26
0x40004fc	              0xc3	                                     ret	       516	task_mmu.c	ELSE_4	FUNCTION_26
pid_numa_maps_open	ELSE,0:SWITCH,0:WHILE,0:CALL,1:IF,0:DO,0:functions,0:FOR,0	3
0x4000460	      0xb968020000	                          mov ecx, 0x268	      1834	task_mmu.c	FUNCTION_65	CALL_1
0x4000465	    0x48c7c2000000	                              mov rdx, 0	      1834	task_mmu.c	FUNCTION_65	CALL_1
0x400046c	      0xe90fffffff	                  jmp sym.proc_maps_open	      1834	task_mmu.c	FUNCTION_65	CALL_1
