proc_tid_base_lookup	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003170	      0xb926000000	                           mov ecx, 0x26	      3411	base.c	FUNCTION_114	CALL_1
0x4003175	    0x48c7c2000000	                              mov rdx, 0	      3411	base.c	FUNCTION_114	CALL_1
0x400317c	      0xe90fffffff	              jmp sym.proc_pident_lookup	      3411	base.c	FUNCTION_114	CALL_1
pid_update_inode	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	14
0x4002ef0	              0x55	                                push rbp	      1813	base.c	FUNCTION_63
0x4002ef1	        0x488d4e08	                      lea rcx, [rsi + 8]	      1814	base.c	FUNCTION_63	CALL_1
0x4002ef5	              0x53	                                push rbx	      1813	base.c	FUNCTION_63
0x4002ef6	        0x488d5604	                      lea rdx, [rsi + 4]	      1814	base.c	FUNCTION_63	CALL_1
0x4002efa	          0x4889f3	                            mov rbx, rsi	      1813	base.c	FUNCTION_63
0x4002efd	           0xfb736	                   movzx esi, word [rsi]	      1814	base.c	FUNCTION_63	CALL_1
0x4002f00	          0x4889fd	                            mov rbp, rdi	      1813	base.c	FUNCTION_63
0x4002f03	      0xe800000000	                          call 0x4002f08	      1814	base.c	FUNCTION_63	CALL_1
0x4002f08	      0x668123fff3	                  and word [rbx], 0xf3ff	      1816	base.c	FUNCTION_63
0x4002f0d	          0x4889de	                            mov rsi, rbx	      1817	base.c	FUNCTION_63	CALL_2
0x4002f10	          0x4889ef	                            mov rdi, rbp	      1817	base.c	FUNCTION_63	CALL_2
0x4002f13	              0x5b	                                 pop rbx	      1818	base.c	FUNCTION_63
0x4002f14	              0x5d	                                 pop rbp	      1818	base.c	FUNCTION_63
0x4002f15	      0xe900000000	                           jmp 0x4002f1a	      1817	base.c	FUNCTION_63	CALL_2
auxv_read	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,1:IF,1:functions,0:ELSE,0	18
0x4000190	          0x4989f1	                             mov r9, rsi	       986	base.c	FUNCTION_34
0x4000193	          0x4889d6	                            mov rsi, rdx	       986	base.c	FUNCTION_34
0x4000196	          0x4889ca	                            mov rdx, rcx	       986	base.c	FUNCTION_34
0x4000199	    0x488b8fc80000	            mov rcx, qword [rdi + 0xc8] 	       987	base.c	FUNCTION_34
0x40001a0	          0x4885c9	                           test rcx, rcx	       990	base.c	FUNCTION_34	IF_1
0x40001a3	            0x7428	                            je 0x40001cd	       990	base.c	FUNCTION_34	IF_1
0x40001a5	    0x4881c1480100	                          add rcx, 0x148	       990	base.c	FUNCTION_34	IF_1
0x40001ac	          0x4531c0	                            xor r8d, r8d	       990	base.c	FUNCTION_34	IF_1
0x40001af	          0x4889c8	                            mov rax, rcx	       990	base.c	FUNCTION_34	IF_1
0x40001b2	        0x4883c010	                           add rax, 0x10	       990	base.c	FUNCTION_34	IF_1
0x40001b6	        0x4183c002	                              add r8d, 2	       993	base.c	FUNCTION_34	DO_1
0x40001ba	      0x488378f000	               cmp qword [rax - 0x10], 0	       994	base.c	FUNCTION_34	DO_1
0x40001bf	            0x75f1	                           jne 0x40001b2	       994	base.c	FUNCTION_34	DO_1
0x40001c1	        0x49c1e003	                               shl r8, 3	       995	base.c	FUNCTION_34	CALL_1
0x40001c5	          0x4c89cf	                             mov rdi, r9	       995	base.c	FUNCTION_34	CALL_1
0x40001c8	      0xe900000000	                           jmp 0x40001cd	       995	base.c	FUNCTION_34	CALL_1
0x40001cd	            0x31c0	                            xor eax, eax	       997	base.c	FUNCTION_34
0x40001cf	              0xc3	                                     ret	       997	base.c	FUNCTION_34
comm_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	4
0x4000120	          0x4889fa	                            mov rdx, rdi	      1576	base.c	FUNCTION_55
0x4000123	          0x4889f7	                            mov rdi, rsi	      1576	base.c	FUNCTION_55
0x4000126	    0x48c7c6000000	                              mov rsi, 0	      1577	base.c	FUNCTION_55	CALL_1
0x400012d	      0xe900000000	                           jmp 0x4000132	      1577	base.c	FUNCTION_55	CALL_1
proc_map_files_instantiate	SWITCH,0:WHILE,0:CALL,5:FOR,0:DO,0:IF,1:functions,0:ELSE,0	36
0x4002d30	            0x89d0	                            mov eax, edx	      2081	base.c	FUNCTION_72	CALL_1
0x4002d32	              0x55	                                push rbp	      2076	base.c	FUNCTION_72
0x4002d33	          0x4889fd	                            mov rbp, rdi	      2076	base.c	FUNCTION_72
0x4002d36	          0x83e001	                              and eax, 1	      2081	base.c	FUNCTION_72	CALL_1
0x4002d39	              0x53	                                push rbx	      2076	base.c	FUNCTION_72
0x4002d3a	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	      2081	base.c	FUNCTION_72	CALL_1
0x4002d3e	          0x83f801	                              cmp eax, 1	      2081	base.c	FUNCTION_72	CALL_1
0x4002d41	            0x19c9	                            sbb ecx, ecx	      2081	base.c	FUNCTION_72	CALL_1
0x4002d43	          0x83e202	                              and edx, 2	      2081	base.c	FUNCTION_72	CALL_1
0x4002d46	            0x30c9	                              xor cl, cl	      2081	base.c	FUNCTION_72	CALL_1
0x4002d48	      0x6681e9005f	                          sub cx, 0x5f00	      2081	base.c	FUNCTION_72	CALL_1
0x4002d4d	          0x83fa01	                              cmp edx, 1	      2081	base.c	FUNCTION_72	CALL_1
0x4002d50	            0x19c0	                            sbb eax, eax	      2081	base.c	FUNCTION_72	CALL_1
0x4002d52	            0xf7d0	                                 not eax	      2081	base.c	FUNCTION_72	CALL_1
0x4002d54	        0x66258000	                            and ax, 0x80	      2081	base.c	FUNCTION_72	CALL_1
0x4002d58	             0x9c8	                             or eax, ecx	      2081	base.c	FUNCTION_72	CALL_1
0x4002d5a	           0xfb7d0	                           movzx edx, ax	      2081	base.c	FUNCTION_72	CALL_1
0x4002d5d	      0xe800000000	                          call 0x4002d62	      2081	base.c	FUNCTION_72	CALL_1
0x4002d62	          0x4885c0	                           test rax, rax	      2084	base.c	FUNCTION_72	IF_1
0x4002d65	            0x7437	                            je 0x4002d9e	      2084	base.c	FUNCTION_72	IF_1
0x4002d67	          0x4889c3	                            mov rbx, rax	      2084	base.c	FUNCTION_72	IF_1
0x4002d6a	          0x4889ef	                            mov rdi, rbp	      2093	base.c	FUNCTION_72	CALL_4
0x4002d6d	    0x48c7c6000000	                              mov rsi, 0	      2093	base.c	FUNCTION_72	CALL_4
0x4002d74	    0x48c740c80000	               mov qword [rax - 0x38], 0	      2088	base.c	FUNCTION_72
0x4002d7c	    0x48c740200000	               mov qword [rax + 0x20], 0	      2090	base.c	FUNCTION_72
0x4002d84	    0x48c740504000	           mov qword [rax + 0x50], 0x40 	      2091	base.c	FUNCTION_72
0x4002d8c	      0xe800000000	                          call 0x4002d91	      2093	base.c	FUNCTION_72	CALL_4
0x4002d91	          0x4889ee	                            mov rsi, rbp	      2094	base.c	FUNCTION_72	CALL_5
0x4002d94	          0x4889df	                            mov rdi, rbx	      2094	base.c	FUNCTION_72	CALL_5
0x4002d97	              0x5b	                                 pop rbx	      2095	base.c	FUNCTION_72
0x4002d98	              0x5d	                                 pop rbp	      2095	base.c	FUNCTION_72
0x4002d99	      0xe900000000	                           jmp 0x4002d9e	      2094	base.c	FUNCTION_72	CALL_5
0x4002d9e	    0x48c7c0feffff	             mov rax, 0xfffffffffffffffe	      2095	base.c	FUNCTION_72
0x4002da5	              0x5b	                                 pop rbx	      2095	base.c	FUNCTION_72
0x4002da6	              0x5d	                                 pop rbp	      2095	base.c	FUNCTION_72
0x4002da7	              0xc3	                                     ret	      2095	base.c	FUNCTION_72
mem_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	11
0x4002970	              0x53	                                push rbx	       796	base.c	FUNCTION_25
0x4002971	          0x4889f3	                            mov rbx, rsi	       796	base.c	FUNCTION_25
0x4002974	      0xbe02000000	                              mov esi, 2	       786	base.c	FUNCTION_24	CALL_1
0x4002979	      0xe800000000	                          call 0x400297e	       786	base.c	FUNCTION_24	CALL_1
0x400297e	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x4002984	            0x7709	                            ja 0x400298f	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x4002986	    0x488983c80000	             mov qword [rbx + 0xc8], rax	       791	base.c	FUNCTION_24
0x400298d	            0x31c0	                            xor eax, eax	       792	base.c	FUNCTION_24
0x400298f	    0x814b44002000	           or dword [rbx + 0x44], 0x2000	       800	base.c	FUNCTION_25
0x4002996	              0x5b	                                 pop rbx	       803	base.c	FUNCTION_25
0x4002997	              0xc3	                                     ret	       803	base.c	FUNCTION_25
set_proc_pid_nlink	SWITCH,0:WHILE,0:CALL,4:FOR,0:DO,0:IF,0:functions,0:ELSE,0	31
0x4000040	            0x85d2	                           test edx, edx	       874	base.c	FUNCTION_29	SWITCH_1
0x4000042	            0x7419	                            je 0x400005d	       874	base.c	FUNCTION_29	SWITCH_1
0x4000044	          0x83fa01	                              cmp edx, 1	       874	base.c	FUNCTION_29	SWITCH_1
0x4000047	            0x750c	                           jne 0x4000055	       874	base.c	FUNCTION_29	SWITCH_1
0x4000049	          0x4889f0	                            mov rax, rsi	       879	base.c	FUNCTION_29	SWITCH_1
0x400004c	        0x48034768	             add rax, qword [rdi + 0x68]	       879	base.c	FUNCTION_29	SWITCH_1
0x4000050	        0x48894768	             mov qword [rdi + 0x68], rax	       879	base.c	FUNCTION_29	SWITCH_1
0x4000054	              0xc3	                                     ret	       885	base.c	FUNCTION_29
0x4000055	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	       882	base.c	FUNCTION_29	SWITCH_1
0x400005c	              0xc3	                                     ret	       886	base.c	FUNCTION_29
0x400005d	        0x48897768	             mov qword [rdi + 0x68], rsi	       876	base.c	FUNCTION_29	SWITCH_1
0x4000061	          0x4889f0	                            mov rax, rsi	       877	base.c	FUNCTION_29	SWITCH_1
0x4000064	              0xc3	                                     ret	       877	base.c	FUNCTION_29	SWITCH_1
0x4000065	              0x90	                                     nop	       877	base.c	FUNCTION_29	SWITCH_1
0x4000066	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       877	base.c	FUNCTION_29	SWITCH_1
0x4000070	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       114	internal.h	FUNCTION_125	CALL_1
0x4000074	        0x488b40b8	             mov rax, qword [rax - 0x48]	      1846	base.c	FUNCTION_65	CALL_1
0x4000078	      0x4883780800	                  cmp qword [rax + 8], 0	      1855	base.c	FUNCTION_66	CALL_2
0x400007d	           0xf94c0	                                 sete al	      1855	base.c	FUNCTION_66	CALL_2
0x4000080	           0xfb6c0	                           movzx eax, al	      1855	base.c	FUNCTION_66	CALL_2
0x4000083	              0xc3	                                     ret	      1856	base.c	FUNCTION_66
0x4000084	            0x6690	                                     nop	      1856	base.c	FUNCTION_66
0x4000086	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1856	base.c	FUNCTION_66
0x4000090	              0x55	                                push rbp	       667	base.c	FUNCTION_18
0x4000091	              0x53	                                push rbx	       667	base.c	FUNCTION_18
0x4000092	      0xb8ffffffff	                     mov eax, 0xffffffff	       672	base.c	FUNCTION_18	IF_1
0x4000097	        0x4883ec08	                              sub rsp, 8	       667	base.c	FUNCTION_18
0x400009b	          0xf60601	                      test byte [rsi], 1	       671	base.c	FUNCTION_18	IF_1
0x400009e	        0x488b6f30	            mov rbp, qword [rdi + 0x30] 	       671	base.c	FUNCTION_18	IF_1
0x40000a2	            0x752c	                           jne 0x40000d0	       671	base.c	FUNCTION_18	IF_1
0x40000a4	              0x48	                                 invalid	       671	base.c	FUNCTION_18	IF_1
auxv_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	10
0x40029a0	              0x53	                                push rbx	       980	base.c	FUNCTION_33
0x40029a1	          0x4889f3	                            mov rbx, rsi	       980	base.c	FUNCTION_33
0x40029a4	      0xbe09000000	                              mov esi, 9	       786	base.c	FUNCTION_24	CALL_1
0x40029a9	      0xe800000000	                          call 0x40029ae	       786	base.c	FUNCTION_24	CALL_1
0x40029ae	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x40029b4	            0x7709	                            ja 0x40029bf	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x40029b6	    0x488983c80000	             mov qword [rbx + 0xc8], rax	       791	base.c	FUNCTION_24
0x40029bd	            0x31c0	                            xor eax, eax	       792	base.c	FUNCTION_24
0x40029bf	              0x5b	                                 pop rbx	       982	base.c	FUNCTION_33
0x40029c0	              0xc3	                                     ret	       982	base.c	FUNCTION_33
mem_write	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4002710	    0x488bbfc80000	            mov rdi, qword [rdi + 0xc8] 	       869	base.c	FUNCTION_28	CALL_1
0x4002717	    0x41b801000000	                              mov r8d, 1	       869	base.c	FUNCTION_28	CALL_1
0x400271d	      0xe96efeffff	                  jmp sym.mem_rw.isra.20	       869	base.c	FUNCTION_28	CALL_1
proc_tid_base_readdir	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003c00	      0xb926000000	                           mov ecx, 0x26	      3405	base.c	FUNCTION_113	CALL_1
0x4003c05	    0x48c7c2000000	                              mov rdx, 0	      3405	base.c	FUNCTION_113	CALL_1
0x4003c0c	      0xe92ffeffff	             jmp sym.proc_pident_readdir	      3405	base.c	FUNCTION_113	CALL_1
proc_pid_get_link	SWITCH,0:WHILE,0:CALL,6:FOR,0:DO,0:IF,3:functions,0:ELSE,0	37
0x4000cd0	              0x55	                                push rbp	      1610	base.c	ELSE_1	FUNCTION_57
0x4000cd1	              0x53	                                push rbx	      1610	base.c	ELSE_1	FUNCTION_57
0x4000cd2	        0x4883ec18	                           sub rsp, 0x18	      1610	base.c	ELSE_1	FUNCTION_57
0x4000cd6	    0x65488b042528	                mov rax, qword gs:[0x28]	      1610	base.c	ELSE_1	FUNCTION_57
0x4000cdf	      0x4889442410	             mov qword [rsp + 0x10], rax	      1610	base.c	ELSE_1	FUNCTION_57
0x4000ce4	            0x31c0	                            xor eax, eax	      1610	base.c	ELSE_1	FUNCTION_57
0x4000ce6	          0x4885ff	                           test rdi, rdi	      1614	base.c	ELSE_1	FUNCTION_57	IF_1
0x4000ce9	    0x48c7c0f6ffff	             mov rax, 0xfffffffffffffff6	      1615	base.c	ELSE_1	FUNCTION_57	CALL_1
0x4000cf0	            0x741c	                            je 0x4000d0e	      1614	base.c	ELSE_1	FUNCTION_57	IF_1
0x4000cf2	          0x4889fb	                            mov rbx, rdi	      1614	base.c	ELSE_1	FUNCTION_57	IF_1
0x4000cf5	          0x4889f7	                            mov rdi, rsi	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000cf8	          0x4889f5	                            mov rbp, rsi	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000cfb	      0xe8a0feffff	         call sym.proc_fd_access_allowed	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000d00	            0x85c0	                           test eax, eax	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000d02	    0x48c7c2f3ffff	             mov rdx, 0xfffffffffffffff3	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000d09	            0x751a	                           jne 0x4000d25	      1618	base.c	ELSE_1	FUNCTION_57	IF_2	CALL_2
0x4000d0b	          0x4889d0	                            mov rax, rdx	      1628	base.c	ELSE_1	FUNCTION_57	CALL_6
0x4000d0e	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d13	    0x6548330c2528	                xor rcx, qword gs:[0x28]	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d1c	            0x752b	                           jne 0x4000d49	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d1e	        0x4883c418	                           add rsp, 0x18	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d22	              0x5b	                                 pop rbx	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d23	              0x5d	                                 pop rbp	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d24	              0xc3	                                     ret	      1629	base.c	ELSE_1	FUNCTION_57
0x4000d25	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1621	base.c	ELSE_1	FUNCTION_57	CALL_4
0x4000d29	          0x4889e6	                            mov rsi, rsp	      1621	base.c	ELSE_1	FUNCTION_57	CALL_4
0x4000d2c	          0x4889df	                            mov rdi, rbx	      1621	base.c	ELSE_1	FUNCTION_57	CALL_4
0x4000d2f	      0xe800000000	                          call 0x4000d34	      1621	base.c	ELSE_1	FUNCTION_57	CALL_4
0x4000d34	            0x85c0	                           test eax, eax	      1622	base.c	ELSE_1	FUNCTION_57	IF_3
0x4000d36	            0x7405	                            je 0x4000d3d	      1622	base.c	ELSE_1	FUNCTION_57	IF_3
0x4000d38	          0x4863d0	                         movsxd rdx, eax	      1622	base.c	ELSE_1	FUNCTION_57	IF_3
0x4000d3b	            0xebce	                           jmp 0x4000d0b	      1622	base.c	ELSE_1	FUNCTION_57	IF_3
0x4000d3d	          0x4889e7	                            mov rdi, rsp	      1625	base.c	ELSE_1	FUNCTION_57	CALL_5
0x4000d40	      0xe800000000	                          call 0x4000d45	      1625	base.c	ELSE_1	FUNCTION_57	CALL_5
0x4000d45	            0x31c0	                            xor eax, eax	      1626	base.c	ELSE_1	FUNCTION_57
0x4000d47	            0xebc5	                           jmp 0x4000d0e	      1626	base.c	ELSE_1	FUNCTION_57
0x4000d49	      0xe800000000	                          call 0x4000d4e	      1629	base.c	ELSE_1	FUNCTION_57
proc_pid_schedstat	SWITCH,0:WHILE,0:CALL,4:FOR,0:DO,0:IF,1:functions,0:ELSE,1	8
0x4000160	          0x4889c8	                            mov rax, rcx	       465	base.c	FUNCTION_10
0x4000163	    0x488b89700300	           mov rcx, qword [rcx + 0x370] 	       469	base.c	FUNCTION_10	ELSE_1	CALL_4
0x400016a	    0x48c7c6000000	                              mov rsi, 0	       469	base.c	FUNCTION_10	ELSE_1	CALL_4
0x4000171	    0x488b90d00000	            mov rdx, qword [rax + 0xd0] 	       469	base.c	FUNCTION_10	ELSE_1	CALL_4
0x4000178	    0x4c8b80680300	            mov r8, qword [rax + 0x368] 	       469	base.c	FUNCTION_10	ELSE_1	CALL_4
0x400017f	      0xe800000000	                          call 0x4000184	       469	base.c	FUNCTION_10	ELSE_1	CALL_4
0x4000184	            0x31c0	                            xor eax, eax	       475	base.c	FUNCTION_10
0x4000186	              0xc3	                                     ret	       475	base.c	FUNCTION_10
timerslack_ns_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	4
0x4000100	          0x4889fa	                            mov rdx, rdi	      2427	base.c	FUNCTION_82
0x4000103	          0x4889f7	                            mov rdi, rsi	      2427	base.c	FUNCTION_82
0x4000106	    0x48c7c6000000	                              mov rsi, 0	      2428	base.c	FUNCTION_82	CALL_1
0x400010d	      0xe900000000	                           jmp 0x4000112	      2428	base.c	FUNCTION_82	CALL_1
proc_tgid_base_lookup	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003190	      0xb92b000000	                           mov ecx, 0x2b	      3039	base.c	FUNCTION_105	CALL_1
0x4003195	    0x48c7c2000000	                              mov rdx, 0	      3039	base.c	FUNCTION_105	CALL_1
0x400319c	      0xe9effeffff	              jmp sym.proc_pident_lookup	      3039	base.c	FUNCTION_105	CALL_1
proc_tgid_base_readdir	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003bc0	      0xb92b000000	                           mov ecx, 0x2b	      3027	base.c	FUNCTION_104	CALL_1
0x4003bc5	    0x48c7c2000000	                              mov rdx, 0	      3027	base.c	FUNCTION_104	CALL_1
0x4003bcc	      0xe96ffeffff	             jmp sym.proc_pident_readdir	      3027	base.c	FUNCTION_104	CALL_1
proc_tgid_io_accounting	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	4
0x4000a40	          0x4889fe	                            mov rsi, rdi	      2765	base.c	FUNCTION_94
0x4000a43	      0xba01000000	                              mov edx, 1	      2766	base.c	FUNCTION_94	CALL_1
0x4000a48	          0x4889cf	                            mov rdi, rcx	      2766	base.c	FUNCTION_94	CALL_1
0x4000a4b	      0xe900feffff	                jmp sym.do_io_accounting	      2766	base.c	FUNCTION_94	CALL_1
proc_attr_dir_readdir	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003be0	      0xb906000000	                              mov ecx, 6	      2608	base.c	FUNCTION_88	CALL_1
0x4003be5	    0x48c7c2000000	                              mov rdx, 0	      2608	base.c	FUNCTION_88	CALL_1
0x4003bec	      0xe94ffeffff	             jmp sym.proc_pident_readdir	      2608	base.c	FUNCTION_88	CALL_1
proc_map_files_get_link	SWITCH,0:WHILE,0:CALL,3:FOR,0:DO,0:IF,1:functions,0:ELSE,0	22
0x4000d50	            0x4154	                                push r12	      2057	base.c	FUNCTION_71
0x4000d52	              0x55	                                push rbp	      2057	base.c	FUNCTION_71
0x4000d53	          0x4989d4	                            mov r12, rdx	      2057	base.c	FUNCTION_71
0x4000d56	              0x53	                                push rbx	      2057	base.c	FUNCTION_71
0x4000d57	          0x4889fb	                            mov rbx, rdi	      2057	base.c	FUNCTION_71
0x4000d5a	      0xbf15000000	                           mov edi, 0x15	      2058	base.c	FUNCTION_71	IF_1	CALL_1
0x4000d5f	          0x4889f5	                            mov rbp, rsi	      2057	base.c	FUNCTION_71
0x4000d62	      0xe800000000	                          call 0x4000d67	      2058	base.c	FUNCTION_71	IF_1	CALL_1
0x4000d67	            0x84c0	                             test al, al	      2058	base.c	FUNCTION_71	IF_1	CALL_1
0x4000d69	            0x750c	                           jne 0x4000d77	      2058	base.c	FUNCTION_71	IF_1	CALL_1
0x4000d6b	              0x5b	                                 pop rbx	      2062	base.c	FUNCTION_71
0x4000d6c	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      2062	base.c	FUNCTION_71
0x4000d73	              0x5d	                                 pop rbp	      2062	base.c	FUNCTION_71
0x4000d74	            0x415c	                                 pop r12	      2062	base.c	FUNCTION_71
0x4000d76	              0xc3	                                     ret	      2062	base.c	FUNCTION_71
0x4000d77	          0x4c89e2	                            mov rdx, r12	      2061	base.c	FUNCTION_71	CALL_3
0x4000d7a	          0x4889ee	                            mov rsi, rbp	      2061	base.c	FUNCTION_71	CALL_3
0x4000d7d	          0x4889df	                            mov rdi, rbx	      2061	base.c	FUNCTION_71	CALL_3
0x4000d80	              0x5b	                                 pop rbx	      2062	base.c	FUNCTION_71
0x4000d81	              0x5d	                                 pop rbp	      2062	base.c	FUNCTION_71
0x4000d82	            0x415c	                                 pop r12	      2062	base.c	FUNCTION_71
0x4000d84	      0xe947ffffff	               jmp sym.proc_pid_get_link	      2061	base.c	FUNCTION_71	CALL_3
proc_oom_score	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	21
0x4000280	              0x55	                                push rbp	       540	base.c	FUNCTION_14
0x4000281	              0x53	                                push rbx	       540	base.c	FUNCTION_14
0x4000282	          0x4889fd	                            mov rbp, rdi	       540	base.c	FUNCTION_14
0x4000285	    0x488b1d000000	            mov rbx, qword [0x0400028c] 	       541	base.c	FUNCTION_14
0x400028c	    0x48031d000000	             add rbx, qword [0x04000293]	       541	base.c	FUNCTION_14
0x4000293	          0x4889cf	                            mov rdi, rcx	       540	base.c	FUNCTION_14
0x4000296	            0x31d2	                            xor edx, edx	       544	base.c	FUNCTION_14	CALL_1
0x4000298	            0x31f6	                            xor esi, esi	       544	base.c	FUNCTION_14	CALL_1
0x400029a	          0x4889d9	                            mov rcx, rbx	       544	base.c	FUNCTION_14	CALL_1
0x400029d	      0xe800000000	                          call 0x40002a2	       544	base.c	FUNCTION_14	CALL_1
0x40002a2	    0x4869c0e80300	                    imul rax, rax, 0x3e8	       546	base.c	FUNCTION_14	CALL_2
0x40002a9	            0x31d2	                            xor edx, edx	       546	base.c	FUNCTION_14	CALL_2
0x40002ab	          0x4889ef	                            mov rdi, rbp	       546	base.c	FUNCTION_14	CALL_2
0x40002ae	    0x48c7c6000000	                              mov rsi, 0	       546	base.c	FUNCTION_14	CALL_2
0x40002b5	          0x48f7f3	                                 div rbx	       546	base.c	FUNCTION_14	CALL_2
0x40002b8	          0x4889c2	                            mov rdx, rax	       546	base.c	FUNCTION_14	CALL_2
0x40002bb	      0xe800000000	                          call 0x40002c0	       546	base.c	FUNCTION_14	CALL_2
0x40002c0	            0x31c0	                            xor eax, eax	       549	base.c	FUNCTION_14
0x40002c2	              0x5b	                                 pop rbx	       549	base.c	FUNCTION_14
0x40002c3	              0x5d	                                 pop rbp	       549	base.c	FUNCTION_14
0x40002c4	              0xc3	                                     ret	       549	base.c	FUNCTION_14
proc_tid_io_accounting	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	4
0x4000a50	          0x4889fe	                            mov rsi, rdi	      2759	base.c	FUNCTION_93
0x4000a53	            0x31d2	                            xor edx, edx	      2760	base.c	FUNCTION_93	CALL_1
0x4000a55	          0x4889cf	                            mov rdi, rcx	      2760	base.c	FUNCTION_93	CALL_1
0x4000a58	      0xe9f3fdffff	                jmp sym.do_io_accounting	      2760	base.c	FUNCTION_93	CALL_1
pid_delete_dentry	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	6
0x4000070	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       114	internal.h	FUNCTION_125	CALL_1
0x4000074	        0x488b40b8	             mov rax, qword [rax - 0x48]	      1846	base.c	FUNCTION_65	CALL_1
0x4000078	      0x4883780800	                  cmp qword [rax + 8], 0	      1855	base.c	FUNCTION_66	CALL_2
0x400007d	           0xf94c0	                                 sete al	      1855	base.c	FUNCTION_66	CALL_2
0x4000080	           0xfb6c0	                           movzx eax, al	      1855	base.c	FUNCTION_66	CALL_2
0x4000083	              0xc3	                                     ret	      1856	base.c	FUNCTION_66
proc_attr_dir_lookup	SWITCH,0:WHILE,0:CALL,2:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4003150	      0xb906000000	                              mov ecx, 6	      2621	base.c	FUNCTION_89	CALL_1
0x4003155	    0x48c7c2000000	                              mov rdx, 0	      2621	base.c	FUNCTION_89	CALL_1
0x400315c	      0xe92fffffff	              jmp sym.proc_pident_lookup	      2621	base.c	FUNCTION_89	CALL_1
proc_task_instantiate	SWITCH,0:WHILE,0:CALL,6:FOR,0:DO,0:IF,1:functions,0:ELSE,0	34
0x40031b0	            0x4154	                                push r12	      3429	base.c	FUNCTION_115
0x40031b2	              0x55	                                push rbp	      3429	base.c	FUNCTION_115
0x40031b3	          0x4889fd	                            mov rbp, rdi	      3429	base.c	FUNCTION_115
0x40031b6	              0x53	                                push rbx	      3429	base.c	FUNCTION_115
0x40031b7	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	      3431	base.c	FUNCTION_115	CALL_1
0x40031bb	      0xba6d410000	                         mov edx, 0x416d	      3431	base.c	FUNCTION_115	CALL_1
0x40031c0	          0x4989f4	                            mov r12, rsi	      3429	base.c	FUNCTION_115
0x40031c3	      0xe800000000	                          call 0x40031c8	      3431	base.c	FUNCTION_115	CALL_1
0x40031c8	          0x4885c0	                           test rax, rax	      3432	base.c	FUNCTION_115	IF_1
0x40031cb	            0x7452	                            je 0x400321f	      3432	base.c	FUNCTION_115	IF_1
0x40031cd	        0x83480c08	                 or dword [rax + 0xc], 8	      3437	base.c	FUNCTION_115
0x40031d1	     0xfb635000000	           movzx esi, byte [0x040031d8] 	      3439	base.c	FUNCTION_115	CALL_3
0x40031d8	          0x4889c3	                            mov rbx, rax	      3439	base.c	FUNCTION_115	CALL_3
0x40031db	          0x4889c7	                            mov rdi, rax	      3439	base.c	FUNCTION_115	CALL_3
0x40031de	    0x48c740200000	               mov qword [rax + 0x20], 0	      3435	base.c	FUNCTION_115
0x40031e6	    0x48c780580100	              mov qword [rax + 0x158], 0	      3436	base.c	FUNCTION_115
0x40031f1	      0xe800000000	                          call 0x40031f6	      3439	base.c	FUNCTION_115	CALL_3
0x40031f6	          0x4889de	                            mov rsi, rbx	      3440	base.c	FUNCTION_115	CALL_4
0x40031f9	          0x4c89e7	                            mov rdi, r12	      3440	base.c	FUNCTION_115	CALL_4
0x40031fc	      0xe800000000	                          call 0x4003201	      3440	base.c	FUNCTION_115	CALL_4
0x4003201	          0x4889ef	                            mov rdi, rbp	      3442	base.c	FUNCTION_115	CALL_5
0x4003204	    0x48c7c6000000	                              mov rsi, 0	      3442	base.c	FUNCTION_115	CALL_5
0x400320b	      0xe800000000	                          call 0x4003210	      3442	base.c	FUNCTION_115	CALL_5
0x4003210	          0x4889ee	                            mov rsi, rbp	      3443	base.c	FUNCTION_115	CALL_6
0x4003213	          0x4889df	                            mov rdi, rbx	      3443	base.c	FUNCTION_115	CALL_6
0x4003216	              0x5b	                                 pop rbx	      3444	base.c	FUNCTION_115
0x4003217	              0x5d	                                 pop rbp	      3444	base.c	FUNCTION_115
0x4003218	            0x415c	                                 pop r12	      3444	base.c	FUNCTION_115
0x400321a	      0xe900000000	                           jmp 0x400321f	      3443	base.c	FUNCTION_115	CALL_6
0x400321f	              0x5b	                                 pop rbx	      3444	base.c	FUNCTION_115
0x4003220	    0x48c7c0feffff	             mov rax, 0xfffffffffffffffe	      3444	base.c	FUNCTION_115
0x4003227	              0x5d	                                 pop rbp	      3444	base.c	FUNCTION_115
0x4003228	            0x415c	                                 pop r12	      3444	base.c	FUNCTION_115
0x400322a	              0xc3	                                     ret	      3444	base.c	FUNCTION_115
environ_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	10
0x40029d0	              0x53	                                push rbx	       905	base.c	FUNCTION_31
0x40029d1	          0x4889f3	                            mov rbx, rsi	       905	base.c	FUNCTION_31
0x40029d4	      0xbe01000000	                              mov esi, 1	       786	base.c	FUNCTION_24	CALL_1
0x40029d9	      0xe800000000	                          call 0x40029de	       786	base.c	FUNCTION_24	CALL_1
0x40029de	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x40029e4	            0x7709	                            ja 0x40029ef	       788	base.c	FUNCTION_24	IF_1	CALL_2
0x40029e6	    0x488983c80000	             mov qword [rbx + 0xc8], rax	       791	base.c	FUNCTION_24
0x40029ed	            0x31c0	                            xor eax, eax	       792	base.c	FUNCTION_24
0x40029ef	              0x5b	                                 pop rbx	       907	base.c	FUNCTION_31
0x40029f0	              0xc3	                                     ret	       907	base.c	FUNCTION_31
proc_pid_instantiate	SWITCH,0:WHILE,0:CALL,6:FOR,0:DO,0:IF,1:functions,0:ELSE,0	34
0x4002f70	            0x4154	                                push r12	      3138	base.c	FUNCTION_108
0x4002f72	              0x55	                                push rbp	      3138	base.c	FUNCTION_108
0x4002f73	          0x4889fd	                            mov rbp, rdi	      3138	base.c	FUNCTION_108
0x4002f76	              0x53	                                push rbx	      3138	base.c	FUNCTION_108
0x4002f77	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	      3141	base.c	FUNCTION_108	CALL_1
0x4002f7b	      0xba6d410000	                         mov edx, 0x416d	      3141	base.c	FUNCTION_108	CALL_1
0x4002f80	          0x4989f4	                            mov r12, rsi	      3138	base.c	FUNCTION_108
0x4002f83	      0xe800000000	                          call 0x4002f88	      3141	base.c	FUNCTION_108	CALL_1
0x4002f88	          0x4885c0	                           test rax, rax	      3142	base.c	FUNCTION_108	IF_1
0x4002f8b	            0x7452	                            je 0x4002fdf	      3142	base.c	FUNCTION_108	IF_1
0x4002f8d	        0x83480c08	                 or dword [rax + 0xc], 8	      3147	base.c	FUNCTION_108
0x4002f91	     0xfb635000000	           movzx esi, byte [0x04002f98] 	      3149	base.c	FUNCTION_108	CALL_3
0x4002f98	          0x4889c3	                            mov rbx, rax	      3149	base.c	FUNCTION_108	CALL_3
0x4002f9b	          0x4889c7	                            mov rdi, rax	      3149	base.c	FUNCTION_108	CALL_3
0x4002f9e	    0x48c740200000	               mov qword [rax + 0x20], 0	      3145	base.c	FUNCTION_108
0x4002fa6	    0x48c780580100	              mov qword [rax + 0x158], 0	      3146	base.c	FUNCTION_108
0x4002fb1	      0xe800000000	                          call 0x4002fb6	      3149	base.c	FUNCTION_108	CALL_3
0x4002fb6	          0x4889de	                            mov rsi, rbx	      3150	base.c	FUNCTION_108	CALL_4
0x4002fb9	          0x4c89e7	                            mov rdi, r12	      3150	base.c	FUNCTION_108	CALL_4
0x4002fbc	      0xe800000000	                          call 0x4002fc1	      3150	base.c	FUNCTION_108	CALL_4
0x4002fc1	          0x4889ef	                            mov rdi, rbp	      3152	base.c	FUNCTION_108	CALL_5
0x4002fc4	    0x48c7c6000000	                              mov rsi, 0	      3152	base.c	FUNCTION_108	CALL_5
0x4002fcb	      0xe800000000	                          call 0x4002fd0	      3152	base.c	FUNCTION_108	CALL_5
0x4002fd0	          0x4889ee	                            mov rsi, rbp	      3153	base.c	FUNCTION_108	CALL_6
0x4002fd3	          0x4889df	                            mov rdi, rbx	      3153	base.c	FUNCTION_108	CALL_6
0x4002fd6	              0x5b	                                 pop rbx	      3154	base.c	FUNCTION_108
0x4002fd7	              0x5d	                                 pop rbp	      3154	base.c	FUNCTION_108
0x4002fd8	            0x415c	                                 pop r12	      3154	base.c	FUNCTION_108
0x4002fda	      0xe900000000	                           jmp 0x4002fdf	      3153	base.c	FUNCTION_108	CALL_6
0x4002fdf	              0x5b	                                 pop rbx	      3154	base.c	FUNCTION_108
0x4002fe0	    0x48c7c0feffff	             mov rax, 0xfffffffffffffffe	      3154	base.c	FUNCTION_108
0x4002fe7	              0x5d	                                 pop rbp	      3154	base.c	FUNCTION_108
0x4002fe8	            0x415c	                                 pop r12	      3154	base.c	FUNCTION_108
0x4002fea	              0xc3	                                     ret	      3154	base.c	FUNCTION_108
proc_pid_wchan	SWITCH,0:WHILE,0:CALL,5:FOR,0:DO,0:IF,2:functions,0:ELSE,0	38
0x40002d0	              0x55	                                push rbp	       387	base.c	FUNCTION_6
0x40002d1	              0x53	                                push rbx	       387	base.c	FUNCTION_6
0x40002d2	          0x4889fd	                            mov rbp, rdi	       387	base.c	FUNCTION_6
0x40002d5	      0xbe09000000	                              mov esi, 9	       391	base.c	FUNCTION_6	IF_1	CALL_1
0x40002da	          0x4889cf	                            mov rdi, rcx	       391	base.c	FUNCTION_6	IF_1	CALL_1
0x40002dd	          0x4889cb	                            mov rbx, rcx	       387	base.c	FUNCTION_6
0x40002e0	    0x4881ec880000	                           sub rsp, 0x88	       387	base.c	FUNCTION_6
0x40002e7	    0x65488b042528	                mov rax, qword gs:[0x28]	       387	base.c	FUNCTION_6
0x40002f0	    0x488984248000	             mov qword [rsp + 0x80], rax	       387	base.c	FUNCTION_6
0x40002f8	            0x31c0	                            xor eax, eax	       387	base.c	FUNCTION_6
0x40002fa	      0xe800000000	                          call 0x40002ff	       391	base.c	FUNCTION_6	IF_1	CALL_1
0x40002ff	            0x84c0	                             test al, al	       391	base.c	FUNCTION_6	IF_1	CALL_1
0x4000301	            0x740d	                            je 0x4000310	       391	base.c	FUNCTION_6	IF_1	CALL_1
0x4000303	          0x4889df	                            mov rdi, rbx	       394	base.c	FUNCTION_6	CALL_2
0x4000306	      0xe800000000	                          call 0x400030b	       394	base.c	FUNCTION_6	CALL_2
0x400030b	          0x4885c0	                           test rax, rax	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x400030e	            0x752c	                           jne 0x400033c	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x4000310	      0xbe30000000	                           mov esi, 0x30	       401	base.c	FUNCTION_6	CALL_5
0x4000315	          0x4889ef	                            mov rdi, rbp	       401	base.c	FUNCTION_6	CALL_5
0x4000318	      0xe800000000	                          call 0x400031d	       401	base.c	FUNCTION_6	CALL_5
0x400031d	            0x31c0	                            xor eax, eax	       403	base.c	FUNCTION_6
0x400031f	    0x488b94248000	            mov rdx, qword [rsp + 0x80] 	       403	base.c	FUNCTION_6
0x4000327	    0x654833142528	                xor rdx, qword gs:[0x28]	       403	base.c	FUNCTION_6
0x4000330	            0x7526	                           jne 0x4000358	       403	base.c	FUNCTION_6
0x4000332	    0x4881c4880000	                           add rsp, 0x88	       403	base.c	FUNCTION_6
0x4000339	              0x5b	                                 pop rbx	       403	base.c	FUNCTION_6
0x400033a	              0x5d	                                 pop rbp	       403	base.c	FUNCTION_6
0x400033b	              0xc3	                                     ret	       403	base.c	FUNCTION_6
0x400033c	          0x4889e6	                            mov rsi, rsp	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x400033f	          0x4889c7	                            mov rdi, rax	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x4000342	      0xe800000000	                          call 0x4000347	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x4000347	            0x85c0	                           test eax, eax	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x4000349	            0x75c5	                           jne 0x4000310	       395	base.c	FUNCTION_6	IF_2	CALL_3
0x400034b	          0x4889e6	                            mov rsi, rsp	       396	base.c	FUNCTION_6	IF_2	CALL_4
0x400034e	          0x4889ef	                            mov rdi, rbp	       396	base.c	FUNCTION_6	IF_2	CALL_4
0x4000351	      0xe800000000	                          call 0x4000356	       396	base.c	FUNCTION_6	IF_2	CALL_4
0x4000356	            0xebc5	                           jmp 0x400031d	       397	base.c	FUNCTION_6	IF_2
0x4000358	      0xe800000000	                          call 0x400035d	       403	base.c	FUNCTION_6
mem_lseek	SWITCH,1:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	13
0x4000040	            0x85d2	                           test edx, edx	       874	base.c	FUNCTION_29	SWITCH_1
0x4000042	            0x7419	                            je 0x400005d	       874	base.c	FUNCTION_29	SWITCH_1
0x4000044	          0x83fa01	                              cmp edx, 1	       874	base.c	FUNCTION_29	SWITCH_1
0x4000047	            0x750c	                           jne 0x4000055	       874	base.c	FUNCTION_29	SWITCH_1
0x4000049	          0x4889f0	                            mov rax, rsi	       879	base.c	FUNCTION_29	SWITCH_1
0x400004c	        0x48034768	             add rax, qword [rdi + 0x68]	       879	base.c	FUNCTION_29	SWITCH_1
0x4000050	        0x48894768	             mov qword [rdi + 0x68], rax	       879	base.c	FUNCTION_29	SWITCH_1
0x4000054	              0xc3	                                     ret	       885	base.c	FUNCTION_29
0x4000055	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	       882	base.c	FUNCTION_29	SWITCH_1
0x400005c	              0xc3	                                     ret	       886	base.c	FUNCTION_29
0x400005d	        0x48897768	             mov qword [rdi + 0x68], rsi	       876	base.c	FUNCTION_29	SWITCH_1
0x4000061	          0x4889f0	                            mov rax, rsi	       877	base.c	FUNCTION_29	SWITCH_1
0x4000064	              0xc3	                                     ret	       877	base.c	FUNCTION_29	SWITCH_1
proc_pid_make_inode	SWITCH,0:WHILE,0:CALL,8:FOR,0:DO,0:IF,2:functions,0:ELSE,0	53
0x4002c80	              0x55	                                push rbp	      1744	base.c	FUNCTION_61
0x4002c81	          0x4889e5	                            mov rbp, rsp	      1744	base.c	FUNCTION_61
0x4002c84	            0x4156	                                push r14	      1744	base.c	FUNCTION_61
0x4002c86	            0x4155	                                push r13	      1744	base.c	FUNCTION_61
0x4002c88	            0x4154	                                push r12	      1744	base.c	FUNCTION_61
0x4002c8a	            0x4152	                                push r10	      1744	base.c	FUNCTION_61
0x4002c8c	          0x4989f4	                            mov r12, rsi	      1744	base.c	FUNCTION_61
0x4002c8f	              0x53	                                push rbx	      1744	base.c	FUNCTION_61
0x4002c90	          0x4189d6	                           mov r14d, edx	      1744	base.c	FUNCTION_61
0x4002c93	          0x4531ed	                          xor r13d, r13d	      1744	base.c	FUNCTION_61
0x4002c96	      0xe800000000	                          call 0x4002c9b	      1750	base.c	FUNCTION_61	CALL_1
0x4002c9b	          0x4885c0	                           test rax, rax	      1751	base.c	FUNCTION_61	IF_1
0x4002c9e	            0x7470	                            je 0x4002d10	      1751	base.c	FUNCTION_61	IF_1
0x4002ca0	        0x66448930	                    mov word [rax], r14w	      1756	base.c	FUNCTION_61
0x4002ca4	          0x4889c3	                            mov rbx, rax	      1756	base.c	FUNCTION_61
0x4002ca7	      0xe800000000	                          call 0x4002cac	      1757	base.c	FUNCTION_61	CALL_3
0x4002cac	            0x89c0	                            mov eax, eax	      1757	base.c	FUNCTION_61	CALL_3
0x4002cae	          0x4889df	                            mov rdi, rbx	      1758	base.c	FUNCTION_61	CALL_4
0x4002cb1	        0x48894340	             mov qword [rbx + 0x40], rax	      1757	base.c	FUNCTION_61	CALL_3
0x4002cb5	      0xe800000000	                          call 0x4002cba	      1758	base.c	FUNCTION_61	CALL_4
0x4002cba	            0x31f6	                            xor esi, esi	      1764	base.c	FUNCTION_61	CALL_5
0x4002cbc	        0x48894378	             mov qword [rbx + 0x78], rax	      1758	base.c	FUNCTION_61	CALL_4
0x4002cc0	    0x488993800000	             mov qword [rbx + 0x80], rdx	      1758	base.c	FUNCTION_61	CALL_4
0x4002cc7	        0x48894358	             mov qword [rbx + 0x58], rax	      1758	base.c	FUNCTION_61	CALL_4
0x4002ccb	        0x48895360	             mov qword [rbx + 0x60], rdx	      1758	base.c	FUNCTION_61	CALL_4
0x4002ccf	          0x4c89e7	                            mov rdi, r12	      1764	base.c	FUNCTION_61	CALL_5
0x4002cd2	        0x48894368	             mov qword [rbx + 0x68], rax	      1758	base.c	FUNCTION_61	CALL_4
0x4002cd6	        0x48895370	             mov qword [rbx + 0x70], rdx	      1758	base.c	FUNCTION_61	CALL_4
0x4002cda	    0x48c743200000	               mov qword [rbx + 0x20], 0	      1759	base.c	FUNCTION_61
0x4002ce2	      0xe800000000	                          call 0x4002ce7	      1764	base.c	FUNCTION_61	CALL_5
0x4002ce7	          0x4885c0	                           test rax, rax	      1765	base.c	FUNCTION_61	IF_2
0x4002cea	        0x488943b8	             mov qword [rbx - 0x48], rax	      1764	base.c	FUNCTION_61	CALL_5
0x4002cee	            0x742e	                            je 0x4002d1e	      1765	base.c	FUNCTION_61	IF_2
0x4002cf0	        0x488d4b08	                      lea rcx, [rbx + 8]	      1768	base.c	FUNCTION_61	CALL_6
0x4002cf4	        0x488d5304	                      lea rdx, [rbx + 4]	      1768	base.c	FUNCTION_61	CALL_6
0x4002cf8	            0x31f6	                            xor esi, esi	      1768	base.c	FUNCTION_61	CALL_6
0x4002cfa	          0x4c89e7	                            mov rdi, r12	      1768	base.c	FUNCTION_61	CALL_6
0x4002cfd	          0x4989dd	                            mov r13, rbx	      1769	base.c	FUNCTION_61	CALL_7
0x4002d00	      0xe800000000	                          call 0x4002d05	      1768	base.c	FUNCTION_61	CALL_6
0x4002d05	          0x4889de	                            mov rsi, rbx	      1769	base.c	FUNCTION_61	CALL_7
0x4002d08	          0x4c89e7	                            mov rdi, r12	      1769	base.c	FUNCTION_61	CALL_7
0x4002d0b	      0xe800000000	                          call 0x4002d10	      1769	base.c	FUNCTION_61	CALL_7
0x4002d10	              0x5b	                                 pop rbx	      1777	base.c	FUNCTION_61
0x4002d11	          0x4c89e8	                            mov rax, r13	      1777	base.c	FUNCTION_61
0x4002d14	            0x415a	                                 pop r10	      1777	base.c	FUNCTION_61
0x4002d16	            0x415c	                                 pop r12	      1777	base.c	FUNCTION_61
0x4002d18	            0x415d	                                 pop r13	      1777	base.c	FUNCTION_61
0x4002d1a	            0x415e	                                 pop r14	      1777	base.c	FUNCTION_61
0x4002d1c	              0x5d	                                 pop rbp	      1777	base.c	FUNCTION_61
0x4002d1d	              0xc3	                                     ret	      1777	base.c	FUNCTION_61
0x4002d1e	          0x4889df	                            mov rdi, rbx	      1775	base.c	FUNCTION_61	CALL_8
0x4002d21	      0xe800000000	                          call 0x4002d26	      1775	base.c	FUNCTION_61	CALL_8
0x4002d26	            0xebe8	                           jmp 0x4002d10	      1776	base.c	FUNCTION_61
proc_pident_instantiate	SWITCH,0:WHILE,0:CALL,8:FOR,0:DO,0:IF,4:functions,0:ELSE,0	50
0x4002ff0	            0x4155	                                push r13	      2441	base.c	FUNCTION_83
0x4002ff2	            0x4154	                                push r12	      2441	base.c	FUNCTION_83
0x4002ff4	          0x4989fc	                            mov r12, rdi	      2441	base.c	FUNCTION_83
0x4002ff7	              0x55	                                push rbp	      2441	base.c	FUNCTION_83
0x4002ff8	          0x4889d5	                            mov rbp, rdx	      2441	base.c	FUNCTION_83
0x4002ffb	              0x53	                                push rbx	      2441	base.c	FUNCTION_83
0x4002ffc	         0xfb7520c	            movzx edx, word [rdx + 0xc] 	      2446	base.c	FUNCTION_83	CALL_1
0x4003000	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	      2446	base.c	FUNCTION_83	CALL_1
0x4003004	          0x4989f5	                            mov r13, rsi	      2441	base.c	FUNCTION_83
0x4003007	      0xe800000000	                          call 0x400300c	      2446	base.c	FUNCTION_83	CALL_1
0x400300c	          0x4885c0	                           test rax, rax	      2447	base.c	FUNCTION_83	IF_1
0x400300f	            0x746f	                            je 0x4003080	      2447	base.c	FUNCTION_83	IF_1
0x4003011	          0x4889c3	                            mov rbx, rax	      2447	base.c	FUNCTION_83	IF_1
0x4003014	           0xfb700	                   movzx eax, word [rax]	      2451	base.c	FUNCTION_83	IF_2	CALL_4
0x4003017	        0x662500f0	                          and ax, 0xf000	      2451	base.c	FUNCTION_83	IF_2	CALL_4
0x400301b	        0x663d0040	                          cmp ax, 0x4000	      2451	base.c	FUNCTION_83	IF_2	CALL_4
0x400301f	            0x7450	                            je 0x4003071	      2451	base.c	FUNCTION_83	IF_2	CALL_4
0x4003021	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      2453	base.c	FUNCTION_83	IF_3
0x4003025	          0x4885c0	                           test rax, rax	      2453	base.c	FUNCTION_83	IF_3
0x4003028	            0x7404	                            je 0x400302e	      2453	base.c	FUNCTION_83	IF_3
0x400302a	        0x48894320	             mov qword [rbx + 0x20], rax	      2454	base.c	FUNCTION_83	IF_3
0x400302e	        0x488b4518	            mov rax, qword [rbp + 0x18] 	      2455	base.c	FUNCTION_83	IF_4
0x4003032	          0x4885c0	                           test rax, rax	      2455	base.c	FUNCTION_83	IF_4
0x4003035	            0x7407	                            je 0x400303e	      2455	base.c	FUNCTION_83	IF_4
0x4003037	    0x488983580100	            mov qword [rbx + 0x158], rax	      2456	base.c	FUNCTION_83	IF_4
0x400303e	        0x488b4520	            mov rax, qword [rbp + 0x20] 	      2457	base.c	FUNCTION_83
0x4003042	          0x4889de	                            mov rsi, rbx	      2458	base.c	FUNCTION_83	CALL_6
0x4003045	          0x4c89ef	                            mov rdi, r13	      2458	base.c	FUNCTION_83	CALL_6
0x4003048	        0x488943c8	             mov qword [rbx - 0x38], rax	      2457	base.c	FUNCTION_83
0x400304c	      0xe800000000	                          call 0x4003051	      2458	base.c	FUNCTION_83	CALL_6
0x4003051	          0x4c89e7	                            mov rdi, r12	      2459	base.c	FUNCTION_83	CALL_7
0x4003054	    0x48c7c6000000	                              mov rsi, 0	      2459	base.c	FUNCTION_83	CALL_7
0x400305b	      0xe800000000	                          call 0x4003060	      2459	base.c	FUNCTION_83	CALL_7
0x4003060	          0x4c89e6	                            mov rsi, r12	      2460	base.c	FUNCTION_83	CALL_8
0x4003063	          0x4889df	                            mov rdi, rbx	      2460	base.c	FUNCTION_83	CALL_8
0x4003066	              0x5b	                                 pop rbx	      2461	base.c	FUNCTION_83
0x4003067	              0x5d	                                 pop rbp	      2461	base.c	FUNCTION_83
0x4003068	            0x415c	                                 pop r12	      2461	base.c	FUNCTION_83
0x400306a	            0x415d	                                 pop r13	      2461	base.c	FUNCTION_83
0x400306c	      0xe900000000	                           jmp 0x4003071	      2460	base.c	FUNCTION_83	CALL_8
0x4003071	      0xbe02000000	                              mov esi, 2	      2452	base.c	FUNCTION_83	CALL_5
0x4003076	          0x4889df	                            mov rdi, rbx	      2452	base.c	FUNCTION_83	CALL_5
0x4003079	      0xe800000000	                          call 0x400307e	      2452	base.c	FUNCTION_83	CALL_5
0x400307e	            0xeba1	                           jmp 0x4003021	      2452	base.c	FUNCTION_83	CALL_5
0x4003080	              0x5b	                                 pop rbx	      2461	base.c	FUNCTION_83
0x4003081	    0x48c7c0feffff	             mov rax, 0xfffffffffffffffe	      2461	base.c	FUNCTION_83
0x4003088	              0x5d	                                 pop rbp	      2461	base.c	FUNCTION_83
0x4003089	            0x415c	                                 pop r12	      2461	base.c	FUNCTION_83
0x400308b	            0x415d	                                 pop r13	      2461	base.c	FUNCTION_83
0x400308d	              0xc3	                                     ret	      2461	base.c	FUNCTION_83
mem_read	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	3
0x4002730	    0x488bbfc80000	            mov rdi, qword [rdi + 0xc8] 	       863	base.c	FUNCTION_27	CALL_1
0x4002737	          0x4531c0	                            xor r8d, r8d	       863	base.c	FUNCTION_27	CALL_1
0x400273a	      0xe951feffff	                  jmp sym.mem_rw.isra.20	       863	base.c	FUNCTION_27	CALL_1
proc_single_open	SWITCH,0:WHILE,0:CALL,1:FOR,0:DO,0:IF,0:functions,0:ELSE,0	4
0x4000140	          0x4889fa	                            mov rdx, rdi	       752	base.c	FUNCTION_22
0x4000143	          0x4889f7	                            mov rdi, rsi	       752	base.c	FUNCTION_22
0x4000146	    0x48c7c6000000	                              mov rsi, 0	       753	base.c	FUNCTION_22	CALL_1
0x400014d	      0xe900000000	                           jmp 0x4000152	       753	base.c	FUNCTION_22	CALL_1
