efivarfs_init	WHILE,0:FOR,0:SWITCH,0:IF,2:functions,0:DO,0:CALL,3:ELSE,0	13
0x4000040	        0x488b4630	            mov rax, qword [rsi + 0x30] 	       125	inode.c	FUNCTION_4	CALL_1
0x4000044	              0x55	                                push rbp	       124	inode.c	FUNCTION_4
0x4000045	      0xbdeaffffff	                     mov ebp, 0xffffffea	       128	inode.c	FUNCTION_4	IF_1
0x400004a	              0x53	                                push rbx	       124	inode.c	FUNCTION_4
0x400004b	          0x4889f3	                            mov rbx, rsi	       124	inode.c	FUNCTION_4
0x400004e	    0x488bb8380200	           mov rdi, qword [rax + 0x238] 	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x4000055	      0xe800000000	                          call 0x400005a	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005a	            0x85c0	                           test eax, eax	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005c	            0x7513	                           jne 0x4000071	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005e	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       130	inode.c	FUNCTION_4	CALL_4
0x4000062	            0x89c5	                            mov ebp, eax	       130	inode.c	FUNCTION_4	CALL_4
0x4000064	              0xe8	                                 invalid	       130	inode.c	FUNCTION_4	CALL_4
0x4000065	               0x0	                      add byte [rax], al	       130	inode.c	FUNCTION_4	CALL_4
efivarfs_destroy	WHILE,0:FOR,0:SWITCH,0:IF,1:functions,0:DO,0:CALL,2:ELSE,0	13
0x4000710	              0x53	                                push rbx	       185	super.c	FUNCTION_15
0x4000711	          0x4889fb	                            mov rbx, rdi	       185	super.c	FUNCTION_15
0x4000714	        0x4883ec08	                              sub rsp, 8	       185	super.c	FUNCTION_15
0x4000718	      0xe800000000	                          call 0x400071d	       186	super.c	FUNCTION_15	CALL_1
0x400071d	            0x85c0	                           test eax, eax	       188	super.c	FUNCTION_15	IF_1
0x400071f	            0x7510	                           jne 0x4000731	       188	super.c	FUNCTION_15	IF_1
0x4000721	          0x4889df	                            mov rdi, rbx	       190	super.c	FUNCTION_15	CALL_2
0x4000724	        0x89442404	                mov dword [rsp + 4], eax	       190	super.c	FUNCTION_15	CALL_2
0x4000728	      0xe800000000	                          call 0x400072d	       190	super.c	FUNCTION_15	CALL_2
0x400072d	        0x8b442404	                mov eax, dword [rsp + 4]	       190	super.c	FUNCTION_15	CALL_2
0x4000731	        0x4883c408	                              add rsp, 8	       192	super.c	FUNCTION_15
0x4000735	              0x5b	                                 pop rbx	       192	super.c	FUNCTION_15
0x4000736	              0xc3	                                     ret	       192	super.c	FUNCTION_15
efivarfs_evict_inode	WHILE,0:FOR,0:SWITCH,0:IF,0:functions,0:DO,0:CALL,1:ELSE,0	1
0x4000960	      0xe900000000	                           jmp 0x4000965	        25	super.c	FUNCTION_10	CALL_1
efivarfs_unlink	WHILE,0:FOR,0:SWITCH,0:IF,1:functions,0:DO,0:CALL,5:ELSE,0	18
0x4000040	        0x488b4630	            mov rax, qword [rsi + 0x30] 	       125	inode.c	FUNCTION_4	CALL_1
0x4000044	              0x55	                                push rbp	       124	inode.c	FUNCTION_4
0x4000045	      0xbdeaffffff	                     mov ebp, 0xffffffea	       128	inode.c	FUNCTION_4	IF_1
0x400004a	              0x53	                                push rbx	       124	inode.c	FUNCTION_4
0x400004b	          0x4889f3	                            mov rbx, rsi	       124	inode.c	FUNCTION_4
0x400004e	    0x488bb8380200	           mov rdi, qword [rax + 0x238] 	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x4000055	      0xe800000000	                          call 0x400005a	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005a	            0x85c0	                           test eax, eax	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005c	            0x7513	                           jne 0x4000071	       127	inode.c	FUNCTION_4	IF_1	CALL_2
0x400005e	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       130	inode.c	FUNCTION_4	CALL_4
0x4000062	            0x89c5	                            mov ebp, eax	       130	inode.c	FUNCTION_4	CALL_4
0x4000064	      0xe800000000	                          call 0x4000069	       130	inode.c	FUNCTION_4	CALL_4
0x4000069	          0x4889df	                            mov rdi, rbx	       131	inode.c	FUNCTION_4	CALL_5
0x400006c	      0xe800000000	                          call 0x4000071	       131	inode.c	FUNCTION_4	CALL_5
0x4000071	            0x89e8	                            mov eax, ebp	       133	inode.c	FUNCTION_4
0x4000073	              0x5b	                                 pop rbx	       133	inode.c	FUNCTION_4
0x4000074	              0x5d	                                 pop rbp	       133	inode.c	FUNCTION_4
0x4000075	              0xc3	                                     ret	       133	inode.c	FUNCTION_4
efivarfs_mount	WHILE,0:FOR,0:SWITCH,0:IF,0:functions,0:DO,0:CALL,1:ELSE,0	3
0x4000740	          0x4889ca	                            mov rdx, rcx	       231	super.c	FUNCTION_17
0x4000743	    0x48c7c1000000	                              mov rcx, 0	       232	super.c	FUNCTION_17	CALL_1
0x400074a	      0xe900000000	                           jmp 0x400074f	       232	super.c	FUNCTION_17	CALL_1
efivarfs_kill_sb	WHILE,0:FOR,0:SWITCH,0:IF,0:functions,0:DO,0:CALL,2:ELSE,0	6
0x40006f0	      0xe800000000	                          call 0x40006f5	       237	super.c	FUNCTION_18	CALL_1
0x40006f5	            0x31c9	                            xor ecx, ecx	       241	super.c	FUNCTION_18	CALL_2
0x40006f7	            0x31d2	                            xor edx, edx	       241	super.c	FUNCTION_18	CALL_2
0x40006f9	    0x48c7c6000000	                              mov rsi, 0	       241	super.c	FUNCTION_18	CALL_2
0x4000700	    0x48c7c7000000	                              mov rdi, 0	       241	super.c	FUNCTION_18	CALL_2
0x4000707	      0xe900000000	                           jmp 0x400070c	       241	super.c	FUNCTION_18	CALL_2
efivarfs_d_compare	WHILE,0:FOR,0:SWITCH,0:IF,2:functions,0:DO,0:CALL,2:ELSE,0	29
0x4000910	          0x3b7104	                cmp esi, dword [rcx + 4]	        53	super.c	FUNCTION_11	IF_1
0x4000913	            0x7406	                            je 0x400091b	        53	super.c	FUNCTION_11	IF_1
0x4000915	      0xb801000000	                              mov eax, 1	        62	super.c	FUNCTION_11
0x400091a	              0xc3	                                     ret	        62	super.c	FUNCTION_11
0x400091b	            0x4154	                                push r12	        50	super.c	FUNCTION_11
0x400091d	        0x4c8b6108	                mov r12, qword [rcx + 8]	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x4000921	              0x55	                                push rbp	        50	super.c	FUNCTION_11
0x4000922	              0x53	                                push rbx	        50	super.c	FUNCTION_11
0x4000923	          0x8d5edc	                   lea ebx, [rsi - 0x24]	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x4000926	          0x4889d5	                            mov rbp, rdx	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x4000929	          0x4863db	                         movsxd rbx, ebx	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x400092c	          0x4c89e6	                            mov rsi, r12	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x400092f	          0x4889ef	                            mov rdi, rbp	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x4000932	          0x4889da	                            mov rdx, rbx	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x4000935	      0xe800000000	                          call 0x400093a	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x400093a	            0x85c0	                           test eax, eax	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x400093c	            0x7517	                           jne 0x4000955	        57	super.c	FUNCTION_11	IF_2	CALL_1
0x400093e	      0x488d741d00	                    lea rsi, [rbp + rbx]	        61	super.c	FUNCTION_11	CALL_2
0x4000943	        0x498d3c1c	                    lea rdi, [r12 + rbx]	        61	super.c	FUNCTION_11	CALL_2
0x4000947	      0xba24000000	                           mov edx, 0x24	        61	super.c	FUNCTION_11	CALL_2
0x400094c	              0x5b	                                 pop rbx	        62	super.c	FUNCTION_11
0x400094d	              0x5d	                                 pop rbp	        62	super.c	FUNCTION_11
0x400094e	            0x415c	                                 pop r12	        62	super.c	FUNCTION_11
0x4000950	      0xe900000000	                           jmp 0x4000955	        61	super.c	FUNCTION_11	CALL_2
0x4000955	              0x5b	                                 pop rbx	        62	super.c	FUNCTION_11
0x4000956	      0xb801000000	                              mov eax, 1	        62	super.c	FUNCTION_11
0x400095b	              0x5d	                                 pop rbp	        62	super.c	FUNCTION_11
0x400095c	            0x415c	                                 pop r12	        62	super.c	FUNCTION_11
0x400095e	              0xc3	                                     ret	        62	super.c	FUNCTION_11
efivarfs_get_inode	WHILE,0:FOR,0:SWITCH,1:IF,1:functions,0:DO,0:CALL,4:ELSE,0	52
0x4000080	              0x55	                                push rbp	        21	inode.c	FUNCTION_1
0x4000081	          0x4889e5	                            mov rbp, rsp	        21	inode.c	FUNCTION_1
0x4000084	            0x4155	                                push r13	        21	inode.c	FUNCTION_1
0x4000086	            0x4154	                                push r12	        21	inode.c	FUNCTION_1
0x4000088	            0x4152	                                push r10	        21	inode.c	FUNCTION_1
0x400008a	              0x53	                                push rbx	        21	inode.c	FUNCTION_1
0x400008b	          0x4189d4	                           mov r12d, edx	        21	inode.c	FUNCTION_1
0x400008e	          0x4589c5	                           mov r13d, r8d	        21	inode.c	FUNCTION_1
0x4000091	      0xe800000000	                          call 0x4000096	        22	inode.c	FUNCTION_1	CALL_1
0x4000096	          0x4885c0	                           test rax, rax	        24	inode.c	FUNCTION_1	IF_1
0x4000099	          0x4889c3	                            mov rbx, rax	        22	inode.c	FUNCTION_1	CALL_1
0x400009c	            0x7462	                            je 0x4000100	        24	inode.c	FUNCTION_1	IF_1
0x400009e	      0xe800000000	                          call 0x40000a3	        25	inode.c	FUNCTION_1	IF_1	CALL_2
0x40000a3	            0x89c0	                            mov eax, eax	        25	inode.c	FUNCTION_1	IF_1	CALL_2
0x40000a5	        0x66448923	                    mov word [rbx], r12w	        26	inode.c	FUNCTION_1	IF_1
0x40000a9	          0x4889df	                            mov rdi, rbx	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000ac	        0x48894340	             mov qword [rbx + 0x40], rax	        25	inode.c	FUNCTION_1	IF_1	CALL_2
0x40000b0	      0xe800000000	                          call 0x40000b5	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000b5	        0x4180fd01	                             cmp r13b, 1	        28	inode.c	FUNCTION_1	IF_1
0x40000b9	        0x48894378	             mov qword [rbx + 0x78], rax	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000bd	        0x48894368	             mov qword [rbx + 0x68], rax	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000c1	        0x48894358	             mov qword [rbx + 0x58], rax	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000c5	            0x19c0	                            sbb eax, eax	        28	inode.c	FUNCTION_1	IF_1
0x40000c7	    0x4181e400f000	                        and r12d, 0xf000	        29	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x40000ce	          0x83e008	                              and eax, 8	        28	inode.c	FUNCTION_1	IF_1
0x40000d1	    0x4181fc004000	                        cmp r12d, 0x4000	        29	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x40000d8	    0x488993800000	             mov qword [rbx + 0x80], rdx	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000df	        0x48895370	             mov qword [rbx + 0x70], rdx	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000e3	        0x48895360	             mov qword [rbx + 0x60], rdx	        27	inode.c	FUNCTION_1	IF_1	CALL_3
0x40000e7	          0x89430c	              mov dword [rbx + 0xc], eax	        28	inode.c	FUNCTION_1	IF_1
0x40000ea	            0x7420	                            je 0x400010c	        29	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x40000ec	    0x4181fc008000	                        cmp r12d, 0x8000	        29	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x40000f3	            0x750b	                           jne 0x4000100	        29	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x40000f5	    0x48c783580100	              mov qword [rbx + 0x158], 0	        31	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x4000100	          0x4889d8	                            mov rax, rbx	        41	inode.c	FUNCTION_1
0x4000103	              0x5b	                                 pop rbx	        41	inode.c	FUNCTION_1
0x4000104	            0x415a	                                 pop r10	        41	inode.c	FUNCTION_1
0x4000106	            0x415c	                                 pop r12	        41	inode.c	FUNCTION_1
0x4000108	            0x415d	                                 pop r13	        41	inode.c	FUNCTION_1
0x400010a	              0x5d	                                 pop rbp	        41	inode.c	FUNCTION_1
0x400010b	              0xc3	                                     ret	        41	inode.c	FUNCTION_1
0x400010c	    0x48c743200000	               mov qword [rbx + 0x20], 0	        34	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x4000114	    0x48c783580100	              mov qword [rbx + 0x158], 0	        35	inode.c	FUNCTION_1	IF_1	SWITCH_1
0x400011f	          0x4889df	                            mov rdi, rbx	        36	inode.c	FUNCTION_1	IF_1	SWITCH_1	CALL_4
0x4000122	      0xe800000000	                          call 0x4000127	        36	inode.c	FUNCTION_1	IF_1	SWITCH_1	CALL_4
0x4000127	          0x4889d8	                            mov rax, rbx	        41	inode.c	FUNCTION_1
0x400012a	              0x5b	                                 pop rbx	        41	inode.c	FUNCTION_1
0x400012b	            0x415a	                                 pop r10	        41	inode.c	FUNCTION_1
0x400012d	            0x415c	                                 pop r12	        41	inode.c	FUNCTION_1
0x400012f	            0x415d	                                 pop r13	        41	inode.c	FUNCTION_1
0x4000131	              0x5d	                                 pop rbp	        41	inode.c	FUNCTION_1
0x4000132	              0xc3	                                     ret	        41	inode.c	FUNCTION_1
efivarfs_exit	WHILE,0:FOR,0:SWITCH,0:IF,0:functions,0:DO,0:CALL,1:ELSE,0	5
0x4000040	        0x488b4630	            mov rax, qword [rsi + 0x30] 	       125	inode.c	FUNCTION_4	CALL_1
0x4000044	              0x55	                                push rbp	       124	inode.c	FUNCTION_4
0x4000045	      0xbdeaffffff	                     mov ebp, 0xffffffea	       128	inode.c	FUNCTION_4	IF_1
0x400004a	              0x53	                                push rbx	       124	inode.c	FUNCTION_4
0x400004b	              0x48	                                 invalid	       124	inode.c	FUNCTION_4
