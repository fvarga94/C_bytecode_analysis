set_origin	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,3:SWITCH,0	40
0x4000880	              0x53	                                push rbx	       610	vt.c	FUNCTION_23
0x4000881	          0x4889fb	                            mov rbx, rdi	       610	vt.c	FUNCTION_23
0x4000884	      0xe800000000	                          call 0x4000889	       611	vt.c	FUNCTION_23	CALL_1
0x4000889	            0x85c0	                           test eax, eax	       611	vt.c	FUNCTION_23	CALL_1
0x400088b	            0x750a	                           jne 0x4000897	       611	vt.c	FUNCTION_23	CALL_1
0x400088d	    0x8b0500000000	            mov eax, dword [0x04000893] 	       611	vt.c	FUNCTION_23	CALL_1
0x4000893	            0x85c0	                           test eax, eax	       611	vt.c	FUNCTION_23	CALL_1
0x4000895	            0x7456	                            je 0x40008ed	       611	vt.c	FUNCTION_23	CALL_1
0x4000897	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x400089e	          0x483b18	                    cmp rbx, qword [rax]	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x40008a1	            0x7458	                            je 0x40008fb	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x40008a3	    0x488b8ba00100	           mov rcx, qword [rbx + 0x1a0] 	       616	vt.c	FUNCTION_23	IF_1
0x40008aa	    0x48898b780100	            mov qword [rbx + 0x178], rcx	       616	vt.c	FUNCTION_23	IF_1
0x40008b1	    0x8b83a8010000	           mov eax, dword [rbx + 0x1a8] 	       618	vt.c	FUNCTION_23
0x40008b7	    0x8bb3bc010000	           mov esi, dword [rbx + 0x1bc] 	       619	vt.c	FUNCTION_23
0x40008bd	    0x48898b880100	            mov qword [rbx + 0x188], rcx	       617	vt.c	FUNCTION_23
0x40008c4	          0x8d1436	                    lea edx, [rsi + rsi]	       619	vt.c	FUNCTION_23
0x40008c7	          0x4801c8	                            add rax, rcx	       618	vt.c	FUNCTION_23
0x40008ca	    0x488983800100	            mov qword [rbx + 0x180], rax	       618	vt.c	FUNCTION_23
0x40008d1	    0x8b836c010000	           mov eax, dword [rbx + 0x16c] 	       619	vt.c	FUNCTION_23
0x40008d7	     0xfaf83c00100	           imul eax, dword [rbx + 0x1c0]	       619	vt.c	FUNCTION_23
0x40008de	          0x4801d0	                            add rax, rdx	       619	vt.c	FUNCTION_23
0x40008e1	          0x4801c8	                            add rax, rcx	       619	vt.c	FUNCTION_23
0x40008e4	    0x488983d00100	            mov qword [rbx + 0x1d0], rax	       619	vt.c	FUNCTION_23
0x40008eb	              0x5b	                                 pop rbx	       620	vt.c	FUNCTION_23
0x40008ec	              0xc3	                                     ret	       620	vt.c	FUNCTION_23
0x40008ed	             0xf0b	                                     ud2	       620	vt.c	FUNCTION_23
0x40008ef	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x40008f6	          0x483b18	                    cmp rbx, qword [rax]	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x40008f9	            0x75a8	                           jne 0x40008a3	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x40008fb	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       614	vt.c	FUNCTION_23	IF_1
0x4000902	    0x488b80900000	            mov rax, qword [rax + 0x90] 	       614	vt.c	FUNCTION_23	IF_1
0x4000909	          0x4885c0	                           test rax, rax	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x400090c	            0x7495	                            je 0x40008a3	       613	vt.c	FUNCTION_23	IF_1	CALL_2
0x400090e	          0x4889df	                            mov rdi, rbx	       615	vt.c	FUNCTION_23	IF_1	CALL_3
0x4000911	      0xe800000000	                          call 0x4000916	       615	vt.c	FUNCTION_23	IF_1	CALL_3
0x4000916	            0x85c0	                           test eax, eax	       614	vt.c	FUNCTION_23	IF_1
0x4000918	            0x7489	                            je 0x40008a3	       614	vt.c	FUNCTION_23	IF_1
0x400091a	    0x488b8b780100	           mov rcx, qword [rbx + 0x178] 	       614	vt.c	FUNCTION_23	IF_1
0x4000921	            0xeb8e	                           jmp 0x40008b1	       614	vt.c	FUNCTION_23	IF_1
restore_cur	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,3:SWITCH,0	62
0x40001c5	              0x5d	                                 pop rbp	       385	vt.c	FUNCTION_11
0x40001c6	            0x415e	                                 pop r14	       385	vt.c	FUNCTION_11
0x40001c8	            0x415f	                                 pop r15	       385	vt.c	FUNCTION_11
0x40001ca	              0xc3	                                     ret	       385	vt.c	FUNCTION_11
0x40001cb	          0x4889f0	                            mov rax, rsi	       350	vt.c	FUNCTION_11	IF_1
0x40001ce	    0x482b87780100	            sub rax, qword [rdi + 0x178]	       350	vt.c	FUNCTION_11	IF_1
0x40001d5	    0x8b8f64010000	           mov ecx, dword [rdi + 0x164] 	       351	vt.c	FUNCTION_11	IF_1
0x40001db	            0x31d2	                            xor edx, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001dd	          0x48d1e8	                              shr rax, 1	       350	vt.c	FUNCTION_11	IF_1
0x40001e0	            0xf7f1	                                 div ecx	       352	vt.c	FUNCTION_11	IF_1
0x40001e2	            0x89d5	                            mov ebp, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001e4	          0x4189c4	                           mov r12d, eax	       352	vt.c	FUNCTION_11	IF_1
0x40001e7	      0xe9bdfeffff	                           jmp 0x40000a9	       352	vt.c	FUNCTION_11	IF_1
0x40001ec	      0xe800000000	                          call 0x40001f1	       385	vt.c	FUNCTION_11
0x40001f1	       0xf1f440000	                   nop dword [rax + rax]	       385	vt.c	FUNCTION_11
0x40001f6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       385	vt.c	FUNCTION_11
0x4000200	    0x8b87b4010000	           mov eax, dword [rdi + 0x1b4] 	       562	vt.c	FUNCTION_19
0x4000206	            0xa810	                           test al, 0x10	       564	vt.c	FUNCTION_19	IF_1
0x4000208	            0x7409	                            je 0x4000213	       564	vt.c	FUNCTION_19	IF_1
0x400020a	    0x833d00000000	cmp dword [0x04000211], 0xffffffffffffffff	       565	vt.c	FUNCTION_19	IF_2
0x4000211	            0x7402	                            je 0x4000215	       565	vt.c	FUNCTION_19	IF_2
0x4000213	            0xf3c3	                                     ret	       565	vt.c	FUNCTION_19	IF_2
0x4000215	    0x488b8fd00100	           mov rcx, qword [rdi + 0x1d0] 	       561	vt.c	FUNCTION_19
0x400021c	            0x89c6	                            mov esi, eax	       568	vt.c	FUNCTION_19
0x400021e	          0x4189c0	                            mov r8d, eax	       568	vt.c	FUNCTION_19
0x4000221	          0xc1ee08	                              shr esi, 8	       568	vt.c	FUNCTION_19
0x4000224	    0x4181e000ff00	                         and r8d, 0xff00	       568	vt.c	FUNCTION_19
0x400022b	    0x81e600ff0000	                         and esi, 0xff00	       568	vt.c	FUNCTION_19
0x4000231	           0xfb711	                   movzx edx, word [rcx]	       561	vt.c	FUNCTION_19
0x4000234	             0x9d6	                             or esi, edx	       568	vt.c	FUNCTION_19
0x4000236	    0x891500000000	            mov dword [0x0400023c], edx 	       566	vt.c	FUNCTION_19
0x400023c	          0x4431c6	                            xor esi, r8d	       568	vt.c	FUNCTION_19
0x400023f	            0xa820	                           test al, 0x20	       569	vt.c	FUNCTION_19	IF_3
0x4000241	            0x7413	                            je 0x4000256	       569	vt.c	FUNCTION_19	IF_3
0x4000243	            0x31f2	                            xor edx, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000245	          0x4189f0	                            mov r8d, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000248	    0x4181f0007000	                         xor r8d, 0x7000	       569	vt.c	FUNCTION_19	IF_3
0x400024f	          0x80e670	                            and dh, 0x70	       569	vt.c	FUNCTION_19	IF_3
0x4000252	        0x410f44f0	                          cmove esi, r8d	       569	vt.c	FUNCTION_19	IF_3
0x4000256	            0xa840	                           test al, 0x40	       570	vt.c	FUNCTION_19	IF_4
0x4000258	            0x741f	                            je 0x4000279	       570	vt.c	FUNCTION_19	IF_4
0x400025a	            0x89f0	                            mov eax, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025c	          0x4189f0	                            mov r8d, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025f	            0x89f2	                            mov edx, esi	       570	vt.c	FUNCTION_19	IF_4
0x4000261	      0x2500700000	                         and eax, 0x7000	       570	vt.c	FUNCTION_19	IF_4
0x4000266	    0x4181e0000700	                          and r8d, 0x700	       570	vt.c	FUNCTION_19	IF_4
0x400026d	          0x80f607	                               xor dh, 7	       570	vt.c	FUNCTION_19	IF_4
0x4000270	          0xc1f804	                              sar eax, 4	       570	vt.c	FUNCTION_19	IF_4
0x4000273	          0x4139c0	                            cmp r8d, eax	       570	vt.c	FUNCTION_19	IF_4
0x4000276	           0xf44f2	                          cmove esi, edx	       570	vt.c	FUNCTION_19	IF_4
0x4000279	          0x668931	                      mov word [rcx], si	       571	vt.c	FUNCTION_19
0x400027c	    0x488b87f80200	           mov rax, qword [rdi + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4000283	          0x483b38	                    cmp rdi, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4000286	            0x758b	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000288	    0x8b0500000000	            mov eax, dword [0x0400028e] 	       289	vt.c	FUNCTION_6	CALL_1
0x400028e	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x4000290	            0x7581	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000292	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       573	vt.c	FUNCTION_19	CALL_2
0x4000299	    0x8b8fbc010000	           mov ecx, dword [rdi + 0x1bc] 	       573	vt.c	FUNCTION_19	CALL_2
0x400029f	              0x8b	                                 invalid	       573	vt.c	FUNCTION_19	CALL_2
0x40002a0	              0x97	                           xchg eax, edi	       573	vt.c	FUNCTION_19	CALL_2
0x40002a1	          0xc00100	                       rol byte [rcx], 0	       573	vt.c	FUNCTION_19	CALL_2
con_write_room	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,0:SWITCH,0	6
0x4000480	     0xfb687d40100	          movzx eax, byte [rdi + 0x1d4] 	      2801	vt.c	FUNCTION_82	IF_1
0x4000487	          0x83e001	                              and eax, 1	      2801	vt.c	FUNCTION_82	IF_1
0x400048a	            0x3c01	                               cmp al, 1	      2803	vt.c	FUNCTION_82
0x400048c	            0x19c0	                            sbb eax, eax	      2803	vt.c	FUNCTION_82
0x400048e	      0x2500800000	                         and eax, 0x8000	      2803	vt.c	FUNCTION_82
0x4000493	              0xc3	                                     ret	      2804	vt.c	FUNCTION_82
putconsxy	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,3:SWITCH,0	13
0x4006300	              0x55	                                push rbp	      4276	vt.c	FUNCTION_135
0x4006301	              0x53	                                push rbx	      4276	vt.c	FUNCTION_135
0x4006302	          0x4889f5	                            mov rbp, rsi	      4276	vt.c	FUNCTION_135
0x4006305	          0x4889fb	                            mov rbx, rdi	      4276	vt.c	FUNCTION_135
0x4006308	      0xe8c3a3ffff	                    call sym.hide_cursor	      4277	vt.c	FUNCTION_135	CALL_1
0x400630d	         0xfb65501	               movzx edx, byte [rbp + 1]	      4278	vt.c	FUNCTION_135	CALL_2
0x4006311	         0xfb67500	                   movzx esi, byte [rbp]	      4278	vt.c	FUNCTION_135	CALL_2
0x4006315	          0x4889df	                            mov rdi, rbx	      4278	vt.c	FUNCTION_135	CALL_2
0x4006318	      0xe8939fffff	                         call sym.gotoxy	      4278	vt.c	FUNCTION_135	CALL_2
0x400631d	          0x4889df	                            mov rdi, rbx	      4279	vt.c	FUNCTION_135	CALL_3
0x4006320	              0x5b	                                 pop rbx	      4280	vt.c	FUNCTION_135
0x4006321	              0x5d	                                 pop rbp	      4280	vt.c	FUNCTION_135
0x4006322	      0xe9e9aeffff	                      jmp sym.set_cursor	      4279	vt.c	FUNCTION_135	CALL_3
reset_terminal	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,7:SWITCH,0	126
0x40016f0	              0x55	                                push rbp	      1703	vt.c	FUNCTION_68
0x40016f1	              0x53	                                push rbx	      1703	vt.c	FUNCTION_68
0x40016f2	            0x89f5	                            mov ebp, esi	      1703	vt.c	FUNCTION_68
0x40016f4	    0x8b8768010000	           mov eax, dword [rdi + 0x168] 	      1705	vt.c	FUNCTION_68
0x40016fa	    0x80a77a020000	            and byte [rdi + 0x27a], 0xdf	      1707	vt.c	FUNCTION_68
0x4001701	          0x4889fb	                            mov rbx, rdi	      1703	vt.c	FUNCTION_68
0x4001704	          0x4889fe	                            mov rsi, rdi	      1708	vt.c	FUNCTION_68	CALL_1
0x4001707	    0xc78790010000	              mov dword [rdi + 0x190], 0	      1704	vt.c	FUNCTION_68
0x4001711	    0xc787fc010000	              mov dword [rdi + 0x1fc], 0	      1706	vt.c	FUNCTION_68
0x400171b	    0x898794010000	            mov dword [rdi + 0x194], eax	      1705	vt.c	FUNCTION_68
0x4001721	            0x31ff	                            xor edi, edi	      1708	vt.c	FUNCTION_68	CALL_1
0x4001723	      0xe800000000	                          call 0x4001728	      1708	vt.c	FUNCTION_68	CALL_1
0x4001728	    0x488983d80200	            mov qword [rbx + 0x2d8], rax	      1708	vt.c	FUNCTION_68	CALL_1
0x400172f	     0xfb6837b0200	          movzx eax, byte [rbx + 0x27b] 	      1713	vt.c	FUNCTION_68
0x4001736	    0x80a37a020000	            and byte [rbx + 0x27a], 0xbf	      1712	vt.c	FUNCTION_68
0x400173d	     0xfb7bb600100	          movzx edi, word [rbx + 0x160] 	      1726	vt.c	FUNCTION_68	CALL_2
0x4001744	    0xc683e0020000	               mov byte [rbx + 0x2e0], 0	      1709	vt.c	FUNCTION_68
0x400174b	    0xc683e1020000	               mov byte [rbx + 0x2e1], 1	      1710	vt.c	FUNCTION_68
0x4001752	    0xc6837c020000	               mov byte [rbx + 0x27c], 0	      1715	vt.c	FUNCTION_68
0x4001759	            0x89c2	                            mov edx, eax	      1713	vt.c	FUNCTION_68
0x400175b	          0x83e0f8	                     and eax, 0xfffffff8	      1714	vt.c	FUNCTION_68
0x400175e	          0x83e2fc	                     and edx, 0xfffffffc	      1713	vt.c	FUNCTION_68
0x4001761	    0x88937b020000	              mov byte [rbx + 0x27b], dl	      1713	vt.c	FUNCTION_68
0x4001767	     0xfb615000000	           movzx edx, byte [0x0400176e] 	      1714	vt.c	FUNCTION_68
0x400176e	          0x83e201	                              and edx, 1	      1714	vt.c	FUNCTION_68
0x4001771	          0xc1e202	                              shl edx, 2	      1714	vt.c	FUNCTION_68
0x4001774	             0x9d0	                             or eax, edx	      1714	vt.c	FUNCTION_68
0x4001776	    0x88837b020000	              mov byte [rbx + 0x27b], al	      1714	vt.c	FUNCTION_68
0x400177c	     0xfb683780200	          movzx eax, byte [rbx + 0x278] 	      1722	vt.c	FUNCTION_68
0x4001783	     0xfb615000000	           movzx edx, byte [0x0400178a] 	      1723	vt.c	FUNCTION_68
0x400178a	    0x80a379020000	            and byte [rbx + 0x279], 0xfe	      1724	vt.c	FUNCTION_68
0x4001791	          0x83e002	                              and eax, 2	      1722	vt.c	FUNCTION_68
0x4001794	          0xc1e207	                              shl edx, 7	      1723	vt.c	FUNCTION_68
0x4001797	          0x83c840	                            or eax, 0x40	      1723	vt.c	FUNCTION_68
0x400179a	             0x9d0	                             or eax, edx	      1723	vt.c	FUNCTION_68
0x400179c	    0x888378020000	              mov byte [rbx + 0x278], al	      1723	vt.c	FUNCTION_68
0x40017a2	      0xe800000000	                          call 0x40017a7	      1726	vt.c	FUNCTION_68	CALL_2
0x40017a7	    0x8b0500000000	            mov eax, dword [0x040017ad] 	      1728	vt.c	FUNCTION_68
0x40017ad	          0x4889df	                            mov rdi, rbx	      1732	vt.c	FUNCTION_68	CALL_4
0x40017b0	    0x8983b4010000	            mov dword [rbx + 0x1b4], eax	      1728	vt.c	FUNCTION_68
0x40017b6	     0xfb783ba0100	          movzx eax, word [rbx + 0x1ba] 	      1729	vt.c	FUNCTION_68
0x40017bd	    0x668983b80100	              mov word [rbx + 0x1b8], ax	      1729	vt.c	FUNCTION_68
0x40017c4	     0xfb683790200	          movzx eax, byte [rbx + 0x279] 	      1245	vt.c	FUNCTION_48
0x40017cb	          0x83e081	                     and eax, 0xffffff81	      1245	vt.c	FUNCTION_48
0x40017ce	          0x83c802	                               or eax, 2	      1249	vt.c	FUNCTION_48
0x40017d1	    0x888379020000	              mov byte [rbx + 0x279], al	      1249	vt.c	FUNCTION_48
0x40017d7	     0xfb683ae0100	          movzx eax, byte [rbx + 0x1ae] 	      1250	vt.c	FUNCTION_48
0x40017de	    0x8883af010000	              mov byte [rbx + 0x1af], al	      1250	vt.c	FUNCTION_48
0x40017e4	      0xe887f9ffff	                    call sym.update_attr	      1732	vt.c	FUNCTION_68	CALL_4
0x40017e9	      0xb8c8000000	                           mov eax, 0xc8	      1745	vt.c	FUNCTION_68
0x40017ee	            0x31d2	                            xor edx, edx	      1747	vt.c	FUNCTION_68	CALL_5
0x40017f0	            0x31f6	                            xor esi, esi	      1747	vt.c	FUNCTION_68	CALL_5
0x40017f2	    0x668983f00200	              mov word [rbx + 0x2f0], ax	      1745	vt.c	FUNCTION_68
0x40017f9	          0x4889df	                            mov rdi, rbx	      1747	vt.c	FUNCTION_68	CALL_5
0x40017fc	    0xc783a0020000	     mov dword [rbx + 0x2a0], 0x1010101 	      1741	vt.c	FUNCTION_68
0x4001806	    0xc7839c020000	     mov dword [rbx + 0x29c], 0x1010101 	      1740	vt.c	FUNCTION_68
0x4001810	    0xc78398020000	     mov dword [rbx + 0x298], 0x1010101 	      1739	vt.c	FUNCTION_68
0x400181a	    0xc78394020000	     mov dword [rbx + 0x294], 0x1010101 	      1738	vt.c	FUNCTION_68
0x4001824	    0xc78390020000	     mov dword [rbx + 0x290], 0x1010101 	      1737	vt.c	FUNCTION_68
0x400182e	    0xc7838c020000	     mov dword [rbx + 0x28c], 0x1010101 	      1736	vt.c	FUNCTION_68
0x4001838	    0xc78388020000	     mov dword [rbx + 0x288], 0x1010101 	      1735	vt.c	FUNCTION_68
0x4001842	    0xc78384020000	     mov dword [rbx + 0x284], 0x1010101 	      1734	vt.c	FUNCTION_68
0x400184c	    0xc783e8020000	         mov dword [rbx + 0x2e8], 0x2ee 	      1743	vt.c	FUNCTION_68
0x4001856	    0xc783ec020000	          mov dword [rbx + 0x2ec], 0x7d 	      1744	vt.c	FUNCTION_68
0x4001860	      0xe84beaffff	                         call sym.gotoxy	      1747	vt.c	FUNCTION_68	CALL_5
0x4001865	    0x8b83bc010000	           mov eax, dword [rbx + 0x1bc] 	      1666	vt.c	FUNCTION_66
0x400186b	    0x8b9378020000	           mov edx, dword [rbx + 0x278] 	      1668	vt.c	FUNCTION_66
0x4001871	    0x8983c4010000	            mov dword [rbx + 0x1c4], eax	      1666	vt.c	FUNCTION_66
0x4001877	    0x8b83c0010000	           mov eax, dword [rbx + 0x1c0] 	      1667	vt.c	FUNCTION_66
0x400187d	    0x81e2ff7ffeff	                     and edx, 0xfffe7fff	      1668	vt.c	FUNCTION_66
0x4001883	    0x8983c8010000	            mov dword [rbx + 0x1c8], eax	      1667	vt.c	FUNCTION_66
0x4001889	     0xfb683790200	          movzx eax, byte [rbx + 0x279] 	      1668	vt.c	FUNCTION_66
0x4001890	            0xd0e8	                               shr al, 1	      1668	vt.c	FUNCTION_66
0x4001892	          0x83e003	                              and eax, 3	      1668	vt.c	FUNCTION_66
0x4001895	          0xc1e00f	                            shl eax, 0xf	      1668	vt.c	FUNCTION_66
0x4001898	             0x9d0	                             or eax, edx	      1668	vt.c	FUNCTION_66
0x400189a	            0x89c1	                            mov ecx, eax	      1669	vt.c	FUNCTION_66
0x400189c	    0x898378020000	            mov dword [rbx + 0x278], eax	      1668	vt.c	FUNCTION_66
0x40018a2	        0x66c1e908	                               shr cx, 8	      1669	vt.c	FUNCTION_66
0x40018a6	            0x89ca	                            mov edx, ecx	      1669	vt.c	FUNCTION_66
0x40018a8	            0x89ce	                            mov esi, ecx	      1669	vt.c	FUNCTION_66
0x40018aa	            0x89c1	                            mov ecx, eax	      1669	vt.c	FUNCTION_66
0x40018ac	        0x40c0ee02	                              shr sil, 2	      1669	vt.c	FUNCTION_66
0x40018b0	          0xc1e910	                           shr ecx, 0x10	      1669	vt.c	FUNCTION_66
0x40018b3	            0x89f7	                            mov edi, esi	      1669	vt.c	FUNCTION_66
0x40018b5	            0x89ce	                            mov esi, ecx	      1669	vt.c	FUNCTION_66
0x40018b7	            0x89d1	                            mov ecx, edx	      1670	vt.c	FUNCTION_66
0x40018b9	          0x83e702	                              and edi, 2	      1669	vt.c	FUNCTION_66
0x40018bc	          0x83e6f9	                     and esi, 0xfffffff9	      1669	vt.c	FUNCTION_66
0x40018bf	          0xc0e902	                               shr cl, 2	      1670	vt.c	FUNCTION_66
0x40018c2	          0x83e104	                              and ecx, 4	      1670	vt.c	FUNCTION_66
0x40018c5	             0x9fe	                             or esi, edi	      1670	vt.c	FUNCTION_66
0x40018c7	            0x89d7	                            mov edi, edx	      1671	vt.c	FUNCTION_66
0x40018c9	             0x9ce	                             or esi, ecx	      1670	vt.c	FUNCTION_66
0x40018cb	        0x40c0ef02	                              shr dil, 2	      1671	vt.c	FUNCTION_66
0x40018cf	          0xc0ea02	                               shr dl, 2	      1672	vt.c	FUNCTION_66
0x40018d2	          0x83e708	                              and edi, 8	      1671	vt.c	FUNCTION_66
0x40018d5	          0x83e6e7	                     and esi, 0xffffffe7	      1671	vt.c	FUNCTION_66
0x40018d8	            0x89d1	                            mov ecx, edx	      1672	vt.c	FUNCTION_66
0x40018da	             0x9fe	                             or esi, edi	      1672	vt.c	FUNCTION_66
0x40018dc	          0x83e110	                           and ecx, 0x10	      1672	vt.c	FUNCTION_66
0x40018df	            0x89f2	                            mov edx, esi	      1672	vt.c	FUNCTION_66
0x40018e1	             0x9ca	                             or edx, ecx	      1672	vt.c	FUNCTION_66
0x40018e3	    0x88937a020000	              mov byte [rbx + 0x27a], dl	      1672	vt.c	FUNCTION_66
0x40018e9	            0x89c2	                            mov edx, eax	      1673	vt.c	FUNCTION_66
0x40018eb	          0x83e0fd	                     and eax, 0xfffffffd	      1673	vt.c	FUNCTION_66
0x40018ee	          0x83e201	                              and edx, 1	      1673	vt.c	FUNCTION_66
0x40018f1	             0x1d2	                            add edx, edx	      1673	vt.c	FUNCTION_66
0x40018f3	             0x9d0	                             or eax, edx	      1673	vt.c	FUNCTION_66
0x40018f5	            0x85ed	                           test ebp, ebp	      1749	vt.c	FUNCTION_68	IF_1
0x40018f7	    0x888378020000	              mov byte [rbx + 0x278], al	      1673	vt.c	FUNCTION_66
0x40018fd	     0xfb683af0100	          movzx eax, byte [rbx + 0x1af] 	      1674	vt.c	FUNCTION_66
0x4001904	    0x8883b0010000	              mov byte [rbx + 0x1b0], al	      1674	vt.c	FUNCTION_66
0x400190a	     0xfb683e00200	          movzx eax, byte [rbx + 0x2e0] 	      1675	vt.c	FUNCTION_66
0x4001911	    0x8883e2020000	              mov byte [rbx + 0x2e2], al	      1675	vt.c	FUNCTION_66
0x4001917	     0xfb683e10200	          movzx eax, byte [rbx + 0x2e1] 	      1676	vt.c	FUNCTION_66
0x400191e	    0x8883e3020000	              mov byte [rbx + 0x2e3], al	      1676	vt.c	FUNCTION_66
0x4001924	            0x7503	                           jne 0x4001929	      1749	vt.c	FUNCTION_68	IF_1
0x4001926	              0x5b	                                 pop rbx	      1751	vt.c	FUNCTION_68
0x4001927	              0x5d	                                 pop rbp	      1751	vt.c	FUNCTION_68
0x4001928	              0xc3	                                     ret	      1751	vt.c	FUNCTION_68
0x4001929	          0x4889df	                            mov rdi, rbx	      1750	vt.c	FUNCTION_68	CALL_7
0x400192c	      0xbe02000000	                              mov esi, 2	      1750	vt.c	FUNCTION_68	CALL_7
0x4001931	              0x5b	                                 pop rbx	      1751	vt.c	FUNCTION_68
0x4001932	              0x5d	                                 pop rbp	      1751	vt.c	FUNCTION_68
0x4001933	      0xe998fcffff	                           jmp sym.csi_J	      1750	vt.c	FUNCTION_68	CALL_7
con_stop	ELSE,0:WHILE,0:DO,0:functions,0:IF,2:FOR,0:CALL,2:SWITCH,0	11
0x4000d40	          0x4885ff	                           test rdi, rdi	      2833	vt.c	FUNCTION_86	IF_1
0x4000d43	            0x741e	                            je 0x4000d63	      2833	vt.c	FUNCTION_86	IF_1
0x4000d45	          0x8b7f20	            mov edi, dword [rdi + 0x20] 	      2835	vt.c	FUNCTION_86
0x4000d48	          0x83ff3e	                           cmp edi, 0x3e	       722	vt.c	FUNCTION_28
0x4000d4b	            0x7716	                            ja 0x4000d63	       722	vt.c	FUNCTION_28
0x4000d4d	            0x89f8	                            mov eax, edi	       722	vt.c	FUNCTION_28
0x4000d4f	        0x488d0480	                  lea rax, [rax + rax*4]	       722	vt.c	FUNCTION_28
0x4000d53	    0x48833cc50000	                    cmp qword [rax*8], 0	       722	vt.c	FUNCTION_28
0x4000d5c	            0x7405	                            je 0x4000d63	       722	vt.c	FUNCTION_28
0x4000d5e	      0xe900000000	                           jmp 0x4000d63	      2838	vt.c	FUNCTION_86	CALL_2
0x4000d63	            0xf3c3	                                     ret	      2838	vt.c	FUNCTION_86	CALL_2
give_up_console	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,3:SWITCH,0	7
0x4000820	              0x53	                                push rbx	      3756	vt.c	FUNCTION_115
0x4000821	          0x4889fb	                            mov rbx, rdi	      3756	vt.c	FUNCTION_115
0x4000824	      0xe800000000	                          call 0x4000829	      3757	vt.c	FUNCTION_115	CALL_1
0x4000829	          0x4889df	                            mov rdi, rbx	      3758	vt.c	FUNCTION_115	CALL_2
0x400082c	      0xe800000000	                          call 0x4000831	      3758	vt.c	FUNCTION_115	CALL_2
0x4000831	              0x5b	                                 pop rbx	      3760	vt.c	FUNCTION_115
0x4000832	      0xe900000000	                           jmp 0x4000837	      3759	vt.c	FUNCTION_115	CALL_3
vcs_scr_writew	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,1:SWITCH,0	6
0x4006350	          0x668932	                      mov word [rdx], si	      4291	vt.c	FUNCTION_137
0x4006353	    0x483b97d00100	           cmp rdx, qword [rdi + 0x1d0] 	      4292	vt.c	FUNCTION_137	IF_1
0x400635a	            0x7402	                            je 0x400635e	      4292	vt.c	FUNCTION_137	IF_1
0x400635c	            0xf3c3	                                     ret	      4292	vt.c	FUNCTION_137	IF_1
0x400635e	    0xc70500000000	     mov dword [0x04006368], 0xffffffff 	      4293	vt.c	FUNCTION_137	IF_1
0x4006368	      0xe9939effff	                  jmp sym.add_softcursor	      4294	vt.c	FUNCTION_137	IF_1	CALL_1
do_unbind_con_driver	ELSE,0:WHILE,0:DO,0:functions,0:IF,9:FOR,3:CALL,11:SWITCH,0	141
0x4002320	            0x4157	                                push r15	      3223	vt.c	FUNCTION_98
0x4002322	            0x4156	                                push r14	      3223	vt.c	FUNCTION_98
0x4002324	          0x4989ff	                            mov r15, rdi	      3223	vt.c	FUNCTION_98
0x4002327	            0x4155	                                push r13	      3223	vt.c	FUNCTION_98
0x4002329	            0x4154	                                push r12	      3223	vt.c	FUNCTION_98
0x400232b	          0x4189cd	                           mov r13d, ecx	      3223	vt.c	FUNCTION_98
0x400232e	              0x55	                                push rbp	      3223	vt.c	FUNCTION_98
0x400232f	              0x53	                                push rbx	      3223	vt.c	FUNCTION_98
0x4002330	          0x4189f4	                           mov r12d, esi	      3223	vt.c	FUNCTION_98
0x4002333	            0x89d3	                            mov ebx, edx	      3223	vt.c	FUNCTION_98
0x4002335	        0x4883ec28	                           sub rsp, 0x28	      3223	vt.c	FUNCTION_98
0x4002339	          0x488b2f	                    mov rbp, qword [rdi]	      3224	vt.c	FUNCTION_98
0x400233c	          0x4889ef	                            mov rdi, rbp	      3229	vt.c	FUNCTION_98	IF_1	CALL_1
0x400233f	      0xe800000000	                          call 0x4002344	      3229	vt.c	FUNCTION_98	IF_1	CALL_1
0x4002344	            0x84c0	                             test al, al	      3229	vt.c	FUNCTION_98	IF_1	CALL_1
0x4002346	      0xbaedffffff	                     mov edx, 0xffffffed	      3229	vt.c	FUNCTION_98	IF_1	CALL_1
0x400234b	            0x7458	                            je 0x40023a5	      3229	vt.c	FUNCTION_98	IF_1	CALL_1
0x400234d	      0xe800000000	                          call 0x4002352	      3232	vt.c	FUNCTION_98	CALL_2
0x4002352	            0x85c0	                           test eax, eax	      3232	vt.c	FUNCTION_98	CALL_2
0x4002354	            0x7460	                            je 0x40023b6	      3232	vt.c	FUNCTION_98	CALL_2
0x4002356	    0x48c7c1000000	                              mov rcx, 0	      3232	vt.c	FUNCTION_98	CALL_2
0x400235d	            0x31d2	                            xor edx, edx	      3223	vt.c	FUNCTION_98
0x400235f	          0x4889c8	                            mov rax, rcx	      3223	vt.c	FUNCTION_98
0x4002362	            0xeb0c	                           jmp 0x4002370	      3223	vt.c	FUNCTION_98
0x4002364	          0x83c201	                              add edx, 1	      3235	vt.c	FUNCTION_98	FOR_1
0x4002367	        0x4883c028	                           add rax, 0x28	      3235	vt.c	FUNCTION_98	FOR_1
0x400236b	          0x83fa10	                           cmp edx, 0x10	      3235	vt.c	FUNCTION_98	FOR_1
0x400236e	            0x7426	                            je 0x4002396	      3235	vt.c	FUNCTION_98	FOR_1
0x4002370	          0x4c3b38	                    cmp r15, qword [rax]	      3238	vt.c	FUNCTION_98	FOR_1	IF_2
0x4002373	            0x75ef	                           jne 0x4002364	      3238	vt.c	FUNCTION_98	FOR_1	IF_2
0x4002375	        0xf6402401	               test byte [rax + 0x24], 1	      3238	vt.c	FUNCTION_98	FOR_1	IF_2
0x4002379	            0x74e9	                            je 0x4002364	      3238	vt.c	FUNCTION_98	FOR_1	IF_2
0x400237b	            0x31f6	                            xor esi, esi	      3238	vt.c	FUNCTION_98	FOR_1	IF_2
0x400237d	          0x4c8b31	                    mov r14, qword [rcx]	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x4002380	          0x4d85f6	                           test r14, r14	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x4002383	            0x7405	                            je 0x400238a	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x4002385	          0x4d39f7	                            cmp r15, r14	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x4002388	            0x753a	                           jne 0x40023c4	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x400238a	          0x83c601	                              add esi, 1	      3251	vt.c	FUNCTION_98	FOR_2
0x400238d	        0x4883c128	                           add rcx, 0x28	      3251	vt.c	FUNCTION_98	FOR_2
0x4002391	          0x83fe10	                           cmp esi, 0x10	      3251	vt.c	FUNCTION_98	FOR_2
0x4002394	            0x75e7	                           jne 0x400237d	      3251	vt.c	FUNCTION_98	FOR_2
0x4002396	      0xbbedffffff	                     mov ebx, 0xffffffed	      3227	vt.c	FUNCTION_98
0x400239b	          0x4889ef	                            mov rdi, rbp	      3295	vt.c	FUNCTION_98	CALL_11
0x400239e	      0xe800000000	                          call 0x40023a3	      3295	vt.c	FUNCTION_98	CALL_11
0x40023a3	            0x89da	                            mov edx, ebx	      3296	vt.c	FUNCTION_98
0x40023a5	        0x4883c428	                           add rsp, 0x28	      3298	vt.c	FUNCTION_98
0x40023a9	            0x89d0	                            mov eax, edx	      3298	vt.c	FUNCTION_98
0x40023ab	              0x5b	                                 pop rbx	      3298	vt.c	FUNCTION_98
0x40023ac	              0x5d	                                 pop rbp	      3298	vt.c	FUNCTION_98
0x40023ad	            0x415c	                                 pop r12	      3298	vt.c	FUNCTION_98
0x40023af	            0x415d	                                 pop r13	      3298	vt.c	FUNCTION_98
0x40023b1	            0x415e	                                 pop r14	      3298	vt.c	FUNCTION_98
0x40023b3	            0x415f	                                 pop r15	      3298	vt.c	FUNCTION_98
0x40023b5	              0xc3	                                     ret	      3298	vt.c	FUNCTION_98
0x40023b6	    0x8b0500000000	            mov eax, dword [0x040023bc] 	      3232	vt.c	FUNCTION_98	CALL_2
0x40023bc	            0x85c0	                           test eax, eax	      3232	vt.c	FUNCTION_98	CALL_2
0x40023be	            0x7596	                           jne 0x4002356	      3232	vt.c	FUNCTION_98	CALL_2
0x40023c0	             0xf0b	                                     ud2	      3232	vt.c	FUNCTION_98	CALL_2
0x40023c2	            0xeb92	                           jmp 0x4002356	      3232	vt.c	FUNCTION_98	CALL_2
0x40023c4	    0x48c7c1000000	                              mov rcx, 0	      3232	vt.c	FUNCTION_98	CALL_2
0x40023cb	    0x49c7c1000000	                               mov r9, 0	      3232	vt.c	FUNCTION_98	CALL_2
0x40023d2	          0x4889c8	                            mov rax, rcx	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x40023d5	            0xeb0d	                           jmp 0x40023e4	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x40023d7	        0x4883c008	                              add rax, 8	      3254	vt.c	FUNCTION_98	FOR_2	IF_4
0x40023db	          0x4939c1	                             cmp r9, rax	      3476	vt.c	FUNCTION_108	FOR_1
0x40023de	     0xf84cf000000	                            je 0x40024b3	      3476	vt.c	FUNCTION_108	FOR_1
0x40023e4	          0x4c3b38	                    cmp r15, qword [rax]	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40023e7	            0x75ee	                           jne 0x40023d7	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40023e9	          0x4863c2	                         movsxd rax, edx	      3267	vt.c	FUNCTION_98	CALL_4
0x40023ec	      0x4889442420	             mov qword [rsp + 0x20], rax	      3267	vt.c	FUNCTION_98	CALL_4
0x40023f1	        0x488d0480	                  lea rax, [rax + rax*4]	      3267	vt.c	FUNCTION_98	CALL_4
0x40023f5	    0x488d04c50000	                        lea rax, [rax*8]	      3267	vt.c	FUNCTION_98	CALL_4
0x40023fd	        0x4439601c	           cmp dword [rax + 0x1c], r12d 	      3267	vt.c	FUNCTION_98	CALL_4
0x4002401	      0x440f4d601c	         cmovge r12d, dword [rax + 0x1c]	      3267	vt.c	FUNCTION_98	CALL_4
0x4002406	          0x395820	            cmp dword [rax + 0x20], ebx 	      3268	vt.c	FUNCTION_98	CALL_5
0x4002409	         0xf4e5820	          cmovle ebx, dword [rax + 0x20]	      3268	vt.c	FUNCTION_98	CALL_5
0x400240d	          0x4489e7	                           mov edi, r12d	      3267	vt.c	FUNCTION_98	CALL_4
0x4002410	      0x448964241c	            mov dword [rsp + 0x1c], r12d	      3267	vt.c	FUNCTION_98	CALL_4
0x4002415	            0x39df	                            cmp edi, ebx	      3270	vt.c	FUNCTION_98	FOR_3
0x4002417	          0x4189dc	                           mov r12d, ebx	      3268	vt.c	FUNCTION_98	CALL_5
0x400241a	            0x7f5b	                            jg 0x4002477	      3270	vt.c	FUNCTION_98	FOR_3
0x400241c	        0x8b5c241c	            mov ebx, dword [rsp + 0x1c] 	      3270	vt.c	FUNCTION_98	FOR_3
0x4002420	            0xeb08	                           jmp 0x400242a	      3270	vt.c	FUNCTION_98	FOR_3
0x4002422	          0x83c301	                              add ebx, 1	      3270	vt.c	FUNCTION_98	FOR_3
0x4002425	          0x4139dc	                           cmp r12d, ebx	      3270	vt.c	FUNCTION_98	FOR_3
0x4002428	            0x7c4d	                            jl 0x4002477	      3270	vt.c	FUNCTION_98	FOR_3
0x400242a	          0x4863c3	                         movsxd rax, ebx	      3271	vt.c	FUNCTION_98	FOR_3	IF_7
0x400242d	    0x4c3b3cc50000	                  cmp r15, qword [rax*8]	      3271	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002435	            0x75eb	                           jne 0x4002422	      3271	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002437	          0x498b3f	                    mov rdi, qword [r15]	      3272	vt.c	FUNCTION_98	FOR_3	IF_7	CALL_6
0x400243a	      0x4889442410	             mov qword [rsp + 0x10], rax	      3272	vt.c	FUNCTION_98	FOR_3	IF_7	CALL_6
0x400243f	          0x83c301	                              add ebx, 1	      3270	vt.c	FUNCTION_98	FOR_3
0x4002442	      0x48894c2408	                mov qword [rsp + 8], rcx	      3270	vt.c	FUNCTION_98	FOR_3
0x4002447	        0x4c890c24	                     mov qword [rsp], r9	      3270	vt.c	FUNCTION_98	FOR_3
0x400244b	        0x89742418	             mov dword [rsp + 0x18], esi	      3270	vt.c	FUNCTION_98	FOR_3
0x400244f	      0xe800000000	                          call 0x4002454	      3272	vt.c	FUNCTION_98	FOR_3	IF_7	CALL_6
0x4002454	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      3273	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002459	          0x4139dc	                           cmp r12d, ebx	      3270	vt.c	FUNCTION_98	FOR_3
0x400245c	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      3273	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002461	        0x4c8b0c24	                     mov r9, qword [rsp]	      3273	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002465	        0x8b742418	            mov esi, dword [rsp + 0x18] 	      3273	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002469	    0x48c704c50000	                    mov qword [rax*8], 0	      3273	vt.c	FUNCTION_98	FOR_3	IF_7
0x4002475	            0x7db3	                           jge 0x400242a	      3270	vt.c	FUNCTION_98	FOR_3
0x4002477	    0x48c7c0000000	                              mov rax, 0	      3270	vt.c	FUNCTION_98	FOR_3
0x400247e	            0xeb09	                           jmp 0x4002489	      3270	vt.c	FUNCTION_98	FOR_3
0x4002480	        0x4883c008	                              add rax, 8	      3270	vt.c	FUNCTION_98	FOR_3
0x4002484	          0x4939c1	                             cmp r9, rax	      3476	vt.c	FUNCTION_108	FOR_1
0x4002487	            0x7441	                            je 0x40024ca	      3476	vt.c	FUNCTION_108	FOR_1
0x4002489	          0x4c3b30	                    cmp r14, qword [rax]	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x400248c	            0x75f2	                           jne 0x4002480	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x400248e	            0xeb33	                           jmp 0x40024c3	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x4002490	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      3290	vt.c	FUNCTION_98	IF_9
0x4002495	        0x488d0480	                  lea rax, [rax + rax*4]	      3290	vt.c	FUNCTION_98	IF_9
0x4002499	    0x8324c5000000	           and dword [rax*8], 0xfffffffd	      3290	vt.c	FUNCTION_98	IF_9
0x40024a1	        0x8b74241c	            mov esi, dword [rsp + 0x1c] 	      3293	vt.c	FUNCTION_98	CALL_10
0x40024a5	          0x4489e9	                           mov ecx, r13d	      3293	vt.c	FUNCTION_98	CALL_10
0x40024a8	          0x4489e2	                           mov edx, r12d	      3293	vt.c	FUNCTION_98	CALL_10
0x40024ab	          0x4c89f7	                            mov rdi, r14	      3293	vt.c	FUNCTION_98	CALL_10
0x40024ae	      0xe89dfaffff	             call sym.do_bind_con_driver	      3293	vt.c	FUNCTION_98	CALL_10
0x40024b3	            0x31db	                            xor ebx, ebx	      3293	vt.c	FUNCTION_98	CALL_10
0x40024b5	      0xe9e1feffff	                           jmp 0x400239b	      3293	vt.c	FUNCTION_98	CALL_10
0x40024ba	        0x4883c108	                              add rcx, 8	      3293	vt.c	FUNCTION_98	CALL_10
0x40024be	          0x4939c9	                             cmp r9, rcx	      3476	vt.c	FUNCTION_108	FOR_1
0x40024c1	            0x74cd	                            je 0x4002490	      3476	vt.c	FUNCTION_108	FOR_1
0x40024c3	          0x4c3b39	                    cmp r15, qword [rcx]	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024c6	            0x75f2	                           jne 0x40024ba	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024c8	            0xebd7	                           jmp 0x40024a1	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024ca	      0x48894c2408	                mov qword [rsp + 8], rcx	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024cf	        0x4c890c24	                     mov qword [rsp], r9	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024d3	        0x89742418	             mov dword [rsp + 0x18], esi	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x40024d7	    0x488b1d000000	            mov rbx, qword [0x040024de] 	      3278	vt.c	FUNCTION_98	IF_8
0x40024de	        0x498b4608	                mov rax, qword [r14 + 8]	      3280	vt.c	FUNCTION_98	IF_8	CALL_8
0x40024e2	      0xe800000000	                          call 0x40024e7	      3280	vt.c	FUNCTION_98	IF_8	CALL_8
0x40024e7	      0x4863742418	         movsxd rsi, dword [rsp + 0x18] 	      3281	vt.c	FUNCTION_98	IF_8
0x40024ec	    0x48891d000000	            mov qword [0x040024f3], rbx 	      3286	vt.c	FUNCTION_98	IF_8
0x40024f3	        0x4c8b0c24	                     mov r9, qword [rsp]	      3286	vt.c	FUNCTION_98	IF_8
0x40024f7	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      3286	vt.c	FUNCTION_98	IF_8
0x40024fc	        0x488d04b6	                  lea rax, [rsi + rsi*4]	      3281	vt.c	FUNCTION_98	IF_8
0x4002500	    0x830cc5000000	                     or dword [rax*8], 2	      3281	vt.c	FUNCTION_98	IF_8
0x4002508	            0xebb9	                           jmp 0x40024c3	      3281	vt.c	FUNCTION_98	IF_8
vt_console_device	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	8
0x4000460	         0xfbf4742	           movsx eax, word [rdi + 0x42] 	      2645	vt.c	FUNCTION_78
0x4000464	    0x8b1500000000	            mov edx, dword [0x0400046a] 	      2645	vt.c	FUNCTION_78
0x400046a	          0x6685c0	                             test ax, ax	      2645	vt.c	FUNCTION_78
0x400046d	            0x7403	                            je 0x4000472	      2645	vt.c	FUNCTION_78
0x400046f	          0x8d50ff	                      lea edx, [rax - 1]	      2645	vt.c	FUNCTION_78
0x4000472	            0x8916	                    mov dword [rsi], edx	      2645	vt.c	FUNCTION_78
0x4000474	    0x488b05000000	            mov rax, qword [0x0400047b] 	      2647	vt.c	FUNCTION_78
0x400047b	              0xc3	                                     ret	      2647	vt.c	FUNCTION_78
con_debug_leave	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,1:SWITCH,0	21
0x4000580	    0x8b1500000000	            mov edx, dword [0x04000586] 	      3562	vt.c	FUNCTION_110
0x4000586	    0x486305000000	         movsxd rax, dword [0x0400058d] 	      3561	vt.c	FUNCTION_110
0x400058d	    0x8b0d00000000	            mov ecx, dword [0x04000593] 	      3565	vt.c	FUNCTION_110
0x4000593	    0x891500000000	            mov dword [0x04000599], edx 	      3562	vt.c	FUNCTION_110
0x4000599	    0x8b1500000000	            mov edx, dword [0x0400059f] 	      3563	vt.c	FUNCTION_110
0x400059f	    0x890500000000	            mov dword [0x040005a5], eax 	      3561	vt.c	FUNCTION_110
0x40005a5	        0x488d0480	                  lea rax, [rax + rax*4]	      3565	vt.c	FUNCTION_110
0x40005a9	    0x891500000000	            mov dword [0x040005af], edx 	      3563	vt.c	FUNCTION_110
0x40005af	    0x8b1500000000	            mov edx, dword [0x040005b5] 	      3564	vt.c	FUNCTION_110
0x40005b5	    0x488d04c50000	                        lea rax, [rax*8]	      3565	vt.c	FUNCTION_110
0x40005bd	    0x891500000000	            mov dword [0x040005c3], edx 	      3564	vt.c	FUNCTION_110
0x40005c3	          0x488b10	                    mov rdx, qword [rax]	      3565	vt.c	FUNCTION_110
0x40005c6	    0x888aac010000	              mov byte [rdx + 0x1ac], cl	      3565	vt.c	FUNCTION_110
0x40005cc	          0x488b38	                    mov rdi, qword [rax]	      3567	vt.c	FUNCTION_110
0x40005cf	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	      3568	vt.c	FUNCTION_110	IF_1
0x40005d6	    0x488b80d00000	            mov rax, qword [rax + 0xd0] 	      3568	vt.c	FUNCTION_110	IF_1
0x40005dd	          0x4885c0	                           test rax, rax	      3568	vt.c	FUNCTION_110	IF_1
0x40005e0	            0x7405	                            je 0x40005e7	      3568	vt.c	FUNCTION_110	IF_1
0x40005e2	      0xe900000000	                           jmp 0x40005e7	      3569	vt.c	FUNCTION_110	CALL_1
0x40005e7	            0x31c0	                            xor eax, eax	      3571	vt.c	FUNCTION_110
0x40005e9	              0xc3	                                     ret	      3571	vt.c	FUNCTION_110
do_update_region	ELSE,1:WHILE,1:DO,0:functions,0:IF,6:FOR,1:CALL,4:SWITCH,0	124
0x4000040	            0x4157	                                push r15	       344	vt.c	FUNCTION_11
0x4000042	            0x4156	                                push r14	       344	vt.c	FUNCTION_11
0x4000044	          0x4989f7	                            mov r15, rsi	       348	vt.c	FUNCTION_11
0x4000047	            0x4155	                                push r13	       344	vt.c	FUNCTION_11
0x4000049	            0x4154	                                push r12	       344	vt.c	FUNCTION_11
0x400004b	          0x4989fd	                            mov r13, rdi	       344	vt.c	FUNCTION_11
0x400004e	              0x55	                                push rbp	       344	vt.c	FUNCTION_11
0x400004f	              0x53	                                push rbx	       344	vt.c	FUNCTION_11
0x4000050	          0x4189d6	                           mov r14d, edx	       344	vt.c	FUNCTION_11
0x4000053	        0x4883ec18	                           sub rsp, 0x18	       344	vt.c	FUNCTION_11
0x4000057	    0x65488b042528	                mov rax, qword gs:[0x28]	       344	vt.c	FUNCTION_11
0x4000060	      0x4889442410	             mov qword [rsp + 0x10], rax	       344	vt.c	FUNCTION_11
0x4000065	            0x31c0	                            xor eax, eax	       344	vt.c	FUNCTION_11
0x4000067	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       349	vt.c	FUNCTION_11	IF_1
0x400006e	        0x48893424	                    mov qword [rsp], rsi	       344	vt.c	FUNCTION_11
0x4000072	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       349	vt.c	FUNCTION_11	IF_1
0x4000079	          0x4885c0	                           test rax, rax	       349	vt.c	FUNCTION_11	IF_1
0x400007c	     0xf8449010000	                            je 0x40001cb	       349	vt.c	FUNCTION_11	IF_1
0x4000082	      0x488d4c240c	                    lea rcx, [rsp + 0xc]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000087	      0x488d542408	                      lea rdx, [rsp + 8]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400008c	        0x488b3424	                    mov rsi, qword [rsp]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000090	      0xe800000000	                          call 0x4000095	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000095	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400009c	        0x8b6c2408	                mov ebp, dword [rsp + 8]	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a0	      0x448b64240c	            mov r12d, dword [rsp + 0xc] 	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a5	        0x48890424	                    mov qword [rsp], rax	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x40000a9	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x40000ad	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x40000b0	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x40000b2	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x40000b4	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000b6	     0xf83c2000000	                           jae 0x400017e	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bc	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bf	     0xf84e7000000	                            je 0x40001ac	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c5	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c8	            0xeb26	                           jmp 0x40000f0	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ca	          0x4189e8	                            mov r8d, ebp	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000cd	          0x4989df	                            mov r15, rbx	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000d0	        0x4883c302	                              add rbx, 2	       370	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d4	          0x83c501	                              add ebp, 1	       371	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d7	        0x4183ee01	                             sub r14d, 1	       372	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000db	    0x4139ad640100	           cmp dword [r13 + 0x164], ebp 	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e2	            0x7643	                           jbe 0x4000127	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e4	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e7	     0xf8496000000	                            je 0x4000183	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ed	           0xfb703	                   movzx eax, word [rbx]	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f0	            0x30c0	                              xor al, al	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f2	          0x6639d0	                              cmp ax, dx	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000f5	            0x74d9	                            je 0x40000d0	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000f7	          0x4939df	                            cmp r15, rbx	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fa	            0x89c2	                            mov edx, eax	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fc	            0x73cc	                           jae 0x40000ca	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fe	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000105	          0x4889da	                            mov rdx, rbx	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000108	          0x4489e1	                           mov ecx, r12d	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010b	          0x4c29fa	                            sub rdx, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010e	          0x4c89fe	                            mov rsi, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000111	          0x4c89ef	                            mov rdi, r13	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000114	          0x48d1fa	                              sar rdx, 1	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000117	        0x488b4030	            mov rax, qword [rax + 0x30] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400011b	      0xe800000000	                          call 0x4000120	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000120	           0xfb713	                   movzx edx, word [rbx]	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000123	            0x30d2	                              xor dl, dl	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000125	            0xeba3	                           jmp 0x40000ca	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000127	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012a	            0x725c	                            jb 0x4000188	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012c	          0x4585f6	                         test r14d, r14d	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x400012f	            0x747b	                            je 0x40001ac	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x4000131	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000138	        0x4183c401	                             add r12d, 1	       379	vt.c	FUNCTION_11	FOR_1
0x400013c	          0x4989df	                            mov r15, rbx	       379	vt.c	FUNCTION_11	FOR_1
0x400013f	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000146	          0x4885c0	                           test rax, rax	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000149	            0x7417	                            je 0x4000162	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014b	        0x4c8b3c24	                    mov r15, qword [rsp]	       381	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014f	            0x31c9	                            xor ecx, ecx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000151	            0x31d2	                            xor edx, edx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000153	          0x4c89ef	                            mov rdi, r13	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000156	          0x4c89fe	                            mov rsi, r15	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000159	      0xe800000000	                          call 0x400015e	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x400015e	        0x48890424	                    mov qword [rsp], rax	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000162	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x4000166	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       359	vt.c	FUNCTION_11	FOR_1
0x400016d	            0x31ed	                            xor ebp, ebp	       359	vt.c	FUNCTION_11	FOR_1
0x400016f	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x4000172	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x4000174	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x4000176	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000178	     0xf823effffff	                            jb 0x40000bc	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x400017e	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000181	            0xeba9	                           jmp 0x400012c	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000183	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000186	            0x7324	                           jae 0x40001ac	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000188	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400018f	          0x4889da	                            mov rdx, rbx	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000192	          0x4489e1	                           mov ecx, r12d	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000195	          0x4c29fa	                            sub rdx, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000198	          0x4c89fe	                            mov rsi, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019b	          0x4c89ef	                            mov rdi, r13	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019e	          0x48d1fa	                              sar rdx, 1	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a1	        0x488b4030	            mov rax, qword [rax + 0x30] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a5	      0xe800000000	                          call 0x40001aa	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001aa	            0xeb80	                           jmp 0x400012c	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001ac	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       385	vt.c	FUNCTION_11
0x40001b1	    0x654833042528	                xor rax, qword gs:[0x28]	       385	vt.c	FUNCTION_11
0x40001ba	            0x7530	                           jne 0x40001ec	       385	vt.c	FUNCTION_11
0x40001bc	        0x4883c418	                           add rsp, 0x18	       385	vt.c	FUNCTION_11
0x40001c0	              0x5b	                                 pop rbx	       385	vt.c	FUNCTION_11
0x40001c1	              0x5d	                                 pop rbp	       385	vt.c	FUNCTION_11
0x40001c2	            0x415c	                                 pop r12	       385	vt.c	FUNCTION_11
0x40001c4	            0x415d	                                 pop r13	       385	vt.c	FUNCTION_11
0x40001c6	            0x415e	                                 pop r14	       385	vt.c	FUNCTION_11
0x40001c8	            0x415f	                                 pop r15	       385	vt.c	FUNCTION_11
0x40001ca	              0xc3	                                     ret	       385	vt.c	FUNCTION_11
0x40001cb	          0x4889f0	                            mov rax, rsi	       350	vt.c	FUNCTION_11	IF_1
0x40001ce	    0x482b87780100	            sub rax, qword [rdi + 0x178]	       350	vt.c	FUNCTION_11	IF_1
0x40001d5	    0x8b8f64010000	           mov ecx, dword [rdi + 0x164] 	       351	vt.c	FUNCTION_11	IF_1
0x40001db	            0x31d2	                            xor edx, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001dd	          0x48d1e8	                              shr rax, 1	       350	vt.c	FUNCTION_11	IF_1
0x40001e0	            0xf7f1	                                 div ecx	       352	vt.c	FUNCTION_11	IF_1
0x40001e2	            0x89d5	                            mov ebp, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001e4	          0x4189c4	                           mov r12d, eax	       352	vt.c	FUNCTION_11	IF_1
0x40001e7	      0xe9bdfeffff	                           jmp 0x40000a9	       352	vt.c	FUNCTION_11	IF_1
0x40001ec	      0xe800000000	                          call 0x40001f1	       385	vt.c	FUNCTION_11
screen_pos	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	16
0x4002a20	             0x1f6	                            add esi, esi	      4265	vt.c	FUNCTION_133	CALL_1
0x4002a22	            0x85d2	                           test edx, edx	       296	vt.c	FUNCTION_7	IF_1
0x4002a24	            0x750e	                           jne 0x4002a34	       296	vt.c	FUNCTION_7	IF_1
0x4002a26	          0x4863f6	                         movsxd rsi, esi	       297	vt.c	FUNCTION_7	IF_1
0x4002a29	          0x4889f0	                            mov rax, rsi	       297	vt.c	FUNCTION_7	IF_1
0x4002a2c	    0x480387780100	            add rax, qword [rdi + 0x178]	       297	vt.c	FUNCTION_7	IF_1
0x4002a33	              0xc3	                                     ret	       297	vt.c	FUNCTION_7	IF_1
0x4002a34	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a3b	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a42	          0x4885c0	                           test rax, rax	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a45	            0x7405	                            je 0x4002a4c	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a47	      0xe900000000	                           jmp 0x4002a4c	       301	vt.c	FUNCTION_7	CALL_1
0x4002a4c	          0x4863f6	                         movsxd rsi, esi	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a4f	          0x4889f0	                            mov rax, rsi	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a52	    0x480387880100	            add rax, qword [rdi + 0x188]	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a59	              0xc3	                                     ret	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
mouse_report	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,2:SWITCH,0	25
0x4003690	              0x53	                                push rbx	      1471	vt.c	FUNCTION_58
0x4003691	          0x83c221	                           add edx, 0x21	      1474	vt.c	FUNCTION_58	CALL_1
0x4003694	        0x448d4121	                   lea r8d, [rcx + 0x21]	      1474	vt.c	FUNCTION_58	CALL_1
0x4003698	           0xfbeca	                           movsx ecx, dl	      1474	vt.c	FUNCTION_58	CALL_1
0x400369b	          0x8d5620	                   lea edx, [rsi + 0x20]	      1474	vt.c	FUNCTION_58	CALL_1
0x400369e	          0x4889fb	                            mov rbx, rdi	      1471	vt.c	FUNCTION_58
0x40036a1	        0x4883ec10	                           sub rsp, 0x10	      1471	vt.c	FUNCTION_58
0x40036a5	        0x450fbec0	                          movsx r8d, r8b	      1474	vt.c	FUNCTION_58	CALL_1
0x40036a9	    0x48c7c6000000	                              mov rsi, 0	      1474	vt.c	FUNCTION_58	CALL_1
0x40036b0	           0xfbed2	                           movsx edx, dl	      1474	vt.c	FUNCTION_58	CALL_1
0x40036b3	          0x4889e7	                            mov rdi, rsp	      1474	vt.c	FUNCTION_58	CALL_1
0x40036b6	    0x65488b042528	                mov rax, qword gs:[0x28]	      1471	vt.c	FUNCTION_58
0x40036bf	      0x4889442408	                mov qword [rsp + 8], rax	      1471	vt.c	FUNCTION_58
0x40036c4	            0x31c0	                            xor eax, eax	      1471	vt.c	FUNCTION_58
0x40036c6	      0xe800000000	                          call 0x40036cb	      1474	vt.c	FUNCTION_58	CALL_1
0x40036cb	    0x488bb3b80200	           mov rsi, qword [rbx + 0x2b8] 	      1476	vt.c	FUNCTION_58	CALL_2
0x40036d2	          0x4889e7	                            mov rdi, rsp	      1476	vt.c	FUNCTION_58	CALL_2
0x40036d5	      0xe856dcffff	                 call sym.respond_string	      1476	vt.c	FUNCTION_58	CALL_2
0x40036da	      0x488b442408	                mov rax, qword [rsp + 8]	      1477	vt.c	FUNCTION_58
0x40036df	    0x654833042528	                xor rax, qword gs:[0x28]	      1477	vt.c	FUNCTION_58
0x40036e8	            0x7506	                           jne 0x40036f0	      1477	vt.c	FUNCTION_58
0x40036ea	        0x4883c410	                           add rsp, 0x10	      1477	vt.c	FUNCTION_58
0x40036ee	              0x5b	                                 pop rbx	      1477	vt.c	FUNCTION_58
0x40036ef	              0xc3	                                     ret	      1477	vt.c	FUNCTION_58
0x40036f0	      0xe800000000	                          call 0x40036f5	      1477	vt.c	FUNCTION_58
do_bind_con_driver	ELSE,1:WHILE,0:DO,0:functions,0:IF,13:FOR,2:CALL,21:SWITCH,0	229
0x4001f50	            0x4157	                                push r15	      3120	vt.c	FUNCTION_97
0x4001f52	            0x4156	                                push r14	      3120	vt.c	FUNCTION_97
0x4001f54	          0x4989ff	                            mov r15, rdi	      3120	vt.c	FUNCTION_97
0x4001f57	            0x4155	                                push r13	      3120	vt.c	FUNCTION_97
0x4001f59	            0x4154	                                push r12	      3120	vt.c	FUNCTION_97
0x4001f5b	          0x4189f6	                           mov r14d, esi	      3120	vt.c	FUNCTION_97
0x4001f5e	              0x55	                                push rbp	      3120	vt.c	FUNCTION_97
0x4001f5f	              0x53	                                push rbx	      3120	vt.c	FUNCTION_97
0x4001f60	            0x89d5	                            mov ebp, edx	      3120	vt.c	FUNCTION_97
0x4001f62	          0x4189cc	                           mov r12d, ecx	      3120	vt.c	FUNCTION_97
0x4001f65	        0x4883ec28	                           sub rsp, 0x28	      3120	vt.c	FUNCTION_97
0x4001f69	          0x488b1f	                    mov rbx, qword [rdi]	      3121	vt.c	FUNCTION_97
0x4001f6c	          0x4889df	                            mov rdi, rbx	      3126	vt.c	FUNCTION_97	IF_1	CALL_1
0x4001f6f	      0xe800000000	                          call 0x4001f74	      3126	vt.c	FUNCTION_97	IF_1	CALL_1
0x4001f74	            0x84c0	                             test al, al	      3126	vt.c	FUNCTION_97	IF_1	CALL_1
0x4001f76	      0xbaedffffff	                     mov edx, 0xffffffed	      3126	vt.c	FUNCTION_97	IF_1	CALL_1
0x4001f7b	            0x7432	                            je 0x4001faf	      3126	vt.c	FUNCTION_97	IF_1	CALL_1
0x4001f7d	      0xe800000000	                          call 0x4001f82	      3129	vt.c	FUNCTION_97	CALL_2
0x4001f82	            0x85c0	                           test eax, eax	      3129	vt.c	FUNCTION_97	CALL_2
0x4001f84	            0x743a	                            je 0x4001fc0	      3129	vt.c	FUNCTION_97	CALL_2
0x4001f86	    0x48c7c2000000	                              mov rdx, 0	      3129	vt.c	FUNCTION_97	CALL_2
0x4001f8d	            0x31c0	                            xor eax, eax	      3120	vt.c	FUNCTION_97
0x4001f8f	          0x4c3b3a	                    cmp r15, qword [rdx]	      3135	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001f92	            0x743a	                            je 0x4001fce	      3135	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001f94	          0x83c001	                              add eax, 1	      3132	vt.c	FUNCTION_97	FOR_1
0x4001f97	        0x4883c228	                           add rdx, 0x28	      3132	vt.c	FUNCTION_97	FOR_1
0x4001f9b	          0x83f810	                           cmp eax, 0x10	      3132	vt.c	FUNCTION_97	FOR_1
0x4001f9e	            0x75ef	                           jne 0x4001f8f	      3132	vt.c	FUNCTION_97	FOR_1
0x4001fa0	      0xbdedffffff	                     mov ebp, 0xffffffed	      3124	vt.c	FUNCTION_97
0x4001fa5	          0x4889df	                            mov rdi, rbx	      3215	vt.c	FUNCTION_97	CALL_21
0x4001fa8	      0xe800000000	                          call 0x4001fad	      3215	vt.c	FUNCTION_97	CALL_21
0x4001fad	            0x89ea	                            mov edx, ebp	      3216	vt.c	FUNCTION_97
0x4001faf	        0x4883c428	                           add rsp, 0x28	      3217	vt.c	FUNCTION_97
0x4001fb3	            0x89d0	                            mov eax, edx	      3217	vt.c	FUNCTION_97
0x4001fb5	              0x5b	                                 pop rbx	      3217	vt.c	FUNCTION_97
0x4001fb6	              0x5d	                                 pop rbp	      3217	vt.c	FUNCTION_97
0x4001fb7	            0x415c	                                 pop r12	      3217	vt.c	FUNCTION_97
0x4001fb9	            0x415d	                                 pop r13	      3217	vt.c	FUNCTION_97
0x4001fbb	            0x415e	                                 pop r14	      3217	vt.c	FUNCTION_97
0x4001fbd	            0x415f	                                 pop r15	      3217	vt.c	FUNCTION_97
0x4001fbf	              0xc3	                                     ret	      3217	vt.c	FUNCTION_97
0x4001fc0	    0x8b0500000000	            mov eax, dword [0x04001fc6] 	      3129	vt.c	FUNCTION_97	CALL_2
0x4001fc6	            0x85c0	                           test eax, eax	      3129	vt.c	FUNCTION_97	CALL_2
0x4001fc8	            0x75bc	                           jne 0x4001f86	      3129	vt.c	FUNCTION_97	CALL_2
0x4001fca	             0xf0b	                                     ud2	      3129	vt.c	FUNCTION_97	CALL_2
0x4001fcc	            0xebb8	                           jmp 0x4001f86	      3129	vt.c	FUNCTION_97	CALL_2
0x4001fce	          0x4c63e8	                         movsxd r13, eax	      3136	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001fd1	      0x4b8d44ad00	                  lea rax, [r13 + r13*4]	      3136	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001fd6	    0x488d04c50000	                        lea rax, [rax*8]	      3136	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001fde	        0xf6402402	               test byte [rax + 0x24], 2	      3145	vt.c	FUNCTION_97	IF_4
0x4001fe2	        0x4c8b4808	                 mov r9, qword [rax + 8]	      3136	vt.c	FUNCTION_97	FOR_1	IF_2
0x4001fe6	     0xf844c020000	                            je 0x4002238	      3145	vt.c	FUNCTION_97	IF_4
0x4001fec	          0x4585e4	                         test r12d, r12d	      3150	vt.c	FUNCTION_97	IF_5
0x4001fef	     0xf84ac020000	                            je 0x40022a1	      3150	vt.c	FUNCTION_97	IF_5
0x4001ff5	    0x488b05000000	            mov rax, qword [0x04001ffc] 	      3151	vt.c	FUNCTION_97	IF_5	IF_6
0x4001ffc	          0x4885c0	                           test rax, rax	      3151	vt.c	FUNCTION_97	IF_5	IF_6
0x4001fff	            0x7410	                            je 0x4002011	      3151	vt.c	FUNCTION_97	IF_5	IF_6
0x4002001	          0x488b38	                    mov rdi, qword [rax]	      3152	vt.c	FUNCTION_97	IF_5	CALL_4
0x4002004	        0x4c890c24	                     mov qword [rsp], r9	      3152	vt.c	FUNCTION_97	IF_5	CALL_4
0x4002008	      0xe800000000	                          call 0x400200d	      3152	vt.c	FUNCTION_97	IF_5	CALL_4
0x400200d	        0x4c8b0c24	                     mov r9, qword [rsp]	      3152	vt.c	FUNCTION_97	IF_5	CALL_4
0x4002011	          0x4889df	                            mov rdi, rbx	      3154	vt.c	FUNCTION_97	IF_5	CALL_5
0x4002014	      0x4c894c2410	              mov qword [rsp + 0x10], r9	      3154	vt.c	FUNCTION_97	IF_5	CALL_5
0x4002019	      0xe800000000	                          call 0x400201e	      3154	vt.c	FUNCTION_97	IF_5	CALL_5
0x400201e	        0x496bc528	                     imul rax, r13, 0x28	      3158	vt.c	FUNCTION_97	CALL_6
0x4002022	    0x4c893d000000	            mov qword [0x04002029], r15 	      3155	vt.c	FUNCTION_97	IF_5
0x4002029	      0x4c8b4c2410	              mov r9, qword [rsp + 0x10]	      3161	vt.c	FUNCTION_97	FOR_2
0x400202e	    0x480500000000	                              add rax, 0	      3158	vt.c	FUNCTION_97	CALL_6
0x4002034	        0x4439701c	           cmp dword [rax + 0x1c], r14d 	      3158	vt.c	FUNCTION_97	CALL_6
0x4002038	      0x440f4d701c	         cmovge r14d, dword [rax + 0x1c]	      3158	vt.c	FUNCTION_97	CALL_6
0x400203d	          0x396820	            cmp dword [rax + 0x20], ebp 	      3159	vt.c	FUNCTION_97	CALL_7
0x4002040	         0xf4e6820	          cmovle ebp, dword [rax + 0x20]	      3159	vt.c	FUNCTION_97	CALL_7
0x4002044	      0x448974240c	             mov dword [rsp + 0xc], r14d	      3158	vt.c	FUNCTION_97	CALL_6
0x4002049	          0x4139ee	                           cmp r14d, ebp	      3161	vt.c	FUNCTION_97	FOR_2
0x400204c	          0x892c24	                    mov dword [rsp], ebp	      3159	vt.c	FUNCTION_97	CALL_7
0x400204f	     0xf8f22020000	                            jg 0x4002277	      3161	vt.c	FUNCTION_97	FOR_2
0x4002055	      0x448b6c240c	            mov r13d, dword [rsp + 0xc] 	      3120	vt.c	FUNCTION_97
0x400205a	        0x4183ceff	                     or r14d, 0xffffffff	      3120	vt.c	FUNCTION_97
0x400205e	      0x4489742410	            mov dword [rsp + 0x10], r14d	      3120	vt.c	FUNCTION_97
0x4002063	          0x4963c5	                        movsxd rax, r13d	      3163	vt.c	FUNCTION_97	FOR_2
0x4002066	        0x488d1480	                  lea rdx, [rax + rax*4]	      3163	vt.c	FUNCTION_97	FOR_2
0x400206a	    0x488b2cd50000	                  mov rbp, qword [rdx*8]	      3163	vt.c	FUNCTION_97	FOR_2
0x4002072	    0x488b14c50000	                  mov rdx, qword [rax*8]	      3165	vt.c	FUNCTION_97	FOR_2	IF_7
0x400207a	          0x4885d2	                           test rdx, rdx	      3165	vt.c	FUNCTION_97	FOR_2	IF_7
0x400207d	            0x741c	                            je 0x400209b	      3165	vt.c	FUNCTION_97	FOR_2	IF_7
0x400207f	          0x488b3a	                    mov rdi, qword [rdx]	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x4002082	      0x4889442420	             mov qword [rsp + 0x20], rax	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x4002087	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x400208c	      0xe800000000	                          call 0x4002091	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x4002091	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x4002096	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3166	vt.c	FUNCTION_97	FOR_2	CALL_8
0x400209b	          0x4889df	                            mov rdi, rbx	      3167	vt.c	FUNCTION_97	FOR_2	CALL_9
0x400209e	      0x4889442420	             mov qword [rsp + 0x20], rax	      3167	vt.c	FUNCTION_97	FOR_2	CALL_9
0x40020a3	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      3167	vt.c	FUNCTION_97	FOR_2	CALL_9
0x40020a8	      0xe800000000	                          call 0x40020ad	      3167	vt.c	FUNCTION_97	FOR_2	CALL_9
0x40020ad	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      3168	vt.c	FUNCTION_97	FOR_2
0x40020b2	          0x4885ed	                           test rbp, rbp	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020b5	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020ba	    0x4c893cc50000	                  mov qword [rax*8], r15	      3168	vt.c	FUNCTION_97	FOR_2
0x40020c2	     0xf84d1000000	                            je 0x4002199	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020c8	    0x488b85980100	           mov rax, qword [rbp + 0x198] 	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020cf	          0x4885c0	                           test rax, rax	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020d2	     0xf84c1000000	                            je 0x4002199	      3170	vt.c	FUNCTION_97	FOR_2	IF_8
0x40020d8	    0x488b95f80200	           mov rdx, qword [rbp + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x40020df	          0x483b2a	                    cmp rbp, qword [rdx]	      3175	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_10
0x40020e2	     0xf8471010000	                            je 0x4002259	      3175	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_10
0x40020e8	     0xfb68d7a0200	          movzx ecx, byte [rbp + 0x27a] 	      3180	vt.c	FUNCTION_97	FOR_2
0x40020ef	      0x4c894c2420	              mov qword [rsp + 0x20], r9	      3180	vt.c	FUNCTION_97	FOR_2
0x40020f4	          0x4889ef	                            mov rdi, rbp	      3181	vt.c	FUNCTION_97	FOR_2	CALL_12
0x40020f7	        0x488b4018	            mov rax, qword [rax + 0x18] 	      3181	vt.c	FUNCTION_97	FOR_2	CALL_12
0x40020fb	          0x4589ee	                          mov r14d, r13d	      3181	vt.c	FUNCTION_97	FOR_2	CALL_12
0x40020fe	          0xc0e907	                               shr cl, 7	      3180	vt.c	FUNCTION_97	FOR_2
0x4002101	        0x884c2418	               mov byte [rsp + 0x18], cl	      3180	vt.c	FUNCTION_97	FOR_2
0x4002105	      0xe800000000	                          call 0x400210a	      3181	vt.c	FUNCTION_97	FOR_2	CALL_12
0x400210a	    0x488b85a00100	           mov rax, qword [rbp + 0x1a0] 	      3182	vt.c	FUNCTION_97	FOR_2
0x4002111	            0x31d2	                            xor edx, edx	      3183	vt.c	FUNCTION_97	FOR_2	CALL_13
0x4002113	          0x4489ee	                           mov esi, r13d	      3183	vt.c	FUNCTION_97	FOR_2	CALL_13
0x4002116	          0x4889ef	                            mov rdi, rbp	      3183	vt.c	FUNCTION_97	FOR_2	CALL_13
0x4002119	    0x488985780100	           mov qword [rbp + 0x178], rax 	      3182	vt.c	FUNCTION_97	FOR_2
0x4002120	      0xe85be8ffff	                    call sym.visual_init	      3183	vt.c	FUNCTION_97	FOR_2	CALL_13
0x4002125	          0x4889ef	                            mov rdi, rbp	      3184	vt.c	FUNCTION_97	FOR_2	CALL_14
0x4002128	      0xe853e7ffff	                     call sym.set_origin	      3184	vt.c	FUNCTION_97	FOR_2	CALL_14
0x400212d	          0x4889ef	                            mov rdi, rbp	      3185	vt.c	FUNCTION_97	FOR_2	CALL_15
0x4002130	      0xe83bf0ffff	                    call sym.update_attr	      3185	vt.c	FUNCTION_97	FOR_2	CALL_15
0x4002135	     0xfb6857a0200	          movzx eax, byte [rbp + 0x27a] 	      3191	vt.c	FUNCTION_97	FOR_2	IF_10
0x400213c	      0x4c8b4c2420	              mov r9, qword [rsp + 0x20]	      3191	vt.c	FUNCTION_97	FOR_2	IF_10
0x4002141	          0xc0e807	                               shr al, 7	      3191	vt.c	FUNCTION_97	FOR_2	IF_10
0x4002144	        0x38442418	               cmp byte [rsp + 0x18], al	      3191	vt.c	FUNCTION_97	FOR_2	IF_10
0x4002148	            0x744f	                            je 0x4002199	      3191	vt.c	FUNCTION_97	FOR_2	IF_10
0x400214a	     0xfb7bdd80100	          movzx edi, word [rbp + 0x1d8] 	       646	vt.c	FUNCTION_26
0x4002151	    0x8b85a8010000	           mov eax, dword [rbp + 0x1a8] 	       648	vt.c	FUNCTION_26	FOR_1
0x4002157	    0x488bb5780100	           mov rsi, qword [rbp + 0x178] 	       644	vt.c	FUNCTION_26
0x400215e	        0x4080cfff	                            or dil, 0xff	       646	vt.c	FUNCTION_26
0x4002162	            0xd1e8	                              shr eax, 1	       648	vt.c	FUNCTION_26	FOR_1
0x4002164	            0x7430	                            je 0x4002196	       648	vt.c	FUNCTION_26	FOR_1
0x4002166	        0x488d5602	                      lea rdx, [rsi + 2]	       648	vt.c	FUNCTION_26	FOR_1
0x400216a	          0x83e801	                              sub eax, 1	       648	vt.c	FUNCTION_26	FOR_1
0x400216d	        0x4c8d1442	                  lea r10, [rdx + rax*2]	       648	vt.c	FUNCTION_26	FOR_1
0x4002171	            0xeb04	                           jmp 0x4002177	       648	vt.c	FUNCTION_26	FOR_1
0x4002173	        0x4883c202	                              add rdx, 2	       648	vt.c	FUNCTION_26	FOR_1
0x4002177	     0xfb785f80100	          movzx eax, word [rbp + 0x1f8] 	       649	vt.c	FUNCTION_26	FOR_1
0x400217e	          0x4189c3	                           mov r11d, eax	       649	vt.c	FUNCTION_26	FOR_1
0x4002181	        0x6644331e	                    xor r11w, word [rsi]	       649	vt.c	FUNCTION_26	FOR_1
0x4002185	          0x4121fb	                           and r11d, edi	       649	vt.c	FUNCTION_26	FOR_1
0x4002188	          0x4431d8	                           xor eax, r11d	       649	vt.c	FUNCTION_26	FOR_1
0x400218b	          0x4939d2	                            cmp r10, rdx	       648	vt.c	FUNCTION_26	FOR_1
0x400218e	          0x668906	                      mov word [rsi], ax	       649	vt.c	FUNCTION_26	FOR_1
0x4002191	          0x4889d6	                            mov rsi, rdx	       648	vt.c	FUNCTION_26	FOR_1
0x4002194	            0x75dd	                           jne 0x4002173	       648	vt.c	FUNCTION_26	FOR_1
0x4002196	          0x4589ee	                          mov r14d, r13d	       648	vt.c	FUNCTION_26	FOR_1
0x4002199	        0x4183c501	                             add r13d, 1	      3161	vt.c	FUNCTION_97	FOR_2
0x400219d	        0x443b2c24	                   cmp r13d, dword [rsp]	      3161	vt.c	FUNCTION_97	FOR_2
0x40021a1	     0xf8ebcfeffff	                           jle 0x4002063	      3161	vt.c	FUNCTION_97	FOR_2
0x40021a7	    0x48c7c7000000	                              mov rdi, 0	      3195	vt.c	FUNCTION_97	CALL_17
0x40021ae	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      3195	vt.c	FUNCTION_97	CALL_17
0x40021b3	      0xe800000000	                          call 0x40021b8	      3195	vt.c	FUNCTION_97	CALL_17
0x40021b8	          0x4585e4	                         test r12d, r12d	      3196	vt.c	FUNCTION_97	IF_11
0x40021bb	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3196	vt.c	FUNCTION_97	IF_11
0x40021c0	     0xf8425010000	                            je 0x40022eb	      3196	vt.c	FUNCTION_97	IF_11
0x40021c6	          0x4585f6	                         test r14d, r14d	      3198	vt.c	FUNCTION_97	IF_12
0x40021c9	     0xf88bc000000	                            js 0x400228b	      3198	vt.c	FUNCTION_97	IF_12
0x40021cf	          0x4963c6	                        movsxd rax, r14d	      3199	vt.c	FUNCTION_97	IF_12
0x40021d2	    0x48c7c6000000	                              mov rsi, 0	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x40021d9	    0x48c7c7000000	                              mov rdi, 0	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x40021e0	        0x486bc028	                     imul rax, rax, 0x28	      3199	vt.c	FUNCTION_97	IF_12
0x40021e4	    0x488b90000000	                    mov rdx, qword [rax]	      3199	vt.c	FUNCTION_97	IF_12
0x40021eb	    0x48c7c0000000	                              mov rax, 0	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x40021f2	    0x80ba7a020000	               cmp byte [rdx + 0x27a], 0	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x40021f9	    0x8b8a64010000	           mov ecx, dword [rdx + 0x164] 	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x40021ff	    0x448b82680100	           mov r8d, dword [rdx + 0x168] 	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x4002206	          0x4c89ca	                             mov rdx, r9	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x4002209	        0x480f49f0	                         cmovns rsi, rax	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x400220d	            0x31ed	                            xor ebp, ebp	      3213	vt.c	FUNCTION_97
0x400220f	      0xe800000000	                          call 0x4002214	      3201	vt.c	FUNCTION_97	IF_12	CALL_19
0x4002214	      0x4863442410	         movsxd rax, dword [rsp + 0x10] 	      3205	vt.c	FUNCTION_97	IF_12	IF_13
0x4002219	            0x85c0	                           test eax, eax	      3205	vt.c	FUNCTION_97	IF_12	IF_13
0x400221b	     0xf8884fdffff	                            js 0x4001fa5	      3205	vt.c	FUNCTION_97	IF_12	IF_13
0x4002221	        0x486bc028	                     imul rax, rax, 0x28	      3206	vt.c	FUNCTION_97	IF_12	IF_13
0x4002225	            0x31f6	                            xor esi, esi	      3207	vt.c	FUNCTION_97	IF_12	IF_13
0x4002227	    0x488bb8000000	                    mov rdi, qword [rax]	      3207	vt.c	FUNCTION_97	IF_12	IF_13
0x400222e	      0xe800000000	                          call 0x4002233	      3207	vt.c	FUNCTION_97	IF_12	IF_13
0x4002233	      0xe96dfdffff	                           jmp 0x4001fa5	      3207	vt.c	FUNCTION_97	IF_12	IF_13
0x4002238	        0x4c890c24	                     mov qword [rsp], r9	      3207	vt.c	FUNCTION_97	IF_12	IF_13
0x400223c	        0x498b4708	                mov rax, qword [r15 + 8]	      3146	vt.c	FUNCTION_97	IF_4	CALL_3
0x4002240	      0xe800000000	                          call 0x4002245	      3146	vt.c	FUNCTION_97	IF_4	CALL_3
0x4002245	        0x496bc528	                     imul rax, r13, 0x28	      3147	vt.c	FUNCTION_97	IF_4
0x4002249	        0x4c8b0c24	                     mov r9, qword [rsp]	      3147	vt.c	FUNCTION_97	IF_4
0x400224d	    0x838800000000	                       or dword [rax], 2	      3147	vt.c	FUNCTION_97	IF_4
0x4002254	      0xe993fdffff	                           jmp 0x4001fec	      3147	vt.c	FUNCTION_97	IF_4
0x4002259	          0x4889ef	                            mov rdi, rbp	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x400225c	      0xe8dfe5ffff	                    call sym.save_screen	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x4002261	    0x488b85980100	           mov rax, qword [rbp + 0x198] 	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x4002268	      0x44896c2410	            mov dword [rsp + 0x10], r13d	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x400226d	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x4002272	      0xe971feffff	                           jmp 0x40020e8	      3177	vt.c	FUNCTION_97	FOR_2	IF_9	CALL_11
0x4002277	    0x48c7c7000000	                              mov rdi, 0	      3195	vt.c	FUNCTION_97	CALL_17
0x400227e	        0x4c890c24	                     mov qword [rsp], r9	      3195	vt.c	FUNCTION_97	CALL_17
0x4002282	      0xe800000000	                          call 0x4002287	      3195	vt.c	FUNCTION_97	CALL_17
0x4002287	        0x4c8b0c24	                     mov r9, qword [rsp]	      3195	vt.c	FUNCTION_97	CALL_17
0x400228b	          0x4c89ce	                             mov rsi, r9	      3210	vt.c	FUNCTION_97	ELSE_1	CALL_20
0x400228e	    0x48c7c7000000	                              mov rdi, 0	      3210	vt.c	FUNCTION_97	ELSE_1	CALL_20
0x4002295	            0x31ed	                            xor ebp, ebp	      3213	vt.c	FUNCTION_97
0x4002297	      0xe800000000	                          call 0x400229c	      3210	vt.c	FUNCTION_97	ELSE_1	CALL_20
0x400229c	      0xe904fdffff	                           jmp 0x4001fa5	      3210	vt.c	FUNCTION_97	ELSE_1	CALL_20
0x40022a1	        0x496bc528	                     imul rax, r13, 0x28	      3158	vt.c	FUNCTION_97	CALL_6
0x40022a5	    0x480500000000	                              add rax, 0	      3158	vt.c	FUNCTION_97	CALL_6
0x40022ab	        0x4439701c	           cmp dword [rax + 0x1c], r14d 	      3158	vt.c	FUNCTION_97	CALL_6
0x40022af	      0x440f4d701c	         cmovge r14d, dword [rax + 0x1c]	      3158	vt.c	FUNCTION_97	CALL_6
0x40022b4	          0x396820	            cmp dword [rax + 0x20], ebp 	      3159	vt.c	FUNCTION_97	CALL_7
0x40022b7	         0xf4e6820	          cmovle ebp, dword [rax + 0x20]	      3159	vt.c	FUNCTION_97	CALL_7
0x40022bb	      0x448974240c	             mov dword [rsp + 0xc], r14d	      3158	vt.c	FUNCTION_97	CALL_6
0x40022c0	          0x4139ee	                           cmp r14d, ebp	      3161	vt.c	FUNCTION_97	FOR_2
0x40022c3	          0x892c24	                    mov dword [rsp], ebp	      3159	vt.c	FUNCTION_97	CALL_7
0x40022c6	     0xf8e89fdffff	                           jle 0x4002055	      3161	vt.c	FUNCTION_97	FOR_2
0x40022cc	    0x48c7c7000000	                              mov rdi, 0	      3195	vt.c	FUNCTION_97	CALL_17
0x40022d3	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      3195	vt.c	FUNCTION_97	CALL_17
0x40022d8	        0x4183ceff	                     or r14d, 0xffffffff	      3124	vt.c	FUNCTION_97
0x40022dc	      0xe800000000	                          call 0x40022e1	      3195	vt.c	FUNCTION_97	CALL_17
0x40022e1	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3195	vt.c	FUNCTION_97	CALL_17
0x40022e6	      0x4489742410	            mov dword [rsp + 0x10], r14d	      3124	vt.c	FUNCTION_97
0x40022eb	          0x8b1424	                    mov edx, dword [rsp]	      3197	vt.c	FUNCTION_97	CALL_18
0x40022ee	        0x8b74240c	              mov esi, dword [rsp + 0xc]	      3197	vt.c	FUNCTION_97	CALL_18
0x40022f2	    0x48c7c7000000	                              mov rdi, 0	      3197	vt.c	FUNCTION_97	CALL_18
0x40022f9	      0x4c894c2418	              mov qword [rsp + 0x18], r9	      3197	vt.c	FUNCTION_97	CALL_18
0x40022fe	          0x83c201	                              add edx, 1	      3197	vt.c	FUNCTION_97	CALL_18
0x4002301	          0x83c601	                              add esi, 1	      3197	vt.c	FUNCTION_97	CALL_18
0x4002304	      0xe800000000	                          call 0x4002309	      3197	vt.c	FUNCTION_97	CALL_18
0x4002309	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	      3197	vt.c	FUNCTION_97	CALL_18
0x400230e	      0xe9b3feffff	                           jmp 0x40021c6	      3197	vt.c	FUNCTION_97	CALL_18
save_screen	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,2:SWITCH,0	19
0x4000840	              0x53	                                push rbx	       623	vt.c	FUNCTION_24
0x4000841	          0x4889fb	                            mov rbx, rdi	       623	vt.c	FUNCTION_24
0x4000844	      0xe800000000	                          call 0x4000849	       624	vt.c	FUNCTION_24	CALL_1
0x4000849	            0x85c0	                           test eax, eax	       624	vt.c	FUNCTION_24	CALL_1
0x400084b	            0x750a	                           jne 0x4000857	       624	vt.c	FUNCTION_24	CALL_1
0x400084d	    0x8b0500000000	            mov eax, dword [0x04000853] 	       624	vt.c	FUNCTION_24	CALL_1
0x4000853	            0x85c0	                           test eax, eax	       624	vt.c	FUNCTION_24	CALL_1
0x4000855	            0x741c	                            je 0x4000873	       624	vt.c	FUNCTION_24	CALL_1
0x4000857	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       626	vt.c	FUNCTION_24	IF_1
0x400085e	    0x488b80980000	            mov rax, qword [rax + 0x98] 	       626	vt.c	FUNCTION_24	IF_1
0x4000865	          0x4885c0	                           test rax, rax	       626	vt.c	FUNCTION_24	IF_1
0x4000868	            0x740d	                            je 0x4000877	       626	vt.c	FUNCTION_24	IF_1
0x400086a	          0x4889df	                            mov rdi, rbx	       627	vt.c	FUNCTION_24	CALL_2
0x400086d	              0x5b	                                 pop rbx	       628	vt.c	FUNCTION_24
0x400086e	      0xe900000000	                           jmp 0x4000873	       627	vt.c	FUNCTION_24	CALL_2
0x4000873	             0xf0b	                                     ud2	       627	vt.c	FUNCTION_24	CALL_2
0x4000875	            0xebe0	                           jmp 0x4000857	       624	vt.c	FUNCTION_24	CALL_1
0x4000877	              0x5b	                                 pop rbx	       628	vt.c	FUNCTION_24
0x4000878	              0xc3	                                     ret	       628	vt.c	FUNCTION_24
con_open	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	2
0x40004c0	            0x31c0	                            xor eax, eax	      2916	vt.c	FUNCTION_90
0x40004c2	              0xc3	                                     ret	      2916	vt.c	FUNCTION_90
vtconsole_class_init	ELSE,1:WHILE,0:DO,0:functions,0:IF,3:FOR,1:CALL,10:SWITCH,0	48
0x4000040	            0x4157	                                push r15	       344	vt.c	FUNCTION_11
0x4000042	            0x4156	                                push r14	       344	vt.c	FUNCTION_11
0x4000044	          0x4989f7	                            mov r15, rsi	       348	vt.c	FUNCTION_11
0x4000047	            0x4155	                                push r13	       344	vt.c	FUNCTION_11
0x4000049	            0x4154	                                push r12	       344	vt.c	FUNCTION_11
0x400004b	          0x4989fd	                            mov r13, rdi	       344	vt.c	FUNCTION_11
0x400004e	              0x55	                                push rbp	       344	vt.c	FUNCTION_11
0x400004f	              0x53	                                push rbx	       344	vt.c	FUNCTION_11
0x4000050	          0x4189d6	                           mov r14d, edx	       344	vt.c	FUNCTION_11
0x4000053	        0x4883ec18	                           sub rsp, 0x18	       344	vt.c	FUNCTION_11
0x4000057	    0x65488b042528	                mov rax, qword gs:[0x28]	       344	vt.c	FUNCTION_11
0x4000060	      0x4889442410	             mov qword [rsp + 0x10], rax	       344	vt.c	FUNCTION_11
0x4000065	            0x31c0	                            xor eax, eax	       344	vt.c	FUNCTION_11
0x4000067	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       349	vt.c	FUNCTION_11	IF_1
0x400006e	        0x48893424	                    mov qword [rsp], rsi	       344	vt.c	FUNCTION_11
0x4000072	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       349	vt.c	FUNCTION_11	IF_1
0x4000079	          0x4885c0	                           test rax, rax	       349	vt.c	FUNCTION_11	IF_1
0x400007c	     0xf8449010000	                            je 0x40001cb	       349	vt.c	FUNCTION_11	IF_1
0x4000082	      0x488d4c240c	                    lea rcx, [rsp + 0xc]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000087	      0x488d542408	                      lea rdx, [rsp + 8]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400008c	        0x488b3424	                    mov rsi, qword [rsp]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000090	      0xe800000000	                          call 0x4000095	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000095	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400009c	        0x8b6c2408	                mov ebp, dword [rsp + 8]	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a0	      0x448b64240c	            mov r12d, dword [rsp + 0xc] 	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a5	        0x48890424	                    mov qword [rsp], rax	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x40000a9	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x40000ad	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x40000b0	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x40000b2	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x40000b4	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000b6	     0xf83c2000000	                           jae 0x400017e	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bc	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bf	     0xf84e7000000	                            je 0x40001ac	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c5	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c8	            0xeb26	                           jmp 0x40000f0	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ca	          0x4189e8	                            mov r8d, ebp	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000cd	          0x4989df	                            mov r15, rbx	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000d0	        0x4883c302	                              add rbx, 2	       370	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d4	          0x83c501	                              add ebp, 1	       371	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d7	        0x4183ee01	                             sub r14d, 1	       372	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000db	    0x4139ad640100	           cmp dword [r13 + 0x164], ebp 	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e2	            0x7643	                           jbe 0x4000127	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e4	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e7	     0xf8496000000	                            je 0x4000183	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ed	           0xfb703	                   movzx eax, word [rbx]	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f0	            0x30c0	                              xor al, al	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f2	          0x6639d0	                              cmp ax, dx	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
vcs_scr_readw	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,0:SWITCH,0	8
0x4006330	    0x483bb7d00100	           cmp rsi, qword [rdi + 0x1d0] 	      4284	vt.c	FUNCTION_136	IF_1
0x4006337	            0x7404	                            je 0x400633d	      4284	vt.c	FUNCTION_136	IF_1
0x4006339	           0xfb706	                   movzx eax, word [rsi]	      4286	vt.c	FUNCTION_136
0x400633c	              0xc3	                                     ret	      4287	vt.c	FUNCTION_136
0x400633d	    0x8b0500000000	            mov eax, dword [0x04006343] 	      4284	vt.c	FUNCTION_136	IF_1
0x4006343	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      4284	vt.c	FUNCTION_136	IF_1
0x4006346	            0x74f1	                            je 0x4006339	      4284	vt.c	FUNCTION_136	IF_1
0x4006348	            0xf3c3	                                     ret	      4287	vt.c	FUNCTION_136
ucs_cmp	ELSE,1:WHILE,0:DO,0:functions,0:IF,2:FOR,0:CALL,0:SWITCH,0	8
0x4000440	            0x8b17	                    mov edx, dword [rdi]	      2153	vt.c	FUNCTION_70
0x4000442	          0x3b5604	                cmp edx, dword [rsi + 4]	      2156	vt.c	FUNCTION_70	IF_1
0x4000445	      0xb801000000	                              mov eax, 1	      2157	vt.c	FUNCTION_70	IF_1
0x400044a	            0x8b0e	                    mov ecx, dword [rsi]	      2154	vt.c	FUNCTION_70
0x400044c	            0x7704	                            ja 0x4000452	      2156	vt.c	FUNCTION_70	IF_1
0x400044e	            0x39ca	                            cmp edx, ecx	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000450	            0x19c0	                            sbb eax, eax	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000452	            0xf3c3	                                     ret	      2161	vt.c	FUNCTION_70
lf	ELSE,1:WHILE,0:DO,0:functions,0:IF,2:FOR,0:CALL,2:SWITCH,0	36
0x4000be0	              0x53	                                push rbx	      1117	vt.c	FUNCTION_40
0x4000be1	          0x4889fb	                            mov rbx, rdi	      1117	vt.c	FUNCTION_40
0x4000be4	        0x4883ec18	                           sub rsp, 0x18	      1117	vt.c	FUNCTION_40
0x4000be8	    0x8b8fc0010000	           mov ecx, dword [rdi + 0x1c0] 	      1121	vt.c	FUNCTION_40	IF_1
0x4000bee	    0x65488b042528	                mov rax, qword gs:[0x28]	      1117	vt.c	FUNCTION_40
0x4000bf7	      0x4889442410	             mov qword [rsp + 0x10], rax	      1117	vt.c	FUNCTION_40
0x4000bfc	            0x31c0	                            xor eax, eax	      1117	vt.c	FUNCTION_40
0x4000bfe	          0x8d5101	                      lea edx, [rcx + 1]	      1121	vt.c	FUNCTION_40	IF_1
0x4000c01	    0x3b9794010000	           cmp edx, dword [rdi + 0x194] 	      1121	vt.c	FUNCTION_40	IF_1
0x4000c07	            0x745d	                            je 0x4000c66	      1121	vt.c	FUNCTION_40	IF_1
0x4000c09	    0x8b8768010000	           mov eax, dword [rdi + 0x168] 	      1123	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c0f	          0x83e801	                              sub eax, 1	      1123	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c12	            0x39c1	                            cmp ecx, eax	      1123	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c14	            0x7313	                           jae 0x4000c29	      1123	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c16	    0x8b876c010000	           mov eax, dword [rdi + 0x16c] 	      1125	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c1c	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1124	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c22	    0x480187d00100	           add qword [rdi + 0x1d0], rax 	      1125	vt.c	FUNCTION_40	ELSE_1	IF_2
0x4000c29	    0x80a37a020000	            and byte [rbx + 0x27a], 0xbf	      1127	vt.c	FUNCTION_40
0x4000c30	          0x4889e2	                            mov rdx, rsp	       270	vt.c	FUNCTION_3	CALL_1
0x4000c33	      0xbe03000000	                              mov esi, 3	       270	vt.c	FUNCTION_3	CALL_1
0x4000c38	    0x48c7c7000000	                              mov rdi, 0	       270	vt.c	FUNCTION_3	CALL_1
0x4000c3f	        0x48891c24	                    mov qword [rsp], rbx	       269	vt.c	FUNCTION_3
0x4000c43	    0xc74424080a00	                mov dword [rsp + 8], 0xa	       269	vt.c	FUNCTION_3
0x4000c4b	      0xe800000000	                          call 0x4000c50	       270	vt.c	FUNCTION_3	CALL_1
0x4000c50	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1129	vt.c	FUNCTION_40
0x4000c55	    0x654833042528	                xor rax, qword gs:[0x28]	      1129	vt.c	FUNCTION_40
0x4000c5e	            0x751b	                           jne 0x4000c7b	      1129	vt.c	FUNCTION_40
0x4000c60	        0x4883c418	                           add rsp, 0x18	      1129	vt.c	FUNCTION_40
0x4000c64	              0x5b	                                 pop rbx	      1129	vt.c	FUNCTION_40
0x4000c65	              0xc3	                                     ret	      1129	vt.c	FUNCTION_40
0x4000c66	    0x8bb790010000	           mov esi, dword [rdi + 0x190] 	      1122	vt.c	FUNCTION_40	CALL_1
0x4000c6c	    0x41b801000000	                              mov r8d, 1	      1122	vt.c	FUNCTION_40	CALL_1
0x4000c72	            0x31c9	                            xor ecx, ecx	      1122	vt.c	FUNCTION_40	CALL_1
0x4000c74	      0xe867feffff	                     call sym.con_scroll	      1122	vt.c	FUNCTION_40	CALL_1
0x4000c79	            0xebae	                           jmp 0x4000c29	      1122	vt.c	FUNCTION_40	CALL_1
0x4000c7b	      0xe800000000	                    call sym.insert_char	      1129	vt.c	FUNCTION_40
do_blank_screen	ELSE,0:WHILE,0:DO,0:functions,0:IF,8:FOR,0:CALL,14:SWITCH,0	113
0x4000ec0	    0x486305000000	         movsxd rax, dword [0x04000ec7] 	      3817	vt.c	FUNCTION_118
0x4000ec7	              0x55	                                push rbp	      3816	vt.c	FUNCTION_118
0x4000ec8	            0x89fd	                            mov ebp, edi	      3816	vt.c	FUNCTION_118
0x4000eca	              0x53	                                push rbx	      3816	vt.c	FUNCTION_118
0x4000ecb	        0x488d0480	                  lea rax, [rax + rax*4]	      3817	vt.c	FUNCTION_118
0x4000ecf	    0x488b1cc50000	                  mov rbx, qword [rax*8]	      3817	vt.c	FUNCTION_118
0x4000ed7	      0xe800000000	                          call 0x4000edc	      3820	vt.c	FUNCTION_118	CALL_1
0x4000edc	            0x85c0	                           test eax, eax	      3820	vt.c	FUNCTION_118	CALL_1
0x4000ede	            0x750a	                           jne 0x4000eea	      3820	vt.c	FUNCTION_118	CALL_1
0x4000ee0	    0x8b3d00000000	            mov edi, dword [0x04000ee6] 	      3820	vt.c	FUNCTION_118	CALL_1
0x4000ee6	            0x85ff	                           test edi, edi	      3820	vt.c	FUNCTION_118	CALL_1
0x4000ee8	            0x7451	                            je 0x4000f3b	      3820	vt.c	FUNCTION_118	CALL_1
0x4000eea	    0x8b3500000000	            mov esi, dword [0x04000ef0] 	      3822	vt.c	FUNCTION_118	IF_1
0x4000ef0	            0x85f6	                           test esi, esi	      3822	vt.c	FUNCTION_118	IF_1
0x4000ef2	            0x7410	                            je 0x4000f04	      3822	vt.c	FUNCTION_118	IF_1
0x4000ef4	    0x833d00000000	               cmp dword [0x04000efb], 2	      3823	vt.c	FUNCTION_118	IF_1	IF_2
0x4000efb	     0xf848e000000	                            je 0x4000f8f	      3823	vt.c	FUNCTION_118	IF_1	IF_2
0x4000f01	              0x5b	                                 pop rbx	      3870	vt.c	FUNCTION_118
0x4000f02	              0x5d	                                 pop rbp	      3870	vt.c	FUNCTION_118
0x4000f03	              0xc3	                                     ret	      3870	vt.c	FUNCTION_118
0x4000f04	            0x85ed	                           test ebp, ebp	      3831	vt.c	FUNCTION_118	IF_3
0x4000f06	            0x7537	                           jne 0x4000f3f	      3831	vt.c	FUNCTION_118	IF_3
0x4000f08	    0x8b2d00000000	            mov ebp, dword [0x04000f0e] 	      3841	vt.c	FUNCTION_118	IF_4
0x4000f0e	          0x83fd01	                              cmp ebp, 1	      3841	vt.c	FUNCTION_118	IF_4
0x4000f11	            0x75ee	                           jne 0x4000f01	      3841	vt.c	FUNCTION_118	IF_4
0x4000f13	    0x80bbac010000	               cmp byte [rbx + 0x1ac], 0	      3846	vt.c	FUNCTION_118	IF_5
0x4000f1a	    0xc70500000000	               mov dword [0x04000f24], 0	      3843	vt.c	FUNCTION_118
0x4000f24	     0xf848f000000	                            je 0x4000fb9	      3846	vt.c	FUNCTION_118	IF_5
0x4000f2a	    0x8b0500000000	            mov eax, dword [0x04000f30] 	      3847	vt.c	FUNCTION_118	IF_5
0x4000f30	          0x83c001	                              add eax, 1	      3847	vt.c	FUNCTION_118	IF_5
0x4000f33	    0x890500000000	            mov dword [0x04000f39], eax 	      3847	vt.c	FUNCTION_118	IF_5
0x4000f39	            0xebc6	                           jmp 0x4000f01	      3848	vt.c	FUNCTION_118	IF_5
0x4000f3b	             0xf0b	                                     ud2	      3848	vt.c	FUNCTION_118	IF_5
0x4000f3d	            0xebab	                           jmp 0x4000eea	      3820	vt.c	FUNCTION_118	CALL_1
0x4000f3f	          0x4889df	                            mov rdi, rbx	      3832	vt.c	FUNCTION_118	IF_3	CALL_3
0x4000f42	      0xe889f7ffff	                    call sym.hide_cursor	      3832	vt.c	FUNCTION_118	IF_3	CALL_3
0x4000f47	          0x4889df	                            mov rdi, rbx	      3833	vt.c	FUNCTION_118	IF_3	CALL_4
0x4000f4a	      0xe8f1f8ffff	                    call sym.save_screen	      3833	vt.c	FUNCTION_118	IF_3	CALL_4
0x4000f4f	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f56	          0x4889df	                            mov rdi, rbx	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f59	      0xba01000000	                              mov edx, 1	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f5e	      0xbeffffffff	                     mov esi, 0xffffffff	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f63	        0x488b4050	            mov rax, qword [rax + 0x50] 	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f67	      0xe800000000	                          call 0x4000f6c	      3834	vt.c	FUNCTION_118	IF_3	CALL_5
0x4000f6c	    0x8b0500000000	            mov eax, dword [0x04000f72] 	      3835	vt.c	FUNCTION_118	IF_3
0x4000f72	          0x4889df	                            mov rdi, rbx	      3837	vt.c	FUNCTION_118	IF_3	CALL_6
0x4000f75	    0xc70500000000	               mov dword [0x04000f7f], 0	      3836	vt.c	FUNCTION_118	IF_3
0x4000f7f	              0x5b	                                 pop rbx	      3870	vt.c	FUNCTION_118
0x4000f80	              0x5d	                                 pop rbp	      3870	vt.c	FUNCTION_118
0x4000f81	          0x83c001	                              add eax, 1	      3835	vt.c	FUNCTION_118	IF_3
0x4000f84	    0x890500000000	            mov dword [0x04000f8a], eax 	      3835	vt.c	FUNCTION_118	IF_3
0x4000f8a	      0xe9f1f8ffff	                      jmp sym.set_origin	      3837	vt.c	FUNCTION_118	IF_3	CALL_6
0x4000f8f	    0x8b0500000000	            mov eax, dword [0x04000f95] 	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000f95	          0x4889df	                            mov rdi, rbx	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000f98	    0xc70500000000	               mov dword [0x04000fa2], 0	      3824	vt.c	FUNCTION_118	IF_1	IF_2
0x4000fa2	            0x31d2	                            xor edx, edx	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000fa4	          0x8d7001	                      lea esi, [rax + 1]	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000fa7	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000fae	              0x5b	                                 pop rbx	      3870	vt.c	FUNCTION_118
0x4000faf	              0x5d	                                 pop rbp	      3870	vt.c	FUNCTION_118
0x4000fb0	        0x488b4050	            mov rax, qword [rax + 0x50] 	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000fb4	      0xe900000000	                           jmp 0x4000fb9	      3825	vt.c	FUNCTION_118	IF_1	IF_2	CALL_2
0x4000fb9	          0x4889df	                            mov rdi, rbx	      3851	vt.c	FUNCTION_118	CALL_7
0x4000fbc	      0xe80ff7ffff	                    call sym.hide_cursor	      3851	vt.c	FUNCTION_118	CALL_7
0x4000fc1	    0x48c7c7000000	                              mov rdi, 0	      3852	vt.c	FUNCTION_118	CALL_8
0x4000fc8	      0xe800000000	                          call 0x4000fcd	      3852	vt.c	FUNCTION_118	CALL_8
0x4000fcd	          0x4889df	                            mov rdi, rbx	      3855	vt.c	FUNCTION_118	CALL_9
0x4000fd0	    0xc70500000000	               mov dword [0x04000fda], 0	      3853	vt.c	FUNCTION_118
0x4000fda	      0xe861f8ffff	                    call sym.save_screen	      3855	vt.c	FUNCTION_118	CALL_9
0x4000fdf	    0x8b0d00000000	            mov ecx, dword [0x04000fe5] 	      3857	vt.c	FUNCTION_118	CALL_10
0x4000fe5	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      3857	vt.c	FUNCTION_118	CALL_10
0x4000fec	            0x85c9	                           test ecx, ecx	      3857	vt.c	FUNCTION_118	CALL_10
0x4000fee	        0x488b4050	            mov rax, qword [rax + 0x50] 	      3857	vt.c	FUNCTION_118	CALL_10
0x4000ff2	            0x7509	                           jne 0x4000ffd	      3857	vt.c	FUNCTION_118	CALL_10
0x4000ff4	    0x8b0d00000000	            mov ecx, dword [0x04000ffa] 	      3857	vt.c	FUNCTION_118	CALL_10
0x4000ffa	          0x8d6901	                      lea ebp, [rcx + 1]	      3857	vt.c	FUNCTION_118	CALL_10
0x4000ffd	            0x31d2	                            xor edx, edx	      3857	vt.c	FUNCTION_118	CALL_10
0x4000fff	            0x89ee	                            mov esi, ebp	      3857	vt.c	FUNCTION_118	CALL_10
0x4001001	          0x4889df	                            mov rdi, rbx	      3857	vt.c	FUNCTION_118	CALL_10
0x4001004	      0xe800000000	                          call 0x4001009	      3857	vt.c	FUNCTION_118	CALL_10
0x4001009	    0x8b0d00000000	            mov ecx, dword [0x0400100f] 	      3858	vt.c	FUNCTION_118
0x400100f	            0x85c0	                           test eax, eax	      3859	vt.c	FUNCTION_118	IF_6
0x4001011	          0x8d5101	                      lea edx, [rcx + 1]	      3858	vt.c	FUNCTION_118
0x4001014	    0x891500000000	            mov dword [0x0400101a], edx 	      3858	vt.c	FUNCTION_118
0x400101a	            0x7548	                           jne 0x4001064	      3859	vt.c	FUNCTION_118	IF_6
0x400101c	    0x488b05000000	            mov rax, qword [0x04001023] 	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x4001023	          0x4885c0	                           test rax, rax	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x4001026	            0x7412	                            je 0x400103a	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x4001028	      0xbf01000000	                              mov edi, 1	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x400102d	      0xe800000000	                          call 0x4001032	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x4001032	            0x85c0	                           test eax, eax	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x4001034	     0xf85c7feffff	                           jne 0x4000f01	      3862	vt.c	FUNCTION_118	IF_7	CALL_12
0x400103a	    0x486305000000	         movsxd rax, dword [0x04001041] 	      3865	vt.c	FUNCTION_118	IF_8
0x4001041	            0x85c0	                           test eax, eax	      3865	vt.c	FUNCTION_118	IF_8
0x4001043	            0x740a	                            je 0x400104f	      3865	vt.c	FUNCTION_118	IF_8
0x4001045	    0x8b1500000000	            mov edx, dword [0x0400104b] 	      3865	vt.c	FUNCTION_118	IF_8
0x400104b	            0x85d2	                           test edx, edx	      3865	vt.c	FUNCTION_118	IF_8
0x400104d	            0x751f	                           jne 0x400106e	      3865	vt.c	FUNCTION_118	IF_8
0x400104f	     0xfb7b3600100	          movzx esi, word [rbx + 0x160] 	      3869	vt.c	FUNCTION_118	CALL_14
0x4001056	      0xbf02000000	                              mov edi, 2	      3869	vt.c	FUNCTION_118	CALL_14
0x400105b	              0x5b	                                 pop rbx	      3870	vt.c	FUNCTION_118
0x400105c	              0x5d	                                 pop rbp	      3870	vt.c	FUNCTION_118
0x400105d	            0x89f2	                            mov edx, esi	      3869	vt.c	FUNCTION_118	CALL_14
0x400105f	      0xe900000000	                           jmp 0x4001064	      3869	vt.c	FUNCTION_118	CALL_14
0x4001064	          0x4889df	                            mov rdi, rbx	      3860	vt.c	FUNCTION_118	CALL_11
0x4001067	      0xe814f8ffff	                     call sym.set_origin	      3860	vt.c	FUNCTION_118	CALL_11
0x400106c	            0xebae	                           jmp 0x400101c	      3860	vt.c	FUNCTION_118	CALL_11
0x400106e	    0x488b35000000	            mov rsi, qword [0x04001075] 	      3867	vt.c	FUNCTION_118	IF_8	CALL_13
0x4001075	    0x48c7c7000000	                              mov rdi, 0	      3867	vt.c	FUNCTION_118	IF_8	CALL_13
0x400107c	    0xc70500000000	               mov dword [0x04001086], 2	      3866	vt.c	FUNCTION_118	IF_8
0x4001086	          0x4801c6	                            add rsi, rax	      3867	vt.c	FUNCTION_118	IF_8	CALL_13
0x4001089	      0xe800000000	                          call 0x400108e	      3867	vt.c	FUNCTION_118	IF_8	CALL_13
0x400108e	            0xebbf	                           jmp 0x400104f	      3867	vt.c	FUNCTION_118	IF_8	CALL_13
rgb_foreground	ELSE,2:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,1:SWITCH,0	49
0x4000360	        0x440fb60e	                   movzx r9d, byte [rsi]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000364	      0x440fb64601	               movzx r8d, byte [rsi + 1]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000369	         0xfb64602	               movzx eax, byte [rsi + 2]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400036d	          0x4538c1	                            cmp r9b, r8b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000370	          0x4589c2	                           mov r10d, r8d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000373	        0x450f43d1	                        cmovae r10d, r9d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000377	            0x89c1	                            mov ecx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000379	          0x4138c2	                            cmp r10b, al	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400037c	        0x410fb6d2	                         movzx edx, r10b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000380	           0xf46d0	                         cmovbe edx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000383	            0x89d6	                            mov esi, edx	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000385	            0xd0ea	                               shr dl, 1	      1277	vt.c	ELSE_3	FUNCTION_50	IF_1
0x4000387	          0x4438ca	                             cmp dl, r9b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038a	            0x19c0	                            sbb eax, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038c	          0x83e004	                              and eax, 4	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038f	          0x4138d0	                             cmp r8b, dl	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000392	            0x7639	                           jbe 0x40003cd	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000394	          0x83c802	                               or eax, 2	      1280	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000397	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x4000399	            0x7736	                            ja 0x40003d1	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x400039b	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039d	            0x7539	                           jne 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039f	        0x4080fe55	                           cmp sil, 0x55	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a3	            0x7733	                            ja 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a5	     0xfb687790200	          movzx eax, byte [rdi + 0x279] 	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ac	          0x83e0f9	                     and eax, 0xfffffff9	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003af	          0x83c804	                               or eax, 4	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b2	    0x888779020000	              mov byte [rdi + 0x279], al	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b8	            0x31c0	                            xor eax, eax	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ba	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c1	          0x83e2f0	                     and edx, 0xfffffff0	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c4	             0x9d0	                             or eax, edx	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c6	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003cc	              0xc3	                                     ret	      1293	vt.c	ELSE_3	FUNCTION_50
0x40003cd	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003cf	            0x7607	                           jbe 0x40003d8	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d1	          0x83c801	                               or eax, 1	      1282	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d4	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d6	            0x74c7	                            je 0x400039f	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d8	     0xfb697790200	          movzx edx, byte [rdi + 0x279] 	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003df	          0x83e2f9	                     and edx, 0xfffffff9	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e2	        0x4080feaa	                           cmp sil, 0xaa	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e6	            0x770b	                            ja 0x40003f3	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e8	          0x83ca02	                               or edx, 2	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003eb	    0x889779020000	              mov byte [rdi + 0x279], dl	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f1	            0xebc7	                           jmp 0x40003ba	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f3	          0x83ca04	                               or edx, 4	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003f6	    0x889779020000	              mov byte [rdi + 0x279], dl	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003fc	            0xebbc	                           jmp 0x40003ba	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
vcs_scr_updated	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	16
0x4006370	        0x4883ec18	                           sub rsp, 0x18	      4299	vt.c	FUNCTION_138
0x4006374	      0xbe04000000	                              mov esi, 4	       276	vt.c	FUNCTION_4	CALL_1
0x4006379	        0x48893c24	                    mov qword [rsp], rdi	       275	vt.c	FUNCTION_4
0x400637d	          0x4889e2	                            mov rdx, rsp	       276	vt.c	FUNCTION_4	CALL_1
0x4006380	    0x48c7c7000000	                              mov rdi, 0	       276	vt.c	FUNCTION_4	CALL_1
0x4006387	    0x65488b042528	                mov rax, qword gs:[0x28]	      4299	vt.c	FUNCTION_138
0x4006390	      0x4889442410	             mov qword [rsp + 0x10], rax	      4299	vt.c	FUNCTION_138
0x4006395	            0x31c0	                            xor eax, eax	      4299	vt.c	FUNCTION_138
0x4006397	    0x48c744240800	                  mov qword [rsp + 8], 0	       275	vt.c	FUNCTION_4
0x40063a0	      0xe800000000	                          call 0x40063a5	       276	vt.c	FUNCTION_4	CALL_1
0x40063a5	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      4301	vt.c	FUNCTION_138
0x40063aa	    0x654833042528	                xor rax, qword gs:[0x28]	      4301	vt.c	FUNCTION_138
0x40063b3	            0x7505	                           jne 0x40063ba	      4301	vt.c	FUNCTION_138
0x40063b5	        0x4883c418	                           add rsp, 0x18	      4301	vt.c	FUNCTION_138
0x40063b9	              0xc3	                                     ret	      4301	vt.c	FUNCTION_138
0x40063ba	      0xe800000000	                  call section_end..text	      4301	vt.c	FUNCTION_138
vc_deallocate	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,8:SWITCH,0	54
0x4003550	            0x4154	                                push r12	      1002	vt.c	FUNCTION_35
0x4003552	              0x55	                                push rbp	      1002	vt.c	FUNCTION_35
0x4003553	            0x89fd	                            mov ebp, edi	      1002	vt.c	FUNCTION_35
0x4003555	              0x53	                                push rbx	      1002	vt.c	FUNCTION_35
0x4003556	        0x4883ec18	                           sub rsp, 0x18	      1002	vt.c	FUNCTION_35
0x400355a	    0x65488b042528	                mov rax, qword gs:[0x28]	      1002	vt.c	FUNCTION_35
0x4003563	      0x4889442410	             mov qword [rsp + 0x10], rax	      1002	vt.c	FUNCTION_35
0x4003568	            0x31c0	                            xor eax, eax	      1002	vt.c	FUNCTION_35
0x400356a	      0xe800000000	                          call 0x400356f	      1005	vt.c	FUNCTION_35	CALL_1
0x400356f	            0x85c0	                           test eax, eax	      1005	vt.c	FUNCTION_35	CALL_1
0x4003571	            0x750e	                           jne 0x4003581	      1005	vt.c	FUNCTION_35	CALL_1
0x4003573	    0x8b0500000000	            mov eax, dword [0x04003579] 	      1005	vt.c	FUNCTION_35	CALL_1
0x4003579	            0x85c0	                           test eax, eax	      1005	vt.c	FUNCTION_35	CALL_1
0x400357b	     0xf849b000000	                            je 0x400361c	      1005	vt.c	FUNCTION_35	CALL_1
0x4003581	            0x31db	                            xor ebx, ebx	      1003	vt.c	FUNCTION_35
0x4003583	          0x83fd3e	                           cmp ebp, 0x3e	       722	vt.c	FUNCTION_28
0x4003586	            0x7778	                            ja 0x4003600	       722	vt.c	FUNCTION_28
0x4003588	            0x89e8	                            mov eax, ebp	       722	vt.c	FUNCTION_28
0x400358a	        0x488d0480	                  lea rax, [rax + rax*4]	       722	vt.c	FUNCTION_28
0x400358e	    0x4c8d24c50000	                        lea r12, [rax*8]	       722	vt.c	FUNCTION_28
0x4003596	        0x498b1c24	                    mov rbx, qword [r12]	       722	vt.c	FUNCTION_28
0x400359a	          0x4885db	                           test rbx, rbx	       722	vt.c	FUNCTION_28
0x400359d	            0x7461	                            je 0x4003600	       722	vt.c	FUNCTION_28
0x400359f	          0x4889e2	                            mov rdx, rsp	      1011	vt.c	FUNCTION_35	IF_1	CALL_3
0x40035a2	      0xbe02000000	                              mov esi, 2	      1011	vt.c	FUNCTION_35	IF_1	CALL_3
0x40035a7	    0x48c7c7000000	                              mov rdi, 0	      1011	vt.c	FUNCTION_35	IF_1	CALL_3
0x40035ae	        0x48891c24	                    mov qword [rsp], rbx	      1010	vt.c	FUNCTION_35	IF_1
0x40035b2	      0xe800000000	                          call 0x40035b7	      1011	vt.c	FUNCTION_35	IF_1	CALL_3
0x40035b7	            0x89ef	                            mov edi, ebp	      1012	vt.c	FUNCTION_35	IF_1	CALL_4
0x40035b9	      0xe800000000	                          call 0x40035be	      1012	vt.c	FUNCTION_35	IF_1	CALL_4
0x40035be	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      1013	vt.c	FUNCTION_35	IF_1	CALL_5
0x40035c5	          0x4889df	                            mov rdi, rbx	      1013	vt.c	FUNCTION_35	IF_1	CALL_5
0x40035c8	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1013	vt.c	FUNCTION_35	IF_1	CALL_5
0x40035cc	      0xe800000000	                          call 0x40035d1	      1013	vt.c	FUNCTION_35	IF_1	CALL_5
0x40035d1	    0x488bbb500200	           mov rdi, qword [rbx + 0x250] 	      1014	vt.c	FUNCTION_35	IF_1	CALL_6
0x40035d8	      0xe800000000	                          call 0x40035dd	      1014	vt.c	FUNCTION_35	IF_1	CALL_6
0x40035dd	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      1015	vt.c	FUNCTION_35	IF_1	CALL_7
0x40035e4	          0x488b38	                    mov rdi, qword [rax]	      1015	vt.c	FUNCTION_35	IF_1	CALL_7
0x40035e7	      0xe800000000	                          call 0x40035ec	      1015	vt.c	FUNCTION_35	IF_1	CALL_7
0x40035ec	    0x488bbba00100	           mov rdi, qword [rbx + 0x1a0] 	      1016	vt.c	FUNCTION_35	IF_1	CALL_8
0x40035f3	      0xe800000000	                          call 0x40035f8	      1016	vt.c	FUNCTION_35	IF_1	CALL_8
0x40035f8	    0x49c704240000	                      mov qword [r12], 0	      1017	vt.c	FUNCTION_35	IF_1
0x4003600	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      1020	vt.c	FUNCTION_35
0x4003605	    0x6548330c2528	                xor rcx, qword gs:[0x28]	      1020	vt.c	FUNCTION_35
0x400360e	          0x4889d8	                            mov rax, rbx	      1020	vt.c	FUNCTION_35
0x4003611	            0x7510	                           jne 0x4003623	      1020	vt.c	FUNCTION_35
0x4003613	        0x4883c418	                           add rsp, 0x18	      1020	vt.c	FUNCTION_35
0x4003617	              0x5b	                                 pop rbx	      1020	vt.c	FUNCTION_35
0x4003618	              0x5d	                                 pop rbp	      1020	vt.c	FUNCTION_35
0x4003619	            0x415c	                                 pop r12	      1020	vt.c	FUNCTION_35
0x400361b	              0xc3	                                     ret	      1020	vt.c	FUNCTION_35
0x400361c	             0xf0b	                                     ud2	      1020	vt.c	FUNCTION_35
0x400361e	      0xe95effffff	                           jmp 0x4003581	      1005	vt.c	FUNCTION_35	CALL_1
0x4003623	      0xe800000000	                          call 0x4003628	      1020	vt.c	FUNCTION_35
con_throttle	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	1
0x40004b0	            0xf3c3	                                     ret	      2817	vt.c	FUNCTION_84
con_driver_unregister_callback	ELSE,0:WHILE,0:DO,0:functions,0:IF,2:FOR,1:CALL,9:SWITCH,0	35
0x4000d90	              0x53	                                push rbx	      3692	vt.c	FUNCTION_113
0x4000d91	    0x48c7c3000000	                              mov rbx, 0	      3692	vt.c	FUNCTION_113
0x4000d98	      0xe800000000	                          call 0x4000d9d	      3695	vt.c	FUNCTION_113	CALL_1
0x4000d9d	            0xeb0d	                           jmp 0x4000dac	      3695	vt.c	FUNCTION_113	CALL_1
0x4000d9f	        0x4883c328	                           add rbx, 0x28	      3695	vt.c	FUNCTION_113	CALL_1
0x4000da3	    0x4881fb000000	                              cmp rbx, 0	      3697	vt.c	FUNCTION_113	FOR_1
0x4000daa	            0x7465	                            je 0x4000e11	      3697	vt.c	FUNCTION_113	FOR_1
0x4000dac	          0xf60308	                      test byte [rbx], 8	      3700	vt.c	FUNCTION_113	FOR_1	IF_1
0x4000daf	            0x74ee	                            je 0x4000d9f	      3700	vt.c	FUNCTION_113	FOR_1	IF_1
0x4000db1	      0xe800000000	                          call 0x4000db6	      3703	vt.c	FUNCTION_113	FOR_1	CALL_2
0x4000db6	          0x8b73f4	              mov esi, dword [rbx - 0xc]	      3706	vt.c	FUNCTION_113	FOR_1	CALL_5
0x4000db9	    0x488b3d000000	            mov rdi, qword [0x04000dc0] 	      3706	vt.c	FUNCTION_113	FOR_1	CALL_5
0x4000dc0	          0x8323fb	             and dword [rbx], 0xfffffffb	      3460	vt.c	FUNCTION_107
0x4000dc3	      0xe800000000	                          call 0x4000dc8	      3706	vt.c	FUNCTION_113	FOR_1	CALL_5
0x4000dc8	      0xe800000000	                          call 0x4000dcd	      3708	vt.c	FUNCTION_113	FOR_1	CALL_6
0x4000dcd	      0x48837bdc00	               cmp qword [rbx - 0x24], 0	      3710	vt.c	FUNCTION_113	FOR_1	IF_2	CALL_7
0x4000dd2	            0x7543	                           jne 0x4000e17	      3710	vt.c	FUNCTION_113	FOR_1	IF_2	CALL_7
0x4000dd4	          0x833b08	                      cmp dword [rbx], 8	      3715	vt.c	FUNCTION_113	FOR_1	CALL_8
0x4000dd7	    0x48c743e40000	               mov qword [rbx - 0x1c], 0	      3712	vt.c	FUNCTION_113	FOR_1
0x4000ddf	    0x48c743ec0000	               mov qword [rbx - 0x14], 0	      3713	vt.c	FUNCTION_113	FOR_1
0x4000de7	    0xc743f4000000	                mov dword [rbx - 0xc], 0	      3714	vt.c	FUNCTION_113	FOR_1
0x4000dee	            0x7533	                           jne 0x4000e23	      3715	vt.c	FUNCTION_113	FOR_1	CALL_8
0x4000df0	    0xc70300000000	                      mov dword [rbx], 0	      3716	vt.c	FUNCTION_113	FOR_1
0x4000df6	    0xc743f8000000	                  mov dword [rbx - 8], 0	      3717	vt.c	FUNCTION_113	FOR_1
0x4000dfd	        0x4883c328	                           add rbx, 0x28	      3717	vt.c	FUNCTION_113	FOR_1
0x4000e01	    0xc743d4000000	               mov dword [rbx - 0x2c], 0	      3718	vt.c	FUNCTION_113	FOR_1
0x4000e08	    0x4881fb000000	                              cmp rbx, 0	      3697	vt.c	FUNCTION_113	FOR_1
0x4000e0f	            0x759b	                           jne 0x4000dac	      3697	vt.c	FUNCTION_113	FOR_1
0x4000e11	              0x5b	                                 pop rbx	      3722	vt.c	FUNCTION_113
0x4000e12	      0xe900000000	                           jmp 0x4000e17	      3721	vt.c	FUNCTION_113	CALL_9
0x4000e17	             0xf0b	                                     ud2	      3721	vt.c	FUNCTION_113	CALL_9
0x4000e19	    0x48c743dc0000	               mov qword [rbx - 0x24], 0	      3711	vt.c	FUNCTION_113	FOR_1	IF_2
0x4000e21	            0xebb1	                           jmp 0x4000dd4	      3711	vt.c	FUNCTION_113	FOR_1	IF_2
0x4000e23	             0xf0b	                                     ud2	      3711	vt.c	FUNCTION_113	FOR_1	IF_2
0x4000e25	            0xebc9	                           jmp 0x4000df0	      3715	vt.c	FUNCTION_113	FOR_1	CALL_8
set_palette	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,2:SWITCH,0	23
0x4000930	              0x53	                                push rbx	      3975	vt.c	FUNCTION_123
0x4000931	          0x4889fb	                            mov rbx, rdi	      3975	vt.c	FUNCTION_123
0x4000934	      0xe800000000	                          call 0x4000939	      3976	vt.c	FUNCTION_123	CALL_1
0x4000939	            0x85c0	                           test eax, eax	      3976	vt.c	FUNCTION_123	CALL_1
0x400093b	            0x750a	                           jne 0x4000947	      3976	vt.c	FUNCTION_123	CALL_1
0x400093d	    0x8b0500000000	            mov eax, dword [0x04000943] 	      3976	vt.c	FUNCTION_123	CALL_1
0x4000943	            0x85c0	                           test eax, eax	      3976	vt.c	FUNCTION_123	CALL_1
0x4000945	            0x742c	                            je 0x4000973	      3976	vt.c	FUNCTION_123	CALL_1
0x4000947	    0x80bbac010000	               cmp byte [rbx + 0x1ac], 1	      3978	vt.c	FUNCTION_123	IF_1
0x400094e	            0x742e	                            je 0x400097e	      3978	vt.c	FUNCTION_123	IF_1
0x4000950	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      3978	vt.c	FUNCTION_123	IF_1
0x4000957	    0x488b80800000	            mov rax, qword [rax + 0x80] 	      3978	vt.c	FUNCTION_123	IF_1
0x400095e	          0x4885c0	                           test rax, rax	      3978	vt.c	FUNCTION_123	IF_1
0x4000961	            0x741b	                            je 0x400097e	      3978	vt.c	FUNCTION_123	IF_1
0x4000963	          0x4889df	                            mov rdi, rbx	      3979	vt.c	FUNCTION_123	CALL_2
0x4000966	    0x48c7c6000000	                              mov rsi, 0	      3979	vt.c	FUNCTION_123	CALL_2
0x400096d	              0x5b	                                 pop rbx	      3980	vt.c	FUNCTION_123
0x400096e	      0xe900000000	                           jmp 0x4000973	      3979	vt.c	FUNCTION_123	CALL_2
0x4000973	             0xf0b	                                     ud2	      3979	vt.c	FUNCTION_123	CALL_2
0x4000975	    0x80bbac010000	               cmp byte [rbx + 0x1ac], 1	      3978	vt.c	FUNCTION_123	IF_1
0x400097c	            0x75d2	                           jne 0x4000950	      3978	vt.c	FUNCTION_123	IF_1
0x400097e	              0x5b	                                 pop rbx	      3980	vt.c	FUNCTION_123
0x400097f	              0xc3	                                     ret	      3980	vt.c	FUNCTION_123
show_tty_active	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	7
0x4000ac0	    0x8b0500000000	            mov eax, dword [0x04000ac6] 	      3065	vt.c	FUNCTION_95	CALL_1
0x4000ac6	          0x4889d7	                            mov rdi, rdx	      3064	vt.c	FUNCTION_95
0x4000ac9	    0x48c7c6000000	                              mov rsi, 0	      3065	vt.c	FUNCTION_95	CALL_1
0x4000ad0	          0x8d5001	                      lea edx, [rax + 1]	      3065	vt.c	FUNCTION_95	CALL_1
0x4000ad3	      0xe800000000	                          call 0x4000ad8	      3065	vt.c	FUNCTION_95	CALL_1
0x4000ad8	            0x4898	                                    cdqe	      3065	vt.c	FUNCTION_95	CALL_1
0x4000ada	              0xc3	                                     ret	      3066	vt.c	FUNCTION_95
set_mode	ELSE,4:WHILE,0:DO,0:functions,0:IF,5:FOR,1:CALL,4:SWITCH,2	156
0x40002a4	            0x488b	               add byte [rax - 0x75], cl	       573	vt.c	FUNCTION_19	CALL_2
0x40002a7	          0x4028e9	                             sub cl, bpl	       573	vt.c	FUNCTION_19	CALL_2
0x40002aa	               0x0	                      add byte [rax], al	       573	vt.c	FUNCTION_19	CALL_2
0x40002ac	               0x0	                      add byte [rax], al	       573	vt.c	FUNCTION_19	CALL_2
0x40002ae	            0x6690	                                     nop	       573	vt.c	FUNCTION_19	CALL_2
0x40002b0	            0x85f6	                           test esi, esi	      1072	vt.c	FUNCTION_36	IF_1
0x40002b2	     0xf8880000000	                            js 0x4000338	      1072	vt.c	FUNCTION_36	IF_1
0x40002b8	    0x8b8764010000	           mov eax, dword [rdi + 0x164] 	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002be	            0x39f0	                            cmp eax, esi	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c0	            0x764b	                           jbe 0x400030d	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c2	    0x89b7bc010000	            mov dword [rdi + 0x1bc], esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002c8	             0x1f6	                            add esi, esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002ca	    0xf68778020000	          test byte [rdi + 0x278], 0x20 	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d1	            0x744f	                            je 0x4000322	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d3	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	      1082	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d9	    0x8b8f94010000	           mov ecx, dword [rdi + 0x194] 	      1083	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002df	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x40002e1	            0x7f4b	                            jg 0x400032e	      1088	vt.c	FUNCTION_36	IF_4
0x40002e3	            0x39d1	                            cmp ecx, edx	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e5	            0x7e5f	                           jle 0x4000346	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e7	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1093	vt.c	FUNCTION_36	ELSE_5
0x40002ed	     0xfaf976c0100	           imul edx, dword [rdi + 0x16c]	      1094	vt.c	FUNCTION_36
0x40002f4	    0x4803b7780100	            add rsi, qword [rdi + 0x178]	      1094	vt.c	FUNCTION_36
0x40002fb	    0x80a77a020000	            and byte [rdi + 0x27a], 0xbf	      1095	vt.c	FUNCTION_36
0x4000302	          0x4801f2	                            add rdx, rsi	      1094	vt.c	FUNCTION_36
0x4000305	    0x488997d00100	            mov qword [rdi + 0x1d0], rdx	      1094	vt.c	FUNCTION_36
0x400030c	              0xc3	                                     ret	      1095	vt.c	FUNCTION_36
0x400030d	          0x83e801	                              sub eax, 1	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000310	    0xf68778020000	          test byte [rdi + 0x278], 0x20 	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000317	    0x8987bc010000	            mov dword [rdi + 0x1bc], eax	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x400031d	          0x8d3400	                    lea esi, [rax + rax]	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000320	            0x75b1	                           jne 0x40002d3	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000322	            0x31c0	                            xor eax, eax	      1085	vt.c	FUNCTION_36	ELSE_3
0x4000324	    0x8b8f68010000	           mov ecx, dword [rdi + 0x168] 	      1086	vt.c	FUNCTION_36	ELSE_3
0x400032a	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x400032c	            0x7eb5	                           jle 0x40002e3	      1088	vt.c	FUNCTION_36	IF_4
0x400032e	            0x89c2	                            mov edx, eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000330	    0x8987c0010000	            mov dword [rdi + 0x1c0], eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000336	            0xebb5	                           jmp 0x40002ed	      1089	vt.c	FUNCTION_36	IF_4
0x4000338	    0xc787bc010000	              mov dword [rdi + 0x1bc], 0	      1073	vt.c	FUNCTION_36	IF_1
0x4000342	            0x31f6	                            xor esi, esi	      1073	vt.c	FUNCTION_36	IF_1
0x4000344	            0xeb84	                           jmp 0x40002ca	      1073	vt.c	FUNCTION_36	IF_1
0x4000346	          0x8d51ff	                      lea edx, [rcx - 1]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000349	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x400034f	            0xeb9c	                           jmp 0x40002ed	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000351	       0xf1f440000	                   nop dword [rax + rax]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000356	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000360	        0x440fb60e	                   movzx r9d, byte [rsi]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000364	      0x440fb64601	               movzx r8d, byte [rsi + 1]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000369	         0xfb64602	               movzx eax, byte [rsi + 2]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400036d	          0x4538c1	                            cmp r9b, r8b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000370	          0x4589c2	                           mov r10d, r8d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000373	        0x450f43d1	                        cmovae r10d, r9d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000377	            0x89c1	                            mov ecx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000379	          0x4138c2	                            cmp r10b, al	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400037c	        0x410fb6d2	                         movzx edx, r10b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000380	           0xf46d0	                         cmovbe edx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000383	            0x89d6	                            mov esi, edx	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000385	            0xd0ea	                               shr dl, 1	      1277	vt.c	ELSE_3	FUNCTION_50	IF_1
0x4000387	          0x4438ca	                             cmp dl, r9b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038a	            0x19c0	                            sbb eax, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038c	          0x83e004	                              and eax, 4	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038f	          0x4138d0	                             cmp r8b, dl	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000392	            0x7639	                           jbe 0x40003cd	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000394	          0x83c802	                               or eax, 2	      1280	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000397	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x4000399	            0x7736	                            ja 0x40003d1	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x400039b	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039d	            0x7539	                           jne 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039f	        0x4080fe55	                           cmp sil, 0x55	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a3	            0x7733	                            ja 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a5	     0xfb687790200	          movzx eax, byte [rdi + 0x279] 	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ac	          0x83e0f9	                     and eax, 0xfffffff9	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003af	          0x83c804	                               or eax, 4	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b2	    0x888779020000	              mov byte [rdi + 0x279], al	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b8	            0x31c0	                            xor eax, eax	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ba	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c1	          0x83e2f0	                     and edx, 0xfffffff0	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c4	             0x9d0	                             or eax, edx	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c6	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003cc	              0xc3	                                     ret	      1293	vt.c	ELSE_3	FUNCTION_50
0x40003cd	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003cf	            0x7607	                           jbe 0x40003d8	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d1	          0x83c801	                               or eax, 1	      1282	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d4	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d6	            0x74c7	                            je 0x400039f	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d8	     0xfb697790200	          movzx edx, byte [rdi + 0x279] 	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003df	          0x83e2f9	                     and edx, 0xfffffff9	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e2	        0x4080feaa	                           cmp sil, 0xaa	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e6	            0x770b	                            ja 0x40003f3	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e8	          0x83ca02	                               or edx, 2	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003eb	    0x889779020000	              mov byte [rdi + 0x279], dl	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f1	            0xebc7	                           jmp 0x40003ba	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f3	          0x83ca04	                               or edx, 4	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003f6	    0x889779020000	              mov byte [rdi + 0x279], dl	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003fc	            0xebbc	                           jmp 0x40003ba	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003fe	            0x6690	                                     nop	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x4000400	           0xfb606	                   movzx eax, byte [rsi]	      1298	vt.c	FUNCTION_51
0x4000403	         0xfb65601	               movzx edx, byte [rsi + 1]	      1298	vt.c	FUNCTION_51
0x4000407	          0x83e080	                     and eax, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040a	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040d	           0xfb6c0	                           movzx eax, al	      1298	vt.c	FUNCTION_51
0x4000410	            0xd1f8	                              sar eax, 1	      1298	vt.c	FUNCTION_51
0x4000412	            0x89c1	                            mov ecx, eax	      1298	vt.c	FUNCTION_51
0x4000414	           0xfb6c2	                           movzx eax, dl	      1298	vt.c	FUNCTION_51
0x4000417	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1298	vt.c	FUNCTION_51
0x400041e	          0xc1f802	                              sar eax, 2	      1298	vt.c	FUNCTION_51
0x4000421	             0x9c8	                             or eax, ecx	      1298	vt.c	FUNCTION_51
0x4000423	          0x83e20f	                            and edx, 0xf	      1298	vt.c	FUNCTION_51
0x4000426	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000428	         0xfb65602	               movzx edx, byte [rsi + 2]	      1298	vt.c	FUNCTION_51
0x400042c	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400042f	           0xfb6d2	                           movzx edx, dl	      1298	vt.c	FUNCTION_51
0x4000432	          0xc1fa03	                              sar edx, 3	      1298	vt.c	FUNCTION_51
0x4000435	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000437	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1298	vt.c	FUNCTION_51
0x400043d	              0xc3	                                     ret	      1298	vt.c	FUNCTION_51
0x400043e	            0x6690	                                     nop	      1298	vt.c	FUNCTION_51
0x4000440	            0x8b17	                    mov edx, dword [rdi]	      2153	vt.c	FUNCTION_70
0x4000442	          0x3b5604	                cmp edx, dword [rsi + 4]	      2156	vt.c	FUNCTION_70	IF_1
0x4000445	      0xb801000000	                              mov eax, 1	      2157	vt.c	FUNCTION_70	IF_1
0x400044a	            0x8b0e	                    mov ecx, dword [rsi]	      2154	vt.c	FUNCTION_70
0x400044c	            0x7704	                            ja 0x4000452	      2156	vt.c	FUNCTION_70	IF_1
0x400044e	            0x39ca	                            cmp edx, ecx	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000450	            0x19c0	                            sbb eax, eax	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000452	            0xf3c3	                                     ret	      2161	vt.c	FUNCTION_70
0x4000454	            0x6690	                                     nop	      2161	vt.c	FUNCTION_70
0x4000456	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2161	vt.c	FUNCTION_70
0x4000460	         0xfbf4742	           movsx eax, word [rdi + 0x42] 	      2645	vt.c	FUNCTION_78
0x4000464	    0x8b1500000000	            mov edx, dword [0x0400046a] 	      2645	vt.c	FUNCTION_78
0x400046a	          0x6685c0	                             test ax, ax	      2645	vt.c	FUNCTION_78
0x400046d	            0x7403	                            je 0x4000472	      2645	vt.c	FUNCTION_78
0x400046f	          0x8d50ff	                      lea edx, [rax - 1]	      2645	vt.c	FUNCTION_78
0x4000472	            0x8916	                    mov dword [rsi], edx	      2645	vt.c	FUNCTION_78
0x4000474	    0x488b05000000	            mov rax, qword [0x0400047b] 	      2647	vt.c	FUNCTION_78
0x400047b	              0xc3	                                     ret	      2647	vt.c	FUNCTION_78
0x400047c	         0xf1f4000	                         nop dword [rax]	      2647	vt.c	FUNCTION_78
0x4000480	     0xfb687d40100	          movzx eax, byte [rdi + 0x1d4] 	      2801	vt.c	FUNCTION_82	IF_1
0x4000487	          0x83e001	                              and eax, 1	      2801	vt.c	FUNCTION_82	IF_1
0x400048a	            0x3c01	                               cmp al, 1	      2803	vt.c	FUNCTION_82
0x400048c	            0x19c0	                            sbb eax, eax	      2803	vt.c	FUNCTION_82
0x400048e	      0x2500800000	                         and eax, 0x8000	      2803	vt.c	FUNCTION_82
0x4000493	              0xc3	                                     ret	      2804	vt.c	FUNCTION_82
0x4000494	            0x6690	                                     nop	      2804	vt.c	FUNCTION_82
0x4000496	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2804	vt.c	FUNCTION_82
0x40004a0	            0x31c0	                            xor eax, eax	      2809	vt.c	FUNCTION_83
0x40004a2	              0xc3	                                     ret	      2809	vt.c	FUNCTION_83
0x40004a3	           0xf1f00	                         nop dword [rax]	      2809	vt.c	FUNCTION_83
0x40004a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2809	vt.c	FUNCTION_83
0x40004b0	            0xf3c3	                                     ret	      2817	vt.c	FUNCTION_84
0x40004b2	         0xf1f4000	                         nop dword [rax]	      2817	vt.c	FUNCTION_84
0x40004b6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2817	vt.c	FUNCTION_84
0x40004c0	            0x31c0	                            xor eax, eax	      2916	vt.c	FUNCTION_90
0x40004c2	              0xc3	                                     ret	      2916	vt.c	FUNCTION_90
0x40004c3	           0xf1f00	                         nop dword [rax]	      2916	vt.c	FUNCTION_90
0x40004c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      2916	vt.c	FUNCTION_90
unregister_vt_notifier	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	3
0x40006c0	          0x4889fe	                            mov rsi, rdi	       262	vt.c	FUNCTION_2
0x40006c3	    0x48c7c7000000	                              mov rdi, 0	       263	vt.c	FUNCTION_2	CALL_1
0x40006ca	      0xe900000000	                           jmp 0x40006cf	       263	vt.c	FUNCTION_2	CALL_1
vc_init	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,1:CALL,4:SWITCH,0	43
0x4001940	              0x55	                                push rbp	      2942	vt.c	FUNCTION_93
0x4001941	              0x53	                                push rbx	      2942	vt.c	FUNCTION_93
0x4001942	          0x4889fd	                            mov rbp, rdi	      2942	vt.c	FUNCTION_93
0x4001945	    0x899764010000	            mov dword [rdi + 0x164], edx	      2945	vt.c	FUNCTION_93
0x400194b	             0x1d2	                            add edx, edx	      2947	vt.c	FUNCTION_93
0x400194d	    0x89b768010000	            mov dword [rdi + 0x168], esi	      2946	vt.c	FUNCTION_93
0x4001953	    0x89976c010000	            mov dword [rdi + 0x16c], edx	      2947	vt.c	FUNCTION_93
0x4001959	            0x89cb	                            mov ebx, ecx	      2942	vt.c	FUNCTION_93
0x400195b	           0xfafd6	                           imul edx, esi	      2948	vt.c	FUNCTION_93
0x400195e	    0x8997a8010000	            mov dword [rdi + 0x1a8], edx	      2948	vt.c	FUNCTION_93
0x4001964	      0xe817efffff	                     call sym.set_origin	      2950	vt.c	FUNCTION_93	CALL_1
0x4001969	    0x488b85780100	           mov rax, qword [rbp + 0x178] 	      2951	vt.c	FUNCTION_93
0x4001970	          0x4889ef	                            mov rdi, rbp	      2952	vt.c	FUNCTION_93	CALL_2
0x4001973	    0x488985d00100	           mov qword [rbp + 0x1d0], rax 	      2951	vt.c	FUNCTION_93
0x400197a	      0xe800000000	                          call 0x400197f	      2952	vt.c	FUNCTION_93	CALL_2
0x400197f	    0x488d95a40200	                  lea rdx, [rbp + 0x2a4]	      2952	vt.c	FUNCTION_93	CALL_2
0x4001986	            0x31c0	                            xor eax, eax	      2952	vt.c	FUNCTION_93	CALL_2
0x4001988	     0xfb688000000	                   movzx ecx, byte [rax]	      2954	vt.c	FUNCTION_93	FOR_1
0x400198f	        0x4883c203	                              add rdx, 3	      2954	vt.c	FUNCTION_93	FOR_1
0x4001993	          0x884afd	                  mov byte [rdx - 3], cl	      2954	vt.c	FUNCTION_93	FOR_1
0x4001996	     0xfb688000000	                   movzx ecx, byte [rax]	      2955	vt.c	FUNCTION_93	FOR_1
0x400199d	          0x884afe	                  mov byte [rdx - 2], cl	      2955	vt.c	FUNCTION_93	FOR_1
0x40019a0	     0xfb688000000	                   movzx ecx, byte [rax]	      2956	vt.c	FUNCTION_93	FOR_1
0x40019a7	        0x4883c001	                              add rax, 1	      2956	vt.c	FUNCTION_93	FOR_1
0x40019ab	          0x884aff	                  mov byte [rdx - 1], cl	      2956	vt.c	FUNCTION_93	FOR_1
0x40019ae	        0x4883f810	                           cmp rax, 0x10	      2953	vt.c	FUNCTION_93	FOR_1
0x40019b2	            0x75d4	                           jne 0x4001988	      2953	vt.c	FUNCTION_93	FOR_1
0x40019b4	    0x8b0500000000	            mov eax, dword [0x040019ba] 	      2958	vt.c	FUNCTION_93
0x40019ba	    0x488dbd600200	                  lea rdi, [rbp + 0x260]	      2962	vt.c	FUNCTION_93	CALL_3
0x40019c1	    0xc685b3010000	               mov byte [rbp + 0x1b3], 8	      2961	vt.c	FUNCTION_93
0x40019c8	    0x48c7c6000000	                              mov rsi, 0	      2962	vt.c	FUNCTION_93	CALL_3
0x40019cf	    0x48c7c2000000	                              mov rdx, 0	      2962	vt.c	FUNCTION_93	CALL_3
0x40019d6	    0x8885ae010000	              mov byte [rbp + 0x1ae], al	      2958	vt.c	FUNCTION_93
0x40019dc	    0x8b0500000000	            mov eax, dword [0x040019e2] 	      2959	vt.c	FUNCTION_93
0x40019e2	    0x8885b1010000	              mov byte [rbp + 0x1b1], al	      2959	vt.c	FUNCTION_93
0x40019e8	    0x8b0500000000	            mov eax, dword [0x040019ee] 	      2960	vt.c	FUNCTION_93
0x40019ee	    0x8885b2010000	              mov byte [rbp + 0x1b2], al	      2960	vt.c	FUNCTION_93
0x40019f4	      0xe800000000	                          call 0x40019f9	      2962	vt.c	FUNCTION_93	CALL_3
0x40019f9	            0x89de	                            mov esi, ebx	      2963	vt.c	FUNCTION_93	CALL_4
0x40019fb	          0x4889ef	                            mov rdi, rbp	      2963	vt.c	FUNCTION_93	CALL_4
0x40019fe	              0x5b	                                 pop rbx	      2964	vt.c	FUNCTION_93
0x40019ff	              0x5d	                                 pop rbp	      2964	vt.c	FUNCTION_93
0x4001a00	      0xe9ebfcffff	                  jmp sym.reset_terminal	      2963	vt.c	FUNCTION_93	CALL_4
vc_scrolldelta_helper	ELSE,1:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,0:SWITCH,0	58
0x40005f0	            0x85f6	                           test esi, esi	      4314	vt.c	FUNCTION_139	IF_1
0x40005f2	    0x4c8b8f780100	            mov r9, qword [rdi + 0x178] 	      4309	vt.c	FUNCTION_139
0x40005f9	     0xf84a1000000	                            je 0x40006a0	      4314	vt.c	FUNCTION_139	IF_1
0x40005ff	            0x4154	                                push r12	      4305	vt.c	FUNCTION_139
0x4000601	    0x448ba76c0100	          mov r12d, dword [rdi + 0x16c] 	      4310	vt.c	FUNCTION_139
0x4000608	          0x4189d2	                           mov r10d, edx	      4320	vt.c	FUNCTION_139	IF_2
0x400060b	              0x55	                                push rbp	      4305	vt.c	FUNCTION_139
0x400060c	    0x488baf800100	           mov rbp, qword [rdi + 0x180] 	      4307	vt.c	FUNCTION_139
0x4000613	              0x53	                                push rbx	      4305	vt.c	FUNCTION_139
0x4000614	    0x468d1ca50000	                       lea r11d, [r12*4]	      4310	vt.c	FUNCTION_139
0x400061c	          0x4829cd	                            sub rbp, rcx	      4307	vt.c	FUNCTION_139
0x400061f	          0x4963c3	                        movsxd rax, r11d	      4320	vt.c	FUNCTION_139	IF_2
0x4000622	          0x4801e8	                            add rax, rbp	      4320	vt.c	FUNCTION_139	IF_2
0x4000625	          0x4939c2	                            cmp r10, rax	      4320	vt.c	FUNCTION_139	IF_2
0x4000628	            0x7f6a	                            jg 0x4000694	      4320	vt.c	FUNCTION_139	IF_2
0x400062a	            0x31ed	                            xor ebp, ebp	      4325	vt.c	FUNCTION_139	ELSE_1
0x400062c	          0x4531d2	                          xor r10d, r10d	      4324	vt.c	FUNCTION_139	ELSE_1
0x400062f	    0x488b87880100	           mov rax, qword [rdi + 0x188] 	      4328	vt.c	FUNCTION_139
0x4000636	          0x4963d8	                         movsxd rbx, r8d	      4328	vt.c	FUNCTION_139
0x4000639	          0x4929c9	                             sub r9, rcx	      4329	vt.c	FUNCTION_139
0x400063c	          0x4929e9	                             sub r9, rbp	      4329	vt.c	FUNCTION_139
0x400063f	        0x410faff4	                          imul esi, r12d	      4328	vt.c	FUNCTION_139
0x4000643	          0x4829c8	                            sub rax, rcx	      4328	vt.c	FUNCTION_139
0x4000646	          0x4829e8	                            sub rax, rbp	      4328	vt.c	FUNCTION_139
0x4000649	          0x4801d8	                            add rax, rbx	      4328	vt.c	FUNCTION_139
0x400064c	            0x4899	                                     cqo	      4328	vt.c	FUNCTION_139
0x400064e	          0x48f7fb	                                idiv rbx	      4328	vt.c	FUNCTION_139
0x4000651	        0x498d0419	                     lea rax, [r9 + rbx]	      4329	vt.c	FUNCTION_139
0x4000655	        0x478d0c1b	                    lea r9d, [r11 + r11]	      4332	vt.c	FUNCTION_139	IF_3
0x4000659	             0x1d6	                            add esi, edx	      4328	vt.c	FUNCTION_139
0x400065b	            0x4899	                                     cqo	      4329	vt.c	FUNCTION_139
0x400065d	          0x48f7fb	                                idiv rbx	      4329	vt.c	FUNCTION_139
0x4000660	            0x31c0	                            xor eax, eax	      4333	vt.c	FUNCTION_139	IF_3
0x4000662	              0x5b	                                 pop rbx	      4340	vt.c	FUNCTION_139
0x4000663	              0x5d	                                 pop rbp	      4340	vt.c	FUNCTION_139
0x4000664	            0x415c	                                 pop r12	      4340	vt.c	FUNCTION_139
0x4000666	          0x4139d1	                            cmp r9d, edx	      4333	vt.c	FUNCTION_139	IF_3
0x4000669	        0x440f4fd8	                         cmovg r11d, eax	      4333	vt.c	FUNCTION_139	IF_3
0x400066d	          0x4139f3	                           cmp r11d, esi	      4335	vt.c	FUNCTION_139	IF_4
0x4000670	           0xf4ff0	                          cmovg esi, eax	      4335	vt.c	FUNCTION_139	IF_4
0x4000673	            0x89d0	                            mov eax, edx	      4336	vt.c	FUNCTION_139	IF_5
0x4000675	          0x4429d8	                           sub eax, r11d	      4336	vt.c	FUNCTION_139	IF_5
0x4000678	            0x39c6	                            cmp esi, eax	      4336	vt.c	FUNCTION_139	IF_5
0x400067a	            0x89f0	                            mov eax, esi	      4336	vt.c	FUNCTION_139	IF_5
0x400067c	           0xf4fc2	                          cmovg eax, edx	      4336	vt.c	FUNCTION_139	IF_5
0x400067f	          0x4401d0	                           add eax, r10d	      4339	vt.c	FUNCTION_139
0x4000682	              0x99	                                     cdq	      4339	vt.c	FUNCTION_139
0x4000683	          0x41f7f8	                                idiv r8d	      4339	vt.c	FUNCTION_139
0x4000686	          0x4863c2	                         movsxd rax, edx	      4339	vt.c	FUNCTION_139
0x4000689	          0x4801c1	                            add rcx, rax	      4339	vt.c	FUNCTION_139
0x400068c	    0x48898f880100	            mov qword [rdi + 0x188], rcx	      4339	vt.c	FUNCTION_139
0x4000693	              0xc3	                                     ret	      4340	vt.c	FUNCTION_139
0x4000694	          0x4189ea	                           mov r10d, ebp	      4321	vt.c	FUNCTION_139	IF_2
0x4000697	        0x458d0414	                    lea r8d, [r12 + rdx]	      4322	vt.c	FUNCTION_139	IF_2
0x400069b	          0x4863ed	                         movsxd rbp, ebp	      4322	vt.c	FUNCTION_139	IF_2
0x400069e	            0xeb8f	                           jmp 0x400062f	      4322	vt.c	FUNCTION_139	IF_2
0x40006a0	    0x4c898f880100	             mov qword [rdi + 0x188], r9	      4315	vt.c	FUNCTION_139	IF_1
0x40006a7	              0xc3	                                     ret	      4315	vt.c	FUNCTION_139	IF_1
con_start	ELSE,0:WHILE,0:DO,0:functions,0:IF,2:FOR,0:CALL,2:SWITCH,0	11
0x4000d10	          0x4885ff	                           test rdi, rdi	      2847	vt.c	FUNCTION_87	IF_1
0x4000d13	            0x741e	                            je 0x4000d33	      2847	vt.c	FUNCTION_87	IF_1
0x4000d15	          0x8b7f20	            mov edi, dword [rdi + 0x20] 	      2849	vt.c	FUNCTION_87
0x4000d18	          0x83ff3e	                           cmp edi, 0x3e	       722	vt.c	FUNCTION_28
0x4000d1b	            0x7716	                            ja 0x4000d33	       722	vt.c	FUNCTION_28
0x4000d1d	            0x89f8	                            mov eax, edi	       722	vt.c	FUNCTION_28
0x4000d1f	        0x488d0480	                  lea rax, [rax + rax*4]	       722	vt.c	FUNCTION_28
0x4000d23	    0x48833cc50000	                    cmp qword [rax*8], 0	       722	vt.c	FUNCTION_28
0x4000d2c	            0x7405	                            je 0x4000d33	       722	vt.c	FUNCTION_28
0x4000d2e	      0xe900000000	                           jmp 0x4000d33	      2852	vt.c	FUNCTION_87	CALL_2
0x4000d33	            0xf3c3	                                     ret	      2852	vt.c	FUNCTION_87	CALL_2
console_callback	ELSE,0:WHILE,0:DO,0:functions,0:IF,6:FOR,0:CALL,10:SWITCH,0	73
0x4003a90	              0x53	                                push rbx	      2452	vt.c	FUNCTION_74
0x4003a91	        0x4883ec18	                           sub rsp, 0x18	      2452	vt.c	FUNCTION_74
0x4003a95	    0x65488b042528	                mov rax, qword gs:[0x28]	      2452	vt.c	FUNCTION_74
0x4003a9e	      0x4889442410	             mov qword [rsp + 0x10], rax	      2452	vt.c	FUNCTION_74
0x4003aa3	            0x31c0	                            xor eax, eax	      2452	vt.c	FUNCTION_74
0x4003aa5	      0xe800000000	                          call 0x4003aaa	      2453	vt.c	FUNCTION_74	CALL_1
0x4003aaa	    0x8b0500000000	            mov eax, dword [0x04003ab0] 	      2455	vt.c	FUNCTION_74	IF_1
0x4003ab0	            0x85c0	                           test eax, eax	      2455	vt.c	FUNCTION_74	IF_1
0x4003ab2	            0x781e	                            js 0x4003ad2	      2455	vt.c	FUNCTION_74	IF_1
0x4003ab4	    0x486315000000	         movsxd rdx, dword [0x04003abb] 	      2456	vt.c	FUNCTION_74	IF_1	IF_2
0x4003abb	            0x39d0	                            cmp eax, edx	      2456	vt.c	FUNCTION_74	IF_1	IF_2
0x4003abd	            0x7409	                            je 0x4003ac8	      2456	vt.c	FUNCTION_74	IF_1	IF_2
0x4003abf	          0x83f83e	                           cmp eax, 0x3e	       722	vt.c	FUNCTION_28
0x4003ac2	     0xf8694000000	                           jbe 0x4003b5c	       722	vt.c	FUNCTION_28
0x4003ac8	    0xc70500000000	     mov dword [0x04003ad2], 0xffffffff 	      2464	vt.c	FUNCTION_74	IF_1
0x4003ad2	    0x8b0d00000000	            mov ecx, dword [0x04003ad8] 	      2466	vt.c	FUNCTION_74	IF_3
0x4003ad8	            0x85c9	                           test ecx, ecx	      2466	vt.c	FUNCTION_74	IF_3
0x4003ada	     0xf850e010000	                           jne 0x4003bee	      2466	vt.c	FUNCTION_74	IF_3
0x4003ae0	    0x8b1500000000	            mov edx, dword [0x04003ae6] 	      2470	vt.c	FUNCTION_74	IF_4
0x4003ae6	            0x85d2	                           test edx, edx	      2470	vt.c	FUNCTION_74	IF_4
0x4003ae8	     0xf85af000000	                           jne 0x4003b9d	      2470	vt.c	FUNCTION_74	IF_4
0x4003aee	    0x8b0500000000	            mov eax, dword [0x04003af4] 	      2477	vt.c	FUNCTION_74	IF_6
0x4003af4	            0x85c0	                           test eax, eax	      2477	vt.c	FUNCTION_74	IF_6
0x4003af6	            0x7411	                            je 0x4003b09	      2477	vt.c	FUNCTION_74	IF_6
0x4003af8	            0x31ff	                            xor edi, edi	      2478	vt.c	FUNCTION_74	IF_6	CALL_8
0x4003afa	      0xe800000000	                          call 0x4003aff	      2478	vt.c	FUNCTION_74	IF_6	CALL_8
0x4003aff	    0xc70500000000	               mov dword [0x04003b09], 0	      2479	vt.c	FUNCTION_74	IF_6
0x4003b09	    0x486305000000	         movsxd rax, dword [0x04003b10] 	      2481	vt.c	FUNCTION_74	CALL_9
0x4003b10	          0x4889e2	                            mov rdx, rsp	       276	vt.c	FUNCTION_4	CALL_1
0x4003b13	      0xbe04000000	                              mov esi, 4	       276	vt.c	FUNCTION_4	CALL_1
0x4003b18	    0x48c7c7000000	                              mov rdi, 0	       276	vt.c	FUNCTION_4	CALL_1
0x4003b1f	    0x48c744240800	                  mov qword [rsp + 8], 0	       275	vt.c	FUNCTION_4
0x4003b28	        0x488d0480	                  lea rax, [rax + rax*4]	      2481	vt.c	FUNCTION_74	CALL_9
0x4003b2c	    0x488b04c50000	                  mov rax, qword [rax*8]	      2481	vt.c	FUNCTION_74	CALL_9
0x4003b34	        0x48890424	                    mov qword [rsp], rax	       275	vt.c	FUNCTION_4
0x4003b38	      0xe800000000	                          call 0x4003b3d	       276	vt.c	FUNCTION_4	CALL_1
0x4003b3d	      0xe800000000	                          call 0x4003b42	      2483	vt.c	FUNCTION_74	CALL_10
0x4003b42	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2484	vt.c	FUNCTION_74
0x4003b47	    0x654833042528	                xor rax, qword gs:[0x28]	      2484	vt.c	FUNCTION_74
0x4003b50	     0xf85ac000000	                           jne 0x4003c02	      2484	vt.c	FUNCTION_74
0x4003b56	        0x4883c418	                           add rsp, 0x18	      2484	vt.c	FUNCTION_74
0x4003b5a	              0x5b	                                 pop rbx	      2484	vt.c	FUNCTION_74
0x4003b5b	              0xc3	                                     ret	      2484	vt.c	FUNCTION_74
0x4003b5c	        0x488d0480	                  lea rax, [rax + rax*4]	       722	vt.c	FUNCTION_28
0x4003b60	    0x48833cc50000	                    cmp qword [rax*8], 0	       722	vt.c	FUNCTION_28
0x4003b69	     0xf8459ffffff	                            je 0x4003ac8	       722	vt.c	FUNCTION_28
0x4003b6f	        0x488d0492	                  lea rax, [rdx + rdx*4]	      2458	vt.c	FUNCTION_74	IF_1	IF_2	CALL_3
0x4003b73	    0x488b3cc50000	                  mov rdi, qword [rax*8]	      2458	vt.c	FUNCTION_74	IF_1	IF_2	CALL_3
0x4003b7b	      0xe850cbffff	                    call sym.hide_cursor	      2458	vt.c	FUNCTION_74	IF_1	IF_2	CALL_3
0x4003b80	    0x486305000000	         movsxd rax, dword [0x04003b87] 	      2459	vt.c	FUNCTION_74	IF_1	IF_2	CALL_4
0x4003b87	        0x488d0480	                  lea rax, [rax + rax*4]	      2459	vt.c	FUNCTION_74	IF_1	IF_2	CALL_4
0x4003b8b	    0x488b3cc50000	                  mov rdi, qword [rax*8]	      2459	vt.c	FUNCTION_74	IF_1	IF_2	CALL_4
0x4003b93	      0xe800000000	                          call 0x4003b98	      2459	vt.c	FUNCTION_74	IF_1	IF_2	CALL_4
0x4003b98	      0xe92bffffff	                           jmp 0x4003ac8	      2459	vt.c	FUNCTION_74	IF_1	IF_2	CALL_4
0x4003b9d	    0x486305000000	         movsxd rax, dword [0x04003ba4] 	      2471	vt.c	FUNCTION_74	IF_4
0x4003ba4	        0x488d0480	                  lea rax, [rax + rax*4]	      2471	vt.c	FUNCTION_74	IF_4
0x4003ba8	    0x488b1cc50000	                  mov rbx, qword [rax*8]	      2471	vt.c	FUNCTION_74	IF_4
0x4003bb0	      0xe800000000	                          call 0x4003bb5	      2472	vt.c	FUNCTION_74	IF_4	CALL_6
0x4003bb5	    0x80bbac010000	               cmp byte [rbx + 0x1ac], 0	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bbc	            0x7521	                           jne 0x4003bdf	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bbe	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bc5	    0x488b80880000	            mov rax, qword [rax + 0x88] 	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bcc	          0x4885c0	                           test rax, rax	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bcf	            0x740e	                            je 0x4003bdf	      2473	vt.c	FUNCTION_74	IF_4	IF_5
0x4003bd1	    0x8b3500000000	            mov esi, dword [0x04003bd7] 	      2474	vt.c	FUNCTION_74	IF_4	CALL_7
0x4003bd7	          0x4889df	                            mov rdi, rbx	      2474	vt.c	FUNCTION_74	IF_4	CALL_7
0x4003bda	      0xe800000000	                          call 0x4003bdf	      2474	vt.c	FUNCTION_74	IF_4	CALL_7
0x4003bdf	    0xc70500000000	               mov dword [0x04003be9], 0	      2475	vt.c	FUNCTION_74	IF_4
0x4003be9	      0xe900ffffff	                           jmp 0x4003aee	      2475	vt.c	FUNCTION_74	IF_4
0x4003bee	    0xc70500000000	               mov dword [0x04003bf8], 0	      2467	vt.c	FUNCTION_74	IF_3
0x4003bf8	      0xe800000000	                          call 0x4003bfd	      2468	vt.c	FUNCTION_74	IF_3	CALL_5
0x4003bfd	      0xe9defeffff	                           jmp 0x4003ae0	      2468	vt.c	FUNCTION_74	IF_3	CALL_5
0x4003c02	      0xe800000000	                          call 0x4003c07	      2484	vt.c	FUNCTION_74
vc_t416_color	ELSE,2:WHILE,0:DO,0:functions,0:IF,3:FOR,0:CALL,2:SWITCH,0	111
0x4000040	            0x4157	                                push r15	       344	vt.c	FUNCTION_11
0x4000042	            0x4156	                                push r14	       344	vt.c	FUNCTION_11
0x4000044	          0x4989f7	                            mov r15, rsi	       348	vt.c	FUNCTION_11
0x4000047	            0x4155	                                push r13	       344	vt.c	FUNCTION_11
0x4000049	            0x4154	                                push r12	       344	vt.c	FUNCTION_11
0x400004b	          0x4989fd	                            mov r13, rdi	       344	vt.c	FUNCTION_11
0x400004e	              0x55	                                push rbp	       344	vt.c	FUNCTION_11
0x400004f	              0x53	                                push rbx	       344	vt.c	FUNCTION_11
0x4000050	          0x4189d6	                           mov r14d, edx	       344	vt.c	FUNCTION_11
0x4000053	        0x4883ec18	                           sub rsp, 0x18	       344	vt.c	FUNCTION_11
0x4000057	    0x65488b042528	                mov rax, qword gs:[0x28]	       344	vt.c	FUNCTION_11
0x4000060	      0x4889442410	             mov qword [rsp + 0x10], rax	       344	vt.c	FUNCTION_11
0x4000065	            0x31c0	                            xor eax, eax	       344	vt.c	FUNCTION_11
0x4000067	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       349	vt.c	FUNCTION_11	IF_1
0x400006e	        0x48893424	                    mov qword [rsp], rsi	       344	vt.c	FUNCTION_11
0x4000072	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       349	vt.c	FUNCTION_11	IF_1
0x4000079	          0x4885c0	                           test rax, rax	       349	vt.c	FUNCTION_11	IF_1
0x400007c	     0xf8449010000	                            je 0x40001cb	       349	vt.c	FUNCTION_11	IF_1
0x4000082	      0x488d4c240c	                    lea rcx, [rsp + 0xc]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000087	      0x488d542408	                      lea rdx, [rsp + 8]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400008c	        0x488b3424	                    mov rsi, qword [rsp]	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000090	      0xe800000000	                          call 0x4000095	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x4000095	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x400009c	        0x8b6c2408	                mov ebp, dword [rsp + 8]	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a0	      0x448b64240c	            mov r12d, dword [rsp + 0xc] 	       356	vt.c	FUNCTION_11	ELSE_1
0x40000a5	        0x48890424	                    mov qword [rsp], rax	       355	vt.c	FUNCTION_11	ELSE_1	CALL_1
0x40000a9	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x40000ad	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x40000b0	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x40000b2	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x40000b4	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000b6	     0xf83c2000000	                           jae 0x400017e	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bc	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000bf	     0xf84e7000000	                            je 0x40001ac	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c5	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000c8	            0xeb26	                           jmp 0x40000f0	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ca	          0x4189e8	                            mov r8d, ebp	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000cd	          0x4989df	                            mov r15, rbx	       366	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000d0	        0x4883c302	                              add rbx, 2	       370	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d4	          0x83c501	                              add ebp, 1	       371	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000d7	        0x4183ee01	                             sub r14d, 1	       372	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000db	    0x4139ad640100	           cmp dword [r13 + 0x164], ebp 	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e2	            0x7643	                           jbe 0x4000127	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e4	          0x4585f6	                         test r14d, r14d	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000e7	     0xf8496000000	                            je 0x4000183	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000ed	           0xfb703	                   movzx eax, word [rbx]	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f0	            0x30c0	                              xor al, al	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x40000f2	          0x6639d0	                              cmp ax, dx	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000f5	            0x74d9	                            je 0x40000d0	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000f7	          0x4939df	                            cmp r15, rbx	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fa	            0x89c2	                            mov edx, eax	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fc	            0x73cc	                           jae 0x40000ca	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fe	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000105	          0x4889da	                            mov rdx, rbx	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000108	          0x4489e1	                           mov ecx, r12d	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010b	          0x4c29fa	                            sub rdx, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010e	          0x4c89fe	                            mov rsi, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000111	          0x4c89ef	                            mov rdi, r13	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000114	          0x48d1fa	                              sar rdx, 1	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000117	        0x488b4030	            mov rax, qword [rax + 0x30] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400011b	      0xe800000000	                          call 0x4000120	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000120	           0xfb713	                   movzx edx, word [rbx]	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000123	            0x30d2	                              xor dl, dl	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000125	            0xeba3	                           jmp 0x40000ca	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000127	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012a	            0x725c	                            jb 0x4000188	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012c	          0x4585f6	                         test r14d, r14d	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x400012f	            0x747b	                            je 0x40001ac	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x4000131	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000138	        0x4183c401	                             add r12d, 1	       379	vt.c	FUNCTION_11	FOR_1
0x400013c	          0x4989df	                            mov r15, rbx	       379	vt.c	FUNCTION_11	FOR_1
0x400013f	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000146	          0x4885c0	                           test rax, rax	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000149	            0x7417	                            je 0x4000162	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014b	        0x4c8b3c24	                    mov r15, qword [rsp]	       381	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014f	            0x31c9	                            xor ecx, ecx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000151	            0x31d2	                            xor edx, edx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000153	          0x4c89ef	                            mov rdi, r13	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000156	          0x4c89fe	                            mov rsi, r15	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000159	      0xe800000000	                          call 0x400015e	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x400015e	        0x48890424	                    mov qword [rsp], rax	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000162	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x4000166	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       359	vt.c	FUNCTION_11	FOR_1
0x400016d	            0x31ed	                            xor ebp, ebp	       359	vt.c	FUNCTION_11	FOR_1
0x400016f	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x4000172	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x4000174	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x4000176	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000178	     0xf823effffff	                            jb 0x40000bc	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x400017e	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000181	            0xeba9	                           jmp 0x400012c	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000183	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000186	            0x7324	                           jae 0x40001ac	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000188	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400018f	          0x4889da	                            mov rdx, rbx	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000192	          0x4489e1	                           mov ecx, r12d	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000195	          0x4c29fa	                            sub rdx, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000198	          0x4c89fe	                            mov rsi, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019b	          0x4c89ef	                            mov rdi, r13	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019e	          0x48d1fa	                              sar rdx, 1	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a1	        0x488b4030	            mov rax, qword [rax + 0x30] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a5	      0xe800000000	                          call 0x40001aa	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001aa	            0xeb80	                           jmp 0x400012c	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001ac	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       385	vt.c	FUNCTION_11
0x40001b1	    0x654833042528	                xor rax, qword gs:[0x28]	       385	vt.c	FUNCTION_11
0x40001ba	            0x7530	                           jne 0x40001ec	       385	vt.c	FUNCTION_11
0x40001bc	        0x4883c418	                           add rsp, 0x18	       385	vt.c	FUNCTION_11
0x40001c0	              0x5b	                                 pop rbx	       385	vt.c	FUNCTION_11
0x40001c1	              0x5d	                                 pop rbp	       385	vt.c	FUNCTION_11
0x40001c2	            0x415c	                                 pop r12	       385	vt.c	FUNCTION_11
0x40001c4	              0x41	                                 invalid	       385	vt.c	FUNCTION_11
getconsxy	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	5
0x40062e0	    0x8b87bc010000	           mov eax, dword [rdi + 0x1bc] 	      4271	vt.c	FUNCTION_134
0x40062e6	            0x8806	                      mov byte [rsi], al	      4271	vt.c	FUNCTION_134
0x40062e8	    0x8b87c0010000	           mov eax, dword [rdi + 0x1c0] 	      4272	vt.c	FUNCTION_134
0x40062ee	          0x884601	                  mov byte [rsi + 1], al	      4272	vt.c	FUNCTION_134
0x40062f1	              0xc3	                                     ret	      4272	vt.c	FUNCTION_134
invert_screen	ELSE,3:WHILE,3:DO,0:functions,0:IF,4:FOR,0:CALL,6:SWITCH,0	132
0x4002e60	            0x4155	                                push r13	       453	vt.c	FUNCTION_15
0x4002e62	            0x4154	                                push r12	       453	vt.c	FUNCTION_15
0x4002e64	          0x4189cd	                           mov r13d, ecx	       453	vt.c	FUNCTION_15
0x4002e67	              0x55	                                push rbp	       453	vt.c	FUNCTION_15
0x4002e68	              0x53	                                push rbx	       453	vt.c	FUNCTION_15
0x4002e69	          0x4863ee	                         movsxd rbp, esi	       453	vt.c	FUNCTION_15
0x4002e6c	          0x4889fb	                            mov rbx, rdi	       453	vt.c	FUNCTION_15
0x4002e6f	          0x4189d4	                           mov r12d, edx	       453	vt.c	FUNCTION_15
0x4002e72	        0x4883ec18	                           sub rsp, 0x18	       453	vt.c	FUNCTION_15
0x4002e76	    0x65488b042528	                mov rax, qword gs:[0x28]	       453	vt.c	FUNCTION_15
0x4002e7f	      0x4889442410	             mov qword [rsp + 0x10], rax	       453	vt.c	FUNCTION_15
0x4002e84	            0x31c0	                            xor eax, eax	       453	vt.c	FUNCTION_15
0x4002e86	      0xe800000000	                          call 0x4002e8b	       456	vt.c	FUNCTION_15	CALL_1
0x4002e8b	            0x85c0	                           test eax, eax	       456	vt.c	FUNCTION_15	CALL_1
0x4002e8d	            0x750e	                           jne 0x4002e9d	       456	vt.c	FUNCTION_15	CALL_1
0x4002e8f	    0x8b1500000000	            mov edx, dword [0x04002e95] 	       456	vt.c	FUNCTION_15	CALL_1
0x4002e95	            0x85d2	                           test edx, edx	       456	vt.c	FUNCTION_15	CALL_1
0x4002e97	     0xf848d000000	                            je 0x4002f2a	       456	vt.c	FUNCTION_15	CALL_1
0x4002e9d	          0x4489e2	                           mov edx, r12d	       458	vt.c	FUNCTION_15
0x4002ea0	          0xc1ea1f	                           shr edx, 0x1f	       458	vt.c	FUNCTION_15
0x4002ea3	          0x4101d4	                           add r12d, edx	       458	vt.c	FUNCTION_15
0x4002ea6	          0x41d1fc	                             sar r12d, 1	       458	vt.c	FUNCTION_15
0x4002ea9	          0x4585ed	                         test r13d, r13d	       296	vt.c	FUNCTION_7	IF_1
0x4002eac	     0xf85e1000000	                           jne 0x4002f93	       296	vt.c	FUNCTION_7	IF_1
0x4002eb2	    0x4803ab780100	            add rbp, qword [rbx + 0x178]	       297	vt.c	FUNCTION_7	IF_1
0x4002eb9	    0x488b93980100	           mov rdx, qword [rbx + 0x198] 	       297	vt.c	FUNCTION_7	IF_1
0x4002ec0	    0x488b82a80000	            mov rax, qword [rdx + 0xa8] 	       460	vt.c	FUNCTION_15	IF_1
0x4002ec7	          0x4885c0	                           test rax, rax	       460	vt.c	FUNCTION_15	IF_1
0x4002eca	            0x7465	                            je 0x4002f31	       460	vt.c	FUNCTION_15	IF_1
0x4002ecc	          0x4489e2	                           mov edx, r12d	       461	vt.c	FUNCTION_15	IF_1	CALL_3
0x4002ecf	          0x4889ee	                            mov rsi, rbp	       461	vt.c	FUNCTION_15	IF_1	CALL_3
0x4002ed2	          0x4889df	                            mov rdi, rbx	       461	vt.c	FUNCTION_15	IF_1	CALL_3
0x4002ed5	      0xe800000000	                          call 0x4002eda	       461	vt.c	FUNCTION_15	IF_1	CALL_3
0x4002eda	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4002ee1	          0x483b18	                    cmp rbx, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4002ee4	     0xf8409010000	                            je 0x4002ff3	       289	vt.c	FUNCTION_6	CALL_1
0x4002eea	          0x4889e2	                            mov rdx, rsp	       276	vt.c	FUNCTION_4	CALL_1
0x4002eed	      0xbe04000000	                              mov esi, 4	       276	vt.c	FUNCTION_4	CALL_1
0x4002ef2	    0x48c7c7000000	                              mov rdi, 0	       276	vt.c	FUNCTION_4	CALL_1
0x4002ef9	    0x48c744240800	                  mov qword [rsp + 8], 0	       275	vt.c	FUNCTION_4
0x4002f02	        0x48891c24	                    mov qword [rsp], rbx	       275	vt.c	FUNCTION_4
0x4002f06	      0xe800000000	                          call 0x4002f0b	       276	vt.c	FUNCTION_4	CALL_1
0x4002f0b	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       494	vt.c	FUNCTION_15
0x4002f10	    0x654833042528	                xor rax, qword gs:[0x28]	       494	vt.c	FUNCTION_15
0x4002f19	     0xf854c010000	                           jne 0x400306b	       494	vt.c	FUNCTION_15
0x4002f1f	        0x4883c418	                           add rsp, 0x18	       494	vt.c	FUNCTION_15
0x4002f23	              0x5b	                                 pop rbx	       494	vt.c	FUNCTION_15
0x4002f24	              0x5d	                                 pop rbp	       494	vt.c	FUNCTION_15
0x4002f25	            0x415c	                                 pop r12	       494	vt.c	FUNCTION_15
0x4002f27	            0x415d	                                 pop r13	       494	vt.c	FUNCTION_15
0x4002f29	              0xc3	                                     ret	       494	vt.c	FUNCTION_15
0x4002f2a	             0xf0b	                                     ud2	       494	vt.c	FUNCTION_15
0x4002f2c	      0xe96cffffff	                           jmp 0x4002e9d	       456	vt.c	FUNCTION_15	CALL_1
0x4002f31	    0x80bb7a020000	               cmp byte [rbx + 0x27a], 0	       467	vt.c	FUNCTION_15	ELSE_1	IF_2
0x4002f38	     0xf8981000000	                           jns 0x4002fbf	       467	vt.c	FUNCTION_15	ELSE_1	IF_2
0x4002f3e	    0x6681bbd80100	          cmp word [rbx + 0x1d8], 0x100 	       474	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3
0x4002f47	     0xf84d3000000	                            je 0x4003020	       474	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3
0x4002f4d	          0x4585e4	                         test r12d, r12d	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f50	            0x7488	                            je 0x4002eda	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f52	      0x418d4424ff	                      lea eax, [r12 - 1]	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f57	      0x488d7c4502	              lea rdi, [rbp + rax*2 + 2]	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f5c	          0x4889e8	                            mov rax, rbp	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f5f	           0xfb708	                   movzx ecx, word [rax]	       483	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f62	        0x4883c002	                              add rax, 2	       486	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f66	            0x89ce	                            mov esi, ecx	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f68	    0x81e600700000	                         and esi, 0x7000	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f6e	            0x89f2	                            mov edx, esi	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f70	            0x89ce	                            mov esi, ecx	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f72	          0x80e588	                            and ch, 0x88	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f75	    0x81e600070000	                          and esi, 0x700	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f7b	          0xc1fa04	                              sar edx, 4	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f7e	          0xc1e604	                              shl esi, 4	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f81	             0x9d6	                             or esi, edx	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f83	             0x9f1	                             or ecx, esi	       484	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f85	        0x668948fe	                  mov word [rax - 2], cx	       485	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f89	          0x4839f8	                            cmp rax, rdi	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f8c	            0x75d1	                           jne 0x4002f5f	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f8e	      0xe947ffffff	                           jmp 0x4002eda	       482	vt.c	FUNCTION_15	ELSE_1	ELSE_3	WHILE_3
0x4002f93	    0x488b93980100	           mov rdx, qword [rbx + 0x198] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002f9a	    0x488b82b00000	            mov rax, qword [rdx + 0xb0] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002fa1	          0x4885c0	                           test rax, rax	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002fa4	            0x746e	                            je 0x4003014	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002fa6	            0x89ee	                            mov esi, ebp	       301	vt.c	FUNCTION_7	CALL_1
0x4002fa8	          0x4889df	                            mov rdi, rbx	       301	vt.c	FUNCTION_7	CALL_1
0x4002fab	      0xe800000000	                          call 0x4002fb0	       301	vt.c	FUNCTION_7	CALL_1
0x4002fb0	    0x488b93980100	           mov rdx, qword [rbx + 0x198] 	       301	vt.c	FUNCTION_7	CALL_1
0x4002fb7	          0x4889c5	                            mov rbp, rax	       301	vt.c	FUNCTION_7	CALL_1
0x4002fba	      0xe901ffffff	                           jmp 0x4002ec0	       301	vt.c	FUNCTION_7	CALL_1
0x4002fbf	          0x4585e4	                         test r12d, r12d	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fc2	     0xf8412ffffff	                            je 0x4002eda	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fc8	      0x418d4424ff	                      lea eax, [r12 - 1]	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fcd	          0x4889e9	                            mov rcx, rbp	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fd0	      0x488d444502	              lea rax, [rbp + rax*2 + 2]	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fd5	      0x6681310008	                   xor word [rcx], 0x800	       471	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fda	        0x4883c102	                              add rcx, 2	       472	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fde	          0x4839c1	                            cmp rcx, rax	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fe1	            0x75f2	                           jne 0x4002fd5	       468	vt.c	FUNCTION_15	ELSE_1	IF_2	WHILE_1
0x4002fe3	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4002fea	          0x483b18	                    cmp rbx, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4002fed	     0xf85f7feffff	                           jne 0x4002eea	       289	vt.c	FUNCTION_6	CALL_1
0x4002ff3	    0x8b0500000000	            mov eax, dword [0x04002ff9] 	       289	vt.c	FUNCTION_6	CALL_1
0x4002ff9	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x4002ffb	     0xf85e9feffff	                           jne 0x4002eea	       289	vt.c	FUNCTION_6	CALL_1
0x4003001	          0x4489e2	                           mov edx, r12d	       492	vt.c	FUNCTION_15	CALL_5
0x4003004	          0x4889ee	                            mov rsi, rbp	       492	vt.c	FUNCTION_15	CALL_5
0x4003007	          0x4889df	                            mov rdi, rbx	       492	vt.c	FUNCTION_15	CALL_5
0x400300a	      0xe831d0ffff	               call sym.do_update_region	       492	vt.c	FUNCTION_15	CALL_5
0x400300f	      0xe9d6feffff	                           jmp 0x4002eea	       492	vt.c	FUNCTION_15	CALL_5
0x4003014	    0x4803ab880100	            add rbp, qword [rbx + 0x188]	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x400301b	      0xe9a0feffff	                           jmp 0x4002ec0	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4003020	          0x4585e4	                         test r12d, r12d	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003023	     0xf84b1feffff	                            je 0x4002eda	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003029	      0x418d4424ff	                      lea eax, [r12 - 1]	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400302e	          0x4889e9	                            mov rcx, rbp	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003031	      0x488d7c4502	              lea rdi, [rbp + rax*2 + 2]	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003036	           0xfb701	                   movzx eax, word [rcx]	       476	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003039	        0x4883c102	                              add rcx, 2	       479	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400303d	            0x89c2	                            mov edx, eax	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400303f	    0x81e200e00000	                         and edx, 0xe000	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003045	            0x89d6	                            mov esi, edx	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003047	            0x89c2	                            mov edx, eax	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003049	        0x6625ff11	                          and ax, 0x11ff	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400304d	    0x81e2000e0000	                          and edx, 0xe00	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003053	          0xc1fe04	                              sar esi, 4	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003056	          0xc1e204	                              shl edx, 4	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003059	             0x9f2	                             or edx, esi	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400305b	             0x9d0	                             or eax, edx	       477	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400305d	        0x668941fe	                  mov word [rcx - 2], ax	       478	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003061	          0x4839f9	                            cmp rcx, rdi	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003064	            0x75d0	                           jne 0x4003036	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x4003066	      0xe96ffeffff	                           jmp 0x4002eda	       475	vt.c	FUNCTION_15	ELSE_1	ELSE_2	IF_3	WHILE_2
0x400306b	      0xe800000000	                 call sym.complement_pos	       494	vt.c	FUNCTION_15
con_close	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	1
0x40004d0	            0xf3c3	                                     ret	      2920	vt.c	FUNCTION_91
con_debug_enter	ELSE,0:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,7:SWITCH,0	19
0x4000510	    0x8b0500000000	            mov eax, dword [0x04000516] 	      3503	vt.c	FUNCTION_109
0x4000516	    0x890500000000	            mov dword [0x0400051c], eax 	      3503	vt.c	FUNCTION_109
0x400051c	    0x8b0500000000	            mov eax, dword [0x04000522] 	      3504	vt.c	FUNCTION_109
0x4000522	    0x890500000000	            mov dword [0x04000528], eax 	      3504	vt.c	FUNCTION_109
0x4000528	    0x8b0500000000	            mov eax, dword [0x0400052e] 	      3505	vt.c	FUNCTION_109
0x400052e	    0x890500000000	            mov dword [0x04000534], eax 	      3505	vt.c	FUNCTION_109
0x4000534	     0xfb687ac0100	          movzx eax, byte [rdi + 0x1ac] 	      3506	vt.c	FUNCTION_109
0x400053b	    0xc687ac010000	               mov byte [rdi + 0x1ac], 0	      3508	vt.c	FUNCTION_109
0x4000542	    0x890500000000	            mov dword [0x04000548], eax 	      3506	vt.c	FUNCTION_109
0x4000548	    0x8b0500000000	            mov eax, dword [0x0400054e] 	      3507	vt.c	FUNCTION_109
0x400054e	    0xc70500000000	               mov dword [0x04000558], 0	      3509	vt.c	FUNCTION_109
0x4000558	    0x890500000000	            mov dword [0x0400055e], eax 	      3507	vt.c	FUNCTION_109
0x400055e	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	      3510	vt.c	FUNCTION_109	IF_1
0x4000565	    0x488b80c80000	            mov rax, qword [rax + 0xc8] 	      3510	vt.c	FUNCTION_109	IF_1
0x400056c	          0x4885c0	                           test rax, rax	      3510	vt.c	FUNCTION_109	IF_1
0x400056f	            0x7405	                            je 0x4000576	      3510	vt.c	FUNCTION_109	IF_1
0x4000571	      0xe900000000	                           jmp 0x4000576	      3511	vt.c	FUNCTION_109	CALL_1
0x4000576	            0x31c0	                            xor eax, eax	      3542	vt.c	FUNCTION_109
0x4000578	              0xc3	                                     ret	      3542	vt.c	FUNCTION_109
vt_resize	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,3:SWITCH,0	19
0x4001f10	            0x4154	                                push r12	       991	vt.c	FUNCTION_34
0x4001f12	              0x55	                                push rbp	       991	vt.c	FUNCTION_34
0x4001f13	          0x4889f5	                            mov rbp, rsi	       991	vt.c	FUNCTION_34
0x4001f16	              0x53	                                push rbx	       991	vt.c	FUNCTION_34
0x4001f17	          0x4889fb	                            mov rbx, rdi	       991	vt.c	FUNCTION_34
0x4001f1a	    0x4c8ba7600200	           mov r12, qword [rdi + 0x260] 	       992	vt.c	FUNCTION_34
0x4001f21	      0xe800000000	                          call 0x4001f26	       995	vt.c	FUNCTION_34	CALL_1
0x4001f26	         0xfb74d00	                   movzx ecx, word [rbp]	       996	vt.c	FUNCTION_34	CALL_2
0x4001f2a	         0xfb75502	               movzx edx, word [rbp + 2]	       996	vt.c	FUNCTION_34	CALL_2
0x4001f2e	          0x4c89e6	                            mov rsi, r12	       996	vt.c	FUNCTION_34	CALL_2
0x4001f31	          0x4889df	                            mov rdi, rbx	       996	vt.c	FUNCTION_34	CALL_2
0x4001f34	      0xe8d7faffff	                   call sym.vc_do_resize	       996	vt.c	FUNCTION_34	CALL_2
0x4001f39	            0x89c3	                            mov ebx, eax	       996	vt.c	FUNCTION_34	CALL_2
0x4001f3b	      0xe800000000	                          call 0x4001f40	       997	vt.c	FUNCTION_34	CALL_3
0x4001f40	            0x89d8	                            mov eax, ebx	       999	vt.c	FUNCTION_34
0x4001f42	              0x5b	                                 pop rbx	       999	vt.c	FUNCTION_34
0x4001f43	              0x5d	                                 pop rbp	       999	vt.c	FUNCTION_34
0x4001f44	            0x415c	                                 pop r12	       999	vt.c	FUNCTION_34
0x4001f46	              0xc3	                                     ret	       999	vt.c	FUNCTION_34
do_take_over_console	ELSE,0:WHILE,0:DO,0:functions,0:IF,2:FOR,0:CALL,2:SWITCH,0	103
0x4002510	            0x4157	                                push r15	      3732	vt.c	FUNCTION_114
0x4002512	            0x4156	                                push r14	      3732	vt.c	FUNCTION_114
0x4002514	          0x4989ff	                            mov r15, rdi	      3732	vt.c	FUNCTION_114
0x4002517	            0x4155	                                push r13	      3732	vt.c	FUNCTION_114
0x4002519	            0x4154	                                push r12	      3732	vt.c	FUNCTION_114
0x400251b	          0x4189d5	                           mov r13d, edx	      3732	vt.c	FUNCTION_114
0x400251e	              0x55	                                push rbp	      3732	vt.c	FUNCTION_114
0x400251f	              0x53	                                push rbx	      3732	vt.c	FUNCTION_114
0x4002520	          0x4189f4	                           mov r12d, esi	      3732	vt.c	FUNCTION_114
0x4002523	          0x4189ce	                           mov r14d, ecx	      3732	vt.c	FUNCTION_114
0x4002526	          0x488b2f	                    mov rbp, qword [rdi]	      3576	vt.c	FUNCTION_111
0x4002529	      0xe800000000	                          call 0x400252e	      3581	vt.c	FUNCTION_111	CALL_1
0x400252e	            0x85c0	                           test eax, eax	      3581	vt.c	FUNCTION_111	CALL_1
0x4002530	            0x750e	                           jne 0x4002540	      3581	vt.c	FUNCTION_111	CALL_1
0x4002532	    0x8b0d00000000	            mov ecx, dword [0x04002538] 	      3581	vt.c	FUNCTION_111	CALL_1
0x4002538	            0x85c9	                           test ecx, ecx	      3581	vt.c	FUNCTION_111	CALL_1
0x400253a	     0xf84e6000000	                            je 0x4002626	      3581	vt.c	FUNCTION_111	CALL_1
0x4002540	          0x4889ef	                            mov rdi, rbp	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x4002543	      0xe800000000	                          call 0x4002548	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x4002548	            0x84c0	                             test al, al	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x400254a	     0xf84fe000000	                            je 0x400264e	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x4002550	    0x48c7c3000000	                              mov rbx, 0	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x4002557	    0x48c7c2000000	                              mov rdx, 0	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x400255e	          0x4889d8	                            mov rax, rbx	      3583	vt.c	FUNCTION_111	IF_1	CALL_2
0x4002561	          0x4c3b38	                    cmp r15, qword [rax]	      3590	vt.c	FUNCTION_111	FOR_1	IF_2
0x4002564	     0xf8494000000	                            je 0x40025fe	      3590	vt.c	FUNCTION_111	FOR_1	IF_2
0x400256a	        0x4883c028	                           add rax, 0x28	      3590	vt.c	FUNCTION_111	FOR_1	IF_2
0x400256e	          0x4839c2	                            cmp rdx, rax	      3586	vt.c	FUNCTION_111	FOR_1
0x4002571	            0x75ee	                           jne 0x4002561	      3586	vt.c	FUNCTION_111	FOR_1
0x4002573	        0x498b4708	                mov rax, qword [r15 + 8]	      3596	vt.c	FUNCTION_111	CALL_3
0x4002577	      0xe800000000	                          call 0x400257c	      3596	vt.c	FUNCTION_111	CALL_3
0x400257c	          0x4885c0	                           test rax, rax	      3597	vt.c	FUNCTION_111	IF_3
0x400257f	     0xf84c2000000	                            je 0x4002647	      3597	vt.c	FUNCTION_111	IF_3
0x4002585	            0x31d2	                            xor edx, edx	      3597	vt.c	FUNCTION_111	IF_3
0x4002587	            0xeb10	                           jmp 0x4002599	      3597	vt.c	FUNCTION_111	IF_3
0x4002589	          0x83c201	                              add edx, 1	      3604	vt.c	FUNCTION_111	FOR_2
0x400258c	        0x4883c328	                           add rbx, 0x28	      3604	vt.c	FUNCTION_111	FOR_2
0x4002590	          0x83fa10	                           cmp edx, 0x10	      3604	vt.c	FUNCTION_111	FOR_2
0x4002593	     0xf8494000000	                            je 0x400262d	      3604	vt.c	FUNCTION_111	FOR_2
0x4002599	        0x48833b00	                      cmp qword [rbx], 0	      3607	vt.c	FUNCTION_111	FOR_2	IF_4
0x400259d	            0x75ea	                           jne 0x4002589	      3607	vt.c	FUNCTION_111	FOR_2	IF_4
0x400259f	        0xf6432408	               test byte [rbx + 0x24], 8	      3607	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025a3	            0x75e4	                           jne 0x4002589	      3607	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025a5	          0x4863ca	                         movsxd rcx, edx	      3605	vt.c	FUNCTION_111	FOR_2
0x40025a8	    0x488b3d000000	            mov rdi, qword [0x040025af] 	      3625	vt.c	FUNCTION_111	CALL_4
0x40025af	            0x31f6	                            xor esi, esi	      3625	vt.c	FUNCTION_111	CALL_4
0x40025b1	        0x488d0c89	                  lea rcx, [rcx + rcx*4]	      3605	vt.c	FUNCTION_111	FOR_2
0x40025b5	    0x49c7c1000000	                               mov r9, 0	      3625	vt.c	FUNCTION_111	CALL_4
0x40025bc	    0x49c7c0000000	                               mov r8, 0	      3625	vt.c	FUNCTION_111	CALL_4
0x40025c3	    0x488d1ccd0000	                        lea rbx, [rcx*8]	      3605	vt.c	FUNCTION_111	FOR_2
0x40025cb	          0x895318	             mov dword [rbx + 0x18], edx	      3611	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025ce	          0x4c893b	                    mov qword [rbx], r15	      3609	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025d1	          0x4889d9	                            mov rcx, rbx	      3625	vt.c	FUNCTION_111	CALL_4
0x40025d4	        0x48894308	                mov qword [rbx + 8], rax	      3610	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025d8	    0xc74324030000	               mov dword [rbx + 0x24], 3	      3612	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025df	        0x4489631c	            mov dword [rbx + 0x1c], r12d	      3614	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025e3	        0x44896b20	            mov dword [rbx + 0x20], r13d	      3615	vt.c	FUNCTION_111	FOR_2	IF_4
0x40025e7	              0x52	                                push rdx	      3625	vt.c	FUNCTION_111	CALL_4
0x40025e8	      0xe800000000	                          call 0x40025ed	      3625	vt.c	FUNCTION_111	CALL_4
0x40025ed	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	      3629	vt.c	FUNCTION_111	IF_6	CALL_6
0x40025f3	        0x48894310	             mov qword [rbx + 0x10], rax	      3624	vt.c	FUNCTION_111
0x40025f7	              0x5a	                                 pop rdx	      3629	vt.c	FUNCTION_111	IF_6	CALL_6
0x40025f8	            0x775b	                            ja 0x4002655	      3629	vt.c	FUNCTION_111	IF_6	CALL_6
0x40025fa	        0x834b2404	                or dword [rbx + 0x24], 4	      3454	vt.c	FUNCTION_106
0x40025fe	          0x4889ef	                            mov rdi, rbp	      3638	vt.c	FUNCTION_111	CALL_10
0x4002601	            0x31db	                            xor ebx, ebx	      3744	vt.c	FUNCTION_114	CALL_2
0x4002603	      0xe800000000	                          call 0x4002608	      3638	vt.c	FUNCTION_111	CALL_10
0x4002608	          0x4489f1	                           mov ecx, r14d	      3744	vt.c	FUNCTION_114	CALL_2
0x400260b	          0x4489ea	                           mov edx, r13d	      3744	vt.c	FUNCTION_114	CALL_2
0x400260e	          0x4489e6	                           mov esi, r12d	      3744	vt.c	FUNCTION_114	CALL_2
0x4002611	          0x4c89ff	                            mov rdi, r15	      3744	vt.c	FUNCTION_114	CALL_2
0x4002614	      0xe837f9ffff	             call sym.do_bind_con_driver	      3744	vt.c	FUNCTION_114	CALL_2
0x4002619	            0x89d8	                            mov eax, ebx	      3747	vt.c	FUNCTION_114
0x400261b	              0x5b	                                 pop rbx	      3747	vt.c	FUNCTION_114
0x400261c	              0x5d	                                 pop rbp	      3747	vt.c	FUNCTION_114
0x400261d	            0x415c	                                 pop r12	      3747	vt.c	FUNCTION_114
0x400261f	            0x415d	                                 pop r13	      3747	vt.c	FUNCTION_114
0x4002621	            0x415e	                                 pop r14	      3747	vt.c	FUNCTION_114
0x4002623	            0x415f	                                 pop r15	      3747	vt.c	FUNCTION_114
0x4002625	              0xc3	                                     ret	      3747	vt.c	FUNCTION_114
0x4002626	             0xf0b	                                     ud2	      3747	vt.c	FUNCTION_114
0x4002628	      0xe913ffffff	                           jmp 0x4002540	      3581	vt.c	FUNCTION_111	CALL_1
0x400262d	      0xbbeaffffff	                     mov ebx, 0xffffffea	      3602	vt.c	FUNCTION_111
0x4002632	          0x4889ef	                            mov rdi, rbp	      3638	vt.c	FUNCTION_111	CALL_10
0x4002635	      0xe800000000	                          call 0x400263a	      3638	vt.c	FUNCTION_111	CALL_10
0x400263a	            0x89d8	                            mov eax, ebx	      3747	vt.c	FUNCTION_114
0x400263c	              0x5b	                                 pop rbx	      3747	vt.c	FUNCTION_114
0x400263d	              0x5d	                                 pop rbp	      3747	vt.c	FUNCTION_114
0x400263e	            0x415c	                                 pop r12	      3747	vt.c	FUNCTION_114
0x4002640	            0x415d	                                 pop r13	      3747	vt.c	FUNCTION_114
0x4002642	            0x415e	                                 pop r14	      3747	vt.c	FUNCTION_114
0x4002644	            0x415f	                                 pop r15	      3747	vt.c	FUNCTION_114
0x4002646	              0xc3	                                     ret	      3747	vt.c	FUNCTION_114
0x4002647	      0xbbedffffff	                     mov ebx, 0xffffffed	      3598	vt.c	FUNCTION_111	IF_3
0x400264c	            0xebe4	                           jmp 0x4002632	      3598	vt.c	FUNCTION_111	IF_3
0x400264e	      0xbbedffffff	                     mov ebx, 0xffffffed	      3584	vt.c	FUNCTION_111	IF_1
0x4002653	            0xebc4	                           jmp 0x4002619	      3584	vt.c	FUNCTION_111	IF_1
0x4002655	        0x488b7308	                mov rsi, qword [rbx + 8]	      3630	vt.c	FUNCTION_111	IF_6	CALL_7
0x4002659	          0x4889c2	                            mov rdx, rax	      3630	vt.c	FUNCTION_111	IF_6	CALL_7
0x400265c	    0x48c7c7000000	                              mov rdi, 0	      3630	vt.c	FUNCTION_111	IF_6	CALL_7
0x4002663	      0xe800000000	                          call 0x4002668	      3630	vt.c	FUNCTION_111	IF_6	CALL_7
0x4002668	    0x48c743100000	               mov qword [rbx + 0x10], 0	      3632	vt.c	FUNCTION_111	IF_6
0x4002670	            0xeb8c	                           jmp 0x40025fe	      3632	vt.c	FUNCTION_111	IF_6
vc_resize	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	6
0x4001ef0	          0x4889f8	                            mov rax, rdi	       974	vt.c	FUNCTION_33
0x4001ef3	    0x488bbf880000	            mov rdi, qword [rdi + 0x88] 	       975	vt.c	FUNCTION_33	CALL_1
0x4001efa	            0x89d1	                            mov ecx, edx	       975	vt.c	FUNCTION_33	CALL_1
0x4001efc	            0x89f2	                            mov edx, esi	       975	vt.c	FUNCTION_33	CALL_1
0x4001efe	          0x4889c6	                            mov rsi, rax	       975	vt.c	FUNCTION_33	CALL_1
0x4001f01	      0xe90afbffff	                    jmp sym.vc_do_resize	       975	vt.c	FUNCTION_33	CALL_1
con_unthrottle	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	6
0x4000d70	    0x488bbf600200	           mov rdi, qword [rdi + 0x260] 	      2824	vt.c	FUNCTION_85	CALL_1
0x4000d77	            0x31c9	                            xor ecx, ecx	      2824	vt.c	FUNCTION_85	CALL_1
0x4000d79	      0xba01000000	                              mov edx, 1	      2824	vt.c	FUNCTION_85	CALL_1
0x4000d7e	      0xbe01000000	                              mov esi, 1	      2824	vt.c	FUNCTION_85	CALL_1
0x4000d83	    0x4881c7600200	                          add rdi, 0x260	      2824	vt.c	FUNCTION_85	CALL_1
0x4000d8a	      0xe900000000	                           jmp 0x4000d8f	      2824	vt.c	FUNCTION_85	CALL_1
gotoxy	ELSE,5:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,0:SWITCH,0	40
0x40002b0	            0x85f6	                           test esi, esi	      1072	vt.c	FUNCTION_36	IF_1
0x40002b2	     0xf8880000000	                            js 0x4000338	      1072	vt.c	FUNCTION_36	IF_1
0x40002b8	    0x8b8764010000	           mov eax, dword [rdi + 0x164] 	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002be	            0x39f0	                            cmp eax, esi	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c0	            0x764b	                           jbe 0x400030d	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c2	    0x89b7bc010000	            mov dword [rdi + 0x1bc], esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002c8	             0x1f6	                            add esi, esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002ca	    0xf68778020000	          test byte [rdi + 0x278], 0x20 	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d1	            0x744f	                            je 0x4000322	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d3	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	      1082	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d9	    0x8b8f94010000	           mov ecx, dword [rdi + 0x194] 	      1083	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002df	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x40002e1	            0x7f4b	                            jg 0x400032e	      1088	vt.c	FUNCTION_36	IF_4
0x40002e3	            0x39d1	                            cmp ecx, edx	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e5	            0x7e5f	                           jle 0x4000346	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e7	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1093	vt.c	FUNCTION_36	ELSE_5
0x40002ed	     0xfaf976c0100	           imul edx, dword [rdi + 0x16c]	      1094	vt.c	FUNCTION_36
0x40002f4	    0x4803b7780100	            add rsi, qword [rdi + 0x178]	      1094	vt.c	FUNCTION_36
0x40002fb	    0x80a77a020000	            and byte [rdi + 0x27a], 0xbf	      1095	vt.c	FUNCTION_36
0x4000302	          0x4801f2	                            add rdx, rsi	      1094	vt.c	FUNCTION_36
0x4000305	    0x488997d00100	            mov qword [rdi + 0x1d0], rdx	      1094	vt.c	FUNCTION_36
0x400030c	              0xc3	                                     ret	      1095	vt.c	FUNCTION_36
0x400030d	          0x83e801	                              sub eax, 1	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000310	    0xf68778020000	          test byte [rdi + 0x278], 0x20 	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000317	    0x8987bc010000	            mov dword [rdi + 0x1bc], eax	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x400031d	          0x8d3400	                    lea esi, [rax + rax]	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000320	            0x75b1	                           jne 0x40002d3	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000322	            0x31c0	                            xor eax, eax	      1085	vt.c	FUNCTION_36	ELSE_3
0x4000324	    0x8b8f68010000	           mov ecx, dword [rdi + 0x168] 	      1086	vt.c	FUNCTION_36	ELSE_3
0x400032a	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x400032c	            0x7eb5	                           jle 0x40002e3	      1088	vt.c	FUNCTION_36	IF_4
0x400032e	            0x89c2	                            mov edx, eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000330	    0x8987c0010000	            mov dword [rdi + 0x1c0], eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000336	            0xebb5	                           jmp 0x40002ed	      1089	vt.c	FUNCTION_36	IF_4
0x4000338	    0xc787bc010000	              mov dword [rdi + 0x1bc], 0	      1073	vt.c	FUNCTION_36	IF_1
0x4000342	            0x31f6	                            xor esi, esi	      1073	vt.c	FUNCTION_36	IF_1
0x4000344	            0xeb84	                           jmp 0x40002ca	      1073	vt.c	FUNCTION_36	IF_1
0x4000346	          0x8d51ff	                      lea edx, [rcx - 1]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000349	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x400034f	            0xeb9c	                           jmp 0x40002ed	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
complement_pos	ELSE,0:WHILE,0:DO,0:functions,0:IF,4:FOR,0:CALL,9:SWITCH,0	106
0x4003070	              0x55	                                push rbp	       498	vt.c	FUNCTION_16
0x4003071	              0x53	                                push rbx	       498	vt.c	FUNCTION_16
0x4003072	            0x89f5	                            mov ebp, esi	       498	vt.c	FUNCTION_16
0x4003074	          0x4889fb	                            mov rbx, rdi	       498	vt.c	FUNCTION_16
0x4003077	        0x4883ec18	                           sub rsp, 0x18	       498	vt.c	FUNCTION_16
0x400307b	    0x65488b042528	                mov rax, qword gs:[0x28]	       498	vt.c	FUNCTION_16
0x4003084	      0x4889442410	             mov qword [rsp + 0x10], rax	       498	vt.c	FUNCTION_16
0x4003089	            0x31c0	                            xor eax, eax	       498	vt.c	FUNCTION_16
0x400308b	      0xe800000000	                          call 0x4003090	       503	vt.c	FUNCTION_16	CALL_1
0x4003090	            0x85c0	                           test eax, eax	       503	vt.c	FUNCTION_16	CALL_1
0x4003092	            0x750e	                           jne 0x40030a2	       503	vt.c	FUNCTION_16	CALL_1
0x4003094	    0x8b0d00000000	            mov ecx, dword [0x0400309a] 	       503	vt.c	FUNCTION_16	CALL_1
0x400309a	            0x85c9	                           test ecx, ecx	       503	vt.c	FUNCTION_16	CALL_1
0x400309c	     0xf84af000000	                            je 0x4003151	       503	vt.c	FUNCTION_16	CALL_1
0x40030a2	    0x486335000000	         movsxd rsi, dword [0x040030a9] 	       505	vt.c	FUNCTION_16	IF_1
0x40030a9	            0x85f6	                           test esi, esi	       505	vt.c	FUNCTION_16	IF_1
0x40030ab	            0x780c	                            js 0x40030b9	       505	vt.c	FUNCTION_16	IF_1
0x40030ad	    0x39b3a8010000	           cmp dword [rbx + 0x1a8], esi 	       505	vt.c	FUNCTION_16	IF_1
0x40030b3	     0xf879f000000	                            ja 0x4003158	       505	vt.c	FUNCTION_16	IF_1
0x40030b9	            0x85ed	                           test ebp, ebp	       515	vt.c	FUNCTION_16	IF_3
0x40030bb	    0x892d00000000	            mov dword [0x040030c1], ebp 	       513	vt.c	FUNCTION_16
0x40030c1	            0x7808	                            js 0x40030cb	       515	vt.c	FUNCTION_16	IF_3
0x40030c3	    0x39aba8010000	           cmp dword [rbx + 0x1a8], ebp 	       515	vt.c	FUNCTION_16	IF_3
0x40030c9	            0x771b	                            ja 0x40030e6	       515	vt.c	FUNCTION_16	IF_3
0x40030cb	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       530	vt.c	FUNCTION_16
0x40030d0	    0x654833042528	                xor rax, qword gs:[0x28]	       530	vt.c	FUNCTION_16
0x40030d9	     0xf856c010000	                           jne 0x400324b	       530	vt.c	FUNCTION_16
0x40030df	        0x4883c418	                           add rsp, 0x18	       530	vt.c	FUNCTION_16
0x40030e3	              0x5b	                                 pop rbx	       530	vt.c	FUNCTION_16
0x40030e4	              0x5d	                                 pop rbp	       530	vt.c	FUNCTION_16
0x40030e5	              0xc3	                                     ret	       530	vt.c	FUNCTION_16
0x40030e6	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40030ed	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40030f4	          0x4885c0	                           test rax, rax	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40030f7	     0xf84b6000000	                            je 0x40031b3	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40030fd	            0x89ee	                            mov esi, ebp	       301	vt.c	FUNCTION_7	CALL_1
0x40030ff	          0x4889df	                            mov rdi, rbx	       301	vt.c	FUNCTION_7	CALL_1
0x4003102	      0xe800000000	                          call 0x4003107	       301	vt.c	FUNCTION_7	CALL_1
0x4003107	           0xfb730	                   movzx esi, word [rax]	       520	vt.c	FUNCTION_16	IF_3
0x400310a	    0x668935000000	               mov word [0x04003111], si	       520	vt.c	FUNCTION_16	IF_3
0x4003111	    0x6633b3b80100	              xor si, word [rbx + 0x1b8]	       521	vt.c	FUNCTION_16	IF_3
0x4003118	          0x668930	                      mov word [rax], si	       522	vt.c	FUNCTION_16	IF_3
0x400311b	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4003122	          0x483b18	                    cmp rbx, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4003125	     0xf84a3000000	                            je 0x40031ce	       289	vt.c	FUNCTION_6	CALL_1
0x400312b	          0x4889e2	                            mov rdx, rsp	       276	vt.c	FUNCTION_4	CALL_1
0x400312e	      0xbe04000000	                              mov esi, 4	       276	vt.c	FUNCTION_4	CALL_1
0x4003133	    0x48c7c7000000	                              mov rdi, 0	       276	vt.c	FUNCTION_4	CALL_1
0x400313a	        0x48891c24	                    mov qword [rsp], rbx	       275	vt.c	FUNCTION_4
0x400313e	    0x48c744240800	                  mov qword [rsp + 8], 0	       275	vt.c	FUNCTION_4
0x4003147	      0xe800000000	                          call 0x400314c	       276	vt.c	FUNCTION_4	CALL_1
0x400314c	      0xe97affffff	                           jmp 0x40030cb	       530	vt.c	FUNCTION_16
0x4003151	             0xf0b	                                     ud2	       530	vt.c	FUNCTION_16
0x4003153	      0xe94affffff	                           jmp 0x40030a2	       503	vt.c	FUNCTION_16	CALL_1
0x4003158	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x400315f	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4003166	          0x4885c0	                           test rax, rax	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4003169	            0x7457	                            je 0x40031c2	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x400316b	          0x4889df	                            mov rdi, rbx	       301	vt.c	FUNCTION_7	CALL_1
0x400316e	      0xe800000000	                          call 0x4003173	       301	vt.c	FUNCTION_7	CALL_1
0x4003173	     0xfb735000000	           movzx esi, word [0x0400317a] 	       507	vt.c	FUNCTION_16	IF_1	CALL_2
0x400317a	          0x668930	                      mov word [rax], si	       507	vt.c	FUNCTION_16	IF_1	CALL_2
0x400317d	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4003184	          0x483b18	                    cmp rbx, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4003187	     0xf848a000000	                            je 0x4003217	       289	vt.c	FUNCTION_6	CALL_1
0x400318d	          0x4889e2	                            mov rdx, rsp	       276	vt.c	FUNCTION_4	CALL_1
0x4003190	      0xbe04000000	                              mov esi, 4	       276	vt.c	FUNCTION_4	CALL_1
0x4003195	    0x48c7c7000000	                              mov rdi, 0	       276	vt.c	FUNCTION_4	CALL_1
0x400319c	        0x48891c24	                    mov qword [rsp], rbx	       275	vt.c	FUNCTION_4
0x40031a0	    0x48c744240800	                  mov qword [rsp + 8], 0	       275	vt.c	FUNCTION_4
0x40031a9	      0xe800000000	                          call 0x40031ae	       276	vt.c	FUNCTION_4	CALL_1
0x40031ae	      0xe906ffffff	                           jmp 0x40030b9	       276	vt.c	FUNCTION_4	CALL_1
0x40031b3	          0x4863c5	                         movsxd rax, ebp	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031b6	    0x480383880100	            add rax, qword [rbx + 0x188]	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031bd	      0xe945ffffff	                           jmp 0x4003107	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031c2	          0x4889f0	                            mov rax, rsi	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031c5	    0x480383880100	            add rax, qword [rbx + 0x188]	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031cc	            0xeba5	                           jmp 0x4003173	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40031ce	    0x8b0500000000	            mov eax, dword [0x040031d4] 	       289	vt.c	FUNCTION_6	CALL_1
0x40031d4	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x40031d6	     0xf854fffffff	                           jne 0x400312b	       289	vt.c	FUNCTION_6	CALL_1
0x40031dc	            0x89e8	                            mov eax, ebp	       524	vt.c	FUNCTION_16	IF_3	IF_4
0x40031de	            0x31d2	                            xor edx, edx	       524	vt.c	FUNCTION_16	IF_3	IF_4
0x40031e0	           0xfb7f6	                           movzx esi, si	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x40031e3	            0xd1f8	                              sar eax, 1	       524	vt.c	FUNCTION_16	IF_3	IF_4
0x40031e5	          0x4889df	                            mov rdi, rbx	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x40031e8	    0xf7b364010000	                 div dword [rbx + 0x164]	       524	vt.c	FUNCTION_16	IF_3	IF_4
0x40031ee	           0xfb7ca	                           movzx ecx, dx	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x40031f1	    0x668915000000	               mov word [0x040031f8], dx	       524	vt.c	FUNCTION_16	IF_3	IF_4
0x40031f8	    0x668905000000	               mov word [0x040031ff], ax	       525	vt.c	FUNCTION_16	IF_3	IF_4
0x40031ff	           0xfb7d0	                           movzx edx, ax	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x4003202	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x4003209	        0x488b4028	            mov rax, qword [rax + 0x28] 	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x400320d	      0xe800000000	                          call 0x4003212	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x4003212	      0xe914ffffff	                           jmp 0x400312b	       526	vt.c	FUNCTION_16	IF_3	IF_4	CALL_8
0x4003217	    0x8b1500000000	            mov edx, dword [0x0400321d] 	       289	vt.c	FUNCTION_6	CALL_1
0x400321d	            0x85d2	                           test edx, edx	       289	vt.c	FUNCTION_6	CALL_1
0x400321f	     0xf8568ffffff	                           jne 0x400318d	       289	vt.c	FUNCTION_6	CALL_1
0x4003225	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x400322c	     0xfb70d000000	           movzx ecx, word [0x04003233] 	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x4003233	          0x4889df	                            mov rdi, rbx	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x4003236	     0xfb715000000	           movzx edx, word [0x0400323d] 	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x400323d	        0x488b4028	            mov rax, qword [rax + 0x28] 	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x4003241	      0xe800000000	                          call 0x4003246	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x4003246	      0xe942ffffff	                           jmp 0x400318d	       509	vt.c	FUNCTION_16	IF_1	CALL_4
0x400324b	      0xe800000000	        call sym.clear_buffer_attributes	       530	vt.c	FUNCTION_16
con_chars_in_buffer	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	2
0x40004a0	            0x31c0	                            xor eax, eax	      2809	vt.c	FUNCTION_83
0x40004a2	              0xc3	                                     ret	      2809	vt.c	FUNCTION_83
rgb_background	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,0:SWITCH,0	20
0x4000400	           0xfb606	                   movzx eax, byte [rsi]	      1298	vt.c	FUNCTION_51
0x4000403	         0xfb65601	               movzx edx, byte [rsi + 1]	      1298	vt.c	FUNCTION_51
0x4000407	          0x83e080	                     and eax, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040a	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040d	           0xfb6c0	                           movzx eax, al	      1298	vt.c	FUNCTION_51
0x4000410	            0xd1f8	                              sar eax, 1	      1298	vt.c	FUNCTION_51
0x4000412	            0x89c1	                            mov ecx, eax	      1298	vt.c	FUNCTION_51
0x4000414	           0xfb6c2	                           movzx eax, dl	      1298	vt.c	FUNCTION_51
0x4000417	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1298	vt.c	FUNCTION_51
0x400041e	          0xc1f802	                              sar eax, 2	      1298	vt.c	FUNCTION_51
0x4000421	             0x9c8	                             or eax, ecx	      1298	vt.c	FUNCTION_51
0x4000423	          0x83e20f	                            and edx, 0xf	      1298	vt.c	FUNCTION_51
0x4000426	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000428	         0xfb65602	               movzx edx, byte [rsi + 2]	      1298	vt.c	FUNCTION_51
0x400042c	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400042f	           0xfb6d2	                           movzx edx, dl	      1298	vt.c	FUNCTION_51
0x4000432	          0xc1fa03	                              sar edx, 3	      1298	vt.c	FUNCTION_51
0x4000435	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000437	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1298	vt.c	FUNCTION_51
0x400043d	              0xc3	                                     ret	      1298	vt.c	FUNCTION_51
reset_palette	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,1:CALL,1:SWITCH,0	13
0x4003dc0	    0x488d97a40200	                  lea rdx, [rdi + 0x2a4]	      4036	vt.c	FUNCTION_126
0x4003dc7	            0x31c0	                            xor eax, eax	      4036	vt.c	FUNCTION_126
0x4003dc9	     0xfb688000000	                   movzx ecx, byte [rax]	      4039	vt.c	FUNCTION_126	FOR_1
0x4003dd0	        0x4883c203	                              add rdx, 3	      4039	vt.c	FUNCTION_126	FOR_1
0x4003dd4	          0x884afd	                  mov byte [rdx - 3], cl	      4039	vt.c	FUNCTION_126	FOR_1
0x4003dd7	     0xfb688000000	                   movzx ecx, byte [rax]	      4040	vt.c	FUNCTION_126	FOR_1
0x4003dde	          0x884afe	                  mov byte [rdx - 2], cl	      4040	vt.c	FUNCTION_126	FOR_1
0x4003de1	     0xfb688000000	                   movzx ecx, byte [rax]	      4041	vt.c	FUNCTION_126	FOR_1
0x4003de8	        0x4883c001	                              add rax, 1	      4041	vt.c	FUNCTION_126	FOR_1
0x4003dec	          0x884aff	                  mov byte [rdx - 1], cl	      4041	vt.c	FUNCTION_126	FOR_1
0x4003def	        0x4883f810	                           cmp rax, 0x10	      4038	vt.c	FUNCTION_126	FOR_1
0x4003df3	            0x75d4	                           jne 0x4003dc9	      4038	vt.c	FUNCTION_126	FOR_1
0x4003df5	      0xe936cbffff	                     jmp sym.set_palette	      4043	vt.c	FUNCTION_126	CALL_1
show_bind	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,3:SWITCH,0	19
0x4000e70	    0x488b87980000	            mov rax, qword [rdi + 0x98] 	      3425	vt.c	FUNCTION_104	CALL_2
0x4000e77	          0x4989d0	                             mov r8, rdx	      3423	vt.c	FUNCTION_104
0x4000e7a	          0x488b10	                    mov rdx, qword [rax]	      3425	vt.c	FUNCTION_104	CALL_2
0x4000e7d	    0x48c7c0000000	                              mov rax, 0	      3425	vt.c	FUNCTION_104	CALL_2
0x4000e84	            0xeb0c	                           jmp 0x4000e92	      3425	vt.c	FUNCTION_104	CALL_2
0x4000e86	        0x4883c008	                              add rax, 8	      3425	vt.c	FUNCTION_104	CALL_2
0x4000e8a	    0x483d00000000	                              cmp rax, 0	      3476	vt.c	FUNCTION_108	FOR_1
0x4000e90	            0x7421	                            je 0x4000eb3	      3476	vt.c	FUNCTION_108	FOR_1
0x4000e92	          0x483910	                    cmp qword [rax], rdx	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x4000e95	            0x75ef	                           jne 0x4000e86	      3477	vt.c	FUNCTION_108	FOR_1	IF_1
0x4000e97	      0xb901000000	                              mov ecx, 1	      3478	vt.c	FUNCTION_108	FOR_1	IF_1
0x4000e9c	    0x48c7c2000000	                              mov rdx, 0	      3427	vt.c	FUNCTION_104	CALL_3
0x4000ea3	      0xbe00100000	                         mov esi, 0x1000	      3427	vt.c	FUNCTION_104	CALL_3
0x4000ea8	          0x4c89c7	                             mov rdi, r8	      3427	vt.c	FUNCTION_104	CALL_3
0x4000eab	      0xe800000000	                          call 0x4000eb0	      3427	vt.c	FUNCTION_104	CALL_3
0x4000eb0	            0x4898	                                    cdqe	      3427	vt.c	FUNCTION_104	CALL_3
0x4000eb2	              0xc3	                                     ret	      3428	vt.c	FUNCTION_104
0x4000eb3	            0x31c9	                            xor ecx, ecx	      3474	vt.c	FUNCTION_108
0x4000eb5	            0xebe5	                           jmp 0x4000e9c	      3474	vt.c	FUNCTION_108
visual_init	ELSE,0:WHILE,0:DO,0:functions,0:IF,4:FOR,0:CALL,4:SWITCH,0	64
0x4000980	            0x4154	                                push r12	       726	vt.c	FUNCTION_29
0x4000982	              0x55	                                push rbp	       726	vt.c	FUNCTION_29
0x4000983	          0x4189d4	                           mov r12d, edx	       726	vt.c	FUNCTION_29
0x4000986	              0x53	                                push rbx	       726	vt.c	FUNCTION_29
0x4000987	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       728	vt.c	FUNCTION_29	IF_1
0x400098e	          0x4889fb	                            mov rbx, rdi	       726	vt.c	FUNCTION_29
0x4000991	            0x89f5	                            mov ebp, esi	       726	vt.c	FUNCTION_29
0x4000993	          0x4885c0	                           test rax, rax	       728	vt.c	FUNCTION_29	IF_1
0x4000996	            0x7408	                            je 0x40009a0	       728	vt.c	FUNCTION_29	IF_1
0x4000998	          0x488b38	                    mov rdi, qword [rax]	       729	vt.c	FUNCTION_29	CALL_1
0x400099b	      0xe800000000	                          call 0x40009a0	       729	vt.c	FUNCTION_29	CALL_1
0x40009a0	    0x488b15000000	            mov rdx, qword [0x040009a7] 	       730	vt.c	FUNCTION_29
0x40009a7	          0x4863c5	                         movsxd rax, ebp	       732	vt.c	FUNCTION_29	IF_2
0x40009aa	    0x488993980100	            mov qword [rbx + 0x198], rdx	       730	vt.c	FUNCTION_29
0x40009b1	    0x488b04c50000	                  mov rax, qword [rax*8]	       732	vt.c	FUNCTION_29	IF_2
0x40009b9	          0x4885c0	                           test rax, rax	       732	vt.c	FUNCTION_29	IF_2
0x40009bc	     0xf84de000000	                            je 0x4000aa0	       732	vt.c	FUNCTION_29	IF_2
0x40009c2	    0x488983980100	            mov qword [rbx + 0x198], rax	       733	vt.c	FUNCTION_29	IF_2
0x40009c9	          0x488b38	                    mov rdi, qword [rax]	       735	vt.c	FUNCTION_29	CALL_2
0x40009cc	      0xe800000000	                          call 0x40009d1	       735	vt.c	FUNCTION_29	CALL_2
0x40009d1	    0x4883bb080300	              cmp qword [rbx + 0x308], 0	       738	vt.c	FUNCTION_29	IF_3
0x40009d9	    0x6689ab600100	              mov word [rbx + 0x160], bp	       736	vt.c	FUNCTION_29
0x40009e0	    0x48c783f80200	              mov qword [rbx + 0x2f8], 0	       737	vt.c	FUNCTION_29
0x40009eb	            0x7408	                            je 0x40009f5	       738	vt.c	FUNCTION_29	IF_3
0x40009ed	          0x4889df	                            mov rdi, rbx	       739	vt.c	FUNCTION_29	CALL_3
0x40009f0	      0xe800000000	                          call 0x40009f5	       739	vt.c	FUNCTION_29	CALL_3
0x40009f5	    0x488d83000300	                  lea rax, [rbx + 0x300]	       740	vt.c	FUNCTION_29
0x40009fc	            0x31d2	                            xor edx, edx	       743	vt.c	FUNCTION_29
0x40009fe	    0x80a37a020000	            and byte [rbx + 0x27a], 0x7f	       744	vt.c	FUNCTION_29
0x4000a05	      0xb9c8000000	                           mov ecx, 0xc8	       746	vt.c	FUNCTION_29
0x4000a0a	    0x48c783000300	              mov qword [rbx + 0x300], 0	       741	vt.c	FUNCTION_29
0x4000a15	    0x668993b80100	              mov word [rbx + 0x1b8], dx	       743	vt.c	FUNCTION_29
0x4000a1c	    0x488983080300	            mov qword [rbx + 0x308], rax	       740	vt.c	FUNCTION_29
0x4000a23	            0x31c0	                            xor eax, eax	       742	vt.c	FUNCTION_29
0x4000a25	    0xc68310030000	               mov byte [rbx + 0x310], 0	       745	vt.c	FUNCTION_29
0x4000a2c	    0x668983d80100	              mov word [rbx + 0x1d8], ax	       742	vt.c	FUNCTION_29
0x4000a33	          0x4489e6	                           mov esi, r12d	       747	vt.c	FUNCTION_29	CALL_4
0x4000a36	          0x4889df	                            mov rdi, rbx	       747	vt.c	FUNCTION_29	CALL_4
0x4000a39	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       747	vt.c	FUNCTION_29	CALL_4
0x4000a40	    0x66898bf00200	              mov word [rbx + 0x2f0], cx	       746	vt.c	FUNCTION_29
0x4000a47	        0x488b4010	            mov rax, qword [rax + 0x10] 	       747	vt.c	FUNCTION_29	CALL_4
0x4000a4b	      0xe800000000	                          call 0x4000a50	       747	vt.c	FUNCTION_29	CALL_4
0x4000a50	     0xfb783b80100	          movzx eax, word [rbx + 0x1b8] 	       748	vt.c	FUNCTION_29	IF_4
0x4000a57	          0x6685c0	                             test ax, ax	       748	vt.c	FUNCTION_29	IF_4
0x4000a5a	            0x751d	                           jne 0x4000a79	       748	vt.c	FUNCTION_29	IF_4
0x4000a5c	     0xfb6837a0200	          movzx eax, byte [rbx + 0x27a] 	       749	vt.c	FUNCTION_29	IF_4
0x4000a63	          0x83e080	                     and eax, 0xffffff80	       749	vt.c	FUNCTION_29	IF_4
0x4000a66	            0x3c01	                               cmp al, 1	       749	vt.c	FUNCTION_29	IF_4
0x4000a68	            0x19c0	                            sbb eax, eax	       749	vt.c	FUNCTION_29	IF_4
0x4000a6a	        0x66250091	                          and ax, 0x9100	       749	vt.c	FUNCTION_29	IF_4
0x4000a6e	        0x66050077	                          add ax, 0x7700	       749	vt.c	FUNCTION_29	IF_4
0x4000a72	    0x668983b80100	              mov word [rbx + 0x1b8], ax	       749	vt.c	FUNCTION_29	IF_4
0x4000a79	    0x668983ba0100	              mov word [rbx + 0x1ba], ax	       750	vt.c	FUNCTION_29
0x4000a80	    0x8b8364010000	           mov eax, dword [rbx + 0x164] 	       751	vt.c	FUNCTION_29
0x4000a86	             0x1c0	                            add eax, eax	       751	vt.c	FUNCTION_29
0x4000a88	    0x89836c010000	            mov dword [rbx + 0x16c], eax	       751	vt.c	FUNCTION_29
0x4000a8e	     0xfaf83680100	           imul eax, dword [rbx + 0x168]	       752	vt.c	FUNCTION_29
0x4000a95	    0x8983a8010000	            mov dword [rbx + 0x1a8], eax	       752	vt.c	FUNCTION_29
0x4000a9b	              0x5b	                                 pop rbx	       753	vt.c	FUNCTION_29
0x4000a9c	              0x5d	                                 pop rbp	       753	vt.c	FUNCTION_29
0x4000a9d	            0x415c	                                 pop r12	       753	vt.c	FUNCTION_29
0x4000a9f	              0xc3	                                     ret	       753	vt.c	FUNCTION_29
0x4000aa0	          0x4889d0	                            mov rax, rdx	       753	vt.c	FUNCTION_29
0x4000aa3	      0xe921ffffff	                           jmp 0x40009c9	       753	vt.c	FUNCTION_29
con_init	ELSE,0:WHILE,0:DO,0:functions,0:IF,4:FOR,3:CALL,17:SWITCH,0	150
0x40000f5	            0x74d9	                            je 0x40000d0	       363	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2
0x40000f7	          0x4939df	                            cmp r15, rbx	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fa	            0x89c2	                            mov edx, eax	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fc	            0x73cc	                           jae 0x40000ca	       364	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	IF_3
0x40000fe	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000105	          0x4889da	                            mov rdx, rbx	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000108	          0x4489e1	                           mov ecx, r12d	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010b	          0x4c29fa	                            sub rdx, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400010e	          0x4c89fe	                            mov rsi, r15	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000111	          0x4c89ef	                            mov rdi, r13	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000114	          0x48d1fa	                              sar rdx, 1	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000117	        0x488b4030	            mov rax, qword [rax + 0x30] 	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x400011b	      0xe800000000	                          call 0x4000120	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000120	           0xfb713	                   movzx edx, word [rbx]	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000123	            0x30d2	                              xor dl, dl	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000125	            0xeba3	                           jmp 0x40000ca	       365	vt.c	FUNCTION_11	FOR_1	WHILE_1	IF_2	CALL_2
0x4000127	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012a	            0x725c	                            jb 0x4000188	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x400012c	          0x4585f6	                         test r14d, r14d	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x400012f	            0x747b	                            je 0x40001ac	       376	vt.c	FUNCTION_11	FOR_1	IF_5
0x4000131	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000138	        0x4183c401	                             add r12d, 1	       379	vt.c	FUNCTION_11	FOR_1
0x400013c	          0x4989df	                            mov r15, rbx	       379	vt.c	FUNCTION_11	FOR_1
0x400013f	    0x488b80b80000	            mov rax, qword [rax + 0xb8] 	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000146	          0x4885c0	                           test rax, rax	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x4000149	            0x7417	                            je 0x4000162	       380	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014b	        0x4c8b3c24	                    mov r15, qword [rsp]	       381	vt.c	FUNCTION_11	FOR_1	IF_6
0x400014f	            0x31c9	                            xor ecx, ecx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000151	            0x31d2	                            xor edx, edx	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000153	          0x4c89ef	                            mov rdi, r13	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000156	          0x4c89fe	                            mov rsi, r15	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000159	      0xe800000000	                          call 0x400015e	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x400015e	        0x48890424	                    mov qword [rsp], rax	       382	vt.c	FUNCTION_11	FOR_1	IF_6	CALL_4
0x4000162	        0x410fb707	                   movzx eax, word [r15]	       359	vt.c	FUNCTION_11	FOR_1
0x4000166	    0x418b8d640100	           mov ecx, dword [r13 + 0x164] 	       359	vt.c	FUNCTION_11	FOR_1
0x400016d	            0x31ed	                            xor ebp, ebp	       359	vt.c	FUNCTION_11	FOR_1
0x400016f	          0x4189e8	                            mov r8d, ebp	       360	vt.c	FUNCTION_11	FOR_1
0x4000172	            0x89c2	                            mov edx, eax	       359	vt.c	FUNCTION_11	FOR_1
0x4000174	            0x30d2	                              xor dl, dl	       359	vt.c	FUNCTION_11	FOR_1
0x4000176	            0x39cd	                            cmp ebp, ecx	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000178	     0xf823effffff	                            jb 0x40000bc	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x400017e	          0x4c89fb	                            mov rbx, r15	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000181	            0xeba9	                           jmp 0x400012c	       362	vt.c	FUNCTION_11	FOR_1	WHILE_1
0x4000183	          0x4939df	                            cmp r15, rbx	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000186	            0x7324	                           jae 0x40001ac	       374	vt.c	FUNCTION_11	FOR_1	IF_4
0x4000188	    0x498b85980100	           mov rax, qword [r13 + 0x198] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400018f	          0x4889da	                            mov rdx, rbx	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000192	          0x4489e1	                           mov ecx, r12d	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000195	          0x4c29fa	                            sub rdx, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x4000198	          0x4c89fe	                            mov rsi, r15	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019b	          0x4c89ef	                            mov rdi, r13	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x400019e	          0x48d1fa	                              sar rdx, 1	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a1	        0x488b4030	            mov rax, qword [rax + 0x30] 	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001a5	      0xe800000000	                          call 0x40001aa	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001aa	            0xeb80	                           jmp 0x400012c	       375	vt.c	FUNCTION_11	FOR_1	CALL_3
0x40001ac	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       385	vt.c	FUNCTION_11
0x40001b1	    0x654833042528	                xor rax, qword gs:[0x28]	       385	vt.c	FUNCTION_11
0x40001ba	            0x7530	                           jne 0x40001ec	       385	vt.c	FUNCTION_11
0x40001bc	        0x4883c418	                           add rsp, 0x18	       385	vt.c	FUNCTION_11
0x40001c0	              0x5b	                                 pop rbx	       385	vt.c	FUNCTION_11
0x40001c1	              0x5d	                                 pop rbp	       385	vt.c	FUNCTION_11
0x40001c2	            0x415c	                                 pop r12	       385	vt.c	FUNCTION_11
0x40001c4	            0x415d	                                 pop r13	       385	vt.c	FUNCTION_11
0x40001c6	            0x415e	                                 pop r14	       385	vt.c	FUNCTION_11
0x40001c8	            0x415f	                                 pop r15	       385	vt.c	FUNCTION_11
0x40001ca	              0xc3	                                     ret	       385	vt.c	FUNCTION_11
0x40001cb	          0x4889f0	                            mov rax, rsi	       350	vt.c	FUNCTION_11	IF_1
0x40001ce	    0x482b87780100	            sub rax, qword [rdi + 0x178]	       350	vt.c	FUNCTION_11	IF_1
0x40001d5	    0x8b8f64010000	           mov ecx, dword [rdi + 0x164] 	       351	vt.c	FUNCTION_11	IF_1
0x40001db	            0x31d2	                            xor edx, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001dd	          0x48d1e8	                              shr rax, 1	       350	vt.c	FUNCTION_11	IF_1
0x40001e0	            0xf7f1	                                 div ecx	       352	vt.c	FUNCTION_11	IF_1
0x40001e2	            0x89d5	                            mov ebp, edx	       352	vt.c	FUNCTION_11	IF_1
0x40001e4	          0x4189c4	                           mov r12d, eax	       352	vt.c	FUNCTION_11	IF_1
0x40001e7	      0xe9bdfeffff	                           jmp 0x40000a9	       352	vt.c	FUNCTION_11	IF_1
0x40001ec	      0xe800000000	                          call 0x40001f1	       385	vt.c	FUNCTION_11
0x40001f1	       0xf1f440000	                   nop dword [rax + rax]	       385	vt.c	FUNCTION_11
0x40001f6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       385	vt.c	FUNCTION_11
0x4000200	    0x8b87b4010000	           mov eax, dword [rdi + 0x1b4] 	       562	vt.c	FUNCTION_19
0x4000206	            0xa810	                           test al, 0x10	       564	vt.c	FUNCTION_19	IF_1
0x4000208	            0x7409	                            je 0x4000213	       564	vt.c	FUNCTION_19	IF_1
0x400020a	    0x833d00000000	cmp dword [0x04000211], 0xffffffffffffffff	       565	vt.c	FUNCTION_19	IF_2
0x4000211	            0x7402	                            je 0x4000215	       565	vt.c	FUNCTION_19	IF_2
0x4000213	            0xf3c3	                                     ret	       565	vt.c	FUNCTION_19	IF_2
0x4000215	    0x488b8fd00100	           mov rcx, qword [rdi + 0x1d0] 	       561	vt.c	FUNCTION_19
0x400021c	            0x89c6	                            mov esi, eax	       568	vt.c	FUNCTION_19
0x400021e	          0x4189c0	                            mov r8d, eax	       568	vt.c	FUNCTION_19
0x4000221	          0xc1ee08	                              shr esi, 8	       568	vt.c	FUNCTION_19
0x4000224	    0x4181e000ff00	                         and r8d, 0xff00	       568	vt.c	FUNCTION_19
0x400022b	    0x81e600ff0000	                         and esi, 0xff00	       568	vt.c	FUNCTION_19
0x4000231	           0xfb711	                   movzx edx, word [rcx]	       561	vt.c	FUNCTION_19
0x4000234	             0x9d6	                             or esi, edx	       568	vt.c	FUNCTION_19
0x4000236	    0x891500000000	            mov dword [0x0400023c], edx 	       566	vt.c	FUNCTION_19
0x400023c	          0x4431c6	                            xor esi, r8d	       568	vt.c	FUNCTION_19
0x400023f	            0xa820	                           test al, 0x20	       569	vt.c	FUNCTION_19	IF_3
0x4000241	            0x7413	                            je 0x4000256	       569	vt.c	FUNCTION_19	IF_3
0x4000243	            0x31f2	                            xor edx, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000245	          0x4189f0	                            mov r8d, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000248	    0x4181f0007000	                         xor r8d, 0x7000	       569	vt.c	FUNCTION_19	IF_3
0x400024f	          0x80e670	                            and dh, 0x70	       569	vt.c	FUNCTION_19	IF_3
0x4000252	        0x410f44f0	                          cmove esi, r8d	       569	vt.c	FUNCTION_19	IF_3
0x4000256	            0xa840	                           test al, 0x40	       570	vt.c	FUNCTION_19	IF_4
0x4000258	            0x741f	                            je 0x4000279	       570	vt.c	FUNCTION_19	IF_4
0x400025a	            0x89f0	                            mov eax, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025c	          0x4189f0	                            mov r8d, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025f	            0x89f2	                            mov edx, esi	       570	vt.c	FUNCTION_19	IF_4
0x4000261	      0x2500700000	                         and eax, 0x7000	       570	vt.c	FUNCTION_19	IF_4
0x4000266	    0x4181e0000700	                          and r8d, 0x700	       570	vt.c	FUNCTION_19	IF_4
0x400026d	          0x80f607	                               xor dh, 7	       570	vt.c	FUNCTION_19	IF_4
0x4000270	          0xc1f804	                              sar eax, 4	       570	vt.c	FUNCTION_19	IF_4
0x4000273	          0x4139c0	                            cmp r8d, eax	       570	vt.c	FUNCTION_19	IF_4
0x4000276	           0xf44f2	                          cmove esi, edx	       570	vt.c	FUNCTION_19	IF_4
0x4000279	          0x668931	                      mov word [rcx], si	       571	vt.c	FUNCTION_19
0x400027c	    0x488b87f80200	           mov rax, qword [rdi + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4000283	          0x483b38	                    cmp rdi, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4000286	            0x758b	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000288	    0x8b0500000000	            mov eax, dword [0x0400028e] 	       289	vt.c	FUNCTION_6	CALL_1
0x400028e	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x4000290	            0x7581	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000292	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       573	vt.c	FUNCTION_19	CALL_2
0x4000299	    0x8b8fbc010000	           mov ecx, dword [rdi + 0x1bc] 	       573	vt.c	FUNCTION_19	CALL_2
0x400029f	    0x8b97c0010000	           mov edx, dword [rdi + 0x1c0] 	       573	vt.c	FUNCTION_19	CALL_2
0x40002a5	        0x488b4028	            mov rax, qword [rax + 0x28] 	       573	vt.c	FUNCTION_19	CALL_2
0x40002a9	      0xe900000000	                           jmp 0x40002ae	       573	vt.c	FUNCTION_19	CALL_2
0x40002ae	            0x6690	                                     nop	       573	vt.c	FUNCTION_19	CALL_2
0x40002b0	            0x85f6	                           test esi, esi	      1072	vt.c	FUNCTION_36	IF_1
0x40002b2	     0xf8880000000	                            js 0x4000338	      1072	vt.c	FUNCTION_36	IF_1
0x40002b8	    0x8b8764010000	           mov eax, dword [rdi + 0x164] 	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002be	            0x39f0	                            cmp eax, esi	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c0	            0x764b	                           jbe 0x400030d	      1075	vt.c	FUNCTION_36	ELSE_1	IF_2
0x40002c2	    0x89b7bc010000	            mov dword [rdi + 0x1bc], esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002c8	             0x1f6	                            add esi, esi	      1078	vt.c	FUNCTION_36	ELSE_1	ELSE_2
0x40002ca	    0xf68778020000	          test byte [rdi + 0x278], 0x20 	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d1	            0x744f	                            je 0x4000322	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d3	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	      1082	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002d9	    0x8b8f94010000	           mov ecx, dword [rdi + 0x194] 	      1083	vt.c	FUNCTION_36	ELSE_2	IF_3
0x40002df	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x40002e1	            0x7f4b	                            jg 0x400032e	      1088	vt.c	FUNCTION_36	IF_4
0x40002e3	            0x39d1	                            cmp ecx, edx	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e5	            0x7e5f	                           jle 0x4000346	      1090	vt.c	FUNCTION_36	ELSE_4	IF_5
0x40002e7	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1093	vt.c	FUNCTION_36	ELSE_5
0x40002ed	     0xfaf976c0100	           imul edx, dword [rdi + 0x16c]	      1094	vt.c	FUNCTION_36
0x40002f4	    0x4803b7780100	            add rsi, qword [rdi + 0x178]	      1094	vt.c	FUNCTION_36
0x40002fb	    0x80a77a020000	            and byte [rdi + 0x27a], 0xbf	      1095	vt.c	FUNCTION_36
0x4000302	          0x4801f2	                            add rdx, rsi	      1094	vt.c	FUNCTION_36
0x4000305	    0x488997d00100	            mov qword [rdi + 0x1d0], rdx	      1094	vt.c	FUNCTION_36
0x400030c	              0xc3	                                     ret	      1095	vt.c	FUNCTION_36
0x400030d	          0x83e801	                              sub eax, 1	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000310	              0xf6	                                 invalid	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000311	          0x877802	               xchg dword [rax + 2], edi	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
update_attr	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,2:SWITCH,0	43
0x4001170	              0x53	                                push rbx	       444	vt.c	FUNCTION_14
0x4001171	     0xfb687790200	          movzx eax, byte [rdi + 0x279] 	       447	vt.c	FUNCTION_14
0x4001178	          0x4889fb	                            mov rbx, rdi	       444	vt.c	FUNCTION_14
0x400117b	    0x440fb68f7802	          movzx r9d, byte [rdi + 0x278] 	       447	vt.c	FUNCTION_14
0x4001183	     0xfb6b7af0100	          movzx esi, byte [rdi + 0x1af] 	       445	vt.c	FUNCTION_14	CALL_1
0x400118a	            0x89c2	                            mov edx, eax	       447	vt.c	FUNCTION_14
0x400118c	          0x4189c0	                            mov r8d, eax	       446	vt.c	FUNCTION_14
0x400118f	            0x89c1	                            mov ecx, eax	       446	vt.c	FUNCTION_14
0x4001191	          0xc0ea06	                               shr dl, 6	       447	vt.c	FUNCTION_14
0x4001194	        0x41c0e904	                              shr r9b, 4	       447	vt.c	FUNCTION_14
0x4001198	        0x41c0e804	                              shr r8b, 4	       446	vt.c	FUNCTION_14
0x400119c	          0x4131d1	                            xor r9d, edx	       447	vt.c	FUNCTION_14
0x400119f	            0x89c2	                            mov edx, eax	       445	vt.c	FUNCTION_14	CALL_1
0x40011a1	          0xc0e803	                               shr al, 3	       447	vt.c	FUNCTION_14
0x40011a4	          0x83e001	                              and eax, 1	       445	vt.c	FUNCTION_14	CALL_1
0x40011a7	          0xc0e905	                               shr cl, 5	       446	vt.c	FUNCTION_14
0x40011aa	            0xd0ea	                               shr dl, 1	       445	vt.c	FUNCTION_14	CALL_1
0x40011ac	              0x50	                                push rax	       445	vt.c	FUNCTION_14	CALL_1
0x40011ad	          0x83e101	                              and ecx, 1	       445	vt.c	FUNCTION_14	CALL_1
0x40011b0	          0x83e203	                              and edx, 3	       445	vt.c	FUNCTION_14	CALL_1
0x40011b3	        0x4183e101	                              and r9d, 1	       445	vt.c	FUNCTION_14	CALL_1
0x40011b7	        0x4183e001	                              and r8d, 1	       445	vt.c	FUNCTION_14	CALL_1
0x40011bb	      0xe8d0feffff	                     call sym.build_attr	       445	vt.c	FUNCTION_14	CALL_1
0x40011c0	    0x440fb68b7802	          movzx r9d, byte [rbx + 0x278] 	       448	vt.c	FUNCTION_14	CALL_2
0x40011c8	     0xfb68b790200	          movzx ecx, byte [rbx + 0x279] 	       448	vt.c	FUNCTION_14	CALL_2
0x40011cf	      0xba01000000	                              mov edx, 1	       448	vt.c	FUNCTION_14	CALL_2
0x40011d4	     0xfb6b3af0100	          movzx esi, byte [rbx + 0x1af] 	       448	vt.c	FUNCTION_14	CALL_2
0x40011db	            0x6a00	                                  push 0	       448	vt.c	FUNCTION_14	CALL_2
0x40011dd	          0x4889df	                            mov rdi, rbx	       448	vt.c	FUNCTION_14	CALL_2
0x40011e0	    0x8883ad010000	              mov byte [rbx + 0x1ad], al	       445	vt.c	FUNCTION_14	CALL_1
0x40011e6	          0x4531c0	                            xor r8d, r8d	       448	vt.c	FUNCTION_14	CALL_2
0x40011e9	        0x41c0e904	                              shr r9b, 4	       448	vt.c	FUNCTION_14	CALL_2
0x40011ed	          0xc0e905	                               shr cl, 5	       448	vt.c	FUNCTION_14	CALL_2
0x40011f0	          0x83e101	                              and ecx, 1	       448	vt.c	FUNCTION_14	CALL_2
0x40011f3	        0x4183e101	                              and r9d, 1	       448	vt.c	FUNCTION_14	CALL_2
0x40011f7	      0xe894feffff	                     call sym.build_attr	       448	vt.c	FUNCTION_14	CALL_2
0x40011fc	          0xc1e008	                              shl eax, 8	       448	vt.c	FUNCTION_14	CALL_2
0x40011ff	          0x83c820	                            or eax, 0x20	       448	vt.c	FUNCTION_14	CALL_2
0x4001202	    0x668983f80100	              mov word [rbx + 0x1f8], ax	       448	vt.c	FUNCTION_14	CALL_2
0x4001209	              0x58	                                 pop rax	       449	vt.c	FUNCTION_14
0x400120a	              0x5a	                                 pop rdx	       449	vt.c	FUNCTION_14
0x400120b	              0x5b	                                 pop rbx	       449	vt.c	FUNCTION_14
0x400120c	              0xc3	                                     ret	       449	vt.c	FUNCTION_14
add_softcursor	ELSE,0:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,2:SWITCH,0	46
0x4000200	    0x8b87b4010000	           mov eax, dword [rdi + 0x1b4] 	       562	vt.c	FUNCTION_19
0x4000206	            0xa810	                           test al, 0x10	       564	vt.c	FUNCTION_19	IF_1
0x4000208	            0x7409	                            je 0x4000213	       564	vt.c	FUNCTION_19	IF_1
0x400020a	    0x833d00000000	cmp dword [0x04000211], 0xffffffffffffffff	       565	vt.c	FUNCTION_19	IF_2
0x4000211	            0x7402	                            je 0x4000215	       565	vt.c	FUNCTION_19	IF_2
0x4000213	            0xf3c3	                                     ret	       565	vt.c	FUNCTION_19	IF_2
0x4000215	    0x488b8fd00100	           mov rcx, qword [rdi + 0x1d0] 	       561	vt.c	FUNCTION_19
0x400021c	            0x89c6	                            mov esi, eax	       568	vt.c	FUNCTION_19
0x400021e	          0x4189c0	                            mov r8d, eax	       568	vt.c	FUNCTION_19
0x4000221	          0xc1ee08	                              shr esi, 8	       568	vt.c	FUNCTION_19
0x4000224	    0x4181e000ff00	                         and r8d, 0xff00	       568	vt.c	FUNCTION_19
0x400022b	    0x81e600ff0000	                         and esi, 0xff00	       568	vt.c	FUNCTION_19
0x4000231	           0xfb711	                   movzx edx, word [rcx]	       561	vt.c	FUNCTION_19
0x4000234	             0x9d6	                             or esi, edx	       568	vt.c	FUNCTION_19
0x4000236	    0x891500000000	            mov dword [0x0400023c], edx 	       566	vt.c	FUNCTION_19
0x400023c	          0x4431c6	                            xor esi, r8d	       568	vt.c	FUNCTION_19
0x400023f	            0xa820	                           test al, 0x20	       569	vt.c	FUNCTION_19	IF_3
0x4000241	            0x7413	                            je 0x4000256	       569	vt.c	FUNCTION_19	IF_3
0x4000243	            0x31f2	                            xor edx, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000245	          0x4189f0	                            mov r8d, esi	       569	vt.c	FUNCTION_19	IF_3
0x4000248	    0x4181f0007000	                         xor r8d, 0x7000	       569	vt.c	FUNCTION_19	IF_3
0x400024f	          0x80e670	                            and dh, 0x70	       569	vt.c	FUNCTION_19	IF_3
0x4000252	        0x410f44f0	                          cmove esi, r8d	       569	vt.c	FUNCTION_19	IF_3
0x4000256	            0xa840	                           test al, 0x40	       570	vt.c	FUNCTION_19	IF_4
0x4000258	            0x741f	                            je 0x4000279	       570	vt.c	FUNCTION_19	IF_4
0x400025a	            0x89f0	                            mov eax, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025c	          0x4189f0	                            mov r8d, esi	       570	vt.c	FUNCTION_19	IF_4
0x400025f	            0x89f2	                            mov edx, esi	       570	vt.c	FUNCTION_19	IF_4
0x4000261	      0x2500700000	                         and eax, 0x7000	       570	vt.c	FUNCTION_19	IF_4
0x4000266	    0x4181e0000700	                          and r8d, 0x700	       570	vt.c	FUNCTION_19	IF_4
0x400026d	          0x80f607	                               xor dh, 7	       570	vt.c	FUNCTION_19	IF_4
0x4000270	          0xc1f804	                              sar eax, 4	       570	vt.c	FUNCTION_19	IF_4
0x4000273	          0x4139c0	                            cmp r8d, eax	       570	vt.c	FUNCTION_19	IF_4
0x4000276	           0xf44f2	                          cmove esi, edx	       570	vt.c	FUNCTION_19	IF_4
0x4000279	          0x668931	                      mov word [rcx], si	       571	vt.c	FUNCTION_19
0x400027c	    0x488b87f80200	           mov rax, qword [rdi + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4000283	          0x483b38	                    cmp rdi, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4000286	            0x758b	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000288	    0x8b0500000000	            mov eax, dword [0x0400028e] 	       289	vt.c	FUNCTION_6	CALL_1
0x400028e	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x4000290	            0x7581	                           jne 0x4000213	       289	vt.c	FUNCTION_6	CALL_1
0x4000292	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       573	vt.c	FUNCTION_19	CALL_2
0x4000299	    0x8b8fbc010000	           mov ecx, dword [rdi + 0x1bc] 	       573	vt.c	FUNCTION_19	CALL_2
0x400029f	    0x8b97c0010000	           mov edx, dword [rdi + 0x1c0] 	       573	vt.c	FUNCTION_19	CALL_2
0x40002a5	        0x488b4028	            mov rax, qword [rax + 0x28] 	       573	vt.c	FUNCTION_19	CALL_2
0x40002a9	      0xe900000000	                           jmp 0x40002ae	       573	vt.c	FUNCTION_19	CALL_2
register_vt_notifier	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,1:SWITCH,0	3
0x40006b0	          0x4889fe	                            mov rsi, rdi	       256	vt.c	FUNCTION_1
0x40006b3	    0x48c7c7000000	                              mov rdi, 0	       257	vt.c	FUNCTION_1	CALL_1
0x40006ba	      0xe900000000	                           jmp 0x40006bf	       257	vt.c	FUNCTION_1	CALL_1
con_install	ELSE,1:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,4:SWITCH,0	51
0x4003480	            0x4156	                                push r14	      2874	vt.c	FUNCTION_89
0x4003482	            0x4155	                                push r13	      2874	vt.c	FUNCTION_89
0x4003484	          0x4989fd	                            mov r13, rdi	      2874	vt.c	FUNCTION_89
0x4003487	            0x4154	                                push r12	      2874	vt.c	FUNCTION_89
0x4003489	              0x55	                                push rbp	      2874	vt.c	FUNCTION_89
0x400348a	          0x4989f4	                            mov r12, rsi	      2874	vt.c	FUNCTION_89
0x400348d	              0x53	                                push rbx	      2874	vt.c	FUNCTION_89
0x400348e	          0x8b5e20	            mov ebx, dword [rsi + 0x20] 	      2875	vt.c	FUNCTION_89
0x4003491	      0xe800000000	                          call 0x4003496	      2879	vt.c	FUNCTION_89	CALL_1
0x4003496	            0x89df	                            mov edi, ebx	      2880	vt.c	FUNCTION_89	CALL_2
0x4003498	      0xe800000000	                          call 0x400349d	      2880	vt.c	FUNCTION_89	CALL_2
0x400349d	            0x85c0	                           test eax, eax	      2881	vt.c	FUNCTION_89	IF_1
0x400349f	            0x89c5	                            mov ebp, eax	      2880	vt.c	FUNCTION_89	CALL_2
0x40034a1	     0xf8586000000	                           jne 0x400352d	      2881	vt.c	FUNCTION_89	IF_1
0x40034a7	        0x488d049b	                  lea rax, [rbx + rbx*4]	      2884	vt.c	FUNCTION_89
0x40034ab	      0xbd00feffff	                     mov ebp, 0xfffffe00	      2888	vt.c	FUNCTION_89	IF_2
0x40034b0	    0x4c8d34c50000	                        lea r14, [rax*8]	      2884	vt.c	FUNCTION_89
0x40034b8	          0x498b1e	                    mov rbx, qword [r14]	      2884	vt.c	FUNCTION_89
0x40034bb	    0x4883bb880000	               cmp qword [rbx + 0x88], 0	      2887	vt.c	FUNCTION_89	IF_2
0x40034c3	            0x7568	                           jne 0x400352d	      2887	vt.c	FUNCTION_89	IF_2
0x40034c5	          0x4c89e2	                            mov rdx, r12	      2892	vt.c	FUNCTION_89	CALL_3
0x40034c8	          0x4c89ee	                            mov rsi, r13	      2892	vt.c	FUNCTION_89	CALL_3
0x40034cb	          0x4889df	                            mov rdi, rbx	      2892	vt.c	FUNCTION_89	CALL_3
0x40034ce	      0xe800000000	                          call 0x40034d3	      2892	vt.c	FUNCTION_89	CALL_3
0x40034d3	            0x85c0	                           test eax, eax	      2893	vt.c	FUNCTION_89	IF_3
0x40034d5	            0x89c5	                            mov ebp, eax	      2892	vt.c	FUNCTION_89	CALL_3
0x40034d7	            0x7554	                           jne 0x400352d	      2893	vt.c	FUNCTION_89	IF_3
0x40034d9	    0x49899c246002	            mov qword [r12 + 0x260], rbx	      2896	vt.c	FUNCTION_89
0x40034e1	    0x4c89a3880000	             mov qword [rbx + 0x88], r12	      2897	vt.c	FUNCTION_89
0x40034e8	    0x418b8424cc01	           mov eax, dword [r12 + 0x1cc] 	      2899	vt.c	FUNCTION_89	IF_4
0x40034f0	            0x85c0	                           test eax, eax	      2899	vt.c	FUNCTION_89	IF_4
0x40034f2	            0x7524	                           jne 0x4003518	      2899	vt.c	FUNCTION_89	IF_4
0x40034f4	          0x498b06	                    mov rax, qword [r14]	      2900	vt.c	FUNCTION_89	IF_4
0x40034f7	    0x8b8068010000	           mov eax, dword [rax + 0x168] 	      2900	vt.c	FUNCTION_89	IF_4
0x40034fd	    0x6641898424cc	              mov word [r12 + 0x1cc], ax	      2900	vt.c	FUNCTION_89	IF_4
0x4003506	          0x498b06	                    mov rax, qword [r14]	      2901	vt.c	FUNCTION_89	IF_4
0x4003509	    0x8b8064010000	           mov eax, dword [rax + 0x164] 	      2901	vt.c	FUNCTION_89	IF_4
0x400350f	    0x6641898424ce	              mov word [r12 + 0x1ce], ax	      2901	vt.c	FUNCTION_89	IF_4
0x4003518	    0xf6837b020000	              test byte [rbx + 0x27b], 4	      2903	vt.c	FUNCTION_89	IF_5
0x400351f	            0x751c	                           jne 0x400353d	      2903	vt.c	FUNCTION_89	IF_5
0x4003521	    0x4181a4241001	     and dword [r12 + 0x110], 0xffffbfff	      2906	vt.c	FUNCTION_89	ELSE_1
0x400352d	      0xe800000000	                          call 0x4003532	      2908	vt.c	FUNCTION_89	CALL_4
0x4003532	            0x89e8	                            mov eax, ebp	      2910	vt.c	FUNCTION_89
0x4003534	              0x5b	                                 pop rbx	      2910	vt.c	FUNCTION_89
0x4003535	              0x5d	                                 pop rbp	      2910	vt.c	FUNCTION_89
0x4003536	            0x415c	                                 pop r12	      2910	vt.c	FUNCTION_89
0x4003538	            0x415d	                                 pop r13	      2910	vt.c	FUNCTION_89
0x400353a	            0x415e	                                 pop r14	      2910	vt.c	FUNCTION_89
0x400353c	              0xc3	                                     ret	      2910	vt.c	FUNCTION_89
0x400353d	    0x41818c241001	          or dword [r12 + 0x110], 0x4000	      2904	vt.c	FUNCTION_89	IF_5
0x4003549	            0xebe2	                           jmp 0x400352d	      2904	vt.c	FUNCTION_89	IF_5
store_bind	ELSE,1:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,6:SWITCH,0	133
0x4002680	            0x4156	                                push r14	      3405	vt.c	FUNCTION_103
0x4002682	          0x4889d0	                            mov rax, rdx	      3405	vt.c	FUNCTION_103
0x4002685	            0x4155	                                push r13	      3405	vt.c	FUNCTION_103
0x4002687	            0x4154	                                push r12	      3405	vt.c	FUNCTION_103
0x4002689	              0x55	                                push rbp	      3405	vt.c	FUNCTION_103
0x400268a	            0x31d2	                            xor edx, edx	      3407	vt.c	FUNCTION_103	CALL_2
0x400268c	              0x53	                                push rbx	      3405	vt.c	FUNCTION_103
0x400268d	            0x31f6	                            xor esi, esi	      3407	vt.c	FUNCTION_103	CALL_2
0x400268f	    0x4c8ba7980000	            mov r12, qword [rdi + 0x98] 	      3407	vt.c	FUNCTION_103	CALL_2
0x4002696	          0x4889c7	                            mov rdi, rax	      3407	vt.c	FUNCTION_103	CALL_2
0x4002699	          0x4889cb	                            mov rbx, rcx	      3405	vt.c	FUNCTION_103
0x400269c	      0xe800000000	                          call 0x40026a1	      3407	vt.c	FUNCTION_103	CALL_2
0x40026a1	          0x4889c5	                            mov rbp, rax	      3407	vt.c	FUNCTION_103	CALL_2
0x40026a4	      0xe800000000	                          call 0x40026a9	      3409	vt.c	FUNCTION_103	CALL_3
0x40026a9	            0x85ed	                           test ebp, ebp	      3411	vt.c	FUNCTION_103	IF_1
0x40026ab	        0x498b2c24	                    mov rbp, qword [r12]	      3306	vt.c	FUNCTION_99	IF_1
0x40026af	     0xf85a3000000	                           jne 0x4002758	      3411	vt.c	FUNCTION_103	IF_1
0x40026b5	          0x4885ed	                           test rbp, rbp	      3357	vt.c	FUNCTION_100	IF_1
0x40026b8	            0x7477	                            je 0x4002731	      3357	vt.c	FUNCTION_100	IF_1
0x40026ba	    0x41f644242401	               test byte [r12 + 0x24], 1	      3357	vt.c	FUNCTION_100	IF_1
0x40026c0	            0x746f	                            je 0x4002731	      3357	vt.c	FUNCTION_100	IF_1
0x40026c2	      0x418b44241c	            mov eax, dword [r12 + 0x1c] 	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026c7	      0x418b7c2420	            mov edi, dword [r12 + 0x20] 	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026cc	            0x39f8	                            cmp eax, edi	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026ce	            0x7f61	                            jg 0x4002731	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026d0	      0xbaffffffff	                     mov edx, 0xffffffff	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026d5	          0x4531ed	                          xor r13d, r13d	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026d8	            0x89d6	                            mov esi, edx	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026da	            0xeb0c	                           jmp 0x40026e8	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026dc	          0x83feff	             cmp esi, 0xffffffffffffffff	      3371	vt.c	FUNCTION_100	WHILE_1	FOR_1	ELSE_1	IF_4
0x40026df	            0x7561	                           jne 0x4002742	      3371	vt.c	FUNCTION_100	WHILE_1	FOR_1	ELSE_1	IF_4
0x40026e1	          0x83c001	                              add eax, 1	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026e4	            0x39f8	                            cmp eax, edi	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026e6	            0x7f23	                            jg 0x400270b	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x40026e8	          0x4863c8	                         movsxd rcx, eax	      3366	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2
0x40026eb	    0x483b2ccd0000	                  cmp rbp, qword [rcx*8]	      3366	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2
0x40026f3	            0x75e7	                           jne 0x40026dc	      3366	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2
0x40026f5	          0x83feff	             cmp esi, 0xffffffffffffffff	      3367	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2	IF_3
0x40026f8	            0x89c2	                            mov edx, eax	      3367	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2	IF_3
0x40026fa	    0x41bd01000000	                             mov r13d, 1	      3370	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2
0x4002700	            0x75df	                           jne 0x40026e1	      3367	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2	IF_3
0x4002702	            0x89c6	                            mov esi, eax	      3367	vt.c	FUNCTION_100	WHILE_1	FOR_1	IF_2	IF_3
0x4002704	          0x83c001	                              add eax, 1	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x4002707	            0x39f8	                            cmp eax, edi	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x4002709	            0x7edd	                           jle 0x40026e8	      3365	vt.c	FUNCTION_100	WHILE_1	FOR_1
0x400270b	            0x85f6	                           test esi, esi	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400270d	            0x7540	                           jne 0x400274f	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400270f	          0x83fa3e	                           cmp edx, 0x3e	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002712	            0x753b	                           jne 0x400274f	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002714	      0xba3e000000	                           mov edx, 0x3e	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002719	            0x31f6	                            xor esi, esi	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400271b	      0xb901000000	                              mov ecx, 1	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002720	          0x4889ef	                            mov rdi, rbp	      3379	vt.c	FUNCTION_100	WHILE_1	IF_6	CALL_1
0x4002723	      0xe800000000	                          call 0x4002728	      3379	vt.c	FUNCTION_100	WHILE_1	IF_6	CALL_1
0x4002728	            0x85c0	                           test eax, eax	      3380	vt.c	FUNCTION_100	WHILE_1	IF_6	IF_7
0x400272a	            0x7505	                           jne 0x4002731	      3380	vt.c	FUNCTION_100	WHILE_1	IF_6	IF_7
0x400272c	          0x4585ed	                         test r13d, r13d	      3362	vt.c	FUNCTION_100	WHILE_1
0x400272f	            0x7591	                           jne 0x40026c2	      3362	vt.c	FUNCTION_100	WHILE_1
0x4002731	      0xe800000000	                          call 0x4002736	      3416	vt.c	FUNCTION_103	CALL_6
0x4002736	          0x4889d8	                            mov rax, rbx	      3419	vt.c	FUNCTION_103
0x4002739	              0x5b	                                 pop rbx	      3419	vt.c	FUNCTION_103
0x400273a	              0x5d	                                 pop rbp	      3419	vt.c	FUNCTION_103
0x400273b	            0x415c	                                 pop r12	      3419	vt.c	FUNCTION_103
0x400273d	            0x415d	                                 pop r13	      3419	vt.c	FUNCTION_103
0x400273f	            0x415e	                                 pop r14	      3419	vt.c	FUNCTION_103
0x4002741	              0xc3	                                     ret	      3419	vt.c	FUNCTION_103
0x4002742	          0x83fa3e	                           cmp edx, 0x3e	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002745	            0x7504	                           jne 0x400274b	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002747	            0x85f6	                           test esi, esi	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002749	            0x74c9	                            je 0x4002714	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400274b	            0x31c9	                            xor ecx, ecx	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400274d	            0xebd1	                           jmp 0x4002720	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x400274f	          0x83feff	             cmp esi, 0xffffffffffffffff	      3378	vt.c	FUNCTION_100	WHILE_1	IF_6
0x4002752	            0x74d8	                            je 0x400272c	      3378	vt.c	FUNCTION_100	WHILE_1	IF_6
0x4002754	            0x31c9	                            xor ecx, ecx	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002756	            0xebc8	                           jmp 0x4002720	      3375	vt.c	FUNCTION_100	WHILE_1	IF_5
0x4002758	          0x4885ed	                           test rbp, rbp	      3306	vt.c	FUNCTION_99	IF_1
0x400275b	            0x74d4	                            je 0x4002731	      3306	vt.c	FUNCTION_99	IF_1
0x400275d	    0x41f644242401	               test byte [r12 + 0x24], 1	      3306	vt.c	FUNCTION_99	IF_1
0x4002763	            0x74cc	                            je 0x4002731	      3306	vt.c	FUNCTION_99	IF_1
0x4002765	    0x48c7c0000000	                              mov rax, 0	      3306	vt.c	FUNCTION_99	IF_1
0x400276c	          0x4c8b28	                    mov r13, qword [rax]	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x400276f	          0x4d85ed	                           test r13, r13	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x4002772	            0x7406	                            je 0x400277a	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x4002774	        0xf6402401	               test byte [rax + 0x24], 1	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x4002778	            0x7430	                            je 0x40027aa	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x400277a	        0x4883c028	                           add rax, 0x28	      3314	vt.c	FUNCTION_99	FOR_1	IF_2
0x400277e	    0x483d00000000	                              cmp rax, 0	      3311	vt.c	FUNCTION_99	FOR_1
0x4002784	            0x75e6	                           jne 0x400276c	      3311	vt.c	FUNCTION_99	FOR_1
0x4002786	            0xeba9	                           jmp 0x4002731	      3311	vt.c	FUNCTION_99	FOR_1
0x4002788	            0x85f6	                           test esi, esi	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x400278a	            0x7573	                           jne 0x40027ff	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x400278c	          0x83fa3e	                           cmp edx, 0x3e	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x400278f	            0x756e	                           jne 0x40027ff	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x4002791	      0xba3e000000	                           mov edx, 0x3e	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x4002796	            0x31f6	                            xor esi, esi	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x4002798	      0xb901000000	                              mov ecx, 1	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x400279d	          0x4889ef	                            mov rdi, rbp	      3340	vt.c	FUNCTION_99	WHILE_1	CALL_1
0x40027a0	      0xe8abf7ffff	             call sym.do_bind_con_driver	      3340	vt.c	FUNCTION_99	WHILE_1	CALL_1
0x40027a5	          0x4585f6	                         test r14d, r14d	      3323	vt.c	FUNCTION_99	WHILE_1
0x40027a8	            0x7487	                            je 0x4002731	      3323	vt.c	FUNCTION_99	WHILE_1
0x40027aa	      0x418b44241c	            mov eax, dword [r12 + 0x1c] 	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027af	      0x418b7c2420	            mov edi, dword [r12 + 0x20] 	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027b4	            0x39f8	                            cmp eax, edi	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027b6	     0xf8f75ffffff	                            jg 0x4002731	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027bc	      0xbaffffffff	                     mov edx, 0xffffffff	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027c1	          0x4531f6	                          xor r14d, r14d	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027c4	            0x89d6	                            mov esi, edx	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027c6	            0xeb0c	                           jmp 0x40027d4	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027c8	          0x83feff	             cmp esi, 0xffffffffffffffff	      3332	vt.c	FUNCTION_99	WHILE_1	FOR_2	ELSE_1	IF_6
0x40027cb	            0x7525	                           jne 0x40027f2	      3332	vt.c	FUNCTION_99	WHILE_1	FOR_2	ELSE_1	IF_6
0x40027cd	          0x83c001	                              add eax, 1	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027d0	            0x39f8	                            cmp eax, edi	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027d2	            0x7fb4	                            jg 0x4002788	      3326	vt.c	FUNCTION_99	WHILE_1	FOR_2
0x40027d4	          0x4863c8	                         movsxd rcx, eax	      3327	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4
0x40027d7	    0x4c3b2ccd0000	                  cmp r13, qword [rcx*8]	      3327	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4
0x40027df	            0x75e7	                           jne 0x40027c8	      3327	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4
0x40027e1	          0x83feff	             cmp esi, 0xffffffffffffffff	      3328	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4	IF_5
0x40027e4	            0x89c2	                            mov edx, eax	      3328	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4	IF_5
0x40027e6	    0x41be01000000	                             mov r14d, 1	      3331	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4
0x40027ec	            0x75df	                           jne 0x40027cd	      3328	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4	IF_5
0x40027ee	            0x89c6	                            mov esi, eax	      3328	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4	IF_5
0x40027f0	            0xebdb	                           jmp 0x40027cd	      3328	vt.c	FUNCTION_99	WHILE_1	FOR_2	IF_4	IF_5
0x40027f2	            0x85f6	                           test esi, esi	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027f4	            0x7505	                           jne 0x40027fb	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027f6	          0x83fa3e	                           cmp edx, 0x3e	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027f9	            0x7496	                            je 0x4002791	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027fb	            0x31c9	                            xor ecx, ecx	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027fd	            0xeb9e	                           jmp 0x400279d	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x40027ff	          0x83feff	             cmp esi, 0xffffffffffffffff	      3339	vt.c	FUNCTION_99	WHILE_1	IF_8
0x4002802	            0x74a1	                            je 0x40027a5	      3339	vt.c	FUNCTION_99	WHILE_1	IF_8
0x4002804	            0x31c9	                            xor ecx, ecx	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
0x4002806	            0xeb95	                           jmp 0x400279d	      3336	vt.c	FUNCTION_99	WHILE_1	IF_7
hide_cursor	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,3:SWITCH,0	32
0x40006d0	    0x48393d000000	            cmp qword [0x040006d7], rdi 	       589	vt.c	FUNCTION_21	IF_1
0x40006d7	              0x53	                                push rbx	       588	vt.c	FUNCTION_21
0x40006d8	          0x4889fb	                            mov rbx, rdi	       588	vt.c	FUNCTION_21
0x40006db	            0x7470	                            je 0x400074d	       589	vt.c	FUNCTION_21	IF_1
0x40006dd	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       591	vt.c	FUNCTION_21	CALL_2
0x40006e4	      0xbe02000000	                              mov esi, 2	       591	vt.c	FUNCTION_21	CALL_2
0x40006e9	          0x4889df	                            mov rdi, rbx	       591	vt.c	FUNCTION_21	CALL_2
0x40006ec	        0x488b4038	            mov rax, qword [rax + 0x38] 	       591	vt.c	FUNCTION_21	CALL_2
0x40006f0	      0xe800000000	                          call 0x40006f5	       591	vt.c	FUNCTION_21	CALL_2
0x40006f5	    0x8b3500000000	            mov esi, dword [0x040006fb] 	       578	vt.c	FUNCTION_20	IF_1
0x40006fb	          0x83feff	             cmp esi, 0xffffffffffffffff	       578	vt.c	FUNCTION_20	IF_1
0x40006fe	            0x7420	                            je 0x4000720	       578	vt.c	FUNCTION_20	IF_1
0x4000700	    0x488b83d00100	           mov rax, qword [rbx + 0x1d0] 	       579	vt.c	FUNCTION_20	IF_1
0x4000707	          0x668930	                      mov word [rax], si	       579	vt.c	FUNCTION_20	IF_1
0x400070a	    0x488b83f80200	           mov rax, qword [rbx + 0x2f8] 	       173	console_struct.h	FUNCTION_140
0x4000711	          0x483b18	                    cmp rbx, qword [rax]	       289	vt.c	FUNCTION_6	CALL_1
0x4000714	            0x740c	                            je 0x4000722	       289	vt.c	FUNCTION_6	CALL_1
0x4000716	    0xc70500000000	     mov dword [0x04000720], 0xffffffff 	       583	vt.c	FUNCTION_20	IF_1
0x4000720	              0x5b	                                 pop rbx	       593	vt.c	FUNCTION_21
0x4000721	              0xc3	                                     ret	       593	vt.c	FUNCTION_21
0x4000722	    0x8b0500000000	            mov eax, dword [0x04000728] 	       289	vt.c	FUNCTION_6	CALL_1
0x4000728	            0x85c0	                           test eax, eax	       289	vt.c	FUNCTION_6	CALL_1
0x400072a	            0x75ea	                           jne 0x4000716	       289	vt.c	FUNCTION_6	CALL_1
0x400072c	    0x488b83980100	           mov rax, qword [rbx + 0x198] 	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x4000733	    0x8b8bbc010000	           mov ecx, dword [rbx + 0x1bc] 	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x4000739	          0x4889df	                            mov rdi, rbx	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x400073c	    0x8b93c0010000	           mov edx, dword [rbx + 0x1c0] 	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x4000742	        0x488b4028	            mov rax, qword [rax + 0x28] 	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x4000746	      0xe800000000	                          call 0x400074b	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x400074b	            0xebc9	                           jmp 0x4000716	       581	vt.c	FUNCTION_20	IF_1	IF_2	CALL_2
0x400074d	      0xe800000000	                          call 0x4000752	       590	vt.c	FUNCTION_21	CALL_1
0x4000752	            0xeb89	                           jmp 0x40006dd	       590	vt.c	FUNCTION_21	CALL_1
show_name	ELSE,0:WHILE,0:DO,0:functions,0:IF,0:FOR,0:CALL,2:SWITCH,0	13
0x4000e30	          0x4989d1	                             mov r9, rdx	      3432	vt.c	FUNCTION_105
0x4000e33	    0x488b97980000	            mov rdx, qword [rdi + 0x98] 	      3432	vt.c	FUNCTION_105
0x4000e3a	    0x48c7c0000000	                              mov rax, 0	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e41	    0x48c7c1000000	                              mov rcx, 0	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e48	      0xbe00100000	                         mov esi, 0x1000	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e4d	          0x4c89cf	                             mov rdi, r9	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e50	        0xf6422401	               test byte [rdx + 0x24], 1	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e54	        0x4c8b4208	                 mov r8, qword [rdx + 8]	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e58	    0x48c7c2000000	                              mov rdx, 0	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e5f	        0x480f45c8	                         cmovne rcx, rax	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e63	      0xe800000000	                          call 0x4000e68	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e68	            0x4898	                                    cdqe	      3435	vt.c	FUNCTION_105	CALL_2
0x4000e6a	              0xc3	                                     ret	      3439	vt.c	FUNCTION_105
screen_glyph	ELSE,0:WHILE,0:DO,0:functions,0:IF,1:FOR,0:CALL,1:SWITCH,0	18
0x40029e0	    0x488b87980100	           mov rax, qword [rdi + 0x198] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40029e7	              0x53	                                push rbx	      4252	vt.c	FUNCTION_132
0x40029e8	          0x4889fb	                            mov rbx, rdi	      4252	vt.c	FUNCTION_132
0x40029eb	    0x488b80b00000	            mov rax, qword [rax + 0xb0] 	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40029f2	          0x4885c0	                           test rax, rax	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40029f5	            0x741c	                            je 0x4002a13	       298	vt.c	FUNCTION_7	ELSE_1	IF_2
0x40029f7	      0xe800000000	                          call 0x40029fc	       301	vt.c	FUNCTION_7	CALL_1
0x40029fc	           0xfb710	                   movzx edx, word [rax]	      4253	vt.c	FUNCTION_132	CALL_1
0x40029ff	           0xfb6c2	                           movzx eax, dl	      4254	vt.c	FUNCTION_132
0x4002a02	            0x89c1	                            mov ecx, eax	      4257	vt.c	FUNCTION_132	IF_1
0x4002a04	          0x80cd01	                                or ch, 1	      4257	vt.c	FUNCTION_132	IF_1
0x4002a07	    0x668593d80100	            test word [rbx + 0x1d8], dx 	      4257	vt.c	FUNCTION_132	IF_1
0x4002a0e	              0x5b	                                 pop rbx	      4259	vt.c	FUNCTION_132
0x4002a0f	           0xf45c1	                         cmovne eax, ecx	      4257	vt.c	FUNCTION_132	IF_1
0x4002a12	              0xc3	                                     ret	      4259	vt.c	FUNCTION_132
0x4002a13	          0x4863c6	                         movsxd rax, esi	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a16	    0x480387880100	            add rax, qword [rdi + 0x188]	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
0x4002a1d	            0xebdd	                           jmp 0x40029fc	       299	vt.c	FUNCTION_7	ELSE_1	IF_2
vty_init	ELSE,0:WHILE,0:DO,0:functions,0:IF,5:FOR,0:CALL,18:SWITCH,0	98
0x4000314	               0x0	                      add byte [rax], al	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x4000316	    0x208987bc0100	            and byte [rcx + 0x1bc87], cl	      1081	vt.c	FUNCTION_36	ELSE_2	IF_3
0x400031c	      0x8d340075b1	         add byte [rbp - 0x4e8affcc], cl	      1076	vt.c	FUNCTION_36	ELSE_1	IF_2
0x4000322	            0x31c0	                            xor eax, eax	      1085	vt.c	FUNCTION_36	ELSE_3
0x4000324	    0x8b8f68010000	           mov ecx, dword [rdi + 0x168] 	      1086	vt.c	FUNCTION_36	ELSE_3
0x400032a	            0x39d0	                            cmp eax, edx	      1088	vt.c	FUNCTION_36	IF_4
0x400032c	            0x7eb5	                           jle 0x40002e3	      1088	vt.c	FUNCTION_36	IF_4
0x400032e	            0x89c2	                            mov edx, eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000330	    0x8987c0010000	            mov dword [rdi + 0x1c0], eax	      1089	vt.c	FUNCTION_36	IF_4
0x4000336	            0xebb5	                           jmp 0x40002ed	      1089	vt.c	FUNCTION_36	IF_4
0x4000338	    0xc787bc010000	              mov dword [rdi + 0x1bc], 0	      1073	vt.c	FUNCTION_36	IF_1
0x4000342	            0x31f6	                            xor esi, esi	      1073	vt.c	FUNCTION_36	IF_1
0x4000344	            0xeb84	                           jmp 0x40002ca	      1073	vt.c	FUNCTION_36	IF_1
0x4000346	          0x8d51ff	                      lea edx, [rcx - 1]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000349	    0x8997c0010000	            mov dword [rdi + 0x1c0], edx	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x400034f	            0xeb9c	                           jmp 0x40002ed	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000351	       0xf1f440000	                   nop dword [rax + rax]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000356	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1091	vt.c	FUNCTION_36	ELSE_4	IF_5
0x4000360	        0x440fb60e	                   movzx r9d, byte [rsi]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000364	      0x440fb64601	               movzx r8d, byte [rsi + 1]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000369	         0xfb64602	               movzx eax, byte [rsi + 2]	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400036d	          0x4538c1	                            cmp r9b, r8b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000370	          0x4589c2	                           mov r10d, r8d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000373	        0x450f43d1	                        cmovae r10d, r9d	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000377	            0x89c1	                            mov ecx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000379	          0x4138c2	                            cmp r10b, al	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400037c	        0x410fb6d2	                         movzx edx, r10b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000380	           0xf46d0	                         cmovbe edx, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000383	            0x89d6	                            mov esi, edx	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x4000385	            0xd0ea	                               shr dl, 1	      1277	vt.c	ELSE_3	FUNCTION_50	IF_1
0x4000387	          0x4438ca	                             cmp dl, r9b	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038a	            0x19c0	                            sbb eax, eax	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038c	          0x83e004	                              and eax, 4	      1275	vt.c	ELSE_3	FUNCTION_50	CALL_1
0x400038f	          0x4138d0	                             cmp r8b, dl	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000392	            0x7639	                           jbe 0x40003cd	      1279	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000394	          0x83c802	                               or eax, 2	      1280	vt.c	ELSE_3	FUNCTION_50	IF_2
0x4000397	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x4000399	            0x7736	                            ja 0x40003d1	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x400039b	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039d	            0x7539	                           jne 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x400039f	        0x4080fe55	                           cmp sil, 0x55	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a3	            0x7733	                            ja 0x40003d8	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003a5	     0xfb687790200	          movzx eax, byte [rdi + 0x279] 	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ac	          0x83e0f9	                     and eax, 0xfffffff9	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003af	          0x83c804	                               or eax, 4	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b2	    0x888779020000	              mov byte [rdi + 0x279], al	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003b8	            0x31c0	                            xor eax, eax	      1286	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003ba	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c1	          0x83e2f0	                     and edx, 0xfffffff0	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c4	             0x9d0	                             or eax, edx	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003c6	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1292	vt.c	ELSE_3	FUNCTION_50
0x40003cc	              0xc3	                                     ret	      1293	vt.c	ELSE_3	FUNCTION_50
0x40003cd	            0x38d1	                              cmp cl, dl	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003cf	            0x7607	                           jbe 0x40003d8	      1281	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d1	          0x83c801	                               or eax, 1	      1282	vt.c	ELSE_3	FUNCTION_50	IF_3
0x40003d4	            0x3c07	                               cmp al, 7	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d6	            0x74c7	                            je 0x400039f	      1284	vt.c	ELSE_3	FUNCTION_50	IF_4
0x40003d8	     0xfb697790200	          movzx edx, byte [rdi + 0x279] 	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003df	          0x83e2f9	                     and edx, 0xfffffff9	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e2	        0x4080feaa	                           cmp sil, 0xaa	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e6	            0x770b	                            ja 0x40003f3	      1287	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003e8	          0x83ca02	                               or edx, 2	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003eb	    0x889779020000	              mov byte [rdi + 0x279], dl	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f1	            0xebc7	                           jmp 0x40003ba	      1290	vt.c	ELSE_3	FUNCTION_50	ELSE_2
0x40003f3	          0x83ca04	                               or edx, 4	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003f6	    0x889779020000	              mov byte [rdi + 0x279], dl	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003fc	            0xebbc	                           jmp 0x40003ba	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x40003fe	            0x6690	                                     nop	      1288	vt.c	ELSE_3	FUNCTION_50	ELSE_1	IF_5
0x4000400	           0xfb606	                   movzx eax, byte [rsi]	      1298	vt.c	FUNCTION_51
0x4000403	         0xfb65601	               movzx edx, byte [rsi + 1]	      1298	vt.c	FUNCTION_51
0x4000407	          0x83e080	                     and eax, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040a	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400040d	           0xfb6c0	                           movzx eax, al	      1298	vt.c	FUNCTION_51
0x4000410	            0xd1f8	                              sar eax, 1	      1298	vt.c	FUNCTION_51
0x4000412	            0x89c1	                            mov ecx, eax	      1298	vt.c	FUNCTION_51
0x4000414	           0xfb6c2	                           movzx eax, dl	      1298	vt.c	FUNCTION_51
0x4000417	     0xfb697af0100	          movzx edx, byte [rdi + 0x1af] 	      1298	vt.c	FUNCTION_51
0x400041e	          0xc1f802	                              sar eax, 2	      1298	vt.c	FUNCTION_51
0x4000421	             0x9c8	                             or eax, ecx	      1298	vt.c	FUNCTION_51
0x4000423	          0x83e20f	                            and edx, 0xf	      1298	vt.c	FUNCTION_51
0x4000426	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000428	         0xfb65602	               movzx edx, byte [rsi + 2]	      1298	vt.c	FUNCTION_51
0x400042c	          0x83e280	                     and edx, 0xffffff80	      1298	vt.c	FUNCTION_51
0x400042f	           0xfb6d2	                           movzx edx, dl	      1298	vt.c	FUNCTION_51
0x4000432	          0xc1fa03	                              sar edx, 3	      1298	vt.c	FUNCTION_51
0x4000435	             0x9d0	                             or eax, edx	      1298	vt.c	FUNCTION_51
0x4000437	    0x8887af010000	              mov byte [rdi + 0x1af], al	      1298	vt.c	FUNCTION_51
0x400043d	              0xc3	                                     ret	      1298	vt.c	FUNCTION_51
0x400043e	            0x6690	                                     nop	      1298	vt.c	FUNCTION_51
0x4000440	            0x8b17	                    mov edx, dword [rdi]	      2153	vt.c	FUNCTION_70
0x4000442	          0x3b5604	                cmp edx, dword [rsi + 4]	      2156	vt.c	FUNCTION_70	IF_1
0x4000445	      0xb801000000	                              mov eax, 1	      2157	vt.c	FUNCTION_70	IF_1
0x400044a	            0x8b0e	                    mov ecx, dword [rsi]	      2154	vt.c	FUNCTION_70
0x400044c	            0x7704	                            ja 0x4000452	      2156	vt.c	FUNCTION_70	IF_1
0x400044e	            0x39ca	                            cmp edx, ecx	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000450	            0x19c0	                            sbb eax, eax	      2158	vt.c	FUNCTION_70	ELSE_1	IF_2
0x4000452	            0xf3c3	                                     ret	      2161	vt.c	FUNCTION_70
0x4000454	              0x66	                                 invalid	      2161	vt.c	FUNCTION_70
