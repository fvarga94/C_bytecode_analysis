xdr_decode_array2	FOR,0:ELSE,0:functions,0:CALL,1:DO,0:IF,1:WHILE,0:SWITCH,0	6
0x40019e0	          0x397738	            cmp dword [rdi + 0x38], esi 	      1435	xdr.c	FUNCTION_47	IF_1
0x40019e3	            0x7607	                           jbe 0x40019ec	      1435	xdr.c	FUNCTION_47	IF_1
0x40019e5	            0x31c9	                            xor ecx, ecx	      1438	xdr.c	FUNCTION_47	CALL_1
0x40019e7	      0xe9e4f8ffff	                jmp sym.xdr_xcode_array2	      1438	xdr.c	FUNCTION_47	CALL_1
0x40019ec	      0xb8eaffffff	                     mov eax, 0xffffffea	      1439	xdr.c	FUNCTION_47
0x40019f1	              0xc3	                                     ret	      1439	xdr.c	FUNCTION_47
xdr_init_encode	FOR,0:ELSE,0:functions,0:CALL,4:DO,0:IF,1:WHILE,0:SWITCH,0	35
0x4000da0	          0x8b4634	            mov eax, dword [rsi + 0x34] 	       463	xdr.c	FUNCTION_16
0x4000da3	          0x2b462c	             sub eax, dword [rsi + 0x2c]	       463	xdr.c	FUNCTION_16
0x4000da6	          0x2b4618	             sub eax, dword [rsi + 0x18]	       463	xdr.c	FUNCTION_16
0x4000da9	    0x48c747200000	               mov qword [rdi + 0x20], 0	       854	xdr.c	FUNCTION_30
0x4000db1	    0x48c747280000	               mov qword [rdi + 0x28], 0	       855	xdr.c	FUNCTION_30
0x4000db9	            0x85c0	                           test eax, eax	       466	xdr.c	FUNCTION_16	CALL_2
0x4000dbb	            0x784c	                            js 0x4000e09	       466	xdr.c	FUNCTION_16	CALL_2
0x4000dbd	        0x48897708	                mov qword [rdi + 8], rsi	       467	xdr.c	FUNCTION_16
0x4000dc1	        0x48897718	             mov qword [rdi + 0x18], rsi	       468	xdr.c	FUNCTION_16
0x4000dc5	            0x4898	                                    cdqe	       470	xdr.c	FUNCTION_16
0x4000dc7	        0x488b4e08	                mov rcx, qword [rsi + 8]	       469	xdr.c	FUNCTION_16
0x4000dcb	          0x48030e	                    add rcx, qword [rsi]	       469	xdr.c	FUNCTION_16
0x4000dce	          0x4989c0	                             mov r8, rax	       470	xdr.c	FUNCTION_16
0x4000dd1	          0x48890f	                    mov qword [rdi], rcx	       469	xdr.c	FUNCTION_16
0x4000dd4	          0x4c0306	                     add r8, qword [rsi]	       470	xdr.c	FUNCTION_16
0x4000dd7	        0x4c894710	              mov qword [rdi + 0x10], r8	       470	xdr.c	FUNCTION_16
0x4000ddb	        0x483b4608	                cmp rax, qword [rsi + 8]	       471	xdr.c	FUNCTION_16	CALL_3
0x4000ddf	            0x722a	                            jb 0x4000e0b	       471	xdr.c	FUNCTION_16	CALL_3
0x4000de1	          0x4839d1	                            cmp rcx, rdx	       473	xdr.c	FUNCTION_16	IF_1
0x4000de4	            0x741f	                            je 0x4000e05	       473	xdr.c	FUNCTION_16	IF_1
0x4000de6	          0x4885d2	                           test rdx, rdx	       473	xdr.c	FUNCTION_16	IF_1
0x4000de9	            0x741a	                            je 0x4000e05	       473	xdr.c	FUNCTION_16	IF_1
0x4000deb	          0x4839d1	                            cmp rcx, rdx	       476	xdr.c	FUNCTION_16	IF_1	CALL_4
0x4000dee	            0x7717	                            ja 0x4000e07	       476	xdr.c	FUNCTION_16	IF_1	CALL_4
0x4000df0	          0x4939d0	                             cmp r8, rdx	       476	xdr.c	FUNCTION_16	IF_1	CALL_4
0x4000df3	            0x7212	                            jb 0x4000e07	       476	xdr.c	FUNCTION_16	IF_1	CALL_4
0x4000df5	          0x4889d0	                            mov rax, rdx	       477	xdr.c	FUNCTION_16	IF_1
0x4000df8	          0x488917	                    mov qword [rdi], rdx	       478	xdr.c	FUNCTION_16	IF_1
0x4000dfb	          0x4829c8	                            sub rax, rcx	       477	xdr.c	FUNCTION_16	IF_1
0x4000dfe	           0x14638	             add dword [rsi + 0x38], eax	       479	xdr.c	FUNCTION_16	IF_1
0x4000e01	        0x48014608	                add qword [rsi + 8], rax	       480	xdr.c	FUNCTION_16	IF_1
0x4000e05	            0xf3c3	                                     ret	       480	xdr.c	FUNCTION_16	IF_1
0x4000e07	             0xf0b	                                     ud2	       480	xdr.c	FUNCTION_16	IF_1
0x4000e09	             0xf0b	                                     ud2	       476	xdr.c	FUNCTION_16	IF_1	CALL_4
0x4000e0b	             0xf0b	                                     ud2	       466	xdr.c	FUNCTION_16	CALL_2
xdr_encode_opaque_fixed	FOR,0:ELSE,0:functions,0:CALL,4:DO,0:IF,3:WHILE,0:SWITCH,0	31
0x40009f0	            0x85d2	                           test edx, edx	        63	xdr.c	FUNCTION_3	IF_1	CALL_1
0x40009f2	            0x4155	                                push r13	        62	xdr.c	FUNCTION_3
0x40009f4	            0x4154	                                push r12	        62	xdr.c	FUNCTION_3
0x40009f6	          0x4989fc	                            mov r12, rdi	        62	xdr.c	FUNCTION_3
0x40009f9	              0x55	                                push rbp	        62	xdr.c	FUNCTION_3
0x40009fa	              0x53	                                push rbx	        62	xdr.c	FUNCTION_3
0x40009fb	            0x7428	                            je 0x4000a25	        63	xdr.c	FUNCTION_3	IF_1	CALL_1
0x40009fd	          0x8d5a03	                      lea ebx, [rdx + 3]	        64	xdr.c	FUNCTION_3	IF_1	CALL_2
0x4000a00	            0x89d5	                            mov ebp, edx	        64	xdr.c	FUNCTION_3	IF_1	CALL_2
0x4000a02	          0xc1eb02	                              shr ebx, 2	        64	xdr.c	FUNCTION_3	IF_1	CALL_2
0x4000a05	    0x448d2c9d0000	                       lea r13d, [rbx*4]	        65	xdr.c	FUNCTION_3	IF_1
0x4000a0d	          0x4129d5	                           sub r13d, edx	        65	xdr.c	FUNCTION_3	IF_1
0x4000a10	          0x4885f6	                           test rsi, rsi	        67	xdr.c	FUNCTION_3	IF_1	IF_2
0x4000a13	            0x7407	                            je 0x4000a1c	        67	xdr.c	FUNCTION_3	IF_1	IF_2
0x4000a15	            0x89d2	                            mov edx, edx	        68	xdr.c	FUNCTION_3	IF_1	CALL_3
0x4000a17	      0xe800000000	                          call 0x4000a1c	        68	xdr.c	FUNCTION_3	IF_1	CALL_3
0x4000a1c	          0x4585ed	                         test r13d, r13d	        69	xdr.c	FUNCTION_3	IF_1	IF_3
0x4000a1f	            0x750e	                           jne 0x4000a2f	        69	xdr.c	FUNCTION_3	IF_1	IF_3
0x4000a21	        0x4d8d249c	                  lea r12, [r12 + rbx*4]	        71	xdr.c	FUNCTION_3	IF_1
0x4000a25	              0x5b	                                 pop rbx	        74	xdr.c	FUNCTION_3
0x4000a26	          0x4c89e0	                            mov rax, r12	        74	xdr.c	FUNCTION_3
0x4000a29	              0x5d	                                 pop rbp	        74	xdr.c	FUNCTION_3
0x4000a2a	            0x415c	                                 pop r12	        74	xdr.c	FUNCTION_3
0x4000a2c	            0x415d	                                 pop r13	        74	xdr.c	FUNCTION_3
0x4000a2e	              0xc3	                                     ret	        74	xdr.c	FUNCTION_3
0x4000a2f	            0x89ef	                            mov edi, ebp	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
0x4000a31	          0x4489ea	                           mov edx, r13d	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
0x4000a34	            0x31f6	                            xor esi, esi	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
0x4000a36	          0x4c01e7	                            add rdi, r12	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
0x4000a39	      0xe800000000	                          call 0x4000a3e	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
0x4000a3e	            0xebe1	                           jmp 0x4000a21	        70	xdr.c	FUNCTION_3	IF_1	CALL_4
xdr_buf_subsegment	FOR,0:ELSE,3:functions,0:CALL,3:DO,0:IF,4:WHILE,0:SWITCH,0	70
0x4000340	          0x894e38	             mov dword [rsi + 0x38], ecx	      1031	xdr.c	FUNCTION_37
0x4000343	          0x894e34	             mov dword [rsi + 0x34], ecx	      1031	xdr.c	FUNCTION_37
0x4000346	            0x89d0	                            mov eax, edx	      1032	xdr.c	FUNCTION_37	IF_1
0x4000348	        0x4c8b4708	                 mov r8, qword [rdi + 8]	      1032	xdr.c	FUNCTION_37	IF_1
0x400034c	          0x4c39c0	                             cmp rax, r8	      1032	xdr.c	FUNCTION_37	IF_1
0x400034f	     0xf8381000000	                           jae 0x40003d6	      1032	xdr.c	FUNCTION_37	IF_1
0x4000355	          0x480307	                    add rax, qword [rdi]	      1033	xdr.c	FUNCTION_37	IF_1
0x4000358	          0x488906	                    mov qword [rsi], rax	      1033	xdr.c	FUNCTION_37	IF_1
0x400035b	          0x8b4708	                mov eax, dword [rdi + 8]	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x400035e	            0x29d0	                            sub eax, edx	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x4000360	            0x39c8	                            cmp eax, ecx	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x4000362	           0xf47c1	                          cmova eax, ecx	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x4000365	            0x89c2	                            mov edx, eax	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x4000367	            0x29c1	                            sub ecx, eax	      1036	xdr.c	FUNCTION_37	IF_1
0x4000369	        0x48895608	                mov qword [rsi + 8], rdx	      1034	xdr.c	FUNCTION_37	IF_1	CALL_1
0x400036d	          0x8b472c	            mov eax, dword [rdi + 0x2c] 	      1043	xdr.c	FUNCTION_37	IF_2
0x4000370	            0x31d2	                            xor edx, edx	      1037	xdr.c	FUNCTION_37	IF_1
0x4000372	            0x39c2	                            cmp edx, eax	      1043	xdr.c	FUNCTION_37	IF_2
0x4000374	            0x7372	                           jae 0x40003e8	      1043	xdr.c	FUNCTION_37	IF_2
0x4000376	            0x29d0	                            sub eax, edx	      1044	xdr.c	FUNCTION_37	IF_2	CALL_2
0x4000378	            0x39c8	                            cmp eax, ecx	      1044	xdr.c	FUNCTION_37	IF_2	CALL_2
0x400037a	           0xf47c1	                          cmova eax, ecx	      1044	xdr.c	FUNCTION_37	IF_2	CALL_2
0x400037d	          0x89462c	             mov dword [rsi + 0x2c], eax	      1044	xdr.c	FUNCTION_37	IF_2	CALL_2
0x4000380	           0x35728	             add edx, dword [rdi + 0x28]	      1045	xdr.c	FUNCTION_37	IF_2
0x4000383	            0x29c1	                            sub ecx, eax	      1048	xdr.c	FUNCTION_37	IF_2
0x4000385	            0x31c0	                            xor eax, eax	      1048	xdr.c	FUNCTION_37	IF_2
0x4000387	          0x4189d0	                            mov r8d, edx	      1046	xdr.c	FUNCTION_37	IF_2
0x400038a	          0xc1ea0c	                            shr edx, 0xc	      1047	xdr.c	FUNCTION_37	IF_2
0x400038d	    0x4181e0ff0f00	                          and r8d, 0xfff	      1046	xdr.c	FUNCTION_37	IF_2
0x4000394	        0x44894628	             mov dword [rsi + 0x28], r8d	      1046	xdr.c	FUNCTION_37	IF_2
0x4000398	        0x4c8b4720	              mov r8, qword [rdi + 0x20]	      1047	xdr.c	FUNCTION_37	IF_2
0x400039c	        0x498d14d0	                   lea rdx, [r8 + rdx*8]	      1047	xdr.c	FUNCTION_37	IF_2
0x40003a0	        0x48895620	             mov qword [rsi + 0x20], rdx	      1047	xdr.c	FUNCTION_37	IF_2
0x40003a4	        0x4c8b4718	              mov r8, qword [rdi + 0x18]	      1055	xdr.c	FUNCTION_37	IF_3
0x40003a8	            0x31d2	                            xor edx, edx	      1049	xdr.c	FUNCTION_37	IF_2
0x40003aa	          0x4939c0	                             cmp r8, rax	      1055	xdr.c	FUNCTION_37	IF_3
0x40003ad	            0x764d	                           jbe 0x40003fc	      1055	xdr.c	FUNCTION_37	IF_3
0x40003af	        0x48034710	             add rax, qword [rdi + 0x10]	      1056	xdr.c	FUNCTION_37	IF_3
0x40003b3	        0x48894610	             mov qword [rsi + 0x10], rax	      1056	xdr.c	FUNCTION_37	IF_3
0x40003b7	        0x488b4718	            mov rax, qword [rdi + 0x18] 	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003bb	            0x29d0	                            sub eax, edx	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003bd	            0x39c8	                            cmp eax, ecx	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003bf	           0xf47c1	                          cmova eax, ecx	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003c2	            0x31d2	                            xor edx, edx	      1060	xdr.c	FUNCTION_37	IF_3
0x40003c4	            0x29c1	                            sub ecx, eax	      1059	xdr.c	FUNCTION_37	IF_3
0x40003c6	            0x89c7	                            mov edi, eax	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003c8	            0x31c0	                            xor eax, eax	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003ca	             0x9ca	                             or edx, ecx	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003cc	        0x48897e18	             mov qword [rsi + 0x18], rdi	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003d0	           0xf95c0	                                setne al	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003d3	            0xf7d8	                                 neg eax	      1057	xdr.c	FUNCTION_37	IF_3	CALL_3
0x40003d5	              0xc3	                                     ret	      1069	xdr.c	FUNCTION_37
0x40003d6	    0x48c746080000	                  mov qword [rsi + 8], 0	      1040	xdr.c	FUNCTION_37	ELSE_1
0x40003de	          0x8b472c	            mov eax, dword [rdi + 0x2c] 	      1043	xdr.c	FUNCTION_37	IF_2
0x40003e1	          0x4429c2	                            sub edx, r8d	      1039	xdr.c	FUNCTION_37	ELSE_1
0x40003e4	            0x39c2	                            cmp edx, eax	      1043	xdr.c	FUNCTION_37	IF_2
0x40003e6	            0x728e	                            jb 0x4000376	      1043	xdr.c	FUNCTION_37	IF_2
0x40003e8	    0xc7462c000000	               mov dword [rsi + 0x2c], 0	      1052	xdr.c	FUNCTION_37	ELSE_2
0x40003ef	        0x4c8b4718	              mov r8, qword [rdi + 0x18]	      1055	xdr.c	FUNCTION_37	IF_3
0x40003f3	            0x29c2	                            sub edx, eax	      1051	xdr.c	FUNCTION_37	ELSE_2
0x40003f5	            0x89d0	                            mov eax, edx	      1051	xdr.c	FUNCTION_37	ELSE_2
0x40003f7	          0x4939c0	                             cmp r8, rax	      1055	xdr.c	FUNCTION_37	IF_3
0x40003fa	            0x77b3	                            ja 0x40003af	      1055	xdr.c	FUNCTION_37	IF_3
0x40003fc	          0x4429c2	                            sub edx, r8d	      1062	xdr.c	FUNCTION_37	ELSE_3
0x40003ff	            0x31c0	                            xor eax, eax	      1062	xdr.c	FUNCTION_37	ELSE_3
0x4000401	    0x48c746180000	               mov qword [rsi + 0x18], 0	      1063	xdr.c	FUNCTION_37	ELSE_3
0x4000409	             0x9ca	                             or edx, ecx	      1063	xdr.c	FUNCTION_37	ELSE_3
0x400040b	           0xf95c0	                                setne al	      1063	xdr.c	FUNCTION_37	ELSE_3
0x400040e	            0xf7d8	                                 neg eax	      1063	xdr.c	FUNCTION_37	ELSE_3
0x4000410	              0xc3	                                     ret	      1069	xdr.c	FUNCTION_37
xdr_encode_string	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,0:WHILE,0:SWITCH,0	15
0x4000aa0	              0x55	                                push rbp	        94	xdr.c	FUNCTION_5
0x4000aa1	              0x53	                                push rbx	        94	xdr.c	FUNCTION_5
0x4000aa2	          0x4889fb	                            mov rbx, rdi	        94	xdr.c	FUNCTION_5
0x4000aa5	          0x4889f7	                            mov rdi, rsi	        95	xdr.c	FUNCTION_5	CALL_2
0x4000aa8	          0x4889f5	                            mov rbp, rsi	        94	xdr.c	FUNCTION_5
0x4000aab	      0xe800000000	                          call 0x4000ab0	        95	xdr.c	FUNCTION_5	CALL_2
0x4000ab0	            0x89c2	                            mov edx, eax	        87	xdr.c	FUNCTION_4	CALL_1
0x4000ab2	        0x488d7b04	                      lea rdi, [rbx + 4]	        88	xdr.c	FUNCTION_4	CALL_2
0x4000ab6	          0x4889ee	                            mov rsi, rbp	        88	xdr.c	FUNCTION_4	CALL_2
0x4000ab9	             0xfca	                               bswap edx	        87	xdr.c	FUNCTION_4	CALL_1
0x4000abb	            0x8913	                    mov dword [rbx], edx	        87	xdr.c	FUNCTION_4	CALL_1
0x4000abd	            0x89c2	                            mov edx, eax	        88	xdr.c	FUNCTION_4	CALL_2
0x4000abf	              0x5b	                                 pop rbx	        96	xdr.c	FUNCTION_5
0x4000ac0	              0x5d	                                 pop rbp	        96	xdr.c	FUNCTION_5
0x4000ac1	      0xe92affffff	         jmp sym.xdr_encode_opaque_fixed	        88	xdr.c	FUNCTION_4	CALL_2
xdr_decode_string_inplace	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,1:WHILE,0:SWITCH,0	13
0x40004c0	        0x4c8d4704	                       lea r8, [rdi + 4]	       105	xdr.c	FUNCTION_6	CALL_1
0x40004c4	            0x8b3f	                    mov edi, dword [rdi]	       105	xdr.c	FUNCTION_6	CALL_1
0x40004c6	             0xfcf	                               bswap edi	       105	xdr.c	FUNCTION_6	CALL_1
0x40004c8	            0x39cf	                            cmp edi, ecx	       106	xdr.c	FUNCTION_6	IF_1
0x40004ca	            0x7710	                            ja 0x40004dc	       106	xdr.c	FUNCTION_6	IF_1
0x40004cc	        0x488d4703	                      lea rax, [rdi + 3]	       110	xdr.c	FUNCTION_6	CALL_2
0x40004d0	            0x893a	                    mov dword [rdx], edi	       108	xdr.c	FUNCTION_6
0x40004d2	          0x4c8906	                     mov qword [rsi], r8	       109	xdr.c	FUNCTION_6
0x40004d5	          0x83e0fc	                     and eax, 0xfffffffc	       110	xdr.c	FUNCTION_6	CALL_2
0x40004d8	          0x4c01c0	                             add rax, r8	       110	xdr.c	FUNCTION_6	CALL_2
0x40004db	              0xc3	                                     ret	       110	xdr.c	FUNCTION_6	CALL_2
0x40004dc	            0x31c0	                            xor eax, eax	       107	xdr.c	FUNCTION_6	IF_1
0x40004de	              0xc3	                                     ret	       111	xdr.c	FUNCTION_6
xdr_align_pages	FOR,0:ELSE,1:functions,0:CALL,6:DO,0:IF,5:WHILE,0:SWITCH,0	111
0x40010c0	          0x8b4738	            mov eax, dword [rdi + 0x38] 	       443	xdr.c	FUNCTION_15	CALL_1
0x40010c3	            0x85c0	                           test eax, eax	       914	xdr.c	FUNCTION_33	IF_1
0x40010c5	            0x7463	                            je 0x400112a	       914	xdr.c	FUNCTION_33	IF_1
0x40010c7	            0x4157	                                push r15	       908	xdr.c	FUNCTION_33
0x40010c9	            0x4156	                                push r14	       908	xdr.c	FUNCTION_33
0x40010cb	            0x4155	                                push r13	       908	xdr.c	FUNCTION_33
0x40010cd	            0x4154	                                push r12	       908	xdr.c	FUNCTION_33
0x40010cf	          0x4189f5	                           mov r13d, esi	       908	xdr.c	FUNCTION_33
0x40010d2	              0x55	                                push rbp	       908	xdr.c	FUNCTION_33
0x40010d3	              0x53	                                push rbx	       908	xdr.c	FUNCTION_33
0x40010d4	          0x4889fd	                            mov rbp, rdi	       908	xdr.c	FUNCTION_33
0x40010d7	        0x4883ec08	                              sub rsp, 8	       908	xdr.c	FUNCTION_33
0x40010db	        0x4c8b6708	                mov r12, qword [rdi + 8]	       909	xdr.c	FUNCTION_33
0x40010df	      0x418b4c2438	            mov ecx, dword [r12 + 0x38] 	       443	xdr.c	FUNCTION_15	CALL_1
0x40010e4	      0x498b742408	                mov rsi, qword [r12 + 8]	       918	xdr.c	FUNCTION_33	IF_2
0x40010e9	          0x8d5903	                      lea ebx, [rcx + 3]	       443	xdr.c	FUNCTION_15	CALL_1
0x40010ec	          0xc1eb02	                              shr ebx, 2	       443	xdr.c	FUNCTION_15	CALL_1
0x40010ef	            0x29c3	                            sub ebx, eax	       443	xdr.c	FUNCTION_15	CALL_1
0x40010f1	    0x8d149d000000	                        lea edx, [rbx*4]	       443	xdr.c	FUNCTION_15	CALL_1
0x40010f8	          0x4839d6	                            cmp rsi, rdx	       918	xdr.c	FUNCTION_33	IF_2
0x40010fb	          0x4889d3	                            mov rbx, rdx	       443	xdr.c	FUNCTION_15	CALL_1
0x40010fe	     0xf87d7000000	                            ja 0x40011db	       918	xdr.c	FUNCTION_33	IF_2
0x4001104	        0x418d5503	                      lea edx, [r13 + 3]	       911	xdr.c	FUNCTION_33	CALL_1
0x4001108	          0xc1ea02	                              shr edx, 2	       911	xdr.c	FUNCTION_33	CALL_1
0x400110b	            0x39c2	                            cmp edx, eax	       923	xdr.c	FUNCTION_33	IF_3
0x400110d	            0x761d	                           jbe 0x400112c	       923	xdr.c	FUNCTION_33	IF_3
0x400110f	      0x418b54242c	            mov edx, dword [r12 + 0x2c] 	       923	xdr.c	FUNCTION_33	IF_3
0x4001114	          0xc1e002	                              shl eax, 2	       923	xdr.c	FUNCTION_33	IF_3
0x4001117	            0x39d0	                            cmp eax, edx	       923	xdr.c	FUNCTION_33	IF_3
0x4001119	           0xf47c2	                          cmova eax, edx	       923	xdr.c	FUNCTION_33	IF_3
0x400111c	        0x4883c408	                              add rsp, 8	       935	xdr.c	FUNCTION_33
0x4001120	              0x5b	                                 pop rbx	       935	xdr.c	FUNCTION_33
0x4001121	              0x5d	                                 pop rbp	       935	xdr.c	FUNCTION_33
0x4001122	            0x415c	                                 pop r12	       935	xdr.c	FUNCTION_33
0x4001124	            0x415d	                                 pop r13	       935	xdr.c	FUNCTION_33
0x4001126	            0x415e	                                 pop r14	       935	xdr.c	FUNCTION_33
0x4001128	            0x415f	                                 pop r15	       935	xdr.c	FUNCTION_33
0x400112a	            0xf3c3	                                     ret	       935	xdr.c	FUNCTION_33
0x400112c	      0x458b74242c	           mov r14d, dword [r12 + 0x2c] 	       927	xdr.c	FUNCTION_33	IF_4
0x4001131	          0x4539f5	                          cmp r13d, r14d	       927	xdr.c	FUNCTION_33	IF_4
0x4001134	     0xf83d0000000	                           jae 0x400120a	       927	xdr.c	FUNCTION_33	IF_4
0x400113a	            0x39c2	                            cmp edx, eax	       929	xdr.c	FUNCTION_33	ELSE_1	IF_5
0x400113c	     0xf83f4000000	                           jae 0x4001236	       929	xdr.c	FUNCTION_33	ELSE_1	IF_5
0x4001142	          0x4589f7	                          mov r15d, r14d	       931	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_5
0x4001145	          0x4529ef	                          sub r15d, r13d	       931	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_5
0x4001148	          0x4539fe	                          cmp r14d, r15d	       400	xdr.c	FUNCTION_13	CALL_1
0x400114b	          0x4589f8	                           mov r8d, r15d	       400	xdr.c	FUNCTION_13	CALL_1
0x400114e	     0xf82ea000000	                            jb 0x400123e	       400	xdr.c	FUNCTION_13	CALL_1
0x4001154	      0x418b442434	            mov eax, dword [r12 + 0x34] 	       402	xdr.c	FUNCTION_13
0x4001159	            0x89c1	                            mov ecx, eax	       402	xdr.c	FUNCTION_13
0x400115b	      0x412b4c2408	                sub ecx, dword [r12 + 8]	       402	xdr.c	FUNCTION_13
0x4001160	          0x4429f1	                           sub ecx, r14d	       405	xdr.c	FUNCTION_13	IF_1
0x4001163	            0x7443	                            je 0x40011a8	       405	xdr.c	FUNCTION_13	IF_1
0x4001165	      0x498b542418	            mov rdx, qword [r12 + 0x18] 	       406	xdr.c	FUNCTION_13	IF_1
0x400116a	            0x29d1	                            sub ecx, edx	       406	xdr.c	FUNCTION_13	IF_1
0x400116c	          0x4c39c1	                             cmp rcx, r8	       406	xdr.c	FUNCTION_13	IF_1
0x400116f	        0x490f47c8	                           cmova rcx, r8	       406	xdr.c	FUNCTION_13	IF_1
0x4001173	          0x4801d1	                            add rcx, rdx	       410	xdr.c	FUNCTION_13	IF_1
0x4001176	          0x4939c8	                             cmp r8, rcx	       413	xdr.c	FUNCTION_13	IF_1	IF_3
0x4001179	      0x49894c2418	             mov qword [r12 + 0x18], rcx	       410	xdr.c	FUNCTION_13	IF_1
0x400117e	     0xf828e000000	                            jb 0x4001212	       413	xdr.c	FUNCTION_13	IF_1	IF_3
0x4001184	          0x4489f2	                           mov edx, r14d	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x4001187	      0x4103542428	             add edx, dword [r12 + 0x28]	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x400118c	      0x498b742420	            mov rsi, qword [r12 + 0x20] 	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x4001191	      0x498b7c2410	            mov rdi, qword [r12 + 0x10] 	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x4001196	          0x4c29c2	                             sub rdx, r8	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x4001199	      0xe800000000	                          call 0x400119e	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x400119e	      0x458b74242c	           mov r14d, dword [r12 + 0x2c] 	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x40011a3	      0x418b442434	            mov eax, dword [r12 + 0x34] 	       419	xdr.c	FUNCTION_13	IF_1	CALL_3
0x40011a8	      0x418b542438	            mov edx, dword [r12 + 0x38] 	       426	xdr.c	FUNCTION_13	IF_4
0x40011ad	          0x4429f8	                           sub eax, r15d	       424	xdr.c	FUNCTION_13
0x40011b0	          0x4529fe	                          sub r14d, r15d	       423	xdr.c	FUNCTION_13
0x40011b3	      0x458974242c	            mov dword [r12 + 0x2c], r14d	       423	xdr.c	FUNCTION_13
0x40011b8	      0x4189442434	             mov dword [r12 + 0x34], eax	       424	xdr.c	FUNCTION_13
0x40011bd	            0x39d0	                            cmp eax, edx	       426	xdr.c	FUNCTION_13	IF_4
0x40011bf	            0x7307	                           jae 0x40011c8	       426	xdr.c	FUNCTION_13	IF_4
0x40011c1	      0x4189442438	             mov dword [r12 + 0x38], eax	       427	xdr.c	FUNCTION_13	IF_4
0x40011c6	            0x89c2	                            mov edx, eax	       427	xdr.c	FUNCTION_13	IF_4
0x40011c8	            0x29da	                            sub edx, ebx	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011ca	          0x8d4203	                      lea eax, [rdx + 3]	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011cd	          0xc1e802	                              shr eax, 2	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011d0	          0x894538	            mov dword [rbp + 0x38], eax 	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011d3	          0x4489e8	                           mov eax, r13d	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011d6	      0xe941ffffff	                           jmp 0x400111c	       932	xdr.c	FUNCTION_33	ELSE_1	IF_5	CALL_6
0x40011db	          0x4829d6	                            sub rsi, rdx	       919	xdr.c	FUNCTION_33	IF_2	CALL_3
0x40011de	          0x4c89e7	                            mov rdi, r12	       919	xdr.c	FUNCTION_33	IF_2	CALL_3
0x40011e1	      0xe82afcffff	             call sym.xdr_shrink_bufhead	       919	xdr.c	FUNCTION_33	IF_2	CALL_3
0x40011e6	      0x418b442438	            mov eax, dword [r12 + 0x38] 	       920	xdr.c	FUNCTION_33	IF_2	CALL_4
0x40011eb	        0x418d5503	                      lea edx, [r13 + 3]	       911	xdr.c	FUNCTION_33	CALL_1
0x40011ef	          0xc1ea02	                              shr edx, 2	       911	xdr.c	FUNCTION_33	CALL_1
0x40011f2	          0x83c003	                              add eax, 3	       920	xdr.c	FUNCTION_33	IF_2	CALL_4
0x40011f5	            0x29d8	                            sub eax, ebx	       920	xdr.c	FUNCTION_33	IF_2	CALL_4
0x40011f7	          0xc1e802	                              shr eax, 2	       920	xdr.c	FUNCTION_33	IF_2	CALL_4
0x40011fa	            0x39c2	                            cmp edx, eax	       923	xdr.c	FUNCTION_33	IF_3
0x40011fc	          0x894538	            mov dword [rbp + 0x38], eax 	       920	xdr.c	FUNCTION_33	IF_2	CALL_4
0x40011ff	     0xf8627ffffff	                           jbe 0x400112c	       923	xdr.c	FUNCTION_33	IF_3
0x4001205	      0xe905ffffff	                           jmp 0x400110f	       923	xdr.c	FUNCTION_33	IF_3
0x400120a	          0x4489f0	                           mov eax, r14d	       923	xdr.c	FUNCTION_33	IF_3
0x400120d	      0xe90affffff	                           jmp 0x400111c	       923	xdr.c	FUNCTION_33	IF_3
0x4001212	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       414	xdr.c	FUNCTION_13	IF_1	IF_3
0x4001217	          0x4c29c1	                             sub rcx, r8	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x400121a	        0x4c890424	                     mov qword [rsp], r8	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x400121e	          0x4889ca	                            mov rdx, rcx	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x4001221	        0x4a8d3c06	                     lea rdi, [rsi + r8]	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x4001225	      0xe800000000	                          call 0x400122a	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x400122a	        0x4c8b0424	                     mov r8, qword [rsp]	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x400122e	          0x4c89c1	                             mov rcx, r8	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x4001231	      0xe94effffff	                           jmp 0x4001184	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x4001236	          0x4489e8	                           mov eax, r13d	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x4001239	      0xe9defeffff	                           jmp 0x400111c	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
0x400123e	             0xf0b	                                     ud2	       415	xdr.c	FUNCTION_13	IF_1	IF_3	CALL_2
xdr_decode_netobj	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,1:WHILE,0:SWITCH,0	13
0x4000490	            0x8b17	                    mov edx, dword [rdi]	        39	xdr.c	FUNCTION_2	IF_1	CALL_1
0x4000492	        0x488d4f04	                      lea rcx, [rdi + 4]	        39	xdr.c	FUNCTION_2	IF_1	CALL_1
0x4000496	             0xfca	                               bswap edx	        39	xdr.c	FUNCTION_2	IF_1	CALL_1
0x4000498	    0x81fa00040000	                          cmp edx, 0x400	        39	xdr.c	FUNCTION_2	IF_1	CALL_1
0x400049e	            0x7711	                            ja 0x40004b1	        39	xdr.c	FUNCTION_2	IF_1	CALL_1
0x40004a0	        0x488d4203	                      lea rax, [rdx + 3]	        43	xdr.c	FUNCTION_2	CALL_2
0x40004a4	            0x8916	                    mov dword [rsi], edx	        41	xdr.c	FUNCTION_2
0x40004a6	        0x48894e08	                mov qword [rsi + 8], rcx	        42	xdr.c	FUNCTION_2
0x40004aa	          0x83e0fc	                     and eax, 0xfffffffc	        43	xdr.c	FUNCTION_2	CALL_2
0x40004ad	          0x4801c8	                            add rax, rcx	        43	xdr.c	FUNCTION_2	CALL_2
0x40004b0	              0xc3	                                     ret	        43	xdr.c	FUNCTION_2	CALL_2
0x40004b1	            0x31c0	                            xor eax, eax	        40	xdr.c	FUNCTION_2	IF_1
0x40004b3	              0xc3	                                     ret	        44	xdr.c	FUNCTION_2
xdr_encode_array2	FOR,0:ELSE,0:functions,0:CALL,1:DO,0:IF,1:WHILE,0:SWITCH,0	15
0x4001a00	          0x8b4204	                mov eax, dword [rdx + 4]	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a03	            0x89f1	                            mov ecx, esi	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a05	           0xfaf02	                   imul eax, dword [rdx]	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a08	      0x4c8d440804	                 lea r8, [rax + rcx + 4]	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a0d	        0x488b4718	            mov rax, qword [rdi + 0x18] 	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a11	        0x48034708	                add rax, qword [rdi + 8]	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a15	          0x4889c1	                            mov rcx, rax	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a18	          0x8b472c	            mov eax, dword [rdi + 0x2c] 	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a1b	          0x4801c8	                            add rax, rcx	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a1e	          0x4939c0	                             cmp r8, rax	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a21	            0x770a	                            ja 0x4001a2d	      1446	xdr.c	FUNCTION_48	IF_1
0x4001a23	      0xb901000000	                              mov ecx, 1	      1450	xdr.c	FUNCTION_48	CALL_1
0x4001a28	      0xe9a3f8ffff	                jmp sym.xdr_xcode_array2	      1450	xdr.c	FUNCTION_48	CALL_1
0x4001a2d	      0xb8eaffffff	                     mov eax, 0xffffffea	      1451	xdr.c	FUNCTION_48
0x4001a32	              0xc3	                                     ret	      1451	xdr.c	FUNCTION_48
xdr_buf_trim	FOR,0:ELSE,0:functions,0:CALL,3:DO,0:IF,5:WHILE,0:SWITCH,0	42
0x4000420	        0x488b4718	            mov rax, qword [rdi + 0x18] 	      1087	xdr.c	FUNCTION_38	IF_1
0x4000424	          0x4885c0	                           test rax, rax	      1087	xdr.c	FUNCTION_38	IF_1
0x4000427	            0x744e	                            je 0x4000477	      1087	xdr.c	FUNCTION_38	IF_1
0x4000429	            0x89f2	                            mov edx, esi	      1088	xdr.c	FUNCTION_38	IF_1	CALL_1
0x400042b	          0x4839c2	                            cmp rdx, rax	      1088	xdr.c	FUNCTION_38	IF_1	CALL_1
0x400042e	        0x480f47d0	                          cmova rdx, rax	      1088	xdr.c	FUNCTION_38	IF_1	CALL_1
0x4000432	          0x4829d0	                            sub rax, rdx	      1089	xdr.c	FUNCTION_38	IF_1
0x4000435	        0x48894718	             mov qword [rdi + 0x18], rax	      1089	xdr.c	FUNCTION_38	IF_1
0x4000439	            0x89f0	                            mov eax, esi	      1091	xdr.c	FUNCTION_38	IF_1	IF_2
0x400043b	            0x29d0	                            sub eax, edx	      1091	xdr.c	FUNCTION_38	IF_1	IF_2
0x400043d	            0x7443	                            je 0x4000482	      1091	xdr.c	FUNCTION_38	IF_1	IF_2
0x400043f	          0x8b572c	            mov edx, dword [rdi + 0x2c] 	      1095	xdr.c	FUNCTION_38	IF_3
0x4000442	            0x85d2	                           test edx, edx	      1095	xdr.c	FUNCTION_38	IF_3
0x4000444	            0x7410	                            je 0x4000456	      1095	xdr.c	FUNCTION_38	IF_3
0x4000446	            0x39d0	                            cmp eax, edx	      1096	xdr.c	FUNCTION_38	IF_3	CALL_2
0x4000448	            0x89d1	                            mov ecx, edx	      1096	xdr.c	FUNCTION_38	IF_3	CALL_2
0x400044a	           0xf46c8	                         cmovbe ecx, eax	      1096	xdr.c	FUNCTION_38	IF_3	CALL_2
0x400044d	            0x29ca	                            sub edx, ecx	      1097	xdr.c	FUNCTION_38	IF_3
0x400044f	            0x29c8	                            sub eax, ecx	      1099	xdr.c	FUNCTION_38	IF_3	IF_4
0x4000451	          0x89572c	             mov dword [rdi + 0x2c], edx	      1097	xdr.c	FUNCTION_38	IF_3
0x4000454	            0x742c	                            je 0x4000482	      1099	xdr.c	FUNCTION_38	IF_3	IF_4
0x4000456	        0x488b5708	                mov rdx, qword [rdi + 8]	      1103	xdr.c	FUNCTION_38	IF_5
0x400045a	          0x4885d2	                           test rdx, rdx	      1103	xdr.c	FUNCTION_38	IF_5
0x400045d	            0x7412	                            je 0x4000471	      1103	xdr.c	FUNCTION_38	IF_5
0x400045f	            0x89c1	                            mov ecx, eax	      1104	xdr.c	FUNCTION_38	IF_5	CALL_3
0x4000461	          0x4839d1	                            cmp rcx, rdx	      1104	xdr.c	FUNCTION_38	IF_5	CALL_3
0x4000464	        0x480f47ca	                          cmova rcx, rdx	      1104	xdr.c	FUNCTION_38	IF_5	CALL_3
0x4000468	          0x4829ca	                            sub rdx, rcx	      1105	xdr.c	FUNCTION_38	IF_5
0x400046b	            0x29c8	                            sub eax, ecx	      1106	xdr.c	FUNCTION_38	IF_5
0x400046d	        0x48895708	                mov qword [rdi + 8], rdx	      1105	xdr.c	FUNCTION_38	IF_5
0x4000471	            0x29f0	                            sub eax, esi	      1109	xdr.c	FUNCTION_38
0x4000473	           0x14738	             add dword [rdi + 0x38], eax	      1109	xdr.c	FUNCTION_38
0x4000476	              0xc3	                                     ret	      1109	xdr.c	FUNCTION_38
0x4000477	          0x8b572c	            mov edx, dword [rdi + 0x2c] 	      1095	xdr.c	FUNCTION_38	IF_3
0x400047a	            0x89f0	                            mov eax, esi	      1085	xdr.c	FUNCTION_38
0x400047c	            0x85d2	                           test edx, edx	      1095	xdr.c	FUNCTION_38	IF_3
0x400047e	            0x74d6	                            je 0x4000456	      1095	xdr.c	FUNCTION_38	IF_3
0x4000480	            0xebc4	                           jmp 0x4000446	      1095	xdr.c	FUNCTION_38	IF_3
0x4000482	            0x31c0	                            xor eax, eax	      1085	xdr.c	FUNCTION_38
0x4000484	            0x29f0	                            sub eax, esi	      1109	xdr.c	FUNCTION_38
0x4000486	           0x14738	             add dword [rdi + 0x38], eax	      1109	xdr.c	FUNCTION_38
0x4000489	              0xc3	                                     ret	      1109	xdr.c	FUNCTION_38
write_bytes_to_xdr_buf	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,1:WHILE,0:SWITCH,0	66
0x40008c0	      0x4c8d542408	                      lea r10, [rsp + 8]	      1163	xdr.c	FUNCTION_42
0x40008c5	        0x4883e4f0	             and rsp, 0xfffffffffffffff0	      1163	xdr.c	FUNCTION_42
0x40008c9	        0x41ff72f8	                    push qword [r10 - 8]	      1163	xdr.c	FUNCTION_42
0x40008cd	              0x55	                                push rbp	      1163	xdr.c	FUNCTION_42
0x40008ce	          0x4889e5	                            mov rbp, rsp	      1163	xdr.c	FUNCTION_42
0x40008d1	            0x4156	                                push r14	      1163	xdr.c	FUNCTION_42
0x40008d3	            0x4155	                                push r13	      1163	xdr.c	FUNCTION_42
0x40008d5	            0x4154	                                push r12	      1163	xdr.c	FUNCTION_42
0x40008d7	            0x4152	                                push r10	      1163	xdr.c	FUNCTION_42
0x40008d9	          0x4989d4	                            mov r12, rdx	      1163	xdr.c	FUNCTION_42
0x40008dc	              0x53	                                push rbx	      1163	xdr.c	FUNCTION_42
0x40008dd	            0x89f2	                            mov edx, esi	      1167	xdr.c	FUNCTION_42	CALL_1
0x40008df	        0x488d7580	                   lea rsi, [rbp - 0x80]	      1167	xdr.c	FUNCTION_42	CALL_1
0x40008e3	            0x89cb	                            mov ebx, ecx	      1163	xdr.c	FUNCTION_42
0x40008e5	        0x4883ec58	                           sub rsp, 0x58	      1163	xdr.c	FUNCTION_42
0x40008e9	    0x65488b042528	                mov rax, qword gs:[0x28]	      1163	xdr.c	FUNCTION_42
0x40008f2	        0x488945c8	             mov qword [rbp - 0x38], rax	      1163	xdr.c	FUNCTION_42
0x40008f6	            0x31c0	                            xor eax, eax	      1163	xdr.c	FUNCTION_42
0x40008f8	      0xe800000000	                          call 0x40008fd	      1167	xdr.c	FUNCTION_42	CALL_1
0x40008fd	            0x85c0	                           test eax, eax	      1168	xdr.c	FUNCTION_42	IF_1
0x40008ff	            0x7426	                            je 0x4000927	      1168	xdr.c	FUNCTION_42	IF_1
0x4000901	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1172	xdr.c	FUNCTION_42
0x4000905	    0x6548330c2528	                xor rcx, qword gs:[0x28]	      1172	xdr.c	FUNCTION_42
0x400090e	     0xf8580000000	                           jne 0x4000994	      1172	xdr.c	FUNCTION_42
0x4000914	        0x4883c458	                           add rsp, 0x58	      1172	xdr.c	FUNCTION_42
0x4000918	              0x5b	                                 pop rbx	      1172	xdr.c	FUNCTION_42
0x4000919	            0x415a	                                 pop r10	      1172	xdr.c	FUNCTION_42
0x400091b	            0x415c	                                 pop r12	      1172	xdr.c	FUNCTION_42
0x400091d	            0x415d	                                 pop r13	      1172	xdr.c	FUNCTION_42
0x400091f	            0x415e	                                 pop r14	      1172	xdr.c	FUNCTION_42
0x4000921	              0x5d	                                 pop rbp	      1172	xdr.c	FUNCTION_42
0x4000922	        0x498d62f8	                      lea rsp, [r10 - 8]	      1172	xdr.c	FUNCTION_42
0x4000926	              0xc3	                                     ret	      1172	xdr.c	FUNCTION_42
0x4000927	        0x4c8b6d88	             mov r13, qword [rbp - 0x78]	      1148	xdr.c	FUNCTION_41	CALL_1
0x400092b	        0x488b7d80	             mov rdi, qword [rbp - 0x80]	      1149	xdr.c	FUNCTION_41	CALL_2
0x400092f	          0x4c89e6	                            mov rsi, r12	      1149	xdr.c	FUNCTION_41	CALL_2
0x4000932	          0x4439eb	                           cmp ebx, r13d	      1148	xdr.c	FUNCTION_41	CALL_1
0x4000935	        0x440f42eb	                         cmovb r13d, ebx	      1148	xdr.c	FUNCTION_41	CALL_1
0x4000939	          0x4589ee	                          mov r14d, r13d	      1149	xdr.c	FUNCTION_41	CALL_2
0x400093c	          0x4429eb	                           sub ebx, r13d	      1150	xdr.c	FUNCTION_41
0x400093f	          0x4c89f2	                            mov rdx, r14	      1149	xdr.c	FUNCTION_41	CALL_2
0x4000942	          0x4d01f4	                            add r12, r14	      1151	xdr.c	FUNCTION_41
0x4000945	          0x4189dd	                           mov r13d, ebx	      1152	xdr.c	FUNCTION_41	CALL_3
0x4000948	      0xe800000000	                          call 0x400094d	      1149	xdr.c	FUNCTION_41	CALL_2
0x400094d	          0x395dac	            cmp dword [rbp - 0x54], ebx 	      1152	xdr.c	FUNCTION_41	CALL_3
0x4000950	      0x440f466dac	         cmovbe r13d, dword [rbp - 0x54]	      1152	xdr.c	FUNCTION_41	CALL_3
0x4000955	          0x4531f6	                          xor r14d, r14d	      1153	xdr.c	FUNCTION_41	IF_1
0x4000958	          0x4585ed	                         test r13d, r13d	      1153	xdr.c	FUNCTION_41	IF_1
0x400095b	            0x7415	                            je 0x4000972	      1153	xdr.c	FUNCTION_41	IF_1
0x400095d	          0x8b75a8	             mov esi, dword [rbp - 0x58]	      1154	xdr.c	FUNCTION_41	CALL_4
0x4000960	        0x488b7da0	             mov rdi, qword [rbp - 0x60]	      1154	xdr.c	FUNCTION_41	CALL_4
0x4000964	          0x4589ee	                          mov r14d, r13d	      1154	xdr.c	FUNCTION_41	CALL_4
0x4000967	          0x4c89f1	                            mov rcx, r14	      1154	xdr.c	FUNCTION_41	CALL_4
0x400096a	          0x4c89e2	                            mov rdx, r12	      1154	xdr.c	FUNCTION_41	CALL_4
0x400096d	      0xe8aefeffff	                 call sym._copy_to_pages	      1154	xdr.c	FUNCTION_41	CALL_4
0x4000972	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      1158	xdr.c	FUNCTION_41	CALL_6
0x4000976	          0x4429eb	                           sub ebx, r13d	      1155	xdr.c	FUNCTION_41
0x4000979	        0x488b7d90	             mov rdi, qword [rbp - 0x70]	      1158	xdr.c	FUNCTION_41	CALL_6
0x400097d	        0x4b8d3434	                    lea rsi, [r12 + r14]	      1158	xdr.c	FUNCTION_41	CALL_6
0x4000981	            0x39d3	                            cmp ebx, edx	      1158	xdr.c	FUNCTION_41	CALL_6
0x4000983	           0xf43da	                         cmovae ebx, edx	      1158	xdr.c	FUNCTION_41	CALL_6
0x4000986	            0x89da	                            mov edx, ebx	      1158	xdr.c	FUNCTION_41	CALL_6
0x4000988	      0xe800000000	                          call 0x400098d	      1158	xdr.c	FUNCTION_41	CALL_6
0x400098d	            0x31c0	                            xor eax, eax	      1171	xdr.c	FUNCTION_42
0x400098f	      0xe96dffffff	                           jmp 0x4000901	      1171	xdr.c	FUNCTION_42
0x4000994	      0xe800000000	                          call 0x4000999	      1172	xdr.c	FUNCTION_42
xdr_init_decode_pages	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,0:WHILE,0:SWITCH,0	19
0x4000a50	          0x4989f9	                             mov r9, rdi	       818	xdr.c	FUNCTION_28
0x4000a53	        0x488d7e08	                      lea rdi, [rsi + 8]	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a57	          0x4189c8	                            mov r8d, ecx	       818	xdr.c	FUNCTION_28
0x4000a5a	          0x4889f1	                            mov rcx, rsi	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a5d	            0x31c0	                            xor eax, eax	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a5f	    0x48c746380000	               mov qword [rsi + 0x38], 0	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a67	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a6b	    0x48c706000000	                      mov qword [rsi], 0	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a72	          0x4829f9	                            sub rcx, rdi	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a75	          0x83c140	                           add ecx, 0x40	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a78	          0xc1e903	                              shr ecx, 3	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a7b	          0xf348ab	              rep stosq qword [rdi], rax	       819	xdr.c	FUNCTION_28	CALL_1
0x4000a7e	        0x48895620	             mov qword [rsi + 0x20], rdx	       820	xdr.c	FUNCTION_28
0x4000a82	        0x4489462c	             mov dword [rsi + 0x2c], r8d	       821	xdr.c	FUNCTION_28
0x4000a86	            0x31d2	                            xor edx, edx	       824	xdr.c	FUNCTION_28	CALL_2
0x4000a88	        0x44894634	             mov dword [rsi + 0x34], r8d	       822	xdr.c	FUNCTION_28
0x4000a8c	        0x44894638	             mov dword [rsi + 0x38], r8d	       823	xdr.c	FUNCTION_28
0x4000a90	          0x4c89cf	                             mov rdi, r9	       824	xdr.c	FUNCTION_28	CALL_2
0x4000a93	      0xe9a8f7ffff	                 jmp sym.xdr_init_decode	       824	xdr.c	FUNCTION_28	CALL_2
xdr_buf_from_iov	FOR,0:ELSE,0:functions,0:CALL,0:DO,0:IF,0:WHILE,0:SWITCH,0	18
0x4000300	          0x488b07	                    mov rax, qword [rdi]	      1006	xdr.c	FUNCTION_36
0x4000303	        0x488b5708	                mov rdx, qword [rdi + 8]	      1006	xdr.c	FUNCTION_36
0x4000307	    0xc7462c000000	               mov dword [rsi + 0x2c], 0	      1008	xdr.c	FUNCTION_36
0x400030e	              0x55	                                push rbp	      1005	xdr.c	FUNCTION_36
0x400030f	          0x488906	                    mov qword [rsi], rax	      1006	xdr.c	FUNCTION_36
0x4000312	        0x48895608	                mov qword [rsi + 8], rdx	      1006	xdr.c	FUNCTION_36
0x4000316	          0x4889e5	                            mov rbp, rsp	      1005	xdr.c	FUNCTION_36
0x4000319	    0x488b05000000	            mov rax, qword [0x04000320] 	      1007	xdr.c	FUNCTION_36
0x4000320	    0x488b15000000	            mov rdx, qword [0x04000327] 	      1007	xdr.c	FUNCTION_36
0x4000327	            0x4152	                                push r10	      1005	xdr.c	FUNCTION_36
0x4000329	            0x415a	                                 pop r10	      1010	xdr.c	FUNCTION_36
0x400032b	        0x48894610	             mov qword [rsi + 0x10], rax	      1007	xdr.c	FUNCTION_36
0x400032f	        0x48895618	             mov qword [rsi + 0x18], rdx	      1007	xdr.c	FUNCTION_36
0x4000333	        0x488b4708	                mov rax, qword [rdi + 8]	      1009	xdr.c	FUNCTION_36
0x4000337	              0x5d	                                 pop rbp	      1010	xdr.c	FUNCTION_36
0x4000338	          0x894638	             mov dword [rsi + 0x38], eax	      1009	xdr.c	FUNCTION_36
0x400033b	          0x894634	             mov dword [rsi + 0x34], eax	      1009	xdr.c	FUNCTION_36
0x400033e	              0xc3	                                     ret	      1010	xdr.c	FUNCTION_36
read_bytes_from_xdr_buf	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,1:WHILE,0:SWITCH,0	32
0x4000650	      0x4c8d542408	                      lea r10, [rsp + 8]	      1132	xdr.c	FUNCTION_40
0x4000655	        0x4883e4f0	             and rsp, 0xfffffffffffffff0	      1132	xdr.c	FUNCTION_40
0x4000659	          0x4189c9	                            mov r9d, ecx	      1132	xdr.c	FUNCTION_40
0x400065c	        0x41ff72f8	                    push qword [r10 - 8]	      1132	xdr.c	FUNCTION_40
0x4000660	              0x55	                                push rbp	      1132	xdr.c	FUNCTION_40
0x4000661	          0x4889e5	                            mov rbp, rsp	      1132	xdr.c	FUNCTION_40
0x4000664	            0x4152	                                push r10	      1132	xdr.c	FUNCTION_40
0x4000666	          0x4989d2	                            mov r10, rdx	      1132	xdr.c	FUNCTION_40
0x4000669	            0x89f2	                            mov edx, esi	      1136	xdr.c	FUNCTION_40	CALL_1
0x400066b	        0x488d75a0	                   lea rsi, [rbp - 0x60]	      1136	xdr.c	FUNCTION_40	CALL_1
0x400066f	        0x4883ec68	                           sub rsp, 0x68	      1132	xdr.c	FUNCTION_40
0x4000673	    0x65488b042528	                mov rax, qword gs:[0x28]	      1132	xdr.c	FUNCTION_40
0x400067c	        0x488945e8	             mov qword [rbp - 0x18], rax	      1132	xdr.c	FUNCTION_40
0x4000680	            0x31c0	                            xor eax, eax	      1132	xdr.c	FUNCTION_40
0x4000682	      0xe800000000	                          call 0x4000687	      1136	xdr.c	FUNCTION_40	CALL_1
0x4000687	            0x85c0	                           test eax, eax	      1137	xdr.c	FUNCTION_40	IF_1
0x4000689	            0x7515	                           jne 0x40006a0	      1137	xdr.c	FUNCTION_40	IF_1
0x400068b	        0x488d7da0	                   lea rdi, [rbp - 0x60]	      1139	xdr.c	FUNCTION_40	CALL_2
0x400068f	          0x4489ca	                            mov edx, r9d	      1139	xdr.c	FUNCTION_40	CALL_2
0x4000692	          0x4c89d6	                            mov rsi, r10	      1139	xdr.c	FUNCTION_40	CALL_2
0x4000695	          0x89459c	             mov dword [rbp - 0x64], eax	      1139	xdr.c	FUNCTION_40	CALL_2
0x4000698	      0xe833ffffff	      call sym.__read_bytes_from_xdr_buf	      1139	xdr.c	FUNCTION_40	CALL_2
0x400069d	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1139	xdr.c	FUNCTION_40	CALL_2
0x40006a0	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1141	xdr.c	FUNCTION_40
0x40006a4	    0x6548330c2528	                xor rcx, qword gs:[0x28]	      1141	xdr.c	FUNCTION_40
0x40006ad	            0x750c	                           jne 0x40006bb	      1141	xdr.c	FUNCTION_40
0x40006af	        0x4883c468	                           add rsp, 0x68	      1141	xdr.c	FUNCTION_40
0x40006b3	            0x415a	                                 pop r10	      1141	xdr.c	FUNCTION_40
0x40006b5	              0x5d	                                 pop rbp	      1141	xdr.c	FUNCTION_40
0x40006b6	        0x498d62f8	                      lea rsp, [r10 - 8]	      1141	xdr.c	FUNCTION_40
0x40006ba	              0xc3	                                     ret	      1141	xdr.c	FUNCTION_40
0x40006bb	      0xe800000000	                call sym.xdr_decode_word	      1141	xdr.c	FUNCTION_40
xdr_init_decode	FOR,0:ELSE,2:functions,0:CALL,4:DO,0:IF,3:WHILE,0:SWITCH,0	53
0x4000240	            0x4156	                                push r14	       791	xdr.c	FUNCTION_27
0x4000242	        0x48897708	                mov qword [rdi + 8], rsi	       792	xdr.c	FUNCTION_27
0x4000246	          0x4989d6	                            mov r14, rdx	       791	xdr.c	FUNCTION_27
0x4000249	              0x53	                                push rbx	       791	xdr.c	FUNCTION_27
0x400024a	    0x48c747200000	               mov qword [rdi + 0x20], 0	       793	xdr.c	FUNCTION_27
0x4000252	          0x4889fb	                            mov rbx, rdi	       791	xdr.c	FUNCTION_27
0x4000255	    0x48c747280000	               mov qword [rdi + 0x28], 0	       794	xdr.c	FUNCTION_27
0x400025d	          0x8b4638	            mov eax, dword [rsi + 0x38] 	       795	xdr.c	FUNCTION_27	CALL_1
0x4000260	          0x83c003	                              add eax, 3	       795	xdr.c	FUNCTION_27	CALL_1
0x4000263	          0xc1e802	                              shr eax, 2	       795	xdr.c	FUNCTION_27	CALL_1
0x4000266	          0x894738	             mov dword [rdi + 0x38], eax	       795	xdr.c	FUNCTION_27	CALL_1
0x4000269	        0x488b5608	                mov rdx, qword [rsi + 8]	       796	xdr.c	FUNCTION_27	IF_1
0x400026d	          0x4885d2	                           test rdx, rdx	       796	xdr.c	FUNCTION_27	IF_1
0x4000270	            0x744d	                            je 0x40002bf	       796	xdr.c	FUNCTION_27	IF_1
0x4000272	          0x8b4638	            mov eax, dword [rsi + 0x38] 	       721	xdr.c	FUNCTION_23	IF_1
0x4000275	          0x4839c2	                            cmp rdx, rax	       721	xdr.c	FUNCTION_23	IF_1
0x4000278	        0x480f42c2	                          cmovb rax, rdx	       721	xdr.c	FUNCTION_23	IF_1
0x400027c	          0x488b16	                    mov rdx, qword [rsi]	       723	xdr.c	FUNCTION_23
0x400027f	          0x488917	                    mov qword [rdi], rdx	       723	xdr.c	FUNCTION_23
0x4000282	          0x480306	                    add rax, qword [rsi]	       724	xdr.c	FUNCTION_23
0x4000285	        0x48897718	             mov qword [rdi + 0x18], rsi	       725	xdr.c	FUNCTION_23
0x4000289	    0x48c747300000	               mov qword [rdi + 0x30], 0	       726	xdr.c	FUNCTION_23
0x4000291	        0x48894710	             mov qword [rdi + 0x10], rax	       724	xdr.c	FUNCTION_23
0x4000295	          0x4d85f6	                           test r14, r14	       802	xdr.c	FUNCTION_27	IF_3
0x4000298	            0x7421	                            je 0x40002bb	       802	xdr.c	FUNCTION_27	IF_3
0x400029a	          0x488b03	                    mov rax, qword [rbx]	       802	xdr.c	FUNCTION_27	IF_3
0x400029d	          0x4939c6	                            cmp r14, rax	       802	xdr.c	FUNCTION_27	IF_3
0x40002a0	            0x7619	                           jbe 0x40002bb	       802	xdr.c	FUNCTION_27	IF_3
0x40002a2	        0x4c3b7310	            cmp r14, qword [rbx + 0x10] 	       802	xdr.c	FUNCTION_27	IF_3
0x40002a6	            0x7713	                            ja 0x40002bb	       802	xdr.c	FUNCTION_27	IF_3
0x40002a8	          0x4c89f1	                            mov rcx, r14	       803	xdr.c	FUNCTION_27	IF_3
0x40002ab	          0x4c8933	                    mov qword [rbx], r14	       804	xdr.c	FUNCTION_27	IF_3
0x40002ae	          0x4829c1	                            sub rcx, rax	       803	xdr.c	FUNCTION_27	IF_3
0x40002b1	          0x4889c8	                            mov rax, rcx	       803	xdr.c	FUNCTION_27	IF_3
0x40002b4	        0x48c1f802	                              sar rax, 2	       803	xdr.c	FUNCTION_27	IF_3
0x40002b8	          0x294338	             sub dword [rbx + 0x38], eax	       803	xdr.c	FUNCTION_27	IF_3
0x40002bb	              0x5b	                                 pop rbx	       806	xdr.c	FUNCTION_27
0x40002bc	            0x415e	                                 pop r14	       806	xdr.c	FUNCTION_27
0x40002be	              0xc3	                                     ret	       806	xdr.c	FUNCTION_27
0x40002bf	          0x8b462c	            mov eax, dword [rsi + 0x2c] 	       798	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002c2	            0x85c0	                           test eax, eax	       798	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002c4	            0x751b	                           jne 0x40002e1	       798	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002c6	          0x488b06	                    mov rax, qword [rsi]	       723	xdr.c	FUNCTION_23
0x40002c9	          0x488907	                    mov qword [rdi], rax	       723	xdr.c	FUNCTION_23
0x40002cc	          0x488b06	                    mov rax, qword [rsi]	       724	xdr.c	FUNCTION_23
0x40002cf	        0x48897718	             mov qword [rdi + 0x18], rsi	       725	xdr.c	FUNCTION_23
0x40002d3	    0x48c747300000	               mov qword [rdi + 0x30], 0	       726	xdr.c	FUNCTION_23
0x40002db	        0x48894710	             mov qword [rdi + 0x10], rax	       724	xdr.c	FUNCTION_23
0x40002df	            0xebb4	                           jmp 0x4000295	       724	xdr.c	FUNCTION_23
0x40002e1	          0x8b5638	            mov edx, dword [rsi + 0x38] 	       799	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002e4	            0x31f6	                            xor esi, esi	       799	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002e6	      0xe835feffff	              call sym.xdr_set_page_base	       799	xdr.c	FUNCTION_27	ELSE_1	IF_2
0x40002eb	            0xeba8	                           jmp 0x4000295	       799	xdr.c	FUNCTION_27	ELSE_1	IF_2
xdr_set_next_buffer	FOR,0:ELSE,1:functions,0:CALL,3:DO,0:IF,3:WHILE,0:SWITCH,0	47
0x40001a0	              0x53	                                push rbx	       774	xdr.c	FUNCTION_26
0x40001a1	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       775	xdr.c	FUNCTION_26	IF_1
0x40001a5	          0x4889fb	                            mov rbx, rdi	       774	xdr.c	FUNCTION_26
0x40001a8	          0x4885c0	                           test rax, rax	       775	xdr.c	FUNCTION_26	IF_1
0x40001ab	            0x7433	                            je 0x40001e0	       775	xdr.c	FUNCTION_26	IF_1
0x40001ad	        0x488b5708	                mov rdx, qword [rdi + 8]	       766	xdr.c	FUNCTION_25
0x40001b1	        0x488d7008	                      lea rsi, [rax + 8]	       766	xdr.c	FUNCTION_25
0x40001b5	        0x482b7220	             sub rsi, qword [rdx + 0x20]	       766	xdr.c	FUNCTION_25
0x40001b9	        0x48c1fe03	                              sar rsi, 3	       766	xdr.c	FUNCTION_25
0x40001bd	          0xc1e60c	                            shl esi, 0xc	       766	xdr.c	FUNCTION_25
0x40001c0	          0x2b7228	             sub esi, dword [rdx + 0x28]	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001c3	      0xba00100000	                         mov edx, 0x1000	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001c8	      0xe853ffffff	              call sym.xdr_set_page_base	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001cd	            0x85c0	                           test eax, eax	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001cf	            0x7829	                            js 0x40001fa	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001d1	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001d5	          0x488b13	                    mov rdx, qword [rbx]	       769	xdr.c	FUNCTION_25	IF_1	CALL_1
0x40001d8	              0x5b	                                 pop rbx	       782	xdr.c	FUNCTION_26
0x40001d9	          0x4839c2	                            cmp rdx, rax	       781	xdr.c	FUNCTION_26
0x40001dc	           0xf95c0	                                setne al	       781	xdr.c	FUNCTION_26
0x40001df	              0xc3	                                     ret	       782	xdr.c	FUNCTION_26
0x40001e0	        0x488b4708	                mov rax, qword [rdi + 8]	       777	xdr.c	FUNCTION_26	ELSE_1	IF_2
0x40001e4	        0x48394718	            cmp qword [rdi + 0x18], rax 	       777	xdr.c	FUNCTION_26	ELSE_1	IF_2
0x40001e8	            0x75e7	                           jne 0x40001d1	       777	xdr.c	FUNCTION_26	ELSE_1	IF_2
0x40001ea	            0x31f6	                            xor esi, esi	       778	xdr.c	FUNCTION_26	ELSE_1	IF_2	IF_3	CALL_2
0x40001ec	      0xba00100000	                         mov edx, 0x1000	       778	xdr.c	FUNCTION_26	ELSE_1	IF_2	IF_3	CALL_2
0x40001f1	      0xe82affffff	              call sym.xdr_set_page_base	       778	xdr.c	FUNCTION_26	ELSE_1	IF_2	IF_3	CALL_2
0x40001f6	            0x85c0	                           test eax, eax	       778	xdr.c	FUNCTION_26	ELSE_1	IF_2	IF_3	CALL_2
0x40001f8	            0x79d7	                           jns 0x40001d1	       778	xdr.c	FUNCTION_26	ELSE_1	IF_2	IF_3	CALL_2
0x40001fa	        0x488b4b08	                mov rcx, qword [rbx + 8]	       779	xdr.c	FUNCTION_26	ELSE_1	IF_2	CALL_3
0x40001fe	          0x8b4338	            mov eax, dword [rbx + 0x38] 	       721	xdr.c	FUNCTION_23	IF_1
0x4000201	        0x488b7118	            mov rsi, qword [rcx + 0x18] 	       721	xdr.c	FUNCTION_23	IF_1
0x4000205	    0x8d1485000000	                        lea edx, [rax*4]	       721	xdr.c	FUNCTION_23	IF_1
0x400020c	        0x488d7910	                   lea rdi, [rcx + 0x10]	       779	xdr.c	FUNCTION_26	ELSE_1	IF_2	CALL_3
0x4000210	          0x4839f2	                            cmp rdx, rsi	       779	xdr.c	FUNCTION_26	ELSE_1	IF_2	CALL_3
0x4000213	            0x89f0	                            mov eax, esi	       779	xdr.c	FUNCTION_26	ELSE_1	IF_2	CALL_3
0x4000215	        0x480f46c2	                         cmovbe rax, rdx	       779	xdr.c	FUNCTION_26	ELSE_1	IF_2	CALL_3
0x4000219	        0x488b5110	            mov rdx, qword [rcx + 0x10] 	       723	xdr.c	FUNCTION_23
0x400021d	          0x488913	                    mov qword [rbx], rdx	       723	xdr.c	FUNCTION_23
0x4000220	        0x48034110	             add rax, qword [rcx + 0x10]	       724	xdr.c	FUNCTION_23
0x4000224	        0x48897b18	             mov qword [rbx + 0x18], rdi	       725	xdr.c	FUNCTION_23
0x4000228	    0x48c743300000	               mov qword [rbx + 0x30], 0	       726	xdr.c	FUNCTION_23
0x4000230	          0x4839c2	                            cmp rdx, rax	       781	xdr.c	FUNCTION_26
0x4000233	        0x48894310	             mov qword [rbx + 0x10], rax	       724	xdr.c	FUNCTION_23
0x4000237	           0xf95c0	                                setne al	       781	xdr.c	FUNCTION_26
0x400023a	              0x5b	                                 pop rbx	       782	xdr.c	FUNCTION_26
0x400023b	              0xc3	                                     ret	       782	xdr.c	FUNCTION_26
__read_bytes_from_xdr_buf	FOR,0:ELSE,0:functions,0:CALL,6:DO,0:IF,1:WHILE,0:SWITCH,0	43
0x40005d0	            0x4156	                                push r14	      1114	xdr.c	FUNCTION_39
0x40005d2	            0x4155	                                push r13	      1114	xdr.c	FUNCTION_39
0x40005d4	          0x4889f1	                            mov rcx, rsi	      1114	xdr.c	FUNCTION_39
0x40005d7	            0x4154	                                push r12	      1114	xdr.c	FUNCTION_39
0x40005d9	              0x55	                                push rbp	      1114	xdr.c	FUNCTION_39
0x40005da	          0x4889fd	                            mov rbp, rdi	      1114	xdr.c	FUNCTION_39
0x40005dd	              0x53	                                push rbx	      1114	xdr.c	FUNCTION_39
0x40005de	        0x4c8b6708	                mov r12, qword [rdi + 8]	      1117	xdr.c	FUNCTION_39	CALL_1
0x40005e2	            0x89d3	                            mov ebx, edx	      1114	xdr.c	FUNCTION_39
0x40005e4	          0x488b37	                    mov rsi, qword [rdi]	      1118	xdr.c	FUNCTION_39	CALL_2
0x40005e7	          0x4889cf	                            mov rdi, rcx	      1118	xdr.c	FUNCTION_39	CALL_2
0x40005ea	          0x4439e2	                           cmp edx, r12d	      1117	xdr.c	FUNCTION_39	CALL_1
0x40005ed	        0x440f42e2	                         cmovb r12d, edx	      1117	xdr.c	FUNCTION_39	CALL_1
0x40005f1	          0x4589e5	                          mov r13d, r12d	      1118	xdr.c	FUNCTION_39	CALL_2
0x40005f4	          0x4429e3	                           sub ebx, r12d	      1119	xdr.c	FUNCTION_39
0x40005f7	          0x4c89ea	                            mov rdx, r13	      1118	xdr.c	FUNCTION_39	CALL_2
0x40005fa	          0x4189de	                           mov r14d, ebx	      1121	xdr.c	FUNCTION_39	CALL_3
0x40005fd	      0xe800000000	                          call 0x4000602	      1118	xdr.c	FUNCTION_39	CALL_2
0x4000602	          0x4901c5	                            add r13, rax	      1120	xdr.c	FUNCTION_39
0x4000605	          0x395d2c	            cmp dword [rbp + 0x2c], ebx 	      1121	xdr.c	FUNCTION_39	CALL_3
0x4000608	      0x440f46752c	         cmovbe r14d, dword [rbp + 0x2c]	      1121	xdr.c	FUNCTION_39	CALL_3
0x400060d	          0x4531e4	                          xor r12d, r12d	      1121	xdr.c	FUNCTION_39	CALL_3
0x4000610	          0x4585f6	                         test r14d, r14d	      1122	xdr.c	FUNCTION_39	IF_1
0x4000613	            0x7415	                            je 0x400062a	      1122	xdr.c	FUNCTION_39	IF_1
0x4000615	          0x8b5528	            mov edx, dword [rbp + 0x28] 	      1123	xdr.c	FUNCTION_39	CALL_4
0x4000618	        0x488b7520	            mov rsi, qword [rbp + 0x20] 	      1123	xdr.c	FUNCTION_39	CALL_4
0x400061c	          0x4589f4	                          mov r12d, r14d	      1123	xdr.c	FUNCTION_39	CALL_4
0x400061f	          0x4c89e1	                            mov rcx, r12	      1123	xdr.c	FUNCTION_39	CALL_4
0x4000622	          0x4c89ef	                            mov rdi, r13	      1123	xdr.c	FUNCTION_39	CALL_4
0x4000625	      0xe800000000	                          call 0x400062a	      1123	xdr.c	FUNCTION_39	CALL_4
0x400062a	        0x488b5518	            mov rdx, qword [rbp + 0x18] 	      1127	xdr.c	FUNCTION_39	CALL_6
0x400062e	          0x4429f3	                           sub ebx, r14d	      1124	xdr.c	FUNCTION_39
0x4000631	      0x4b8d7c2500	                    lea rdi, [r13 + r12]	      1127	xdr.c	FUNCTION_39	CALL_6
0x4000636	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	      1127	xdr.c	FUNCTION_39	CALL_6
0x400063a	            0x39d3	                            cmp ebx, edx	      1127	xdr.c	FUNCTION_39	CALL_6
0x400063c	           0xf43da	                         cmovae ebx, edx	      1127	xdr.c	FUNCTION_39	CALL_6
0x400063f	            0x89da	                            mov edx, ebx	      1127	xdr.c	FUNCTION_39	CALL_6
0x4000641	              0x5b	                                 pop rbx	      1128	xdr.c	FUNCTION_39
0x4000642	              0x5d	                                 pop rbp	      1128	xdr.c	FUNCTION_39
0x4000643	            0x415c	                                 pop r12	      1128	xdr.c	FUNCTION_39
0x4000645	            0x415d	                                 pop r13	      1128	xdr.c	FUNCTION_39
0x4000647	            0x415e	                                 pop r14	      1128	xdr.c	FUNCTION_39
0x4000649	      0xe900000000	                           jmp 0x400064e	      1127	xdr.c	FUNCTION_39	CALL_6
xdr_shift_buf	FOR,0:ELSE,0:functions,0:CALL,1:DO,0:IF,0:WHILE,0:SWITCH,0	1
0x40010b0	      0xe95bfdffff	              jmp sym.xdr_shrink_bufhead	       433	xdr.c	FUNCTION_14	CALL_1
xdr_buf_read_netobj	FOR,0:ELSE,1:functions,0:CALL,3:DO,0:IF,6:WHILE,0:SWITCH,0	77
0x4000710	      0x4c8d542408	                      lea r10, [rsp + 8]	      1203	xdr.c	FUNCTION_45
0x4000715	        0x4883e4f0	             and rsp, 0xfffffffffffffff0	      1203	xdr.c	FUNCTION_45
0x4000719	      0xb904000000	                              mov ecx, 4	      1181	xdr.c	FUNCTION_43	CALL_1
0x400071e	        0x41ff72f8	                    push qword [r10 - 8]	      1203	xdr.c	FUNCTION_45
0x4000722	              0x55	                                push rbp	      1203	xdr.c	FUNCTION_45
0x4000723	          0x4889e5	                            mov rbp, rsp	      1203	xdr.c	FUNCTION_45
0x4000726	            0x4156	                                push r14	      1203	xdr.c	FUNCTION_45
0x4000728	            0x4155	                                push r13	      1203	xdr.c	FUNCTION_45
0x400072a	            0x4154	                                push r12	      1203	xdr.c	FUNCTION_45
0x400072c	            0x4152	                                push r10	      1203	xdr.c	FUNCTION_45
0x400072e	          0x4189d5	                           mov r13d, edx	      1203	xdr.c	FUNCTION_45
0x4000731	              0x53	                                push rbx	      1203	xdr.c	FUNCTION_45
0x4000732	    0x488d957cffff	                   lea rdx, [rbp - 0x84]	      1181	xdr.c	FUNCTION_43	CALL_1
0x4000739	          0x4989f4	                            mov r12, rsi	      1203	xdr.c	FUNCTION_45
0x400073c	          0x4489ee	                           mov esi, r13d	      1181	xdr.c	FUNCTION_43	CALL_1
0x400073f	          0x4889fb	                            mov rbx, rdi	      1203	xdr.c	FUNCTION_45
0x4000742	    0x41bef2ffffff	                    mov r14d, 0xfffffff2	      1207	xdr.c	FUNCTION_45	IF_1
0x4000748	        0x4883ec68	                           sub rsp, 0x68	      1203	xdr.c	FUNCTION_45
0x400074c	    0x65488b042528	                mov rax, qword gs:[0x28]	      1203	xdr.c	FUNCTION_45
0x4000755	        0x488945c8	             mov qword [rbp - 0x38], rax	      1203	xdr.c	FUNCTION_45
0x4000759	            0x31c0	                            xor eax, eax	      1203	xdr.c	FUNCTION_45
0x400075b	      0xe800000000	                          call 0x4000760	      1181	xdr.c	FUNCTION_43	CALL_1
0x4000760	            0x85c0	                           test eax, eax	      1182	xdr.c	FUNCTION_43	IF_1
0x4000762	            0x7570	                           jne 0x40007d4	      1182	xdr.c	FUNCTION_43	IF_1
0x4000764	    0x8b8d7cffffff	             mov ecx, dword [rbp - 0x84]	      1184	xdr.c	FUNCTION_43	CALL_2
0x400076a	        0x418d5504	                      lea edx, [r13 + 4]	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x400076e	        0x488d7580	                   lea rsi, [rbp - 0x80]	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000772	          0x4889df	                            mov rdi, rbx	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000775	             0xfc9	                               bswap ecx	      1184	xdr.c	FUNCTION_43	CALL_2
0x4000777	        0x41890c24	                    mov dword [r12], ecx	      1184	xdr.c	FUNCTION_43	CALL_2
0x400077b	      0xe800000000	                          call 0x4000780	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000780	            0x85c0	                           test eax, eax	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000782	          0x4189c6	                           mov r14d, eax	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000785	            0x757d	                           jne 0x4000804	      1208	xdr.c	FUNCTION_45	IF_2	CALL_2
0x4000787	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1212	xdr.c	FUNCTION_45
0x400078b	      0x4989442408	                mov qword [r12 + 8], rax	      1212	xdr.c	FUNCTION_45
0x4000790	        0x418b0424	                    mov eax, dword [r12]	      1213	xdr.c	FUNCTION_45	IF_3
0x4000794	        0x48394588	            cmp qword [rbp - 0x78], rax 	      1213	xdr.c	FUNCTION_45	IF_3
0x4000798	          0x4889c2	                            mov rdx, rax	      1213	xdr.c	FUNCTION_45	IF_3
0x400079b	            0x7437	                            je 0x40007d4	      1213	xdr.c	FUNCTION_45	IF_3
0x400079d	        0x483b4598	             cmp rax, qword [rbp - 0x68]	      1217	xdr.c	FUNCTION_45	IF_4
0x40007a1	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	      1216	xdr.c	FUNCTION_45
0x40007a5	      0x49894c2408	                mov qword [r12 + 8], rcx	      1216	xdr.c	FUNCTION_45
0x40007aa	            0x7428	                            je 0x40007d4	      1217	xdr.c	FUNCTION_45	IF_4
0x40007ac	          0x8b4334	            mov eax, dword [rbx + 0x34] 	      1225	xdr.c	FUNCTION_45	IF_5
0x40007af	          0x2b4338	             sub eax, dword [rbx + 0x38]	      1225	xdr.c	FUNCTION_45	IF_5
0x40007b2	            0x39c2	                            cmp edx, eax	      1225	xdr.c	FUNCTION_45	IF_5
0x40007b4	            0x7756	                            ja 0x400080c	      1225	xdr.c	FUNCTION_45	IF_5
0x40007b6	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	      1227	xdr.c	FUNCTION_45	IF_6
0x40007ba	          0x4885f6	                           test rsi, rsi	      1227	xdr.c	FUNCTION_45	IF_6
0x40007bd	            0x753a	                           jne 0x40007f9	      1227	xdr.c	FUNCTION_45	IF_6
0x40007bf	        0x488b7308	                mov rsi, qword [rbx + 8]	      1230	xdr.c	FUNCTION_45	ELSE_1
0x40007c3	          0x480333	                    add rsi, qword [rbx]	      1230	xdr.c	FUNCTION_45	ELSE_1
0x40007c6	      0x4989742408	                mov qword [r12 + 8], rsi	      1230	xdr.c	FUNCTION_45	ELSE_1
0x40007cb	        0x488d7d80	                   lea rdi, [rbp - 0x80]	      1231	xdr.c	FUNCTION_45	CALL_3
0x40007cf	      0xe8fcfdffff	      call sym.__read_bytes_from_xdr_buf	      1231	xdr.c	FUNCTION_45	CALL_3
0x40007d4	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	      1233	xdr.c	FUNCTION_45
0x40007d8	    0x6548333c2528	                xor rdi, qword gs:[0x28]	      1233	xdr.c	FUNCTION_45
0x40007e1	          0x4489f0	                           mov eax, r14d	      1233	xdr.c	FUNCTION_45
0x40007e4	            0x752e	                           jne 0x4000814	      1233	xdr.c	FUNCTION_45
0x40007e6	        0x4883c468	                           add rsp, 0x68	      1233	xdr.c	FUNCTION_45
0x40007ea	              0x5b	                                 pop rbx	      1233	xdr.c	FUNCTION_45
0x40007eb	            0x415a	                                 pop r10	      1233	xdr.c	FUNCTION_45
0x40007ed	            0x415c	                                 pop r12	      1233	xdr.c	FUNCTION_45
0x40007ef	            0x415d	                                 pop r13	      1233	xdr.c	FUNCTION_45
0x40007f1	            0x415e	                                 pop r14	      1233	xdr.c	FUNCTION_45
0x40007f3	              0x5d	                                 pop rbp	      1233	xdr.c	FUNCTION_45
0x40007f4	        0x498d62f8	                      lea rsp, [r10 - 8]	      1233	xdr.c	FUNCTION_45
0x40007f8	              0xc3	                                     ret	      1233	xdr.c	FUNCTION_45
0x40007f9	        0x48037310	             add rsi, qword [rbx + 0x10]	      1228	xdr.c	FUNCTION_45	IF_6
0x40007fd	      0x4989742408	                mov qword [r12 + 8], rsi	      1228	xdr.c	FUNCTION_45	IF_6
0x4000802	            0xebc7	                           jmp 0x40007cb	      1228	xdr.c	FUNCTION_45	IF_6
0x4000804	    0x41bef2ffffff	                    mov r14d, 0xfffffff2	      1209	xdr.c	FUNCTION_45	IF_2
0x400080a	            0xebc8	                           jmp 0x40007d4	      1209	xdr.c	FUNCTION_45	IF_2
0x400080c	    0x41bef4ffffff	                    mov r14d, 0xfffffff4	      1226	xdr.c	FUNCTION_45	IF_5
0x4000812	            0xebc0	                           jmp 0x40007d4	      1226	xdr.c	FUNCTION_45	IF_5
0x4000814	      0xe800000000	                          call 0x4000819	      1233	xdr.c	FUNCTION_45
xdr_enter_page	FOR,0:ELSE,0:functions,0:CALL,2:DO,0:IF,1:WHILE,0:SWITCH,0	12
0x40012b0	              0x53	                                push rbx	       990	xdr.c	FUNCTION_35
0x40012b1	          0x4889fb	                            mov rbx, rdi	       990	xdr.c	FUNCTION_35
0x40012b4	      0xe807feffff	                call sym.xdr_align_pages	       991	xdr.c	FUNCTION_35	CALL_1
0x40012b9	            0x85c0	                           test eax, eax	       996	xdr.c	FUNCTION_35	IF_1
0x40012bb	            0x7502	                           jne 0x40012bf	       996	xdr.c	FUNCTION_35	IF_1
0x40012bd	              0x5b	                                 pop rbx	       998	xdr.c	FUNCTION_35
0x40012be	              0xc3	                                     ret	       998	xdr.c	FUNCTION_35
0x40012bf	          0x4889df	                            mov rdi, rbx	       997	xdr.c	FUNCTION_35	CALL_2
0x40012c2	            0x89c2	                            mov edx, eax	       997	xdr.c	FUNCTION_35	CALL_2
0x40012c4	            0x31f6	                            xor esi, esi	       997	xdr.c	FUNCTION_35	CALL_2
0x40012c6	              0x5b	                                 pop rbx	       998	xdr.c	FUNCTION_35
0x40012c7	      0xe954eeffff	               jmp sym.xdr_set_page_base	       997	xdr.c	FUNCTION_35	CALL_2
xdr_read_pages	FOR,0:ELSE,0:functions,0:CALL,3:DO,0:IF,2:WHILE,0:SWITCH,0	39
0x4001240	              0x55	                                push rbp	       949	xdr.c	FUNCTION_34
0x4001241	              0x53	                                push rbx	       949	xdr.c	FUNCTION_34
0x4001242	          0x4889fb	                            mov rbx, rdi	       949	xdr.c	FUNCTION_34
0x4001245	        0x488b6f08	                mov rbp, qword [rdi + 8]	       950	xdr.c	FUNCTION_34
0x4001249	      0xe872feffff	                call sym.xdr_align_pages	       956	xdr.c	FUNCTION_34	CALL_1
0x400124e	            0x89c2	                            mov edx, eax	       956	xdr.c	FUNCTION_34	CALL_1
0x4001250	            0x31c0	                            xor eax, eax	       956	xdr.c	FUNCTION_34	CALL_1
0x4001252	            0x85d2	                           test edx, edx	       957	xdr.c	FUNCTION_34	IF_1
0x4001254	            0x7451	                            je 0x40012a7	       957	xdr.c	FUNCTION_34	IF_1
0x4001256	          0x8d4a03	                      lea ecx, [rdx + 3]	       959	xdr.c	FUNCTION_34	CALL_2
0x4001259	          0x8b7b38	            mov edi, dword [rbx + 0x38] 	       963	xdr.c	FUNCTION_34
0x400125c	        0x488d7510	                   lea rsi, [rbp + 0x10]	       961	xdr.c	FUNCTION_34
0x4001260	          0xc1e902	                              shr ecx, 2	       959	xdr.c	FUNCTION_34	CALL_2
0x4001263	        0x48897318	             mov qword [rbx + 0x18], rsi	       961	xdr.c	FUNCTION_34
0x4001267	    0x8d048d000000	                        lea eax, [rcx*4]	       960	xdr.c	FUNCTION_34
0x400126e	            0x29cf	                            sub edi, ecx	       963	xdr.c	FUNCTION_34
0x4001270	            0x29d0	                            sub eax, edx	       960	xdr.c	FUNCTION_34
0x4001272	          0x8d34b8	                  lea esi, [rax + rdi*4]	       963	xdr.c	FUNCTION_34
0x4001275	        0x488b7d18	            mov rdi, qword [rbp + 0x18] 	       964	xdr.c	FUNCTION_34	IF_2
0x4001279	          0x4889f1	                            mov rcx, rsi	       963	xdr.c	FUNCTION_34
0x400127c	          0x4839fe	                            cmp rsi, rdi	       964	xdr.c	FUNCTION_34	IF_2
0x400127f	            0x7729	                            ja 0x40012aa	       964	xdr.c	FUNCTION_34	IF_2
0x4001281	            0x89c7	                            mov edi, eax	       971	xdr.c	FUNCTION_34
0x4001283	        0x48037d10	             add rdi, qword [rbp + 0x10]	       971	xdr.c	FUNCTION_34
0x4001287	            0x29c1	                            sub ecx, eax	       974	xdr.c	FUNCTION_34	CALL_3
0x4001289	          0x8d4103	                      lea eax, [rcx + 3]	       974	xdr.c	FUNCTION_34	CALL_3
0x400128c	          0xc1e802	                              shr eax, 2	       974	xdr.c	FUNCTION_34	CALL_3
0x400128f	          0x48893b	                    mov qword [rbx], rdi	       971	xdr.c	FUNCTION_34
0x4001292	        0x48037510	             add rsi, qword [rbp + 0x10]	       972	xdr.c	FUNCTION_34
0x4001296	          0x894338	             mov dword [rbx + 0x38], eax	       974	xdr.c	FUNCTION_34	CALL_3
0x4001299	    0x48c743300000	               mov qword [rbx + 0x30], 0	       973	xdr.c	FUNCTION_34
0x40012a1	            0x89d0	                            mov eax, edx	       975	xdr.c	FUNCTION_34
0x40012a3	        0x48897310	             mov qword [rbx + 0x10], rsi	       972	xdr.c	FUNCTION_34
0x40012a7	              0x5b	                                 pop rbx	       976	xdr.c	FUNCTION_34
0x40012a8	              0x5d	                                 pop rbp	       976	xdr.c	FUNCTION_34
0x40012a9	              0xc3	                                     ret	       976	xdr.c	FUNCTION_34
0x40012aa	            0x89f9	                            mov ecx, edi	       965	xdr.c	FUNCTION_34	IF_2
0x40012ac	            0x89fe	                            mov esi, edi	       965	xdr.c	FUNCTION_34	IF_2
0x40012ae	            0xebd1	                           jmp 0x4001281	       965	xdr.c	FUNCTION_34	IF_2
xdr_restrict_buflen	FOR,0:ELSE,0:functions,0:CALL,0:DO,0:IF,3:WHILE,0:SWITCH,0	26
0x40000d0	        0x488b5708	                mov rdx, qword [rdi + 8]	       668	xdr.c	FUNCTION_21
0x40000d4	            0x85f6	                           test esi, esi	       672	xdr.c	FUNCTION_21	IF_1
0x40000d6	          0x8b4a38	            mov ecx, dword [rdx + 0x38] 	       670	xdr.c	FUNCTION_21
0x40000d9	            0x7833	                            js 0x400010e	       672	xdr.c	FUNCTION_21	IF_1
0x40000db	            0x39f1	                            cmp ecx, esi	       672	xdr.c	FUNCTION_21	IF_1
0x40000dd	            0x772f	                            ja 0x400010e	       672	xdr.c	FUNCTION_21	IF_1
0x40000df	            0x31c0	                            xor eax, eax	       675	xdr.c	FUNCTION_21	IF_2
0x40000e1	          0x3b7234	            cmp esi, dword [rdx + 0x34] 	       674	xdr.c	FUNCTION_21	IF_2
0x40000e4	            0x772d	                            ja 0x4000113	       674	xdr.c	FUNCTION_21	IF_2
0x40000e6	        0x4c8b4710	              mov r8, qword [rdi + 0x10]	       669	xdr.c	FUNCTION_21
0x40000ea	          0x4c89c0	                             mov rax, r8	       670	xdr.c	FUNCTION_21
0x40000ed	          0x482b07	                    sub rax, qword [rdi]	       670	xdr.c	FUNCTION_21
0x40000f0	             0x1c8	                            add eax, ecx	       670	xdr.c	FUNCTION_21
0x40000f2	            0x39f0	                            cmp eax, esi	       676	xdr.c	FUNCTION_21	IF_3
0x40000f4	            0x7e12	                           jle 0x4000108	       676	xdr.c	FUNCTION_21	IF_3
0x40000f6	            0x4898	                                    cdqe	       677	xdr.c	FUNCTION_21	IF_3
0x40000f8	          0x4863ce	                         movsxd rcx, esi	       677	xdr.c	FUNCTION_21	IF_3
0x40000fb	          0x4829c1	                            sub rcx, rax	       677	xdr.c	FUNCTION_21	IF_3
0x40000fe	          0x4889c8	                            mov rax, rcx	       677	xdr.c	FUNCTION_21	IF_3
0x4000101	          0x4c01c0	                             add rax, r8	       677	xdr.c	FUNCTION_21	IF_3
0x4000104	        0x48894710	             mov qword [rdi + 0x10], rax	       677	xdr.c	FUNCTION_21	IF_3
0x4000108	          0x897234	             mov dword [rdx + 0x34], esi	       678	xdr.c	FUNCTION_21
0x400010b	            0x31c0	                            xor eax, eax	       679	xdr.c	FUNCTION_21
0x400010d	              0xc3	                                     ret	       679	xdr.c	FUNCTION_21
0x400010e	      0xb8ffffffff	                     mov eax, 0xffffffff	       673	xdr.c	FUNCTION_21	IF_1
0x4000113	            0xf3c3	                                     ret	       680	xdr.c	FUNCTION_21
xdr_inline_pages	FOR,0:ELSE,0:functions,0:CALL,0:DO,0:IF,0:WHILE,0:SWITCH,0	13
0x4000080	            0x89f0	                            mov eax, esi	       140	xdr.c	FUNCTION_8
0x4000082	        0x4c8b4f08	                 mov r9, qword [rdi + 8]	       138	xdr.c	FUNCTION_8
0x4000086	        0x48895720	             mov qword [rdi + 0x20], rdx	       142	xdr.c	FUNCTION_8
0x400008a	        0x48894708	                mov qword [rdi + 8], rax	       140	xdr.c	FUNCTION_8
0x400008e	          0x480307	                    add rax, qword [rdi]	       146	xdr.c	FUNCTION_8
0x4000091	          0x894f28	             mov dword [rdi + 0x28], ecx	       143	xdr.c	FUNCTION_8
0x4000094	        0x4489472c	             mov dword [rdi + 0x2c], r8d	       144	xdr.c	FUNCTION_8
0x4000098	        0x44014734	             add dword [rdi + 0x34], r8d	       149	xdr.c	FUNCTION_8
0x400009c	        0x48894710	             mov qword [rdi + 0x10], rax	       146	xdr.c	FUNCTION_8
0x40000a0	          0x4489c8	                            mov eax, r9d	       147	xdr.c	FUNCTION_8
0x40000a3	            0x29f0	                            sub eax, esi	       147	xdr.c	FUNCTION_8
0x40000a5	        0x48894718	             mov qword [rdi + 0x18], rax	       147	xdr.c	FUNCTION_8
0x40000a9	              0xc3	                                     ret	       149	xdr.c	FUNCTION_8
xdr_encode_netobj	FOR,0:ELSE,0:functions,0:CALL,4:DO,0:IF,0:WHILE,0:SWITCH,0	21
0x40004e0	              0x53	                                push rbx	        24	xdr.c	FUNCTION_1
0x40004e1	            0x8b06	                    mov eax, dword [rsi]	        27	xdr.c	FUNCTION_1
0x40004e3	          0x4889f3	                            mov rbx, rsi	        24	xdr.c	FUNCTION_1
0x40004e6	        0x488d4f04	                      lea rcx, [rdi + 4]	        28	xdr.c	FUNCTION_1	CALL_2
0x40004ea	          0x83c003	                              add eax, 3	        27	xdr.c	FUNCTION_1
0x40004ed	          0xc1e802	                              shr eax, 2	        27	xdr.c	FUNCTION_1
0x40004f0	    0xc70487000000	              mov dword [rdi + rax*4], 0	        27	xdr.c	FUNCTION_1
0x40004f7	            0x8b06	                    mov eax, dword [rsi]	        28	xdr.c	FUNCTION_1	CALL_2
0x40004f9	             0xfc8	                               bswap eax	        28	xdr.c	FUNCTION_1	CALL_2
0x40004fb	            0x8907	                    mov dword [rdi], eax	        28	xdr.c	FUNCTION_1	CALL_2
0x40004fd	            0x8b16	                    mov edx, dword [rsi]	        29	xdr.c	FUNCTION_1	CALL_3
0x40004ff	          0x4889cf	                            mov rdi, rcx	        29	xdr.c	FUNCTION_1	CALL_3
0x4000502	        0x488b7608	                mov rsi, qword [rsi + 8]	        29	xdr.c	FUNCTION_1	CALL_3
0x4000506	      0xe800000000	                          call 0x400050b	        29	xdr.c	FUNCTION_1	CALL_3
0x400050b	          0x4889c1	                            mov rcx, rax	        29	xdr.c	FUNCTION_1	CALL_3
0x400050e	            0x8b03	                    mov eax, dword [rbx]	        30	xdr.c	FUNCTION_1	CALL_4
0x4000510	              0x5b	                                 pop rbx	        31	xdr.c	FUNCTION_1
0x4000511	        0x4883c003	                              add rax, 3	        30	xdr.c	FUNCTION_1	CALL_4
0x4000515	          0x83e0fc	                     and eax, 0xfffffffc	        30	xdr.c	FUNCTION_1	CALL_4
0x4000518	          0x4801c8	                            add rax, rcx	        30	xdr.c	FUNCTION_1	CALL_4
0x400051b	              0xc3	                                     ret	        31	xdr.c	FUNCTION_1
