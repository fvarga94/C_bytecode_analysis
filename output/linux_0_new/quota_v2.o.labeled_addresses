v2r1_mem2diskdqb	IF,1:WHILE,0:functions,0:CALL,15:DO,0:FOR,0:ELSE,0:SWITCH,0	41
0x4000430	              0x55	                                push rbp	       271	quota_v2.c	FUNCTION_11
0x4000431	              0x53	                                push rbx	       271	quota_v2.c	FUNCTION_11
0x4000432	          0x4889fb	                            mov rbx, rdi	       271	quota_v2.c	FUNCTION_11
0x4000435	        0x48634674	         movsxd rax, dword [rsi + 0x74] 	       274	quota_v2.c	FUNCTION_11
0x4000439	        0x488b5668	            mov rdx, qword [rsi + 0x68] 	       274	quota_v2.c	FUNCTION_11
0x400043d	        0x488d04c0	                  lea rax, [rax + rax*8]	       274	quota_v2.c	FUNCTION_11
0x4000441	        0x488d04c2	                  lea rax, [rdx + rax*8]	       274	quota_v2.c	FUNCTION_11
0x4000445	    0x488ba8880100	           mov rbp, qword [rax + 0x188] 	       274	quota_v2.c	FUNCTION_11
0x400044c	    0x488b86a80000	            mov rax, qword [rsi + 0xa8] 	       277	quota_v2.c	FUNCTION_11	CALL_2
0x4000453	        0x48894708	                mov qword [rdi + 8], rax	       277	quota_v2.c	FUNCTION_11	CALL_2
0x4000457	    0x488b86b00000	            mov rax, qword [rsi + 0xb0] 	       278	quota_v2.c	FUNCTION_11	CALL_3
0x400045e	        0x48894710	             mov qword [rdi + 0x10], rax	       278	quota_v2.c	FUNCTION_11	CALL_3
0x4000462	    0x488b86b80000	            mov rax, qword [rsi + 0xb8] 	       279	quota_v2.c	FUNCTION_11	CALL_4
0x4000469	        0x48894718	             mov qword [rdi + 0x18], rax	       279	quota_v2.c	FUNCTION_11	CALL_4
0x400046d	    0x488b86c80000	            mov rax, qword [rsi + 0xc8] 	       280	quota_v2.c	FUNCTION_11	CALL_5
0x4000474	        0x48894740	             mov qword [rdi + 0x40], rax	       280	quota_v2.c	FUNCTION_11	CALL_5
0x4000478	    0x488b86880000	            mov rax, qword [rsi + 0x88] 	       281	quota_v2.c	FUNCTION_11	CALL_7
0x400047f	    0x4805ff030000	                          add rax, 0x3ff	       281	quota_v2.c	FUNCTION_11	CALL_7
0x4000485	        0x48c1f80a	                            sar rax, 0xa	       281	quota_v2.c	FUNCTION_11	CALL_7
0x4000489	        0x48894720	             mov qword [rdi + 0x20], rax	       281	quota_v2.c	FUNCTION_11	CALL_7
0x400048d	    0x488b86900000	            mov rax, qword [rsi + 0x90] 	       282	quota_v2.c	FUNCTION_11	CALL_9
0x4000494	    0x4805ff030000	                          add rax, 0x3ff	       282	quota_v2.c	FUNCTION_11	CALL_9
0x400049a	        0x48c1f80a	                            sar rax, 0xa	       282	quota_v2.c	FUNCTION_11	CALL_9
0x400049e	        0x48894728	             mov qword [rdi + 0x28], rax	       282	quota_v2.c	FUNCTION_11	CALL_9
0x40004a2	    0x488b86980000	            mov rax, qword [rsi + 0x98] 	       283	quota_v2.c	FUNCTION_11	CALL_10
0x40004a9	        0x48894730	             mov qword [rdi + 0x30], rax	       283	quota_v2.c	FUNCTION_11	CALL_10
0x40004ad	    0x488b86c00000	            mov rax, qword [rsi + 0xc0] 	       284	quota_v2.c	FUNCTION_11	CALL_11
0x40004b4	        0x48894738	             mov qword [rdi + 0x38], rax	       284	quota_v2.c	FUNCTION_11	CALL_11
0x40004b8	        0x488b7670	            mov rsi, qword [rsi + 0x70] 	       285	quota_v2.c	FUNCTION_11	CALL_13
0x40004bc	    0x48c7c7000000	                              mov rdi, 0	       285	quota_v2.c	FUNCTION_11	CALL_13
0x40004c3	      0xe800000000	                          call 0x40004c8	       285	quota_v2.c	FUNCTION_11	CALL_13
0x40004c8	          0x4889de	                            mov rsi, rbx	       286	quota_v2.c	FUNCTION_11	IF_1	CALL_14
0x40004cb	            0x8903	                    mov dword [rbx], eax	       285	quota_v2.c	FUNCTION_11	CALL_13
0x40004cd	          0x4889ef	                            mov rdi, rbp	       286	quota_v2.c	FUNCTION_11	IF_1	CALL_14
0x40004d0	      0xe800000000	                          call 0x40004d5	       286	quota_v2.c	FUNCTION_11	IF_1	CALL_14
0x40004d5	            0x85c0	                           test eax, eax	       286	quota_v2.c	FUNCTION_11	IF_1	CALL_14
0x40004d7	            0x7408	                            je 0x40004e1	       286	quota_v2.c	FUNCTION_11	IF_1	CALL_14
0x40004d9	    0x48c743400100	               mov qword [rbx + 0x40], 1	       287	quota_v2.c	FUNCTION_11	CALL_15
0x40004e1	              0x5b	                                 pop rbx	       288	quota_v2.c	FUNCTION_11
0x40004e2	              0x5d	                                 pop rbp	       288	quota_v2.c	FUNCTION_11
0x40004e3	              0xc3	                                     ret	       288	quota_v2.c	FUNCTION_11
v2_release_dquot	IF,0:WHILE,0:functions,0:CALL,5:DO,0:FOR,0:ELSE,0:SWITCH,0	21
0x4000090	              0x55	                                push rbp	       345	quota_v2.c	FUNCTION_15
0x4000091	              0x53	                                push rbx	       345	quota_v2.c	FUNCTION_15
0x4000092	          0x4889fd	                            mov rbp, rdi	       345	quota_v2.c	FUNCTION_15
0x4000095	        0x488b4768	            mov rax, qword [rdi + 0x68] 	       349	quota_v2.c	FUNCTION_15	CALL_2
0x4000099	    0x488d98080100	                  lea rbx, [rax + 0x108]	       349	quota_v2.c	FUNCTION_15	CALL_2
0x40000a0	          0x4889df	                            mov rdi, rbx	       349	quota_v2.c	FUNCTION_15	CALL_2
0x40000a3	      0xe800000000	                          call 0x40000a8	       349	quota_v2.c	FUNCTION_15	CALL_2
0x40000a8	        0x48634574	         movsxd rax, dword [rbp + 0x74] 	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000ac	        0x488b5568	            mov rdx, qword [rbp + 0x68] 	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000b0	          0x4889ee	                            mov rsi, rbp	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000b3	        0x488d04c0	                  lea rax, [rax + rax*8]	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000b7	        0x488d04c2	                  lea rax, [rdx + rax*8]	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000bb	    0x488bb8880100	           mov rdi, qword [rax + 0x188] 	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000c2	      0xe800000000	                          call 0x40000c7	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000c7	          0x4889df	                            mov rdi, rbx	       351	quota_v2.c	FUNCTION_15	CALL_5
0x40000ca	            0x89c5	                            mov ebp, eax	       350	quota_v2.c	FUNCTION_15	CALL_4
0x40000cc	      0xe800000000	                          call 0x40000d1	       351	quota_v2.c	FUNCTION_15	CALL_5
0x40000d1	            0x89e8	                            mov eax, ebp	       354	quota_v2.c	FUNCTION_15
0x40000d3	              0x5b	                                 pop rbx	       354	quota_v2.c	FUNCTION_15
0x40000d4	              0x5d	                                 pop rbp	       354	quota_v2.c	FUNCTION_15
0x40000d5	              0xc3	                                     ret	       354	quota_v2.c	FUNCTION_15
v2r0_disk2memdqb	IF,1:WHILE,0:functions,0:CALL,13:DO,0:FOR,0:ELSE,0:SWITCH,0	42
0x4000370	              0x53	                                push rbx	       198	quota_v2.c	FUNCTION_7
0x4000371	      0xb906000000	                              mov ecx, 6	       211	quota_v2.c	FUNCTION_7	CALL_11
0x4000376	          0x4889fb	                            mov rbx, rdi	       198	quota_v2.c	FUNCTION_7
0x4000379	      0xba30000000	                           mov edx, 0x30	       213	quota_v2.c	FUNCTION_7	IF_1	CALL_13
0x400037e	        0x4883ec38	                           sub rsp, 0x38	       198	quota_v2.c	FUNCTION_7
0x4000382	    0x65488b042528	                mov rax, qword gs:[0x28]	       198	quota_v2.c	FUNCTION_7
0x400038b	      0x4889442430	             mov qword [rsp + 0x30], rax	       198	quota_v2.c	FUNCTION_7
0x4000390	            0x31c0	                            xor eax, eax	       198	quota_v2.c	FUNCTION_7
0x4000392	          0x8b4604	                mov eax, dword [rsi + 4]	       202	quota_v2.c	FUNCTION_7	CALL_1
0x4000395	    0x488987a80000	             mov qword [rdi + 0xa8], rax	       202	quota_v2.c	FUNCTION_7	CALL_1
0x400039c	          0x8b4608	                mov eax, dword [rsi + 8]	       203	quota_v2.c	FUNCTION_7	CALL_2
0x400039f	    0x488987b00000	             mov qword [rdi + 0xb0], rax	       203	quota_v2.c	FUNCTION_7	CALL_2
0x40003a6	          0x8b460c	              mov eax, dword [rsi + 0xc]	       204	quota_v2.c	FUNCTION_7	CALL_3
0x40003a9	    0x488987b80000	             mov qword [rdi + 0xb8], rax	       204	quota_v2.c	FUNCTION_7	CALL_3
0x40003b0	        0x488b4628	            mov rax, qword [rsi + 0x28] 	       205	quota_v2.c	FUNCTION_7	CALL_4
0x40003b4	    0x488987c80000	             mov qword [rdi + 0xc8], rax	       205	quota_v2.c	FUNCTION_7	CALL_4
0x40003bb	          0x8b4610	            mov eax, dword [rsi + 0x10] 	       206	quota_v2.c	FUNCTION_7	CALL_6
0x40003be	        0x48c1e00a	                            shl rax, 0xa	       206	quota_v2.c	FUNCTION_7	CALL_6
0x40003c2	    0x488987880000	             mov qword [rdi + 0x88], rax	       206	quota_v2.c	FUNCTION_7	CALL_6
0x40003c9	          0x8b4614	            mov eax, dword [rsi + 0x14] 	       207	quota_v2.c	FUNCTION_7	CALL_8
0x40003cc	        0x48c1e00a	                            shl rax, 0xa	       207	quota_v2.c	FUNCTION_7	CALL_8
0x40003d0	    0x488987900000	             mov qword [rdi + 0x90], rax	       207	quota_v2.c	FUNCTION_7	CALL_8
0x40003d7	        0x488b4618	            mov rax, qword [rsi + 0x18] 	       208	quota_v2.c	FUNCTION_7	CALL_9
0x40003db	    0x488987980000	             mov qword [rdi + 0x98], rax	       208	quota_v2.c	FUNCTION_7	CALL_9
0x40003e2	        0x488b4620	            mov rax, qword [rsi + 0x20] 	       209	quota_v2.c	FUNCTION_7	CALL_10
0x40003e6	    0x488987c00000	             mov qword [rdi + 0xc0], rax	       209	quota_v2.c	FUNCTION_7	CALL_10
0x40003ed	            0x31c0	                            xor eax, eax	       211	quota_v2.c	FUNCTION_7	CALL_11
0x40003ef	          0x4889e7	                            mov rdi, rsp	       211	quota_v2.c	FUNCTION_7	CALL_11
0x40003f2	          0xf348ab	              rep stosq qword [rdi], rax	       211	quota_v2.c	FUNCTION_7	CALL_11
0x40003f5	          0x4889e7	                            mov rdi, rsp	       213	quota_v2.c	FUNCTION_7	IF_1	CALL_13
0x40003f8	    0x48c744242801	               mov qword [rsp + 0x28], 1	       212	quota_v2.c	FUNCTION_7	CALL_12
0x4000401	      0xe800000000	                          call 0x4000406	       213	quota_v2.c	FUNCTION_7	IF_1	CALL_13
0x4000406	            0x85c0	                           test eax, eax	       213	quota_v2.c	FUNCTION_7	IF_1	CALL_13
0x4000408	            0x750b	                           jne 0x4000415	       213	quota_v2.c	FUNCTION_7	IF_1	CALL_13
0x400040a	    0x48c783c80000	               mov qword [rbx + 0xc8], 0	       214	quota_v2.c	FUNCTION_7	IF_1
0x4000415	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       215	quota_v2.c	FUNCTION_7
0x400041a	    0x654833042528	                xor rax, qword gs:[0x28]	       215	quota_v2.c	FUNCTION_7
0x4000423	            0x7506	                           jne 0x400042b	       215	quota_v2.c	FUNCTION_7
0x4000425	        0x4883c438	                           add rsp, 0x38	       215	quota_v2.c	FUNCTION_7
0x4000429	              0x5b	                                 pop rbx	       215	quota_v2.c	FUNCTION_7
0x400042a	              0xc3	                                     ret	       215	quota_v2.c	FUNCTION_7
0x400042b	      0xe800000000	               call sym.v2r1_mem2diskdqb	       215	quota_v2.c	FUNCTION_7
exit_v2_quota_format	IF,0:WHILE,0:functions,0:CALL,2:DO,0:FOR,0:ELSE,0:SWITCH,0	10
0x4000040	            0x4154	                                push r12	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000042	              0x55	                                push rbp	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000043	          0x4989fc	                            mov r12, rdi	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000046	              0x53	                                push rbx	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000047	    0x488d9f080100	                  lea rbx, [rdi + 0x108]	       408	quota_v2.c	FUNCTION_19	CALL_1
0x400004e	          0x4889f5	                            mov rbp, rsi	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000051	          0x4889df	                            mov rdi, rbx	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000054	              0xe8	                                 invalid	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000055	               0x0	                      add byte [rax], al	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000057	               0x0	                                 invalid	       409	quota_v2.c	FUNCTION_19	CALL_2
v2r1_disk2memdqb	IF,1:WHILE,0:functions,0:CALL,13:DO,0:FOR,0:ELSE,0:SWITCH,0	42
0x40002a0	              0x53	                                push rbx	       251	quota_v2.c	FUNCTION_10
0x40002a1	      0xb909000000	                              mov ecx, 9	       264	quota_v2.c	FUNCTION_10	CALL_11
0x40002a6	          0x4889fb	                            mov rbx, rdi	       251	quota_v2.c	FUNCTION_10
0x40002a9	      0xba48000000	                           mov edx, 0x48	       266	quota_v2.c	FUNCTION_10	IF_1	CALL_13
0x40002ae	        0x4883ec50	                           sub rsp, 0x50	       251	quota_v2.c	FUNCTION_10
0x40002b2	    0x65488b042528	                mov rax, qword gs:[0x28]	       251	quota_v2.c	FUNCTION_10
0x40002bb	      0x4889442448	             mov qword [rsp + 0x48], rax	       251	quota_v2.c	FUNCTION_10
0x40002c0	            0x31c0	                            xor eax, eax	       251	quota_v2.c	FUNCTION_10
0x40002c2	        0x488b4608	                mov rax, qword [rsi + 8]	       255	quota_v2.c	FUNCTION_10	CALL_1
0x40002c6	    0x488987a80000	             mov qword [rdi + 0xa8], rax	       255	quota_v2.c	FUNCTION_10	CALL_1
0x40002cd	        0x488b4610	            mov rax, qword [rsi + 0x10] 	       256	quota_v2.c	FUNCTION_10	CALL_2
0x40002d1	    0x488987b00000	             mov qword [rdi + 0xb0], rax	       256	quota_v2.c	FUNCTION_10	CALL_2
0x40002d8	        0x488b4618	            mov rax, qword [rsi + 0x18] 	       257	quota_v2.c	FUNCTION_10	CALL_3
0x40002dc	    0x488987b80000	             mov qword [rdi + 0xb8], rax	       257	quota_v2.c	FUNCTION_10	CALL_3
0x40002e3	        0x488b4640	            mov rax, qword [rsi + 0x40] 	       258	quota_v2.c	FUNCTION_10	CALL_4
0x40002e7	    0x488987c80000	             mov qword [rdi + 0xc8], rax	       258	quota_v2.c	FUNCTION_10	CALL_4
0x40002ee	        0x488b4620	            mov rax, qword [rsi + 0x20] 	       259	quota_v2.c	FUNCTION_10	CALL_6
0x40002f2	        0x48c1e00a	                            shl rax, 0xa	       259	quota_v2.c	FUNCTION_10	CALL_6
0x40002f6	    0x488987880000	             mov qword [rdi + 0x88], rax	       259	quota_v2.c	FUNCTION_10	CALL_6
0x40002fd	        0x488b4628	            mov rax, qword [rsi + 0x28] 	       260	quota_v2.c	FUNCTION_10	CALL_8
0x4000301	        0x48c1e00a	                            shl rax, 0xa	       260	quota_v2.c	FUNCTION_10	CALL_8
0x4000305	    0x488987900000	             mov qword [rdi + 0x90], rax	       260	quota_v2.c	FUNCTION_10	CALL_8
0x400030c	        0x488b4630	            mov rax, qword [rsi + 0x30] 	       261	quota_v2.c	FUNCTION_10	CALL_9
0x4000310	    0x488987980000	             mov qword [rdi + 0x98], rax	       261	quota_v2.c	FUNCTION_10	CALL_9
0x4000317	        0x488b4638	            mov rax, qword [rsi + 0x38] 	       262	quota_v2.c	FUNCTION_10	CALL_10
0x400031b	    0x488987c00000	             mov qword [rdi + 0xc0], rax	       262	quota_v2.c	FUNCTION_10	CALL_10
0x4000322	            0x31c0	                            xor eax, eax	       264	quota_v2.c	FUNCTION_10	CALL_11
0x4000324	          0x4889e7	                            mov rdi, rsp	       264	quota_v2.c	FUNCTION_10	CALL_11
0x4000327	          0xf348ab	              rep stosq qword [rdi], rax	       264	quota_v2.c	FUNCTION_10	CALL_11
0x400032a	          0x4889e7	                            mov rdi, rsp	       266	quota_v2.c	FUNCTION_10	IF_1	CALL_13
0x400032d	    0x48c744244001	               mov qword [rsp + 0x40], 1	       265	quota_v2.c	FUNCTION_10	CALL_12
0x4000336	      0xe800000000	                          call 0x400033b	       266	quota_v2.c	FUNCTION_10	IF_1	CALL_13
0x400033b	            0x85c0	                           test eax, eax	       266	quota_v2.c	FUNCTION_10	IF_1	CALL_13
0x400033d	            0x750b	                           jne 0x400034a	       266	quota_v2.c	FUNCTION_10	IF_1	CALL_13
0x400033f	    0x48c783c80000	               mov qword [rbx + 0xc8], 0	       267	quota_v2.c	FUNCTION_10	IF_1
0x400034a	      0x488b442448	            mov rax, qword [rsp + 0x48] 	       268	quota_v2.c	FUNCTION_10
0x400034f	    0x654833042528	                xor rax, qword gs:[0x28]	       268	quota_v2.c	FUNCTION_10
0x4000358	            0x7506	                           jne 0x4000360	       268	quota_v2.c	FUNCTION_10
0x400035a	        0x4883c450	                           add rsp, 0x50	       268	quota_v2.c	FUNCTION_10
0x400035e	              0x5b	                                 pop rbx	       268	quota_v2.c	FUNCTION_10
0x400035f	              0xc3	                                     ret	       268	quota_v2.c	FUNCTION_10
0x4000360	      0xe800000000	                          call 0x4000365	       268	quota_v2.c	FUNCTION_10
v2_read_header	IF,2:WHILE,0:functions,0:CALL,2:DO,0:FOR,0:ELSE,0:SWITCH,0	25
0x40001d0	              0x55	                                push rbp	        60	quota_v2.c	FUNCTION_3
0x40001d1	              0x53	                                push rbx	        60	quota_v2.c	FUNCTION_3
0x40001d2	          0x4531c0	                            xor r8d, r8d	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001d5	        0x488b4730	            mov rax, qword [rdi + 0x30] 	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001d9	          0x4889fd	                            mov rbp, rdi	        60	quota_v2.c	FUNCTION_3
0x40001dc	      0xb908000000	                              mov ecx, 8	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001e1	    0x488b80980000	            mov rax, qword [rax + 0x98] 	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001e8	      0xe800000000	                          call 0x40001ed	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001ed	          0x4889c3	                            mov rbx, rax	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001f0	            0x31c0	                            xor eax, eax	        63	quota_v2.c	FUNCTION_3	CALL_1
0x40001f2	        0x4883fb08	                              cmp rbx, 8	        65	quota_v2.c	FUNCTION_3	IF_1
0x40001f6	            0x742b	                            je 0x4000223	        65	quota_v2.c	FUNCTION_3	IF_1
0x40001f8	    0x48c7c2000000	                              mov rdx, 0	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x40001ff	          0x4989d8	                             mov r8, rbx	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x4000202	      0xb908000000	                              mov ecx, 8	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x4000207	    0x48c7c6000000	                              mov rsi, 0	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x400020e	          0x4889ef	                            mov rdi, rbp	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x4000211	      0xe800000000	                          call 0x4000216	        66	quota_v2.c	FUNCTION_3	IF_1	CALL_2
0x4000216	      0xbafbffffff	                     mov edx, 0xfffffffb	        69	quota_v2.c	FUNCTION_3	IF_1	IF_2
0x400021b	          0x4885db	                           test rbx, rbx	        69	quota_v2.c	FUNCTION_3	IF_1	IF_2
0x400021e	            0x89d0	                            mov eax, edx	        69	quota_v2.c	FUNCTION_3	IF_1	IF_2
0x4000220	           0xf48c3	                          cmovs eax, ebx	        69	quota_v2.c	FUNCTION_3	IF_1	IF_2
0x4000223	              0x5b	                                 pop rbx	        73	quota_v2.c	FUNCTION_3
0x4000224	              0x5d	                                 pop rbp	        73	quota_v2.c	FUNCTION_3
0x4000225	              0xc3	                                     ret	        73	quota_v2.c	FUNCTION_3
v2_get_next_id	IF,0:WHILE,0:functions,0:CALL,5:DO,0:FOR,0:ELSE,0:SWITCH,0	21
0x4000040	            0x4154	                                push r12	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000042	              0x55	                                push rbp	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000043	          0x4989fc	                            mov r12, rdi	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000046	              0x53	                                push rbx	       408	quota_v2.c	FUNCTION_19	CALL_1
0x4000047	    0x488d9f080100	                  lea rbx, [rdi + 0x108]	       408	quota_v2.c	FUNCTION_19	CALL_1
0x400004e	          0x4889f5	                            mov rbp, rsi	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000051	          0x4889df	                            mov rdi, rbx	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000054	      0xe800000000	                          call 0x4000059	       409	quota_v2.c	FUNCTION_19	CALL_2
0x4000059	        0x48634504	            movsxd rax, dword [rbp + 4] 	       368	quota_v2.c	FUNCTION_17	CALL_4
0x400005d	          0x4889ee	                            mov rsi, rbp	       368	quota_v2.c	FUNCTION_17	CALL_4
0x4000060	        0x488d04c0	                  lea rax, [rax + rax*8]	       368	quota_v2.c	FUNCTION_17	CALL_4
0x4000064	    0x498bbcc48801	   mov rdi, qword [r12 + rax*8 + 0x188] 	       368	quota_v2.c	FUNCTION_17	CALL_4
0x400006c	      0xe800000000	                          call 0x4000071	       368	quota_v2.c	FUNCTION_17	CALL_4
0x4000071	          0x4889df	                            mov rdi, rbx	       369	quota_v2.c	FUNCTION_17	CALL_5
0x4000074	            0x89c5	                            mov ebp, eax	       368	quota_v2.c	FUNCTION_17	CALL_4
0x4000076	      0xe800000000	                          call 0x400007b	       369	quota_v2.c	FUNCTION_17	CALL_5
0x400007b	            0x89e8	                            mov eax, ebp	       371	quota_v2.c	FUNCTION_17
0x400007d	              0x5b	                                 pop rbx	       371	quota_v2.c	FUNCTION_17
0x400007e	              0x5d	                                 pop rbp	       371	quota_v2.c	FUNCTION_17
0x400007f	            0x415c	                                 pop r12	       371	quota_v2.c	FUNCTION_17
0x4000081	              0xc3	                                     ret	       371	quota_v2.c	FUNCTION_17
v2r0_mem2diskdqb	IF,1:WHILE,0:functions,0:CALL,15:DO,0:FOR,0:ELSE,0:SWITCH,0	41
0x40004f0	              0x55	                                push rbp	       218	quota_v2.c	FUNCTION_8
0x40004f1	              0x53	                                push rbx	       218	quota_v2.c	FUNCTION_8
0x40004f2	          0x4889fb	                            mov rbx, rdi	       218	quota_v2.c	FUNCTION_8
0x40004f5	        0x48634674	         movsxd rax, dword [rsi + 0x74] 	       221	quota_v2.c	FUNCTION_8
0x40004f9	        0x488b5668	            mov rdx, qword [rsi + 0x68] 	       221	quota_v2.c	FUNCTION_8
0x40004fd	        0x488d04c0	                  lea rax, [rax + rax*8]	       221	quota_v2.c	FUNCTION_8
0x4000501	        0x488d04c2	                  lea rax, [rdx + rax*8]	       221	quota_v2.c	FUNCTION_8
0x4000505	    0x488ba8880100	           mov rbp, qword [rax + 0x188] 	       221	quota_v2.c	FUNCTION_8
0x400050c	    0x488b86a80000	            mov rax, qword [rsi + 0xa8] 	       224	quota_v2.c	FUNCTION_8	CALL_2
0x4000513	          0x894704	                mov dword [rdi + 4], eax	       224	quota_v2.c	FUNCTION_8	CALL_2
0x4000516	    0x488b86b00000	            mov rax, qword [rsi + 0xb0] 	       225	quota_v2.c	FUNCTION_8	CALL_3
0x400051d	          0x894708	                mov dword [rdi + 8], eax	       225	quota_v2.c	FUNCTION_8	CALL_3
0x4000520	    0x488b86b80000	            mov rax, qword [rsi + 0xb8] 	       226	quota_v2.c	FUNCTION_8	CALL_4
0x4000527	          0x89470c	              mov dword [rdi + 0xc], eax	       226	quota_v2.c	FUNCTION_8	CALL_4
0x400052a	    0x488b86c80000	            mov rax, qword [rsi + 0xc8] 	       227	quota_v2.c	FUNCTION_8	CALL_5
0x4000531	        0x48894728	             mov qword [rdi + 0x28], rax	       227	quota_v2.c	FUNCTION_8	CALL_5
0x4000535	    0x488b86880000	            mov rax, qword [rsi + 0x88] 	       228	quota_v2.c	FUNCTION_8	CALL_7
0x400053c	    0x4805ff030000	                          add rax, 0x3ff	       228	quota_v2.c	FUNCTION_8	CALL_7
0x4000542	        0x48c1f80a	                            sar rax, 0xa	       228	quota_v2.c	FUNCTION_8	CALL_7
0x4000546	          0x894710	             mov dword [rdi + 0x10], eax	       228	quota_v2.c	FUNCTION_8	CALL_7
0x4000549	    0x488b86900000	            mov rax, qword [rsi + 0x90] 	       229	quota_v2.c	FUNCTION_8	CALL_9
0x4000550	    0x4805ff030000	                          add rax, 0x3ff	       229	quota_v2.c	FUNCTION_8	CALL_9
0x4000556	        0x48c1f80a	                            sar rax, 0xa	       229	quota_v2.c	FUNCTION_8	CALL_9
0x400055a	          0x894714	             mov dword [rdi + 0x14], eax	       229	quota_v2.c	FUNCTION_8	CALL_9
0x400055d	    0x488b86980000	            mov rax, qword [rsi + 0x98] 	       230	quota_v2.c	FUNCTION_8	CALL_10
0x4000564	        0x48894718	             mov qword [rdi + 0x18], rax	       230	quota_v2.c	FUNCTION_8	CALL_10
0x4000568	    0x488b86c00000	            mov rax, qword [rsi + 0xc0] 	       231	quota_v2.c	FUNCTION_8	CALL_11
0x400056f	        0x48894720	             mov qword [rdi + 0x20], rax	       231	quota_v2.c	FUNCTION_8	CALL_11
0x4000573	        0x488b7670	            mov rsi, qword [rsi + 0x70] 	       232	quota_v2.c	FUNCTION_8	CALL_13
0x4000577	    0x48c7c7000000	                              mov rdi, 0	       232	quota_v2.c	FUNCTION_8	CALL_13
0x400057e	      0xe800000000	                          call 0x4000583	       232	quota_v2.c	FUNCTION_8	CALL_13
0x4000583	          0x4889de	                            mov rsi, rbx	       233	quota_v2.c	FUNCTION_8	IF_1	CALL_14
0x4000586	            0x8903	                    mov dword [rbx], eax	       232	quota_v2.c	FUNCTION_8	CALL_13
0x4000588	          0x4889ef	                            mov rdi, rbp	       233	quota_v2.c	FUNCTION_8	IF_1	CALL_14
0x400058b	      0xe800000000	                          call 0x4000590	       233	quota_v2.c	FUNCTION_8	IF_1	CALL_14
0x4000590	            0x85c0	                           test eax, eax	       233	quota_v2.c	FUNCTION_8	IF_1	CALL_14
0x4000592	            0x7408	                            je 0x400059c	       233	quota_v2.c	FUNCTION_8	IF_1	CALL_14
0x4000594	    0x48c743280100	               mov qword [rbx + 0x28], 1	       234	quota_v2.c	FUNCTION_8	CALL_15
0x400059c	              0x5b	                                 pop rbx	       235	quota_v2.c	FUNCTION_8
0x400059d	              0x5d	                                 pop rbp	       235	quota_v2.c	FUNCTION_8
0x400059e	              0xc3	                                     ret	       235	quota_v2.c	FUNCTION_8
v2_write_dquot	IF,2:WHILE,0:functions,0:CALL,7:DO,0:FOR,0:ELSE,2:SWITCH,0	38
0x40000e0	              0x55	                                push rbp	       317	quota_v2.c	FUNCTION_14
0x40000e1	              0x53	                                push rbx	       317	quota_v2.c	FUNCTION_14
0x40000e2	          0x4889fb	                            mov rbx, rdi	       317	quota_v2.c	FUNCTION_14
0x40000e5	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	       318	quota_v2.c	FUNCTION_14	CALL_1
0x40000e9	      0x48837b7800	               cmp qword [rbx + 0x78], 0	       328	quota_v2.c	FUNCTION_14	IF_1
0x40000ee	    0x488daf080100	                  lea rbp, [rdi + 0x108]	       330	quota_v2.c	FUNCTION_14	IF_1	CALL_2
0x40000f5	          0x4889ef	                            mov rdi, rbp	       330	quota_v2.c	FUNCTION_14	IF_1	CALL_2
0x40000f8	            0x7533	                           jne 0x400012d	       328	quota_v2.c	FUNCTION_14	IF_1
0x40000fa	      0xe800000000	                          call 0x40000ff	       330	quota_v2.c	FUNCTION_14	IF_1	CALL_2
0x40000ff	        0x48634374	         movsxd rax, dword [rbx + 0x74] 	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000103	        0x488b4b68	            mov rcx, qword [rbx + 0x68] 	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000107	          0x4889de	                            mov rsi, rbx	       334	quota_v2.c	FUNCTION_14	CALL_4
0x400010a	        0x488d04c0	                  lea rax, [rax + rax*8]	       335	quota_v2.c	FUNCTION_14	CALL_5
0x400010e	        0x488d04c1	                  lea rax, [rcx + rax*8]	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000112	    0x488bb8880100	           mov rdi, qword [rax + 0x188] 	       334	quota_v2.c	FUNCTION_14	CALL_4
0x4000119	      0xe800000000	                          call 0x400011e	       334	quota_v2.c	FUNCTION_14	CALL_4
0x400011e	          0x4889ef	                            mov rdi, rbp	       338	quota_v2.c	FUNCTION_14	CALL_6
0x4000121	            0x89c3	                            mov ebx, eax	       334	quota_v2.c	FUNCTION_14	CALL_4
0x4000123	      0xe800000000	                          call 0x4000128	       338	quota_v2.c	FUNCTION_14	CALL_6
0x4000128	            0x89d8	                            mov eax, ebx	       342	quota_v2.c	FUNCTION_14
0x400012a	              0x5b	                                 pop rbx	       342	quota_v2.c	FUNCTION_14
0x400012b	              0x5d	                                 pop rbp	       342	quota_v2.c	FUNCTION_14
0x400012c	              0xc3	                                     ret	       342	quota_v2.c	FUNCTION_14
0x400012d	      0xe800000000	                          call 0x4000132	       332	quota_v2.c	FUNCTION_14	ELSE_1	CALL_3
0x4000132	        0x48634374	         movsxd rax, dword [rbx + 0x74] 	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000136	        0x488b5368	            mov rdx, qword [rbx + 0x68] 	       335	quota_v2.c	FUNCTION_14	CALL_5
0x400013a	          0x4889de	                            mov rsi, rbx	       334	quota_v2.c	FUNCTION_14	CALL_4
0x400013d	        0x488d04c0	                  lea rax, [rax + rax*8]	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000141	        0x488d04c2	                  lea rax, [rdx + rax*8]	       335	quota_v2.c	FUNCTION_14	CALL_5
0x4000145	    0x488bb8880100	           mov rdi, qword [rax + 0x188] 	       334	quota_v2.c	FUNCTION_14	CALL_4
0x400014c	      0xe800000000	                          call 0x4000151	       334	quota_v2.c	FUNCTION_14	CALL_4
0x4000151	          0x4889ef	                            mov rdi, rbp	       340	quota_v2.c	FUNCTION_14	CALL_7
0x4000154	            0x89c3	                            mov ebx, eax	       334	quota_v2.c	FUNCTION_14	CALL_4
0x4000156	      0xe800000000	                          call 0x400015b	       340	quota_v2.c	FUNCTION_14	CALL_7
0x400015b	            0x89d8	                            mov eax, ebx	       342	quota_v2.c	FUNCTION_14
0x400015d	              0x5b	                                 pop rbx	       342	quota_v2.c	FUNCTION_14
0x400015e	              0x5d	                                 pop rbp	       342	quota_v2.c	FUNCTION_14
0x400015f	              0xc3	                                     ret	       342	quota_v2.c	FUNCTION_14
v2_free_file_info	IF,0:WHILE,0:functions,0:CALL,2:DO,0:FOR,0:ELSE,0:SWITCH,0	6
0x40001b0	          0x4863f6	                         movsxd rsi, esi	       358	quota_v2.c	FUNCTION_16	CALL_2
0x40001b3	        0x488d04f6	                  lea rax, [rsi + rsi*8]	       358	quota_v2.c	FUNCTION_16	CALL_2
0x40001b7	    0x488bbcc78801	   mov rdi, qword [rdi + rax*8 + 0x188] 	       358	quota_v2.c	FUNCTION_16	CALL_2
0x40001bf	      0xe800000000	                          call 0x40001c4	       358	quota_v2.c	FUNCTION_16	CALL_2
0x40001c4	            0x31c0	                            xor eax, eax	       360	quota_v2.c	FUNCTION_16
0x40001c6	              0xc3	                                     ret	       360	quota_v2.c	FUNCTION_16
v2_check_quota_file	IF,2:WHILE,0:functions,0:CALL,3:DO,0:FOR,0:ELSE,0:SWITCH,0	28
0x4000230	              0x53	                                push rbx	        77	quota_v2.c	FUNCTION_4
0x4000231	          0x4863de	                         movsxd rbx, esi	        77	quota_v2.c	FUNCTION_4
0x4000234	            0x89de	                            mov esi, ebx	        82	quota_v2.c	FUNCTION_4	IF_1	CALL_1
0x4000236	        0x4883ec10	                           sub rsp, 0x10	        77	quota_v2.c	FUNCTION_4
0x400023a	          0x4889e2	                            mov rdx, rsp	        82	quota_v2.c	FUNCTION_4	IF_1	CALL_1
0x400023d	    0x65488b042528	                mov rax, qword gs:[0x28]	        77	quota_v2.c	FUNCTION_4
0x4000246	      0x4889442408	                mov qword [rsp + 8], rax	        77	quota_v2.c	FUNCTION_4
0x400024b	            0x31c0	                            xor eax, eax	        77	quota_v2.c	FUNCTION_4
0x400024d	      0xe87effffff	                 call sym.v2_read_header	        82	quota_v2.c	FUNCTION_4	IF_1	CALL_1
0x4000252	            0x85c0	                           test eax, eax	        82	quota_v2.c	FUNCTION_4	IF_1	CALL_1
0x4000254	            0x7535	                           jne 0x400028b	        82	quota_v2.c	FUNCTION_4	IF_1	CALL_1
0x4000256	    0x8b0c9d000000	                  mov ecx, dword [rbx*4]	        84	quota_v2.c	FUNCTION_4	IF_2	CALL_2
0x400025d	          0x390c24	                    cmp dword [rsp], ecx	        84	quota_v2.c	FUNCTION_4	IF_2	CALL_2
0x4000260	            0x7416	                            je 0x4000278	        84	quota_v2.c	FUNCTION_4	IF_2	CALL_2
0x4000262	      0x488b542408	                mov rdx, qword [rsp + 8]	        88	quota_v2.c	FUNCTION_4
0x4000267	    0x654833142528	                xor rdx, qword gs:[0x28]	        88	quota_v2.c	FUNCTION_4
0x4000270	            0x751d	                           jne 0x400028f	        88	quota_v2.c	FUNCTION_4
0x4000272	        0x4883c410	                           add rsp, 0x10	        88	quota_v2.c	FUNCTION_4
0x4000276	              0x5b	                                 pop rbx	        88	quota_v2.c	FUNCTION_4
0x4000277	              0xc3	                                     ret	        88	quota_v2.c	FUNCTION_4
0x4000278	    0x8b049d000000	                  mov eax, dword [rbx*4]	        83	quota_v2.c	FUNCTION_4	IF_1
0x400027f	        0x39442404	                cmp dword [rsp + 4], eax	        83	quota_v2.c	FUNCTION_4	IF_1
0x4000283	           0xf96c0	                                setbe al	        83	quota_v2.c	FUNCTION_4	IF_1
0x4000286	           0xfb6c0	                           movzx eax, al	        83	quota_v2.c	FUNCTION_4	IF_1
0x4000289	            0xebd7	                           jmp 0x4000262	        83	quota_v2.c	FUNCTION_4	IF_1
0x400028b	            0x31c0	                            xor eax, eax	        83	quota_v2.c	FUNCTION_4	IF_1
0x400028d	            0xebd3	                           jmp 0x4000262	        83	quota_v2.c	FUNCTION_4	IF_1
0x400028f	      0xe800000000	                          call 0x4000294	        88	quota_v2.c	FUNCTION_4
v2_read_dquot	IF,0:WHILE,0:functions,0:CALL,5:DO,0:FOR,0:ELSE,0:SWITCH,0	21
0x4000160	              0x55	                                push rbp	       304	quota_v2.c	FUNCTION_13
0x4000161	              0x53	                                push rbx	       304	quota_v2.c	FUNCTION_13
0x4000162	          0x4889fd	                            mov rbp, rdi	       304	quota_v2.c	FUNCTION_13
0x4000165	        0x488b4768	            mov rax, qword [rdi + 0x68] 	       308	quota_v2.c	FUNCTION_13	CALL_2
0x4000169	    0x488d98080100	                  lea rbx, [rax + 0x108]	       308	quota_v2.c	FUNCTION_13	CALL_2
0x4000170	          0x4889df	                            mov rdi, rbx	       308	quota_v2.c	FUNCTION_13	CALL_2
0x4000173	      0xe800000000	                          call 0x4000178	       308	quota_v2.c	FUNCTION_13	CALL_2
0x4000178	        0x48634574	         movsxd rax, dword [rbp + 0x74] 	       310	quota_v2.c	FUNCTION_13	CALL_4
0x400017c	        0x488b5568	            mov rdx, qword [rbp + 0x68] 	       310	quota_v2.c	FUNCTION_13	CALL_4
0x4000180	          0x4889ee	                            mov rsi, rbp	       309	quota_v2.c	FUNCTION_13	CALL_3
0x4000183	        0x488d04c0	                  lea rax, [rax + rax*8]	       310	quota_v2.c	FUNCTION_13	CALL_4
0x4000187	        0x488d04c2	                  lea rax, [rdx + rax*8]	       310	quota_v2.c	FUNCTION_13	CALL_4
0x400018b	    0x488bb8880100	           mov rdi, qword [rax + 0x188] 	       309	quota_v2.c	FUNCTION_13	CALL_3
0x4000192	      0xe800000000	                          call 0x4000197	       309	quota_v2.c	FUNCTION_13	CALL_3
0x4000197	          0x4889df	                            mov rdi, rbx	       312	quota_v2.c	FUNCTION_13	CALL_5
0x400019a	            0x89c5	                            mov ebp, eax	       309	quota_v2.c	FUNCTION_13	CALL_3
0x400019c	      0xe800000000	                          call 0x40001a1	       312	quota_v2.c	FUNCTION_13	CALL_5
0x40001a1	            0x89e8	                            mov eax, ebp	       314	quota_v2.c	FUNCTION_13
0x40001a3	              0x5b	                                 pop rbx	       314	quota_v2.c	FUNCTION_13
0x40001a4	              0x5d	                                 pop rbp	       314	quota_v2.c	FUNCTION_13
0x40001a5	              0xc3	                                     ret	       314	quota_v2.c	FUNCTION_13
