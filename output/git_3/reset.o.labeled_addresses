reset_index	functions,0:ELSE,0:DO,0:FOR,1:IF,7:SWITCH,1:WHILE,0:CALL,15	137
0x4000130	            0x4156	                                push r14	        46	reset.c	FUNCTION_2
0x4000132	            0x4155	                                push r13	        46	reset.c	FUNCTION_2
0x4000134	      0xb960000000	                           mov ecx, 0x60	        90	string3.h	FUNCTION_15	CALL_6
0x4000139	            0x4154	                                push r12	        46	reset.c	FUNCTION_2
0x400013b	              0x55	                                push rbp	        46	reset.c	FUNCTION_2
0x400013c	          0x4989fd	                            mov r13, rdi	        46	reset.c	FUNCTION_2
0x400013f	              0x53	                                push rbx	        46	reset.c	FUNCTION_2
0x4000140	            0x89f5	                            mov ebp, esi	        46	reset.c	FUNCTION_2
0x4000142	    0x4881ec800300	                          sub rsp, 0x380	        46	reset.c	FUNCTION_2
0x4000149	      0x4c8d642470	                   lea r12, [rsp + 0x70]	        90	string3.h	FUNCTION_15	CALL_6
0x400014e	    0x64488b042528	                mov rax, qword fs:[0x28]	        46	reset.c	FUNCTION_2
0x4000157	    0x488984247803	            mov qword [rsp + 0x378], rax	        46	reset.c	FUNCTION_2
0x400015f	            0x31c0	                            xor eax, eax	        46	reset.c	FUNCTION_2
0x4000161	          0x4c89e7	                            mov rdi, r12	        90	string3.h	FUNCTION_15	CALL_6
0x4000164	            0x85d2	                           test edx, edx	        59	reset.c	FUNCTION_2	IF_1
0x4000166	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_15	CALL_6
0x4000169	    0xc78424700200	              mov dword [rsp + 0x270], 1	        54	reset.c	FUNCTION_2
0x4000174	    0x48c784249002	              mov qword [rsp + 0x290], 0	        55	reset.c	FUNCTION_2
0x4000180	    0x48c784248802	              mov qword [rsp + 0x288], 0	        56	reset.c	FUNCTION_2
0x400018c	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        57	reset.c	FUNCTION_2
0x4000198	    0xc74424740100	               mov dword [rsp + 0x74], 1	        58	reset.c	FUNCTION_2
0x40001a0	            0x750b	                           jne 0x40001ad	        59	reset.c	FUNCTION_2	IF_1
0x40001a2	    0xc78424880000	               mov dword [rsp + 0x88], 1	        60	reset.c	FUNCTION_2	IF_1
0x40001ad	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001b0	     0xf84ba000000	                            je 0x4000270	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001b6	     0xf8cbc000000	                            jl 0x4000278	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001bc	          0x83fd04	                              cmp ebp, 4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001bf	     0xf8fb3000000	                            jg 0x4000278	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001c5	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2
0x40001ca	    0xc74424780100	               mov dword [rsp + 0x78], 1	        64	reset.c	FUNCTION_2	SWITCH_1
0x40001d2	      0xe800000000	                          call 0x40001d7	        73	reset.c	FUNCTION_2
0x40001d7	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x40001da	     0xf85b3000000	                           jne 0x4000293	        75	reset.c	FUNCTION_2	IF_2
0x40001e0	          0x4889e6	                            mov rsi, rsp	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40001e3	      0xbf00000000	                              mov edi, 0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40001e8	      0xe800000000	                          call 0x40001ed	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40001ed	            0x85c0	                           test eax, eax	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40001ef	     0xf854b010000	                           jne 0x4000340	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40001f5	      0x4c8d742420	                   lea r14, [rsp + 0x20]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x40001fa	          0x4889e6	                            mov rsi, rsp	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x40001fd	          0x4c89f7	                            mov rdi, r14	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000200	      0xe800000000	                          call 0x4000205	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000205	          0x4885c0	                           test rax, rax	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000208	     0xf8452010000	                            je 0x4000360	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x400020e	        0x498d7e28	                   lea rdi, [r14 + 0x28]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000212	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000215	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        82	reset.c	FUNCTION_2	IF_2
0x4000221	      0xbb01000000	                              mov ebx, 1	        81	reset.c	FUNCTION_2	IF_2
0x4000226	      0xe800000000	                          call 0x400022b	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400022b	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400022e	            0x757a	                           jne 0x40002aa	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000230	          0x4c89ef	                            mov rdi, r13	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000233	      0xe800000000	                          call 0x4000238	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000238	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26
0x400023a	          0x4889c5	                            mov rbp, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x400023d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26
0x4000242	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26
0x4000247	      0xe800000000	                          call 0x400024c	        54	gettext.h	FUNCTION_26
0x400024c	          0x4889ee	                            mov rsi, rbp	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x400024f	          0x4889c7	                            mov rdi, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000252	            0x31c0	                            xor eax, eax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000254	      0xe800000000	                          call 0x4000259	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000259	            0x85db	                           test ebx, ebx	       102	reset.c	FUNCTION_2	FOR_1
0x400025b	     0xf851d010000	                           jne 0x400037e	       102	reset.c	FUNCTION_2	FOR_1
0x4000261	      0xb8ffffffff	                     mov eax, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000266	            0xeb78	                           jmp 0x40002e0	        51	reset.c	FUNCTION_2
0x4000268	     0xf1f84000000	                   nop dword [rax + rax]	        51	reset.c	FUNCTION_2
0x4000270	    0xc74424780100	               mov dword [rsp + 0x78], 1	        67	reset.c	FUNCTION_2	SWITCH_1
0x4000278	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2
0x400027d	    0xc74424700100	               mov dword [rsp + 0x70], 1	        70	reset.c	FUNCTION_2	SWITCH_1
0x4000285	      0xe800000000	                          call 0x400028a	        73	reset.c	FUNCTION_2
0x400028a	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x400028d	     0xf844dffffff	                            je 0x40001e0	        75	reset.c	FUNCTION_2	IF_2
0x4000293	      0x4c8d742420	                   lea r14, [rsp + 0x20]	        75	reset.c	FUNCTION_2	IF_2
0x4000298	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400029b	            0x31db	                            xor ebx, ebx	        47	reset.c	FUNCTION_2
0x400029d	          0x4c89f7	                            mov rdi, r14	        75	reset.c	FUNCTION_2	IF_2
0x40002a0	      0xe800000000	                          call 0x40002a5	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x40002a5	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x40002a8	            0x7486	                            je 0x4000230	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x40002aa	          0x83c301	                              add ebx, 1	        89	reset.c	FUNCTION_2
0x40002ad	          0x4c89e2	                            mov rdx, r12	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002b0	          0x4c89f6	                            mov rsi, r14	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002b3	            0x89df	                            mov edi, ebx	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002b5	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40002bb	      0xe800000000	                          call 0x40002c0	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002c0	            0x85c0	                           test eax, eax	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002c2	            0x744c	                            je 0x4000310	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40002c4	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_15
0x40002c9	      0xe800000000	                          call 0x40002ce	       103	reset.c	FUNCTION_2	CALL_15
0x40002ce	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x40002d1	            0x740a	                            je 0x40002dd	       102	reset.c	FUNCTION_2	FOR_1
0x40002d3	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	       103	reset.c	FUNCTION_2	CALL_15
0x40002d8	      0xe800000000	                          call 0x40002dd	       103	reset.c	FUNCTION_2	CALL_15
0x40002dd	          0x4489e0	                           mov eax, r12d	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x40002e0	    0x488b8c247803	           mov rcx, qword [rsp + 0x378] 	       105	reset.c	FUNCTION_2
0x40002e8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       105	reset.c	FUNCTION_2
0x40002f1	     0xf8582000000	                           jne 0x4000379	       105	reset.c	FUNCTION_2
0x40002f7	    0x4881c4800300	                          add rsp, 0x380	       105	reset.c	FUNCTION_2
0x40002fe	              0x5b	                                 pop rbx	       105	reset.c	FUNCTION_2
0x40002ff	              0x5d	                                 pop rbp	       105	reset.c	FUNCTION_2
0x4000300	            0x415c	                                 pop r12	       105	reset.c	FUNCTION_2
0x4000302	            0x415d	                                 pop r13	       105	reset.c	FUNCTION_2
0x4000304	            0x415e	                                 pop r14	       105	reset.c	FUNCTION_2
0x4000306	              0xc3	                                     ret	       105	reset.c	FUNCTION_2
0x4000307	    0x660f1f840000	                    nop word [rax + rax]	       105	reset.c	FUNCTION_2
0x4000310	          0x4531e4	                          xor r12d, r12d	        99	reset.c	FUNCTION_2
0x4000313	          0x83e5fd	                     and ebp, 0xfffffffd	        94	reset.c	FUNCTION_2	IF_7
0x4000316	            0x75ac	                           jne 0x40002c4	        94	reset.c	FUNCTION_2	IF_7
0x4000318	          0x4c89ef	                            mov rdi, r13	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x400031b	      0xe800000000	                          call 0x4000320	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x4000320	      0xbf00000000	                              mov edi, 0	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x4000325	          0x4889c6	                            mov rsi, rax	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x4000328	      0xe800000000	                          call 0x400032d	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x400032d	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_15
0x4000332	      0xe800000000	                          call 0x4000337	       103	reset.c	FUNCTION_2	CALL_15
0x4000337	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x400033a	            0x7597	                           jne 0x40002d3	       102	reset.c	FUNCTION_2	FOR_1
0x400033c	            0xeb9f	                           jmp 0x40002dd	       102	reset.c	FUNCTION_2	FOR_1
0x400033e	            0x6690	                                     nop	       102	reset.c	FUNCTION_2	FOR_1
0x4000340	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26
0x4000342	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26
0x4000347	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26
0x400034c	      0xe800000000	                          call 0x4000351	        54	gettext.h	FUNCTION_26
0x4000351	          0x4889c7	                            mov rdi, rax	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000354	            0x31c0	                            xor eax, eax	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000356	      0xe800000000	                          call 0x400035b	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x400035b	      0xe901ffffff	                           jmp 0x4000261	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000360	      0xbf00000000	                              mov edi, 0	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000365	      0xe806fdffff	                       call sym._.part.0	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x400036a	          0x4889c7	                            mov rdi, rax	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x400036d	            0x31c0	                            xor eax, eax	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x400036f	      0xe800000000	                          call 0x4000374	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000374	      0xe9e8feffff	                           jmp 0x4000261	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000379	      0xe800000000	                          call 0x400037e	       105	reset.c	FUNCTION_2
0x400037e	        0x4183ccff	                     or r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000382	      0xe93dffffff	                           jmp 0x40002c4	        51	reset.c	FUNCTION_2
git_reset_config	functions,0:ELSE,0:DO,0:FOR,0:IF,1:SWITCH,0:WHILE,0:CALL,3	12
0x4000040	          0x4889f8	                            mov rax, rdi	       273	reset.c	FUNCTION_10
0x4000043	          0x4989f0	                             mov r8, rsi	       273	reset.c	FUNCTION_10
0x4000046	      0xbf00000000	                              mov edi, 0	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004b	          0x4889c6	                            mov rsi, rax	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004e	      0xb912000000	                           mov ecx, 0x12	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000053	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000055	          0x4c89c6	                             mov rsi, r8	       275	reset.c	FUNCTION_10	CALL_2
0x4000058	          0x4889c7	                            mov rdi, rax	       275	reset.c	FUNCTION_10	CALL_2
0x400005b	            0x740b	                            je 0x4000068	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400005d	      0xe900000000	                           jmp 0x4000062	       277	reset.c	FUNCTION_10	CALL_3
0x4000062	    0x660f1f440000	                    nop word [rax + rax]	       277	reset.c	FUNCTION_10	CALL_3
0x4000068	      0xe900000000	                           jmp 0x400006d	       275	reset.c	FUNCTION_10	CALL_2
update_index_from_diff	functions,0:ELSE,0:DO,0:FOR,1:IF,3:SWITCH,0:WHILE,0:CALL,5	87
0x4000390	            0x4157	                                push r15	       123	reset.c	FUNCTION_4
0x4000392	            0x4156	                                push r14	       123	reset.c	FUNCTION_4
0x4000394	            0x4155	                                push r13	       123	reset.c	FUNCTION_4
0x4000396	            0x4154	                                push r12	       123	reset.c	FUNCTION_4
0x4000398	              0x55	                                push rbp	       123	reset.c	FUNCTION_4
0x4000399	              0x53	                                push rbx	       123	reset.c	FUNCTION_4
0x400039a	        0x4883ec18	                           sub rsp, 0x18	       123	reset.c	FUNCTION_4
0x400039e	          0x8b470c	              mov eax, dword [rdi + 0xc]	       127	reset.c	FUNCTION_4	FOR_1
0x40003a1	          0x448b3a	                   mov r15d, dword [rdx]	       125	reset.c	FUNCTION_4
0x40003a4	            0x85c0	                           test eax, eax	       127	reset.c	FUNCTION_4	FOR_1
0x40003a6	     0xf8e9b000000	                           jle 0x4000447	       127	reset.c	FUNCTION_4	FOR_1
0x40003ac	          0x4989fe	                            mov r14, rdi	       127	reset.c	FUNCTION_4	FOR_1
0x40003af	          0x4531ed	                          xor r13d, r13d	       127	reset.c	FUNCTION_4	FOR_1
0x40003b2	          0x4531e4	                          xor r12d, r12d	       127	reset.c	FUNCTION_4	FOR_1
0x40003b5	            0xeb5c	                           jmp 0x4000413	       127	reset.c	FUNCTION_4	FOR_1
0x40003b7	    0x660f1f840000	                    nop word [rax + rax]	       127	reset.c	FUNCTION_4	FOR_1
0x40003c0	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_52	CALL_1
0x40003c5	      0xbe00000000	                              mov esi, 0	       975	cache.h	FUNCTION_52	CALL_1
0x40003ca	          0x4889df	                            mov rdi, rbx	       975	cache.h	FUNCTION_52	CALL_1
0x40003cd	      0xe800000000	                          call 0x40003d2	       975	cache.h	FUNCTION_52	CALL_1
0x40003d2	            0x85c0	                           test eax, eax	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003d4	            0x7450	                            je 0x4000426	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003d6	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003da	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003dd	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003df	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003e2	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003e5	      0xe800000000	                          call 0x40003ea	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003ea	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x40003ed	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40003f0	     0xf84aa000000	                            je 0x40004a0	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x40003f6	      0xba03000000	                              mov edx, 3	       146	reset.c	FUNCTION_4	FOR_1
0x40003fb	      0xbf00000000	                              mov edi, 0	       146	reset.c	FUNCTION_4	FOR_1
0x4000400	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x4000404	      0xe800000000	                          call 0x4000409	       146	reset.c	FUNCTION_4	FOR_1
0x4000409	        0x4983c508	                              add r13, 8	       146	reset.c	FUNCTION_4	FOR_1
0x400040d	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x4000411	            0x7e34	                           jle 0x4000447	       127	reset.c	FUNCTION_4	FOR_1
0x4000413	          0x498b06	                    mov rax, qword [r14]	       128	reset.c	FUNCTION_4	FOR_1
0x4000416	        0x4a8b0428	              mov rax, qword [rax + r13]	       128	reset.c	FUNCTION_4	FOR_1
0x400041a	          0x488b18	                    mov rbx, qword [rax]	       128	reset.c	FUNCTION_4	FOR_1
0x400041d	         0xfb76b40	           movzx ebp, word [rbx + 0x40] 	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000421	          0x6685ed	                             test bp, bp	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000424	            0x759a	                           jne 0x40003c0	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000426	          0x4585ff	                         test r15d, r15d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x4000429	            0x7535	                           jne 0x4000460	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x400042b	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x400042f	      0xbf00000000	                              mov edi, 0	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x4000434	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x4000438	        0x4983c508	                              add r13, 8	       127	reset.c	FUNCTION_4	FOR_1
0x400043c	      0xe800000000	                          call 0x4000441	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x4000441	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x4000445	            0x7fcc	                            jg 0x4000413	       127	reset.c	FUNCTION_4	FOR_1
0x4000447	        0x4883c418	                           add rsp, 0x18	       148	reset.c	FUNCTION_4
0x400044b	              0x5b	                                 pop rbx	       148	reset.c	FUNCTION_4
0x400044c	              0x5d	                                 pop rbp	       148	reset.c	FUNCTION_4
0x400044d	            0x415c	                                 pop r12	       148	reset.c	FUNCTION_4
0x400044f	            0x415d	                                 pop r13	       148	reset.c	FUNCTION_4
0x4000451	            0x415e	                                 pop r14	       148	reset.c	FUNCTION_4
0x4000453	            0x415f	                                 pop r15	       148	reset.c	FUNCTION_4
0x4000455	              0xc3	                                     ret	       148	reset.c	FUNCTION_4
0x4000456	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       148	reset.c	FUNCTION_4
0x4000460	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000464	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000467	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000469	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400046c	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400046f	      0xe800000000	                          call 0x4000474	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000474	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x4000477	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400047a	            0x7424	                            je 0x40004a0	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400047c	    0x814e38000000	       or dword [rsi + 0x38], 0x20000000	       143	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000483	          0x4889f7	                            mov rdi, rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000486	      0x4889742408	                mov qword [rsp + 8], rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x400048b	      0xe800000000	                          call 0x4000490	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000490	      0x488b742408	                mov rsi, qword [rsp + 8]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000495	      0xe95cffffff	                           jmp 0x40003f6	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x400049a	    0x660f1f440000	                    nop word [rax + rax]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x40004a0	        0x488b5b18	            mov rbx, qword [rbx + 0x18] 	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x40004a4	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26
0x40004a9	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26
0x40004ab	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26
0x40004b0	      0xe800000000	                          call 0x40004b5	        54	gettext.h	FUNCTION_26
0x40004b5	          0x4889de	                            mov rsi, rbx	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x40004b8	          0x4889c7	                            mov rdi, rax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x40004bb	            0x31c0	                            xor eax, eax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x40004bd	      0xe800000000	                          call 0x40004c2	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
