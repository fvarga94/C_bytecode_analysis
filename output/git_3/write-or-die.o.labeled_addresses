fsync_or_die	CALL,2:IF,1:WHILE,0:FOR,0:ELSE,0:functions,0:DO,0:SWITCH,0	11
0x4000250	              0x53	                                push rbx	        59	write-or-die.c	FUNCTION_3
0x4000251	          0x4889f3	                            mov rbx, rsi	        59	write-or-die.c	FUNCTION_3
0x4000254	      0xe800000000	                          call 0x4000259	        60	write-or-die.c	FUNCTION_3	IF_1	CALL_1
0x4000259	            0x85c0	                           test eax, eax	        60	write-or-die.c	FUNCTION_3	IF_1	CALL_1
0x400025b	            0x7802	                            js 0x400025f	        60	write-or-die.c	FUNCTION_3	IF_1	CALL_1
0x400025d	              0x5b	                                 pop rbx	        63	write-or-die.c	FUNCTION_3
0x400025e	              0xc3	                                     ret	        63	write-or-die.c	FUNCTION_3
0x400025f	          0x4889de	                            mov rsi, rbx	        61	write-or-die.c	FUNCTION_3	IF_1	CALL_2
0x4000262	      0xbf00000000	                              mov edi, 0	        61	write-or-die.c	FUNCTION_3	IF_1	CALL_2
0x4000267	            0x31c0	                            xor eax, eax	        61	write-or-die.c	FUNCTION_3	IF_1	CALL_2
0x4000269	      0xe800000000	                          call 0x400026e	        61	write-or-die.c	FUNCTION_3	IF_1	CALL_2
fprintf_or_die	CALL,5:IF,1:WHILE,0:FOR,0:ELSE,0:functions,0:DO,0:SWITCH,0	42
0x4000170	    0x4881ecd80000	                           sub rsp, 0xd8	        44	write-or-die.c	FUNCTION_2
0x4000177	            0x84c0	                             test al, al	        44	write-or-die.c	FUNCTION_2
0x4000179	      0x4889542430	             mov qword [rsp + 0x30], rdx	        44	write-or-die.c	FUNCTION_2
0x400017e	      0x48894c2438	             mov qword [rsp + 0x38], rcx	        44	write-or-die.c	FUNCTION_2
0x4000183	      0x4c89442440	              mov qword [rsp + 0x40], r8	        44	write-or-die.c	FUNCTION_2
0x4000188	      0x4c894c2448	              mov qword [rsp + 0x48], r9	        44	write-or-die.c	FUNCTION_2
0x400018d	            0x7437	                            je 0x40001c6	        44	write-or-die.c	FUNCTION_2
0x400018f	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	        44	write-or-die.c	FUNCTION_2
0x4000194	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	        44	write-or-die.c	FUNCTION_2
0x4000199	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	        44	write-or-die.c	FUNCTION_2
0x400019e	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	        44	write-or-die.c	FUNCTION_2
0x40001a6	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	        44	write-or-die.c	FUNCTION_2
0x40001ae	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	        44	write-or-die.c	FUNCTION_2
0x40001b6	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	        44	write-or-die.c	FUNCTION_2
0x40001be	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	        44	write-or-die.c	FUNCTION_2
0x40001c6	    0x64488b042528	                mov rax, qword fs:[0x28]	        44	write-or-die.c	FUNCTION_2
0x40001cf	      0x4889442418	             mov qword [rsp + 0x18], rax	        44	write-or-die.c	FUNCTION_2
0x40001d4	            0x31c0	                            xor eax, eax	        44	write-or-die.c	FUNCTION_2
0x40001d6	    0x488d8424e000	                   lea rax, [rsp + 0xe0]	        48	write-or-die.c	FUNCTION_2	CALL_1
0x40001de	          0x4889f2	                            mov rdx, rsi	       127	stdio2.h	FUNCTION_10	CALL_1
0x40001e1	          0x4889e1	                            mov rcx, rsp	       127	stdio2.h	FUNCTION_10	CALL_1
0x40001e4	      0xbe01000000	                              mov esi, 1	       127	stdio2.h	FUNCTION_10	CALL_1
0x40001e9	      0x4889442408	                mov qword [rsp + 8], rax	        48	write-or-die.c	FUNCTION_2	CALL_1
0x40001ee	      0x488d442420	                   lea rax, [rsp + 0x20]	        48	write-or-die.c	FUNCTION_2	CALL_1
0x40001f3	    0xc70424100000	                   mov dword [rsp], 0x10	        48	write-or-die.c	FUNCTION_2	CALL_1
0x40001fa	    0xc74424043000	               mov dword [rsp + 4], 0x30	        48	write-or-die.c	FUNCTION_2	CALL_1
0x4000202	      0x4889442410	             mov qword [rsp + 0x10], rax	        48	write-or-die.c	FUNCTION_2	CALL_1
0x4000207	      0xe800000000	                          call 0x400020c	       127	stdio2.h	FUNCTION_10	CALL_1
0x400020c	            0x85c0	                           test eax, eax	        52	write-or-die.c	FUNCTION_2	IF_1
0x400020e	            0x7818	                            js 0x4000228	        52	write-or-die.c	FUNCTION_2	IF_1
0x4000210	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        56	write-or-die.c	FUNCTION_2
0x4000215	    0x644833042528	                xor rax, qword fs:[0x28]	        56	write-or-die.c	FUNCTION_2
0x400021e	            0x7520	                           jne 0x4000240	        56	write-or-die.c	FUNCTION_2
0x4000220	    0x4881c4d80000	                           add rsp, 0xd8	        56	write-or-die.c	FUNCTION_2
0x4000227	              0xc3	                                     ret	        56	write-or-die.c	FUNCTION_2
0x4000228	      0xe800000000	                          call 0x400022d	        53	write-or-die.c	FUNCTION_2	IF_1	CALL_4
0x400022d	            0x8b38	                    mov edi, dword [rax]	        53	write-or-die.c	FUNCTION_2	IF_1	CALL_4
0x400022f	      0xe800000000	                          call 0x4000234	        53	write-or-die.c	FUNCTION_2	IF_1	CALL_4
0x4000234	      0xbf00000000	                              mov edi, 0	        54	write-or-die.c	FUNCTION_2	IF_1	CALL_5
0x4000239	            0x31c0	                            xor eax, eax	        54	write-or-die.c	FUNCTION_2	IF_1	CALL_5
0x400023b	      0xe800000000	                          call 0x4000240	        54	write-or-die.c	FUNCTION_2	IF_1	CALL_5
0x4000240	      0xe800000000	                          call 0x4000245	        56	write-or-die.c	FUNCTION_2
write_or_die	CALL,3:IF,1:WHILE,0:FOR,0:ELSE,0:functions,0:DO,0:SWITCH,0	12
0x4000270	        0x4883ec08	                              sub rsp, 8	        66	write-or-die.c	FUNCTION_4
0x4000274	      0xe800000000	                          call 0x4000279	        67	write-or-die.c	FUNCTION_4	IF_1	CALL_1
0x4000279	          0x4885c0	                           test rax, rax	        67	write-or-die.c	FUNCTION_4	IF_1	CALL_1
0x400027c	            0x7805	                            js 0x4000283	        67	write-or-die.c	FUNCTION_4	IF_1	CALL_1
0x400027e	        0x4883c408	                              add rsp, 8	        71	write-or-die.c	FUNCTION_4
0x4000282	              0xc3	                                     ret	        71	write-or-die.c	FUNCTION_4
0x4000283	      0xe800000000	                          call 0x4000288	        68	write-or-die.c	FUNCTION_4	IF_1	CALL_2
0x4000288	            0x8b38	                    mov edi, dword [rax]	        68	write-or-die.c	FUNCTION_4	IF_1	CALL_2
0x400028a	      0xe800000000	                          call 0x400028f	        68	write-or-die.c	FUNCTION_4	IF_1	CALL_2
0x400028f	      0xbf00000000	                              mov edi, 0	        69	write-or-die.c	FUNCTION_4	IF_1	CALL_3
0x4000294	            0x31c0	                            xor eax, eax	        69	write-or-die.c	FUNCTION_4	IF_1	CALL_3
0x4000296	      0xe800000000	                  call section_end..text	        69	write-or-die.c	FUNCTION_4	IF_1	CALL_3
