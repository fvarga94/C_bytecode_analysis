ar_emul_parse_arg	SWITCH,0:DO,0:CALL,1:FOR,0:WHILE,0:functions,0:IF,1:ELSE,0	7
0x4000860	    0x488b05000000	            mov rax, qword [0x04000867] 	       138	binemul.c	FUNCTION_9	IF_1
0x4000867	          0x4885c0	                           test rax, rax	       138	binemul.c	FUNCTION_9	IF_1
0x400086a	            0x7404	                            je 0x4000870	       138	binemul.c	FUNCTION_9	IF_1
0x400086c	            0xffe0	                                 jmp rax	       139	binemul.c	FUNCTION_9	CALL_1
0x400086e	            0x6690	                                     nop	       139	binemul.c	FUNCTION_9	CALL_1
0x4000870	            0x31c0	                            xor eax, eax	       142	binemul.c	FUNCTION_9
0x4000872	              0xc3	                                     ret	       142	binemul.c	FUNCTION_9
ar_emul_usage	SWITCH,0:DO,0:CALL,1:FOR,0:WHILE,0:functions,0:IF,1:ELSE,0	6
0x40004e0	    0x488b05000000	            mov rax, qword [0x040004e7] 	        29	binemul.c	FUNCTION_1	IF_1
0x40004e7	          0x4885c0	                           test rax, rax	        29	binemul.c	FUNCTION_1	IF_1
0x40004ea	            0x7404	                            je 0x40004f0	        29	binemul.c	FUNCTION_1	IF_1
0x40004ec	            0xffe0	                                 jmp rax	        30	binemul.c	FUNCTION_1	CALL_1
0x40004ee	            0x6690	                                     nop	        30	binemul.c	FUNCTION_1	CALL_1
0x40004f0	            0xf3c3	                                     ret	        30	binemul.c	FUNCTION_1	CALL_1
ar_emul_append	SWITCH,0:DO,0:CALL,1:FOR,0:WHILE,0:functions,0:IF,1:ELSE,0	7
0x4000550	    0x488b05000000	            mov rax, qword [0x04000557] 	        45	binemul.c	FUNCTION_3	IF_1
0x4000557	          0x4885c0	                           test rax, rax	        45	binemul.c	FUNCTION_3	IF_1
0x400055a	            0x7404	                            je 0x4000560	        45	binemul.c	FUNCTION_3	IF_1
0x400055c	            0xffe0	                                 jmp rax	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x400055e	            0x6690	                                     nop	        46	binemul.c	FUNCTION_3	IF_1	CALL_1
0x4000560	            0x31c0	                            xor eax, eax	        50	binemul.c	FUNCTION_3
0x4000562	              0xc3	                                     ret	        50	binemul.c	FUNCTION_3
ar_emul_default_parse_arg	SWITCH,0:DO,0:CALL,0:FOR,0:WHILE,0:functions,0:IF,0:ELSE,0	2
0x4000880	            0x31c0	                            xor eax, eax	       148	binemul.c	FUNCTION_10
0x4000882	              0xc3	                                     ret	       148	binemul.c	FUNCTION_10
ar_emul_default_usage	SWITCH,0:DO,0:CALL,2:FOR,0:WHILE,0:functions,0:IF,0:ELSE,0	21
0x4000500	              0x53	                                push rbx	        35	binemul.c	FUNCTION_2
0x4000501	      0xba05000000	                              mov edx, 5	        36	binemul.c	FUNCTION_2	CALL_1
0x4000506	          0x4889fb	                            mov rbx, rdi	        35	binemul.c	FUNCTION_2
0x4000509	      0xbe00000000	                              mov esi, 0	        36	binemul.c	FUNCTION_2	CALL_1
0x400050e	            0x31ff	                            xor edi, edi	        36	binemul.c	FUNCTION_2	CALL_1
0x4000510	      0xe800000000	                          call 0x4000515	        36	binemul.c	FUNCTION_2	CALL_1
0x4000515	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x4000518	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x400051b	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x4000520	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_9
0x4000522	      0xe800000000	                          call 0x4000527	        97	stdio2.h	CALL_9
0x4000527	      0xba05000000	                              mov edx, 5	        38	binemul.c	FUNCTION_2	CALL_2
0x400052c	      0xbe00000000	                              mov esi, 0	        38	binemul.c	FUNCTION_2	CALL_2
0x4000531	            0x31ff	                            xor edi, edi	        38	binemul.c	FUNCTION_2	CALL_2
0x4000533	      0xe800000000	                          call 0x4000538	        38	binemul.c	FUNCTION_2	CALL_2
0x4000538	          0x4889df	                            mov rdi, rbx	        97	stdio2.h	CALL_9
0x400053b	          0x4889c2	                            mov rdx, rax	        97	stdio2.h	CALL_9
0x400053e	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_9
0x4000543	              0x5b	                                 pop rbx	        39	binemul.c	FUNCTION_2
0x4000544	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_9
0x4000546	      0xe900000000	                           jmp 0x400054b	        97	stdio2.h	CALL_9
ar_emul_replace	SWITCH,0:DO,0:CALL,1:FOR,0:WHILE,0:functions,0:IF,1:ELSE,0	7
0x40007d0	    0x488b05000000	            mov rax, qword [0x040007d7] 	       111	binemul.c	FUNCTION_7	IF_1
0x40007d7	          0x4885c0	                           test rax, rax	       111	binemul.c	FUNCTION_7	IF_1
0x40007da	            0x7404	                            je 0x40007e0	       111	binemul.c	FUNCTION_7	IF_1
0x40007dc	            0xffe0	                                 jmp rax	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40007de	            0x6690	                                     nop	       112	binemul.c	FUNCTION_7	IF_1	CALL_1
0x40007e0	            0x31c0	                            xor eax, eax	       116	binemul.c	FUNCTION_7
0x40007e2	              0xc3	                                     ret	       116	binemul.c	FUNCTION_7
ar_emul_default_append	SWITCH,0:DO,0:CALL,3:FOR,0:WHILE,0:functions,0:IF,0:ELSE,0	124
0x4000610	            0x4156	                                push r14	        99	binemul.c	FUNCTION_6
0x4000612	            0x4155	                                push r13	        99	binemul.c	FUNCTION_6
0x4000614	          0x4189ce	                           mov r14d, ecx	        99	binemul.c	FUNCTION_6
0x4000617	            0x4154	                                push r12	        99	binemul.c	FUNCTION_6
0x4000619	              0x55	                                push rbp	        99	binemul.c	FUNCTION_6
0x400061a	          0x4889fd	                            mov rbp, rdi	        99	binemul.c	FUNCTION_6
0x400061d	              0x53	                                push rbx	        99	binemul.c	FUNCTION_6
0x400061e	          0x4889f3	                            mov rbx, rsi	        99	binemul.c	FUNCTION_6
0x4000621	          0x4889d6	                            mov rsi, rdx	       102	binemul.c	FUNCTION_6	CALL_1
0x4000624	          0x4889df	                            mov rdi, rbx	       102	binemul.c	FUNCTION_6	CALL_1
0x4000627	          0x4589c5	                           mov r13d, r8d	        99	binemul.c	FUNCTION_6
0x400062a	      0xe800000000	                          call 0x400062f	       102	binemul.c	FUNCTION_6	CALL_1
0x400062f	          0x4885c0	                           test rax, rax	       103	binemul.c	FUNCTION_6	CALL_2
0x4000632	     0xf8487010000	                            je 0x40007bf	       103	binemul.c	FUNCTION_6	CALL_2
0x4000638	          0x4585ed	                         test r13d, r13d	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400063b	          0x4989c4	                            mov r12, rax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400063e	            0x7411	                            je 0x4000651	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000640	      0xbe02000000	                              mov esi, 2	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000645	          0x4889c7	                            mov rdi, rax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000648	      0xe800000000	                          call 0x400064d	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400064d	            0x85c0	                           test eax, eax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400064f	            0x752f	                           jne 0x4000680	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000651	          0x4585f6	                         test r14d, r14d	        87	binemul.c	FUNCTION_5	CALL_7
0x4000654	     0xf852e010000	                           jne 0x4000788	        87	binemul.c	FUNCTION_5	CALL_7
0x400065a	        0x488b4500	                    mov rax, qword [rbp]	        89	binemul.c	FUNCTION_5
0x400065e	    0x49898424d800	             mov qword [r12 + 0xd8], rax	        89	binemul.c	FUNCTION_5
0x4000666	        0x4c896500	                    mov qword [rbp], r12	        90	binemul.c	FUNCTION_5
0x400066a	      0xb801000000	                              mov eax, 1	        92	binemul.c	FUNCTION_5
0x400066f	              0x5b	                                 pop rbx	       105	binemul.c	FUNCTION_6
0x4000670	              0x5d	                                 pop rbp	       105	binemul.c	FUNCTION_6
0x4000671	            0x415c	                                 pop r12	       105	binemul.c	FUNCTION_6
0x4000673	            0x415d	                                 pop r13	       105	binemul.c	FUNCTION_6
0x4000675	            0x415e	                                 pop r14	       105	binemul.c	FUNCTION_6
0x4000677	              0xc3	                                     ret	       105	binemul.c	FUNCTION_6
0x4000678	     0xf1f84000000	                   nop dword [rax + rax]	       105	binemul.c	FUNCTION_6
0x4000680	            0x31f6	                            xor esi, esi	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000682	          0x4c89e7	                            mov rdi, r12	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000685	      0xe800000000	                          call 0x400068a	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400068a	          0x4885c0	                           test rax, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400068d	          0x4889c3	                            mov rbx, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000690	     0xf8422010000	                            je 0x40007b8	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000696	          0x4531ed	                          xor r13d, r13d	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000699	          0x4585f6	                         test r14d, r14d	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400069c	            0x7440	                            je 0x40006de	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x400069e	      0xe9b3000000	                           jmp 0x4000756	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40006a3	       0xf1f440000	                   nop dword [rax + rax]	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40006a8	        0x488b4500	                    mov rax, qword [rbp]	        89	binemul.c	FUNCTION_5
0x40006ac	    0x488983d80000	             mov qword [rbx + 0xd8], rax	        89	binemul.c	FUNCTION_5
0x40006b3	        0x48895d00	                    mov qword [rbp], rbx	        90	binemul.c	FUNCTION_5
0x40006b7	          0x4889dd	                            mov rbp, rbx	        90	binemul.c	FUNCTION_5
0x40006ba	    0x4881c5d80000	                           add rbp, 0xd8	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x40006c1	    0x41bd01000000	                             mov r13d, 1	        76	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x40006c7	          0x4889de	                            mov rsi, rbx	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40006ca	          0x4c89e7	                            mov rdi, r12	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40006cd	      0xe800000000	                          call 0x40006d2	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40006d2	          0x4885c0	                           test rax, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40006d5	          0x4889c3	                            mov rbx, rax	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x40006d8	     0xf84ca000000	                            je 0x40007a8	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x40006de	      0xbe02000000	                              mov esi, 2	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006e3	          0x4889df	                            mov rdi, rbx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006e6	      0xe800000000	                          call 0x40006eb	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006eb	            0x85c0	                           test eax, eax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006ed	            0x74b9	                            je 0x40006a8	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006ef	            0x31d2	                            xor edx, edx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006f1	      0xb900000000	                              mov ecx, 0	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006f6	          0x4889de	                            mov rsi, rbx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006f9	          0x4889ef	                            mov rdi, rbp	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x40006fc	      0xe84ff9ffff	       call sym.do_ar_emul_append.part.0	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000701	            0x85c0	                           test eax, eax	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000703	            0x74c2	                            je 0x40006c7	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000705	        0x488b6d00	                    mov rbp, qword [rbp]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000709	            0xebaf	                           jmp 0x40006ba	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400070b	       0xf1f440000	                   nop dword [rax + rax]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000710	          0x488b13	                    mov rdx, qword [rbx]	       104	stdio2.h	CALL_12
0x4000713	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x4000718	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x400071d	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_12
0x400071f	      0xe800000000	                          call 0x4000724	       104	stdio2.h	CALL_12
0x4000724	        0x488b4500	                    mov rax, qword [rbp]	        89	binemul.c	FUNCTION_5
0x4000728	    0x488983d80000	             mov qword [rbx + 0xd8], rax	        89	binemul.c	FUNCTION_5
0x400072f	        0x48895d00	                    mov qword [rbp], rbx	        90	binemul.c	FUNCTION_5
0x4000733	          0x4889dd	                            mov rbp, rbx	        90	binemul.c	FUNCTION_5
0x4000736	    0x4881c5d80000	                           add rbp, 0xd8	        77	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x400073d	    0x41bd01000000	                             mov r13d, 1	        76	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x4000743	          0x4889de	                            mov rsi, rbx	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x4000746	          0x4c89e7	                            mov rdi, r12	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x4000749	      0xe800000000	                          call 0x400074e	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x400074e	          0x4885c0	                           test rax, rax	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000751	          0x4889c3	                            mov rbx, rax	        72	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_4
0x4000754	            0x7452	                            je 0x40007a8	        70	binemul.c	FUNCTION_5	IF_1	FOR_1	CALL_3
0x4000756	      0xbe02000000	                              mov esi, 2	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400075b	          0x4889df	                            mov rdi, rbx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400075e	      0xe800000000	                          call 0x4000763	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000763	            0x85c0	                           test eax, eax	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000765	            0x74a9	                            je 0x4000710	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000767	      0xb900000000	                              mov ecx, 0	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400076c	          0x4489f2	                           mov edx, r14d	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400076f	          0x4889de	                            mov rsi, rbx	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000772	          0x4889ef	                            mov rdi, rbp	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x4000775	      0xe8d6f8ffff	       call sym.do_ar_emul_append.part.0	        65	binemul.c	FUNCTION_5	IF_1	CALL_2
0x400077a	            0x85c0	                           test eax, eax	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400077c	            0x74c5	                            je 0x4000743	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x400077e	        0x488b6d00	                    mov rbp, qword [rbp]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000782	            0xebb2	                           jmp 0x4000736	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000784	         0xf1f4000	                         nop dword [rax]	        74	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_5
0x4000788	        0x498b1424	                    mov rdx, qword [r12]	       104	stdio2.h	CALL_12
0x400078c	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x4000791	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x4000796	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_12
0x4000798	      0xe800000000	                          call 0x400079d	       104	stdio2.h	CALL_12
0x400079d	      0xe9b8feffff	                           jmp 0x400065a	       104	stdio2.h	CALL_12
0x40007a2	    0x660f1f440000	                    nop word [rax + rax]	       104	stdio2.h	CALL_12
0x40007a8	              0x5b	                                 pop rbx	       105	binemul.c	FUNCTION_6
0x40007a9	          0x4489e8	                           mov eax, r13d	        76	binemul.c	FUNCTION_5	IF_1	FOR_1	IF_2
0x40007ac	              0x5d	                                 pop rbp	       105	binemul.c	FUNCTION_6
0x40007ad	            0x415c	                                 pop r12	       105	binemul.c	FUNCTION_6
0x40007af	            0x415d	                                 pop r13	       105	binemul.c	FUNCTION_6
0x40007b1	            0x415e	                                 pop r14	       105	binemul.c	FUNCTION_6
0x40007b3	              0xc3	                                     ret	       105	binemul.c	FUNCTION_6
0x40007b4	         0xf1f4000	                         nop dword [rax]	       105	binemul.c	FUNCTION_6
0x40007b8	            0x31c0	                            xor eax, eax	        68	binemul.c	FUNCTION_5	IF_1
0x40007ba	      0xe9b0feffff	                           jmp 0x400066f	        68	binemul.c	FUNCTION_5	IF_1
0x40007bf	          0x4889df	                            mov rdi, rbx	       103	binemul.c	FUNCTION_6	CALL_2
0x40007c2	      0xe800000000	                          call 0x40007c7	       103	binemul.c	FUNCTION_6	CALL_2
ar_emul_default_replace	SWITCH,0:DO,0:CALL,3:FOR,0:WHILE,0:functions,0:IF,0:ELSE,0	33
0x40007f0	            0x4155	                                push r13	       121	binemul.c	FUNCTION_8
0x40007f2	            0x4154	                                push r12	       121	binemul.c	FUNCTION_8
0x40007f4	          0x4989f4	                            mov r12, rsi	       121	binemul.c	FUNCTION_8
0x40007f7	              0x55	                                push rbp	       121	binemul.c	FUNCTION_8
0x40007f8	              0x53	                                push rbx	       121	binemul.c	FUNCTION_8
0x40007f9	          0x4889fd	                            mov rbp, rdi	       121	binemul.c	FUNCTION_8
0x40007fc	          0x4889d6	                            mov rsi, rdx	       124	binemul.c	FUNCTION_8	CALL_1
0x40007ff	          0x4c89e7	                            mov rdi, r12	       124	binemul.c	FUNCTION_8	CALL_1
0x4000802	          0x4189cd	                           mov r13d, ecx	       121	binemul.c	FUNCTION_8
0x4000805	        0x4883ec08	                              sub rsp, 8	       121	binemul.c	FUNCTION_8
0x4000809	      0xe800000000	                          call 0x400080e	       124	binemul.c	FUNCTION_8	CALL_1
0x400080e	          0x4885c0	                           test rax, rax	       125	binemul.c	FUNCTION_8	CALL_2
0x4000811	            0x743b	                            je 0x400084e	       125	binemul.c	FUNCTION_8	CALL_2
0x4000813	          0x4585ed	                         test r13d, r13d	       127	binemul.c	FUNCTION_8	CALL_3
0x4000816	          0x4889c3	                            mov rbx, rax	       127	binemul.c	FUNCTION_8	CALL_3
0x4000819	            0x7414	                            je 0x400082f	       127	binemul.c	FUNCTION_8	CALL_3
0x400081b	          0x4c89e2	                            mov rdx, r12	       104	stdio2.h	CALL_12
0x400081e	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_12
0x4000823	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_12
0x4000828	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_12
0x400082a	      0xe800000000	                          call 0x400082f	       104	stdio2.h	CALL_12
0x400082f	        0x488b4500	                    mov rax, qword [rbp]	       129	binemul.c	FUNCTION_8
0x4000833	    0x488983d80000	             mov qword [rbx + 0xd8], rax	       129	binemul.c	FUNCTION_8
0x400083a	        0x48895d00	                    mov qword [rbp], rbx	       130	binemul.c	FUNCTION_8
0x400083e	        0x4883c408	                              add rsp, 8	       133	binemul.c	FUNCTION_8
0x4000842	              0x5b	                                 pop rbx	       133	binemul.c	FUNCTION_8
0x4000843	      0xb801000000	                              mov eax, 1	       133	binemul.c	FUNCTION_8
0x4000848	              0x5d	                                 pop rbp	       133	binemul.c	FUNCTION_8
0x4000849	            0x415c	                                 pop r12	       133	binemul.c	FUNCTION_8
0x400084b	            0x415d	                                 pop r13	       133	binemul.c	FUNCTION_8
0x400084d	              0xc3	                                     ret	       133	binemul.c	FUNCTION_8
0x400084e	          0x4c89e7	                            mov rdi, r12	       125	binemul.c	FUNCTION_8	CALL_2
0x4000851	      0xe800000000	                          call 0x4000856	       125	binemul.c	FUNCTION_8	CALL_2
