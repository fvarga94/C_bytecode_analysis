input_scrub_next_buffer	FOR,1:DO,0:WHILE,1:SWITCH,0:IF,10:CALL,15:ELSE,1:functions,0	194
0x40003e0	            0x4154	                                push r12	       312	input-scrub.c	FUNCTION_10
0x40003e2	              0x55	                                push rbp	       312	input-scrub.c	FUNCTION_10
0x40003e3	          0x4889fd	                            mov rbp, rdi	       312	input-scrub.c	FUNCTION_10
0x40003e6	              0x53	                                push rbx	       312	input-scrub.c	FUNCTION_10
0x40003e7	        0x4883ec10	                           sub rsp, 0x10	       312	input-scrub.c	FUNCTION_10
0x40003eb	    0x488b15000000	            mov rdx, qword [0x040003f2] 	       315	input-scrub.c	FUNCTION_10	IF_1
0x40003f2	        0x4883faff	             cmp rdx, 0xffffffffffffffff	       315	input-scrub.c	FUNCTION_10	IF_1
0x40003f6	     0xf8474010000	                            je 0x4000570	       315	input-scrub.c	FUNCTION_10	IF_1
0x40003fc	    0x488b0d000000	            mov rcx, qword [0x04000403] 	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000403	          0x4839ca	                            cmp rdx, rcx	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000406	            0x7338	                           jae 0x4000440	       317	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000408	    0x488b35000000	            mov rsi, qword [0x0400040f] 	       337	input-scrub.c	FUNCTION_10	IF_1
0x400040f	    0x48c705000000	               mov qword [0x0400041a], 0	       338	input-scrub.c	FUNCTION_10	IF_1
0x400041a	    0x48890d000000	            mov qword [0x04000421], rcx 	       340	input-scrub.c	FUNCTION_10	IF_1
0x4000421	        0x488d040e	                    lea rax, [rsi + rcx]	       337	input-scrub.c	FUNCTION_10	IF_1
0x4000425	          0x4801f2	                            add rdx, rsi	       339	input-scrub.c	FUNCTION_10	IF_1
0x4000428	          0x488917	                    mov qword [rdi], rdx	       339	input-scrub.c	FUNCTION_10	IF_1
0x400042b	    0x488905000000	            mov qword [0x04000432], rax 	       337	input-scrub.c	FUNCTION_10	IF_1
0x4000432	        0x4883c410	                           add rsp, 0x10	       412	input-scrub.c	FUNCTION_10
0x4000436	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x4000437	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x4000438	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x400043a	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x400043b	       0xf1f440000	                   nop dword [rax + rax]	       412	input-scrub.c	FUNCTION_10
0x4000440	      0xbf00000000	                              mov edi, 0	       319	input-scrub.c	FUNCTION_10	IF_1	IF_2	CALL_1
0x4000445	      0xe800000000	                          call 0x400044a	       319	input-scrub.c	FUNCTION_10	IF_1	IF_2	CALL_1
0x400044a	    0x8b1500000000	            mov edx, dword [0x04000450] 	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x4000450	            0x85d2	                           test edx, edx	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x4000452	     0xf8500020000	                           jne 0x4000658	       320	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3
0x4000458	    0x488b1d000000	            mov rbx, qword [0x0400045f] 	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x400045f	    0x832d00000000	               sub dword [0x04000466], 1	       329	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000466	            0x31c0	                            xor eax, eax	       329	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000468	    0x48c705000000	               mov qword [0x04000473], 0	       330	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x4000473	    0x48c705000000	               mov qword [0x0400047e], 0	       331	input-scrub.c	FUNCTION_10	IF_1	IF_2
0x400047e	          0x4885db	                           test rbx, rbx	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x4000481	            0x74af	                            je 0x4000432	       332	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_4
0x4000483	    0x488b3d000000	            mov rdi, qword [0x0400048a] 	       225	input-scrub.c	FUNCTION_5	IF_1
0x400048a	          0x4885ff	                           test rdi, rdi	       225	input-scrub.c	FUNCTION_5	IF_1
0x400048d	            0x7415	                            je 0x40004a4	       225	input-scrub.c	FUNCTION_5	IF_1
0x400048f	      0xe800000000	                          call 0x4000494	       227	input-scrub.c	FUNCTION_5	IF_1	CALL_1
0x4000494	    0x48c705000000	               mov qword [0x0400049f], 0	       228	input-scrub.c	FUNCTION_5	IF_1
0x400049f	      0xe800000000	                          call 0x40004a4	       229	input-scrub.c	FUNCTION_5	IF_1	CALL_2
0x40004a4	        0x488b7b70	            mov rdi, qword [rbx + 0x70] 	       189	input-scrub.c	FUNCTION_3	CALL_2
0x40004a8	      0xe800000000	                          call 0x40004ad	       189	input-scrub.c	FUNCTION_3	CALL_2
0x40004ad	          0x488b03	                    mov rax, qword [rbx]	       191	input-scrub.c	FUNCTION_3
0x40004b0	        0x4c8b6378	            mov r12, qword [rbx + 0x78] 	       190	input-scrub.c	FUNCTION_3
0x40004b4	          0x4889df	                            mov rdi, rbx	       205	input-scrub.c	FUNCTION_3	CALL_4
0x40004b7	    0x488905000000	            mov qword [0x040004be], rax 	       191	input-scrub.c	FUNCTION_3
0x40004be	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       192	input-scrub.c	FUNCTION_3
0x40004c2	    0x488905000000	            mov qword [0x040004c9], rax 	       192	input-scrub.c	FUNCTION_3
0x40004c9	        0x488b4328	            mov rax, qword [rbx + 0x28] 	       193	input-scrub.c	FUNCTION_3
0x40004cd	    0x488905000000	            mov qword [0x040004d4], rax 	       193	input-scrub.c	FUNCTION_3
0x40004d4	        0x488b4330	            mov rax, qword [rbx + 0x30] 	       194	input-scrub.c	FUNCTION_3
0x40004d8	    0x488905000000	            mov qword [0x040004df], rax 	       194	input-scrub.c	FUNCTION_3
0x40004df	          0x8b4338	            mov eax, dword [rbx + 0x38] 	       195	input-scrub.c	FUNCTION_3
0x40004e2	    0x890500000000	            mov dword [0x040004e8], eax 	       195	input-scrub.c	FUNCTION_3
0x40004e8	          0x8b433c	            mov eax, dword [rbx + 0x3c] 	       196	input-scrub.c	FUNCTION_3
0x40004eb	    0x890500000000	            mov dword [0x040004f1], eax 	       196	input-scrub.c	FUNCTION_3
0x40004f1	        0x488b4340	            mov rax, qword [rbx + 0x40] 	       197	input-scrub.c	FUNCTION_3
0x40004f5	    0x488905000000	            mov qword [0x040004fc], rax 	       197	input-scrub.c	FUNCTION_3
0x40004fc	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       198	input-scrub.c	FUNCTION_3
0x4000500	    0x488905000000	            mov qword [0x04000507], rax 	       198	input-scrub.c	FUNCTION_3
0x4000507	        0x488b4350	            mov rax, qword [rbx + 0x50] 	       198	input-scrub.c	FUNCTION_3
0x400050b	    0x488905000000	            mov qword [0x04000512], rax 	       198	input-scrub.c	FUNCTION_3
0x4000512	        0x488b4358	            mov rax, qword [rbx + 0x58] 	       198	input-scrub.c	FUNCTION_3
0x4000516	    0x488905000000	            mov qword [0x0400051d], rax 	       198	input-scrub.c	FUNCTION_3
0x400051d	          0x8b4360	            mov eax, dword [rbx + 0x60] 	       199	input-scrub.c	FUNCTION_3
0x4000520	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       201	input-scrub.c	FUNCTION_3
0x4000524	    0x890500000000	            mov dword [0x0400052a], eax 	       199	input-scrub.c	FUNCTION_3
0x400052a	        0x488b4308	                mov rax, qword [rbx + 8]	       200	input-scrub.c	FUNCTION_3
0x400052e	    0x488915000000	            mov qword [0x04000535], rdx 	       201	input-scrub.c	FUNCTION_3
0x4000535	    0x488905000000	            mov qword [0x0400053c], rax 	       200	input-scrub.c	FUNCTION_3
0x400053c	        0x488b5368	            mov rdx, qword [rbx + 0x68] 	       202	input-scrub.c	FUNCTION_3
0x4000540	      0x4889442408	                mov qword [rsp + 8], rax	       200	input-scrub.c	FUNCTION_3
0x4000545	    0x488915000000	            mov qword [0x0400054c], rdx 	       202	input-scrub.c	FUNCTION_3
0x400054c	         0xfb65318	           movzx edx, byte [rbx + 0x18] 	       202	input-scrub.c	FUNCTION_3
0x4000550	    0x881500000000	               mov byte [0x04000556], dl	       202	input-scrub.c	FUNCTION_3
0x4000556	      0xe800000000	                          call 0x400055b	       205	input-scrub.c	FUNCTION_3	CALL_4
0x400055b	        0x4c896500	                    mov qword [rbp], r12	       409	input-scrub.c	FUNCTION_10	CALL_15
0x400055f	      0x488b442408	                mov rax, qword [rsp + 8]	       409	input-scrub.c	FUNCTION_10	CALL_15
0x4000564	        0x4883c410	                           add rsp, 0x10	       412	input-scrub.c	FUNCTION_10
0x4000568	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x4000569	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x400056a	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x400056c	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x400056d	           0xf1f00	                         nop dword [rax]	       412	input-scrub.c	FUNCTION_10
0x4000570	    0x488b1d000000	            mov rbx, qword [0x04000577] 	       344	input-scrub.c	FUNCTION_10	IF_5
0x4000577	    0x4c8b25000000	            mov r12, qword [0x0400057e] 	       346	input-scrub.c	FUNCTION_10	IF_5	CALL_5
0x400057e	          0x4885db	                           test rbx, rbx	       344	input-scrub.c	FUNCTION_10	IF_5
0x4000581	      0x498d4c2401	                      lea rcx, [r12 + 1]	        59	string3.h	FUNCTION_18	CALL_3
0x4000586	     0xf85e4000000	                           jne 0x4000670	       344	input-scrub.c	FUNCTION_10	IF_5
0x400058c	      0x498d5c1c01	                lea rbx, [r12 + rbx + 1]	       353	input-scrub.c	FUNCTION_10	WHILE_1
0x4000591	        0x48894d00	                    mov qword [rbp], rcx	       355	input-scrub.c	FUNCTION_10	WHILE_1
0x4000595	          0x4889df	                            mov rdi, rbx	       356	input-scrub.c	FUNCTION_10	WHILE_1	CALL_7
0x4000598	      0xe800000000	                          call 0x400059d	       356	input-scrub.c	FUNCTION_10	WHILE_1	CALL_7
0x400059d	          0x4885c0	                           test rax, rax	       357	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40005a0	     0xf84fa000000	                            je 0x40006a0	       357	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x40005a6	        0x8078ff0a	                 cmp byte [rax - 1], 0xa	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005aa	          0xc60000	                       mov byte [rax], 0	       371	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x40005ad	        0x488d50ff	                      lea rdx, [rax - 1]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005b1	     0xf84df000000	                            je 0x4000696	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005b7	          0x4839d3	                            cmp rbx, rdx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005ba	        0x488d7bff	                      lea rdi, [rbx - 1]	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005be	            0x7610	                           jbe 0x40005d0	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005c0	            0xeb4e	                           jmp 0x4000610	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005c2	    0x660f1f440000	                    nop word [rax + rax]	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005c8	          0x4839cf	                            cmp rdi, rcx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005cb	          0x4889ca	                            mov rdx, rcx	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005ce	            0x7440	                            je 0x4000610	       375	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1	IF_8
0x40005d0	        0x807aff0a	                 cmp byte [rdx - 1], 0xa	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005d4	        0x488d4aff	                      lea rcx, [rdx - 1]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005d8	            0x75ee	                           jne 0x40005c8	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005da	           0xfb612	                   movzx edx, byte [rdx]	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40005dd	        0x4883c101	                              add rcx, 1	       377	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x40005e1	          0x4829c8	                            sub rax, rcx	       377	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1
0x40005e4	    0x488905000000	            mov qword [0x040005eb], rax 	       382	input-scrub.c	FUNCTION_10	WHILE_1
0x40005eb	    0x881500000000	               mov byte [0x040005f1], dl	       382	input-scrub.c	FUNCTION_10	WHILE_1
0x40005f1	          0x4889c8	                            mov rax, rcx	       387	input-scrub.c	FUNCTION_10	WHILE_1
0x40005f4	          0xc60100	                       mov byte [rcx], 0	        53	string3.h	FUNCTION_17	CALL_3
0x40005f7	    0x48890d000000	            mov qword [0x040005fe], rcx 	       381	input-scrub.c	FUNCTION_10	WHILE_1
0x40005fe	        0x4883c410	                           add rsp, 0x10	       412	input-scrub.c	FUNCTION_10
0x4000602	              0x5b	                                 pop rbx	       412	input-scrub.c	FUNCTION_10
0x4000603	              0x5d	                                 pop rbp	       412	input-scrub.c	FUNCTION_10
0x4000604	            0x415c	                                 pop r12	       412	input-scrub.c	FUNCTION_10
0x4000606	              0xc3	                                     ret	       412	input-scrub.c	FUNCTION_10
0x4000607	    0x660f1f840000	                    nop word [rax + rax]	       412	input-scrub.c	FUNCTION_10
0x4000610	    0x488b35000000	            mov rsi, qword [0x04000617] 	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x4000617	    0x4c8b25000000	            mov r12, qword [0x0400061e] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x400061e	        0x488d5601	                      lea rdx, [rsi + 1]	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x4000622	          0x4829d0	                            sub rax, rdx	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x4000625	    0x488905000000	            mov qword [0x0400062c], rax 	       391	input-scrub.c	FUNCTION_10	WHILE_1
0x400062c	      0xe800000000	                          call 0x4000631	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000631	    0x488b1d000000	            mov rbx, qword [0x04000638] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000638	          0x4929c4	                            sub r12, rax	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x400063b	          0x4939dc	                            cmp r12, rbx	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x400063e	     0xf8296000000	                            jb 0x40006da	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000644	    0x4c8b25000000	            mov r12, qword [0x0400064b] 	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x400064b	      0x498d4c2401	                      lea rcx, [r12 + 1]	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000650	      0xe937ffffff	                           jmp 0x400058c	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000655	           0xf1f00	                         nop dword [rax]	       392	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_12
0x4000658	    0x8b3d00000000	            mov edi, dword [0x0400065e] 	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x400065e	      0xe800000000	                          call 0x4000663	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x4000663	      0xe9f0fdffff	                           jmp 0x4000458	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x4000668	     0xf1f84000000	                   nop dword [rax + rax]	       322	input-scrub.c	FUNCTION_10	IF_1	IF_2	IF_3	CALL_2
0x4000670	    0x488b35000000	            mov rsi, qword [0x04000677] 	        59	string3.h	FUNCTION_18	CALL_3
0x4000677	          0x4889cf	                            mov rdi, rcx	        59	string3.h	FUNCTION_18	CALL_3
0x400067a	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_18	CALL_3
0x400067d	      0xe800000000	                          call 0x4000682	        59	string3.h	FUNCTION_18	CALL_3
0x4000682	          0x4889c1	                            mov rcx, rax	        59	string3.h	FUNCTION_18	CALL_3
0x4000685	     0xfb605000000	           movzx eax, byte [0x0400068c] 	        53	string3.h	FUNCTION_17	CALL_3
0x400068c	      0x4188442401	                  mov byte [r12 + 1], al	        53	string3.h	FUNCTION_17	CALL_3
0x4000691	      0xe9f6feffff	                           jmp 0x400058c	        53	string3.h	FUNCTION_17	CALL_3
0x4000696	          0x4889d1	                            mov rcx, rdx	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x4000699	            0x31d2	                            xor edx, edx	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x400069b	      0xe93dffffff	                           jmp 0x40005dd	       374	input-scrub.c	FUNCTION_10	WHILE_1	ELSE_1	FOR_1
0x40006a0	    0x48833d000000	               cmp qword [0x040006a8], 0	       359	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	IF_7
0x40006a8	            0x756b	                           jne 0x4000715	       359	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	IF_7
0x40006aa	    0x8b0500000000	            mov eax, dword [0x040006b0] 	       404	input-scrub.c	FUNCTION_10	CALL_14
0x40006b0	            0x85c0	                           test eax, eax	       404	input-scrub.c	FUNCTION_10	CALL_14
0x40006b2	     0xf859a000000	                           jne 0x4000752	       404	input-scrub.c	FUNCTION_10	CALL_14
0x40006b8	    0x488b1d000000	            mov rbx, qword [0x040006bf] 	       408	input-scrub.c	FUNCTION_10	IF_10
0x40006bf	            0x31c0	                            xor eax, eax	       408	input-scrub.c	FUNCTION_10	IF_10
0x40006c1	    0x48c705000000	               mov qword [0x040006cc], 0	       407	input-scrub.c	FUNCTION_10
0x40006cc	          0x4885db	                           test rbx, rbx	       408	input-scrub.c	FUNCTION_10	IF_10
0x40006cf	     0xf85aefdffff	                           jne 0x4000483	       408	input-scrub.c	FUNCTION_10	IF_10
0x40006d5	      0xe958fdffff	                           jmp 0x4000432	       408	input-scrub.c	FUNCTION_10	IF_10
0x40006da	    0x488b05000000	            mov rax, qword [0x040006e1] 	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x40006e1	    0x488b3d000000	            mov rdi, qword [0x040006e8] 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x40006e8	          0x4801c0	                            add rax, rax	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x40006eb	        0x488d7003	                      lea rsi, [rax + 3]	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x40006ef	    0x488905000000	            mov qword [0x040006f6], rax 	       396	input-scrub.c	FUNCTION_10	WHILE_1	IF_9
0x40006f6	      0xe800000000	                          call 0x40006fb	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x40006fb	    0x488b1d000000	            mov rbx, qword [0x04000702] 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000702	    0x488905000000	            mov qword [0x04000709], rax 	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000709	          0x4989c4	                            mov r12, rax	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x400070c	        0x488d4801	                      lea rcx, [rax + 1]	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000710	      0xe977feffff	                           jmp 0x400058c	       397	input-scrub.c	FUNCTION_10	WHILE_1	IF_9	CALL_13
0x4000715	      0xba05000000	                              mov edx, 5	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400071a	      0xbe00000000	                              mov esi, 0	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400071f	            0x31ff	                            xor edi, edi	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000721	      0xe800000000	                          call 0x4000726	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000726	          0x4889c7	                            mov rdi, rax	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000729	            0x31c0	                            xor eax, eax	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x400072b	      0xe800000000	                          call 0x4000730	       363	input-scrub.c	FUNCTION_10	WHILE_1	IF_6	CALL_9
0x4000730	    0x488b15000000	            mov rdx, qword [0x04000737] 	       364	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000737	    0x488b05000000	            mov rax, qword [0x0400073e] 	       364	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x400073e	      0x488d4c0202	                lea rcx, [rdx + rax + 2]	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000743	      0xc64402010a	           mov byte [rdx + rax + 1], 0xa	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000748	            0x31c0	                            xor eax, eax	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x400074a	           0xfb611	                   movzx edx, byte [rcx]	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x400074d	      0xe992feffff	                           jmp 0x40005e4	       365	input-scrub.c	FUNCTION_10	WHILE_1	IF_6
0x4000752	            0x31ff	                            xor edi, edi	       404	input-scrub.c	FUNCTION_10	CALL_14
0x4000754	      0xe800000000	                          call 0x4000759	       404	input-scrub.c	FUNCTION_10	CALL_14
0x4000759	      0xe95affffff	                           jmp 0x40006b8	       404	input-scrub.c	FUNCTION_10	CALL_14
input_scrub_push	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,4:ELSE,0:functions,0	57
0x4000040	              0x55	                                push rbp	       154	input-scrub.c	FUNCTION_2
0x4000041	              0x53	                                push rbx	       154	input-scrub.c	FUNCTION_2
0x4000042	          0x4889fd	                            mov rbp, rdi	       154	input-scrub.c	FUNCTION_2
0x4000045	      0xbf80000000	                           mov edi, 0x80	       157	input-scrub.c	FUNCTION_2	CALL_1
0x400004a	        0x4883ec08	                              sub rsp, 8	       154	input-scrub.c	FUNCTION_2
0x400004e	      0xe800000000	                          call 0x4000053	       157	input-scrub.c	FUNCTION_2	CALL_1
0x4000053	          0x4889c3	                            mov rbx, rax	       157	input-scrub.c	FUNCTION_2	CALL_1
0x4000056	        0x48896878	             mov qword [rax + 0x78], rbp	       159	input-scrub.c	FUNCTION_2
0x400005a	    0x488b05000000	            mov rax, qword [0x04000061] 	       160	input-scrub.c	FUNCTION_2
0x4000061	    0x48c7c5ffffff	             mov rbp, 0xffffffffffffffff	       175	input-scrub.c	FUNCTION_2
0x4000068	          0x488903	                    mov qword [rbx], rax	       160	input-scrub.c	FUNCTION_2
0x400006b	    0x488b05000000	            mov rax, qword [0x04000072] 	       161	input-scrub.c	FUNCTION_2
0x4000072	        0x48894308	                mov qword [rbx + 8], rax	       161	input-scrub.c	FUNCTION_2
0x4000076	    0x488b05000000	            mov rax, qword [0x0400007d] 	       162	input-scrub.c	FUNCTION_2
0x400007d	        0x48894310	             mov qword [rbx + 0x10], rax	       162	input-scrub.c	FUNCTION_2
0x4000081	    0x488b05000000	            mov rax, qword [0x04000088] 	       163	input-scrub.c	FUNCTION_2
0x4000088	        0x48894320	             mov qword [rbx + 0x20], rax	       163	input-scrub.c	FUNCTION_2
0x400008c	    0x488b05000000	            mov rax, qword [0x04000093] 	       164	input-scrub.c	FUNCTION_2
0x4000093	        0x48894328	             mov qword [rbx + 0x28], rax	       164	input-scrub.c	FUNCTION_2
0x4000097	    0x488b05000000	            mov rax, qword [0x0400009e] 	       165	input-scrub.c	FUNCTION_2
0x400009e	        0x48894330	             mov qword [rbx + 0x30], rax	       165	input-scrub.c	FUNCTION_2
0x40000a2	    0x8b0500000000	            mov eax, dword [0x040000a8] 	       166	input-scrub.c	FUNCTION_2
0x40000a8	          0x894338	             mov dword [rbx + 0x38], eax	       166	input-scrub.c	FUNCTION_2
0x40000ab	    0x8b0500000000	            mov eax, dword [0x040000b1] 	       167	input-scrub.c	FUNCTION_2
0x40000b1	          0x89433c	             mov dword [rbx + 0x3c], eax	       167	input-scrub.c	FUNCTION_2
0x40000b4	    0x488b05000000	            mov rax, qword [0x040000bb] 	       168	input-scrub.c	FUNCTION_2
0x40000bb	        0x48894340	             mov qword [rbx + 0x40], rax	       168	input-scrub.c	FUNCTION_2
0x40000bf	    0x488b05000000	            mov rax, qword [0x040000c6] 	       169	input-scrub.c	FUNCTION_2
0x40000c6	        0x48894348	             mov qword [rbx + 0x48], rax	       169	input-scrub.c	FUNCTION_2
0x40000ca	    0x488b05000000	            mov rax, qword [0x040000d1] 	       169	input-scrub.c	FUNCTION_2
0x40000d1	        0x48894350	             mov qword [rbx + 0x50], rax	       169	input-scrub.c	FUNCTION_2
0x40000d5	    0x488b05000000	            mov rax, qword [0x040000dc] 	       169	input-scrub.c	FUNCTION_2
0x40000dc	        0x48894358	             mov qword [rbx + 0x58], rax	       169	input-scrub.c	FUNCTION_2
0x40000e0	    0x8b0500000000	            mov eax, dword [0x040000e6] 	       170	input-scrub.c	FUNCTION_2
0x40000e6	          0x894360	             mov dword [rbx + 0x60], eax	       170	input-scrub.c	FUNCTION_2
0x40000e9	     0xfb605000000	           movzx eax, byte [0x040000f0] 	        53	string3.h	FUNCTION_17	CALL_3
0x40000f0	          0x884318	               mov byte [rbx + 0x18], al	        53	string3.h	FUNCTION_17	CALL_3
0x40000f3	    0x488b05000000	            mov rax, qword [0x040000fa] 	       172	input-scrub.c	FUNCTION_2
0x40000fa	        0x48894368	             mov qword [rbx + 0x68], rax	       172	input-scrub.c	FUNCTION_2
0x40000fe	      0xe800000000	                          call 0x4000103	       173	input-scrub.c	FUNCTION_2	CALL_3
0x4000103	    0x48892d000000	            mov qword [0x0400010a], rbp 	       175	input-scrub.c	FUNCTION_2
0x400010a	        0x48894370	             mov qword [rbx + 0x70], rax	       173	input-scrub.c	FUNCTION_2	CALL_3
0x400010e	      0xe800000000	                          call 0x4000113	       139	input-scrub.c	FUNCTION_1	CALL_1
0x4000113	    0x892d00000000	            mov dword [0x04000119], ebp 	       140	input-scrub.c	FUNCTION_1
0x4000119	    0x48c705000000	               mov qword [0x04000124], 0	       141	input-scrub.c	FUNCTION_1
0x4000124	      0xe800000000	                          call 0x4000129	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000129	          0x4801c0	                            add rax, rax	       143	input-scrub.c	FUNCTION_1	CALL_2
0x400012c	        0x488d7803	                      lea rdi, [rax + 3]	       144	input-scrub.c	FUNCTION_1	CALL_3
0x4000130	    0x488905000000	            mov qword [0x04000137], rax 	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000137	      0xe800000000	                          call 0x400013c	       144	input-scrub.c	FUNCTION_1	CALL_3
0x400013c	          0xc6000a	                     mov byte [rax], 0xa	        53	string3.h	FUNCTION_17	CALL_3
0x400013f	    0x488905000000	            mov qword [0x04000146], rax 	       144	input-scrub.c	FUNCTION_1	CALL_3
0x4000146	        0x4883c408	                              add rsp, 8	       180	input-scrub.c	FUNCTION_2
0x400014a	          0x4889d8	                            mov rax, rbx	       180	input-scrub.c	FUNCTION_2
0x400014d	              0x5b	                                 pop rbx	       180	input-scrub.c	FUNCTION_2
0x400014e	              0x5d	                                 pop rbp	       180	input-scrub.c	FUNCTION_2
0x400014f	              0xc3	                                     ret	       180	input-scrub.c	FUNCTION_2
input_scrub_include_sb	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,3:CALL,8:ELSE,0:functions,0	53
0x40002d0	              0x55	                                push rbp	       263	input-scrub.c	FUNCTION_8
0x40002d1	              0x53	                                push rbx	       263	input-scrub.c	FUNCTION_8
0x40002d2	        0x4883ec08	                              sub rsp, 8	       263	input-scrub.c	FUNCTION_8
0x40002d6	    0x8b0500000000	            mov eax, dword [0x040002dc] 	       266	input-scrub.c	FUNCTION_8	IF_1
0x40002dc	    0x3b0500000000	            cmp eax, dword [0x040002e2] 	       266	input-scrub.c	FUNCTION_8	IF_1
0x40002e2	     0xf8fac000000	                            jg 0x4000394	       266	input-scrub.c	FUNCTION_8	IF_1
0x40002e8	          0x83c001	                              add eax, 1	       268	input-scrub.c	FUNCTION_8
0x40002eb	          0x4889fb	                            mov rbx, rdi	       268	input-scrub.c	FUNCTION_8
0x40002ee	          0x4889f7	                            mov rdi, rsi	       277	input-scrub.c	FUNCTION_8	CALL_4
0x40002f1	            0x89d5	                            mov ebp, edx	       277	input-scrub.c	FUNCTION_8	CALL_4
0x40002f3	    0x890500000000	            mov dword [0x040002f9], eax 	       268	input-scrub.c	FUNCTION_8
0x40002f9	      0xe842fdffff	               call sym.input_scrub_push	       277	input-scrub.c	FUNCTION_8	CALL_4
0x40002fe	        0x488b7308	                mov rsi, qword [rbx + 8]	       280	input-scrub.c	FUNCTION_8
0x4000302	    0x488905000000	            mov qword [0x04000309], rax 	       277	input-scrub.c	FUNCTION_8	CALL_4
0x4000309	          0x4885f6	                           test rsi, rsi	       280	input-scrub.c	FUNCTION_8
0x400030c	            0x7432	                            je 0x4000340	       280	input-scrub.c	FUNCTION_8
0x400030e	          0x488b03	                    mov rax, qword [rbx]	       280	input-scrub.c	FUNCTION_8
0x4000311	          0x80380a	                     cmp byte [rax], 0xa	       280	input-scrub.c	FUNCTION_8
0x4000314	            0x742a	                            je 0x4000340	       280	input-scrub.c	FUNCTION_8
0x4000316	        0x4883c601	                              add rsi, 1	       281	input-scrub.c	FUNCTION_8	CALL_5
0x400031a	      0xbf00000000	                              mov edi, 0	       281	input-scrub.c	FUNCTION_8	CALL_5
0x400031f	      0xe800000000	                          call 0x4000324	       281	input-scrub.c	FUNCTION_8	CALL_5
0x4000324	      0xbe0a000000	                            mov esi, 0xa	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x4000329	      0xbf00000000	                              mov edi, 0	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x400032e	    0x892d00000000	            mov dword [0x04000334], ebp 	       282	input-scrub.c	FUNCTION_8
0x4000334	      0xe800000000	                          call 0x4000339	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x4000339	            0xeb15	                           jmp 0x4000350	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x400033b	       0xf1f440000	                   nop dword [rax + rax]	       286	input-scrub.c	FUNCTION_8	IF_3	CALL_6
0x4000340	      0xbf00000000	                              mov edi, 0	       281	input-scrub.c	FUNCTION_8	CALL_5
0x4000345	      0xe800000000	                          call 0x400034a	       281	input-scrub.c	FUNCTION_8	CALL_5
0x400034a	    0x892d00000000	            mov dword [0x04000350], ebp 	       282	input-scrub.c	FUNCTION_8
0x4000350	          0x4889de	                            mov rsi, rbx	       288	input-scrub.c	FUNCTION_8	CALL_7
0x4000353	      0xbf00000000	                              mov edi, 0	       288	input-scrub.c	FUNCTION_8	CALL_7
0x4000358	      0xe800000000	                          call 0x400035d	       288	input-scrub.c	FUNCTION_8	CALL_7
0x400035d	      0xbf00000000	                              mov edi, 0	       292	input-scrub.c	FUNCTION_8	CALL_8
0x4000362	      0xe800000000	                          call 0x4000367	       292	input-scrub.c	FUNCTION_8	CALL_8
0x4000367	    0x488b05000000	            mov rax, qword [0x0400036e] 	       298	input-scrub.c	FUNCTION_8
0x400036e	    0x48c705000000	               mov qword [0x04000379], 1	       294	input-scrub.c	FUNCTION_8
0x4000379	          0x8b503c	            mov edx, dword [rax + 0x3c] 	       298	input-scrub.c	FUNCTION_8
0x400037c	        0x488b4030	            mov rax, qword [rax + 0x30] 	       299	input-scrub.c	FUNCTION_8
0x4000380	    0x891500000000	            mov dword [0x04000386], edx 	       298	input-scrub.c	FUNCTION_8
0x4000386	    0x488905000000	            mov qword [0x0400038d], rax 	       299	input-scrub.c	FUNCTION_8
0x400038d	        0x4883c408	                              add rsp, 8	       300	input-scrub.c	FUNCTION_8
0x4000391	              0x5b	                                 pop rbx	       300	input-scrub.c	FUNCTION_8
0x4000392	              0x5d	                                 pop rbp	       300	input-scrub.c	FUNCTION_8
0x4000393	              0xc3	                                     ret	       300	input-scrub.c	FUNCTION_8
0x4000394	            0x31ff	                            xor edi, edi	       267	input-scrub.c	FUNCTION_8	CALL_2
0x4000396	      0xba05000000	                              mov edx, 5	       267	input-scrub.c	FUNCTION_8	CALL_2
0x400039b	      0xbe00000000	                              mov esi, 0	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003a0	      0xe800000000	                          call 0x40003a5	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003a5	          0x4889c7	                            mov rdi, rax	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003a8	            0x31c0	                            xor eax, eax	       267	input-scrub.c	FUNCTION_8	CALL_2
0x40003aa	      0xe800000000	                          call 0x40003af	       267	input-scrub.c	FUNCTION_8	CALL_2
input_scrub_begin	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,6:ELSE,0:functions,0	16
0x4000150	        0x4883ec08	                              sub rsp, 8	       211	input-scrub.c	FUNCTION_4
0x4000154	    0x48c705000000	               mov qword [0x0400015f], 0	       216	input-scrub.c	FUNCTION_4
0x400015f	    0x48c705000000	               mov qword [0x0400016a], 0	       217	input-scrub.c	FUNCTION_4
0x400016a	      0xe800000000	                          call 0x400016f	       139	input-scrub.c	FUNCTION_1	CALL_1
0x400016f	    0xc70500000000	     mov dword [0x04000179], 0xffffffff 	       140	input-scrub.c	FUNCTION_1
0x4000179	    0x48c705000000	               mov qword [0x04000184], 0	       141	input-scrub.c	FUNCTION_1
0x4000184	      0xe800000000	                          call 0x4000189	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000189	          0x4801c0	                            add rax, rax	       143	input-scrub.c	FUNCTION_1	CALL_2
0x400018c	        0x488d7803	                      lea rdi, [rax + 3]	       144	input-scrub.c	FUNCTION_1	CALL_3
0x4000190	    0x488905000000	            mov qword [0x04000197], rax 	       143	input-scrub.c	FUNCTION_1	CALL_2
0x4000197	      0xe800000000	                          call 0x400019c	       144	input-scrub.c	FUNCTION_1	CALL_3
0x400019c	            0x31ff	                            xor edi, edi	       219	input-scrub.c	FUNCTION_4	CALL_6
0x400019e	    0x488905000000	            mov qword [0x040001a5], rax 	       144	input-scrub.c	FUNCTION_1	CALL_3
0x40001a5	          0xc6000a	                     mov byte [rax], 0xa	        53	string3.h	FUNCTION_17	CALL_3
0x40001a8	        0x4883c408	                              add rsp, 8	       220	input-scrub.c	FUNCTION_4
0x40001ac	      0xe900000000	                           jmp 0x40001b1	       219	input-scrub.c	FUNCTION_4	CALL_6
input_scrub_close	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,1:ELSE,0:functions,0	6
0x40003b0	        0x4883ec08	                              sub rsp, 8	       304	input-scrub.c	FUNCTION_9
0x40003b4	      0xe800000000	                          call 0x40003b9	       305	input-scrub.c	FUNCTION_9	CALL_1
0x40003b9	    0xc70500000000	               mov dword [0x040003c3], 0	       306	input-scrub.c	FUNCTION_9
0x40003c3	    0xc70500000000	     mov dword [0x040003cd], 0xffffffff 	       307	input-scrub.c	FUNCTION_9
0x40003cd	        0x4883c408	                              add rsp, 8	       308	input-scrub.c	FUNCTION_9
0x40003d1	              0xc3	                                     ret	       308	input-scrub.c	FUNCTION_9
input_scrub_include_file	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,2:ELSE,0:functions,0	24
0x4000260	              0x53	                                push rbx	       253	input-scrub.c	FUNCTION_7
0x4000261	          0x4889fb	                            mov rbx, rdi	       253	input-scrub.c	FUNCTION_7
0x4000264	          0x4889f7	                            mov rdi, rsi	       254	input-scrub.c	FUNCTION_7	CALL_1
0x4000267	      0xe8d4fdffff	               call sym.input_scrub_push	       254	input-scrub.c	FUNCTION_7	CALL_1
0x400026c	            0x31f6	                            xor esi, esi	       239	input-scrub.c	FUNCTION_6	CALL_1
0x400026e	    0x803d00000000	                cmp byte [0x04000275], 0	       239	input-scrub.c	FUNCTION_6	CALL_1
0x4000275	          0x4889df	                            mov rdi, rbx	       239	input-scrub.c	FUNCTION_6	CALL_1
0x4000278	    0x488905000000	            mov qword [0x0400027f], rax 	       254	input-scrub.c	FUNCTION_7	CALL_1
0x400027f	        0x400f94c6	                                sete sil	       239	input-scrub.c	FUNCTION_6	CALL_1
0x4000283	      0xe800000000	                          call 0x4000288	       239	input-scrub.c	FUNCTION_6	CALL_1
0x4000288	          0x803b00	                       cmp byte [rbx], 0	       240	input-scrub.c	FUNCTION_6	CALL_2
0x400028b	          0x4889d8	                            mov rax, rbx	       240	input-scrub.c	FUNCTION_6	CALL_2
0x400028e	            0x7511	                           jne 0x40002a1	       240	input-scrub.c	FUNCTION_6	CALL_2
0x4000290	      0xba05000000	                              mov edx, 5	       240	input-scrub.c	FUNCTION_6	CALL_2
0x4000295	      0xbe00000000	                              mov esi, 0	       240	input-scrub.c	FUNCTION_6	CALL_2
0x400029a	            0x31ff	                            xor edi, edi	       240	input-scrub.c	FUNCTION_6	CALL_2
0x400029c	      0xe800000000	                          call 0x40002a1	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002a1	    0x488905000000	            mov qword [0x040002a8], rax 	       240	input-scrub.c	FUNCTION_6	CALL_2
0x40002a8	    0x488b05000000	            mov rax, qword [0x040002af] 	       255	input-scrub.c	FUNCTION_7	CALL_2
0x40002af	    0xc70500000000	               mov dword [0x040002b9], 0	       241	input-scrub.c	FUNCTION_6
0x40002b9	    0x48c705000000	               mov qword [0x040002c4], 0	       243	input-scrub.c	FUNCTION_6
0x40002c4	              0x5b	                                 pop rbx	       256	input-scrub.c	FUNCTION_7
0x40002c5	        0x4883c001	                              add rax, 1	       255	input-scrub.c	FUNCTION_7	CALL_2
0x40002c9	              0xc3	                                     ret	       256	input-scrub.c	FUNCTION_7
as_where	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,2:CALL,1:ELSE,0:functions,0	30
0x4000900	    0x488b05000000	            mov rax, qword [0x04000907] 	       512	input-scrub.c	FUNCTION_16	IF_1
0x4000907	          0x4885c0	                           test rax, rax	       512	input-scrub.c	FUNCTION_16	IF_1
0x400090a	            0x7414	                            je 0x4000920	       512	input-scrub.c	FUNCTION_16	IF_1
0x400090c	          0x4885ff	                           test rdi, rdi	       513	input-scrub.c	FUNCTION_16	IF_1
0x400090f	            0x7420	                            je 0x4000931	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000911	    0x8b1500000000	            mov edx, dword [0x04000917] 	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000917	            0x85d2	                           test edx, edx	       513	input-scrub.c	FUNCTION_16	IF_1
0x4000919	            0x781d	                            js 0x4000938	       513	input-scrub.c	FUNCTION_16	IF_1
0x400091b	            0x8917	                    mov dword [rdi], edx	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400091d	              0xc3	                                     ret	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400091e	            0x6690	                                     nop	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000920	    0x488b05000000	            mov rax, qword [0x04000927] 	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000927	          0x4885c0	                           test rax, rax	       495	input-scrub.c	FUNCTION_15	IF_1
0x400092a	            0x7424	                            je 0x4000950	       495	input-scrub.c	FUNCTION_15	IF_1
0x400092c	          0x4885ff	                           test rdi, rdi	       497	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400092f	            0x7513	                           jne 0x4000944	       497	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000931	            0xf3c3	                                     ret	       521	input-scrub.c	FUNCTION_16
0x4000933	       0xf1f440000	                   nop dword [rax + rax]	       521	input-scrub.c	FUNCTION_16
0x4000938	    0x488b05000000	            mov rax, qword [0x0400093f] 	       495	input-scrub.c	FUNCTION_15	IF_1
0x400093f	          0x4885c0	                           test rax, rax	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000942	            0x7411	                            je 0x4000955	       495	input-scrub.c	FUNCTION_15	IF_1
0x4000944	    0x8b1500000000	            mov edx, dword [0x0400094a] 	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400094a	            0x8917	                    mov dword [rdi], edx	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400094c	              0xc3	                                     ret	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x400094d	           0xf1f00	                         nop dword [rax]	       498	input-scrub.c	FUNCTION_15	IF_1	IF_2
0x4000950	          0x4885ff	                           test rdi, rdi	       502	input-scrub.c	FUNCTION_15	IF_3
0x4000953	            0x74dc	                            je 0x4000931	       502	input-scrub.c	FUNCTION_15	IF_3
0x4000955	    0xc70700000000	                      mov dword [rdi], 0	       503	input-scrub.c	FUNCTION_15	IF_3
0x400095b	            0x31c0	                            xor eax, eax	       504	input-scrub.c	FUNCTION_15
0x400095d	              0xc3	                                     ret	       504	input-scrub.c	FUNCTION_15
new_logical_line	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,1:ELSE,0:functions,0	28
0x4000870	            0x85f6	                           test esi, esi	       463	input-scrub.c	FUNCTION_13	IF_2
0x4000872	              0x53	                                push rbx	       485	input-scrub.c	ELSE_2	FUNCTION_14
0x4000873	            0x7843	                            js 0x40008b8	       463	input-scrub.c	FUNCTION_13	IF_2
0x4000875	    0x893500000000	            mov dword [0x0400087b], esi 	       464	input-scrub.c	FUNCTION_13	IF_2
0x400087b	          0x4885ff	                           test rdi, rdi	       472	input-scrub.c	FUNCTION_13	IF_4
0x400087e	            0x7430	                            je 0x40008b0	       472	input-scrub.c	FUNCTION_13	IF_4
0x4000880	          0x4889fb	                            mov rbx, rdi	       472	input-scrub.c	FUNCTION_13	IF_4
0x4000883	    0x488b3d000000	            mov rdi, qword [0x0400088a] 	       473	input-scrub.c	FUNCTION_13	IF_4
0x400088a	          0x4885ff	                           test rdi, rdi	       473	input-scrub.c	FUNCTION_13	IF_4
0x400088d	            0x740c	                            je 0x400089b	       473	input-scrub.c	FUNCTION_13	IF_4
0x400088f	          0x4889de	                            mov rsi, rbx	       474	input-scrub.c	FUNCTION_13	IF_4	CALL_3
0x4000892	      0xe800000000	                          call 0x4000897	       474	input-scrub.c	FUNCTION_13	IF_4	CALL_3
0x4000897	            0x85c0	                           test eax, eax	       474	input-scrub.c	FUNCTION_13	IF_4	CALL_3
0x4000899	            0x7415	                            je 0x40008b0	       474	input-scrub.c	FUNCTION_13	IF_4	CALL_3
0x400089b	    0x48891d000000	            mov qword [0x040008a2], rbx 	       476	input-scrub.c	FUNCTION_13	IF_4
0x40008a2	      0xb801000000	                              mov eax, 1	       477	input-scrub.c	FUNCTION_13	IF_4
0x40008a7	              0x5b	                                 pop rbx	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008a8	              0xc3	                                     ret	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008a9	     0xf1f80000000	                         nop dword [rax]	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008b0	            0x31c0	                            xor eax, eax	       480	input-scrub.c	FUNCTION_13	ELSE_2
0x40008b2	              0x5b	                                 pop rbx	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008b3	              0xc3	                                     ret	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008b4	         0xf1f4000	                         nop dword [rax]	       487	input-scrub.c	ELSE_2	FUNCTION_14
0x40008b8	          0x83feff	             cmp esi, 0xffffffffffffffff	       465	input-scrub.c	FUNCTION_13	ELSE_1	IF_3
0x40008bb	            0x75be	                           jne 0x400087b	       465	input-scrub.c	FUNCTION_13	ELSE_1	IF_3
0x40008bd	          0x4885ff	                           test rdi, rdi	       465	input-scrub.c	FUNCTION_13	ELSE_1	IF_3
0x40008c0	            0x75be	                           jne 0x4000880	       465	input-scrub.c	FUNCTION_13	ELSE_1	IF_3
0x40008c2	            0xebb7	                           jmp 0x400087b	       465	input-scrub.c	FUNCTION_13	ELSE_1	IF_3
bump_line_counters	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,2:CALL,0:ELSE,0:functions,0	11
0x4000770	    0x48833d000000	cmp qword [0x04000778], 0xffffffffffffffff	       426	input-scrub.c	FUNCTION_12	IF_1
0x4000778	            0x7406	                            je 0x4000780	       426	input-scrub.c	FUNCTION_12	IF_1
0x400077a	            0xf3c3	                                     ret	       426	input-scrub.c	FUNCTION_12	IF_1
0x400077c	         0xf1f4000	                         nop dword [rax]	       426	input-scrub.c	FUNCTION_12	IF_1
0x4000780	    0x8b0500000000	            mov eax, dword [0x04000786] 	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x4000786	    0x830500000000	               add dword [0x0400078d], 1	       428	input-scrub.c	FUNCTION_12	IF_1
0x400078d	            0x85c0	                           test eax, eax	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x400078f	            0x78e9	                            js 0x400077a	       429	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x4000791	          0x83c001	                              add eax, 1	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x4000794	    0x890500000000	            mov dword [0x0400079a], eax 	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
0x400079a	              0xc3	                                     ret	       430	input-scrub.c	FUNCTION_12	IF_1	IF_2
seen_at_least_1_file	FOR,0:DO,0:WHILE,0:SWITCH,0:IF,0:CALL,0:ELSE,0:functions,0	4
0x4000760	            0x31c0	                            xor eax, eax	       420	input-scrub.c	FUNCTION_11
0x4000762	    0x48833d000000	               cmp qword [0x0400076a], 0	       420	input-scrub.c	FUNCTION_11
0x400076a	           0xf95c0	                                setne al	       420	input-scrub.c	FUNCTION_11
0x400076d	              0xc3	                                     ret	       421	input-scrub.c	FUNCTION_11
