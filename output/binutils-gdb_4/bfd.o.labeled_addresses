bfd_fprintf_vma	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	32
0x4001860	              0x55	                                push rbp	      2007	bfd.c	FUNCTION_31
0x4001861	              0x53	                                push rbx	      2007	bfd.c	FUNCTION_31
0x4001862	          0x4889f5	                            mov rbp, rsi	      2007	bfd.c	FUNCTION_31
0x4001865	          0x4889d3	                            mov rbx, rdx	      2007	bfd.c	FUNCTION_31
0x4001868	        0x4883ec08	                              sub rsp, 8	      2007	bfd.c	FUNCTION_31
0x400186c	        0x488b4708	                mov rax, qword [rdi + 8]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4001870	        0x83780805	                  cmp dword [rax + 8], 5	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4001874	            0x743a	                            je 0x40018b0	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x4001876	      0xe800000000	                          call 0x400187b	      1985	bfd.c	FUNCTION_29	CALL_3
0x400187b	          0x83f820	                           cmp eax, 0x20	      1985	bfd.c	FUNCTION_29	CALL_3
0x400187e	           0xf96c0	                                setbe al	      1985	bfd.c	FUNCTION_29	CALL_3
0x4001881	           0xfb6c0	                           movzx eax, al	      1985	bfd.c	FUNCTION_29	CALL_3
0x4001884	            0x85c0	                           test eax, eax	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x4001886	            0x89d9	                            mov ecx, ebx	        97	stdio2.h	CALL_31
0x4001888	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x400188d	            0x7508	                           jne 0x4001897	      2009	bfd.c	FUNCTION_31	IF_1	CALL_1
0x400188f	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_31
0x4001892	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4001897	        0x4883c408	                              add rsp, 8	      2016	bfd.c	FUNCTION_31
0x400189b	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x400189e	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x40018a3	              0x5b	                                 pop rbx	      2016	bfd.c	FUNCTION_31
0x40018a4	              0x5d	                                 pop rbp	      2016	bfd.c	FUNCTION_31
0x40018a5	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x40018a7	      0xe900000000	                           jmp 0x40018ac	        97	stdio2.h	CALL_31
0x40018ac	         0xf1f4000	                         nop dword [rax]	        97	stdio2.h	CALL_31
0x40018b0	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1981	bfd.c	FUNCTION_29	IF_1
0x40018b7	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1981	bfd.c	FUNCTION_29	IF_1
0x40018be	        0x80780c01	                 cmp byte [rax + 0xc], 1	      1981	bfd.c	FUNCTION_29	IF_1
0x40018c2	           0xf94c0	                                 sete al	      1981	bfd.c	FUNCTION_29	IF_1
0x40018c5	           0xfb6c0	                           movzx eax, al	      1981	bfd.c	FUNCTION_29	IF_1
0x40018c8	            0xebba	                           jmp 0x4001884	      1981	bfd.c	FUNCTION_29	IF_1
_bfd_set_gp_value	ELSE,1:functions,0:CALL,3:SWITCH,0:IF,4:FOR,0:WHILE,0:DO,0	26
0x4001610	          0x4885ff	                           test rdi, rdi	      1631	bfd.c	FUNCTION_25	IF_1
0x4001613	            0x7447	                            je 0x400165c	      1631	bfd.c	FUNCTION_25	IF_1
0x4001615	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1633	bfd.c	FUNCTION_25	IF_2
0x4001619	          0x83e007	                              and eax, 7	      1633	bfd.c	FUNCTION_25	IF_2
0x400161c	            0x3c01	                               cmp al, 1	      1633	bfd.c	FUNCTION_25	IF_2
0x400161e	            0x7408	                            je 0x4001628	      1633	bfd.c	FUNCTION_25	IF_2
0x4001620	            0xf3c3	                                     ret	      1633	bfd.c	FUNCTION_25	IF_2
0x4001622	    0x660f1f440000	                    nop word [rax + rax]	      1633	bfd.c	FUNCTION_25	IF_2
0x4001628	        0x488b4708	                mov rax, qword [rdi + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x400162c	          0x8b4008	                mov eax, dword [rax + 8]	      1636	bfd.c	FUNCTION_25	IF_3
0x400162f	          0x83f803	                              cmp eax, 3	      1636	bfd.c	FUNCTION_25	IF_3
0x4001632	            0x741c	                            je 0x4001650	      1636	bfd.c	FUNCTION_25	IF_3
0x4001634	          0x83f805	                              cmp eax, 5	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001637	            0x75e7	                           jne 0x4001620	      1638	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001639	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001640	    0x4889b0f00200	            mov qword [rax + 0x2f0], rsi	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001647	              0xc3	                                     ret	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001648	     0xf1f84000000	                   nop dword [rax + rax]	      1639	bfd.c	FUNCTION_25	ELSE_1	IF_4
0x4001650	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1637	bfd.c	FUNCTION_25	CALL_2
0x4001657	        0x48897020	             mov qword [rax + 0x20], rsi	      1637	bfd.c	FUNCTION_25	CALL_2
0x400165b	              0xc3	                                     ret	      1637	bfd.c	FUNCTION_25	CALL_2
0x400165c	              0x50	                                push rax	      1630	bfd.c	FUNCTION_25
0x400165d	      0xba00000000	                              mov edx, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001662	      0xbe60060000	                          mov esi, 0x660	      1632	bfd.c	FUNCTION_25	CALL_1
0x4001667	      0xbf00000000	                              mov edi, 0	      1632	bfd.c	FUNCTION_25	CALL_1
0x400166c	      0xe800000000	                          call 0x4001671	      1632	bfd.c	FUNCTION_25	CALL_1
bfd_record_phdr	ELSE,0:functions,0:CALL,4:SWITCH,0:IF,3:FOR,1:WHILE,0:DO,0	84
0x40016c0	        0x4c8b5708	                mov r10, qword [rdi + 8]	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40016c4	      0xb801000000	                              mov eax, 1	      1946	bfd.c	FUNCTION_28	IF_1
0x40016c9	      0x41837a0805	                  cmp dword [r10 + 8], 5	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40016ce	            0x7408	                            je 0x40016d8	      1945	bfd.c	FUNCTION_28	IF_1	CALL_1
0x40016d0	              0xc3	                                     ret	      1970	bfd.c	FUNCTION_28
0x40016d1	     0xf1f80000000	                         nop dword [rax]	      1970	bfd.c	FUNCTION_28
0x40016d8	            0x4157	                                push r15	      1941	bfd.c	FUNCTION_28
0x40016da	            0x4156	                                push r14	      1941	bfd.c	FUNCTION_28
0x40016dc	          0x4989f6	                            mov r14, rsi	      1941	bfd.c	FUNCTION_28
0x40016df	            0x4155	                                push r13	      1941	bfd.c	FUNCTION_28
0x40016e1	            0x4154	                                push r12	      1941	bfd.c	FUNCTION_28
0x40016e3	          0x4989ff	                            mov r15, rdi	      1941	bfd.c	FUNCTION_28
0x40016e6	              0x55	                                push rbp	      1941	bfd.c	FUNCTION_28
0x40016e7	              0x53	                                push rbx	      1941	bfd.c	FUNCTION_28
0x40016e8	            0x89d5	                            mov ebp, edx	      1941	bfd.c	FUNCTION_28
0x40016ea	          0x4d89cc	                             mov r12, r9	      1941	bfd.c	FUNCTION_28
0x40016ed	          0x4489c3	                            mov ebx, r8d	      1941	bfd.c	FUNCTION_28
0x40016f0	        0x4883ec18	                           sub rsp, 0x18	      1941	bfd.c	FUNCTION_28
0x40016f4	        0x8b542460	            mov edx, dword [rsp + 0x60] 	      1949	bfd.c	FUNCTION_28
0x40016f8	        0x894c2408	                mov dword [rsp + 8], ecx	      1949	bfd.c	FUNCTION_28
0x40016fc	    0x4c8d2cd50000	                        lea r13, [rdx*8]	      1949	bfd.c	FUNCTION_28
0x4001704	        0x498d7548	                   lea rsi, [r13 + 0x48]	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001708	      0xe800000000	                          call 0x400170d	      1950	bfd.c	FUNCTION_28	CALL_2
0x400170d	          0x4885c0	                           test rax, rax	      1951	bfd.c	FUNCTION_28	IF_2
0x4001710	          0x4889c1	                            mov rcx, rax	      1950	bfd.c	FUNCTION_28	CALL_2
0x4001713	     0xf84af000000	                            je 0x40017c8	      1951	bfd.c	FUNCTION_28	IF_2
0x4001719	        0x4c897008	                mov qword [rax + 8], r14	      1954	bfd.c	FUNCTION_28
0x400171d	         0xfb65140	           movzx edx, byte [rcx + 0x40] 	      1957	bfd.c	FUNCTION_28
0x4001721	          0x83e501	                              and ebp, 1	      1957	bfd.c	FUNCTION_28
0x4001724	        0x8b442408	                mov eax, dword [rsp + 8]	      1955	bfd.c	FUNCTION_28
0x4001728	          0x83e301	                              and ebx, 1	      1958	bfd.c	FUNCTION_28
0x400172b	        0x4c896118	             mov qword [rcx + 0x18], r12	      1956	bfd.c	FUNCTION_28
0x400172f	             0x1db	                            add ebx, ebx	      1958	bfd.c	FUNCTION_28
0x4001731	          0x83e2fc	                     and edx, 0xfffffffc	      1957	bfd.c	FUNCTION_28
0x4001734	             0x9d5	                             or ebp, edx	      1958	bfd.c	FUNCTION_28
0x4001736	       0xfb6542450	           movzx edx, byte [rsp + 0x50] 	      1959	bfd.c	FUNCTION_28
0x400173b	        0x48894110	             mov qword [rcx + 0x10], rax	      1955	bfd.c	FUNCTION_28
0x400173f	       0xfb6442458	           movzx eax, byte [rsp + 0x58] 	      1960	bfd.c	FUNCTION_28
0x4001744	             0x9dd	                             or ebp, ebx	      1958	bfd.c	FUNCTION_28
0x4001746	          0x83e5cf	                     and ebp, 0xffffffcf	      1959	bfd.c	FUNCTION_28
0x4001749	          0x83e201	                              and edx, 1	      1959	bfd.c	FUNCTION_28
0x400174c	          0xc1e204	                              shl edx, 4	      1959	bfd.c	FUNCTION_28
0x400174f	          0x83e001	                              and eax, 1	      1960	bfd.c	FUNCTION_28
0x4001752	          0xc1e005	                              shl eax, 5	      1960	bfd.c	FUNCTION_28
0x4001755	             0x9d5	                             or ebp, edx	      1960	bfd.c	FUNCTION_28
0x4001757	             0x9c5	                             or ebp, eax	      1960	bfd.c	FUNCTION_28
0x4001759	        0x8b442460	            mov eax, dword [rsp + 0x60] 	      1961	bfd.c	FUNCTION_28
0x400175d	        0x40886940	              mov byte [rcx + 0x40], bpl	      1960	bfd.c	FUNCTION_28
0x4001761	            0x85c0	                           test eax, eax	      1962	bfd.c	FUNCTION_28	IF_3
0x4001763	          0x894144	             mov dword [rcx + 0x44], eax	      1961	bfd.c	FUNCTION_28
0x4001766	            0x7540	                           jne 0x40017a8	      1962	bfd.c	FUNCTION_28	IF_3
0x4001768	    0x498b87f80000	            mov rax, qword [r15 + 0xf8] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400176f	    0x488b80980c00	           mov rax, qword [rax + 0xc98] 	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001776	          0x488b10	                    mov rdx, qword [rax]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001779	          0x4885d2	                           test rdx, rdx	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400177c	            0x7505	                           jne 0x4001783	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400177e	            0xeb4c	                           jmp 0x40017cc	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001780	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001783	          0x488b02	                    mov rax, qword [rdx]	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001786	          0x4885c0	                           test rax, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x4001789	            0x75f5	                           jne 0x4001780	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x400178b	          0x48890a	                    mov qword [rdx], rcx	      1967	bfd.c	FUNCTION_28
0x400178e	      0xb801000000	                              mov eax, 1	      1969	bfd.c	FUNCTION_28
0x4001793	        0x4883c418	                           add rsp, 0x18	      1970	bfd.c	FUNCTION_28
0x4001797	              0x5b	                                 pop rbx	      1970	bfd.c	FUNCTION_28
0x4001798	              0x5d	                                 pop rbp	      1970	bfd.c	FUNCTION_28
0x4001799	            0x415c	                                 pop r12	      1970	bfd.c	FUNCTION_28
0x400179b	            0x415d	                                 pop r13	      1970	bfd.c	FUNCTION_28
0x400179d	            0x415e	                                 pop r14	      1970	bfd.c	FUNCTION_28
0x400179f	            0x415f	                                 pop r15	      1970	bfd.c	FUNCTION_28
0x40017a1	              0xc3	                                     ret	      1970	bfd.c	FUNCTION_28
0x40017a2	    0x660f1f440000	                    nop word [rax + rax]	      1970	bfd.c	FUNCTION_28
0x40017a8	      0x488b742468	            mov rsi, qword [rsp + 0x68] 	        53	string3.h	FUNCTION_61	CALL_3
0x40017ad	        0x488d7948	                   lea rdi, [rcx + 0x48]	        53	string3.h	FUNCTION_61	CALL_3
0x40017b1	          0x4c89ea	                            mov rdx, r13	        53	string3.h	FUNCTION_61	CALL_3
0x40017b4	      0x48894c2408	                mov qword [rsp + 8], rcx	        53	string3.h	FUNCTION_61	CALL_3
0x40017b9	      0xe800000000	                          call 0x40017be	        53	string3.h	FUNCTION_61	CALL_3
0x40017be	      0x488b4c2408	                mov rcx, qword [rsp + 8]	        53	string3.h	FUNCTION_61	CALL_3
0x40017c3	            0xeba3	                           jmp 0x4001768	        53	string3.h	FUNCTION_61	CALL_3
0x40017c5	           0xf1f00	                         nop dword [rax]	        53	string3.h	FUNCTION_61	CALL_3
0x40017c8	            0x31c0	                            xor eax, eax	      1952	bfd.c	FUNCTION_28	IF_2
0x40017ca	            0xebc7	                           jmp 0x4001793	      1952	bfd.c	FUNCTION_28	IF_2
0x40017cc	          0x4889c2	                            mov rdx, rax	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
0x40017cf	            0xebba	                           jmp 0x400178b	      1965	bfd.c	FUNCTION_28	FOR_1	CALL_4
bfd_scan_vma	ELSE,3:functions,0:CALL,6:SWITCH,0:IF,13:FOR,0:WHILE,1:DO,0	1
0x4001680	      0xe900000000	                           jmp 0x4001685	      1673	bfd.c	FUNCTION_26	CALL_1
bfd_perror	ELSE,1:functions,0:CALL,6:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	213
0x40001f0	            0x4156	                                push r14	       594	bfd.c	FUNCTION_5
0x40001f2	            0x4155	                                push r13	       594	bfd.c	FUNCTION_5
0x40001f4	            0x4154	                                push r12	       594	bfd.c	FUNCTION_5
0x40001f6	              0x55	                                push rbp	       594	bfd.c	FUNCTION_5
0x40001f7	              0x53	                                push rbx	       594	bfd.c	FUNCTION_5
0x40001f8	          0x4889fb	                            mov rbx, rdi	       594	bfd.c	FUNCTION_5
0x40001fb	        0x4883ec10	                           sub rsp, 0x10	       594	bfd.c	FUNCTION_5
0x40001ff	    0x488b3d000000	            mov rdi, qword [0x04000206] 	       595	bfd.c	FUNCTION_5	CALL_1
0x4000206	    0x64488b042528	                mov rax, qword fs:[0x28]	       594	bfd.c	FUNCTION_5
0x400020f	      0x4889442408	                mov qword [rsp + 8], rax	       594	bfd.c	FUNCTION_5
0x4000214	            0x31c0	                            xor eax, eax	       594	bfd.c	FUNCTION_5
0x4000216	      0xe800000000	                          call 0x400021b	       595	bfd.c	FUNCTION_5	CALL_1
0x400021b	          0x4885db	                           test rbx, rbx	       596	bfd.c	FUNCTION_5	IF_1
0x400021e	    0x8b0500000000	            mov eax, dword [0x04000224] 	       486	bfd.c	FUNCTION_1
0x4000224	            0x7409	                            je 0x400022f	       596	bfd.c	FUNCTION_5	IF_1
0x4000226	          0x803b00	                       cmp byte [rbx], 0	       596	bfd.c	FUNCTION_5	IF_1
0x4000229	     0xf8581000000	                           jne 0x40002b0	       596	bfd.c	FUNCTION_5	IF_1
0x400022f	          0x83f814	                           cmp eax, 0x14	       555	bfd.c	FUNCTION_4	IF_1
0x4000232	     0xf84d8000000	                            je 0x4000310	       555	bfd.c	FUNCTION_4	IF_1
0x4000238	          0x83f801	                              cmp eax, 1	       568	bfd.c	FUNCTION_4	IF_3
0x400023b	     0xf84df010000	                            je 0x4000420	       568	bfd.c	FUNCTION_4	IF_3
0x4000241	          0x83f815	                           cmp eax, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x4000244	      0xba15000000	                           mov edx, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x4000249	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_4
0x400024e	        0x480f47c2	                          cmova rax, rdx	       574	bfd.c	FUNCTION_4	CALL_4
0x4000252	      0xba05000000	                              mov edx, 5	       574	bfd.c	FUNCTION_4	CALL_4
0x4000257	    0x488b34c50000	                  mov rsi, qword [rax*8]	       574	bfd.c	FUNCTION_4	CALL_4
0x400025f	      0xe800000000	                          call 0x4000264	       574	bfd.c	FUNCTION_4	CALL_4
0x4000264	          0x4889c3	                            mov rbx, rax	       574	bfd.c	FUNCTION_4	CALL_4
0x4000267	    0x488b3d000000	            mov rdi, qword [0x0400026e] 	        97	stdio2.h	CALL_31
0x400026e	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_31
0x4000271	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4000276	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x400027b	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x400027d	      0xe800000000	                          call 0x4000282	        97	stdio2.h	CALL_31
0x4000282	    0x488b3d000000	            mov rdi, qword [0x04000289] 	       600	bfd.c	FUNCTION_5	CALL_6
0x4000289	      0xe800000000	                          call 0x400028e	       600	bfd.c	FUNCTION_5	CALL_6
0x400028e	      0x488b442408	                mov rax, qword [rsp + 8]	       601	bfd.c	FUNCTION_5
0x4000293	    0x644833042528	                xor rax, qword fs:[0x28]	       601	bfd.c	FUNCTION_5
0x400029c	     0xf85cb020000	                           jne 0x400056d	       601	bfd.c	FUNCTION_5
0x40002a2	        0x4883c410	                           add rsp, 0x10	       601	bfd.c	FUNCTION_5
0x40002a6	              0x5b	                                 pop rbx	       601	bfd.c	FUNCTION_5
0x40002a7	              0x5d	                                 pop rbp	       601	bfd.c	FUNCTION_5
0x40002a8	            0x415c	                                 pop r12	       601	bfd.c	FUNCTION_5
0x40002aa	            0x415d	                                 pop r13	       601	bfd.c	FUNCTION_5
0x40002ac	            0x415e	                                 pop r14	       601	bfd.c	FUNCTION_5
0x40002ae	              0xc3	                                     ret	       601	bfd.c	FUNCTION_5
0x40002af	              0x90	                                     nop	       601	bfd.c	FUNCTION_5
0x40002b0	          0x83f814	                           cmp eax, 0x14	       555	bfd.c	FUNCTION_4	IF_1
0x40002b3	     0xf84df000000	                            je 0x4000398	       555	bfd.c	FUNCTION_4	IF_1
0x40002b9	          0x83f801	                              cmp eax, 1	       568	bfd.c	FUNCTION_4	IF_3
0x40002bc	     0xf84ce010000	                            je 0x4000490	       568	bfd.c	FUNCTION_4	IF_3
0x40002c2	          0x83f815	                           cmp eax, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x40002c5	      0xba15000000	                           mov edx, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x40002ca	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_4
0x40002cf	        0x480f47c2	                          cmova rax, rdx	       574	bfd.c	FUNCTION_4	CALL_4
0x40002d3	      0xba05000000	                              mov edx, 5	       574	bfd.c	FUNCTION_4	CALL_4
0x40002d8	    0x488b34c50000	                  mov rsi, qword [rax*8]	       574	bfd.c	FUNCTION_4	CALL_4
0x40002e0	      0xe800000000	                          call 0x40002e5	       574	bfd.c	FUNCTION_4	CALL_4
0x40002e5	          0x4889c5	                            mov rbp, rax	       574	bfd.c	FUNCTION_4	CALL_4
0x40002e8	    0x488b3d000000	            mov rdi, qword [0x040002ef] 	        97	stdio2.h	CALL_31
0x40002ef	          0x4989e8	                             mov r8, rbp	        97	stdio2.h	CALL_31
0x40002f2	          0x4889d9	                            mov rcx, rbx	        97	stdio2.h	CALL_31
0x40002f5	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x40002fa	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x40002ff	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4000301	      0xe800000000	                          call 0x4000306	        97	stdio2.h	CALL_31
0x4000306	      0xe977ffffff	                           jmp 0x4000282	        97	stdio2.h	CALL_31
0x400030b	       0xf1f440000	                   nop dword [rax + rax]	        97	stdio2.h	CALL_31
0x4000310	    0x8b0500000000	            mov eax, dword [0x04000316] 	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x4000316	          0x83f814	                           cmp eax, 0x14	       555	bfd.c	FUNCTION_4	IF_1
0x4000319	     0xf84c1010000	                            je 0x40004e0	       555	bfd.c	FUNCTION_4	IF_1
0x400031f	          0x83f801	                              cmp eax, 1	       568	bfd.c	FUNCTION_4	IF_3
0x4000322	     0xf847c010000	                            je 0x40004a4	       568	bfd.c	FUNCTION_4	IF_3
0x4000328	          0x83f815	                           cmp eax, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x400032b	      0xba15000000	                           mov edx, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x4000330	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_4
0x4000335	        0x480f47c2	                          cmova rax, rdx	       574	bfd.c	FUNCTION_4	CALL_4
0x4000339	      0xba05000000	                              mov edx, 5	       574	bfd.c	FUNCTION_4	CALL_4
0x400033e	          0x4989e4	                            mov r12, rsp	       574	bfd.c	FUNCTION_4	CALL_4
0x4000341	    0x488b34c50000	                  mov rsi, qword [rax*8]	       574	bfd.c	FUNCTION_4	CALL_4
0x4000349	      0xe800000000	                          call 0x400034e	       574	bfd.c	FUNCTION_4	CALL_4
0x400034e	    0x488b2d000000	            mov rbp, qword [0x04000355] 	       574	bfd.c	FUNCTION_4	CALL_4
0x4000355	          0x4889c3	                            mov rbx, rax	       574	bfd.c	FUNCTION_4	CALL_4
0x4000358	        0x488b6d00	                    mov rbp, qword [rbp]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400035c	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000361	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000366	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400036b	      0xe800000000	                          call 0x4000370	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000370	          0x4989d8	                             mov r8, rbx	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000373	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000376	          0x4889e9	                            mov rcx, rbp	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000379	            0x31c0	                            xor eax, eax	       178	stdio2.h	FUNCTION_51	CALL_1
0x400037b	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000380	          0x4c89e7	                            mov rdi, r12	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000383	      0xe800000000	                          call 0x4000388	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000388	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400038b	      0x480f451c24	                 cmovne rbx, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000390	      0xe9d2feffff	                           jmp 0x4000267	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000395	           0xf1f00	                         nop dword [rax]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000398	    0x8b0500000000	            mov eax, dword [0x0400039e] 	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x400039e	          0x83f814	                           cmp eax, 0x14	       555	bfd.c	FUNCTION_4	IF_1
0x40003a1	     0xf848d000000	                            je 0x4000434	       555	bfd.c	FUNCTION_4	IF_1
0x40003a7	          0x83f801	                              cmp eax, 1	       568	bfd.c	FUNCTION_4	IF_3
0x40003aa	     0xf8412010000	                            je 0x40004c2	       568	bfd.c	FUNCTION_4	IF_3
0x40003b0	          0x83f815	                           cmp eax, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x40003b3	      0xba15000000	                           mov edx, 0x15	       574	bfd.c	FUNCTION_4	CALL_4
0x40003b8	      0xbf00000000	                              mov edi, 0	       574	bfd.c	FUNCTION_4	CALL_4
0x40003bd	        0x480f47c2	                          cmova rax, rdx	       574	bfd.c	FUNCTION_4	CALL_4
0x40003c1	      0xba05000000	                              mov edx, 5	       574	bfd.c	FUNCTION_4	CALL_4
0x40003c6	          0x4989e4	                            mov r12, rsp	       574	bfd.c	FUNCTION_4	CALL_4
0x40003c9	    0x488b34c50000	                  mov rsi, qword [rax*8]	       574	bfd.c	FUNCTION_4	CALL_4
0x40003d1	      0xe800000000	                          call 0x40003d6	       574	bfd.c	FUNCTION_4	CALL_4
0x40003d6	    0x4c8b2d000000	            mov r13, qword [0x040003dd] 	       574	bfd.c	FUNCTION_4	CALL_4
0x40003dd	          0x4889c5	                            mov rbp, rax	       574	bfd.c	FUNCTION_4	CALL_4
0x40003e0	        0x4d8b6d00	                    mov r13, qword [r13]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40003e4	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40003e9	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40003ee	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40003f3	      0xe800000000	                          call 0x40003f8	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40003f8	          0x4989e8	                             mov r8, rbp	       178	stdio2.h	FUNCTION_51	CALL_1
0x40003fb	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_51	CALL_1
0x40003fe	          0x4c89e9	                            mov rcx, r13	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000401	            0x31c0	                            xor eax, eax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000403	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000408	          0x4c89e7	                            mov rdi, r12	       178	stdio2.h	FUNCTION_51	CALL_1
0x400040b	      0xe800000000	                          call 0x4000410	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000410	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000413	      0x480f452c24	                 cmovne rbp, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000418	      0xe9cbfeffff	                           jmp 0x40002e8	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400041d	           0xf1f00	                         nop dword [rax]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000420	      0xe800000000	                          call 0x4000425	       569	bfd.c	FUNCTION_4	CALL_3
0x4000425	            0x8b38	                    mov edi, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_3
0x4000427	      0xe800000000	                          call 0x400042c	       569	bfd.c	FUNCTION_4	CALL_3
0x400042c	          0x4889c3	                            mov rbx, rax	       569	bfd.c	FUNCTION_4	CALL_3
0x400042f	      0xe933feffff	                           jmp 0x4000267	       569	bfd.c	FUNCTION_4	CALL_3
0x4000434	      0xbf14000000	                           mov edi, 0x14	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x4000439	          0x4989e4	                            mov r12, rsp	       178	stdio2.h	FUNCTION_51	CALL_1
0x400043c	      0xe800000000	                          call 0x4000441	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x4000441	    0x4c8b2d000000	            mov r13, qword [0x04000448] 	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000448	          0x4889c5	                            mov rbp, rax	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x400044b	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000450	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000455	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400045a	        0x4d8b7500	                    mov r14, qword [r13]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400045e	      0xe800000000	                          call 0x4000463	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000463	          0x4989e8	                             mov r8, rbp	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000466	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000469	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_51	CALL_1
0x400046e	            0x31c0	                            xor eax, eax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000470	          0x4c89f1	                            mov rcx, r14	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000473	          0x4889e7	                            mov rdi, rsp	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000476	      0xe800000000	                          call 0x400047b	       178	stdio2.h	FUNCTION_51	CALL_1
0x400047b	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400047e	     0xf845cffffff	                            je 0x40003e0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000484	        0x488b2c24	                    mov rbp, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000488	      0xe953ffffff	                           jmp 0x40003e0	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400048d	           0xf1f00	                         nop dword [rax]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000490	      0xe800000000	                          call 0x4000495	       569	bfd.c	FUNCTION_4	CALL_3
0x4000495	            0x8b38	                    mov edi, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_3
0x4000497	      0xe800000000	                          call 0x400049c	       569	bfd.c	FUNCTION_4	CALL_3
0x400049c	          0x4889c5	                            mov rbp, rax	       569	bfd.c	FUNCTION_4	CALL_3
0x400049f	      0xe944feffff	                           jmp 0x40002e8	       569	bfd.c	FUNCTION_4	CALL_3
0x40004a4	      0xe800000000	                          call 0x40004a9	       569	bfd.c	FUNCTION_4	CALL_3
0x40004a9	            0x8b38	                    mov edi, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_3
0x40004ab	          0x4989e4	                            mov r12, rsp	       569	bfd.c	FUNCTION_4	CALL_3
0x40004ae	      0xe800000000	                          call 0x40004b3	       569	bfd.c	FUNCTION_4	CALL_3
0x40004b3	    0x488b2d000000	            mov rbp, qword [0x040004ba] 	       569	bfd.c	FUNCTION_4	CALL_3
0x40004ba	          0x4889c3	                            mov rbx, rax	       569	bfd.c	FUNCTION_4	CALL_3
0x40004bd	      0xe996feffff	                           jmp 0x4000358	       569	bfd.c	FUNCTION_4	CALL_3
0x40004c2	      0xe800000000	                          call 0x40004c7	       569	bfd.c	FUNCTION_4	CALL_3
0x40004c7	            0x8b38	                    mov edi, dword [rax]	       569	bfd.c	FUNCTION_4	CALL_3
0x40004c9	          0x4989e4	                            mov r12, rsp	       569	bfd.c	FUNCTION_4	CALL_3
0x40004cc	      0xe800000000	                          call 0x40004d1	       569	bfd.c	FUNCTION_4	CALL_3
0x40004d1	    0x4c8b2d000000	            mov r13, qword [0x040004d8] 	       569	bfd.c	FUNCTION_4	CALL_3
0x40004d8	          0x4889c5	                            mov rbp, rax	       569	bfd.c	FUNCTION_4	CALL_3
0x40004db	      0xe900ffffff	                           jmp 0x40003e0	       569	bfd.c	FUNCTION_4	CALL_3
0x40004e0	      0xbf14000000	                           mov edi, 0x14	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40004e5	          0x4989e4	                            mov r12, rsp	       178	stdio2.h	FUNCTION_51	CALL_1
0x40004e8	      0xe800000000	                          call 0x40004ed	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40004ed	    0x488b2d000000	            mov rbp, qword [0x040004f4] 	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40004f4	          0x4889c3	                            mov rbx, rax	       558	bfd.c	FUNCTION_4	IF_1	CALL_1
0x40004f7	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x40004fc	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000501	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000506	        0x4c8b6d00	                    mov r13, qword [rbp]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400050a	      0xe800000000	                          call 0x400050f	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400050f	          0x4989d8	                             mov r8, rbx	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000512	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000515	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_51	CALL_1
0x400051a	            0x31c0	                            xor eax, eax	       178	stdio2.h	FUNCTION_51	CALL_1
0x400051c	          0x4c89e9	                            mov rcx, r13	       178	stdio2.h	FUNCTION_51	CALL_1
0x400051f	          0x4889e7	                            mov rdi, rsp	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000522	      0xe800000000	                          call 0x4000527	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000527	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400052a	            0x7404	                            je 0x4000530	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400052c	        0x488b1c24	                    mov rbx, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000530	        0x4c8b6d00	                    mov r13, qword [rbp]	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000534	      0xba05000000	                              mov edx, 5	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000539	      0xbe00000000	                              mov esi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x400053e	      0xbf00000000	                              mov edi, 0	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000543	      0xe800000000	                          call 0x4000548	       560	bfd.c	FUNCTION_4	IF_1	IF_2	CALL_2
0x4000548	          0x4989d8	                             mov r8, rbx	       178	stdio2.h	FUNCTION_51	CALL_1
0x400054b	          0x4889c2	                            mov rdx, rax	       178	stdio2.h	FUNCTION_51	CALL_1
0x400054e	          0x4c89e9	                            mov rcx, r13	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000551	            0x31c0	                            xor eax, eax	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000553	      0xbe01000000	                              mov esi, 1	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000558	          0x4c89e7	                            mov rdi, r12	       178	stdio2.h	FUNCTION_51	CALL_1
0x400055b	      0xe800000000	                          call 0x4000560	       178	stdio2.h	FUNCTION_51	CALL_1
0x4000560	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000563	      0x480f451c24	                 cmovne rbx, qword [rsp]	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x4000568	      0xe9ebfdffff	                           jmp 0x4000358	       562	bfd.c	FUNCTION_4	IF_1	IF_2
0x400056d	      0xe800000000	                          call 0x4000572	       601	bfd.c	FUNCTION_5
bfd_assert	ELSE,0:functions,0:CALL,1:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	19
0x4000770	            0x4154	                                push r12	      1426	bfd.c	FUNCTION_17
0x4000772	              0x55	                                push rbp	      1426	bfd.c	FUNCTION_17
0x4000773	          0x4189f4	                           mov r12d, esi	      1426	bfd.c	FUNCTION_17
0x4000776	              0x53	                                push rbx	      1426	bfd.c	FUNCTION_17
0x4000777	    0x488b1d000000	            mov rbx, qword [0x0400077e] 	      1428	bfd.c	FUNCTION_17	CALL_1
0x400077e	          0x4889fd	                            mov rbp, rdi	      1426	bfd.c	FUNCTION_17
0x4000781	      0xba05000000	                              mov edx, 5	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000786	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x400078b	      0xbf00000000	                              mov edi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000790	      0xe800000000	                          call 0x4000795	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000795	          0x4489e1	                           mov ecx, r12d	      1428	bfd.c	FUNCTION_17	CALL_1
0x4000798	          0x4889ea	                            mov rdx, rbp	      1428	bfd.c	FUNCTION_17	CALL_1
0x400079b	          0x4889c7	                            mov rdi, rax	      1428	bfd.c	FUNCTION_17	CALL_1
0x400079e	          0x4889d8	                            mov rax, rbx	      1428	bfd.c	FUNCTION_17	CALL_1
0x40007a1	      0xbe00000000	                              mov esi, 0	      1428	bfd.c	FUNCTION_17	CALL_1
0x40007a6	              0x5b	                                 pop rbx	      1430	bfd.c	FUNCTION_17
0x40007a7	              0x5d	                                 pop rbp	      1430	bfd.c	FUNCTION_17
0x40007a8	            0x415c	                                 pop r12	      1430	bfd.c	FUNCTION_17
0x40007aa	            0xffe0	                                 jmp rax	      1428	bfd.c	FUNCTION_17	CALL_1
bfd_demangle	ELSE,0:functions,0:CALL,16:SWITCH,0:IF,10:FOR,0:WHILE,1:DO,0	169
0x4001a70	            0x4157	                                push r15	      2219	bfd.c	FUNCTION_38
0x4001a72	            0x4156	                                push r14	      2219	bfd.c	FUNCTION_38
0x4001a74	            0x4155	                                push r13	      2219	bfd.c	FUNCTION_38
0x4001a76	            0x4154	                                push r12	      2219	bfd.c	FUNCTION_38
0x4001a78	          0x4189d5	                           mov r13d, edx	      2219	bfd.c	FUNCTION_38
0x4001a7b	              0x55	                                push rbp	      2219	bfd.c	FUNCTION_38
0x4001a7c	              0x53	                                push rbx	      2219	bfd.c	FUNCTION_38
0x4001a7d	          0x4889f3	                            mov rbx, rsi	      2219	bfd.c	FUNCTION_38
0x4001a80	        0x4883ec18	                           sub rsp, 0x18	      2219	bfd.c	FUNCTION_38
0x4001a84	          0x4885ff	                           test rdi, rdi	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001a87	           0xfb606	                   movzx eax, byte [rsi]	      2226	bfd.c	FUNCTION_38
0x4001a8a	     0xf8421010000	                            je 0x4001bb1	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001a90	            0x84c0	                             test al, al	      2226	bfd.c	FUNCTION_38
0x4001a92	     0xf8510010000	                           jne 0x4001ba8	      2226	bfd.c	FUNCTION_38
0x4001a98	          0x4889f5	                            mov rbp, rsi	      2226	bfd.c	FUNCTION_38
0x4001a9b	          0x4989f7	                            mov r15, rsi	      2226	bfd.c	FUNCTION_38
0x4001a9e	    0x48c704240000	                      mov qword [rsp], 0	      2226	bfd.c	FUNCTION_38
0x4001aa6	    0xc74424080000	                  mov dword [rsp + 8], 0	      2226	bfd.c	FUNCTION_38
0x4001aae	      0xbe40000000	                           mov esi, 0x40	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001ab3	          0x4c89ff	                            mov rdi, r15	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001ab6	      0xe800000000	                          call 0x4001abb	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001abb	          0x4885c0	                           test rax, rax	      2243	bfd.c	FUNCTION_38	IF_2
0x4001abe	          0x4989c4	                            mov r12, rax	      2242	bfd.c	FUNCTION_38	CALL_2
0x4001ac1	     0xf8499010000	                            je 0x4001c60	      2243	bfd.c	FUNCTION_38	IF_2
0x4001ac7	          0x4829e8	                            sub rax, rbp	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001aca	        0x488d7801	                      lea rdi, [rax + 1]	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001ace	          0x4889c5	                            mov rbp, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001ad1	      0xe800000000	                          call 0x4001ad6	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001ad6	          0x4885c0	                           test rax, rax	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001ad9	          0x4989c6	                            mov r14, rax	      2245	bfd.c	FUNCTION_38	IF_2	CALL_3
0x4001adc	     0xf8476010000	                            je 0x4001c58	      2246	bfd.c	FUNCTION_38	IF_2	IF_3
0x4001ae2	          0x4889ea	                            mov rdx, rbp	        53	string3.h	FUNCTION_61	CALL_3
0x4001ae5	          0x4c89fe	                            mov rsi, r15	        53	string3.h	FUNCTION_61	CALL_3
0x4001ae8	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_61	CALL_3
0x4001aeb	      0xe800000000	                          call 0x4001af0	        53	string3.h	FUNCTION_61	CALL_3
0x4001af0	          0x4489ee	                           mov esi, r13d	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001af3	          0x4c89f7	                            mov rdi, r14	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001af6	      0x41c6042e00	                 mov byte [r14 + rbp], 0	      2249	bfd.c	FUNCTION_38	IF_2
0x4001afb	      0xe800000000	                          call 0x4001b00	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001b00	          0x4c89f7	                            mov rdi, r14	      2256	bfd.c	FUNCTION_38	CALL_6
0x4001b03	          0x4989c5	                            mov r13, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001b06	      0xe800000000	                          call 0x4001b0b	      2256	bfd.c	FUNCTION_38	CALL_6
0x4001b0b	          0x4d85ed	                           test r13, r13	      2258	bfd.c	FUNCTION_38	IF_5
0x4001b0e	     0xf84fc000000	                            je 0x4001c10	      2258	bfd.c	FUNCTION_38	IF_5
0x4001b14	          0x4c89ef	                            mov rdi, r13	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001b17	      0xe800000000	                          call 0x4001b1c	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001b1c	          0x4989c7	                            mov r15, rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001b1f	          0x4c89e7	                            mov rdi, r12	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001b22	      0xe800000000	                          call 0x4001b27	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001b27	        0x4c8b3424	                    mov r14, qword [rsp]	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b2b	        0x4883c001	                              add rax, 1	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001b2f	          0x4889c7	                            mov rdi, rax	      2282	bfd.c	FUNCTION_38	IF_8	CALL_11
0x4001b32	        0x48893c24	                    mov qword [rsp], rdi	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b36	          0x4c89f0	                            mov rax, r14	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b39	          0x4c01f8	                            add rax, r15	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b3c	          0x4801c7	                            add rdi, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b3f	      0x4889442408	                mov qword [rsp + 8], rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b44	      0xe800000000	                          call 0x4001b49	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b49	          0x4885c0	                           test rax, rax	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x4001b4c	          0x4889c5	                            mov rbp, rax	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b4f	            0x7436	                            je 0x4001b87	      2284	bfd.c	FUNCTION_38	IF_8	IF_10
0x4001b51	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_61	CALL_3
0x4001b54	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_61	CALL_3
0x4001b57	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_61	CALL_3
0x4001b5a	      0xe800000000	                          call 0x4001b5f	        53	string3.h	FUNCTION_61	CALL_3
0x4001b5f	          0x4c89f7	                            mov rdi, r14	        53	string3.h	FUNCTION_61	CALL_3
0x4001b62	          0x4c89fa	                            mov rdx, r15	        53	string3.h	FUNCTION_61	CALL_3
0x4001b65	          0x4c89ee	                            mov rsi, r13	        53	string3.h	FUNCTION_61	CALL_3
0x4001b68	          0x4801ef	                            add rdi, rbp	        53	string3.h	FUNCTION_61	CALL_3
0x4001b6b	      0xe800000000	                          call 0x4001b70	        53	string3.h	FUNCTION_61	CALL_3
0x4001b70	      0x488b442408	                mov rax, qword [rsp + 8]	        53	string3.h	FUNCTION_61	CALL_3
0x4001b75	        0x488b1424	                    mov rdx, qword [rsp]	        53	string3.h	FUNCTION_61	CALL_3
0x4001b79	          0x4c89e6	                            mov rsi, r12	        53	string3.h	FUNCTION_61	CALL_3
0x4001b7c	          0x4801e8	                            add rax, rbp	        53	string3.h	FUNCTION_61	CALL_3
0x4001b7f	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_61	CALL_3
0x4001b82	      0xe800000000	                          call 0x4001b87	        53	string3.h	FUNCTION_61	CALL_3
0x4001b87	          0x4c89ef	                            mov rdi, r13	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x4001b8a	      0xe800000000	                          call 0x4001b8f	      2290	bfd.c	FUNCTION_38	IF_8	CALL_16
0x4001b8f	          0x4889e8	                            mov rax, rbp	      2283	bfd.c	FUNCTION_38	IF_8	CALL_12
0x4001b92	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x4001b96	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x4001b97	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x4001b98	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x4001b9a	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x4001b9c	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x4001b9e	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x4001ba0	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x4001ba1	     0xf1f80000000	                         nop dword [rax]	      2295	bfd.c	FUNCTION_38
0x4001ba8	        0x488b5708	                mov rdx, qword [rdi + 8]	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001bac	          0x3a421c	               cmp al, byte [rdx + 0x1c]	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001baf	            0x7447	                            je 0x4001bf8	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001bb1	    0xc74424080000	                  mov dword [rsp + 8], 0	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001bb9	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bbb	            0x7408	                            je 0x4001bc5	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bbd	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bbf	     0xf85dc000000	                           jne 0x4001ca1	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bc5	          0x4989df	                            mov r15, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bc8	     0xf1f84000000	                   nop dword [rax + rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bd0	        0x4983c701	                              add r15, 1	      2237	bfd.c	FUNCTION_38	WHILE_1
0x4001bd4	        0x410fb607	                   movzx eax, byte [r15]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bd8	            0x3c2e	                            cmp al, 0x2e	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bda	            0x74f4	                            je 0x4001bd0	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bdc	            0x3c24	                            cmp al, 0x24	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bde	            0x74f0	                            je 0x4001bd0	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001be0	          0x4c89f8	                            mov rax, r15	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001be3	          0x4c89fd	                            mov rbp, r15	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001be6	          0x4829d8	                            sub rax, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001be9	        0x48890424	                    mov qword [rsp], rax	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bed	      0xe9bcfeffff	                           jmp 0x4001aae	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bf2	    0x660f1f440000	                    nop word [rax + rax]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bf8	         0xfb64601	               movzx eax, byte [rsi + 1]	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001bfc	        0x4883c301	                              add rbx, 1	      2229	bfd.c	FUNCTION_38	IF_1
0x4001c00	    0xc74424080100	                  mov dword [rsp + 8], 1	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001c08	            0xebaf	                           jmp 0x4001bb9	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001c0a	    0x660f1f440000	                    nop word [rax + rax]	      2227	bfd.c	FUNCTION_38	CALL_1
0x4001c10	        0x8b442408	                mov eax, dword [rsp + 8]	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001c14	            0x85c0	                           test eax, eax	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001c16	            0x7440	                            je 0x4001c58	      2260	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001c18	          0x4889df	                            mov rdi, rbx	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4001c1b	      0xe800000000	                          call 0x4001c20	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4001c20	        0x4c8d6001	                      lea r12, [rax + 1]	      2262	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_7
0x4001c24	          0x4c89e7	                            mov rdi, r12	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4001c27	      0xe800000000	                          call 0x4001c2c	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4001c2c	          0x4885c0	                           test rax, rax	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001c2f	          0x4889c5	                            mov rbp, rax	      2263	bfd.c	FUNCTION_38	IF_5	IF_6	CALL_8
0x4001c32	            0x7424	                            je 0x4001c58	      2264	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001c34	          0x4c89e2	                            mov rdx, r12	        53	string3.h	FUNCTION_61	CALL_3
0x4001c37	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_61	CALL_3
0x4001c3a	          0x4889c7	                            mov rdi, rax	        53	string3.h	FUNCTION_61	CALL_3
0x4001c3d	      0xe800000000	                          call 0x4001c42	        53	string3.h	FUNCTION_61	CALL_3
0x4001c42	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x4001c46	          0x4889e8	                            mov rax, rbp	      2267	bfd.c	FUNCTION_38	IF_5	IF_6
0x4001c49	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x4001c4a	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x4001c4b	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x4001c4d	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x4001c4f	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x4001c51	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x4001c53	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x4001c54	         0xf1f4000	                         nop dword [rax]	      2295	bfd.c	FUNCTION_38
0x4001c58	            0x31c0	                            xor eax, eax	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001c5a	      0xe933ffffff	                           jmp 0x4001b92	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001c5f	              0x90	                                     nop	      2265	bfd.c	FUNCTION_38	IF_5	IF_6	IF_7
0x4001c60	          0x4489ee	                           mov esi, r13d	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001c63	          0x4c89ff	                            mov rdi, r15	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001c66	      0xe800000000	                          call 0x4001c6b	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001c6b	          0x4885c0	                           test rax, rax	      2258	bfd.c	FUNCTION_38	IF_5
0x4001c6e	          0x4989c5	                            mov r13, rax	      2253	bfd.c	FUNCTION_38	CALL_5
0x4001c71	            0x749d	                            je 0x4001c10	      2258	bfd.c	FUNCTION_38	IF_5
0x4001c73	      0x48833c2400	                      cmp qword [rsp], 0	      2273	bfd.c	FUNCTION_38	IF_8
0x4001c78	            0x7512	                           jne 0x4001c8c	      2273	bfd.c	FUNCTION_38	IF_8
0x4001c7a	        0x4883c418	                           add rsp, 0x18	      2295	bfd.c	FUNCTION_38
0x4001c7e	          0x4c89e8	                            mov rax, r13	      2295	bfd.c	FUNCTION_38
0x4001c81	              0x5b	                                 pop rbx	      2295	bfd.c	FUNCTION_38
0x4001c82	              0x5d	                                 pop rbp	      2295	bfd.c	FUNCTION_38
0x4001c83	            0x415c	                                 pop r12	      2295	bfd.c	FUNCTION_38
0x4001c85	            0x415d	                                 pop r13	      2295	bfd.c	FUNCTION_38
0x4001c87	            0x415e	                                 pop r14	      2295	bfd.c	FUNCTION_38
0x4001c89	            0x415f	                                 pop r15	      2295	bfd.c	FUNCTION_38
0x4001c8b	              0xc3	                                     ret	      2295	bfd.c	FUNCTION_38
0x4001c8c	          0x4c89ef	                            mov rdi, r13	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001c8f	      0xe800000000	                          call 0x4001c94	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001c94	          0x4989c7	                            mov r15, rax	      2279	bfd.c	FUNCTION_38	IF_8	CALL_10
0x4001c97	      0x4d8d640500	                    lea r12, [r13 + rax]	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4001c9c	      0xe97efeffff	                           jmp 0x4001b1f	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4001ca1	          0x4889dd	                            mov rbp, rbx	      2281	bfd.c	FUNCTION_38	IF_8	IF_9
0x4001ca4	          0x4989df	                            mov r15, rbx	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001ca7	    0x48c704240000	                      mov qword [rsp], 0	      2236	bfd.c	FUNCTION_38	WHILE_1
0x4001caf	      0xe9fafdffff	                           jmp 0x4001aae	      2236	bfd.c	FUNCTION_38	WHILE_1
bfd_set_start_address	ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	3
0x4001520	    0x4889b7a80000	             mov qword [rdi + 0xa8], rsi	      1550	bfd.c	FUNCTION_21
0x4001527	      0xb801000000	                              mov eax, 1	      1552	bfd.c	FUNCTION_21
0x400152c	              0xc3	                                     ret	      1552	bfd.c	FUNCTION_21
bfd_set_assert_handler	ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	3
0x4000670	    0x488b05000000	            mov rax, qword [0x04000677] 	      1283	bfd.c	FUNCTION_13
0x4000677	    0x48893d000000	            mov qword [0x0400067e], rdi 	      1284	bfd.c	FUNCTION_13
0x400067e	              0xc3	                                     ret	      1286	bfd.c	FUNCTION_13
bfd_check_compression_header	ELSE,1:functions,0:CALL,9:SWITCH,0:IF,3:FOR,0:WHILE,0:DO,0	63
0x4001df0	        0x488b4708	                mov rax, qword [rdi + 8]	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001df4	        0x83780805	                  cmp dword [rax + 8], 5	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001df8	            0x7406	                            je 0x4001e00	      2386	bfd.c	FUNCTION_40	IF_1	CALL_1
0x4001dfa	            0x31c0	                            xor eax, eax	      2413	bfd.c	FUNCTION_40
0x4001dfc	              0xc3	                                     ret	      2414	bfd.c	FUNCTION_40
0x4001dfd	           0xf1f00	                         nop dword [rax]	      2414	bfd.c	FUNCTION_40
0x4001e00	    0x4c8b82e00000	              mov r8, qword [rdx + 0xe0]	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001e07	      0x41f6400908	                   test byte [r8 + 9], 8	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001e0c	            0x74ec	                            je 0x4001dfa	      2387	bfd.c	FUNCTION_40	IF_1	CALL_2
0x4001e0e	            0x4157	                                push r15	      2385	bfd.c	FUNCTION_40
0x4001e10	            0x4156	                                push r14	      2385	bfd.c	FUNCTION_40
0x4001e12	            0x4155	                                push r13	      2385	bfd.c	FUNCTION_40
0x4001e14	            0x4154	                                push r12	      2385	bfd.c	FUNCTION_40
0x4001e16	          0x4989d4	                            mov r12, rdx	      2385	bfd.c	FUNCTION_40
0x4001e19	              0x55	                                push rbp	      2385	bfd.c	FUNCTION_40
0x4001e1a	              0x53	                                push rbx	      2385	bfd.c	FUNCTION_40
0x4001e1b	          0x4889cd	                            mov rbp, rcx	      2385	bfd.c	FUNCTION_40
0x4001e1e	          0x4889fb	                            mov rbx, rdi	      2385	bfd.c	FUNCTION_40
0x4001e21	          0x4989f5	                            mov r13, rsi	      2385	bfd.c	FUNCTION_40
0x4001e24	          0x4889f7	                            mov rdi, rsi	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001e27	        0x4883ec08	                              sub rsp, 8	      2385	bfd.c	FUNCTION_40
0x4001e2b	    0x488b90680300	           mov rdx, qword [rax + 0x368] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001e32	    0x488b92000300	           mov rdx, qword [rdx + 0x300] 	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001e39	        0x807a0c01	                 cmp byte [rdx + 0xc], 1	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001e3d	            0x7451	                            je 0x4001e90	      2391	bfd.c	FUNCTION_40	IF_1	IF_2
0x4001e3f	          0xff5038	                 call qword [rax + 0x38]	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4001e42	          0x4189c7	                           mov r15d, eax	      2401	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_7
0x4001e45	        0x488b4308	                mov rax, qword [rbx + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001e49	        0x498d7d08	                      lea rdi, [r13 + 8]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001e4d	          0xff5020	                 call qword [rax + 0x20]	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001e50	          0x4989c6	                            mov r14, rax	      2402	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_8
0x4001e53	        0x488b4308	                mov rax, qword [rbx + 8]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001e57	        0x498d7d10	                   lea rdi, [r13 + 0x10]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001e5b	          0xff5020	                 call qword [rax + 0x20]	      2403	bfd.c	FUNCTION_40	IF_1	ELSE_1	CALL_9
0x4001e5e	        0x4183ff01	                             cmp r15d, 1	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e62	            0x7414	                            je 0x4001e78	      2405	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e64	            0x31c0	                            xor eax, eax	      2413	bfd.c	FUNCTION_40
0x4001e66	        0x4883c408	                              add rsp, 8	      2414	bfd.c	FUNCTION_40
0x4001e6a	              0x5b	                                 pop rbx	      2414	bfd.c	FUNCTION_40
0x4001e6b	              0x5d	                                 pop rbp	      2414	bfd.c	FUNCTION_40
0x4001e6c	            0x415c	                                 pop r12	      2414	bfd.c	FUNCTION_40
0x4001e6e	            0x415d	                                 pop r13	      2414	bfd.c	FUNCTION_40
0x4001e70	            0x415e	                                 pop r14	      2414	bfd.c	FUNCTION_40
0x4001e72	            0x415f	                                 pop r15	      2414	bfd.c	FUNCTION_40
0x4001e74	              0xc3	                                     ret	      2414	bfd.c	FUNCTION_40
0x4001e75	           0xf1f00	                         nop dword [rax]	      2414	bfd.c	FUNCTION_40
0x4001e78	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e7d	          0x41d3e7	                            shl r15d, cl	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e80	          0x4c39f8	                            cmp rax, r15	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e83	            0x75df	                           jne 0x4001e64	      2406	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e85	        0x4c897500	                    mov qword [rbp], r14	      2408	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e89	      0xb801000000	                              mov eax, 1	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e8e	            0xebd6	                           jmp 0x4001e66	      2409	bfd.c	FUNCTION_40	IF_1	IF_3
0x4001e90	          0xff5038	                 call qword [rax + 0x38]	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001e93	          0x4189c7	                           mov r15d, eax	      2394	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_4
0x4001e96	        0x488b4308	                mov rax, qword [rbx + 8]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001e9a	        0x498d7d04	                      lea rdi, [r13 + 4]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001e9e	          0xff5038	                 call qword [rax + 0x38]	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001ea1	          0x4989c6	                            mov r14, rax	      2395	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_5
0x4001ea4	        0x488b4308	                mov rax, qword [rbx + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001ea8	        0x498d7d08	                      lea rdi, [r13 + 8]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001eac	          0xff5038	                 call qword [rax + 0x38]	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
0x4001eaf	            0xebad	                           jmp 0x4001e5e	      2396	bfd.c	FUNCTION_40	IF_1	IF_2	CALL_6
bfd_canonicalize_reloc	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	11
0x40006c0	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1352	bfd.c	FUNCTION_15	IF_1
0x40006c4	          0x83e007	                              and eax, 7	      1352	bfd.c	FUNCTION_15	IF_1
0x40006c7	            0x3c01	                               cmp al, 1	      1352	bfd.c	FUNCTION_15	IF_1
0x40006c9	            0x7515	                           jne 0x40006e0	      1352	bfd.c	FUNCTION_15	IF_1
0x40006cb	        0x488b4708	                mov rax, qword [rdi + 8]	      1358	bfd.c	FUNCTION_15	CALL_2
0x40006cf	    0x488b80700200	           mov rax, qword [rax + 0x270] 	      1358	bfd.c	FUNCTION_15	CALL_2
0x40006d6	            0xffe0	                                 jmp rax	      1358	bfd.c	FUNCTION_15	CALL_2
0x40006d8	     0xf1f84000000	                   nop dword [rax + rax]	      1358	bfd.c	FUNCTION_15	CALL_2
0x40006e0	    0xc70500000000	               mov dword [0x040006ea], 5	       506	bfd.c	FUNCTION_2
0x40006ea	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1360	bfd.c	FUNCTION_15
0x40006f1	              0xc3	                                     ret	      1360	bfd.c	FUNCTION_15
bfd_get_sign_extend_vma	ELSE,0:functions,0:CALL,14:SWITCH,0:IF,3:FOR,0:WHILE,0:DO,0	71
0x4001400	        0x488b4708	                mov rax, qword [rdi + 8]	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001404	        0x83780805	                  cmp dword [rax + 8], 5	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x4001408	     0xf84f2000000	                            je 0x4001500	      1505	bfd.c	FUNCTION_20	IF_1	CALL_1
0x400140e	          0x488b10	                    mov rdx, qword [rax]	      1508	bfd.c	FUNCTION_20	CALL_3
0x4001411	      0xb909000000	                              mov ecx, 9	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001416	      0xbf00000000	                              mov edi, 0	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400141b	      0xb801000000	                              mov eax, 1	      1524	bfd.c	FUNCTION_20	IF_2
0x4001420	          0x4889d6	                            mov rsi, rdx	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001423	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001425	        0x400f97c6	                                seta sil	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001429	           0xf92c1	                                 setb cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400142c	          0x4038ce	                             cmp sil, cl	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x400142f	     0xf84bf000000	                            je 0x40014f4	      1515	bfd.c	FUNCTION_20	IF_2	CALL_4
0x4001435	      0xbf00000000	                              mov edi, 0	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400143a	      0xb908000000	                              mov ecx, 8	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400143f	          0x4889d6	                            mov rsi, rdx	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001442	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x4001444	     0xf84aa000000	                            je 0x40014f4	      1516	bfd.c	FUNCTION_20	IF_2	CALL_5
0x400144a	      0xbf00000000	                              mov edi, 0	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400144f	      0xb909000000	                              mov ecx, 9	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001454	          0x4889d6	                            mov rsi, rdx	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001457	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x4001459	     0xf8495000000	                            je 0x40014f4	      1517	bfd.c	FUNCTION_20	IF_2	CALL_6
0x400145f	      0xbf00000000	                              mov edi, 0	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001464	      0xb90a000000	                            mov ecx, 0xa	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001469	          0x4889d6	                            mov rsi, rdx	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x400146c	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x400146e	     0xf8480000000	                            je 0x40014f4	      1518	bfd.c	FUNCTION_20	IF_2	CALL_7
0x4001474	      0xbf00000000	                              mov edi, 0	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001479	      0xb90b000000	                            mov ecx, 0xb	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x400147e	          0x4889d6	                            mov rsi, rdx	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001481	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001483	            0x746f	                            je 0x40014f4	      1519	bfd.c	FUNCTION_20	IF_2	CALL_8
0x4001485	      0xbf00000000	                              mov edi, 0	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x400148a	      0xb914000000	                           mov ecx, 0x14	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x400148f	          0x4889d6	                            mov rsi, rdx	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001492	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001494	            0x745e	                            je 0x40014f4	      1520	bfd.c	FUNCTION_20	IF_2	CALL_9
0x4001496	      0xbf00000000	                              mov edi, 0	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x400149b	      0xb915000000	                           mov ecx, 0x15	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x40014a0	          0x4889d6	                            mov rsi, rdx	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x40014a3	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x40014a5	            0x744d	                            je 0x40014f4	      1521	bfd.c	FUNCTION_20	IF_2	CALL_10
0x40014a7	      0xbf00000000	                              mov edi, 0	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x40014ac	      0xb90f000000	                            mov ecx, 0xf	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x40014b1	          0x4889d6	                            mov rsi, rdx	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x40014b4	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x40014b6	            0x743c	                            je 0x40014f4	      1522	bfd.c	FUNCTION_20	IF_2	CALL_11
0x40014b8	      0xbf00000000	                              mov edi, 0	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x40014bd	      0xb912000000	                           mov ecx, 0x12	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x40014c2	          0x4889d6	                            mov rsi, rdx	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x40014c5	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x40014c7	            0x742b	                            je 0x40014f4	      1523	bfd.c	FUNCTION_20	IF_2	CALL_12
0x40014c9	          0x4889d6	                            mov rsi, rdx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014cc	      0xbf00000000	                              mov edi, 0	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014d1	      0xb906000000	                              mov ecx, 6	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014d6	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014d8	           0xf97c0	                                 seta al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014db	           0xf92c2	                                 setb dl	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014de	            0x29d0	                            sub eax, edx	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014e0	           0xfbec0	                           movsx eax, al	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014e3	            0x85c0	                           test eax, eax	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014e5	            0x740d	                            je 0x40014f4	      1526	bfd.c	FUNCTION_20	IF_3	CALL_13
0x40014e7	    0xc70500000000	               mov dword [0x040014f1], 3	       506	bfd.c	FUNCTION_2
0x40014f1	          0x83c8ff	                      or eax, 0xffffffff	      1530	bfd.c	FUNCTION_20
0x40014f4	            0xf3c3	                                     ret	      1531	bfd.c	FUNCTION_20
0x40014f6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1531	bfd.c	FUNCTION_20
0x4001500	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001507	     0xfb680890300	          movzx eax, byte [rax + 0x389] 	      1506	bfd.c	FUNCTION_20	CALL_2
0x400150e	          0x83e001	                              and eax, 1	      1506	bfd.c	FUNCTION_20	CALL_2
0x4001511	              0xc3	                                     ret	      1506	bfd.c	FUNCTION_20	CALL_2
bfd_sprintf_vma	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	33
0x40017e0	              0x55	                                push rbp	      1994	bfd.c	FUNCTION_30
0x40017e1	              0x53	                                push rbx	      1994	bfd.c	FUNCTION_30
0x40017e2	          0x4889d5	                            mov rbp, rdx	      1994	bfd.c	FUNCTION_30
0x40017e5	          0x4889f3	                            mov rbx, rsi	      1994	bfd.c	FUNCTION_30
0x40017e8	        0x4883ec08	                              sub rsp, 8	      1994	bfd.c	FUNCTION_30
0x40017ec	        0x488b4708	                mov rax, qword [rdi + 8]	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x40017f0	        0x83780805	                  cmp dword [rax + 8], 5	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x40017f4	            0x7442	                            je 0x4001838	      1978	bfd.c	FUNCTION_29	IF_1	CALL_1
0x40017f6	      0xe800000000	                          call 0x40017fb	      1985	bfd.c	FUNCTION_29	CALL_3
0x40017fb	          0x83f820	                           cmp eax, 0x20	      1985	bfd.c	FUNCTION_29	CALL_3
0x40017fe	           0xf96c0	                                setbe al	      1985	bfd.c	FUNCTION_29	CALL_3
0x4001801	           0xfb6c0	                           movzx eax, al	      1985	bfd.c	FUNCTION_29	CALL_3
0x4001804	            0x85c0	                           test eax, eax	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4001806	          0x4189e8	                            mov r8d, ebp	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001809	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_44	CALL_1
0x400180e	            0x7508	                           jne 0x4001818	      1996	bfd.c	FUNCTION_30	IF_1	CALL_1
0x4001810	          0x4989e8	                             mov r8, rbp	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001813	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001818	        0x4883c408	                              add rsp, 8	      2003	bfd.c	FUNCTION_30
0x400181c	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_44	CALL_1
0x400181f	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001826	              0x5b	                                 pop rbx	      2003	bfd.c	FUNCTION_30
0x4001827	              0x5d	                                 pop rbp	      2003	bfd.c	FUNCTION_30
0x4001828	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_44	CALL_1
0x400182d	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_44	CALL_1
0x400182f	      0xe900000000	                           jmp 0x4001834	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001834	         0xf1f4000	                         nop dword [rax]	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001838	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1981	bfd.c	FUNCTION_29	IF_1
0x400183f	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1981	bfd.c	FUNCTION_29	IF_1
0x4001846	        0x80780c01	                 cmp byte [rax + 0xc], 1	      1981	bfd.c	FUNCTION_29	IF_1
0x400184a	           0xf94c0	                                 sete al	      1981	bfd.c	FUNCTION_29	IF_1
0x400184d	           0xfb6c0	                           movzx eax, al	      1981	bfd.c	FUNCTION_29	IF_1
0x4001850	            0xebb2	                           jmp 0x4001804	      1981	bfd.c	FUNCTION_29	IF_1
bfd_emul_set_commonpagesize	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	23
0x4001a20	              0x53	                                push rbx	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4001a21	          0x4889f3	                            mov rbx, rsi	      2192	bfd.c	ELSE_1	FUNCTION_37
0x4001a24	            0x31f6	                            xor esi, esi	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4001a26	      0xe800000000	                          call 0x4001a2b	      2195	bfd.c	ELSE_1	FUNCTION_37	CALL_1
0x4001a2b	          0x4885c0	                           test rax, rax	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001a2e	            0x7436	                            je 0x4001a66	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001a30	          0x4889c2	                            mov rdx, rax	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001a33	            0xeb14	                           jmp 0x4001a49	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001a35	           0xf1f00	                         nop dword [rax]	      2196	bfd.c	ELSE_1	FUNCTION_37	IF_1
0x4001a38	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x4001a3f	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a42	            0x7422	                            je 0x4001a66	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a44	          0x4839d0	                            cmp rax, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a47	            0x741d	                            je 0x4001a66	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a49	        0x837a0805	                  cmp dword [rdx + 8], 5	      2103	bfd.c	FUNCTION_34	IF_1
0x4001a4d	            0x75e9	                           jne 0x4001a38	      2103	bfd.c	FUNCTION_34	IF_1
0x4001a4f	    0x488b8a680300	           mov rcx, qword [rdx + 0x368] 	      2108	bfd.c	FUNCTION_34	IF_1
0x4001a56	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x4001a5d	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a60	        0x48895920	             mov qword [rcx + 0x20], rbx	      2108	bfd.c	FUNCTION_34	IF_1
0x4001a64	            0x75de	                           jne 0x4001a44	      2112	bfd.c	FUNCTION_34	IF_2
0x4001a66	              0x5b	                                 pop rbx	      2200	bfd.c	ELSE_1	FUNCTION_37
0x4001a67	              0xc3	                                     ret	      2200	bfd.c	ELSE_1	FUNCTION_37
bfd_get_gp_size	ELSE,1:functions,0:CALL,2:SWITCH,0:IF,3:FOR,0:WHILE,0:DO,0	19
0x4001530	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1570	bfd.c	FUNCTION_22	IF_1
0x4001534	            0x31c0	                            xor eax, eax	      1577	bfd.c	FUNCTION_22
0x4001536	          0x83e207	                              and edx, 7	      1570	bfd.c	FUNCTION_22	IF_1
0x4001539	          0x80fa01	                               cmp dl, 1	      1570	bfd.c	FUNCTION_22	IF_1
0x400153c	            0x7402	                            je 0x4001540	      1570	bfd.c	FUNCTION_22	IF_1
0x400153e	            0xf3c3	                                     ret	      1578	bfd.c	FUNCTION_22
0x4001540	        0x488b5708	                mov rdx, qword [rdi + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001544	          0x8b5208	                mov edx, dword [rdx + 8]	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x4001547	          0x83fa03	                              cmp edx, 3	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x400154a	            0x7414	                            je 0x4001560	      1572	bfd.c	FUNCTION_22	IF_1	IF_2
0x400154c	          0x83fa05	                              cmp edx, 5	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x400154f	            0x75ed	                           jne 0x400153e	      1574	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001551	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x4001558	    0x8b80f8020000	           mov eax, dword [rax + 0x2f8] 	      1575	bfd.c	FUNCTION_22	IF_1	ELSE_1	IF_3
0x400155e	              0xc3	                                     ret	      1578	bfd.c	FUNCTION_22
0x400155f	              0x90	                                     nop	      1578	bfd.c	FUNCTION_22
0x4001560	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x4001567	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
0x400156a	              0xc3	                                     ret	      1573	bfd.c	FUNCTION_22	IF_1	CALL_1
bfd_set_error_handler	ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	3
0x4000650	    0x488b05000000	            mov rax, qword [0x04000657] 	      1198	bfd.c	FUNCTION_10
0x4000657	    0x48893d000000	            mov qword [0x0400065e], rdi 	      1199	bfd.c	FUNCTION_10
0x400065e	              0xc3	                                     ret	      1201	bfd.c	FUNCTION_10
bfd_emul_set_maxpagesize	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	23
0x4001980	              0x53	                                push rbx	      2132	bfd.c	FUNCTION_35
0x4001981	          0x4889f3	                            mov rbx, rsi	      2132	bfd.c	FUNCTION_35
0x4001984	            0x31f6	                            xor esi, esi	      2135	bfd.c	FUNCTION_35	CALL_1
0x4001986	      0xe800000000	                          call 0x400198b	      2135	bfd.c	FUNCTION_35	CALL_1
0x400198b	          0x4885c0	                           test rax, rax	      2136	bfd.c	FUNCTION_35	IF_1
0x400198e	            0x7436	                            je 0x40019c6	      2136	bfd.c	FUNCTION_35	IF_1
0x4001990	          0x4889c2	                            mov rdx, rax	      2136	bfd.c	FUNCTION_35	IF_1
0x4001993	            0xeb14	                           jmp 0x40019a9	      2136	bfd.c	FUNCTION_35	IF_1
0x4001995	           0xf1f00	                         nop dword [rax]	      2136	bfd.c	FUNCTION_35	IF_1
0x4001998	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x400199f	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40019a2	            0x7422	                            je 0x40019c6	      2112	bfd.c	FUNCTION_34	IF_2
0x40019a4	          0x4839d0	                            cmp rax, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40019a7	            0x741d	                            je 0x40019c6	      2112	bfd.c	FUNCTION_34	IF_2
0x40019a9	        0x837a0805	                  cmp dword [rdx + 8], 5	      2103	bfd.c	FUNCTION_34	IF_1
0x40019ad	            0x75e9	                           jne 0x4001998	      2103	bfd.c	FUNCTION_34	IF_1
0x40019af	    0x488b8a680300	           mov rcx, qword [rdx + 0x368] 	      2108	bfd.c	FUNCTION_34	IF_1
0x40019b6	    0x488b92600300	           mov rdx, qword [rdx + 0x360] 	      2111	bfd.c	FUNCTION_34	IF_2
0x40019bd	          0x4885d2	                           test rdx, rdx	      2112	bfd.c	FUNCTION_34	IF_2
0x40019c0	        0x48895910	             mov qword [rcx + 0x10], rbx	      2108	bfd.c	FUNCTION_34	IF_1
0x40019c4	            0x75de	                           jne 0x40019a4	      2112	bfd.c	FUNCTION_34	IF_2
0x40019c6	              0x5b	                                 pop rbx	      2140	bfd.c	FUNCTION_35
0x40019c7	              0xc3	                                     ret	      2140	bfd.c	FUNCTION_35
bfd_convert_section_size	ELSE,1:functions,0:CALL,5:SWITCH,0:IF,5:FOR,0:WHILE,0:DO,0	35
0x4001f10	        0x448b4744	            mov r8d, dword [rdi + 0x44] 	      2472	bfd.c	FUNCTION_42	IF_1
0x4001f14	          0x4889c8	                            mov rax, rcx	      2473	bfd.c	FUNCTION_42	IF_1
0x4001f17	        0x41c1e805	                              shr r8d, 5	      2472	bfd.c	FUNCTION_42	IF_1
0x4001f1b	    0x4181e0ffff0f	                        and r8d, 0xfffff	      2472	bfd.c	FUNCTION_42	IF_1
0x4001f22	    0x41f7c0008000	                        test r8d, 0x8000	      2472	bfd.c	FUNCTION_42	IF_1
0x4001f29	            0x750a	                           jne 0x4001f35	      2472	bfd.c	FUNCTION_42	IF_1
0x4001f2b	        0x488b7f08	                mov rdi, qword [rdi + 8]	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001f2f	        0x837f0805	                  cmp dword [rdi + 8], 5	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001f33	            0x740b	                            je 0x4001f40	      2476	bfd.c	FUNCTION_42	IF_2	CALL_1
0x4001f35	            0xf3c3	                                     ret	      2497	bfd.c	FUNCTION_42
0x4001f37	    0x660f1f840000	                    nop word [rax + rax]	      2497	bfd.c	FUNCTION_42
0x4001f40	        0x488b5208	                mov rdx, qword [rdx + 8]	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001f44	        0x837a0805	                  cmp dword [rdx + 8], 5	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001f48	            0x75eb	                           jne 0x4001f35	      2477	bfd.c	FUNCTION_42	IF_2	CALL_2
0x4001f4a	    0x488bbf680300	           mov rdi, qword [rdi + 0x368] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001f51	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001f58	    0x488bbf000300	           mov rdi, qword [rdi + 0x300] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001f5f	    0x488b92000300	           mov rdx, qword [rdx + 0x300] 	      2482	bfd.c	FUNCTION_42	IF_3	CALL_4
0x4001f66	         0xfb67f0c	            movzx edi, byte [rdi + 0xc] 	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001f6a	        0x403a7a0c	               cmp dil, byte [rdx + 0xc]	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001f6e	            0x74c5	                            je 0x4001f35	      2481	bfd.c	FUNCTION_42	IF_3	CALL_3
0x4001f70	          0x4885f6	                           test rsi, rsi	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x4001f73	            0x7421	                            je 0x4001f96	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x4001f75	    0x488b96e00000	            mov rdx, qword [rsi + 0xe0] 	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001f7c	          0x4889c8	                            mov rax, rcx	      2473	bfd.c	FUNCTION_42	IF_1
0x4001f7f	        0xf6420908	                  test byte [rdx + 9], 8	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001f83	            0x74b0	                            je 0x4001f35	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4001f85	        0x488d41f4	                    lea rax, [rcx - 0xc]	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4001f89	        0x4883c10c	                            add rcx, 0xc	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4001f8d	        0x4080ff01	                              cmp dil, 1	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4001f91	        0x480f44c1	                          cmove rax, rcx	      2495	bfd.c	FUNCTION_42	ELSE_1
0x4001f95	              0xc3	                                     ret	      2497	bfd.c	FUNCTION_42
0x4001f96	    0x4181e0000002	                        and r8d, 0x20000	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x4001f9d	            0x75e6	                           jne 0x4001f85	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x4001f9f	            0xf3c3	                                     ret	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
bfd_set_gp_size	ELSE,1:functions,0:CALL,2:SWITCH,0:IF,3:FOR,0:WHILE,0:DO,0	19
0x4001570	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1597	bfd.c	FUNCTION_23	IF_1
0x4001574	          0x83e007	                              and eax, 7	      1597	bfd.c	FUNCTION_23	IF_1
0x4001577	            0x3c01	                               cmp al, 1	      1597	bfd.c	FUNCTION_23	IF_1
0x4001579	            0x7405	                            je 0x4001580	      1597	bfd.c	FUNCTION_23	IF_1
0x400157b	            0xf3c3	                                     ret	      1597	bfd.c	FUNCTION_23	IF_1
0x400157d	           0xf1f00	                         nop dword [rax]	      1597	bfd.c	FUNCTION_23	IF_1
0x4001580	        0x488b4708	                mov rax, qword [rdi + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001584	          0x8b4008	                mov eax, dword [rax + 8]	      1600	bfd.c	FUNCTION_23	IF_2
0x4001587	          0x83f803	                              cmp eax, 3	      1600	bfd.c	FUNCTION_23	IF_2
0x400158a	            0x7414	                            je 0x40015a0	      1600	bfd.c	FUNCTION_23	IF_2
0x400158c	          0x83f805	                              cmp eax, 5	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400158f	            0x75ea	                           jne 0x400157b	      1602	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001591	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x4001598	    0x89b0f8020000	            mov dword [rax + 0x2f8], esi	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400159e	              0xc3	                                     ret	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x400159f	              0x90	                                     nop	      1603	bfd.c	FUNCTION_23	ELSE_1	IF_3
0x40015a0	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1601	bfd.c	FUNCTION_23	CALL_1
0x40015a7	          0x897028	             mov dword [rax + 0x28], esi	      1601	bfd.c	FUNCTION_23	CALL_1
0x40015aa	              0xc3	                                     ret	      1601	bfd.c	FUNCTION_23	CALL_1
bfd_set_file_flags	ELSE,0:functions,0:CALL,6:SWITCH,0:IF,3:FOR,0:WHILE,0:DO,0	30
0x4000700	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1402	bfd.c	FUNCTION_16	IF_1
0x4000704	            0x89c2	                            mov edx, eax	      1402	bfd.c	FUNCTION_16	IF_1
0x4000706	          0x83e207	                              and edx, 7	      1402	bfd.c	FUNCTION_16	IF_1
0x4000709	          0x80fa01	                               cmp dl, 1	      1402	bfd.c	FUNCTION_16	IF_1
0x400070c	            0x7412	                            je 0x4000720	      1402	bfd.c	FUNCTION_16	IF_1
0x400070e	    0xc70500000000	               mov dword [0x04000718], 3	       506	bfd.c	FUNCTION_2
0x4000718	            0x31c0	                            xor eax, eax	      1405	bfd.c	FUNCTION_16	IF_1
0x400071a	              0xc3	                                     ret	      1405	bfd.c	FUNCTION_16	IF_1
0x400071b	       0xf1f440000	                   nop dword [rax + rax]	      1405	bfd.c	FUNCTION_16	IF_1
0x4000720	          0x83e008	                              and eax, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000723	            0x3c08	                               cmp al, 8	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000725	            0x7425	                            je 0x400074c	      1408	bfd.c	FUNCTION_16	IF_2	CALL_2
0x4000727	          0x8b5744	            mov edx, dword [rdi + 0x44] 	      1414	bfd.c	FUNCTION_16	CALL_4
0x400072a	            0x89f0	                            mov eax, esi	      1414	bfd.c	FUNCTION_16	CALL_4
0x400072c	      0x25ffff0f00	                        and eax, 0xfffff	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000731	          0xc1e005	                              shl eax, 5	      1414	bfd.c	FUNCTION_16	CALL_4
0x4000734	    0x81e21f0000fe	                     and edx, 0xfe00001f	      1414	bfd.c	FUNCTION_16	CALL_4
0x400073a	             0x9d0	                             or eax, edx	      1414	bfd.c	FUNCTION_16	CALL_4
0x400073c	          0x894744	             mov dword [rdi + 0x44], eax	      1414	bfd.c	FUNCTION_16	CALL_4
0x400073f	        0x488b4708	                mov rax, qword [rdi + 8]	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4000743	          0x8b4814	            mov ecx, dword [rax + 0x14] 	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4000746	            0x21f1	                            and ecx, esi	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x4000748	            0x39ce	                            cmp esi, ecx	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400074a	            0x7414	                            je 0x4000760	      1415	bfd.c	FUNCTION_16	IF_3	CALL_5
0x400074c	    0xc70500000000	               mov dword [0x04000756], 5	       506	bfd.c	FUNCTION_2
0x4000756	            0x31c0	                            xor eax, eax	      1411	bfd.c	FUNCTION_16	IF_2
0x4000758	              0xc3	                                     ret	      1411	bfd.c	FUNCTION_16	IF_2
0x4000759	     0xf1f80000000	                         nop dword [rax]	      1411	bfd.c	FUNCTION_16	IF_2
0x4000760	      0xb801000000	                              mov eax, 1	      1421	bfd.c	FUNCTION_16
0x4000765	              0xc3	                                     ret	      1422	bfd.c	FUNCTION_16
bfd_get_reloc_upper_bound	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	11
0x4000680	         0xfb64744	           movzx eax, byte [rdi + 0x44] 	      1316	bfd.c	FUNCTION_14	IF_1
0x4000684	          0x83e007	                              and eax, 7	      1316	bfd.c	FUNCTION_14	IF_1
0x4000687	            0x3c01	                               cmp al, 1	      1316	bfd.c	FUNCTION_14	IF_1
0x4000689	            0x7515	                           jne 0x40006a0	      1316	bfd.c	FUNCTION_14	IF_1
0x400068b	        0x488b4708	                mov rax, qword [rdi + 8]	      1322	bfd.c	FUNCTION_14	CALL_2
0x400068f	    0x488b80680200	           mov rax, qword [rax + 0x268] 	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000696	            0xffe0	                                 jmp rax	      1322	bfd.c	FUNCTION_14	CALL_2
0x4000698	     0xf1f84000000	                   nop dword [rax + rax]	      1322	bfd.c	FUNCTION_14	CALL_2
0x40006a0	    0xc70500000000	               mov dword [0x040006aa], 5	       506	bfd.c	FUNCTION_2
0x40006aa	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	      1323	bfd.c	FUNCTION_14
0x40006b1	              0xc3	                                     ret	      1323	bfd.c	FUNCTION_14
_bfd_default_assert_handler	ELSE,0:functions,0:CALL,1:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	2
0x4000640	            0x31c0	                            xor eax, eax	      1257	bfd.c	FUNCTION_12	CALL_1
0x4000642	      0xe939ffffff	              jmp sym._bfd_error_handler	      1257	bfd.c	FUNCTION_12	CALL_1
bfd_alt_mach_code	ELSE,0:functions,0:CALL,5:SWITCH,1:IF,3:FOR,0:WHILE,0:DO,0	30
0x40018d0	        0x488b5708	                mov rdx, qword [rdi + 8]	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x40018d4	            0x31c0	                            xor eax, eax	      2068	bfd.c	FUNCTION_32
0x40018d6	        0x837a0805	                  cmp dword [rdx + 8], 5	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x40018da	            0x7404	                            je 0x40018e0	      2037	bfd.c	FUNCTION_32	IF_1	CALL_1
0x40018dc	            0xf3c3	                                     ret	      2069	bfd.c	FUNCTION_32
0x40018de	            0x6690	                                     nop	      2069	bfd.c	FUNCTION_32
0x40018e0	          0x83fe01	                              cmp esi, 1	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018e3	            0x7443	                            je 0x4001928	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018e5	          0x83fe02	                              cmp esi, 2	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018e8	            0x7426	                            je 0x4001910	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018ea	            0x85f6	                           test esi, esi	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018ec	            0x75ee	                           jne 0x40018dc	      2041	bfd.c	FUNCTION_32	IF_1	SWITCH_1
0x40018ee	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x40018f5	          0x8b5008	                mov edx, dword [rax + 8]	      2044	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_2
0x40018f8	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x40018ff	        0x6689503a	               mov word [rax + 0x3a], dx	      2063	bfd.c	FUNCTION_32	IF_1	CALL_5
0x4001903	      0xb801000000	                              mov eax, 1	      2065	bfd.c	FUNCTION_32	IF_1
0x4001908	              0xc3	                                     ret	      2069	bfd.c	FUNCTION_32
0x4001909	     0xf1f80000000	                         nop dword [rax]	      2069	bfd.c	FUNCTION_32
0x4001910	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x4001917	    0x8b92fc020000	           mov edx, dword [rdx + 0x2fc] 	      2054	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_4
0x400191d	            0x85d2	                           test edx, edx	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x400191f	            0x75d7	                           jne 0x40018f8	      2055	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_3
0x4001921	            0xf3c3	                                     ret	      2069	bfd.c	FUNCTION_32
0x4001923	       0xf1f440000	                   nop dword [rax + rax]	      2069	bfd.c	FUNCTION_32
0x4001928	    0x488b92680300	           mov rdx, qword [rdx + 0x368] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x400192f	    0x8b92f8020000	           mov edx, dword [rdx + 0x2f8] 	      2048	bfd.c	FUNCTION_32	IF_1	SWITCH_1	CALL_3
0x4001935	            0x85d2	                           test edx, edx	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4001937	            0x75bf	                           jne 0x40018f8	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
0x4001939	            0xf3c3	                                     ret	      2049	bfd.c	FUNCTION_32	IF_1	SWITCH_1	IF_2
bfd_set_error_program_name	ELSE,0:functions,0:CALL,0:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	2
0x4000660	    0x48893d000000	            mov qword [0x04000667], rdi 	      1220	bfd.c	FUNCTION_11
0x4000667	              0xc3	                                     ret	      1220	bfd.c	FUNCTION_11
bfd_set_input_error	ELSE,0:functions,0:CALL,1:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	11
0x4000880	          0x83fe13	                           cmp esi, 0x13	       533	bfd.c	FUNCTION_3	IF_1
0x4000883	    0xc70500000000	           mov dword [0x0400088d], 0x14 	       530	bfd.c	FUNCTION_3
0x400088d	    0x48893d000000	            mov qword [0x04000894], rdi 	       531	bfd.c	FUNCTION_3
0x4000894	    0x893500000000	            mov dword [0x0400089a], esi 	       532	bfd.c	FUNCTION_3
0x400089a	            0x7702	                            ja 0x400089e	       533	bfd.c	FUNCTION_3	IF_1
0x400089c	            0xf3c3	                                     ret	       533	bfd.c	FUNCTION_3	IF_1
0x400089e	              0x50	                                push rax	       527	bfd.c	FUNCTION_3
0x400089f	      0xba00000000	                              mov edx, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40008a4	      0xbe16020000	                          mov esi, 0x216	       534	bfd.c	FUNCTION_3	CALL_1
0x40008a9	      0xbf00000000	                              mov edi, 0	       534	bfd.c	FUNCTION_3	CALL_1
0x40008ae	      0xe800000000	                          call 0x40008b3	       534	bfd.c	FUNCTION_3	CALL_1
bfd_get_arch_size	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	16
0x40013c0	        0x488b4708	                mov rax, qword [rdi + 8]	      1473	bfd.c	FUNCTION_19	IF_1
0x40013c4	        0x83780805	                  cmp dword [rax + 8], 5	      1473	bfd.c	FUNCTION_19	IF_1
0x40013c8	            0x741e	                            je 0x40013e8	      1473	bfd.c	FUNCTION_19	IF_1
0x40013ca	        0x4883ec08	                              sub rsp, 8	      1472	bfd.c	FUNCTION_19
0x40013ce	      0xe800000000	                          call 0x40013d3	      1476	bfd.c	FUNCTION_19	CALL_2
0x40013d3	          0x83f821	                           cmp eax, 0x21	      1476	bfd.c	FUNCTION_19	CALL_2
0x40013d6	            0x19c0	                            sbb eax, eax	      1476	bfd.c	FUNCTION_19	CALL_2
0x40013d8	        0x4883c408	                              add rsp, 8	      1477	bfd.c	FUNCTION_19
0x40013dc	          0x83e0e0	                     and eax, 0xffffffe0	      1476	bfd.c	FUNCTION_19	CALL_2
0x40013df	          0x83c040	                           add eax, 0x40	      1476	bfd.c	FUNCTION_19	CALL_2
0x40013e2	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
0x40013e3	       0xf1f440000	                   nop dword [rax + rax]	      1477	bfd.c	FUNCTION_19
0x40013e8	    0x488b80680300	           mov rax, qword [rax + 0x368] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x40013ef	    0x488b80000300	           mov rax, qword [rax + 0x300] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x40013f6	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1474	bfd.c	FUNCTION_19	CALL_1
0x40013fa	              0xc3	                                     ret	      1477	bfd.c	FUNCTION_19
_bfd_abort	ELSE,1:functions,0:CALL,7:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	39
0x40007b0	          0x4885d2	                           test rdx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x40007b3	            0x4154	                                push r12	      1437	bfd.c	FUNCTION_18
0x40007b5	          0x4189f4	                           mov r12d, esi	      1437	bfd.c	FUNCTION_18
0x40007b8	              0x55	                                push rbp	      1437	bfd.c	FUNCTION_18
0x40007b9	          0x4889fd	                            mov rbp, rdi	      1437	bfd.c	FUNCTION_18
0x40007bc	              0x53	                                push rbx	      1437	bfd.c	FUNCTION_18
0x40007bd	            0x7457	                            je 0x4000816	      1438	bfd.c	FUNCTION_18	IF_1
0x40007bf	          0x4889d3	                            mov rbx, rdx	      1438	bfd.c	FUNCTION_18	IF_1
0x40007c2	      0xbe00000000	                              mov esi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x40007c7	      0xba05000000	                              mov edx, 5	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x40007cc	      0xbf00000000	                              mov edi, 0	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x40007d1	      0xe800000000	                          call 0x40007d6	      1441	bfd.c	FUNCTION_18	IF_1	CALL_2
0x40007d6	          0x4989d8	                             mov r8, rbx	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007d9	          0x4889c7	                            mov rdi, rax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007dc	          0x4489e1	                           mov ecx, r12d	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007df	          0x4889ea	                            mov rdx, rbp	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007e2	      0xbe00000000	                              mov esi, 0	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007e7	            0x31c0	                            xor eax, eax	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007e9	      0xe800000000	                          call 0x40007ee	      1439	bfd.c	FUNCTION_18	IF_1	CALL_1
0x40007ee	      0xba05000000	                              mov edx, 5	      1448	bfd.c	FUNCTION_18	CALL_6
0x40007f3	      0xbe00000000	                              mov esi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x40007f8	      0xbf00000000	                              mov edi, 0	      1448	bfd.c	FUNCTION_18	CALL_6
0x40007fd	      0xe800000000	                          call 0x4000802	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000802	          0x4889c7	                            mov rdi, rax	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000805	            0x31c0	                            xor eax, eax	      1448	bfd.c	FUNCTION_18	CALL_6
0x4000807	      0xe800000000	                          call 0x400080c	      1448	bfd.c	FUNCTION_18	CALL_6
0x400080c	      0xbf01000000	                              mov edi, 1	      1449	bfd.c	FUNCTION_18	CALL_7
0x4000811	      0xe800000000	                          call 0x4000816	      1449	bfd.c	FUNCTION_18	CALL_7
0x4000816	      0xba05000000	                              mov edx, 5	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400081b	      0xbe00000000	                              mov esi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000820	      0xbf00000000	                              mov edi, 0	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x4000825	      0xe800000000	                          call 0x400082a	      1446	bfd.c	FUNCTION_18	ELSE_1	CALL_4
0x400082a	          0x4489e1	                           mov ecx, r12d	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400082d	          0x4889c7	                            mov rdi, rax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000830	          0x4889ea	                            mov rdx, rbp	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000833	      0xbe00000000	                              mov esi, 0	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x4000838	            0x31c0	                            xor eax, eax	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400083a	      0xe800000000	                          call 0x400083f	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
0x400083f	            0xebad	                           jmp 0x40007ee	      1444	bfd.c	FUNCTION_18	ELSE_1	CALL_3
bfd_get_relocated_section_contents	ELSE,1:functions,0:CALL,0:SWITCH,0:IF,2:FOR,0:WHILE,0:DO,0	10
0x4001690	        0x837a0801	                  cmp dword [rdx + 8], 1	      1914	bfd.c	FUNCTION_27	IF_1
0x4001694	          0x4889f8	                            mov rax, rdi	      1921	bfd.c	FUNCTION_27	ELSE_1
0x4001697	            0x7512	                           jne 0x40016ab	      1914	bfd.c	FUNCTION_27	IF_1
0x4001699	        0x488b4220	            mov rax, qword [rdx + 0x20] 	      1916	bfd.c	FUNCTION_27	IF_1
0x400169d	    0x488b80f00000	            mov rax, qword [rax + 0xf0] 	      1916	bfd.c	FUNCTION_27	IF_1
0x40016a4	          0x4885c0	                           test rax, rax	      1921	bfd.c	FUNCTION_27	ELSE_1
0x40016a7	        0x480f44c7	                          cmove rax, rdi	      1921	bfd.c	FUNCTION_27	ELSE_1
0x40016ab	        0x488b4008	                mov rax, qword [rax + 8]	      1923	bfd.c	FUNCTION_27
0x40016af	    0x488b80a80200	           mov rax, qword [rax + 0x2a8] 	      1925	bfd.c	FUNCTION_27
0x40016b6	            0xffe0	                                 jmp rax	      1925	bfd.c	FUNCTION_27
_bfd_get_gp_value	ELSE,1:functions,0:CALL,2:SWITCH,0:IF,4:FOR,0:WHILE,0:DO,0	25
0x40015b0	          0x4885ff	                           test rdi, rdi	      1613	bfd.c	FUNCTION_24	IF_1
0x40015b3	            0x743b	                            je 0x40015f0	      1613	bfd.c	FUNCTION_24	IF_1
0x40015b5	         0xfb65744	           movzx edx, byte [rdi + 0x44] 	      1615	bfd.c	FUNCTION_24	IF_2
0x40015b9	            0x31c0	                            xor eax, eax	      1614	bfd.c	FUNCTION_24	IF_1
0x40015bb	          0x83e207	                              and edx, 7	      1615	bfd.c	FUNCTION_24	IF_2
0x40015be	          0x80fa01	                               cmp dl, 1	      1615	bfd.c	FUNCTION_24	IF_2
0x40015c1	            0x7405	                            je 0x40015c8	      1615	bfd.c	FUNCTION_24	IF_2
0x40015c3	            0xf3c3	                                     ret	      1624	bfd.c	FUNCTION_24
0x40015c5	           0xf1f00	                         nop dword [rax]	      1624	bfd.c	FUNCTION_24
0x40015c8	        0x488b5708	                mov rdx, qword [rdi + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x40015cc	          0x8b5208	                mov edx, dword [rdx + 8]	      1618	bfd.c	FUNCTION_24	IF_3
0x40015cf	          0x83fa03	                              cmp edx, 3	      1618	bfd.c	FUNCTION_24	IF_3
0x40015d2	            0x7424	                            je 0x40015f8	      1618	bfd.c	FUNCTION_24	IF_3
0x40015d4	          0x83fa05	                              cmp edx, 5	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015d7	            0x75ea	                           jne 0x40015c3	      1620	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015d9	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015e0	    0x488b80f00200	           mov rax, qword [rax + 0x2f0] 	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015e7	              0xc3	                                     ret	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015e8	     0xf1f84000000	                   nop dword [rax + rax]	      1621	bfd.c	FUNCTION_24	ELSE_1	IF_4
0x40015f0	            0x31c0	                            xor eax, eax	      1614	bfd.c	FUNCTION_24	IF_1
0x40015f2	              0xc3	                                     ret	      1624	bfd.c	FUNCTION_24
0x40015f3	       0xf1f440000	                   nop dword [rax + rax]	      1624	bfd.c	FUNCTION_24
0x40015f8	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x40015ff	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1619	bfd.c	FUNCTION_24	CALL_1
0x4001603	              0xc3	                                     ret	      1619	bfd.c	FUNCTION_24	CALL_1
error_handler_internal	ELSE,1:functions,0:CALL,12:SWITCH,1:IF,1:FOR,2:WHILE,0:DO,0	656
0x40008c0	            0x4157	                                push r15	      1092	bfd.c	FUNCTION_8
0x40008c2	            0x4156	                                push r14	      1092	bfd.c	FUNCTION_8
0x40008c4	            0x4155	                                push r13	      1092	bfd.c	FUNCTION_8
0x40008c6	            0x4154	                                push r12	      1092	bfd.c	FUNCTION_8
0x40008c8	          0x4989fd	                            mov r13, rdi	      1092	bfd.c	FUNCTION_8
0x40008cb	              0x55	                                push rbp	      1092	bfd.c	FUNCTION_8
0x40008cc	              0x53	                                push rbx	      1092	bfd.c	FUNCTION_8
0x40008cd	          0x4989f4	                            mov r12, rsi	      1092	bfd.c	FUNCTION_8
0x40008d0	            0x31ed	                            xor ebp, ebp	      1097	bfd.c	FUNCTION_8	FOR_1
0x40008d2	    0x4881ec380100	                          sub rsp, 0x138	      1092	bfd.c	FUNCTION_8
0x40008d9	    0x64488b042528	                mov rax, qword fs:[0x28]	      1092	bfd.c	FUNCTION_8
0x40008e2	    0x488984242801	            mov qword [rsp + 0x128], rax	      1092	bfd.c	FUNCTION_8
0x40008ea	            0x31c0	                            xor eax, eax	      1092	bfd.c	FUNCTION_8
0x40008ec	    0xc74424100000	               mov dword [rsp + 0x10], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x40008f4	    0xc74424200000	               mov dword [rsp + 0x20], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x40008fc	          0x4889f8	                            mov rax, rdi	      1097	bfd.c	FUNCTION_8	FOR_1
0x40008ff	    0xc74424300000	               mov dword [rsp + 0x30], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000907	    0xc74424400000	               mov dword [rsp + 0x40], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x400090f	    0xc74424500000	               mov dword [rsp + 0x50], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000917	    0xc74424600000	               mov dword [rsp + 0x60], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x400091f	    0xc74424700000	               mov dword [rsp + 0x70], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000927	    0xc78424800000	               mov dword [rsp + 0x80], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x4000932	    0xc78424900000	               mov dword [rsp + 0x90], 0	      1097	bfd.c	FUNCTION_8	FOR_1
0x400093d	           0xfb610	                   movzx edx, byte [rax]	       916	bfd.c	FUNCTION_7	WHILE_1
0x4000940	            0x84d2	                             test dl, dl	       916	bfd.c	FUNCTION_7	WHILE_1
0x4000942	            0x7417	                            je 0x400095b	       916	bfd.c	FUNCTION_7	WHILE_1
0x4000944	          0x80fa25	                            cmp dl, 0x25	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000947	            0x744f	                            je 0x4000998	       918	bfd.c	FUNCTION_7	WHILE_1	IF_1
0x4000949	      0xbe25000000	                           mov esi, 0x25	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x400094e	          0x4889c7	                            mov rdi, rax	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000951	      0xe800000000	                          call 0x4000956	       920	bfd.c	FUNCTION_7	WHILE_1	IF_1	CALL_1
0x4000956	          0x4885c0	                           test rax, rax	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x4000959	            0x75e2	                           jne 0x400093d	       921	bfd.c	FUNCTION_7	WHILE_1	IF_1	IF_2
0x400095b	            0x85ed	                           test ebp, ebp	      1100	bfd.c	FUNCTION_8	FOR_2
0x400095d	     0xf846b020000	                            je 0x4000bce	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000963	          0x8d55ff	                      lea edx, [rbp - 1]	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000966	      0x488d442410	                   lea rax, [rsp + 0x10]	      1100	bfd.c	FUNCTION_8	FOR_2
0x400096b	        0x4883c201	                              add rdx, 1	      1100	bfd.c	FUNCTION_8	FOR_2
0x400096f	        0x48c1e204	                              shl rdx, 4	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000973	          0x4801c2	                            add rdx, rax	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000976	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000980	          0x833806	                      cmp dword [rax], 6	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000983	     0xf87a7030000	                            ja 0x4000d30	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000989	            0x8b08	                    mov ecx, dword [rax]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x400098b	    0xff24cd000000	                       jmp qword [rcx*8]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000992	    0x660f1f440000	                    nop word [rax + rax]	      1102	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000998	         0xfb64801	               movzx ecx, byte [rax + 1]	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x400099c	          0x80f925	                            cmp cl, 0x25	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x400099f	     0xf8413010000	                            je 0x4000ab8	       924	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x40009a5	          0x80f930	                            cmp cl, 0x30	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009a8	        0x4c8d7001	                      lea r14, [rax + 1]	       932	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40009ac	    0xc7442408ffff	        mov dword [rsp + 8], 0xffffffff 	       935	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x40009b4	            0x742e	                            je 0x40009e4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009b6	           0xfbef1	                           movsx esi, cl	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009b9	           0xfb6c9	                           movzx ecx, cl	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009bc	    0xf68409000000	                test byte [rcx + rcx], 4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009c4	            0x741e	                            je 0x40009e4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009c6	        0x80780224	                cmp byte [rax + 2], 0x24	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009ca	            0x7518	                           jne 0x40009e4	       936	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4	CALL_2
0x40009cc	          0x8d4ecf	                   lea ecx, [rsi - 0x31]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40009cf	        0x4c8d7003	                      lea r14, [rax + 3]	       939	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40009d3	        0x894c2408	                mov dword [rsp + 8], ecx	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40009d7	            0xeb0b	                           jmp 0x40009e4	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40009d9	     0xf1f80000000	                         nop dword [rax]	       938	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_4
0x40009e0	        0x4983c601	                              add r14, 1	       944	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2
0x40009e4	        0x410fbe1e	                   movsx ebx, byte [r14]	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009e8	      0xbf00000000	                              mov edi, 0	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009ed	            0x89de	                            mov esi, ebx	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009ef	          0x4189df	                           mov r15d, ebx	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009f2	      0xe800000000	                          call 0x40009f7	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009f7	          0x4885c0	                           test rax, rax	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009fa	            0x75e4	                           jne 0x40009e0	       943	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_2	CALL_3
0x40009fc	          0x80fb2a	                            cmp bl, 0x2a	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x40009ff	     0xf84fb000000	                            je 0x4000b00	       946	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000a05	           0xfb6db	                           movzx ebx, bl	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a08	    0xf6841b000000	                test byte [rbx + rbx], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a10	            0x741b	                            je 0x4000a2d	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a12	    0x660f1f440000	                    nop word [rax + rax]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a18	        0x4983c601	                              add r14, 1	       965	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3
0x4000a1c	        0x410fb606	                   movzx eax, byte [r14]	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a20	    0xf68400000000	                test byte [rax + rax], 4	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a28	          0x4989c7	                            mov r15, rax	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a2b	            0x75eb	                           jne 0x4000a18	       964	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	ELSE_3	WHILE_3	CALL_6
0x4000a2d	        0x4180ff2e	                          cmp r15b, 0x2e	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000a31	     0xf8491000000	                            je 0x4000ac8	       968	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000a37	    0xc74424040000	                  mov dword [rsp + 4], 0	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a3f	            0x31db	                            xor ebx, ebx	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a41	        0x410fbe36	                   movsx esi, byte [r14]	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a45	      0xbf00000000	                              mov edi, 0	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a4a	          0x4189f7	                           mov r15d, esi	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a4d	      0xe800000000	                          call 0x4000a52	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a52	          0x4885c0	                           test rax, rax	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a55	     0xf8405030000	                            je 0x4000d60	       992	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	CALL_10
0x4000a5b	        0x4180ff68	                          cmp r15b, 0x68	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a5f	            0x7427	                            je 0x4000a88	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a61	        0x4180ff6c	                          cmp r15b, 0x6c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a65	            0x7449	                            je 0x4000ab0	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a67	        0x4180ff4c	                          cmp r15b, 0x4c	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a6b	            0x7433	                            je 0x4000aa0	       994	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a6d	      0xba00000000	                              mov edx, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000a72	      0xbeee030000	                          mov esi, 0x3ee	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000a77	      0xbf00000000	                              mov edi, 0	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000a7c	      0xe800000000	                          call 0x4000a81	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000a81	     0xf1f80000000	                         nop dword [rax]	      1006	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1	CALL_11
0x4000a88	    0xc74424040100	                  mov dword [rsp + 4], 1	       997	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000a90	        0x4983c601	                              add r14, 1	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x4000a94	            0xebab	                           jmp 0x4000a41	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x4000a96	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1008	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5
0x4000aa0	      0xbb02000000	                              mov ebx, 2	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000aa5	            0xebe9	                           jmp 0x4000a90	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000aa7	    0x660f1f840000	                    nop word [rax + rax]	      1003	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000ab0	          0x83c301	                              add ebx, 1	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000ab3	            0xebdb	                           jmp 0x4000a90	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000ab5	           0xf1f00	                         nop dword [rax]	      1000	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	WHILE_5	SWITCH_1
0x4000ab8	        0x4883c002	                              add rax, 2	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000abc	      0xe97cfeffff	                           jmp 0x400093d	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000ac1	     0xf1f80000000	                         nop dword [rax]	       925	bfd.c	FUNCTION_7	WHILE_1	ELSE_1	IF_3
0x4000ac8	      0x410fb64601	               movzx eax, byte [r14 + 1]	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000acd	            0x3c2a	                            cmp al, 0x2a	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000acf	            0x747e	                            je 0x4000b4f	       971	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000ad1	        0x4983c601	                              add r14, 1	       970	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8
0x4000ad5	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000add	     0xf8454ffffff	                            je 0x4000a37	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000ae3	       0xf1f440000	                   nop dword [rax + rax]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000ae8	        0x4983c601	                              add r14, 1	       990	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4
0x4000aec	        0x410fb606	                   movzx eax, byte [r14]	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000af0	    0xf68400000000	                test byte [rax + rax], 4	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000af8	            0x75ee	                           jne 0x4000ae8	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000afa	      0xe938ffffff	                           jmp 0x4000a37	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000aff	              0x90	                                     nop	       989	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	ELSE_4	WHILE_4	CALL_9
0x4000b00	      0x410fb64e01	               movzx ecx, byte [r14 + 1]	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b05	        0x498d7601	                      lea rsi, [r14 + 1]	       950	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b09	            0x89e8	                            mov eax, ebp	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b0b	          0x80f930	                            cmp cl, 0x30	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b0e	            0x741b	                            je 0x4000b2b	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b10	           0xfbef9	                           movsx edi, cl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b13	           0xfb6c9	                           movzx ecx, cl	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b16	    0xf68409000000	                test byte [rcx + rcx], 4	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b1e	            0x740b	                            je 0x4000b2b	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b20	      0x41807e0224	                cmp byte [r14 + 2], 0x24	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b25	     0xf84ec020000	                            je 0x4000e17	       952	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6	CALL_4
0x4000b2b	          0x83f808	                              cmp eax, 8	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x4000b2e	     0xf8718080000	                            ja 0x400134c	       957	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_7
0x4000b34	        0x48c1e004	                              shl rax, 4	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b38	          0x83c501	                              add ebp, 1	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b3b	        0x440fb63e	                  movzx r15d, byte [rsi]	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b3f	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       959	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b47	          0x4989f6	                            mov r14, rsi	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b4a	      0xe9defeffff	                           jmp 0x4000a2d	       960	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5
0x4000b4f	      0x410fb64e02	               movzx ecx, byte [r14 + 2]	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b54	        0x498d7602	                      lea rsi, [r14 + 2]	       975	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b58	            0x89e8	                            mov eax, ebp	       976	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b5a	          0x80f930	                            cmp cl, 0x30	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b5d	            0x741e	                            je 0x4000b7d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b5f	           0xfbef9	                           movsx edi, cl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b62	           0xfb6c9	                           movzx ecx, cl	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b65	    0xf68409000000	                test byte [rcx + rcx], 4	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b6d	            0x740e	                            je 0x4000b7d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b6f	      0x41807e0324	                cmp byte [r14 + 3], 0x24	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b74	            0x7507	                           jne 0x4000b7d	       977	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10	CALL_7
0x4000b76	          0x8d47cf	                   lea eax, [rdi - 0x31]	       979	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4000b79	        0x498d7604	                      lea rsi, [r14 + 4]	       980	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_10
0x4000b7d	          0x83f808	                              cmp eax, 8	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4000b80	     0xf87da070000	                            ja 0x4001360	       982	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	IF_11
0x4000b86	        0x48c1e004	                              shl rax, 4	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b8a	          0x83c501	                              add ebp, 1	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b8d	          0x4989f6	                            mov r14, rsi	       985	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b90	    0xc74404100100	         mov dword [rsp + rax + 0x10], 1	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b98	      0xe99afeffff	                           jmp 0x4000a37	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000b9d	           0xf1f00	                         nop dword [rax]	       984	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9
0x4000ba0	        0x418b0c24	                    mov ecx, dword [r12]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000ba4	          0x83f92f	                           cmp ecx, 0x2f	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000ba7	     0xf879b010000	                            ja 0x4000d48	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bad	            0x89ce	                            mov esi, ecx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000baf	      0x4903742410	             add rsi, qword [r12 + 0x10]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bb4	          0x83c108	                              add ecx, 8	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bb7	        0x41890c24	                    mov dword [r12], ecx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bbb	          0x488b0e	                    mov rcx, qword [rsi]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bbe	          0x488908	                    mov qword [rax], rcx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bc1	        0x4883c010	                           add rax, 0x10	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000bc5	          0x4839c2	                            cmp rdx, rax	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000bc8	     0xf85b2fdffff	                           jne 0x4000980	      1100	bfd.c	FUNCTION_8	FOR_2
0x4000bce	    0x488b3d000000	            mov rdi, qword [0x04000bd5] 	      1128	bfd.c	FUNCTION_8	CALL_9
0x4000bd5	      0xe800000000	                          call 0x4000bda	      1128	bfd.c	FUNCTION_8	CALL_9
0x4000bda	    0x488b0d000000	            mov rcx, qword [0x04000be1] 	      1130	bfd.c	FUNCTION_8	IF_1
0x4000be1	          0x4885c9	                           test rcx, rcx	      1130	bfd.c	FUNCTION_8	IF_1
0x4000be4	     0xf845a040000	                            je 0x4001044	      1130	bfd.c	FUNCTION_8	IF_1
0x4000bea	    0x488b3d000000	            mov rdi, qword [0x04000bf1] 	        97	stdio2.h	CALL_31
0x4000bf1	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4000bf6	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4000bfb	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4000bfd	      0xe800000000	                          call 0x4000c02	        97	stdio2.h	CALL_31
0x4000c02	    0x488b2d000000	            mov rbp, qword [0x04000c09] 	      1135	bfd.c	FUNCTION_8	CALL_10
0x4000c09	    0xc74424080000	                  mov dword [rsp + 8], 0	       661	bfd.c	FUNCTION_6
0x4000c11	      0x410fb64500	                   movzx eax, byte [r13]	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000c16	            0x84c0	                             test al, al	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000c18	            0x7446	                            je 0x4000c60	       663	bfd.c	FUNCTION_6	WHILE_1
0x4000c1a	            0x3c25	                            cmp al, 0x25	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000c1c	     0xf8415020000	                            je 0x4000e37	       667	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000c22	      0xbe25000000	                           mov esi, 0x25	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x4000c27	          0x4c89ef	                            mov rdi, r13	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x4000c2a	      0xe800000000	                          call 0x4000c2f	       670	bfd.c	FUNCTION_6	WHILE_1	IF_1	CALL_1
0x4000c2f	          0x4885c0	                           test rax, rax	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x4000c32	     0xf842e030000	                            je 0x4000f66	       671	bfd.c	FUNCTION_6	WHILE_1	IF_1	IF_2
0x4000c38	          0x4c29e8	                            sub rax, r13	        97	stdio2.h	CALL_31
0x4000c3b	          0x4d89e8	                             mov r8, r13	        97	stdio2.h	CALL_31
0x4000c3e	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4000c43	          0x4889c1	                            mov rcx, rax	        97	stdio2.h	CALL_31
0x4000c46	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4000c4b	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x4000c4e	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4000c50	      0xe800000000	                          call 0x4000c55	        97	stdio2.h	CALL_31
0x4000c55	          0x4863d0	                         movsxd rdx, eax	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000c58	          0x4901d5	                            add r13, rdx	       675	bfd.c	FUNCTION_6	WHILE_1	IF_1
0x4000c5b	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000c5e	            0x75b1	                           jne 0x4000c11	       900	bfd.c	FUNCTION_6	WHILE_1	IF_21
0x4000c60	    0x488b35000000	            mov rsi, qword [0x04000c67] 	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000c67	      0xbf0a000000	                            mov edi, 0xa	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000c6c	      0xe800000000	                          call 0x4000c71	      1139	bfd.c	FUNCTION_8	CALL_11
0x4000c71	    0x488b3d000000	            mov rdi, qword [0x04000c78] 	      1140	bfd.c	FUNCTION_8	CALL_12
0x4000c78	      0xe800000000	                          call 0x4000c7d	      1140	bfd.c	FUNCTION_8	CALL_12
0x4000c7d	    0x488b84242801	           mov rax, qword [rsp + 0x128] 	      1141	bfd.c	FUNCTION_8
0x4000c85	    0x644833042528	                xor rax, qword fs:[0x28]	      1141	bfd.c	FUNCTION_8
0x4000c8e	     0xf85e0060000	                           jne 0x4001374	      1141	bfd.c	FUNCTION_8
0x4000c94	    0x4881c4380100	                          add rsp, 0x138	      1141	bfd.c	FUNCTION_8
0x4000c9b	              0x5b	                                 pop rbx	      1141	bfd.c	FUNCTION_8
0x4000c9c	              0x5d	                                 pop rbp	      1141	bfd.c	FUNCTION_8
0x4000c9d	            0x415c	                                 pop r12	      1141	bfd.c	FUNCTION_8
0x4000c9f	            0x415d	                                 pop r13	      1141	bfd.c	FUNCTION_8
0x4000ca1	            0x415e	                                 pop r14	      1141	bfd.c	FUNCTION_8
0x4000ca3	            0x415f	                                 pop r15	      1141	bfd.c	FUNCTION_8
0x4000ca5	              0xc3	                                     ret	      1141	bfd.c	FUNCTION_8
0x4000ca6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	      1141	bfd.c	FUNCTION_8
0x4000cb0	        0x418b0c24	                    mov ecx, dword [r12]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cb4	          0x83f92f	                           cmp ecx, 0x2f	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cb7	     0xf87cb000000	                            ja 0x4000d88	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cbd	            0x89ce	                            mov esi, ecx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cbf	      0x4903742410	             add rsi, qword [r12 + 0x10]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cc4	          0x83c108	                              add ecx, 8	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000cc7	        0x41890c24	                    mov dword [r12], ecx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000ccb	            0x8b0e	                    mov ecx, dword [rsi]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000ccd	            0x8908	                    mov dword [rax], ecx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000ccf	      0xe9edfeffff	                           jmp 0x4000bc1	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000cd4	         0xf1f4000	                         nop dword [rax]	      1106	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000cd8	      0x418b4c2404	                mov ecx, dword [r12 + 4]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000cdd	    0x81f9af000000	                           cmp ecx, 0xaf	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000ce3	     0xf87b2000000	                            ja 0x4000d9b	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000ce9	            0x89ce	                            mov esi, ecx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000ceb	      0x4903742410	             add rsi, qword [r12 + 0x10]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000cf0	          0x83c110	                           add ecx, 0x10	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000cf3	      0x41894c2404	                mov dword [r12 + 4], ecx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000cf8	        0xf20f1006	                 movsd xmm0, qword [rsi]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000cfc	        0xf20f1100	                 movsd qword [rax], xmm0	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000d00	      0xe9bcfeffff	                           jmp 0x4000bc1	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000d05	           0xf1f00	                         nop dword [rax]	      1115	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000d08	      0x498b4c2408	                mov rcx, qword [r12 + 8]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d0d	        0x4883c10f	                            add rcx, 0xf	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d11	        0x4883e1f0	             and rcx, 0xfffffffffffffff0	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d15	        0x488d7110	                   lea rsi, [rcx + 0x10]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d19	      0x4989742408	                mov qword [r12 + 8], rsi	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d1e	            0xdb29	                         fld xword [rcx]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d20	            0xdb38	                        fstp xword [rax]	      1117	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_6
0x4000d22	      0xe99afeffff	                           jmp 0x4000bc1	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000d27	    0x660f1f840000	                    nop word [rax + rax]	      1118	bfd.c	FUNCTION_8	FOR_2	SWITCH_1
0x4000d30	      0xba00000000	                              mov edx, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000d35	      0xbe63040000	                          mov esi, 0x463	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000d3a	      0xbf00000000	                              mov edi, 0	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000d3f	      0xe800000000	                          call 0x4000d44	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000d44	         0xf1f4000	                         nop dword [rax]	      1123	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_8
0x4000d48	      0x498b742408	                mov rsi, qword [r12 + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000d4d	        0x488d4e08	                      lea rcx, [rsi + 8]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000d51	      0x49894c2408	                mov qword [r12 + 8], rcx	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000d56	      0xe960feffff	                           jmp 0x4000bbb	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000d5b	       0xf1f440000	                   nop dword [rax + rax]	      1120	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_7
0x4000d60	        0x8b4c2408	                mov ecx, dword [rsp + 8]	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000d64	        0x498d4601	                      lea rax, [r14 + 1]	      1011	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000d68	            0x85c9	                           test ecx, ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000d6a	           0xf48cd	                          cmovs ecx, ebp	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000d6d	        0x894c2408	                mov dword [rsp + 8], ecx	      1013	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_12
0x4000d71	        0x418d4fbb	                   lea ecx, [r15 - 0x45]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000d75	          0x80f933	                            cmp cl, 0x33	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000d78	     0xf87a5000000	                            ja 0x4000e23	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000d7e	           0xfb6c9	                           movzx ecx, cl	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000d81	    0xff24cd000000	                       jmp qword [rcx*8]	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000d88	      0x498b742408	                mov rsi, qword [r12 + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000d8d	        0x488d4e08	                      lea rcx, [rsi + 8]	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000d91	      0x49894c2408	                mov qword [r12 + 8], rcx	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000d96	      0xe930ffffff	                           jmp 0x4000ccb	      1105	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_2
0x4000d9b	      0x498b742408	                mov rsi, qword [r12 + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000da0	        0x488d4e08	                      lea rcx, [rsi + 8]	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000da4	      0x49894c2408	                mov qword [r12 + 8], rcx	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000da9	      0xe94affffff	                           jmp 0x4000cf8	      1114	bfd.c	FUNCTION_8	FOR_2	SWITCH_1	CALL_5
0x4000dae	      0xb906000000	                              mov ecx, 6	      1016	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2
0x4000db3	      0x837c240808	                  cmp dword [rsp + 8], 8	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x4000db8	     0xf877a050000	                            ja 0x4001338	      1080	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_16
0x4000dbe	      0x448b742408	               mov r14d, dword [rsp + 8]	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000dc3	          0x83c501	                              add ebp, 1	      1083	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000dc6	        0x49c1e604	                              shl r14, 4	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000dca	      0x42894c3410	       mov dword [rsp + r14 + 0x10], ecx	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000dcf	      0xe969fbffff	                           jmp 0x400093d	      1082	bfd.c	FUNCTION_7	WHILE_1	ELSE_2
0x4000dd4	      0x410fb64e01	               movzx ecx, byte [r14 + 1]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000dd9	        0x498d5602	                      lea rdx, [r14 + 2]	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000ddd	          0x8d71bf	                   lea esi, [rcx - 0x41]	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000de0	      0xb906000000	                              mov ecx, 6	      1072	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000de5	        0x4080fe01	                              cmp sil, 1	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000de9	        0x480f46c2	                         cmovbe rax, rdx	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000ded	            0xebc4	                           jmp 0x4000db3	      1073	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_15
0x4000def	        0x8b7c2404	                mov edi, dword [rsp + 4]	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000df3	      0xb901000000	                              mov ecx, 1	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000df8	            0x85ff	                           test edi, edi	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000dfa	            0x75b7	                           jne 0x4000db3	      1026	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_13
0x4000dfc	            0x85db	                           test ebx, ebx	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000dfe	            0x74b3	                            je 0x4000db3	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e00	            0x31c9	                            xor ecx, ecx	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e02	          0x83fb01	                              cmp ebx, 1	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e05	           0xf95c1	                                setne cl	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e08	          0x83c102	                              add ecx, 2	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e0b	            0xeba6	                           jmp 0x4000db3	      1030	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	ELSE_5	SWITCH_3
0x4000e0d	          0x83fb01	                              cmp ebx, 1	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000e10	            0x19c9	                            sbb ecx, ecx	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000e12	          0x83c105	                              add ecx, 5	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000e15	            0xeb9c	                           jmp 0x4000db3	      1056	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	IF_14
0x4000e17	          0x8d47cf	                   lea eax, [rdi - 0x31]	       954	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000e1a	        0x498d7603	                      lea rsi, [r14 + 3]	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000e1e	      0xe908fdffff	                           jmp 0x4000b2b	       955	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	IF_6
0x4000e23	      0xba00000000	                              mov edx, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000e28	      0xbe35040000	                          mov esi, 0x435	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000e2d	      0xbf00000000	                              mov edi, 0	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000e32	      0xe800000000	                          call 0x4000e37	      1077	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	SWITCH_2	CALL_12
0x4000e37	      0x410fb64501	               movzx eax, byte [r13 + 1]	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000e3c	            0x3c25	                            cmp al, 0x25	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000e3e	     0xf8464030000	                            je 0x40011a8	       677	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x4000e44	            0x3c30	                            cmp al, 0x30	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e46	        0x4d8d7d01	                      lea r15, [r13 + 1]	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e4a	    0xc68424a00000	            mov byte [rsp + 0xa0], 0x25 	       691	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e52	    0xc7442404ffff	        mov dword [rsp + 4], 0xffffffff 	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e5a	            0x741b	                            je 0x4000e77	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e5c	           0xfbec8	                           movsx ecx, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e5f	           0xfb6c0	                           movzx eax, al	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e62	    0xf68400000000	                test byte [rax + rax], 4	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e6a	            0x740b	                            je 0x4000e77	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e6c	      0x41807d0224	                cmp byte [r13 + 2], 0x24	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e71	     0xf8447030000	                            je 0x40011be	       695	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4	CALL_3
0x4000e77	    0x488d9c24a100	                   lea rbx, [rsp + 0xa1]	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e7f	            0xeb13	                           jmp 0x4000e94	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e81	     0xf1f80000000	                         nop dword [rax]	       694	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4000e88	        0x4883c301	                              add rbx, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000e8c	        0x4983c701	                              add r15, 1	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000e90	        0x448873ff	                mov byte [rbx - 1], r14b	       703	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2
0x4000e94	        0x450fbe2f	                  movsx r13d, byte [r15]	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000e98	      0xbf00000000	                              mov edi, 0	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000e9d	          0x4489ee	                           mov esi, r13d	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000ea0	          0x4589ee	                          mov r14d, r13d	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000ea3	      0xe800000000	                          call 0x4000ea8	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000ea8	          0x4885c0	                           test rax, rax	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000eab	            0x75db	                           jne 0x4000e88	       702	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_2	CALL_4
0x4000ead	        0x4180fd2a	                          cmp r13b, 0x2a	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000eb1	     0xf8418010000	                            je 0x4000fcf	       705	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000eb7	        0x450fb6ed	                        movzx r13d, r13b	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ebb	    0x43f6842d0000	                test byte [r13 + r13], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ec4	            0x7427	                            je 0x4000eed	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ec6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ed0	        0x4983c701	                              add r15, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000ed4	        0x410fb607	                   movzx eax, byte [r15]	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ed8	        0x4883c301	                              add rbx, 1	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000edc	        0x448873ff	                mov byte [rbx - 1], r14b	       724	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3
0x4000ee0	    0xf68400000000	                test byte [rax + rax], 4	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000ee8	          0x4989c6	                            mov r14, rax	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000eeb	            0x75e3	                           jne 0x4000ed0	       723	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	ELSE_4	WHILE_3	CALL_7
0x4000eed	        0x4180fe2e	                          cmp r14b, 0x2e	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000ef1	     0xf848b000000	                            je 0x4000f82	       727	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000ef7	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000eff	          0x4531f6	                          xor r14d, r14d	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f02	        0x410fbe37	                   movsx esi, byte [r15]	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f06	      0xbf00000000	                              mov edi, 0	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f0b	          0x4189f4	                           mov r12d, esi	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f0e	      0xe800000000	                          call 0x4000f13	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f13	          0x4885c0	                           test rax, rax	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f16	     0xf8448010000	                            je 0x4001064	       752	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	CALL_11
0x4000f1c	        0x4180fc68	                          cmp r12b, 0x68	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f20	            0x7420	                            je 0x4000f42	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f22	        0x4180fc6c	                          cmp r12b, 0x6c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f26	            0x7438	                            je 0x4000f60	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f28	        0x4180fc4c	                          cmp r12b, 0x4c	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f2c	            0x742a	                            je 0x4000f58	       754	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f2e	      0xba00000000	                              mov edx, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000f33	      0xbefe020000	                          mov esi, 0x2fe	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000f38	      0xbf00000000	                              mov edi, 0	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000f3d	      0xe800000000	                          call 0x4000f42	       766	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1	CALL_12
0x4000f42	    0xc744240c0100	                mov dword [rsp + 0xc], 1	       757	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f4a	        0x4883c301	                              add rbx, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000f4e	        0x4983c701	                              add r15, 1	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000f52	        0x448863ff	                mov byte [rbx - 1], r12b	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000f56	            0xebaa	                           jmp 0x4000f02	       768	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5
0x4000f58	    0x41be02000000	                             mov r14d, 2	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f5e	            0xebea	                           jmp 0x4000f4a	       763	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f60	        0x4183c601	                             add r14d, 1	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f64	            0xebe4	                           jmp 0x4000f4a	       760	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	WHILE_5	SWITCH_1
0x4000f66	          0x4c89e9	                            mov rcx, r13	        97	stdio2.h	CALL_31
0x4000f69	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4000f6e	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4000f73	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x4000f76	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4000f78	      0xe800000000	                          call 0x4000f7d	        97	stdio2.h	CALL_31
0x4000f7d	      0xe9d3fcffff	                           jmp 0x4000c55	        97	stdio2.h	CALL_31
0x4000f82	      0x410fb64701	               movzx eax, byte [r15 + 1]	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000f87	        0x4c8d6b01	                      lea r13, [rbx + 1]	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000f8b	          0xc6032e	                    mov byte [rbx], 0x2e	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000f8e	            0x3c2a	                            cmp al, 0x2a	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000f90	     0xf8438020000	                            je 0x40011ce	       731	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4000f96	           0xfb6c8	                           movzx ecx, al	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000f99	        0x4983c701	                              add r15, 1	       730	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7
0x4000f9d	          0x4c89eb	                            mov rbx, r13	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fa0	    0xf68409000000	                test byte [rcx + rcx], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fa8	     0xf8449ffffff	                            je 0x4000ef7	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fae	        0x4983c701	                              add r15, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000fb2	        0x410fb60f	                   movzx ecx, byte [r15]	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fb6	        0x4883c301	                              add rbx, 1	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000fba	          0x8843ff	                  mov byte [rbx - 1], al	       750	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4
0x4000fbd	    0xf68409000000	                test byte [rcx + rcx], 4	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fc5	          0x4889c8	                            mov rax, rcx	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fc8	            0x75e4	                           jne 0x4000fae	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fca	      0xe928ffffff	                           jmp 0x4000ef7	       749	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	ELSE_5	WHILE_4	CALL_10
0x4000fcf	      0x410fb64f01	               movzx ecx, byte [r15 + 1]	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000fd4	        0x8b542408	                mov edx, dword [rsp + 8]	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000fd8	        0x4d8d6f01	                      lea r13, [r15 + 1]	       710	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000fdc	            0x89d0	                            mov eax, edx	       711	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4000fde	          0x80f930	                            cmp cl, 0x30	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000fe1	            0x741b	                            je 0x4000ffe	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000fe3	           0xfbef1	                           movsx esi, cl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000fe6	           0xfb6c9	                           movzx ecx, cl	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000fe9	    0xf68409000000	                test byte [rcx + rcx], 4	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ff1	            0x740b	                            je 0x4000ffe	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ff3	      0x41807f0224	                cmp byte [r15 + 2], 0x24	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ff8	     0xf8441020000	                            je 0x400123f	       712	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6	CALL_5
0x4000ffe	        0x48c1e004	                              shl rax, 4	       717	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	CALL_6
0x4001002	          0x4889df	                            mov rdi, rbx	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001005	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_44	CALL_1
0x400100a	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_44	CALL_1
0x400100e	      0x448b440410	      mov r8d, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001013	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001018	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_44	CALL_1
0x400101a	      0x8344240801	                  add dword [rsp + 8], 1	       718	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x400101f	          0x4d89ef	                            mov r15, r13	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4001022	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001025	          0x4131d0	                            xor r8d, edx	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001028	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_44	CALL_1
0x400102b	      0xba7f000000	                           mov edx, 0x7f	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001030	      0xe800000000	                          call 0x4001035	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001035	            0x4898	                                    cdqe	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4001037	      0x450fb67500	                  movzx r14d, byte [r13]	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x400103c	          0x4801c3	                            add rbx, rax	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x400103f	      0xe9a9feffff	                           jmp 0x4000eed	       719	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5
0x4001044	    0x488b0d000000	            mov rcx, qword [0x0400104b] 	        97	stdio2.h	CALL_31
0x400104b	      0xba05000000	                              mov edx, 5	        97	stdio2.h	CALL_31
0x4001050	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001055	      0xbf00000000	                              mov edi, 0	        97	stdio2.h	CALL_31
0x400105a	      0xe800000000	                          call 0x400105f	        97	stdio2.h	CALL_31
0x400105f	      0xe99efbffff	                           jmp 0x4000c02	        97	stdio2.h	CALL_31
0x4001064	        0x8b442404	                mov eax, dword [rsp + 4]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4001068	      0x418d4c24bb	                   lea ecx, [r12 - 0x45]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400106d	        0x4d8d6f01	                      lea r13, [r15 + 1]	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4001071	          0x448823	                    mov byte [rbx], r12b	       772	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4001074	        0xc6430100	                   mov byte [rbx + 1], 0	       773	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x4001078	            0x85c0	                           test eax, eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x400107a	       0xf48442408	              cmovs eax, dword [rsp + 8]	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x400107f	          0x80f933	                            cmp cl, 0x33	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4001082	        0x89442404	                mov dword [rsp + 4], eax	       775	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_10
0x4001086	     0xf87ca000000	                            ja 0x4001156	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400108c	           0xfb6c9	                           movzx ecx, cl	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x400108f	    0xff24cd000000	                       jmp qword [rcx*8]	       777	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2
0x4001096	        0x8b442404	                mov eax, dword [rsp + 4]	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x400109a	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_31
0x40010a2	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x40010a7	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x40010aa	        0x48c1e004	                              shl rax, 4	       893	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_13
0x40010ae	      0x488b4c0410	      mov rcx, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_31
0x40010b3	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x40010b5	      0xe800000000	                          call 0x40010ba	        97	stdio2.h	CALL_31
0x40010ba	      0x8344240801	                  add dword [rsp + 8], 1	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40010bf	      0xe997fbffff	                           jmp 0x4000c5b	       898	bfd.c	FUNCTION_6	WHILE_1	ELSE_3
0x40010c4	      0x410fb64701	               movzx eax, byte [r15 + 1]	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40010c9	            0x3c41	                            cmp al, 0x41	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40010cb	     0xf84df010000	                            je 0x40012b0	       845	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40010d1	            0x3c42	                            cmp al, 0x42	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010d3	            0x75c1	                           jne 0x4001096	       874	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010d5	        0x8b442404	                mov eax, dword [rsp + 4]	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010d9	        0x4d8d6f02	                      lea r13, [r15 + 2]	       878	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010dd	        0x48c1e004	                              shl rax, 4	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010e1	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       879	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18
0x40010e6	          0x4885c0	                           test rax, rax	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x40010e9	     0xf84ad010000	                            je 0x400129c	       880	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	IF_19
0x40010ef	    0x488b90d00000	            mov rdx, qword [rax + 0xd0] 	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x40010f6	          0x4885d2	                           test rdx, rdx	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x40010f9	            0x740a	                            je 0x4001105	       884	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20
0x40010fb	        0xf6424801	               test byte [rdx + 0x48], 1	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x40010ff	     0xf8478010000	                            je 0x400127d	       885	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	ELSE_11	IF_20	CALL_20
0x4001105	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_31
0x4001108	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x400110d	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001112	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x4001115	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4001117	      0xe800000000	                          call 0x400111c	        97	stdio2.h	CALL_31
0x400111c	            0xeb9c	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x400111e	            0x6690	                                     nop	        97	stdio2.h	CALL_31
0x4001120	        0x8b442404	                mov eax, dword [rsp + 4]	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4001124	        0x48c1e004	                              shl rax, 4	       829	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4001128	          0x4585f6	                         test r14d, r14d	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x400112b	     0xf851a010000	                           jne 0x400124b	       828	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_12
0x4001131	    0xf20f10440410	   movsd xmm0, qword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_31
0x4001137	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_31
0x400113f	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001144	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x4001147	      0xb801000000	                              mov eax, 1	        97	stdio2.h	CALL_31
0x400114c	      0xe800000000	                          call 0x4001151	        97	stdio2.h	CALL_31
0x4001151	      0xe964ffffff	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x4001156	      0xba00000000	                              mov edx, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x400115b	      0xbe80030000	                          mov esi, 0x380	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4001160	      0xbf00000000	                              mov edi, 0	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x4001165	      0xe800000000	                          call 0x400116a	       896	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	CALL_21
0x400116a	        0x8b74240c	              mov esi, dword [rsp + 0xc]	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x400116e	            0x85f6	                           test esi, esi	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4001170	            0x7509	                           jne 0x400117b	       790	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_11
0x4001172	          0x4585f6	                         test r14d, r14d	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4001175	     0xf851bffffff	                           jne 0x4001096	       794	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400117b	        0x8b442404	                mov eax, dword [rsp + 4]	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x400117f	    0x488d9424a000	                   lea rdx, [rsp + 0xa0]	        97	stdio2.h	CALL_31
0x4001187	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x400118c	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x400118f	        0x48c1e004	                              shl rax, 4	       797	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_6	SWITCH_3
0x4001193	        0x8b4c0410	      mov ecx, dword [rsp + rax + 0x10] 	        97	stdio2.h	CALL_31
0x4001197	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4001199	      0xe800000000	                          call 0x400119e	        97	stdio2.h	CALL_31
0x400119e	      0xe917ffffff	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x40011a3	       0xf1f440000	                   nop dword [rax + rax]	        97	stdio2.h	CALL_31
0x40011a8	          0x4889ee	                            mov rsi, rbp	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x40011ab	      0xbf25000000	                           mov edi, 0x25	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x40011b0	        0x4983c502	                              add r13, 2	       681	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3
0x40011b4	      0xe800000000	                          call 0x40011b9	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x40011b9	      0xe953faffff	                           jmp 0x4000c11	       679	bfd.c	FUNCTION_6	WHILE_1	ELSE_2	IF_3	CALL_2
0x40011be	          0x8d41cf	                   lea eax, [rcx - 0x31]	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x40011c1	        0x4d8d7d03	                      lea r15, [r13 + 3]	       698	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x40011c5	        0x89442404	                mov dword [rsp + 4], eax	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x40011c9	      0xe9a9fcffff	                           jmp 0x4000e77	       697	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_4
0x40011ce	      0x410fb64f02	               movzx ecx, byte [r15 + 2]	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011d3	        0x8b542408	                mov edx, dword [rsp + 8]	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40011d7	        0x4d8d7702	                      lea r14, [r15 + 2]	       736	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40011db	            0x89d0	                            mov eax, edx	       737	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x40011dd	          0x80f930	                            cmp cl, 0x30	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011e0	            0x7417	                            je 0x40011f9	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011e2	           0xfbef1	                           movsx esi, cl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011e5	           0xfb6c9	                           movzx ecx, cl	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011e8	    0xf68409000000	                test byte [rcx + rcx], 4	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011f0	            0x7407	                            je 0x40011f9	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011f2	      0x41807f0324	                cmp byte [r15 + 3], 0x24	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011f7	            0x7478	                            je 0x4001271	       738	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9	CALL_8
0x40011f9	        0x48c1e004	                              shl rax, 4	       743	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	CALL_9
0x40011fd	      0xb900000000	                              mov ecx, 0	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001202	      0xbe01000000	                              mov esi, 1	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001207	        0x8b540410	      mov edx, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_44	CALL_1
0x400120b	      0x448b440410	      mov r8d, dword [rsp + rax + 0x10] 	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001210	          0x4c89ef	                            mov rdi, r13	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001213	            0x31c0	                            xor eax, eax	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001215	      0x8344240801	                  add dword [rsp + 8], 1	       744	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x400121a	          0x4d89f7	                            mov r15, r14	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x400121d	          0xc1fa1f	                           sar edx, 0x1f	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001220	          0x4131d0	                            xor r8d, edx	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001223	          0x4129d0	                            sub r8d, edx	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001226	    0x48c7c2ffffff	             mov rdx, 0xffffffffffffffff	        33	stdio2.h	FUNCTION_44	CALL_1
0x400122d	      0xe800000000	                          call 0x4001232	        33	stdio2.h	FUNCTION_44	CALL_1
0x4001232	          0x4c63c8	                          movsxd r9, eax	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x4001235	      0x4b8d5c0d00	                     lea rbx, [r13 + r9]	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x400123a	      0xe9b8fcffff	                           jmp 0x4000ef7	       745	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8
0x400123f	          0x8d46cf	                   lea eax, [rsi - 0x31]	       714	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4001242	        0x4d8d6f03	                      lea r13, [r15 + 3]	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x4001246	      0xe9b3fdffff	                           jmp 0x4000ffe	       715	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_5	IF_6
0x400124b	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_31
0x400124f	        0xff740418	           push qword [rsp + rax + 0x18]	        97	stdio2.h	CALL_31
0x4001253	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001258	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x400125b	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x400125d	    0x488d9424b000	                   lea rdx, [rsp + 0xb0]	        97	stdio2.h	CALL_31
0x4001265	      0xe800000000	                          call 0x400126a	        97	stdio2.h	CALL_31
0x400126a	              0x5a	                                 pop rdx	        97	stdio2.h	CALL_31
0x400126b	              0x59	                                 pop rcx	        97	stdio2.h	CALL_31
0x400126c	      0xe949feffff	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x4001271	          0x8d46cf	                   lea eax, [rsi - 0x31]	       740	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4001274	        0x4d8d7704	                      lea r14, [r15 + 4]	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x4001278	      0xe97cffffff	                           jmp 0x40011f9	       741	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	IF_7	IF_8	IF_9
0x400127d	          0x4c8b00	                     mov r8, qword [rax]	        97	stdio2.h	CALL_31
0x4001280	          0x488b0a	                    mov rcx, qword [rdx]	        97	stdio2.h	CALL_31
0x4001283	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001288	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x400128d	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x4001290	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x4001292	      0xe800000000	                          call 0x4001297	        97	stdio2.h	CALL_31
0x4001297	      0xe91efeffff	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x400129c	      0xba00000000	                              mov edx, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x40012a1	      0xbe73030000	                          mov esi, 0x373	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x40012a6	      0xbf00000000	                              mov edi, 0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x40012ab	      0xe800000000	                          call 0x40012b0	       883	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	ELSE_10	IF_18	CALL_19
0x40012b0	        0x8b442404	                mov eax, dword [rsp + 4]	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40012b4	        0x4d8d6f02	                      lea r13, [r15 + 2]	       852	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40012b8	        0x48c1e004	                              shl rax, 4	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40012bc	      0x488b440410	      mov rax, qword [rsp + rax + 0x10] 	       853	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40012c1	          0x4885c0	                           test rax, rax	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x40012c4	     0xf84da000000	                            je 0x40013a4	       854	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_14
0x40012ca	    0x488b90f00000	            mov rdx, qword [rax + 0xf0] 	       858	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13
0x40012d1	          0x4885d2	                           test rdx, rdx	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x40012d4	     0xf842bfeffff	                            je 0x4001105	       859	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x40012da	        0x488b5208	                mov rdx, qword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x40012de	          0x8b5208	                mov edx, dword [rdx + 8]	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x40012e1	          0x83fa05	                              cmp edx, 5	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x40012e4	     0xf848f000000	                            je 0x4001379	       860	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_14
0x40012ea	          0x83fa02	                              cmp edx, 2	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x40012ed	     0xf8512feffff	                           jne 0x4001105	       865	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_17
0x40012f3	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x40012fa	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x40012fd	     0xf8402feffff	                            je 0x4001105	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4001303	        0x488b5240	            mov rdx, qword [rdx + 0x40] 	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4001307	          0x4885d2	                           test rdx, rdx	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x400130a	     0xf84f5fdffff	                            je 0x4001105	       866	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16	CALL_18
0x4001310	          0x4c8b02	                     mov r8, qword [rdx]	       868	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	ELSE_8	IF_16
0x4001313	          0x4d85c0	                             test r8, r8	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x4001316	     0xf84e9fdffff	                            je 0x4001105	       869	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_17
0x400131c	          0x488b08	                    mov rcx, qword [rax]	        97	stdio2.h	CALL_31
0x400131f	      0xba00000000	                              mov edx, 0	        97	stdio2.h	CALL_31
0x4001324	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_31
0x4001329	          0x4889ef	                            mov rdi, rbp	        97	stdio2.h	CALL_31
0x400132c	            0x31c0	                            xor eax, eax	        97	stdio2.h	CALL_31
0x400132e	      0xe800000000	                          call 0x4001333	        97	stdio2.h	CALL_31
0x4001333	      0xe982fdffff	                           jmp 0x40010ba	        97	stdio2.h	CALL_31
0x4001338	      0xba00000000	                              mov edx, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x400133d	      0xbe39040000	                          mov esi, 0x439	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4001342	      0xbf00000000	                              mov edi, 0	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x4001347	      0xe800000000	                          call 0x400134c	      1081	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	CALL_13
0x400134c	      0xba00000000	                              mov edx, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4001351	      0xbebe030000	                          mov esi, 0x3be	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4001356	      0xbf00000000	                              mov edi, 0	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x400135b	      0xe800000000	                          call 0x4001360	       958	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_5	CALL_5
0x4001360	      0xba00000000	                              mov edx, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001365	      0xbed7030000	                          mov esi, 0x3d7	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400136a	      0xbf00000000	                              mov edi, 0	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x400136f	      0xe800000000	                          call 0x4001374	       983	bfd.c	FUNCTION_7	WHILE_1	ELSE_2	IF_8	IF_9	CALL_8
0x4001374	      0xe800000000	                          call 0x4001379	      1141	bfd.c	FUNCTION_8
0x4001379	    0x488b90e00000	            mov rdx, qword [rax + 0xe0] 	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4001380	    0x4883bac00000	               cmp qword [rdx + 0xc0], 0	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x4001388	     0xf8477fdffff	                            je 0x4001105	       861	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15	CALL_15
0x400138e	        0xf6402302	               test byte [rax + 0x23], 2	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4001392	     0xf856dfdffff	                           jne 0x4001105	       862	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	IF_15
0x4001398	    0x4c8b82b00000	              mov r8, qword [rdx + 0xb0]	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x400139f	      0xe96fffffff	                           jmp 0x4001313	       863	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_16
0x40013a4	      0xba00000000	                              mov edx, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x40013a9	      0xbe59030000	                          mov esi, 0x359	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x40013ae	      0xbf00000000	                              mov edi, 0	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
0x40013b3	      0xe800000000	                          call 0x40013b8	       857	bfd.c	FUNCTION_6	WHILE_1	ELSE_3	SWITCH_2	IF_13	CALL_13
bfd_emul_get_maxpagesize	ELSE,0:functions,0:CALL,2:SWITCH,0:IF,1:FOR,0:WHILE,0:DO,0	17
0x4001940	        0x4883ec08	                              sub rsp, 8	      2088	bfd.c	FUNCTION_33
0x4001944	            0x31f6	                            xor esi, esi	      2091	bfd.c	FUNCTION_33	CALL_1
0x4001946	      0xe800000000	                          call 0x400194b	      2091	bfd.c	FUNCTION_33	CALL_1
0x400194b	          0x4885c0	                           test rax, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x400194e	            0x7420	                            je 0x4001970	      2092	bfd.c	FUNCTION_33	IF_1
0x4001950	          0x4889c2	                            mov rdx, rax	      2092	bfd.c	FUNCTION_33	IF_1
0x4001953	            0x31c0	                            xor eax, eax	      2096	bfd.c	FUNCTION_33
0x4001955	        0x837a0805	                  cmp dword [rdx + 8], 5	      2093	bfd.c	FUNCTION_33	IF_1
0x4001959	            0x750b	                           jne 0x4001966	      2093	bfd.c	FUNCTION_33	IF_1
0x400195b	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x4001962	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2094	bfd.c	FUNCTION_33	CALL_2
0x4001966	        0x4883c408	                              add rsp, 8	      2097	bfd.c	FUNCTION_33
0x400196a	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
0x400196b	       0xf1f440000	                   nop dword [rax + rax]	      2097	bfd.c	FUNCTION_33
0x4001970	            0x31c0	                            xor eax, eax	      2096	bfd.c	FUNCTION_33
0x4001972	        0x4883c408	                              add rsp, 8	      2097	bfd.c	FUNCTION_33
0x4001976	              0xc3	                                     ret	      2097	bfd.c	FUNCTION_33
bfd_convert_section_contents	ELSE,3:functions,0:CALL,23:SWITCH,0:IF,9:FOR,0:WHILE,0:DO,0	132
0x4001fb0	        0x448b4f44	            mov r9d, dword [rdi + 0x44] 	      2526	bfd.c	FUNCTION_43	IF_1
0x4001fb4	      0xb801000000	                              mov eax, 1	      2527	bfd.c	FUNCTION_43	IF_1
0x4001fb9	        0x41c1e905	                              shr r9d, 5	      2526	bfd.c	FUNCTION_43	IF_1
0x4001fbd	    0x4181e1ffff0f	                        and r9d, 0xfffff	      2526	bfd.c	FUNCTION_43	IF_1
0x4001fc4	    0x41f7c1008000	                        test r9d, 0x8000	      2526	bfd.c	FUNCTION_43	IF_1
0x4001fcb	            0x750b	                           jne 0x4001fd8	      2526	bfd.c	FUNCTION_43	IF_1
0x4001fcd	        0x4c8b5708	                mov r10, qword [rdi + 8]	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001fd1	      0x41837a0805	                  cmp dword [r10 + 8], 5	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001fd6	            0x7408	                            je 0x4001fe0	      2530	bfd.c	FUNCTION_43	IF_2	CALL_1
0x4001fd8	              0xc3	                                     ret	      2608	bfd.c	FUNCTION_43
0x4001fd9	     0xf1f80000000	                         nop dword [rax]	      2608	bfd.c	FUNCTION_43
0x4001fe0	        0x4c8b5a08	                mov r11, qword [rdx + 8]	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001fe4	      0x41837b0805	                  cmp dword [r11 + 8], 5	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001fe9	            0x75ed	                           jne 0x4001fd8	      2531	bfd.c	FUNCTION_43	IF_2	CALL_2
0x4001feb	            0x4157	                                push r15	      2519	bfd.c	FUNCTION_43
0x4001fed	            0x4156	                                push r14	      2519	bfd.c	FUNCTION_43
0x4001fef	            0x4155	                                push r13	      2519	bfd.c	FUNCTION_43
0x4001ff1	            0x4154	                                push r12	      2519	bfd.c	FUNCTION_43
0x4001ff3	              0x55	                                push rbp	      2519	bfd.c	FUNCTION_43
0x4001ff4	              0x53	                                push rbx	      2519	bfd.c	FUNCTION_43
0x4001ff5	        0x4883ec28	                           sub rsp, 0x28	      2519	bfd.c	FUNCTION_43
0x4001ff9	    0x498b9a680300	           mov rbx, qword [r10 + 0x368] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002000	    0x4d8b9b680300	           mov r11, qword [r11 + 0x368] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002007	    0x488b9b000300	           mov rbx, qword [rbx + 0x300] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x400200e	    0x4d8b9b000300	           mov r11, qword [r11 + 0x300] 	      2536	bfd.c	FUNCTION_43	IF_3	CALL_4
0x4002015	      0x440fb67b0c	           movzx r15d, byte [rbx + 0xc] 	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x400201a	        0x453a7b0c	              cmp r15b, byte [r11 + 0xc]	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x400201e	     0xf84be000000	                            je 0x40020e2	      2535	bfd.c	FUNCTION_43	IF_3	CALL_3
0x4002024	          0x4885f6	                           test rsi, rsi	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x4002027	     0xf84c4000000	                            je 0x40020f1	      2435	bfd.c	FUNCTION_41	IF_1	IF_2
0x400202d	    0x4c8b8ee00000	              mov r9, qword [rsi + 0xe0]	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002034	      0x41f6410908	                   test byte [r9 + 9], 8	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x4002039	     0xf84a3000000	                            je 0x40020e2	      2440	bfd.c	FUNCTION_41	IF_1	ELSE_1	IF_4	CALL_2
0x400203f	        0x4180ff01	                             cmp r15b, 1	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002043	      0x4c89442418	              mov qword [rsp + 0x18], r8	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002048	          0x4989cc	                            mov r12, rcx	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x400204b	          0x4889d5	                            mov rbp, rdx	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x400204e	          0x4989f5	                            mov r13, rsi	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002051	          0x4889fb	                            mov rbx, rdi	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x4002054	     0xf84a6000000	                            je 0x4002100	      2443	bfd.c	FUNCTION_41	IF_1	IF_5	CALL_3
0x400205a	          0x4c8b39	                    mov r15, qword [rcx]	      2544	bfd.c	FUNCTION_43
0x400205d	          0x4c89ff	                            mov rdi, r15	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002060	        0x4d8d7708	                      lea r14, [r15 + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002064	        0x41ff5238	                 call qword [r10 + 0x38]	      2563	bfd.c	FUNCTION_43	ELSE_1	CALL_9
0x4002068	        0x488b4308	                mov rax, qword [rbx + 8]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x400206c	          0x4c89f7	                            mov rdi, r14	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x400206f	          0xff5020	                 call qword [rax + 0x20]	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002072	      0x4889442408	                mov qword [rsp + 8], rax	      2564	bfd.c	FUNCTION_43	ELSE_1	CALL_10
0x4002077	        0x488b4308	                mov rax, qword [rbx + 8]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x400207b	        0x498d7f10	                   lea rdi, [r15 + 0x10]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x400207f	          0xff5020	                 call qword [rax + 0x20]	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x4002082	        0x488b4d08	                mov rcx, qword [rbp + 8]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002086	      0x4889442410	             mov qword [rsp + 0x10], rax	      2565	bfd.c	FUNCTION_43	ELSE_1	CALL_11
0x400208b	          0x4c89fe	                            mov rsi, r15	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x400208e	        0x4d8b6d38	            mov r13, qword [r13 + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002092	      0xbf01000000	                              mov edi, 1	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x4002097	          0xff5148	                 call qword [rcx + 0x48]	      2583	bfd.c	FUNCTION_43	IF_8	CALL_14
0x400209a	        0x488b4d08	                mov rcx, qword [rbp + 8]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x400209e	        0x498d7704	                      lea rsi, [r15 + 4]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x40020a2	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x40020a7	        0x498d5df4	                    lea rbx, [r13 - 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x40020ab	          0xff5148	                 call qword [rcx + 0x48]	      2584	bfd.c	FUNCTION_43	IF_8	CALL_15
0x40020ae	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x40020b3	        0x488b4d08	                mov rcx, qword [rbp + 8]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x40020b7	          0x4c89f6	                            mov rsi, r14	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x40020ba	          0x4889c7	                            mov rdi, rax	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x40020bd	          0xff5148	                 call qword [rcx + 0x48]	      2585	bfd.c	FUNCTION_43	IF_8	CALL_16
0x40020c0	        0x498b3424	                    mov rsi, qword [r12]	        59	string3.h	FUNCTION_62	CALL_3
0x40020c4	        0x498d55e8	                   lea rdx, [r13 - 0x18]	        59	string3.h	FUNCTION_62	CALL_3
0x40020c8	        0x498d7f0c	                    lea rdi, [r15 + 0xc]	        59	string3.h	FUNCTION_62	CALL_3
0x40020cc	        0x4883c618	                           add rsi, 0x18	        59	string3.h	FUNCTION_62	CALL_3
0x40020d0	      0xe800000000	                          call 0x40020d5	        59	string3.h	FUNCTION_62	CALL_3
0x40020d5	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      2606	bfd.c	FUNCTION_43
0x40020da	          0x488918	                    mov qword [rax], rbx	      2606	bfd.c	FUNCTION_43
0x40020dd	      0xb801000000	                              mov eax, 1	      2607	bfd.c	FUNCTION_43
0x40020e2	        0x4883c428	                           add rsp, 0x28	      2608	bfd.c	FUNCTION_43
0x40020e6	              0x5b	                                 pop rbx	      2608	bfd.c	FUNCTION_43
0x40020e7	              0x5d	                                 pop rbp	      2608	bfd.c	FUNCTION_43
0x40020e8	            0x415c	                                 pop r12	      2608	bfd.c	FUNCTION_43
0x40020ea	            0x415d	                                 pop r13	      2608	bfd.c	FUNCTION_43
0x40020ec	            0x415e	                                 pop r14	      2608	bfd.c	FUNCTION_43
0x40020ee	            0x415f	                                 pop r15	      2608	bfd.c	FUNCTION_43
0x40020f0	              0xc3	                                     ret	      2608	bfd.c	FUNCTION_43
0x40020f1	    0x4181e1000002	                        and r9d, 0x20000	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40020f8	     0xf8541ffffff	                           jne 0x400203f	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x40020fe	            0xebe2	                           jmp 0x40020e2	      2437	bfd.c	FUNCTION_41	IF_1	IF_2	IF_3
0x4002100	          0x4c8b39	                    mov r15, qword [rcx]	      2544	bfd.c	FUNCTION_43
0x4002103	          0x4c89ff	                            mov rdi, r15	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x4002106	        0x41ff5238	                 call qword [r10 + 0x38]	      2552	bfd.c	FUNCTION_43	IF_5	CALL_6
0x400210a	        0x488b4308	                mov rax, qword [rbx + 8]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x400210e	        0x498d7f04	                      lea rdi, [r15 + 4]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002112	          0xff5038	                 call qword [rax + 0x38]	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x4002115	      0x4889442408	                mov qword [rsp + 8], rax	      2553	bfd.c	FUNCTION_43	IF_5	CALL_7
0x400211a	        0x488b4308	                mov rax, qword [rbx + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x400211e	        0x498d7f08	                      lea rdi, [r15 + 8]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002122	          0xff5038	                 call qword [rax + 0x38]	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x4002125	        0x498b5d38	            mov rbx, qword [r13 + 0x38] 	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002129	          0x4989c7	                            mov r15, rax	      2554	bfd.c	FUNCTION_43	IF_5	CALL_8
0x400212c	        0x4c8d73f4	                    lea r14, [rbx - 0xc]	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002130	        0x4883c30c	                            add rbx, 0xc	      2571	bfd.c	FUNCTION_43	CALL_12
0x4002134	          0x4889df	                            mov rdi, rbx	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002137	      0xe800000000	                          call 0x400213c	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x400213c	          0x4885c0	                           test rax, rax	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x400213f	          0x4989c5	                            mov r13, rax	      2574	bfd.c	FUNCTION_43	IF_6	CALL_13
0x4002142	            0x7460	                            je 0x40021a4	      2575	bfd.c	FUNCTION_43	IF_6	IF_7
0x4002144	        0x488b4508	                mov rax, qword [rbp + 8]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002148	          0x4c89ee	                            mov rsi, r13	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x400214b	      0xbf01000000	                              mov edi, 1	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002150	          0xff5048	                 call qword [rax + 0x48]	      2590	bfd.c	FUNCTION_43	ELSE_2	CALL_17
0x4002153	        0x488b4508	                mov rax, qword [rbp + 8]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002157	        0x498d7504	                      lea rsi, [r13 + 4]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x400215b	            0x31ff	                            xor edi, edi	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x400215d	          0xff5048	                 call qword [rax + 0x48]	      2591	bfd.c	FUNCTION_43	ELSE_2	CALL_18
0x4002160	        0x488b4508	                mov rax, qword [rbp + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002164	        0x498d7508	                      lea rsi, [r13 + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002168	      0x488b7c2408	                mov rdi, qword [rsp + 8]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x400216d	          0xff5030	                 call qword [rax + 0x30]	      2592	bfd.c	FUNCTION_43	ELSE_2	CALL_19
0x4002170	        0x488b4508	                mov rax, qword [rbp + 8]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002174	        0x498d7510	                   lea rsi, [r13 + 0x10]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x4002178	          0x4c89ff	                            mov rdi, r15	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x400217b	          0xff5030	                 call qword [rax + 0x30]	      2593	bfd.c	FUNCTION_43	ELSE_2	CALL_20
0x400217e	        0x498b0424	                    mov rax, qword [r12]	        53	string3.h	FUNCTION_61	CALL_3
0x4002182	        0x498d7d18	                   lea rdi, [r13 + 0x18]	        53	string3.h	FUNCTION_61	CALL_3
0x4002186	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_61	CALL_3
0x4002189	        0x488d700c	                    lea rsi, [rax + 0xc]	        53	string3.h	FUNCTION_61	CALL_3
0x400218d	      0xe800000000	                          call 0x4002192	        53	string3.h	FUNCTION_61	CALL_3
0x4002192	        0x498b3c24	                    mov rdi, qword [r12]	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x4002196	      0xe800000000	                          call 0x400219b	      2602	bfd.c	FUNCTION_43	ELSE_3	CALL_23
0x400219b	        0x4d892c24	                    mov qword [r12], r13	      2603	bfd.c	FUNCTION_43	ELSE_3
0x400219f	      0xe931ffffff	                           jmp 0x40020d5	      2603	bfd.c	FUNCTION_43	ELSE_3
0x40021a4	            0x31c0	                            xor eax, eax	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
0x40021a6	      0xe937ffffff	                           jmp 0x40020e2	      2576	bfd.c	FUNCTION_43	IF_6	IF_7
bfd_update_compression_header	ELSE,3:functions,0:CALL,14:SWITCH,0:IF,4:FOR,0:WHILE,0:DO,0	80
0x4001cc0	            0x4154	                                push r12	      2313	bfd.c	FUNCTION_39
0x4001cc2	              0x55	                                push rbp	      2313	bfd.c	FUNCTION_39
0x4001cc3	              0x53	                                push rbx	      2313	bfd.c	FUNCTION_39
0x4001cc4	          0x8b4744	            mov eax, dword [rdi + 0x44] 	      2314	bfd.c	FUNCTION_39	IF_1
0x4001cc7	          0xc1e805	                              shr eax, 5	      2314	bfd.c	FUNCTION_39	IF_1
0x4001cca	      0x25ffff0f00	                        and eax, 0xfffff	      2314	bfd.c	FUNCTION_39	IF_1
0x4001ccf	          0xf6c440	                           test ah, 0x40	      2314	bfd.c	FUNCTION_39	IF_1
0x4001cd2	     0xf84f7000000	                            je 0x4001dcf	      2314	bfd.c	FUNCTION_39	IF_1
0x4001cd8	        0x488b4f08	                mov rcx, qword [rdi + 8]	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001cdc	          0x4889fb	                            mov rbx, rdi	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001cdf	        0x83790805	                  cmp dword [rcx + 8], 5	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001ce3	            0x740b	                            je 0x4001cf0	      2316	bfd.c	FUNCTION_39	IF_1	IF_2	CALL_1
0x4001ce5	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001ce6	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001ce7	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001ce9	              0xc3	                                     ret	      2361	bfd.c	FUNCTION_39
0x4001cea	    0x660f1f440000	                    nop word [rax + rax]	      2361	bfd.c	FUNCTION_39
0x4001cf0	      0xa900000200	                       test eax, 0x20000	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001cf5	          0x4889f5	                            mov rbp, rsi	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001cf8	          0x4989d4	                            mov r12, rdx	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001cfb	     0xf84a7000000	                            je 0x4001da8	      2318	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001d01	    0x488bb1680300	           mov rsi, qword [rcx + 0x368] 	      2320	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3
0x4001d08	    0x488b82e00000	            mov rax, qword [rdx + 0xe0] 	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x4001d0f	      0xbf01000000	                              mov edi, 1	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001d14	    0x488148080008	               or qword [rax + 8], 0x800	      2324	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	CALL_3
0x4001d1c	    0x488b86000300	           mov rax, qword [rsi + 0x300] 	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001d23	          0x4889ee	                            mov rsi, rbp	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001d26	        0x80780c01	                 cmp byte [rax + 0xc], 1	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001d2a	            0x7444	                            je 0x4001d70	      2326	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4
0x4001d2c	          0xff5148	                 call qword [rcx + 0x48]	      2339	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_7
0x4001d2f	        0x488b4308	                mov rax, qword [rbx + 8]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001d33	        0x488d7504	                      lea rsi, [rbp + 4]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001d37	            0x31ff	                            xor edi, edi	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001d39	          0xff5048	                 call qword [rax + 0x48]	      2340	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_8
0x4001d3c	        0x488b4308	                mov rax, qword [rbx + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001d40	        0x488d7508	                      lea rsi, [rbp + 8]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001d44	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001d49	          0xff5030	                 call qword [rax + 0x30]	      2341	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_9
0x4001d4c	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d51	        0x488b4308	                mov rax, qword [rbx + 8]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d55	      0xbf01000000	                              mov edi, 1	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d5a	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001d5b	        0x488d7510	                   lea rsi, [rbp + 0x10]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d5f	            0xd3e7	                             shl edi, cl	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d61	        0x488b4030	            mov rax, qword [rax + 0x30] 	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d65	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001d66	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001d68	          0x4863ff	                         movsxd rdi, edi	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d6b	            0xffe0	                                 jmp rax	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d6d	           0xf1f00	                         nop dword [rax]	      2342	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	ELSE_1	CALL_10
0x4001d70	          0xff5148	                 call qword [rcx + 0x48]	      2330	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_4
0x4001d73	        0x488b4308	                mov rax, qword [rbx + 8]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001d77	        0x488d7504	                      lea rsi, [rbp + 4]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001d7b	      0x498b7c2438	            mov rdi, qword [r12 + 0x38] 	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001d80	          0xff5048	                 call qword [rax + 0x48]	      2331	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_5
0x4001d83	      0x418b4c2470	            mov ecx, dword [r12 + 0x70] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d88	        0x488b4308	                mov rax, qword [rbx + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d8c	      0xbf01000000	                              mov edi, 1	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d91	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001d92	        0x488d7508	                      lea rsi, [rbp + 8]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d96	            0xd3e7	                             shl edi, cl	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d98	        0x488b4048	            mov rax, qword [rax + 0x48] 	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001d9c	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001d9d	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001d9f	          0x4863ff	                         movsxd rdi, edi	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001da2	            0xffe0	                                 jmp rax	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001da4	         0xf1f4000	                         nop dword [rax]	      2332	bfd.c	FUNCTION_39	IF_1	IF_2	IF_3	IF_4	CALL_6
0x4001da8	    0x488b82e00000	            mov rax, qword [rdx + 0xe0] 	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4001daf	        0x488d7604	                      lea rsi, [rsi + 4]	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001db3	    0x48816008fff7	 and qword [rax + 8], 0xfffffffffffff7ff	      2349	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_11
0x4001dbb	    0xc746fc5a4c49	        mov dword [rsi - 4], 0x42494c5a 	        53	string3.h	FUNCTION_61	CALL_3
0x4001dc2	              0x5b	                                 pop rbx	      2361	bfd.c	FUNCTION_39
0x4001dc3	              0x5d	                                 pop rbp	      2361	bfd.c	FUNCTION_39
0x4001dc4	            0x415c	                                 pop r12	      2361	bfd.c	FUNCTION_39
0x4001dc6	        0x488b7a38	            mov rdi, qword [rdx + 0x38] 	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001dca	      0xe900000000	                           jmp 0x4001dcf	      2355	bfd.c	FUNCTION_39	IF_1	IF_2	ELSE_2	CALL_13
0x4001dcf	      0xba00000000	                              mov edx, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001dd4	      0xbe38090000	                          mov esi, 0x938	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001dd9	      0xbf00000000	                              mov edi, 0	      2360	bfd.c	FUNCTION_39	CALL_14
0x4001dde	      0xe800000000	                          call 0x4001de3	      2360	bfd.c	FUNCTION_39	CALL_14
_bfd_error_handler	ELSE,0:functions,0:CALL,3:SWITCH,0:IF,0:FOR,0:WHILE,0:DO,0	33
0x4000580	    0x4881ecd80000	                           sub rsp, 0xd8	      1173	bfd.c	FUNCTION_9
0x4000587	            0x84c0	                             test al, al	      1173	bfd.c	FUNCTION_9
0x4000589	      0x4889742428	             mov qword [rsp + 0x28], rsi	      1173	bfd.c	FUNCTION_9
0x400058e	      0x4889542430	             mov qword [rsp + 0x30], rdx	      1173	bfd.c	FUNCTION_9
0x4000593	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      1173	bfd.c	FUNCTION_9
0x4000598	      0x4c89442440	              mov qword [rsp + 0x40], r8	      1173	bfd.c	FUNCTION_9
0x400059d	      0x4c894c2448	              mov qword [rsp + 0x48], r9	      1173	bfd.c	FUNCTION_9
0x40005a2	            0x7437	                            je 0x40005db	      1173	bfd.c	FUNCTION_9
0x40005a4	       0xf29442450	       movaps xmmword [rsp + 0x50], xmm0	      1173	bfd.c	FUNCTION_9
0x40005a9	       0xf294c2460	       movaps xmmword [rsp + 0x60], xmm1	      1173	bfd.c	FUNCTION_9
0x40005ae	       0xf29542470	       movaps xmmword [rsp + 0x70], xmm2	      1173	bfd.c	FUNCTION_9
0x40005b3	     0xf299c248000	       movaps xmmword [rsp + 0x80], xmm3	      1173	bfd.c	FUNCTION_9
0x40005bb	     0xf29a4249000	       movaps xmmword [rsp + 0x90], xmm4	      1173	bfd.c	FUNCTION_9
0x40005c3	     0xf29ac24a000	       movaps xmmword [rsp + 0xa0], xmm5	      1173	bfd.c	FUNCTION_9
0x40005cb	     0xf29b424b000	       movaps xmmword [rsp + 0xb0], xmm6	      1173	bfd.c	FUNCTION_9
0x40005d3	     0xf29bc24c000	       movaps xmmword [rsp + 0xc0], xmm7	      1173	bfd.c	FUNCTION_9
0x40005db	    0x64488b042528	                mov rax, qword fs:[0x28]	      1173	bfd.c	FUNCTION_9
0x40005e4	      0x4889442418	             mov qword [rsp + 0x18], rax	      1173	bfd.c	FUNCTION_9
0x40005e9	            0x31c0	                            xor eax, eax	      1173	bfd.c	FUNCTION_9
0x40005eb	    0x488d8424e000	                   lea rax, [rsp + 0xe0]	      1176	bfd.c	FUNCTION_9	CALL_1
0x40005f3	          0x4889e6	                            mov rsi, rsp	      1177	bfd.c	FUNCTION_9	CALL_2
0x40005f6	      0x4889442408	                mov qword [rsp + 8], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x40005fb	      0x488d442420	                   lea rax, [rsp + 0x20]	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000600	    0xc70424080000	                      mov dword [rsp], 8	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000607	    0xc74424043000	               mov dword [rsp + 4], 0x30	      1176	bfd.c	FUNCTION_9	CALL_1
0x400060f	      0x4889442410	             mov qword [rsp + 0x10], rax	      1176	bfd.c	FUNCTION_9	CALL_1
0x4000614	    0xff1500000000	                 call qword [0x0400061a]	      1177	bfd.c	FUNCTION_9	CALL_2
0x400061a	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1179	bfd.c	FUNCTION_9
0x400061f	    0x644833042528	                xor rax, qword fs:[0x28]	      1179	bfd.c	FUNCTION_9
0x4000628	            0x7508	                           jne 0x4000632	      1179	bfd.c	FUNCTION_9
0x400062a	    0x4881c4d80000	                           add rsp, 0xd8	      1179	bfd.c	FUNCTION_9
0x4000631	              0xc3	                                     ret	      1179	bfd.c	FUNCTION_9
0x4000632	      0xe800000000	                          call 0x4000637	      1179	bfd.c	FUNCTION_9
bfd_emul_get_commonpagesize	ELSE,1:functions,0:CALL,2:SWITCH,0:IF,2:FOR,0:WHILE,0:DO,0	27
0x40019d0	              0x53	                                push rbx	      2159	bfd.c	FUNCTION_36
0x40019d1	            0x89f3	                            mov ebx, esi	      2159	bfd.c	FUNCTION_36
0x40019d3	            0x31f6	                            xor esi, esi	      2162	bfd.c	FUNCTION_36	CALL_1
0x40019d5	      0xe800000000	                          call 0x40019da	      2162	bfd.c	FUNCTION_36	CALL_1
0x40019da	          0x4885c0	                           test rax, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x40019dd	            0x7431	                            je 0x4001a10	      2163	bfd.c	FUNCTION_36	IF_1
0x40019df	          0x4889c2	                            mov rdx, rax	      2163	bfd.c	FUNCTION_36	IF_1
0x40019e2	            0x31c0	                            xor eax, eax	      2174	bfd.c	FUNCTION_36	ELSE_1
0x40019e4	        0x837a0805	                  cmp dword [rdx + 8], 5	      2164	bfd.c	FUNCTION_36	IF_1
0x40019e8	            0x7406	                            je 0x40019f0	      2164	bfd.c	FUNCTION_36	IF_1
0x40019ea	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x40019eb	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x40019ec	         0xf1f4000	                         nop dword [rax]	      2175	bfd.c	FUNCTION_36	ELSE_1
0x40019f0	            0x85db	                           test ebx, ebx	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x40019f2	    0x488b82680300	           mov rax, qword [rdx + 0x368] 	      2168	bfd.c	FUNCTION_36	IF_1	CALL_2
0x40019f9	            0x750d	                           jne 0x4001a08	      2169	bfd.c	FUNCTION_36	IF_1	IF_2
0x40019fb	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2172	bfd.c	FUNCTION_36	IF_1	ELSE_1
0x40019ff	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a00	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a01	     0xf1f80000000	                         nop dword [rax]	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a08	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2170	bfd.c	FUNCTION_36	IF_1	IF_2
0x4001a0c	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a0d	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a0e	            0x6690	                                     nop	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a10	            0x31c0	                            xor eax, eax	      2174	bfd.c	FUNCTION_36	ELSE_1
0x4001a12	              0x5b	                                 pop rbx	      2175	bfd.c	FUNCTION_36	ELSE_1
0x4001a13	              0xc3	                                     ret	      2175	bfd.c	FUNCTION_36	ELSE_1
