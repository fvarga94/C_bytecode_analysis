parse_coff_type	functions,0:WHILE,0:CALL,16:SWITCH,0:ELSE,5:FOR,1:DO,0:IF,8	566
0x40002c0	            0x4157	                                push r15	       145	rdcoff.c	FUNCTION_2
0x40002c2	            0x4156	                                push r14	       145	rdcoff.c	FUNCTION_2
0x40002c4	          0x4989f2	                            mov r10, rsi	       145	rdcoff.c	FUNCTION_2
0x40002c7	            0x4155	                                push r13	       145	rdcoff.c	FUNCTION_2
0x40002c9	            0x4154	                                push r12	       145	rdcoff.c	FUNCTION_2
0x40002cb	          0x4989cf	                            mov r15, rcx	       145	rdcoff.c	FUNCTION_2
0x40002ce	              0x55	                                push rbp	       145	rdcoff.c	FUNCTION_2
0x40002cf	              0x53	                                push rbx	       145	rdcoff.c	FUNCTION_2
0x40002d0	          0x4d63e8	                         movsxd r13, r8d	       145	rdcoff.c	FUNCTION_2
0x40002d3	          0x4889d3	                            mov rbx, rdx	       145	rdcoff.c	FUNCTION_2
0x40002d6	          0x4889fd	                            mov rbp, rdi	       145	rdcoff.c	FUNCTION_2
0x40002d9	          0x4c89ca	                             mov rdx, r9	       145	rdcoff.c	FUNCTION_2
0x40002dc	        0x4883ec68	                           sub rsp, 0x68	       145	rdcoff.c	FUNCTION_2
0x40002e0	    0x64488b042528	                mov rax, qword fs:[0x28]	       145	rdcoff.c	FUNCTION_2
0x40002e9	      0x4889442458	             mov qword [rsp + 0x58], rax	       145	rdcoff.c	FUNCTION_2
0x40002ee	            0x31c0	                            xor eax, eax	       145	rdcoff.c	FUNCTION_2
0x40002f0	    0x488b87f80000	            mov rax, qword [rdi + 0xf8] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x40002f7	    0x4c8ba424a800	            mov r12, qword [rsp + 0xa8] 	       145	rdcoff.c	FUNCTION_2
0x40002ff	          0x8b7038	            mov esi, dword [rax + 0x38] 	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000302	            0x89f1	                            mov ecx, esi	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000304	            0xf7d1	                                 not ecx	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000306	          0x4485e9	                          test ecx, r13d	       148	rdcoff.c	FUNCTION_2	IF_1
0x4000309	     0xf84f1000000	                            je 0x4000400	       148	rdcoff.c	FUNCTION_2	IF_1
0x400030f	          0x8b4844	            mov ecx, dword [rax + 0x44] 	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000312	          0x4489ef	                           mov edi, r13d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000315	          0x4589e8	                           mov r8d, r13d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000318	            0xd3ff	                             sar edi, cl	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x400031a	          0x8b483c	            mov ecx, dword [rax + 0x3c] 	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400031d	          0x4131f8	                            xor r8d, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000320	          0x4421c6	                            and esi, r8d	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000323	            0x31fe	                            xor esi, edi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000325	          0x4489ef	                           mov edi, r13d	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000328	          0x237840	             and edi, dword [rax + 0x40]	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400032b	      0xb801000000	                              mov eax, 1	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000330	          0x4189f0	                            mov r8d, esi	       152	rdcoff.c	FUNCTION_2	IF_1	CALL_1
0x4000333	          0x48d3e0	                             shl rax, cl	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000336	          0x4839c7	                            cmp rdi, rax	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x4000339	     0xf84d9010000	                            je 0x4000518	       154	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_2
0x400033f	      0xb802000000	                              mov eax, 2	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000344	          0x48d3e0	                             shl rax, cl	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000347	          0x4839c7	                            cmp rdi, rax	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x400034a	     0xf8490050000	                            je 0x40008e0	       160	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_5
0x4000350	      0xb803000000	                              mov eax, 3	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000355	          0x48d3e0	                             shl rax, cl	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000358	          0x4839c7	                            cmp rdi, rax	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x400035b	     0xf8557050000	                           jne 0x40008b8	       167	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_8
0x4000361	          0x4d85c9	                             test r9, r9	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x4000364	    0x49c7c5ffffff	             mov r13, 0xffffffffffffffff	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x400036b	            0x7451	                            je 0x40003be	       171	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	IF_5
0x400036d	      0x450fb76910	           movzx r13d, word [r9 + 0x10] 	       184	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000372	        0x498d4110	                    lea rax, [r9 + 0x10]	       183	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x4000376	        0x664585ed	                         test r13w, r13w	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400037a	            0x7434	                            je 0x40003b0	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400037c	      0x410fb74912	            movzx ecx, word [r9 + 0x12] 	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000381	        0x498d4112	                    lea rax, [r9 + 0x12]	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000385	          0x6685c9	                             test cx, cx	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000388	      0x6641894910	                mov word [r9 + 0x10], cx	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400038d	            0x7421	                            je 0x40003b0	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400038f	      0x410fb74914	            movzx ecx, word [r9 + 0x14] 	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000394	        0x498d4114	                    lea rax, [r9 + 0x14]	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x4000398	          0x6685c9	                             test cx, cx	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x400039b	      0x6641894912	                mov word [r9 + 0x12], cx	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003a0	            0x740e	                            je 0x40003b0	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003a2	      0x410fb74116	            movzx eax, word [r9 + 0x16] 	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003a7	      0x6641894114	                mov word [r9 + 0x14], ax	       186	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003ac	        0x498d4116	                    lea rax, [r9 + 0x16]	       185	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3	FOR_1
0x40003b0	          0x4531db	                          xor r11d, r11d	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003b3	        0x4183ed01	                             sub r13d, 1	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003b7	        0x66448918	                    mov word [rax], r11w	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003bb	          0x4d63ed	                        movsxd r13, r13d	       187	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	ELSE_3
0x40003be	            0x4154	                                push r12	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003c0	            0x6a00	                                  push 0	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003c2	          0x4989d1	                             mov r9, rdx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003c5	          0x4889ef	                            mov rdi, rbp	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003c8	          0x4889da	                            mov rdx, rbx	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003cb	          0x4c89f9	                            mov rcx, r15	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003ce	          0x4c89d6	                            mov rsi, r10	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003d1	      0xe8eafeffff	                call sym.parse_coff_type	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003d6	        0x488b5328	            mov rdx, qword [rbx + 0x28] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x40003da	          0x4889c5	                            mov rbp, rax	       190	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_9
0x40003dd	            0x4158	                                  pop r8	       249	rdcoff.c	FUNCTION_3	IF_1
0x40003df	            0x4159	                                  pop r9	       249	rdcoff.c	FUNCTION_3	IF_1
0x40003e1	          0x4885d2	                           test rdx, rdx	       249	rdcoff.c	FUNCTION_3	IF_1
0x40003e4	     0xf842e050000	                            je 0x4000918	       249	rdcoff.c	FUNCTION_3	IF_1
0x40003ea	          0x4531c9	                            xor r9d, r9d	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003ed	          0x4d89e8	                             mov r8, r13	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003f0	            0x31c9	                            xor ecx, ecx	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003f2	          0x4889ee	                            mov rsi, rbp	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003f5	          0x4c89e7	                            mov rdi, r12	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003f8	      0xe800000000	                          call 0x40003fd	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003fd	            0xeb6b	                           jmp 0x400046a	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x40003ff	              0x90	                                     nop	       192	rdcoff.c	FUNCTION_2	IF_1	ELSE_2	IF_4	CALL_10
0x4000400	          0x4d85c9	                             test r9, r9	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000403	     0xf8487000000	                            je 0x4000490	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000409	          0x4d8b31	                     mov r14, qword [r9]	       209	rdcoff.c	FUNCTION_2	IF_6
0x400040c	          0x4d85f6	                           test r14, r14	       209	rdcoff.c	FUNCTION_2	IF_6
0x400040f	            0x7e7f	                           jle 0x4000490	       209	rdcoff.c	FUNCTION_2	IF_6
0x4000411	    0x4981fe8f3e00	                         cmp r14, 0x3e8f	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000418	     0xf8f62070000	                            jg 0x4000b80	       115	rdcoff.c	FUNCTION_1	IF_1
0x400041e	        0x4983fe0f	                            cmp r14, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000422	          0x4d89f5	                            mov r13, r14	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000425	            0x7e26	                           jle 0x400044d	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000427	    0x660f1f840000	                    nop word [rax + rax]	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000430	          0x488b2b	                    mov rbp, qword [rbx]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000433	          0x4885ed	                           test rbp, rbp	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000436	     0xf8494000000	                            je 0x40004d0	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x400043c	        0x4983ed10	                           sub r13, 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x4000440	          0x4889eb	                            mov rbx, rbp	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x4000443	        0x4983fd0f	                            cmp r13, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000447	            0x7fe7	                            jg 0x4000430	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000449	        0x4183e60f	                           and r14d, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x400044d	          0x488b2b	                    mov rbp, qword [rbx]	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000450	          0x4885ed	                           test rbp, rbp	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000453	     0xf84e8040000	                            je 0x4000941	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000459	      0x4a8d74f508	              lea rsi, [rbp + r14*8 + 8]	       135	rdcoff.c	FUNCTION_1
0x400045e	          0x488b06	                    mov rax, qword [rsi]	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000461	          0x4885c0	                           test rax, rax	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x4000464	     0xf8450050000	                            je 0x40009ba	       216	rdcoff.c	FUNCTION_2	IF_6	IF_7
0x400046a	      0x488b742458	            mov rsi, qword [rsp + 0x58] 	       233	rdcoff.c	FUNCTION_2
0x400046f	    0x644833342528	                xor rsi, qword fs:[0x28]	       233	rdcoff.c	FUNCTION_2
0x4000478	     0xf85fd060000	                           jne 0x4000b7b	       233	rdcoff.c	FUNCTION_2
0x400047e	        0x4883c468	                           add rsp, 0x68	       233	rdcoff.c	FUNCTION_2
0x4000482	              0x5b	                                 pop rbx	       233	rdcoff.c	FUNCTION_2
0x4000483	              0x5d	                                 pop rbp	       233	rdcoff.c	FUNCTION_2
0x4000484	            0x415c	                                 pop r12	       233	rdcoff.c	FUNCTION_2
0x4000486	            0x415d	                                 pop r13	       233	rdcoff.c	FUNCTION_2
0x4000488	            0x415e	                                 pop r14	       233	rdcoff.c	FUNCTION_2
0x400048a	            0x415f	                                 pop r15	       233	rdcoff.c	FUNCTION_2
0x400048c	              0xc3	                                     ret	       233	rdcoff.c	FUNCTION_2
0x400048d	           0xf1f00	                         nop dword [rax]	       233	rdcoff.c	FUNCTION_2
0x4000490	    0x8bbc24a00000	            mov edi, dword [rsp + 0xa0] 	       229	rdcoff.c	FUNCTION_2	IF_8
0x4000497	      0xb800000000	                              mov eax, 0	       229	rdcoff.c	FUNCTION_2	IF_8
0x400049c	            0x85ff	                           test edi, edi	       229	rdcoff.c	FUNCTION_2	IF_8
0x400049e	        0x480f44d0	                          cmove rdx, rax	       229	rdcoff.c	FUNCTION_2	IF_8
0x40004a2	        0x4183fd10	                          cmp r13d, 0x10	       247	rdcoff.c	FUNCTION_3	IF_1
0x40004a6	            0x770d	                            ja 0x40004b5	       247	rdcoff.c	FUNCTION_3	IF_1
0x40004a8	          0x4963c5	                        movsxd rax, r13d	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004ab	      0x488b44c308	       mov rax, qword [rbx + rax*8 + 8] 	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004b0	          0x4885c0	                           test rax, rax	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004b3	            0x75b5	                           jne 0x400046a	       249	rdcoff.c	FUNCTION_3	IF_1
0x40004b5	        0x4183fd10	                          cmp r13d, 0x10	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004b9	     0xf87e8030000	                            ja 0x40008a7	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004bf	          0x4489e8	                           mov eax, r13d	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004c2	    0xff24c5000000	                       jmp qword [rax*8]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004c9	     0xf1f80000000	                         nop dword [rax]	       255	rdcoff.c	FUNCTION_3	SWITCH_1
0x40004d0	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40004d5	      0xe800000000	                          call 0x40004da	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40004da	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x40004de	          0x488903	                    mov qword [rbx], rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x40004e1	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x40004e8	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x40004f3	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x40004f7	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x40004fa	    0x8d8888000000	                   lea ecx, [rax + 0x88]	        90	string3.h	FUNCTION_12	CALL_6
0x4000500	          0x4889e8	                            mov rax, rbp	        90	string3.h	FUNCTION_12	CALL_6
0x4000503	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000506	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000509	          0x488b2b	                    mov rbp, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x400050c	      0xe92bffffff	                           jmp 0x400043c	        90	string3.h	FUNCTION_12	CALL_6
0x4000511	     0xf1f80000000	                         nop dword [rax]	        90	string3.h	FUNCTION_12	CALL_6
0x4000518	            0x4154	                                push r12	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400051a	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000521	          0x4c89d6	                            mov rsi, r10	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000524	          0x4c89f9	                            mov rcx, r15	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000527	          0x4889da	                            mov rdx, rbx	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400052a	          0x4889ef	                            mov rdi, rbp	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400052d	              0x50	                                push rax	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x400052e	      0xe88dfdffff	                call sym.parse_coff_type	       156	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_3
0x4000533	          0x4c89e7	                            mov rdi, r12	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000536	          0x4889c6	                            mov rsi, rax	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000539	      0xe800000000	                          call 0x400053e	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x400053e	            0x415c	                                 pop r12	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000540	            0x415d	                                 pop r13	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000542	      0xe923ffffff	                           jmp 0x400046a	       158	rdcoff.c	FUNCTION_2	IF_1	IF_2	CALL_4
0x4000547	      0xbe0c000000	                            mov esi, 0xc	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400054c	          0x4c89e7	                            mov rdi, r12	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400054f	      0xe800000000	                          call 0x4000554	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000554	      0xbe00000000	                              mov esi, 0	       300	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000559	          0x4889c2	                            mov rdx, rax	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x400055c	         0xf1f4000	                         nop dword [rax]	       299	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_9
0x4000560	          0x4c89e7	                            mov rdi, r12	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000563	      0xe800000000	                          call 0x4000568	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000568	        0x4183fd10	                          cmp r13d, 0x10	       369	rdcoff.c	FUNCTION_3	IF_6
0x400056c	     0xf87f8feffff	                            ja 0x400046a	       369	rdcoff.c	FUNCTION_3	IF_6
0x4000572	      0x4a8944eb08	        mov qword [rbx + r13*8 + 8], rax	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000577	      0xe9eefeffff	                           jmp 0x400046a	       370	rdcoff.c	FUNCTION_3	IF_6
0x400057c	      0xba01000000	                              mov edx, 1	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000581	      0xbe04000000	                              mov esi, 4	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000586	          0x4c89e7	                            mov rdi, r12	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000589	      0xe800000000	                          call 0x400058e	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x400058e	      0xbe00000000	                              mov esi, 0	       320	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000593	          0x4889c2	                            mov rdx, rax	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000596	            0xebc8	                           jmp 0x4000560	       319	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_13
0x4000598	      0xba01000000	                              mov edx, 1	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x400059d	      0xbe04000000	                              mov esi, 4	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40005a2	          0x4c89e7	                            mov rdi, r12	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40005a5	      0xe800000000	                          call 0x40005aa	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40005aa	      0xbe00000000	                              mov esi, 0	       315	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005af	          0x4889c2	                            mov rdx, rax	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40005b2	            0xebac	                           jmp 0x4000560	       314	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_12
0x40005b4	      0xba01000000	                              mov edx, 1	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005b9	      0xbe02000000	                              mov esi, 2	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005be	          0x4c89e7	                            mov rdi, r12	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005c1	      0xe800000000	                          call 0x40005c6	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005c6	      0xbe00000000	                              mov esi, 0	       310	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005cb	          0x4889c2	                            mov rdx, rax	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005ce	            0xeb90	                           jmp 0x4000560	       309	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_11
0x40005d0	      0xba01000000	                              mov edx, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005d5	      0xbe01000000	                              mov esi, 1	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005da	          0x4c89e7	                            mov rdi, r12	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005dd	      0xe800000000	                          call 0x40005e2	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005e2	      0xbe00000000	                              mov esi, 0	       305	rdcoff.c	FUNCTION_3	SWITCH_1
0x40005e7	          0x4889c2	                            mov rdx, rax	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005ea	      0xe971ffffff	                           jmp 0x4000560	       304	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_10
0x40005ef	          0x4885d2	                           test rdx, rdx	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x40005f2	     0xf845a050000	                            je 0x4000b52	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x40005f8	        0x488b4218	            mov rax, qword [rdx + 0x18] 	       351	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4
0x40005fc	      0xbf50000000	                           mov edi, 0x50	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000601	        0x4c891424	                    mov qword [rsp], r10	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000605	          0x4531ed	                          xor r13d, r13d	       501	rdcoff.c	FUNCTION_5
0x4000608	      0x4889442408	                mov qword [rsp + 8], rax	       501	rdcoff.c	FUNCTION_5
0x400060d	      0xe800000000	                          call 0x4000612	       499	rdcoff.c	FUNCTION_5	CALL_1
0x4000612	      0xbf50000000	                           mov edi, 0x50	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000617	      0x4889442418	             mov qword [rsp + 0x18], rax	       499	rdcoff.c	FUNCTION_5	CALL_1
0x400061c	      0xe800000000	                          call 0x4000621	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000621	        0x4c8b1424	                    mov r10, qword [rsp]	       500	rdcoff.c	FUNCTION_5	CALL_2
0x4000625	      0x4889442410	             mov qword [rsp + 0x10], rax	       500	rdcoff.c	FUNCTION_5	CALL_2
0x400062a	    0xc74424200a00	             mov dword [rsp + 0x20], 0xa	       498	rdcoff.c	FUNCTION_5
0x4000632	        0x498b4218	            mov rax, qword [r10 + 0x18] 	       498	rdcoff.c	FUNCTION_5
0x4000636	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       498	rdcoff.c	FUNCTION_5
0x4000640	      0x483b442408	                cmp rax, qword [rsp + 8]	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000645	            0x7d5b	                           jge 0x40006a2	       505	rdcoff.c	FUNCTION_5	WHILE_1
0x4000647	        0x498b4210	            mov rax, qword [r10 + 0x10] 	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x400064b	        0x493b4208	                cmp rax, qword [r10 + 8]	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x400064f	            0x7d51	                           jge 0x40006a2	       506	rdcoff.c	FUNCTION_5	WHILE_1
0x4000651	          0x498b12	                    mov rdx, qword [r10]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x4000654	          0x4889ef	                            mov rdi, rbp	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000657	        0x4c891424	                    mov qword [rsp], r10	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x400065b	        0x4c8b34c2	            mov r14, qword [rdx + rax*8]	       511	rdcoff.c	FUNCTION_5	WHILE_1
0x400065f	      0x488d542430	                   lea rdx, [rsp + 0x30]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000664	          0x4c89f6	                            mov rsi, r14	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000667	      0xe800000000	                          call 0x400066c	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x400066c	            0x85c0	                           test eax, eax	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x400066e	        0x4c8b1424	                    mov r10, qword [rsp]	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000672	     0xf8492040000	                            je 0x4000b0a	       513	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_3
0x4000678	       0xfb6542451	           movzx edx, byte [rsp + 0x51] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x400067d	        0x498b4218	            mov rax, qword [r10 + 0x18] 	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000681	      0x4983421001	               add qword [r10 + 0x10], 1	       520	rdcoff.c	FUNCTION_5	WHILE_1
0x4000686	      0x488d440201	                lea rax, [rdx + rax + 1]	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x400068b	       0xfb6542450	           movzx edx, byte [rsp + 0x50] 	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000690	        0x49894218	             mov qword [r10 + 0x18], rax	       521	rdcoff.c	FUNCTION_5	WHILE_1
0x4000694	          0x80fa10	                            cmp dl, 0x10	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x4000697	     0xf84e5020000	                            je 0x4000982	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x400069d	          0x80fa66	                            cmp dl, 0x66	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x40006a0	            0x759e	                           jne 0x4000640	       523	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1
0x40006a2	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       546	rdcoff.c	FUNCTION_5
0x40006a7	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40006ac	          0x4c89e7	                            mov rdi, r12	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40006af	    0x4ac704e80000	              mov qword [rax + r13*8], 0	       546	rdcoff.c	FUNCTION_5
0x40006b7	          0x4889c6	                            mov rsi, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40006ba	      0xe800000000	                          call 0x40006bf	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40006bf	          0x4889c5	                            mov rbp, rax	       548	rdcoff.c	FUNCTION_5	CALL_12
0x40006c2	    0x4981ff8f3e00	                         cmp r15, 0x3e8f	       115	rdcoff.c	FUNCTION_1	IF_1
0x40006c9	     0xf8fb9040000	                            jg 0x4000b88	       115	rdcoff.c	FUNCTION_1	IF_1
0x40006cf	        0x4983ff0f	                            cmp r15, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006d3	            0x7e28	                           jle 0x40006fd	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006d5	          0x4d89fc	                            mov r12, r15	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006d8	     0xf1f84000000	                   nop dword [rax + rax]	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006e0	          0x4c8b2b	                    mov r13, qword [rbx]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40006e3	          0x4d85ed	                           test r13, r13	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40006e6	     0xf84b6030000	                            je 0x4000aa2	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40006ec	        0x4983ec10	                           sub r12, 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x40006f0	          0x4c89eb	                            mov rbx, r13	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40006f3	        0x4983fc0f	                            cmp r12, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006f7	            0x7fe7	                            jg 0x40006e0	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006f9	        0x4183e70f	                           and r15d, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40006fd	          0x488b03	                    mov rax, qword [rbx]	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000700	          0x4885c0	                           test rax, rax	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000703	     0xf84dd030000	                            je 0x4000ae6	       129	rdcoff.c	FUNCTION_1	IF_3
0x4000709	      0x4a896cf808	        mov qword [rax + r15*8 + 8], rbp	       358	rdcoff.c	FUNCTION_3	SWITCH_1
0x400070e	          0x4889e8	                            mov rax, rbp	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000711	      0xe954fdffff	                           jmp 0x400046a	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000716	          0x4885d2	                           test rdx, rdx	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x4000719	     0xf841f040000	                            je 0x4000b3e	       338	rdcoff.c	FUNCTION_3	SWITCH_1	IF_3
0x400071f	        0x4883ec08	                              sub rsp, 8	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000723	        0x4c8b4a18	              mov r9, qword [rdx + 0x18]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000727	        0x4c8d420a	                     lea r8, [rdx + 0xa]	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400072b	            0x4154	                                push r12	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400072d	          0x4889da	                            mov rdx, rbx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000730	          0x4889ef	                            mov rdi, rbp	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000733	      0xb909000000	                              mov ecx, 9	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000738	          0x4c89d6	                            mov rsi, r10	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x400073b	      0xe850040000	  call sym.parse_coff_struct_type.isra.3	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000740	          0x4889c5	                            mov rbp, rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000743	              0x58	                                 pop rax	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000744	              0x5a	                                 pop rdx	       341	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_2	CALL_18
0x4000745	    0x4981ff8f3e00	                         cmp r15, 0x3e8f	       115	rdcoff.c	FUNCTION_1	IF_1
0x400074c	     0xf8f36040000	                            jg 0x4000b88	       115	rdcoff.c	FUNCTION_1	IF_1
0x4000752	        0x4983ff0f	                            cmp r15, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000756	            0x7ea5	                           jle 0x40006fd	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000758	          0x4d89fc	                            mov r12, r15	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x400075b	       0xf1f440000	                   nop dword [rax + rax]	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000760	          0x4c8b2b	                    mov r13, qword [rbx]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000763	          0x4d85ed	                           test r13, r13	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x4000766	     0xf84f2020000	                            je 0x4000a5e	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x400076c	        0x4983ec10	                           sub r12, 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x4000770	          0x4c89eb	                            mov rbx, r13	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x4000773	        0x4983fc0f	                            cmp r12, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000777	            0x7fe7	                            jg 0x4000760	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x4000779	      0xe97bffffff	                           jmp 0x40006f9	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x400077e	          0x4885d2	                           test rdx, rdx	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x4000781	     0xf84dd030000	                            je 0x4000b64	       324	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2
0x4000787	        0x4883ec08	                              sub rsp, 8	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400078b	        0x4c8b4a18	              mov r9, qword [rdx + 0x18]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400078f	        0x4c8d420a	                     lea r8, [rdx + 0xa]	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000793	            0x4154	                                push r12	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x4000795	      0xb908000000	                              mov ecx, 8	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400079a	          0x4c89d6	                            mov rsi, r10	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x400079d	          0x4889ef	                            mov rdi, rbp	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007a0	          0x4889da	                            mov rdx, rbx	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007a3	      0xe8e8030000	  call sym.parse_coff_struct_type.isra.3	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007a8	              0x59	                                 pop rcx	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007a9	              0x5e	                                 pop rsi	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007aa	          0x4889c5	                            mov rbp, rax	       328	rdcoff.c	FUNCTION_3	SWITCH_1	ELSE_1	CALL_15
0x40007ad	    0x4981ff8f3e00	                         cmp r15, 0x3e8f	       115	rdcoff.c	FUNCTION_1	IF_1
0x40007b4	     0xf8fce030000	                            jg 0x4000b88	       115	rdcoff.c	FUNCTION_1	IF_1
0x40007ba	        0x4983ff0f	                            cmp r15, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007be	          0x4d89fc	                            mov r12, r15	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007c1	     0xf8e36ffffff	                           jle 0x40006fd	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007c7	    0x660f1f840000	                    nop word [rax + rax]	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007d0	          0x4c8b2b	                    mov r13, qword [rbx]	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40007d3	          0x4d85ed	                           test r13, r13	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40007d6	     0xf843e020000	                            je 0x4000a1a	       120	rdcoff.c	FUNCTION_1	WHILE_1	IF_2
0x40007dc	        0x4983ec10	                           sub r12, 0x10	       126	rdcoff.c	FUNCTION_1	WHILE_1
0x40007e0	          0x4c89eb	                            mov rbx, r13	       125	rdcoff.c	FUNCTION_1	WHILE_1
0x40007e3	        0x4983fc0f	                            cmp r12, 0xf	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007e7	            0x7fe7	                            jg 0x40007d0	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007e9	      0xe90bffffff	                           jmp 0x40006f9	       118	rdcoff.c	FUNCTION_1	WHILE_1
0x40007ee	      0xbe08000000	                              mov esi, 8	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x40007f3	          0x4c89e7	                            mov rdi, r12	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x40007f6	      0xe800000000	                          call 0x40007fb	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x40007fb	      0xbe00000000	                              mov esi, 0	       295	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000800	          0x4889c2	                            mov rdx, rax	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000803	      0xe958fdffff	                           jmp 0x4000560	       294	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_8
0x4000808	            0x31d2	                            xor edx, edx	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400080a	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400080f	          0x4c89e7	                            mov rdi, r12	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000812	      0xe800000000	                          call 0x4000817	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000817	      0xbe00000000	                              mov esi, 0	       280	rdcoff.c	FUNCTION_3	SWITCH_1
0x400081c	          0x4889c2	                            mov rdx, rax	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400081f	      0xe93cfdffff	                           jmp 0x4000560	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000824	            0x31d2	                            xor edx, edx	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000826	      0xbe02000000	                              mov esi, 2	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400082b	          0x4c89e7	                            mov rdi, r12	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400082e	      0xe800000000	                          call 0x4000833	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000833	      0xbe00000000	                              mov esi, 0	       274	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000838	          0x4889c2	                            mov rdx, rax	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x400083b	      0xe920fdffff	                           jmp 0x4000560	       273	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_4
0x4000840	            0x31d2	                            xor edx, edx	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000842	      0xbe01000000	                              mov esi, 1	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000847	          0x4c89e7	                            mov rdi, r12	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400084a	      0xe800000000	                          call 0x400084f	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400084f	      0xbe00000000	                              mov esi, 0	       269	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000854	          0x4889c2	                            mov rdx, rax	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x4000857	      0xe904fdffff	                           jmp 0x4000560	       268	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_3
0x400085c	          0x4c89e7	                            mov rdi, r12	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400085f	      0xe800000000	                          call 0x4000864	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000864	      0xbe00000000	                              mov esi, 0	       264	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000869	          0x4889c2	                            mov rdx, rax	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x400086c	      0xe9effcffff	                           jmp 0x4000560	       263	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_2
0x4000871	      0xbe04000000	                              mov esi, 4	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000876	          0x4c89e7	                            mov rdi, r12	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000879	      0xe800000000	                          call 0x400087e	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x400087e	      0xbe00000000	                              mov esi, 0	       290	rdcoff.c	FUNCTION_3	SWITCH_1
0x4000883	          0x4889c2	                            mov rdx, rax	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x4000886	      0xe9d5fcffff	                           jmp 0x4000560	       289	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_7
0x400088b	            0x31d2	                            xor edx, edx	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x400088d	      0xbe04000000	                              mov esi, 4	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x4000892	          0x4c89e7	                            mov rdi, r12	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x4000895	      0xe800000000	                          call 0x400089a	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x400089a	      0xbe00000000	                              mov esi, 0	       285	rdcoff.c	FUNCTION_3	SWITCH_1
0x400089f	          0x4889c2	                            mov rdx, rax	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40008a2	      0xe9b9fcffff	                           jmp 0x4000560	       284	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_6
0x40008a7	          0x4c89e7	                            mov rdi, r12	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x40008aa	      0xe800000000	                          call 0x40008af	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x40008af	      0xe9b4fcffff	                           jmp 0x4000568	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x40008b4	         0xf1f4000	                         nop dword [rax]	       258	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_1
0x40008b8	      0xba05000000	                              mov edx, 5	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008bd	      0xbe00000000	                              mov esi, 0	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008c2	            0x31ff	                            xor edi, edi	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008c4	      0xe800000000	                          call 0x40008c9	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008c9	          0x4489ee	                           mov esi, r13d	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008cc	          0x4889c7	                            mov rdi, rax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008cf	            0x31c0	                            xor eax, eax	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008d1	      0xe800000000	                          call 0x40008d6	       202	rdcoff.c	FUNCTION_2	IF_1	ELSE_4	CALL_13
0x40008d6	            0x31c0	                            xor eax, eax	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40008d8	      0xe98dfbffff	                           jmp 0x400046a	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40008dd	           0xf1f00	                         nop dword [rax]	       203	rdcoff.c	FUNCTION_2	IF_1	ELSE_4
0x40008e0	            0x4154	                                push r12	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008e2	    0x8b8424a80000	            mov eax, dword [rsp + 0xa8] 	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008e9	          0x4889da	                            mov rdx, rbx	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008ec	          0x4c89d6	                            mov rsi, r10	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008ef	          0x4889ef	                            mov rdi, rbp	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008f2	          0x4c89f9	                            mov rcx, r15	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008f5	              0x50	                                push rax	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008f6	      0xe8c5f9ffff	                call sym.parse_coff_type	       162	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_6
0x40008fb	            0x31c9	                            xor ecx, ecx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40008fd	            0x31d2	                            xor edx, edx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x40008ff	          0x4889c6	                            mov rsi, rax	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000902	          0x4c89e7	                            mov rdi, r12	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000905	      0xe800000000	                          call 0x400090a	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x400090a	              0x5b	                                 pop rbx	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x400090b	              0x5d	                                 pop rbp	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x400090c	      0xe959fbffff	                           jmp 0x400046a	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000911	     0xf1f80000000	                         nop dword [rax]	       164	rdcoff.c	FUNCTION_2	IF_1	ELSE_1	IF_3	CALL_7
0x4000918	      0xbe04000000	                              mov esi, 4	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x400091d	          0x4c89e7	                            mov rdi, r12	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000920	      0xe800000000	                          call 0x4000925	       279	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_5
0x4000925	      0xbe00000000	                              mov esi, 0	       365	rdcoff.c	FUNCTION_3	CALL_23
0x400092a	          0x4889c2	                            mov rdx, rax	       365	rdcoff.c	FUNCTION_3	CALL_23
0x400092d	          0x4c89e7	                            mov rdi, r12	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000930	      0xe800000000	                          call 0x4000935	       365	rdcoff.c	FUNCTION_3	CALL_23
0x4000935	        0x48894328	             mov qword [rbx + 0x28], rax	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000939	          0x4889c2	                            mov rdx, rax	       370	rdcoff.c	FUNCTION_3	IF_6
0x400093c	      0xe9a9faffff	                           jmp 0x40003ea	       370	rdcoff.c	FUNCTION_3	IF_6
0x4000941	      0xbf88000000	                           mov edi, 0x88	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000946	      0xe800000000	                          call 0x400094b	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x400094b	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x400094f	          0x488903	                    mov qword [rbx], rax	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000952	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000959	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000964	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x4000968	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x400096b	    0x8d8888000000	                   lea ecx, [rax + 0x88]	        90	string3.h	FUNCTION_12	CALL_6
0x4000971	          0x4889e8	                            mov rax, rbp	        90	string3.h	FUNCTION_12	CALL_6
0x4000974	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000977	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x400097a	          0x488b2b	                    mov rbp, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x400097d	      0xe9d7faffff	                           jmp 0x4000459	        90	string3.h	FUNCTION_12	CALL_6
0x4000982	        0x418d5501	                      lea edx, [r13 + 1]	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000986	        0x39542420	            cmp dword [rsp + 0x20], edx 	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400098a	            0x7e3d	                           jle 0x40009c9	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x400098c	        0x498b4608	                mov rax, qword [r14 + 8]	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000990	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000995	        0x4a8904ef	            mov qword [rdi + r13*8], rax	       535	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_10
0x4000999	        0x498b7620	            mov rsi, qword [r14 + 0x20] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x400099d	        0x498b4610	            mov rax, qword [r14 + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40009a1	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40009a6	        0x48034628	             add rax, qword [rsi + 0x28]	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40009aa	        0x4a8904ef	            mov qword [rdi + r13*8], rax	       536	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	CALL_11
0x40009ae	          0x4c63ea	                         movsxd r13, edx	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009b1	        0x498b4218	            mov rax, qword [r10 + 0x18] 	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009b5	      0xe986fcffff	                           jmp 0x4000640	       526	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009ba	            0x31d2	                            xor edx, edx	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x40009bc	          0x4c89e7	                            mov rdi, r12	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x40009bf	      0xe800000000	                          call 0x40009c4	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x40009c4	      0xe9a1faffff	                           jmp 0x400046a	       219	rdcoff.c	FUNCTION_2	IF_6	CALL_15
0x40009c9	      0x834424200a	             add dword [rsp + 0x20], 0xa	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009ce	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009d3	      0x4c63442420	          movsxd r8, dword [rsp + 0x20] 	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009d8	      0x4c89542428	             mov qword [rsp + 0x28], r10	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009dd	        0x89542424	             mov dword [rsp + 0x24], edx	       528	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009e1	        0x49c1e003	                               shl r8, 3	       530	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2	CALL_8
0x40009e5	          0x4c89c6	                             mov rsi, r8	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009e8	        0x4c890424	                     mov qword [rsp], r8	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009ec	      0xe800000000	                          call 0x40009f1	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009f1	        0x4c8b0424	                     mov r8, qword [rsp]	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009f5	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009fa	      0x4889442418	             mov qword [rsp + 0x18], rax	       529	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x40009ff	          0x4c89c6	                             mov rsi, r8	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a02	      0xe800000000	                          call 0x4000a07	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a07	      0x4c8b542428	            mov r10, qword [rsp + 0x28] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a0c	      0x4889442410	             mov qword [rsp + 0x10], rax	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a11	        0x8b542424	            mov edx, dword [rsp + 0x24] 	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a15	      0xe972ffffff	                           jmp 0x400098c	       531	rdcoff.c	FUNCTION_5	WHILE_1	SWITCH_1	IF_2
0x4000a1a	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a1f	      0xe800000000	                          call 0x4000a24	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a24	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x4000a28	          0x488903	                    mov qword [rbx], rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a2b	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000a32	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000a3d	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x4000a41	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x4000a44	          0x4889c1	                            mov rcx, rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000a47	          0x4c89e8	                            mov rax, r13	        90	string3.h	FUNCTION_12	CALL_6
0x4000a4a	    0x81c188000000	                           add ecx, 0x88	        90	string3.h	FUNCTION_12	CALL_6
0x4000a50	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000a53	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000a56	          0x4c8b2b	                    mov r13, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x4000a59	      0xe97efdffff	                           jmp 0x40007dc	        90	string3.h	FUNCTION_12	CALL_6
0x4000a5e	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a63	      0xe800000000	                          call 0x4000a68	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a68	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x4000a6c	          0x488903	                    mov qword [rbx], rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000a6f	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000a76	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000a81	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x4000a85	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x4000a88	          0x4889c1	                            mov rcx, rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000a8b	          0x4c89e8	                            mov rax, r13	        90	string3.h	FUNCTION_12	CALL_6
0x4000a8e	    0x81c188000000	                           add ecx, 0x88	        90	string3.h	FUNCTION_12	CALL_6
0x4000a94	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000a97	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000a9a	          0x4c8b2b	                    mov r13, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x4000a9d	      0xe9cafcffff	                           jmp 0x400076c	        90	string3.h	FUNCTION_12	CALL_6
0x4000aa2	      0xbf88000000	                           mov edi, 0x88	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000aa7	      0xe800000000	                          call 0x4000aac	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000aac	        0x488d7808	                      lea rdi, [rax + 8]	        90	string3.h	FUNCTION_12	CALL_6
0x4000ab0	          0x488903	                    mov qword [rbx], rax	       122	rdcoff.c	FUNCTION_1	WHILE_1	IF_2	CALL_3
0x4000ab3	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000aba	    0x48c780800000	               mov qword [rax + 0x80], 0	        90	string3.h	FUNCTION_12	CALL_6
0x4000ac5	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        90	string3.h	FUNCTION_12	CALL_6
0x4000ac9	          0x4829f8	                            sub rax, rdi	        90	string3.h	FUNCTION_12	CALL_6
0x4000acc	          0x4889c1	                            mov rcx, rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000acf	          0x4c89e8	                            mov rax, r13	        90	string3.h	FUNCTION_12	CALL_6
0x4000ad2	    0x81c188000000	                           add ecx, 0x88	        90	string3.h	FUNCTION_12	CALL_6
0x4000ad8	          0xc1e903	                              shr ecx, 3	        90	string3.h	FUNCTION_12	CALL_6
0x4000adb	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_12	CALL_6
0x4000ade	          0x4c8b2b	                    mov r13, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x4000ae1	      0xe906fcffff	                           jmp 0x40006ec	        90	string3.h	FUNCTION_12	CALL_6
0x4000ae6	      0xbf88000000	                           mov edi, 0x88	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000aeb	      0xe800000000	                          call 0x4000af0	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000af0	          0x4889c2	                            mov rdx, rax	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000af3	          0x488903	                    mov qword [rbx], rax	       131	rdcoff.c	FUNCTION_1	IF_3	CALL_5
0x4000af6	      0xb922000000	                           mov ecx, 0x22	        90	string3.h	FUNCTION_12	CALL_6
0x4000afb	            0x31c0	                            xor eax, eax	        90	string3.h	FUNCTION_12	CALL_6
0x4000afd	          0x4889d7	                            mov rdi, rdx	        90	string3.h	FUNCTION_12	CALL_6
0x4000b00	            0xf3ab	              rep stosd dword [rdi], eax	        90	string3.h	FUNCTION_12	CALL_6
0x4000b02	          0x488b03	                    mov rax, qword [rbx]	        90	string3.h	FUNCTION_12	CALL_6
0x4000b05	      0xe9fffbffff	                           jmp 0x4000709	        90	string3.h	FUNCTION_12	CALL_6
0x4000b0a	      0xe800000000	                          call 0x4000b0f	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b0f	            0x89c7	                            mov edi, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b11	      0xe800000000	                          call 0x4000b16	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b16	      0xba05000000	                              mov edx, 5	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b1b	          0x4889c5	                            mov rbp, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b1e	      0xbe00000000	                              mov esi, 0	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b23	            0x31ff	                            xor edi, edi	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b25	      0xe800000000	                          call 0x4000b2a	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b2a	          0x4889ee	                            mov rsi, rbp	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b2d	          0x4889c7	                            mov rdi, rax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b30	            0x31c0	                            xor eax, eax	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b32	      0xe800000000	                          call 0x4000b37	       515	rdcoff.c	FUNCTION_5	WHILE_1	IF_1	CALL_5
0x4000b37	            0x31ed	                            xor ebp, ebp	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x4000b39	      0xe984fbffff	                           jmp 0x40006c2	       517	rdcoff.c	FUNCTION_5	WHILE_1	IF_1
0x4000b3e	            0x31c9	                            xor ecx, ecx	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b40	            0x31f6	                            xor esi, esi	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b42	          0x4c89e7	                            mov rdi, r12	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b45	      0xe800000000	                          call 0x4000b4a	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b4a	          0x4889c5	                            mov rbp, rax	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b4d	      0xe9f3fbffff	                           jmp 0x4000745	       339	rdcoff.c	FUNCTION_3	SWITCH_1	CALL_17
0x4000b52	            0x31f6	                            xor esi, esi	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000b54	          0x4c89e7	                            mov rdi, r12	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000b57	      0xe800000000	                          call 0x4000b5c	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000b5c	          0x4889c5	                            mov rbp, rax	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000b5f	      0xe95efbffff	                           jmp 0x40006c2	       352	rdcoff.c	FUNCTION_3	SWITCH_1	IF_4	CALL_20
0x4000b64	            0x31c9	                            xor ecx, ecx	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b66	      0xbe01000000	                              mov esi, 1	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b6b	          0x4c89e7	                            mov rdi, r12	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b6e	      0xe800000000	                          call 0x4000b73	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b73	          0x4889c5	                            mov rbp, rax	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b76	      0xe932fcffff	                           jmp 0x40007ad	       325	rdcoff.c	FUNCTION_3	SWITCH_1	IF_2	CALL_14
0x4000b7b	      0xe800000000	                          call 0x4000b80	       233	rdcoff.c	FUNCTION_2
0x4000b80	          0x4c89f7	                            mov rdi, r14	       233	rdcoff.c	FUNCTION_2
0x4000b83	      0xe800000000	                          call 0x4000b88	       233	rdcoff.c	FUNCTION_2
0x4000b88	          0x4c89ff	                            mov rdi, r15	       233	rdcoff.c	FUNCTION_2
0x4000b8b	      0xe800000000	  call sym.parse_coff_struct_type.isra.3	       233	rdcoff.c	FUNCTION_2
parse_coff	functions,0:WHILE,2:CALL,43:SWITCH,1:ELSE,5:FOR,1:DO,0:IF,28	379
0x4000e30	            0x4157	                                push r15	       660	rdcoff.c	FUNCTION_8
0x4000e32	            0x4156	                                push r14	       660	rdcoff.c	FUNCTION_8
0x4000e34	            0x4155	                                push r13	       660	rdcoff.c	FUNCTION_8
0x4000e36	            0x4154	                                push r12	       660	rdcoff.c	FUNCTION_8
0x4000e38	          0x4989f5	                            mov r13, rsi	       660	rdcoff.c	FUNCTION_8
0x4000e3b	              0x55	                                push rbp	       660	rdcoff.c	FUNCTION_8
0x4000e3c	              0x53	                                push rbx	       660	rdcoff.c	FUNCTION_8
0x4000e3d	          0x4889d6	                            mov rsi, rdx	       660	rdcoff.c	FUNCTION_8
0x4000e40	          0x4889fb	                            mov rbx, rdi	       660	rdcoff.c	FUNCTION_8
0x4000e43	          0x4889cd	                            mov rbp, rcx	       660	rdcoff.c	FUNCTION_8
0x4000e46	      0xb911000000	                           mov ecx, 0x11	       660	rdcoff.c	FUNCTION_8
0x4000e4b	    0x4881ec680100	                          sub rsp, 0x168	       660	rdcoff.c	FUNCTION_8
0x4000e52	      0x4889542408	                mov qword [rsp + 8], rdx	       660	rdcoff.c	FUNCTION_8
0x4000e57	      0x4889542448	             mov qword [rsp + 0x48], rdx	       674	rdcoff.c	FUNCTION_8
0x4000e5c	    0x488d9424c800	                   lea rdx, [rsp + 0xc8]	       674	rdcoff.c	FUNCTION_8
0x4000e64	    0x64488b042528	                mov rax, qword fs:[0x28]	       660	rdcoff.c	FUNCTION_8
0x4000e6d	    0x488984245801	            mov qword [rsp + 0x158], rax	       660	rdcoff.c	FUNCTION_8
0x4000e75	            0x31c0	                            xor eax, eax	       660	rdcoff.c	FUNCTION_8
0x4000e77	          0x4889d7	                            mov rdi, rdx	       660	rdcoff.c	FUNCTION_8
0x4000e7a	            0x31c0	                            xor eax, eax	       660	rdcoff.c	FUNCTION_8
0x4000e7c	          0x4885f6	                           test rsi, rsi	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000e7f	      0x4c896c2440	             mov qword [rsp + 0x40], r13	       673	rdcoff.c	FUNCTION_8
0x4000e84	    0x48c744245000	               mov qword [rsp + 0x50], 0	       675	rdcoff.c	FUNCTION_8
0x4000e8d	    0x48c744245800	               mov qword [rsp + 0x58], 0	       676	rdcoff.c	FUNCTION_8
0x4000e96	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	       678	rdcoff.c	FUNCTION_8
0x4000ea2	          0xf348ab	              rep stosq qword [rdi], rax	       678	rdcoff.c	FUNCTION_8
0x4000ea5	     0xf8e15020000	                           jle 0x40010c0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000eab	            0x31c0	                            xor eax, eax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ead	    0xc74424140000	               mov dword [rsp + 0x14], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000eb5	    0x48c744242800	               mov qword [rsp + 0x28], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ebe	    0x48c744243000	               mov qword [rsp + 0x30], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ec7	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ecf	    0xc74424380000	               mov dword [rsp + 0x38], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ed7	    0x48c744242000	               mov qword [rsp + 0x20], 0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ee0	    0x48c70424ffff	     mov qword [rsp], 0xffffffffffffffff	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ee8	      0xe9bb000000	                           jmp 0x4000fa8	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000eed	           0xf1f00	                         nop dword [rax]	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000ef0	            0x3c05	                               cmp al, 5	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000ef2	     0xf84a0000000	                            je 0x4000f98	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000ef8	     0xf8782030000	                            ja 0x4001280	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000efe	            0x3c02	                               cmp al, 2	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f00	     0xf8462030000	                            je 0x4001268	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f06	            0x3c03	                               cmp al, 3	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f08	     0xf85ee020000	                           jne 0x40011fc	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4000f0e	    0x440fb744247e	           movzx r8d, word [rsp + 0x7e] 	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000f14	        0x664585c0	                           test r8w, r8w	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000f18	            0x747e	                            je 0x4000f98	       759	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_7
0x4000f1a	    0x488b8bf80000	            mov rcx, qword [rbx + 0xf8] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f21	          0x4489c6	                            mov esi, r8d	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f24	      0xbf02000000	                              mov edi, 2	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f29	        0x66237140	               and si, word [rcx + 0x40]	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f2d	          0x8b493c	            mov ecx, dword [rcx + 0x3c] 	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f30	          0x48d3e7	                             shl rdi, cl	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f33	           0xfb7f6	                           movzx esi, si	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f36	          0x4839fe	                            cmp rsi, rdi	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f39	     0xf8539030000	                           jne 0x4001278	       764	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_14
0x4000f3f	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000f47	        0x89442438	             mov dword [rsp + 0x38], eax	       767	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000f4b	        0x410fb7c0	                          movzx eax, r8w	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000f4f	        0x8944243c	             mov dword [rsp + 0x3c], eax	       768	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8
0x4000f53	    0x48c744243000	               mov qword [rsp + 0x30], 0	       772	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	ELSE_2
0x4000f5c	            0x741b	                            je 0x4000f79	       769	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	IF_9
0x4000f5e	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f63	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f68	        0x48037028	             add rsi, qword [rax + 0x28]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f6c	    0x4803b4249800	             add rsi, qword [rsp + 0x98]	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f74	      0x4889742430	             mov qword [rsp + 0x30], rsi	       770	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_15
0x4000f79	        0x488b4308	                mov rax, qword [rbx + 8]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f7d	          0x4c89e6	                            mov rsi, r12	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f80	          0x4889df	                            mov rdi, rbx	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f83	    0xff9030020000	                call qword [rax + 0x230]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f89	      0x4c89742420	             mov qword [rsp + 0x20], r14	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4000f8e	      0x4889442428	             mov qword [rsp + 0x28], rax	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f93	       0xf1f440000	                   nop dword [rax + rax]	       773	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_8	CALL_16
0x4000f98	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000f9d	      0x4839442408	                cmp qword [rsp + 8], rax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fa2	     0xf8e18010000	                           jle 0x40010c0	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fa8	      0x4d8b64c500	            mov r12, qword [r13 + rax*8]	       699	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fad	      0x488d542460	                   lea rdx, [rsp + 0x60]	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fb2	          0x4889df	                            mov rdi, rbx	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fb5	          0x4c89e6	                            mov rsi, r12	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fb8	      0xe800000000	                          call 0x4000fbd	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fbd	            0x85c0	                           test eax, eax	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fbf	     0xf842b040000	                            je 0x40013f0	       701	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_1
0x4000fc5	     0xfb694248100	           movzx edx, byte [rsp + 0x81] 	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fcd	      0x4c8b7c2458	            mov r15, qword [rsp + 0x58] 	       710	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fd2	          0x4531c9	                            xor r9d, r9d	       718	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000fd5	      0x4d8b742408	                mov r14, qword [r12 + 8]	       708	rdcoff.c	FUNCTION_8	WHILE_1	CALL_6
0x4000fda	    0x488344245001	               add qword [rsp + 0x50], 1	       712	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fe0	          0x4889d0	                            mov rax, rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fe3	      0x498d541701	                lea rdx, [r15 + rdx + 1]	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fe8	            0x84c0	                             test al, al	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000fea	      0x4889542458	             mov qword [rsp + 0x58], rdx	       713	rdcoff.c	FUNCTION_8	WHILE_1
0x4000fef	     0xf85db000000	                           jne 0x40010d0	       717	rdcoff.c	FUNCTION_8	WHILE_1	IF_2
0x4000ff5	        0x4c393c24	                    cmp qword [rsp], r15	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000ff9	     0xf8400010000	                            je 0x40010ff	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4000fff	     0xfb684248000	           movzx eax, byte [rsp + 0x80] 	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001007	            0x3c64	                            cmp al, 0x64	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001009	     0xf8481010000	                            je 0x4001190	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400100f	     0xf86dbfeffff	                           jbe 0x4000ef0	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001015	            0x3c6a	                            cmp al, 0x6a	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001017	     0xf87d3010000	                            ja 0x40011f0	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400101d	            0x3c68	                            cmp al, 0x68	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400101f	     0xf8373ffffff	                           jae 0x4000f98	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001025	            0x3c65	                            cmp al, 0x65	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001027	     0xf8533010000	                           jne 0x4001160	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400102d	        0x41803e2e	                    cmp byte [r14], 0x2e	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4001031	     0xf8561ffffff	                           jne 0x4000f98	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4001037	      0x410fb64601	               movzx eax, byte [r14 + 1]	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x400103c	            0x3c62	                            cmp al, 0x62	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x400103e	     0xf8494020000	                            je 0x40012d8	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x4001044	            0x3c65	                            cmp al, 0x65	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001046	     0xf854cffffff	                           jne 0x4000f98	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400104c	      0x41807e0266	                cmp byte [r14 + 2], 0x66	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001051	     0xf8541ffffff	                           jne 0x4000f98	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001057	      0x41807e0300	                   cmp byte [r14 + 3], 0	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x400105c	     0xf8536ffffff	                           jne 0x4000f98	       836	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	CALL_30
0x4001062	      0x448b442414	            mov r8d, dword [rsp + 0x14] 	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001067	          0x4585c0	                           test r8d, r8d	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x400106a	     0xf845e040000	                            je 0x40014ce	       838	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x4001070	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001075	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x400107a	          0x4889ef	                            mov rdi, rbp	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x400107d	        0x48037028	             add rsi, qword [rax + 0x28]	       844	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_21	CALL_33
0x4001081	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001086	          0x4839c6	                            cmp rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001089	        0x480f42f0	                          cmovb rsi, rax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x400108d	      0xe800000000	                          call 0x4001092	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001092	            0x85c0	                           test eax, eax	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x4001094	     0xf8496000000	                            je 0x4001130	       846	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_22	CALL_35
0x400109a	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x400109f	      0x4839442408	                cmp qword [rsp + 8], rax	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40010a4	    0xc74424140000	               mov dword [rsp + 0x14], 0	       850	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x40010ac	    0x48c744243000	               mov qword [rsp + 0x30], 0	       849	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19
0x40010b5	     0xf8fedfeffff	                            jg 0x4000fa8	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40010bb	       0xf1f440000	                   nop dword [rax + rax]	       690	rdcoff.c	FUNCTION_8	WHILE_1
0x40010c0	      0xb801000000	                              mov eax, 1	       879	rdcoff.c	FUNCTION_8
0x40010c5	            0xeb6b	                           jmp 0x4001132	       879	rdcoff.c	FUNCTION_8
0x40010c7	    0x660f1f840000	                    nop word [rax + rax]	       879	rdcoff.c	FUNCTION_8
0x40010d0	    0x488d8c249000	                   lea rcx, [rsp + 0x90]	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010d8	            0x31d2	                            xor edx, edx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010da	          0x4c89e6	                            mov rsi, r12	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010dd	          0x4889df	                            mov rdi, rbx	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010e0	      0xe800000000	                          call 0x40010e5	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010e5	            0x85c0	                           test eax, eax	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010e7	     0xf84a0030000	                            je 0x400148d	       721	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_7
0x40010ed	        0x4c393c24	                    cmp qword [rsp], r15	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x40010f1	    0x4c8d8c249000	                    lea r9, [rsp + 0x90]	       727	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1
0x40010f9	     0xf8500ffffff	                           jne 0x4000fff	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x40010ff	    0x80bc24800000	            cmp byte [rsp + 0x80], 0x67 	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x4001107	      0x4c894c2418	              mov qword [rsp + 0x18], r9	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x400110c	            0x7462	                            je 0x4001170	       730	rdcoff.c	FUNCTION_8	WHILE_1	IF_4
0x400110e	      0xbe00000000	                              mov esi, 0	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001113	          0x4889ef	                            mov rdi, rbp	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001116	      0xe800000000	                          call 0x400111b	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x400111b	            0x85c0	                           test eax, eax	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x400111d	      0x4c8b4c2418	              mov r9, qword [rsp + 0x18]	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001122	     0xf85d7feffff	                           jne 0x4000fff	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001128	     0xf1f84000000	                   nop dword [rax + rax]	       734	rdcoff.c	FUNCTION_8	WHILE_1	IF_4	IF_5	CALL_12
0x4001130	            0x31c0	                            xor eax, eax	       705	rdcoff.c	FUNCTION_8	WHILE_1	IF_1
0x4001132	    0x488b9c245801	           mov rbx, qword [rsp + 0x158] 	       880	rdcoff.c	FUNCTION_8
0x400113a	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       880	rdcoff.c	FUNCTION_8
0x4001143	     0xf8591030000	                           jne 0x40014da	       880	rdcoff.c	FUNCTION_8
0x4001149	    0x4881c4680100	                          add rsp, 0x168	       880	rdcoff.c	FUNCTION_8
0x4001150	              0x5b	                                 pop rbx	       880	rdcoff.c	FUNCTION_8
0x4001151	              0x5d	                                 pop rbp	       880	rdcoff.c	FUNCTION_8
0x4001152	            0x415c	                                 pop r12	       880	rdcoff.c	FUNCTION_8
0x4001154	            0x415d	                                 pop r13	       880	rdcoff.c	FUNCTION_8
0x4001156	            0x415e	                                 pop r14	       880	rdcoff.c	FUNCTION_8
0x4001158	            0x415f	                                 pop r15	       880	rdcoff.c	FUNCTION_8
0x400115a	              0xc3	                                     ret	       880	rdcoff.c	FUNCTION_8
0x400115b	       0xf1f440000	                   nop dword [rax + rax]	       880	rdcoff.c	FUNCTION_8
0x4001160	            0x3c67	                            cmp al, 0x67	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001162	     0xf8594000000	                           jne 0x40011fc	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001168	     0xf1f84000000	                   nop dword [rax + rax]	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001170	      0x488b442470	            mov rax, qword [rsp + 0x70] 	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001175	          0x4c89f6	                            mov rsi, r14	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001178	          0x4889ef	                            mov rdi, rbp	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x400117b	        0x48890424	                    mov qword [rsp], rax	       751	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400117f	      0xe800000000	                          call 0x4001184	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001184	            0x85c0	                           test eax, eax	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001186	     0xf850cfeffff	                           jne 0x4000f98	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x400118c	            0xeba2	                           jmp 0x4001130	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x400118e	            0x6690	                                     nop	       752	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_6	CALL_13
0x4001190	        0x41803e2e	                    cmp byte [r14], 0x2e	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x4001194	     0xf85fefdffff	                           jne 0x4000f98	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x400119a	      0x410fb64601	               movzx eax, byte [r14 + 1]	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x400119f	            0x3c62	                            cmp al, 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011a1	     0xf84f1000000	                            je 0x4001298	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40011a7	            0x3c65	                            cmp al, 0x65	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011a9	     0xf85e9fdffff	                           jne 0x4000f98	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011af	      0x41807e0262	                cmp byte [r14 + 2], 0x62	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011b4	     0xf85defdffff	                           jne 0x4000f98	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011ba	      0x41807e0300	                   cmp byte [r14 + 3], 0	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011bf	     0xf85d3fdffff	                           jne 0x4000f98	       860	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	CALL_39
0x40011c5	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011ca	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011cf	          0x4889ef	                            mov rdi, rbp	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011d2	        0x48037028	             add rsi, qword [rax + 0x28]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011d6	      0xe800000000	                          call 0x40011db	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011db	            0x85c0	                           test eax, eax	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011dd	     0xf85b5fdffff	                           jne 0x4000f98	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011e3	      0xe948ffffff	                           jmp 0x4001130	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011e8	     0xf1f84000000	                   nop dword [rax + rax]	       862	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_5	IF_25	IF_26	CALL_41
0x40011f0	            0x3c7f	                            cmp al, 0x7f	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40011f2	            0x7474	                            je 0x4001268	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40011f4	            0x3cff	                            cmp al, 0xff	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40011f6	     0xf849cfdffff	                            je 0x4000f98	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x40011fc	              0x55	                                push rbp	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x40011fd	            0x6a01	                                  push 1	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x40011ff	    0x440fb784248e	           movzx r8d, word [rsp + 0x8e] 	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001208	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001210	      0x488d742450	                   lea rsi, [rsp + 0x50]	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001215	          0x4889df	                            mov rdi, rbx	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001218	          0x4c89f9	                            mov rcx, r15	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x400121b	      0xe8a0f0ffff	                call sym.parse_coff_type	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001220	          0x4885c0	                           test rax, rax	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001223	          0x4989c1	                             mov r9, rax	       868	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_42
0x4001226	              0x5e	                                 pop rsi	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001227	              0x5f	                                 pop rdi	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x4001228	     0xf8402ffffff	                            je 0x4001130	       870	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_27
0x400122e	        0x4883ec08	                              sub rsp, 8	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001232	          0x4c89fa	                            mov rdx, r15	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001235	          0x4989e8	                             mov r8, rbp	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001238	        0x8b44241c	            mov eax, dword [rsp + 0x1c] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400123c	          0x4c89e6	                            mov rsi, r12	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400123f	              0x50	                                push rax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001240	     0xfb68c249000	           movzx ecx, byte [rsp + 0x90] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001248	    0x488dbc24d000	                   lea rdi, [rsp + 0xd0]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001250	      0xe8ebedffff	       call sym.parse_coff_symbol.isra.4	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001255	            0x85c0	                           test eax, eax	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001257	              0x5a	                                 pop rdx	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001258	              0x59	                                 pop rcx	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001259	     0xf8539fdffff	                           jne 0x4000f98	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400125f	      0xe9ccfeffff	                           jmp 0x4001130	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001264	         0xf1f4000	                         nop dword [rax]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001268	    0x440fb744247e	           movzx r8d, word [rsp + 0x7e] 	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x400126e	      0xe9a7fcffff	                           jmp 0x4000f1a	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001273	       0xf1f440000	                   nop dword [rax + rax]	       872	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_28	CALL_43
0x4001278	              0x55	                                push rbp	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001279	            0x6a01	                                  push 1	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400127b	            0xeb8b	                           jmp 0x4001208	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x400127d	           0xf1f00	                         nop dword [rax]	       776	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	CALL_17
0x4001280	            0x3c07	                               cmp al, 7	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001282	     0xf8410fdffff	                            je 0x4000f98	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001288	            0x3c0e	                             cmp al, 0xe	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x400128a	     0xf856cffffff	                           jne 0x40011fc	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001290	      0xe903fdffff	                           jmp 0x4000f98	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001295	           0xf1f00	                         nop dword [rax]	       738	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1
0x4001298	      0x41807e0262	                cmp byte [r14 + 2], 0x62	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x400129d	     0xf85f5fcffff	                           jne 0x4000f98	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40012a3	      0x41807e0300	                   cmp byte [r14 + 3], 0	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40012a8	     0xf85eafcffff	                           jne 0x4000f98	       855	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	CALL_36
0x40012ae	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012b3	      0x498b742410	            mov rsi, qword [r12 + 0x10] 	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012b8	          0x4889ef	                            mov rdi, rbp	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012bb	        0x48037028	             add rsi, qword [rax + 0x28]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012bf	      0xe800000000	                          call 0x40012c4	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012c4	            0x85c0	                           test eax, eax	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012c6	     0xf85ccfcffff	                           jne 0x4000f98	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012cc	      0xe95ffeffff	                           jmp 0x4001130	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012d1	     0xf1f80000000	                         nop dword [rax]	       857	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_23	IF_24	CALL_38
0x40012d8	      0x41807e0266	                cmp byte [r14 + 2], 0x66	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40012dd	     0xf85b5fcffff	                           jne 0x4000f98	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40012e3	      0x41807e0300	                   cmp byte [r14 + 3], 0	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40012e8	     0xf85aafcffff	                           jne 0x4000f98	       786	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_19
0x40012ee	    0x48837c242000	               cmp qword [rsp + 0x20], 0	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x40012f4	     0xf84b1010000	                            je 0x40014ab	       788	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13
0x40012fa	    0x488b93f80000	            mov rdx, qword [rbx + 0xf8] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001301	      0x448b44243c	            mov r8d, dword [rsp + 0x3c] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001306	          0x4889df	                            mov rdi, rbx	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001309	          0x8b4a44	            mov ecx, dword [rdx + 0x44] 	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400130c	          0x4489c0	                            mov eax, r8d	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x400130f	            0xd3f8	                             sar eax, cl	       796	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_23
0x4001311	          0x4c89f9	                            mov rcx, r15	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001314	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001317	        0x44234238	             and r8d, dword [rdx + 0x38]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400131b	              0x55	                                push rbp	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400131c	            0x6a00	                                  push 0	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400131e	    0x488d9424d000	                   lea rdx, [rsp + 0xd0]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001326	      0x488d742450	                   lea rsi, [rsp + 0x50]	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400132b	          0x4131c0	                            xor r8d, eax	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x400132e	      0xe88defffff	                call sym.parse_coff_type	       795	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	CALL_22
0x4001333	          0x4885c0	                           test rax, rax	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x4001336	            0x4159	                                  pop r9	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x4001338	            0x415a	                                 pop r10	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x400133a	     0xf84f0fdffff	                            je 0x4001130	       797	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_14
0x4001340	      0x498b542420	            mov rdx, qword [r12 + 0x20] 	       802	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_26
0x4001345	        0x8b7c2438	            mov edi, dword [rsp + 0x38] 	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001349	      0x4d8b442410	              mov r8, qword [r12 + 0x10]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400134e	        0x4c034228	              add r8, qword [rdx + 0x28]	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001352	          0x83ff02	                              cmp edi, 2	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001355	     0xf84cd000000	                            je 0x4001428	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x400135b	            0x31c9	                            xor ecx, ecx	       652	rdcoff.c	FUNCTION_7
0x400135d	          0x83ff7f	                           cmp edi, 0x7f	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001360	     0xf84c2000000	                            je 0x4001428	       644	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001366	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400136b	          0x4889c2	                            mov rdx, rax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400136e	          0x4889ef	                            mov rdi, rbp	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001371	      0xe800000000	                          call 0x4001376	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001376	            0x85c0	                           test eax, eax	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x4001378	     0xf84b2fdffff	                            je 0x4001130	       800	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_15	CALL_24
0x400137e	    0x48837c242800	               cmp qword [rsp + 0x28], 0	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x4001384	     0xf84dd000000	                            je 0x4001467	       805	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x400138a	          0x4531f6	                          xor r14d, r14d	       811	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x400138d	    0x80bc24810000	                cmp byte [rsp + 0x81], 0	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001395	            0x740d	                            je 0x40013a4	       810	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	IF_17
0x4001397	    0x440fb7b42498	          movzx r14d, word [rsp + 0x98] 	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x40013a0	        0x4183ee01	                             sub r14d, 1	       813	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	ELSE_3
0x40013a4	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x40013a9	        0x4c8b7828	            mov r15, qword [rax + 0x28] 	       815	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	CALL_28
0x40013ad	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x40013b2	        0x4c8d6010	                   lea r12, [rax + 0x10]	       817	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16
0x40013b6	          0x8b4010	            mov eax, dword [rax + 0x10] 	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013b9	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013bb	            0x750f	                           jne 0x40013cc	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013bd	            0xeb79	                           jmp 0x4001438	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013bf	              0x90	                                     nop	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013c0	        0x4983c410	                           add r12, 0x10	       825	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013c4	        0x418b0424	                    mov eax, dword [r12]	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013c8	            0x85c0	                           test eax, eax	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013ca	            0x746c	                            je 0x4001438	       819	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2
0x40013cc	          0x4c89fa	                            mov rdx, r15	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013cf	      0x4903542408	                add rdx, qword [r12 + 8]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013d4	        0x428d3430	                    lea esi, [rax + r14]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013d8	          0x4889ef	                            mov rdi, rbp	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013db	      0xe800000000	                          call 0x40013e0	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013e0	            0x85c0	                           test eax, eax	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013e2	            0x75dc	                           jne 0x40013c0	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013e4	      0xe947fdffff	                           jmp 0x4001130	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013e9	     0xf1f80000000	                         nop dword [rax]	       821	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_16	WHILE_2	IF_18	CALL_29
0x40013f0	      0xe800000000	                          call 0x40013f5	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40013f5	            0x89c7	                            mov edi, eax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40013f7	      0xe800000000	                          call 0x40013fc	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x40013fc	      0xba05000000	                              mov edx, 5	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001401	          0x4889c3	                            mov rbx, rax	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001404	      0xbe00000000	                              mov esi, 0	       703	rdcoff.c	FUNCTION_8	WHILE_1	IF_1	CALL_3
0x4001409	            0x31ff	                            xor edi, edi	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400140b	      0xe800000000	                          call 0x4001410	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001410	          0x4889de	                            mov rsi, rbx	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001413	          0x4889c7	                            mov rdi, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001416	            0x31c0	                            xor eax, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001418	      0xe800000000	                          call 0x400141d	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400141d	      0xe90efdffff	                           jmp 0x4001130	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x4001422	    0x660f1f440000	                    nop word [rax + rax]	       725	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3
0x4001428	      0xb901000000	                              mov ecx, 1	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x400142d	      0xe934ffffff	                           jmp 0x4001366	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001432	    0x660f1f440000	                    nop word [rax + rax]	       648	rdcoff.c	FUNCTION_7	SWITCH_1
0x4001438	    0xc74424140100	               mov dword [rsp + 0x14], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001440	    0x48c744242800	               mov qword [rsp + 0x28], 0	       830	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001449	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001451	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001459	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001462	      0xe931fbffff	                           jmp 0x4000f98	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001467	    0xc74424140100	               mov dword [rsp + 0x14], 1	       834	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400146f	    0xc744243c0000	               mov dword [rsp + 0x3c], 0	       832	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001477	    0xc74424380000	               mov dword [rsp + 0x38], 0	       831	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400147f	    0x48c744242000	               mov qword [rsp + 0x20], 0	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x4001488	      0xe90bfbffff	                           jmp 0x4000f98	       829	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12
0x400148d	      0xe800000000	                          call 0x4001492	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001492	            0x89c7	                            mov edi, eax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001494	      0xe800000000	                          call 0x4001499	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x4001499	      0xba05000000	                              mov edx, 5	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x400149e	          0x4889c3	                            mov rbx, rax	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40014a1	      0xbe00000000	                              mov esi, 0	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40014a6	      0xe95effffff	                           jmp 0x4001409	       723	rdcoff.c	FUNCTION_8	WHILE_1	ELSE_1	IF_3	CALL_9
0x40014ab	      0xba05000000	                              mov edx, 5	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x40014b0	      0xbe00000000	                              mov esi, 0	       790	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	IF_12	IF_13	CALL_21
0x40014b5	            0x31ff	                            xor edi, edi	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014b7	      0xe800000000	                          call 0x40014bc	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014bc	          0x4c89fe	                            mov rsi, r15	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014bf	          0x4889c7	                            mov rdi, rax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014c2	            0x31c0	                            xor eax, eax	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014c4	      0xe800000000	                          call 0x40014c9	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014c9	      0xe962fcffff	                           jmp 0x4001130	       841	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20
0x40014ce	      0xba05000000	                              mov edx, 5	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014d3	      0xbe00000000	                              mov esi, 0	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014d8	            0xebdb	                           jmp 0x40014b5	       840	rdcoff.c	FUNCTION_8	WHILE_1	SWITCH_1	ELSE_4	IF_19	IF_20	CALL_32
0x40014da	      0xe800000000	                   call section_end..bss	       880	rdcoff.c	FUNCTION_8
