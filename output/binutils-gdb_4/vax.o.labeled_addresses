vax_find_call	IF,5:SWITCH,2:functions,0:ELSE,0:CALL,18:FOR,1:WHILE,0:DO,0	236
0x4000330	            0x4157	                                push r15	       233	vax.c	FUNCTION_5
0x4000332	            0x4156	                                push r14	       233	vax.c	FUNCTION_5
0x4000334	            0x4155	                                push r13	       233	vax.c	FUNCTION_5
0x4000336	            0x4154	                                push r12	       233	vax.c	FUNCTION_5
0x4000338	          0x4989d5	                            mov r13, rdx	       233	vax.c	FUNCTION_5
0x400033b	              0x55	                                push rbp	       233	vax.c	FUNCTION_5
0x400033c	              0x53	                                push rbx	       233	vax.c	FUNCTION_5
0x400033d	          0x4989fc	                            mov r12, rdi	       233	vax.c	FUNCTION_5
0x4000340	          0x4889f5	                            mov rbp, rsi	       233	vax.c	FUNCTION_5
0x4000343	        0x4883ec18	                           sub rsp, 0x18	       233	vax.c	FUNCTION_5
0x4000347	    0x8b0500000000	            mov eax, dword [0x0400034d] 	       242	vax.c	FUNCTION_5	IF_1
0x400034d	            0x85c0	                           test eax, eax	       242	vax.c	FUNCTION_5	IF_1
0x400034f	     0xf8423010000	                            je 0x4000478	       242	vax.c	FUNCTION_5	IF_1
0x4000355	    0xf60500000000	               test byte [0x0400035c], 1	       250	vax.c	FUNCTION_5	CALL_2
0x400035c	     0xf8552010000	                           jne 0x40004b4	       250	vax.c	FUNCTION_5	CALL_2
0x4000362	          0x4c39ed	                            cmp rbp, r13	       253	vax.c	FUNCTION_5	FOR_1
0x4000365	            0x7216	                            jb 0x400037d	       253	vax.c	FUNCTION_5	FOR_1
0x4000367	            0xeb57	                           jmp 0x40003c0	       253	vax.c	FUNCTION_5	FOR_1
0x4000369	     0xf1f80000000	                         nop dword [rax]	       253	vax.c	FUNCTION_5	FOR_1
0x4000370	      0xb801000000	                              mov eax, 1	        84	vax.c	FUNCTION_1	SWITCH_1
0x4000375	          0x4801c5	                            add rbp, rax	       253	vax.c	FUNCTION_5	FOR_1
0x4000378	          0x4939ed	                            cmp r13, rbp	       253	vax.c	FUNCTION_5	FOR_1
0x400037b	            0x7643	                           jbe 0x40003c0	       253	vax.c	FUNCTION_5	FOR_1
0x400037d	    0x488b05000000	            mov rax, qword [0x04000384] 	       257	vax.c	FUNCTION_5	FOR_1
0x4000384	          0x4889eb	                            mov rbx, rbp	       256	vax.c	FUNCTION_5	FOR_1
0x4000387	        0x482b5828	             sub rbx, qword [rax + 0x28]	       256	vax.c	FUNCTION_5	FOR_1
0x400038b	    0x48031d000000	             add rbx, qword [0x04000392]	       256	vax.c	FUNCTION_5	FOR_1
0x4000392	          0x803bfb	                    cmp byte [rbx], 0xfb	       258	vax.c	FUNCTION_5	FOR_1	IF_2
0x4000395	            0x75d9	                           jne 0x4000370	       258	vax.c	FUNCTION_5	FOR_1	IF_2
0x4000397	    0xf60500000000	               test byte [0x0400039e], 1	       264	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_3
0x400039e	            0x7530	                           jne 0x40003d0	       264	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_3
0x40003a0	         0xfb65301	               movzx edx, byte [rbx + 1]	       264	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_3
0x40003a4	            0x89d0	                            mov eax, edx	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003a6	          0xc0e804	                               shr al, 4	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003a9	          0x83e804	                              sub eax, 4	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003ac	            0x3c0b	                             cmp al, 0xb	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003ae	     0xf873c010000	                            ja 0x40004f0	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003b4	           0xfb6c0	                           movzx eax, al	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003b7	    0xff24c5000000	                       jmp qword [rax*8]	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003be	            0x6690	                                     nop	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003c0	        0x4883c418	                           add rsp, 0x18	       350	vax.c	FUNCTION_5
0x40003c4	              0x5b	                                 pop rbx	       350	vax.c	FUNCTION_5
0x40003c5	              0x5d	                                 pop rbp	       350	vax.c	FUNCTION_5
0x40003c6	            0x415c	                                 pop r12	       350	vax.c	FUNCTION_5
0x40003c8	            0x415d	                                 pop r13	       350	vax.c	FUNCTION_5
0x40003ca	            0x415e	                                 pop r14	       350	vax.c	FUNCTION_5
0x40003cc	            0x415f	                                 pop r15	       350	vax.c	FUNCTION_5
0x40003ce	              0xc3	                                     ret	       350	vax.c	FUNCTION_5
0x40003cf	              0x90	                                     nop	       350	vax.c	FUNCTION_5
0x40003d0	          0x4889ea	                            mov rdx, rbp	       104	stdio2.h	CALL_17
0x40003d3	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40003d5	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40003da	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40003df	      0xe800000000	                          call 0x40003e4	       104	stdio2.h	CALL_17
0x40003e4	         0xfb64301	               movzx eax, byte [rbx + 1]	       104	stdio2.h	CALL_17
0x40003e8	            0x89c2	                            mov edx, eax	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003ea	          0xc0ea04	                               shr dl, 4	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003ed	          0x83ea04	                              sub edx, 4	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003f0	          0x80fa0b	                             cmp dl, 0xb	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003f3	     0xf87f7000000	                            ja 0x40004f0	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003f9	           0xfb6d2	                           movzx edx, dl	        84	vax.c	FUNCTION_1	SWITCH_1
0x40003fc	    0xff24d5000000	                       jmp qword [rdx*8]	        84	vax.c	FUNCTION_1	SWITCH_1
0x4000403	       0xf1f440000	                   nop dword [rax + rax]	        84	vax.c	FUNCTION_1	SWITCH_1
0x4000408	        0x8b7c2408	                mov edi, dword [rsp + 8]	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400040c	      0xe82ffcffff	                call sym.vax_operandname	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000411	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000416	          0x4889c2	                            mov rdx, rax	       104	stdio2.h	CALL_17
0x4000419	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x400041e	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x4000420	      0xe800000000	                          call 0x4000425	       104	stdio2.h	CALL_17
0x4000425	          0x4489ff	                           mov edi, r15d	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000428	      0xe813fcffff	                call sym.vax_operandname	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400042d	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000432	          0x4889c2	                            mov rdx, rax	       104	stdio2.h	CALL_17
0x4000435	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x400043a	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x400043c	      0xe800000000	                          call 0x4000441	       104	stdio2.h	CALL_17
0x4000441	        0x4183ff14	                          cmp r15d, 0x14	       104	stdio2.h	CALL_17
0x4000445	     0xf8603010000	                           jbe 0x400054e	       104	stdio2.h	CALL_17
0x400044b	       0xf1f440000	                   nop dword [rax + rax]	       104	stdio2.h	CALL_17
0x4000450	    0xf60500000000	               test byte [0x04000457], 1	       344	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_18
0x4000457	     0xf8413ffffff	                            je 0x4000370	       344	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_18
0x400045d	      0xbf00000000	                              mov edi, 0	       104	stdio2.h	CALL_17
0x4000462	      0xe800000000	                          call 0x4000467	       104	stdio2.h	CALL_17
0x4000467	      0xb801000000	                              mov eax, 1	       104	stdio2.h	CALL_17
0x400046c	      0xe904ffffff	                           jmp 0x4000375	       104	stdio2.h	CALL_17
0x4000471	     0xf1f80000000	                         nop dword [rax]	       104	stdio2.h	CALL_17
0x4000478	      0xbf00000000	                              mov edi, 0	       245	vax.c	FUNCTION_5	IF_1	CALL_1
0x400047d	    0xc70500000000	               mov dword [0x04000487], 1	       244	vax.c	FUNCTION_5	IF_1
0x4000487	      0xe800000000	                          call 0x400048c	       245	vax.c	FUNCTION_5	IF_1	CALL_1
0x400048c	    0xf60500000000	               test byte [0x04000493], 1	       250	vax.c	FUNCTION_5	CALL_2
0x4000493	    0xf20f10050000	         movsd xmm0, qword [0x0400049b] 	       246	vax.c	FUNCTION_5	IF_1
0x400049b	    0x48c705000000	               mov qword [0x040004a6], 0	       247	vax.c	FUNCTION_5	IF_1
0x40004a6	    0xf20f11050000	         movsd qword [0x040004ae], xmm0 	       246	vax.c	FUNCTION_5	IF_1
0x40004ae	     0xf84aefeffff	                            je 0x4000362	       250	vax.c	FUNCTION_5	CALL_2
0x40004b4	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       104	stdio2.h	CALL_17
0x40004b9	          0x4d89e8	                             mov r8, r13	       104	stdio2.h	CALL_17
0x40004bc	          0x4889e9	                            mov rcx, rbp	       104	stdio2.h	CALL_17
0x40004bf	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40004c4	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40004c9	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40004cb	      0xe800000000	                          call 0x40004d0	       104	stdio2.h	CALL_17
0x40004d0	      0xe98dfeffff	                           jmp 0x4000362	       104	stdio2.h	CALL_17
0x40004d5	           0xf1f00	                         nop dword [rax]	       104	stdio2.h	CALL_17
0x40004d8	          0x83e20f	                            and edx, 0xf	       104	stdio2.h	CALL_17
0x40004db	          0x80fa0f	                             cmp dl, 0xf	       100	vax.c	FUNCTION_1	SWITCH_1
0x40004de	     0xf856cffffff	                           jne 0x4000450	       100	vax.c	FUNCTION_1	SWITCH_1
0x40004e4	    0xc74424080d00	                mov dword [rsp + 8], 0xd	       100	vax.c	FUNCTION_1	SWITCH_1
0x40004ec	            0xeb0a	                           jmp 0x40004f8	       100	vax.c	FUNCTION_1	SWITCH_1
0x40004ee	            0x6690	                                     nop	       100	vax.c	FUNCTION_1	SWITCH_1
0x40004f0	    0xc74424080000	                  mov dword [rsp + 8], 0	        90	vax.c	FUNCTION_1	SWITCH_1
0x40004f8	          0x4531f6	                          xor r14d, r14d	       233	vax.c	FUNCTION_5
0x40004fb	    0x420fb67c3301	        movzx edi, byte [rbx + r14 + 1] 	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000501	      0xe8aafcffff	         call sym.vax_operandmode.isra.0	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000506	          0x83f814	                           cmp eax, 0x14	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000509	     0xf8721010000	                            ja 0x4000630	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x400050f	            0x89c0	                            mov eax, eax	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000511	    0xff24c5000000	                       jmp qword [rax*8]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000518	     0xf1f84000000	                   nop dword [rax + rax]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000520	      0xb803000000	                              mov eax, 3	       195	vax.c	FUNCTION_3	SWITCH_1
0x4000525	      0x4d8d740601	                lea r14, [r14 + rax + 1]	       275	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_5
0x400052a	          0x4c01f3	                            add rbx, r14	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x400052d	           0xfb63b	                   movzx edi, byte [rbx]	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x4000530	      0xe87bfcffff	         call sym.vax_operandmode.isra.0	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x4000535	    0xf60500000000	               test byte [0x0400053c], 1	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400053c	          0x4189c7	                           mov r15d, eax	       276	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_6
0x400053f	     0xf85c3feffff	                           jne 0x4000408	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000545	          0x83f814	                           cmp eax, 0x14	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000548	     0xf8722feffff	                            ja 0x4000370	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400054e	          0x4489f9	                           mov ecx, r15d	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000551	      0xb801000000	                              mov eax, 1	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000556	          0x48d3e0	                             shl rax, cl	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000559	          0x4989c7	                            mov r15, rax	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400055c	    0x4181e7081515	                      and r15d, 0x151508	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000563	     0xf85e9000000	                           jne 0x4000652	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000569	      0xa900800a00	                       test eax, 0xa8000	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x400056e	     0xf84dcfeffff	                            je 0x4000450	       277	vax.c	FUNCTION_5	FOR_1	IF_2	CALL_7
0x4000574	           0xfb63b	                   movzx edi, byte [rbx]	       213	vax.c	FUNCTION_4	CALL_1
0x4000577	      0xe834fcffff	         call sym.vax_operandmode.isra.0	       213	vax.c	FUNCTION_4	CALL_1
0x400057c	          0x83f811	                           cmp eax, 0x11	       216	vax.c	FUNCTION_4	SWITCH_1
0x400057f	        0x488d7b01	                      lea rdi, [rbx + 1]	       215	vax.c	FUNCTION_4
0x4000583	     0xf8426010000	                            je 0x40006af	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000589	          0x83f813	                           cmp eax, 0x13	       216	vax.c	FUNCTION_4	SWITCH_1
0x400058c	     0xf8406010000	                            je 0x4000698	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000592	          0x83f80f	                            cmp eax, 0xf	       216	vax.c	FUNCTION_4	SWITCH_1
0x4000595	     0xf84e5000000	                            je 0x4000680	       216	vax.c	FUNCTION_4	SWITCH_1
0x400059b	    0x488b0d000000	            mov rcx, qword [0x040005a2] 	        97	stdio2.h	CALL_14
0x40005a2	      0xba1f000000	                           mov edx, 0x1f	        97	stdio2.h	CALL_14
0x40005a7	      0xbe01000000	                              mov esi, 1	        97	stdio2.h	CALL_14
0x40005ac	      0xbf00000000	                              mov edi, 0	        97	stdio2.h	CALL_14
0x40005b1	      0xe800000000	                          call 0x40005b6	        97	stdio2.h	CALL_14
0x40005b6	          0x4901ef	                            add r15, rbp	       308	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_12
0x40005b9	          0x4489ff	                           mov edi, r15d	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x40005bc	      0xe800000000	                          call 0x40005c1	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x40005c1	            0x85c0	                           test eax, eax	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x40005c3	     0xf8487feffff	                            je 0x4000450	       309	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_13
0x40005c9	          0x4c89fe	                            mov rsi, r15	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x40005cc	      0xbf00000000	                              mov edi, 0	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x40005d1	      0xe800000000	                          call 0x40005d6	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x40005d6	          0x4885c0	                           test rax, rax	       312	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4
0x40005d9	          0x4889c1	                            mov rcx, rax	       311	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	CALL_14
0x40005dc	     0xf846efeffff	                            je 0x4000450	       312	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4
0x40005e2	    0xf60500000000	               test byte [0x040005e9], 1	       314	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	CALL_15
0x40005e9	     0xf85d7000000	                           jne 0x40006c6	       314	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	CALL_15
0x40005ef	          0x4c3b38	                    cmp r15, qword [rax]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x40005f2	     0xf8578fdffff	                           jne 0x4000370	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x40005f8	            0x31d2	                            xor edx, edx	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x40005fa	          0x4889ce	                            mov rsi, rcx	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x40005fd	            0xeb5a	                           jmp 0x4000659	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x40005ff	              0x90	                                     nop	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x4000600	      0xb802000000	                              mov eax, 2	       190	vax.c	FUNCTION_3	SWITCH_1
0x4000605	      0xe91bffffff	                           jmp 0x4000525	       190	vax.c	FUNCTION_3	SWITCH_1
0x400060a	    0x660f1f440000	                    nop word [rax + rax]	       190	vax.c	FUNCTION_3	SWITCH_1
0x4000610	        0x4983c601	                              add r14, 1	       190	vax.c	FUNCTION_3	SWITCH_1
0x4000614	    0x420fb67c3301	        movzx edi, byte [rbx + r14 + 1] 	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x400061a	      0xe891fbffff	         call sym.vax_operandmode.isra.0	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x400061f	          0x83f814	                           cmp eax, 0x14	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000622	     0xf86e7feffff	                           jbe 0x400050f	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000628	     0xf1f84000000	                   nop dword [rax + rax]	       177	vax.c	FUNCTION_3	SWITCH_1	CALL_1
0x4000630	      0xe800000000	                          call 0x4000635	       207	vax.c	FUNCTION_3	CALL_3
0x4000635	           0xf1f00	                         nop dword [rax]	       207	vax.c	FUNCTION_3	CALL_3
0x4000638	      0xb801000000	                              mov eax, 1	       185	vax.c	FUNCTION_3	SWITCH_1
0x400063d	      0xe9e3feffff	                           jmp 0x4000525	       185	vax.c	FUNCTION_3	SWITCH_1
0x4000642	    0x660f1f440000	                    nop word [rax + rax]	       185	vax.c	FUNCTION_3	SWITCH_1
0x4000648	      0xb805000000	                              mov eax, 5	       202	vax.c	FUNCTION_3	SWITCH_1
0x400064d	      0xe9d3feffff	                           jmp 0x4000525	       202	vax.c	FUNCTION_3	SWITCH_1
0x4000652	            0x31d2	                            xor edx, edx	       297	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_10
0x4000654	      0xbe00000000	                              mov esi, 0	       297	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	CALL_10
0x4000659	          0x4c89e7	                            mov rdi, r12	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x400065c	      0xe800000000	                          call 0x4000661	       326	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_16
0x4000661	          0x4889df	                            mov rdi, rbx	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x4000664	      0xe847fcffff	              call sym.vax_operandlength	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x4000669	          0x4c01f0	                            add rax, r14	       327	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5	CALL_17
0x400066c	      0xe904fdffff	                           jmp 0x4000375	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000671	          0x83e00f	                            and eax, 0xf	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000674	            0x89c2	                            mov edx, eax	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000676	      0xe960feffff	                           jmp 0x40004db	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x400067b	       0xf1f440000	                   nop dword [rax + rax]	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000680	         0xfb64301	               movzx eax, byte [rbx + 1]	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000684	        0x448d7880	                  lea r15d, [rax - 0x80]	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000688	        0x450fb6ff	                        movzx r15d, r15b	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x400068c	        0x4183ef7f	                          sub r15d, 0x7f	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000690	          0x4d63ff	                        movsxd r15, r15d	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000693	      0xe91effffff	                           jmp 0x40005b6	       328	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000698	    0x488b05000000	            mov rax, qword [0x0400069f] 	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x400069f	        0x488b4008	                mov rax, qword [rax + 8]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40006a3	          0xff5040	                 call qword [rax + 0x40]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40006a6	        0x4c8d7804	                      lea r15, [rax + 4]	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40006aa	      0xe907ffffff	                           jmp 0x40005b6	       226	vax.c	FUNCTION_4	SWITCH_1	CALL_4
0x40006af	    0x488b05000000	            mov rax, qword [0x040006b6] 	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006b6	        0x488b4008	                mov rax, qword [rax + 8]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006ba	          0xff5058	                 call qword [rax + 0x58]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006bd	        0x4c8d7802	                      lea r15, [rax + 2]	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006c1	      0xe9f0feffff	                           jmp 0x40005b6	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006c6	      0x4889442408	                mov qword [rsp + 8], rax	       224	vax.c	FUNCTION_4	SWITCH_1	CALL_3
0x40006cb	          0x4c89fa	                            mov rdx, r15	       104	stdio2.h	CALL_17
0x40006ce	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40006d3	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40006d8	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40006da	      0xe800000000	                          call 0x40006df	       104	stdio2.h	CALL_17
0x40006df	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       104	stdio2.h	CALL_17
0x40006e4	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x40006e9	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x40006ee	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x40006f0	        0x488b5110	            mov rdx, qword [rcx + 0x10] 	       104	stdio2.h	CALL_17
0x40006f4	      0xe800000000	                          call 0x40006f9	       104	stdio2.h	CALL_17
0x40006f9	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       104	stdio2.h	CALL_17
0x40006fe	            0x31c0	                            xor eax, eax	       104	stdio2.h	CALL_17
0x4000700	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_17
0x4000705	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_17
0x400070a	          0x488b11	                    mov rdx, qword [rcx]	       104	stdio2.h	CALL_17
0x400070d	      0xe800000000	                          call 0x4000712	       104	stdio2.h	CALL_17
0x4000712	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000717	          0x4c3b39	                    cmp r15, qword [rcx]	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x400071a	     0xf8530fdffff	                           jne 0x4000450	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
0x4000720	      0xe9d3feffff	                           jmp 0x40005f8	       321	vax.c	FUNCTION_5	FOR_1	IF_2	SWITCH_2	IF_3	IF_4	IF_5
vax_operandname	IF,0:SWITCH,1:functions,0:ELSE,0:CALL,1:FOR,0:WHILE,0:DO,0	70
0x4000040	          0x83ff14	                           cmp edi, 0x14	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000043	     0xf8757010000	                            ja 0x40001a0	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000049	            0x89ff	                            mov edi, edi	       124	vax.c	FUNCTION_2	SWITCH_1
0x400004b	    0xff24fd000000	                       jmp qword [rdi*8]	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000052	    0x660f1f440000	                    nop word [rax + rax]	       124	vax.c	FUNCTION_2	SWITCH_1
0x4000058	      0xb800000000	                              mov eax, 0	       131	vax.c	FUNCTION_2	SWITCH_1
0x400005d	              0xc3	                                     ret	       171	vax.c	FUNCTION_2
0x400005e	            0x6690	                                     nop	       171	vax.c	FUNCTION_2
0x4000060	      0xb800000000	                              mov eax, 0	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000065	              0xc3	                                     ret	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000066	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       129	vax.c	FUNCTION_2	SWITCH_1
0x4000070	      0xb800000000	                              mov eax, 0	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000075	              0xc3	                                     ret	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000076	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       127	vax.c	FUNCTION_2	SWITCH_1
0x4000080	      0xb800000000	                              mov eax, 0	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000085	              0xc3	                                     ret	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000086	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       167	vax.c	FUNCTION_2	SWITCH_1
0x4000090	      0xb800000000	                              mov eax, 0	       165	vax.c	FUNCTION_2	SWITCH_1
0x4000095	              0xc3	                                     ret	       165	vax.c	FUNCTION_2	SWITCH_1
0x4000096	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       165	vax.c	FUNCTION_2	SWITCH_1
0x40000a0	      0xb800000000	                              mov eax, 0	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000a5	              0xc3	                                     ret	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000a6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       155	vax.c	FUNCTION_2	SWITCH_1
0x40000b0	      0xb800000000	                              mov eax, 0	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000b5	              0xc3	                                     ret	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000b6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       153	vax.c	FUNCTION_2	SWITCH_1
0x40000c0	      0xb800000000	                              mov eax, 0	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000c5	              0xc3	                                     ret	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000c6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       147	vax.c	FUNCTION_2	SWITCH_1
0x40000d0	      0xb800000000	                              mov eax, 0	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000d5	              0xc3	                                     ret	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000d6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       145	vax.c	FUNCTION_2	SWITCH_1
0x40000e0	      0xb800000000	                              mov eax, 0	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000e5	              0xc3	                                     ret	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000e6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       159	vax.c	FUNCTION_2	SWITCH_1
0x40000f0	      0xb800000000	                              mov eax, 0	       157	vax.c	FUNCTION_2	SWITCH_1
0x40000f5	              0xc3	                                     ret	       157	vax.c	FUNCTION_2	SWITCH_1
0x40000f6	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       157	vax.c	FUNCTION_2	SWITCH_1
0x4000100	      0xb800000000	                              mov eax, 0	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000105	              0xc3	                                     ret	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000106	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       163	vax.c	FUNCTION_2	SWITCH_1
0x4000110	      0xb800000000	                              mov eax, 0	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000115	              0xc3	                                     ret	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000116	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       161	vax.c	FUNCTION_2	SWITCH_1
0x4000120	      0xb800000000	                              mov eax, 0	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000125	              0xc3	                                     ret	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000126	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       151	vax.c	FUNCTION_2	SWITCH_1
0x4000130	      0xb800000000	                              mov eax, 0	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000135	              0xc3	                                     ret	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000136	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       149	vax.c	FUNCTION_2	SWITCH_1
0x4000140	      0xb800000000	                              mov eax, 0	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000145	              0xc3	                                     ret	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000146	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       143	vax.c	FUNCTION_2	SWITCH_1
0x4000150	      0xb800000000	                              mov eax, 0	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000155	              0xc3	                                     ret	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000156	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       141	vax.c	FUNCTION_2	SWITCH_1
0x4000160	      0xb800000000	                              mov eax, 0	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000165	              0xc3	                                     ret	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000166	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       139	vax.c	FUNCTION_2	SWITCH_1
0x4000170	      0xb800000000	                              mov eax, 0	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000175	              0xc3	                                     ret	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000176	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       137	vax.c	FUNCTION_2	SWITCH_1
0x4000180	      0xb800000000	                              mov eax, 0	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000185	              0xc3	                                     ret	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000186	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       135	vax.c	FUNCTION_2	SWITCH_1
0x4000190	      0xb800000000	                              mov eax, 0	       133	vax.c	FUNCTION_2	SWITCH_1
0x4000195	              0xc3	                                     ret	       133	vax.c	FUNCTION_2	SWITCH_1
0x4000196	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       133	vax.c	FUNCTION_2	SWITCH_1
0x40001a0	        0x4883ec08	                              sub rsp, 8	       122	vax.c	FUNCTION_2
0x40001a4	      0xe800000000	                          call 0x40001a9	       170	vax.c	FUNCTION_2	CALL_1
