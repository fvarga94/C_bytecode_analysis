get_crc_table	CALL,1:SWITCH,0:IF,1:DO,0:functions,0:WHILE,0:ELSE,0:FOR,0	2
0x40004f0	      0xb800000000	                              mov eax, 0	       195	crc32.c	FUNCTION_2
0x40004f5	              0xc3	                                     ret	       195	crc32.c	FUNCTION_2
crc32_combine_	CALL,6:SWITCH,0:IF,4:DO,1:functions,0:WHILE,0:ELSE,0:FOR,1	126
0x4000310	    0x4881ec180200	                          sub rsp, 0x218	       376	crc32.c	FUNCTION_3
0x4000317	    0x64488b042528	                mov rax, qword fs:[0x28]	       376	crc32.c	FUNCTION_3
0x4000320	    0x488984240802	            mov qword [rsp + 0x208], rax	       376	crc32.c	FUNCTION_3
0x4000328	            0x31c0	                            xor eax, eax	       376	crc32.c	FUNCTION_3
0x400032a	          0x4885d2	                           test rdx, rdx	       383	crc32.c	FUNCTION_3	IF_1
0x400032d	     0xf8ea7010000	                           jle 0x40004da	       383	crc32.c	FUNCTION_3	IF_1
0x4000333	      0xb82083b8ed	                     mov eax, 0xedb88320	       387	crc32.c	FUNCTION_3
0x4000338	    0x4c8d84240002	                   lea r8, [rsp + 0x200]	       387	crc32.c	FUNCTION_3
0x4000340	      0xb901000000	                              mov ecx, 1	       388	crc32.c	FUNCTION_3
0x4000345	    0x488984240001	            mov qword [rsp + 0x100], rax	       387	crc32.c	FUNCTION_3
0x400034d	    0x488d84240801	                  lea rax, [rsp + 0x108]	       387	crc32.c	FUNCTION_3
0x4000355	          0x488908	                    mov qword [rax], rcx	       390	crc32.c	FUNCTION_3	FOR_1
0x4000358	        0x4883c008	                              add rax, 8	       390	crc32.c	FUNCTION_3	FOR_1
0x400035c	          0x4801c9	                            add rcx, rcx	       391	crc32.c	FUNCTION_3	FOR_1
0x400035f	          0x4939c0	                             cmp r8, rax	       389	crc32.c	FUNCTION_3	FOR_1
0x4000362	            0x75f1	                           jne 0x4000355	       389	crc32.c	FUNCTION_3	FOR_1
0x4000364	          0x4531c9	                            xor r9d, r9d	       389	crc32.c	FUNCTION_3	FOR_1
0x4000367	    0x4a8b840c0001	      mov rax, qword [rsp + r9 + 0x100] 	       368	crc32.c	CALL_22
0x400036f	          0x4531c0	                            xor r8d, r8d	       351	crc32.c	WHILE_8
0x4000372	          0x4885c0	                           test rax, rax	       351	crc32.c	WHILE_8
0x4000375	            0x7419	                            je 0x4000390	       351	crc32.c	WHILE_8
0x4000377	    0x488d8c240001	                  lea rcx, [rsp + 0x100]	       351	crc32.c	WHILE_8
0x400037f	              0x90	                                     nop	       351	crc32.c	WHILE_8
0x4000380	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x4000382	            0x7403	                            je 0x4000387	       352	crc32.c	WHILE_8	IF_8
0x4000384	          0x4c3301	                     xor r8, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x4000387	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x400038b	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x400038e	            0x75f0	                           jne 0x4000380	       351	crc32.c	WHILE_8
0x4000390	        0x4e89040c	                mov qword [rsp + r9], r8	       368	crc32.c	CALL_22
0x4000394	        0x4983c108	                               add r9, 8	       368	crc32.c	CALL_22
0x4000398	    0x4981f9000100	                           cmp r9, 0x100	       367	crc32.c	FOR_2
0x400039f	            0x75c6	                           jne 0x4000367	       367	crc32.c	FOR_2
0x40003a1	          0x4531c9	                            xor r9d, r9d	       367	crc32.c	FOR_2
0x40003a4	        0x4a8b040c	               mov rax, qword [rsp + r9]	       368	crc32.c	CALL_22
0x40003a8	          0x4531c0	                            xor r8d, r8d	       351	crc32.c	WHILE_8
0x40003ab	          0x4885c0	                           test rax, rax	       351	crc32.c	WHILE_8
0x40003ae	            0x7418	                            je 0x40003c8	       351	crc32.c	WHILE_8
0x40003b0	          0x4889e1	                            mov rcx, rsp	       351	crc32.c	WHILE_8
0x40003b3	       0xf1f440000	                   nop dword [rax + rax]	       351	crc32.c	WHILE_8
0x40003b8	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x40003ba	            0x7403	                            je 0x40003bf	       352	crc32.c	WHILE_8	IF_8
0x40003bc	          0x4c3301	                     xor r8, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x40003bf	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x40003c3	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x40003c6	            0x75f0	                           jne 0x40003b8	       351	crc32.c	WHILE_8
0x40003c8	    0x4e89840c0001	        mov qword [rsp + r9 + 0x100], r8	       368	crc32.c	CALL_22
0x40003d0	        0x4983c108	                               add r9, 8	       368	crc32.c	CALL_22
0x40003d4	    0x4981f9000100	                           cmp r9, 0x100	       367	crc32.c	FOR_2
0x40003db	            0x75c7	                           jne 0x40003a4	       367	crc32.c	FOR_2
0x40003dd	          0x4531c9	                            xor r9d, r9d	       350	crc32.c	
0x40003e0	    0x4a8b840c0001	      mov rax, qword [rsp + r9 + 0x100] 	       368	crc32.c	CALL_22
0x40003e8	          0x4531c0	                            xor r8d, r8d	       351	crc32.c	WHILE_8
0x40003eb	          0x4885c0	                           test rax, rax	       351	crc32.c	WHILE_8
0x40003ee	            0x7420	                            je 0x4000410	       351	crc32.c	WHILE_8
0x40003f0	    0x488d8c240001	                  lea rcx, [rsp + 0x100]	       351	crc32.c	WHILE_8
0x40003f8	     0xf1f84000000	                   nop dword [rax + rax]	       351	crc32.c	WHILE_8
0x4000400	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x4000402	            0x7403	                            je 0x4000407	       352	crc32.c	WHILE_8	IF_8
0x4000404	          0x4c3301	                     xor r8, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x4000407	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x400040b	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x400040e	            0x75f0	                           jne 0x4000400	       351	crc32.c	WHILE_8
0x4000410	        0x4e89040c	                mov qword [rsp + r9], r8	       368	crc32.c	CALL_22
0x4000414	        0x4983c108	                               add r9, 8	       368	crc32.c	CALL_22
0x4000418	    0x4981f9000100	                           cmp r9, 0x100	       367	crc32.c	FOR_2
0x400041f	            0x75bf	                           jne 0x40003e0	       367	crc32.c	FOR_2
0x4000421	          0xf6c201	                              test dl, 1	       405	crc32.c	FUNCTION_3	DO_1	IF_2
0x4000424	            0x7422	                            je 0x4000448	       405	crc32.c	FUNCTION_3	DO_1	IF_2
0x4000426	          0x4885ff	                           test rdi, rdi	       351	crc32.c	WHILE_8
0x4000429	            0x741d	                            je 0x4000448	       351	crc32.c	WHILE_8
0x400042b	          0x4889f8	                            mov rax, rdi	       351	crc32.c	WHILE_8
0x400042e	          0x4889e1	                            mov rcx, rsp	       351	crc32.c	WHILE_8
0x4000431	            0x31ff	                            xor edi, edi	       351	crc32.c	WHILE_8
0x4000433	       0xf1f440000	                   nop dword [rax + rax]	       351	crc32.c	WHILE_8
0x4000438	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x400043a	            0x7403	                            je 0x400043f	       352	crc32.c	WHILE_8	IF_8
0x400043c	          0x483339	                    xor rdi, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x400043f	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x4000443	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x4000446	            0x75f0	                           jne 0x4000438	       351	crc32.c	WHILE_8
0x4000448	          0x48d1fa	                              sar rdx, 1	       410	crc32.c	FUNCTION_3	DO_1	IF_3
0x400044b	            0x746c	                            je 0x40004b9	       410	crc32.c	FUNCTION_3	DO_1	IF_3
0x400044d	          0x4531c9	                            xor r9d, r9d	       410	crc32.c	FUNCTION_3	DO_1	IF_3
0x4000450	        0x4a8b040c	               mov rax, qword [rsp + r9]	       368	crc32.c	CALL_22
0x4000454	          0x4531c0	                            xor r8d, r8d	       351	crc32.c	WHILE_8
0x4000457	          0x4885c0	                           test rax, rax	       351	crc32.c	WHILE_8
0x400045a	            0x7414	                            je 0x4000470	       351	crc32.c	WHILE_8
0x400045c	          0x4889e1	                            mov rcx, rsp	       351	crc32.c	WHILE_8
0x400045f	              0x90	                                     nop	       351	crc32.c	WHILE_8
0x4000460	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x4000462	            0x7403	                            je 0x4000467	       352	crc32.c	WHILE_8	IF_8
0x4000464	          0x4c3301	                     xor r8, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x4000467	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x400046b	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x400046e	            0x75f0	                           jne 0x4000460	       351	crc32.c	WHILE_8
0x4000470	    0x4e89840c0001	        mov qword [rsp + r9 + 0x100], r8	       368	crc32.c	CALL_22
0x4000478	        0x4983c108	                               add r9, 8	       368	crc32.c	CALL_22
0x400047c	    0x4981f9000100	                           cmp r9, 0x100	       367	crc32.c	FOR_2
0x4000483	            0x75cb	                           jne 0x4000450	       367	crc32.c	FOR_2
0x4000485	          0xf6c201	                              test dl, 1	       415	crc32.c	FUNCTION_3	DO_1	IF_4
0x4000488	            0x7426	                            je 0x40004b0	       415	crc32.c	FUNCTION_3	DO_1	IF_4
0x400048a	          0x4885ff	                           test rdi, rdi	       351	crc32.c	WHILE_8
0x400048d	            0x7421	                            je 0x40004b0	       351	crc32.c	WHILE_8
0x400048f	    0x488d8c240001	                  lea rcx, [rsp + 0x100]	       351	crc32.c	WHILE_8
0x4000497	          0x4889f8	                            mov rax, rdi	       351	crc32.c	WHILE_8
0x400049a	            0x31ff	                            xor edi, edi	       351	crc32.c	WHILE_8
0x400049c	         0xf1f4000	                         nop dword [rax]	       351	crc32.c	WHILE_8
0x40004a0	            0xa801	                              test al, 1	       352	crc32.c	WHILE_8	IF_8
0x40004a2	            0x7403	                            je 0x40004a7	       352	crc32.c	WHILE_8	IF_8
0x40004a4	          0x483339	                    xor rdi, qword [rcx]	       353	crc32.c	WHILE_8	IF_8
0x40004a7	        0x4883c108	                              add rcx, 8	       355	crc32.c	WHILE_8
0x40004ab	          0x48d1e8	                              shr rax, 1	       351	crc32.c	WHILE_8
0x40004ae	            0x75f0	                           jne 0x40004a0	       351	crc32.c	WHILE_8
0x40004b0	          0x48d1fa	                              sar rdx, 1	       420	crc32.c	FUNCTION_3	DO_1
0x40004b3	     0xf8524ffffff	                           jne 0x40003dd	       420	crc32.c	FUNCTION_3	DO_1
0x40004b9	          0x4889f8	                            mov rax, rdi	       424	crc32.c	FUNCTION_3
0x40004bc	          0x4831f0	                            xor rax, rsi	       424	crc32.c	FUNCTION_3
0x40004bf	    0x488bb4240802	           mov rsi, qword [rsp + 0x208] 	       425	crc32.c	FUNCTION_3
0x40004c7	    0x644833342528	                xor rsi, qword fs:[0x28]	       425	crc32.c	FUNCTION_3
0x40004d0	            0x750d	                           jne 0x40004df	       425	crc32.c	FUNCTION_3
0x40004d2	    0x4881c4180200	                          add rsp, 0x218	       425	crc32.c	FUNCTION_3
0x40004d9	              0xc3	                                     ret	       425	crc32.c	FUNCTION_3
0x40004da	          0x4889f8	                            mov rax, rdi	       384	crc32.c	FUNCTION_3	IF_1
0x40004dd	            0xebe0	                           jmp 0x40004bf	       384	crc32.c	FUNCTION_3	IF_1
0x40004df	      0xe800000000	                          call 0x40004e4	       425	crc32.c	FUNCTION_3
