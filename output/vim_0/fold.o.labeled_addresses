put_folds	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,3:CALL,4	42
0x4006569	              0x55	                                push rbp	      3493	fold.c	FUNCTION_73
0x400656a	          0x4889e5	                            mov rbp, rsp	      3493	fold.c	FUNCTION_73
0x400656d	        0x4883ec10	                           sub rsp, 0x10	      3493	fold.c	FUNCTION_73
0x4006571	        0x48897df8	                mov qword [rbp - 8], rdi	      3493	fold.c	FUNCTION_73
0x4006575	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3493	fold.c	FUNCTION_73
0x4006579	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x400657d	          0x4889c7	                            mov rdi, rax	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4006580	      0xe800000000	                          call 0x4006585	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4006585	            0x85c0	                           test eax, eax	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4006587	            0x743f	                            je 0x40065c8	      3494	fold.c	FUNCTION_73	IF_1	CALL_1
0x4006589	        0x488b45f8	                mov rax, qword [rbp - 8]	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400658d	      0xbe00000000	                              mov esi, 0	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4006592	          0x4889c7	                            mov rdi, rax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x4006595	      0xe800000000	                          call 0x400659a	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400659a	            0x85c0	                           test eax, eax	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400659c	            0x7423	                            je 0x40065c1	      3496	fold.c	FUNCTION_73	IF_1	IF_2	CALL_2
0x400659e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065a2	    0x488d88080100	                  lea rcx, [rax + 0x108]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065a9	        0x488b45f8	                mov rax, qword [rbp - 8]	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065ad	      0xba00000000	                              mov edx, 0	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065b2	          0x4889ce	                            mov rsi, rcx	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065b5	          0x4889c7	                            mov rdi, rax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065b8	      0xe843000000	              call sym.put_folds_recurse	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065bd	            0x85c0	                           test eax, eax	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065bf	            0x7507	                           jne 0x40065c8	      3497	fold.c	FUNCTION_73	IF_1	IF_2	CALL_3
0x40065c1	      0xb800000000	                              mov eax, 0	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x40065c6	            0xeb36	                           jmp 0x40065fe	      3498	fold.c	FUNCTION_73	IF_1	IF_2
0x40065c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3502	fold.c	FUNCTION_73	IF_3
0x40065cc	     0xfb680200100	          movzx eax, byte [rax + 0x120] 	      3502	fold.c	FUNCTION_73	IF_3
0x40065d3	            0x84c0	                             test al, al	      3502	fold.c	FUNCTION_73	IF_3
0x40065d5	            0x7422	                            je 0x40065f9	      3502	fold.c	FUNCTION_73	IF_3
0x40065d7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3503	fold.c	FUNCTION_73	CALL_4
0x40065db	    0x488d90080100	                  lea rdx, [rax + 0x108]	      3503	fold.c	FUNCTION_73	CALL_4
0x40065e2	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      3503	fold.c	FUNCTION_73	CALL_4
0x40065e6	        0x488b45f8	                mov rax, qword [rbp - 8]	      3503	fold.c	FUNCTION_73	CALL_4
0x40065ea	      0xb900000000	                              mov ecx, 0	      3503	fold.c	FUNCTION_73	CALL_4
0x40065ef	          0x4889c7	                            mov rdi, rax	      3503	fold.c	FUNCTION_73	CALL_4
0x40065f2	      0xe8e0000000	           call sym.put_foldopen_recurse	      3503	fold.c	FUNCTION_73	CALL_4
0x40065f7	            0xeb05	                           jmp 0x40065fe	      3503	fold.c	FUNCTION_73	CALL_4
0x40065f9	      0xb801000000	                              mov eax, 1	      3505	fold.c	FUNCTION_73
0x40065fe	              0xc9	                                   leave	      3506	fold.c	FUNCTION_73
0x40065ff	              0xc3	                                     ret	      3506	fold.c	FUNCTION_73
foldAddMarker	functions,0:DO,0:ELSE,1:FOR,0:SWITCH,0:WHILE,0:IF,3:CALL,13	135
0x4002cf3	              0x55	                                push rbp	      1756	fold.c	FUNCTION_53
0x4002cf4	          0x4889e5	                            mov rbp, rsp	      1756	fold.c	FUNCTION_53
0x4002cf7	              0x53	                                push rbx	      1756	fold.c	FUNCTION_53
0x4002cf8	        0x4883ec58	                           sub rsp, 0x58	      1756	fold.c	FUNCTION_53
0x4002cfc	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1756	fold.c	FUNCTION_53
0x4002d00	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1756	fold.c	FUNCTION_53
0x4002d04	          0x8955ac	             mov dword [rbp - 0x54], edx	      1756	fold.c	FUNCTION_53
0x4002d07	    0x64488b042528	                mov rax, qword fs:[0x28]	      1756	fold.c	FUNCTION_53
0x4002d10	        0x488945e8	             mov qword [rbp - 0x18], rax	      1756	fold.c	FUNCTION_53
0x4002d14	            0x31c0	                            xor eax, eax	      1756	fold.c	FUNCTION_53
0x4002d16	    0x488b05000000	            mov rax, qword [0x04002d1d] 	      1757	fold.c	FUNCTION_53
0x4002d1d	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1757	fold.c	FUNCTION_53
0x4002d24	        0x488945c8	             mov qword [rbp - 0x38], rax	      1757	fold.c	FUNCTION_53
0x4002d28	    0x488b05000000	            mov rax, qword [0x04002d2f] 	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d2f	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d36	      0xbe00000000	                              mov esi, 0	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d3b	          0x4889c7	                            mov rdi, rax	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d3e	      0xe800000000	                          call 0x4002d43	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d43	        0x488945d0	             mov qword [rbp - 0x30], rax	      1761	fold.c	FUNCTION_53	CALL_1
0x4002d47	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1762	fold.c	FUNCTION_53
0x4002d4e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1765	fold.c	FUNCTION_53	CALL_2
0x4002d52	          0x4889c7	                            mov rdi, rax	      1765	fold.c	FUNCTION_53	CALL_2
0x4002d55	      0xe800000000	                          call 0x4002d5a	      1765	fold.c	FUNCTION_53	CALL_2
0x4002d5a	        0x488945d8	             mov qword [rbp - 0x28], rax	      1765	fold.c	FUNCTION_53	CALL_2
0x4002d5e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1766	fold.c	FUNCTION_53	CALL_3
0x4002d62	          0x4889c7	                            mov rdi, rax	      1766	fold.c	FUNCTION_53	CALL_3
0x4002d65	      0xe800000000	                          call 0x4002d6a	      1766	fold.c	FUNCTION_53	CALL_3
0x4002d6a	          0x8945c4	             mov dword [rbp - 0x3c], eax	      1766	fold.c	FUNCTION_53	CALL_3
0x4002d6d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d71	        0x488d5001	                      lea rdx, [rax + 1]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d75	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d79	        0x4883e801	                              sub rax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d7d	          0x4889d6	                            mov rsi, rdx	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d80	          0x4889c7	                            mov rdi, rax	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d83	      0xe800000000	                          call 0x4002d88	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d88	          0x83f801	                              cmp eax, 1	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d8b	     0xf8537010000	                           jne 0x4002ec8	      1768	fold.c	FUNCTION_53	IF_1	CALL_4
0x4002d91	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002d95	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002d99	          0x4889d1	                            mov rcx, rdx	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002d9c	      0xba00000000	                              mov edx, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002da1	      0xbe00000000	                              mov esi, 0	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002da6	          0x4889c7	                            mov rdi, rax	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002da9	      0xe800000000	                          call 0x4002dae	      1772	fold.c	FUNCTION_53	IF_1	CALL_5
0x4002dae	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002db1	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002db4	             0x1d0	                            add eax, edx	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002db6	            0x89c3	                            mov ebx, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002db8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dbc	          0x4889c7	                            mov rdi, rax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dbf	      0xe800000000	                          call 0x4002dc4	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dc4	             0x1d8	                            add eax, ebx	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dc6	          0x83c001	                              add eax, 1	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dc9	            0x89c7	                            mov edi, eax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dcb	      0xe800000000	                          call 0x4002dd0	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dd0	        0x488945e0	             mov qword [rbp - 0x20], rax	      1774	fold.c	FUNCTION_53	IF_1	CALL_7
0x4002dd4	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x4002dd9	     0xf84e8000000	                            je 0x4002ec7	      1775	fold.c	FUNCTION_53	IF_1	IF_2
0x4002ddf	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x4002de3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x4002de7	          0x4889d6	                            mov rsi, rdx	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x4002dea	          0x4889c7	                            mov rdi, rax	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x4002ded	      0xe800000000	                          call 0x4002df2	      1777	fold.c	FUNCTION_53	IF_1	CALL_8
0x4002df2	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4002df7	            0x7407	                            je 0x4002e00	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4002df9	          0x8b45c0	             mov eax, dword [rbp - 0x40]	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4002dfc	            0x85c0	                           test eax, eax	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4002dfe	            0x7427	                            je 0x4002e27	      1779	fold.c	FUNCTION_53	IF_1	IF_3
0x4002e00	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e03	          0x4863d0	                         movsxd rdx, eax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e06	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e09	          0x4863c8	                         movsxd rcx, eax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e0c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e10	          0x4801c1	                            add rcx, rax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e13	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e17	          0x4889c6	                            mov rsi, rax	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e1a	          0x4889cf	                            mov rdi, rcx	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e1d	      0xe800000000	                          call 0x4002e22	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e22	      0xe986000000	                           jmp 0x4002ead	      1780	fold.c	FUNCTION_53	IF_1	CALL_9
0x4002e27	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e2a	          0x4863d0	                         movsxd rdx, eax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e2d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e31	          0x4801c2	                            add rdx, rax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e34	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e38	          0x4889c6	                            mov rsi, rax	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e3b	          0x4889d7	                            mov rdi, rdx	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e3e	      0xe800000000	                          call 0x4002e43	      1783	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_10
0x4002e43	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e46	          0x4863d0	                         movsxd rdx, eax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e49	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e4c	            0x4898	                                    cdqe	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e4e	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e52	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e56	          0x4829ce	                            sub rsi, rcx	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e59	          0x4889f1	                            mov rcx, rsi	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e5c	          0x4801c1	                            add rcx, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e5f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e63	          0x4801c1	                            add rcx, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e66	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e6a	          0x4889c6	                            mov rsi, rax	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e6d	          0x4889cf	                            mov rdi, rcx	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e70	      0xe800000000	                          call 0x4002e75	      1784	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_11
0x4002e75	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e79	        0x488d5002	                      lea rdx, [rax + 2]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e7d	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e80	            0x4898	                                    cdqe	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e82	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e86	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e8a	          0x4829ce	                            sub rsi, rcx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e8d	          0x4889f1	                            mov rcx, rsi	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e90	          0x4801c1	                            add rcx, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e93	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e96	            0x4898	                                    cdqe	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e98	          0x4801c1	                            add rcx, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e9b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002e9f	          0x4801c8	                            add rax, rcx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002ea2	          0x4889d6	                            mov rsi, rdx	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002ea5	          0x4889c7	                            mov rdi, rax	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002ea8	      0xe800000000	                          call 0x4002ead	      1785	fold.c	FUNCTION_53	IF_1	ELSE_1	CALL_12
0x4002ead	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002eb1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002eb5	      0xba00000000	                              mov edx, 0	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002eba	          0x4889ce	                            mov rsi, rcx	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002ebd	          0x4889c7	                            mov rdi, rax	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002ec0	      0xe800000000	                          call 0x4002ec5	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002ec5	            0xeb01	                           jmp 0x4002ec8	      1788	fold.c	FUNCTION_53	IF_1	CALL_13
0x4002ec7	              0x90	                                     nop	      1776	fold.c	FUNCTION_53	IF_1	IF_2
0x4002ec8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1790	fold.c	FUNCTION_53
0x4002ecc	    0x644833042528	                xor rax, qword fs:[0x28]	      1790	fold.c	FUNCTION_53
0x4002ed5	            0x7405	                            je 0x4002edc	      1790	fold.c	FUNCTION_53
0x4002ed7	      0xe800000000	                          call 0x4002edc	      1790	fold.c	FUNCTION_53
0x4002edc	        0x4883c458	                           add rsp, 0x58	      1790	fold.c	FUNCTION_53
0x4002ee0	              0x5b	                                 pop rbx	      1790	fold.c	FUNCTION_53
0x4002ee1	              0x5d	                                 pop rbp	      1790	fold.c	FUNCTION_53
0x4002ee2	              0xc3	                                     ret	      1790	fold.c	FUNCTION_53
foldManualAllowed	functions,0:DO,0:ELSE,1:FOR,0:SWITCH,0:WHILE,0:IF,2:CALL,6	30
0x4000b6c	              0x55	                                push rbp	       559	fold.c	FUNCTION_24
0x4000b6d	          0x4889e5	                            mov rbp, rsp	       559	fold.c	FUNCTION_24
0x4000b70	        0x4883ec10	                           sub rsp, 0x10	       559	fold.c	FUNCTION_24
0x4000b74	          0x897dfc	                mov dword [rbp - 4], edi	       559	fold.c	FUNCTION_24
0x4000b77	    0x488b05000000	            mov rax, qword [0x04000b7e] 	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b7e	          0x4889c7	                            mov rdi, rax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b81	      0xe800000000	                          call 0x4000b86	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b86	            0x85c0	                           test eax, eax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b88	            0x7513	                           jne 0x4000b9d	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b8a	    0x488b05000000	            mov rax, qword [0x04000b91] 	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b91	          0x4889c7	                            mov rdi, rax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b94	      0xe800000000	                          call 0x4000b99	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b99	            0x85c0	                           test eax, eax	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b9b	            0x7407	                            je 0x4000ba4	       560	fold.c	FUNCTION_24	IF_1	CALL_2
0x4000b9d	      0xb801000000	                              mov eax, 1	       561	fold.c	FUNCTION_24	IF_1
0x4000ba2	            0xeb31	                           jmp 0x4000bd5	       561	fold.c	FUNCTION_24	IF_1
0x4000ba4	        0x837dfc00	                  cmp dword [rbp - 4], 0	       562	fold.c	FUNCTION_24	IF_2
0x4000ba8	            0x7414	                            je 0x4000bbe	       562	fold.c	FUNCTION_24	IF_2
0x4000baa	      0xbf00000000	                              mov edi, 0	       563	fold.c	FUNCTION_24	CALL_4
0x4000baf	      0xe800000000	                          call 0x4000bb4	       563	fold.c	FUNCTION_24	CALL_4
0x4000bb4	          0x4889c7	                            mov rdi, rax	       563	fold.c	FUNCTION_24	CALL_4
0x4000bb7	      0xe800000000	                          call 0x4000bbc	       563	fold.c	FUNCTION_24	CALL_4
0x4000bbc	            0xeb12	                           jmp 0x4000bd0	       563	fold.c	FUNCTION_24	CALL_4
0x4000bbe	      0xbf00000000	                              mov edi, 0	       565	fold.c	FUNCTION_24	CALL_6
0x4000bc3	      0xe800000000	                          call 0x4000bc8	       565	fold.c	FUNCTION_24	CALL_6
0x4000bc8	          0x4889c7	                            mov rdi, rax	       565	fold.c	FUNCTION_24	CALL_6
0x4000bcb	      0xe800000000	                          call 0x4000bd0	       565	fold.c	FUNCTION_24	CALL_6
0x4000bd0	      0xb800000000	                              mov eax, 0	       566	fold.c	FUNCTION_24
0x4000bd5	              0xc9	                                   leave	       567	fold.c	FUNCTION_24
0x4000bd6	              0xc3	                                     ret	       567	fold.c	FUNCTION_24
hasAnyFolding	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	22
0x400009d	              0x55	                                push rbp	       116	fold.c	FUNCTION_2
0x400009e	          0x4889e5	                            mov rbp, rsp	       116	fold.c	FUNCTION_2
0x40000a1	        0x4883ec10	                           sub rsp, 0x10	       116	fold.c	FUNCTION_2
0x40000a5	        0x48897df8	                mov qword [rbp - 8], rdi	       116	fold.c	FUNCTION_2
0x40000a9	        0x488b45f8	                mov rax, qword [rbp - 8]	       118	fold.c	FUNCTION_2
0x40000ad	    0x8b80d4010000	           mov eax, dword [rax + 0x1d4] 	       118	fold.c	FUNCTION_2
0x40000b3	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40000b5	            0x7425	                            je 0x40000dc	       119	fold.c	FUNCTION_2	CALL_1
0x40000b7	        0x488b45f8	                mov rax, qword [rbp - 8]	       119	fold.c	FUNCTION_2	CALL_1
0x40000bb	          0x4889c7	                            mov rdi, rax	       119	fold.c	FUNCTION_2	CALL_1
0x40000be	      0xe800000000	                          call 0x40000c3	       119	fold.c	FUNCTION_2	CALL_1
0x40000c3	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40000c5	            0x740e	                            je 0x40000d5	       119	fold.c	FUNCTION_2	CALL_1
0x40000c7	        0x488b45f8	                mov rax, qword [rbp - 8]	       119	fold.c	FUNCTION_2	CALL_1
0x40000cb	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       119	fold.c	FUNCTION_2	CALL_1
0x40000d1	            0x85c0	                           test eax, eax	       119	fold.c	FUNCTION_2	CALL_1
0x40000d3	            0x7e07	                           jle 0x40000dc	       119	fold.c	FUNCTION_2	CALL_1
0x40000d5	      0xb801000000	                              mov eax, 1	       119	fold.c	FUNCTION_2	CALL_1
0x40000da	            0xeb05	                           jmp 0x40000e1	       119	fold.c	FUNCTION_2	CALL_1
0x40000dc	      0xb800000000	                              mov eax, 0	       119	fold.c	FUNCTION_2	CALL_1
0x40000e1	              0xc9	                                   leave	       120	fold.c	FUNCTION_2
0x40000e2	              0xc3	                                     ret	       120	fold.c	FUNCTION_2
foldlevelExpr	functions,0:DO,0:ELSE,2:FOR,0:SWITCH,1:WHILE,0:IF,8:CALL,2	171
0x4005f40	              0x55	                                push rbp	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f41	          0x4889e5	                            mov rbp, rsp	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f44	        0x4883ec40	                           sub rsp, 0x40	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f48	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f4c	    0x64488b042528	                mov rax, qword fs:[0x28]	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f55	        0x488945f8	                mov qword [rbp - 8], rax	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f59	            0x31c0	                            xor eax, eax	      3255	fold.c	ELSE_1	FUNCTION_69
0x4005f5b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f5f	        0x488b5008	                mov rdx, qword [rax + 8]	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f63	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f67	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f6b	          0x4801d0	                            add rax, rdx	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f6e	        0x488945e8	             mov qword [rbp - 0x18], rax	      3263	fold.c	ELSE_1	FUNCTION_69
0x4005f72	    0x488b05000000	            mov rax, qword [0x04005f79] 	      3266	fold.c	ELSE_1	FUNCTION_69
0x4005f79	        0x488945f0	             mov qword [rbp - 0x10], rax	      3266	fold.c	ELSE_1	FUNCTION_69
0x4005f7d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3267	fold.c	ELSE_1	FUNCTION_69
0x4005f81	          0x488b00	                    mov rax, qword [rax]	      3267	fold.c	ELSE_1	FUNCTION_69
0x4005f84	    0x488905000000	            mov qword [0x04005f8b], rax 	      3267	fold.c	ELSE_1	FUNCTION_69
0x4005f8b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4005f8f	          0x488b00	                    mov rax, qword [rax]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4005f92	        0x488b4008	                mov rax, qword [rax + 8]	      3268	fold.c	ELSE_1	FUNCTION_69
0x4005f96	    0x488905000000	            mov qword [0x04005f9d], rax 	      3268	fold.c	ELSE_1	FUNCTION_69
0x4005f9d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4005fa1	          0x4889c6	                            mov rsi, rax	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4005fa4	      0xbf09000000	                              mov edi, 9	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4005fa9	      0xe800000000	                          call 0x4005fae	      3269	fold.c	ELSE_1	FUNCTION_69	CALL_1
0x4005fae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3271	fold.c	ELSE_1	FUNCTION_69
0x4005fb2	    0xc74028000000	               mov dword [rax + 0x28], 0	      3271	fold.c	ELSE_1	FUNCTION_69
0x4005fb9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3272	fold.c	ELSE_1	FUNCTION_69
0x4005fbd	          0x8b502c	            mov edx, dword [rax + 0x2c] 	      3272	fold.c	ELSE_1	FUNCTION_69
0x4005fc0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3272	fold.c	ELSE_1	FUNCTION_69
0x4005fc4	          0x895030	             mov dword [rax + 0x30], edx	      3272	fold.c	ELSE_1	FUNCTION_69
0x4005fc7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3273	fold.c	ELSE_1	FUNCTION_69
0x4005fcb	    0xc7402c150000	           mov dword [rax + 0x2c], 0x15 	      3273	fold.c	ELSE_1	FUNCTION_69
0x4005fd2	      0x48837de801	               cmp qword [rbp - 0x18], 1	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4005fd7	            0x7f0b	                            jg 0x4005fe4	      3274	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4005fd9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4005fdd	    0xc74020000000	               mov dword [rax + 0x20], 0	      3275	fold.c	ELSE_1	FUNCTION_69	IF_1
0x4005fe4	    0x8b0500000000	            mov eax, dword [0x04005fea] 	      3279	fold.c	ELSE_1	FUNCTION_69
0x4005fea	          0x8945e0	             mov dword [rbp - 0x20], eax	      3279	fold.c	ELSE_1	FUNCTION_69
0x4005fed	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4005ff1	          0x488b00	                    mov rax, qword [rax]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4005ff4	    0x488b80180200	           mov rax, qword [rax + 0x218] 	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4005ffb	        0x488d55dc	                   lea rdx, [rbp - 0x24]	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4005fff	          0x4889d6	                            mov rsi, rdx	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4006002	          0x4889c7	                            mov rdi, rax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x4006005	      0xe800000000	                          call 0x400600a	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x400600a	          0x8945e4	             mov dword [rbp - 0x1c], eax	      3280	fold.c	ELSE_1	FUNCTION_69	CALL_2
0x400600d	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      3281	fold.c	ELSE_1	FUNCTION_69
0x4006010	    0x890500000000	            mov dword [0x04006016], eax 	      3281	fold.c	ELSE_1	FUNCTION_69
0x4006016	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006019	          0x83f83e	                           cmp eax, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400601c	     0xf84b4000000	                            je 0x40060d6	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006022	          0x83f83e	                           cmp eax, 0x3e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006025	            0x7f17	                            jg 0x400603e	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006027	          0x83f83c	                           cmp eax, 0x3c	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400602a	     0xf84c7000000	                            je 0x40060f7	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006030	          0x83f83d	                           cmp eax, 0x3d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006033	     0xf84d7000000	                            je 0x4006110	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006039	      0xe9e2000000	                           jmp 0x4006120	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400603e	          0x83f861	                           cmp eax, 0x61	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006041	            0x740a	                            je 0x400604d	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006043	          0x83f873	                           cmp eax, 0x73	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006046	            0x7440	                            je 0x4006088	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006048	      0xe9d3000000	                           jmp 0x4006120	      3283	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400604d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006051	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006054	            0x85c0	                           test eax, eax	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006056	            0x7821	                            js 0x4006079	      3286	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006058	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400605c	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400605f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006062	             0x1c2	                            add edx, eax	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006064	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006068	          0x895020	             mov dword [rax + 0x20], edx	      3288	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400606b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x400606f	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006072	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006076	          0x895024	             mov dword [rax + 0x24], edx	      3289	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_2
0x4006079	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x400607d	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006080	          0x895028	             mov dword [rax + 0x28], edx	      3291	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006083	      0xe9c5000000	                           jmp 0x400614d	      3292	fold.c	ELSE_1	FUNCTION_69	SWITCH_1
0x4006088	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x400608c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x400608f	            0x85c0	                           test eax, eax	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x4006091	     0xf88b5000000	                            js 0x400614c	      3295	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3
0x4006097	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x400609b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x400609e	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40060a1	            0x7d0d	                           jge 0x40060b0	      3297	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40060a3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40060a7	    0xc74024000000	               mov dword [rax + 0x24], 0	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40060ae	            0xeb13	                           jmp 0x40060c3	      3298	fold.c	ELSE_1	FUNCTION_69	SWITCH_1	IF_3	IF_4
0x40060b0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060b4	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060b7	          0x2b45e4	             sub eax, dword [rbp - 0x1c]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060ba	            0x89c2	                            mov edx, eax	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060bc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060c0	          0x895024	             mov dword [rax + 0x24], edx	      3300	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060c3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060c7	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060ca	          0x8d5001	                      lea edx, [rax + 1]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060cd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060d1	          0x89502c	             mov dword [rax + 0x2c], edx	      3301	fold.c	FUNCTION_69	SWITCH_1	IF_3	ELSE_1
0x40060d4	            0xeb76	                           jmp 0x400614c	      3303	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060d6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060da	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060dd	          0x895020	             mov dword [rax + 0x20], edx	      3306	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060e0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060e4	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060e7	          0x895024	             mov dword [rax + 0x24], edx	      3307	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060ea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060ee	    0xc74028010000	               mov dword [rax + 0x28], 1	      3308	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060f5	            0xeb56	                           jmp 0x400614d	      3309	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060f7	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060fa	          0x8d50ff	                      lea edx, [rax - 1]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x40060fd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006101	          0x895024	             mov dword [rax + 0x24], edx	      3312	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006104	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006108	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400610b	          0x89502c	             mov dword [rax + 0x2c], edx	      3313	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400610e	            0xeb3d	                           jmp 0x400614d	      3314	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006110	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006114	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006117	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400611b	          0x895024	             mov dword [rax + 0x24], edx	      3317	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400611e	            0xeb2d	                           jmp 0x400614d	      3318	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x4006120	        0x837de400	               cmp dword [rbp - 0x1c], 0	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4006124	            0x7910	                           jns 0x4006136	      3321	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4006126	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x400612a	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x400612d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4006131	          0x895024	             mov dword [rax + 0x24], edx	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4006134	            0xeb0a	                           jmp 0x4006140	      3324	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	IF_5
0x4006136	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x400613a	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x400613d	          0x895024	             mov dword [rax + 0x24], edx	      3326	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4006140	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4006144	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x4006147	          0x895020	             mov dword [rax + 0x20], edx	      3327	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x400614a	            0xeb01	                           jmp 0x400614d	      3328	fold.c	FUNCTION_69	SWITCH_1	ELSE_1	ELSE_2
0x400614c	              0x90	                                     nop	      3303	fold.c	FUNCTION_69	SWITCH_1	ELSE_1
0x400614d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4006151	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4006154	            0x85c0	                           test eax, eax	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4006156	            0x7938	                           jns 0x4006190	      3333	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6
0x4006158	      0x48837de801	               cmp qword [rbp - 0x18], 1	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400615d	            0x7f16	                            jg 0x4006175	      3335	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400615f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4006163	    0xc74020000000	               mov dword [rax + 0x20], 0	      3337	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400616a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x400616e	    0xc74024000000	               mov dword [rax + 0x24], 0	      3338	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_7
0x4006175	    0x488b05000000	            mov rax, qword [0x0400617c] 	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400617c	          0x488b00	                    mov rax, qword [rax]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x400617f	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4006183	            0x750b	                           jne 0x4006190	      3340	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4006185	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4006189	    0xc74024000000	               mov dword [rax + 0x24], 0	      3341	fold.c	FUNCTION_69	ELSE_1	ELSE_2	IF_6	IF_8
0x4006190	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3344	fold.c	FUNCTION_69	ELSE_1
0x4006194	    0x488905000000	            mov qword [0x0400619b], rax 	      3344	fold.c	FUNCTION_69	ELSE_1
0x400619b	    0x488b05000000	            mov rax, qword [0x040061a2] 	      3345	fold.c	FUNCTION_69	ELSE_1
0x40061a2	        0x488b4008	                mov rax, qword [rax + 8]	      3345	fold.c	FUNCTION_69	ELSE_1
0x40061a6	    0x488905000000	            mov qword [0x040061ad], rax 	      3345	fold.c	FUNCTION_69	ELSE_1
0x40061ad	              0x90	                                     nop	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061ae	        0x488b45f8	                mov rax, qword [rbp - 8]	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061b2	    0x644833042528	                xor rax, qword fs:[0x28]	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061bb	            0x7405	                            je 0x40061c2	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061bd	      0xe800000000	                          call 0x40061c2	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061c2	              0xc9	                                   leave	      3347	fold.c	FUNCTION_69	ELSE_1
0x40061c3	              0xc3	                                     ret	      3347	fold.c	FUNCTION_69	ELSE_1
hasFolding	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	16
0x40000e3	              0x55	                                push rbp	       131	fold.c	FUNCTION_3
0x40000e4	          0x4889e5	                            mov rbp, rsp	       131	fold.c	FUNCTION_3
0x40000e7	        0x4883ec20	                           sub rsp, 0x20	       131	fold.c	FUNCTION_3
0x40000eb	        0x48897df8	                mov qword [rbp - 8], rdi	       131	fold.c	FUNCTION_3
0x40000ef	        0x488975f0	             mov qword [rbp - 0x10], rsi	       131	fold.c	FUNCTION_3
0x40000f3	        0x488955e8	             mov qword [rbp - 0x18], rdx	       131	fold.c	FUNCTION_3
0x40000f7	    0x488b05000000	            mov rax, qword [0x040000fe] 	       132	fold.c	FUNCTION_3	CALL_1
0x40000fe	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       132	fold.c	FUNCTION_3	CALL_1
0x4000102	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       132	fold.c	FUNCTION_3	CALL_1
0x4000106	        0x488b75f8	                mov rsi, qword [rbp - 8]	       132	fold.c	FUNCTION_3	CALL_1
0x400010a	    0x41b900000000	                              mov r9d, 0	       132	fold.c	FUNCTION_3	CALL_1
0x4000110	    0x41b801000000	                              mov r8d, 1	       132	fold.c	FUNCTION_3	CALL_1
0x4000116	          0x4889c7	                            mov rdi, rax	       132	fold.c	FUNCTION_3	CALL_1
0x4000119	      0xe800000000	                          call 0x400011e	       132	fold.c	FUNCTION_3	CALL_1
0x400011e	              0xc9	                                   leave	       133	fold.c	FUNCTION_3
0x400011f	              0xc3	                                     ret	       133	fold.c	FUNCTION_3
lineFolded	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	16
0x40004b3	              0x55	                                push rbp	       277	fold.c	FUNCTION_6
0x40004b4	          0x4889e5	                            mov rbp, rsp	       277	fold.c	FUNCTION_6
0x40004b7	        0x4883ec10	                           sub rsp, 0x10	       277	fold.c	FUNCTION_6
0x40004bb	        0x48897df8	                mov qword [rbp - 8], rdi	       277	fold.c	FUNCTION_6
0x40004bf	        0x488975f0	             mov qword [rbp - 0x10], rsi	       277	fold.c	FUNCTION_6
0x40004c3	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       278	fold.c	FUNCTION_6	CALL_1
0x40004c7	        0x488b45f8	                mov rax, qword [rbp - 8]	       278	fold.c	FUNCTION_6	CALL_1
0x40004cb	      0xba00000000	                              mov edx, 0	       278	fold.c	FUNCTION_6	CALL_1
0x40004d0	          0x4889ce	                            mov rsi, rcx	       278	fold.c	FUNCTION_6	CALL_1
0x40004d3	          0x4889c7	                            mov rdi, rax	       278	fold.c	FUNCTION_6	CALL_1
0x40004d6	      0xe800000000	                          call 0x40004db	       278	fold.c	FUNCTION_6	CALL_1
0x40004db	          0x4885c0	                           test rax, rax	       278	fold.c	FUNCTION_6	CALL_1
0x40004de	           0xf95c0	                                setne al	       278	fold.c	FUNCTION_6	CALL_1
0x40004e1	           0xfb6c0	                           movzx eax, al	       278	fold.c	FUNCTION_6	CALL_1
0x40004e4	              0xc9	                                   leave	       279	fold.c	FUNCTION_6
0x40004e5	              0xc3	                                     ret	       279	fold.c	FUNCTION_6
getDeepestNestingRecurse	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,1:CALL,1	37
0x40029e1	              0x55	                                push rbp	      1618	fold.c	FUNCTION_48
0x40029e2	          0x4889e5	                            mov rbp, rsp	      1618	fold.c	FUNCTION_48
0x40029e5	        0x4883ec30	                           sub rsp, 0x30	      1618	fold.c	FUNCTION_48
0x40029e9	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1618	fold.c	FUNCTION_48
0x40029ed	    0xc745f0000000	               mov dword [rbp - 0x10], 0	      1621	fold.c	FUNCTION_48
0x40029f4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1624	fold.c	FUNCTION_48
0x40029f8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1624	fold.c	FUNCTION_48
0x40029fc	        0x488945f8	                mov qword [rbp - 8], rax	      1624	fold.c	FUNCTION_48
0x4002a00	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a07	            0xeb41	                           jmp 0x4002a4a	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a09	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a0c	          0x4863d0	                         movsxd rdx, eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a0f	          0x4889d0	                            mov rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a12	          0x4801c0	                            add rax, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a15	          0x4801d0	                            add rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a18	        0x48c1e004	                              shl rax, 4	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a1c	          0x4889c2	                            mov rdx, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a1f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a23	          0x4801d0	                            add rax, rdx	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a26	        0x4883c010	                           add rax, 0x10	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a2a	          0x4889c7	                            mov rdi, rax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a2d	      0xe8afffffff	       call sym.getDeepestNestingRecurse	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a32	          0x83c001	                              add eax, 1	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a35	          0x8945f4	              mov dword [rbp - 0xc], eax	      1627	fold.c	FUNCTION_48	FOR_1	CALL_1
0x4002a38	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x4002a3b	          0x3b45f0	             cmp eax, dword [rbp - 0x10]	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x4002a3e	            0x7e06	                           jle 0x4002a46	      1628	fold.c	FUNCTION_48	FOR_1	IF_1
0x4002a40	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1629	fold.c	FUNCTION_48	FOR_1	IF_1
0x4002a43	          0x8945f0	             mov dword [rbp - 0x10], eax	      1629	fold.c	FUNCTION_48	FOR_1	IF_1
0x4002a46	        0x8345ec01	               add dword [rbp - 0x14], 1	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a4a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a4e	            0x8b00	                    mov eax, dword [rax]	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a50	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a53	            0x7fb4	                            jg 0x4002a09	      1625	fold.c	FUNCTION_48	FOR_1
0x4002a55	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1632	fold.c	FUNCTION_48
0x4002a58	              0xc9	                                   leave	      1633	fold.c	FUNCTION_48
0x4002a59	              0xc3	                                     ret	      1633	fold.c	FUNCTION_48
newFoldLevelWin	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,1:CALL,2	39
0x4000904	              0x55	                                push rbp	       490	fold.c	FUNCTION_21
0x4000905	          0x4889e5	                            mov rbp, rsp	       490	fold.c	FUNCTION_21
0x4000908	        0x4883ec20	                           sub rsp, 0x20	       490	fold.c	FUNCTION_21
0x400090c	        0x48897de8	             mov qword [rbp - 0x18], rdi	       490	fold.c	FUNCTION_21
0x4000910	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       494	fold.c	FUNCTION_21	CALL_1
0x4000914	          0x4889c7	                            mov rdi, rax	       494	fold.c	FUNCTION_21	CALL_1
0x4000917	      0xe89b140000	                    call sym.checkupdate	       494	fold.c	FUNCTION_21	CALL_1
0x400091c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       495	fold.c	FUNCTION_21	IF_1
0x4000920	     0xfb680200100	          movzx eax, byte [rax + 0x120] 	       495	fold.c	FUNCTION_21	IF_1
0x4000927	            0x84c0	                             test al, al	       495	fold.c	FUNCTION_21	IF_1
0x4000929	            0x7457	                            je 0x4000982	       495	fold.c	FUNCTION_21	IF_1
0x400092b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       500	fold.c	FUNCTION_21	IF_1
0x400092f	    0x488b80180100	           mov rax, qword [rax + 0x118] 	       500	fold.c	FUNCTION_21	IF_1
0x4000936	        0x488945f8	                mov qword [rbp - 8], rax	       500	fold.c	FUNCTION_21	IF_1
0x400093a	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000941	            0xeb25	                           jmp 0x4000968	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000943	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000946	          0x4863d0	                         movsxd rdx, eax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000949	          0x4889d0	                            mov rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x400094c	          0x4801c0	                            add rax, rax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x400094f	          0x4801d0	                            add rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000952	        0x48c1e004	                              shl rax, 4	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000956	          0x4889c2	                            mov rdx, rax	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000959	        0x488b45f8	                mov rax, qword [rbp - 8]	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x400095d	          0x4801d0	                            add rax, rdx	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000960	        0xc6402802	                mov byte [rax + 0x28], 2	       502	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000964	        0x8345f401	                add dword [rbp - 0xc], 1	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000968	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x400096c	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000972	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000975	            0x7fcc	                            jg 0x4000943	       501	fold.c	FUNCTION_21	IF_1	FOR_1
0x4000977	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       503	fold.c	FUNCTION_21	IF_1
0x400097b	    0xc68020010000	               mov byte [rax + 0x120], 0	       503	fold.c	FUNCTION_21	IF_1
0x4000982	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       505	fold.c	FUNCTION_21	CALL_2
0x4000986	          0x4889c7	                            mov rdi, rax	       505	fold.c	FUNCTION_21	CALL_2
0x4000989	      0xe800000000	                          call 0x400098e	       505	fold.c	FUNCTION_21	CALL_2
0x400098e	              0x90	                                     nop	       506	fold.c	FUNCTION_21
0x400098f	              0xc9	                                   leave	       506	fold.c	FUNCTION_21
0x4000990	              0xc3	                                     ret	       506	fold.c	FUNCTION_21
parseMarker	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,2	26
0x40061c4	              0x55	                                push rbp	      3357	fold.c	FUNCTION_70
0x40061c5	          0x4889e5	                            mov rbp, rsp	      3357	fold.c	FUNCTION_70
0x40061c8	        0x4883ec10	                           sub rsp, 0x10	      3357	fold.c	FUNCTION_70
0x40061cc	        0x48897df8	                mov qword [rbp - 8], rdi	      3357	fold.c	FUNCTION_70
0x40061d0	        0x488b45f8	                mov rax, qword [rbp - 8]	      3358	fold.c	FUNCTION_70	CALL_1
0x40061d4	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3358	fold.c	FUNCTION_70	CALL_1
0x40061db	      0xbe2c000000	                           mov esi, 0x2c	      3358	fold.c	FUNCTION_70	CALL_1
0x40061e0	          0x4889c7	                            mov rdi, rax	      3358	fold.c	FUNCTION_70	CALL_1
0x40061e3	      0xe800000000	                          call 0x40061e8	      3358	fold.c	FUNCTION_70	CALL_1
0x40061e8	    0x488905000000	            mov qword [0x040061ef], rax 	      3358	fold.c	FUNCTION_70	CALL_1
0x40061ef	    0x488b05000000	            mov rax, qword [0x040061f6] 	      3359	fold.c	FUNCTION_70
0x40061f6	        0x488d5001	                      lea rdx, [rax + 1]	      3359	fold.c	FUNCTION_70
0x40061fa	    0x488915000000	            mov qword [0x04006201], rdx 	      3359	fold.c	FUNCTION_70
0x4006201	          0x4889c2	                            mov rdx, rax	      3359	fold.c	FUNCTION_70
0x4006204	        0x488b45f8	                mov rax, qword [rbp - 8]	      3359	fold.c	FUNCTION_70
0x4006208	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3359	fold.c	FUNCTION_70
0x400620f	          0x4829c2	                            sub rdx, rax	      3359	fold.c	FUNCTION_70
0x4006212	          0x4889d0	                            mov rax, rdx	      3359	fold.c	FUNCTION_70
0x4006215	    0x890500000000	            mov dword [0x0400621b], eax 	      3359	fold.c	FUNCTION_70
0x400621b	    0x488b05000000	            mov rax, qword [0x04006222] 	      3360	fold.c	FUNCTION_70	CALL_2
0x4006222	          0x4889c7	                            mov rdi, rax	      3360	fold.c	FUNCTION_70	CALL_2
0x4006225	      0xe800000000	                          call 0x400622a	      3360	fold.c	FUNCTION_70	CALL_2
0x400622a	    0x890500000000	            mov dword [0x04006230], eax 	      3360	fold.c	FUNCTION_70	CALL_2
0x4006230	              0x90	                                     nop	      3361	fold.c	FUNCTION_70
0x4006231	              0xc9	                                   leave	      3361	fold.c	FUNCTION_70
0x4006232	              0xc3	                                     ret	      3361	fold.c	FUNCTION_70
openFoldRecurse	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x40007a0	              0x55	                                push rbp	       435	fold.c	FUNCTION_18
0x40007a1	          0x4889e5	                            mov rbp, rsp	       435	fold.c	FUNCTION_18
0x40007a4	        0x4883ec10	                           sub rsp, 0x10	       435	fold.c	FUNCTION_18
0x40007a8	        0x48897df8	                mov qword [rbp - 8], rdi	       435	fold.c	FUNCTION_18
0x40007ac	        0x488b45f8	                mov rax, qword [rbp - 8]	       436	fold.c	FUNCTION_18	CALL_1
0x40007b0	      0xb900000000	                              mov ecx, 0	       436	fold.c	FUNCTION_18	CALL_1
0x40007b5	      0xba01000000	                              mov edx, 1	       436	fold.c	FUNCTION_18	CALL_1
0x40007ba	      0xbe01000000	                              mov esi, 1	       436	fold.c	FUNCTION_18	CALL_1
0x40007bf	          0x4889c7	                            mov rdi, rax	       436	fold.c	FUNCTION_18	CALL_1
0x40007c2	      0xe8da160000	                  call sym.setManualFold	       436	fold.c	FUNCTION_18	CALL_1
0x40007c7	              0x90	                                     nop	       437	fold.c	FUNCTION_18
0x40007c8	              0xc9	                                   leave	       437	fold.c	FUNCTION_18
0x40007c9	              0xc3	                                     ret	       437	fold.c	FUNCTION_18
foldlevelIndent	functions,0:DO,0:ELSE,2:FOR,0:SWITCH,0:WHILE,0:IF,4:CALL,5	92
0x4005dae	              0x55	                                push rbp	      3203	fold.c	FUNCTION_67
0x4005daf	          0x4889e5	                            mov rbp, rsp	      3203	fold.c	FUNCTION_67
0x4005db2	              0x53	                                push rbx	      3203	fold.c	FUNCTION_67
0x4005db3	        0x4883ec38	                           sub rsp, 0x38	      3203	fold.c	FUNCTION_67
0x4005db7	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3203	fold.c	FUNCTION_67
0x4005dbb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3206	fold.c	FUNCTION_67
0x4005dbf	        0x488b5008	                mov rdx, qword [rax + 8]	      3206	fold.c	FUNCTION_67
0x4005dc3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3206	fold.c	FUNCTION_67
0x4005dc7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3206	fold.c	FUNCTION_67
0x4005dcb	          0x4801d0	                            add rax, rdx	      3206	fold.c	FUNCTION_67
0x4005dce	        0x488945d8	             mov qword [rbp - 0x28], rax	      3206	fold.c	FUNCTION_67
0x4005dd2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3208	fold.c	FUNCTION_67
0x4005dd6	          0x488b00	                    mov rax, qword [rax]	      3208	fold.c	FUNCTION_67
0x4005dd9	        0x488b4008	                mov rax, qword [rax + 8]	      3208	fold.c	FUNCTION_67
0x4005ddd	        0x488945e0	             mov qword [rbp - 0x20], rax	      3208	fold.c	FUNCTION_67
0x4005de1	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      3209	fold.c	FUNCTION_67	CALL_2
0x4005de5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3209	fold.c	FUNCTION_67	CALL_2
0x4005de9	      0xba00000000	                              mov edx, 0	      3209	fold.c	FUNCTION_67	CALL_2
0x4005dee	          0x4889ce	                            mov rsi, rcx	      3209	fold.c	FUNCTION_67	CALL_2
0x4005df1	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4005df4	      0xe800000000	                          call 0x4005df9	      3209	fold.c	FUNCTION_67	CALL_2
0x4005df9	          0x4889c7	                            mov rdi, rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4005dfc	      0xe800000000	                          call 0x4005e01	      3209	fold.c	FUNCTION_67	CALL_2
0x4005e01	        0x488945e8	             mov qword [rbp - 0x18], rax	      3209	fold.c	FUNCTION_67	CALL_2
0x4005e05	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e09	           0xfb600	                   movzx eax, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e0c	            0x84c0	                             test al, al	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e0e	            0x7427	                            je 0x4005e37	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e10	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e14	           0xfb600	                   movzx eax, byte [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e17	           0xfb6d0	                           movzx edx, al	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e1a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e1e	          0x488b00	                    mov rax, qword [rax]	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e21	    0x488b80e00100	           mov rax, qword [rax + 0x1e0] 	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e28	            0x89d6	                            mov esi, edx	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e2a	          0x4889c7	                            mov rdi, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e2d	      0xe800000000	                          call 0x4005e32	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e32	          0x4885c0	                           test rax, rax	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e35	            0x742e	                            je 0x4005e65	      3213	fold.c	FUNCTION_67	IF_1	CALL_3
0x4005e37	      0x48837dd801	               cmp qword [rbp - 0x28], 1	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e3c	            0x740d	                            je 0x4005e4b	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e3e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e42	          0x488b00	                    mov rax, qword [rax]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e45	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e49	            0x750d	                           jne 0x4005e58	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e4b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e4f	    0xc74020000000	               mov dword [rax + 0x20], 0	      3217	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e56	            0xeb46	                           jmp 0x4005e9e	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e58	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x4005e5c	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      3219	fold.c	FUNCTION_67	IF_1	ELSE_1
0x4005e63	            0xeb39	                           jmp 0x4005e9e	      3216	fold.c	FUNCTION_67	IF_1	IF_2
0x4005e65	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e69	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e6d	          0x4889d6	                            mov rsi, rdx	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e70	          0x4889c7	                            mov rdi, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e73	      0xe800000000	                          call 0x4005e78	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e78	          0x4863d8	                         movsxd rbx, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e7b	    0x488b05000000	            mov rax, qword [0x04005e82] 	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e82	          0x4889c7	                            mov rdi, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e85	      0xe800000000	                          call 0x4005e8a	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e8a	          0x4889c1	                            mov rcx, rax	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e8d	          0x4889d8	                            mov rax, rbx	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e90	            0x4899	                                     cqo	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e92	          0x48f7f9	                                idiv rcx	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e95	            0x89c2	                            mov edx, eax	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e97	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e9b	          0x895020	             mov dword [rax + 0x20], edx	      3222	fold.c	FUNCTION_67	CALL_5
0x4005e9e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3223	fold.c	FUNCTION_67	IF_3
0x4005ea2	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3223	fold.c	FUNCTION_67	IF_3
0x4005ea5	          0x4863d0	                         movsxd rdx, eax	      3223	fold.c	FUNCTION_67	IF_3
0x4005ea8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3223	fold.c	FUNCTION_67	IF_3
0x4005eac	          0x488b00	                    mov rax, qword [rax]	      3223	fold.c	FUNCTION_67	IF_3
0x4005eaf	    0x488b80100200	           mov rax, qword [rax + 0x210] 	      3223	fold.c	FUNCTION_67	IF_3
0x4005eb6	          0x4839c2	                            cmp rdx, rax	      3223	fold.c	FUNCTION_67	IF_3
0x4005eb9	            0x7e2d	                           jle 0x4005ee8	      3223	fold.c	FUNCTION_67	IF_3
0x4005ebb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3225	fold.c	FUNCTION_67	IF_3
0x4005ebf	          0x488b00	                    mov rax, qword [rax]	      3225	fold.c	FUNCTION_67	IF_3
0x4005ec2	    0x488b80100200	           mov rax, qword [rax + 0x210] 	      3225	fold.c	FUNCTION_67	IF_3
0x4005ec9	            0x89c2	                            mov edx, eax	      3225	fold.c	FUNCTION_67	IF_3
0x4005ecb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3225	fold.c	FUNCTION_67	IF_3
0x4005ecf	          0x895020	             mov dword [rax + 0x20], edx	      3225	fold.c	FUNCTION_67	IF_3
0x4005ed2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x4005ed6	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x4005ed9	            0x85c0	                           test eax, eax	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x4005edb	            0x790b	                           jns 0x4005ee8	      3226	fold.c	FUNCTION_67	IF_3	IF_4
0x4005edd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3227	fold.c	FUNCTION_67	IF_3	IF_4
0x4005ee1	    0xc74020000000	               mov dword [rax + 0x20], 0	      3227	fold.c	FUNCTION_67	IF_3	IF_4
0x4005ee8	              0x90	                                     nop	      3229	fold.c	FUNCTION_67
0x4005ee9	        0x4883c438	                           add rsp, 0x38	      3229	fold.c	FUNCTION_67
0x4005eed	              0x5b	                                 pop rbx	      3229	fold.c	FUNCTION_67
0x4005eee	              0x5d	                                 pop rbp	      3229	fold.c	FUNCTION_67
0x4005eef	              0xc3	                                     ret	      3229	fold.c	FUNCTION_67
foldOpenCursor	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,3	36
0x40007ca	              0x55	                                push rbp	       445	fold.c	FUNCTION_19
0x40007cb	          0x4889e5	                            mov rbp, rsp	       445	fold.c	FUNCTION_19
0x40007ce	        0x4883ec10	                           sub rsp, 0x10	       445	fold.c	FUNCTION_19
0x40007d2	    0x64488b042528	                mov rax, qword fs:[0x28]	       445	fold.c	FUNCTION_19
0x40007db	        0x488945f8	                mov qword [rbp - 8], rax	       445	fold.c	FUNCTION_19
0x40007df	            0x31c0	                            xor eax, eax	       445	fold.c	FUNCTION_19
0x40007e1	    0x488b05000000	            mov rax, qword [0x040007e8] 	       448	fold.c	FUNCTION_19	CALL_1
0x40007e8	          0x4889c7	                            mov rdi, rax	       448	fold.c	FUNCTION_19	CALL_1
0x40007eb	      0xe8c7150000	                    call sym.checkupdate	       448	fold.c	FUNCTION_19	CALL_1
0x40007f0	    0x488b05000000	            mov rax, qword [0x040007f7] 	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x40007f7	          0x4889c7	                            mov rdi, rax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x40007fa	      0xe800000000	                          call 0x40007ff	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x40007ff	            0x85c0	                           test eax, eax	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4000801	            0x7438	                            je 0x400083b	       449	fold.c	FUNCTION_19	IF_1	CALL_2
0x4000803	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       452	fold.c	FUNCTION_19	IF_1	FOR_1
0x400080a	    0x488b05000000	            mov rax, qword [0x04000811] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000811	        0x488b4038	            mov rax, qword [rax + 0x38] 	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000815	        0x488d55f4	                    lea rdx, [rbp - 0xc]	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000819	          0x4889d1	                            mov rcx, rdx	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x400081c	      0xba00000000	                              mov edx, 0	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000821	      0xbe01000000	                              mov esi, 1	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000826	          0x4889c7	                            mov rdi, rax	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x4000829	      0xe873160000	                  call sym.setManualFold	       453	fold.c	FUNCTION_19	IF_1	FOR_1	CALL_3
0x400082e	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4000831	          0x83e001	                              and eax, 1	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4000834	            0x85c0	                           test eax, eax	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4000836	            0x7402	                            je 0x400083a	       454	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x4000838	            0xebc9	                           jmp 0x4000803	       456	fold.c	FUNCTION_19	IF_1	FOR_1
0x400083a	              0x90	                                     nop	       455	fold.c	FUNCTION_19	IF_1	FOR_1	IF_2
0x400083b	              0x90	                                     nop	       457	fold.c	FUNCTION_19
0x400083c	        0x488b45f8	                mov rax, qword [rbp - 8]	       457	fold.c	FUNCTION_19
0x4000840	    0x644833042528	                xor rax, qword fs:[0x28]	       457	fold.c	FUNCTION_19
0x4000849	            0x7405	                            je 0x4000850	       457	fold.c	FUNCTION_19
0x400084b	      0xe800000000	                          call 0x4000850	       457	fold.c	FUNCTION_19
0x4000850	              0xc9	                                   leave	       457	fold.c	FUNCTION_19
0x4000851	              0xc3	                                     ret	       457	fold.c	FUNCTION_19
getDeepestNesting	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,2	11
0x40029b7	              0x55	                                push rbp	      1611	fold.c	FUNCTION_47
0x40029b8	          0x4889e5	                            mov rbp, rsp	      1611	fold.c	FUNCTION_47
0x40029bb	    0x488b05000000	            mov rax, qword [0x040029c2] 	      1612	fold.c	FUNCTION_47	CALL_1
0x40029c2	          0x4889c7	                            mov rdi, rax	      1612	fold.c	FUNCTION_47	CALL_1
0x40029c5	      0xe8edf3ffff	                    call sym.checkupdate	      1612	fold.c	FUNCTION_47	CALL_1
0x40029ca	    0x488b05000000	            mov rax, qword [0x040029d1] 	      1613	fold.c	FUNCTION_47	CALL_2
0x40029d1	    0x480508010000	                          add rax, 0x108	      1613	fold.c	FUNCTION_47	CALL_2
0x40029d7	          0x4889c7	                            mov rdi, rax	      1613	fold.c	FUNCTION_47	CALL_2
0x40029da	      0xe802000000	       call sym.getDeepestNestingRecurse	      1613	fold.c	FUNCTION_47	CALL_2
0x40029df	              0x5d	                                 pop rbp	      1614	fold.c	FUNCTION_47
0x40029e0	              0xc3	                                     ret	      1614	fold.c	FUNCTION_47
foldmethodIsSyntax	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	11
0x40005eb	              0x55	                                push rbp	       346	fold.c	FUNCTION_12
0x40005ec	          0x4889e5	                            mov rbp, rsp	       346	fold.c	FUNCTION_12
0x40005ef	        0x48897df8	                mov qword [rbp - 8], rdi	       346	fold.c	FUNCTION_12
0x40005f3	        0x488b45f8	                mov rax, qword [rbp - 8]	       347	fold.c	FUNCTION_12
0x40005f7	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       347	fold.c	FUNCTION_12
0x40005fe	           0xfb600	                   movzx eax, byte [rax]	       347	fold.c	FUNCTION_12
0x4000601	            0x3c73	                            cmp al, 0x73	       347	fold.c	FUNCTION_12
0x4000603	           0xf94c0	                                 sete al	       347	fold.c	FUNCTION_12
0x4000606	           0xfb6c0	                           movzx eax, al	       347	fold.c	FUNCTION_12
0x4000609	              0x5d	                                 pop rbp	       348	fold.c	FUNCTION_12
0x400060a	              0xc3	                                     ret	       348	fold.c	FUNCTION_12
foldedCount	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,1	32
0x40004e6	              0x55	                                push rbp	       292	fold.c	FUNCTION_7
0x40004e7	          0x4889e5	                            mov rbp, rsp	       292	fold.c	FUNCTION_7
0x40004ea	        0x4883ec30	                           sub rsp, 0x30	       292	fold.c	FUNCTION_7
0x40004ee	        0x48897de8	             mov qword [rbp - 0x18], rdi	       292	fold.c	FUNCTION_7
0x40004f2	        0x488975e0	             mov qword [rbp - 0x20], rsi	       292	fold.c	FUNCTION_7
0x40004f6	        0x488955d8	             mov qword [rbp - 0x28], rdx	       292	fold.c	FUNCTION_7
0x40004fa	    0x64488b042528	                mov rax, qword fs:[0x28]	       292	fold.c	FUNCTION_7
0x4000503	        0x488945f8	                mov qword [rbp - 8], rax	       292	fold.c	FUNCTION_7
0x4000507	            0x31c0	                            xor eax, eax	       292	fold.c	FUNCTION_7
0x4000509	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400050d	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000511	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000515	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000519	          0x4989c9	                             mov r9, rcx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400051c	    0x41b800000000	                              mov r8d, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000522	          0x4889d1	                            mov rcx, rdx	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000525	      0xba00000000	                              mov edx, 0	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400052a	          0x4889c7	                            mov rdi, rax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x400052d	      0xe800000000	                          call 0x4000532	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000532	            0x85c0	                           test eax, eax	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000534	            0x740e	                            je 0x4000544	       295	fold.c	FUNCTION_7	IF_1	CALL_1
0x4000536	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       296	fold.c	FUNCTION_7	IF_1
0x400053a	        0x482b45e0	             sub rax, qword [rbp - 0x20]	       296	fold.c	FUNCTION_7	IF_1
0x400053e	        0x4883c001	                              add rax, 1	       296	fold.c	FUNCTION_7	IF_1
0x4000542	            0xeb05	                           jmp 0x4000549	       296	fold.c	FUNCTION_7	IF_1
0x4000544	      0xb800000000	                              mov eax, 0	       297	fold.c	FUNCTION_7
0x4000549	        0x488b7df8	                mov rdi, qword [rbp - 8]	       298	fold.c	FUNCTION_7
0x400054d	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       298	fold.c	FUNCTION_7
0x4000556	            0x7405	                            je 0x400055d	       298	fold.c	FUNCTION_7
0x4000558	      0xe800000000	                          call 0x400055d	       298	fold.c	FUNCTION_7
0x400055d	              0xc9	                                   leave	       298	fold.c	FUNCTION_7
0x400055e	              0xc3	                                     ret	       298	fold.c	FUNCTION_7
checkCloseRec	functions,0:DO,0:ELSE,1:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,1	111
0x40009f4	              0x55	                                push rbp	       527	fold.c	FUNCTION_23
0x40009f5	          0x4889e5	                            mov rbp, rsp	       527	fold.c	FUNCTION_23
0x40009f8	        0x4883ec30	                           sub rsp, 0x30	       527	fold.c	FUNCTION_23
0x40009fc	        0x48897de8	             mov qword [rbp - 0x18], rdi	       527	fold.c	FUNCTION_23
0x4000a00	        0x488975e0	             mov qword [rbp - 0x20], rsi	       527	fold.c	FUNCTION_23
0x4000a04	          0x8955dc	             mov dword [rbp - 0x24], edx	       527	fold.c	FUNCTION_23
0x4000a07	    0xc745f0000000	               mov dword [rbp - 0x10], 0	       529	fold.c	FUNCTION_23
0x4000a0e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       532	fold.c	FUNCTION_23
0x4000a12	        0x488b4010	            mov rax, qword [rax + 0x10] 	       532	fold.c	FUNCTION_23
0x4000a16	        0x488945f8	                mov qword [rbp - 8], rax	       532	fold.c	FUNCTION_23
0x4000a1a	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       533	fold.c	FUNCTION_23	FOR_1
0x4000a21	      0xe932010000	                           jmp 0x4000b58	       533	fold.c	FUNCTION_23	FOR_1
0x4000a26	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a29	          0x4863d0	                         movsxd rdx, eax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a2c	          0x4889d0	                            mov rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a2f	          0x4801c0	                            add rax, rax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a32	          0x4801d0	                            add rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a35	        0x48c1e004	                              shl rax, 4	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a39	          0x4889c2	                            mov rdx, rax	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a3c	        0x488b45f8	                mov rax, qword [rbp - 8]	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a40	          0x4801d0	                            add rax, rdx	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a43	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a47	            0x84c0	                             test al, al	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a49	     0xf8505010000	                           jne 0x4000b54	       536	fold.c	FUNCTION_23	FOR_1	IF_1
0x4000a4f	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a53	     0xf8f9a000000	                            jg 0x4000af3	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a59	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a5c	          0x4863d0	                         movsxd rdx, eax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a5f	          0x4889d0	                            mov rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a62	          0x4801c0	                            add rax, rax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a65	          0x4801d0	                            add rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a68	        0x48c1e004	                              shl rax, 4	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a6c	          0x4889c2	                            mov rdx, rax	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a6f	        0x488b45f8	                mov rax, qword [rbp - 8]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a73	          0x4801d0	                            add rax, rdx	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a76	          0x488b00	                    mov rax, qword [rax]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a79	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a7d	            0x7f4a	                            jg 0x4000ac9	       538	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a7f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a82	          0x4863d0	                         movsxd rdx, eax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a85	          0x4889d0	                            mov rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a88	          0x4801c0	                            add rax, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a8b	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a8e	        0x48c1e004	                              shl rax, 4	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a92	          0x4889c2	                            mov rdx, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a95	        0x488b45f8	                mov rax, qword [rbp - 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a99	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a9c	          0x488b08	                    mov rcx, qword [rax]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000a9f	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aa2	          0x4863d0	                         movsxd rdx, eax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aa5	          0x4889d0	                            mov rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aa8	          0x4801c0	                            add rax, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aab	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aae	        0x48c1e004	                              shl rax, 4	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ab2	          0x4889c2	                            mov rdx, rax	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ab5	        0x488b45f8	                mov rax, qword [rbp - 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ab9	          0x4801d0	                            add rax, rdx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000abc	        0x488b4008	                mov rax, qword [rax + 8]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ac0	          0x4801c8	                            add rax, rcx	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ac3	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ac7	            0x7f2a	                            jg 0x4000af3	       539	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ac9	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000acc	          0x4863d0	                         movsxd rdx, eax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000acf	          0x4889d0	                            mov rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ad2	          0x4801c0	                            add rax, rax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ad5	          0x4801d0	                            add rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ad8	        0x48c1e004	                              shl rax, 4	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000adc	          0x4889c2	                            mov rdx, rax	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000adf	        0x488b45f8	                mov rax, qword [rbp - 8]	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ae3	          0x4801d0	                            add rax, rdx	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000ae6	        0xc6402802	                mov byte [rax + 0x28], 2	       541	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000aea	    0xc745f0010000	               mov dword [rbp - 0x10], 1	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000af1	            0xeb61	                           jmp 0x4000b54	       542	fold.c	FUNCTION_23	FOR_1	IF_1	IF_2
0x4000af3	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000af6	          0x8d70ff	                      lea esi, [rax - 1]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000af9	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000afc	          0x4863d0	                         movsxd rdx, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000aff	          0x4889d0	                            mov rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b02	          0x4801c0	                            add rax, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b05	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b08	        0x48c1e004	                              shl rax, 4	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b0c	          0x4889c2	                            mov rdx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b0f	        0x488b45f8	                mov rax, qword [rbp - 8]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b13	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b16	          0x488b00	                    mov rax, qword [rax]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b19	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b1d	          0x4889d1	                            mov rcx, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b20	          0x4829c1	                            sub rcx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b23	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b26	          0x4863d0	                         movsxd rdx, eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b29	          0x4889d0	                            mov rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b2c	          0x4801c0	                            add rax, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b2f	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b32	        0x48c1e004	                              shl rax, 4	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b36	          0x4889c2	                            mov rdx, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b39	        0x488b45f8	                mov rax, qword [rbp - 8]	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b3d	          0x4801d0	                            add rax, rdx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b40	        0x4883c010	                           add rax, 0x10	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b44	            0x89f2	                            mov edx, esi	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b46	          0x4889ce	                            mov rsi, rcx	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b49	          0x4889c7	                            mov rdi, rax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b4c	      0xe8a3feffff	                  call sym.checkCloseRec	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b51	           0x945f0	              or dword [rbp - 0x10], eax	       545	fold.c	FUNCTION_23	FOR_1	IF_1	ELSE_1	CALL_1
0x4000b54	        0x8345f401	                add dword [rbp - 0xc], 1	       533	fold.c	FUNCTION_23	FOR_1
0x4000b58	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       533	fold.c	FUNCTION_23	FOR_1
0x4000b5c	            0x8b00	                    mov eax, dword [rax]	       533	fold.c	FUNCTION_23	FOR_1
0x4000b5e	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       533	fold.c	FUNCTION_23	FOR_1
0x4000b61	     0xf8fbffeffff	                            jg 0x4000a26	       533	fold.c	FUNCTION_23	FOR_1
0x4000b67	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       549	fold.c	FUNCTION_23
0x4000b6a	              0xc9	                                   leave	       550	fold.c	FUNCTION_23
0x4000b6b	              0xc3	                                     ret	       550	fold.c	FUNCTION_23
foldRemove	functions,0:DO,0:ELSE,1:FOR,1:SWITCH,0:WHILE,0:IF,6:CALL,5	158
0x400527c	              0x55	                                push rbp	      2917	fold.c	FUNCTION_62
0x400527d	          0x4889e5	                            mov rbp, rsp	      2917	fold.c	FUNCTION_62
0x4005280	        0x4883ec30	                           sub rsp, 0x30	      2917	fold.c	FUNCTION_62
0x4005284	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2917	fold.c	FUNCTION_62
0x4005288	        0x488975e0	             mov qword [rbp - 0x20], rsi	      2917	fold.c	FUNCTION_62
0x400528c	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2917	fold.c	FUNCTION_62
0x4005290	    0x64488b042528	                mov rax, qword fs:[0x28]	      2917	fold.c	FUNCTION_62
0x4005299	        0x488945f8	                mov qword [rbp - 8], rax	      2917	fold.c	FUNCTION_62
0x400529d	            0x31c0	                            xor eax, eax	      2917	fold.c	FUNCTION_62
0x400529f	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      2918	fold.c	FUNCTION_62
0x40052a7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2920	fold.c	FUNCTION_62	IF_1
0x40052ab	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2920	fold.c	FUNCTION_62	IF_1
0x40052af	     0xf8c16020000	                            jl 0x40054cb	      2920	fold.c	FUNCTION_62	IF_1
0x40052b5	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052b9	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052bd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052c1	          0x4889ce	                            mov rsi, rcx	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052c4	          0x4889c7	                            mov rdi, rax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052c7	      0xe819c9ffff	                       call sym.foldFind	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052cc	            0x85c0	                           test eax, eax	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052ce	     0xf84c6000000	                            je 0x400539a	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052d8	          0x488b00	                    mov rax, qword [rax]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052db	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052df	     0xf8db5000000	                           jge 0x400539a	      2926	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_1
0x40052e5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052e9	          0x488b00	                    mov rax, qword [rax]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052ec	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052f0	          0x4829c2	                            sub rdx, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052f3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052f7	          0x488b00	                    mov rax, qword [rax]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052fa	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x40052fe	          0x4829c1	                            sub rcx, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4005301	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4005305	        0x4883c010	                           add rax, 0x10	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4005309	          0x4889ce	                            mov rsi, rcx	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x400530c	          0x4889c7	                            mov rdi, rax	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x400530f	      0xe868ffffff	                     call sym.foldRemove	      2929	fold.c	FUNCTION_62	FOR_1	IF_2	CALL_2
0x4005314	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4005318	          0x488b10	                    mov rdx, qword [rax]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x400531b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x400531f	        0x488b4008	                mov rax, qword [rax + 8]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4005323	          0x4801d0	                            add rax, rdx	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4005326	        0x4883e801	                              sub rax, 1	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x400532a	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x400532e	            0x7e42	                           jle 0x4005372	      2930	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3
0x4005330	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005334	          0x4889c2	                            mov rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005337	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400533b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400533f	          0x4829c2	                            sub rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005342	          0x4889d0	                            mov rax, rdx	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005345	        0x48c1f804	                              sar rax, 4	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005349	          0x4889c2	                            mov rdx, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400534c	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005356	        0x480fafc2	                           imul rax, rdx	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400535a	            0x89c6	                            mov esi, eax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400535c	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005360	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005364	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005368	          0x4889c7	                            mov rdi, rax	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x400536b	      0xe859fcffff	                      call sym.foldSplit	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005370	            0xeb19	                           jmp 0x400538b	      2933	fold.c	FUNCTION_62	FOR_1	IF_2	IF_3	CALL_3
0x4005372	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x4005376	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x400537a	          0x488b12	                    mov rdx, qword [rdx]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x400537d	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x4005381	          0x4829d1	                            sub rcx, rdx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x4005384	          0x4889ca	                            mov rdx, rcx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x4005387	        0x48895008	                mov qword [rax + 8], rdx	      2938	fold.c	FUNCTION_62	FOR_1	IF_2	ELSE_1
0x400538b	    0xc70500000000	               mov dword [0x04005395], 1	      2940	fold.c	FUNCTION_62	FOR_1	IF_2
0x4005395	      0xe92c010000	                           jmp 0x40054c6	      2941	fold.c	FUNCTION_62	FOR_1	IF_2
0x400539a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x400539e	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053a2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053a6	            0x8b00	                    mov eax, dword [rax]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053a8	          0x4863d0	                         movsxd rdx, eax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053ab	          0x4889d0	                            mov rax, rdx	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053ae	          0x4801c0	                            add rax, rax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053b1	          0x4801d0	                            add rax, rdx	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053b4	        0x48c1e004	                              shl rax, 4	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053b8	        0x488d1401	                    lea rdx, [rcx + rax]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053bc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053c0	          0x4839c2	                            cmp rdx, rax	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053c3	     0xf8603010000	                           jbe 0x40054cc	      2943	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053c9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053cd	          0x488b00	                    mov rax, qword [rax]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053d0	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053d4	     0xf8ff2000000	                            jg 0x40054cc	      2944	fold.c	FUNCTION_62	FOR_1	IF_4
0x40053da	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40053de	          0x488b00	                    mov rax, qword [rax]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40053e1	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40053e5	     0xf8ccafeffff	                            jl 0x40052b5	      2949	fold.c	FUNCTION_62	FOR_1	IF_5
0x40053eb	    0xc70500000000	               mov dword [0x040053f5], 1	      2952	fold.c	FUNCTION_62	FOR_1	IF_5
0x40053f5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x40053f9	          0x488b10	                    mov rdx, qword [rax]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x40053fc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005400	        0x488b4008	                mov rax, qword [rax + 8]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005404	          0x4801d0	                            add rax, rdx	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005407	        0x4883e801	                              sub rax, 1	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400540b	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400540f	            0x7e76	                           jle 0x4005487	      2953	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005411	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005415	          0x488b00	                    mov rax, qword [rax]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005418	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400541c	        0x488d48ff	                      lea rcx, [rax - 1]	      2958	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005420	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005424	          0x488b00	                    mov rax, qword [rax]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005427	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400542b	          0x4829c2	                            sub rdx, rax	      2957	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400542e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4005432	        0x4883c010	                           add rax, 0x10	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4005436	          0x4989c8	                             mov r8, rcx	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4005439	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x400543e	      0xbe00000000	                              mov esi, 0	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4005443	          0x4889c7	                            mov rdi, rax	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x4005446	      0xe816d2ffff	          call sym.foldMarkAdjustRecurse	      2956	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6	CALL_4
0x400544b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400544f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005453	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005457	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400545b	          0x488b12	                    mov rdx, qword [rdx]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400545e	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005462	          0x4829d6	                            sub rsi, rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005465	          0x4889f2	                            mov rdx, rsi	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005468	        0x4883c201	                              add rdx, 1	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400546c	          0x4829d1	                            sub rcx, rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400546f	          0x4889ca	                            mov rdx, rcx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005472	        0x48895008	                mov qword [rax + 8], rdx	      2959	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005476	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400547a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x400547e	        0x4883c201	                              add rdx, 1	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005482	          0x488910	                    mov qword [rax], rdx	      2960	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005485	            0xeb45	                           jmp 0x40054cc	      2961	fold.c	FUNCTION_62	FOR_1	IF_5	IF_6
0x4005487	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400548b	          0x4889c2	                            mov rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400548e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4005492	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4005496	          0x4829c2	                            sub rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x4005499	          0x4889d0	                            mov rax, rdx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x400549c	        0x48c1f804	                              sar rax, 4	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054a0	          0x4889c2	                            mov rdx, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054a3	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054ad	        0x480fafc2	                           imul rax, rdx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054b1	            0x89c1	                            mov ecx, eax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054b7	      0xba01000000	                              mov edx, 1	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054bc	            0x89ce	                            mov esi, ecx	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054be	          0x4889c7	                            mov rdi, rax	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054c1	      0xe821ceffff	                call sym.deleteFoldEntry	      2965	fold.c	FUNCTION_62	FOR_1	IF_5	CALL_5
0x40054c6	      0xe9eafdffff	                           jmp 0x40052b5	      2967	fold.c	FUNCTION_62	FOR_1
0x40054cb	              0x90	                                     nop	      2921	fold.c	FUNCTION_62	IF_1
0x40054cc	        0x488b45f8	                mov rax, qword [rbp - 8]	      2968	fold.c	FUNCTION_62
0x40054d0	    0x644833042528	                xor rax, qword fs:[0x28]	      2968	fold.c	FUNCTION_62
0x40054d9	            0x7405	                            je 0x40054e0	      2968	fold.c	FUNCTION_62
0x40054db	      0xe800000000	                          call 0x40054e0	      2968	fold.c	FUNCTION_62
0x40054e0	              0xc9	                                   leave	      2968	fold.c	FUNCTION_62
0x40054e1	              0xc3	                                     ret	      2968	fold.c	FUNCTION_62
foldLevelWin	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,1:CALL,1	38
0x4001d29	              0x55	                                push rbp	      1159	fold.c	FUNCTION_37
0x4001d2a	          0x4889e5	                            mov rbp, rsp	      1159	fold.c	FUNCTION_37
0x4001d2d	        0x4883ec40	                           sub rsp, 0x40	      1159	fold.c	FUNCTION_37
0x4001d31	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1159	fold.c	FUNCTION_37
0x4001d35	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1159	fold.c	FUNCTION_37
0x4001d39	    0x64488b042528	                mov rax, qword fs:[0x28]	      1159	fold.c	FUNCTION_37
0x4001d42	        0x488945f8	                mov qword [rbp - 8], rax	      1159	fold.c	FUNCTION_37
0x4001d46	            0x31c0	                            xor eax, eax	      1159	fold.c	FUNCTION_37
0x4001d48	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1161	fold.c	FUNCTION_37
0x4001d4c	        0x488945e8	             mov qword [rbp - 0x18], rax	      1161	fold.c	FUNCTION_37
0x4001d50	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1162	fold.c	FUNCTION_37
0x4001d57	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1166	fold.c	FUNCTION_37
0x4001d5b	    0x480508010000	                          add rax, 0x108	      1166	fold.c	FUNCTION_37
0x4001d61	        0x488945f0	             mov qword [rbp - 0x10], rax	      1166	fold.c	FUNCTION_37
0x4001d65	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d69	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d6d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d71	          0x4889ce	                            mov rsi, rcx	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d74	          0x4889c7	                            mov rdi, rax	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d77	      0xe869feffff	                       call sym.foldFind	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d7c	            0x85c0	                           test eax, eax	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d7e	            0x741d	                            je 0x4001d9d	      1169	fold.c	FUNCTION_37	FOR_1	IF_1	CALL_1
0x4001d80	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1172	fold.c	FUNCTION_37	FOR_1
0x4001d84	        0x4883c010	                           add rax, 0x10	      1172	fold.c	FUNCTION_37	FOR_1
0x4001d88	        0x488945f0	             mov qword [rbp - 0x10], rax	      1172	fold.c	FUNCTION_37	FOR_1
0x4001d8c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1173	fold.c	FUNCTION_37	FOR_1
0x4001d90	          0x488b00	                    mov rax, qword [rax]	      1173	fold.c	FUNCTION_37	FOR_1
0x4001d93	        0x482945e8	             sub qword [rbp - 0x18], rax	      1173	fold.c	FUNCTION_37	FOR_1
0x4001d97	        0x8345dc01	               add dword [rbp - 0x24], 1	      1174	fold.c	FUNCTION_37	FOR_1
0x4001d9b	            0xebc8	                           jmp 0x4001d65	      1175	fold.c	FUNCTION_37	FOR_1
0x4001d9d	              0x90	                                     nop	      1170	fold.c	FUNCTION_37	FOR_1	IF_1
0x4001d9e	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1177	fold.c	FUNCTION_37
0x4001da1	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1178	fold.c	FUNCTION_37
0x4001da5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1178	fold.c	FUNCTION_37
0x4001dae	            0x7405	                            je 0x4001db5	      1178	fold.c	FUNCTION_37
0x4001db0	      0xe800000000	                          call 0x4001db5	      1178	fold.c	FUNCTION_37
0x4001db5	              0xc9	                                   leave	      1178	fold.c	FUNCTION_37
0x4001db6	              0xc3	                                     ret	      1178	fold.c	FUNCTION_37
closeFold	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	14
0x400062b	              0x55	                                push rbp	       367	fold.c	FUNCTION_14
0x400062c	          0x4889e5	                            mov rbp, rsp	       367	fold.c	FUNCTION_14
0x400062f	        0x4883ec10	                           sub rsp, 0x10	       367	fold.c	FUNCTION_14
0x4000633	        0x48897df8	                mov qword [rbp - 8], rdi	       367	fold.c	FUNCTION_14
0x4000637	        0x488975f0	             mov qword [rbp - 0x10], rsi	       367	fold.c	FUNCTION_14
0x400063b	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       368	fold.c	FUNCTION_14	CALL_1
0x400063f	        0x488b45f8	                mov rax, qword [rbp - 8]	       368	fold.c	FUNCTION_14	CALL_1
0x4000643	      0xba00000000	                              mov edx, 0	       368	fold.c	FUNCTION_14	CALL_1
0x4000648	          0x4889ce	                            mov rsi, rcx	       368	fold.c	FUNCTION_14	CALL_1
0x400064b	          0x4889c7	                            mov rdi, rax	       368	fold.c	FUNCTION_14	CALL_1
0x400064e	      0xe8a3170000	                  call sym.setFoldRepeat	       368	fold.c	FUNCTION_14	CALL_1
0x4000653	              0x90	                                     nop	       369	fold.c	FUNCTION_14
0x4000654	              0xc9	                                   leave	       369	fold.c	FUNCTION_14
0x4000655	              0xc3	                                     ret	       369	fold.c	FUNCTION_14
foldCreateMarkers	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,6	38
0x4002c54	              0x55	                                push rbp	      1734	fold.c	FUNCTION_52
0x4002c55	          0x4889e5	                            mov rbp, rsp	      1734	fold.c	FUNCTION_52
0x4002c58	        0x4883ec10	                           sub rsp, 0x10	      1734	fold.c	FUNCTION_52
0x4002c5c	        0x48897df8	                mov qword [rbp - 8], rdi	      1734	fold.c	FUNCTION_52
0x4002c60	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1734	fold.c	FUNCTION_52
0x4002c64	    0x488b05000000	            mov rax, qword [0x04002c6b] 	      1735	fold.c	FUNCTION_52	IF_1
0x4002c6b	    0x8b8040150000	          mov eax, dword [rax + 0x1540] 	      1735	fold.c	FUNCTION_52	IF_1
0x4002c71	            0x85c0	                           test eax, eax	      1735	fold.c	FUNCTION_52	IF_1
0x4002c73	            0x7514	                           jne 0x4002c89	      1735	fold.c	FUNCTION_52	IF_1
0x4002c75	      0xbf00000000	                              mov edi, 0	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4002c7a	      0xe800000000	                          call 0x4002c7f	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4002c7f	          0x4889c7	                            mov rdi, rax	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4002c82	      0xe800000000	                          call 0x4002c87	      1737	fold.c	FUNCTION_52	IF_1	CALL_2
0x4002c87	            0xeb68	                           jmp 0x4002cf1	      1738	fold.c	FUNCTION_52	IF_1
0x4002c89	    0x488b05000000	            mov rax, qword [0x04002c90] 	      1740	fold.c	FUNCTION_52	CALL_3
0x4002c90	          0x4889c7	                            mov rdi, rax	      1740	fold.c	FUNCTION_52	CALL_3
0x4002c93	      0xe82c350000	                    call sym.parseMarker	      1740	fold.c	FUNCTION_52	CALL_3
0x4002c98	    0x8b1500000000	            mov edx, dword [0x04002c9e] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4002c9e	    0x488b05000000	            mov rax, qword [0x04002ca5] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4002ca5	    0x488b88280200	           mov rcx, qword [rax + 0x228] 	      1742	fold.c	FUNCTION_52	CALL_4
0x4002cac	        0x488b45f8	                mov rax, qword [rbp - 8]	      1742	fold.c	FUNCTION_52	CALL_4
0x4002cb0	          0x4889ce	                            mov rsi, rcx	      1742	fold.c	FUNCTION_52	CALL_4
0x4002cb3	          0x4889c7	                            mov rdi, rax	      1742	fold.c	FUNCTION_52	CALL_4
0x4002cb6	      0xe838000000	                  call sym.foldAddMarker	      1742	fold.c	FUNCTION_52	CALL_4
0x4002cbb	    0x8b1500000000	            mov edx, dword [0x04002cc1] 	      1743	fold.c	FUNCTION_52	CALL_5
0x4002cc1	    0x488b0d000000	            mov rcx, qword [0x04002cc8] 	      1743	fold.c	FUNCTION_52	CALL_5
0x4002cc8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1743	fold.c	FUNCTION_52	CALL_5
0x4002ccc	          0x4889ce	                            mov rsi, rcx	      1743	fold.c	FUNCTION_52	CALL_5
0x4002ccf	          0x4889c7	                            mov rdi, rax	      1743	fold.c	FUNCTION_52	CALL_5
0x4002cd2	      0xe81c000000	                  call sym.foldAddMarker	      1743	fold.c	FUNCTION_52	CALL_5
0x4002cd7	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1747	fold.c	FUNCTION_52	CALL_6
0x4002cdb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1747	fold.c	FUNCTION_52	CALL_6
0x4002cdf	      0xb900000000	                              mov ecx, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x4002ce4	      0xbe00000000	                              mov esi, 0	      1747	fold.c	FUNCTION_52	CALL_6
0x4002ce9	          0x4889c7	                            mov rdi, rax	      1747	fold.c	FUNCTION_52	CALL_6
0x4002cec	      0xe800000000	                          call 0x4002cf1	      1747	fold.c	FUNCTION_52	CALL_6
0x4002cf1	              0xc9	                                   leave	      1748	fold.c	FUNCTION_52
0x4002cf2	              0xc3	                                     ret	      1748	fold.c	FUNCTION_52
clearFolding	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x400131b	              0x55	                                push rbp	       796	fold.c	FUNCTION_27
0x400131c	          0x4889e5	                            mov rbp, rsp	       796	fold.c	FUNCTION_27
0x400131f	        0x4883ec10	                           sub rsp, 0x10	       796	fold.c	FUNCTION_27
0x4001323	        0x48897df8	                mov qword [rbp - 8], rdi	       796	fold.c	FUNCTION_27
0x4001327	        0x488b45f8	                mov rax, qword [rbp - 8]	       797	fold.c	FUNCTION_27	CALL_1
0x400132b	    0x480508010000	                          add rax, 0x108	       797	fold.c	FUNCTION_27	CALL_1
0x4001331	          0x4889c7	                            mov rdi, rax	       797	fold.c	FUNCTION_27	CALL_1
0x4001334	      0xe800000000	                          call 0x4001339	       797	fold.c	FUNCTION_27	CALL_1
0x4001339	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	fold.c	FUNCTION_27
0x400133d	    0xc68021010000	               mov byte [rax + 0x121], 0	       798	fold.c	FUNCTION_27
0x4001344	              0x90	                                     nop	       799	fold.c	FUNCTION_27
0x4001345	              0xc9	                                   leave	       799	fold.c	FUNCTION_27
0x4001346	              0xc3	                                     ret	       799	fold.c	FUNCTION_27
deleteFoldEntry	functions,0:DO,0:ELSE,1:FOR,1:SWITCH,0:WHILE,0:IF,6:CALL,6	193
0x40022e7	              0x55	                                push rbp	      1399	fold.c	FUNCTION_43
0x40022e8	          0x4889e5	                            mov rbp, rsp	      1399	fold.c	FUNCTION_43
0x40022eb	        0x4883ec30	                           sub rsp, 0x30	      1399	fold.c	FUNCTION_43
0x40022ef	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1399	fold.c	FUNCTION_43
0x40022f3	          0x8975d4	             mov dword [rbp - 0x2c], esi	      1399	fold.c	FUNCTION_43
0x40022f6	          0x8955d0	             mov dword [rbp - 0x30], edx	      1399	fold.c	FUNCTION_43
0x40022f9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1405	fold.c	FUNCTION_43
0x40022fd	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1405	fold.c	FUNCTION_43
0x4002301	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1405	fold.c	FUNCTION_43
0x4002304	          0x4863d0	                         movsxd rdx, eax	      1405	fold.c	FUNCTION_43
0x4002307	          0x4889d0	                            mov rax, rdx	      1405	fold.c	FUNCTION_43
0x400230a	          0x4801c0	                            add rax, rax	      1405	fold.c	FUNCTION_43
0x400230d	          0x4801d0	                            add rax, rdx	      1405	fold.c	FUNCTION_43
0x4002310	        0x48c1e004	                              shl rax, 4	      1405	fold.c	FUNCTION_43
0x4002314	          0x4801c8	                            add rax, rcx	      1405	fold.c	FUNCTION_43
0x4002317	        0x488945e8	             mov qword [rbp - 0x18], rax	      1405	fold.c	FUNCTION_43
0x400231b	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1406	fold.c	FUNCTION_43	IF_1
0x400231f	            0x750b	                           jne 0x400232c	      1406	fold.c	FUNCTION_43	IF_1
0x4002321	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1406	fold.c	FUNCTION_43	IF_1
0x4002325	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1406	fold.c	FUNCTION_43	IF_1
0x4002328	            0x85c0	                           test eax, eax	      1406	fold.c	FUNCTION_43	IF_1
0x400232a	            0x7566	                           jne 0x4002392	      1406	fold.c	FUNCTION_43	IF_1
0x400232c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4002330	        0x4883c010	                           add rax, 0x10	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4002334	          0x4889c7	                            mov rdi, rax	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x4002337	      0xe800000000	                          call 0x400233c	      1409	fold.c	FUNCTION_43	IF_1	CALL_1
0x400233c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1410	fold.c	FUNCTION_43	IF_1
0x4002340	            0x8b00	                    mov eax, dword [rax]	      1410	fold.c	FUNCTION_43	IF_1
0x4002342	          0x8d50ff	                      lea edx, [rax - 1]	      1410	fold.c	FUNCTION_43	IF_1
0x4002345	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1410	fold.c	FUNCTION_43	IF_1
0x4002349	            0x8910	                    mov dword [rax], edx	      1410	fold.c	FUNCTION_43	IF_1
0x400234b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400234f	            0x8b00	                    mov eax, dword [rax]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4002351	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4002354	     0xf8e07020000	                           jle 0x4002561	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x400235a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400235e	            0x8b00	                    mov eax, dword [rax]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002360	          0x2b45d4	             sub eax, dword [rbp - 0x2c]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002363	          0x4863d0	                         movsxd rdx, eax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002366	          0x4889d0	                            mov rax, rdx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002369	          0x4801c0	                            add rax, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400236c	          0x4801d0	                            add rax, rdx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400236f	        0x48c1e004	                              shl rax, 4	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002373	          0x4889c2	                            mov rdx, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002376	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400237a	        0x488d4830	                   lea rcx, [rax + 0x30]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400237e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002382	          0x4889ce	                            mov rsi, rcx	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002385	          0x4889c7	                            mov rdi, rax	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x4002388	      0xe800000000	                          call 0x400238d	      1412	fold.c	FUNCTION_43	IF_1	CALL_2
0x400238d	      0xe9cf010000	                           jmp 0x4002561	      1411	fold.c	FUNCTION_43	IF_1	IF_2
0x4002392	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1418	fold.c	FUNCTION_43	ELSE_1
0x4002396	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1418	fold.c	FUNCTION_43	ELSE_1
0x4002399	            0x4898	                                    cdqe	      1418	fold.c	FUNCTION_43	ELSE_1
0x400239b	        0x488945f0	             mov qword [rbp - 0x10], rax	      1418	fold.c	FUNCTION_43	ELSE_1
0x400239f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023a3	          0x83e801	                              sub eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023a6	            0x89c2	                            mov edx, eax	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023a8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023ac	            0x89d6	                            mov esi, edx	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023ae	          0x4889c7	                            mov rdi, rax	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023b1	      0xe800000000	                          call 0x40023b6	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023b6	          0x83f801	                              cmp eax, 1	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023b9	     0xf85a2010000	                           jne 0x4002561	      1419	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_3
0x40023bf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023c3	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023c7	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023ca	          0x4863d0	                         movsxd rdx, eax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023cd	          0x4889d0	                            mov rax, rdx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023d0	          0x4801c0	                            add rax, rax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023d3	          0x4801d0	                            add rax, rdx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023d6	        0x48c1e004	                              shl rax, 4	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023da	          0x4801c8	                            add rax, rcx	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023dd	        0x488945e8	             mov qword [rbp - 0x18], rax	      1422	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023e1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023e5	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023e9	        0x488945f8	                mov qword [rbp - 8], rax	      1425	fold.c	FUNCTION_43	ELSE_1	IF_3
0x40023ed	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40023f4	      0xe9a9000000	                           jmp 0x40024a2	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40023f9	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40023fc	          0x4863d0	                         movsxd rdx, eax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40023ff	          0x4889d0	                            mov rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002402	          0x4801c0	                            add rax, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002405	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002408	        0x48c1e004	                              shl rax, 4	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400240c	          0x4889c2	                            mov rdx, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400240f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002413	        0x488d0c02	                    lea rcx, [rdx + rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002417	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400241a	          0x4863d0	                         movsxd rdx, eax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400241d	          0x4889d0	                            mov rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002420	          0x4801c0	                            add rax, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002423	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002426	        0x48c1e004	                              shl rax, 4	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400242a	          0x4889c2	                            mov rdx, rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400242d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002431	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002434	          0x488b10	                    mov rdx, qword [rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002437	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400243b	          0x488b00	                    mov rax, qword [rax]	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x400243e	          0x4801d0	                            add rax, rdx	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002441	          0x488901	                    mov qword [rcx], rax	      1428	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x4002444	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002448	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400244c	            0x3c02	                               cmp al, 2	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400244e	            0x7521	                           jne 0x4002471	      1429	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002450	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002453	          0x4863d0	                         movsxd rdx, eax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002456	          0x4889d0	                            mov rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002459	          0x4801c0	                            add rax, rax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400245c	          0x4801d0	                            add rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400245f	        0x48c1e004	                              shl rax, 4	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002463	          0x4889c2	                            mov rdx, rax	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002466	        0x488b45f8	                mov rax, qword [rbp - 8]	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400246a	          0x4801d0	                            add rax, rdx	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x400246d	        0xc6402802	                mov byte [rax + 0x28], 2	      1430	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_4
0x4002471	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002475	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002479	            0x3c02	                               cmp al, 2	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400247b	            0x7521	                           jne 0x400249e	      1431	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400247d	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002480	          0x4863d0	                         movsxd rdx, eax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002483	          0x4889d0	                            mov rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002486	          0x4801c0	                            add rax, rax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002489	          0x4801d0	                            add rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400248c	        0x48c1e004	                              shl rax, 4	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002490	          0x4889c2	                            mov rdx, rax	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002493	        0x488b45f8	                mov rax, qword [rbp - 8]	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x4002497	          0x4801d0	                            add rax, rdx	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400249a	        0xc6402902	                mov byte [rax + 0x29], 2	      1432	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1	IF_5
0x400249e	        0x8345e401	               add dword [rbp - 0x1c], 1	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40024a2	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40024a5	            0x4898	                                    cdqe	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40024a7	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40024ab	     0xf8c48ffffff	                            jl 0x40023f9	      1426	fold.c	FUNCTION_43	ELSE_1	IF_3	FOR_1
0x40024b1	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024b4	          0x8d5001	                      lea edx, [rax + 1]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024b7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024bb	            0x8b00	                    mov eax, dword [rax]	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024bd	            0x39c2	                            cmp edx, eax	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024bf	            0x7d52	                           jge 0x4002513	      1436	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6
0x40024c1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024c5	            0x8b00	                    mov eax, dword [rax]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024c7	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024ca	          0x83c201	                              add edx, 1	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024cd	            0x29d0	                            sub eax, edx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024cf	          0x4863d0	                         movsxd rdx, eax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024d2	          0x4889d0	                            mov rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024d5	          0x4801c0	                            add rax, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024d8	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024db	        0x48c1e004	                              shl rax, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024df	          0x4889c6	                            mov rsi, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024e2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024e6	        0x488d4830	                   lea rcx, [rax + 0x30]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024ea	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024ee	          0x4889d0	                            mov rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024f1	          0x4801c0	                            add rax, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024f4	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024f7	        0x48c1e004	                              shl rax, 4	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024fb	          0x4889c2	                            mov rdx, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x40024fe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4002502	          0x4801d0	                            add rax, rdx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4002505	          0x4889f2	                            mov rdx, rsi	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4002508	          0x4889ce	                            mov rsi, rcx	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x400250b	          0x4889c7	                            mov rdi, rax	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x400250e	      0xe800000000	                          call 0x4002513	      1437	fold.c	FUNCTION_43	ELSE_1	IF_3	IF_6	CALL_4
0x4002513	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002517	          0x4889d0	                            mov rax, rdx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x400251a	          0x4801c0	                            add rax, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x400251d	          0x4801d0	                            add rax, rdx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002520	        0x48c1e004	                              shl rax, 4	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002524	          0x4889c2	                            mov rdx, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002527	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x400252b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x400252f	          0x4889ce	                            mov rsi, rcx	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002532	          0x4889c7	                            mov rdi, rax	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x4002535	      0xe800000000	                          call 0x400253a	      1440	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_5
0x400253a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x400253e	          0x4889c7	                            mov rdi, rax	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4002541	      0xe800000000	                          call 0x4002546	      1441	fold.c	FUNCTION_43	ELSE_1	IF_3	CALL_6
0x4002546	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400254a	            0x8b00	                    mov eax, dword [rax]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400254c	            0x89c2	                            mov edx, eax	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400254e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4002552	             0x1d0	                            add eax, edx	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4002554	          0x83e801	                              sub eax, 1	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4002557	            0x89c2	                            mov edx, eax	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x4002559	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400255d	            0x8910	                    mov dword [rax], edx	      1442	fold.c	FUNCTION_43	ELSE_1	IF_3
0x400255f	            0xeb00	                           jmp 0x4002561	      1445	fold.c	FUNCTION_43
0x4002561	              0x90	                                     nop	      1445	fold.c	FUNCTION_43
0x4002562	              0xc9	                                   leave	      1445	fold.c	FUNCTION_43
0x4002563	              0xc3	                                     ret	      1445	fold.c	FUNCTION_43
checkSmall	functions,0:DO,0:ELSE,1:FOR,1:SWITCH,0:WHILE,0:IF,3:CALL,2	58
0x4002b2f	              0x55	                                push rbp	      1684	fold.c	FUNCTION_50
0x4002b30	          0x4889e5	                            mov rbp, rsp	      1684	fold.c	FUNCTION_50
0x4002b33	        0x4883ec30	                           sub rsp, 0x30	      1684	fold.c	FUNCTION_50
0x4002b37	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1684	fold.c	FUNCTION_50
0x4002b3b	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1684	fold.c	FUNCTION_50
0x4002b3f	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1684	fold.c	FUNCTION_50
0x4002b43	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1688	fold.c	FUNCTION_50	IF_1
0x4002b47	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1688	fold.c	FUNCTION_50	IF_1
0x4002b4b	            0x3c02	                               cmp al, 2	      1688	fold.c	FUNCTION_50	IF_1
0x4002b4d	     0xf85af000000	                           jne 0x4002c02	      1688	fold.c	FUNCTION_50	IF_1
0x4002b53	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x4002b57	        0x4883c010	                           add rax, 0x10	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x4002b5b	          0x4889c7	                            mov rdi, rax	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x4002b5e	      0xe8a1000000	                  call sym.setSmallMaybe	      1691	fold.c	FUNCTION_50	IF_1	CALL_1
0x4002b63	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b67	        0x488b5008	                mov rdx, qword [rax + 8]	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b6b	    0x488b05000000	            mov rax, qword [0x04002b72] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b72	    0x488b80080200	           mov rax, qword [rax + 0x208] 	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b79	          0x4839c2	                            cmp rdx, rax	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b7c	            0x7e0a	                           jle 0x4002b88	      1693	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b7e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b82	        0xc6402900	                mov byte [rax + 0x29], 0	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b86	            0xeb7a	                           jmp 0x4002c02	      1694	fold.c	FUNCTION_50	IF_1	IF_2
0x4002b88	    0xc745f8000000	                  mov dword [rbp - 8], 0	      1697	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4002b8f	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002b96	            0xeb4f	                           jmp 0x4002be7	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002b98	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002b9c	          0x488b10	                    mov rdx, qword [rax]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002b9f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002ba3	          0x4801c2	                            add rdx, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002ba6	          0x8b45fc	                mov eax, dword [rbp - 4]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002ba9	            0x4898	                                    cdqe	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bab	          0x4801c2	                            add rdx, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bae	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bb2	          0x4889d6	                            mov rsi, rdx	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bb5	          0x4889c7	                            mov rdi, rax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bb8	      0xe800000000	                          call 0x4002bbd	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bbd	           0x145f8	                add dword [rbp - 8], eax	      1700	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	CALL_2
0x4002bc0	          0x8b45f8	                mov eax, dword [rbp - 8]	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bc3	          0x4863d0	                         movsxd rdx, eax	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bc6	    0x488b05000000	            mov rax, qword [0x04002bcd] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bcd	    0x488b80080200	           mov rax, qword [rax + 0x208] 	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bd4	          0x4839c2	                            cmp rdx, rax	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bd7	            0x7e0a	                           jle 0x4002be3	      1701	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bd9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002bdd	        0xc6402900	                mov byte [rax + 0x29], 0	      1703	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002be1	            0xeb1f	                           jmp 0x4002c02	      1704	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1	IF_3
0x4002be3	        0x8345fc01	                  add dword [rbp - 4], 1	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002be7	          0x8b45fc	                mov eax, dword [rbp - 4]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bea	          0x4863d0	                         movsxd rdx, eax	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bed	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bf1	        0x488b4008	                mov rax, qword [rax + 8]	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bf5	          0x4839c2	                            cmp rdx, rax	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bf8	            0x7c9e	                            jl 0x4002b98	      1698	fold.c	FUNCTION_50	IF_1	ELSE_1	FOR_1
0x4002bfa	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4002bfe	        0xc6402901	                mov byte [rax + 0x29], 1	      1707	fold.c	FUNCTION_50	IF_1	ELSE_1
0x4002c02	              0xc9	                                   leave	      1710	fold.c	FUNCTION_50
0x4002c03	              0xc3	                                     ret	      1710	fold.c	FUNCTION_50
openFold	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	14
0x4000775	              0x55	                                push rbp	       425	fold.c	FUNCTION_17
0x4000776	          0x4889e5	                            mov rbp, rsp	       425	fold.c	FUNCTION_17
0x4000779	        0x4883ec10	                           sub rsp, 0x10	       425	fold.c	FUNCTION_17
0x400077d	        0x48897df8	                mov qword [rbp - 8], rdi	       425	fold.c	FUNCTION_17
0x4000781	        0x488975f0	             mov qword [rbp - 0x10], rsi	       425	fold.c	FUNCTION_17
0x4000785	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       426	fold.c	FUNCTION_17	CALL_1
0x4000789	        0x488b45f8	                mov rax, qword [rbp - 8]	       426	fold.c	FUNCTION_17	CALL_1
0x400078d	      0xba01000000	                              mov edx, 1	       426	fold.c	FUNCTION_17	CALL_1
0x4000792	          0x4889ce	                            mov rsi, rcx	       426	fold.c	FUNCTION_17	CALL_1
0x4000795	          0x4889c7	                            mov rdi, rax	       426	fold.c	FUNCTION_17	CALL_1
0x4000798	      0xe859160000	                  call sym.setFoldRepeat	       426	fold.c	FUNCTION_17	CALL_1
0x400079d	              0x90	                                     nop	       427	fold.c	FUNCTION_17
0x400079e	              0xc9	                                   leave	       427	fold.c	FUNCTION_17
0x400079f	              0xc3	                                     ret	       427	fold.c	FUNCTION_17
foldmethodIsMarker	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	12
0x40005c7	              0x55	                                push rbp	       336	fold.c	FUNCTION_11
0x40005c8	          0x4889e5	                            mov rbp, rsp	       336	fold.c	FUNCTION_11
0x40005cb	        0x48897df8	                mov qword [rbp - 8], rdi	       336	fold.c	FUNCTION_11
0x40005cf	        0x488b45f8	                mov rax, qword [rbp - 8]	       337	fold.c	FUNCTION_11
0x40005d3	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       337	fold.c	FUNCTION_11
0x40005da	        0x4883c002	                              add rax, 2	       337	fold.c	FUNCTION_11
0x40005de	           0xfb600	                   movzx eax, byte [rax]	       337	fold.c	FUNCTION_11
0x40005e1	            0x3c72	                            cmp al, 0x72	       337	fold.c	FUNCTION_11
0x40005e3	           0xf94c0	                                 sete al	       337	fold.c	FUNCTION_11
0x40005e6	           0xfb6c0	                           movzx eax, al	       337	fold.c	FUNCTION_11
0x40005e9	              0x5d	                                 pop rbp	       338	fold.c	FUNCTION_11
0x40005ea	              0xc3	                                     ret	       338	fold.c	FUNCTION_11
cloneFoldGrowArray	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,1:CALL,3	72
0x4001aea	              0x55	                                push rbp	      1086	fold.c	FUNCTION_35
0x4001aeb	          0x4889e5	                            mov rbp, rsp	      1086	fold.c	FUNCTION_35
0x4001aee	        0x4883ec30	                           sub rsp, 0x30	      1086	fold.c	FUNCTION_35
0x4001af2	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1086	fold.c	FUNCTION_35
0x4001af6	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1086	fold.c	FUNCTION_35
0x4001afa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001afe	          0x8b500c	              mov edx, dword [rax + 0xc]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b01	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b05	          0x8b4808	                mov ecx, dword [rax + 8]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b08	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b0c	            0x89ce	                            mov esi, ecx	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b0e	          0x4889c7	                            mov rdi, rax	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b11	      0xe800000000	                          call 0x4001b16	      1091	fold.c	FUNCTION_35	CALL_1
0x4001b16	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b1a	            0x8b00	                    mov eax, dword [rax]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b1c	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b1e	     0xf84be000000	                            je 0x4001be2	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b24	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b28	            0x8b10	                    mov edx, dword [rax]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b2a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b2e	            0x89d6	                            mov esi, edx	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b30	          0x4889c7	                            mov rdi, rax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b33	      0xe800000000	                          call 0x4001b38	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b38	            0x85c0	                           test eax, eax	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b3a	     0xf84a2000000	                            je 0x4001be2	      1092	fold.c	FUNCTION_35	IF_1	CALL_2
0x4001b40	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1095	fold.c	FUNCTION_35
0x4001b44	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1095	fold.c	FUNCTION_35
0x4001b48	        0x488945f0	             mov qword [rbp - 0x10], rax	      1095	fold.c	FUNCTION_35
0x4001b4c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1096	fold.c	FUNCTION_35
0x4001b50	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1096	fold.c	FUNCTION_35
0x4001b54	        0x488945f8	                mov qword [rbp - 8], rax	      1096	fold.c	FUNCTION_35
0x4001b58	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1098	fold.c	FUNCTION_35	FOR_1
0x4001b5f	            0xeb74	                           jmp 0x4001bd5	      1098	fold.c	FUNCTION_35	FOR_1
0x4001b61	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1100	fold.c	FUNCTION_35	FOR_1
0x4001b65	          0x488b10	                    mov rdx, qword [rax]	      1100	fold.c	FUNCTION_35	FOR_1
0x4001b68	        0x488b45f8	                mov rax, qword [rbp - 8]	      1100	fold.c	FUNCTION_35	FOR_1
0x4001b6c	          0x488910	                    mov qword [rax], rdx	      1100	fold.c	FUNCTION_35	FOR_1
0x4001b6f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1101	fold.c	FUNCTION_35	FOR_1
0x4001b73	        0x488b5008	                mov rdx, qword [rax + 8]	      1101	fold.c	FUNCTION_35	FOR_1
0x4001b77	        0x488b45f8	                mov rax, qword [rbp - 8]	      1101	fold.c	FUNCTION_35	FOR_1
0x4001b7b	        0x48895008	                mov qword [rax + 8], rdx	      1101	fold.c	FUNCTION_35	FOR_1
0x4001b7f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1102	fold.c	FUNCTION_35	FOR_1
0x4001b83	         0xfb65028	           movzx edx, byte [rax + 0x28] 	      1102	fold.c	FUNCTION_35	FOR_1
0x4001b87	        0x488b45f8	                mov rax, qword [rbp - 8]	      1102	fold.c	FUNCTION_35	FOR_1
0x4001b8b	          0x885028	               mov byte [rax + 0x28], dl	      1102	fold.c	FUNCTION_35	FOR_1
0x4001b8e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1103	fold.c	FUNCTION_35	FOR_1
0x4001b92	         0xfb65029	           movzx edx, byte [rax + 0x29] 	      1103	fold.c	FUNCTION_35	FOR_1
0x4001b96	        0x488b45f8	                mov rax, qword [rbp - 8]	      1103	fold.c	FUNCTION_35	FOR_1
0x4001b9a	          0x885029	               mov byte [rax + 0x29], dl	      1103	fold.c	FUNCTION_35	FOR_1
0x4001b9d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001ba1	        0x488d5010	                   lea rdx, [rax + 0x10]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001ba5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001ba9	        0x4883c010	                           add rax, 0x10	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001bad	          0x4889d6	                            mov rsi, rdx	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001bb0	          0x4889c7	                            mov rdi, rax	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001bb3	      0xe800000000	                          call 0x4001bb8	      1104	fold.c	FUNCTION_35	FOR_1	CALL_3
0x4001bb8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1105	fold.c	FUNCTION_35	FOR_1
0x4001bbc	            0x8b00	                    mov eax, dword [rax]	      1105	fold.c	FUNCTION_35	FOR_1
0x4001bbe	          0x8d5001	                      lea edx, [rax + 1]	      1105	fold.c	FUNCTION_35	FOR_1
0x4001bc1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1105	fold.c	FUNCTION_35	FOR_1
0x4001bc5	            0x8910	                    mov dword [rax], edx	      1105	fold.c	FUNCTION_35	FOR_1
0x4001bc7	      0x488345f030	           add qword [rbp - 0x10], 0x30 	      1106	fold.c	FUNCTION_35	FOR_1
0x4001bcc	      0x488345f830	               add qword [rbp - 8], 0x30	      1107	fold.c	FUNCTION_35	FOR_1
0x4001bd1	        0x8345ec01	               add dword [rbp - 0x14], 1	      1098	fold.c	FUNCTION_35	FOR_1
0x4001bd5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1098	fold.c	FUNCTION_35	FOR_1
0x4001bd9	            0x8b00	                    mov eax, dword [rax]	      1098	fold.c	FUNCTION_35	FOR_1
0x4001bdb	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	      1098	fold.c	FUNCTION_35	FOR_1
0x4001bde	            0x7f81	                            jg 0x4001b61	      1098	fold.c	FUNCTION_35	FOR_1
0x4001be0	            0xeb01	                           jmp 0x4001be3	      1098	fold.c	FUNCTION_35	FOR_1
0x4001be2	              0x90	                                     nop	      1093	fold.c	FUNCTION_35	IF_1
0x4001be3	              0xc9	                                   leave	      1109	fold.c	FUNCTION_35
0x4001be4	              0xc3	                                     ret	      1109	fold.c	FUNCTION_35
foldMoveRange	functions,0:DO,0:ELSE,4:FOR,2:SWITCH,0:WHILE,0:IF,12:CALL,11	357
0x4005655	              0x55	                                push rbp	      3036	fold.c	FUNCTION_65
0x4005656	          0x4889e5	                            mov rbp, rsp	      3036	fold.c	FUNCTION_65
0x4005659	        0x4883ec60	                           sub rsp, 0x60	      3036	fold.c	FUNCTION_65
0x400565d	        0x48897db8	             mov qword [rbp - 0x48], rdi	      3036	fold.c	FUNCTION_65
0x4005661	        0x488975b0	             mov qword [rbp - 0x50], rsi	      3036	fold.c	FUNCTION_65
0x4005665	        0x488955a8	             mov qword [rbp - 0x58], rdx	      3036	fold.c	FUNCTION_65
0x4005669	        0x48894da0	             mov qword [rbp - 0x60], rcx	      3036	fold.c	FUNCTION_65
0x400566d	    0x64488b042528	                mov rax, qword fs:[0x28]	      3036	fold.c	FUNCTION_65
0x4005676	        0x488945f8	                mov qword [rbp - 8], rax	      3036	fold.c	FUNCTION_65
0x400567a	            0x31c0	                            xor eax, eax	      3036	fold.c	FUNCTION_65
0x400567c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3038	fold.c	FUNCTION_65
0x4005680	        0x482b45b0	             sub rax, qword [rbp - 0x50]	      3038	fold.c	FUNCTION_65
0x4005684	        0x4883c001	                              add rax, 1	      3038	fold.c	FUNCTION_65
0x4005688	        0x488945d8	             mov qword [rbp - 0x28], rax	      3038	fold.c	FUNCTION_65
0x400568c	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      3039	fold.c	FUNCTION_65
0x4005690	        0x482b45a8	             sub rax, qword [rbp - 0x58]	      3039	fold.c	FUNCTION_65
0x4005694	        0x488945e0	             mov qword [rbp - 0x20], rax	      3039	fold.c	FUNCTION_65
0x4005698	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3040	fold.c	FUNCTION_65	CALL_1
0x400569c	        0x488d48ff	                      lea rcx, [rax - 1]	      3040	fold.c	FUNCTION_65	CALL_1
0x40056a0	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      3040	fold.c	FUNCTION_65	CALL_1
0x40056a4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3040	fold.c	FUNCTION_65	CALL_1
0x40056a8	          0x4889ce	                            mov rsi, rcx	      3040	fold.c	FUNCTION_65	CALL_1
0x40056ab	          0x4889c7	                            mov rdi, rax	      3040	fold.c	FUNCTION_65	CALL_1
0x40056ae	      0xe832c5ffff	                       call sym.foldFind	      3040	fold.c	FUNCTION_65	CALL_1
0x40056b3	          0x8945c4	             mov dword [rbp - 0x3c], eax	      3040	fold.c	FUNCTION_65	CALL_1
0x40056b6	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      3041	fold.c	FUNCTION_65
0x40056be	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      3041	fold.c	FUNCTION_65
0x40056c6	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      3041	fold.c	FUNCTION_65
0x40056ce	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      3043	fold.c	FUNCTION_65	IF_1
0x40056d2	     0xf84f4000000	                            je 0x40057cc	      3043	fold.c	FUNCTION_65	IF_1
0x40056d8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056dc	          0x488b10	                    mov rdx, qword [rax]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056df	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056e3	        0x488b4008	                mov rax, qword [rax + 8]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056e7	          0x4801d0	                            add rax, rdx	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056ea	        0x4883e801	                              sub rax, 1	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056ee	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056f2	            0x7e42	                           jle 0x4005736	      3045	fold.c	FUNCTION_65	IF_1	IF_2
0x40056f4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x40056f8	          0x488b00	                    mov rax, qword [rax]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x40056fb	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x40056ff	          0x4889d1	                            mov rcx, rdx	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005702	          0x4829c1	                            sub rcx, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005705	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x4005709	          0x488b00	                    mov rax, qword [rax]	      3051	fold.c	FUNCTION_65	IF_1	IF_2
0x400570c	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005710	          0x4829c2	                            sub rdx, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005713	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005717	          0x488b00	                    mov rax, qword [rax]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400571a	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400571e	          0x4829c6	                            sub rsi, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005721	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005725	        0x4883c010	                           add rax, 0x10	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005729	          0x4889c7	                            mov rdi, rax	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x400572c	      0xe800000000	                          call 0x4005731	      3050	fold.c	FUNCTION_65	IF_1	IF_2	CALL_2
0x4005731	      0xe939040000	                           jmp 0x4005b6f	      3052	fold.c	FUNCTION_65	IF_1	IF_2
0x4005736	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400573a	          0x488b10	                    mov rdx, qword [rax]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400573d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005741	        0x488b4008	                mov rax, qword [rax + 8]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005745	          0x4801d0	                            add rax, rdx	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005748	        0x4883e801	                              sub rax, 1	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400574c	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005750	            0x7e57	                           jle 0x40057a9	      3054	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005752	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005756	          0x48f7d8	                                 neg rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005759	          0x4889c7	                            mov rdi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400575c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3062	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005760	          0x488b00	                    mov rax, qword [rax]	      3062	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005763	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005767	          0x4829c2	                            sub rdx, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400576a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400576e	          0x488b00	                    mov rax, qword [rax]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005771	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005775	          0x4889ce	                            mov rsi, rcx	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005778	          0x4829c6	                            sub rsi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400577b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400577f	        0x4883c010	                           add rax, 0x10	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005783	          0x4989f8	                             mov r8, rdi	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005786	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400578b	          0x4889c7	                            mov rdi, rax	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x400578e	      0xe8ceceffff	          call sym.foldMarkAdjustRecurse	      3061	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3	CALL_3
0x4005793	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x4005797	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400579b	        0x488b5208	                mov rdx, qword [rdx + 8]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x400579f	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40057a3	        0x48895008	                mov qword [rax + 8], rdx	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40057a7	            0xeb17	                           jmp 0x40057c0	      3063	fold.c	FUNCTION_65	IF_1	ELSE_1	IF_3
0x40057a9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057ad	        0x488d50ff	                      lea rdx, [rax - 1]	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057b1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057b5	          0x4889d6	                            mov rsi, rdx	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057b8	          0x4889c7	                            mov rdi, rax	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057bb	      0xe83efeffff	                  call sym.truncate_fold	      3067	fold.c	FUNCTION_65	IF_1	CALL_4
0x40057c0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3071	fold.c	FUNCTION_65	IF_1
0x40057c4	        0x4883c030	                           add rax, 0x30	      3071	fold.c	FUNCTION_65	IF_1
0x40057c8	        0x488945c8	             mov qword [rbp - 0x38], rax	      3071	fold.c	FUNCTION_65	IF_1
0x40057cc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3074	fold.c	FUNCTION_65	IF_4
0x40057d0	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3074	fold.c	FUNCTION_65	IF_4
0x40057d4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3074	fold.c	FUNCTION_65	IF_4
0x40057d8	            0x8b00	                    mov eax, dword [rax]	      3074	fold.c	FUNCTION_65	IF_4
0x40057da	          0x4863d0	                         movsxd rdx, eax	      3074	fold.c	FUNCTION_65	IF_4
0x40057dd	          0x4889d0	                            mov rax, rdx	      3074	fold.c	FUNCTION_65	IF_4
0x40057e0	          0x4801c0	                            add rax, rax	      3074	fold.c	FUNCTION_65	IF_4
0x40057e3	          0x4801d0	                            add rax, rdx	      3074	fold.c	FUNCTION_65	IF_4
0x40057e6	        0x48c1e004	                              shl rax, 4	      3074	fold.c	FUNCTION_65	IF_4
0x40057ea	        0x488d1401	                    lea rdx, [rcx + rax]	      3074	fold.c	FUNCTION_65	IF_4
0x40057ee	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3074	fold.c	FUNCTION_65	IF_4
0x40057f2	          0x4839c2	                            cmp rdx, rax	      3074	fold.c	FUNCTION_65	IF_4
0x40057f5	     0xf866d030000	                           jbe 0x4005b68	      3074	fold.c	FUNCTION_65	IF_4
0x40057fb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3074	fold.c	FUNCTION_65	IF_4
0x40057ff	          0x488b00	                    mov rax, qword [rax]	      3074	fold.c	FUNCTION_65	IF_4
0x4005802	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3074	fold.c	FUNCTION_65	IF_4
0x4005806	     0xf8f5c030000	                            jg 0x4005b68	      3074	fold.c	FUNCTION_65	IF_4
0x400580c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4005810	          0x488b00	                    mov rax, qword [rax]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4005813	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4005817	     0xf8ed1000000	                           jle 0x40058ee	      3081	fold.c	FUNCTION_65	ELSE_3	IF_5
0x400581d	            0xeb1e	                           jmp 0x400583d	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400581f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005823	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005827	          0x488b12	                    mov rdx, qword [rdx]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400582a	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400582e	          0x488910	                    mov qword [rax], rdx	      3085	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005831	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005835	        0x4883c030	                           add rax, 0x30	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005839	        0x488945c8	             mov qword [rbp - 0x38], rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400583d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005841	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005845	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005849	            0x8b00	                    mov eax, dword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400584b	          0x4863d0	                         movsxd rdx, eax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400584e	          0x4889d0	                            mov rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005851	          0x4801c0	                            add rax, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005854	          0x4801d0	                            add rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005857	        0x48c1e004	                              shl rax, 4	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400585b	        0x488d1401	                    lea rdx, [rcx + rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400585f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005863	          0x4839c2	                            cmp rdx, rax	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005866	            0x761c	                           jbe 0x4005884	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005868	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400586c	          0x488b10	                    mov rdx, qword [rax]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400586f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005873	        0x488b4008	                mov rax, qword [rax + 8]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005877	          0x4801d0	                            add rax, rdx	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400587a	        0x4883e801	                              sub rax, 1	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x400587e	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005882	            0x7e9b	                           jle 0x400581f	      3083	fold.c	FUNCTION_65	ELSE_3	IF_5	FOR_1
0x4005884	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005888	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400588c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005890	            0x8b00	                    mov eax, dword [rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005892	          0x4863d0	                         movsxd rdx, eax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005895	          0x4889d0	                            mov rax, rdx	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x4005898	          0x4801c0	                            add rax, rax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400589b	          0x4801d0	                            add rax, rdx	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x400589e	        0x48c1e004	                              shl rax, 4	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058a2	        0x488d1401	                    lea rdx, [rcx + rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058a6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058aa	          0x4839c2	                            cmp rdx, rax	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058ad	     0xf86b8020000	                           jbe 0x4005b6b	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058b3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058b7	          0x488b00	                    mov rax, qword [rax]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058ba	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058be	     0xf8fa7020000	                            jg 0x4005b6b	      3087	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058c4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x40058c8	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x40058cc	          0x4889d6	                            mov rsi, rdx	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x40058cf	          0x4889c7	                            mov rdi, rax	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x40058d2	      0xe827fdffff	                  call sym.truncate_fold	      3090	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6	CALL_5
0x40058d7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058db	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058df	          0x488b12	                    mov rdx, qword [rdx]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058e2	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058e6	          0x488910	                    mov qword [rax], rdx	      3091	fold.c	FUNCTION_65	ELSE_3	IF_5	IF_6
0x40058e9	      0xe97d020000	                           jmp 0x4005b6b	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x40058ee	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40058f2	          0x488b10	                    mov rdx, qword [rax]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40058f5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40058f9	        0x488b4008	                mov rax, qword [rax + 8]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x40058fd	          0x4801d0	                            add rax, rdx	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005900	        0x4883e801	                              sub rax, 1	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005904	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005908	            0x7e70	                           jle 0x400597a	      3095	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400590a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400590e	          0x48f7d8	                                 neg rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005911	          0x4889c1	                            mov rcx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005914	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3099	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005918	          0x488b00	                    mov rax, qword [rax]	      3099	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400591b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400591f	          0x4829c2	                            sub rdx, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005922	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005926	        0x488d7001	                      lea rsi, [rax + 1]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400592a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400592e	          0x488b00	                    mov rax, qword [rax]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005931	          0x4829c6	                            sub rsi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005934	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005938	        0x4883c010	                           add rax, 0x10	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400593c	          0x4989c8	                             mov r8, rcx	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400593f	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005944	          0x4889c7	                            mov rdi, rax	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x4005947	      0xe815cdffff	          call sym.foldMarkAdjustRecurse	      3098	fold.c	FUNCTION_65	ELSE_4	IF_7	CALL_6
0x400594c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005950	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005954	        0x488b5208	                mov rdx, qword [rdx + 8]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005958	        0x482b55e0	             sub rdx, qword [rbp - 0x20]	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400595c	        0x48895008	                mov qword [rax + 8], rdx	      3100	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005960	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005964	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005968	          0x488b0a	                    mov rcx, qword [rdx]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400596b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400596f	          0x4801ca	                            add rdx, rcx	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005972	          0x488910	                    mov qword [rax], rdx	      3101	fold.c	FUNCTION_65	ELSE_4	IF_7
0x4005975	      0xe9f5010000	                           jmp 0x4005b6f	      3102	fold.c	FUNCTION_65	ELSE_4	IF_7
0x400597a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3109	fold.c	FUNCTION_65
0x400597e	          0x4889c2	                            mov rdx, rax	      3109	fold.c	FUNCTION_65
0x4005981	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3109	fold.c	FUNCTION_65
0x4005985	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3109	fold.c	FUNCTION_65
0x4005989	          0x4829c2	                            sub rdx, rax	      3109	fold.c	FUNCTION_65
0x400598c	          0x4889d0	                            mov rax, rdx	      3109	fold.c	FUNCTION_65
0x400598f	        0x48c1f804	                              sar rax, 4	      3109	fold.c	FUNCTION_65
0x4005993	          0x4889c2	                            mov rdx, rax	      3109	fold.c	FUNCTION_65
0x4005996	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3109	fold.c	FUNCTION_65
0x40059a0	        0x480fafc2	                           imul rax, rdx	      3109	fold.c	FUNCTION_65
0x40059a4	        0x488945e8	             mov qword [rbp - 0x18], rax	      3109	fold.c	FUNCTION_65
0x40059a8	      0xe9d5000000	                           jmp 0x4005a82	      3111	fold.c	FUNCTION_65	FOR_2
0x40059ad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059b1	          0x488b00	                    mov rax, qword [rax]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059b4	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059b8	            0x7f46	                            jg 0x4005a00	      3113	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059ba	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059be	          0x488b10	                    mov rdx, qword [rax]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059c1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059c5	        0x488b4008	                mov rax, qword [rax + 8]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059c9	          0x4801d0	                            add rax, rdx	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059cc	        0x4883e801	                              sub rax, 1	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059d0	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059d4	            0x7e13	                           jle 0x40059e9	      3116	fold.c	FUNCTION_65	FOR_2	IF_8	IF_9
0x40059d6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40059da	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40059de	          0x4889d6	                            mov rsi, rdx	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40059e1	          0x4889c7	                            mov rdi, rax	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40059e4	      0xe815fcffff	                  call sym.truncate_fold	      3118	fold.c	FUNCTION_65	FOR_2	IF_8	CALL_7
0x40059e9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059ed	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059f1	          0x488b0a	                    mov rcx, qword [rdx]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059f4	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059f8	          0x4801ca	                            add rdx, rcx	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059fb	          0x488910	                    mov qword [rax], rdx	      3120	fold.c	FUNCTION_65	FOR_2	IF_8
0x40059fe	            0xeb76	                           jmp 0x4005a76	      3121	fold.c	FUNCTION_65	FOR_2	IF_8
0x4005a00	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a05	            0x752e	                           jne 0x4005a35	      3125	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a07	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a0b	          0x4889c2	                            mov rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a0e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a12	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a16	          0x4829c2	                            sub rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a19	          0x4889d0	                            mov rax, rdx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a1c	        0x48c1f804	                              sar rax, 4	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a20	          0x4889c2	                            mov rdx, rax	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a23	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a2d	        0x480fafc2	                           imul rax, rdx	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a31	        0x488945d0	             mov qword [rbp - 0x30], rax	      3126	fold.c	FUNCTION_65	FOR_2	IF_10
0x4005a35	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a39	          0x488b10	                    mov rdx, qword [rax]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a3c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a40	        0x488b4008	                mov rax, qword [rax + 8]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a44	          0x4801d0	                            add rax, rdx	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a47	        0x4883e801	                              sub rax, 1	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a4b	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a4f	            0x7e13	                           jle 0x4005a64	      3128	fold.c	FUNCTION_65	FOR_2	IF_11
0x4005a51	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4005a55	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4005a59	          0x4889d6	                            mov rsi, rdx	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4005a5c	          0x4889c7	                            mov rdi, rax	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4005a5f	      0xe89afbffff	                  call sym.truncate_fold	      3129	fold.c	FUNCTION_65	FOR_2	CALL_8
0x4005a64	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3131	fold.c	FUNCTION_65	FOR_2
0x4005a68	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      3131	fold.c	FUNCTION_65	FOR_2
0x4005a6c	          0x488b12	                    mov rdx, qword [rdx]	      3131	fold.c	FUNCTION_65	FOR_2
0x4005a6f	        0x482b55d8	             sub rdx, qword [rbp - 0x28]	      3131	fold.c	FUNCTION_65	FOR_2
0x4005a73	          0x488910	                    mov qword [rax], rdx	      3131	fold.c	FUNCTION_65	FOR_2
0x4005a76	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a7a	        0x4883c030	                           add rax, 0x30	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a7e	        0x488945c8	             mov qword [rbp - 0x38], rax	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a82	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a86	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a8a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a8e	            0x8b00	                    mov eax, dword [rax]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a90	          0x4863d0	                         movsxd rdx, eax	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a93	          0x4889d0	                            mov rax, rdx	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a96	          0x4801c0	                            add rax, rax	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a99	          0x4801d0	                            add rax, rdx	      3111	fold.c	FUNCTION_65	FOR_2
0x4005a9c	        0x48c1e004	                              shl rax, 4	      3111	fold.c	FUNCTION_65	FOR_2
0x4005aa0	        0x488d1401	                    lea rdx, [rcx + rax]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005aa4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005aa8	          0x4839c2	                            cmp rdx, rax	      3111	fold.c	FUNCTION_65	FOR_2
0x4005aab	            0x7611	                           jbe 0x4005abe	      3111	fold.c	FUNCTION_65	FOR_2
0x4005aad	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005ab1	          0x488b00	                    mov rax, qword [rax]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005ab4	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      3111	fold.c	FUNCTION_65	FOR_2
0x4005ab8	     0xf8eeffeffff	                           jle 0x40059ad	      3111	fold.c	FUNCTION_65	FOR_2
0x4005abe	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3134	fold.c	FUNCTION_65
0x4005ac2	          0x4889c2	                            mov rdx, rax	      3134	fold.c	FUNCTION_65
0x4005ac5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3134	fold.c	FUNCTION_65
0x4005ac9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3134	fold.c	FUNCTION_65
0x4005acd	          0x4829c2	                            sub rdx, rax	      3134	fold.c	FUNCTION_65
0x4005ad0	          0x4889d0	                            mov rax, rdx	      3134	fold.c	FUNCTION_65
0x4005ad3	        0x48c1f804	                              sar rax, 4	      3134	fold.c	FUNCTION_65
0x4005ad7	          0x4889c2	                            mov rdx, rax	      3134	fold.c	FUNCTION_65
0x4005ada	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3134	fold.c	FUNCTION_65
0x4005ae4	        0x480fafc2	                           imul rax, rdx	      3134	fold.c	FUNCTION_65
0x4005ae8	        0x488945f0	             mov qword [rbp - 0x10], rax	      3134	fold.c	FUNCTION_65
0x4005aec	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      3141	fold.c	FUNCTION_65	IF_12
0x4005af1	            0x747b	                            je 0x4005b6e	      3141	fold.c	FUNCTION_65	IF_12
0x4005af3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3145	fold.c	FUNCTION_65	CALL_9
0x4005af7	        0x488d50ff	                      lea rdx, [rax - 1]	      3145	fold.c	FUNCTION_65	CALL_9
0x4005afb	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      3145	fold.c	FUNCTION_65	CALL_9
0x4005aff	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3145	fold.c	FUNCTION_65	CALL_9
0x4005b03	          0x4889ce	                            mov rsi, rcx	      3145	fold.c	FUNCTION_65	CALL_9
0x4005b06	          0x4889c7	                            mov rdi, rax	      3145	fold.c	FUNCTION_65	CALL_9
0x4005b09	      0xe8d4f9ffff	               call sym.foldReverseOrder	      3145	fold.c	FUNCTION_65	CALL_9
0x4005b0e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      3147	fold.c	FUNCTION_65
0x4005b12	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3147	fold.c	FUNCTION_65
0x4005b16	          0x4801d0	                            add rax, rdx	      3147	fold.c	FUNCTION_65
0x4005b19	        0x482b45d0	             sub rax, qword [rbp - 0x30]	      3147	fold.c	FUNCTION_65
0x4005b1d	        0x4883e801	                              sub rax, 1	      3147	fold.c	FUNCTION_65
0x4005b21	          0x4889c2	                            mov rdx, rax	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b24	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b28	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b2c	          0x4889ce	                            mov rsi, rcx	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b2f	          0x4889c7	                            mov rdi, rax	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b32	      0xe8abf9ffff	               call sym.foldReverseOrder	      3146	fold.c	FUNCTION_65	CALL_10
0x4005b37	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3149	fold.c	FUNCTION_65
0x4005b3b	        0x4883e801	                              sub rax, 1	      3149	fold.c	FUNCTION_65
0x4005b3f	          0x4889c6	                            mov rsi, rax	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b42	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b46	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b4a	          0x4801d0	                            add rax, rdx	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b4d	        0x482b45d0	             sub rax, qword [rbp - 0x30]	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b51	          0x4889c1	                            mov rcx, rax	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b54	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b58	          0x4889f2	                            mov rdx, rsi	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b5b	          0x4889ce	                            mov rsi, rcx	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b5e	          0x4889c7	                            mov rdi, rax	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b61	      0xe87cf9ffff	               call sym.foldReverseOrder	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b66	            0xeb07	                           jmp 0x4005b6f	      3148	fold.c	FUNCTION_65	CALL_11
0x4005b68	              0x90	                                     nop	      3079	fold.c	FUNCTION_65	IF_4
0x4005b69	            0xeb04	                           jmp 0x4005b6f	      3079	fold.c	FUNCTION_65	IF_4
0x4005b6b	              0x90	                                     nop	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4005b6c	            0xeb01	                           jmp 0x4005b6f	      3093	fold.c	FUNCTION_65	ELSE_3	IF_5
0x4005b6e	              0x90	                                     nop	      3144	fold.c	FUNCTION_65	IF_12
0x4005b6f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3150	fold.c	FUNCTION_65
0x4005b73	    0x644833042528	                xor rax, qword fs:[0x28]	      3150	fold.c	FUNCTION_65
0x4005b7c	            0x7405	                            je 0x4005b83	      3150	fold.c	FUNCTION_65
0x4005b7e	      0xe800000000	                          call 0x4005b83	      3150	fold.c	FUNCTION_65
0x4005b83	              0xc9	                                   leave	      3150	fold.c	FUNCTION_65
0x4005b84	              0xc3	                                     ret	      3150	fold.c	FUNCTION_65
foldlevelDiff	functions,0:DO,0:ELSE,1:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,1	24
0x4005ef0	              0x55	                                push rbp	      3239	fold.c	FUNCTION_68
0x4005ef1	          0x4889e5	                            mov rbp, rsp	      3239	fold.c	FUNCTION_68
0x4005ef4	        0x4883ec10	                           sub rsp, 0x10	      3239	fold.c	FUNCTION_68
0x4005ef8	        0x48897df8	                mov qword [rbp - 8], rdi	      3239	fold.c	FUNCTION_68
0x4005efc	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f00	        0x488b5008	                mov rdx, qword [rax + 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f04	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f08	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f0c	          0x4801c2	                            add rdx, rax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f0f	        0x488b45f8	                mov rax, qword [rbp - 8]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f13	          0x488b00	                    mov rax, qword [rax]	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f16	          0x4889d6	                            mov rsi, rdx	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f19	          0x4889c7	                            mov rdi, rax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f1c	      0xe800000000	                          call 0x4005f21	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f21	            0x85c0	                           test eax, eax	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f23	            0x740d	                            je 0x4005f32	      3240	fold.c	FUNCTION_68	IF_1	CALL_1
0x4005f25	        0x488b45f8	                mov rax, qword [rbp - 8]	      3241	fold.c	FUNCTION_68	IF_1
0x4005f29	    0xc74020010000	               mov dword [rax + 0x20], 1	      3241	fold.c	FUNCTION_68	IF_1
0x4005f30	            0xeb0b	                           jmp 0x4005f3d	      3244	fold.c	FUNCTION_68	ELSE_1
0x4005f32	        0x488b45f8	                mov rax, qword [rbp - 8]	      3243	fold.c	FUNCTION_68	ELSE_1
0x4005f36	    0xc74020000000	               mov dword [rax + 0x20], 0	      3243	fold.c	FUNCTION_68	ELSE_1
0x4005f3d	              0x90	                                     nop	      3244	fold.c	FUNCTION_68	ELSE_1
0x4005f3e	              0xc9	                                   leave	      3244	fold.c	FUNCTION_68	ELSE_1
0x4005f3f	              0xc3	                                     ret	      3244	fold.c	FUNCTION_68	ELSE_1
foldlevelSyntax	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,2:CALL,2	51
0x40064bf	              0x55	                                push rbp	      3457	fold.c	FUNCTION_72
0x40064c0	          0x4889e5	                            mov rbp, rsp	      3457	fold.c	FUNCTION_72
0x40064c3	        0x4883ec20	                           sub rsp, 0x20	      3457	fold.c	FUNCTION_72
0x40064c7	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3457	fold.c	FUNCTION_72
0x40064cb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3462	fold.c	FUNCTION_72
0x40064cf	        0x488b5008	                mov rdx, qword [rax + 8]	      3462	fold.c	FUNCTION_72
0x40064d3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3462	fold.c	FUNCTION_72
0x40064d7	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3462	fold.c	FUNCTION_72
0x40064db	          0x4801d0	                            add rax, rdx	      3462	fold.c	FUNCTION_72
0x40064de	        0x488945f8	                mov qword [rbp - 8], rax	      3462	fold.c	FUNCTION_72
0x40064e2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3466	fold.c	FUNCTION_72	CALL_1
0x40064e6	          0x488b00	                    mov rax, qword [rax]	      3466	fold.c	FUNCTION_72	CALL_1
0x40064e9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      3466	fold.c	FUNCTION_72	CALL_1
0x40064ed	          0x4889d6	                            mov rsi, rdx	      3466	fold.c	FUNCTION_72	CALL_1
0x40064f0	          0x4889c7	                            mov rdi, rax	      3466	fold.c	FUNCTION_72	CALL_1
0x40064f3	      0xe800000000	                          call 0x40064f8	      3466	fold.c	FUNCTION_72	CALL_1
0x40064f8	            0x89c2	                            mov edx, eax	      3466	fold.c	FUNCTION_72	CALL_1
0x40064fa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3466	fold.c	FUNCTION_72	CALL_1
0x40064fe	          0x895020	             mov dword [rax + 0x20], edx	      3466	fold.c	FUNCTION_72	CALL_1
0x4006501	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3467	fold.c	FUNCTION_72
0x4006505	    0xc74028000000	               mov dword [rax + 0x28], 0	      3467	fold.c	FUNCTION_72
0x400650c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3468	fold.c	FUNCTION_72	IF_1
0x4006510	          0x488b00	                    mov rax, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x4006513	        0x488b4008	                mov rax, qword [rax + 8]	      3468	fold.c	FUNCTION_72	IF_1
0x4006517	          0x488b00	                    mov rax, qword [rax]	      3468	fold.c	FUNCTION_72	IF_1
0x400651a	        0x483b45f8	                cmp rax, qword [rbp - 8]	      3468	fold.c	FUNCTION_72	IF_1
0x400651e	            0x7e46	                           jle 0x4006566	      3468	fold.c	FUNCTION_72	IF_1
0x4006520	        0x488b45f8	                mov rax, qword [rbp - 8]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4006524	        0x488d5001	                      lea rdx, [rax + 1]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4006528	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x400652c	          0x488b00	                    mov rax, qword [rax]	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x400652f	          0x4889d6	                            mov rsi, rdx	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4006532	          0x4889c7	                            mov rdi, rax	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x4006535	      0xe800000000	                          call 0x400653a	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x400653a	          0x8945f4	              mov dword [rbp - 0xc], eax	      3470	fold.c	FUNCTION_72	IF_1	CALL_2
0x400653d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4006541	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4006544	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4006547	            0x7d1d	                           jge 0x4006566	      3471	fold.c	FUNCTION_72	IF_1	IF_2
0x4006549	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x400654d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4006550	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4006553	            0x29c2	                            sub edx, eax	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4006555	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x4006559	          0x895028	             mov dword [rax + 0x28], edx	      3473	fold.c	FUNCTION_72	IF_1	IF_2
0x400655c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x4006560	          0x8b55f4	              mov edx, dword [rbp - 0xc]	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x4006563	          0x895020	             mov dword [rax + 0x20], edx	      3474	fold.c	FUNCTION_72	IF_1	IF_2
0x4006566	              0x90	                                     nop	      3478	fold.c	FUNCTION_72
0x4006567	              0xc9	                                   leave	      3478	fold.c	FUNCTION_72
0x4006568	              0xc3	                                     ret	      3478	fold.c	FUNCTION_72
foldlevelMarker	functions,0:DO,0:ELSE,5:FOR,0:SWITCH,0:WHILE,1:IF,9:CALL,8	182
0x4006233	              0x55	                                push rbp	      3375	fold.c	FUNCTION_71
0x4006234	          0x4889e5	                            mov rbp, rsp	      3375	fold.c	FUNCTION_71
0x4006237	        0x4883ec30	                           sub rsp, 0x30	      3375	fold.c	FUNCTION_71
0x400623b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      3375	fold.c	FUNCTION_71
0x400623f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3379	fold.c	FUNCTION_71
0x4006243	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3379	fold.c	FUNCTION_71
0x4006246	          0x8945e0	             mov dword [rbp - 0x20], eax	      3379	fold.c	FUNCTION_71
0x4006249	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3384	fold.c	FUNCTION_71
0x400624d	          0x488b00	                    mov rax, qword [rax]	      3384	fold.c	FUNCTION_71
0x4006250	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      3384	fold.c	FUNCTION_71
0x4006257	        0x488945f8	                mov qword [rbp - 8], rax	      3384	fold.c	FUNCTION_71
0x400625b	        0x488b45f8	                mov rax, qword [rbp - 8]	      3385	fold.c	FUNCTION_71
0x400625f	           0xfb600	                   movzx eax, byte [rax]	      3385	fold.c	FUNCTION_71
0x4006262	           0xfb6c0	                           movzx eax, al	      3385	fold.c	FUNCTION_71
0x4006265	          0x8945e4	             mov dword [rbp - 0x1c], eax	      3385	fold.c	FUNCTION_71
0x4006268	      0x488345f801	                  add qword [rbp - 8], 1	      3386	fold.c	FUNCTION_71
0x400626d	    0x488b05000000	            mov rax, qword [0x04006274] 	      3387	fold.c	FUNCTION_71
0x4006274	           0xfb600	                   movzx eax, byte [rax]	      3387	fold.c	FUNCTION_71
0x4006277	           0xfb6c0	                           movzx eax, al	      3387	fold.c	FUNCTION_71
0x400627a	          0x8945e8	             mov dword [rbp - 0x18], eax	      3387	fold.c	FUNCTION_71
0x400627d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3390	fold.c	FUNCTION_71
0x4006281	    0xc74028000000	               mov dword [rax + 0x28], 0	      3390	fold.c	FUNCTION_71
0x4006288	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3391	fold.c	FUNCTION_71
0x400628c	          0x8b5020	            mov edx, dword [rax + 0x20] 	      3391	fold.c	FUNCTION_71
0x400628f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3391	fold.c	FUNCTION_71
0x4006293	          0x895024	             mov dword [rax + 0x24], edx	      3391	fold.c	FUNCTION_71
0x4006296	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x400629a	        0x488b5008	                mov rdx, qword [rax + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x400629e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x40062a2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3393	fold.c	FUNCTION_71	CALL_1
0x40062a6	        0x488d0c02	                    lea rcx, [rdx + rax]	      3393	fold.c	FUNCTION_71	CALL_1
0x40062aa	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3393	fold.c	FUNCTION_71	CALL_1
0x40062ae	          0x488b00	                    mov rax, qword [rax]	      3393	fold.c	FUNCTION_71	CALL_1
0x40062b1	        0x488b4008	                mov rax, qword [rax + 8]	      3393	fold.c	FUNCTION_71	CALL_1
0x40062b5	      0xba00000000	                              mov edx, 0	      3393	fold.c	FUNCTION_71	CALL_1
0x40062ba	          0x4889ce	                            mov rsi, rcx	      3393	fold.c	FUNCTION_71	CALL_1
0x40062bd	          0x4889c7	                            mov rdi, rax	      3393	fold.c	FUNCTION_71	CALL_1
0x40062c0	      0xe800000000	                          call 0x40062c5	      3393	fold.c	FUNCTION_71	CALL_1
0x40062c5	        0x488945f0	             mov qword [rbp - 0x10], rax	      3393	fold.c	FUNCTION_71	CALL_1
0x40062c9	      0xe9c9010000	                           jmp 0x4006497	      3394	fold.c	FUNCTION_71	WHILE_1
0x40062ce	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40062d2	           0xfb600	                   movzx eax, byte [rax]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40062d5	           0xfb6c0	                           movzx eax, al	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40062d8	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40062db	     0xf85da000000	                           jne 0x40063bb	      3396	fold.c	FUNCTION_71	WHILE_1	IF_1
0x40062e1	    0x8b0500000000	            mov eax, dword [0x040062e7] 	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062e7	          0x83e801	                              sub eax, 1	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062ea	          0x4863d0	                         movsxd rdx, eax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062ed	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062f1	        0x488d4801	                      lea rcx, [rax + 1]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062f5	        0x488b45f8	                mov rax, qword [rbp - 8]	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062f9	          0x4889c6	                            mov rsi, rax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062fc	          0x4889cf	                            mov rdi, rcx	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x40062ff	      0xe800000000	                          call 0x4006304	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x4006304	            0x85c0	                           test eax, eax	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x4006306	     0xf85af000000	                           jne 0x40063bb	      3397	fold.c	FUNCTION_71	WHILE_1	IF_1	CALL_2
0x400630c	    0x8b0500000000	            mov eax, dword [0x04006312] 	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x4006312	            0x4898	                                    cdqe	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x4006314	        0x480145f0	            add qword [rbp - 0x10], rax 	      3400	fold.c	FUNCTION_71	WHILE_1	IF_1
0x4006318	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x400631c	           0xfb600	                   movzx eax, byte [rax]	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x400631f	           0xfb6c0	                           movzx eax, al	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x4006322	          0x83e830	                           sub eax, 0x30	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x4006325	          0x83f809	                              cmp eax, 9	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x4006328	            0x7759	                            ja 0x4006383	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x400632a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x400632e	          0x4889c7	                            mov rdi, rax	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x4006331	      0xe800000000	                          call 0x4006336	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x4006336	          0x8945ec	             mov dword [rbp - 0x14], eax	      3403	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_4
0x4006339	        0x837dec00	               cmp dword [rbp - 0x14], 0	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x400633d	     0xf8e54010000	                           jle 0x4006497	      3404	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4006343	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4006347	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x400634a	          0x895020	             mov dword [rax + 0x20], edx	      3406	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x400634d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4006351	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4006354	          0x895024	             mov dword [rax + 0x24], edx	      3407	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3
0x4006357	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x400635a	          0x3b45e0	             cmp eax, dword [rbp - 0x20]	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x400635d	            0x7f10	                            jg 0x400636f	      3408	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x400635f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x4006363	    0xc74028010000	               mov dword [rax + 0x28], 1	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x400636a	      0xe928010000	                           jmp 0x4006497	      3409	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	IF_4
0x400636f	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4006372	          0x2b45e0	             sub eax, dword [rbp - 0x20]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4006375	            0x89c2	                            mov edx, eax	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4006377	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x400637b	          0x895028	             mov dword [rax + 0x28], edx	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x400637e	      0xe914010000	                           jmp 0x4006497	      3411	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	IF_3	ELSE_1
0x4006383	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x4006387	          0x8b4020	            mov eax, dword [rax + 0x20] 	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x400638a	          0x8d5001	                      lea edx, [rax + 1]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x400638d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x4006391	          0x895020	             mov dword [rax + 0x20], edx	      3416	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x4006394	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x4006398	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x400639b	          0x8d5001	                      lea edx, [rax + 1]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x400639e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063a2	          0x895024	             mov dword [rax + 0x24], edx	      3417	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063a5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063a9	          0x8b4028	            mov eax, dword [rax + 0x28] 	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063ac	          0x8d5001	                      lea edx, [rax + 1]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063af	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063b3	          0x895028	             mov dword [rax + 0x28], edx	      3418	fold.c	FUNCTION_71	WHILE_1	IF_1	ELSE_1	ELSE_2
0x40063b6	      0xe9dc000000	                           jmp 0x4006497	      3401	fold.c	FUNCTION_71	WHILE_1	IF_1	IF_2	CALL_3
0x40063bb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40063bf	           0xfb600	                   movzx eax, byte [rax]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40063c2	           0xfb6c0	                           movzx eax, al	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40063c5	          0x3b45e8	             cmp eax, dword [rbp - 0x18]	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40063c8	     0xf85a2000000	                           jne 0x4006470	      3421	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x40063ce	    0x8b0500000000	            mov eax, dword [0x040063d4] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063d4	          0x83e801	                              sub eax, 1	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063d7	            0x4898	                                    cdqe	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063d9	    0x488b15000000	            mov rdx, qword [0x040063e0] 	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063e0	        0x488d7201	                      lea rsi, [rdx + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063e4	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063e8	        0x488d4a01	                      lea rcx, [rdx + 1]	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063ec	          0x4889c2	                            mov rdx, rax	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063ef	          0x4889cf	                            mov rdi, rcx	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063f2	      0xe800000000	                          call 0x40063f7	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063f7	            0x85c0	                           test eax, eax	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063f9	            0x7575	                           jne 0x4006470	      3422	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	CALL_5
0x40063fb	    0x8b0500000000	            mov eax, dword [0x04006401] 	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x4006401	            0x4898	                                    cdqe	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x4006403	        0x480145f0	            add qword [rbp - 0x10], rax 	      3425	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5
0x4006407	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x400640b	           0xfb600	                   movzx eax, byte [rax]	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x400640e	           0xfb6c0	                           movzx eax, al	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x4006411	          0x83e830	                           sub eax, 0x30	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x4006414	          0x83f809	                              cmp eax, 9	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x4006417	            0x7744	                            ja 0x400645d	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x4006419	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x400641d	          0x4889c7	                            mov rdi, rax	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x4006420	      0xe800000000	                          call 0x4006425	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x4006425	          0x8945ec	             mov dword [rbp - 0x14], eax	      3428	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_7
0x4006428	        0x837dec00	               cmp dword [rbp - 0x14], 0	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x400642c	            0x7e69	                           jle 0x4006497	      3429	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x400642e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4006432	          0x8b55ec	             mov edx, dword [rbp - 0x14]	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4006435	          0x895020	             mov dword [rax + 0x20], edx	      3431	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4006438	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x400643b	          0x8d50ff	                      lea edx, [rax - 1]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x400643e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4006442	          0x895024	             mov dword [rax + 0x24], edx	      3432	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7
0x4006445	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x4006449	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x400644c	          0x3b45e0	             cmp eax, dword [rbp - 0x20]	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x400644f	            0x7e46	                           jle 0x4006497	      3434	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x4006451	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x4006455	          0x8b55e0	             mov edx, dword [rbp - 0x20]	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x4006458	          0x895024	             mov dword [rax + 0x24], edx	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x400645b	            0xeb3a	                           jmp 0x4006497	      3435	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	IF_7	IF_8
0x400645d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4006461	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4006464	          0x8d50ff	                      lea edx, [rax - 1]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x4006467	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x400646b	          0x895024	             mov dword [rax + 0x24], edx	      3439	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	ELSE_4
0x400646e	            0xeb27	                           jmp 0x4006497	      3426	fold.c	FUNCTION_71	WHILE_1	ELSE_1	ELSE_3	IF_5	IF_6	CALL_6
0x4006470	    0x8b0500000000	            mov eax, dword [0x04006476] 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006476	            0x85c0	                           test eax, eax	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006478	            0x7412	                            je 0x400648c	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x400647a	    0x488b05000000	            mov rax, qword [0x04006481] 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006481	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006485	          0x4889d7	                            mov rdi, rdx	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006488	            0xffd0	                                call rax	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x400648a	            0xeb05	                           jmp 0x4006491	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x400648c	      0xb801000000	                              mov eax, 1	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006491	            0x4898	                                    cdqe	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006493	        0x480145f0	            add qword [rbp - 0x10], rax 	      3442	fold.c	FUNCTION_71	WHILE_1	CALL_8
0x4006497	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3394	fold.c	FUNCTION_71	WHILE_1
0x400649b	           0xfb600	                   movzx eax, byte [rax]	      3394	fold.c	FUNCTION_71	WHILE_1
0x400649e	            0x84c0	                             test al, al	      3394	fold.c	FUNCTION_71	WHILE_1
0x40064a0	     0xf8528feffff	                           jne 0x40062ce	      3394	fold.c	FUNCTION_71	WHILE_1
0x40064a6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3446	fold.c	FUNCTION_71	IF_9
0x40064aa	          0x8b4024	            mov eax, dword [rax + 0x24] 	      3446	fold.c	FUNCTION_71	IF_9
0x40064ad	            0x85c0	                           test eax, eax	      3446	fold.c	FUNCTION_71	IF_9
0x40064af	            0x790b	                           jns 0x40064bc	      3446	fold.c	FUNCTION_71	IF_9
0x40064b1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3447	fold.c	FUNCTION_71	IF_9
0x40064b5	    0xc74024000000	               mov dword [rax + 0x24], 0	      3447	fold.c	FUNCTION_71	IF_9
0x40064bc	              0x90	                                     nop	      3448	fold.c	FUNCTION_71
0x40064bd	              0xc9	                                   leave	      3448	fold.c	FUNCTION_71
0x40064be	              0xc3	                                     ret	      3448	fold.c	FUNCTION_71
foldAdjustVisual	functions,0:DO,0:ELSE,1:FOR,0:SWITCH,0:WHILE,0:IF,6:CALL,7	113
0x4001907	              0x55	                                push rbp	      1034	fold.c	FUNCTION_33
0x4001908	          0x4889e5	                            mov rbp, rsp	      1034	fold.c	FUNCTION_33
0x400190b	        0x4883ec20	                           sub rsp, 0x20	      1034	fold.c	FUNCTION_33
0x400190f	    0x8b0500000000	            mov eax, dword [0x04001915] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4001915	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4001917	     0xf849d010000	                            je 0x4001aba	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x400191d	    0x488b05000000	            mov rax, qword [0x04001924] 	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4001924	          0x4889c7	                            mov rdi, rax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4001927	      0xe800000000	                          call 0x400192c	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x400192c	            0x85c0	                           test eax, eax	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x400192e	     0xf8486010000	                            je 0x4001aba	      1038	fold.c	FUNCTION_33	IF_1	CALL_1
0x4001934	    0x488b15000000	            mov rdx, qword [0x0400193b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400193b	    0x488b05000000	            mov rax, qword [0x04001942] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001942	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001946	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001949	            0x7419	                            je 0x4001964	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400194b	    0x488b15000000	            mov rdx, qword [0x04001952] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001952	    0x488b05000000	            mov rax, qword [0x04001959] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001959	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400195d	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001960	            0x7c7f	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001962	            0xeb3e	                           jmp 0x40019a2	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001964	    0x8b1500000000	            mov edx, dword [0x0400196a] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400196a	    0x488b05000000	            mov rax, qword [0x04001971] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001971	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001974	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001976	            0x7416	                            je 0x400198e	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001978	    0x8b1500000000	            mov edx, dword [0x0400197e] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400197e	    0x488b05000000	            mov rax, qword [0x04001985] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001985	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001988	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400198a	            0x7c55	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400198c	            0xeb14	                           jmp 0x40019a2	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400198e	    0x8b1500000000	            mov edx, dword [0x04001994] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x4001994	    0x488b05000000	            mov rax, qword [0x0400199b] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400199b	          0x8b4044	            mov eax, dword [rax + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x400199e	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019a0	            0x7c3f	                            jl 0x40019e1	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019a2	    0x488b15000000	            mov rdx, qword [0x040019a9] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019a9	    0x488b05000000	            mov rax, qword [0x040019b0] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019b0	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019b4	          0x4839c2	                            cmp rdx, rax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019b7	            0x7541	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019b9	    0x8b1500000000	            mov edx, dword [0x040019bf] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019bf	    0x488b05000000	            mov rax, qword [0x040019c6] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019c6	          0x8b4040	            mov eax, dword [rax + 0x40] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019c9	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019cb	            0x752d	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019cd	    0x8b1500000000	            mov edx, dword [0x040019d3] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019d3	    0x488b05000000	            mov rax, qword [0x040019da] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019da	          0x8b4044	            mov eax, dword [rax + 0x44] 	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019dd	            0x39c2	                            cmp edx, eax	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019df	            0x7519	                           jne 0x40019fa	      1041	fold.c	FUNCTION_33	IF_2	CALL_2
0x40019e1	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1043	fold.c	FUNCTION_33	IF_2
0x40019e9	    0x488b05000000	            mov rax, qword [0x040019f0] 	      1044	fold.c	FUNCTION_33	IF_2
0x40019f0	        0x4883c038	                           add rax, 0x38	      1044	fold.c	FUNCTION_33	IF_2
0x40019f4	        0x488945f0	             mov qword [rbp - 0x10], rax	      1044	fold.c	FUNCTION_33	IF_2
0x40019f8	            0xeb17	                           jmp 0x4001a11	      1044	fold.c	FUNCTION_33	IF_2
0x40019fa	    0x488b05000000	            mov rax, qword [0x04001a01] 	      1048	fold.c	FUNCTION_33	ELSE_1
0x4001a01	        0x4883c038	                           add rax, 0x38	      1048	fold.c	FUNCTION_33	ELSE_1
0x4001a05	        0x488945e8	             mov qword [rbp - 0x18], rax	      1048	fold.c	FUNCTION_33	ELSE_1
0x4001a09	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1049	fold.c	FUNCTION_33	ELSE_1
0x4001a11	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a15	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a19	          0x488b00	                    mov rax, qword [rax]	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a1c	      0xba00000000	                              mov edx, 0	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a21	          0x4889ce	                            mov rsi, rcx	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a24	          0x4889c7	                            mov rdi, rax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a27	      0xe800000000	                          call 0x4001a2c	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a2c	            0x85c0	                           test eax, eax	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a2e	            0x740b	                            je 0x4001a3b	      1051	fold.c	FUNCTION_33	IF_3	CALL_3
0x4001a30	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1052	fold.c	FUNCTION_33	IF_3
0x4001a34	    0xc74008000000	                  mov dword [rax + 8], 0	      1052	fold.c	FUNCTION_33	IF_3
0x4001a3b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a3f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a43	          0x488b00	                    mov rax, qword [rax]	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a46	      0xbe00000000	                              mov esi, 0	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a4b	          0x4889c7	                            mov rdi, rax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a4e	      0xe800000000	                          call 0x4001a53	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a53	            0x85c0	                           test eax, eax	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a55	            0x7464	                            je 0x4001abb	      1053	fold.c	FUNCTION_33	IF_4	CALL_4
0x4001a57	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4001a5b	          0x488b00	                    mov rax, qword [rax]	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4001a5e	          0x4889c7	                            mov rdi, rax	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4001a61	      0xe800000000	                          call 0x4001a66	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4001a66	        0x488945f8	                mov qword [rbp - 8], rax	      1055	fold.c	FUNCTION_33	IF_4	CALL_5
0x4001a6a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a6e	          0x4889c7	                            mov rdi, rax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a71	      0xe800000000	                          call 0x4001a76	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a76	            0x89c2	                            mov edx, eax	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a78	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a7c	          0x895008	                mov dword [rax + 8], edx	      1056	fold.c	FUNCTION_33	IF_4	CALL_6
0x4001a7f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a83	          0x8b4008	                mov eax, dword [rax + 8]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a86	            0x85c0	                           test eax, eax	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a88	            0x7e1f	                           jle 0x4001aa9	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a8a	    0x488b05000000	            mov rax, qword [0x04001a91] 	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a91	           0xfb600	                   movzx eax, byte [rax]	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a94	            0x3c6f	                            cmp al, 0x6f	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a96	            0x7511	                           jne 0x4001aa9	      1057	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a98	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a9c	          0x8b4008	                mov eax, dword [rax + 8]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4001a9f	          0x8d50ff	                      lea edx, [rax - 1]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4001aa2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4001aa6	          0x895008	                mov dword [rax + 8], edx	      1058	fold.c	FUNCTION_33	IF_4	IF_5
0x4001aa9	    0x8b0500000000	            mov eax, dword [0x04001aaf] 	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4001aaf	            0x85c0	                           test eax, eax	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4001ab1	            0x7408	                            je 0x4001abb	      1061	fold.c	FUNCTION_33	IF_4	IF_6
0x4001ab3	      0xe800000000	                          call 0x4001ab8	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x4001ab8	            0xeb01	                           jmp 0x4001abb	      1062	fold.c	FUNCTION_33	IF_4	CALL_7
0x4001aba	              0x90	                                     nop	      1039	fold.c	FUNCTION_33	IF_1
0x4001abb	              0xc9	                                   leave	      1065	fold.c	FUNCTION_33
0x4001abc	              0xc3	                                     ret	      1065	fold.c	FUNCTION_33
deleteFoldRecurse	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,0:CALL,2	29
0x4002564	              0x55	                                push rbp	      1453	fold.c	FUNCTION_44
0x4002565	          0x4889e5	                            mov rbp, rsp	      1453	fold.c	FUNCTION_44
0x4002568	        0x4883ec20	                           sub rsp, 0x20	      1453	fold.c	FUNCTION_44
0x400256c	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1453	fold.c	FUNCTION_44
0x4002570	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1456	fold.c	FUNCTION_44	FOR_1
0x4002577	            0xeb2e	                           jmp 0x40025a7	      1456	fold.c	FUNCTION_44	FOR_1
0x4002579	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1457	fold.c	FUNCTION_44	CALL_1
0x400257d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1457	fold.c	FUNCTION_44	CALL_1
0x4002581	          0x8b45fc	                mov eax, dword [rbp - 4]	      1457	fold.c	FUNCTION_44	CALL_1
0x4002584	          0x4863d0	                         movsxd rdx, eax	      1457	fold.c	FUNCTION_44	CALL_1
0x4002587	          0x4889d0	                            mov rax, rdx	      1457	fold.c	FUNCTION_44	CALL_1
0x400258a	          0x4801c0	                            add rax, rax	      1457	fold.c	FUNCTION_44	CALL_1
0x400258d	          0x4801d0	                            add rax, rdx	      1457	fold.c	FUNCTION_44	CALL_1
0x4002590	        0x48c1e004	                              shl rax, 4	      1457	fold.c	FUNCTION_44	CALL_1
0x4002594	          0x4801c8	                            add rax, rcx	      1457	fold.c	FUNCTION_44	CALL_1
0x4002597	        0x4883c010	                           add rax, 0x10	      1457	fold.c	FUNCTION_44	CALL_1
0x400259b	          0x4889c7	                            mov rdi, rax	      1457	fold.c	FUNCTION_44	CALL_1
0x400259e	      0xe800000000	                          call 0x40025a3	      1457	fold.c	FUNCTION_44	CALL_1
0x40025a3	        0x8345fc01	                  add dword [rbp - 4], 1	      1456	fold.c	FUNCTION_44	FOR_1
0x40025a7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1456	fold.c	FUNCTION_44	FOR_1
0x40025ab	            0x8b00	                    mov eax, dword [rax]	      1456	fold.c	FUNCTION_44	FOR_1
0x40025ad	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1456	fold.c	FUNCTION_44	FOR_1
0x40025b0	            0x7fc7	                            jg 0x4002579	      1456	fold.c	FUNCTION_44	FOR_1
0x40025b2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1458	fold.c	FUNCTION_44	CALL_2
0x40025b6	          0x4889c7	                            mov rdi, rax	      1458	fold.c	FUNCTION_44	CALL_2
0x40025b9	      0xe800000000	                          call 0x40025be	      1458	fold.c	FUNCTION_44	CALL_2
0x40025be	              0x90	                                     nop	      1459	fold.c	FUNCTION_44
0x40025bf	              0xc9	                                   leave	      1459	fold.c	FUNCTION_44
0x40025c0	              0xc3	                                     ret	      1459	fold.c	FUNCTION_44
foldCheckClose	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,2:CALL,3	26
0x4000991	              0x55	                                push rbp	       514	fold.c	FUNCTION_22
0x4000992	          0x4889e5	                            mov rbp, rsp	       514	fold.c	FUNCTION_22
0x4000995	    0x488b05000000	            mov rax, qword [0x0400099c] 	       515	fold.c	FUNCTION_22	IF_1
0x400099c	           0xfb600	                   movzx eax, byte [rax]	       515	fold.c	FUNCTION_22	IF_1
0x400099f	            0x84c0	                             test al, al	       515	fold.c	FUNCTION_22	IF_1
0x40009a1	            0x744e	                            je 0x40009f1	       515	fold.c	FUNCTION_22	IF_1
0x40009a3	    0x488b05000000	            mov rax, qword [0x040009aa] 	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x40009aa	          0x4889c7	                            mov rdi, rax	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x40009ad	      0xe805140000	                    call sym.checkupdate	       517	fold.c	FUNCTION_22	IF_1	CALL_1
0x40009b2	    0x488b05000000	            mov rax, qword [0x040009b9] 	       519	fold.c	FUNCTION_22	IF_1	IF_2
0x40009b9	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       519	fold.c	FUNCTION_22	IF_1	IF_2
0x40009c0	            0x89c6	                            mov esi, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009c2	    0x488b05000000	            mov rax, qword [0x040009c9] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009c9	        0x488b4038	            mov rax, qword [rax + 0x38] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009cd	    0x488b15000000	            mov rdx, qword [0x040009d4] 	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009d4	    0x488d8a080100	                  lea rcx, [rdx + 0x108]	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009db	            0x89f2	                            mov edx, esi	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009dd	          0x4889c6	                            mov rsi, rax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009e0	          0x4889cf	                            mov rdi, rcx	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009e3	      0xe80c000000	                  call sym.checkCloseRec	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009e8	            0x85c0	                           test eax, eax	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009ea	            0x7405	                            je 0x40009f1	       518	fold.c	FUNCTION_22	IF_1	IF_2	CALL_2
0x40009ec	      0xe800000000	                          call 0x40009f1	       520	fold.c	FUNCTION_22	IF_1	CALL_3
0x40009f1	              0x90	                                     nop	       522	fold.c	FUNCTION_22
0x40009f2	              0x5d	                                 pop rbp	       522	fold.c	FUNCTION_22
0x40009f3	              0xc3	                                     ret	       522	fold.c	FUNCTION_22
foldDelMarker	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,6:CALL,14	167
0x4002fb7	              0x55	                                push rbp	      1822	fold.c	FUNCTION_55
0x4002fb8	          0x4889e5	                            mov rbp, rsp	      1822	fold.c	FUNCTION_55
0x4002fbb	        0x4883ec50	                           sub rsp, 0x50	      1822	fold.c	FUNCTION_55
0x4002fbf	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1822	fold.c	FUNCTION_55
0x4002fc3	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1822	fold.c	FUNCTION_55
0x4002fc7	          0x8955bc	             mov dword [rbp - 0x44], edx	      1822	fold.c	FUNCTION_55
0x4002fca	    0x488b05000000	            mov rax, qword [0x04002fd1] 	      1827	fold.c	FUNCTION_55
0x4002fd1	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      1827	fold.c	FUNCTION_55
0x4002fd8	        0x488945e0	             mov qword [rbp - 0x20], rax	      1827	fold.c	FUNCTION_55
0x4002fdc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1830	fold.c	FUNCTION_55	CALL_1
0x4002fe0	          0x4889c7	                            mov rdi, rax	      1830	fold.c	FUNCTION_55	CALL_1
0x4002fe3	      0xe800000000	                          call 0x4002fe8	      1830	fold.c	FUNCTION_55	CALL_1
0x4002fe8	        0x488945e8	             mov qword [rbp - 0x18], rax	      1830	fold.c	FUNCTION_55	CALL_1
0x4002fec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1831	fold.c	FUNCTION_55	FOR_1
0x4002ff0	        0x488945d8	             mov qword [rbp - 0x28], rax	      1831	fold.c	FUNCTION_55	FOR_1
0x4002ff4	      0xe9f8010000	                           jmp 0x40031f1	      1831	fold.c	FUNCTION_55	FOR_1
0x4002ff9	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4002ffc	          0x4863d0	                         movsxd rdx, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4002fff	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4003003	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4003007	          0x4889ce	                            mov rsi, rcx	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400300a	          0x4889c7	                            mov rdi, rax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400300d	      0xe800000000	                          call 0x4003012	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4003012	            0x85c0	                           test eax, eax	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x4003014	     0xf85d2010000	                           jne 0x40031ec	      1832	fold.c	FUNCTION_55	FOR_1	IF_1	CALL_2
0x400301a	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1835	fold.c	FUNCTION_55	FOR_1	IF_1
0x400301d	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1835	fold.c	FUNCTION_55	FOR_1	IF_1
0x4003020	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003023	          0x4863d0	                         movsxd rdx, eax	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003026	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x400302a	          0x4801d0	                            add rax, rdx	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x400302d	           0xfb600	                   movzx eax, byte [rax]	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003030	           0xfb6c0	                           movzx eax, al	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003033	          0x83e830	                           sub eax, 0x30	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003036	          0x83f809	                              cmp eax, 9	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x4003039	            0x7704	                            ja 0x400303f	      1836	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2	CALL_3
0x400303b	        0x8345d401	               add dword [rbp - 0x2c], 1	      1837	fold.c	FUNCTION_55	FOR_1	IF_1	IF_2
0x400303f	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4003043	           0xfb600	                   movzx eax, byte [rax]	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4003046	            0x84c0	                             test al, al	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x4003048	     0xf84de000000	                            je 0x400312c	      1838	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3
0x400304e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4003052	      0xbe00000000	                              mov esi, 0	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4003057	          0x4889c7	                            mov rdi, rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x400305a	      0xe800000000	                          call 0x400305f	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x400305f	        0x488945f0	             mov qword [rbp - 0x10], rax	      1841	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	CALL_4
0x4003063	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003067	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400306b	          0x4889d1	                            mov rcx, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400306e	          0x4829c1	                            sub rcx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003071	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003075	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003079	          0x4829c2	                            sub rdx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400307c	          0x4889d0	                            mov rax, rdx	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400307f	          0x4839c1	                            cmp rcx, rax	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003082	     0xf8ca4000000	                            jl 0x400312c	      1842	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003088	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400308c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4003090	          0x4829c2	                            sub rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4003093	          0x4889d0	                            mov rax, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4003096	          0x4889c6	                            mov rsi, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x4003099	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x400309d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030a1	          0x4829c2	                            sub rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030a4	          0x4889d0	                            mov rax, rdx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030a7	          0x48f7d8	                                 neg rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030aa	          0x4889c2	                            mov rdx, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030ad	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030b1	        0x488d0c02	                    lea rcx, [rdx + rax]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030b5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030b9	          0x4889f2	                            mov rdx, rsi	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030bc	          0x4889c6	                            mov rsi, rax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030bf	          0x4889cf	                            mov rdi, rcx	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030c2	      0xe800000000	                          call 0x40030c7	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030c7	            0x85c0	                           test eax, eax	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030c9	            0x7561	                           jne 0x400312c	      1843	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_5
0x40030cb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030cf	        0x4883c002	                              add rax, 2	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030d3	          0x4889c7	                            mov rdi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030d6	      0xe800000000	                          call 0x40030db	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030db	          0x4889c6	                            mov rsi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030de	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030e2	        0x488d4802	                      lea rcx, [rax + 2]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030e6	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030e9	          0x4863d0	                         movsxd rdx, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030f0	          0x4801d0	                            add rax, rdx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030f3	          0x4889f2	                            mov rdx, rsi	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030f6	          0x4889ce	                            mov rsi, rcx	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030f9	          0x4889c7	                            mov rdi, rax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x40030fc	      0xe800000000	                          call 0x4003101	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4003101	            0x85c0	                           test eax, eax	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4003103	            0x7527	                           jne 0x400312c	      1844	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_7
0x4003105	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003109	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400310d	          0x4829c2	                            sub rdx, rax	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003110	          0x4889d0	                            mov rax, rdx	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003113	          0x48f7d8	                                 neg rax	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x4003116	        0x480145d8	            add qword [rbp - 0x28], rax 	      1846	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4
0x400311a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x400311e	          0x4889c7	                            mov rdi, rax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4003121	      0xe800000000	                          call 0x4003126	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4003126	          0x83e802	                              sub eax, 2	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x4003129	           0x145d4	             add dword [rbp - 0x2c], eax	      1847	fold.c	FUNCTION_55	FOR_1	IF_1	IF_3	IF_4	CALL_8
0x400312c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003130	        0x488d5001	                      lea rdx, [rax + 1]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003134	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003138	        0x4883e801	                              sub rax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400313c	          0x4889d6	                            mov rsi, rdx	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400313f	          0x4889c7	                            mov rdi, rax	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003142	      0xe800000000	                          call 0x4003147	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003147	          0x83f801	                              cmp eax, 1	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x400314a	     0xf85b2000000	                           jne 0x4003202	      1850	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_9
0x4003150	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003154	          0x4889c7	                            mov rdi, rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003157	      0xe800000000	                          call 0x400315c	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400315c	            0x89c2	                            mov edx, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400315e	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003161	            0x29c2	                            sub edx, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003163	            0x89d0	                            mov eax, edx	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003165	          0x83c001	                              add eax, 1	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003168	            0x89c7	                            mov edi, eax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400316a	      0xe800000000	                          call 0x400316f	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x400316f	        0x488945f8	                mov qword [rbp - 8], rax	      1853	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	CALL_11
0x4003173	      0x48837df800	                  cmp qword [rbp - 8], 0	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x4003178	     0xf8484000000	                            je 0x4003202	      1854	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6
0x400317e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4003182	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4003186	          0x4829c2	                            sub rdx, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4003189	          0x4889d0	                            mov rax, rdx	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x400318c	          0x4889c2	                            mov rdx, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x400318f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4003193	        0x488b45f8	                mov rax, qword [rbp - 8]	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x4003197	          0x4889ce	                            mov rsi, rcx	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x400319a	          0x4889c7	                            mov rdi, rax	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x400319d	      0xe800000000	                          call 0x40031a2	      1856	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_12
0x40031a2	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031a5	          0x4863d0	                         movsxd rdx, eax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031a8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031ac	          0x4801c2	                            add rdx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031af	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031b7	          0x4829c1	                            sub rcx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031ba	          0x4889c8	                            mov rax, rcx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031bd	          0x4889c1	                            mov rcx, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031c0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031c4	          0x4801c8	                            add rax, rcx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031c7	          0x4889d6	                            mov rsi, rdx	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031ca	          0x4889c7	                            mov rdi, rax	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031cd	      0xe800000000	                          call 0x40031d2	      1857	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_13
0x40031d2	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031d6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031da	      0xba00000000	                              mov edx, 0	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031df	          0x4889ce	                            mov rsi, rcx	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031e2	          0x4889c7	                            mov rdi, rax	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031e5	      0xe800000000	                          call 0x40031ea	      1858	fold.c	FUNCTION_55	FOR_1	IF_1	IF_5	IF_6	CALL_14
0x40031ea	            0xeb16	                           jmp 0x4003202	      1861	fold.c	FUNCTION_55	FOR_1	IF_1
0x40031ec	      0x488345d801	               add qword [rbp - 0x28], 1	      1831	fold.c	FUNCTION_55	FOR_1
0x40031f1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1831	fold.c	FUNCTION_55	FOR_1
0x40031f5	           0xfb600	                   movzx eax, byte [rax]	      1831	fold.c	FUNCTION_55	FOR_1
0x40031f8	            0x84c0	                             test al, al	      1831	fold.c	FUNCTION_55	FOR_1
0x40031fa	     0xf85f9fdffff	                           jne 0x4002ff9	      1831	fold.c	FUNCTION_55	FOR_1
0x4003200	            0xeb01	                           jmp 0x4003203	      1863	fold.c	FUNCTION_55
0x4003202	              0x90	                                     nop	      1861	fold.c	FUNCTION_55	FOR_1	IF_1
0x4003203	              0x90	                                     nop	      1863	fold.c	FUNCTION_55
0x4003204	              0xc9	                                   leave	      1863	fold.c	FUNCTION_55
0x4003205	              0xc3	                                     ret	      1863	fold.c	FUNCTION_55
foldMarkAdjust	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,2:CALL,1	44
0x40025c1	              0x55	                                push rbp	      1472	fold.c	FUNCTION_45
0x40025c2	          0x4889e5	                            mov rbp, rsp	      1472	fold.c	FUNCTION_45
0x40025c5	        0x4883ec30	                           sub rsp, 0x30	      1472	fold.c	FUNCTION_45
0x40025c9	        0x48897df8	                mov qword [rbp - 8], rdi	      1472	fold.c	FUNCTION_45
0x40025cd	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1472	fold.c	FUNCTION_45
0x40025d1	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1472	fold.c	FUNCTION_45
0x40025d5	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1472	fold.c	FUNCTION_45
0x40025d9	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1472	fold.c	FUNCTION_45
0x40025dd	    0x48817de0ffff	     cmp qword [rbp - 0x20], 0x7fffffff 	      1475	fold.c	FUNCTION_45	IF_1
0x40025e5	            0x752e	                           jne 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x40025e7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1475	fold.c	FUNCTION_45	IF_1
0x40025eb	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1475	fold.c	FUNCTION_45	IF_1
0x40025ef	            0x7c24	                            jl 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x40025f1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1475	fold.c	FUNCTION_45	IF_1
0x40025f5	        0x482b45f0	             sub rax, qword [rbp - 0x10]	      1475	fold.c	FUNCTION_45	IF_1
0x40025f9	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1475	fold.c	FUNCTION_45	IF_1
0x40025fd	          0x48f7da	                                 neg rdx	      1475	fold.c	FUNCTION_45	IF_1
0x4002600	          0x4839d0	                            cmp rax, rdx	      1475	fold.c	FUNCTION_45	IF_1
0x4002603	            0x7c10	                            jl 0x4002615	      1475	fold.c	FUNCTION_45	IF_1
0x4002605	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1476	fold.c	FUNCTION_45	IF_1
0x4002609	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1476	fold.c	FUNCTION_45	IF_1
0x400260d	        0x4883e801	                              sub rax, 1	      1476	fold.c	FUNCTION_45	IF_1
0x4002611	        0x488945e8	             mov qword [rbp - 0x18], rax	      1476	fold.c	FUNCTION_45	IF_1
0x4002615	    0x8b0500000000	            mov eax, dword [0x0400261b] 	      1479	fold.c	FUNCTION_45	IF_2
0x400261b	          0x83e010	                           and eax, 0x10	      1479	fold.c	FUNCTION_45	IF_2
0x400261e	            0x85c0	                           test eax, eax	      1479	fold.c	FUNCTION_45	IF_2
0x4002620	            0x7416	                            je 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x4002622	      0x48837de001	               cmp qword [rbp - 0x20], 1	      1479	fold.c	FUNCTION_45	IF_2
0x4002627	            0x750f	                           jne 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x4002629	    0x48817de8ffff	     cmp qword [rbp - 0x18], 0x7fffffff 	      1479	fold.c	FUNCTION_45	IF_2
0x4002631	            0x7505	                           jne 0x4002638	      1479	fold.c	FUNCTION_45	IF_2
0x4002633	      0x48836df001	               sub qword [rbp - 0x10], 1	      1480	fold.c	FUNCTION_45	IF_2
0x4002638	        0x488b45f8	                mov rax, qword [rbp - 8]	      1481	fold.c	FUNCTION_45	CALL_1
0x400263c	    0x488db8080100	                  lea rdi, [rax + 0x108]	      1481	fold.c	FUNCTION_45	CALL_1
0x4002643	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1481	fold.c	FUNCTION_45	CALL_1
0x4002647	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1481	fold.c	FUNCTION_45	CALL_1
0x400264b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1481	fold.c	FUNCTION_45	CALL_1
0x400264f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1481	fold.c	FUNCTION_45	CALL_1
0x4002653	          0x4989f0	                             mov r8, rsi	      1481	fold.c	FUNCTION_45	CALL_1
0x4002656	          0x4889c6	                            mov rsi, rax	      1481	fold.c	FUNCTION_45	CALL_1
0x4002659	      0xe803000000	          call sym.foldMarkAdjustRecurse	      1481	fold.c	FUNCTION_45	CALL_1
0x400265e	              0x90	                                     nop	      1482	fold.c	FUNCTION_45
0x400265f	              0xc9	                                   leave	      1482	fold.c	FUNCTION_45
0x4002660	              0xc3	                                     ret	      1482	fold.c	FUNCTION_45
deleteFold	functions,0:DO,0:ELSE,3:FOR,1:SWITCH,0:WHILE,1:IF,10:CALL,13	161
0x400108e	              0x55	                                push rbp	       705	fold.c	FUNCTION_26
0x400108f	          0x4889e5	                            mov rbp, rsp	       705	fold.c	FUNCTION_26
0x4001092	        0x4883c480	             add rsp, 0xffffffffffffff80	       705	fold.c	FUNCTION_26
0x4001096	        0x48897d98	             mov qword [rbp - 0x68], rdi	       705	fold.c	FUNCTION_26
0x400109a	        0x48897590	             mov qword [rbp - 0x70], rsi	       705	fold.c	FUNCTION_26
0x400109e	          0x89558c	             mov dword [rbp - 0x74], edx	       705	fold.c	FUNCTION_26
0x40010a1	          0x894d88	             mov dword [rbp - 0x78], ecx	       705	fold.c	FUNCTION_26
0x40010a4	    0x64488b042528	                mov rax, qword fs:[0x28]	       705	fold.c	FUNCTION_26
0x40010ad	        0x488945f8	                mov qword [rbp - 8], rax	       705	fold.c	FUNCTION_26
0x40010b1	            0x31c0	                            xor eax, eax	       705	fold.c	FUNCTION_26
0x40010b3	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       709	fold.c	FUNCTION_26
0x40010bb	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       710	fold.c	FUNCTION_26
0x40010c3	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       712	fold.c	FUNCTION_26
0x40010ca	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       713	fold.c	FUNCTION_26
0x40010d1	        0x488b4598	             mov rax, qword [rbp - 0x68]	       714	fold.c	FUNCTION_26
0x40010d5	        0x488945d8	             mov qword [rbp - 0x28], rax	       714	fold.c	FUNCTION_26
0x40010d9	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       716	fold.c	FUNCTION_26
0x40010e0	    0x48c745e8ffff	      mov qword [rbp - 0x18], 0x7fffffff	       717	fold.c	FUNCTION_26
0x40010e8	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       718	fold.c	FUNCTION_26
0x40010f0	    0x488b05000000	            mov rax, qword [0x040010f7] 	       720	fold.c	FUNCTION_26	CALL_1
0x40010f7	          0x4889c7	                            mov rdi, rax	       720	fold.c	FUNCTION_26	CALL_1
0x40010fa	      0xe8b80c0000	                    call sym.checkupdate	       720	fold.c	FUNCTION_26	CALL_1
0x40010ff	      0xe99d010000	                           jmp 0x40012a1	       722	fold.c	FUNCTION_26	WHILE_1
0x4001104	    0x488b05000000	            mov rax, qword [0x0400110b] 	       725	fold.c	FUNCTION_26	WHILE_1
0x400110b	    0x480508010000	                          add rax, 0x108	       725	fold.c	FUNCTION_26	WHILE_1
0x4001111	        0x488945b8	             mov qword [rbp - 0x48], rax	       725	fold.c	FUNCTION_26	WHILE_1
0x4001115	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       726	fold.c	FUNCTION_26	WHILE_1
0x400111d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       727	fold.c	FUNCTION_26	WHILE_1
0x4001125	    0xc745a0000000	               mov dword [rbp - 0x60], 0	       728	fold.c	FUNCTION_26	WHILE_1
0x400112c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4001130	        0x482b45e0	             sub rax, qword [rbp - 0x20]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4001134	          0x4889c1	                            mov rcx, rax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4001137	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400113b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400113f	          0x4889ce	                            mov rsi, rcx	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4001142	          0x4889c7	                            mov rdi, rax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x4001145	      0xe89b0a0000	                       call sym.foldFind	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400114a	            0x85c0	                           test eax, eax	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400114c	            0x7464	                            je 0x40011b2	       731	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1	CALL_2
0x400114e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       734	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4001152	        0x488945c0	             mov qword [rbp - 0x40], rax	       734	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4001156	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       735	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400115a	        0x488945c8	             mov qword [rbp - 0x38], rax	       735	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400115e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       736	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4001162	        0x488945d0	             mov qword [rbp - 0x30], rax	       736	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4001166	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400116a	    0x488b05000000	            mov rax, qword [0x04001171] 	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001171	        0x4c8b45e0	              mov r8, qword [rbp - 0x20]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001175	        0x488d7da4	                   lea rdi, [rbp - 0x5c]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001179	          0x8b4da8	             mov ecx, dword [rbp - 0x58]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400117c	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001180	          0x4d89c1	                              mov r9, r8	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001183	          0x4989f8	                             mov r8, rdi	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001186	          0x4889c7	                            mov rdi, rax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001189	      0xe8cc180000	                   call sym.check_closed	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x400118e	            0x85c0	                           test eax, eax	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001190	            0x7523	                           jne 0x40011b5	       739	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2	CALL_3
0x4001192	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x4001196	        0x4883c010	                           add rax, 0x10	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400119a	        0x488945b8	             mov qword [rbp - 0x48], rax	       744	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x400119e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40011a2	          0x488b00	                    mov rax, qword [rax]	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40011a5	        0x480145e0	            add qword [rbp - 0x20], rax 	       745	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40011a9	        0x8345a801	               add dword [rbp - 0x58], 1	       746	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40011ad	      0xe97affffff	                           jmp 0x400112c	       747	fold.c	FUNCTION_26	WHILE_1	FOR_1
0x40011b2	              0x90	                                     nop	       732	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1
0x40011b3	            0xeb01	                           jmp 0x40011b6	       732	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_1
0x40011b5	              0x90	                                     nop	       741	fold.c	FUNCTION_26	WHILE_1	FOR_1	IF_2
0x40011b6	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40011bb	            0x750a	                           jne 0x40011c7	       748	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40011bd	      0x488345d801	               add qword [rbp - 0x28], 1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40011c2	      0xe9da000000	                           jmp 0x40012a1	       750	fold.c	FUNCTION_26	WHILE_1	IF_3
0x40011c7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011cb	          0x488b10	                    mov rdx, qword [rax]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011ce	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011d2	        0x488b4008	                mov rax, qword [rax + 8]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011d6	          0x4801c2	                            add rdx, rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011d9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011dd	          0x4801d0	                            add rax, rdx	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011e0	        0x488945d8	             mov qword [rbp - 0x28], rax	       754	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x40011e4	    0x488b05000000	            mov rax, qword [0x040011eb] 	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40011eb	          0x4889c7	                            mov rdi, rax	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40011ee	      0xe800000000	                          call 0x40011f3	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40011f3	            0x85c0	                           test eax, eax	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40011f5	            0x743c	                            je 0x4001233	       756	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_4
0x40011f7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x40011fb	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x40011ff	        0x488b4010	            mov rax, qword [rax + 0x10] 	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x4001203	          0x4829c2	                            sub rdx, rax	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x4001206	          0x4889d0	                            mov rax, rdx	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x4001209	        0x48c1f804	                              sar rax, 4	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x400120d	          0x4889c2	                            mov rdx, rax	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x4001210	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x400121a	        0x480fafc2	                           imul rax, rdx	       758	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4
0x400121e	            0x89c1	                            mov ecx, eax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001220	          0x8b558c	             mov edx, dword [rbp - 0x74]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001223	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001227	            0x89ce	                            mov esi, ecx	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001229	          0x4889c7	                            mov rdi, rax	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x400122c	      0xe8b6100000	                call sym.deleteFoldEntry	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001231	            0xeb62	                           jmp 0x4001295	       757	fold.c	FUNCTION_26	WHILE_1	ELSE_1	IF_4	CALL_5
0x4001233	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001237	          0x488b10	                    mov rdx, qword [rax]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x400123a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x400123e	          0x4801d0	                            add rax, rdx	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001241	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001245	            0x7d12	                           jge 0x4001259	       761	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001247	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x400124b	          0x488b10	                    mov rdx, qword [rax]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x400124e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001252	          0x4801d0	                            add rax, rdx	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001255	        0x488945e8	             mov qword [rbp - 0x18], rax	       762	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_5
0x4001259	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x400125d	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x4001261	            0x7d08	                           jge 0x400126b	       763	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x4001263	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       764	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x4001267	        0x488945f0	             mov qword [rbp - 0x10], rax	       764	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_6
0x400126b	        0x837dac00	               cmp dword [rbp - 0x54], 0	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x400126f	            0x750f	                           jne 0x4001280	       765	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	IF_7
0x4001271	    0x488b05000000	            mov rax, qword [0x04001278] 	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x4001278	          0x4889c7	                            mov rdi, rax	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x400127b	      0xe8444f0000	                    call sym.parseMarker	       766	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_6
0x4001280	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4001284	          0x8b4d8c	             mov ecx, dword [rbp - 0x74]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4001287	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x400128b	            0x89ce	                            mov esi, ecx	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x400128d	          0x4889c7	                            mov rdi, rax	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4001290	      0xe84e1c0000	              call sym.deleteFoldMarkers	       767	fold.c	FUNCTION_26	WHILE_1	ELSE_1	ELSE_2	CALL_7
0x4001295	    0xc745ac010000	               mov dword [rbp - 0x54], 1	       769	fold.c	FUNCTION_26	WHILE_1	ELSE_1
0x400129c	      0xe800000000	                          call 0x40012a1	       772	fold.c	FUNCTION_26	WHILE_1	ELSE_1	CALL_8
0x40012a1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       722	fold.c	FUNCTION_26	WHILE_1
0x40012a5	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       722	fold.c	FUNCTION_26	WHILE_1
0x40012a9	     0xf8e55feffff	                           jle 0x4001104	       722	fold.c	FUNCTION_26	WHILE_1
0x40012af	        0x837dac00	               cmp dword [rbp - 0x54], 0	       775	fold.c	FUNCTION_26	IF_8
0x40012b3	            0x7529	                           jne 0x40012de	       775	fold.c	FUNCTION_26	IF_8
0x40012b5	    0x488b05000000	            mov rax, qword [0x040012bc] 	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x40012bc	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x40012bf	      0xe800000000	                          call 0x40012c4	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x40012c4	          0x4889c7	                            mov rdi, rax	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x40012c7	      0xe800000000	                          call 0x40012cc	       777	fold.c	FUNCTION_26	IF_8	CALL_10
0x40012cc	        0x837d8800	               cmp dword [rbp - 0x78], 0	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x40012d0	            0x7411	                            je 0x40012e3	       779	fold.c	FUNCTION_26	IF_8	IF_9
0x40012d2	      0xbf14000000	                           mov edi, 0x14	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x40012d7	      0xe800000000	                          call 0x40012dc	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x40012dc	            0xeb05	                           jmp 0x40012e3	       780	fold.c	FUNCTION_26	IF_8	CALL_11
0x40012de	      0xe800000000	                          call 0x40012e3	       784	fold.c	FUNCTION_26	CALL_12
0x40012e3	      0x48837df000	               cmp qword [rbp - 0x10], 0	       786	fold.c	FUNCTION_26	IF_10
0x40012e8	            0x7e1a	                           jle 0x4001304	       786	fold.c	FUNCTION_26	IF_10
0x40012ea	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       787	fold.c	FUNCTION_26	CALL_13
0x40012ee	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       787	fold.c	FUNCTION_26	CALL_13
0x40012f2	      0xb900000000	                              mov ecx, 0	       787	fold.c	FUNCTION_26	CALL_13
0x40012f7	      0xbe00000000	                              mov esi, 0	       787	fold.c	FUNCTION_26	CALL_13
0x40012fc	          0x4889c7	                            mov rdi, rax	       787	fold.c	FUNCTION_26	CALL_13
0x40012ff	      0xe800000000	                          call 0x4001304	       787	fold.c	FUNCTION_26	CALL_13
0x4001304	              0x90	                                     nop	       788	fold.c	FUNCTION_26
0x4001305	        0x488b45f8	                mov rax, qword [rbp - 8]	       788	fold.c	FUNCTION_26
0x4001309	    0x644833042528	                xor rax, qword fs:[0x28]	       788	fold.c	FUNCTION_26
0x4001312	            0x7405	                            je 0x4001319	       788	fold.c	FUNCTION_26
0x4001314	      0xe800000000	                          call 0x4001319	       788	fold.c	FUNCTION_26
0x4001319	              0xc9	                                   leave	       788	fold.c	FUNCTION_26
0x400131a	              0xc3	                                     ret	       788	fold.c	FUNCTION_26
foldUpdateAll	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x400148d	              0x55	                                push rbp	       851	fold.c	FUNCTION_29
0x400148e	          0x4889e5	                            mov rbp, rsp	       851	fold.c	FUNCTION_29
0x4001491	        0x4883ec10	                           sub rsp, 0x10	       851	fold.c	FUNCTION_29
0x4001495	        0x48897df8	                mov qword [rbp - 8], rdi	       851	fold.c	FUNCTION_29
0x4001499	        0x488b45f8	                mov rax, qword [rbp - 8]	       852	fold.c	FUNCTION_29
0x400149d	    0xc68021010000	               mov byte [rax + 0x121], 1	       852	fold.c	FUNCTION_29
0x40014a4	        0x488b45f8	                mov rax, qword [rbp - 8]	       853	fold.c	FUNCTION_29	CALL_1
0x40014a8	      0xbe28000000	                           mov esi, 0x28	       853	fold.c	FUNCTION_29	CALL_1
0x40014ad	          0x4889c7	                            mov rdi, rax	       853	fold.c	FUNCTION_29	CALL_1
0x40014b0	      0xe800000000	                          call 0x40014b5	       853	fold.c	FUNCTION_29	CALL_1
0x40014b5	              0x90	                                     nop	       854	fold.c	FUNCTION_29
0x40014b6	              0xc9	                                   leave	       854	fold.c	FUNCTION_29
0x40014b7	              0xc3	                                     ret	       854	fold.c	FUNCTION_29
foldSplit	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,3	191
0x4004fc9	              0x55	                                push rbp	      2857	fold.c	FUNCTION_61
0x4004fca	          0x4889e5	                            mov rbp, rsp	      2857	fold.c	FUNCTION_61
0x4004fcd	        0x4883ec50	                           sub rsp, 0x50	      2857	fold.c	FUNCTION_61
0x4004fd1	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      2857	fold.c	FUNCTION_61
0x4004fd5	          0x8975c4	             mov dword [rbp - 0x3c], esi	      2857	fold.c	FUNCTION_61
0x4004fd8	        0x488955b8	             mov qword [rbp - 0x48], rdx	      2857	fold.c	FUNCTION_61
0x4004fdc	        0x48894db0	             mov qword [rbp - 0x50], rcx	      2857	fold.c	FUNCTION_61
0x4004fe0	    0x64488b042528	                mov rax, qword fs:[0x28]	      2857	fold.c	FUNCTION_61
0x4004fe9	        0x488945f8	                mov qword [rbp - 8], rax	      2857	fold.c	FUNCTION_61
0x4004fed	            0x31c0	                            xor eax, eax	      2857	fold.c	FUNCTION_61
0x4004fef	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4004ff2	          0x8d5001	                      lea edx, [rax + 1]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4004ff5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4004ff9	            0x89d6	                            mov esi, edx	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4004ffb	          0x4889c7	                            mov rdi, rax	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4004ffe	      0xe807ffffff	                     call sym.foldInsert	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4005003	            0x85c0	                           test eax, eax	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x4005005	     0xf845a020000	                            je 0x4005265	      2866	fold.c	FUNCTION_61	IF_1	CALL_1
0x400500b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2868	fold.c	FUNCTION_61
0x400500f	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2868	fold.c	FUNCTION_61
0x4005013	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      2868	fold.c	FUNCTION_61
0x4005016	          0x4863d0	                         movsxd rdx, eax	      2868	fold.c	FUNCTION_61
0x4005019	          0x4889d0	                            mov rax, rdx	      2868	fold.c	FUNCTION_61
0x400501c	          0x4801c0	                            add rax, rax	      2868	fold.c	FUNCTION_61
0x400501f	          0x4801d0	                            add rax, rdx	      2868	fold.c	FUNCTION_61
0x4005022	        0x48c1e004	                              shl rax, 4	      2868	fold.c	FUNCTION_61
0x4005026	          0x4801c8	                            add rax, rcx	      2868	fold.c	FUNCTION_61
0x4005029	        0x488945e0	             mov qword [rbp - 0x20], rax	      2868	fold.c	FUNCTION_61
0x400502d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2869	fold.c	FUNCTION_61
0x4005031	        0x4883c030	                           add rax, 0x30	      2869	fold.c	FUNCTION_61
0x4005035	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2869	fold.c	FUNCTION_61
0x4005039	        0x4883c201	                              add rdx, 1	      2869	fold.c	FUNCTION_61
0x400503d	          0x488910	                    mov qword [rax], rdx	      2869	fold.c	FUNCTION_61
0x4005040	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x4005044	        0x488d5030	                   lea rdx, [rax + 0x30]	      2870	fold.c	FUNCTION_61
0x4005048	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x400504c	        0x488b4808	                mov rcx, qword [rax + 8]	      2870	fold.c	FUNCTION_61
0x4005050	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x4005054	        0x4883c030	                           add rax, 0x30	      2870	fold.c	FUNCTION_61
0x4005058	          0x488b30	                    mov rsi, qword [rax]	      2870	fold.c	FUNCTION_61
0x400505b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2870	fold.c	FUNCTION_61
0x400505f	          0x488b00	                    mov rax, qword [rax]	      2870	fold.c	FUNCTION_61
0x4005062	          0x4829c6	                            sub rsi, rax	      2870	fold.c	FUNCTION_61
0x4005065	          0x4889f0	                            mov rax, rsi	      2870	fold.c	FUNCTION_61
0x4005068	          0x4829c1	                            sub rcx, rax	      2870	fold.c	FUNCTION_61
0x400506b	          0x4889c8	                            mov rax, rcx	      2870	fold.c	FUNCTION_61
0x400506e	        0x48894208	                mov qword [rdx + 8], rax	      2870	fold.c	FUNCTION_61
0x4005072	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2871	fold.c	FUNCTION_61
0x4005076	        0x488d5030	                   lea rdx, [rax + 0x30]	      2871	fold.c	FUNCTION_61
0x400507a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2871	fold.c	FUNCTION_61
0x400507e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      2871	fold.c	FUNCTION_61
0x4005082	          0x884228	               mov byte [rdx + 0x28], al	      2871	fold.c	FUNCTION_61
0x4005085	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2872	fold.c	FUNCTION_61
0x4005089	        0x4883c030	                           add rax, 0x30	      2872	fold.c	FUNCTION_61
0x400508d	        0xc6402902	                mov byte [rax + 0x29], 2	      2872	fold.c	FUNCTION_61
0x4005091	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2873	fold.c	FUNCTION_61
0x4005095	        0xc6402902	                mov byte [rax + 0x29], 2	      2873	fold.c	FUNCTION_61
0x4005099	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2877	fold.c	FUNCTION_61
0x400509d	        0x4883c010	                           add rax, 0x10	      2877	fold.c	FUNCTION_61
0x40050a1	        0x488945e8	             mov qword [rbp - 0x18], rax	      2877	fold.c	FUNCTION_61
0x40050a5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2878	fold.c	FUNCTION_61
0x40050a9	        0x4883c030	                           add rax, 0x30	      2878	fold.c	FUNCTION_61
0x40050ad	        0x4883c010	                           add rax, 0x10	      2878	fold.c	FUNCTION_61
0x40050b1	        0x488945f0	             mov qword [rbp - 0x10], rax	      2878	fold.c	FUNCTION_61
0x40050b5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050b9	        0x488d5001	                      lea rdx, [rax + 1]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050bd	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050c1	          0x488b00	                    mov rax, qword [rax]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050c4	          0x4889d1	                            mov rcx, rdx	      2879	fold.c	FUNCTION_61	CALL_2
0x40050c7	          0x4829c1	                            sub rcx, rax	      2879	fold.c	FUNCTION_61	CALL_2
0x40050ca	        0x488d55d8	                   lea rdx, [rbp - 0x28]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050ce	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2879	fold.c	FUNCTION_61	CALL_2
0x40050d2	          0x4889ce	                            mov rsi, rcx	      2879	fold.c	FUNCTION_61	CALL_2
0x40050d5	          0x4889c7	                            mov rdi, rax	      2879	fold.c	FUNCTION_61	CALL_2
0x40050d8	      0xe808cbffff	                       call sym.foldFind	      2879	fold.c	FUNCTION_61	CALL_2
0x40050dd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2880	fold.c	FUNCTION_61
0x40050e1	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2880	fold.c	FUNCTION_61
0x40050e5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2880	fold.c	FUNCTION_61
0x40050e9	            0x8b00	                    mov eax, dword [rax]	      2880	fold.c	FUNCTION_61
0x40050eb	          0x4863d0	                         movsxd rdx, eax	      2880	fold.c	FUNCTION_61
0x40050ee	          0x4889d0	                            mov rax, rdx	      2880	fold.c	FUNCTION_61
0x40050f1	          0x4801c0	                            add rax, rax	      2880	fold.c	FUNCTION_61
0x40050f4	          0x4801d0	                            add rax, rdx	      2880	fold.c	FUNCTION_61
0x40050f7	        0x48c1e004	                              shl rax, 4	      2880	fold.c	FUNCTION_61
0x40050fb	          0x4801c8	                            add rax, rcx	      2880	fold.c	FUNCTION_61
0x40050fe	          0x4889c2	                            mov rdx, rax	      2880	fold.c	FUNCTION_61
0x4005101	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      2880	fold.c	FUNCTION_61
0x4005105	          0x4829c2	                            sub rdx, rax	      2880	fold.c	FUNCTION_61
0x4005108	          0x4889d0	                            mov rax, rdx	      2880	fold.c	FUNCTION_61
0x400510b	        0x48c1f804	                              sar rax, 4	      2880	fold.c	FUNCTION_61
0x400510f	          0x4889c2	                            mov rdx, rax	      2880	fold.c	FUNCTION_61
0x4005112	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2880	fold.c	FUNCTION_61
0x400511c	        0x480fafc2	                           imul rax, rdx	      2880	fold.c	FUNCTION_61
0x4005120	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2880	fold.c	FUNCTION_61
0x4005123	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005127	     0xf8e16010000	                           jle 0x4005243	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x400512d	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005130	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005134	            0x89d6	                            mov esi, edx	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005136	          0x4889c7	                            mov rdi, rax	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005139	      0xe800000000	                          call 0x400513e	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x400513e	          0x83f801	                              cmp eax, 1	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005141	     0xf85fc000000	                           jne 0x4005243	      2881	fold.c	FUNCTION_61	IF_2	CALL_3
0x4005147	    0xc745d0000000	               mov dword [rbp - 0x30], 0	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x400514e	      0xe9ca000000	                           jmp 0x400521d	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005153	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005157	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400515b	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400515e	          0x4863d0	                         movsxd rdx, eax	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005161	          0x4889d0	                            mov rax, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005164	          0x4801c0	                            add rax, rax	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005167	          0x4801d0	                            add rax, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400516a	        0x48c1e004	                              shl rax, 4	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400516e	          0x4801c8	                            add rax, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005171	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005175	          0x8b55d0	             mov edx, dword [rbp - 0x30]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005178	          0x4863ca	                         movsxd rcx, edx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400517b	          0x4889ca	                            mov rdx, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400517e	          0x4801d2	                            add rdx, rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005181	          0x4801ca	                            add rdx, rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005184	        0x48c1e204	                              shl rdx, 4	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005188	          0x4801f2	                            add rdx, rsi	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400518b	          0x488b0a	                    mov rcx, qword [rdx]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400518e	          0x488908	                    mov qword [rax], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005191	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005195	        0x48894808	                mov qword [rax + 8], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005199	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x400519d	        0x48894810	             mov qword [rax + 0x10], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051a1	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051a5	        0x48894818	             mov qword [rax + 0x18], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051a9	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051ad	        0x48894820	             mov qword [rax + 0x20], rcx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051b1	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051b5	        0x48895028	             mov qword [rax + 0x28], rdx	      2885	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051b9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051bd	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051c1	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051c4	          0x4863d0	                         movsxd rdx, eax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051c7	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051ca	          0x4801c0	                            add rax, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051cd	          0x4801d0	                            add rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051d0	        0x48c1e004	                              shl rax, 4	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051d4	          0x4801c1	                            add rcx, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051d7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051db	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      2886	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051df	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051e2	          0x4863d0	                         movsxd rdx, eax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051e5	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051e8	          0x4801c0	                            add rax, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051eb	          0x4801d0	                            add rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051ee	        0x48c1e004	                              shl rax, 4	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051f2	          0x4801f0	                            add rax, rsi	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051f5	          0x488b10	                    mov rdx, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051f8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x40051fc	        0x4883c030	                           add rax, 0x30	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005200	          0x488b30	                    mov rsi, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005203	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005207	          0x488b00	                    mov rax, qword [rax]	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x400520a	          0x4829c6	                            sub rsi, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x400520d	          0x4889f0	                            mov rax, rsi	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005210	          0x4829c2	                            sub rdx, rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005213	          0x4889d0	                            mov rax, rdx	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005216	          0x488901	                    mov qword [rcx], rax	      2887	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005219	        0x8345d001	               add dword [rbp - 0x30], 1	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x400521d	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005220	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005223	     0xf8c2affffff	                            jl 0x4005153	      2883	fold.c	FUNCTION_61	IF_2	FOR_1
0x4005229	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2889	fold.c	FUNCTION_61	IF_2
0x400522d	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      2889	fold.c	FUNCTION_61	IF_2
0x4005230	            0x8910	                    mov dword [rax], edx	      2889	fold.c	FUNCTION_61	IF_2
0x4005232	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2890	fold.c	FUNCTION_61	IF_2
0x4005236	            0x8b00	                    mov eax, dword [rax]	      2890	fold.c	FUNCTION_61	IF_2
0x4005238	          0x2b45d4	             sub eax, dword [rbp - 0x2c]	      2890	fold.c	FUNCTION_61	IF_2
0x400523b	            0x89c2	                            mov edx, eax	      2890	fold.c	FUNCTION_61	IF_2
0x400523d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2890	fold.c	FUNCTION_61	IF_2
0x4005241	            0x8910	                    mov dword [rax], edx	      2890	fold.c	FUNCTION_61	IF_2
0x4005243	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2892	fold.c	FUNCTION_61
0x4005247	          0x488b00	                    mov rax, qword [rax]	      2892	fold.c	FUNCTION_61
0x400524a	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2892	fold.c	FUNCTION_61
0x400524e	          0x4829c2	                            sub rdx, rax	      2892	fold.c	FUNCTION_61
0x4005251	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2892	fold.c	FUNCTION_61
0x4005255	        0x48895008	                mov qword [rax + 8], rdx	      2892	fold.c	FUNCTION_61
0x4005259	    0xc70500000000	               mov dword [0x04005263], 1	      2893	fold.c	FUNCTION_61
0x4005263	            0xeb01	                           jmp 0x4005266	      2893	fold.c	FUNCTION_61
0x4005265	              0x90	                                     nop	      2867	fold.c	FUNCTION_61	IF_1
0x4005266	        0x488b45f8	                mov rax, qword [rbp - 8]	      2894	fold.c	FUNCTION_61
0x400526a	    0x644833042528	                xor rax, qword fs:[0x28]	      2894	fold.c	FUNCTION_61
0x4005273	            0x7405	                            je 0x400527a	      2894	fold.c	FUNCTION_61
0x4005275	      0xe800000000	                          call 0x400527a	      2894	fold.c	FUNCTION_61
0x400527a	              0xc9	                                   leave	      2894	fold.c	FUNCTION_61
0x400527b	              0xc3	                                     ret	      2894	fold.c	FUNCTION_61
setSmallMaybe	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,0:CALL,0	26
0x4002c04	              0x55	                                push rbp	      1718	fold.c	FUNCTION_51
0x4002c05	          0x4889e5	                            mov rbp, rsp	      1718	fold.c	FUNCTION_51
0x4002c08	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1718	fold.c	FUNCTION_51
0x4002c0c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1722	fold.c	FUNCTION_51
0x4002c10	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1722	fold.c	FUNCTION_51
0x4002c14	        0x488945f8	                mov qword [rbp - 8], rax	      1722	fold.c	FUNCTION_51
0x4002c18	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c1f	            0xeb25	                           jmp 0x4002c46	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c21	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c24	          0x4863d0	                         movsxd rdx, eax	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c27	          0x4889d0	                            mov rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c2a	          0x4801c0	                            add rax, rax	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c2d	          0x4801d0	                            add rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c30	        0x48c1e004	                              shl rax, 4	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c34	          0x4889c2	                            mov rdx, rax	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c37	        0x488b45f8	                mov rax, qword [rbp - 8]	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c3b	          0x4801d0	                            add rax, rdx	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c3e	        0xc6402902	                mov byte [rax + 0x29], 2	      1724	fold.c	FUNCTION_51	FOR_1
0x4002c42	        0x8345f401	                add dword [rbp - 0xc], 1	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c46	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c4a	            0x8b00	                    mov eax, dword [rax]	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c4c	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c4f	            0x7fd0	                            jg 0x4002c21	      1723	fold.c	FUNCTION_51	FOR_1
0x4002c51	              0x90	                                     nop	      1725	fold.c	FUNCTION_51
0x4002c52	              0x5d	                                 pop rbp	      1725	fold.c	FUNCTION_51
0x4002c53	              0xc3	                                     ret	      1725	fold.c	FUNCTION_51
foldAdjustCursor	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x4001abd	              0x55	                                push rbp	      1073	fold.c	FUNCTION_34
0x4001abe	          0x4889e5	                            mov rbp, rsp	      1073	fold.c	FUNCTION_34
0x4001ac1	    0x488b05000000	            mov rax, qword [0x04001ac8] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4001ac8	        0x488d4838	                   lea rcx, [rax + 0x38]	      1074	fold.c	FUNCTION_34	CALL_1
0x4001acc	    0x488b05000000	            mov rax, qword [0x04001ad3] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4001ad3	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1074	fold.c	FUNCTION_34	CALL_1
0x4001ad7	      0xba00000000	                              mov edx, 0	      1074	fold.c	FUNCTION_34	CALL_1
0x4001adc	          0x4889ce	                            mov rsi, rcx	      1074	fold.c	FUNCTION_34	CALL_1
0x4001adf	          0x4889c7	                            mov rdi, rax	      1074	fold.c	FUNCTION_34	CALL_1
0x4001ae2	      0xe800000000	                          call 0x4001ae7	      1074	fold.c	FUNCTION_34	CALL_1
0x4001ae7	              0x90	                                     nop	      1075	fold.c	FUNCTION_34
0x4001ae8	              0x5d	                                 pop rbp	      1075	fold.c	FUNCTION_34
0x4001ae9	              0xc3	                                     ret	      1075	fold.c	FUNCTION_34
foldFind	functions,0:DO,0:ELSE,2:FOR,0:SWITCH,0:WHILE,1:IF,2:CALL,0	97
0x4001be5	              0x55	                                push rbp	      1120	fold.c	FUNCTION_36
0x4001be6	          0x4889e5	                            mov rbp, rsp	      1120	fold.c	FUNCTION_36
0x4001be9	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1120	fold.c	FUNCTION_36
0x4001bed	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1120	fold.c	FUNCTION_36
0x4001bf1	        0x488955c8	             mov qword [rbp - 0x38], rdx	      1120	fold.c	FUNCTION_36
0x4001bf5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1130	fold.c	FUNCTION_36
0x4001bf9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1130	fold.c	FUNCTION_36
0x4001bfd	        0x488945f8	                mov qword [rbp - 8], rax	      1130	fold.c	FUNCTION_36
0x4001c01	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1131	fold.c	FUNCTION_36
0x4001c09	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1132	fold.c	FUNCTION_36
0x4001c0d	            0x8b00	                    mov eax, dword [rax]	      1132	fold.c	FUNCTION_36
0x4001c0f	          0x83e801	                              sub eax, 1	      1132	fold.c	FUNCTION_36
0x4001c12	            0x4898	                                    cdqe	      1132	fold.c	FUNCTION_36
0x4001c14	        0x488945f0	             mov qword [rbp - 0x10], rax	      1132	fold.c	FUNCTION_36
0x4001c18	      0xe9d5000000	                           jmp 0x4001cf2	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001c1d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c21	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c25	          0x4801d0	                            add rax, rdx	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c28	          0x4889c2	                            mov rdx, rax	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c2b	        0x48c1ea3f	                           shr rdx, 0x3f	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c2f	          0x4801d0	                            add rax, rdx	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c32	          0x48d1f8	                              sar rax, 1	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c35	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1135	fold.c	FUNCTION_36	WHILE_1
0x4001c38	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c3b	          0x4863d0	                         movsxd rdx, eax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c3e	          0x4889d0	                            mov rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c41	          0x4801c0	                            add rax, rax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c44	          0x4801d0	                            add rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c47	        0x48c1e004	                              shl rax, 4	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c4b	          0x4889c2	                            mov rdx, rax	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c4e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c52	          0x4801d0	                            add rax, rdx	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c55	          0x488b00	                    mov rax, qword [rax]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c58	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c5c	            0x7e11	                           jle 0x4001c6f	      1136	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c5e	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c61	          0x83e801	                              sub eax, 1	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c64	            0x4898	                                    cdqe	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c66	        0x488945f0	             mov qword [rbp - 0x10], rax	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c6a	      0xe983000000	                           jmp 0x4001cf2	      1138	fold.c	FUNCTION_36	WHILE_1	IF_1
0x4001c6f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c72	          0x4863d0	                         movsxd rdx, eax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c75	          0x4889d0	                            mov rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c78	          0x4801c0	                            add rax, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c7b	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c7e	        0x48c1e004	                              shl rax, 4	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c82	          0x4889c2	                            mov rdx, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c85	        0x488b45f8	                mov rax, qword [rbp - 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c89	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c8c	          0x488b08	                    mov rcx, qword [rax]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c8f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c92	          0x4863d0	                         movsxd rdx, eax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c95	          0x4889d0	                            mov rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c98	          0x4801c0	                            add rax, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c9b	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001c9e	        0x48c1e004	                              shl rax, 4	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001ca2	          0x4889c2	                            mov rdx, rax	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001ca5	        0x488b45f8	                mov rax, qword [rbp - 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001ca9	          0x4801d0	                            add rax, rdx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cac	        0x488b4008	                mov rax, qword [rax + 8]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cb0	          0x4801c8	                            add rax, rcx	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cb3	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cb7	            0x7f0e	                            jg 0x4001cc7	      1139	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cb9	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cbc	          0x83c001	                              add eax, 1	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cbf	            0x4898	                                    cdqe	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cc1	        0x488945e8	             mov qword [rbp - 0x18], rax	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cc5	            0xeb2b	                           jmp 0x4001cf2	      1141	fold.c	FUNCTION_36	WHILE_1	ELSE_1	IF_2
0x4001cc7	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cca	          0x4863d0	                         movsxd rdx, eax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001ccd	          0x4889d0	                            mov rax, rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cd0	          0x4801c0	                            add rax, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cd3	          0x4801d0	                            add rax, rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cd6	        0x48c1e004	                              shl rax, 4	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cda	          0x4889c2	                            mov rdx, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cdd	        0x488b45f8	                mov rax, qword [rbp - 8]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001ce1	          0x4801c2	                            add rdx, rax	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001ce4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001ce8	          0x488910	                    mov qword [rax], rdx	      1145	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001ceb	      0xb801000000	                              mov eax, 1	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cf0	            0xeb35	                           jmp 0x4001d27	      1146	fold.c	FUNCTION_36	WHILE_1	ELSE_2
0x4001cf2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001cf6	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001cfa	     0xf8e1dffffff	                           jle 0x4001c1d	      1133	fold.c	FUNCTION_36	WHILE_1
0x4001d00	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1149	fold.c	FUNCTION_36
0x4001d04	          0x4889d0	                            mov rax, rdx	      1149	fold.c	FUNCTION_36
0x4001d07	          0x4801c0	                            add rax, rax	      1149	fold.c	FUNCTION_36
0x4001d0a	          0x4801d0	                            add rax, rdx	      1149	fold.c	FUNCTION_36
0x4001d0d	        0x48c1e004	                              shl rax, 4	      1149	fold.c	FUNCTION_36
0x4001d11	          0x4889c2	                            mov rdx, rax	      1149	fold.c	FUNCTION_36
0x4001d14	        0x488b45f8	                mov rax, qword [rbp - 8]	      1149	fold.c	FUNCTION_36
0x4001d18	          0x4801c2	                            add rdx, rax	      1149	fold.c	FUNCTION_36
0x4001d1b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1149	fold.c	FUNCTION_36
0x4001d1f	          0x488910	                    mov qword [rax], rdx	      1149	fold.c	FUNCTION_36
0x4001d22	      0xb800000000	                              mov eax, 0	      1150	fold.c	FUNCTION_36
0x4001d27	              0x5d	                                 pop rbp	      1151	fold.c	FUNCTION_36
0x4001d28	              0xc3	                                     ret	      1151	fold.c	FUNCTION_36
foldInitWin	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x400181c	              0x55	                                push rbp	      1001	fold.c	ELSE_5	FUNCTION_31
0x400181d	          0x4889e5	                            mov rbp, rsp	      1001	fold.c	ELSE_5	FUNCTION_31
0x4001820	        0x4883ec10	                           sub rsp, 0x10	      1001	fold.c	ELSE_5	FUNCTION_31
0x4001824	        0x48897df8	                mov qword [rbp - 8], rdi	      1001	fold.c	ELSE_5	FUNCTION_31
0x4001828	        0x488b45f8	                mov rax, qword [rbp - 8]	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x400182c	    0x480508010000	                          add rax, 0x108	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4001832	      0xba0a000000	                            mov edx, 0xa	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4001837	      0xbe30000000	                           mov esi, 0x30	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x400183c	          0x4889c7	                            mov rdi, rax	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x400183f	      0xe800000000	                          call 0x4001844	      1002	fold.c	ELSE_5	FUNCTION_31	CALL_1
0x4001844	              0x90	                                     nop	      1003	fold.c	ELSE_5	FUNCTION_31
0x4001845	              0xc9	                                   leave	      1003	fold.c	ELSE_5	FUNCTION_31
0x4001846	              0xc3	                                     ret	      1003	fold.c	ELSE_5	FUNCTION_31
setFoldRepeat	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,3	48
0x4001df6	              0x55	                                push rbp	      1201	fold.c	FUNCTION_39
0x4001df7	          0x4889e5	                            mov rbp, rsp	      1201	fold.c	FUNCTION_39
0x4001dfa	        0x4883ec40	                           sub rsp, 0x40	      1201	fold.c	FUNCTION_39
0x4001dfe	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1201	fold.c	FUNCTION_39
0x4001e02	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1201	fold.c	FUNCTION_39
0x4001e06	          0x8955cc	             mov dword [rbp - 0x34], edx	      1201	fold.c	FUNCTION_39
0x4001e09	    0x64488b042528	                mov rax, qword fs:[0x28]	      1201	fold.c	FUNCTION_39
0x4001e12	        0x488945f8	                mov qword [rbp - 8], rax	      1201	fold.c	FUNCTION_39
0x4001e16	            0x31c0	                            xor eax, eax	      1201	fold.c	FUNCTION_39
0x4001e18	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e20	            0xeb5b	                           jmp 0x4001e7d	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e22	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1207	fold.c	FUNCTION_39	FOR_1
0x4001e29	        0x488d55ec	                   lea rdx, [rbp - 0x14]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e2d	          0x8b75cc	             mov esi, dword [rbp - 0x34]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e30	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e34	          0x4889d1	                            mov rcx, rdx	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e37	      0xba00000000	                              mov edx, 0	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e3c	          0x4889c7	                            mov rdi, rax	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e3f	      0xe85d000000	                  call sym.setManualFold	      1208	fold.c	FUNCTION_39	FOR_1	CALL_1
0x4001e44	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e47	          0x83e001	                              and eax, 1	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e4a	            0x85c0	                           test eax, eax	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e4c	            0x752a	                           jne 0x4001e78	      1209	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e4e	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e53	            0x7534	                           jne 0x4001e89	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e55	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e58	          0x83e002	                              and eax, 2	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e5b	            0x85c0	                           test eax, eax	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e5d	            0x752a	                           jne 0x4001e89	      1212	fold.c	FUNCTION_39	FOR_1	IF_1	IF_2
0x4001e5f	    0x488b05000000	            mov rax, qword [0x04001e66] 	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4001e66	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4001e69	      0xe800000000	                          call 0x4001e6e	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4001e6e	          0x4889c7	                            mov rdi, rax	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4001e71	      0xe800000000	                          call 0x4001e76	      1213	fold.c	FUNCTION_39	FOR_1	IF_1	CALL_3
0x4001e76	            0xeb11	                           jmp 0x4001e89	      1214	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e78	      0x488345f001	               add qword [rbp - 0x10], 1	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e7d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e81	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e85	            0x7c9b	                            jl 0x4001e22	      1205	fold.c	FUNCTION_39	FOR_1
0x4001e87	            0xeb01	                           jmp 0x4001e8a	      1217	fold.c	FUNCTION_39
0x4001e89	              0x90	                                     nop	      1214	fold.c	FUNCTION_39	FOR_1	IF_1
0x4001e8a	              0x90	                                     nop	      1217	fold.c	FUNCTION_39
0x4001e8b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1217	fold.c	FUNCTION_39
0x4001e8f	    0x644833042528	                xor rax, qword fs:[0x28]	      1217	fold.c	FUNCTION_39
0x4001e98	            0x7405	                            je 0x4001e9f	      1217	fold.c	FUNCTION_39
0x4001e9a	      0xe800000000	                          call 0x4001e9f	      1217	fold.c	FUNCTION_39
0x4001e9f	              0xc9	                                   leave	      1217	fold.c	FUNCTION_39
0x4001ea0	              0xc3	                                     ret	      1217	fold.c	FUNCTION_39
foldUpdateIEMS	functions,0:DO,0:ELSE,9:FOR,1:SWITCH,0:WHILE,2:IF,29:CALL,19	394
0x4003912	              0x55	                                push rbp	      2119	fold.c	FUNCTION_58
0x4003913	          0x4889e5	                            mov rbp, rsp	      2119	fold.c	FUNCTION_58
0x4003916	    0x4881ecb00000	                           sub rsp, 0xb0	      2119	fold.c	FUNCTION_58
0x400391d	    0x4889bd68ffff	             mov qword [rbp - 0x98], rdi	      2119	fold.c	FUNCTION_58
0x4003924	    0x4889b560ffff	             mov qword [rbp - 0xa0], rsi	      2119	fold.c	FUNCTION_58
0x400392b	    0x48899558ffff	             mov qword [rbp - 0xa8], rdx	      2119	fold.c	FUNCTION_58
0x4003932	    0x64488b042528	                mov rax, qword fs:[0x28]	      2119	fold.c	FUNCTION_58
0x400393b	        0x488945f8	                mov qword [rbp - 8], rax	      2119	fold.c	FUNCTION_58
0x400393f	            0x31c0	                            xor eax, eax	      2119	fold.c	FUNCTION_58
0x4003941	    0x488b05000000	            mov rax, qword [0x04003948] 	      2128	fold.c	FUNCTION_58	IF_1
0x4003948	          0x4885c0	                           test rax, rax	      2128	fold.c	FUNCTION_58	IF_1
0x400394b	     0xf856d060000	                           jne 0x4003fbe	      2128	fold.c	FUNCTION_58	IF_1
0x4003951	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2131	fold.c	FUNCTION_58	IF_2
0x4003958	     0xfb680210100	          movzx eax, byte [rax + 0x121] 	      2131	fold.c	FUNCTION_58	IF_2
0x400395f	            0x84c0	                             test al, al	      2131	fold.c	FUNCTION_58	IF_2
0x4003961	            0x7443	                            je 0x40039a6	      2131	fold.c	FUNCTION_58	IF_2
0x4003963	    0x48c78560ffff	               mov qword [rbp - 0xa0], 1	      2134	fold.c	FUNCTION_58	IF_2
0x400396e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2135	fold.c	FUNCTION_58	IF_2
0x4003975	        0x488b4008	                mov rax, qword [rax + 8]	      2135	fold.c	FUNCTION_58	IF_2
0x4003979	          0x488b00	                    mov rax, qword [rax]	      2135	fold.c	FUNCTION_58	IF_2
0x400397c	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2135	fold.c	FUNCTION_58	IF_2
0x4003983	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2136	fold.c	FUNCTION_58	IF_2
0x400398a	    0xc68021010000	               mov byte [rax + 0x121], 0	      2136	fold.c	FUNCTION_58	IF_2
0x4003991	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x4003998	    0x480508010000	                          add rax, 0x108	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x400399e	          0x4889c7	                            mov rdi, rax	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x40039a1	      0xe85ef2ffff	                  call sym.setSmallMaybe	      2139	fold.c	FUNCTION_58	IF_2	CALL_1
0x40039a6	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x40039ad	          0x4889c7	                            mov rdi, rax	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x40039b0	      0xe800000000	                          call 0x40039b5	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x40039b5	            0x85c0	                           test eax, eax	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x40039b7	            0x743c	                            je 0x40039f5	      2144	fold.c	FUNCTION_58	IF_3	CALL_2
0x40039b9	    0x8b0500000000	            mov eax, dword [0x040039bf] 	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x40039bf	            0x4898	                                    cdqe	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x40039c1	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x40039c8	            0x7d11	                           jge 0x40039db	      2146	fold.c	FUNCTION_58	IF_3	IF_4
0x40039ca	    0x8b0500000000	            mov eax, dword [0x040039d0] 	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x40039d0	            0x4898	                                    cdqe	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x40039d2	    0x48298560ffff	             sub qword [rbp - 0xa0], rax	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x40039d9	            0xeb0b	                           jmp 0x40039e6	      2147	fold.c	FUNCTION_58	IF_3	IF_4
0x40039db	    0x48c78560ffff	               mov qword [rbp - 0xa0], 1	      2149	fold.c	FUNCTION_58	IF_3	ELSE_1
0x40039e6	    0x8b0500000000	            mov eax, dword [0x040039ec] 	      2150	fold.c	FUNCTION_58	IF_3
0x40039ec	            0x4898	                                    cdqe	      2150	fold.c	FUNCTION_58	IF_3
0x40039ee	    0x48018558ffff	            add qword [rbp - 0xa8], rax 	      2150	fold.c	FUNCTION_58	IF_3
0x40039f5	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2156	fold.c	FUNCTION_58	IF_5
0x40039fc	        0x488b4008	                mov rax, qword [rax + 8]	      2156	fold.c	FUNCTION_58	IF_5
0x4003a00	          0x488b00	                    mov rax, qword [rax]	      2156	fold.c	FUNCTION_58	IF_5
0x4003a03	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2156	fold.c	FUNCTION_58	IF_5
0x4003a0a	            0x7d15	                           jge 0x4003a21	      2156	fold.c	FUNCTION_58	IF_5
0x4003a0c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2157	fold.c	FUNCTION_58	IF_5
0x4003a13	        0x488b4008	                mov rax, qword [rax + 8]	      2157	fold.c	FUNCTION_58	IF_5
0x4003a17	          0x488b00	                    mov rax, qword [rax]	      2157	fold.c	FUNCTION_58	IF_5
0x4003a1a	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	      2157	fold.c	FUNCTION_58	IF_5
0x4003a21	    0xc70500000000	               mov dword [0x04003a2b], 0	      2159	fold.c	FUNCTION_58
0x4003a2b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2160	fold.c	FUNCTION_58
0x4003a32	        0x488945c0	             mov qword [rbp - 0x40], rax	      2160	fold.c	FUNCTION_58
0x4003a36	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      2161	fold.c	FUNCTION_58
0x4003a3e	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      2162	fold.c	FUNCTION_58
0x4003a45	    0xc745e4ffffff	     mov dword [rbp - 0x1c], 0xffffffff 	      2163	fold.c	FUNCTION_58
0x4003a4c	    0xc745e8000000	               mov dword [rbp - 0x18], 0	      2164	fold.c	FUNCTION_58
0x4003a53	    0xc745ec150000	           mov dword [rbp - 0x14], 0x15 	      2165	fold.c	FUNCTION_58
0x4003a5a	    0xc745f0150000	           mov dword [rbp - 0x10], 0x15 	      2166	fold.c	FUNCTION_58
0x4003a61	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2168	fold.c	FUNCTION_58
0x4003a68	    0x488905000000	            mov qword [0x04003a6f], rax 	      2168	fold.c	FUNCTION_58
0x4003a6f	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2169	fold.c	FUNCTION_58
0x4003a76	    0x488905000000	            mov qword [0x04003a7d], rax 	      2169	fold.c	FUNCTION_58
0x4003a7d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x4003a84	          0x4889c7	                            mov rdi, rax	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x4003a87	      0xe800000000	                          call 0x4003a8c	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x4003a8c	            0x85c0	                           test eax, eax	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x4003a8e	     0xf84ac000000	                            je 0x4003b40	      2171	fold.c	FUNCTION_58	IF_6	CALL_3
0x4003a94	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2173	fold.c	FUNCTION_58	IF_6
0x4003a9c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x4003aa3	          0x4889c7	                            mov rdi, rax	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x4003aa6	      0xe819270000	                    call sym.parseMarker	      2176	fold.c	FUNCTION_58	IF_6	CALL_4
0x4003aab	    0x4883bd60ffff	               cmp qword [rbp - 0xa0], 1	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x4003ab3	            0x7e6e	                           jle 0x4003b23	      2180	fold.c	FUNCTION_58	IF_6	IF_7
0x4003ab5	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003abc	        0x488d50ff	                      lea rdx, [rax - 1]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003ac0	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003ac7	          0x4889d6	                            mov rsi, rdx	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003aca	          0x4889c7	                            mov rdi, rax	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003acd	      0xe857e2ffff	                   call sym.foldLevelWin	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003ad2	    0x89857cffffff	             mov dword [rbp - 0x84], eax	      2183	fold.c	FUNCTION_58	IF_6	IF_7	CALL_5
0x4003ad8	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x4003adf	        0x4883e801	                              sub rax, 1	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x4003ae3	        0x488945c8	             mov qword [rbp - 0x38], rax	      2186	fold.c	FUNCTION_58	IF_6	IF_7
0x4003ae7	    0x8b857cffffff	             mov eax, dword [rbp - 0x84]	      2187	fold.c	FUNCTION_58	IF_6	IF_7
0x4003aed	          0x8945e0	             mov dword [rbp - 0x20], eax	      2187	fold.c	FUNCTION_58	IF_6	IF_7
0x4003af0	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4003af4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4003af8	          0x4889d7	                            mov rdi, rdx	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4003afb	            0xffd0	                                call rax	      2188	fold.c	FUNCTION_58	IF_6	IF_7	CALL_6
0x4003afd	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b00	    0x3b857cffffff	             cmp eax, dword [rbp - 0x84]	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b06	            0x7e15	                           jle 0x4003b1d	      2193	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b08	          0x8b55e0	             mov edx, dword [rbp - 0x20]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b0b	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b0e	            0x29c2	                            sub edx, eax	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b10	    0x8b857cffffff	             mov eax, dword [rbp - 0x84]	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b16	            0x29d0	                            sub eax, edx	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b18	          0x8945e0	             mov dword [rbp - 0x20], eax	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b1b	            0xeb06	                           jmp 0x4003b23	      2194	fold.c	FUNCTION_58	IF_6	IF_7	IF_8
0x4003b1d	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x4003b20	          0x8945e0	             mov dword [rbp - 0x20], eax	      2196	fold.c	FUNCTION_58	IF_6	IF_7	ELSE_2
0x4003b23	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2198	fold.c	FUNCTION_58	IF_6
0x4003b2a	        0x488945c8	             mov qword [rbp - 0x38], rax	      2198	fold.c	FUNCTION_58	IF_6
0x4003b2e	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4003b32	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4003b36	          0x4889d7	                            mov rdi, rdx	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4003b39	            0xffd0	                                call rax	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4003b3b	      0xe9bd000000	                           jmp 0x4003bfd	      2199	fold.c	FUNCTION_58	IF_6	CALL_7
0x4003b40	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      2203	fold.c	FUNCTION_58	ELSE_3
0x4003b47	        0x488945c8	             mov qword [rbp - 0x38], rax	      2203	fold.c	FUNCTION_58	ELSE_3
0x4003b4b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4003b52	          0x4889c7	                            mov rdi, rax	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4003b55	      0xe800000000	                          call 0x4003b5a	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4003b5a	            0x85c0	                           test eax, eax	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4003b5c	            0x7420	                            je 0x4003b7e	      2204	fold.c	FUNCTION_58	ELSE_3	IF_9	CALL_8
0x4003b5e	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2206	fold.c	FUNCTION_58	ELSE_3	IF_9
0x4003b66	    0x4883bd60ffff	               cmp qword [rbp - 0xa0], 1	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b6e	            0x7e50	                           jle 0x4003bc0	      2209	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b70	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b74	        0x4883e801	                              sub rax, 1	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b78	        0x488945c8	             mov qword [rbp - 0x38], rax	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b7c	            0xeb42	                           jmp 0x4003bc0	      2210	fold.c	FUNCTION_58	ELSE_3	IF_9	IF_10
0x4003b7e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4003b85	          0x4889c7	                            mov rdi, rax	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4003b88	      0xe800000000	                          call 0x4003b8d	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4003b8d	            0x85c0	                           test eax, eax	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4003b8f	            0x740a	                            je 0x4003b9b	      2212	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11	CALL_9
0x4003b91	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2213	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11
0x4003b99	            0xeb25	                           jmp 0x4003bc0	      2213	fold.c	FUNCTION_58	ELSE_3	ELSE_4	IF_11
0x4003b9b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x4003ba2	          0x4889c7	                            mov rdi, rax	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x4003ba5	      0xe800000000	                          call 0x4003baa	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x4003baa	            0x85c0	                           test eax, eax	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x4003bac	            0x740a	                            je 0x4003bb8	      2215	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12	CALL_10
0x4003bae	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2216	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12
0x4003bb6	            0xeb08	                           jmp 0x4003bc0	      2216	fold.c	FUNCTION_58	ELSE_3	ELSE_5	IF_12
0x4003bb8	    0x48c745980000	               mov qword [rbp - 0x68], 0	      2219	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4003bc0	    0xc745e0ffffff	     mov dword [rbp - 0x20], 0xffffffff 	      2223	fold.c	FUNCTION_58	ELSE_3	ELSE_6
0x4003bc7	            0xeb27	                           jmp 0x4003bf0	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bc9	    0xc745e4ffffff	     mov dword [rbp - 0x1c], 0xffffffff 	      2228	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bd0	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x4003bd4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x4003bd8	          0x4889d7	                            mov rdi, rdx	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x4003bdb	            0xffd0	                                call rax	      2229	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	CALL_11
0x4003bdd	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x4003be0	            0x85c0	                           test eax, eax	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x4003be2	            0x7918	                           jns 0x4003bfc	      2230	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x4003be4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003be8	        0x4883e801	                              sub rax, 1	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bec	        0x488945c8	             mov qword [rbp - 0x38], rax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bf0	    0x8b0500000000	            mov eax, dword [0x04003bf6] 	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bf6	            0x85c0	                           test eax, eax	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bf8	            0x74cf	                            je 0x4003bc9	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bfa	            0xeb01	                           jmp 0x4003bfd	      2224	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1
0x4003bfc	              0x90	                                     nop	      2231	fold.c	FUNCTION_58	ELSE_3	ELSE_6	FOR_1	IF_13
0x4003bfd	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2242	fold.c	FUNCTION_58	IF_14
0x4003c05	     0xf85c6000000	                           jne 0x4003cd1	      2242	fold.c	FUNCTION_58	IF_14
0x4003c0b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2244	fold.c	FUNCTION_58	IF_14
0x4003c12	    0x480508010000	                          add rax, 0x108	      2244	fold.c	FUNCTION_58	IF_14
0x4003c18	        0x488945a0	             mov qword [rbp - 0x60], rax	      2244	fold.c	FUNCTION_58	IF_14
0x4003c1c	    0x48c745800000	               mov qword [rbp - 0x80], 0	      2245	fold.c	FUNCTION_58	IF_14
0x4003c24	    0xc78578ffffff	               mov dword [rbp - 0x88], 0	      2246	fold.c	FUNCTION_58	IF_14
0x4003c2e	    0x48c745a80000	               mov qword [rbp - 0x58], 0	      2247	fold.c	FUNCTION_58	IF_14
0x4003c36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2248	fold.c	FUNCTION_58	IF_14
0x4003c3a	        0x488945b0	             mov qword [rbp - 0x50], rax	      2248	fold.c	FUNCTION_58	IF_14
0x4003c3e	            0xeb44	                           jmp 0x4003c84	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c40	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c44	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c48	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c4c	          0x4889ce	                            mov rsi, rcx	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c4f	          0x4889c7	                            mov rdi, rax	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c52	      0xe88edfffff	                       call sym.foldFind	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c57	            0x85c0	                           test eax, eax	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c59	            0x7436	                            je 0x4003c91	      2252	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15	CALL_12
0x4003c5b	    0x838578ffffff	               add dword [rbp - 0x88], 1	      2254	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c62	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c66	          0x488b00	                    mov rax, qword [rax]	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c69	        0x480145a8	            add qword [rbp - 0x58], rax 	      2256	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c6d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c71	        0x4883c010	                           add rax, 0x10	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c75	        0x488945a0	             mov qword [rbp - 0x60], rax	      2257	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c79	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c7d	          0x488b00	                    mov rax, qword [rax]	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c80	        0x482945b0	             sub qword [rbp - 0x50], rax	      2258	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c84	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c87	    0x3b8578ffffff	             cmp eax, dword [rbp - 0x88]	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c8d	            0x7fb1	                            jg 0x4003c40	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c8f	            0xeb01	                           jmp 0x4003c92	      2250	fold.c	FUNCTION_58	IF_14	WHILE_1
0x4003c91	              0x90	                                     nop	      2253	fold.c	FUNCTION_58	IF_14	WHILE_1	IF_15
0x4003c92	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003c96	          0x4885c0	                           test rax, rax	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003c99	            0x7436	                            je 0x4003cd1	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003c9b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003c9e	    0x3b8578ffffff	             cmp eax, dword [rbp - 0x88]	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003ca4	            0x752b	                           jne 0x4003cd1	      2260	fold.c	FUNCTION_58	IF_14	IF_16
0x4003ca6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4003caa	        0x488b5008	                mov rdx, qword [rax + 8]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4003cae	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4003cb2	          0x4801d0	                            add rax, rdx	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4003cb5	        0x488945b8	             mov qword [rbp - 0x48], rax	      2262	fold.c	FUNCTION_58	IF_14	IF_16
0x4003cb9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x4003cbd	    0x483b8558ffff	             cmp rax, qword [rbp - 0xa8]	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x4003cc4	            0x7e0b	                           jle 0x4003cd1	      2264	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x4003cc6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2265	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x4003cca	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	      2265	fold.c	FUNCTION_58	IF_14	IF_16	IF_17
0x4003cd1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2269	fold.c	FUNCTION_58
0x4003cd5	        0x48894588	             mov qword [rbp - 0x78], rax	      2269	fold.c	FUNCTION_58
0x4003cd9	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      2270	fold.c	FUNCTION_58
0x4003ce0	        0x48894590	             mov qword [rbp - 0x70], rax	      2270	fold.c	FUNCTION_58
0x4003ce4	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2272	fold.c	FUNCTION_58	IF_18
0x4003ce8	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2272	fold.c	FUNCTION_58	IF_18
0x4003cec	     0xf8eeb010000	                           jle 0x4003edd	      2272	fold.c	FUNCTION_58	IF_18
0x4003cf2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2272	fold.c	FUNCTION_58	IF_18
0x4003cf9	        0x488b4008	                mov rax, qword [rax + 8]	      2272	fold.c	FUNCTION_58	IF_18
0x4003cfd	          0x488b00	                    mov rax, qword [rax]	      2272	fold.c	FUNCTION_58	IF_18
0x4003d00	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2272	fold.c	FUNCTION_58	IF_18
0x4003d04	     0xf8ed3010000	                           jle 0x4003edd	      2272	fold.c	FUNCTION_58	IF_18
0x4003d0a	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2273	fold.c	FUNCTION_58	IF_18
0x4003d0e	        0x48894590	             mov qword [rbp - 0x70], rax	      2273	fold.c	FUNCTION_58	IF_18
0x4003d12	      0xe9c6010000	                           jmp 0x4003edd	      2274	fold.c	FUNCTION_58	WHILE_2
0x4003d17	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d1b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d22	        0x488b4008	                mov rax, qword [rax + 8]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d26	          0x488b00	                    mov rax, qword [rax]	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d29	          0x4839c2	                            cmp rdx, rax	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d2c	     0xf8fbb010000	                            jg 0x4003eed	      2278	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003d32	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x4003d36	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x4003d3a	     0xf8efe000000	                           jle 0x4003e3e	      2280	fold.c	FUNCTION_58	WHILE_2	IF_20
0x4003d40	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2285	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d48	            0x7418	                            je 0x4003d62	      2285	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d4a	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2286	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d52	            0x740e	                            je 0x4003d62	      2286	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d54	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d5c	     0xf858e010000	                           jne 0x4003ef0	      2287	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003d62	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d66	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d6a	            0x7f41	                            jg 0x4003dad	      2289	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d6c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d73	    0x488d88080100	                  lea rcx, [rax + 0x108]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d7a	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d7e	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d82	          0x4889c6	                            mov rsi, rax	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d85	          0x4889cf	                            mov rdi, rcx	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d88	      0xe858deffff	                       call sym.foldFind	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d8d	            0x85c0	                           test eax, eax	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d8f	            0x741c	                            je 0x4003dad	      2290	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_13
0x4003d91	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d95	          0x488b10	                    mov rdx, qword [rax]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d98	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003d9c	        0x488b4008	                mov rax, qword [rax + 8]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003da0	          0x4801d0	                            add rax, rdx	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003da3	        0x4883e801	                              sub rax, 1	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003da7	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003dab	            0x7f3c	                            jg 0x4003de9	      2291	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003dad	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003db0	            0x85c0	                           test eax, eax	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003db2	            0x7551	                           jne 0x4003e05	      2292	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003db4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003db8	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dbf	    0x488d8a080100	                  lea rcx, [rdx + 0x108]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dc6	        0x488d5580	                   lea rdx, [rbp - 0x80]	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dca	          0x4889c6	                            mov rsi, rax	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dcd	          0x4889cf	                            mov rdi, rcx	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dd0	      0xe810deffff	                       call sym.foldFind	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dd5	            0x85c0	                           test eax, eax	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dd7	            0x742c	                            je 0x4003e05	      2293	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22	CALL_14
0x4003dd9	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003ddd	          0x488b10	                    mov rdx, qword [rax]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003de0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003de4	          0x4839c2	                            cmp rdx, rax	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003de7	            0x7d1c	                           jge 0x4003e05	      2294	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003de9	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003ded	          0x488b10	                    mov rdx, qword [rax]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003df0	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003df4	        0x488b4008	                mov rax, qword [rax + 8]	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003df8	          0x4801d0	                            add rax, rdx	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003dfb	        0x4883e801	                              sub rax, 1	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003dff	        0x48894590	             mov qword [rbp - 0x70], rax	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003e03	            0xeb39	                           jmp 0x4003e3e	      2295	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_22
0x4003e05	    0x48817d980000	               cmp qword [rbp - 0x68], 0	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4003e0d	     0xf85e1000000	                           jne 0x4003ef4	      2296	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4003e13	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e17	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e1e	          0x4889d6	                            mov rsi, rdx	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e21	          0x4889c7	                            mov rdi, rax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e24	      0xe800dfffff	                   call sym.foldLevelWin	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e29	            0x89c2	                            mov edx, eax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e2b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e2e	            0x39c2	                            cmp edx, eax	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e30	     0xf84be000000	                            je 0x4003ef4	      2297	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23	CALL_15
0x4003e36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2301	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4003e3a	        0x48894590	             mov qword [rbp - 0x70], rax	      2301	fold.c	FUNCTION_58	WHILE_2	IF_20	ELSE_7	IF_23
0x4003e3e	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e41	            0x85c0	                           test eax, eax	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e43	            0x7e62	                           jle 0x4003ea7	      2307	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e45	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e49	    0x488905000000	            mov qword [0x04003e50], rax 	      2309	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e50	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2310	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e54	    0x488905000000	            mov qword [0x04003e5b], rax 	      2310	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003e5b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e62	    0x488db8080100	                  lea rdi, [rax + 0x108]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e69	        0x488b7590	             mov rsi, qword [rbp - 0x70]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e6d	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e71	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e75	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e79	        0x4883ec08	                              sub rsp, 8	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e7d	            0x6a02	                                  push 2	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e7f	          0x4989f1	                             mov r9, rsi	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e82	          0x4989c8	                             mov r8, rcx	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e85	          0x4889d1	                            mov rcx, rdx	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e88	          0x4889c2	                            mov rdx, rax	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e8b	      0xbe01000000	                              mov esi, 1	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e90	      0xe840010000	          call sym.foldUpdateIEMSRecurse	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e95	        0x4883c410	                           add rsp, 0x10	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e99	        0x48894590	             mov qword [rbp - 0x70], rax	      2311	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24	CALL_16
0x4003e9d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003ea1	        0x48894588	             mov qword [rbp - 0x78], rax	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003ea5	            0xeb36	                           jmp 0x4003edd	      2313	fold.c	FUNCTION_58	WHILE_2	ELSE_8	IF_24
0x4003ea7	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003eab	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003eb2	        0x488b4008	                mov rax, qword [rax + 8]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003eb6	          0x488b00	                    mov rax, qword [rax]	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003eb9	          0x4839c2	                            cmp rdx, rax	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003ebc	            0x7435	                            je 0x4003ef3	      2317	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003ebe	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4003ec2	        0x4883c001	                              add rax, 1	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4003ec6	        0x488945c8	             mov qword [rbp - 0x38], rax	      2319	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4003eca	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4003ecd	          0x8945e0	             mov dword [rbp - 0x20], eax	      2320	fold.c	FUNCTION_58	WHILE_2	ELSE_9
0x4003ed0	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x4003ed4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x4003ed8	          0x4889d7	                            mov rdi, rdx	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x4003edb	            0xffd0	                                call rax	      2321	fold.c	FUNCTION_58	WHILE_2	ELSE_9	CALL_17
0x4003edd	    0x8b0500000000	            mov eax, dword [0x04003ee3] 	      2274	fold.c	FUNCTION_58	WHILE_2
0x4003ee3	            0x85c0	                           test eax, eax	      2274	fold.c	FUNCTION_58	WHILE_2
0x4003ee5	     0xf842cfeffff	                            je 0x4003d17	      2274	fold.c	FUNCTION_58	WHILE_2
0x4003eeb	            0xeb07	                           jmp 0x4003ef4	      2274	fold.c	FUNCTION_58	WHILE_2
0x4003eed	              0x90	                                     nop	      2279	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003eee	            0xeb04	                           jmp 0x4003ef4	      2279	fold.c	FUNCTION_58	WHILE_2	IF_19
0x4003ef0	              0x90	                                     nop	      2288	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003ef1	            0xeb01	                           jmp 0x4003ef4	      2288	fold.c	FUNCTION_58	WHILE_2	IF_20	IF_21
0x4003ef3	              0x90	                                     nop	      2318	fold.c	FUNCTION_58	WHILE_2	ELSE_9	IF_25
0x4003ef4	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2326	fold.c	FUNCTION_58	CALL_18
0x4003efb	    0x488d88080100	                  lea rcx, [rax + 0x108]	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f02	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f06	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f0a	          0x4889c6	                            mov rsi, rax	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f0d	          0x4889cf	                            mov rdi, rcx	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f10	      0xe867130000	                     call sym.foldRemove	      2326	fold.c	FUNCTION_58	CALL_18
0x4003f15	    0x8b0500000000	            mov eax, dword [0x04003f1b] 	      2329	fold.c	FUNCTION_58	IF_26
0x4003f1b	            0x85c0	                           test eax, eax	      2329	fold.c	FUNCTION_58	IF_26
0x4003f1d	            0x7420	                            je 0x4003f3f	      2329	fold.c	FUNCTION_58	IF_26
0x4003f1f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2329	fold.c	FUNCTION_58	IF_26
0x4003f26	    0x8b80d4010000	           mov eax, dword [rax + 0x1d4] 	      2329	fold.c	FUNCTION_58	IF_26
0x4003f2c	            0x85c0	                           test eax, eax	      2329	fold.c	FUNCTION_58	IF_26
0x4003f2e	            0x740f	                            je 0x4003f3f	      2329	fold.c	FUNCTION_58	IF_26
0x4003f30	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2330	fold.c	FUNCTION_58	CALL_19
0x4003f37	          0x4889c7	                            mov rdi, rax	      2330	fold.c	FUNCTION_58	CALL_19
0x4003f3a	      0xe800000000	                          call 0x4003f3f	      2330	fold.c	FUNCTION_58	CALL_19
0x4003f3f	        0x488b4590	             mov rax, qword [rbp - 0x70]	      2335	fold.c	FUNCTION_58	IF_27
0x4003f43	    0x483b8558ffff	             cmp rax, qword [rbp - 0xa8]	      2335	fold.c	FUNCTION_58	IF_27
0x4003f4a	            0x7465	                            je 0x4003fb1	      2335	fold.c	FUNCTION_58	IF_27
0x4003f4c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f53	    0x488b80300100	           mov rax, qword [rax + 0x130] 	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f5a	          0x4885c0	                           test rax, rax	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f5d	            0x7417	                            je 0x4003f76	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f5f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f66	    0x488b80300100	           mov rax, qword [rax + 0x130] 	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f6d	    0x483b8560ffff	             cmp rax, qword [rbp - 0xa0]	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f74	            0x7e15	                           jle 0x4003f8b	      2337	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f76	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f7d	    0x488b9560ffff	             mov rdx, qword [rbp - 0xa0]	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f84	    0x488990300100	            mov qword [rax + 0x130], rdx	      2338	fold.c	FUNCTION_58	IF_27	IF_28
0x4003f8b	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4003f92	    0x488b80380100	           mov rax, qword [rax + 0x138] 	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4003f99	        0x483b4590	             cmp rax, qword [rbp - 0x70]	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4003f9d	            0x7d12	                           jge 0x4003fb1	      2339	fold.c	FUNCTION_58	IF_27	IF_29
0x4003f9f	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x4003fa6	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x4003faa	    0x488990380100	            mov qword [rax + 0x138], rdx	      2340	fold.c	FUNCTION_58	IF_27	IF_29
0x4003fb1	    0x48c705000000	               mov qword [0x04003fbc], 0	      2343	fold.c	FUNCTION_58
0x4003fbc	            0xeb01	                           jmp 0x4003fbf	      2343	fold.c	FUNCTION_58
0x4003fbe	              0x90	                                     nop	      2129	fold.c	FUNCTION_58	IF_1
0x4003fbf	        0x488b45f8	                mov rax, qword [rbp - 8]	      2344	fold.c	FUNCTION_58
0x4003fc3	    0x644833042528	                xor rax, qword fs:[0x28]	      2344	fold.c	FUNCTION_58
0x4003fcc	            0x7405	                            je 0x4003fd3	      2344	fold.c	FUNCTION_58
0x4003fce	      0xe800000000	                          call 0x4003fd3	      2344	fold.c	FUNCTION_58
0x4003fd3	              0xc9	                                   leave	      2344	fold.c	FUNCTION_58
0x4003fd4	              0xc3	                                     ret	      2344	fold.c	FUNCTION_58
opFoldRange	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,4:CALL,6	66
0x4000680	              0x55	                                push rbp	       393	fold.c	FUNCTION_16
0x4000681	          0x4889e5	                            mov rbp, rsp	       393	fold.c	FUNCTION_16
0x4000684	        0x4883ec40	                           sub rsp, 0x40	       393	fold.c	FUNCTION_16
0x4000688	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       393	fold.c	FUNCTION_16
0x400068c	        0x488975d0	             mov qword [rbp - 0x30], rsi	       393	fold.c	FUNCTION_16
0x4000690	          0x8955cc	             mov dword [rbp - 0x34], edx	       393	fold.c	FUNCTION_16
0x4000693	          0x894dc8	             mov dword [rbp - 0x38], ecx	       393	fold.c	FUNCTION_16
0x4000696	        0x448945c4	             mov dword [rbp - 0x3c], r8d	       393	fold.c	FUNCTION_16
0x400069a	    0x64488b042528	                mov rax, qword fs:[0x28]	       393	fold.c	FUNCTION_16
0x40006a3	        0x488945f8	                mov qword [rbp - 8], rax	       393	fold.c	FUNCTION_16
0x40006a7	            0x31c0	                            xor eax, eax	       393	fold.c	FUNCTION_16
0x40006a9	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       394	fold.c	FUNCTION_16
0x40006b0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       398	fold.c	FUNCTION_16	FOR_1
0x40006b4	        0x488945f0	             mov qword [rbp - 0x10], rax	       398	fold.c	FUNCTION_16	FOR_1
0x40006b8	            0xeb6c	                           jmp 0x4000726	       398	fold.c	FUNCTION_16	FOR_1
0x40006ba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       400	fold.c	FUNCTION_16	FOR_1
0x40006be	        0x488945e8	             mov qword [rbp - 0x18], rax	       400	fold.c	FUNCTION_16	FOR_1
0x40006c2	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x40006c6	            0x741b	                            je 0x40006e3	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x40006c8	        0x837dc800	               cmp dword [rbp - 0x38], 0	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x40006cc	            0x7515	                           jne 0x40006e3	       403	fold.c	FUNCTION_16	FOR_1	IF_1
0x40006ce	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x40006d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x40006d6	      0xbe00000000	                              mov esi, 0	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x40006db	          0x4889c7	                            mov rdi, rax	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x40006de	      0xe800000000	                          call 0x40006e3	       404	fold.c	FUNCTION_16	FOR_1	CALL_1
0x40006e3	        0x488d4de4	                   lea rcx, [rbp - 0x1c]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006e7	          0x8b55c8	             mov edx, dword [rbp - 0x38]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006ea	          0x8b75cc	             mov esi, dword [rbp - 0x34]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006ed	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006f1	          0x4889c7	                            mov rdi, rax	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006f4	      0xe8a8170000	                  call sym.setManualFold	       405	fold.c	FUNCTION_16	FOR_1	CALL_2
0x40006f9	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x40006fd	            0x751b	                           jne 0x400071a	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x40006ff	        0x837dc800	               cmp dword [rbp - 0x38], 0	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4000703	            0x7515	                           jne 0x400071a	       408	fold.c	FUNCTION_16	FOR_1	IF_2
0x4000705	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x4000709	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x400070d	      0xbe00000000	                              mov esi, 0	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x4000712	          0x4889c7	                            mov rdi, rax	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x4000715	      0xe800000000	                          call 0x400071a	       409	fold.c	FUNCTION_16	FOR_1	CALL_3
0x400071a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       398	fold.c	FUNCTION_16	FOR_1
0x400071e	        0x4883c001	                              add rax, 1	       398	fold.c	FUNCTION_16	FOR_1
0x4000722	        0x488945f0	             mov qword [rbp - 0x10], rax	       398	fold.c	FUNCTION_16	FOR_1
0x4000726	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       398	fold.c	FUNCTION_16	FOR_1
0x400072a	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       398	fold.c	FUNCTION_16	FOR_1
0x400072e	            0x7e8a	                           jle 0x40006ba	       398	fold.c	FUNCTION_16	FOR_1
0x4000730	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       411	fold.c	FUNCTION_16	IF_3
0x4000733	            0x85c0	                           test eax, eax	       411	fold.c	FUNCTION_16	IF_3
0x4000735	            0x7517	                           jne 0x400074e	       411	fold.c	FUNCTION_16	IF_3
0x4000737	    0x488b05000000	            mov rax, qword [0x0400073e] 	       412	fold.c	FUNCTION_16	CALL_5
0x400073e	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x4000741	      0xe800000000	                          call 0x4000746	       412	fold.c	FUNCTION_16	CALL_5
0x4000746	          0x4889c7	                            mov rdi, rax	       412	fold.c	FUNCTION_16	CALL_5
0x4000749	      0xe800000000	                          call 0x400074e	       412	fold.c	FUNCTION_16	CALL_5
0x400074e	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       414	fold.c	FUNCTION_16	IF_4
0x4000752	            0x740a	                            je 0x400075e	       414	fold.c	FUNCTION_16	IF_4
0x4000754	      0xbf14000000	                           mov edi, 0x14	       415	fold.c	FUNCTION_16	CALL_6
0x4000759	      0xe800000000	                          call 0x400075e	       415	fold.c	FUNCTION_16	CALL_6
0x400075e	              0x90	                                     nop	       416	fold.c	FUNCTION_16
0x400075f	        0x488b45f8	                mov rax, qword [rbp - 8]	       416	fold.c	FUNCTION_16
0x4000763	    0x644833042528	                xor rax, qword fs:[0x28]	       416	fold.c	FUNCTION_16
0x400076c	            0x7405	                            je 0x4000773	       416	fold.c	FUNCTION_16
0x400076e	      0xe800000000	                          call 0x4000773	       416	fold.c	FUNCTION_16
0x4000773	              0xc9	                                   leave	       416	fold.c	FUNCTION_16
0x4000774	              0xc3	                                     ret	       416	fold.c	FUNCTION_16
foldmethodIsManual	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	12
0x400055f	              0x55	                                push rbp	       306	fold.c	FUNCTION_8
0x4000560	          0x4889e5	                            mov rbp, rsp	       306	fold.c	FUNCTION_8
0x4000563	        0x48897df8	                mov qword [rbp - 8], rdi	       306	fold.c	FUNCTION_8
0x4000567	        0x488b45f8	                mov rax, qword [rbp - 8]	       307	fold.c	FUNCTION_8
0x400056b	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       307	fold.c	FUNCTION_8
0x4000572	        0x4883c003	                              add rax, 3	       307	fold.c	FUNCTION_8
0x4000576	           0xfb600	                   movzx eax, byte [rax]	       307	fold.c	FUNCTION_8
0x4000579	            0x3c75	                            cmp al, 0x75	       307	fold.c	FUNCTION_8
0x400057b	           0xf94c0	                                 sete al	       307	fold.c	FUNCTION_8
0x400057e	           0xfb6c0	                           movzx eax, al	       307	fold.c	FUNCTION_8
0x4000581	              0x5d	                                 pop rbp	       308	fold.c	FUNCTION_8
0x4000582	              0xc3	                                     ret	       308	fold.c	FUNCTION_8
foldMerge	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,5	150
0x4005b85	              0x55	                                push rbp	      3165	fold.c	FUNCTION_66
0x4005b86	          0x4889e5	                            mov rbp, rsp	      3165	fold.c	FUNCTION_66
0x4005b89	        0x4883ec50	                           sub rsp, 0x50	      3165	fold.c	FUNCTION_66
0x4005b8d	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      3165	fold.c	FUNCTION_66
0x4005b91	        0x488975c0	             mov qword [rbp - 0x40], rsi	      3165	fold.c	FUNCTION_66
0x4005b95	        0x488955b8	             mov qword [rbp - 0x48], rdx	      3165	fold.c	FUNCTION_66
0x4005b99	    0x64488b042528	                mov rax, qword fs:[0x28]	      3165	fold.c	FUNCTION_66
0x4005ba2	        0x488945f8	                mov qword [rbp - 8], rax	      3165	fold.c	FUNCTION_66
0x4005ba6	            0x31c0	                            xor eax, eax	      3165	fold.c	FUNCTION_66
0x4005ba8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3169	fold.c	FUNCTION_66
0x4005bac	        0x4883c010	                           add rax, 0x10	      3169	fold.c	FUNCTION_66
0x4005bb0	        0x488945e8	             mov qword [rbp - 0x18], rax	      3169	fold.c	FUNCTION_66
0x4005bb4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3170	fold.c	FUNCTION_66
0x4005bb8	        0x4883c010	                           add rax, 0x10	      3170	fold.c	FUNCTION_66
0x4005bbc	        0x488945f0	             mov qword [rbp - 0x10], rax	      3170	fold.c	FUNCTION_66
0x4005bc0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bc4	        0x488b4008	                mov rax, qword [rax + 8]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bc8	        0x488d48ff	                      lea rcx, [rax - 1]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bcc	        0x488d55d8	                   lea rdx, [rbp - 0x28]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bd0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bd4	          0x4889ce	                            mov rsi, rcx	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bd7	          0x4889c7	                            mov rdi, rax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bda	      0xe806c0ffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bdf	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005be1	            0x7430	                            je 0x4005c13	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005be3	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005be7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005beb	      0xbe00000000	                              mov esi, 0	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bf0	          0x4889c7	                            mov rdi, rax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bf3	      0xe8edbfffff	                       call sym.foldFind	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bf8	            0x85c0	                           test eax, eax	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bfa	            0x7417	                            je 0x4005c13	      3174	fold.c	FUNCTION_66	IF_1	CALL_2
0x4005bfc	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c00	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c04	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c08	          0x4889ce	                            mov rsi, rcx	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c0b	          0x4889c7	                            mov rdi, rax	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c0e	      0xe872ffffff	                      call sym.foldMerge	      3175	fold.c	FUNCTION_66	CALL_3
0x4005c13	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c17	            0x8b00	                    mov eax, dword [rax]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c19	            0x85c0	                           test eax, eax	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c1b	     0xf8e15010000	                           jle 0x4005d36	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c21	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c25	            0x8b10	                    mov edx, dword [rax]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c27	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c2b	            0x89d6	                            mov esi, edx	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c2d	          0x4889c7	                            mov rdi, rax	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c30	      0xe800000000	                          call 0x4005c35	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c35	          0x83f801	                              cmp eax, 1	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c38	     0xf85f8000000	                           jne 0x4005d36	      3178	fold.c	FUNCTION_66	IF_2	CALL_4
0x4005c3e	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c45	      0xe9d3000000	                           jmp 0x4005d1d	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c4a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c4e	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c52	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c56	            0x8b00	                    mov eax, dword [rax]	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c58	          0x4863d0	                         movsxd rdx, eax	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c5b	          0x4889d0	                            mov rax, rdx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c5e	          0x4801c0	                            add rax, rax	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c61	          0x4801d0	                            add rax, rdx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c64	        0x48c1e004	                              shl rax, 4	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c68	          0x4801c8	                            add rax, rcx	      3182	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c6b	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c6f	        0x488b7210	            mov rsi, qword [rdx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c73	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c76	          0x4863ca	                         movsxd rcx, edx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c79	          0x4889ca	                            mov rdx, rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c7c	          0x4801d2	                            add rdx, rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c7f	          0x4801ca	                            add rdx, rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c82	        0x48c1e204	                              shl rdx, 4	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c86	          0x4801f2	                            add rdx, rsi	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c89	          0x488b0a	                    mov rcx, qword [rdx]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c8c	          0x488908	                    mov qword [rax], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c8f	        0x488b4a08	                mov rcx, qword [rdx + 8]	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c93	        0x48894808	                mov qword [rax + 8], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c97	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c9b	        0x48894810	             mov qword [rax + 0x10], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005c9f	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ca3	        0x48894818	             mov qword [rax + 0x18], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ca7	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cab	        0x48894820	             mov qword [rax + 0x20], rcx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005caf	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cb3	        0x48895028	             mov qword [rax + 0x28], rdx	      3183	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cb7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cbb	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cbf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cc3	            0x8b00	                    mov eax, dword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cc5	          0x4863d0	                         movsxd rdx, eax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cc8	          0x4889d0	                            mov rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ccb	          0x4801c0	                            add rax, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cce	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cd1	        0x48c1e004	                              shl rax, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cd5	          0x4801c1	                            add rcx, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cd8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cdc	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ce0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ce4	            0x8b00	                    mov eax, dword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ce6	          0x4863d0	                         movsxd rdx, eax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005ce9	          0x4889d0	                            mov rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cec	          0x4801c0	                            add rax, rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cef	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cf2	        0x48c1e004	                              shl rax, 4	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cf6	          0x4801f0	                            add rax, rsi	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cf9	          0x488b10	                    mov rdx, qword [rax]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005cfc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d00	        0x488b4008	                mov rax, qword [rax + 8]	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d04	          0x4801d0	                            add rax, rdx	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d07	          0x488901	                    mov qword [rcx], rax	      3184	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d0a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d0e	            0x8b00	                    mov eax, dword [rax]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d10	          0x8d5001	                      lea edx, [rax + 1]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d13	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d17	            0x8910	                    mov dword [rax], edx	      3185	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d19	        0x8345d401	               add dword [rbp - 0x2c], 1	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d1d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d21	            0x8b00	                    mov eax, dword [rax]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d23	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d26	     0xf8f1effffff	                            jg 0x4005c4a	      3180	fold.c	FUNCTION_66	IF_2	FOR_1
0x4005d2c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3187	fold.c	FUNCTION_66	IF_2
0x4005d30	    0xc70000000000	                      mov dword [rax], 0	      3187	fold.c	FUNCTION_66	IF_2
0x4005d36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3190	fold.c	FUNCTION_66
0x4005d3a	        0x488b5008	                mov rdx, qword [rax + 8]	      3190	fold.c	FUNCTION_66
0x4005d3e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      3190	fold.c	FUNCTION_66
0x4005d42	        0x488b4008	                mov rax, qword [rax + 8]	      3190	fold.c	FUNCTION_66
0x4005d46	          0x4801c2	                            add rdx, rax	      3190	fold.c	FUNCTION_66
0x4005d49	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      3190	fold.c	FUNCTION_66
0x4005d4d	        0x48895008	                mov qword [rax + 8], rdx	      3190	fold.c	FUNCTION_66
0x4005d51	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d55	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d59	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d5d	          0x4829c2	                            sub rdx, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d60	          0x4889d0	                            mov rax, rdx	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d63	        0x48c1f804	                              sar rax, 4	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d67	          0x4889c2	                            mov rdx, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d6a	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d74	        0x480fafc2	                           imul rax, rdx	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d78	            0x89c1	                            mov ecx, eax	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d7a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d7e	      0xba01000000	                              mov edx, 1	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d83	            0x89ce	                            mov esi, ecx	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d85	          0x4889c7	                            mov rdi, rax	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d88	      0xe85ac5ffff	                call sym.deleteFoldEntry	      3191	fold.c	FUNCTION_66	CALL_5
0x4005d8d	    0xc70500000000	               mov dword [0x04005d97], 1	      3192	fold.c	FUNCTION_66
0x4005d97	              0x90	                                     nop	      3193	fold.c	FUNCTION_66
0x4005d98	        0x488b45f8	                mov rax, qword [rbp - 8]	      3193	fold.c	FUNCTION_66
0x4005d9c	    0x644833042528	                xor rax, qword fs:[0x28]	      3193	fold.c	FUNCTION_66
0x4005da5	            0x7405	                            je 0x4005dac	      3193	fold.c	FUNCTION_66
0x4005da7	      0xe800000000	                          call 0x4005dac	      3193	fold.c	FUNCTION_66
0x4005dac	              0xc9	                                   leave	      3193	fold.c	FUNCTION_66
0x4005dad	              0xc3	                                     ret	      3193	fold.c	FUNCTION_66
foldmethodIsExpr	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	12
0x40005a3	              0x55	                                push rbp	       326	fold.c	FUNCTION_10
0x40005a4	          0x4889e5	                            mov rbp, rsp	       326	fold.c	FUNCTION_10
0x40005a7	        0x48897df8	                mov qword [rbp - 8], rdi	       326	fold.c	FUNCTION_10
0x40005ab	        0x488b45f8	                mov rax, qword [rbp - 8]	       327	fold.c	FUNCTION_10
0x40005af	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       327	fold.c	FUNCTION_10
0x40005b6	        0x4883c001	                              add rax, 1	       327	fold.c	FUNCTION_10
0x40005ba	           0xfb600	                   movzx eax, byte [rax]	       327	fold.c	FUNCTION_10
0x40005bd	            0x3c78	                            cmp al, 0x78	       327	fold.c	FUNCTION_10
0x40005bf	           0xf94c0	                                 sete al	       327	fold.c	FUNCTION_10
0x40005c2	           0xfb6c0	                           movzx eax, al	       327	fold.c	FUNCTION_10
0x40005c5	              0x5d	                                 pop rbp	       328	fold.c	FUNCTION_10
0x40005c6	              0xc3	                                     ret	       328	fold.c	FUNCTION_10
setManualFold	functions,1:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,2	62
0x4001ea1	              0x55	                                push rbp	      1230	fold.c	FUNCTION_40
0x4001ea2	          0x4889e5	                            mov rbp, rsp	      1230	fold.c	FUNCTION_40
0x4001ea5	        0x4883ec30	                           sub rsp, 0x30	      1230	fold.c	FUNCTION_40
0x4001ea9	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1230	fold.c	FUNCTION_40
0x4001ead	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1230	fold.c	FUNCTION_40
0x4001eb0	          0x8955e0	             mov dword [rbp - 0x20], edx	      1230	fold.c	FUNCTION_40
0x4001eb3	        0x48894dd8	             mov qword [rbp - 0x28], rcx	      1230	fold.c	FUNCTION_40
0x4001eb7	    0x488b05000000	            mov rax, qword [0x04001ebe] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ebe	          0x4889c7	                            mov rdi, rax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ec1	      0xe800000000	                          call 0x4001ec6	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ec6	            0x85c0	                           test eax, eax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ec8	     0xf84a1000000	                            je 0x4001f6f	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ece	    0x488b05000000	            mov rax, qword [0x04001ed5] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ed5	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001edb	            0x85c0	                           test eax, eax	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001edd	     0xf848c000000	                            je 0x4001f6f	      1232	fold.c	FUNCTION_40	IF_1	CALL_1
0x4001ee3	    0x488b05000000	            mov rax, qword [0x04001eea] 	      1241	fold.c	FUNCTION_40	IF_1
0x4001eea	        0x488945f0	             mov qword [rbp - 0x10], rax	      1241	fold.c	FUNCTION_40	IF_1
0x4001eee	            0xeb78	                           jmp 0x4001f68	      1241	fold.c	FUNCTION_40	IF_1
0x4001ef0	    0x488b05000000	            mov rax, qword [0x04001ef7] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001ef7	        0x483945f0	            cmp qword [rbp - 0x10], rax 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001efb	            0x745f	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001efd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f01	          0x4889c7	                            mov rdi, rax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f04	      0xe800000000	                          call 0x4001f09	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f09	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f0b	            0x744f	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f0d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f11	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f17	            0x85c0	                           test eax, eax	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f19	            0x7441	                            je 0x4001f5c	      1243	fold.c	FUNCTION_40	FUNCTION_1	CALL_1
0x4001f1b	    0x488b05000000	            mov rax, qword [0x04001f22] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f22	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f26	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f2a	          0x4889d6	                            mov rsi, rdx	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f2d	          0x4889c7	                            mov rdi, rax	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f30	      0xe800000000	                          call 0x4001f35	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f35	        0x488945f8	                mov qword [rbp - 8], rax	      1245	fold.c	FUNCTION_40	FUNCTION_1	CALL_2
0x4001f39	      0x48837df800	                  cmp qword [rbp - 8], 0	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4001f3e	            0x741c	                            je 0x4001f5c	      1246	fold.c	FUNCTION_40	FUNCTION_1	IF_2
0x4001f40	          0x8b4de0	             mov ecx, dword [rbp - 0x20]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f43	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f46	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f4a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f4e	    0x41b800000000	                              mov r8d, 0	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f54	          0x4889c7	                            mov rdi, rax	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f57	      0xe835000000	               call sym.setManualFoldWin	      1247	fold.c	FUNCTION_40	FUNCTION_1	CALL_3
0x4001f5c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1241	fold.c	FUNCTION_40	IF_1
0x4001f60	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1241	fold.c	FUNCTION_40	IF_1
0x4001f64	        0x488945f0	             mov qword [rbp - 0x10], rax	      1241	fold.c	FUNCTION_40	IF_1
0x4001f68	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1241	fold.c	FUNCTION_40	IF_1
0x4001f6d	            0x7581	                           jne 0x4001ef0	      1241	fold.c	FUNCTION_40	IF_1
0x4001f6f	    0x488b05000000	            mov rax, qword [0x04001f76] 	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f76	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f7a	          0x8b4de0	             mov ecx, dword [rbp - 0x20]	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f7d	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f80	        0x488b75e8	             mov rsi, qword [rbp - 0x18]	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f84	          0x4989f8	                             mov r8, rdi	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f87	          0x4889c7	                            mov rdi, rax	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f8a	      0xe802000000	               call sym.setManualFoldWin	      1253	fold.c	FUNCTION_40	CALL_2
0x4001f8f	              0xc9	                                   leave	      1254	fold.c	FUNCTION_40
0x4001f90	              0xc3	                                     ret	      1254	fold.c	FUNCTION_40
put_folds_recurse	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,2:CALL,3	60
0x4006600	              0x55	                                push rbp	      3515	fold.c	FUNCTION_74
0x4006601	          0x4889e5	                            mov rbp, rsp	      3515	fold.c	FUNCTION_74
0x4006604	        0x4883ec30	                           sub rsp, 0x30	      3515	fold.c	FUNCTION_74
0x4006608	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3515	fold.c	FUNCTION_74
0x400660c	        0x488975e0	             mov qword [rbp - 0x20], rsi	      3515	fold.c	FUNCTION_74
0x4006610	        0x488955d8	             mov qword [rbp - 0x28], rdx	      3515	fold.c	FUNCTION_74
0x4006614	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3519	fold.c	FUNCTION_74
0x4006618	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3519	fold.c	FUNCTION_74
0x400661c	        0x488945f8	                mov qword [rbp - 8], rax	      3519	fold.c	FUNCTION_74
0x4006620	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      3520	fold.c	FUNCTION_74	FOR_1
0x4006627	      0xe995000000	                           jmp 0x40066c1	      3520	fold.c	FUNCTION_74	FOR_1
0x400662c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006630	          0x488b10	                    mov rdx, qword [rax]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006633	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006637	          0x4801c2	                            add rdx, rax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x400663a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x400663e	        0x488d4810	                   lea rcx, [rax + 0x10]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006642	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006646	          0x4889ce	                            mov rsi, rcx	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006649	          0x4889c7	                            mov rdi, rax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x400664c	      0xe8afffffff	              call sym.put_folds_recurse	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006651	            0x85c0	                           test eax, eax	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006653	            0x7507	                           jne 0x400665c	      3523	fold.c	FUNCTION_74	FOR_1	IF_1	CALL_1
0x4006655	      0xb800000000	                              mov eax, 0	      3524	fold.c	FUNCTION_74	FOR_1	IF_1
0x400665a	            0xeb79	                           jmp 0x40066d5	      3524	fold.c	FUNCTION_74	FOR_1	IF_1
0x400665c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4006660	          0x488b10	                    mov rdx, qword [rax]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4006663	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4006667	          0x4801c2	                            add rdx, rax	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x400666a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x400666e	        0x488b4008	                mov rax, qword [rax + 8]	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4006672	          0x4801d0	                            add rax, rdx	      3526	fold.c	FUNCTION_74	FOR_1	IF_2
0x4006675	        0x488d48ff	                      lea rcx, [rax - 1]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006679	        0x488b45f8	                mov rax, qword [rbp - 8]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x400667d	          0x488b10	                    mov rdx, qword [rax]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006680	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006684	          0x4801c2	                            add rdx, rax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006687	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x400668b	      0xbe00000000	                              mov esi, 0	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006690	          0x4889c7	                            mov rdi, rax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006693	      0xb800000000	                              mov eax, 0	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x4006698	      0xe800000000	                          call 0x400669d	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x400669d	            0x85c0	                           test eax, eax	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x400669f	            0x7810	                            js 0x40066b1	      3525	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_2
0x40066a1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x40066a5	          0x4889c7	                            mov rdi, rax	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x40066a8	      0xe800000000	                          call 0x40066ad	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x40066ad	            0x85c0	                           test eax, eax	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x40066af	            0x7507	                           jne 0x40066b8	      3527	fold.c	FUNCTION_74	FOR_1	IF_2	CALL_3
0x40066b1	      0xb800000000	                              mov eax, 0	      3528	fold.c	FUNCTION_74	FOR_1	IF_2
0x40066b6	            0xeb1d	                           jmp 0x40066d5	      3528	fold.c	FUNCTION_74	FOR_1	IF_2
0x40066b8	      0x488345f830	               add qword [rbp - 8], 0x30	      3529	fold.c	FUNCTION_74	FOR_1
0x40066bd	        0x8345f401	                add dword [rbp - 0xc], 1	      3520	fold.c	FUNCTION_74	FOR_1
0x40066c1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3520	fold.c	FUNCTION_74	FOR_1
0x40066c5	            0x8b00	                    mov eax, dword [rax]	      3520	fold.c	FUNCTION_74	FOR_1
0x40066c7	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      3520	fold.c	FUNCTION_74	FOR_1
0x40066ca	     0xf8f5cffffff	                            jg 0x400662c	      3520	fold.c	FUNCTION_74	FOR_1
0x40066d0	      0xb801000000	                              mov eax, 1	      3531	fold.c	FUNCTION_74
0x40066d5	              0xc9	                                   leave	      3532	fold.c	FUNCTION_74
0x40066d6	              0xc3	                                     ret	      3532	fold.c	FUNCTION_74
closeFoldRecurse	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	13
0x4000656	              0x55	                                push rbp	       377	fold.c	FUNCTION_15
0x4000657	          0x4889e5	                            mov rbp, rsp	       377	fold.c	FUNCTION_15
0x400065a	        0x4883ec10	                           sub rsp, 0x10	       377	fold.c	FUNCTION_15
0x400065e	        0x48897df8	                mov qword [rbp - 8], rdi	       377	fold.c	FUNCTION_15
0x4000662	        0x488b45f8	                mov rax, qword [rbp - 8]	       378	fold.c	FUNCTION_15	CALL_1
0x4000666	      0xb900000000	                              mov ecx, 0	       378	fold.c	FUNCTION_15	CALL_1
0x400066b	      0xba01000000	                              mov edx, 1	       378	fold.c	FUNCTION_15	CALL_1
0x4000670	      0xbe00000000	                              mov esi, 0	       378	fold.c	FUNCTION_15	CALL_1
0x4000675	          0x4889c7	                            mov rdi, rax	       378	fold.c	FUNCTION_15	CALL_1
0x4000678	      0xe824180000	                  call sym.setManualFold	       378	fold.c	FUNCTION_15	CALL_1
0x400067d	              0x90	                                     nop	       379	fold.c	FUNCTION_15
0x400067e	              0xc9	                                   leave	       379	fold.c	FUNCTION_15
0x400067f	              0xc3	                                     ret	       379	fold.c	FUNCTION_15
foldmethodIsIndent	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	11
0x4000583	              0x55	                                push rbp	       316	fold.c	FUNCTION_9
0x4000584	          0x4889e5	                            mov rbp, rsp	       316	fold.c	FUNCTION_9
0x4000587	        0x48897df8	                mov qword [rbp - 8], rdi	       316	fold.c	FUNCTION_9
0x400058b	        0x488b45f8	                mov rax, qword [rbp - 8]	       317	fold.c	FUNCTION_9
0x400058f	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       317	fold.c	FUNCTION_9
0x4000596	           0xfb600	                   movzx eax, byte [rax]	       317	fold.c	FUNCTION_9
0x4000599	            0x3c69	                            cmp al, 0x69	       317	fold.c	FUNCTION_9
0x400059b	           0xf94c0	                                 sete al	       317	fold.c	FUNCTION_9
0x400059e	           0xfb6c0	                           movzx eax, al	       317	fold.c	FUNCTION_9
0x40005a1	              0x5d	                                 pop rbp	       318	fold.c	FUNCTION_9
0x40005a2	              0xc3	                                     ret	       318	fold.c	FUNCTION_9
hasFoldingWin	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,14:CALL,5	204
0x4000120	              0x55	                                push rbp	       144	fold.c	FUNCTION_4
0x4000121	          0x4889e5	                            mov rbp, rsp	       144	fold.c	FUNCTION_4
0x4000124	        0x4883c480	             add rsp, 0xffffffffffffff80	       144	fold.c	FUNCTION_4
0x4000128	        0x48897da8	             mov qword [rbp - 0x58], rdi	       144	fold.c	FUNCTION_4
0x400012c	        0x488975a0	             mov qword [rbp - 0x60], rsi	       144	fold.c	FUNCTION_4
0x4000130	        0x48895598	             mov qword [rbp - 0x68], rdx	       144	fold.c	FUNCTION_4
0x4000134	        0x48894d90	             mov qword [rbp - 0x70], rcx	       144	fold.c	FUNCTION_4
0x4000138	        0x4489458c	             mov dword [rbp - 0x74], r8d	       144	fold.c	FUNCTION_4
0x400013c	        0x4c894d80	              mov qword [rbp - 0x80], r9	       144	fold.c	FUNCTION_4
0x4000140	    0x64488b042528	                mov rax, qword fs:[0x28]	       144	fold.c	FUNCTION_4
0x4000149	        0x488945f8	                mov qword [rbp - 8], rax	       144	fold.c	FUNCTION_4
0x400014d	            0x31c0	                            xor eax, eax	       144	fold.c	FUNCTION_4
0x400014f	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       145	fold.c	FUNCTION_4
0x4000156	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       146	fold.c	FUNCTION_4
0x400015e	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       147	fold.c	FUNCTION_4
0x4000166	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       148	fold.c	FUNCTION_4
0x400016a	        0x488945e8	             mov qword [rbp - 0x18], rax	       148	fold.c	FUNCTION_4
0x400016e	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       151	fold.c	FUNCTION_4
0x4000175	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       152	fold.c	FUNCTION_4
0x400017c	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       153	fold.c	FUNCTION_4
0x4000183	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       155	fold.c	FUNCTION_4
0x400018a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       157	fold.c	FUNCTION_4	CALL_1
0x400018e	          0x4889c7	                            mov rdi, rax	       157	fold.c	FUNCTION_4	CALL_1
0x4000191	      0xe8211c0000	                    call sym.checkupdate	       157	fold.c	FUNCTION_4	CALL_1
0x4000196	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x400019a	          0x4889c7	                            mov rdi, rax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x400019d	      0xe800000000	                          call 0x40001a2	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x40001a2	            0x85c0	                           test eax, eax	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x40001a4	            0x751b	                           jne 0x40001c1	       161	fold.c	FUNCTION_4	IF_1	CALL_2
0x40001a6	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x40001ab	            0x740a	                            je 0x40001b7	       163	fold.c	FUNCTION_4	IF_1	IF_2
0x40001ad	        0x488b4580	             mov rax, qword [rbp - 0x80]	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x40001b1	    0xc70000000000	                      mov dword [rax], 0	       164	fold.c	FUNCTION_4	IF_1	IF_2
0x40001b7	      0xb800000000	                              mov eax, 0	       165	fold.c	FUNCTION_4	IF_1
0x40001bc	      0xe941020000	                           jmp 0x4000402	       165	fold.c	FUNCTION_4	IF_1
0x40001c1	        0x837d8c00	               cmp dword [rbp - 0x74], 0	       168	fold.c	FUNCTION_4	IF_3
0x40001c5	     0xf8498000000	                            je 0x4000263	       168	fold.c	FUNCTION_4	IF_3
0x40001cb	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001cf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001d3	          0x4889d6	                            mov rsi, rdx	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001d6	          0x4889c7	                            mov rdi, rax	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001d9	      0xe800000000	                          call 0x40001de	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001de	          0x8945cc	             mov dword [rbp - 0x34], eax	       174	fold.c	FUNCTION_4	IF_3	CALL_3
0x40001e1	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x40001e5	            0x787c	                            js 0x4000263	       175	fold.c	FUNCTION_4	IF_3	IF_4
0x40001e7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001eb	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001f2	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001f5	          0x4863d0	                         movsxd rdx, eax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001f8	          0x4889d0	                            mov rax, rdx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001fb	          0x4801c0	                            add rax, rax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x40001fe	          0x4801d0	                            add rax, rdx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4000201	        0x48c1e003	                              shl rax, 3	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4000205	          0x4801c8	                            add rax, rcx	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x4000208	          0x488b00	                    mov rax, qword [rax]	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x400020b	        0x488945d8	             mov qword [rbp - 0x28], rax	       177	fold.c	FUNCTION_4	IF_3	IF_4
0x400020f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000213	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x400021a	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x400021d	          0x4863d0	                         movsxd rdx, eax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000220	          0x4889d0	                            mov rax, rdx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000223	          0x4801c0	                            add rax, rax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000226	          0x4801d0	                            add rax, rdx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000229	        0x48c1e003	                              shl rax, 3	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x400022d	          0x4801c8	                            add rax, rcx	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000230	        0x488b4010	            mov rax, qword [rax + 0x10] 	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000234	        0x488945e0	             mov qword [rbp - 0x20], rax	       178	fold.c	FUNCTION_4	IF_3	IF_4
0x4000238	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x400023c	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000243	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000246	          0x4863d0	                         movsxd rdx, eax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000249	          0x4889d0	                            mov rax, rdx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x400024c	          0x4801c0	                            add rax, rax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x400024f	          0x4801d0	                            add rax, rdx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000252	        0x48c1e003	                              shl rax, 3	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000256	          0x4801c8	                            add rax, rcx	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000259	         0xfb6400b	            movzx eax, byte [rax + 0xb] 	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x400025d	           0xfbec0	                           movsx eax, al	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000260	          0x8945c0	             mov dword [rbp - 0x40], eax	       179	fold.c	FUNCTION_4	IF_3	IF_4
0x4000263	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       183	fold.c	FUNCTION_4	IF_5
0x4000268	     0xf85c7000000	                           jne 0x4000335	       183	fold.c	FUNCTION_4	IF_5
0x400026e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       188	fold.c	FUNCTION_4	IF_5
0x4000272	    0x480508010000	                          add rax, 0x108	       188	fold.c	FUNCTION_4	IF_5
0x4000278	        0x488945f0	             mov qword [rbp - 0x10], rax	       188	fold.c	FUNCTION_4	IF_5
0x400027c	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4000280	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4000284	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4000288	          0x4889ce	                            mov rsi, rcx	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x400028b	          0x4889c7	                            mov rdi, rax	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x400028e	      0xe852190000	                       call sym.foldFind	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4000293	            0x85c0	                           test eax, eax	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x4000295	     0xf8499000000	                            je 0x4000334	       191	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6	CALL_4
0x400029b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x400029f	          0x488b00	                    mov rax, qword [rax]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002a2	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002a6	            0x750f	                           jne 0x40002b7	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002a8	        0x837dc800	               cmp dword [rbp - 0x38], 0	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002ac	            0x7509	                           jne 0x40002b7	       195	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002ae	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002b1	          0x83c001	                              add eax, 1	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002b4	          0x8945c8	             mov dword [rbp - 0x38], eax	       196	fold.c	FUNCTION_4	IF_5	FOR_1	IF_7
0x40002b7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002bb	          0x488b00	                    mov rax, qword [rax]	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002be	        0x480145d8	            add qword [rbp - 0x28], rax 	       198	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002c2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002c6	          0x488b00	                    mov rax, qword [rax]	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002c9	        0x480145e0	            add qword [rbp - 0x20], rax 	       199	fold.c	FUNCTION_4	IF_5	FOR_1
0x40002cd	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002d1	        0x482b45e8	             sub rax, qword [rbp - 0x18]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002d5	          0x4989c0	                             mov r8, rax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002d8	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002dc	        0x488d7dbc	                   lea rdi, [rbp - 0x44]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002e0	          0x8b4dc4	             mov ecx, dword [rbp - 0x3c]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002e3	        0x488d55b8	                   lea rdx, [rbp - 0x48]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002e7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002eb	          0x4d89c1	                              mov r9, r8	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002ee	          0x4989f8	                             mov r8, rdi	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002f1	          0x4889c7	                            mov rdi, rax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002f4	      0xe861270000	                   call sym.check_closed	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002f9	          0x8945c0	             mov dword [rbp - 0x40], eax	       202	fold.c	FUNCTION_4	IF_5	FOR_1	CALL_5
0x40002fc	        0x837dc000	               cmp dword [rbp - 0x40], 0	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4000300	            0x7412	                            je 0x4000314	       204	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4000302	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4000306	        0x488b4008	                mov rax, qword [rax + 8]	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x400030a	        0x4883e801	                              sub rax, 1	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x400030e	        0x480145e0	            add qword [rbp - 0x20], rax 	       207	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4000312	            0xeb21	                           jmp 0x4000335	       208	fold.c	FUNCTION_4	IF_5	FOR_1	IF_8
0x4000314	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x4000318	        0x4883c010	                           add rax, 0x10	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x400031c	        0x488945f0	             mov qword [rbp - 0x10], rax	       213	fold.c	FUNCTION_4	IF_5	FOR_1
0x4000320	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x4000324	          0x488b00	                    mov rax, qword [rax]	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x4000327	        0x482945e8	             sub qword [rbp - 0x18], rax	       214	fold.c	FUNCTION_4	IF_5	FOR_1
0x400032b	        0x8345c401	               add dword [rbp - 0x3c], 1	       215	fold.c	FUNCTION_4	IF_5	FOR_1
0x400032f	      0xe948ffffff	                           jmp 0x400027c	       216	fold.c	FUNCTION_4	IF_5	FOR_1
0x4000334	              0x90	                                     nop	       192	fold.c	FUNCTION_4	IF_5	FOR_1	IF_6
0x4000335	        0x837dc000	               cmp dword [rbp - 0x40], 0	       219	fold.c	FUNCTION_4	IF_9
0x4000339	            0x7546	                           jne 0x4000381	       219	fold.c	FUNCTION_4	IF_9
0x400033b	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4000340	            0x7435	                            je 0x4000377	       221	fold.c	FUNCTION_4	IF_9	IF_10
0x4000342	        0x488b4580	             mov rax, qword [rbp - 0x80]	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x4000346	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x4000349	            0x8910	                    mov dword [rax], edx	       223	fold.c	FUNCTION_4	IF_9	IF_10
0x400034b	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x400034f	            0x89c2	                            mov edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4000351	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4000355	            0x29c2	                            sub edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4000357	            0x89d0	                            mov eax, edx	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4000359	            0x89c2	                            mov edx, eax	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x400035b	        0x488b4580	             mov rax, qword [rbp - 0x80]	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x400035f	          0x895004	                mov dword [rax + 4], edx	       224	fold.c	FUNCTION_4	IF_9	IF_10
0x4000362	        0x837dc800	               cmp dword [rbp - 0x38], 0	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4000366	            0x7505	                           jne 0x400036d	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4000368	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x400036b	            0xeb03	                           jmp 0x4000370	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x400036d	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4000370	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4000374	          0x894208	                mov dword [rdx + 8], eax	       225	fold.c	FUNCTION_4	IF_9	IF_10
0x4000377	      0xb800000000	                              mov eax, 0	       227	fold.c	FUNCTION_4	IF_9
0x400037c	      0xe981000000	                           jmp 0x4000402	       227	fold.c	FUNCTION_4	IF_9
0x4000381	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       230	fold.c	FUNCTION_4	IF_11
0x4000385	        0x488b4008	                mov rax, qword [rax + 8]	       230	fold.c	FUNCTION_4	IF_11
0x4000389	          0x488b00	                    mov rax, qword [rax]	       230	fold.c	FUNCTION_4	IF_11
0x400038c	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       230	fold.c	FUNCTION_4	IF_11
0x4000390	            0x7d0f	                           jge 0x40003a1	       230	fold.c	FUNCTION_4	IF_11
0x4000392	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       231	fold.c	FUNCTION_4	IF_11
0x4000396	        0x488b4008	                mov rax, qword [rax + 8]	       231	fold.c	FUNCTION_4	IF_11
0x400039a	          0x488b00	                    mov rax, qword [rax]	       231	fold.c	FUNCTION_4	IF_11
0x400039d	        0x488945e0	             mov qword [rbp - 0x20], rax	       231	fold.c	FUNCTION_4	IF_11
0x40003a1	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       232	fold.c	FUNCTION_4	IF_12
0x40003a6	            0x740b	                            je 0x40003b3	       232	fold.c	FUNCTION_4	IF_12
0x40003a8	        0x488b4590	             mov rax, qword [rbp - 0x70]	       233	fold.c	FUNCTION_4	IF_12
0x40003ac	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       233	fold.c	FUNCTION_4	IF_12
0x40003b0	          0x488910	                    mov qword [rax], rdx	       233	fold.c	FUNCTION_4	IF_12
0x40003b3	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       234	fold.c	FUNCTION_4	IF_13
0x40003b8	            0x740b	                            je 0x40003c5	       234	fold.c	FUNCTION_4	IF_13
0x40003ba	        0x488b4598	             mov rax, qword [rbp - 0x68]	       235	fold.c	FUNCTION_4	IF_13
0x40003be	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       235	fold.c	FUNCTION_4	IF_13
0x40003c2	          0x488910	                    mov qword [rax], rdx	       235	fold.c	FUNCTION_4	IF_13
0x40003c5	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       236	fold.c	FUNCTION_4	IF_14
0x40003ca	            0x7431	                            je 0x40003fd	       236	fold.c	FUNCTION_4	IF_14
0x40003cc	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       238	fold.c	FUNCTION_4	IF_14
0x40003cf	          0x8d5001	                      lea edx, [rax + 1]	       238	fold.c	FUNCTION_4	IF_14
0x40003d2	        0x488b4580	             mov rax, qword [rbp - 0x80]	       238	fold.c	FUNCTION_4	IF_14
0x40003d6	            0x8910	                    mov dword [rax], edx	       238	fold.c	FUNCTION_4	IF_14
0x40003d8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       239	fold.c	FUNCTION_4	IF_14
0x40003dc	            0x89c2	                            mov edx, eax	       239	fold.c	FUNCTION_4	IF_14
0x40003de	        0x488b4580	             mov rax, qword [rbp - 0x80]	       239	fold.c	FUNCTION_4	IF_14
0x40003e2	          0x895004	                mov dword [rax + 4], edx	       239	fold.c	FUNCTION_4	IF_14
0x40003e5	        0x837dc800	               cmp dword [rbp - 0x38], 0	       240	fold.c	FUNCTION_4	IF_14
0x40003e9	            0x7508	                           jne 0x40003f3	       240	fold.c	FUNCTION_4	IF_14
0x40003eb	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       240	fold.c	FUNCTION_4	IF_14
0x40003ee	          0x83c001	                              add eax, 1	       240	fold.c	FUNCTION_4	IF_14
0x40003f1	            0xeb03	                           jmp 0x40003f6	       240	fold.c	FUNCTION_4	IF_14
0x40003f3	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       240	fold.c	FUNCTION_4	IF_14
0x40003f6	        0x488b5580	             mov rdx, qword [rbp - 0x80]	       240	fold.c	FUNCTION_4	IF_14
0x40003fa	          0x894208	                mov dword [rdx + 8], eax	       240	fold.c	FUNCTION_4	IF_14
0x40003fd	      0xb801000000	                              mov eax, 1	       242	fold.c	FUNCTION_4
0x4000402	        0x488b75f8	                mov rsi, qword [rbp - 8]	       243	fold.c	FUNCTION_4
0x4000406	    0x644833342528	                xor rsi, qword fs:[0x28]	       243	fold.c	FUNCTION_4
0x400040f	            0x7405	                            je 0x4000416	       243	fold.c	FUNCTION_4
0x4000411	      0xe800000000	                          call 0x4000416	       243	fold.c	FUNCTION_4
0x4000416	              0xc9	                                   leave	       243	fold.c	FUNCTION_4
0x4000417	              0xc3	                                     ret	       243	fold.c	FUNCTION_4
foldMarkAdjustRecurse	functions,0:DO,0:ELSE,8:FOR,1:SWITCH,0:WHILE,0:IF,10:CALL,5	227
0x4002661	              0x55	                                push rbp	      1492	fold.c	FUNCTION_46
0x4002662	          0x4889e5	                            mov rbp, rsp	      1492	fold.c	FUNCTION_46
0x4002665	        0x4883ec60	                           sub rsp, 0x60	      1492	fold.c	FUNCTION_46
0x4002669	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1492	fold.c	FUNCTION_46
0x400266d	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1492	fold.c	FUNCTION_46
0x4002671	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1492	fold.c	FUNCTION_46
0x4002675	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1492	fold.c	FUNCTION_46
0x4002679	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1492	fold.c	FUNCTION_46
0x400267d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1492	fold.c	FUNCTION_46
0x4002686	        0x488945f8	                mov qword [rbp - 8], rax	      1492	fold.c	FUNCTION_46
0x400268a	            0x31c0	                            xor eax, eax	      1492	fold.c	FUNCTION_46
0x400268c	    0x8b0500000000	            mov eax, dword [0x04002692] 	      1500	fold.c	FUNCTION_46	IF_1
0x4002692	          0x83e010	                           and eax, 0x10	      1500	fold.c	FUNCTION_46	IF_1
0x4002695	            0x85c0	                           test eax, eax	      1500	fold.c	FUNCTION_46	IF_1
0x4002697	            0x741f	                            je 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x4002699	      0x48837db001	               cmp qword [rbp - 0x50], 1	      1500	fold.c	FUNCTION_46	IF_1
0x400269e	            0x7518	                           jne 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x40026a0	    0x48817db8ffff	     cmp qword [rbp - 0x48], 0x7fffffff 	      1500	fold.c	FUNCTION_46	IF_1
0x40026a8	            0x750e	                           jne 0x40026b8	      1500	fold.c	FUNCTION_46	IF_1
0x40026aa	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1501	fold.c	FUNCTION_46	IF_1
0x40026ae	        0x4883c001	                              add rax, 1	      1501	fold.c	FUNCTION_46	IF_1
0x40026b2	        0x488945e8	             mov qword [rbp - 0x18], rax	      1501	fold.c	FUNCTION_46	IF_1
0x40026b6	            0xeb08	                           jmp 0x40026c0	      1501	fold.c	FUNCTION_46	IF_1
0x40026b8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1503	fold.c	FUNCTION_46	ELSE_1
0x40026bc	        0x488945e8	             mov qword [rbp - 0x18], rax	      1503	fold.c	FUNCTION_46	ELSE_1
0x40026c0	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1506	fold.c	FUNCTION_46	CALL_1
0x40026c4	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1506	fold.c	FUNCTION_46	CALL_1
0x40026c8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1506	fold.c	FUNCTION_46	CALL_1
0x40026cc	          0x4889ce	                            mov rsi, rcx	      1506	fold.c	FUNCTION_46	CALL_1
0x40026cf	          0x4889c7	                            mov rdi, rax	      1506	fold.c	FUNCTION_46	CALL_1
0x40026d2	      0xe80ef5ffff	                       call sym.foldFind	      1506	fold.c	FUNCTION_46	CALL_1
0x40026d7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1511	fold.c	FUNCTION_46	FOR_1
0x40026db	          0x4889c2	                            mov rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x40026de	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1511	fold.c	FUNCTION_46	FOR_1
0x40026e2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1511	fold.c	FUNCTION_46	FOR_1
0x40026e6	          0x4829c2	                            sub rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x40026e9	          0x4889d0	                            mov rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x40026ec	        0x48c1f804	                              sar rax, 4	      1511	fold.c	FUNCTION_46	FOR_1
0x40026f0	          0x4889c2	                            mov rdx, rax	      1511	fold.c	FUNCTION_46	FOR_1
0x40026f3	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      1511	fold.c	FUNCTION_46	FOR_1
0x40026fd	        0x480fafc2	                           imul rax, rdx	      1511	fold.c	FUNCTION_46	FOR_1
0x4002701	          0x8945dc	             mov dword [rbp - 0x24], eax	      1511	fold.c	FUNCTION_46	FOR_1
0x4002704	      0xe985020000	                           jmp 0x400298e	      1511	fold.c	FUNCTION_46	FOR_1
0x4002709	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1525	fold.c	FUNCTION_46	FOR_1
0x400270d	          0x488b10	                    mov rdx, qword [rax]	      1525	fold.c	FUNCTION_46	FOR_1
0x4002710	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1525	fold.c	FUNCTION_46	FOR_1
0x4002714	        0x488b4008	                mov rax, qword [rax + 8]	      1525	fold.c	FUNCTION_46	FOR_1
0x4002718	          0x4801d0	                            add rax, rdx	      1525	fold.c	FUNCTION_46	FOR_1
0x400271b	        0x4883e801	                              sub rax, 1	      1525	fold.c	FUNCTION_46	FOR_1
0x400271f	        0x488945f0	             mov qword [rbp - 0x10], rax	      1525	fold.c	FUNCTION_46	FOR_1
0x4002723	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4002727	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x400272b	     0xf8c4c020000	                            jl 0x400297d	      1528	fold.c	FUNCTION_46	FOR_1	IF_2
0x4002731	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002735	          0x488b00	                    mov rax, qword [rax]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002738	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400273c	            0x7e25	                           jle 0x4002763	      1532	fold.c	FUNCTION_46	FOR_1	IF_3
0x400273e	      0x48837da800	               cmp qword [rbp - 0x58], 0	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x4002743	     0xf8456020000	                            je 0x400299f	      1534	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x4002749	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x400274d	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002751	          0x488b0a	                    mov rcx, qword [rdx]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002754	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002758	          0x4801ca	                            add rdx, rcx	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x400275b	          0x488910	                    mov qword [rax], rdx	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x400275e	      0xe91b020000	                           jmp 0x400297e	      1536	fold.c	FUNCTION_46	FOR_1	IF_3
0x4002763	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4002767	          0x488b00	                    mov rax, qword [rax]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x400276a	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x400276e	            0x7c59	                            jl 0x40027c9	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4002770	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4002774	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x4002778	            0x7f4f	                            jg 0x40027c9	      1540	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5
0x400277a	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4002782	            0x752b	                           jne 0x40027af	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x4002784	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4002787	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x400278b	      0xba01000000	                              mov edx, 1	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4002790	            0x89ce	                            mov esi, ecx	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4002792	          0x4889c7	                            mov rdi, rax	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x4002795	      0xe84dfbffff	                call sym.deleteFoldEntry	      1546	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6	CALL_2
0x400279a	        0x836ddc01	               sub dword [rbp - 0x24], 1	      1547	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x400279e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40027a2	        0x4883e830	                           sub rax, 0x30	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40027a6	        0x488945e0	             mov qword [rbp - 0x20], rax	      1548	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40027aa	      0xe9cf010000	                           jmp 0x400297e	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40027af	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027b3	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027b7	          0x488b0a	                    mov rcx, qword [rdx]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027ba	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027be	          0x4801ca	                            add rdx, rcx	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027c1	          0x488910	                    mov qword [rax], rdx	      1551	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	ELSE_3
0x40027c4	      0xe9b5010000	                           jmp 0x400297e	      1543	fold.c	FUNCTION_46	FOR_1	ELSE_2	IF_5	IF_6
0x40027c9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027cd	          0x488b00	                    mov rax, qword [rax]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027d0	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027d4	     0xf8da4000000	                           jge 0x400287e	      1555	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027da	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1559	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027de	          0x488b00	                    mov rax, qword [rax]	      1559	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7
0x40027e1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027e5	          0x4829c2	                            sub rdx, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027e8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027ec	          0x488b00	                    mov rax, qword [rax]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027ef	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027f3	          0x4889ce	                            mov rsi, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027f6	          0x4829c6	                            sub rsi, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027f9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x40027fd	        0x488d7810	                   lea rdi, [rax + 0x10]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4002801	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4002805	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4002809	          0x4989c8	                             mov r8, rcx	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x400280c	          0x4889c1	                            mov rcx, rax	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x400280f	      0xe84dfeffff	          call sym.foldMarkAdjustRecurse	      1558	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	CALL_3
0x4002814	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x4002818	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x400281c	            0x7f44	                            jg 0x4002862	      1560	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8
0x400281e	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002826	            0x751e	                           jne 0x4002846	      1563	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002828	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x400282c	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002830	          0x488b12	                    mov rdx, qword [rdx]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002833	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002837	          0x4829d1	                            sub rcx, rdx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x400283a	          0x4889ca	                            mov rdx, rcx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x400283d	        0x48895008	                mov qword [rax + 8], rdx	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002841	      0xe938010000	                           jmp 0x400297e	      1564	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	IF_9
0x4002846	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x400284a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x400284e	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x4002852	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x4002856	          0x4801ca	                            add rdx, rcx	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x4002859	        0x48895008	                mov qword [rax + 8], rdx	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x400285d	      0xe91c010000	                           jmp 0x400297e	      1566	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	IF_8	ELSE_5
0x4002862	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x4002866	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x400286a	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x400286e	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x4002872	          0x4801ca	                            add rdx, rcx	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x4002875	        0x48895008	                mov qword [rax + 8], rdx	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x4002879	      0xe900010000	                           jmp 0x400297e	      1571	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_3	ELSE_4	IF_7	ELSE_5	ELSE_6
0x400287e	    0x48817db0ffff	     cmp qword [rbp - 0x50], 0x7fffffff 	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002886	     0xf8581000000	                           jne 0x400290d	      1578	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400288c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002890	          0x488b00	                    mov rax, qword [rax]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002893	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002897	          0x4889c2	                            mov rdx, rax	      1584	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400289a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x400289e	        0x4c8d0402	                     lea r8, [rdx + rax]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028a2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1582	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028a6	          0x488b00	                    mov rax, qword [rax]	      1582	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028a9	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028ad	          0x4829c2	                            sub rdx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028b0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1581	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028b4	          0x488b00	                    mov rax, qword [rax]	      1581	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028b7	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028bb	          0x4889ce	                            mov rsi, rcx	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028be	          0x4829c6	                            sub rsi, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028c1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028c5	        0x488d7810	                   lea rdi, [rax + 0x10]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028c9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028cd	          0x4889c1	                            mov rcx, rax	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028d0	      0xe88cfdffff	          call sym.foldMarkAdjustRecurse	      1580	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10	CALL_4
0x40028d5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028d9	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028dd	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028e1	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028e5	          0x488b12	                    mov rdx, qword [rdx]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028e8	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028ec	          0x4829d6	                            sub rsi, rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028ef	          0x4889f2	                            mov rdx, rsi	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028f2	        0x4883c201	                              add rdx, 1	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028f6	          0x4829d1	                            sub rcx, rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028f9	          0x4889ca	                            mov rdx, rcx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x40028fc	        0x48895008	                mov qword [rax + 8], rdx	      1585	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002900	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002904	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x4002908	          0x488910	                    mov qword [rax], rdx	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400290b	            0xeb71	                           jmp 0x400297e	      1586	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_5	ELSE_7	IF_10
0x400290d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002911	        0x482b45b0	             sub rax, qword [rbp - 0x50]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002915	          0x4889c1	                            mov rcx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002918	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1592	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400291c	          0x488b00	                    mov rax, qword [rax]	      1592	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400291f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002923	          0x4829c2	                            sub rdx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002926	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1591	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400292a	          0x488b00	                    mov rax, qword [rax]	      1591	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400292d	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002931	          0x4829c6	                            sub rsi, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002934	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002938	        0x488d7810	                   lea rdi, [rax + 0x10]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400293c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002940	          0x4989c8	                             mov r8, rcx	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002943	          0x4889c1	                            mov rcx, rax	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x4002946	      0xe816fdffff	          call sym.foldMarkAdjustRecurse	      1590	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8	CALL_5
0x400294b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400294f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002953	        0x488b4a08	                mov rcx, qword [rdx + 8]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002957	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400295b	        0x482b55b0	             sub rdx, qword [rbp - 0x50]	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400295f	          0x4801ca	                            add rdx, rcx	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002962	        0x48895008	                mov qword [rax + 8], rdx	      1595	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002966	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400296a	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400296e	          0x488b0a	                    mov rcx, qword [rdx]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002971	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002975	          0x4801ca	                            add rdx, rcx	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x4002978	          0x488910	                    mov qword [rax], rdx	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400297b	            0xeb01	                           jmp 0x400297e	      1596	fold.c	FUNCTION_46	FOR_1	ELSE_2	ELSE_4	ELSE_7	ELSE_8
0x400297d	              0x90	                                     nop	      1529	fold.c	FUNCTION_46	FOR_1	IF_2
0x400297e	        0x8345dc01	               add dword [rbp - 0x24], 1	      1511	fold.c	FUNCTION_46	FOR_1
0x4002982	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1511	fold.c	FUNCTION_46	FOR_1
0x4002986	        0x4883c030	                           add rax, 0x30	      1511	fold.c	FUNCTION_46	FOR_1
0x400298a	        0x488945e0	             mov qword [rbp - 0x20], rax	      1511	fold.c	FUNCTION_46	FOR_1
0x400298e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1511	fold.c	FUNCTION_46	FOR_1
0x4002992	            0x8b00	                    mov eax, dword [rax]	      1511	fold.c	FUNCTION_46	FOR_1
0x4002994	          0x3b45dc	             cmp eax, dword [rbp - 0x24]	      1511	fold.c	FUNCTION_46	FOR_1
0x4002997	     0xf8f6cfdffff	                            jg 0x4002709	      1511	fold.c	FUNCTION_46	FOR_1
0x400299d	            0xeb01	                           jmp 0x40029a0	      1602	fold.c	FUNCTION_46
0x400299f	              0x90	                                     nop	      1535	fold.c	FUNCTION_46	FOR_1	IF_3	IF_4
0x40029a0	              0x90	                                     nop	      1602	fold.c	FUNCTION_46
0x40029a1	        0x488b45f8	                mov rax, qword [rbp - 8]	      1602	fold.c	FUNCTION_46
0x40029a5	    0x644833042528	                xor rax, qword fs:[0x28]	      1602	fold.c	FUNCTION_46
0x40029ae	            0x7405	                            je 0x40029b5	      1602	fold.c	FUNCTION_46
0x40029b0	      0xe800000000	                          call 0x40029b5	      1602	fold.c	FUNCTION_46
0x40029b5	              0xc9	                                   leave	      1602	fold.c	FUNCTION_46
0x40029b6	              0xc3	                                     ret	      1602	fold.c	FUNCTION_46
put_fold_open_close	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,4	46
0x400688e	              0x55	                                push rbp	      3598	fold.c	FUNCTION_76
0x400688f	          0x4889e5	                            mov rbp, rsp	      3598	fold.c	FUNCTION_76
0x4006892	        0x4883ec20	                           sub rsp, 0x20	      3598	fold.c	FUNCTION_76
0x4006896	        0x48897df8	                mov qword [rbp - 8], rdi	      3598	fold.c	FUNCTION_76
0x400689a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3598	fold.c	FUNCTION_76
0x400689e	        0x488955e8	             mov qword [rbp - 0x18], rdx	      3598	fold.c	FUNCTION_76
0x40068a2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068a6	          0x488b10	                    mov rdx, qword [rax]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068ad	          0x4801c2	                            add rdx, rax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068b0	        0x488b45f8	                mov rax, qword [rbp - 8]	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068b4	      0xbe00000000	                              mov esi, 0	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068b9	          0x4889c7	                            mov rdi, rax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068bc	      0xb800000000	                              mov eax, 0	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068c1	      0xe800000000	                          call 0x40068c6	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068c6	            0x85c0	                           test eax, eax	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068c8	            0x7852	                            js 0x400691c	      3599	fold.c	FUNCTION_76	IF_1	CALL_1
0x40068ca	        0x488b45f8	                mov rax, qword [rbp - 8]	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x40068ce	          0x4889c7	                            mov rdi, rax	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x40068d1	      0xe800000000	                          call 0x40068d6	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x40068d6	            0x85c0	                           test eax, eax	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x40068d8	            0x7442	                            je 0x400691c	      3600	fold.c	FUNCTION_76	IF_1	CALL_2
0x40068da	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      3602	fold.c	FUNCTION_76	IF_1
0x40068de	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3602	fold.c	FUNCTION_76	IF_1
0x40068e2	            0x3c01	                               cmp al, 1	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068e4	            0x7507	                           jne 0x40068ed	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068e6	      0xba63000000	                           mov edx, 0x63	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068eb	            0xeb05	                           jmp 0x40068f2	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068ed	      0xba6f000000	                           mov edx, 0x6f	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068f2	        0x488b45f8	                mov rax, qword [rbp - 8]	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068f6	      0xbe00000000	                              mov esi, 0	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068fb	          0x4889c7	                            mov rdi, rax	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x40068fe	      0xb800000000	                              mov eax, 0	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x4006903	      0xe800000000	                          call 0x4006908	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x4006908	            0x85c0	                           test eax, eax	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x400690a	            0x7810	                            js 0x400691c	      3601	fold.c	FUNCTION_76	IF_1	CALL_3
0x400690c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x4006910	          0x4889c7	                            mov rdi, rax	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x4006913	      0xe800000000	                          call 0x4006918	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x4006918	            0x85c0	                           test eax, eax	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x400691a	            0x7507	                           jne 0x4006923	      3603	fold.c	FUNCTION_76	IF_1	CALL_4
0x400691c	      0xb800000000	                              mov eax, 0	      3604	fold.c	FUNCTION_76	IF_1
0x4006921	            0xeb05	                           jmp 0x4006928	      3604	fold.c	FUNCTION_76	IF_1
0x4006923	      0xb801000000	                              mov eax, 1	      3606	fold.c	FUNCTION_76
0x4006928	              0xc9	                                   leave	      3607	fold.c	FUNCTION_76
0x4006929	              0xc3	                                     ret	      3607	fold.c	FUNCTION_76
foldInsert	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,2:CALL,3	56
0x4004f0a	              0x55	                                push rbp	      2830	fold.c	FUNCTION_60
0x4004f0b	          0x4889e5	                            mov rbp, rsp	      2830	fold.c	FUNCTION_60
0x4004f0e	        0x4883ec20	                           sub rsp, 0x20	      2830	fold.c	FUNCTION_60
0x4004f12	        0x48897de8	             mov qword [rbp - 0x18], rdi	      2830	fold.c	FUNCTION_60
0x4004f16	          0x8975e4	             mov dword [rbp - 0x1c], esi	      2830	fold.c	FUNCTION_60
0x4004f19	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f1d	      0xbe01000000	                              mov esi, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f22	          0x4889c7	                            mov rdi, rax	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f25	      0xe800000000	                          call 0x4004f2a	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f2a	          0x83f801	                              cmp eax, 1	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f2d	            0x740a	                            je 0x4004f39	      2833	fold.c	FUNCTION_60	IF_1	CALL_1
0x4004f2f	      0xb800000000	                              mov eax, 0	      2834	fold.c	FUNCTION_60	IF_1
0x4004f34	      0xe98e000000	                           jmp 0x4004fc7	      2834	fold.c	FUNCTION_60	IF_1
0x4004f39	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2835	fold.c	FUNCTION_60
0x4004f3d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2835	fold.c	FUNCTION_60
0x4004f41	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      2835	fold.c	FUNCTION_60
0x4004f44	          0x4863d0	                         movsxd rdx, eax	      2835	fold.c	FUNCTION_60
0x4004f47	          0x4889d0	                            mov rax, rdx	      2835	fold.c	FUNCTION_60
0x4004f4a	          0x4801c0	                            add rax, rax	      2835	fold.c	FUNCTION_60
0x4004f4d	          0x4801d0	                            add rax, rdx	      2835	fold.c	FUNCTION_60
0x4004f50	        0x48c1e004	                              shl rax, 4	      2835	fold.c	FUNCTION_60
0x4004f54	          0x4801c8	                            add rax, rcx	      2835	fold.c	FUNCTION_60
0x4004f57	        0x488945f8	                mov qword [rbp - 8], rax	      2835	fold.c	FUNCTION_60
0x4004f5b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2836	fold.c	FUNCTION_60	IF_2
0x4004f5f	            0x8b00	                    mov eax, dword [rax]	      2836	fold.c	FUNCTION_60	IF_2
0x4004f61	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	      2836	fold.c	FUNCTION_60	IF_2
0x4004f64	            0x7e33	                           jle 0x4004f99	      2836	fold.c	FUNCTION_60	IF_2
0x4004f66	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f6a	            0x8b00	                    mov eax, dword [rax]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f6c	          0x2b45e4	             sub eax, dword [rbp - 0x1c]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f6f	          0x4863d0	                         movsxd rdx, eax	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f72	          0x4889d0	                            mov rax, rdx	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f75	          0x4801c0	                            add rax, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f78	          0x4801d0	                            add rax, rdx	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f7b	        0x48c1e004	                              shl rax, 4	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f7f	          0x4889c2	                            mov rdx, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f82	        0x488b45f8	                mov rax, qword [rbp - 8]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f86	        0x488d4830	                   lea rcx, [rax + 0x30]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f8a	        0x488b45f8	                mov rax, qword [rbp - 8]	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f8e	          0x4889c6	                            mov rsi, rax	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f91	          0x4889cf	                            mov rdi, rcx	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f94	      0xe800000000	                          call 0x4004f99	      2837	fold.c	FUNCTION_60	CALL_2
0x4004f99	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2838	fold.c	FUNCTION_60
0x4004f9d	            0x8b00	                    mov eax, dword [rax]	      2838	fold.c	FUNCTION_60
0x4004f9f	          0x8d5001	                      lea edx, [rax + 1]	      2838	fold.c	FUNCTION_60
0x4004fa2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2838	fold.c	FUNCTION_60
0x4004fa6	            0x8910	                    mov dword [rax], edx	      2838	fold.c	FUNCTION_60
0x4004fa8	        0x488b45f8	                mov rax, qword [rbp - 8]	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fac	        0x4883c010	                           add rax, 0x10	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fb0	      0xba0a000000	                            mov edx, 0xa	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fb5	      0xbe30000000	                           mov esi, 0x30	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fba	          0x4889c7	                            mov rdi, rax	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fbd	      0xe800000000	                          call 0x4004fc2	      2839	fold.c	FUNCTION_60	CALL_3
0x4004fc2	      0xb801000000	                              mov eax, 1	      2840	fold.c	FUNCTION_60
0x4004fc7	              0xc9	                                   leave	      2841	fold.c	FUNCTION_60
0x4004fc8	              0xc3	                                     ret	      2841	fold.c	FUNCTION_60
checkupdate	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,1	18
0x4001db7	              0x55	                                push rbp	      1186	fold.c	FUNCTION_38
0x4001db8	          0x4889e5	                            mov rbp, rsp	      1186	fold.c	FUNCTION_38
0x4001dbb	        0x4883ec10	                           sub rsp, 0x10	      1186	fold.c	FUNCTION_38
0x4001dbf	        0x48897df8	                mov qword [rbp - 8], rdi	      1186	fold.c	FUNCTION_38
0x4001dc3	        0x488b45f8	                mov rax, qword [rbp - 8]	      1187	fold.c	FUNCTION_38	IF_1
0x4001dc7	     0xfb680210100	          movzx eax, byte [rax + 0x121] 	      1187	fold.c	FUNCTION_38	IF_1
0x4001dce	            0x84c0	                             test al, al	      1187	fold.c	FUNCTION_38	IF_1
0x4001dd0	            0x7421	                            je 0x4001df3	      1187	fold.c	FUNCTION_38	IF_1
0x4001dd2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4001dd6	      0xbaffffff7f	                     mov edx, 0x7fffffff	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4001ddb	      0xbe01000000	                              mov esi, 1	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4001de0	          0x4889c7	                            mov rdi, rax	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4001de3	      0xe800000000	                          call 0x4001de8	      1189	fold.c	FUNCTION_38	IF_1	CALL_1
0x4001de8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1190	fold.c	FUNCTION_38	IF_1
0x4001dec	    0xc68021010000	               mov byte [rax + 0x121], 0	      1190	fold.c	FUNCTION_38	IF_1
0x4001df3	              0x90	                                     nop	      1192	fold.c	FUNCTION_38
0x4001df4	              0xc9	                                   leave	      1192	fold.c	FUNCTION_38
0x4001df5	              0xc3	                                     ret	      1192	fold.c	FUNCTION_38
foldUpdateIEMSRecurse	functions,0:DO,0:ELSE,14:FOR,1:SWITCH,0:WHILE,4:IF,46:CALL,21	993
0x4003fd5	              0x55	                                push rbp	      2379	fold.c	FUNCTION_59
0x4003fd6	          0x4889e5	                            mov rbp, rsp	      2379	fold.c	FUNCTION_59
0x4003fd9	    0x4881ec900000	                           sub rsp, 0x90	      2379	fold.c	FUNCTION_59
0x4003fe0	        0x48897d98	             mov qword [rbp - 0x68], rdi	      2379	fold.c	FUNCTION_59
0x4003fe4	          0x897594	             mov dword [rbp - 0x6c], esi	      2379	fold.c	FUNCTION_59
0x4003fe7	        0x48895588	             mov qword [rbp - 0x78], rdx	      2379	fold.c	FUNCTION_59
0x4003feb	        0x48894d80	             mov qword [rbp - 0x80], rcx	      2379	fold.c	FUNCTION_59
0x4003fef	    0x4c898578ffff	              mov qword [rbp - 0x88], r8	      2379	fold.c	FUNCTION_59
0x4003ff6	    0x4c898d70ffff	              mov qword [rbp - 0x90], r9	      2379	fold.c	FUNCTION_59
0x4003ffd	    0x64488b042528	                mov rax, qword fs:[0x28]	      2379	fold.c	FUNCTION_59
0x4004006	        0x488945f8	                mov qword [rbp - 8], rax	      2379	fold.c	FUNCTION_59
0x400400a	            0x31c0	                            xor eax, eax	      2379	fold.c	FUNCTION_59
0x400400c	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      2381	fold.c	FUNCTION_59
0x4004014	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      2383	fold.c	FUNCTION_59
0x4004017	          0x8945a8	             mov dword [rbp - 0x58], eax	      2383	fold.c	FUNCTION_59
0x400401a	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2384	fold.c	FUNCTION_59
0x400401e	        0x488945d0	             mov qword [rbp - 0x30], rax	      2384	fold.c	FUNCTION_59
0x4004022	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2385	fold.c	FUNCTION_59
0x4004026	        0x488b4008	                mov rax, qword [rax + 8]	      2385	fold.c	FUNCTION_59
0x400402a	        0x488945e8	             mov qword [rbp - 0x18], rax	      2385	fold.c	FUNCTION_59
0x400402e	    0xc745b0000000	               mov dword [rbp - 0x50], 0	      2387	fold.c	FUNCTION_59
0x4004035	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2388	fold.c	FUNCTION_59
0x4004039	          0x488b00	                    mov rax, qword [rax]	      2388	fold.c	FUNCTION_59
0x400403c	        0x488b4008	                mov rax, qword [rax + 8]	      2388	fold.c	FUNCTION_59
0x4004040	          0x488b10	                    mov rdx, qword [rax]	      2388	fold.c	FUNCTION_59
0x4004043	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2388	fold.c	FUNCTION_59
0x4004047	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2388	fold.c	FUNCTION_59
0x400404b	          0x4829c2	                            sub rdx, rax	      2388	fold.c	FUNCTION_59
0x400404e	          0x4889d0	                            mov rax, rdx	      2388	fold.c	FUNCTION_59
0x4004051	        0x488945f0	             mov qword [rbp - 0x10], rax	      2388	fold.c	FUNCTION_59
0x4004055	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2397	fold.c	FUNCTION_59	IF_1
0x4004060	            0x757b	                           jne 0x40040dd	      2397	fold.c	FUNCTION_59	IF_1
0x4004062	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2397	fold.c	FUNCTION_59	IF_1
0x4004066	          0x8b5028	            mov edx, dword [rax + 0x28] 	      2397	fold.c	FUNCTION_59	IF_1
0x4004069	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2397	fold.c	FUNCTION_59	IF_1
0x400406d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2397	fold.c	FUNCTION_59	IF_1
0x4004070	          0x2b4594	             sub eax, dword [rbp - 0x6c]	      2397	fold.c	FUNCTION_59	IF_1
0x4004073	            0x39c2	                            cmp edx, eax	      2397	fold.c	FUNCTION_59	IF_1
0x4004075	            0x7f66	                            jg 0x40040dd	      2397	fold.c	FUNCTION_59	IF_1
0x4004077	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2398	fold.c	FUNCTION_59	IF_1
0x400407b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2398	fold.c	FUNCTION_59	IF_1
0x400407e	            0x85c0	                           test eax, eax	      2398	fold.c	FUNCTION_59	IF_1
0x4004080	            0x7e5b	                           jle 0x40040dd	      2398	fold.c	FUNCTION_59	IF_1
0x4004082	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4004086	        0x488d48ff	                      lea rcx, [rax - 1]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x400408a	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x400408e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4004092	          0x4889ce	                            mov rsi, rcx	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4004095	          0x4889c7	                            mov rdi, rax	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x4004098	      0xe848dbffff	                       call sym.foldFind	      2400	fold.c	FUNCTION_59	IF_1	CALL_1
0x400409d	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040a1	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040a5	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040a9	            0x8b00	                    mov eax, dword [rax]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040ab	          0x4863d0	                         movsxd rdx, eax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040ae	          0x4889d0	                            mov rax, rdx	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040b1	          0x4801c0	                            add rax, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040b4	          0x4801d0	                            add rax, rdx	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040b7	        0x48c1e004	                              shl rax, 4	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040bb	        0x488d1401	                    lea rdx, [rcx + rax]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040bf	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040c3	          0x4839c2	                            cmp rdx, rax	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040c6	            0x760d	                           jbe 0x40040d5	      2401	fold.c	FUNCTION_59	IF_1	IF_2
0x40040c8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x40040cc	          0x488b00	                    mov rax, qword [rax]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x40040cf	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x40040d3	            0x7c08	                            jl 0x40040dd	      2402	fold.c	FUNCTION_59	IF_1	IF_2
0x40040d5	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      2403	fold.c	FUNCTION_59	IF_1	IF_2
0x40040dd	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2417	fold.c	FUNCTION_59
0x40040e1	        0x488b5008	                mov rdx, qword [rax + 8]	      2417	fold.c	FUNCTION_59
0x40040e5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2417	fold.c	FUNCTION_59
0x40040e9	        0x48895018	             mov qword [rax + 0x18], rdx	      2417	fold.c	FUNCTION_59
0x40040ed	      0xe9440a0000	                           jmp 0x4004b36	      2418	fold.c	FUNCTION_59	WHILE_1
0x40040f2	      0xe800000000	                          call 0x40040f7	      2421	fold.c	FUNCTION_59	WHILE_1	CALL_2
0x40040f7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2427	fold.c	FUNCTION_59	WHILE_1
0x40040fb	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2427	fold.c	FUNCTION_59	WHILE_1
0x40040fe	          0x8945a8	             mov dword [rbp - 0x58], eax	      2427	fold.c	FUNCTION_59	WHILE_1
0x4004101	        0x837da814	           cmp dword [rbp - 0x58], 0x14 	      2428	fold.c	FUNCTION_59	WHILE_1	IF_3
0x4004105	            0x7e07	                           jle 0x400410e	      2428	fold.c	FUNCTION_59	WHILE_1	IF_3
0x4004107	    0xc745a8140000	           mov dword [rbp - 0x58], 0x14 	      2429	fold.c	FUNCTION_59	WHILE_1	IF_3
0x400410e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004112	        0x488b4008	                mov rax, qword [rax + 8]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004116	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400411a	            0x7e26	                           jle 0x4004142	      2430	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400411c	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004120	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004123	          0x8b55a8	             mov edx, dword [rbp - 0x58]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004126	            0x29c2	                            sub edx, eax	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004128	            0x89d0	                            mov eax, edx	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400412a	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400412d	            0x7c0c	                            jl 0x400413b	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400412f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004133	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004136	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004139	            0x7f07	                            jg 0x4004142	      2431	fold.c	FUNCTION_59	WHILE_1	IF_4
0x400413b	    0xc745a8000000	               mov dword [rbp - 0x58], 0	      2432	fold.c	FUNCTION_59	WHILE_1	IF_4
0x4004142	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004146	        0x488b4008	                mov rax, qword [rax + 8]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x400414a	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004151	     0xf8e43010000	                           jle 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004157	        0x837db000	               cmp dword [rbp - 0x50], 0	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x400415b	     0xf8539010000	                           jne 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004161	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004165	          0x4885c0	                           test rax, rax	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x4004168	     0xf842c010000	                            je 0x400429a	      2434	fold.c	FUNCTION_59	WHILE_1	IF_5
0x400416e	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2442	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004179	            0x741e	                            je 0x4004199	      2442	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x400417b	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2443	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004186	            0x7411	                            je 0x4004199	      2443	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004188	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004193	     0xf85ad090000	                           jne 0x4004b46	      2444	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004199	    0xc745ac000000	               mov dword [rbp - 0x54], 0	      2446	fold.c	FUNCTION_59	WHILE_1	IF_5
0x40041a0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2447	fold.c	FUNCTION_59	WHILE_1	IF_5
0x40041a4	        0x488945c0	             mov qword [rbp - 0x40], rax	      2447	fold.c	FUNCTION_59	WHILE_1	IF_5
0x40041a8	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041ab	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041ae	            0x7c49	                            jl 0x40041f9	      2448	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041b0	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041b4	        0x488b5008	                mov rdx, qword [rax + 8]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041b8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041bc	          0x488b00	                    mov rax, qword [rax]	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041bf	          0x4829c2	                            sub rdx, rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041c2	          0x4889d0	                            mov rax, rdx	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041c5	        0x488945c8	             mov qword [rbp - 0x38], rax	      2453	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7
0x40041c9	            0xeb0f	                           jmp 0x40041da	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041cb	        0x8345ac01	               add dword [rbp - 0x54], 1	      2456	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x40041cf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x40041d3	          0x488b00	                    mov rax, qword [rax]	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x40041d6	        0x482945c8	             sub qword [rbp - 0x38], rax	      2457	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2
0x40041da	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041de	        0x488d4810	                   lea rcx, [rax + 0x10]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041e2	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041e6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041ea	          0x4889c6	                            mov rsi, rax	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041ed	          0x4889cf	                            mov rdi, rcx	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041f0	      0xe8f0d9ffff	                       call sym.foldFind	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041f5	            0x85c0	                           test eax, eax	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041f7	            0x75d2	                           jne 0x40041cb	      2454	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_7	WHILE_2	CALL_3
0x40041f9	          0x8b5594	             mov edx, dword [rbp - 0x6c]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x40041fc	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x40041ff	             0x1d0	                            add eax, edx	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4004201	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4004204	            0x7e5e	                           jle 0x4004264	      2460	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8
0x4004206	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400420a	        0x488b5008	                mov rdx, qword [rax + 8]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400420e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004212	          0x488b00	                    mov rax, qword [rax]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004215	          0x4889d6	                            mov rsi, rdx	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004218	          0x4829c6	                            sub rsi, rax	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400421b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400421f	        0x488d4810	                   lea rcx, [rax + 0x10]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004223	        0x488d45c0	                   lea rax, [rbp - 0x40]	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004227	          0x4889c2	                            mov rdx, rax	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400422a	          0x4889cf	                            mov rdi, rcx	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x400422d	      0xe8b3d9ffff	                       call sym.foldFind	      2462	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	CALL_4
0x4004232	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004236	          0x4885c0	                           test rax, rax	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004239	            0x745f	                            je 0x400429a	      2463	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x400423b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x400423f	          0x488b10	                    mov rdx, qword [rax]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004242	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004246	        0x488b4008	                mov rax, qword [rax + 8]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x400424a	          0x4801d0	                            add rax, rdx	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x400424d	        0x488d50ff	                      lea rdx, [rax - 1]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004251	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004255	          0x488b00	                    mov rax, qword [rax]	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004258	          0x4801d0	                            add rax, rdx	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x400425b	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004262	            0xeb36	                           jmp 0x400429a	      2464	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_8	IF_9
0x4004264	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004268	          0x488b10	                    mov rdx, qword [rax]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400426b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400426f	        0x488b4008	                mov rax, qword [rax + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004273	          0x4801c2	                            add rdx, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004276	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400427a	        0x488b4008	                mov rax, qword [rax + 8]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400427e	          0x4839c2	                            cmp rdx, rax	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004281	     0xf8fc3080000	                            jg 0x4004b4a	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004287	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400428a	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400428d	     0xf8cb7080000	                            jl 0x4004b4a	      2466	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x4004293	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2467	fold.c	FUNCTION_59	WHILE_1	IF_5	ELSE_1	IF_10
0x400429a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x400429e	          0x4885c0	                           test rax, rax	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042a1	     0xf8507060000	                           jne 0x40048ae	      2475	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042a7	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042aa	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042ad	     0xf85ea050000	                           jne 0x400489d	      2476	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042b3	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042b7	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042bb	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042c2	     0xf8dd5050000	                           jge 0x400489d	      2477	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042c8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042cc	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042cf	            0x85c0	                           test eax, eax	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042d1	     0xf85c6050000	                           jne 0x400489d	      2478	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042d7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042db	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042de	          0x83f814	                           cmp eax, 0x14	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042e1	     0xf8eb6050000	                           jle 0x400489d	      2479	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042e7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042eb	        0x488b4008	                mov rax, qword [rax + 8]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042ef	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042f3	     0xf85b5050000	                           jne 0x40048ae	      2480	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11
0x40042f9	      0xe99f050000	                           jmp 0x400489d	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40042fe	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004302	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004305	            0x85c0	                           test eax, eax	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004307	            0x750c	                           jne 0x4004315	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004309	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400430d	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004310	          0x83f814	                           cmp eax, 0x14	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004313	            0x7f09	                            jg 0x400431e	      2490	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x4004315	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400431c	            0xeb07	                           jmp 0x4004325	      2491	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	IF_12
0x400431e	    0xc745b4010000	               mov dword [rbp - 0x4c], 1	      2493	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3
0x4004325	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4004329	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x400432d	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4004331	          0x4889ce	                            mov rsi, rcx	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4004334	          0x4889c7	                            mov rdi, rax	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4004337	      0xe8a9d8ffff	                       call sym.foldFind	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x400433c	            0x85c0	                           test eax, eax	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x400433e	     0xf85d1000000	                           jne 0x4004415	      2498	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_5
0x4004344	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004348	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400434c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004350	            0x8b00	                    mov eax, dword [rax]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004352	          0x4863d0	                         movsxd rdx, eax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004355	          0x4889d0	                            mov rax, rdx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004358	          0x4801c0	                            add rax, rax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400435b	          0x4801d0	                            add rax, rdx	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400435e	        0x48c1e004	                              shl rax, 4	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004362	        0x488d1401	                    lea rdx, [rcx + rax]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004366	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400436a	          0x4839c2	                            cmp rdx, rax	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400436d	            0x7611	                           jbe 0x4004380	      2499	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400436f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004373	          0x488b00	                    mov rax, qword [rax]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004376	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400437a	     0xf8e95000000	                           jle 0x4004415	      2500	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004380	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004383	            0x4898	                                    cdqe	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004385	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004389	          0x4889d1	                            mov rcx, rdx	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400438c	          0x4829c1	                            sub rcx, rax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400438f	        0x488d55b8	                   lea rdx, [rbp - 0x48]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004393	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x4004397	          0x4889ce	                            mov rsi, rcx	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400439a	          0x4889c7	                            mov rdi, rax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x400439d	      0xe843d8ffff	                       call sym.foldFind	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40043a2	            0x85c0	                           test eax, eax	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40043a4	            0x756f	                           jne 0x4004415	      2501	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	CALL_6
0x40043a6	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043aa	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043ae	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043b2	            0x8b00	                    mov eax, dword [rax]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043b4	          0x4863d0	                         movsxd rdx, eax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043b7	          0x4889d0	                            mov rax, rdx	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043ba	          0x4801c0	                            add rax, rax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043bd	          0x4801d0	                            add rax, rdx	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043c0	        0x48c1e004	                              shl rax, 4	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043c4	        0x488d1401	                    lea rdx, [rcx + rax]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043c8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043cc	          0x4839c2	                            cmp rdx, rax	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043cf	     0xf869c030000	                           jbe 0x4004771	      2502	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043d5	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043d8	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043db	            0x7d14	                           jge 0x40043f1	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043dd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043e1	          0x488b10	                    mov rdx, qword [rax]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043e4	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043e8	        0x488b4008	                mov rax, qword [rax + 8]	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043ec	          0x4839c2	                            cmp rdx, rax	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043ef	            0x7c24	                            jl 0x4004415	      2503	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043f1	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043f4	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043f7	     0xf8c74030000	                            jl 0x4004771	      2504	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x40043fd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004401	          0x488b10	                    mov rdx, qword [rax]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004404	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004408	        0x488b4018	            mov rax, qword [rax + 0x18] 	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400440c	          0x4839c2	                            cmp rdx, rax	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x400440f	     0xf8f5c030000	                            jg 0x4004771	      2505	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13
0x4004415	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004419	          0x488b10	                    mov rdx, qword [rax]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x400441c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004420	        0x488b4008	                mov rax, qword [rax + 8]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004424	          0x4801c2	                            add rdx, rax	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004427	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x400442a	            0x4898	                                    cdqe	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x400442c	          0x4801d0	                            add rax, rdx	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x400442f	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004433	     0xf8e97020000	                           jle 0x40046d0	      2507	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x4004439	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x400443d	          0x488b00	                    mov rax, qword [rax]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4004440	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x4004444	     0xf84e2010000	                            je 0x400462c	      2513	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_15
0x400444a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400444e	          0x488b00	                    mov rax, qword [rax]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004451	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004455	     0xf8cb2000000	                            jl 0x400450d	      2517	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400445b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x400445f	          0x488b00	                    mov rax, qword [rax]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4004462	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4004466	            0x7e2d	                           jle 0x4004495	      2519	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4004468	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x400446c	          0x488b00	                    mov rax, qword [rax]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x400446f	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      2523	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17
0x4004473	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004477	        0x488d7a10	                   lea rdi, [rdx + 0x10]	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400447b	    0x41b800000000	                              mov r8d, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004481	          0x4889c1	                            mov rcx, rax	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004484	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004489	      0xbe00000000	                              mov esi, 0	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x400448e	      0xe8cee1ffff	          call sym.foldMarkAdjustRecurse	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004493	            0xeb40	                           jmp 0x40044d5	      2521	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	IF_17	CALL_7
0x4004495	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x4004499	          0x488b00	                    mov rax, qword [rax]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x400449c	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044a0	          0x4889c1	                            mov rcx, rax	      2530	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044a3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044a7	          0x488b00	                    mov rax, qword [rax]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044aa	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044ae	          0x4829c2	                            sub rdx, rax	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044b1	          0x4889d0	                            mov rax, rdx	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044b4	        0x488d50ff	                      lea rdx, [rax - 1]	      2528	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5
0x40044b8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044bc	        0x4883c010	                           add rax, 0x10	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044c0	          0x4989c8	                             mov r8, rcx	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044c3	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044c8	      0xbe00000000	                              mov esi, 0	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044cd	          0x4889c7	                            mov rdi, rax	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044d0	      0xe88ce1ffff	          call sym.foldMarkAdjustRecurse	      2526	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16	ELSE_5	CALL_8
0x40044d5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044d9	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044dd	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044e1	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044e5	          0x488b12	                    mov rdx, qword [rdx]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044e8	        0x482b55e8	             sub rdx, qword [rbp - 0x18]	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044ec	          0x4801ca	                            add rdx, rcx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044ef	        0x48895008	                mov qword [rax + 8], rdx	      2531	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044f3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044f7	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044fb	          0x488910	                    mov qword [rax], rdx	      2532	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x40044fe	    0xc70500000000	               mov dword [0x04004508], 1	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x4004508	      0xe91f010000	                           jmp 0x400462c	      2533	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_4	IF_16
0x400450d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004511	          0x8b4028	            mov eax, dword [rax + 0x28] 	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004514	            0x85c0	                           test eax, eax	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004516	            0x7408	                            je 0x4004520	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004518	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400451b	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400451e	            0x740e	                            je 0x400452e	      2535	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004520	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004524	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004528	     0xf84fe000000	                            je 0x400462c	      2536	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400452e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004532	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004536	            0x7412	                            je 0x400454a	      2557	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004538	        0x488b4588	             mov rax, qword [rbp - 0x78]	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x400453c	        0x488945d8	             mov qword [rbp - 0x28], rax	      2559	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004540	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004544	        0x488945e0	             mov qword [rbp - 0x20], rax	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x4004548	            0xeb18	                           jmp 0x4004562	      2560	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_19
0x400454a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x400454e	        0x488b4008	                mov rax, qword [rax + 8]	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4004552	        0x488945d8	             mov qword [rbp - 0x28], rax	      2564	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4004556	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x400455a	        0x488b4008	                mov rax, qword [rax + 8]	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x400455e	        0x488945e0	             mov qword [rbp - 0x20], rax	      2565	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	ELSE_7
0x4004562	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2568	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004566	          0x488b00	                    mov rax, qword [rax]	      2568	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004569	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400456d	          0x4829c2	                            sub rdx, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004570	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004574	          0x488b00	                    mov rax, qword [rax]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004577	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400457b	          0x4829c1	                            sub rcx, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400457e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004582	        0x4883c010	                           add rax, 0x10	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004586	          0x4889ce	                            mov rsi, rcx	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004589	          0x4889c7	                            mov rdi, rax	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x400458c	      0xe8eb0c0000	                     call sym.foldRemove	      2567	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_9
0x4004591	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004595	          0x4889c2	                            mov rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x4004598	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x400459c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045a0	          0x4829c2	                            sub rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045a3	          0x4889d0	                            mov rax, rdx	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045a6	        0x48c1f804	                              sar rax, 4	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045aa	          0x4889c2	                            mov rdx, rax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045ad	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045b7	        0x480fafc2	                           imul rax, rdx	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045bb	          0x8945ac	             mov dword [rbp - 0x54], eax	      2569	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045be	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045c2	        0x488d48ff	                      lea rcx, [rax - 1]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045c6	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045ca	          0x8b75ac	             mov esi, dword [rbp - 0x54]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045cd	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045d1	          0x4889c7	                            mov rdi, rax	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045d4	      0xe8f0090000	                      call sym.foldSplit	      2570	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	CALL_10
0x40045d9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045dd	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045e1	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045e4	            0x4898	                                    cdqe	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045e6	        0x488d5001	                      lea rdx, [rax + 1]	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045ea	          0x4889d0	                            mov rax, rdx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045ed	          0x4801c0	                            add rax, rax	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045f0	          0x4801d0	                            add rax, rdx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045f3	        0x48c1e004	                              shl rax, 4	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045f7	          0x4801c8	                            add rax, rcx	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045fa	        0x488945b8	             mov qword [rbp - 0x48], rax	      2571	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18
0x40045fe	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2576	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004609	            0x741a	                            je 0x4004625	      2576	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400460b	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2577	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004616	            0x740d	                            je 0x4004625	      2577	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004618	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004623	            0x7507	                           jne 0x400462c	      2578	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x4004625	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2579	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	ELSE_6	IF_18	IF_20
0x400462c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004630	          0x488b00	                    mov rax, qword [rax]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004633	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004637	     0xf8570020000	                           jne 0x40048ad	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400463d	        0x837db400	               cmp dword [rbp - 0x4c], 0	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004641	     0xf8466020000	                            je 0x40048ad	      2582	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004647	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400464b	          0x4889c2	                            mov rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400464e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004652	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004656	          0x4829c2	                            sub rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004659	          0x4889d0	                            mov rax, rdx	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400465c	        0x48c1f804	                              sar rax, 4	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004660	          0x4889c2	                            mov rdx, rax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004663	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x400466d	        0x480fafc2	                           imul rax, rdx	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004671	          0x8945ac	             mov dword [rbp - 0x54], eax	      2584	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21
0x4004674	        0x837dac00	               cmp dword [rbp - 0x54], 0	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004678	     0xf842f020000	                            je 0x40048ad	      2585	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400467e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004682	        0x4883e830	                           sub rax, 0x30	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x4004686	        0x488945c0	             mov qword [rbp - 0x40], rax	      2587	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22
0x400468a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400468e	          0x488b10	                    mov rdx, qword [rax]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004691	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004695	        0x488b4008	                mov rax, qword [rax + 8]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x4004699	          0x4801c2	                            add rdx, rax	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x400469c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046a0	          0x488b00	                    mov rax, qword [rax]	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046a3	          0x4839c2	                            cmp rdx, rax	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046a6	     0xf8501020000	                           jne 0x40048ad	      2588	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046ac	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046b0	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046b4	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046b8	          0x4889ce	                            mov rsi, rcx	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046bb	          0x4889c7	                            mov rdi, rax	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046be	      0xe8c2140000	                      call sym.foldMerge	      2590	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23	CALL_11
0x40046c3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046c7	        0x488945b8	             mov qword [rbp - 0x48], rax	      2591	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14	IF_21	IF_22	IF_23
0x40046cb	      0xe9dd010000	                           jmp 0x40048ad	      2595	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x40046d0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046d4	          0x488b00	                    mov rax, qword [rax]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046d7	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046db	            0x7c44	                            jl 0x4004721	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046dd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046e1	          0x4889c2	                            mov rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046e4	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046e8	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046ec	          0x4829c2	                            sub rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046ef	          0x4889d0	                            mov rax, rdx	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046f2	        0x48c1f804	                              sar rax, 4	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046f6	          0x4889c2	                            mov rdx, rax	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x40046f9	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4004703	        0x480fafc2	                           imul rax, rdx	      2603	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4004707	            0x89c1	                            mov ecx, eax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4004709	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400470d	      0xba01000000	                              mov edx, 1	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4004712	            0x89ce	                            mov esi, ecx	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4004714	          0x4889c7	                            mov rdi, rax	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4004717	      0xe8cbdbffff	                call sym.deleteFoldEntry	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x400471c	      0xe97c010000	                           jmp 0x400489d	      2602	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24	CALL_12
0x4004721	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004725	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004729	          0x488b12	                    mov rdx, qword [rdx]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400472c	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004730	          0x4829d1	                            sub rcx, rdx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004733	          0x4889ca	                            mov rdx, rcx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004736	        0x48895008	                mov qword [rax + 8], rdx	      2609	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400473a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2611	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400473e	        0x488b4008	                mov rax, qword [rax + 8]	      2611	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x4004742	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004746	        0x488d7a10	                   lea rdi, [rdx + 0x10]	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x400474a	    0x41b800000000	                              mov r8d, 0	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004750	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004755	      0xbaffffff7f	                     mov edx, 0x7fffffff	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x400475a	          0x4889c6	                            mov rsi, rax	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x400475d	      0xe8ffdeffff	          call sym.foldMarkAdjustRecurse	      2610	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8	CALL_13
0x4004762	    0xc70500000000	               mov dword [0x0400476c], 1	      2613	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	ELSE_8
0x400476c	      0xe92c010000	                           jmp 0x400489d	      2597	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_24
0x4004771	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004775	          0x4889c2	                            mov rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004778	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400477c	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004780	          0x4829c2	                            sub rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004783	          0x4889d0	                            mov rax, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004786	        0x48c1f804	                              sar rax, 4	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400478a	          0x4889c2	                            mov rdx, rax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400478d	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004797	        0x480fafc2	                           imul rax, rdx	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400479b	          0x8945ac	             mov dword [rbp - 0x54], eax	      2620	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400479e	          0x8b55ac	             mov edx, dword [rbp - 0x54]	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047a1	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047a5	            0x89d6	                            mov esi, edx	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047a7	          0x4889c7	                            mov rdi, rax	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047aa	      0xe85b070000	                     call sym.foldInsert	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047af	          0x83f801	                              cmp eax, 1	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047b2	            0x740c	                            je 0x40047c0	      2621	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25	CALL_14
0x40047b4	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2622	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25
0x40047bb	      0xe934070000	                           jmp 0x4004ef4	      2622	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_25
0x40047c0	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047c4	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047c8	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047cb	          0x4863d0	                         movsxd rdx, eax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047ce	          0x4889d0	                            mov rax, rdx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047d1	          0x4801c0	                            add rax, rax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047d4	          0x4801d0	                            add rax, rdx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047d7	        0x48c1e004	                              shl rax, 4	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047db	          0x4801c8	                            add rax, rcx	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047de	        0x488945b8	             mov qword [rbp - 0x48], rax	      2623	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047e2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047e6	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047ea	          0x488910	                    mov qword [rax], rdx	      2626	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047ed	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047f1	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047f8	        0x482b55e8	             sub rdx, qword [rbp - 0x18]	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x40047fc	        0x4883c201	                              add rdx, 1	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004800	        0x48895008	                mov qword [rax + 8], rdx	      2627	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004804	        0x837d1000	               cmp dword [rbp + 0x10], 0	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4004808	            0x7518	                           jne 0x4004822	      2631	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x400480a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x400480e	          0x488b00	                    mov rax, qword [rax]	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4004811	    0xc68020010000	               mov byte [rax + 0x120], 1	      2633	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4004818	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x400481c	        0xc6402800	                mov byte [rax + 0x28], 0	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4004820	            0xeb39	                           jmp 0x400485b	      2634	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_26
0x4004822	        0x837dac00	               cmp dword [rbp - 0x54], 0	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4004826	            0x7f20	                            jg 0x4004848	      2636	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4004828	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x400482c	          0x8b5510	            mov edx, dword [rbp + 0x10] 	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x400482f	          0x885028	               mov byte [rax + 0x28], dl	      2638	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27
0x4004832	        0x837d1002	               cmp dword [rbp + 0x10], 2	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4004836	            0x7423	                            je 0x400485b	      2639	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4004838	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x400483c	          0x488b00	                    mov rax, qword [rax]	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x400483f	    0xc68020010000	               mov byte [rax + 0x120], 1	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4004846	            0xeb13	                           jmp 0x400485b	      2640	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_10	IF_27	IF_28
0x4004848	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x400484c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4004850	        0x4883ea30	                           sub rdx, 0x30	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4004854	         0xfb65228	           movzx edx, byte [rdx + 0x28] 	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x4004858	          0x885028	               mov byte [rax + 0x28], dl	      2643	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	ELSE_11
0x400485b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400485f	        0xc6402902	                mov byte [rax + 0x29], 2	      2644	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x4004863	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2647	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400486e	            0x741a	                            je 0x400488a	      2647	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4004870	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2648	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400487b	            0x740d	                            je 0x400488a	      2648	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400487d	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4004888	            0x7507	                           jne 0x4004891	      2649	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x400488a	    0xc745b0010000	               mov dword [rbp - 0x50], 1	      2650	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9	IF_29
0x4004891	    0xc70500000000	               mov dword [0x0400489b], 1	      2651	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400489b	            0xeb11	                           jmp 0x40048ae	      2652	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_9
0x400489d	    0x8b0500000000	            mov eax, dword [0x040048a3] 	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40048a3	            0x85c0	                           test eax, eax	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40048a5	     0xf8453faffff	                            je 0x40042fe	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40048ab	            0xeb01	                           jmp 0x40048ae	      2486	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3
0x40048ad	              0x90	                                     nop	      2595	fold.c	FUNCTION_59	WHILE_1	ELSE_2	IF_11	WHILE_3	ELSE_3	IF_13	IF_14
0x40048ae	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048b1	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048b4	     0xf8c90020000	                            jl 0x4004b4a	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048ba	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048be	        0x488b4008	                mov rax, qword [rax + 8]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048c2	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048c6	     0xf8f7e020000	                            jg 0x4004b4a	      2657	fold.c	FUNCTION_59	WHILE_1	IF_30
0x40048cc	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048cf	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048d2	     0xf8e87010000	                           jle 0x4004a5f	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048d8	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048dc	          0x4885c0	                           test rax, rax	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048df	     0xf847a010000	                            je 0x4004a5f	      2670	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40048e5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048e9	        0x488b4008	                mov rax, qword [rax + 8]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048ed	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048f4	            0x7e0f	                           jle 0x4004905	      2676	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048f6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048fa	        0x488b4008	                mov rax, qword [rax + 8]	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x40048fe	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2677	fold.c	FUNCTION_59	WHILE_1	IF_31	IF_32
0x4004905	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004909	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400490d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004911	          0x488b00	                    mov rax, qword [rax]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004914	          0x4829c2	                            sub rdx, rax	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004917	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400491b	        0x48895008	                mov qword [rax + 8], rdx	      2681	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400491f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004923	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004927	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400492b	          0x488b00	                    mov rax, qword [rax]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400492e	          0x4801c2	                            add rdx, rax	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004931	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004935	        0x48895010	             mov qword [rax + 0x10], rdx	      2682	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004939	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400493d	          0x4889c2	                            mov rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004940	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004944	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004948	          0x4829c2	                            sub rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400494b	          0x4889d0	                            mov rax, rdx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400494e	        0x48c1f804	                              sar rax, 4	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004952	          0x4889c2	                            mov rdx, rax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004955	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400495f	        0x480fafc2	                           imul rax, rdx	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004963	          0x8945ac	             mov dword [rbp - 0x54], eax	      2683	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004966	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400496a	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400496e	           0xfbed0	                           movsx edx, al	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004971	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004975	          0x488b00	                    mov rax, qword [rax]	      2686	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004978	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400497f	          0x4829c1	                            sub rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004982	          0x4989c8	                             mov r8, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004985	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2685	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004989	          0x488b00	                    mov rax, qword [rax]	      2685	fold.c	FUNCTION_59	WHILE_1	IF_31
0x400498c	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004990	          0x4829c1	                            sub rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004993	          0x4989ca	                            mov r10, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004996	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x4004999	          0x8d7001	                      lea esi, [rax + 1]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x400499c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049a0	        0x488d7810	                   lea rdi, [rax + 0x10]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049a4	    0x488b8d78ffff	             mov rcx, qword [rbp - 0x88]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049ab	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049af	        0x4883ec08	                              sub rsp, 8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049b3	              0x52	                                push rdx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049b4	          0x4d89c1	                              mov r9, r8	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049b7	          0x4989c8	                             mov r8, rcx	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049ba	          0x4889c1	                            mov rcx, rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049bd	          0x4c89d2	                            mov rdx, r10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049c0	      0xe810f6ffff	          call sym.foldUpdateIEMSRecurse	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049c5	        0x4883c410	                           add rsp, 0x10	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049c9	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2684	fold.c	FUNCTION_59	WHILE_1	IF_31	CALL_15
0x40049d0	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049d4	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049d8	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049db	          0x4863d0	                         movsxd rdx, eax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049de	          0x4889d0	                            mov rax, rdx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049e1	          0x4801c0	                            add rax, rax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049e4	          0x4801d0	                            add rax, rdx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049e7	        0x48c1e004	                              shl rax, 4	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049eb	          0x4801c8	                            add rax, rcx	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049ee	        0x488945b8	             mov qword [rbp - 0x48], rax	      2687	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049f2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049f6	        0x488b5008	                mov rdx, qword [rax + 8]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049fa	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x40049fe	          0x488b00	                    mov rax, qword [rax]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a01	          0x4801c2	                            add rdx, rax	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a04	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a08	        0x48895008	                mov qword [rax + 8], rdx	      2688	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a0c	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a10	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a14	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a18	          0x488b00	                    mov rax, qword [rax]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a1b	          0x4801c2	                            add rdx, rax	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a1e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a22	        0x48895018	             mov qword [rax + 0x18], rdx	      2689	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a26	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a2a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a2e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a32	          0x488b00	                    mov rax, qword [rax]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a35	          0x4829c2	                            sub rdx, rax	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a38	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a3c	        0x48895010	             mov qword [rax + 0x10], rdx	      2690	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a40	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a44	          0x488b00	                    mov rax, qword [rax]	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a47	    0x48018570ffff	            add qword [rbp - 0x90], rax 	      2691	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a4e	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a52	        0x488b4008	                mov rax, qword [rax + 8]	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a56	        0x488945d0	             mov qword [rbp - 0x30], rax	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a5a	      0xe9d7000000	                           jmp 0x4004b36	      2692	fold.c	FUNCTION_59	WHILE_1	IF_31
0x4004a5f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a63	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a67	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a6b	        0x48895008	                mov qword [rax + 8], rdx	      2704	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a6f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a73	        0x488b4008	                mov rax, qword [rax + 8]	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a77	        0x4883c001	                              add rax, 1	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a7b	        0x488945c8	             mov qword [rbp - 0x38], rax	      2705	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004a7f	            0xeb73	                           jmp 0x4004af4	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a81	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a85	        0x488b4008	                mov rax, qword [rax + 8]	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a89	    0x488905000000	            mov qword [0x04004a90], rax 	      2709	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a90	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a94	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a97	    0x890500000000	            mov dword [0x04004a9d], eax 	      2710	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004a9d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004aa1	        0x488b4008	                mov rax, qword [rax + 8]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004aa5	        0x488d5001	                      lea rdx, [rax + 1]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004aa9	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004aad	        0x48895008	                mov qword [rax + 8], rdx	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004ab1	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004ab5	        0x488b4008	                mov rax, qword [rax + 8]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004ab9	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004abd	            0x7f41	                            jg 0x4004b00	      2712	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004abf	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004ac3	          0x8b5024	            mov edx, dword [rax + 0x24] 	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004ac6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004aca	          0x895020	             mov dword [rax + 0x20], edx	      2714	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004acd	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4004ad1	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4004ad8	          0x4889d7	                            mov rdi, rdx	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4004adb	            0xffd0	                                call rax	      2715	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	CALL_16
0x4004add	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004ae1	          0x8b4020	            mov eax, dword [rax + 0x20] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004ae4	            0x85c0	                           test eax, eax	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004ae6	            0x7919	                           jns 0x4004b01	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004ae8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004aec	          0x8b4030	            mov eax, dword [rax + 0x30] 	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004aef	          0x83f814	                           cmp eax, 0x14	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004af2	            0x7e0d	                           jle 0x4004b01	      2716	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_34
0x4004af4	    0x8b0500000000	            mov eax, dword [0x04004afa] 	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004afa	            0x85c0	                           test eax, eax	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004afc	            0x7483	                            je 0x4004a81	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004afe	            0xeb01	                           jmp 0x4004b01	      2706	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4
0x4004b00	              0x90	                                     nop	      2713	fold.c	FUNCTION_59	WHILE_1	ELSE_12	WHILE_4	IF_33
0x4004b01	    0x48c705000000	               mov qword [0x04004b0c], 0	      2719	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b0c	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4004b10	        0x488b4008	                mov rax, qword [rax + 8]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4004b14	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4004b18	            0x7f2f	                            jg 0x4004b49	      2720	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4004b1a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b1e	        0x488b5008	                mov rdx, qword [rax + 8]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b22	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b26	        0x48895018	             mov qword [rax + 0x18], rdx	      2725	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b2a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b2e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b32	        0x48895008	                mov qword [rax + 8], rdx	      2726	fold.c	FUNCTION_59	WHILE_1	ELSE_12
0x4004b36	    0x8b0500000000	            mov eax, dword [0x04004b3c] 	      2418	fold.c	FUNCTION_59	WHILE_1
0x4004b3c	            0x85c0	                           test eax, eax	      2418	fold.c	FUNCTION_59	WHILE_1
0x4004b3e	     0xf84aef5ffff	                            je 0x40040f2	      2418	fold.c	FUNCTION_59	WHILE_1
0x4004b44	            0xeb04	                           jmp 0x4004b4a	      2418	fold.c	FUNCTION_59	WHILE_1
0x4004b46	              0x90	                                     nop	      2445	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004b47	            0xeb01	                           jmp 0x4004b4a	      2445	fold.c	FUNCTION_59	WHILE_1	IF_5	IF_6
0x4004b49	              0x90	                                     nop	      2721	fold.c	FUNCTION_59	WHILE_1	ELSE_12	IF_35
0x4004b4a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2730	fold.c	FUNCTION_59	IF_36
0x4004b4e	          0x4885c0	                           test rax, rax	      2730	fold.c	FUNCTION_59	IF_36
0x4004b51	            0x750c	                           jne 0x4004b5f	      2730	fold.c	FUNCTION_59	IF_36
0x4004b53	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2731	fold.c	FUNCTION_59	IF_36
0x4004b5a	      0xe995030000	                           jmp 0x4004ef4	      2731	fold.c	FUNCTION_59	IF_36
0x4004b5f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b63	        0x488b5008	                mov rdx, qword [rax + 8]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b67	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b6b	        0x488b4808	                mov rcx, qword [rax + 8]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b6f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b73	          0x488b00	                    mov rax, qword [rax]	      2740	fold.c	FUNCTION_59	IF_37
0x4004b76	          0x4829c1	                            sub rcx, rax	      2740	fold.c	FUNCTION_59	IF_37
0x4004b79	          0x4889c8	                            mov rax, rcx	      2740	fold.c	FUNCTION_59	IF_37
0x4004b7c	          0x4839c2	                            cmp rdx, rax	      2740	fold.c	FUNCTION_59	IF_37
0x4004b7f	            0x7d2f	                           jge 0x4004bb0	      2740	fold.c	FUNCTION_59	IF_37
0x4004b81	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2742	fold.c	FUNCTION_59	IF_37
0x4004b85	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2742	fold.c	FUNCTION_59	IF_37
0x4004b89	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2742	fold.c	FUNCTION_59	IF_37
0x4004b8d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2742	fold.c	FUNCTION_59	IF_37
0x4004b91	          0x488b12	                    mov rdx, qword [rdx]	      2742	fold.c	FUNCTION_59	IF_37
0x4004b94	          0x4829d1	                            sub rcx, rdx	      2742	fold.c	FUNCTION_59	IF_37
0x4004b97	          0x4889ca	                            mov rdx, rcx	      2742	fold.c	FUNCTION_59	IF_37
0x4004b9a	        0x48895008	                mov qword [rax + 8], rdx	      2742	fold.c	FUNCTION_59	IF_37
0x4004b9e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2743	fold.c	FUNCTION_59	IF_37
0x4004ba2	        0xc6402902	                mov byte [rax + 0x29], 2	      2743	fold.c	FUNCTION_59	IF_37
0x4004ba6	    0xc70500000000	               mov dword [0x04004bb0], 1	      2744	fold.c	FUNCTION_59	IF_37
0x4004bb0	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2750	fold.c	FUNCTION_59
0x4004bb4	        0x488b4008	                mov rax, qword [rax + 8]	      2750	fold.c	FUNCTION_59
0x4004bb8	        0x488d50ff	                      lea rdx, [rax - 1]	      2750	fold.c	FUNCTION_59
0x4004bbc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2750	fold.c	FUNCTION_59
0x4004bc0	          0x488b00	                    mov rax, qword [rax]	      2750	fold.c	FUNCTION_59
0x4004bc3	          0x4829c2	                            sub rdx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bc6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bca	          0x488b00	                    mov rax, qword [rax]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bcd	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bd1	          0x4829c1	                            sub rcx, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bd4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bd8	        0x4883c010	                           add rax, 0x10	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bdc	          0x4889ce	                            mov rsi, rcx	      2749	fold.c	FUNCTION_59	CALL_17
0x4004bdf	          0x4889c7	                            mov rdi, rax	      2749	fold.c	FUNCTION_59	CALL_17
0x4004be2	      0xe895060000	                     call sym.foldRemove	      2749	fold.c	FUNCTION_59	CALL_17
0x4004be7	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2752	fold.c	FUNCTION_59	IF_38
0x4004bea	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2752	fold.c	FUNCTION_59	IF_38
0x4004bed	     0xf8d45010000	                           jge 0x4004d38	      2752	fold.c	FUNCTION_59	IF_38
0x4004bf3	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004bf7	        0x488b5008	                mov rdx, qword [rax + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004bfb	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004bff	        0x488b4808	                mov rcx, qword [rax + 8]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c03	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c07	          0x488b00	                    mov rax, qword [rax]	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c0a	          0x4829c1	                            sub rcx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c0d	          0x4889c8	                            mov rax, rcx	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c10	          0x4839c2	                            cmp rdx, rax	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c13	     0xf841f010000	                            je 0x4004d38	      2755	fold.c	FUNCTION_59	IF_38	IF_39
0x4004c19	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c1d	          0x488b10	                    mov rdx, qword [rax]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c20	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c24	        0x488b4008	                mov rax, qword [rax + 8]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c28	          0x4801d0	                            add rax, rdx	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c2b	        0x4883e801	                              sub rax, 1	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c2f	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c36	     0xf8ed5000000	                           jle 0x4004d11	      2757	fold.c	FUNCTION_59	IF_38	IF_39	IF_40
0x4004c3c	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2760	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c47	            0x741a	                            je 0x4004c63	      2760	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c49	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2761	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c54	            0x740d	                            je 0x4004c63	      2761	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c56	    0x4881bd78ffff	               cmp qword [rbp - 0x88], 0	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c61	            0x753f	                           jne 0x4004ca2	      2762	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c63	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c67	          0x488b10	                    mov rdx, qword [rax]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c6a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c6e	        0x488b4008	                mov rax, qword [rax + 8]	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c72	          0x4801d0	                            add rax, rdx	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c75	        0x4883e801	                              sub rax, 1	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c79	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2766	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c80	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c84	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c88	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c8c	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c90	          0x488b12	                    mov rdx, qword [rdx]	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c93	          0x4829d1	                            sub rcx, rdx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c96	          0x4889ca	                            mov rdx, rcx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c99	        0x48895008	                mov qword [rax + 8], rdx	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004c9d	      0xe98c000000	                           jmp 0x4004d2e	      2767	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	IF_41
0x4004ca2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004ca6	          0x4889c2	                            mov rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004ca9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cad	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cb1	          0x4829c2	                            sub rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cb4	          0x4889d0	                            mov rax, rdx	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cb7	        0x48c1f804	                              sar rax, 4	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cbb	          0x4889c2	                            mov rdx, rax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cbe	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cc8	        0x480fafc2	                           imul rax, rdx	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004ccc	          0x8945ac	             mov dword [rbp - 0x54], eax	      2773	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004ccf	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004cd3	        0x488b5008	                mov rdx, qword [rax + 8]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004cd7	    0x488b8d70ffff	             mov rcx, qword [rbp - 0x90]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004cde	          0x8b75ac	             mov esi, dword [rbp - 0x54]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004ce1	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004ce5	          0x4889c7	                            mov rdi, rax	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004ce8	      0xe8dc020000	                      call sym.foldSplit	      2774	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13	CALL_18
0x4004ced	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cf1	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cf5	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cf8	          0x4863d0	                         movsxd rdx, eax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cfb	          0x4889d0	                            mov rax, rdx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004cfe	          0x4801c0	                            add rax, rax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d01	          0x4801d0	                            add rax, rdx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d04	        0x48c1e004	                              shl rax, 4	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d08	          0x4801c8	                            add rax, rcx	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d0b	        0x488945b8	             mov qword [rbp - 0x48], rax	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d0f	            0xeb1d	                           jmp 0x4004d2e	      2775	fold.c	FUNCTION_59	IF_38	IF_39	IF_40	ELSE_13
0x4004d11	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d15	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d19	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d1d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d21	          0x488b12	                    mov rdx, qword [rdx]	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d24	          0x4829d1	                            sub rcx, rdx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d27	          0x4889ca	                            mov rdx, rcx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d2a	        0x48895008	                mov qword [rax + 8], rdx	      2779	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d2e	    0xc70500000000	               mov dword [0x04004d38], 1	      2780	fold.c	FUNCTION_59	IF_38	IF_39	ELSE_14
0x4004d38	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4004d3c	        0x4883c030	                           add rax, 0x30	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4004d40	        0x488945c0	             mov qword [rbp - 0x40], rax	      2787	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4004d44	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d48	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d4c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d50	            0x8b00	                    mov eax, dword [rax]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d52	          0x4863d0	                         movsxd rdx, eax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d55	          0x4889d0	                            mov rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d58	          0x4801c0	                            add rax, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d5b	          0x4801d0	                            add rax, rdx	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d5e	        0x48c1e004	                              shl rax, 4	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d62	        0x488d1401	                    lea rdx, [rcx + rax]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d66	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d6a	          0x4839c2	                            cmp rdx, rax	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d6d	     0xf8652010000	                           jbe 0x4004ec5	      2788	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d73	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d77	          0x488b10	                    mov rdx, qword [rax]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d7a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d7e	        0x488b4008	                mov rax, qword [rax + 8]	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d82	          0x4839c2	                            cmp rdx, rax	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d85	     0xf8f3a010000	                            jg 0x4004ec5	      2789	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_42
0x4004d8b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004d8f	          0x488b10	                    mov rdx, qword [rax]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004d92	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004d96	        0x488b4008	                mov rax, qword [rax + 8]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004d9a	          0x4801c2	                            add rdx, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004d9d	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004da1	        0x488b4008	                mov rax, qword [rax + 8]	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004da5	          0x4839c2	                            cmp rdx, rax	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004da8	     0xf8ec8000000	                           jle 0x4004e76	      2791	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004dae	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004db2	          0x488b10	                    mov rdx, qword [rax]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004db5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004db9	        0x488b4008	                mov rax, qword [rax + 8]	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dbd	          0x4839c2	                            cmp rdx, rax	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dc0	     0xf8d8f000000	                           jge 0x4004e55	      2793	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dc6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dca	          0x488b10	                    mov rdx, qword [rax]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dcd	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dd1	        0x488b4008	                mov rax, qword [rax + 8]	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dd5	          0x4889d1	                            mov rcx, rdx	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dd8	          0x4829c1	                            sub rcx, rax	      2798	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004ddb	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004ddf	        0x488b5008	                mov rdx, qword [rax + 8]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004de3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004de7	          0x488b00	                    mov rax, qword [rax]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004dea	          0x4829c2	                            sub rdx, rax	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004ded	          0x4889d0	                            mov rax, rdx	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004df0	        0x488d50ff	                      lea rdx, [rax - 1]	      2797	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004df4	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004df8	        0x4883c010	                           add rax, 0x10	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004dfc	          0x4989c8	                             mov r8, rcx	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004dff	      0xb9ffffff7f	                     mov ecx, 0x7fffffff	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004e04	      0xbe00000000	                              mov esi, 0	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004e09	          0x4889c7	                            mov rdi, rax	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004e0c	      0xe850d8ffff	          call sym.foldMarkAdjustRecurse	      2796	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44	CALL_19
0x4004e11	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e15	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e19	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e1d	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e21	        0x488b7208	                mov rsi, qword [rdx + 8]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e25	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e29	          0x488b12	                    mov rdx, qword [rdx]	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e2c	          0x4829d6	                            sub rsi, rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e2f	          0x4889f2	                            mov rdx, rsi	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e32	          0x4829d1	                            sub rcx, rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e35	          0x4889ca	                            mov rdx, rcx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e38	        0x48895008	                mov qword [rax + 8], rdx	      2799	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e3c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e40	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e44	        0x488b5208	                mov rdx, qword [rdx + 8]	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e48	          0x488910	                    mov qword [rax], rdx	      2800	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e4b	    0xc70500000000	               mov dword [0x04004e55], 1	      2801	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_44
0x4004e55	          0x8b45a8	             mov eax, dword [rbp - 0x58]	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004e58	          0x3b4594	             cmp eax, dword [rbp - 0x6c]	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004e5b	            0x7c67	                            jl 0x4004ec4	      2804	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45
0x4004e5d	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e61	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e65	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e69	          0x4889ce	                            mov rsi, rcx	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e6c	          0x4889c7	                            mov rdi, rax	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e6f	      0xe8110d0000	                      call sym.foldMerge	      2807	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43	IF_45	CALL_20
0x4004e74	            0xeb4e	                           jmp 0x4004ec4	      2809	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004e76	    0xc70500000000	               mov dword [0x04004e80], 1	      2811	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4004e80	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e84	          0x4889c2	                            mov rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e87	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e8b	        0x488b4010	            mov rax, qword [rax + 0x10] 	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e8f	          0x4829c2	                            sub rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e92	          0x4889d0	                            mov rax, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e95	        0x48c1f804	                              sar rax, 4	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e99	          0x4889c2	                            mov rdx, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004e9c	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004ea6	        0x480fafc2	                           imul rax, rdx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eaa	            0x89c1	                            mov ecx, eax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eac	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eb0	      0xba01000000	                              mov edx, 1	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eb5	            0x89ce	                            mov esi, ecx	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eb7	          0x4889c7	                            mov rdi, rax	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004eba	      0xe828d4ffff	                call sym.deleteFoldEntry	      2812	fold.c	FUNCTION_59	ELSE_14	FOR_1	CALL_21
0x4004ebf	      0xe974feffff	                           jmp 0x4004d38	      2813	fold.c	FUNCTION_59	ELSE_14	FOR_1
0x4004ec4	              0x90	                                     nop	      2809	fold.c	FUNCTION_59	ELSE_14	FOR_1	IF_43
0x4004ec5	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2817	fold.c	FUNCTION_59	IF_46
0x4004ec9	        0x488b4008	                mov rax, qword [rax + 8]	      2817	fold.c	FUNCTION_59	IF_46
0x4004ecd	        0x4883e801	                              sub rax, 1	      2817	fold.c	FUNCTION_59	IF_46
0x4004ed1	    0x483b8570ffff	             cmp rax, qword [rbp - 0x90]	      2817	fold.c	FUNCTION_59	IF_46
0x4004ed8	            0x7e13	                           jle 0x4004eed	      2817	fold.c	FUNCTION_59	IF_46
0x4004eda	        0x488b4580	             mov rax, qword [rbp - 0x80]	      2818	fold.c	FUNCTION_59	IF_46
0x4004ede	        0x488b4008	                mov rax, qword [rax + 8]	      2818	fold.c	FUNCTION_59	IF_46
0x4004ee2	        0x4883e801	                              sub rax, 1	      2818	fold.c	FUNCTION_59	IF_46
0x4004ee6	    0x48898570ffff	             mov qword [rbp - 0x90], rax	      2818	fold.c	FUNCTION_59	IF_46
0x4004eed	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	      2820	fold.c	FUNCTION_59
0x4004ef4	        0x488b7df8	                mov rdi, qword [rbp - 8]	      2821	fold.c	FUNCTION_59
0x4004ef8	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      2821	fold.c	FUNCTION_59
0x4004f01	            0x7405	                            je 0x4004f08	      2821	fold.c	FUNCTION_59
0x4004f03	      0xe800000000	                          call 0x4004f08	      2821	fold.c	FUNCTION_59
0x4004f08	              0xc9	                                   leave	      2821	fold.c	FUNCTION_59
0x4004f09	              0xc3	                                     ret	      2821	fold.c	FUNCTION_59
foldMoveTo	functions,0:DO,0:ELSE,5:FOR,2:SWITCH,0:WHILE,0:IF,20:CALL,4	217
0x40014b8	              0x55	                                push rbp	       867	fold.c	FUNCTION_30
0x40014b9	          0x4889e5	                            mov rbp, rsp	       867	fold.c	FUNCTION_30
0x40014bc	        0x4883ec60	                           sub rsp, 0x60	       867	fold.c	FUNCTION_30
0x40014c0	          0x897dac	             mov dword [rbp - 0x54], edi	       867	fold.c	FUNCTION_30
0x40014c3	          0x8975a8	             mov dword [rbp - 0x58], esi	       867	fold.c	FUNCTION_30
0x40014c6	        0x488955a0	             mov qword [rbp - 0x60], rdx	       867	fold.c	FUNCTION_30
0x40014ca	    0x64488b042528	                mov rax, qword fs:[0x28]	       867	fold.c	FUNCTION_30
0x40014d3	        0x488945f8	                mov qword [rbp - 8], rax	       867	fold.c	FUNCTION_30
0x40014d7	            0x31c0	                            xor eax, eax	       867	fold.c	FUNCTION_30
0x40014d9	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       869	fold.c	FUNCTION_30
0x40014e0	    0x488b05000000	            mov rax, qword [0x040014e7] 	       880	fold.c	FUNCTION_30	CALL_1
0x40014e7	          0x4889c7	                            mov rdi, rax	       880	fold.c	FUNCTION_30	CALL_1
0x40014ea	      0xe8c8080000	                    call sym.checkupdate	       880	fold.c	FUNCTION_30	CALL_1
0x40014ef	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       883	fold.c	FUNCTION_30	FOR_1
0x40014f7	      0xe9f6020000	                           jmp 0x40017f2	       883	fold.c	FUNCTION_30	FOR_1
0x40014fc	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       887	fold.c	FUNCTION_30	FOR_1
0x4001504	    0x488b05000000	            mov rax, qword [0x0400150b] 	       888	fold.c	FUNCTION_30	FOR_1
0x400150b	    0x480508010000	                          add rax, 0x108	       888	fold.c	FUNCTION_30	FOR_1
0x4001511	        0x488945e8	             mov qword [rbp - 0x18], rax	       888	fold.c	FUNCTION_30	FOR_1
0x4001515	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       889	fold.c	FUNCTION_30	FOR_1
0x400151c	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       890	fold.c	FUNCTION_30	FOR_1
0x4001523	    0x488b05000000	            mov rax, qword [0x0400152a] 	       891	fold.c	FUNCTION_30	FOR_1
0x400152a	        0x488b4038	            mov rax, qword [rax + 0x38] 	       891	fold.c	FUNCTION_30	FOR_1
0x400152e	        0x488945e0	             mov qword [rbp - 0x20], rax	       891	fold.c	FUNCTION_30	FOR_1
0x4001532	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       892	fold.c	FUNCTION_30	FOR_1
0x4001539	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       893	fold.c	FUNCTION_30	FOR_1
0x4001540	    0x488b05000000	            mov rax, qword [0x04001547] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001547	        0x488b4038	            mov rax, qword [rax + 0x38] 	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400154b	        0x482b45d8	             sub rax, qword [rbp - 0x28]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400154f	          0x4889c1	                            mov rcx, rax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001552	        0x488d55c8	                   lea rdx, [rbp - 0x38]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001556	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400155a	          0x4889ce	                            mov rsi, rcx	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x400155d	          0x4889c7	                            mov rdi, rax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001560	      0xe880060000	                       call sym.foldFind	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001565	            0x85c0	                           test eax, eax	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001567	            0x7578	                           jne 0x40015e1	       896	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	CALL_2
0x4001569	        0x837dac00	               cmp dword [rbp - 0x54], 0	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x400156d	     0xf842d020000	                            je 0x40017a0	       898	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x4001573	        0x837da801	               cmp dword [rbp - 0x58], 1	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4001577	            0x754c	                           jne 0x40015c5	       903	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x4001579	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400157d	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4001580	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4001584	        0x488b4010	            mov rax, qword [rax + 0x10] 	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4001588	          0x4829c2	                            sub rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400158b	          0x4889d0	                            mov rax, rdx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400158e	        0x48c1f804	                              sar rax, 4	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4001592	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x4001595	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x400159f	        0x480fafc2	                           imul rax, rdx	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015a3	          0x4889c2	                            mov rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015aa	            0x8b00	                    mov eax, dword [rax]	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015ac	            0x4898	                                    cdqe	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015ae	          0x4839c2	                            cmp rdx, rax	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015b1	     0xf8dec010000	                           jge 0x40017a3	       905	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40015b7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x40015bb	        0x4883e830	                           sub rax, 0x30	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x40015bf	        0x488945c8	             mov qword [rbp - 0x38], rax	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x40015c3	            0xeb15	                           jmp 0x40015da	       907	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3
0x40015c5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40015c9	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40015cd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40015d1	          0x4839c2	                            cmp rdx, rax	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40015d4	     0xf84cc010000	                            je 0x40017a6	       911	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40015da	    0xc745c4010000	               mov dword [rbp - 0x3c], 1	       916	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1
0x40015e1	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       919	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6
0x40015e5	            0x7543	                           jne 0x400162a	       919	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6
0x40015e7	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40015eb	    0x488b05000000	            mov rax, qword [0x040015f2] 	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40015f2	        0x4c8b45d8	              mov r8, qword [rbp - 0x28]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40015f6	        0x488d7db8	                   lea rdi, [rbp - 0x48]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40015fa	          0x8b4dc0	             mov ecx, dword [rbp - 0x40]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x40015fd	        0x488d55b4	                   lea rdx, [rbp - 0x4c]	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4001601	          0x4d89c1	                              mov r9, r8	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4001604	          0x4989f8	                             mov r8, rdi	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4001607	          0x4889c7	                            mov rdi, rax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x400160a	      0xe84b140000	                   call sym.check_closed	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x400160f	            0x85c0	                           test eax, eax	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4001611	            0x7407	                            je 0x400161a	       922	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7	CALL_3
0x4001613	    0xc745c4010000	               mov dword [rbp - 0x3c], 1	       924	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_7
0x400161a	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x400161e	            0x740a	                            je 0x400162a	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4001620	        0x837dac00	               cmp dword [rbp - 0x54], 0	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x4001624	     0xf847f010000	                            je 0x40017a9	       927	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x400162a	        0x837dac00	               cmp dword [rbp - 0x54], 0	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x400162e	     0xf84d9000000	                            je 0x400170d	       931	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9
0x4001634	        0x837da801	               cmp dword [rbp - 0x58], 1	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x4001638	            0x757a	                           jne 0x40016b4	       933	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10
0x400163a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400163e	        0x4883c030	                           add rax, 0x30	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001642	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001645	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001649	        0x488b4010	            mov rax, qword [rax + 0x10] 	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400164d	          0x4829c2	                            sub rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001650	          0x4889d0	                            mov rax, rdx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001653	        0x48c1f804	                              sar rax, 4	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001657	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400165a	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001664	        0x480fafc2	                           imul rax, rdx	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001668	          0x4889c2	                            mov rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400166b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400166f	            0x8b00	                    mov eax, dword [rax]	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001671	            0x4898	                                    cdqe	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001673	          0x4839c2	                            cmp rdx, rax	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001676	     0xf8dfe000000	                           jge 0x400177a	       936	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400167c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001680	        0x4883c030	                           add rax, 0x30	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001684	          0x488b10	                    mov rdx, qword [rax]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001687	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400168b	          0x4801d0	                            add rax, rdx	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x400168e	        0x488945f0	             mov qword [rbp - 0x10], rax	       938	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11
0x4001692	    0x488b05000000	            mov rax, qword [0x04001699] 	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x4001699	        0x488b4038	            mov rax, qword [rax + 0x38] 	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x400169d	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x40016a1	     0xf8dd3000000	                           jge 0x400177a	       939	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x40016a7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x40016ab	        0x488945e0	             mov qword [rbp - 0x20], rax	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x40016af	      0xe9c6000000	                           jmp 0x400177a	       940	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	IF_10	IF_11	IF_12
0x40016b4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016b8	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016bc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016c0	          0x4839c2	                            cmp rdx, rax	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016c3	     0xf83b1000000	                           jae 0x400177a	       946	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016c9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016cd	        0x4883e830	                           sub rax, 0x30	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016d1	          0x488b10	                    mov rdx, qword [rax]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016d4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016d8	          0x4801c2	                            add rdx, rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016db	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016df	        0x4883e830	                           sub rax, 0x30	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016e3	        0x488b4008	                mov rax, qword [rax + 8]	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016e7	          0x4801d0	                            add rax, rdx	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016ea	        0x4883e801	                              sub rax, 1	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016ee	        0x488945f0	             mov qword [rbp - 0x10], rax	       948	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13
0x40016f2	    0x488b05000000	            mov rax, qword [0x040016f9] 	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x40016f9	        0x488b4038	            mov rax, qword [rax + 0x38] 	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x40016fd	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4001701	            0x7e77	                           jle 0x400177a	       949	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4001703	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x4001707	        0x488945e0	             mov qword [rbp - 0x20], rax	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x400170b	            0xeb6d	                           jmp 0x400177a	       950	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_9	ELSE_2	IF_13	IF_14
0x400170d	        0x837da801	               cmp dword [rbp - 0x58], 1	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001711	            0x753c	                           jne 0x400174f	       958	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001713	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001717	          0x488b10	                    mov rdx, qword [rax]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x400171a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x400171e	          0x4801c2	                            add rdx, rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001721	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001725	        0x488b4008	                mov rax, qword [rax + 8]	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001729	          0x4801d0	                            add rax, rdx	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x400172c	        0x4883e801	                              sub rax, 1	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001730	        0x488945f0	             mov qword [rbp - 0x10], rax	       960	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15
0x4001734	    0x488b05000000	            mov rax, qword [0x0400173b] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x400173b	        0x488b4038	            mov rax, qword [rax + 0x38] 	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x400173f	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4001743	            0x7d35	                           jge 0x400177a	       961	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4001745	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x4001749	        0x488945e0	             mov qword [rbp - 0x20], rax	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x400174d	            0xeb2b	                           jmp 0x400177a	       962	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	IF_15	IF_16
0x400174f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4001753	          0x488b10	                    mov rdx, qword [rax]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4001756	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x400175a	          0x4801d0	                            add rax, rdx	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x400175d	        0x488945f0	             mov qword [rbp - 0x10], rax	       966	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4
0x4001761	    0x488b05000000	            mov rax, qword [0x04001768] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4001768	        0x488b4038	            mov rax, qword [rax + 0x38] 	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x400176c	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4001770	            0x7e08	                           jle 0x400177a	       967	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4001772	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x4001776	        0x488945e0	             mov qword [rbp - 0x20], rax	       968	fold.c	FUNCTION_30	FOR_1	FOR_2	ELSE_3	ELSE_4	IF_17
0x400177a	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x400177e	            0x752c	                           jne 0x40017ac	       972	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x4001780	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4001784	        0x4883c010	                           add rax, 0x10	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4001788	        0x488945e8	             mov qword [rbp - 0x18], rax	       976	fold.c	FUNCTION_30	FOR_1	FOR_2
0x400178c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4001790	          0x488b00	                    mov rax, qword [rax]	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4001793	        0x480145d8	            add qword [rbp - 0x28], rax 	       977	fold.c	FUNCTION_30	FOR_1	FOR_2
0x4001797	        0x8345c001	               add dword [rbp - 0x40], 1	       978	fold.c	FUNCTION_30	FOR_1	FOR_2
0x400179b	      0xe9a0fdffff	                           jmp 0x4001540	       979	fold.c	FUNCTION_30	FOR_1	FOR_2
0x40017a0	              0x90	                                     nop	       899	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x40017a1	            0xeb0a	                           jmp 0x40017ad	       899	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_2
0x40017a3	              0x90	                                     nop	       906	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40017a4	            0xeb07	                           jmp 0x40017ad	       906	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	IF_3	IF_4
0x40017a6	              0x90	                                     nop	       912	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40017a7	            0xeb04	                           jmp 0x40017ad	       912	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_1	ELSE_1	IF_5
0x40017a9	              0x90	                                     nop	       928	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x40017aa	            0xeb01	                           jmp 0x40017ad	       928	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_6	IF_8
0x40017ac	              0x90	                                     nop	       973	fold.c	FUNCTION_30	FOR_1	FOR_2	IF_18
0x40017ad	    0x488b05000000	            mov rax, qword [0x040017b4] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017b4	        0x488b4038	            mov rax, qword [rax + 0x38] 	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017b8	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017bc	            0x7444	                            je 0x4001802	       980	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017be	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x40017c2	            0x7505	                           jne 0x40017c9	       982	fold.c	FUNCTION_30	FOR_1	IF_19	IF_20
0x40017c4	      0xe800000000	                          call 0x40017c9	       983	fold.c	FUNCTION_30	FOR_1	IF_19	CALL_4
0x40017c9	    0x488b05000000	            mov rax, qword [0x040017d0] 	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017d0	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017d4	        0x48895038	             mov qword [rax + 0x38], rdx	       984	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017d8	    0x488b05000000	            mov rax, qword [0x040017df] 	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017df	    0xc74040000000	               mov dword [rax + 0x40], 0	       985	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017e6	    0xc745bc010000	               mov dword [rbp - 0x44], 1	       986	fold.c	FUNCTION_30	FOR_1	IF_19
0x40017ed	      0x488345d001	               add qword [rbp - 0x30], 1	       883	fold.c	FUNCTION_30	FOR_1
0x40017f2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       883	fold.c	FUNCTION_30	FOR_1
0x40017f6	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	       883	fold.c	FUNCTION_30	FOR_1
0x40017fa	     0xf8cfcfcffff	                            jl 0x40014fc	       883	fold.c	FUNCTION_30	FOR_1
0x4001800	            0xeb01	                           jmp 0x4001803	       883	fold.c	FUNCTION_30	FOR_1
0x4001802	              0x90	                                     nop	       989	fold.c	FUNCTION_30	FOR_1	ELSE_5
0x4001803	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       992	fold.c	FUNCTION_30	ELSE_5
0x4001806	        0x488b4df8	                mov rcx, qword [rbp - 8]	       993	fold.c	FUNCTION_30	ELSE_5
0x400180a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       993	fold.c	FUNCTION_30	ELSE_5
0x4001813	            0x7405	                            je 0x400181a	       993	fold.c	FUNCTION_30	ELSE_5
0x4001815	      0xe800000000	                          call 0x400181a	       993	fold.c	FUNCTION_30	ELSE_5
0x400181a	              0xc9	                                   leave	       993	fold.c	FUNCTION_30	ELSE_5
0x400181b	              0xc3	                                     ret	       993	fold.c	FUNCTION_30	ELSE_5
truncate_fold	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	26
0x40055fe	              0x55	                                push rbp	      3024	fold.c	FUNCTION_64
0x40055ff	          0x4889e5	                            mov rbp, rsp	      3024	fold.c	FUNCTION_64
0x4005602	        0x4883ec10	                           sub rsp, 0x10	      3024	fold.c	FUNCTION_64
0x4005606	        0x48897df8	                mov qword [rbp - 8], rdi	      3024	fold.c	FUNCTION_64
0x400560a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      3024	fold.c	FUNCTION_64
0x400560e	      0x488345f001	               add qword [rbp - 0x10], 1	      3025	fold.c	FUNCTION_64
0x4005613	        0x488b45f8	                mov rax, qword [rbp - 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x4005617	          0x488b00	                    mov rax, qword [rax]	      3026	fold.c	FUNCTION_64	CALL_1
0x400561a	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3026	fold.c	FUNCTION_64	CALL_1
0x400561e	          0x4889d1	                            mov rcx, rdx	      3026	fold.c	FUNCTION_64	CALL_1
0x4005621	          0x4829c1	                            sub rcx, rax	      3026	fold.c	FUNCTION_64	CALL_1
0x4005624	        0x488b45f8	                mov rax, qword [rbp - 8]	      3026	fold.c	FUNCTION_64	CALL_1
0x4005628	        0x4883c010	                           add rax, 0x10	      3026	fold.c	FUNCTION_64	CALL_1
0x400562c	      0xbaffffff7f	                     mov edx, 0x7fffffff	      3026	fold.c	FUNCTION_64	CALL_1
0x4005631	          0x4889ce	                            mov rsi, rcx	      3026	fold.c	FUNCTION_64	CALL_1
0x4005634	          0x4889c7	                            mov rdi, rax	      3026	fold.c	FUNCTION_64	CALL_1
0x4005637	      0xe840fcffff	                     call sym.foldRemove	      3026	fold.c	FUNCTION_64	CALL_1
0x400563c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3027	fold.c	FUNCTION_64
0x4005640	          0x488b00	                    mov rax, qword [rax]	      3027	fold.c	FUNCTION_64
0x4005643	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      3027	fold.c	FUNCTION_64
0x4005647	          0x4829c2	                            sub rdx, rax	      3027	fold.c	FUNCTION_64
0x400564a	        0x488b45f8	                mov rax, qword [rbp - 8]	      3027	fold.c	FUNCTION_64
0x400564e	        0x48895008	                mov qword [rax + 8], rdx	      3027	fold.c	FUNCTION_64
0x4005652	              0x90	                                     nop	      3028	fold.c	FUNCTION_64
0x4005653	              0xc9	                                   leave	      3028	fold.c	FUNCTION_64
0x4005654	              0xc3	                                     ret	      3028	fold.c	FUNCTION_64
find_wl_entry	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,3:CALL,0	54
0x4001847	              0x55	                                push rbp	      1014	fold.c	FUNCTION_32
0x4001848	          0x4889e5	                            mov rbp, rsp	      1014	fold.c	FUNCTION_32
0x400184b	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1014	fold.c	FUNCTION_32
0x400184f	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1014	fold.c	FUNCTION_32
0x4001853	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1017	fold.c	FUNCTION_32	FOR_1
0x400185a	      0xe98e000000	                           jmp 0x40018ed	      1017	fold.c	FUNCTION_32	FOR_1
0x400185f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001863	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x400186a	          0x8b45fc	                mov eax, dword [rbp - 4]	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x400186d	          0x4863d0	                         movsxd rdx, eax	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001870	          0x4889d0	                            mov rax, rdx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001873	          0x4801c0	                            add rax, rax	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001876	          0x4801d0	                            add rax, rdx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001879	        0x48c1e003	                              shl rax, 3	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x400187d	          0x4801c8	                            add rax, rcx	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001880	         0xfb6400a	            movzx eax, byte [rax + 0xa] 	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001884	            0x84c0	                             test al, al	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001886	            0x7461	                            je 0x40018e9	      1018	fold.c	FUNCTION_32	FOR_1	IF_1
0x4001888	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400188c	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4001893	          0x8b45fc	                mov eax, dword [rbp - 4]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4001896	          0x4863d0	                         movsxd rdx, eax	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x4001899	          0x4889d0	                            mov rax, rdx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400189c	          0x4801c0	                            add rax, rax	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x400189f	          0x4801d0	                            add rax, rdx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018a2	        0x48c1e003	                              shl rax, 3	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018a6	          0x4801c8	                            add rax, rcx	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018a9	          0x488b00	                    mov rax, qword [rax]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018ac	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018b0	            0x7e07	                           jle 0x40018b9	      1020	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018b2	      0xb8ffffffff	                     mov eax, 0xffffffff	      1021	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018b7	            0xeb4c	                           jmp 0x4001905	      1021	fold.c	FUNCTION_32	FOR_1	IF_1	IF_2
0x40018b9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018bd	    0x488b88000100	           mov rcx, qword [rax + 0x100] 	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018c4	          0x8b45fc	                mov eax, dword [rbp - 4]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018c7	          0x4863d0	                         movsxd rdx, eax	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018ca	          0x4889d0	                            mov rax, rdx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018cd	          0x4801c0	                            add rax, rax	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018d0	          0x4801d0	                            add rax, rdx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018d3	        0x48c1e003	                              shl rax, 3	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018d7	          0x4801c8	                            add rax, rcx	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018da	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018de	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018e2	            0x7c05	                            jl 0x40018e9	      1022	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018e4	          0x8b45fc	                mov eax, dword [rbp - 4]	      1023	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018e7	            0xeb1c	                           jmp 0x4001905	      1023	fold.c	FUNCTION_32	FOR_1	IF_1	IF_3
0x40018e9	        0x8345fc01	                  add dword [rbp - 4], 1	      1017	fold.c	FUNCTION_32	FOR_1
0x40018ed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1017	fold.c	FUNCTION_32	FOR_1
0x40018f1	    0x8b80f8000000	            mov eax, dword [rax + 0xf8] 	      1017	fold.c	FUNCTION_32	FOR_1
0x40018f7	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1017	fold.c	FUNCTION_32	FOR_1
0x40018fa	     0xf8f5fffffff	                            jg 0x400185f	      1017	fold.c	FUNCTION_32	FOR_1
0x4001900	      0xb8ffffffff	                     mov eax, 0xffffffff	      1025	fold.c	FUNCTION_32
0x4001905	              0x5d	                                 pop rbp	      1026	fold.c	FUNCTION_32
0x4001906	              0xc3	                                     ret	      1026	fold.c	FUNCTION_32
foldLevel	functions,0:DO,0:ELSE,2:FOR,0:SWITCH,0:WHILE,0:IF,4:CALL,3	41
0x4000418	              0x55	                                push rbp	       251	fold.c	FUNCTION_5
0x4000419	          0x4889e5	                            mov rbp, rsp	       251	fold.c	FUNCTION_5
0x400041c	        0x4883ec10	                           sub rsp, 0x10	       251	fold.c	FUNCTION_5
0x4000420	        0x48897df8	                mov qword [rbp - 8], rdi	       251	fold.c	FUNCTION_5
0x4000424	    0x488b05000000	            mov rax, qword [0x0400042b] 	       254	fold.c	FUNCTION_5	IF_1
0x400042b	          0x4885c0	                           test rax, rax	       254	fold.c	FUNCTION_5	IF_1
0x400042e	            0x7511	                           jne 0x4000441	       254	fold.c	FUNCTION_5	IF_1
0x4000430	    0x488b05000000	            mov rax, qword [0x04000437] 	       255	fold.c	FUNCTION_5	CALL_1
0x4000437	          0x4889c7	                            mov rdi, rax	       255	fold.c	FUNCTION_5	CALL_1
0x400043a	      0xe878190000	                    call sym.checkupdate	       255	fold.c	FUNCTION_5	CALL_1
0x400043f	            0xeb40	                           jmp 0x4000481	       255	fold.c	FUNCTION_5	CALL_1
0x4000441	    0x488b05000000	            mov rax, qword [0x04000448] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4000448	        0x483945f8	                cmp qword [rbp - 8], rax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x400044c	            0x7512	                           jne 0x4000460	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x400044e	    0x8b0500000000	            mov eax, dword [0x04000454] 	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4000454	            0x85c0	                           test eax, eax	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4000456	            0x7808	                            js 0x4000460	       256	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4000458	    0x8b0500000000	            mov eax, dword [0x0400045e] 	       257	fold.c	FUNCTION_5	ELSE_1	IF_2
0x400045e	            0xeb51	                           jmp 0x40004b1	       257	fold.c	FUNCTION_5	ELSE_1	IF_2
0x4000460	    0x488b05000000	            mov rax, qword [0x04000467] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4000467	        0x483945f8	                cmp qword [rbp - 8], rax	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x400046b	            0x7c14	                            jl 0x4000481	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x400046d	    0x488b05000000	            mov rax, qword [0x04000474] 	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4000474	        0x483945f8	                cmp qword [rbp - 8], rax	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4000478	            0x7f07	                            jg 0x4000481	       258	fold.c	FUNCTION_5	ELSE_2	IF_3
0x400047a	      0xb8ffffffff	                     mov eax, 0xffffffff	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x400047f	            0xeb30	                           jmp 0x40004b1	       259	fold.c	FUNCTION_5	ELSE_2	IF_3
0x4000481	    0x488b05000000	            mov rax, qword [0x04000488] 	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4000488	          0x4889c7	                            mov rdi, rax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x400048b	      0xe800000000	                          call 0x4000490	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4000490	            0x85c0	                           test eax, eax	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4000492	            0x7507	                           jne 0x400049b	       262	fold.c	FUNCTION_5	IF_4	CALL_2
0x4000494	      0xb800000000	                              mov eax, 0	       263	fold.c	FUNCTION_5	IF_4
0x4000499	            0xeb16	                           jmp 0x40004b1	       263	fold.c	FUNCTION_5	IF_4
0x400049b	    0x488b05000000	            mov rax, qword [0x040004a2] 	       265	fold.c	FUNCTION_5	CALL_3
0x40004a2	        0x488b55f8	                mov rdx, qword [rbp - 8]	       265	fold.c	FUNCTION_5	CALL_3
0x40004a6	          0x4889d6	                            mov rsi, rdx	       265	fold.c	FUNCTION_5	CALL_3
0x40004a9	          0x4889c7	                            mov rdi, rax	       265	fold.c	FUNCTION_5	CALL_3
0x40004ac	      0xe878180000	                   call sym.foldLevelWin	       265	fold.c	FUNCTION_5	CALL_3
0x40004b1	              0xc9	                                   leave	       266	fold.c	FUNCTION_5
0x40004b2	              0xc3	                                     ret	       266	fold.c	FUNCTION_5
foldOpenNested	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,0:CALL,1	38
0x400226d	              0x55	                                push rbp	      1379	fold.c	FUNCTION_42
0x400226e	          0x4889e5	                            mov rbp, rsp	      1379	fold.c	FUNCTION_42
0x4002271	        0x4883ec20	                           sub rsp, 0x20	      1379	fold.c	FUNCTION_42
0x4002275	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1379	fold.c	FUNCTION_42
0x4002279	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1383	fold.c	FUNCTION_42
0x400227d	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1383	fold.c	FUNCTION_42
0x4002281	        0x488945f8	                mov qword [rbp - 8], rax	      1383	fold.c	FUNCTION_42
0x4002285	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1384	fold.c	FUNCTION_42	FOR_1
0x400228c	            0xeb4a	                           jmp 0x40022d8	      1384	fold.c	FUNCTION_42	FOR_1
0x400228e	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x4002291	          0x4863d0	                         movsxd rdx, eax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x4002294	          0x4889d0	                            mov rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x4002297	          0x4801c0	                            add rax, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x400229a	          0x4801d0	                            add rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x400229d	        0x48c1e004	                              shl rax, 4	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022a1	          0x4889c2	                            mov rdx, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022a4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022a8	          0x4801d0	                            add rax, rdx	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022ab	          0x4889c7	                            mov rdi, rax	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022ae	      0xe8baffffff	                 call sym.foldOpenNested	      1386	fold.c	FUNCTION_42	FOR_1	CALL_1
0x40022b3	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1387	fold.c	FUNCTION_42	FOR_1
0x40022b6	          0x4863d0	                         movsxd rdx, eax	      1387	fold.c	FUNCTION_42	FOR_1
0x40022b9	          0x4889d0	                            mov rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x40022bc	          0x4801c0	                            add rax, rax	      1387	fold.c	FUNCTION_42	FOR_1
0x40022bf	          0x4801d0	                            add rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x40022c2	        0x48c1e004	                              shl rax, 4	      1387	fold.c	FUNCTION_42	FOR_1
0x40022c6	          0x4889c2	                            mov rdx, rax	      1387	fold.c	FUNCTION_42	FOR_1
0x40022c9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1387	fold.c	FUNCTION_42	FOR_1
0x40022cd	          0x4801d0	                            add rax, rdx	      1387	fold.c	FUNCTION_42	FOR_1
0x40022d0	        0xc6402800	                mov byte [rax + 0x28], 0	      1387	fold.c	FUNCTION_42	FOR_1
0x40022d4	        0x8345f401	                add dword [rbp - 0xc], 1	      1384	fold.c	FUNCTION_42	FOR_1
0x40022d8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1384	fold.c	FUNCTION_42	FOR_1
0x40022dc	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1384	fold.c	FUNCTION_42	FOR_1
0x40022df	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1384	fold.c	FUNCTION_42	FOR_1
0x40022e2	            0x7faa	                            jg 0x400228e	      1384	fold.c	FUNCTION_42	FOR_1
0x40022e4	              0x90	                                     nop	      1389	fold.c	FUNCTION_42
0x40022e5	              0xc9	                                   leave	      1389	fold.c	FUNCTION_42
0x40022e6	              0xc3	                                     ret	      1389	fold.c	FUNCTION_42
foldCreate	functions,0:DO,0:ELSE,2:FOR,3:SWITCH,0:WHILE,0:IF,15:CALL,11	332
0x4000bd7	              0x55	                                push rbp	       576	fold.c	FUNCTION_25
0x4000bd8	          0x4889e5	                            mov rbp, rsp	       576	fold.c	FUNCTION_25
0x4000bdb	        0x4883ec70	                           sub rsp, 0x70	       576	fold.c	FUNCTION_25
0x4000bdf	        0x48897d98	             mov qword [rbp - 0x68], rdi	       576	fold.c	FUNCTION_25
0x4000be3	        0x48897590	             mov qword [rbp - 0x70], rsi	       576	fold.c	FUNCTION_25
0x4000be7	    0x64488b042528	                mov rax, qword fs:[0x28]	       576	fold.c	FUNCTION_25
0x4000bf0	        0x488945f8	                mov qword [rbp - 8], rax	       576	fold.c	FUNCTION_25
0x4000bf4	            0x31c0	                            xor eax, eax	       576	fold.c	FUNCTION_25
0x4000bf6	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       582	fold.c	FUNCTION_25
0x4000bfd	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       583	fold.c	FUNCTION_25
0x4000c04	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       584	fold.c	FUNCTION_25
0x4000c0b	        0x488b4598	             mov rax, qword [rbp - 0x68]	       585	fold.c	FUNCTION_25
0x4000c0f	        0x488945d0	             mov qword [rbp - 0x30], rax	       585	fold.c	FUNCTION_25
0x4000c13	        0x488b4590	             mov rax, qword [rbp - 0x70]	       586	fold.c	FUNCTION_25
0x4000c17	        0x488945d8	             mov qword [rbp - 0x28], rax	       586	fold.c	FUNCTION_25
0x4000c1b	        0x488b4598	             mov rax, qword [rbp - 0x68]	       588	fold.c	FUNCTION_25	IF_1
0x4000c1f	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       588	fold.c	FUNCTION_25	IF_1
0x4000c23	            0x7e20	                           jle 0x4000c45	       588	fold.c	FUNCTION_25	IF_1
0x4000c25	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       591	fold.c	FUNCTION_25	IF_1
0x4000c29	        0x48894590	             mov qword [rbp - 0x70], rax	       591	fold.c	FUNCTION_25	IF_1
0x4000c2d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       592	fold.c	FUNCTION_25	IF_1
0x4000c31	        0x48894598	             mov qword [rbp - 0x68], rax	       592	fold.c	FUNCTION_25	IF_1
0x4000c35	        0x488b4598	             mov rax, qword [rbp - 0x68]	       593	fold.c	FUNCTION_25	IF_1
0x4000c39	        0x488945d0	             mov qword [rbp - 0x30], rax	       593	fold.c	FUNCTION_25	IF_1
0x4000c3d	        0x488b4590	             mov rax, qword [rbp - 0x70]	       594	fold.c	FUNCTION_25	IF_1
0x4000c41	        0x488945d8	             mov qword [rbp - 0x28], rax	       594	fold.c	FUNCTION_25	IF_1
0x4000c45	    0x488b05000000	            mov rax, qword [0x04000c4c] 	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4000c4c	          0x4889c7	                            mov rdi, rax	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4000c4f	      0xe800000000	                          call 0x4000c54	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4000c54	            0x85c0	                           test eax, eax	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4000c56	            0x7418	                            je 0x4000c70	       598	fold.c	FUNCTION_25	IF_2	CALL_1
0x4000c58	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c5c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c60	          0x4889d6	                            mov rsi, rdx	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c63	          0x4889c7	                            mov rdi, rax	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c66	      0xe8e91f0000	              call sym.foldCreateMarkers	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c6b	      0xe908040000	                           jmp 0x4001078	       600	fold.c	FUNCTION_25	IF_2	CALL_2
0x4000c70	    0x488b05000000	            mov rax, qword [0x04000c77] 	       604	fold.c	FUNCTION_25	CALL_3
0x4000c77	          0x4889c7	                            mov rdi, rax	       604	fold.c	FUNCTION_25	CALL_3
0x4000c7a	      0xe838110000	                    call sym.checkupdate	       604	fold.c	FUNCTION_25	CALL_3
0x4000c7f	    0x488b05000000	            mov rax, qword [0x04000c86] 	       607	fold.c	FUNCTION_25
0x4000c86	    0x480508010000	                          add rax, 0x108	       607	fold.c	FUNCTION_25
0x4000c8c	        0x488945c8	             mov qword [rbp - 0x38], rax	       607	fold.c	FUNCTION_25
0x4000c90	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000c94	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000c98	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000c9c	          0x4889ce	                            mov rsi, rcx	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000c9f	          0x4889c7	                            mov rdi, rax	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000ca2	      0xe83e0f0000	                       call sym.foldFind	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000ca7	            0x85c0	                           test eax, eax	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000ca9	     0xf8491000000	                            je 0x4000d40	       610	fold.c	FUNCTION_25	FOR_1	IF_3	CALL_4
0x4000caf	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cb3	          0x488b10	                    mov rdx, qword [rax]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cb6	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cba	        0x488b4008	                mov rax, qword [rax + 8]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cbe	          0x4801d0	                            add rax, rdx	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cc1	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cc5	            0x7e7c	                           jle 0x4000d43	       612	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cc7	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000ccb	        0x4883c010	                           add rax, 0x10	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000ccf	        0x488945c8	             mov qword [rbp - 0x38], rax	       615	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cd3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cd7	          0x488b00	                    mov rax, qword [rax]	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cda	        0x482945d0	             sub qword [rbp - 0x30], rax	       616	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000cde	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000ce2	          0x488b00	                    mov rax, qword [rax]	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000ce5	        0x482945d8	             sub qword [rbp - 0x28], rax	       617	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000ce9	        0x837db400	               cmp dword [rbp - 0x4c], 0	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000ced	            0x750c	                           jne 0x4000cfb	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000cef	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000cf3	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000cf7	            0x3c02	                               cmp al, 2	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000cf9	            0x7529	                           jne 0x4000d24	       618	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000cfb	    0xc745b4010000	               mov dword [rbp - 0x4c], 1	       620	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5
0x4000d02	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d05	          0x4863d0	                         movsxd rdx, eax	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d08	    0x488b05000000	            mov rax, qword [0x04000d0f] 	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d0f	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d16	          0x4839c2	                            cmp rdx, rax	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d19	            0x7c1c	                            jl 0x4000d37	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d1b	    0xc745b8010000	               mov dword [rbp - 0x48], 1	       622	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d22	            0xeb13	                           jmp 0x4000d37	       621	fold.c	FUNCTION_25	FOR_1	IF_4	IF_5	IF_6
0x4000d24	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4000d28	         0xfb64028	           movzx eax, byte [rax + 0x28] 	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4000d2c	            0x3c01	                               cmp al, 1	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4000d2e	            0x7507	                           jne 0x4000d37	       624	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4000d30	    0xc745b8010000	               mov dword [rbp - 0x48], 1	       625	fold.c	FUNCTION_25	FOR_1	IF_4	ELSE_1	IF_7
0x4000d37	        0x8345bc01	               add dword [rbp - 0x44], 1	       626	fold.c	FUNCTION_25	FOR_1	IF_4
0x4000d3b	      0xe950ffffff	                           jmp 0x4000c90	       634	fold.c	FUNCTION_25	FOR_1
0x4000d40	              0x90	                                     nop	       611	fold.c	FUNCTION_25	FOR_1	IF_3
0x4000d41	            0xeb01	                           jmp 0x4000d44	       611	fold.c	FUNCTION_25	FOR_1	IF_3
0x4000d43	              0x90	                                     nop	       632	fold.c	FUNCTION_25	FOR_1	ELSE_2
0x4000d44	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       636	fold.c	FUNCTION_25
0x4000d48	          0x4889c2	                            mov rdx, rax	       636	fold.c	FUNCTION_25
0x4000d4b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       636	fold.c	FUNCTION_25
0x4000d4f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       636	fold.c	FUNCTION_25
0x4000d53	          0x4829c2	                            sub rdx, rax	       636	fold.c	FUNCTION_25
0x4000d56	          0x4889d0	                            mov rax, rdx	       636	fold.c	FUNCTION_25
0x4000d59	        0x48c1f804	                              sar rax, 4	       636	fold.c	FUNCTION_25
0x4000d5d	          0x4889c2	                            mov rdx, rax	       636	fold.c	FUNCTION_25
0x4000d60	    0x48b8abaaaaaa	          movabs rax, 0xaaaaaaaaaaaaaaab	       636	fold.c	FUNCTION_25
0x4000d6a	        0x480fafc2	                           imul rax, rdx	       636	fold.c	FUNCTION_25
0x4000d6e	          0x8945a8	             mov dword [rbp - 0x58], eax	       636	fold.c	FUNCTION_25
0x4000d71	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d75	      0xbe01000000	                              mov esi, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d7a	          0x4889c7	                            mov rdi, rax	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d7d	      0xe800000000	                          call 0x4000d82	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d82	          0x83f801	                              cmp eax, 1	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d85	     0xf85ed020000	                           jne 0x4001078	       637	fold.c	FUNCTION_25	IF_8	CALL_5
0x4000d8b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       639	fold.c	FUNCTION_25	IF_8
0x4000d8f	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       639	fold.c	FUNCTION_25	IF_8
0x4000d93	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       639	fold.c	FUNCTION_25	IF_8
0x4000d96	          0x4863d0	                         movsxd rdx, eax	       639	fold.c	FUNCTION_25	IF_8
0x4000d99	          0x4889d0	                            mov rax, rdx	       639	fold.c	FUNCTION_25	IF_8
0x4000d9c	          0x4801c0	                            add rax, rax	       639	fold.c	FUNCTION_25	IF_8
0x4000d9f	          0x4801d0	                            add rax, rdx	       639	fold.c	FUNCTION_25	IF_8
0x4000da2	        0x48c1e004	                              shl rax, 4	       639	fold.c	FUNCTION_25	IF_8
0x4000da6	          0x4801c8	                            add rax, rcx	       639	fold.c	FUNCTION_25	IF_8
0x4000da9	        0x488945c0	             mov qword [rbp - 0x40], rax	       639	fold.c	FUNCTION_25	IF_8
0x4000dad	        0x488d45e0	                   lea rax, [rbp - 0x20]	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4000db1	      0xba0a000000	                            mov edx, 0xa	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4000db6	      0xbe30000000	                           mov esi, 0x30	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4000dbb	          0x4889c7	                            mov rdi, rax	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4000dbe	      0xe800000000	                          call 0x4000dc3	       640	fold.c	FUNCTION_25	IF_8	CALL_6
0x4000dc3	    0xc745b0000000	               mov dword [rbp - 0x50], 0	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000dca	            0xeb27	                           jmp 0x4000df3	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000dcc	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000dd0	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000dd3	          0x4863d0	                         movsxd rdx, eax	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000dd6	          0x4889d0	                            mov rax, rdx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000dd9	          0x4801c0	                            add rax, rax	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000ddc	          0x4801d0	                            add rax, rdx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000ddf	        0x48c1e004	                              shl rax, 4	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000de3	          0x4801c8	                            add rax, rcx	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000de6	          0x488b00	                    mov rax, qword [rax]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000de9	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000ded	            0x7f18	                            jg 0x4000e07	       644	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000def	        0x8345b001	               add dword [rbp - 0x50], 1	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000df3	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000df6	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000df9	             0x1c2	                            add edx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000dfb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000dff	            0x8b00	                    mov eax, dword [rax]	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000e01	            0x39c2	                            cmp edx, eax	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000e03	            0x7cc7	                            jl 0x4000dcc	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000e05	            0xeb01	                           jmp 0x4000e08	       643	fold.c	FUNCTION_25	IF_8	FOR_2
0x4000e07	              0x90	                                     nop	       645	fold.c	FUNCTION_25	IF_8	FOR_2	IF_9
0x4000e08	        0x837db000	               cmp dword [rbp - 0x50], 0	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e0c	     0xf8e5d010000	                           jle 0x4000f6f	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e12	          0x8b55b0	             mov edx, dword [rbp - 0x50]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e15	        0x488d45e0	                   lea rax, [rbp - 0x20]	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e19	            0x89d6	                            mov esi, edx	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e1b	          0x4889c7	                            mov rdi, rax	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e1e	      0xe800000000	                          call 0x4000e23	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e23	          0x83f801	                              cmp eax, 1	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e26	     0xf8543010000	                           jne 0x4000f6f	       646	fold.c	FUNCTION_25	IF_8	IF_10	CALL_7
0x4000e2c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e30	          0x488b00	                    mov rax, qword [rax]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e33	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e37	            0x7d0b	                           jge 0x4000e44	       650	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e39	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e3d	          0x488b00	                    mov rax, qword [rax]	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e40	        0x488945d0	             mov qword [rbp - 0x30], rax	       651	fold.c	FUNCTION_25	IF_8	IF_10	IF_11
0x4000e44	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e48	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e4b	          0x4863d0	                         movsxd rdx, eax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e4e	          0x4889d0	                            mov rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e51	          0x4801c0	                            add rax, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e54	          0x4801d0	                            add rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e57	        0x48c1e004	                              shl rax, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e5b	        0x4883e830	                           sub rax, 0x30	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e5f	          0x4801c8	                            add rax, rcx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e62	          0x488b08	                    mov rcx, qword [rax]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e65	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e69	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e6c	          0x4863d0	                         movsxd rdx, eax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e6f	          0x4889d0	                            mov rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e72	          0x4801c0	                            add rax, rax	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e75	          0x4801d0	                            add rax, rdx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e78	        0x48c1e004	                              shl rax, 4	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e7c	        0x4883e830	                           sub rax, 0x30	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e80	          0x4801f0	                            add rax, rsi	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e83	        0x488b4008	                mov rax, qword [rax + 8]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e87	          0x4801c8	                            add rax, rcx	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e8a	        0x4883e801	                              sub rax, 1	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e8e	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e92	            0x7e4e	                           jle 0x4000ee2	       655	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e94	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e98	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e9b	          0x4863d0	                         movsxd rdx, eax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000e9e	          0x4889d0	                            mov rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ea1	          0x4801c0	                            add rax, rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ea4	          0x4801d0	                            add rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ea7	        0x48c1e004	                              shl rax, 4	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eab	        0x4883e830	                           sub rax, 0x30	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eaf	          0x4801c8	                            add rax, rcx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eb2	          0x488b08	                    mov rcx, qword [rax]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eb5	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eb9	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ebc	          0x4863d0	                         movsxd rdx, eax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ebf	          0x4889d0	                            mov rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ec2	          0x4801c0	                            add rax, rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ec5	          0x4801d0	                            add rax, rdx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ec8	        0x48c1e004	                              shl rax, 4	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ecc	        0x4883e830	                           sub rax, 0x30	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ed0	          0x4801f0	                            add rax, rsi	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ed3	        0x488b4008	                mov rax, qword [rax + 8]	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ed7	          0x4801c8	                            add rax, rcx	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000eda	        0x4883e801	                              sub rax, 1	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ede	        0x488945d8	             mov qword [rbp - 0x28], rax	       656	fold.c	FUNCTION_25	IF_8	IF_10	IF_12
0x4000ee2	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000ee5	          0x4863d0	                         movsxd rdx, eax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000ee8	          0x4889d0	                            mov rax, rdx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000eeb	          0x4801c0	                            add rax, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000eee	          0x4801d0	                            add rax, rdx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000ef1	        0x48c1e004	                              shl rax, 4	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000ef5	          0x4889c2	                            mov rdx, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000ef8	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000efc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000f00	          0x4889ce	                            mov rsi, rcx	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000f03	          0x4889c7	                            mov rdi, rax	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000f06	      0xe800000000	                          call 0x4000f0b	       658	fold.c	FUNCTION_25	IF_8	IF_10	CALL_8
0x4000f0b	          0x8b55e0	             mov edx, dword [rbp - 0x20]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f0e	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f11	             0x1d0	                            add eax, edx	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f13	          0x8945e0	             mov dword [rbp - 0x20], eax	       659	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f16	          0x8b45b0	             mov eax, dword [rbp - 0x50]	       660	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f19	           0x145a8	             add dword [rbp - 0x58], eax	       660	fold.c	FUNCTION_25	IF_8	IF_10
0x4000f1c	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f23	            0xeb42	                           jmp 0x4000f67	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f25	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f29	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f2c	          0x4863d0	                         movsxd rdx, eax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f2f	          0x4889d0	                            mov rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f32	          0x4801c0	                            add rax, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f35	          0x4801d0	                            add rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f38	        0x48c1e004	                              shl rax, 4	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f3c	          0x4801c1	                            add rcx, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f3f	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f43	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f46	          0x4863d0	                         movsxd rdx, eax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f49	          0x4889d0	                            mov rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f4c	          0x4801c0	                            add rax, rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f4f	          0x4801d0	                            add rax, rdx	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f52	        0x48c1e004	                              shl rax, 4	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f56	          0x4801f0	                            add rax, rsi	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f59	          0x488b00	                    mov rax, qword [rax]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f5c	        0x482b45d0	             sub rax, qword [rbp - 0x30]	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f60	          0x488901	                    mov qword [rcx], rax	       665	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f63	        0x8345ac01	               add dword [rbp - 0x54], 1	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f67	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f6a	          0x3b45b0	             cmp eax, dword [rbp - 0x50]	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f6d	            0x7cb6	                            jl 0x4000f25	       664	fold.c	FUNCTION_25	IF_8	IF_10	FOR_3
0x4000f6f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4000f73	            0x8b00	                    mov eax, dword [rax]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4000f75	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4000f78	            0x7e50	                           jle 0x4000fca	       668	fold.c	FUNCTION_25	IF_8	IF_13
0x4000f7a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f7e	            0x8b00	                    mov eax, dword [rax]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f80	          0x2b45a8	             sub eax, dword [rbp - 0x58]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f83	          0x4863d0	                         movsxd rdx, eax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f86	          0x4889d0	                            mov rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f89	          0x4801c0	                            add rax, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f8c	          0x4801d0	                            add rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f8f	        0x48c1e004	                              shl rax, 4	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f93	          0x4889c6	                            mov rsi, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f96	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f9a	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000f9e	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fa1	          0x4863d0	                         movsxd rdx, eax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fa4	          0x4889d0	                            mov rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fa7	          0x4801c0	                            add rax, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000faa	          0x4801d0	                            add rax, rdx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fad	        0x48c1e004	                              shl rax, 4	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fb1	          0x4801c1	                            add rcx, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fb4	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fb8	        0x4883c030	                           add rax, 0x30	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fbc	          0x4889f2	                            mov rdx, rsi	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fbf	          0x4889ce	                            mov rsi, rcx	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fc2	          0x4889c7	                            mov rdi, rax	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fc5	      0xe800000000	                          call 0x4000fca	       669	fold.c	FUNCTION_25	IF_8	IF_13	CALL_9
0x4000fca	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       671	fold.c	FUNCTION_25	IF_8
0x4000fce	            0x8b00	                    mov eax, dword [rax]	       671	fold.c	FUNCTION_25	IF_8
0x4000fd0	          0x83c001	                              add eax, 1	       671	fold.c	FUNCTION_25	IF_8
0x4000fd3	          0x2b45b0	             sub eax, dword [rbp - 0x50]	       671	fold.c	FUNCTION_25	IF_8
0x4000fd6	            0x89c2	                            mov edx, eax	       671	fold.c	FUNCTION_25	IF_8
0x4000fd8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       671	fold.c	FUNCTION_25	IF_8
0x4000fdc	            0x8910	                    mov dword [rax], edx	       671	fold.c	FUNCTION_25	IF_8
0x4000fde	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       674	fold.c	FUNCTION_25	IF_8
0x4000fe2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       674	fold.c	FUNCTION_25	IF_8
0x4000fe6	        0x48895010	             mov qword [rax + 0x10], rdx	       674	fold.c	FUNCTION_25	IF_8
0x4000fea	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       674	fold.c	FUNCTION_25	IF_8
0x4000fee	        0x48895018	             mov qword [rax + 0x18], rdx	       674	fold.c	FUNCTION_25	IF_8
0x4000ff2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       674	fold.c	FUNCTION_25	IF_8
0x4000ff6	        0x48895020	             mov qword [rax + 0x20], rdx	       674	fold.c	FUNCTION_25	IF_8
0x4000ffa	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       675	fold.c	FUNCTION_25	IF_8
0x4000ffe	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       675	fold.c	FUNCTION_25	IF_8
0x4001002	          0x488910	                    mov qword [rax], rdx	       675	fold.c	FUNCTION_25	IF_8
0x4001005	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       676	fold.c	FUNCTION_25	IF_8
0x4001009	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       676	fold.c	FUNCTION_25	IF_8
0x400100d	        0x482b55d0	             sub rdx, qword [rbp - 0x30]	       676	fold.c	FUNCTION_25	IF_8
0x4001011	        0x4883c201	                              add rdx, 1	       676	fold.c	FUNCTION_25	IF_8
0x4001015	        0x48895008	                mov qword [rax + 8], rdx	       676	fold.c	FUNCTION_25	IF_8
0x4001019	        0x837db400	               cmp dword [rbp - 0x4c], 0	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400101d	            0x7430	                            je 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400101f	        0x837db800	               cmp dword [rbp - 0x48], 0	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4001023	            0x752a	                           jne 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4001025	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4001028	          0x4863d0	                         movsxd rdx, eax	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400102b	    0x488b05000000	            mov rax, qword [0x04001032] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4001032	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x4001039	          0x4839c2	                            cmp rdx, rax	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400103c	            0x7d11	                           jge 0x400104f	       681	fold.c	FUNCTION_25	IF_8	IF_14
0x400103e	        0x488b4598	             mov rax, qword [rbp - 0x68]	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x4001042	      0xbe01000000	                              mov esi, 1	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x4001047	          0x4889c7	                            mov rdi, rax	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x400104a	      0xe800000000	                          call 0x400104f	       682	fold.c	FUNCTION_25	IF_8	CALL_10
0x400104f	        0x837db400	               cmp dword [rbp - 0x4c], 0	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x4001053	            0x750e	                           jne 0x4001063	       683	fold.c	FUNCTION_25	IF_8	IF_15
0x4001055	    0x488b05000000	            mov rax, qword [0x0400105c] 	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x400105c	    0xc68020010000	               mov byte [rax + 0x120], 1	       684	fold.c	FUNCTION_25	IF_8	IF_15
0x4001063	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       685	fold.c	FUNCTION_25	IF_8
0x4001067	        0xc6402801	                mov byte [rax + 0x28], 1	       685	fold.c	FUNCTION_25	IF_8
0x400106b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       686	fold.c	FUNCTION_25	IF_8
0x400106f	        0xc6402902	                mov byte [rax + 0x29], 2	       686	fold.c	FUNCTION_25	IF_8
0x4001073	      0xe800000000	                          call 0x4001078	       689	fold.c	FUNCTION_25	IF_8	CALL_11
0x4001078	        0x488b45f8	                mov rax, qword [rbp - 8]	       691	fold.c	FUNCTION_25
0x400107c	    0x644833042528	                xor rax, qword fs:[0x28]	       691	fold.c	FUNCTION_25
0x4001085	            0x7405	                            je 0x400108c	       691	fold.c	FUNCTION_25
0x4001087	      0xe800000000	                          call 0x400108c	       691	fold.c	FUNCTION_25
0x400108c	              0xc9	                                   leave	       691	fold.c	FUNCTION_25
0x400108d	              0xc3	                                     ret	       691	fold.c	FUNCTION_25
check_closed	functions,0:DO,0:ELSE,1:FOR,0:SWITCH,0:WHILE,0:IF,7:CALL,1	61
0x4002a5a	              0x55	                                push rbp	      1647	fold.c	FUNCTION_49
0x4002a5b	          0x4889e5	                            mov rbp, rsp	      1647	fold.c	FUNCTION_49
0x4002a5e	        0x4883ec40	                           sub rsp, 0x40	      1647	fold.c	FUNCTION_49
0x4002a62	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1647	fold.c	FUNCTION_49
0x4002a66	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1647	fold.c	FUNCTION_49
0x4002a6a	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1647	fold.c	FUNCTION_49
0x4002a6e	          0x894dd4	             mov dword [rbp - 0x2c], ecx	      1647	fold.c	FUNCTION_49
0x4002a71	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1647	fold.c	FUNCTION_49
0x4002a75	        0x4c894dc0	              mov qword [rbp - 0x40], r9	      1647	fold.c	FUNCTION_49
0x4002a79	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1648	fold.c	FUNCTION_49
0x4002a80	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1652	fold.c	FUNCTION_49	IF_1
0x4002a84	            0x8b00	                    mov eax, dword [rax]	      1652	fold.c	FUNCTION_49	IF_1
0x4002a86	            0x85c0	                           test eax, eax	      1652	fold.c	FUNCTION_49	IF_1
0x4002a88	            0x750c	                           jne 0x4002a96	      1652	fold.c	FUNCTION_49	IF_1
0x4002a8a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1652	fold.c	FUNCTION_49	IF_1
0x4002a8e	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1652	fold.c	FUNCTION_49	IF_1
0x4002a92	            0x3c02	                               cmp al, 2	      1652	fold.c	FUNCTION_49	IF_1
0x4002a94	            0x7529	                           jne 0x4002abf	      1652	fold.c	FUNCTION_49	IF_1
0x4002a96	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1654	fold.c	FUNCTION_49	IF_1
0x4002a9a	    0xc70001000000	                      mov dword [rax], 1	      1654	fold.c	FUNCTION_49	IF_1
0x4002aa0	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002aa3	          0x4863d0	                         movsxd rdx, eax	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002aa6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002aaa	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002ab1	          0x4839c2	                            cmp rdx, rax	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002ab4	            0x7c1c	                            jl 0x4002ad2	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002ab6	    0xc745fc010000	                  mov dword [rbp - 4], 1	      1656	fold.c	FUNCTION_49	IF_1	IF_2
0x4002abd	            0xeb13	                           jmp 0x4002ad2	      1655	fold.c	FUNCTION_49	IF_1	IF_2
0x4002abf	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x4002ac3	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x4002ac7	            0x3c01	                               cmp al, 1	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x4002ac9	            0x7507	                           jne 0x4002ad2	      1658	fold.c	FUNCTION_49	ELSE_1	IF_3
0x4002acb	    0xc745fc010000	                  mov dword [rbp - 4], 1	      1659	fold.c	FUNCTION_49	ELSE_1	IF_3
0x4002ad2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1662	fold.c	FUNCTION_49	IF_4
0x4002ad6	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1662	fold.c	FUNCTION_49	IF_4
0x4002ada	            0x3c02	                               cmp al, 2	      1662	fold.c	FUNCTION_49	IF_4
0x4002adc	            0x750a	                           jne 0x4002ae8	      1662	fold.c	FUNCTION_49	IF_4
0x4002ade	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1663	fold.c	FUNCTION_49	IF_4
0x4002ae2	    0xc70001000000	                      mov dword [rax], 1	      1663	fold.c	FUNCTION_49	IF_4
0x4002ae8	        0x837dfc00	                  cmp dword [rbp - 4], 0	      1664	fold.c	FUNCTION_49	IF_5
0x4002aec	            0x743c	                            je 0x4002b2a	      1664	fold.c	FUNCTION_49	IF_5
0x4002aee	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4002af2	            0x8b00	                    mov eax, dword [rax]	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4002af4	            0x85c0	                           test eax, eax	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4002af6	            0x7408	                            je 0x4002b00	      1666	fold.c	FUNCTION_49	IF_5	IF_6
0x4002af8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4002afc	        0xc6402902	                mov byte [rax + 0x29], 2	      1667	fold.c	FUNCTION_49	IF_5	IF_6
0x4002b00	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b04	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b08	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b0c	          0x4889ce	                            mov rsi, rcx	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b0f	          0x4889c7	                            mov rdi, rax	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b12	      0xe818000000	                     call sym.checkSmall	      1668	fold.c	FUNCTION_49	IF_5	CALL_1
0x4002b17	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4002b1b	         0xfb64029	           movzx eax, byte [rax + 0x29] 	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4002b1f	            0x3c01	                               cmp al, 1	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4002b21	            0x7507	                           jne 0x4002b2a	      1669	fold.c	FUNCTION_49	IF_5	IF_7
0x4002b23	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1670	fold.c	FUNCTION_49	IF_5	IF_7
0x4002b2a	          0x8b45fc	                mov eax, dword [rbp - 4]	      1672	fold.c	FUNCTION_49
0x4002b2d	              0xc9	                                   leave	      1673	fold.c	FUNCTION_49
0x4002b2e	              0xc3	                                     ret	      1673	fold.c	FUNCTION_49
deleteFoldMarkers	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,1:CALL,3	58
0x4002ee3	              0x55	                                push rbp	      1801	fold.c	FUNCTION_54
0x4002ee4	          0x4889e5	                            mov rbp, rsp	      1801	fold.c	FUNCTION_54
0x4002ee7	        0x4883ec30	                           sub rsp, 0x30	      1801	fold.c	FUNCTION_54
0x4002eeb	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1801	fold.c	FUNCTION_54
0x4002eef	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1801	fold.c	FUNCTION_54
0x4002ef2	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1801	fold.c	FUNCTION_54
0x4002ef6	        0x837de400	               cmp dword [rbp - 0x1c], 0	      1804	fold.c	FUNCTION_54	IF_1
0x4002efa	            0x7456	                            je 0x4002f52	      1804	fold.c	FUNCTION_54	IF_1
0x4002efc	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f03	            0xeb41	                           jmp 0x4002f46	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f05	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1807	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f09	          0x488b10	                    mov rdx, qword [rax]	      1807	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f0c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f10	        0x488d0c02	                    lea rcx, [rdx + rax]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f14	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f18	        0x488b7020	            mov rsi, qword [rax + 0x20] 	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f1c	          0x8b45fc	                mov eax, dword [rbp - 4]	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f1f	          0x4863d0	                         movsxd rdx, eax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f22	          0x4889d0	                            mov rax, rdx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f25	          0x4801c0	                            add rax, rax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f28	          0x4801d0	                            add rax, rdx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f2b	        0x48c1e004	                              shl rax, 4	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f2f	          0x4801f0	                            add rax, rsi	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f32	          0x4889ca	                            mov rdx, rcx	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f35	      0xbe01000000	                              mov esi, 1	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f3a	          0x4889c7	                            mov rdi, rax	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f3d	      0xe8a1ffffff	              call sym.deleteFoldMarkers	      1806	fold.c	FUNCTION_54	IF_1	FOR_1	CALL_1
0x4002f42	        0x8345fc01	                  add dword [rbp - 4], 1	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f46	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f4a	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f4d	          0x3b45fc	                cmp eax, dword [rbp - 4]	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f50	            0x7fb3	                            jg 0x4002f05	      1805	fold.c	FUNCTION_54	IF_1	FOR_1
0x4002f52	    0x8b1500000000	            mov edx, dword [0x04002f58] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f58	    0x488b05000000	            mov rax, qword [0x04002f5f] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f5f	    0x488b80280200	           mov rax, qword [rax + 0x228] 	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f66	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f6a	          0x488b31	                    mov rsi, qword [rcx]	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f6d	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f71	          0x4801f1	                            add rcx, rsi	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f74	          0x4889c6	                            mov rsi, rax	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f77	          0x4889cf	                            mov rdi, rcx	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f7a	      0xe838000000	                  call sym.foldDelMarker	      1808	fold.c	FUNCTION_54	CALL_2
0x4002f7f	    0x8b1500000000	            mov edx, dword [0x04002f85] 	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f85	    0x488b05000000	            mov rax, qword [0x04002f8c] 	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f8c	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f90	          0x488b31	                    mov rsi, qword [rcx]	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f93	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f97	          0x4801ce	                            add rsi, rcx	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f9a	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1809	fold.c	FUNCTION_54	CALL_3
0x4002f9e	        0x488b4908	                mov rcx, qword [rcx + 8]	      1809	fold.c	FUNCTION_54	CALL_3
0x4002fa2	          0x4801f1	                            add rcx, rsi	      1809	fold.c	FUNCTION_54	CALL_3
0x4002fa5	        0x4883e901	                              sub rcx, 1	      1809	fold.c	FUNCTION_54	CALL_3
0x4002fa9	          0x4889c6	                            mov rsi, rax	      1809	fold.c	FUNCTION_54	CALL_3
0x4002fac	          0x4889cf	                            mov rdi, rcx	      1809	fold.c	FUNCTION_54	CALL_3
0x4002faf	      0xe803000000	                  call sym.foldDelMarker	      1809	fold.c	FUNCTION_54	CALL_3
0x4002fb4	              0x90	                                     nop	      1811	fold.c	FUNCTION_54
0x4002fb5	              0xc9	                                   leave	      1811	fold.c	FUNCTION_54
0x4002fb6	              0xc3	                                     ret	      1811	fold.c	FUNCTION_54
foldUpdate	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,1:IF,2:CALL,7	87
0x4001347	              0x55	                                push rbp	       810	fold.c	FUNCTION_28
0x4001348	          0x4889e5	                            mov rbp, rsp	       810	fold.c	FUNCTION_28
0x400134b	        0x4883ec40	                           sub rsp, 0x40	       810	fold.c	FUNCTION_28
0x400134f	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       810	fold.c	FUNCTION_28
0x4001353	        0x488975d0	             mov qword [rbp - 0x30], rsi	       810	fold.c	FUNCTION_28
0x4001357	        0x488955c8	             mov qword [rbp - 0x38], rdx	       810	fold.c	FUNCTION_28
0x400135b	    0x64488b042528	                mov rax, qword fs:[0x28]	       810	fold.c	FUNCTION_28
0x4001364	        0x488945f8	                mov qword [rbp - 8], rax	       810	fold.c	FUNCTION_28
0x4001368	            0x31c0	                            xor eax, eax	       810	fold.c	FUNCTION_28
0x400136a	    0x8b0500000000	            mov eax, dword [0x04001370] 	       813	fold.c	FUNCTION_28	IF_1
0x4001370	            0x85c0	                           test eax, eax	       813	fold.c	FUNCTION_28	IF_1
0x4001372	     0xf8ffe000000	                            jg 0x4001476	       813	fold.c	FUNCTION_28	IF_1
0x4001378	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       817	fold.c	FUNCTION_28	CALL_1
0x400137c	    0x488d88080100	                  lea rcx, [rax + 0x108]	       817	fold.c	FUNCTION_28	CALL_1
0x4001383	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       817	fold.c	FUNCTION_28	CALL_1
0x4001387	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       817	fold.c	FUNCTION_28	CALL_1
0x400138b	          0x4889c6	                            mov rsi, rax	       817	fold.c	FUNCTION_28	CALL_1
0x400138e	          0x4889cf	                            mov rdi, rcx	       817	fold.c	FUNCTION_28	CALL_1
0x4001391	      0xe84f080000	                       call sym.foldFind	       817	fold.c	FUNCTION_28	CALL_1
0x4001396	            0xeb14	                           jmp 0x40013ac	       818	fold.c	FUNCTION_28	WHILE_1
0x4001398	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       821	fold.c	FUNCTION_28	WHILE_1
0x400139c	        0xc6402902	                mov byte [rax + 0x29], 2	       821	fold.c	FUNCTION_28	WHILE_1
0x40013a0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       822	fold.c	FUNCTION_28	WHILE_1
0x40013a4	        0x4883c030	                           add rax, 0x30	       822	fold.c	FUNCTION_28	WHILE_1
0x40013a8	        0x488945f0	             mov qword [rbp - 0x10], rax	       822	fold.c	FUNCTION_28	WHILE_1
0x40013ac	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       818	fold.c	FUNCTION_28	WHILE_1
0x40013b0	    0x488b88180100	           mov rcx, qword [rax + 0x118] 	       818	fold.c	FUNCTION_28	WHILE_1
0x40013b7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       818	fold.c	FUNCTION_28	WHILE_1
0x40013bb	    0x8b8008010000	           mov eax, dword [rax + 0x108] 	       818	fold.c	FUNCTION_28	WHILE_1
0x40013c1	          0x4863d0	                         movsxd rdx, eax	       818	fold.c	FUNCTION_28	WHILE_1
0x40013c4	          0x4889d0	                            mov rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x40013c7	          0x4801c0	                            add rax, rax	       818	fold.c	FUNCTION_28	WHILE_1
0x40013ca	          0x4801d0	                            add rax, rdx	       818	fold.c	FUNCTION_28	WHILE_1
0x40013cd	        0x48c1e004	                              shl rax, 4	       818	fold.c	FUNCTION_28	WHILE_1
0x40013d1	        0x488d1401	                    lea rdx, [rcx + rax]	       818	fold.c	FUNCTION_28	WHILE_1
0x40013d5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       818	fold.c	FUNCTION_28	WHILE_1
0x40013d9	          0x4839c2	                            cmp rdx, rax	       818	fold.c	FUNCTION_28	WHILE_1
0x40013dc	            0x760d	                           jbe 0x40013eb	       818	fold.c	FUNCTION_28	WHILE_1
0x40013de	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       819	fold.c	FUNCTION_28	WHILE_1
0x40013e2	          0x488b00	                    mov rax, qword [rax]	       819	fold.c	FUNCTION_28	WHILE_1
0x40013e5	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       819	fold.c	FUNCTION_28	WHILE_1
0x40013e9	            0x7cad	                            jl 0x4001398	       819	fold.c	FUNCTION_28	WHILE_1
0x40013eb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40013ef	          0x4889c7	                            mov rdi, rax	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40013f2	      0xe800000000	                          call 0x40013f7	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40013f7	            0x85c0	                           test eax, eax	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40013f9	            0x7540	                           jne 0x400143b	       825	fold.c	FUNCTION_28	IF_2	CALL_2
0x40013fb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x40013ff	          0x4889c7	                            mov rdi, rax	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x4001402	      0xe800000000	                          call 0x4001407	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x4001407	            0x85c0	                           test eax, eax	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x4001409	            0x7530	                           jne 0x400143b	       826	fold.c	FUNCTION_28	IF_2	CALL_3
0x400140b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x400140f	          0x4889c7	                            mov rdi, rax	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x4001412	      0xe800000000	                          call 0x4001417	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x4001417	            0x85c0	                           test eax, eax	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x4001419	            0x7520	                           jne 0x400143b	       827	fold.c	FUNCTION_28	IF_2	CALL_4
0x400141b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x400141f	          0x4889c7	                            mov rdi, rax	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x4001422	      0xe800000000	                          call 0x4001427	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x4001427	            0x85c0	                           test eax, eax	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x4001429	            0x7510	                           jne 0x400143b	       829	fold.c	FUNCTION_28	IF_2	CALL_5
0x400142b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x400142f	          0x4889c7	                            mov rdi, rax	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x4001432	      0xe800000000	                          call 0x4001437	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x4001437	            0x85c0	                           test eax, eax	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x4001439	            0x743c	                            je 0x4001477	       831	fold.c	FUNCTION_28	IF_2	CALL_6
0x400143b	    0x8b0500000000	            mov eax, dword [0x04001441] 	       833	fold.c	FUNCTION_28	IF_2
0x4001441	          0x8945ec	             mov dword [rbp - 0x14], eax	       833	fold.c	FUNCTION_28	IF_2
0x4001444	    0xc70500000000	               mov dword [0x0400144e], 0	       836	fold.c	FUNCTION_28	IF_2
0x400144e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x4001452	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x4001456	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x400145a	          0x4889ce	                            mov rsi, rcx	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x400145d	          0x4889c7	                            mov rdi, rax	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x4001460	      0xe8ad240000	                 call sym.foldUpdateIEMS	       837	fold.c	FUNCTION_28	IF_2	CALL_7
0x4001465	    0x8b0500000000	            mov eax, dword [0x0400146b] 	       838	fold.c	FUNCTION_28	IF_2
0x400146b	           0xb45ec	              or eax, dword [rbp - 0x14]	       838	fold.c	FUNCTION_28	IF_2
0x400146e	    0x890500000000	            mov dword [0x04001474], eax 	       838	fold.c	FUNCTION_28	IF_2
0x4001474	            0xeb01	                           jmp 0x4001477	       838	fold.c	FUNCTION_28	IF_2
0x4001476	              0x90	                                     nop	       814	fold.c	FUNCTION_28	IF_1
0x4001477	        0x488b45f8	                mov rax, qword [rbp - 8]	       840	fold.c	FUNCTION_28
0x400147b	    0x644833042528	                xor rax, qword fs:[0x28]	       840	fold.c	FUNCTION_28
0x4001484	            0x7405	                            je 0x400148b	       840	fold.c	FUNCTION_28
0x4001486	      0xe800000000	                          call 0x400148b	       840	fold.c	FUNCTION_28
0x400148b	              0xc9	                                   leave	       840	fold.c	FUNCTION_28
0x400148c	              0xc3	                                     ret	       840	fold.c	FUNCTION_28
put_foldopen_recurse	functions,0:DO,0:ELSE,1:FOR,1:SWITCH,0:WHILE,0:IF,8:CALL,7	120
0x40066d7	              0x55	                                push rbp	      3545	fold.c	FUNCTION_75
0x40066d8	          0x4889e5	                            mov rbp, rsp	      3545	fold.c	FUNCTION_75
0x40066db	        0x4883ec30	                           sub rsp, 0x30	      3545	fold.c	FUNCTION_75
0x40066df	        0x48897de8	             mov qword [rbp - 0x18], rdi	      3545	fold.c	FUNCTION_75
0x40066e3	        0x488975e0	             mov qword [rbp - 0x20], rsi	      3545	fold.c	FUNCTION_75
0x40066e7	        0x488955d8	             mov qword [rbp - 0x28], rdx	      3545	fold.c	FUNCTION_75
0x40066eb	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      3545	fold.c	FUNCTION_75
0x40066ef	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3550	fold.c	FUNCTION_75
0x40066f3	        0x488b4010	            mov rax, qword [rax + 0x10] 	      3550	fold.c	FUNCTION_75
0x40066f7	        0x488945f8	                mov qword [rbp - 8], rax	      3550	fold.c	FUNCTION_75
0x40066fb	    0xc745f0000000	               mov dword [rbp - 0x10], 0	      3551	fold.c	FUNCTION_75	FOR_1
0x4006702	      0xe971010000	                           jmp 0x4006878	      3551	fold.c	FUNCTION_75	FOR_1
0x4006707	        0x488b45f8	                mov rax, qword [rbp - 8]	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x400670b	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x400670f	            0x3c02	                               cmp al, 2	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x4006711	     0xf8458010000	                            je 0x400686f	      3553	fold.c	FUNCTION_75	FOR_1	IF_1
0x4006717	        0x488b45f8	                mov rax, qword [rbp - 8]	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x400671b	          0x8b4010	            mov eax, dword [rax + 0x10] 	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x400671e	            0x85c0	                           test eax, eax	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x4006720	     0xf8ec5000000	                           jle 0x40067eb	      3555	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2
0x4006726	        0x488b45f8	                mov rax, qword [rbp - 8]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400672a	          0x488b10	                    mov rdx, qword [rax]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400672d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4006731	          0x4801c2	                            add rdx, rax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4006734	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4006738	      0xbe00000000	                              mov esi, 0	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400673d	          0x4889c7	                            mov rdi, rax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4006740	      0xb800000000	                              mov eax, 0	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x4006745	      0xe800000000	                          call 0x400674a	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400674a	            0x85c0	                           test eax, eax	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400674c	            0x7825	                            js 0x4006773	      3558	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_1
0x400674e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x4006752	          0x4889c7	                            mov rdi, rax	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x4006755	      0xe800000000	                          call 0x400675a	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x400675a	            0x85c0	                           test eax, eax	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x400675c	            0x7415	                            je 0x4006773	      3559	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_2
0x400675e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x4006762	      0xbe00000000	                              mov esi, 0	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x4006767	          0x4889c7	                            mov rdi, rax	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x400676a	      0xe800000000	                          call 0x400676f	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x400676f	            0x85c0	                           test eax, eax	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x4006771	            0x750a	                           jne 0x400677d	      3560	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3	CALL_3
0x4006773	      0xb800000000	                              mov eax, 0	      3561	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x4006778	      0xe90f010000	                           jmp 0x400688c	      3561	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_3
0x400677d	        0x488b45f8	                mov rax, qword [rbp - 8]	      3563	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x4006781	          0x488b10	                    mov rdx, qword [rax]	      3563	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x4006784	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x4006788	        0x488d0c02	                    lea rcx, [rdx + rax]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x400678c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x4006790	        0x488d5010	                   lea rdx, [rax + 0x10]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x4006794	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x4006798	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x400679c	          0x4889c7	                            mov rdi, rax	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x400679f	      0xe833ffffff	           call sym.put_foldopen_recurse	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x40067a4	            0x85c0	                           test eax, eax	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x40067a6	            0x750a	                           jne 0x40067b2	      3562	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4	CALL_4
0x40067a8	      0xb800000000	                              mov eax, 0	      3565	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x40067ad	      0xe9da000000	                           jmp 0x400688c	      3565	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_4
0x40067b2	        0x488b45f8	                mov rax, qword [rbp - 8]	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x40067b6	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x40067ba	            0x3c01	                               cmp al, 1	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x40067bc	     0xf85ad000000	                           jne 0x400686f	      3567	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5
0x40067c2	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067c6	        0x488b4df8	                mov rcx, qword [rbp - 8]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067ca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067ce	          0x4889ce	                            mov rsi, rcx	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067d1	          0x4889c7	                            mov rdi, rax	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067d4	      0xe8b5000000	            call sym.put_fold_open_close	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067d9	            0x85c0	                           test eax, eax	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067db	     0xf858e000000	                           jne 0x400686f	      3569	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6	CALL_5
0x40067e1	      0xb800000000	                              mov eax, 0	      3570	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6
0x40067e6	      0xe9a1000000	                           jmp 0x400688c	      3570	fold.c	FUNCTION_75	FOR_1	IF_1	IF_2	IF_5	IF_6
0x40067eb	        0x488b45f8	                mov rax, qword [rbp - 8]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x40067ef	          0x488b10	                    mov rdx, qword [rax]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x40067f2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x40067f6	          0x4801c2	                            add rdx, rax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x40067f9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x40067fd	          0x4889d6	                            mov rsi, rdx	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x4006800	          0x4889c7	                            mov rdi, rax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x4006803	      0xe821b5ffff	                   call sym.foldLevelWin	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x4006808	          0x8945f4	              mov dword [rbp - 0xc], eax	      3578	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	CALL_6
0x400680b	        0x488b45f8	                mov rax, qword [rbp - 8]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400680f	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006813	            0x3c01	                               cmp al, 1	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006815	            0x7515	                           jne 0x400682c	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006817	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400681b	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006822	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006825	            0x4898	                                    cdqe	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006827	          0x4839c2	                            cmp rdx, rax	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400682a	            0x7d21	                           jge 0x400684d	      3579	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400682c	        0x488b45f8	                mov rax, qword [rbp - 8]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006830	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006834	            0x3c01	                               cmp al, 1	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006836	            0x7437	                            je 0x400686f	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006838	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400683c	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006843	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006846	            0x4898	                                    cdqe	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x4006848	          0x4839c2	                            cmp rdx, rax	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400684b	            0x7d22	                           jge 0x400686f	      3580	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7
0x400684d	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006851	        0x488b4df8	                mov rcx, qword [rbp - 8]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006855	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006859	          0x4889ce	                            mov rsi, rcx	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x400685c	          0x4889c7	                            mov rdi, rax	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x400685f	      0xe82a000000	            call sym.put_fold_open_close	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006864	            0x85c0	                           test eax, eax	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006866	            0x7507	                           jne 0x400686f	      3581	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8	CALL_7
0x4006868	      0xb800000000	                              mov eax, 0	      3582	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8
0x400686d	            0xeb1d	                           jmp 0x400688c	      3582	fold.c	FUNCTION_75	FOR_1	IF_1	ELSE_1	IF_7	IF_8
0x400686f	      0x488345f830	               add qword [rbp - 8], 0x30	      3585	fold.c	FUNCTION_75	FOR_1
0x4006874	        0x8345f001	               add dword [rbp - 0x10], 1	      3551	fold.c	FUNCTION_75	FOR_1
0x4006878	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      3551	fold.c	FUNCTION_75	FOR_1
0x400687c	            0x8b00	                    mov eax, dword [rax]	      3551	fold.c	FUNCTION_75	FOR_1
0x400687e	          0x3b45f0	             cmp eax, dword [rbp - 0x10]	      3551	fold.c	FUNCTION_75	FOR_1
0x4006881	     0xf8f80feffff	                            jg 0x4006707	      3551	fold.c	FUNCTION_75	FOR_1
0x4006887	      0xb801000000	                              mov eax, 1	      3588	fold.c	FUNCTION_75
0x400688c	              0xc9	                                   leave	      3589	fold.c	FUNCTION_75
0x400688d	              0xc3	                                     ret	      3589	fold.c	FUNCTION_75
setManualFoldWin	functions,0:DO,0:ELSE,3:FOR,2:SWITCH,0:WHILE,0:IF,15:CALL,6	198
0x4001f91	              0x55	                                push rbp	      1273	fold.c	FUNCTION_41
0x4001f92	          0x4889e5	                            mov rbp, rsp	      1273	fold.c	FUNCTION_41
0x4001f95	        0x4883ec70	                           sub rsp, 0x70	      1273	fold.c	FUNCTION_41
0x4001f99	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1273	fold.c	FUNCTION_41
0x4001f9d	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1273	fold.c	FUNCTION_41
0x4001fa1	          0x89559c	             mov dword [rbp - 0x64], edx	      1273	fold.c	FUNCTION_41
0x4001fa4	          0x894d98	             mov dword [rbp - 0x68], ecx	      1273	fold.c	FUNCTION_41
0x4001fa7	        0x4c894590	              mov qword [rbp - 0x70], r8	      1273	fold.c	FUNCTION_41
0x4001fab	    0x64488b042528	                mov rax, qword fs:[0x28]	      1273	fold.c	FUNCTION_41
0x4001fb4	        0x488945f8	                mov qword [rbp - 8], rax	      1273	fold.c	FUNCTION_41
0x4001fb8	            0x31c0	                            xor eax, eax	      1273	fold.c	FUNCTION_41
0x4001fba	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1276	fold.c	FUNCTION_41
0x4001fc2	    0xc745b8000000	               mov dword [rbp - 0x48], 0	      1278	fold.c	FUNCTION_41
0x4001fc9	    0xc745bc000000	               mov dword [rbp - 0x44], 0	      1279	fold.c	FUNCTION_41
0x4001fd0	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1280	fold.c	FUNCTION_41
0x4001fd7	    0x48c745e0ffff	      mov qword [rbp - 0x20], 0x7fffffff	      1282	fold.c	FUNCTION_41
0x4001fdf	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1283	fold.c	FUNCTION_41
0x4001fe7	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1284	fold.c	FUNCTION_41
0x4001fee	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1286	fold.c	FUNCTION_41	CALL_1
0x4001ff2	          0x4889c7	                            mov rdi, rax	      1286	fold.c	FUNCTION_41	CALL_1
0x4001ff5	      0xe8bdfdffff	                    call sym.checkupdate	      1286	fold.c	FUNCTION_41	CALL_1
0x4001ffa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1291	fold.c	FUNCTION_41
0x4001ffe	    0x480508010000	                          add rax, 0x108	      1291	fold.c	FUNCTION_41
0x4002004	        0x488945d8	             mov qword [rbp - 0x28], rax	      1291	fold.c	FUNCTION_41
0x4002008	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x400200c	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002010	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002014	          0x4889ce	                            mov rsi, rcx	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002017	          0x4889c7	                            mov rdi, rax	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x400201a	      0xe8c6fbffff	                       call sym.foldFind	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x400201f	            0x85c0	                           test eax, eax	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002021	            0x7546	                           jne 0x4002069	      1294	fold.c	FUNCTION_41	FOR_1	IF_1	CALL_2
0x4002023	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002027	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400202b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400202f	            0x8b00	                    mov eax, dword [rax]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002031	          0x4863d0	                         movsxd rdx, eax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002034	          0x4889d0	                            mov rax, rdx	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002037	          0x4801c0	                            add rax, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400203a	          0x4801d0	                            add rax, rdx	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400203d	        0x48c1e004	                              shl rax, 4	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002041	        0x488d1401	                    lea rdx, [rcx + rax]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002045	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002049	          0x4839c2	                            cmp rdx, rax	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400204c	     0xf8674010000	                           jbe 0x40021c6	      1297	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002052	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002056	          0x488b10	                    mov rdx, qword [rax]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002059	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x400205d	          0x4801d0	                            add rax, rdx	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002060	        0x488945e0	             mov qword [rbp - 0x20], rax	      1298	fold.c	FUNCTION_41	FOR_1	IF_1	IF_2
0x4002064	      0xe95d010000	                           jmp 0x40021c6	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x4002069	    0xc745c0010000	               mov dword [rbp - 0x40], 1	      1303	fold.c	FUNCTION_41	FOR_1
0x4002070	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002074	        0x488d7030	                   lea rsi, [rax + 0x30]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002078	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400207c	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002080	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002084	            0x8b00	                    mov eax, dword [rax]	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002086	          0x4863d0	                         movsxd rdx, eax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002089	          0x4889d0	                            mov rax, rdx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400208c	          0x4801c0	                            add rax, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400208f	          0x4801d0	                            add rax, rdx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002092	        0x48c1e004	                              shl rax, 4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002096	          0x4801c8	                            add rax, rcx	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x4002099	          0x4839c6	                            cmp rsi, rax	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400209c	            0x7316	                           jae 0x40020b4	      1306	fold.c	FUNCTION_41	FOR_1	IF_3
0x400209e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020a2	        0x4883c030	                           add rax, 0x30	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020a6	          0x488b10	                    mov rdx, qword [rax]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020ad	          0x4801d0	                            add rax, rdx	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020b0	        0x488945e0	             mov qword [rbp - 0x20], rax	      1307	fold.c	FUNCTION_41	FOR_1	IF_3
0x40020b4	        0x837dbc00	               cmp dword [rbp - 0x44], 0	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020b8	            0x750c	                           jne 0x40020c6	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020ba	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020be	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020c2	            0x3c02	                               cmp al, 2	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020c4	            0x7575	                           jne 0x400213b	      1310	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020c6	    0xc745bc010000	               mov dword [rbp - 0x44], 1	      1312	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020cd	          0x8b45b8	             mov eax, dword [rbp - 0x48]	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020d0	          0x4863d0	                         movsxd rdx, eax	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020d3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020d7	    0x488b80e80100	           mov rax, qword [rax + 0x1e8] 	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020de	          0x4839c2	                            cmp rdx, rax	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020e1	            0x7c0a	                            jl 0x40020ed	      1313	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020e3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020e7	        0xc6402801	                mov byte [rax + 0x28], 1	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020eb	            0xeb08	                           jmp 0x40020f5	      1314	fold.c	FUNCTION_41	FOR_1	IF_4	IF_5
0x40020ed	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1316	fold.c	FUNCTION_41	FOR_1	IF_4	ELSE_1
0x40020f1	        0xc6402800	                mov byte [rax + 0x28], 0	      1316	fold.c	FUNCTION_41	FOR_1	IF_4	ELSE_1
0x40020f5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020f9	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x40020fd	        0x488945f0	             mov qword [rbp - 0x10], rax	      1317	fold.c	FUNCTION_41	FOR_1	IF_4
0x4002101	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002108	            0xeb25	                           jmp 0x400212f	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400210a	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400210d	          0x4863d0	                         movsxd rdx, eax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002110	          0x4889d0	                            mov rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002113	          0x4801c0	                            add rax, rax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002116	          0x4801d0	                            add rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002119	        0x48c1e004	                              shl rax, 4	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400211d	          0x4889c2	                            mov rdx, rax	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002120	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002124	          0x4801d0	                            add rax, rdx	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002127	        0xc6402802	                mov byte [rax + 0x28], 2	      1319	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400212b	        0x8345b401	               add dword [rbp - 0x4c], 1	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400212f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002133	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002136	          0x3b45b4	             cmp eax, dword [rbp - 0x4c]	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x4002139	            0x7fcf	                            jg 0x400210a	      1318	fold.c	FUNCTION_41	FOR_1	IF_4	FOR_2
0x400213b	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x400213f	            0x7520	                           jne 0x4002161	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002141	        0x837d9800	               cmp dword [rbp - 0x68], 0	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002145	            0x741a	                            je 0x4002161	      1323	fold.c	FUNCTION_41	FOR_1	IF_6
0x4002147	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x400214b	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x400214f	            0x3c01	                               cmp al, 1	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002151	            0x7440	                            je 0x4002193	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002153	        0x834dc401	                or dword [rbp - 0x3c], 1	      1327	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002157	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x400215b	        0xc6402801	                mov byte [rax + 0x28], 1	      1328	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x400215f	            0xeb32	                           jmp 0x4002193	      1325	fold.c	FUNCTION_41	FOR_1	IF_6	IF_7
0x4002161	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4002165	         0xfb64028	           movzx eax, byte [rax + 0x28] 	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4002169	            0x3c01	                               cmp al, 1	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x400216b	            0x7526	                           jne 0x4002193	      1331	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x400216d	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002171	            0x7456	                            je 0x40021c9	      1334	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002173	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x4002177	        0xc6402800	                mov byte [rax + 0x28], 0	      1336	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x400217b	        0x834dc401	                or dword [rbp - 0x3c], 1	      1337	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9
0x400217f	        0x837d9800	               cmp dword [rbp - 0x68], 0	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x4002183	            0x7444	                            je 0x40021c9	      1338	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	IF_10
0x4002185	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x4002189	          0x4889c7	                            mov rdi, rax	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x400218c	      0xe8dc000000	                 call sym.foldOpenNested	      1339	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8	IF_9	CALL_3
0x4002191	            0xeb36	                           jmp 0x40021c9	      1341	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x4002193	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1345	fold.c	FUNCTION_41	FOR_1
0x4002197	        0x488945d0	             mov qword [rbp - 0x30], rax	      1345	fold.c	FUNCTION_41	FOR_1
0x400219b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1346	fold.c	FUNCTION_41	FOR_1
0x400219f	        0x4883c010	                           add rax, 0x10	      1346	fold.c	FUNCTION_41	FOR_1
0x40021a3	        0x488945d8	             mov qword [rbp - 0x28], rax	      1346	fold.c	FUNCTION_41	FOR_1
0x40021a7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1347	fold.c	FUNCTION_41	FOR_1
0x40021ab	          0x488b00	                    mov rax, qword [rax]	      1347	fold.c	FUNCTION_41	FOR_1
0x40021ae	        0x482945a0	             sub qword [rbp - 0x60], rax	      1347	fold.c	FUNCTION_41	FOR_1
0x40021b2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1348	fold.c	FUNCTION_41	FOR_1
0x40021b6	          0x488b00	                    mov rax, qword [rax]	      1348	fold.c	FUNCTION_41	FOR_1
0x40021b9	        0x480145e8	            add qword [rbp - 0x18], rax 	      1348	fold.c	FUNCTION_41	FOR_1
0x40021bd	        0x8345b801	               add dword [rbp - 0x48], 1	      1349	fold.c	FUNCTION_41	FOR_1
0x40021c1	      0xe942feffff	                           jmp 0x4002008	      1350	fold.c	FUNCTION_41	FOR_1
0x40021c6	              0x90	                                     nop	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x40021c7	            0xeb01	                           jmp 0x40021ca	      1299	fold.c	FUNCTION_41	FOR_1	IF_1
0x40021c9	              0x90	                                     nop	      1341	fold.c	FUNCTION_41	FOR_1	ELSE_2	IF_8
0x40021ca	        0x837dc000	               cmp dword [rbp - 0x40], 0	      1351	fold.c	FUNCTION_41	IF_11
0x40021ce	            0x7440	                            je 0x4002210	      1351	fold.c	FUNCTION_41	IF_11
0x40021d0	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40021d4	            0x7513	                           jne 0x40021e9	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40021d6	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40021db	            0x740c	                            je 0x40021e9	      1354	fold.c	FUNCTION_41	IF_11	IF_12
0x40021dd	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x40021e1	        0xc6402801	                mov byte [rax + 0x28], 1	      1356	fold.c	FUNCTION_41	IF_11	IF_12
0x40021e5	        0x834dc401	                or dword [rbp - 0x3c], 1	      1357	fold.c	FUNCTION_41	IF_11	IF_12
0x40021e9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1359	fold.c	FUNCTION_41	IF_11
0x40021ed	    0xc68020010000	               mov byte [rax + 0x120], 1	      1359	fold.c	FUNCTION_41	IF_11
0x40021f4	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40021f7	          0x83e001	                              and eax, 1	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40021fa	            0x85c0	                           test eax, eax	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40021fc	            0x740c	                            je 0x400220a	      1360	fold.c	FUNCTION_41	IF_11	IF_13
0x40021fe	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4002202	          0x4889c7	                            mov rdi, rax	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x4002205	      0xe800000000	                          call 0x400220a	      1361	fold.c	FUNCTION_41	IF_11	CALL_4
0x400220a	        0x834dc402	                or dword [rbp - 0x3c], 2	      1362	fold.c	FUNCTION_41	IF_11
0x400220e	            0xeb2b	                           jmp 0x400223b	      1362	fold.c	FUNCTION_41	IF_11
0x4002210	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002215	            0x7524	                           jne 0x400223b	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002217	    0x488b05000000	            mov rax, qword [0x0400221e] 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400221e	        0x483945a8	            cmp qword [rbp - 0x58], rax 	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002222	            0x7517	                           jne 0x400223b	      1364	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002224	    0x488b05000000	            mov rax, qword [0x0400222b] 	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400222b	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400222e	      0xe800000000	                          call 0x4002233	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002233	          0x4889c7	                            mov rdi, rax	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x4002236	      0xe800000000	                          call 0x400223b	      1365	fold.c	FUNCTION_41	ELSE_3	IF_14
0x400223b	      0x48837d9000	               cmp qword [rbp - 0x70], 0	      1367	fold.c	FUNCTION_41	IF_15
0x4002240	            0x7411	                            je 0x4002253	      1367	fold.c	FUNCTION_41	IF_15
0x4002242	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1368	fold.c	FUNCTION_41	IF_15
0x4002246	            0x8b00	                    mov eax, dword [rax]	      1368	fold.c	FUNCTION_41	IF_15
0x4002248	           0xb45c4	              or eax, dword [rbp - 0x3c]	      1368	fold.c	FUNCTION_41	IF_15
0x400224b	            0x89c2	                            mov edx, eax	      1368	fold.c	FUNCTION_41	IF_15
0x400224d	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1368	fold.c	FUNCTION_41	IF_15
0x4002251	            0x8910	                    mov dword [rax], edx	      1368	fold.c	FUNCTION_41	IF_15
0x4002253	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1370	fold.c	FUNCTION_41
0x4002257	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1371	fold.c	FUNCTION_41
0x400225b	    0x644833342528	                xor rsi, qword fs:[0x28]	      1371	fold.c	FUNCTION_41
0x4002264	            0x7405	                            je 0x400226b	      1371	fold.c	FUNCTION_41
0x4002266	      0xe800000000	                          call 0x400226b	      1371	fold.c	FUNCTION_41
0x400226b	              0xc9	                                   leave	      1371	fold.c	FUNCTION_41
0x400226c	              0xc3	                                     ret	      1371	fold.c	FUNCTION_41
foldmethodIsDiff	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,0	11
0x400060b	              0x55	                                push rbp	       356	fold.c	FUNCTION_13
0x400060c	          0x4889e5	                            mov rbp, rsp	       356	fold.c	FUNCTION_13
0x400060f	        0x48897df8	                mov qword [rbp - 8], rdi	       356	fold.c	FUNCTION_13
0x4000613	        0x488b45f8	                mov rax, qword [rbp - 8]	       357	fold.c	FUNCTION_13
0x4000617	    0x488b80f80100	           mov rax, qword [rax + 0x1f8] 	       357	fold.c	FUNCTION_13
0x400061e	           0xfb600	                   movzx eax, byte [rax]	       357	fold.c	FUNCTION_13
0x4000621	            0x3c64	                            cmp al, 0x64	       357	fold.c	FUNCTION_13
0x4000623	           0xf94c0	                                 sete al	       357	fold.c	FUNCTION_13
0x4000626	           0xfb6c0	                           movzx eax, al	       357	fold.c	FUNCTION_13
0x4000629	              0x5d	                                 pop rbp	       358	fold.c	FUNCTION_13
0x400062a	              0xc3	                                     ret	       358	fold.c	FUNCTION_13
get_foldtext	functions,0:DO,0:ELSE,2:FOR,1:SWITCH,0:WHILE,0:IF,14:CALL,14	212
0x4003206	              0x55	                                push rbp	      1878	fold.c	FUNCTION_56
0x4003207	          0x4889e5	                            mov rbp, rsp	      1878	fold.c	FUNCTION_56
0x400320a	        0x4883c480	             add rsp, 0xffffffffffffff80	      1878	fold.c	FUNCTION_56
0x400320e	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1878	fold.c	FUNCTION_56
0x4003212	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1878	fold.c	FUNCTION_56
0x4003216	        0x48895598	             mov qword [rbp - 0x68], rdx	      1878	fold.c	FUNCTION_56
0x400321a	        0x48894d90	             mov qword [rbp - 0x70], rcx	      1878	fold.c	FUNCTION_56
0x400321e	        0x4c894588	              mov qword [rbp - 0x78], r8	      1878	fold.c	FUNCTION_56
0x4003222	    0x64488b042528	                mov rax, qword fs:[0x28]	      1878	fold.c	FUNCTION_56
0x400322b	        0x488945f8	                mov qword [rbp - 8], rax	      1878	fold.c	FUNCTION_56
0x400322f	            0x31c0	                            xor eax, eax	      1878	fold.c	FUNCTION_56
0x4003231	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      1879	fold.c	FUNCTION_56
0x4003239	    0x8b0500000000	            mov eax, dword [0x0400323f] 	      1883	fold.c	FUNCTION_56
0x400323f	          0x8945b8	             mov dword [rbp - 0x48], eax	      1883	fold.c	FUNCTION_56
0x4003242	    0x488b05000000	            mov rax, qword [0x04003249] 	      1887	fold.c	FUNCTION_56	IF_1
0x4003249	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	      1887	fold.c	FUNCTION_56	IF_1
0x400324d	            0x7525	                           jne 0x4003274	      1887	fold.c	FUNCTION_56	IF_1
0x400324f	    0x488b05000000	            mov rax, qword [0x04003256] 	      1887	fold.c	FUNCTION_56	IF_1
0x4003256	          0x4885c0	                           test rax, rax	      1887	fold.c	FUNCTION_56	IF_1
0x4003259	            0x7419	                            je 0x4003274	      1887	fold.c	FUNCTION_56	IF_1
0x400325b	    0x488b05000000	            mov rax, qword [0x04003262] 	      1888	fold.c	FUNCTION_56	IF_1
0x4003262	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	      1888	fold.c	FUNCTION_56	IF_1
0x4003266	            0x7f0c	                            jg 0x4003274	      1888	fold.c	FUNCTION_56	IF_1
0x4003268	    0x488b05000000	            mov rax, qword [0x0400326f] 	      1888	fold.c	FUNCTION_56	IF_1
0x400326f	          0x4885c0	                           test rax, rax	      1888	fold.c	FUNCTION_56	IF_1
0x4003272	            0x750a	                           jne 0x400327e	      1888	fold.c	FUNCTION_56	IF_1
0x4003274	    0xc70500000000	               mov dword [0x0400327e], 0	      1890	fold.c	FUNCTION_56	IF_1
0x400327e	    0x8b0500000000	            mov eax, dword [0x04003284] 	      1892	fold.c	FUNCTION_56	IF_2
0x4003284	            0x85c0	                           test eax, eax	      1892	fold.c	FUNCTION_56	IF_2
0x4003286	            0x750a	                           jne 0x4003292	      1892	fold.c	FUNCTION_56	IF_2
0x4003288	    0xc70500000000	               mov dword [0x04003292], 0	      1894	fold.c	FUNCTION_56	IF_2
0x4003292	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1896	fold.c	FUNCTION_56	IF_3
0x4003296	    0x488b80200200	           mov rax, qword [rax + 0x220] 	      1896	fold.c	FUNCTION_56	IF_3
0x400329d	           0xfb600	                   movzx eax, byte [rax]	      1896	fold.c	FUNCTION_56	IF_3
0x40032a0	            0x84c0	                             test al, al	      1896	fold.c	FUNCTION_56	IF_3
0x40032a2	     0xf844a020000	                            je 0x40034f2	      1896	fold.c	FUNCTION_56	IF_3
0x40032a8	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40032ac	          0x4889c6	                            mov rsi, rax	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40032af	      0xbf16000000	                           mov edi, 0x16	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40032b4	      0xe800000000	                          call 0x40032b9	      1904	fold.c	FUNCTION_56	IF_3	CALL_1
0x40032b9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x40032bd	          0x4889c6	                            mov rsi, rax	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x40032c0	      0xbf17000000	                           mov edi, 0x17	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x40032c5	      0xe800000000	                          call 0x40032ca	      1905	fold.c	FUNCTION_56	IF_3	CALL_2
0x40032ca	        0x488b4590	             mov rax, qword [rbp - 0x70]	      1909	fold.c	FUNCTION_56	IF_3
0x40032ce	            0x8b00	                    mov eax, dword [rax]	      1909	fold.c	FUNCTION_56	IF_3
0x40032d0	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1909	fold.c	FUNCTION_56	IF_3
0x40032d3	        0x837db415	           cmp dword [rbp - 0x4c], 0x15 	      1910	fold.c	FUNCTION_56	IF_3	IF_4
0x40032d7	            0x7e07	                           jle 0x40032e0	      1910	fold.c	FUNCTION_56	IF_3	IF_4
0x40032d9	    0xc745b4150000	           mov dword [rbp - 0x4c], 0x15 	      1911	fold.c	FUNCTION_56	IF_3	IF_4
0x40032e0	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032e3	          0x4863d0	                         movsxd rdx, eax	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032e6	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032ea	      0xbe2d000000	                           mov esi, 0x2d	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032ef	          0x4889c7	                            mov rdi, rax	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032f2	      0xe800000000	                          call 0x40032f7	      1912	fold.c	FUNCTION_56	IF_3	CALL_3
0x40032f7	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1913	fold.c	FUNCTION_56	IF_3
0x40032fa	            0x4898	                                    cdqe	      1913	fold.c	FUNCTION_56	IF_3
0x40032fc	      0xc64405e000	          mov byte [rbp + rax - 0x20], 0	      1913	fold.c	FUNCTION_56	IF_3
0x4003301	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003305	      0xbaffffffff	                     mov edx, 0xffffffff	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x400330a	          0x4889c6	                            mov rsi, rax	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x400330d	      0xbf18000000	                           mov edi, 0x18	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003312	      0xe800000000	                          call 0x4003317	      1914	fold.c	FUNCTION_56	IF_3	CALL_4
0x4003317	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x400331a	            0x4898	                                    cdqe	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x400331c	          0x4889c6	                            mov rsi, rax	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x400331f	      0xbf19000000	                           mov edi, 0x19	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4003324	      0xe800000000	                          call 0x4003329	      1915	fold.c	FUNCTION_56	IF_3	CALL_5
0x4003329	    0x8b0500000000	            mov eax, dword [0x0400332f] 	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x400332f	            0x85c0	                           test eax, eax	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4003331	     0xf85a8000000	                           jne 0x40033df	      1918	fold.c	FUNCTION_56	IF_3	IF_5
0x4003337	    0x488b05000000	            mov rax, qword [0x0400333e] 	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x400333e	        0x488945d0	             mov qword [rbp - 0x30], rax	      1920	fold.c	FUNCTION_56	IF_3	IF_5
0x4003342	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x4003346	    0x488905000000	            mov qword [0x0400334d], rax 	      1921	fold.c	FUNCTION_56	IF_3	IF_5
0x400334d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4003351	        0x488b4008	                mov rax, qword [rax + 8]	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x4003355	    0x488905000000	            mov qword [0x0400335c], rax 	      1922	fold.c	FUNCTION_56	IF_3	IF_5
0x400335c	    0x8b0500000000	            mov eax, dword [0x04003362] 	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x4003362	          0x83c001	                              add eax, 1	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x4003365	    0x890500000000	            mov dword [0x0400336b], eax 	      1924	fold.c	FUNCTION_56	IF_3	IF_5
0x400336b	      0xbe04000000	                              mov esi, 4	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003370	      0xbf00000000	                              mov edi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003375	      0xe800000000	                          call 0x400337a	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x400337a	            0x89c2	                            mov edx, eax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x400337c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003380	    0x488b80200200	           mov rax, qword [rax + 0x220] 	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003387	      0xbe00000000	                              mov esi, 0	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x400338c	          0x4889c7	                            mov rdi, rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x400338f	      0xe800000000	                          call 0x4003394	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003394	        0x488945c0	             mov qword [rbp - 0x40], rax	      1925	fold.c	FUNCTION_56	IF_3	IF_5	CALL_6
0x4003398	    0x8b0500000000	            mov eax, dword [0x0400339e] 	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x400339e	          0x83e801	                              sub eax, 1	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x40033a1	    0x890500000000	            mov dword [0x040033a7], eax 	      1927	fold.c	FUNCTION_56	IF_3	IF_5
0x40033a7	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033ac	            0x740a	                            je 0x40033b8	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033ae	    0x8b0500000000	            mov eax, dword [0x040033b4] 	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033b4	            0x85c0	                           test eax, eax	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033b6	            0x740a	                            je 0x40033c2	      1929	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033b8	    0xc70500000000	               mov dword [0x040033c2], 1	      1930	fold.c	FUNCTION_56	IF_3	IF_5	IF_6
0x40033c2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x40033c6	    0x488905000000	            mov qword [0x040033cd], rax 	      1932	fold.c	FUNCTION_56	IF_3	IF_5
0x40033cd	    0x488b05000000	            mov rax, qword [0x040033d4] 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x40033d4	        0x488b4008	                mov rax, qword [rax + 8]	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x40033d8	    0x488905000000	            mov qword [0x040033df], rax 	      1933	fold.c	FUNCTION_56	IF_3	IF_5
0x40033df	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1935	fold.c	FUNCTION_56	IF_3
0x40033e3	    0x488905000000	            mov qword [0x040033ea], rax 	      1935	fold.c	FUNCTION_56	IF_3
0x40033ea	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1936	fold.c	FUNCTION_56	IF_3
0x40033ee	    0x488905000000	            mov qword [0x040033f5], rax 	      1936	fold.c	FUNCTION_56	IF_3
0x40033f5	      0xbaffffffff	                     mov edx, 0xffffffff	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40033fa	      0xbe00000000	                              mov esi, 0	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x40033ff	      0xbf18000000	                           mov edi, 0x18	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003404	      0xe800000000	                          call 0x4003409	      1937	fold.c	FUNCTION_56	IF_3	CALL_8
0x4003409	    0x8b0500000000	            mov eax, dword [0x0400340f] 	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x400340f	            0x85c0	                           test eax, eax	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003411	            0x750f	                           jne 0x4003422	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003413	        0x837db800	               cmp dword [rbp - 0x48], 0	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003417	            0x7409	                            je 0x4003422	      1939	fold.c	FUNCTION_56	IF_3	IF_7
0x4003419	          0x8b45b8	             mov eax, dword [rbp - 0x48]	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x400341c	    0x890500000000	            mov dword [0x04003422], eax 	      1940	fold.c	FUNCTION_56	IF_3	IF_7
0x4003422	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x4003427	     0xf84c5000000	                            je 0x40034f2	      1942	fold.c	FUNCTION_56	IF_3	IF_8
0x400342d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003431	        0x488945c8	             mov qword [rbp - 0x38], rax	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003435	            0xeb77	                           jmp 0x40034ae	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x4003437	    0x8b0500000000	            mov eax, dword [0x0400343d] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400343d	            0x85c0	                           test eax, eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400343f	            0x7443	                            je 0x4003484	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003441	    0x488b05000000	            mov rax, qword [0x04003448] 	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003448	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400344c	          0x4889d7	                            mov rdi, rdx	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400344f	            0xffd0	                                call rax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003451	          0x8945bc	             mov dword [rbp - 0x44], eax	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003454	        0x837dbc01	               cmp dword [rbp - 0x44], 1	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003458	            0x7e2a	                           jle 0x4003484	      1951	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400345a	    0x488b05000000	            mov rax, qword [0x04003461] 	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003461	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003465	          0x4889d7	                            mov rdi, rdx	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003468	            0xffd0	                                call rax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x400346a	            0x89c7	                            mov edi, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x400346c	      0xe800000000	                          call 0x4003471	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003471	            0x85c0	                           test eax, eax	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003473	            0x744a	                            je 0x40034bf	      1953	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10	CALL_9
0x4003475	          0x8b45bc	             mov eax, dword [rbp - 0x44]	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003478	            0x4898	                                    cdqe	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400347a	        0x4883e801	                              sub rax, 1	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x400347e	        0x480145c8	            add qword [rbp - 0x38], rax 	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003482	            0xeb25	                           jmp 0x40034a9	      1955	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9
0x4003484	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4003488	           0xfb600	                   movzx eax, byte [rax]	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x400348b	            0x3c09	                               cmp al, 9	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x400348d	            0x7509	                           jne 0x4003498	      1959	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x400348f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4003493	          0xc60020	                    mov byte [rax], 0x20	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4003496	            0xeb11	                           jmp 0x40034a9	      1960	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_1	IF_11
0x4003498	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x400349c	          0x4889c7	                            mov rdi, rax	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x400349f	      0xe800000000	                          call 0x40034a4	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40034a4	          0x83f801	                              cmp eax, 1	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40034a7	            0x7f19	                            jg 0x40034c2	      1961	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12	CALL_10
0x40034a9	      0x488345c801	               add qword [rbp - 0x38], 1	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034b2	           0xfb600	                   movzx eax, byte [rax]	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034b5	            0x84c0	                             test al, al	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034b7	     0xf857affffff	                           jne 0x4003437	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034bd	            0xeb04	                           jmp 0x40034c3	      1946	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1
0x40034bf	              0x90	                                     nop	      1954	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10
0x40034c0	            0xeb01	                           jmp 0x40034c3	      1954	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	IF_9	IF_10
0x40034c2	              0x90	                                     nop	      1962	fold.c	FUNCTION_56	IF_3	IF_8	FOR_1	ELSE_2	IF_12
0x40034c3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034c7	           0xfb600	                   movzx eax, byte [rax]	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034ca	            0x84c0	                             test al, al	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034cc	            0x7424	                            je 0x40034f2	      1964	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034ce	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x40034d2	          0x4889c7	                            mov rdi, rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x40034d5	      0xe800000000	                          call 0x40034da	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x40034da	        0x488945c8	             mov qword [rbp - 0x38], rax	      1966	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_11
0x40034de	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x40034e2	          0x4889c7	                            mov rdi, rax	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x40034e5	      0xe800000000	                          call 0x40034ea	      1967	fold.c	FUNCTION_56	IF_3	IF_8	IF_13	CALL_12
0x40034ea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1968	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034ee	        0x488945c0	             mov qword [rbp - 0x40], rax	      1968	fold.c	FUNCTION_56	IF_3	IF_8	IF_13
0x40034f2	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1972	fold.c	FUNCTION_56	IF_14
0x40034f7	            0x7551	                           jne 0x400354a	      1972	fold.c	FUNCTION_56	IF_14
0x40034f9	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1975	fold.c	FUNCTION_56	IF_14
0x40034fd	        0x482b45a0	             sub rax, qword [rbp - 0x60]	      1975	fold.c	FUNCTION_56	IF_14
0x4003501	        0x4883c001	                              add rax, 1	      1975	fold.c	FUNCTION_56	IF_14
0x4003505	        0x488945d8	             mov qword [rbp - 0x28], rax	      1975	fold.c	FUNCTION_56	IF_14
0x4003509	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400350d	          0x4889c2	                            mov rdx, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003510	      0xbe00000000	                              mov esi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003515	      0xbf00000000	                              mov edi, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400351a	      0xe800000000	                          call 0x400351f	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400351f	          0x4889c6	                            mov rsi, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003522	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003526	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400352a	          0x4889d1	                            mov rcx, rdx	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400352d	          0x4889f2	                            mov rdx, rsi	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003530	      0xbe33000000	                           mov esi, 0x33	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003535	          0x4889c7	                            mov rdi, rax	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003538	      0xb800000000	                              mov eax, 0	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x400353d	      0xe800000000	                          call 0x4003542	      1977	fold.c	FUNCTION_56	IF_14	CALL_13
0x4003542	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1981	fold.c	FUNCTION_56	IF_14
0x4003546	        0x488945c0	             mov qword [rbp - 0x40], rax	      1981	fold.c	FUNCTION_56	IF_14
0x400354a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1983	fold.c	FUNCTION_56
0x400354e	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1984	fold.c	FUNCTION_56
0x4003552	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1984	fold.c	FUNCTION_56
0x400355b	            0x7405	                            je 0x4003562	      1984	fold.c	FUNCTION_56
0x400355d	      0xe800000000	                          call 0x4003562	      1984	fold.c	FUNCTION_56
0x4003562	              0xc9	                                   leave	      1984	fold.c	FUNCTION_56
0x4003563	              0xc3	                                     ret	      1984	fold.c	FUNCTION_56
copyFoldingState	functions,0:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,0:CALL,1	23
0x4000040	              0x55	                                push rbp	       104	fold.c	FUNCTION_1
0x4000041	          0x4889e5	                            mov rbp, rsp	       104	fold.c	FUNCTION_1
0x4000044	        0x4883ec10	                           sub rsp, 0x10	       104	fold.c	FUNCTION_1
0x4000048	        0x48897df8	                mov qword [rbp - 8], rdi	       104	fold.c	FUNCTION_1
0x400004c	        0x488975f0	             mov qword [rbp - 0x10], rsi	       104	fold.c	FUNCTION_1
0x4000050	        0x488b45f8	                mov rax, qword [rbp - 8]	       105	fold.c	FUNCTION_1
0x4000054	     0xfb690200100	          movzx edx, byte [rax + 0x120] 	       105	fold.c	FUNCTION_1
0x400005b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       105	fold.c	FUNCTION_1
0x400005f	    0x889020010000	              mov byte [rax + 0x120], dl	       105	fold.c	FUNCTION_1
0x4000065	        0x488b45f8	                mov rax, qword [rbp - 8]	       106	fold.c	FUNCTION_1
0x4000069	     0xfb690210100	          movzx edx, byte [rax + 0x121] 	       106	fold.c	FUNCTION_1
0x4000070	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       106	fold.c	FUNCTION_1
0x4000074	    0x889021010000	              mov byte [rax + 0x121], dl	       106	fold.c	FUNCTION_1
0x400007a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       107	fold.c	FUNCTION_1	CALL_1
0x400007e	    0x488d90080100	                  lea rdx, [rax + 0x108]	       107	fold.c	FUNCTION_1	CALL_1
0x4000085	        0x488b45f8	                mov rax, qword [rbp - 8]	       107	fold.c	FUNCTION_1	CALL_1
0x4000089	    0x480508010000	                          add rax, 0x108	       107	fold.c	FUNCTION_1	CALL_1
0x400008f	          0x4889d6	                            mov rsi, rdx	       107	fold.c	FUNCTION_1	CALL_1
0x4000092	          0x4889c7	                            mov rdi, rax	       107	fold.c	FUNCTION_1	CALL_1
0x4000095	      0xe800000000	                          call 0x400009a	       107	fold.c	FUNCTION_1	CALL_1
0x400009a	              0x90	                                     nop	       108	fold.c	FUNCTION_1
0x400009b	              0xc9	                                   leave	       108	fold.c	FUNCTION_1
0x400009c	              0xc3	                                     ret	       108	fold.c	FUNCTION_1
foldReverseOrder	functions,0:DO,0:ELSE,0:FOR,1:SWITCH,0:WHILE,0:IF,0:CALL,0	76
0x40054e2	              0x55	                                push rbp	      2973	fold.c	FUNCTION_63
0x40054e3	          0x4889e5	                            mov rbp, rsp	      2973	fold.c	FUNCTION_63
0x40054e6	        0x48897da8	             mov qword [rbp - 0x58], rdi	      2973	fold.c	FUNCTION_63
0x40054ea	        0x488975a0	             mov qword [rbp - 0x60], rsi	      2973	fold.c	FUNCTION_63
0x40054ee	        0x48895598	             mov qword [rbp - 0x68], rdx	      2973	fold.c	FUNCTION_63
0x40054f2	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      2976	fold.c	FUNCTION_63
0x40054f6	        0x488945b0	             mov qword [rbp - 0x50], rax	      2976	fold.c	FUNCTION_63
0x40054fa	        0x488b4598	             mov rax, qword [rbp - 0x68]	      2977	fold.c	FUNCTION_63
0x40054fe	        0x488945b8	             mov qword [rbp - 0x48], rax	      2977	fold.c	FUNCTION_63
0x4005502	      0xe9e6000000	                           jmp 0x40055ed	      2979	fold.c	FUNCTION_63	FOR_1
0x4005507	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2981	fold.c	FUNCTION_63	FOR_1
0x400550b	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2981	fold.c	FUNCTION_63	FOR_1
0x400550f	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      2981	fold.c	FUNCTION_63	FOR_1
0x4005513	          0x4889d0	                            mov rax, rdx	      2981	fold.c	FUNCTION_63	FOR_1
0x4005516	          0x4801c0	                            add rax, rax	      2981	fold.c	FUNCTION_63	FOR_1
0x4005519	          0x4801d0	                            add rax, rdx	      2981	fold.c	FUNCTION_63	FOR_1
0x400551c	        0x48c1e004	                              shl rax, 4	      2981	fold.c	FUNCTION_63	FOR_1
0x4005520	          0x4801c8	                            add rax, rcx	      2981	fold.c	FUNCTION_63	FOR_1
0x4005523	        0x488945c0	             mov qword [rbp - 0x40], rax	      2981	fold.c	FUNCTION_63	FOR_1
0x4005527	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      2982	fold.c	FUNCTION_63	FOR_1
0x400552b	        0x488b4810	            mov rcx, qword [rax + 0x10] 	      2982	fold.c	FUNCTION_63	FOR_1
0x400552f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      2982	fold.c	FUNCTION_63	FOR_1
0x4005533	          0x4889d0	                            mov rax, rdx	      2982	fold.c	FUNCTION_63	FOR_1
0x4005536	          0x4801c0	                            add rax, rax	      2982	fold.c	FUNCTION_63	FOR_1
0x4005539	          0x4801d0	                            add rax, rdx	      2982	fold.c	FUNCTION_63	FOR_1
0x400553c	        0x48c1e004	                              shl rax, 4	      2982	fold.c	FUNCTION_63	FOR_1
0x4005540	          0x4801c8	                            add rax, rcx	      2982	fold.c	FUNCTION_63	FOR_1
0x4005543	        0x488945c8	             mov qword [rbp - 0x38], rax	      2982	fold.c	FUNCTION_63	FOR_1
0x4005547	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2983	fold.c	FUNCTION_63	FOR_1
0x400554b	          0x488b10	                    mov rdx, qword [rax]	      2983	fold.c	FUNCTION_63	FOR_1
0x400554e	        0x488955d0	             mov qword [rbp - 0x30], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x4005552	        0x488b5008	                mov rdx, qword [rax + 8]	      2983	fold.c	FUNCTION_63	FOR_1
0x4005556	        0x488955d8	             mov qword [rbp - 0x28], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x400555a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400555e	        0x488955e0	             mov qword [rbp - 0x20], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x4005562	        0x488b5018	            mov rdx, qword [rax + 0x18] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4005566	        0x488955e8	             mov qword [rbp - 0x18], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x400556a	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      2983	fold.c	FUNCTION_63	FOR_1
0x400556e	        0x488955f0	             mov qword [rbp - 0x10], rdx	      2983	fold.c	FUNCTION_63	FOR_1
0x4005572	        0x488b4028	            mov rax, qword [rax + 0x28] 	      2983	fold.c	FUNCTION_63	FOR_1
0x4005576	        0x488945f8	                mov qword [rbp - 8], rax	      2983	fold.c	FUNCTION_63	FOR_1
0x400557a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      2984	fold.c	FUNCTION_63	FOR_1
0x400557e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      2984	fold.c	FUNCTION_63	FOR_1
0x4005582	          0x488b0a	                    mov rcx, qword [rdx]	      2984	fold.c	FUNCTION_63	FOR_1
0x4005585	          0x488908	                    mov qword [rax], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x4005588	        0x488b4a08	                mov rcx, qword [rdx + 8]	      2984	fold.c	FUNCTION_63	FOR_1
0x400558c	        0x48894808	                mov qword [rax + 8], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x4005590	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	      2984	fold.c	FUNCTION_63	FOR_1
0x4005594	        0x48894810	             mov qword [rax + 0x10], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x4005598	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	      2984	fold.c	FUNCTION_63	FOR_1
0x400559c	        0x48894818	             mov qword [rax + 0x18], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x40055a0	        0x488b4a20	            mov rcx, qword [rdx + 0x20] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40055a4	        0x48894820	             mov qword [rax + 0x20], rcx	      2984	fold.c	FUNCTION_63	FOR_1
0x40055a8	        0x488b5228	            mov rdx, qword [rdx + 0x28] 	      2984	fold.c	FUNCTION_63	FOR_1
0x40055ac	        0x48895028	             mov qword [rax + 0x28], rdx	      2984	fold.c	FUNCTION_63	FOR_1
0x40055b0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055b4	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055b8	          0x488910	                    mov qword [rax], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055bb	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055bf	        0x48895008	                mov qword [rax + 8], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055c3	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055c7	        0x48895010	             mov qword [rax + 0x10], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055cb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055cf	        0x48895018	             mov qword [rax + 0x18], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055d3	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055d7	        0x48895020	             mov qword [rax + 0x20], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055db	        0x488b55f8	                mov rdx, qword [rbp - 8]	      2985	fold.c	FUNCTION_63	FOR_1
0x40055df	        0x48895028	             mov qword [rax + 0x28], rdx	      2985	fold.c	FUNCTION_63	FOR_1
0x40055e3	      0x488345b001	               add qword [rbp - 0x50], 1	      2979	fold.c	FUNCTION_63	FOR_1
0x40055e8	      0x48836db801	               sub qword [rbp - 0x48], 1	      2979	fold.c	FUNCTION_63	FOR_1
0x40055ed	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      2979	fold.c	FUNCTION_63	FOR_1
0x40055f1	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      2979	fold.c	FUNCTION_63	FOR_1
0x40055f5	     0xf8c0cffffff	                            jl 0x4005507	      2979	fold.c	FUNCTION_63	FOR_1
0x40055fb	              0x90	                                     nop	      2987	fold.c	FUNCTION_63
0x40055fc	              0x5d	                                 pop rbp	      2987	fold.c	FUNCTION_63
0x40055fd	              0xc3	                                     ret	      2987	fold.c	FUNCTION_63
foldtext_cleanup	functions,0:DO,0:ELSE,4:FOR,2:SWITCH,0:WHILE,3:IF,10:CALL,17	272
0x4003564	              0x55	                                push rbp	      1992	fold.c	FUNCTION_57
0x4003565	          0x4889e5	                            mov rbp, rsp	      1992	fold.c	FUNCTION_57
0x4003568	        0x4883ec50	                           sub rsp, 0x50	      1992	fold.c	FUNCTION_57
0x400356c	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1992	fold.c	FUNCTION_57
0x4003570	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1994	fold.c	FUNCTION_57
0x4003577	    0xc745d0000000	               mov dword [rbp - 0x30], 0	      1996	fold.c	FUNCTION_57
0x400357e	    0xc745d8000000	               mov dword [rbp - 0x28], 0	      2000	fold.c	FUNCTION_57
0x4003585	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      2001	fold.c	FUNCTION_57
0x400358c	    0x488b05000000	            mov rax, qword [0x04003593] 	      2004	fold.c	FUNCTION_57	CALL_1
0x4003593	    0x488b80501400	          mov rax, qword [rax + 0x1450] 	      2004	fold.c	FUNCTION_57	CALL_1
0x400359a	          0x4889c7	                            mov rdi, rax	      2004	fold.c	FUNCTION_57	CALL_1
0x400359d	      0xe800000000	                          call 0x40035a2	      2004	fold.c	FUNCTION_57	CALL_1
0x40035a2	        0x488945f8	                mov qword [rbp - 8], rax	      2004	fold.c	FUNCTION_57	CALL_1
0x40035a6	        0x488b45f8	                mov rax, qword [rbp - 8]	      2005	fold.c	FUNCTION_57	CALL_2
0x40035aa	          0x4889c7	                            mov rdi, rax	      2005	fold.c	FUNCTION_57	CALL_2
0x40035ad	      0xe800000000	                          call 0x40035b2	      2005	fold.c	FUNCTION_57	CALL_2
0x40035b2	          0x8945cc	             mov dword [rbp - 0x34], eax	      2005	fold.c	FUNCTION_57	CALL_2
0x40035b5	            0xeb04	                           jmp 0x40035bb	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035b7	        0x836dcc01	               sub dword [rbp - 0x34], 1	      2007	fold.c	FUNCTION_57	WHILE_1
0x40035bb	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035bf	            0x7e2e	                           jle 0x40035ef	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035c1	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035c4	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035c6	        0x488d50ff	                      lea rdx, [rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035ca	        0x488b45f8	                mov rax, qword [rbp - 8]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035ce	          0x4801d0	                            add rax, rdx	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035d1	           0xfb600	                   movzx eax, byte [rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035d4	            0x3c20	                            cmp al, 0x20	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035d6	            0x74df	                            je 0x40035b7	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035d8	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035db	            0x4898	                                    cdqe	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035dd	        0x488d50ff	                      lea rdx, [rax - 1]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035e1	        0x488b45f8	                mov rax, qword [rbp - 8]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035e5	          0x4801d0	                            add rax, rdx	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035e8	           0xfb600	                   movzx eax, byte [rax]	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035eb	            0x3c09	                               cmp al, 9	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035ed	            0x74c8	                            je 0x40035b7	      2006	fold.c	FUNCTION_57	WHILE_1	CALL_3
0x40035ef	        0x488b45f8	                mov rax, qword [rbp - 8]	      2010	fold.c	FUNCTION_57	CALL_4
0x40035f3	      0xbe00000000	                              mov esi, 0	      2010	fold.c	FUNCTION_57	CALL_4
0x40035f8	          0x4889c7	                            mov rdi, rax	      2010	fold.c	FUNCTION_57	CALL_4
0x40035fb	      0xe800000000	                          call 0x4003600	      2010	fold.c	FUNCTION_57	CALL_4
0x4003600	        0x488945e0	             mov qword [rbp - 0x20], rax	      2010	fold.c	FUNCTION_57	CALL_4
0x4003604	      0x48837de000	               cmp qword [rbp - 0x20], 0	      2011	fold.c	FUNCTION_57	IF_1
0x4003609	     0xf8490000000	                            je 0x400369f	      2011	fold.c	FUNCTION_57	IF_1
0x400360f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2013	fold.c	FUNCTION_57	IF_1
0x4003613	        0x488b45f8	                mov rax, qword [rbp - 8]	      2013	fold.c	FUNCTION_57	IF_1
0x4003617	          0x4829c2	                            sub rdx, rax	      2013	fold.c	FUNCTION_57	IF_1
0x400361a	          0x4889d0	                            mov rax, rdx	      2013	fold.c	FUNCTION_57	IF_1
0x400361d	            0x89c2	                            mov edx, eax	      2013	fold.c	FUNCTION_57	IF_1
0x400361f	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2013	fold.c	FUNCTION_57	IF_1
0x4003622	            0x29d0	                            sub eax, edx	      2013	fold.c	FUNCTION_57	IF_1
0x4003624	          0x8945d0	             mov dword [rbp - 0x30], eax	      2013	fold.c	FUNCTION_57	IF_1
0x4003627	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      2014	fold.c	FUNCTION_57	IF_1
0x400362b	        0x488b45f8	                mov rax, qword [rbp - 8]	      2014	fold.c	FUNCTION_57	IF_1
0x400362f	          0x4829c2	                            sub rdx, rax	      2014	fold.c	FUNCTION_57	IF_1
0x4003632	          0x4889d0	                            mov rax, rdx	      2014	fold.c	FUNCTION_57	IF_1
0x4003635	          0x8945cc	             mov dword [rbp - 0x34], eax	      2014	fold.c	FUNCTION_57	IF_1
0x4003638	            0xeb04	                           jmp 0x400363e	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400363a	        0x836dcc01	               sub dword [rbp - 0x34], 1	      2018	fold.c	FUNCTION_57	IF_1	WHILE_2
0x400363e	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003642	            0x7e2e	                           jle 0x4003672	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003644	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003647	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003649	        0x488d50ff	                      lea rdx, [rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400364d	        0x488b45f8	                mov rax, qword [rbp - 8]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003651	          0x4801d0	                            add rax, rdx	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003654	           0xfb600	                   movzx eax, byte [rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003657	            0x3c20	                            cmp al, 0x20	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003659	            0x74df	                            je 0x400363a	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400365b	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400365e	            0x4898	                                    cdqe	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003660	        0x488d50ff	                      lea rdx, [rax - 1]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003664	        0x488b45f8	                mov rax, qword [rbp - 8]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003668	          0x4801d0	                            add rax, rdx	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400366b	           0xfb600	                   movzx eax, byte [rax]	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x400366e	            0x3c09	                               cmp al, 9	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003670	            0x74c8	                            je 0x400363a	      2017	fold.c	FUNCTION_57	IF_1	WHILE_2	CALL_5
0x4003672	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4003676	        0x4883c002	                              add rax, 2	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x400367a	          0x4889c7	                            mov rdi, rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x400367d	      0xe800000000	                          call 0x4003682	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4003682	        0x488945e8	             mov qword [rbp - 0x18], rax	      2021	fold.c	FUNCTION_57	IF_1	CALL_6
0x4003686	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2022	fold.c	FUNCTION_57	IF_1
0x400368a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      2022	fold.c	FUNCTION_57	IF_1
0x400368e	          0x4829c2	                            sub rdx, rax	      2022	fold.c	FUNCTION_57	IF_1
0x4003691	          0x4889d0	                            mov rax, rdx	      2022	fold.c	FUNCTION_57	IF_1
0x4003694	          0x2945d0	             sub dword [rbp - 0x30], eax	      2022	fold.c	FUNCTION_57	IF_1
0x4003697	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2023	fold.c	FUNCTION_57	IF_1
0x400369b	        0x488945e0	             mov qword [rbp - 0x20], rax	      2023	fold.c	FUNCTION_57	IF_1
0x400369f	    0x488b05000000	            mov rax, qword [0x040036a6] 	      2025	fold.c	FUNCTION_57	CALL_7
0x40036a6	          0x4889c7	                            mov rdi, rax	      2025	fold.c	FUNCTION_57	CALL_7
0x40036a9	      0xe8162b0000	                    call sym.parseMarker	      2025	fold.c	FUNCTION_57	CALL_7
0x40036ae	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2027	fold.c	FUNCTION_57	FOR_1
0x40036b2	        0x488945e8	             mov qword [rbp - 0x18], rax	      2027	fold.c	FUNCTION_57	FOR_1
0x40036b6	      0xe945020000	                           jmp 0x4003900	      2027	fold.c	FUNCTION_57	FOR_1
0x40036bb	    0xc745d4000000	               mov dword [rbp - 0x2c], 0	      2029	fold.c	FUNCTION_57	FOR_1
0x40036c2	    0x8b0500000000	            mov eax, dword [0x040036c8] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036c8	          0x4863d0	                         movsxd rdx, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036cb	    0x488b05000000	            mov rax, qword [0x040036d2] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036d2	    0x488b88280200	           mov rcx, qword [rax + 0x228] 	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036d9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036dd	          0x4889ce	                            mov rsi, rcx	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036e0	          0x4889c7	                            mov rdi, rax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036e3	      0xe800000000	                          call 0x40036e8	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036e8	            0x85c0	                           test eax, eax	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036ea	            0x750b	                           jne 0x40036f7	      2030	fold.c	FUNCTION_57	FOR_1	IF_2	CALL_8
0x40036ec	    0x8b0500000000	            mov eax, dword [0x040036f2] 	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x40036f2	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x40036f5	            0xeb2c	                           jmp 0x4003723	      2031	fold.c	FUNCTION_57	FOR_1	IF_2
0x40036f7	    0x8b0500000000	            mov eax, dword [0x040036fd] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x40036fd	          0x4863d0	                         movsxd rdx, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4003700	    0x488b0d000000	            mov rcx, qword [0x04003707] 	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4003707	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400370b	          0x4889ce	                            mov rsi, rcx	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400370e	          0x4889c7	                            mov rdi, rax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4003711	      0xe800000000	                          call 0x4003716	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4003716	            0x85c0	                           test eax, eax	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x4003718	            0x7509	                           jne 0x4003723	      2032	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3	CALL_9
0x400371a	    0x8b0500000000	            mov eax, dword [0x04003720] 	      2033	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3
0x4003720	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2033	fold.c	FUNCTION_57	FOR_1	ELSE_1	IF_3
0x4003723	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x4003727	     0xf8ecc000000	                           jle 0x40037f9	      2034	fold.c	FUNCTION_57	FOR_1	IF_4
0x400372d	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003730	          0x4863d0	                         movsxd rdx, eax	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003733	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003737	          0x4801d0	                            add rax, rdx	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x400373a	           0xfb600	                   movzx eax, byte [rax]	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x400373d	           0xfb6c0	                           movzx eax, al	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003740	          0x83e830	                           sub eax, 0x30	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003743	          0x83f809	                              cmp eax, 9	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003746	            0x7704	                            ja 0x400374c	      2036	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5	CALL_10
0x4003748	        0x8345d401	               add dword [rbp - 0x2c], 1	      2037	fold.c	FUNCTION_57	FOR_1	IF_4	IF_5
0x400374c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003750	        0x488945f0	             mov qword [rbp - 0x10], rax	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003754	            0xeb05	                           jmp 0x400375b	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003756	      0x48836df001	               sub qword [rbp - 0x10], 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400375b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400375f	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003763	            0x761e	                           jbe 0x4003783	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003765	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003769	        0x4883e801	                              sub rax, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400376d	           0xfb600	                   movzx eax, byte [rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003770	            0x3c20	                            cmp al, 0x20	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003772	            0x74e2	                            je 0x4003756	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003774	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003778	        0x4883e801	                              sub rax, 1	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400377c	           0xfb600	                   movzx eax, byte [rax]	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x400377f	            0x3c09	                               cmp al, 9	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003781	            0x74d3	                            je 0x4003756	      2041	fold.c	FUNCTION_57	FOR_1	IF_4	FOR_2	CALL_11
0x4003783	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4003786	          0x4863d0	                         movsxd rdx, eax	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4003789	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400378d	          0x4801d0	                            add rax, rdx	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4003790	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x4003794	     0xf87d4000000	                            ja 0x400386e	      2043	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x400379a	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x400379d	          0x4863d0	                         movsxd rdx, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037a0	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037a3	            0x4898	                                    cdqe	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037a5	          0x48f7d8	                                 neg rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037a8	          0x4889c1	                            mov rcx, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037ab	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037af	          0x4801c1	                            add rcx, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037b2	        0x488b45f8	                mov rax, qword [rbp - 8]	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037b6	          0x4889c6	                            mov rsi, rax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037b9	          0x4889cf	                            mov rdi, rcx	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037bc	      0xe800000000	                          call 0x40037c1	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037c1	            0x85c0	                           test eax, eax	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037c3	     0xf85a5000000	                           jne 0x400386e	      2044	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6	CALL_12
0x40037c9	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037cd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037d1	          0x4829c2	                            sub rdx, rax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037d4	          0x4889d0	                            mov rax, rdx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037d7	            0x89c2	                            mov edx, eax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037d9	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037dc	             0x1d0	                            add eax, edx	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037de	           0x145d4	             add dword [rbp - 0x2c], eax	      2046	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037e1	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037e4	            0x4898	                                    cdqe	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037e6	          0x48f7d8	                                 neg rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037e9	          0x4889c2	                            mov rdx, rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037ec	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037f0	          0x4801d0	                            add rax, rdx	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037f3	        0x488945e8	             mov qword [rbp - 0x18], rax	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037f7	            0xeb75	                           jmp 0x400386e	      2047	fold.c	FUNCTION_57	FOR_1	IF_4	IF_6
0x40037f9	      0x48837de000	               cmp qword [rbp - 0x20], 0	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x40037fe	            0x746e	                            je 0x400386e	      2050	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7
0x4003800	        0x837dd800	               cmp dword [rbp - 0x28], 0	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003804	            0x7532	                           jne 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003806	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400380a	            0x7e2c	                           jle 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400380c	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400380f	          0x4863d0	                         movsxd rdx, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003812	        0x488b4df8	                mov rcx, qword [rbp - 8]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003816	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400381a	          0x4889ce	                            mov rsi, rcx	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x400381d	          0x4889c7	                            mov rdi, rax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003820	      0xe800000000	                          call 0x4003825	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003825	            0x85c0	                           test eax, eax	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003827	            0x750f	                           jne 0x4003838	      2052	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8	CALL_13
0x4003829	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      2054	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x400382c	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2054	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x400382f	    0xc745d8010000	               mov dword [rbp - 0x28], 1	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4003836	            0xeb36	                           jmp 0x400386e	      2055	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	IF_8
0x4003838	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400383c	            0x7530	                           jne 0x400386e	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400383e	        0x837dd000	               cmp dword [rbp - 0x30], 0	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4003842	            0x7e2a	                           jle 0x400386e	      2057	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4003844	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4003847	          0x4863d0	                         movsxd rdx, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400384a	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400384e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4003852	          0x4889ce	                            mov rsi, rcx	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4003855	          0x4889c7	                            mov rdi, rax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4003858	      0xe800000000	                          call 0x400385d	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400385d	            0x85c0	                           test eax, eax	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x400385f	            0x750d	                           jne 0x400386e	      2058	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9	CALL_14
0x4003861	          0x8b45d0	             mov eax, dword [rbp - 0x30]	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4003864	          0x8945d4	             mov dword [rbp - 0x2c], eax	      2060	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x4003867	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      2061	fold.c	FUNCTION_57	FOR_1	ELSE_2	IF_7	ELSE_3	IF_9
0x400386e	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4003872	            0x7465	                            je 0x40038d9	      2064	fold.c	FUNCTION_57	FOR_1	IF_10
0x4003874	            0xeb04	                           jmp 0x400387a	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003876	        0x8345d401	               add dword [rbp - 0x2c], 1	      2067	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3
0x400387a	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400387d	          0x4863d0	                         movsxd rdx, eax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003880	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003884	          0x4801d0	                            add rax, rdx	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003887	           0xfb600	                   movzx eax, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400388a	            0x3c20	                            cmp al, 0x20	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400388c	            0x74e8	                            je 0x4003876	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400388e	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003891	          0x4863d0	                         movsxd rdx, eax	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003894	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x4003898	          0x4801d0	                            add rax, rdx	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400389b	           0xfb600	                   movzx eax, byte [rax]	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x400389e	            0x3c09	                               cmp al, 9	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40038a0	            0x74d4	                            je 0x4003876	      2066	fold.c	FUNCTION_57	FOR_1	IF_10	WHILE_3	CALL_15
0x40038a2	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038a5	          0x4863d0	                         movsxd rdx, eax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038a8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038ac	          0x4801d0	                            add rax, rdx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038af	          0x4889c7	                            mov rdi, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038b2	      0xe800000000	                          call 0x40038b7	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038b7	        0x488d5001	                      lea rdx, [rax + 1]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038bb	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038be	          0x4863c8	                         movsxd rcx, eax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038c1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038c5	          0x4801c1	                            add rcx, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038c8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038cc	          0x4889ce	                            mov rsi, rcx	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038cf	          0x4889c7	                            mov rdi, rax	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038d2	      0xe800000000	                          call 0x40038d7	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038d7	            0xeb27	                           jmp 0x4003900	      2068	fold.c	FUNCTION_57	FOR_1	IF_10	CALL_16
0x40038d9	    0x8b0500000000	            mov eax, dword [0x040038df] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038df	            0x85c0	                           test eax, eax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038e1	            0x7412	                            je 0x40038f5	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038e3	    0x488b05000000	            mov rax, qword [0x040038ea] 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038ea	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038ee	          0x4889d7	                            mov rdi, rdx	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038f1	            0xffd0	                                call rax	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038f3	            0xeb05	                           jmp 0x40038fa	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038f5	      0xb801000000	                              mov eax, 1	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038fa	            0x4898	                                    cdqe	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x40038fc	        0x480145e8	            add qword [rbp - 0x18], rax 	      2072	fold.c	FUNCTION_57	FOR_1	ELSE_4	CALL_17
0x4003900	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      2027	fold.c	FUNCTION_57	FOR_1
0x4003904	           0xfb600	                   movzx eax, byte [rax]	      2027	fold.c	FUNCTION_57	FOR_1
0x4003907	            0x84c0	                             test al, al	      2027	fold.c	FUNCTION_57	FOR_1
0x4003909	     0xf85acfdffff	                           jne 0x40036bb	      2027	fold.c	FUNCTION_57	FOR_1
0x400390f	              0x90	                                     nop	      2075	fold.c	FUNCTION_57
0x4003910	              0xc9	                                   leave	      2075	fold.c	FUNCTION_57
0x4003911	              0xc3	                                     ret	      2075	fold.c	FUNCTION_57
newFoldLevel	functions,1:DO,0:ELSE,0:FOR,0:SWITCH,0:WHILE,0:IF,1:CALL,2	45
0x4000852	              0x55	                                push rbp	       465	fold.c	FUNCTION_20
0x4000853	          0x4889e5	                            mov rbp, rsp	       465	fold.c	FUNCTION_20
0x4000856	        0x4883ec10	                           sub rsp, 0x10	       465	fold.c	FUNCTION_20
0x400085a	    0x488b05000000	            mov rax, qword [0x04000861] 	       466	fold.c	FUNCTION_20	CALL_1
0x4000861	          0x4889c7	                            mov rdi, rax	       466	fold.c	FUNCTION_20	CALL_1
0x4000864	      0xe89b000000	                call sym.newFoldLevelWin	       466	fold.c	FUNCTION_20	CALL_1
0x4000869	    0x488b05000000	            mov rax, qword [0x04000870] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000870	          0x4889c7	                            mov rdi, rax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000873	      0xe800000000	                          call 0x4000878	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000878	            0x85c0	                           test eax, eax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x400087a	     0xf8481000000	                            je 0x4000901	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000880	    0x488b05000000	            mov rax, qword [0x04000887] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000887	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x400088d	            0x85c0	                           test eax, eax	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x400088f	            0x7470	                            je 0x4000901	       469	fold.c	FUNCTION_20	IF_1	CALL_2
0x4000891	    0x488b05000000	            mov rax, qword [0x04000898] 	       476	fold.c	FUNCTION_20	IF_1
0x4000898	        0x488945f8	                mov qword [rbp - 8], rax	       476	fold.c	FUNCTION_20	IF_1
0x400089c	            0xeb5c	                           jmp 0x40008fa	       476	fold.c	FUNCTION_20	IF_1
0x400089e	    0x488b05000000	            mov rax, qword [0x040008a5] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008a5	        0x483945f8	                cmp qword [rbp - 8], rax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008a9	            0x7443	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008ab	        0x488b45f8	                mov rax, qword [rbp - 8]	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008af	          0x4889c7	                            mov rdi, rax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008b2	      0xe800000000	                          call 0x40008b7	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008b7	            0x85c0	                           test eax, eax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008b9	            0x7433	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008bb	        0x488b45f8	                mov rax, qword [rbp - 8]	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008bf	    0x8b8088020000	           mov eax, dword [rax + 0x288] 	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008c5	            0x85c0	                           test eax, eax	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008c7	            0x7425	                            je 0x40008ee	       478	fold.c	FUNCTION_20	FUNCTION_1	CALL_1
0x40008c9	    0x488b05000000	            mov rax, qword [0x040008d0] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x40008d0	    0x488b90e80100	           mov rdx, qword [rax + 0x1e8] 	       480	fold.c	FUNCTION_20	FUNCTION_1
0x40008d7	        0x488b45f8	                mov rax, qword [rbp - 8]	       480	fold.c	FUNCTION_20	FUNCTION_1
0x40008db	    0x488990e80100	            mov qword [rax + 0x1e8], rdx	       480	fold.c	FUNCTION_20	FUNCTION_1
0x40008e2	        0x488b45f8	                mov rax, qword [rbp - 8]	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x40008e6	          0x4889c7	                            mov rdi, rax	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x40008e9	      0xe816000000	                call sym.newFoldLevelWin	       481	fold.c	FUNCTION_20	FUNCTION_1	CALL_2
0x40008ee	        0x488b45f8	                mov rax, qword [rbp - 8]	       476	fold.c	FUNCTION_20	IF_1
0x40008f2	        0x488b4020	            mov rax, qword [rax + 0x20] 	       476	fold.c	FUNCTION_20	IF_1
0x40008f6	        0x488945f8	                mov qword [rbp - 8], rax	       476	fold.c	FUNCTION_20	IF_1
0x40008fa	      0x48837df800	                  cmp qword [rbp - 8], 0	       476	fold.c	FUNCTION_20	IF_1
0x40008ff	            0x759d	                           jne 0x400089e	       476	fold.c	FUNCTION_20	IF_1
0x4000901	              0x90	                                     nop	       486	fold.c	FUNCTION_20
0x4000902	              0xc9	                                   leave	       486	fold.c	FUNCTION_20
0x4000903	              0xc3	                                     ret	       486	fold.c	FUNCTION_20
