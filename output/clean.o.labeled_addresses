_	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,1:DO,0:ELSE,0	15
0x2ee	              0x55	                                push rbp	        51	gettext.h	FUNCTION_3
0x2ef	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_3
0x2f2	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_3
0x2f6	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_3
0x2fa	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_3	IF_1
0x2fe	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_3	IF_1
0x301	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_3	IF_1
0x303	            0x7507	                           jne 0x400034c	        52	gettext.h	FUNCTION_3	IF_1
0x305	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_3	IF_1
0x30a	            0xeb0c	                           jmp 0x4000358	        53	gettext.h	FUNCTION_3	IF_1
0x30c	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_3	CALL_2
0x310	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_3	CALL_2
0x313	      0xe800000000	                          call 0x4000358	        54	gettext.h	FUNCTION_3	CALL_2
0x318	              0xc9	                                   leave	        55	gettext.h	FUNCTION_3
0x319	              0xc3	                                     ret	        55	gettext.h	FUNCTION_3
exclude_cb	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,1:IF,0:DO,0:ELSE,0	17
0x6d1	              0x55	                                push rbp	       146	clean.c	FUNCTION_9
0x6d2	          0x4889e5	                            mov rbp, rsp	       146	clean.c	FUNCTION_9
0x6d5	        0x4883ec30	                           sub rsp, 0x30	       146	clean.c	FUNCTION_9
0x6d9	        0x48897de8	             mov qword [rbp - 0x18], rdi	       146	clean.c	FUNCTION_9
0x6dd	        0x488975e0	             mov qword [rbp - 0x20], rsi	       146	clean.c	FUNCTION_9
0x6e1	          0x8955dc	             mov dword [rbp - 0x24], edx	       146	clean.c	FUNCTION_9
0x6e4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	clean.c	FUNCTION_9
0x6e8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       147	clean.c	FUNCTION_9
0x6ec	        0x488945f8	                mov qword [rbp - 8], rax	       147	clean.c	FUNCTION_9
0x6f0	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       148	clean.c	FUNCTION_9	CALL_1
0x6f4	        0x488b45f8	                mov rax, qword [rbp - 8]	       148	clean.c	FUNCTION_9	CALL_1
0x6f8	          0x4889d6	                            mov rsi, rdx	       148	clean.c	FUNCTION_9	CALL_1
0x6fb	          0x4889c7	                            mov rdi, rax	       148	clean.c	FUNCTION_9	CALL_1
0x6fe	      0xe800000000	                          call 0x4000743	       148	clean.c	FUNCTION_9	CALL_1
0x703	      0xb800000000	                              mov eax, 0	       149	clean.c	FUNCTION_9
0x708	              0xc9	                                   leave	       150	clean.c	FUNCTION_9
0x709	              0xc3	                                     ret	       150	clean.c	FUNCTION_9
dir_path_match	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,1:IF,0:DO,0:ELSE,0	45
0x395	              0x55	                                push rbp	       343	dir.h	FUNCTION_29
0x396	          0x4889e5	                            mov rbp, rsp	       343	dir.h	FUNCTION_29
0x399	        0x4883ec30	                           sub rsp, 0x30	       343	dir.h	FUNCTION_29
0x39d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       343	dir.h	FUNCTION_29
0x3a1	        0x488975e0	             mov qword [rbp - 0x20], rsi	       343	dir.h	FUNCTION_29
0x3a5	          0x8955dc	             mov dword [rbp - 0x24], edx	       343	dir.h	FUNCTION_29
0x3a8	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       343	dir.h	FUNCTION_29
0x3ac	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_29
0x3b0	            0x8b00	                    mov eax, dword [rax]	       344	dir.h	FUNCTION_29
0x3b2	            0x85c0	                           test eax, eax	       344	dir.h	FUNCTION_29
0x3b4	            0x741f	                            je 0x4000415	       344	dir.h	FUNCTION_29
0x3b6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_29
0x3ba	            0x8b00	                    mov eax, dword [rax]	       344	dir.h	FUNCTION_29
0x3bc	          0x8d50ff	                      lea edx, [rax - 1]	       344	dir.h	FUNCTION_29
0x3bf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_29
0x3c3	            0x89d2	                            mov edx, edx	       344	dir.h	FUNCTION_29
0x3c5	       0xfb6441004	        movzx eax, byte [rax + rdx + 4] 	       344	dir.h	FUNCTION_29
0x3ca	            0x3c2f	                            cmp al, 0x2f	       344	dir.h	FUNCTION_29
0x3cc	            0x7507	                           jne 0x4000415	       344	dir.h	FUNCTION_29
0x3ce	      0xb801000000	                              mov eax, 1	       344	dir.h	FUNCTION_29
0x3d3	            0xeb05	                           jmp 0x400041a	       344	dir.h	FUNCTION_29
0x3d5	      0xb800000000	                              mov eax, 0	       344	dir.h	FUNCTION_29
0x3da	          0x8945f8	                mov dword [rbp - 8], eax	       344	dir.h	FUNCTION_29
0x3dd	        0x837df800	                  cmp dword [rbp - 8], 0	       345	dir.h	FUNCTION_29
0x3e1	            0x740b	                            je 0x400042e	       345	dir.h	FUNCTION_29
0x3e3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       345	dir.h	FUNCTION_29
0x3e7	            0x8b00	                    mov eax, dword [rax]	       345	dir.h	FUNCTION_29
0x3e9	          0x83e801	                              sub eax, 1	       345	dir.h	FUNCTION_29
0x3ec	            0xeb06	                           jmp 0x4000434	       345	dir.h	FUNCTION_29
0x3ee	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       345	dir.h	FUNCTION_29
0x3f2	            0x8b00	                    mov eax, dword [rax]	       345	dir.h	FUNCTION_29
0x3f4	          0x8945fc	                mov dword [rbp - 4], eax	       345	dir.h	FUNCTION_29
0x3f7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       346	dir.h	FUNCTION_29	CALL_1
0x3fb	        0x488d7004	                      lea rsi, [rax + 4]	       346	dir.h	FUNCTION_29	CALL_1
0x3ff	        0x448b45f8	                mov r8d, dword [rbp - 8]	       346	dir.h	FUNCTION_29	CALL_1
0x403	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	       346	dir.h	FUNCTION_29	CALL_1
0x407	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	       346	dir.h	FUNCTION_29	CALL_1
0x40a	          0x8b55fc	                mov edx, dword [rbp - 4]	       346	dir.h	FUNCTION_29	CALL_1
0x40d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       346	dir.h	FUNCTION_29	CALL_1
0x411	          0x4589c1	                            mov r9d, r8d	       346	dir.h	FUNCTION_29	CALL_1
0x414	          0x4989f8	                             mov r8, rdi	       346	dir.h	FUNCTION_29	CALL_1
0x417	          0x4889c7	                            mov rdi, rax	       346	dir.h	FUNCTION_29	CALL_1
0x41a	      0xe800000000	                          call 0x400045f	       346	dir.h	FUNCTION_29	CALL_1
0x41f	              0xc9	                                   leave	       348	dir.h	FUNCTION_29
0x420	              0xc3	                                     ret	       348	dir.h	FUNCTION_29
filter_by_patterns_cmd	functions,1:SWITCH,0:WHILE,0:FOR,2:CALL,21:IF,6:DO,0:ELSE,2	173
0x1b5a	              0x55	                                push rbp	       648	clean.c	FUNCTION_19
0x1b5b	          0x4889e5	                            mov rbp, rsp	       648	clean.c	FUNCTION_19
0x1b5e	              0x53	                                push rbx	       648	clean.c	FUNCTION_19
0x1b5f	    0x4881ec780100	                          sub rsp, 0x178	       648	clean.c	FUNCTION_19
0x1b66	    0x64488b042528	                mov rax, qword fs:[0x28]	       648	clean.c	FUNCTION_19
0x1b6f	        0x488945e8	             mov qword [rbp - 0x18], rax	       648	clean.c	FUNCTION_19
0x1b73	            0x31c0	                            xor eax, eax	       648	clean.c	FUNCTION_19
0x1b75	    0x48c785b0feff	              mov qword [rbp - 0x150], 0	       650	clean.c	FUNCTION_19
0x1b80	    0x48c785b8feff	              mov qword [rbp - 0x148], 0	       650	clean.c	FUNCTION_19
0x1b8b	    0x48c785c0feff	              mov qword [rbp - 0x140], 0	       650	clean.c	FUNCTION_19
0x1b96	    0xc78590feffff	    mov dword [rbp - 0x170], 0xffffffff 	       654	clean.c	FUNCTION_19
0x1ba0	    0x8b0500000000	            mov eax, dword [0x04001be6] 	       657	clean.c	FUNCTION_19	FOR_1	IF_1
0x1ba6	            0x85c0	                           test eax, eax	       657	clean.c	FUNCTION_19	FOR_1	IF_1
0x1ba8	     0xf84b3020000	                            je 0x4001ea1	       657	clean.c	FUNCTION_19	FOR_1	IF_1
0x1bae	    0x83bd90feffff	              cmp dword [rbp - 0x170], 0	       660	clean.c	FUNCTION_19	FOR_1	IF_2
0x1bb5	            0x7405	                            je 0x4001bfc	       660	clean.c	FUNCTION_19	FOR_1	IF_2
0x1bb7	      0xe802f2ffff	              call sym.pretty_print_dels	       661	clean.c	FUNCTION_19	FOR_1	CALL_1
0x1bbc	      0xbf02000000	                              mov edi, 2	       663	clean.c	FUNCTION_19	FOR_1	CALL_2
0x1bc1	      0xe8e1eaffff	              call sym.clean_print_color	       663	clean.c	FUNCTION_19	FOR_1	CALL_2
0x1bc6	      0xbf00000000	                              mov edi, 0	       664	clean.c	FUNCTION_19	FOR_1	CALL_4
0x1bcb	      0xe81ee7ffff	                               call sym.	       664	clean.c	FUNCTION_19	FOR_1	CALL_4
0x1bd0	          0x4889c7	                            mov rdi, rax	       664	clean.c	FUNCTION_19	FOR_1	CALL_4
0x1bd3	      0xb800000000	                              mov eax, 0	       664	clean.c	FUNCTION_19	FOR_1	CALL_4
0x1bd8	      0xe800000000	                          call 0x4001c1d	       664	clean.c	FUNCTION_19	FOR_1	CALL_4
0x1bdd	      0xbf00000000	                              mov edi, 0	       665	clean.c	FUNCTION_19	FOR_1	CALL_5
0x1be2	      0xe8c0eaffff	              call sym.clean_print_color	       665	clean.c	FUNCTION_19	FOR_1	CALL_5
0x1be7	    0x488b15000000	            mov rdx, qword [0x04001c2e] 	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1bee	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1bf5	          0x4889d6	                            mov rsi, rdx	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1bf8	          0x4889c7	                            mov rdi, rax	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1bfb	      0xe800000000	                          call 0x4001c40	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1c00	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1c03	            0x7411	                            je 0x4001c56	       666	clean.c	FUNCTION_19	FOR_1	IF_3	CALL_6
0x1c05	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       667	clean.c	FUNCTION_19	FOR_1	CALL_7
0x1c0c	          0x4889c7	                            mov rdi, rax	       667	clean.c	FUNCTION_19	FOR_1	CALL_7
0x1c0f	      0xe800000000	                          call 0x4001c54	       667	clean.c	FUNCTION_19	FOR_1	CALL_7
0x1c14	            0xeb0a	                           jmp 0x4001c60	       667	clean.c	FUNCTION_19	FOR_1	CALL_7
0x1c16	      0xbf0a000000	                            mov edi, 0xa	       669	clean.c	FUNCTION_19	FOR_1	CALL_8
0x1c1b	      0xe800000000	                          call 0x4001c60	       669	clean.c	FUNCTION_19	FOR_1	CALL_8
0x1c20	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       672	clean.c	FUNCTION_19	FOR_1	IF_4
0x1c27	          0x4885c0	                           test rax, rax	       672	clean.c	FUNCTION_19	FOR_1	IF_4
0x1c2a	     0xf8434020000	                            je 0x4001ea4	       672	clean.c	FUNCTION_19	FOR_1	IF_4
0x1c30	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       675	clean.c	FUNCTION_19	FOR_1	CALL_9
0x1c37	      0xba10010000	                          mov edx, 0x110	       675	clean.c	FUNCTION_19	FOR_1	CALL_9
0x1c3c	      0xbe00000000	                              mov esi, 0	       675	clean.c	FUNCTION_19	FOR_1	CALL_9
0x1c41	          0x4889c7	                            mov rdi, rax	       675	clean.c	FUNCTION_19	FOR_1	CALL_9
0x1c44	      0xe800000000	                          call 0x4001c89	       675	clean.c	FUNCTION_19	FOR_1	CALL_9
0x1c49	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c50	      0xba00000000	                              mov edx, 0	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c55	      0xbe00000000	                              mov esi, 0	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c5a	          0x4889c7	                            mov rdi, rax	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c5d	      0xe800000000	                          call 0x4001ca2	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c62	    0x488985a0feff	            mov qword [rbp - 0x160], rax	       676	clean.c	FUNCTION_19	FOR_1	CALL_10
0x1c69	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c70	      0xba00000000	                              mov edx, 0	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c75	      0xbe20000000	                           mov esi, 0x20	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c7a	          0x4889c7	                            mov rdi, rax	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c7d	      0xe8e8e5ffff	               call sym.strbuf_split_max	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c82	    0x488985a8feff	            mov qword [rbp - 0x158], rax	       677	clean.c	FUNCTION_19	FOR_1	CALL_11
0x1c89	    0xc78594feffff	              mov dword [rbp - 0x16c], 0	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1c93	      0xe99f000000	                           jmp 0x4001d77	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1c98	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1c9e	            0x4898	                                    cdqe	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1ca0	    0x488d14c50000	                        lea rdx, [rax*8]	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1ca8	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1caf	          0x4801d0	                            add rax, rdx	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1cb2	          0x488b00	                    mov rax, qword [rax]	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1cb5	          0x4889c7	                            mov rdi, rax	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1cb8	      0xe800000000	                          call 0x4001cfd	       680	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_12
0x1cbd	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cc3	            0x4898	                                    cdqe	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cc5	    0x488d14c50000	                        lea rdx, [rax*8]	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1ccd	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cd4	          0x4801d0	                            add rax, rdx	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cd7	          0x488b00	                    mov rax, qword [rax]	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cda	        0x488b4008	                mov rax, qword [rax + 8]	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1cde	          0x4885c0	                           test rax, rax	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1ce1	            0x744c	                            je 0x4001d6f	       681	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1ce3	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1ce9	            0xf7d0	                                 not eax	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1ceb	            0x89c1	                            mov ecx, eax	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1ced	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1cf3	            0x4898	                                    cdqe	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1cf5	    0x488d14c50000	                        lea rdx, [rax*8]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1cfd	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d04	          0x4801d0	                            add rax, rdx	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d07	          0x488b00	                    mov rax, qword [rax]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d0a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d0e	    0x488b95a0feff	            mov rdx, qword [rbp - 0x160]	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d15	          0x4189c8	                            mov r8d, ecx	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d18	          0x4889d1	                            mov rcx, rdx	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d1b	      0xba00000000	                              mov edx, 0	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d20	      0xbe00000000	                              mov esi, 0	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d25	          0x4889c7	                            mov rdi, rax	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d28	      0xe800000000	                          call 0x4001d6d	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d2d	            0xeb01	                           jmp 0x4001d70	       684	clean.c	FUNCTION_19	FOR_1	FOR_2	CALL_13
0x1d2f	              0x90	                                     nop	       682	clean.c	FUNCTION_19	FOR_1	FOR_2	IF_5
0x1d30	    0x838594feffff	              add dword [rbp - 0x16c], 1	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d37	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d3d	            0x4898	                                    cdqe	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d3f	    0x488d14c50000	                        lea rdx, [rax*8]	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d47	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d4e	          0x4801d0	                            add rax, rdx	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d51	          0x488b00	                    mov rax, qword [rax]	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d54	          0x4885c0	                           test rax, rax	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d57	     0xf853bffffff	                           jne 0x4001cd8	       679	clean.c	FUNCTION_19	FOR_1	FOR_2
0x1d5d	    0xc78590feffff	              mov dword [rbp - 0x170], 0	       687	clean.c	FUNCTION_19	FOR_1
0x1d67	    0x488b05000000	            mov rax, qword [0x04001dae] 	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1d6e	    0x48898598feff	            mov qword [rbp - 0x168], rax	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1d75	            0xeb4f	                           jmp 0x4001e06	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1d77	    0xc7858cfeffff	              mov dword [rbp - 0x174], 0	       689	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1d81	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1d88	          0x488b10	                    mov rdx, qword [rax]	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1d8b	    0x488d8d8cfeff	                  lea rcx, [rbp - 0x174]	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1d92	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1d99	      0xbe00000000	                              mov esi, 0	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1d9e	          0x4889c7	                            mov rdi, rax	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1da1	      0xe800000000	                          call 0x4001de6	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1da6	            0x85c0	                           test eax, eax	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1da8	            0x7414	                            je 0x4001dfe	       691	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1	CALL_1
0x1daa	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       692	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1
0x1db1	          0x488b00	                    mov rax, qword [rax]	       692	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1
0x1db4	          0xc60000	                       mov byte [rax], 0	       692	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1
0x1db7	    0x838590feffff	              add dword [rbp - 0x170], 1	       693	clean.c	FUNCTION_19	FOR_1	FUNCTION_1	IF_1
0x1dbe	    0x48838598feff	           add qword [rbp - 0x168], 0x10	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1dc6	    0x4883bd98feff	              cmp qword [rbp - 0x168], 0	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1dce	            0x741f	                            je 0x4001e2f	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1dd0	    0x488b05000000	            mov rax, qword [0x04001e17] 	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1dd7	    0x8b1500000000	            mov edx, dword [0x04001e1d] 	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1ddd	            0x89d2	                            mov edx, edx	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1ddf	        0x48c1e204	                              shl rdx, 4	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1de3	          0x4801d0	                            add rax, rdx	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1de6	    0x483b8598feff	            cmp rax, qword [rbp - 0x168]	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1ded	            0x7788	                            ja 0x4001db7	       688	clean.c	FUNCTION_19	FOR_1	FUNCTION_1
0x1def	    0x83bd90feffff	              cmp dword [rbp - 0x170], 0	       697	clean.c	FUNCTION_19	FOR_1	IF_6
0x1df6	            0x7411	                            je 0x4001e49	       697	clean.c	FUNCTION_19	FOR_1	IF_6
0x1df8	      0xbe00000000	                              mov esi, 0	       698	clean.c	FUNCTION_19	FOR_1	IF_6	CALL_14
0x1dfd	      0xbf00000000	                              mov edi, 0	       698	clean.c	FUNCTION_19	FOR_1	IF_6	CALL_14
0x1e02	      0xe800000000	                          call 0x4001e47	       698	clean.c	FUNCTION_19	FOR_1	IF_6	CALL_14
0x1e07	            0xeb35	                           jmp 0x4001e7e	       698	clean.c	FUNCTION_19	FOR_1	IF_6	CALL_14
0x1e09	      0xbf05000000	                              mov edi, 5	       700	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_15
0x1e0e	      0xe894e8ffff	              call sym.clean_print_color	       700	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_15
0x1e13	    0x488b9dc0feff	            mov rbx, qword [rbp - 0x140]	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e1a	      0xbf00000000	                              mov edi, 0	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e1f	      0xe8cae4ffff	                               call sym.	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e24	          0x4889de	                            mov rsi, rbx	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e27	          0x4889c7	                            mov rdi, rax	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e2a	      0xb800000000	                              mov eax, 0	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e2f	      0xe800000000	                          call 0x4001e74	       701	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_17
0x1e34	      0xbf00000000	                              mov edi, 0	       702	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_18
0x1e39	      0xe869e8ffff	              call sym.clean_print_color	       702	clean.c	FUNCTION_19	FOR_1	ELSE_2	CALL_18
0x1e3e	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       705	clean.c	FUNCTION_19	FOR_1	CALL_19
0x1e45	          0x4889c7	                            mov rdi, rax	       705	clean.c	FUNCTION_19	FOR_1	CALL_19
0x1e48	      0xe800000000	                          call 0x4001e8d	       705	clean.c	FUNCTION_19	FOR_1	CALL_19
0x1e4d	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       706	clean.c	FUNCTION_19	FOR_1	CALL_20
0x1e54	          0x4889c7	                            mov rdi, rax	       706	clean.c	FUNCTION_19	FOR_1	CALL_20
0x1e57	      0xe800000000	                          call 0x4001e9c	       706	clean.c	FUNCTION_19	FOR_1	CALL_20
0x1e5c	      0xe93ffdffff	                           jmp 0x4001be0	       707	clean.c	FUNCTION_19	FOR_1
0x1e61	              0x90	                                     nop	       658	clean.c	FUNCTION_19	FOR_1	IF_1
0x1e62	            0xeb01	                           jmp 0x4001ea5	       658	clean.c	FUNCTION_19	FOR_1	IF_1
0x1e64	              0x90	                                     nop	       673	clean.c	FUNCTION_19	FOR_1	IF_4
0x1e65	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       709	clean.c	FUNCTION_19	CALL_21
0x1e6c	          0x4889c7	                            mov rdi, rax	       709	clean.c	FUNCTION_19	CALL_21
0x1e6f	      0xe800000000	                          call 0x4001eb4	       709	clean.c	FUNCTION_19	CALL_21
0x1e74	      0xb800000000	                              mov eax, 0	       710	clean.c	FUNCTION_19
0x1e79	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       711	clean.c	FUNCTION_19
0x1e7d	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       711	clean.c	FUNCTION_19
0x1e86	            0x7405	                            je 0x4001ecd	       711	clean.c	FUNCTION_19
0x1e88	      0xe800000000	                          call 0x4001ecd	       711	clean.c	FUNCTION_19
0x1e8d	    0x4881c4780100	                          add rsp, 0x178	       711	clean.c	FUNCTION_19
0x1e94	              0x5b	                                 pop rbx	       711	clean.c	FUNCTION_19
0x1e95	              0x5d	                                 pop rbp	       711	clean.c	FUNCTION_19
0x1e96	              0xc3	                                     ret	       711	clean.c	FUNCTION_19
is_dot_or_dotdot	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,0:IF,0:DO,0:ELSE,0	27
0x347	              0x55	                                push rbp	       276	dir.h	FUNCTION_27
0x348	          0x4889e5	                            mov rbp, rsp	       276	dir.h	FUNCTION_27
0x34b	        0x48897df8	                mov qword [rbp - 8], rdi	       276	dir.h	FUNCTION_27
0x34f	        0x488b45f8	                mov rax, qword [rbp - 8]	       277	dir.h	FUNCTION_27
0x353	           0xfb600	                   movzx eax, byte [rax]	       277	dir.h	FUNCTION_27
0x356	            0x3c2e	                            cmp al, 0x2e	       277	dir.h	FUNCTION_27
0x358	            0x7534	                           jne 0x40003ce	       277	dir.h	FUNCTION_27
0x35a	        0x488b45f8	                mov rax, qword [rbp - 8]	       278	dir.h	FUNCTION_27
0x35e	        0x4883c001	                              add rax, 1	       278	dir.h	FUNCTION_27
0x362	           0xfb600	                   movzx eax, byte [rax]	       278	dir.h	FUNCTION_27
0x365	            0x84c0	                             test al, al	       277	dir.h	FUNCTION_27
0x367	            0x741e	                            je 0x40003c7	       277	dir.h	FUNCTION_27
0x369	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	dir.h	FUNCTION_27
0x36d	        0x4883c001	                              add rax, 1	       279	dir.h	FUNCTION_27
0x371	           0xfb600	                   movzx eax, byte [rax]	       279	dir.h	FUNCTION_27
0x374	            0x3c2e	                            cmp al, 0x2e	       278	dir.h	FUNCTION_27
0x376	            0x7516	                           jne 0x40003ce	       278	dir.h	FUNCTION_27
0x378	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	dir.h	FUNCTION_27
0x37c	        0x4883c002	                              add rax, 2	       279	dir.h	FUNCTION_27
0x380	           0xfb600	                   movzx eax, byte [rax]	       279	dir.h	FUNCTION_27
0x383	            0x84c0	                             test al, al	       279	dir.h	FUNCTION_27
0x385	            0x7507	                           jne 0x40003ce	       279	dir.h	FUNCTION_27
0x387	      0xb801000000	                              mov eax, 1	       277	dir.h	FUNCTION_27
0x38c	            0xeb05	                           jmp 0x40003d3	       277	dir.h	FUNCTION_27
0x38e	      0xb800000000	                              mov eax, 0	       277	dir.h	FUNCTION_27
0x393	              0x5d	                                 pop rbp	       280	dir.h	FUNCTION_27
0x394	              0xc3	                                     ret	       280	dir.h	FUNCTION_27
clean_print_color	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,0:DO,0:ELSE,0	14
0x6a7	              0x55	                                push rbp	       141	clean.c	FUNCTION_8
0x6a8	          0x4889e5	                            mov rbp, rsp	       141	clean.c	FUNCTION_8
0x6ab	        0x4883ec10	                           sub rsp, 0x10	       141	clean.c	FUNCTION_8
0x6af	          0x897dfc	                mov dword [rbp - 4], edi	       141	clean.c	FUNCTION_8
0x6b2	          0x8b45fc	                mov eax, dword [rbp - 4]	       142	clean.c	FUNCTION_8	CALL_2
0x6b5	            0x89c7	                            mov edi, eax	       142	clean.c	FUNCTION_8	CALL_2
0x6b7	      0xe8a3ffffff	                call sym.clean_get_color	       142	clean.c	FUNCTION_8	CALL_2
0x6bc	          0x4889c6	                            mov rsi, rax	       142	clean.c	FUNCTION_8	CALL_2
0x6bf	      0xbf00000000	                              mov edi, 0	       142	clean.c	FUNCTION_8	CALL_2
0x6c4	      0xb800000000	                              mov eax, 0	       142	clean.c	FUNCTION_8	CALL_2
0x6c9	      0xe800000000	                          call 0x400070e	       142	clean.c	FUNCTION_8	CALL_2
0x6ce	              0x90	                                     nop	       143	clean.c	FUNCTION_8
0x6cf	              0xc9	                                   leave	       143	clean.c	FUNCTION_8
0x6d0	              0xc3	                                     ret	       143	clean.c	FUNCTION_8
ask_each_cmd	functions,1:SWITCH,0:WHILE,0:FOR,0:CALL,3:IF,1:DO,0:ELSE,0	90
0x1fca	              0x55	                                push rbp	       751	clean.c	FUNCTION_21
0x1fcb	          0x4889e5	                            mov rbp, rsp	       751	clean.c	FUNCTION_21
0x1fce	        0x4883ec60	                           sub rsp, 0x60	       751	clean.c	FUNCTION_21
0x1fd2	    0x64488b042528	                mov rax, qword fs:[0x28]	       751	clean.c	FUNCTION_21
0x1fdb	        0x488945f8	                mov qword [rbp - 8], rax	       751	clean.c	FUNCTION_21
0x1fdf	            0x31c0	                            xor eax, eax	       751	clean.c	FUNCTION_21
0x1fe1	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       752	clean.c	FUNCTION_21
0x1fe9	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       752	clean.c	FUNCTION_21
0x1ff1	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       752	clean.c	FUNCTION_21
0x1ff9	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       753	clean.c	FUNCTION_21
0x2001	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       753	clean.c	FUNCTION_21
0x2009	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       753	clean.c	FUNCTION_21
0x2011	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       756	clean.c	FUNCTION_21
0x2018	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       756	clean.c	FUNCTION_21
0x201f	    0x488b05000000	            mov rax, qword [0x04002066] 	       758	clean.c	FUNCTION_21	FUNCTION_1
0x2026	        0x488945b0	             mov qword [rbp - 0x50], rax	       758	clean.c	FUNCTION_21	FUNCTION_1
0x202a	      0xe9b2000000	                           jmp 0x4002121	       758	clean.c	FUNCTION_21	FUNCTION_1
0x202f	        0x837dac00	               cmp dword [rbp - 0x54], 0	       760	clean.c	FUNCTION_21	FUNCTION_1	IF_1
0x2033	            0x7577	                           jne 0x40020ec	       760	clean.c	FUNCTION_21	FUNCTION_1	IF_1
0x2035	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x2039	          0x488b00	                    mov rax, qword [rax]	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x203c	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x2040	      0xbe00000000	                              mov esi, 0	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x2045	          0x4889c7	                            mov rdi, rax	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x2048	      0xe800000000	                          call 0x400208d	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x204d	        0x488945b8	             mov qword [rbp - 0x48], rax	       761	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_1
0x2051	      0xbf00000000	                              mov edi, 0	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x2056	      0xe893e2ffff	                               call sym.	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x205b	          0x4889c2	                            mov rdx, rax	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x205e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x2062	          0x4889c6	                            mov rsi, rax	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x2065	          0x4889d7	                            mov rdi, rdx	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x2068	      0xb800000000	                              mov eax, 0	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x206d	      0xe800000000	                          call 0x40020b2	       763	clean.c	FUNCTION_21	FUNCTION_1	IF_1	CALL_3
0x2072	    0x488b15000000	            mov rdx, qword [0x040020b9] 	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x2079	        0x488d45c0	                   lea rax, [rbp - 0x40]	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x207d	          0x4889d6	                            mov rsi, rdx	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x2080	          0x4889c7	                            mov rdi, rax	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x2083	      0xe800000000	                          call 0x40020c8	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x2088	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x208b	            0x740e	                            je 0x40020db	       764	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_4
0x208d	        0x488d45c0	                   lea rax, [rbp - 0x40]	       765	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_5
0x2091	          0x4889c7	                            mov rdi, rax	       765	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_5
0x2094	      0xe800000000	                          call 0x40020d9	       765	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_5
0x2099	            0xeb11	                           jmp 0x40020ec	       765	clean.c	FUNCTION_21	FUNCTION_1	IF_1	IF_2	CALL_5
0x209b	      0xbf0a000000	                            mov edi, 0xa	       767	clean.c	FUNCTION_21	FUNCTION_1	IF_1	ELSE_1	CALL_6
0x20a0	      0xe800000000	                          call 0x40020e5	       767	clean.c	FUNCTION_21	FUNCTION_1	IF_1	ELSE_1	CALL_6
0x20a5	    0xc745ac010000	               mov dword [rbp - 0x54], 1	       768	clean.c	FUNCTION_21	FUNCTION_1	IF_1	ELSE_1
0x20ac	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20b0	          0x4885c0	                           test rax, rax	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20b3	            0x7419	                            je 0x400210e	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20b5	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20b9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20bd	      0xbe00000000	                              mov esi, 0	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20c2	          0x4889c7	                            mov rdi, rax	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20c5	      0xe800000000	                          call 0x400210a	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20ca	            0x85c0	                           test eax, eax	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20cc	            0x740e	                            je 0x400211c	       771	clean.c	FUNCTION_21	FUNCTION_1	IF_3	CALL_7
0x20ce	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       772	clean.c	FUNCTION_21	FUNCTION_1	IF_3
0x20d2	          0x488b00	                    mov rax, qword [rax]	       772	clean.c	FUNCTION_21	FUNCTION_1	IF_3
0x20d5	          0xc60000	                       mov byte [rax], 0	       772	clean.c	FUNCTION_21	FUNCTION_1	IF_3
0x20d8	        0x8345a801	               add dword [rbp - 0x58], 1	       773	clean.c	FUNCTION_21	FUNCTION_1	IF_3
0x20dc	      0x488345b010	            add qword [rbp - 0x50], 0x10	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20e1	      0x48837db000	               cmp qword [rbp - 0x50], 0	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20e6	            0x7420	                            je 0x4002148	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20e8	    0x488b05000000	            mov rax, qword [0x0400212f] 	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20ef	    0x8b1500000000	            mov edx, dword [0x04002135] 	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20f5	            0x89d2	                            mov edx, edx	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20f7	        0x48c1e204	                              shl rdx, 4	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20fb	          0x4801d0	                            add rax, rdx	       758	clean.c	FUNCTION_21	FUNCTION_1
0x20fe	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	       758	clean.c	FUNCTION_21	FUNCTION_1
0x2102	     0xf8727ffffff	                            ja 0x400206f	       758	clean.c	FUNCTION_21	FUNCTION_1
0x2108	        0x837da800	               cmp dword [rbp - 0x58], 0	       777	clean.c	FUNCTION_21	IF_1
0x210c	            0x740f	                            je 0x400215d	       777	clean.c	FUNCTION_21	IF_1
0x210e	      0xbe00000000	                              mov esi, 0	       778	clean.c	FUNCTION_21	CALL_1
0x2113	      0xbf00000000	                              mov edi, 0	       778	clean.c	FUNCTION_21	CALL_1
0x2118	      0xe800000000	                          call 0x400215d	       778	clean.c	FUNCTION_21	CALL_1
0x211d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       780	clean.c	FUNCTION_21	CALL_2
0x2121	          0x4889c7	                            mov rdi, rax	       780	clean.c	FUNCTION_21	CALL_2
0x2124	      0xe800000000	                          call 0x4002169	       780	clean.c	FUNCTION_21	CALL_2
0x2129	        0x488d45c0	                   lea rax, [rbp - 0x40]	       781	clean.c	FUNCTION_21	CALL_3
0x212d	          0x4889c7	                            mov rdi, rax	       781	clean.c	FUNCTION_21	CALL_3
0x2130	      0xe800000000	                          call 0x4002175	       781	clean.c	FUNCTION_21	CALL_3
0x2135	      0xb80a000000	                            mov eax, 0xa	       782	clean.c	FUNCTION_21
0x213a	        0x488b4df8	                mov rcx, qword [rbp - 8]	       783	clean.c	FUNCTION_21
0x213e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       783	clean.c	FUNCTION_21
0x2147	            0x7405	                            je 0x400218e	       783	clean.c	FUNCTION_21
0x2149	      0xe800000000	                          call 0x400218e	       783	clean.c	FUNCTION_21
0x214e	              0xc9	                                   leave	       783	clean.c	FUNCTION_21
0x214f	              0xc3	                                     ret	       783	clean.c	FUNCTION_21
strbuf_addstr	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,0:DO,0:ELSE,0	17
0x235	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_34
0x236	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_34
0x239	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_34
0x23d	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_34
0x241	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_34
0x245	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_34	CALL_2
0x249	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_34	CALL_2
0x24c	      0xe800000000	                          call 0x4000291	       279	strbuf.h	FUNCTION_34	CALL_2
0x251	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_34	CALL_2
0x254	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_34	CALL_2
0x258	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_34	CALL_2
0x25c	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_34	CALL_2
0x25f	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_34	CALL_2
0x262	      0xe800000000	                          call 0x40002a7	       279	strbuf.h	FUNCTION_34	CALL_2
0x267	              0x90	                                     nop	       280	strbuf.h	FUNCTION_34
0x268	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_34
0x269	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_34
help_cmd	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,4:IF,0:DO,0:ELSE,0	14
0x2181	              0x55	                                push rbp	       793	clean.c	FUNCTION_23
0x2182	          0x4889e5	                            mov rbp, rsp	       793	clean.c	FUNCTION_23
0x2185	      0xbf04000000	                              mov edi, 4	       794	clean.c	FUNCTION_23	CALL_1
0x218a	      0xe818e5ffff	              call sym.clean_print_color	       794	clean.c	FUNCTION_23	CALL_1
0x218f	      0xbf00000000	                              mov edi, 0	       795	clean.c	FUNCTION_23	CALL_3
0x2194	      0xe855e1ffff	                               call sym.	       795	clean.c	FUNCTION_23	CALL_3
0x2199	          0x4889c7	                            mov rdi, rax	       795	clean.c	FUNCTION_23	CALL_3
0x219c	      0xb800000000	                              mov eax, 0	       795	clean.c	FUNCTION_23	CALL_3
0x21a1	      0xe800000000	                          call 0x40021e6	       795	clean.c	FUNCTION_23	CALL_3
0x21a6	      0xbf00000000	                              mov edi, 0	       804	clean.c	FUNCTION_23	CALL_4
0x21ab	      0xe8f7e4ffff	              call sym.clean_print_color	       804	clean.c	FUNCTION_23	CALL_4
0x21b0	      0xb800000000	                              mov eax, 0	       805	clean.c	FUNCTION_23
0x21b5	              0x5d	                                 pop rbp	       806	clean.c	FUNCTION_23
0x21b6	              0xc3	                                     ret	       806	clean.c	FUNCTION_23
skip_prefix	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,0:IF,1:DO,1:ELSE,0	27
0xb	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_47
0xc	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_47
0xf	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_47
0x13	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_47
0x17	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_47
0x1b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x1f	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x22	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x24	            0x7512	                           jne 0x4000078	       484	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x2a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x2e	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x31	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x36	            0xeb27	                           jmp 0x400009f	       486	git-compat-util.h	FUNCTION_47	DO_1	IF_1
0x38	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x3c	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x40	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_47	DO_1
0x44	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x47	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x4b	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x4f	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_47	DO_1
0x53	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_47	DO_1
0x56	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_47	DO_1
0x58	            0x74c1	                            je 0x400005b	       488	git-compat-util.h	FUNCTION_47	DO_1
0x5a	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_47
0x5f	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_47
0x60	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_47
strbuf_setlen	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,2:DO,0:ELSE,1	43
0x12d	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_32
0x12e	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_32
0x131	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_32
0x135	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_32
0x139	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_32
0x13d	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_32	IF_1
0x141	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_32	IF_1
0x144	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_32	IF_1
0x147	            0x740d	                            je 0x4000196	       162	strbuf.h	FUNCTION_32	IF_1
0x149	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_32	IF_1
0x14d	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_32	IF_1
0x150	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_32	IF_1
0x154	            0xeb05	                           jmp 0x400019b	       162	strbuf.h	FUNCTION_32	IF_1
0x156	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_32	IF_1
0x15b	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_32	IF_1
0x15f	            0x730f	                           jae 0x40001b0	       162	strbuf.h	FUNCTION_32	IF_1
0x161	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_32	CALL_1
0x166	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_32	CALL_1
0x16b	      0xe800000000	                          call 0x40001b0	       163	strbuf.h	FUNCTION_32	CALL_1
0x170	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_32
0x174	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_32
0x178	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_32
0x17c	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_32	IF_2
0x180	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_32	IF_2
0x184	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_32	IF_2
0x18a	            0x7414	                            je 0x40001e0	       165	strbuf.h	FUNCTION_32	IF_2
0x18c	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_32	IF_2
0x190	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_32	IF_2
0x194	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_32	IF_2
0x198	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_32	IF_2
0x19b	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_32	IF_2
0x19e	            0xeb24	                           jmp 0x4000204	       169	strbuf.h	FUNCTION_32
0x1a0	     0xfb605000000	           movzx eax, byte [0x040001e7] 	       168	strbuf.h	FUNCTION_32	CALL_2
0x1a7	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_32	CALL_2
0x1a9	            0x7419	                            je 0x4000204	       168	strbuf.h	FUNCTION_32	CALL_2
0x1ab	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_32	CALL_2
0x1b0	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_32	CALL_2
0x1b5	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_32	CALL_2
0x1ba	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_32	CALL_2
0x1bf	      0xe800000000	                          call 0x4000204	       168	strbuf.h	FUNCTION_32	CALL_2
0x1c4	              0x90	                                     nop	       169	strbuf.h	FUNCTION_32
0x1c5	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_32
0x1c6	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_32
cmd_clean	functions,1:SWITCH,0:WHILE,0:FOR,4:CALL,49:IF,15:DO,0:ELSE,2	516
0x2504	              0x55	                                push rbp	       896	clean.c	FUNCTION_26
0x2505	          0x4889e5	                            mov rbp, rsp	       896	clean.c	FUNCTION_26
0x2508	    0x4881ecf00400	                          sub rsp, 0x4f0	       896	clean.c	FUNCTION_26
0x250f	    0x89bd2cfbffff	            mov dword [rbp - 0x4d4], edi	       896	clean.c	FUNCTION_26
0x2515	    0x4889b520fbff	            mov qword [rbp - 0x4e0], rsi	       896	clean.c	FUNCTION_26
0x251c	    0x48899518fbff	            mov qword [rbp - 0x4e8], rdx	       896	clean.c	FUNCTION_26
0x2523	    0x64488b042528	                mov rax, qword fs:[0x28]	       896	clean.c	FUNCTION_26
0x252c	        0x488945f8	                mov qword [rbp - 8], rax	       896	clean.c	FUNCTION_26
0x2530	            0x31c0	                            xor eax, eax	       896	clean.c	FUNCTION_26
0x2532	    0xc78534fbffff	              mov dword [rbp - 0x4cc], 0	       898	clean.c	FUNCTION_26
0x253c	    0xc78538fbffff	              mov dword [rbp - 0x4c8], 0	       898	clean.c	FUNCTION_26
0x2546	    0xc7853cfbffff	              mov dword [rbp - 0x4c4], 0	       898	clean.c	FUNCTION_26
0x2550	    0xc78540fbffff	              mov dword [rbp - 0x4c0], 0	       898	clean.c	FUNCTION_26
0x255a	    0xc78544fbffff	              mov dword [rbp - 0x4bc], 0	       899	clean.c	FUNCTION_26
0x2564	    0xc78550fbffff	              mov dword [rbp - 0x4b0], 0	       899	clean.c	FUNCTION_26
0x256e	    0xc78554fbffff	              mov dword [rbp - 0x4ac], 0	       899	clean.c	FUNCTION_26
0x2578	    0xc78548fbffff	              mov dword [rbp - 0x4b8], 1	       899	clean.c	FUNCTION_26
0x2582	    0xc78558fbffff	              mov dword [rbp - 0x4a8], 2	       900	clean.c	FUNCTION_26
0x258c	    0x48c78590fbff	              mov qword [rbp - 0x470], 0	       901	clean.c	FUNCTION_26
0x2597	    0x48c78598fbff	              mov qword [rbp - 0x468], 0	       901	clean.c	FUNCTION_26
0x25a2	    0x48c785a0fbff	              mov qword [rbp - 0x460], 0	       901	clean.c	FUNCTION_26
0x25ad	    0x48c785d0fbff	              mov qword [rbp - 0x430], 0	       904	clean.c	FUNCTION_26
0x25b8	    0x48c785d8fbff	              mov qword [rbp - 0x428], 0	       904	clean.c	FUNCTION_26
0x25c3	    0x48c785e0fbff	              mov qword [rbp - 0x420], 0	       904	clean.c	FUNCTION_26
0x25ce	    0x48c785f0fbff	              mov qword [rbp - 0x410], 0	       905	clean.c	FUNCTION_26
0x25d9	    0xc785f8fbffff	              mov dword [rbp - 0x408], 0	       905	clean.c	FUNCTION_26
0x25e3	    0xc785fcfbffff	              mov dword [rbp - 0x404], 0	       905	clean.c	FUNCTION_26
0x25ed	     0xfb68500fcff	           movzx eax, byte [rbp - 0x400]	       905	clean.c	FUNCTION_26
0x25f4	          0x83e0fe	                     and eax, 0xfffffffe	       905	clean.c	FUNCTION_26
0x25f7	    0x888500fcffff	              mov byte [rbp - 0x400], al	       905	clean.c	FUNCTION_26
0x25fd	    0x48c78508fcff	              mov qword [rbp - 0x3f8], 0	       905	clean.c	FUNCTION_26
0x2608	    0x488d95b0fdff	                  lea rdx, [rbp - 0x250]	       909	clean.c	FUNCTION_26
0x260f	      0xb800000000	                              mov eax, 0	       909	clean.c	FUNCTION_26
0x2614	      0xb948000000	                           mov ecx, 0x48	       909	clean.c	FUNCTION_26
0x2619	          0x4889d7	                            mov rdi, rdx	       909	clean.c	FUNCTION_26
0x261c	          0xf348ab	              rep stosq qword [rdi], rax	       909	clean.c	FUNCTION_26
0x261f	    0xc785b0fdffff	              mov dword [rbp - 0x250], 6	       909	clean.c	FUNCTION_26
0x2629	    0xc785b4fdffff	          mov dword [rbp - 0x24c], 0x71 	       909	clean.c	FUNCTION_26
0x2633	    0x48c785b8fdff	              mov qword [rbp - 0x248], 0	       909	clean.c	FUNCTION_26
0x263e	    0x488d853cfbff	                  lea rax, [rbp - 0x4c4]	       909	clean.c	FUNCTION_26
0x2645	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       909	clean.c	FUNCTION_26
0x264c	    0x48c785d0fdff	              mov qword [rbp - 0x230], 0	       909	clean.c	FUNCTION_26
0x2657	    0xc785d8fdffff	              mov dword [rbp - 0x228], 2	       909	clean.c	FUNCTION_26
0x2661	    0xc785f0fdffff	              mov dword [rbp - 0x210], 7	       909	clean.c	FUNCTION_26
0x266b	    0xc785f4fdffff	          mov dword [rbp - 0x20c], 0x6e 	       909	clean.c	FUNCTION_26
0x2675	    0x48c785f8fdff	              mov qword [rbp - 0x208], 0	       909	clean.c	FUNCTION_26
0x2680	    0x488d8534fbff	                  lea rax, [rbp - 0x4cc]	       909	clean.c	FUNCTION_26
0x2687	    0x48898500feff	            mov qword [rbp - 0x200], rax	       909	clean.c	FUNCTION_26
0x268e	    0x48c78510feff	              mov qword [rbp - 0x1f0], 0	       909	clean.c	FUNCTION_26
0x2699	    0xc78518feffff	              mov dword [rbp - 0x1e8], 2	       909	clean.c	FUNCTION_26
0x26a3	    0x48c78528feff	              mov qword [rbp - 0x1d8], 1	       909	clean.c	FUNCTION_26
0x26ae	    0xc78530feffff	              mov dword [rbp - 0x1d0], 6	       909	clean.c	FUNCTION_26
0x26b8	    0xc78534feffff	          mov dword [rbp - 0x1cc], 0x66 	       909	clean.c	FUNCTION_26
0x26c2	    0x48c78538feff	              mov qword [rbp - 0x1c8], 0	       909	clean.c	FUNCTION_26
0x26cd	    0x48c78540feff	              mov qword [rbp - 0x1c0], 0	       909	clean.c	FUNCTION_26
0x26d8	    0x48c78550feff	              mov qword [rbp - 0x1b0], 0	       909	clean.c	FUNCTION_26
0x26e3	    0xc78558feffff	         mov dword [rbp - 0x1a8], 0x202 	       909	clean.c	FUNCTION_26
0x26ed	    0xc78570feffff	              mov dword [rbp - 0x190], 7	       909	clean.c	FUNCTION_26
0x26f7	    0xc78574feffff	          mov dword [rbp - 0x18c], 0x69 	       909	clean.c	FUNCTION_26
0x2701	    0x48c78578feff	              mov qword [rbp - 0x188], 0	       909	clean.c	FUNCTION_26
0x270c	    0x48c78580feff	              mov qword [rbp - 0x180], 0	       909	clean.c	FUNCTION_26
0x2717	    0x48c78590feff	              mov qword [rbp - 0x170], 0	       909	clean.c	FUNCTION_26
0x2722	    0xc78598feffff	              mov dword [rbp - 0x168], 2	       909	clean.c	FUNCTION_26
0x272c	    0x48c785a8feff	              mov qword [rbp - 0x158], 1	       909	clean.c	FUNCTION_26
0x2737	    0xc785b0feffff	              mov dword [rbp - 0x150], 7	       909	clean.c	FUNCTION_26
0x2741	    0xc785b4feffff	          mov dword [rbp - 0x14c], 0x64 	       909	clean.c	FUNCTION_26
0x274b	    0x488d8538fbff	                  lea rax, [rbp - 0x4c8]	       909	clean.c	FUNCTION_26
0x2752	    0x488985c0feff	            mov qword [rbp - 0x140], rax	       909	clean.c	FUNCTION_26
0x2759	    0x48c785d0feff	              mov qword [rbp - 0x130], 0	       909	clean.c	FUNCTION_26
0x2764	    0xc785d8feffff	              mov dword [rbp - 0x128], 2	       909	clean.c	FUNCTION_26
0x276e	    0x48c785e8feff	              mov qword [rbp - 0x118], 1	       909	clean.c	FUNCTION_26
0x2779	    0xc785f0feffff	           mov dword [rbp - 0x110], 0xc 	       909	clean.c	FUNCTION_26
0x2783	    0xc785f4feffff	          mov dword [rbp - 0x10c], 0x65 	       909	clean.c	FUNCTION_26
0x278d	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       909	clean.c	FUNCTION_26
0x2798	    0x488d85f0fbff	                  lea rax, [rbp - 0x410]	       909	clean.c	FUNCTION_26
0x279f	    0x48898500ffff	            mov qword [rbp - 0x100], rax	       909	clean.c	FUNCTION_26
0x27a6	    0x48c78508ffff	               mov qword [rbp - 0xf8], 0	       909	clean.c	FUNCTION_26
0x27b1	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       909	clean.c	FUNCTION_26
0x27bc	    0xc78518ffffff	               mov dword [rbp - 0xe8], 4	       909	clean.c	FUNCTION_26
0x27c6	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       909	clean.c	FUNCTION_26
0x27d1	    0xc78530ffffff	               mov dword [rbp - 0xd0], 7	       909	clean.c	FUNCTION_26
0x27db	    0xc78534ffffff	           mov dword [rbp - 0xcc], 0x78 	       909	clean.c	FUNCTION_26
0x27e5	    0x488d8540fbff	                  lea rax, [rbp - 0x4c0]	       909	clean.c	FUNCTION_26
0x27ec	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       909	clean.c	FUNCTION_26
0x27f3	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       909	clean.c	FUNCTION_26
0x27fe	    0xc78558ffffff	               mov dword [rbp - 0xa8], 2	       909	clean.c	FUNCTION_26
0x2808	    0x48c78568ffff	               mov qword [rbp - 0x98], 1	       909	clean.c	FUNCTION_26
0x2813	    0xc78570ffffff	               mov dword [rbp - 0x90], 7	       909	clean.c	FUNCTION_26
0x281d	    0xc78574ffffff	           mov dword [rbp - 0x8c], 0x58 	       909	clean.c	FUNCTION_26
0x2827	    0x488d8544fbff	                  lea rax, [rbp - 0x4bc]	       909	clean.c	FUNCTION_26
0x282e	        0x48894580	             mov qword [rbp - 0x80], rax	       909	clean.c	FUNCTION_26
0x2832	    0x48c745900000	               mov qword [rbp - 0x70], 0	       909	clean.c	FUNCTION_26
0x283a	    0xc74598020000	               mov dword [rbp - 0x68], 2	       909	clean.c	FUNCTION_26
0x2841	    0x48c745a80100	               mov qword [rbp - 0x58], 1	       909	clean.c	FUNCTION_26
0x2849	      0xbe00000000	                              mov esi, 0	       924	clean.c	FUNCTION_26	CALL_18
0x284e	      0xbf00000000	                              mov edi, 0	       924	clean.c	FUNCTION_26	CALL_18
0x2853	      0xe800000000	                          call 0x4002898	       924	clean.c	FUNCTION_26	CALL_18
0x2858	    0x8b0500000000	            mov eax, dword [0x0400289e] 	       925	clean.c	FUNCTION_26	IF_1
0x285e	            0x85c0	                           test eax, eax	       925	clean.c	FUNCTION_26	IF_1
0x2860	            0x790c	                           jns 0x40028ae	       925	clean.c	FUNCTION_26	IF_1
0x2862	    0xc70500000000	               mov dword [0x040028ac], 0	       926	clean.c	FUNCTION_26	IF_1
0x286c	            0xeb0a	                           jmp 0x40028b8	       926	clean.c	FUNCTION_26	IF_1
0x286e	    0xc78550fbffff	              mov dword [rbp - 0x4b0], 1	       928	clean.c	FUNCTION_26	ELSE_1
0x2878	    0x488d8db0fdff	                  lea rcx, [rbp - 0x250]	       930	clean.c	FUNCTION_26	CALL_19
0x287f	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	       930	clean.c	FUNCTION_26	CALL_19
0x2886	    0x488bb520fbff	            mov rsi, qword [rbp - 0x4e0]	       930	clean.c	FUNCTION_26	CALL_19
0x288d	    0x8b852cfbffff	            mov eax, dword [rbp - 0x4d4]	       930	clean.c	FUNCTION_26	CALL_19
0x2893	    0x41b900000000	                              mov r9d, 0	       930	clean.c	FUNCTION_26	CALL_19
0x2899	    0x41b800000000	                              mov r8d, 0	       930	clean.c	FUNCTION_26	CALL_19
0x289f	            0x89c7	                            mov edi, eax	       930	clean.c	FUNCTION_26	CALL_19
0x28a1	      0xe800000000	                          call 0x40028e6	       930	clean.c	FUNCTION_26	CALL_19
0x28a6	    0x89852cfbffff	            mov dword [rbp - 0x4d4], eax	       930	clean.c	FUNCTION_26	CALL_19
0x28ac	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       933	clean.c	FUNCTION_26	CALL_20
0x28b3	      0xba10010000	                          mov edx, 0x110	       933	clean.c	FUNCTION_26	CALL_20
0x28b8	      0xbe00000000	                              mov esi, 0	       933	clean.c	FUNCTION_26	CALL_20
0x28bd	          0x4889c7	                            mov rdi, rax	       933	clean.c	FUNCTION_26	CALL_20
0x28c0	      0xe800000000	                          call 0x4002905	       933	clean.c	FUNCTION_26	CALL_20
0x28c5	    0x8b8544fbffff	            mov eax, dword [rbp - 0x4bc]	       934	clean.c	FUNCTION_26	IF_2
0x28cb	            0x85c0	                           test eax, eax	       934	clean.c	FUNCTION_26	IF_2
0x28cd	            0x740f	                            je 0x400291e	       934	clean.c	FUNCTION_26	IF_2
0x28cf	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       935	clean.c	FUNCTION_26	IF_2
0x28d5	          0x83c801	                               or eax, 1	       935	clean.c	FUNCTION_26	IF_2
0x28d8	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       935	clean.c	FUNCTION_26	IF_2
0x28de	    0x8b8540fbffff	            mov eax, dword [rbp - 0x4c0]	       937	clean.c	FUNCTION_26	IF_3
0x28e4	            0x85c0	                           test eax, eax	       937	clean.c	FUNCTION_26	IF_3
0x28e6	            0x7421	                            je 0x4002949	       937	clean.c	FUNCTION_26	IF_3
0x28e8	    0x8b8544fbffff	            mov eax, dword [rbp - 0x4bc]	       937	clean.c	FUNCTION_26	IF_3
0x28ee	            0x85c0	                           test eax, eax	       937	clean.c	FUNCTION_26	IF_3
0x28f0	            0x7417	                            je 0x4002949	       937	clean.c	FUNCTION_26	IF_3
0x28f2	      0xbf00000000	                              mov edi, 0	       938	clean.c	FUNCTION_26	CALL_22
0x28f7	      0xe8f2d9ffff	                               call sym.	       938	clean.c	FUNCTION_26	CALL_22
0x28fc	          0x4889c7	                            mov rdi, rax	       938	clean.c	FUNCTION_26	CALL_22
0x28ff	      0xb800000000	                              mov eax, 0	       938	clean.c	FUNCTION_26	CALL_22
0x2904	      0xe800000000	                          call 0x4002949	       938	clean.c	FUNCTION_26	CALL_22
0x2909	    0x8b0500000000	            mov eax, dword [0x0400294f] 	       940	clean.c	FUNCTION_26	IF_4
0x290f	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_26	IF_4
0x2911	            0x754b	                           jne 0x400299e	       940	clean.c	FUNCTION_26	IF_4
0x2913	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	       940	clean.c	FUNCTION_26	IF_4
0x2919	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_26	IF_4
0x291b	            0x7541	                           jne 0x400299e	       940	clean.c	FUNCTION_26	IF_4
0x291d	    0x8b0500000000	            mov eax, dword [0x04002963] 	       940	clean.c	FUNCTION_26	IF_4
0x2923	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_26	IF_4
0x2925	            0x7537	                           jne 0x400299e	       940	clean.c	FUNCTION_26	IF_4
0x2927	    0x83bd50fbffff	              cmp dword [rbp - 0x4b0], 0	       941	clean.c	FUNCTION_26	IF_4	IF_5
0x292e	            0x7417	                            je 0x4002987	       941	clean.c	FUNCTION_26	IF_4	IF_5
0x2930	      0xbf00000000	                              mov edi, 0	       942	clean.c	FUNCTION_26	IF_4	IF_5	CALL_24
0x2935	      0xe8b4d9ffff	                               call sym.	       942	clean.c	FUNCTION_26	IF_4	IF_5	CALL_24
0x293a	          0x4889c7	                            mov rdi, rax	       942	clean.c	FUNCTION_26	IF_4	IF_5	CALL_24
0x293d	      0xb800000000	                              mov eax, 0	       942	clean.c	FUNCTION_26	IF_4	IF_5	CALL_24
0x2942	      0xe800000000	                          call 0x4002987	       942	clean.c	FUNCTION_26	IF_4	IF_5	CALL_24
0x2947	      0xbf00000000	                              mov edi, 0	       945	clean.c	FUNCTION_26	IF_4	ELSE_2	CALL_26
0x294c	      0xe89dd9ffff	                               call sym.	       945	clean.c	FUNCTION_26	IF_4	ELSE_2	CALL_26
0x2951	          0x4889c7	                            mov rdi, rax	       945	clean.c	FUNCTION_26	IF_4	ELSE_2	CALL_26
0x2954	      0xb800000000	                              mov eax, 0	       945	clean.c	FUNCTION_26	IF_4	ELSE_2	CALL_26
0x2959	      0xe800000000	                          call 0x400299e	       945	clean.c	FUNCTION_26	IF_4	ELSE_2	CALL_26
0x295e	    0x8b0500000000	            mov eax, dword [0x040029a4] 	       949	clean.c	FUNCTION_26	IF_6
0x2964	          0x83f801	                              cmp eax, 1	       949	clean.c	FUNCTION_26	IF_6
0x2967	            0x7e0a	                           jle 0x40029b3	       949	clean.c	FUNCTION_26	IF_6
0x2969	    0xc78558fbffff	              mov dword [rbp - 0x4a8], 0	       950	clean.c	FUNCTION_26	IF_6
0x2973	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       952	clean.c	FUNCTION_26
0x2979	          0x83c802	                               or eax, 2	       952	clean.c	FUNCTION_26
0x297c	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       952	clean.c	FUNCTION_26
0x2982	    0x8b8538fbffff	            mov eax, dword [rbp - 0x4c8]	       954	clean.c	FUNCTION_26	IF_7
0x2988	            0x85c0	                           test eax, eax	       954	clean.c	FUNCTION_26	IF_7
0x298a	            0x740e	                            je 0x40029da	       954	clean.c	FUNCTION_26	IF_7
0x298c	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       955	clean.c	FUNCTION_26	IF_7
0x2992	             0xca0	                             or al, 0xa0	       955	clean.c	FUNCTION_26	IF_7
0x2994	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       955	clean.c	FUNCTION_26	IF_7
0x299a	      0xbf00000000	                              mov edi, 0	       957	clean.c	FUNCTION_26	IF_8	CALL_27
0x299f	      0xe800000000	                          call 0x40029e4	       957	clean.c	FUNCTION_26	IF_8	CALL_27
0x29a4	            0x85c0	                           test eax, eax	       957	clean.c	FUNCTION_26	IF_8	CALL_27
0x29a6	            0x7917	                           jns 0x40029ff	       957	clean.c	FUNCTION_26	IF_8	CALL_27
0x29a8	      0xbf00000000	                              mov edi, 0	       958	clean.c	FUNCTION_26	CALL_29
0x29ad	      0xe83cd9ffff	                               call sym.	       958	clean.c	FUNCTION_26	CALL_29
0x29b2	          0x4889c7	                            mov rdi, rax	       958	clean.c	FUNCTION_26	CALL_29
0x29b5	      0xb800000000	                              mov eax, 0	       958	clean.c	FUNCTION_26	CALL_29
0x29ba	      0xe800000000	                          call 0x40029ff	       958	clean.c	FUNCTION_26	CALL_29
0x29bf	    0x8b8540fbffff	            mov eax, dword [rbp - 0x4c0]	       960	clean.c	FUNCTION_26	IF_9
0x29c5	            0x85c0	                           test eax, eax	       960	clean.c	FUNCTION_26	IF_9
0x29c7	            0x750f	                           jne 0x4002a18	       960	clean.c	FUNCTION_26	IF_9
0x29c9	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       961	clean.c	FUNCTION_26	CALL_30
0x29d0	          0x4889c7	                            mov rdi, rax	       961	clean.c	FUNCTION_26	CALL_30
0x29d3	      0xe800000000	                          call 0x4002a18	       961	clean.c	FUNCTION_26	CALL_30
0x29d8	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       963	clean.c	FUNCTION_26	CALL_31
0x29df	      0xba00000000	                              mov edx, 0	       963	clean.c	FUNCTION_26	CALL_31
0x29e4	      0xbe00000000	                              mov esi, 0	       963	clean.c	FUNCTION_26	CALL_31
0x29e9	          0x4889c7	                            mov rdi, rax	       963	clean.c	FUNCTION_26	CALL_31
0x29ec	      0xe800000000	                          call 0x4002a31	       963	clean.c	FUNCTION_26	CALL_31
0x29f1	    0x48898570fbff	            mov qword [rbp - 0x490], rax	       963	clean.c	FUNCTION_26	CALL_31
0x29f8	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	       964	clean.c	FUNCTION_26	FOR_1
0x2a02	            0xeb4a	                           jmp 0x4002a8e	       964	clean.c	FUNCTION_26	FOR_1
0x2a04	    0x8b854cfbffff	            mov eax, dword [rbp - 0x4b4]	       965	clean.c	FUNCTION_26	CALL_32
0x2a0a	            0xf7d0	                                 not eax	       965	clean.c	FUNCTION_26	CALL_32
0x2a0c	            0x89c1	                            mov ecx, eax	       965	clean.c	FUNCTION_26	CALL_32
0x2a0e	    0x488b85f0fbff	            mov rax, qword [rbp - 0x410]	       965	clean.c	FUNCTION_26	CALL_32
0x2a15	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	       965	clean.c	FUNCTION_26	CALL_32
0x2a1b	          0x4863d2	                         movsxd rdx, edx	       965	clean.c	FUNCTION_26	CALL_32
0x2a1e	        0x48c1e204	                              shl rdx, 4	       965	clean.c	FUNCTION_26	CALL_32
0x2a22	          0x4801d0	                            add rax, rdx	       965	clean.c	FUNCTION_26	CALL_32
0x2a25	          0x488b00	                    mov rax, qword [rax]	       965	clean.c	FUNCTION_26	CALL_32
0x2a28	    0x488b9570fbff	            mov rdx, qword [rbp - 0x490]	       965	clean.c	FUNCTION_26	CALL_32
0x2a2f	          0x4189c8	                            mov r8d, ecx	       965	clean.c	FUNCTION_26	CALL_32
0x2a32	          0x4889d1	                            mov rcx, rdx	       965	clean.c	FUNCTION_26	CALL_32
0x2a35	      0xba00000000	                              mov edx, 0	       965	clean.c	FUNCTION_26	CALL_32
0x2a3a	      0xbe00000000	                              mov esi, 0	       965	clean.c	FUNCTION_26	CALL_32
0x2a3f	          0x4889c7	                            mov rdi, rax	       965	clean.c	FUNCTION_26	CALL_32
0x2a42	      0xe800000000	                          call 0x4002a87	       965	clean.c	FUNCTION_26	CALL_32
0x2a47	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	       964	clean.c	FUNCTION_26	FOR_1
0x2a4e	    0x8b95f8fbffff	            mov edx, dword [rbp - 0x408]	       964	clean.c	FUNCTION_26	FOR_1
0x2a54	    0x8b854cfbffff	            mov eax, dword [rbp - 0x4b4]	       964	clean.c	FUNCTION_26	FOR_1
0x2a5a	            0x39c2	                            cmp edx, eax	       964	clean.c	FUNCTION_26	FOR_1
0x2a5c	            0x77a6	                            ja 0x4002a44	       964	clean.c	FUNCTION_26	FOR_1
0x2a5e	    0x488b8d20fbff	            mov rcx, qword [rbp - 0x4e0]	       967	clean.c	FUNCTION_26	CALL_33
0x2a65	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	       967	clean.c	FUNCTION_26	CALL_33
0x2a6c	    0x488d85b0fbff	                  lea rax, [rbp - 0x450]	       967	clean.c	FUNCTION_26	CALL_33
0x2a73	          0x4989c8	                             mov r8, rcx	       967	clean.c	FUNCTION_26	CALL_33
0x2a76	          0x4889d1	                            mov rcx, rdx	       967	clean.c	FUNCTION_26	CALL_33
0x2a79	      0xba01000000	                              mov edx, 1	       967	clean.c	FUNCTION_26	CALL_33
0x2a7e	      0xbe00000000	                              mov esi, 0	       967	clean.c	FUNCTION_26	CALL_33
0x2a83	          0x4889c7	                            mov rdi, rax	       967	clean.c	FUNCTION_26	CALL_33
0x2a86	      0xe800000000	                          call 0x4002acb	       967	clean.c	FUNCTION_26	CALL_33
0x2a8b	    0x488d95b0fbff	                  lea rdx, [rbp - 0x450]	       971	clean.c	FUNCTION_26	CALL_34
0x2a92	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       971	clean.c	FUNCTION_26	CALL_34
0x2a99	      0xbe00000000	                              mov esi, 0	       971	clean.c	FUNCTION_26	CALL_34
0x2a9e	          0x4889c7	                            mov rdi, rax	       971	clean.c	FUNCTION_26	CALL_34
0x2aa1	      0xe800000000	                          call 0x4002ae6	       971	clean.c	FUNCTION_26	CALL_34
0x2aa6	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       972	clean.c	FUNCTION_26	CALL_35
0x2aad	          0x4889c7	                            mov rdi, rax	       972	clean.c	FUNCTION_26	CALL_35
0x2ab0	      0xe8aff8ffff	      call sym.correct_untracked_entries	       972	clean.c	FUNCTION_26	CALL_35
0x2ab5	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	       974	clean.c	FUNCTION_26	FOR_2
0x2abf	      0xe94f010000	                           jmp 0x4002c53	       974	clean.c	FUNCTION_26	FOR_2
0x2ac4	    0x488b85b8fcff	            mov rax, qword [rbp - 0x348]	       975	clean.c	FUNCTION_26	FOR_2
0x2acb	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	       975	clean.c	FUNCTION_26	FOR_2
0x2ad1	          0x4863d2	                         movsxd rdx, edx	       975	clean.c	FUNCTION_26	FOR_2
0x2ad4	        0x48c1e203	                              shl rdx, 3	       975	clean.c	FUNCTION_26	FOR_2
0x2ad8	          0x4801d0	                            add rax, rdx	       975	clean.c	FUNCTION_26	FOR_2
0x2adb	          0x488b00	                    mov rax, qword [rax]	       975	clean.c	FUNCTION_26	FOR_2
0x2ade	    0x48898578fbff	            mov qword [rbp - 0x488], rax	       975	clean.c	FUNCTION_26	FOR_2
0x2ae5	    0xc7855cfbffff	              mov dword [rbp - 0x4a4], 0	       976	clean.c	FUNCTION_26	FOR_2
0x2aef	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2af6	            0x8b00	                    mov eax, dword [rax]	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2af8	            0x89c2	                            mov edx, eax	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2afa	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b01	        0x4883c004	                              add rax, 4	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b05	          0x4889c6	                            mov rsi, rax	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b08	      0xbf00000000	                              mov edi, 0	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b0d	      0xe800000000	                          call 0x4002b52	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b12	            0x85c0	                           test eax, eax	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b14	     0xf84eb000000	                            je 0x4002c45	       980	clean.c	FUNCTION_26	FOR_2	IF_10	CALL_36
0x2b1a	    0x8b85b0fbffff	            mov eax, dword [rbp - 0x450]	       983	clean.c	FUNCTION_26	FOR_2	IF_11
0x2b20	            0x85c0	                           test eax, eax	       983	clean.c	FUNCTION_26	FOR_2	IF_11
0x2b22	            0x7426	                            je 0x4002b8a	       983	clean.c	FUNCTION_26	FOR_2	IF_11
0x2b24	    0x488db5b0fbff	                  lea rsi, [rbp - 0x450]	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b2b	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b32	      0xb900000000	                              mov ecx, 0	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b37	      0xba00000000	                              mov edx, 0	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b3c	          0x4889c7	                            mov rdi, rax	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b3f	      0xe851d8ffff	                 call sym.dir_path_match	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b44	    0x89855cfbffff	            mov dword [rbp - 0x4a4], eax	       984	clean.c	FUNCTION_26	FOR_2	CALL_37
0x2b4a	    0x8b85b0fbffff	            mov eax, dword [rbp - 0x450]	       986	clean.c	FUNCTION_26	FOR_2	IF_12
0x2b50	            0x85c0	                           test eax, eax	       986	clean.c	FUNCTION_26	FOR_2	IF_12
0x2b52	            0x740d	                            je 0x4002ba1	       986	clean.c	FUNCTION_26	FOR_2	IF_12
0x2b54	    0x83bd5cfbffff	              cmp dword [rbp - 0x4a4], 0	       986	clean.c	FUNCTION_26	FOR_2	IF_12
0x2b5b	     0xf84a7000000	                            je 0x4002c48	       986	clean.c	FUNCTION_26	FOR_2	IF_12
0x2b61	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b68	        0x488d5004	                      lea rdx, [rax + 4]	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b6c	    0x488d8510fcff	                  lea rax, [rbp - 0x3f0]	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b73	          0x4889c6	                            mov rsi, rax	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b76	          0x4889d7	                            mov rdi, rdx	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b79	      0xe800000000	                          call 0x4002bbe	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b7e	            0x85c0	                           test eax, eax	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b80	            0x741d	                            je 0x4002bdf	       989	clean.c	FUNCTION_26	FOR_2	IF_13	CALL_38
0x2b82	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b89	        0x4883c004	                              add rax, 4	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b8d	          0x4889c6	                            mov rsi, rax	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b90	      0xbf00000000	                              mov edi, 0	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b95	      0xb800000000	                              mov eax, 0	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b9a	      0xe800000000	                          call 0x4002bdf	       990	clean.c	FUNCTION_26	FOR_2	CALL_39
0x2b9f	    0x8b8528fcffff	            mov eax, dword [rbp - 0x3d8]	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2ba5	      0x2500f00000	                         and eax, 0xf000	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2baa	      0x3d00400000	                         cmp eax, 0x4000	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2baf	            0x7513	                           jne 0x4002c04	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bb1	    0x8b8538fbffff	            mov eax, dword [rbp - 0x4c8]	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bb7	            0x85c0	                           test eax, eax	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bb9	            0x7509	                           jne 0x4002c04	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bbb	    0x83bd5cfbffff	              cmp dword [rbp - 0x4a4], 3	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bc2	            0x7547	                           jne 0x4002c4b	       992	clean.c	FUNCTION_26	FOR_2	IF_14	CALL_40
0x2bc4	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2bcb	        0x488d4804	                      lea rcx, [rax + 4]	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2bcf	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2bd6	    0x488b8518fbff	            mov rax, qword [rbp - 0x4e8]	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2bdd	          0x4889c6	                            mov rsi, rax	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2be0	          0x4889cf	                            mov rdi, rcx	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2be3	      0xe800000000	                          call 0x4002c28	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2be8	    0x48898580fbff	            mov qword [rbp - 0x480], rax	       996	clean.c	FUNCTION_26	FOR_2	CALL_41
0x2bef	    0x488b8580fbff	            mov rax, qword [rbp - 0x480]	       997	clean.c	FUNCTION_26	FOR_2	CALL_42
0x2bf6	          0x4889c6	                            mov rsi, rax	       997	clean.c	FUNCTION_26	FOR_2	CALL_42
0x2bf9	      0xbf00000000	                              mov edi, 0	       997	clean.c	FUNCTION_26	FOR_2	CALL_42
0x2bfe	      0xe800000000	                          call 0x4002c43	       997	clean.c	FUNCTION_26	FOR_2	CALL_42
0x2c03	            0xeb07	                           jmp 0x4002c4c	       997	clean.c	FUNCTION_26	FOR_2	CALL_42
0x2c05	              0x90	                                     nop	       981	clean.c	FUNCTION_26	FOR_2	IF_10
0x2c06	            0xeb04	                           jmp 0x4002c4c	       981	clean.c	FUNCTION_26	FOR_2	IF_10
0x2c08	              0x90	                                     nop	       987	clean.c	FUNCTION_26	FOR_2	IF_12
0x2c09	            0xeb01	                           jmp 0x4002c4c	       987	clean.c	FUNCTION_26	FOR_2	IF_12
0x2c0b	              0x90	                                     nop	       994	clean.c	FUNCTION_26	FOR_2	IF_14
0x2c0c	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	       974	clean.c	FUNCTION_26	FOR_2
0x2c13	    0x8b85a0fcffff	            mov eax, dword [rbp - 0x360]	       974	clean.c	FUNCTION_26	FOR_2
0x2c19	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	       974	clean.c	FUNCTION_26	FOR_2
0x2c1f	     0xf8f9ffeffff	                            jg 0x4002b04	       974	clean.c	FUNCTION_26	FOR_2
0x2c25	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	      1000	clean.c	FUNCTION_26	FOR_3
0x2c2f	            0xeb29	                           jmp 0x4002c9a	      1000	clean.c	FUNCTION_26	FOR_3
0x2c31	    0x488b85b8fcff	            mov rax, qword [rbp - 0x348]	      1001	clean.c	FUNCTION_26	CALL_43
0x2c38	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	      1001	clean.c	FUNCTION_26	CALL_43
0x2c3e	          0x4863d2	                         movsxd rdx, edx	      1001	clean.c	FUNCTION_26	CALL_43
0x2c41	        0x48c1e203	                              shl rdx, 3	      1001	clean.c	FUNCTION_26	CALL_43
0x2c45	          0x4801d0	                            add rax, rdx	      1001	clean.c	FUNCTION_26	CALL_43
0x2c48	          0x488b00	                    mov rax, qword [rax]	      1001	clean.c	FUNCTION_26	CALL_43
0x2c4b	          0x4889c7	                            mov rdi, rax	      1001	clean.c	FUNCTION_26	CALL_43
0x2c4e	      0xe800000000	                          call 0x4002c93	      1001	clean.c	FUNCTION_26	CALL_43
0x2c53	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	      1000	clean.c	FUNCTION_26	FOR_3
0x2c5a	    0x8b85a0fcffff	            mov eax, dword [rbp - 0x360]	      1000	clean.c	FUNCTION_26	FOR_3
0x2c60	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	      1000	clean.c	FUNCTION_26	FOR_3
0x2c66	            0x7fc9	                            jg 0x4002c71	      1000	clean.c	FUNCTION_26	FOR_3
0x2c68	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	      1003	clean.c	FUNCTION_26	FOR_4
0x2c72	            0xeb29	                           jmp 0x4002cdd	      1003	clean.c	FUNCTION_26	FOR_4
0x2c74	    0x488b85c0fcff	            mov rax, qword [rbp - 0x340]	      1004	clean.c	FUNCTION_26	CALL_44
0x2c7b	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	      1004	clean.c	FUNCTION_26	CALL_44
0x2c81	          0x4863d2	                         movsxd rdx, edx	      1004	clean.c	FUNCTION_26	CALL_44
0x2c84	        0x48c1e203	                              shl rdx, 3	      1004	clean.c	FUNCTION_26	CALL_44
0x2c88	          0x4801d0	                            add rax, rdx	      1004	clean.c	FUNCTION_26	CALL_44
0x2c8b	          0x488b00	                    mov rax, qword [rax]	      1004	clean.c	FUNCTION_26	CALL_44
0x2c8e	          0x4889c7	                            mov rdi, rax	      1004	clean.c	FUNCTION_26	CALL_44
0x2c91	      0xe800000000	                          call 0x4002cd6	      1004	clean.c	FUNCTION_26	CALL_44
0x2c96	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	      1003	clean.c	FUNCTION_26	FOR_4
0x2c9d	    0x8b85a8fcffff	            mov eax, dword [rbp - 0x358]	      1003	clean.c	FUNCTION_26	FOR_4
0x2ca3	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	      1003	clean.c	FUNCTION_26	FOR_4
0x2ca9	            0x7fc9	                            jg 0x4002cb4	      1003	clean.c	FUNCTION_26	FOR_4
0x2cab	    0x8b0500000000	            mov eax, dword [0x04002cf1] 	      1006	clean.c	FUNCTION_26	IF_15
0x2cb1	            0x85c0	                           test eax, eax	      1006	clean.c	FUNCTION_26	IF_15
0x2cb3	            0x740f	                            je 0x4002d04	      1006	clean.c	FUNCTION_26	IF_15
0x2cb5	    0x8b0500000000	            mov eax, dword [0x04002cfb] 	      1006	clean.c	FUNCTION_26	IF_15
0x2cbb	            0x85c0	                           test eax, eax	      1006	clean.c	FUNCTION_26	IF_15
0x2cbd	            0x7405	                            je 0x4002d04	      1006	clean.c	FUNCTION_26	IF_15
0x2cbf	      0xe8f3f4ffff	          call sym.interactive_main_loop	      1007	clean.c	FUNCTION_26	CALL_45
0x2cc4	    0x488b05000000	            mov rax, qword [0x04002d0b] 	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2ccb	    0x48898568fbff	            mov qword [rbp - 0x498], rax	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2cd2	      0xe97b020000	                           jmp 0x4002f92	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2cd7	    0x4883bd18fbff	              cmp qword [rbp - 0x4e8], 0	      1012	clean.c	FUNCTION_26	FUNCTION_1	IF_1
0x2cdf	            0x7419	                            je 0x4002d3a	      1012	clean.c	FUNCTION_26	FUNCTION_1	IF_1
0x2ce1	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	      1013	clean.c	FUNCTION_26	FUNCTION_1	CALL_1
0x2ce8	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1013	clean.c	FUNCTION_26	FUNCTION_1	CALL_1
0x2cef	          0x4889d6	                            mov rsi, rdx	      1013	clean.c	FUNCTION_26	FUNCTION_1	CALL_1
0x2cf2	          0x4889c7	                            mov rdi, rax	      1013	clean.c	FUNCTION_26	FUNCTION_1	CALL_1
0x2cf5	      0xe83bd5ffff	                  call sym.strbuf_addstr	      1013	clean.c	FUNCTION_26	FUNCTION_1	CALL_1
0x2cfa	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d01	          0x488b10	                    mov rdx, qword [rax]	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d04	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d0b	          0x4889d6	                            mov rsi, rdx	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d0e	          0x4889c7	                            mov rdi, rax	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d11	      0xe81fd5ffff	                  call sym.strbuf_addstr	      1015	clean.c	FUNCTION_26	FUNCTION_1	CALL_2
0x2d16	    0x488b85a0fbff	            mov rax, qword [rbp - 0x460]	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d1d	    0x488d9510fcff	                  lea rdx, [rbp - 0x3f0]	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d24	          0x4889d6	                            mov rsi, rdx	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d27	          0x4889c7	                            mov rdi, rax	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d2a	      0xe800000000	                          call 0x4002d6f	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d2f	            0x85c0	                           test eax, eax	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d31	     0xf8512020000	                           jne 0x4002f89	      1022	clean.c	FUNCTION_26	FUNCTION_1	IF_2	CALL_3
0x2d37	    0x8b8528fcffff	            mov eax, dword [rbp - 0x3d8]	      1025	clean.c	FUNCTION_26	FUNCTION_1	IF_3	CALL_4
0x2d3d	      0x2500f00000	                         and eax, 0xf000	      1025	clean.c	FUNCTION_26	FUNCTION_1	IF_3	CALL_4
0x2d42	      0x3d00400000	                         cmp eax, 0x4000	      1025	clean.c	FUNCTION_26	FUNCTION_1	IF_3	CALL_4
0x2d47	     0xf85cd000000	                           jne 0x4002e5a	      1025	clean.c	FUNCTION_26	FUNCTION_1	IF_3	CALL_4
0x2d4d	    0x8bbd3cfbffff	            mov edi, dword [rbp - 0x4c4]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d53	    0x8b8d34fbffff	            mov ecx, dword [rbp - 0x4cc]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d59	    0x4c8d8548fbff	                   lea r8, [rbp - 0x4b8]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d60	    0x8b9558fbffff	            mov edx, dword [rbp - 0x4a8]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d66	    0x488bb518fbff	            mov rsi, qword [rbp - 0x4e8]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d6d	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d74	          0x4d89c1	                              mov r9, r8	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d77	          0x4189f8	                            mov r8d, edi	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d7a	          0x4889c7	                            mov rdi, rax	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d7d	      0xe888d9ffff	                    call sym.remove_dirs	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d82	            0x85c0	                           test eax, eax	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d84	            0x7407	                            je 0x4002dcd	      1026	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4	CALL_5
0x2d86	    0x838554fbffff	              add dword [rbp - 0x4ac], 1	      1027	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_4
0x2d8d	    0x8b8548fbffff	            mov eax, dword [rbp - 0x4b8]	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2d93	            0x85c0	                           test eax, eax	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2d95	     0xf8498010000	                            je 0x4002f73	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2d9b	    0x8b853cfbffff	            mov eax, dword [rbp - 0x4c4]	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2da1	            0x85c0	                           test eax, eax	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2da3	     0xf858a010000	                           jne 0x4002f73	      1028	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5
0x2da9	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2db0	          0x488b00	                    mov rax, qword [rax]	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2db3	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2dba	      0xbe00000000	                              mov esi, 0	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2dbf	          0x4889c7	                            mov rdi, rax	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2dc2	      0xe800000000	                          call 0x4002e07	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2dc7	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1029	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_6
0x2dce	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dd4	            0x85c0	                           test eax, eax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dd6	            0x7414	                            je 0x4002e2c	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dd8	    0x488b05000000	            mov rax, qword [0x04002e1f] 	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2ddf	          0x4889c7	                            mov rdi, rax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2de2	      0xe807d5ffff	                               call sym.	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2de7	          0x4889c2	                            mov rdx, rax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dea	            0xeb12	                           jmp 0x4002e3e	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dec	    0x488b05000000	            mov rax, qword [0x04002e33] 	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2df3	          0x4889c7	                            mov rdi, rax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2df6	      0xe8f3d4ffff	                               call sym.	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dfb	          0x4889c2	                            mov rdx, rax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2dfe	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e05	          0x4889c6	                            mov rsi, rax	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e08	          0x4889d7	                            mov rdi, rdx	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e0b	      0xb800000000	                              mov eax, 0	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e10	      0xe800000000	                          call 0x4002e55	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e15	      0xe919010000	                           jmp 0x4002f73	      1030	clean.c	FUNCTION_26	FUNCTION_1	IF_3	IF_5	CALL_9
0x2e1a	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e20	            0x85c0	                           test eax, eax	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e22	            0x7511	                           jne 0x4002e75	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e24	    0x488b85a0fbff	            mov rax, qword [rbp - 0x460]	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e2b	          0x4889c7	                            mov rdi, rax	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e2e	      0xe800000000	                          call 0x4002e73	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e33	            0xeb05	                           jmp 0x4002e7a	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e35	      0xb800000000	                              mov eax, 0	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e3a	    0x898560fbffff	            mov dword [rbp - 0x4a0], eax	      1033	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	CALL_10
0x2e40	    0x83bd60fbffff	              cmp dword [rbp - 0x4a0], 0	      1034	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e47	            0x7474	                            je 0x4002efd	      1034	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e49	      0xe800000000	                          call 0x4002e8e	      1035	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e4e	            0x8b00	                    mov eax, dword [rax]	      1035	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e50	    0x898564fbffff	            mov dword [rbp - 0x49c], eax	      1035	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e56	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e5d	          0x488b00	                    mov rax, qword [rax]	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e60	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e67	      0xbe00000000	                              mov esi, 0	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e6c	          0x4889c7	                            mov rdi, rax	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e6f	      0xe800000000	                          call 0x4002eb4	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e74	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1036	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_11
0x2e7b	      0xe800000000	                          call 0x4002ec0	      1037	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e80	          0x4889c2	                            mov rdx, rax	      1037	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e83	    0x8b8564fbffff	            mov eax, dword [rbp - 0x49c]	      1037	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e89	            0x8902	                    mov dword [rdx], eax	      1037	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2e8b	    0x488b05000000	            mov rax, qword [0x04002ed2] 	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2e92	          0x4889c7	                            mov rdi, rax	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2e95	      0xe854d4ffff	                               call sym.	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2e9a	          0x4889c2	                            mov rdx, rax	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2e9d	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2ea4	          0x4889c6	                            mov rsi, rax	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2ea7	          0x4889d7	                            mov rdi, rdx	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2eaa	      0xb800000000	                              mov eax, 0	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2eaf	      0xe800000000	                          call 0x4002ef4	      1038	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6	CALL_13
0x2eb4	    0x838554fbffff	              add dword [rbp - 0x4ac], 1	      1039	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2ebb	            0xeb76	                           jmp 0x4002f73	      1039	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	IF_6
0x2ebd	    0x8b853cfbffff	            mov eax, dword [rbp - 0x4c4]	      1040	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x2ec3	            0x85c0	                           test eax, eax	      1040	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x2ec5	            0x756c	                           jne 0x4002f73	      1040	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x2ec7	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2ece	          0x488b00	                    mov rax, qword [rax]	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2ed1	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2ed8	      0xbe00000000	                              mov esi, 0	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2edd	          0x4889c7	                            mov rdi, rax	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2ee0	      0xe800000000	                          call 0x4002f25	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2ee5	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1041	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_14
0x2eec	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2ef2	            0x85c0	                           test eax, eax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2ef4	            0x7414	                            je 0x4002f4a	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2ef6	    0x488b05000000	            mov rax, qword [0x04002f3d] 	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2efd	          0x4889c7	                            mov rdi, rax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f00	      0xe8e9d3ffff	                               call sym.	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f05	          0x4889c2	                            mov rdx, rax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f08	            0xeb12	                           jmp 0x4002f5c	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f0a	    0x488b05000000	            mov rax, qword [0x04002f51] 	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f11	          0x4889c7	                            mov rdi, rax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f14	      0xe8d5d3ffff	                               call sym.	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f19	          0x4889c2	                            mov rdx, rax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f1c	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f23	          0x4889c6	                            mov rsi, rax	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f26	          0x4889d7	                            mov rdi, rdx	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f29	      0xb800000000	                              mov eax, 0	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f2e	      0xe800000000	                          call 0x4002f73	      1042	clean.c	FUNCTION_26	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_17
0x2f33	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1045	clean.c	FUNCTION_26	FUNCTION_1	CALL_18
0x2f3a	      0xbe00000000	                              mov esi, 0	      1045	clean.c	FUNCTION_26	FUNCTION_1	CALL_18
0x2f3f	          0x4889c7	                            mov rdi, rax	      1045	clean.c	FUNCTION_26	FUNCTION_1	CALL_18
0x2f42	      0xe8e6d1ffff	                  call sym.strbuf_setlen	      1045	clean.c	FUNCTION_26	FUNCTION_1	CALL_18
0x2f47	            0xeb01	                           jmp 0x4002f8a	      1045	clean.c	FUNCTION_26	FUNCTION_1	CALL_18
0x2f49	              0x90	                                     nop	      1023	clean.c	FUNCTION_26	FUNCTION_1	IF_2
0x2f4a	    0x48838568fbff	           add qword [rbp - 0x498], 0x10	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f52	    0x4883bd68fbff	              cmp qword [rbp - 0x498], 0	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f5a	            0x7423	                            je 0x4002fbf	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f5c	    0x488b05000000	            mov rax, qword [0x04002fa3] 	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f63	    0x8b1500000000	            mov edx, dword [0x04002fa9] 	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f69	            0x89d2	                            mov edx, edx	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f6b	        0x48c1e204	                              shl rdx, 4	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f6f	          0x4801d0	                            add rax, rdx	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f72	    0x483b8568fbff	            cmp rax, qword [rbp - 0x498]	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f79	     0xf8758fdffff	                            ja 0x4002d17	      1009	clean.c	FUNCTION_26	FUNCTION_1
0x2f7f	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1048	clean.c	FUNCTION_26	CALL_46
0x2f86	          0x4889c7	                            mov rdi, rax	      1048	clean.c	FUNCTION_26	CALL_46
0x2f89	      0xe800000000	                          call 0x4002fce	      1048	clean.c	FUNCTION_26	CALL_46
0x2f8e	    0x488d85d0fbff	                  lea rax, [rbp - 0x430]	      1049	clean.c	FUNCTION_26	CALL_47
0x2f95	          0x4889c7	                            mov rdi, rax	      1049	clean.c	FUNCTION_26	CALL_47
0x2f98	      0xe800000000	                          call 0x4002fdd	      1049	clean.c	FUNCTION_26	CALL_47
0x2f9d	      0xbe00000000	                              mov esi, 0	      1050	clean.c	FUNCTION_26	CALL_48
0x2fa2	      0xbf00000000	                              mov edi, 0	      1050	clean.c	FUNCTION_26	CALL_48
0x2fa7	      0xe800000000	                          call 0x4002fec	      1050	clean.c	FUNCTION_26	CALL_48
0x2fac	    0x488d85f0fbff	                  lea rax, [rbp - 0x410]	      1051	clean.c	FUNCTION_26	CALL_49
0x2fb3	      0xbe00000000	                              mov esi, 0	      1051	clean.c	FUNCTION_26	CALL_49
0x2fb8	          0x4889c7	                            mov rdi, rax	      1051	clean.c	FUNCTION_26	CALL_49
0x2fbb	      0xe800000000	                          call 0x4003000	      1051	clean.c	FUNCTION_26	CALL_49
0x2fc0	    0x83bd54fbffff	              cmp dword [rbp - 0x4ac], 0	      1052	clean.c	FUNCTION_26
0x2fc7	           0xf95c0	                                setne al	      1052	clean.c	FUNCTION_26
0x2fca	           0xfb6c0	                           movzx eax, al	      1052	clean.c	FUNCTION_26
0x2fcd	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1053	clean.c	FUNCTION_26
0x2fd1	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1053	clean.c	FUNCTION_26
0x2fda	            0x7405	                            je 0x4003021	      1053	clean.c	FUNCTION_26
0x2fdc	      0xe800000000	                          call 0x4003021	      1053	clean.c	FUNCTION_26
0x2fe1	              0xc9	                                   leave	      1053	clean.c	FUNCTION_26
0x2fe2	              0xc3	                                     ret	      1053	clean.c	FUNCTION_26
const_error	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,0:IF,0:DO,0:ELSE,0	5
0x0	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_46
0x1	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_46
0x4	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_46
0x9	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_46
0xa	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_46
parse_choice	functions,0:SWITCH,0:WHILE,0:FOR,4:CALL,17:IF,12:DO,1:ELSE,7	242
0x1464	              0x55	                                push rbp	       450	clean.c	FUNCTION_16
0x1465	          0x4889e5	                            mov rbp, rsp	       450	clean.c	FUNCTION_16
0x1468	              0x53	                                push rbx	       450	clean.c	FUNCTION_16
0x1469	        0x4883ec68	                           sub rsp, 0x68	       450	clean.c	FUNCTION_16
0x146d	        0x48897da8	             mov qword [rbp - 0x58], rdi	       450	clean.c	FUNCTION_16
0x1471	          0x8975a4	             mov dword [rbp - 0x5c], esi	       450	clean.c	FUNCTION_16
0x1474	        0x48895598	             mov qword [rbp - 0x68], rdx	       450	clean.c	FUNCTION_16
0x1478	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       452	clean.c	FUNCTION_16
0x147f	        0x837da400	               cmp dword [rbp - 0x5c], 0	       455	clean.c	FUNCTION_16	IF_1
0x1483	            0x7419	                            je 0x40014de	       455	clean.c	FUNCTION_16	IF_1
0x1485	      0xba00000000	                              mov edx, 0	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x148a	      0xbe0a000000	                            mov esi, 0xa	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x148f	        0x488d7d10	                   lea rdi, [rbp + 0x10]	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x1493	      0xe8d2edffff	               call sym.strbuf_split_max	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x1498	        0x488945d0	             mov qword [rbp - 0x30], rax	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x149c	            0xeb44	                           jmp 0x4001522	       456	clean.c	FUNCTION_16	IF_1	CALL_1
0x149e	        0x488b4520	            mov rax, qword [rbp + 0x20] 	       458	clean.c	FUNCTION_16	ELSE_1
0x14a2	        0x488945e0	             mov qword [rbp - 0x20], rax	       458	clean.c	FUNCTION_16	ELSE_1
0x14a6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       460	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14aa	           0xfb600	                   movzx eax, byte [rax]	       460	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14ad	            0x3c2c	                            cmp al, 0x2c	       460	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14af	            0x7507	                           jne 0x40014f8	       460	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14b1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       461	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14b5	          0xc60020	                    mov byte [rax], 0x20	       461	clean.c	FUNCTION_16	ELSE_1	DO_1	IF_2
0x14b8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14bc	        0x488d5001	                      lea rdx, [rax + 1]	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14c0	        0x488955e0	             mov qword [rbp - 0x20], rdx	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14c4	           0xfb600	                   movzx eax, byte [rax]	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14c7	            0x84c0	                             test al, al	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14c9	            0x75db	                           jne 0x40014e6	       462	clean.c	FUNCTION_16	ELSE_1	DO_1
0x14cb	      0xba00000000	                              mov edx, 0	       463	clean.c	FUNCTION_16	ELSE_1	CALL_2
0x14d0	      0xbe20000000	                           mov esi, 0x20	       463	clean.c	FUNCTION_16	ELSE_1	CALL_2
0x14d5	        0x488d7d10	                   lea rdi, [rbp + 0x10]	       463	clean.c	FUNCTION_16	ELSE_1	CALL_2
0x14d9	      0xe88cedffff	               call sym.strbuf_split_max	       463	clean.c	FUNCTION_16	ELSE_1	CALL_2
0x14de	        0x488945d0	             mov qword [rbp - 0x30], rax	       463	clean.c	FUNCTION_16	ELSE_1	CALL_2
0x14e2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       466	clean.c	FUNCTION_16	FOR_1
0x14e6	        0x488945d8	             mov qword [rbp - 0x28], rax	       466	clean.c	FUNCTION_16	FOR_1
0x14ea	      0xe986020000	                           jmp 0x40017b5	       466	clean.c	FUNCTION_16	FOR_1
0x14ef	    0xc745bc010000	               mov dword [rbp - 0x44], 1	       468	clean.c	FUNCTION_16	FOR_1
0x14f6	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       469	clean.c	FUNCTION_16	FOR_1
0x14fd	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       469	clean.c	FUNCTION_16	FOR_1
0x1504	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       472	clean.c	FUNCTION_16	FOR_1	CALL_3
0x1508	          0x488b00	                    mov rax, qword [rax]	       472	clean.c	FUNCTION_16	FOR_1	CALL_3
0x150b	          0x4889c7	                            mov rdi, rax	       472	clean.c	FUNCTION_16	FOR_1	CALL_3
0x150e	      0xe800000000	                          call 0x4001553	       472	clean.c	FUNCTION_16	FOR_1	CALL_3
0x1513	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       473	clean.c	FUNCTION_16	FOR_1	IF_3
0x1517	          0x488b00	                    mov rax, qword [rax]	       473	clean.c	FUNCTION_16	FOR_1	IF_3
0x151a	        0x488b4008	                mov rax, qword [rax + 8]	       473	clean.c	FUNCTION_16	FOR_1	IF_3
0x151e	          0x4885c0	                           test rax, rax	       473	clean.c	FUNCTION_16	FOR_1	IF_3
0x1521	     0xf8448020000	                            je 0x40017af	       473	clean.c	FUNCTION_16	FOR_1	IF_3
0x1527	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x152b	          0x488b00	                    mov rax, qword [rax]	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x152e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x1532	           0xfb600	                   movzx eax, byte [rax]	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x1535	            0x3c2d	                            cmp al, 0x2d	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x1537	            0x7520	                           jne 0x4001599	       477	clean.c	FUNCTION_16	FOR_1	IF_4
0x1539	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       478	clean.c	FUNCTION_16	FOR_1	IF_4
0x1540	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x1544	          0x488b00	                    mov rax, qword [rax]	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x1547	      0xba01000000	                              mov edx, 1	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x154c	      0xbe00000000	                              mov esi, 0	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x1551	          0x4889c7	                            mov rdi, rax	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x1554	      0xe800000000	                          call 0x4001599	       479	clean.c	FUNCTION_16	FOR_1	IF_4	CALL_4
0x1559	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       482	clean.c	FUNCTION_16	FOR_1
0x1560	    0xc745cc010000	               mov dword [rbp - 0x34], 1	       483	clean.c	FUNCTION_16	FOR_1
0x1567	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x156b	          0x488b00	                    mov rax, qword [rax]	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x156e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x1572	        0x488945e8	             mov qword [rbp - 0x18], rax	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x1576	            0xeb63	                           jmp 0x400161b	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x1578	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5
0x157c	           0xfb600	                   movzx eax, byte [rax]	       485	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5
0x157f	            0x3c2d	                            cmp al, 0x2d	       485	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5
0x1581	            0x7526	                           jne 0x40015e9	       485	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5
0x1583	        0x837dc800	               cmp dword [rbp - 0x38], 0	       486	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	IF_6
0x1587	            0x7510	                           jne 0x40015d9	       486	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	IF_6
0x1589	    0xc745c8010000	               mov dword [rbp - 0x38], 1	       487	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	IF_6
0x1590	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       488	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	IF_6
0x1597	            0xeb3d	                           jmp 0x4001616	       488	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	IF_6
0x1599	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       490	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	ELSE_2
0x15a0	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       491	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	ELSE_2
0x15a7	            0xeb3d	                           jmp 0x4001626	       492	clean.c	FUNCTION_16	FOR_1	FOR_2	IF_5	ELSE_2
0x15a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15ad	           0xfb600	                   movzx eax, byte [rax]	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15b0	           0xfb6c0	                           movzx eax, al	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15b3	            0x4898	                                    cdqe	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15b5	     0xfb680000000	                   movzx eax, byte [rax]	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15bc	           0xfb6c0	                           movzx eax, al	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15bf	          0x83e002	                              and eax, 2	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15c2	            0x85c0	                           test eax, eax	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15c4	            0x7510	                           jne 0x4001616	       494	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7	CALL_5
0x15c6	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       495	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7
0x15cd	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       496	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7
0x15d4	            0xeb10	                           jmp 0x4001626	       497	clean.c	FUNCTION_16	FOR_1	FOR_2	ELSE_3	IF_7
0x15d6	      0x488345e801	               add qword [rbp - 0x18], 1	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x15db	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x15df	           0xfb600	                   movzx eax, byte [rax]	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x15e2	            0x84c0	                             test al, al	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x15e4	            0x7592	                           jne 0x40015b8	       484	clean.c	FUNCTION_16	FOR_1	FOR_2
0x15e6	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       501	clean.c	FUNCTION_16	FOR_1	IF_8
0x15ea	            0x7421	                            je 0x400164d	       501	clean.c	FUNCTION_16	FOR_1	IF_8
0x15ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x15f0	          0x488b00	                    mov rax, qword [rax]	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x15f3	        0x488b4010	            mov rax, qword [rax + 0x10] 	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x15f7	          0x4889c7	                            mov rdi, rax	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x15fa	      0xe800000000	                          call 0x400163f	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x15ff	          0x8945c0	             mov dword [rbp - 0x40], eax	       502	clean.c	FUNCTION_16	FOR_1	IF_8	CALL_6
0x1602	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       503	clean.c	FUNCTION_16	FOR_1	IF_8
0x1605	          0x8945c4	             mov dword [rbp - 0x3c], eax	       503	clean.c	FUNCTION_16	FOR_1	IF_8
0x1608	      0xe9c6000000	                           jmp 0x4001713	       503	clean.c	FUNCTION_16	FOR_1	IF_8
0x160d	        0x837dc800	               cmp dword [rbp - 0x38], 0	       504	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9
0x1611	            0x746e	                            je 0x40016c1	       504	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9
0x1613	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x1617	          0x488b00	                    mov rax, qword [rax]	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x161a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x161e	          0x4889c7	                            mov rdi, rax	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x1621	      0xe800000000	                          call 0x4001666	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x1626	          0x8945c0	             mov dword [rbp - 0x40], eax	       505	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_7
0x1629	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x162d	          0x488b00	                    mov rax, qword [rax]	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1630	        0x488b4010	            mov rax, qword [rax + 0x10] 	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1634	      0xbe2d000000	                           mov esi, 0x2d	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1639	          0x4889c7	                            mov rdi, rax	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x163c	      0xe800000000	                          call 0x4001681	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1641	        0x4883c001	                              add rax, 1	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1645	           0xfb600	                   movzx eax, byte [rax]	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x1648	            0x84c0	                             test al, al	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x164a	            0x750c	                           jne 0x4001698	       507	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10	CALL_8
0x164c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       508	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10
0x1650	          0x8b4004	                mov eax, dword [rax + 4]	       508	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10
0x1653	          0x8945c4	             mov dword [rbp - 0x3c], eax	       508	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10
0x1656	            0xeb7b	                           jmp 0x4001713	       508	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	IF_10
0x1658	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x165c	          0x488b00	                    mov rax, qword [rax]	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x165f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1663	      0xbe2d000000	                           mov esi, 0x2d	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1668	          0x4889c7	                            mov rdi, rax	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x166b	      0xe800000000	                          call 0x40016b0	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1670	        0x4883c001	                              add rax, 1	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1674	          0x4889c7	                            mov rdi, rax	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1677	      0xe800000000	                          call 0x40016bc	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x167c	          0x8945c4	             mov dword [rbp - 0x3c], eax	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x167f	            0xeb52	                           jmp 0x4001713	       510	clean.c	FUNCTION_16	FOR_1	ELSE_4	IF_9	CALL_10
0x1681	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x1685	          0x488b00	                    mov rax, qword [rax]	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x1688	        0x488b4010	            mov rax, qword [rax + 0x10] 	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x168c	      0xbe00000000	                              mov esi, 0	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x1691	          0x4889c7	                            mov rdi, rax	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x1694	      0xe800000000	                          call 0x40016d9	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x1699	            0x85c0	                           test eax, eax	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x169b	            0x7513	                           jne 0x40016f0	       511	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11	CALL_11
0x169d	    0xc745c0010000	               mov dword [rbp - 0x40], 1	       512	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11
0x16a4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       513	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11
0x16a8	          0x8b4004	                mov eax, dword [rax + 4]	       513	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11
0x16ab	          0x8945c4	             mov dword [rbp - 0x3c], eax	       513	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11
0x16ae	            0xeb23	                           jmp 0x4001713	       513	clean.c	FUNCTION_16	FOR_1	ELSE_6	IF_11
0x16b0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16b4	          0x488b00	                    mov rax, qword [rax]	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16b7	        0x488b4010	            mov rax, qword [rax + 0x10] 	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16bb	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16bf	          0x4889d6	                            mov rsi, rdx	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16c2	          0x4889c7	                            mov rdi, rax	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16c5	      0xe84cfcffff	                    call sym.find_unique	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16ca	          0x8945c0	             mov dword [rbp - 0x40], eax	       515	clean.c	FUNCTION_16	FOR_1	ELSE_7	CALL_12
0x16cd	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       516	clean.c	FUNCTION_16	FOR_1	ELSE_7
0x16d0	          0x8945c4	             mov dword [rbp - 0x3c], eax	       516	clean.c	FUNCTION_16	FOR_1	ELSE_7
0x16d3	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16d7	            0x7e28	                           jle 0x4001741	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16d9	        0x837dc000	               cmp dword [rbp - 0x40], 0	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16dd	            0x7e22	                           jle 0x4001741	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16df	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16e3	          0x8b4004	                mov eax, dword [rax + 4]	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16e6	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16e9	            0x7c16	                            jl 0x4001741	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16eb	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16ee	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16f1	            0x7f0e	                            jg 0x4001741	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16f3	        0x837da400	               cmp dword [rbp - 0x5c], 0	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16f7	            0x7443	                            je 0x400177c	       519	clean.c	FUNCTION_16	FOR_1	IF_12
0x16f9	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       520	clean.c	FUNCTION_16	FOR_1	IF_12
0x16fc	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       520	clean.c	FUNCTION_16	FOR_1	IF_12
0x16ff	            0x743b	                            je 0x400177c	       520	clean.c	FUNCTION_16	FOR_1	IF_12
0x1701	      0xbf05000000	                              mov edi, 5	       521	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_13
0x1706	      0xe89cefffff	              call sym.clean_print_color	       521	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_13
0x170b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x170f	          0x488b00	                    mov rax, qword [rax]	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1712	        0x488b5810	            mov rbx, qword [rax + 0x10] 	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1716	      0xbf00000000	                              mov edi, 0	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x171b	      0xe8ceebffff	                               call sym.	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1720	          0x4889de	                            mov rsi, rbx	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1723	          0x4889c7	                            mov rdi, rax	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1726	      0xb800000000	                              mov eax, 0	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x172b	      0xe800000000	                          call 0x4001770	       522	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_15
0x1730	      0xbf00000000	                              mov edi, 0	       523	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_16
0x1735	      0xe86defffff	              call sym.clean_print_color	       523	clean.c	FUNCTION_16	FOR_1	IF_12	CALL_16
0x173a	            0xeb34	                           jmp 0x40017b0	       524	clean.c	FUNCTION_16	FOR_1	IF_12
0x173c	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x173f	          0x8945b8	             mov dword [rbp - 0x48], eax	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1742	            0xeb21	                           jmp 0x40017a5	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1744	        0x488b4598	             mov rax, qword [rbp - 0x68]	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1748	          0x488b00	                    mov rax, qword [rax]	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x174b	          0x8b55b8	             mov edx, dword [rbp - 0x48]	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x174e	          0x4863d2	                         movsxd rdx, edx	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1751	        0x48c1e202	                              shl rdx, 2	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1755	        0x4883ea04	                              sub rdx, 4	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1759	          0x4801c2	                            add rdx, rax	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x175c	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x175f	            0x8902	                    mov dword [rdx], eax	       528	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1761	        0x8345b801	               add dword [rbp - 0x48], 1	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1765	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x1768	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x176b	            0x7ed7	                           jle 0x4001784	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x176d	            0xeb01	                           jmp 0x40017b0	       527	clean.c	FUNCTION_16	FOR_1	FOR_3
0x176f	              0x90	                                     nop	       474	clean.c	FUNCTION_16	FOR_1	IF_3
0x1770	      0x488345d808	               add qword [rbp - 0x28], 8	       466	clean.c	FUNCTION_16	FOR_1
0x1775	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       466	clean.c	FUNCTION_16	FOR_1
0x1779	          0x488b00	                    mov rax, qword [rax]	       466	clean.c	FUNCTION_16	FOR_1
0x177c	          0x4885c0	                           test rax, rax	       466	clean.c	FUNCTION_16	FOR_1
0x177f	     0xf856afdffff	                           jne 0x400152f	       466	clean.c	FUNCTION_16	FOR_1
0x1785	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       531	clean.c	FUNCTION_16	CALL_17
0x1789	          0x4889c7	                            mov rdi, rax	       531	clean.c	FUNCTION_16	CALL_17
0x178c	      0xe800000000	                          call 0x40017d1	       531	clean.c	FUNCTION_16	CALL_17
0x1791	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       533	clean.c	FUNCTION_16	FOR_4
0x1798	            0xeb1d	                           jmp 0x40017f7	       533	clean.c	FUNCTION_16	FOR_4
0x179a	        0x488b4598	             mov rax, qword [rbp - 0x68]	       534	clean.c	FUNCTION_16	FOR_4
0x179e	          0x488b00	                    mov rax, qword [rax]	       534	clean.c	FUNCTION_16	FOR_4
0x17a1	          0x8b55b8	             mov edx, dword [rbp - 0x48]	       534	clean.c	FUNCTION_16	FOR_4
0x17a4	          0x4863d2	                         movsxd rdx, edx	       534	clean.c	FUNCTION_16	FOR_4
0x17a7	        0x48c1e202	                              shl rdx, 2	       534	clean.c	FUNCTION_16	FOR_4
0x17ab	          0x4801d0	                            add rax, rdx	       534	clean.c	FUNCTION_16	FOR_4
0x17ae	            0x8b00	                    mov eax, dword [rax]	       534	clean.c	FUNCTION_16	FOR_4
0x17b0	           0x145b4	             add dword [rbp - 0x4c], eax	       534	clean.c	FUNCTION_16	FOR_4
0x17b3	        0x8345b801	               add dword [rbp - 0x48], 1	       533	clean.c	FUNCTION_16	FOR_4
0x17b7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       533	clean.c	FUNCTION_16	FOR_4
0x17bb	          0x8b4004	                mov eax, dword [rax + 4]	       533	clean.c	FUNCTION_16	FOR_4
0x17be	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       533	clean.c	FUNCTION_16	FOR_4
0x17c1	            0x7fd7	                            jg 0x40017da	       533	clean.c	FUNCTION_16	FOR_4
0x17c3	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       535	clean.c	FUNCTION_16
0x17c6	        0x4883c468	                           add rsp, 0x68	       536	clean.c	FUNCTION_16
0x17ca	              0x5b	                                 pop rbx	       536	clean.c	FUNCTION_16
0x17cb	              0x5d	                                 pop rbp	       536	clean.c	FUNCTION_16
0x17cc	              0xc3	                                     ret	       536	clean.c	FUNCTION_16
strbuf_complete	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,1:IF,1:DO,0:ELSE,0	27
0x29c	              0x55	                                push rbp	       594	strbuf.h	FUNCTION_39
0x29d	          0x4889e5	                            mov rbp, rsp	       594	strbuf.h	FUNCTION_39
0x2a0	        0x4883ec10	                           sub rsp, 0x10	       594	strbuf.h	FUNCTION_39
0x2a4	        0x48897df8	                mov qword [rbp - 8], rdi	       594	strbuf.h	FUNCTION_39
0x2a8	            0x89f0	                            mov eax, esi	       594	strbuf.h	FUNCTION_39
0x2aa	          0x8845f4	                mov byte [rbp - 0xc], al	       594	strbuf.h	FUNCTION_39
0x2ad	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_39	IF_1
0x2b1	        0x488b4008	                mov rax, qword [rax + 8]	       595	strbuf.h	FUNCTION_39	IF_1
0x2b5	          0x4885c0	                           test rax, rax	       595	strbuf.h	FUNCTION_39	IF_1
0x2b8	            0x7431	                            je 0x400032b	       595	strbuf.h	FUNCTION_39	IF_1
0x2ba	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_39	IF_1
0x2be	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       595	strbuf.h	FUNCTION_39	IF_1
0x2c2	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_39	IF_1
0x2c6	        0x488b4008	                mov rax, qword [rax + 8]	       595	strbuf.h	FUNCTION_39	IF_1
0x2ca	        0x4883e801	                              sub rax, 1	       595	strbuf.h	FUNCTION_39	IF_1
0x2ce	          0x4801d0	                            add rax, rdx	       595	strbuf.h	FUNCTION_39	IF_1
0x2d1	           0xfb600	                   movzx eax, byte [rax]	       595	strbuf.h	FUNCTION_39	IF_1
0x2d4	          0x3a45f4	                cmp al, byte [rbp - 0xc]	       595	strbuf.h	FUNCTION_39	IF_1
0x2d7	            0x7412	                            je 0x400032b	       595	strbuf.h	FUNCTION_39	IF_1
0x2d9	         0xfbe55f4	             movsx edx, byte [rbp - 0xc]	       596	strbuf.h	FUNCTION_39	CALL_1
0x2dd	        0x488b45f8	                mov rax, qword [rbp - 8]	       596	strbuf.h	FUNCTION_39	CALL_1
0x2e1	            0x89d6	                            mov esi, edx	       596	strbuf.h	FUNCTION_39	CALL_1
0x2e3	          0x4889c7	                            mov rdi, rax	       596	strbuf.h	FUNCTION_39	CALL_1
0x2e6	      0xe8dcfeffff	                   call sym.strbuf_addch	       596	strbuf.h	FUNCTION_39	CALL_1
0x2eb	              0x90	                                     nop	       597	strbuf.h	FUNCTION_39
0x2ec	              0xc9	                                   leave	       597	strbuf.h	FUNCTION_39
0x2ed	              0xc3	                                     ret	       597	strbuf.h	FUNCTION_39
print_highlight_menu_stuff	functions,1:SWITCH,1:WHILE,0:FOR,2:CALL,13:IF,2:DO,0:ELSE,1	226
0xfc1	              0x55	                                push rbp	       321	clean.c	FUNCTION_14
0xfc2	          0x4889e5	                            mov rbp, rsp	       321	clean.c	FUNCTION_14
0xfc5	        0x4883c480	             add rsp, 0xffffffffffffff80	       321	clean.c	FUNCTION_14
0xfc9	        0x48897d88	             mov qword [rbp - 0x78], rdi	       321	clean.c	FUNCTION_14
0xfcd	        0x48897580	             mov qword [rbp - 0x80], rsi	       321	clean.c	FUNCTION_14
0xfd1	    0x64488b042528	                mov rax, qword fs:[0x28]	       321	clean.c	FUNCTION_14
0xfda	        0x488945f8	                mov qword [rbp - 8], rax	       321	clean.c	FUNCTION_14
0xfde	            0x31c0	                            xor eax, eax	       321	clean.c	FUNCTION_14
0xfe0	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       322	clean.c	FUNCTION_14
0xfe8	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       322	clean.c	FUNCTION_14
0xfef	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       322	clean.c	FUNCTION_14
0xff6	         0xfb645e0	            movzx eax, byte [rbp - 0x20]	       322	clean.c	FUNCTION_14
0xffa	          0x83c801	                               or eax, 1	       322	clean.c	FUNCTION_14
0xffd	          0x8845e0	               mov byte [rbp - 0x20], al	       322	clean.c	FUNCTION_14
0x1000	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       322	clean.c	FUNCTION_14
0x1008	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       323	clean.c	FUNCTION_14
0x1010	    0x48c745b80000	               mov qword [rbp - 0x48], 0	       323	clean.c	FUNCTION_14
0x1018	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       323	clean.c	FUNCTION_14
0x1020	        0x488b4588	             mov rax, qword [rbp - 0x78]	       328	clean.c	FUNCTION_14	SWITCH_1
0x1024	            0x8b00	                    mov eax, dword [rax]	       328	clean.c	FUNCTION_14	SWITCH_1
0x1026	          0x83f801	                              cmp eax, 1	       328	clean.c	FUNCTION_14	SWITCH_1
0x1029	     0xf84a9010000	                            je 0x4001218	       328	clean.c	FUNCTION_14	SWITCH_1
0x102f	          0x83f802	                              cmp eax, 2	       328	clean.c	FUNCTION_14	SWITCH_1
0x1032	            0x740f	                            je 0x4001083	       328	clean.c	FUNCTION_14	SWITCH_1
0x1034	      0xbf00000000	                              mov edi, 0	       330	clean.c	FUNCTION_14	SWITCH_1	CALL_1
0x1039	      0xb800000000	                              mov eax, 0	       330	clean.c	FUNCTION_14	SWITCH_1	CALL_1
0x103e	      0xe800000000	                          call 0x4001083	       330	clean.c	FUNCTION_14	SWITCH_1	CALL_1
0x1043	        0x488b4588	             mov rax, qword [rbp - 0x78]	       332	clean.c	FUNCTION_14	SWITCH_1
0x1047	        0x488b4008	                mov rax, qword [rax + 8]	       332	clean.c	FUNCTION_14	SWITCH_1
0x104b	        0x48894598	             mov qword [rbp - 0x68], rax	       332	clean.c	FUNCTION_14	SWITCH_1
0x104f	    0xc74590000000	               mov dword [rbp - 0x70], 0	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x1056	      0xe968010000	                           jmp 0x4001203	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x105b	    0xc74594000000	               mov dword [rbp - 0x6c], 0	       335	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x1062	        0x488b4598	             mov rax, qword [rbp - 0x68]	       337	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x1066	        0x488b4008	                mov rax, qword [rax + 8]	       337	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x106a	        0x488945a8	             mov qword [rbp - 0x58], rax	       337	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x106e	        0x488b4580	             mov rax, qword [rbp - 0x80]	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1072	          0x488b00	                    mov rax, qword [rax]	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1075	          0x8b5590	             mov edx, dword [rbp - 0x70]	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1078	          0x4863d2	                         movsxd rdx, edx	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x107b	        0x48c1e202	                              shl rdx, 2	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x107f	          0x4801d0	                            add rax, rdx	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1082	            0x8b00	                    mov eax, dword [rax]	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1084	            0x85c0	                           test eax, eax	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1086	            0x7925	                           jns 0x40010ed	       338	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1088	        0x488b4580	             mov rax, qword [rbp - 0x80]	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x108c	          0x488b00	                    mov rax, qword [rax]	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x108f	          0x8b5590	             mov edx, dword [rbp - 0x70]	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1092	          0x4863d2	                         movsxd rdx, edx	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1095	        0x48c1e202	                              shl rdx, 2	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x1099	          0x4801c2	                            add rdx, rax	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x109c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10a0	          0x8b4010	            mov eax, dword [rax + 0x10] 	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10a3	            0x85c0	                           test eax, eax	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10a5	           0xf95c0	                                setne al	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10a8	           0xfb6c0	                           movzx eax, al	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10ab	            0x8902	                    mov dword [rdx], eax	       339	clean.c	FUNCTION_14	SWITCH_1	FOR_1	IF_1
0x10ad	          0x8b4590	             mov eax, dword [rbp - 0x70]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10b0	          0x8d5001	                      lea edx, [rax + 1]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10b3	        0x488b4580	             mov rax, qword [rbp - 0x80]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10b7	          0x488b00	                    mov rax, qword [rax]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10ba	          0x8b4d90	             mov ecx, dword [rbp - 0x70]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10bd	          0x4863c9	                         movsxd rcx, ecx	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10c0	        0x48c1e102	                              shl rcx, 2	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10c4	          0x4801c8	                            add rax, rcx	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10c7	            0x8b00	                    mov eax, dword [rax]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10c9	            0x85c0	                           test eax, eax	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10cb	            0x7407	                            je 0x4001114	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10cd	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10d2	            0xeb05	                           jmp 0x4001119	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10d4	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10d9	        0x488d45b0	                   lea rax, [rbp - 0x50]	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10dd	            0x89d1	                            mov ecx, edx	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10df	          0x4889f2	                            mov rdx, rsi	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10e2	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10e7	          0x4889c7	                            mov rdi, rax	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10ea	      0xb800000000	                              mov eax, 0	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10ef	      0xe800000000	                          call 0x4001134	       340	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_2
0x10f4	      0xe98e000000	                           jmp 0x40011c7	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x10f9	        0x837d9400	               cmp dword [rbp - 0x6c], 0	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x10fd	            0x756b	                           jne 0x40011aa	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x10ff	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x1103	           0xfb610	                   movzx edx, byte [rax]	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x1106	        0x488b4598	             mov rax, qword [rbp - 0x68]	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x110a	           0xfb600	                   movzx eax, byte [rax]	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x110d	            0x38c2	                              cmp dl, al	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x110f	            0x7559	                           jne 0x40011aa	       342	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x1111	      0xbf02000000	                              mov edi, 2	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x1116	      0xe844f5ffff	                call sym.clean_get_color	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x111b	          0x4889c2	                            mov rdx, rax	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x111e	        0x488d45b0	                   lea rax, [rbp - 0x50]	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x1122	          0x4889d6	                            mov rsi, rdx	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x1125	          0x4889c7	                            mov rdi, rax	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x1128	      0xe808f1ffff	                  call sym.strbuf_addstr	       343	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x112d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x1131	           0xfb600	                   movzx eax, byte [rax]	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x1134	           0xfbed0	                           movsx edx, al	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x1137	        0x488d45b0	                   lea rax, [rbp - 0x50]	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x113b	            0x89d6	                            mov esi, edx	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x113d	          0x4889c7	                            mov rdi, rax	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x1140	      0xe882f0ffff	                   call sym.strbuf_addch	       344	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x1145	      0xbf00000000	                              mov edi, 0	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x114a	      0xe810f5ffff	                call sym.clean_get_color	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x114f	          0x4889c2	                            mov rdx, rax	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x1152	        0x488d45b0	                   lea rax, [rbp - 0x50]	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x1156	          0x4889d6	                            mov rsi, rdx	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x1159	          0x4889c7	                            mov rdi, rax	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x115c	      0xe8d4f0ffff	                  call sym.strbuf_addstr	       345	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x1161	    0xc74594010000	               mov dword [rbp - 0x6c], 1	       346	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x1168	            0xeb18	                           jmp 0x40011c2	       346	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	IF_2
0x116a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x116e	           0xfb600	                   movzx eax, byte [rax]	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x1171	           0xfbed0	                           movsx edx, al	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x1174	        0x488d45b0	                   lea rax, [rbp - 0x50]	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x1178	            0x89d6	                            mov esi, edx	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x117a	          0x4889c7	                            mov rdi, rax	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x117d	      0xe845f0ffff	                   call sym.strbuf_addch	       348	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x1182	      0x488345a801	               add qword [rbp - 0x58], 1	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x1187	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x118b	           0xfb600	                   movzx eax, byte [rax]	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x118e	            0x84c0	                             test al, al	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x1190	     0xf8563ffffff	                           jne 0x4001139	       341	clean.c	FUNCTION_14	SWITCH_1	FOR_1	FOR_2
0x1196	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       351	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_9
0x119a	        0x488d45d0	                   lea rax, [rbp - 0x30]	       351	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_9
0x119e	          0x4889d6	                            mov rsi, rdx	       351	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_9
0x11a1	          0x4889c7	                            mov rdi, rax	       351	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_9
0x11a4	      0xe800000000	                          call 0x40011e9	       351	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_9
0x11a9	        0x488d45b0	                   lea rax, [rbp - 0x50]	       352	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_10
0x11ad	      0xbe00000000	                              mov esi, 0	       352	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_10
0x11b2	          0x4889c7	                            mov rdi, rax	       352	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_10
0x11b5	      0xe873efffff	                  call sym.strbuf_setlen	       352	clean.c	FUNCTION_14	SWITCH_1	FOR_1	CALL_10
0x11ba	        0x83459001	               add dword [rbp - 0x70], 1	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11be	      0x4883459820	            add qword [rbp - 0x68], 0x20	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11c3	        0x488b4588	             mov rax, qword [rbp - 0x78]	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11c7	          0x8b4004	                mov eax, dword [rax + 4]	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11ca	          0x3b4590	             cmp eax, dword [rbp - 0x70]	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11cd	     0xf8f88feffff	                            jg 0x400109b	       333	clean.c	FUNCTION_14	SWITCH_1	FOR_1
0x11d3	      0xe9fe000000	                           jmp 0x4001316	       354	clean.c	FUNCTION_14	SWITCH_1
0x11d8	    0xc74590000000	               mov dword [rbp - 0x70], 0	       356	clean.c	FUNCTION_14	SWITCH_1
0x11df	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x11e3	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x11e7	          0x488b00	                    mov rax, qword [rax]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x11ea	        0x488945a0	             mov qword [rbp - 0x60], rax	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x11ee	      0xe9b2000000	                           jmp 0x40012e5	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x11f3	        0x488b4580	             mov rax, qword [rbp - 0x80]	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x11f7	          0x488b00	                    mov rax, qword [rax]	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x11fa	          0x8b5590	             mov edx, dword [rbp - 0x70]	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x11fd	          0x4863d2	                         movsxd rdx, edx	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1200	        0x48c1e202	                              shl rdx, 2	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1204	          0x4801d0	                            add rax, rdx	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1207	            0x8b00	                    mov eax, dword [rax]	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1209	            0x85c0	                           test eax, eax	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x120b	            0x791a	                           jns 0x4001267	       358	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x120d	        0x488b4580	             mov rax, qword [rbp - 0x80]	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1211	          0x488b00	                    mov rax, qword [rax]	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1214	          0x8b5590	             mov edx, dword [rbp - 0x70]	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1217	          0x4863d2	                         movsxd rdx, edx	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x121a	        0x48c1e202	                              shl rdx, 2	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x121e	          0x4801d0	                            add rax, rdx	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1221	    0xc70000000000	                      mov dword [rax], 0	       359	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	IF_1
0x1227	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x122b	          0x488b08	                    mov rcx, qword [rax]	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x122e	          0x8b4590	             mov eax, dword [rbp - 0x70]	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1231	          0x8d5001	                      lea edx, [rax + 1]	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1234	        0x488b4580	             mov rax, qword [rbp - 0x80]	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x1238	          0x488b00	                    mov rax, qword [rax]	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x123b	          0x8b7590	             mov esi, dword [rbp - 0x70]	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x123e	          0x4863f6	                         movsxd rsi, esi	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x1241	        0x48c1e602	                              shl rsi, 2	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x1245	          0x4801f0	                            add rax, rsi	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x1248	            0x8b00	                    mov eax, dword [rax]	       361	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x124a	            0x85c0	                           test eax, eax	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x124c	            0x7407	                            je 0x4001295	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x124e	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1253	            0xeb05	                           jmp 0x400129a	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1255	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x125a	        0x488d45b0	                   lea rax, [rbp - 0x50]	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x125e	          0x4989c8	                             mov r8, rcx	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1261	            0x89d1	                            mov ecx, edx	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1263	          0x4889f2	                            mov rdx, rsi	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1266	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x126b	          0x4889c7	                            mov rdi, rax	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x126e	      0xb800000000	                              mov eax, 0	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1273	      0xe800000000	                          call 0x40012b8	       360	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_1
0x1278	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       362	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_2
0x127c	        0x488d45d0	                   lea rax, [rbp - 0x30]	       362	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_2
0x1280	          0x4889d6	                            mov rsi, rdx	       362	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_2
0x1283	          0x4889c7	                            mov rdi, rax	       362	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_2
0x1286	      0xe800000000	                          call 0x40012cb	       362	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_2
0x128b	        0x488d45b0	                   lea rax, [rbp - 0x50]	       363	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_3
0x128f	      0xbe00000000	                              mov esi, 0	       363	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_3
0x1294	          0x4889c7	                            mov rdi, rax	       363	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_3
0x1297	      0xe891eeffff	                  call sym.strbuf_setlen	       363	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1	CALL_3
0x129c	        0x83459001	               add dword [rbp - 0x70], 1	       364	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12a0	      0x488345a010	            add qword [rbp - 0x60], 0x10	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12a5	      0x48837da000	               cmp qword [rbp - 0x60], 0	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12aa	            0x7429	                            je 0x4001315	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12ac	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12b0	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12b4	          0x488b10	                    mov rdx, qword [rax]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12b7	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12bb	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12bf	          0x8b4008	                mov eax, dword [rax + 8]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12c2	            0x89c0	                            mov eax, eax	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12c4	        0x48c1e004	                              shl rax, 4	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12c8	          0x4801d0	                            add rax, rdx	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12cb	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12cf	     0xf871effffff	                            ja 0x4001233	       357	clean.c	FUNCTION_14	SWITCH_1	FUNCTION_1
0x12d5	              0x90	                                     nop	       366	clean.c	FUNCTION_14	SWITCH_1
0x12d6	        0x488d45d0	                   lea rax, [rbp - 0x30]	       369	clean.c	FUNCTION_14	CALL_11
0x12da	          0x4889c7	                            mov rdi, rax	       369	clean.c	FUNCTION_14	CALL_11
0x12dd	      0xe81afcffff	             call sym.pretty_print_menus	       369	clean.c	FUNCTION_14	CALL_11
0x12e2	        0x488d45b0	                   lea rax, [rbp - 0x50]	       371	clean.c	FUNCTION_14	CALL_12
0x12e6	          0x4889c7	                            mov rdi, rax	       371	clean.c	FUNCTION_14	CALL_12
0x12e9	      0xe800000000	                          call 0x400132e	       371	clean.c	FUNCTION_14	CALL_12
0x12ee	        0x488d45d0	                   lea rax, [rbp - 0x30]	       372	clean.c	FUNCTION_14	CALL_13
0x12f2	      0xbe00000000	                              mov esi, 0	       372	clean.c	FUNCTION_14	CALL_13
0x12f7	          0x4889c7	                            mov rdi, rax	       372	clean.c	FUNCTION_14	CALL_13
0x12fa	      0xe800000000	                          call 0x400133f	       372	clean.c	FUNCTION_14	CALL_13
0x12ff	              0x90	                                     nop	       373	clean.c	FUNCTION_14
0x1300	        0x488b45f8	                mov rax, qword [rbp - 8]	       373	clean.c	FUNCTION_14
0x1304	    0x644833042528	                xor rax, qword fs:[0x28]	       373	clean.c	FUNCTION_14
0x130d	            0x7405	                            je 0x4001354	       373	clean.c	FUNCTION_14
0x130f	      0xe800000000	                          call 0x4001354	       373	clean.c	FUNCTION_14
0x1314	              0xc9	                                   leave	       373	clean.c	FUNCTION_14
0x1315	              0xc3	                                     ret	       373	clean.c	FUNCTION_14
strbuf_split_max	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,1:IF,0:DO,0:ELSE,0	16
0x26a	              0x55	                                push rbp	       532	strbuf.h	FUNCTION_37
0x26b	          0x4889e5	                            mov rbp, rsp	       532	strbuf.h	FUNCTION_37
0x26e	        0x4883ec10	                           sub rsp, 0x10	       532	strbuf.h	FUNCTION_37
0x272	        0x48897df8	                mov qword [rbp - 8], rdi	       532	strbuf.h	FUNCTION_37
0x276	          0x8975f4	              mov dword [rbp - 0xc], esi	       532	strbuf.h	FUNCTION_37
0x279	          0x8955f0	             mov dword [rbp - 0x10], edx	       532	strbuf.h	FUNCTION_37
0x27c	        0x488b45f8	                mov rax, qword [rbp - 8]	       533	strbuf.h	FUNCTION_37	CALL_1
0x280	        0x488b7008	                mov rsi, qword [rax + 8]	       533	strbuf.h	FUNCTION_37	CALL_1
0x284	        0x488b45f8	                mov rax, qword [rbp - 8]	       533	strbuf.h	FUNCTION_37	CALL_1
0x288	        0x488b4010	            mov rax, qword [rax + 0x10] 	       533	strbuf.h	FUNCTION_37	CALL_1
0x28c	          0x8b4df0	             mov ecx, dword [rbp - 0x10]	       533	strbuf.h	FUNCTION_37	CALL_1
0x28f	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       533	strbuf.h	FUNCTION_37	CALL_1
0x292	          0x4889c7	                            mov rdi, rax	       533	strbuf.h	FUNCTION_37	CALL_1
0x295	      0xe800000000	                          call 0x40002da	       533	strbuf.h	FUNCTION_37	CALL_1
0x29a	              0xc9	                                   leave	       534	strbuf.h	FUNCTION_37
0x29b	              0xc3	                                     ret	       534	strbuf.h	FUNCTION_37
list_and_choose	functions,0:SWITCH,0:WHILE,0:FOR,4:CALL,20:IF,12:DO,0:ELSE,3	248
0x17cd	              0x55	                                push rbp	       550	clean.c	FUNCTION_17
0x17ce	          0x4889e5	                            mov rbp, rsp	       550	clean.c	FUNCTION_17
0x17d1	            0x4155	                                push r13	       550	clean.c	FUNCTION_17
0x17d3	            0x4154	                                push r12	       550	clean.c	FUNCTION_17
0x17d5	              0x53	                                push rbx	       550	clean.c	FUNCTION_17
0x17d6	        0x4883ec58	                           sub rsp, 0x58	       550	clean.c	FUNCTION_17
0x17da	        0x48897d98	             mov qword [rbp - 0x68], rdi	       550	clean.c	FUNCTION_17
0x17de	        0x48897590	             mov qword [rbp - 0x70], rsi	       550	clean.c	FUNCTION_17
0x17e2	    0x64488b042528	                mov rax, qword fs:[0x28]	       550	clean.c	FUNCTION_17
0x17eb	        0x488945d8	             mov qword [rbp - 0x28], rax	       550	clean.c	FUNCTION_17
0x17ef	            0x31c0	                            xor eax, eax	       550	clean.c	FUNCTION_17
0x17f1	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       551	clean.c	FUNCTION_17
0x17f9	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       551	clean.c	FUNCTION_17
0x1801	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       551	clean.c	FUNCTION_17
0x1809	    0xc745a0000000	               mov dword [rbp - 0x60], 0	       553	clean.c	FUNCTION_17
0x1810	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       554	clean.c	FUNCTION_17
0x1817	        0x488b4590	             mov rax, qword [rbp - 0x70]	       557	clean.c	FUNCTION_17	CALL_1
0x181b	          0x8b4004	                mov eax, dword [rax + 4]	       557	clean.c	FUNCTION_17	CALL_1
0x181e	            0x4898	                                    cdqe	       557	clean.c	FUNCTION_17	CALL_1
0x1820	          0x4889c6	                            mov rsi, rax	       557	clean.c	FUNCTION_17	CALL_1
0x1823	      0xbf04000000	                              mov edi, 4	       557	clean.c	FUNCTION_17	CALL_1
0x1828	      0xe878e8ffff	                        call sym.st_mult	       557	clean.c	FUNCTION_17	CALL_1
0x182d	          0x4889c7	                            mov rdi, rax	       557	clean.c	FUNCTION_17	CALL_1
0x1830	      0xe800000000	                          call 0x4001875	       557	clean.c	FUNCTION_17	CALL_1
0x1835	        0x488945b0	             mov qword [rbp - 0x50], rax	       557	clean.c	FUNCTION_17	CALL_1
0x1839	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       559	clean.c	FUNCTION_17	FOR_1
0x1840	            0xeb1b	                           jmp 0x400189d	       559	clean.c	FUNCTION_17	FOR_1
0x1842	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       560	clean.c	FUNCTION_17	FOR_1
0x1846	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       560	clean.c	FUNCTION_17	FOR_1
0x1849	          0x4863d2	                         movsxd rdx, edx	       560	clean.c	FUNCTION_17	FOR_1
0x184c	        0x48c1e202	                              shl rdx, 2	       560	clean.c	FUNCTION_17	FOR_1
0x1850	          0x4801d0	                            add rax, rdx	       560	clean.c	FUNCTION_17	FOR_1
0x1853	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       560	clean.c	FUNCTION_17	FOR_1
0x1859	        0x8345a801	               add dword [rbp - 0x58], 1	       559	clean.c	FUNCTION_17	FOR_1
0x185d	        0x488b4590	             mov rax, qword [rbp - 0x70]	       559	clean.c	FUNCTION_17	FOR_1
0x1861	          0x8b4004	                mov eax, dword [rax + 4]	       559	clean.c	FUNCTION_17	FOR_1
0x1864	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       559	clean.c	FUNCTION_17	FOR_1
0x1867	            0x7fd9	                            jg 0x4001882	       559	clean.c	FUNCTION_17	FOR_1
0x1869	        0x488b4598	             mov rax, qword [rbp - 0x68]	       563	clean.c	FUNCTION_17	FOR_2	IF_1
0x186d	          0x488b00	                    mov rax, qword [rax]	       563	clean.c	FUNCTION_17	FOR_2	IF_1
0x1870	          0x4885c0	                           test rax, rax	       563	clean.c	FUNCTION_17	FOR_2	IF_1
0x1873	            0x7441	                            je 0x40018f6	       563	clean.c	FUNCTION_17	FOR_2	IF_1
0x1875	      0xbf00000000	                              mov edi, 0	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x187a	      0xe8e0edffff	                call sym.clean_get_color	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x187f	          0x4989c4	                            mov r12, rax	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1882	        0x488b4598	             mov rax, qword [rbp - 0x68]	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1886	          0x488b00	                    mov rax, qword [rax]	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1889	          0x4889c7	                            mov rdi, rax	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x188c	      0xe85deaffff	                               call sym.	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1891	          0x4889c3	                            mov rbx, rax	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1894	      0xbf03000000	                              mov edi, 3	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x1899	      0xe8c1edffff	                call sym.clean_get_color	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x189e	          0x4c89e1	                            mov rcx, r12	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18a1	          0x4889da	                            mov rdx, rbx	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18a4	          0x4889c6	                            mov rsi, rax	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18a7	      0xbf00000000	                              mov edi, 0	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18ac	      0xb800000000	                              mov eax, 0	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18b1	      0xe800000000	                          call 0x40018f6	       564	clean.c	FUNCTION_17	FOR_2	IF_1	CALL_2
0x18b6	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       571	clean.c	FUNCTION_17	FOR_2	CALL_6
0x18ba	        0x488b4590	             mov rax, qword [rbp - 0x70]	       571	clean.c	FUNCTION_17	FOR_2	CALL_6
0x18be	          0x4889d6	                            mov rsi, rdx	       571	clean.c	FUNCTION_17	FOR_2	CALL_6
0x18c1	          0x4889c7	                            mov rdi, rax	       571	clean.c	FUNCTION_17	FOR_2	CALL_6
0x18c4	      0xe8f8f6ffff	     call sym.print_highlight_menu_stuff	       571	clean.c	FUNCTION_17	FOR_2	CALL_6
0x18c9	        0x488b4598	             mov rax, qword [rbp - 0x68]	       573	clean.c	FUNCTION_17	FOR_2	IF_2
0x18cd	          0x8b4010	            mov eax, dword [rax + 0x10] 	       573	clean.c	FUNCTION_17	FOR_2	IF_2
0x18d0	          0x83e004	                              and eax, 4	       573	clean.c	FUNCTION_17	FOR_2	IF_2
0x18d3	            0x85c0	                           test eax, eax	       573	clean.c	FUNCTION_17	FOR_2	IF_2
0x18d5	     0xf853f010000	                           jne 0x4001a5a	       573	clean.c	FUNCTION_17	FOR_2	IF_2
0x18db	        0x488b4598	             mov rax, qword [rbp - 0x68]	       576	clean.c	FUNCTION_17	FOR_2	IF_3
0x18df	        0x488b4008	                mov rax, qword [rax + 8]	       576	clean.c	FUNCTION_17	FOR_2	IF_3
0x18e3	          0x4885c0	                           test rax, rax	       576	clean.c	FUNCTION_17	FOR_2	IF_3
0x18e6	            0x745f	                            je 0x4001987	       576	clean.c	FUNCTION_17	FOR_2	IF_3
0x18e8	      0xbf00000000	                              mov edi, 0	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x18ed	      0xe86dedffff	                call sym.clean_get_color	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x18f2	          0x4989c5	                            mov r13, rax	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x18f5	        0x488b4598	             mov rax, qword [rbp - 0x68]	       580	clean.c	FUNCTION_17	FOR_2	IF_3
0x18f9	          0x8b4010	            mov eax, dword [rax + 0x10] 	       580	clean.c	FUNCTION_17	FOR_2	IF_3
0x18fc	          0x83e001	                              and eax, 1	       580	clean.c	FUNCTION_17	FOR_2	IF_3
0x18ff	            0x85c0	                           test eax, eax	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1901	            0x7407	                            je 0x400194a	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1903	      0xbb00000000	                              mov ebx, 0	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1908	            0xeb05	                           jmp 0x400194f	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x190a	      0xbb00000000	                              mov ebx, 0	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x190f	        0x488b4598	             mov rax, qword [rbp - 0x68]	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1913	        0x488b4008	                mov rax, qword [rax + 8]	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1917	          0x4889c7	                            mov rdi, rax	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x191a	      0xe8cfe9ffff	                               call sym.	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x191f	          0x4989c4	                            mov r12, rax	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1922	      0xbf02000000	                              mov edi, 2	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1927	      0xe833edffff	                call sym.clean_get_color	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x192c	          0x4d89e8	                             mov r8, r13	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x192f	          0x4889d9	                            mov rcx, rbx	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1932	          0x4c89e2	                            mov rdx, r12	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1935	          0x4889c6	                            mov rsi, rax	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1938	      0xbf00000000	                              mov edi, 0	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x193d	      0xb800000000	                              mov eax, 0	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1942	      0xe800000000	                          call 0x4001987	       577	clean.c	FUNCTION_17	FOR_2	IF_3	CALL_7
0x1947	    0x488b15000000	            mov rdx, qword [0x0400198e] 	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x194e	        0x488d45c0	                   lea rax, [rbp - 0x40]	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x1952	          0x4889d6	                            mov rsi, rdx	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x1955	          0x4889c7	                            mov rdi, rax	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x1958	      0xe800000000	                          call 0x400199d	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x195d	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x1960	            0x7423	                            je 0x40019c5	       584	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_11
0x1962	        0x488d45c0	                   lea rax, [rbp - 0x40]	       585	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_12
0x1966	          0x4889c7	                            mov rdi, rax	       585	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_12
0x1969	      0xe800000000	                          call 0x40019ae	       585	clean.c	FUNCTION_17	FOR_2	IF_4	CALL_12
0x196e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x1972	      0xbe00000000	                              mov esi, 0	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x1977	          0x4889c7	                            mov rdi, rax	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x197a	      0xe800000000	                          call 0x40019bf	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x197f	            0x85c0	                           test eax, eax	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x1981	            0x7521	                           jne 0x40019e4	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x1983	            0xeb0c	                           jmp 0x40019d1	       592	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_13
0x1985	    0xc745a4010000	               mov dword [rbp - 0x5c], 1	       587	clean.c	FUNCTION_17	FOR_2	ELSE_1
0x198c	      0xe990000000	                           jmp 0x4001a61	       588	clean.c	FUNCTION_17	FOR_2	ELSE_1
0x1991	        0x488b4598	             mov rax, qword [rbp - 0x68]	       593	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_14
0x1995	          0x8b4010	            mov eax, dword [rax + 0x10] 	       593	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_14
0x1998	          0x83e001	                              and eax, 1	       593	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_14
0x199b	            0x89c7	                            mov edi, eax	       593	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_14
0x199d	      0xe8d4f5ffff	                call sym.prompt_help_cmd	       593	clean.c	FUNCTION_17	FOR_2	IF_5	CALL_14
0x19a2	            0xeb71	                           jmp 0x4001a55	       594	clean.c	FUNCTION_17	FOR_2	IF_5
0x19a4	        0x488b4598	             mov rax, qword [rbp - 0x68]	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19a8	          0x8b4010	            mov eax, dword [rax + 0x10] 	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19ab	          0x83e001	                              and eax, 1	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19ae	            0x85c0	                           test eax, eax	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19b0	            0x7509	                           jne 0x40019fb	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19b2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19b6	          0x4885c0	                           test rax, rax	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19b9	            0x7462	                            je 0x4001a5d	       598	clean.c	FUNCTION_17	FOR_2	IF_6
0x19bb	        0x488b4598	             mov rax, qword [rbp - 0x68]	       602	clean.c	FUNCTION_17	FOR_2
0x19bf	          0x8b4010	            mov eax, dword [rax + 0x10] 	       602	clean.c	FUNCTION_17	FOR_2
0x19c2	          0x83e001	                              and eax, 1	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19c5	            0x89c1	                            mov ecx, eax	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19c7	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19cb	        0x488b4590	             mov rax, qword [rbp - 0x70]	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19cf	        0x4883ec08	                              sub rsp, 8	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19d3	          0xff75d0	                 push qword [rbp - 0x30]	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19d6	          0xff75c8	                 push qword [rbp - 0x38]	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19d9	          0xff75c0	                 push qword [rbp - 0x40]	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19dc	            0x89ce	                            mov esi, ecx	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19de	          0x4889c7	                            mov rdi, rax	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19e1	      0xe87efaffff	                   call sym.parse_choice	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19e6	        0x4883c420	                           add rsp, 0x20	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19ea	          0x8945a0	             mov dword [rbp - 0x60], eax	       601	clean.c	FUNCTION_17	FOR_2	CALL_15
0x19ed	        0x488b4598	             mov rax, qword [rbp - 0x68]	       606	clean.c	FUNCTION_17	FOR_2	IF_7
0x19f1	          0x8b4010	            mov eax, dword [rax + 0x10] 	       606	clean.c	FUNCTION_17	FOR_2	IF_7
0x19f4	          0x83e001	                              and eax, 1	       606	clean.c	FUNCTION_17	FOR_2	IF_7
0x19f7	            0x85c0	                           test eax, eax	       606	clean.c	FUNCTION_17	FOR_2	IF_7
0x19f9	            0x740c	                            je 0x4001a47	       606	clean.c	FUNCTION_17	FOR_2	IF_7
0x19fb	        0x837da000	               cmp dword [rbp - 0x60], 0	       607	clean.c	FUNCTION_17	FOR_2	IF_7	IF_8
0x19ff	     0xf8464feffff	                            je 0x40018a9	       607	clean.c	FUNCTION_17	FOR_2	IF_7	IF_8
0x1a05	            0xeb1a	                           jmp 0x4001a61	       608	clean.c	FUNCTION_17	FOR_2	IF_7	IF_8
0x1a07	        0x488b4598	             mov rax, qword [rbp - 0x68]	       609	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a0b	          0x8b4010	            mov eax, dword [rax + 0x10] 	       609	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a0e	          0x83e002	                              and eax, 2	       609	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a11	            0x85c0	                           test eax, eax	       609	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a13	            0x750b	                           jne 0x4001a60	       609	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a15	      0xe94ffeffff	                           jmp 0x40018a9	       612	clean.c	FUNCTION_17	FOR_2
0x1a1a	              0x90	                                     nop	       574	clean.c	FUNCTION_17	FOR_2	IF_2
0x1a1b	            0xeb04	                           jmp 0x4001a61	       574	clean.c	FUNCTION_17	FOR_2	IF_2
0x1a1d	              0x90	                                     nop	       599	clean.c	FUNCTION_17	FOR_2	IF_6
0x1a1e	            0xeb01	                           jmp 0x4001a61	       599	clean.c	FUNCTION_17	FOR_2	IF_6
0x1a20	              0x90	                                     nop	       610	clean.c	FUNCTION_17	FOR_2	ELSE_2	IF_9
0x1a21	        0x837da400	               cmp dword [rbp - 0x5c], 0	       614	clean.c	FUNCTION_17	IF_10
0x1a25	            0x741d	                            je 0x4001a84	       614	clean.c	FUNCTION_17	IF_10
0x1a27	      0xbf04000000	                              mov edi, 4	       615	clean.c	FUNCTION_17	IF_10	CALL_16
0x1a2c	      0xe800000000	                          call 0x4001a71	       615	clean.c	FUNCTION_17	IF_10	CALL_16
0x1a31	        0x488945b8	             mov qword [rbp - 0x48], rax	       615	clean.c	FUNCTION_17	IF_10	CALL_16
0x1a35	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       616	clean.c	FUNCTION_17	IF_10
0x1a39	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       616	clean.c	FUNCTION_17	IF_10
0x1a3f	      0xe9d0000000	                           jmp 0x4001b54	       616	clean.c	FUNCTION_17	IF_10
0x1a44	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       618	clean.c	FUNCTION_17	ELSE_3
0x1a4b	        0x837da000	               cmp dword [rbp - 0x60], 0	       624	clean.c	FUNCTION_17	ELSE_3	IF_11
0x1a4f	            0x752f	                           jne 0x4001ac0	       624	clean.c	FUNCTION_17	ELSE_3	IF_11
0x1a51	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a58	            0xeb1a	                           jmp 0x4001ab4	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a5a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a5e	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a61	          0x4863d2	                         movsxd rdx, edx	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a64	        0x48c1e202	                              shl rdx, 2	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a68	          0x4801d0	                            add rax, rdx	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a6b	            0x8b00	                    mov eax, dword [rax]	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a6d	           0x145a0	             add dword [rbp - 0x60], eax	       626	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a70	        0x8345a801	               add dword [rbp - 0x58], 1	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a74	        0x488b4590	             mov rax, qword [rbp - 0x70]	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a78	          0x8b4004	                mov eax, dword [rax + 4]	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a7b	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a7e	            0x7fda	                            jg 0x4001a9a	       625	clean.c	FUNCTION_17	ELSE_3	IF_11	FOR_3
0x1a80	          0x8b45a0	             mov eax, dword [rbp - 0x60]	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a83	            0x4898	                                    cdqe	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a85	      0xbe01000000	                              mov esi, 1	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a8a	          0x4889c7	                            mov rdi, rax	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a8d	      0xe8cfe5ffff	                         call sym.st_add	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a92	      0xbe04000000	                              mov esi, 4	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a97	          0x4889c7	                            mov rdi, rax	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a9a	      0xe800000000	                          call 0x4001adf	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1a9f	        0x488945b8	             mov qword [rbp - 0x48], rax	       629	clean.c	FUNCTION_17	ELSE_3	CALL_18
0x1aa3	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1aaa	            0xeb3a	                           jmp 0x4001b26	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1aac	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ab0	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ab3	          0x4863d2	                         movsxd rdx, edx	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ab6	        0x48c1e202	                              shl rdx, 2	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1aba	          0x4801d0	                            add rax, rdx	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1abd	            0x8b00	                    mov eax, dword [rax]	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1abf	            0x85c0	                           test eax, eax	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ac1	            0x741f	                            je 0x4001b22	       631	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ac3	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ac6	          0x8d5001	                      lea edx, [rax + 1]	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ac9	          0x8955ac	             mov dword [rbp - 0x54], edx	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1acc	            0x4898	                                    cdqe	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ace	    0x488d14850000	                        lea rdx, [rax*4]	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ad6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ada	          0x4801c2	                            add rdx, rax	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1add	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ae0	            0x8902	                    mov dword [rdx], eax	       632	clean.c	FUNCTION_17	ELSE_3	FOR_4	IF_12
0x1ae2	        0x8345a801	               add dword [rbp - 0x58], 1	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1ae6	        0x488b4590	             mov rax, qword [rbp - 0x70]	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1aea	          0x8b4004	                mov eax, dword [rax + 4]	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1aed	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1af0	            0x7e08	                           jle 0x4001b3a	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1af2	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1af5	          0x3b45a0	             cmp eax, dword [rbp - 0x60]	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1af8	            0x7cb2	                            jl 0x4001aec	       630	clean.c	FUNCTION_17	ELSE_3	FOR_4
0x1afa	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       634	clean.c	FUNCTION_17	ELSE_3
0x1afd	            0x4898	                                    cdqe	       634	clean.c	FUNCTION_17	ELSE_3
0x1aff	    0x488d14850000	                        lea rdx, [rax*4]	       634	clean.c	FUNCTION_17	ELSE_3
0x1b07	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       634	clean.c	FUNCTION_17	ELSE_3
0x1b0b	          0x4801d0	                            add rax, rdx	       634	clean.c	FUNCTION_17	ELSE_3
0x1b0e	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       634	clean.c	FUNCTION_17	ELSE_3
0x1b14	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       637	clean.c	FUNCTION_17	CALL_19
0x1b18	          0x4889c7	                            mov rdi, rax	       637	clean.c	FUNCTION_17	CALL_19
0x1b1b	      0xe800000000	                          call 0x4001b60	       637	clean.c	FUNCTION_17	CALL_19
0x1b20	        0x488d45c0	                   lea rax, [rbp - 0x40]	       638	clean.c	FUNCTION_17	CALL_20
0x1b24	          0x4889c7	                            mov rdi, rax	       638	clean.c	FUNCTION_17	CALL_20
0x1b27	      0xe800000000	                          call 0x4001b6c	       638	clean.c	FUNCTION_17	CALL_20
0x1b2c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       639	clean.c	FUNCTION_17
0x1b30	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       640	clean.c	FUNCTION_17
0x1b34	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       640	clean.c	FUNCTION_17
0x1b3d	            0x7405	                            je 0x4001b84	       640	clean.c	FUNCTION_17
0x1b3f	      0xe800000000	                          call 0x4001b84	       640	clean.c	FUNCTION_17
0x1b44	        0x488d65e8	                   lea rsp, [rbp - 0x18]	       640	clean.c	FUNCTION_17
0x1b48	              0x5b	                                 pop rbx	       640	clean.c	FUNCTION_17
0x1b49	            0x415c	                                 pop r12	       640	clean.c	FUNCTION_17
0x1b4b	            0x415d	                                 pop r13	       640	clean.c	FUNCTION_17
0x1b4d	              0x5d	                                 pop rbp	       640	clean.c	FUNCTION_17
0x1b4e	              0xc3	                                     ret	       640	clean.c	FUNCTION_17
st_add	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,1:DO,0:ELSE,0	20
0x61	              0x55	                                push rbp	       784	git-compat-util.h	FUNCTION_54
0x62	          0x4889e5	                            mov rbp, rsp	       784	git-compat-util.h	FUNCTION_54
0x65	        0x4883ec10	                           sub rsp, 0x10	       784	git-compat-util.h	FUNCTION_54
0x69	        0x48897df8	                mov qword [rbp - 8], rdi	       784	git-compat-util.h	FUNCTION_54
0x6d	        0x488975f0	             mov qword [rbp - 0x10], rsi	       784	git-compat-util.h	FUNCTION_54
0x71	        0x488b45f8	                mov rax, qword [rbp - 8]	       785	git-compat-util.h	FUNCTION_54	IF_1	CALL_1
0x75	          0x48f7d0	                                 not rax	       785	git-compat-util.h	FUNCTION_54	IF_1	CALL_1
0x78	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       785	git-compat-util.h	FUNCTION_54	IF_1	CALL_1
0x7c	            0x731a	                           jae 0x40000d8	       785	git-compat-util.h	FUNCTION_54	IF_1	CALL_1
0x7e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x82	        0x488b45f8	                mov rax, qword [rbp - 8]	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x86	          0x4889c6	                            mov rsi, rax	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x89	      0xbf00000000	                              mov edi, 0	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x8e	      0xb800000000	                              mov eax, 0	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x93	      0xe800000000	                          call 0x40000d8	       786	git-compat-util.h	FUNCTION_54	IF_1	CALL_2
0x98	        0x488b55f8	                mov rdx, qword [rbp - 8]	       788	git-compat-util.h	FUNCTION_54
0x9c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       788	git-compat-util.h	FUNCTION_54
0xa0	          0x4801d0	                            add rax, rdx	       788	git-compat-util.h	FUNCTION_54
0xa3	              0xc9	                                   leave	       789	git-compat-util.h	FUNCTION_54
0xa4	              0xc3	                                     ret	       789	git-compat-util.h	FUNCTION_54
strbuf_addch	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,1:DO,0:ELSE,0	33
0x1c7	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_33
0x1c8	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_33
0x1cb	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_33
0x1cf	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_33
0x1d3	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_33
0x1d6	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_33	IF_1	CALL_1
0x1da	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_33	IF_1	CALL_1
0x1dd	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_33	IF_1	CALL_1
0x1e2	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_33	IF_1	CALL_1
0x1e5	            0x7511	                           jne 0x4000238	       227	strbuf.h	FUNCTION_33	IF_1	CALL_1
0x1e7	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_33	CALL_2
0x1eb	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_33	CALL_2
0x1f0	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_33	CALL_2
0x1f3	      0xe800000000	                          call 0x4000238	       228	strbuf.h	FUNCTION_33	CALL_2
0x1f8	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_33
0x1fc	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_33
0x200	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_33
0x204	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_33
0x208	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_33
0x20c	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_33
0x210	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_33
0x214	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_33
0x217	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_33
0x21a	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_33
0x21c	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_33
0x220	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_33
0x224	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_33
0x228	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_33
0x22c	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_33
0x22f	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_33
0x232	              0x90	                                     nop	       231	strbuf.h	FUNCTION_33
0x233	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_33
0x234	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_33
clean_get_color	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,1:IF,1:DO,0:ELSE,0	22
0x65f	              0x55	                                push rbp	       134	clean.c	FUNCTION_7
0x660	          0x4889e5	                            mov rbp, rsp	       134	clean.c	FUNCTION_7
0x663	        0x4883ec10	                           sub rsp, 0x10	       134	clean.c	FUNCTION_7
0x667	          0x897dfc	                mov dword [rbp - 4], edi	       134	clean.c	FUNCTION_7
0x66a	    0x8b0500000000	            mov eax, dword [0x040006b0] 	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x670	            0x89c6	                            mov esi, eax	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x672	      0xbf01000000	                              mov edi, 1	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x677	      0xe800000000	                          call 0x40006bc	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x67c	            0x85c0	                           test eax, eax	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x67e	            0x7420	                            je 0x40006e0	       135	clean.c	FUNCTION_7	IF_1	CALL_1
0x680	          0x8b55fc	                mov edx, dword [rbp - 4]	       136	clean.c	FUNCTION_7	IF_1
0x683	          0x4889d0	                            mov rax, rdx	       136	clean.c	FUNCTION_7	IF_1
0x686	        0x48c1e002	                              shl rax, 2	       136	clean.c	FUNCTION_7	IF_1
0x68a	          0x4801d0	                            add rax, rdx	       136	clean.c	FUNCTION_7	IF_1
0x68d	          0x4889c2	                            mov rdx, rax	       136	clean.c	FUNCTION_7	IF_1
0x690	        0x48c1e204	                              shl rdx, 4	       136	clean.c	FUNCTION_7	IF_1
0x694	          0x4829c2	                            sub rdx, rax	       136	clean.c	FUNCTION_7	IF_1
0x697	    0x488d82000000	                          lea rax, [rdx]	       136	clean.c	FUNCTION_7	IF_1
0x69e	            0xeb05	                           jmp 0x40006e5	       136	clean.c	FUNCTION_7	IF_1
0x6a0	      0xb800000000	                              mov eax, 0	       137	clean.c	FUNCTION_7
0x6a5	              0xc9	                                   leave	       138	clean.c	FUNCTION_7
0x6a6	              0xc3	                                     ret	       138	clean.c	FUNCTION_7
pretty_print_menus	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,0:DO,0:ELSE,0	29
0xefc	              0x55	                                push rbp	       287	clean.c	FUNCTION_12
0xefd	          0x4889e5	                            mov rbp, rsp	       287	clean.c	FUNCTION_12
0xf00	        0x4883ec40	                           sub rsp, 0x40	       287	clean.c	FUNCTION_12
0xf04	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       287	clean.c	FUNCTION_12
0xf08	    0x64488b042528	                mov rax, qword fs:[0x28]	       287	clean.c	FUNCTION_12
0xf11	        0x488945f8	                mov qword [rbp - 8], rax	       287	clean.c	FUNCTION_12
0xf15	            0x31c0	                            xor eax, eax	       287	clean.c	FUNCTION_12
0xf17	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       288	clean.c	FUNCTION_12
0xf1e	    0xc745dc110000	           mov dword [rbp - 0x24], 0x11 	       291	clean.c	FUNCTION_12
0xf25	        0x488d45e0	                   lea rax, [rbp - 0x20]	       292	clean.c	FUNCTION_12	CALL_1
0xf29	      0xba18000000	                           mov edx, 0x18	       292	clean.c	FUNCTION_12	CALL_1
0xf2e	      0xbe00000000	                              mov esi, 0	       292	clean.c	FUNCTION_12	CALL_1
0xf33	          0x4889c7	                            mov rdi, rax	       292	clean.c	FUNCTION_12	CALL_1
0xf36	      0xe800000000	                          call 0x4000f7b	       292	clean.c	FUNCTION_12	CALL_1
0xf3b	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       293	clean.c	FUNCTION_12
0xf43	    0xc745e4020000	               mov dword [rbp - 0x1c], 2	       294	clean.c	FUNCTION_12
0xf4a	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       295	clean.c	FUNCTION_12	CALL_2
0xf4e	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	       295	clean.c	FUNCTION_12	CALL_2
0xf51	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       295	clean.c	FUNCTION_12	CALL_2
0xf55	            0x89ce	                            mov esi, ecx	       295	clean.c	FUNCTION_12	CALL_2
0xf57	          0x4889c7	                            mov rdi, rax	       295	clean.c	FUNCTION_12	CALL_2
0xf5a	      0xe800000000	                          call 0x4000f9f	       295	clean.c	FUNCTION_12	CALL_2
0xf5f	              0x90	                                     nop	       296	clean.c	FUNCTION_12
0xf60	        0x488b45f8	                mov rax, qword [rbp - 8]	       296	clean.c	FUNCTION_12
0xf64	    0x644833042528	                xor rax, qword fs:[0x28]	       296	clean.c	FUNCTION_12
0xf6d	            0x7405	                            je 0x4000fb4	       296	clean.c	FUNCTION_12
0xf6f	      0xe800000000	                          call 0x4000fb4	       296	clean.c	FUNCTION_12
0xf74	              0xc9	                                   leave	       296	clean.c	FUNCTION_12
0xf75	              0xc3	                                     ret	       296	clean.c	FUNCTION_12
prompt_help_cmd	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,5:IF,0:DO,0:ELSE,0	21
0xf76	              0x55	                                push rbp	       299	clean.c	FUNCTION_13
0xf77	          0x4889e5	                            mov rbp, rsp	       299	clean.c	FUNCTION_13
0xf7a	        0x4883ec10	                           sub rsp, 0x10	       299	clean.c	FUNCTION_13
0xf7e	          0x897dfc	                mov dword [rbp - 4], edi	       299	clean.c	FUNCTION_13
0xf81	      0xbf04000000	                              mov edi, 4	       300	clean.c	FUNCTION_13	CALL_1
0xf86	      0xe81cf7ffff	              call sym.clean_print_color	       300	clean.c	FUNCTION_13	CALL_1
0xf8b	        0x837dfc00	                  cmp dword [rbp - 4], 0	       301	clean.c	FUNCTION_13	CALL_2
0xf8f	            0x740c	                            je 0x4000fdd	       301	clean.c	FUNCTION_13	CALL_2
0xf91	      0xbf00000000	                              mov edi, 0	       301	clean.c	FUNCTION_13	CALL_2
0xf96	      0xe853f3ffff	                               call sym.	       301	clean.c	FUNCTION_13	CALL_2
0xf9b	            0xeb0a	                           jmp 0x4000fe7	       301	clean.c	FUNCTION_13	CALL_2
0xf9d	      0xbf00000000	                              mov edi, 0	       301	clean.c	FUNCTION_13	CALL_2
0xfa2	      0xe847f3ffff	                               call sym.	       301	clean.c	FUNCTION_13	CALL_2
0xfa7	          0x4889c7	                            mov rdi, rax	       301	clean.c	FUNCTION_13	CALL_2
0xfaa	      0xb800000000	                              mov eax, 0	       301	clean.c	FUNCTION_13	CALL_2
0xfaf	      0xe800000000	                          call 0x4000ff4	       301	clean.c	FUNCTION_13	CALL_2
0xfb4	      0xbf00000000	                              mov edi, 0	       314	clean.c	FUNCTION_13	CALL_5
0xfb9	      0xe8e9f6ffff	              call sym.clean_print_color	       314	clean.c	FUNCTION_13	CALL_5
0xfbe	              0x90	                                     nop	       315	clean.c	FUNCTION_13
0xfbf	              0xc9	                                   leave	       315	clean.c	FUNCTION_13
0xfc0	              0xc3	                                     ret	       315	clean.c	FUNCTION_13
strbuf_avail	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,0:IF,0:DO,0:ELSE,0	18
0xf7	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_31
0xf8	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_31
0xfb	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_31
0xff	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_31
0x103	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_31
0x106	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_31
0x109	            0x741b	                            je 0x4000166	       141	strbuf.h	FUNCTION_31
0x10b	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_31
0x10f	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_31
0x112	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_31
0x116	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_31
0x11a	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_31
0x11d	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_31
0x120	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_31
0x124	            0xeb05	                           jmp 0x400016b	       141	strbuf.h	FUNCTION_31
0x126	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_31
0x12b	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_31
0x12c	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_31
correct_untracked_entries	functions,0:SWITCH,0:WHILE,2:FOR,1:CALL,5:IF,1:DO,0:ELSE,1	126
0x2364	              0x55	                                push rbp	       864	clean.c	FUNCTION_25
0x2365	          0x4889e5	                            mov rbp, rsp	       864	clean.c	FUNCTION_25
0x2368	        0x4883ec30	                           sub rsp, 0x30	       864	clean.c	FUNCTION_25
0x236c	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       864	clean.c	FUNCTION_25
0x2370	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       867	clean.c	FUNCTION_25	FOR_1
0x2377	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       867	clean.c	FUNCTION_25	FOR_1
0x237a	          0x8945f0	             mov dword [rbp - 0x10], eax	       867	clean.c	FUNCTION_25	FOR_1
0x237d	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       867	clean.c	FUNCTION_25	FOR_1
0x2380	          0x8945ec	             mov dword [rbp - 0x14], eax	       867	clean.c	FUNCTION_25	FOR_1
0x2383	      0xe961010000	                           jmp 0x4002529	       867	clean.c	FUNCTION_25	FOR_1
0x2388	        0x8345f401	                add dword [rbp - 0xc], 1	       871	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x238c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x2390	          0x8b4008	                mov eax, dword [rax + 8]	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x2393	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x2396	            0x7e39	                           jle 0x4002411	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x2398	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x239c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23a0	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23a3	          0x4863d2	                         movsxd rdx, edx	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23a6	        0x48c1e203	                              shl rdx, 3	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23aa	          0x4801c2	                            add rdx, rax	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23ad	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23b1	        0x488b4018	            mov rax, qword [rax + 0x18] 	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23b5	          0x8b4dec	             mov ecx, dword [rbp - 0x14]	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23b8	          0x4863c9	                         movsxd rcx, ecx	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23bb	        0x48c1e103	                              shl rcx, 3	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23bf	          0x4801c8	                            add rax, rcx	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23c2	          0x4889d6	                            mov rsi, rdx	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23c5	          0x4889c7	                            mov rdi, rax	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23c8	      0xe800000000	                          call 0x400240d	       870	clean.c	FUNCTION_25	FOR_1	WHILE_1	CALL_1
0x23cd	            0x85c0	                           test eax, eax	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x23cf	            0x79b7	                           jns 0x40023c8	       869	clean.c	FUNCTION_25	FOR_1	WHILE_1
0x23d1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x23d5	          0x8b4008	                mov eax, dword [rax + 8]	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x23d8	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x23db	            0x7e64	                           jle 0x4002481	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x23dd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23e1	        0x488b4020	            mov rax, qword [rax + 0x20] 	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23e5	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23e8	          0x4863d2	                         movsxd rdx, edx	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23eb	        0x48c1e203	                              shl rdx, 3	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23ef	          0x4801d0	                            add rax, rdx	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23f2	          0x488b10	                    mov rdx, qword [rax]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23f5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23f9	        0x488b4018	            mov rax, qword [rax + 0x18] 	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x23fd	          0x8b4dec	             mov ecx, dword [rbp - 0x14]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2400	          0x4863c9	                         movsxd rcx, ecx	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2403	        0x48c1e103	                              shl rcx, 3	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2407	          0x4801c8	                            add rax, rcx	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x240a	          0x488b00	                    mov rax, qword [rax]	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x240d	          0x4889d6	                            mov rsi, rdx	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2410	          0x4889c7	                            mov rdi, rax	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2413	      0xe800000000	                          call 0x4002458	       874	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_2
0x2418	            0x85c0	                           test eax, eax	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x241a	            0x7425	                            je 0x4002481	       873	clean.c	FUNCTION_25	FOR_1	IF_1
0x241c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2420	        0x488b4018	            mov rax, qword [rax + 0x18] 	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2424	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2427	          0x4863d2	                         movsxd rdx, edx	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x242a	        0x48c1e203	                              shl rdx, 3	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x242e	          0x4801d0	                            add rax, rdx	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2431	          0x488b00	                    mov rax, qword [rax]	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2434	          0x4889c7	                            mov rdi, rax	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2437	      0xe800000000	                          call 0x400247c	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x243c	      0xe9a4000000	                           jmp 0x4002525	       876	clean.c	FUNCTION_25	FOR_1	IF_1	CALL_3
0x2441	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2445	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2449	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x244c	          0x8d5001	                      lea edx, [rax + 1]	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x244f	          0x8955ec	             mov dword [rbp - 0x14], edx	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2452	            0x4898	                                    cdqe	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2454	        0x48c1e003	                              shl rax, 3	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2458	          0x4801c8	                            add rax, rcx	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x245b	          0x488b00	                    mov rax, qword [rax]	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x245e	        0x488945f8	                mov qword [rbp - 8], rax	       878	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2462	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2466	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x246a	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x246d	          0x8d5001	                      lea edx, [rax + 1]	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2470	          0x8955f0	             mov dword [rbp - 0x10], edx	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2473	            0x4898	                                    cdqe	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2475	        0x48c1e003	                              shl rax, 3	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2479	        0x488d1401	                    lea rdx, [rcx + rax]	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x247d	        0x488b45f8	                mov rax, qword [rbp - 8]	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2481	          0x488902	                    mov qword [rdx], rax	       881	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x2484	            0xeb25	                           jmp 0x40024eb	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x2486	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x248a	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x248e	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x2491	          0x8d5001	                      lea edx, [rax + 1]	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x2494	          0x8955ec	             mov dword [rbp - 0x14], edx	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x2497	            0x4898	                                    cdqe	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x2499	        0x48c1e003	                              shl rax, 3	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x249d	          0x4801c8	                            add rax, rcx	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x24a0	          0x488b00	                    mov rax, qword [rax]	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x24a3	          0x4889c7	                            mov rdi, rax	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x24a6	      0xe800000000	                          call 0x40024eb	       886	clean.c	FUNCTION_25	FOR_1	ELSE_1	CALL_5
0x24ab	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24af	            0x8b00	                    mov eax, dword [rax]	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24b1	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24b4	            0x7e2b	                           jle 0x4002521	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24b6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24ba	        0x488b4018	            mov rax, qword [rax + 0x18] 	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24be	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24c1	          0x4863d2	                         movsxd rdx, edx	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24c4	        0x48c1e203	                              shl rdx, 3	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24c8	          0x4801d0	                            add rax, rdx	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24cb	          0x488b10	                    mov rdx, qword [rax]	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24ce	        0x488b45f8	                mov rax, qword [rbp - 8]	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24d2	          0x4889d6	                            mov rsi, rdx	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24d5	          0x4889c7	                            mov rdi, rax	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24d8	      0xe800000000	                          call 0x400251d	       885	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2	CALL_4
0x24dd	            0x85c0	                           test eax, eax	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24df	            0x75a5	                           jne 0x40024c6	       884	clean.c	FUNCTION_25	FOR_1	ELSE_1	WHILE_2
0x24e1	        0x836dec01	               sub dword [rbp - 0x14], 1	       889	clean.c	FUNCTION_25	FOR_1	ELSE_1
0x24e5	        0x8345ec01	               add dword [rbp - 0x14], 1	       867	clean.c	FUNCTION_25	FOR_1
0x24e9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       867	clean.c	FUNCTION_25	FOR_1
0x24ed	            0x8b00	                    mov eax, dword [rax]	       867	clean.c	FUNCTION_25	FOR_1
0x24ef	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	       867	clean.c	FUNCTION_25	FOR_1
0x24f2	     0xf8f94feffff	                            jg 0x40023cc	       867	clean.c	FUNCTION_25	FOR_1
0x24f8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       892	clean.c	FUNCTION_25
0x24fc	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       892	clean.c	FUNCTION_25
0x24ff	            0x8910	                    mov dword [rax], edx	       892	clean.c	FUNCTION_25
0x2501	              0x90	                                     nop	       893	clean.c	FUNCTION_25
0x2502	              0xc9	                                   leave	       893	clean.c	FUNCTION_25
0x2503	              0xc3	                                     ret	       893	clean.c	FUNCTION_25
parse_clean_color_slot	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,6:IF,6:DO,0:ELSE,0	55
0x421	              0x55	                                push rbp	        86	clean.c	FUNCTION_5
0x422	          0x4889e5	                            mov rbp, rsp	        86	clean.c	FUNCTION_5
0x425	        0x4883ec10	                           sub rsp, 0x10	        86	clean.c	FUNCTION_5
0x429	        0x48897df8	                mov qword [rbp - 8], rdi	        86	clean.c	FUNCTION_5
0x42d	        0x488b45f8	                mov rax, qword [rbp - 8]	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x431	      0xbe00000000	                              mov esi, 0	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x436	          0x4889c7	                            mov rdi, rax	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x439	      0xe800000000	                          call 0x400047e	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x43e	            0x85c0	                           test eax, eax	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x440	            0x750a	                           jne 0x400048c	        87	clean.c	FUNCTION_5	IF_1	CALL_1
0x442	      0xb800000000	                              mov eax, 0	        88	clean.c	FUNCTION_5	IF_1
0x447	      0xe991000000	                           jmp 0x400051d	        88	clean.c	FUNCTION_5	IF_1
0x44c	        0x488b45f8	                mov rax, qword [rbp - 8]	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x450	      0xbe00000000	                              mov esi, 0	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x455	          0x4889c7	                            mov rdi, rax	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x458	      0xe800000000	                          call 0x400049d	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x45d	            0x85c0	                           test eax, eax	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x45f	            0x7507	                           jne 0x40004a8	        89	clean.c	FUNCTION_5	IF_2	CALL_2
0x461	      0xb801000000	                              mov eax, 1	        90	clean.c	FUNCTION_5	IF_2
0x466	            0xeb75	                           jmp 0x400051d	        90	clean.c	FUNCTION_5	IF_2
0x468	        0x488b45f8	                mov rax, qword [rbp - 8]	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x46c	      0xbe00000000	                              mov esi, 0	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x471	          0x4889c7	                            mov rdi, rax	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x474	      0xe800000000	                          call 0x40004b9	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x479	            0x85c0	                           test eax, eax	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x47b	            0x7507	                           jne 0x40004c4	        91	clean.c	FUNCTION_5	IF_3	CALL_3
0x47d	      0xb802000000	                              mov eax, 2	        92	clean.c	FUNCTION_5	IF_3
0x482	            0xeb59	                           jmp 0x400051d	        92	clean.c	FUNCTION_5	IF_3
0x484	        0x488b45f8	                mov rax, qword [rbp - 8]	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x488	      0xbe00000000	                              mov esi, 0	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x48d	          0x4889c7	                            mov rdi, rax	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x490	      0xe800000000	                          call 0x40004d5	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x495	            0x85c0	                           test eax, eax	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x497	            0x7507	                           jne 0x40004e0	        93	clean.c	FUNCTION_5	IF_4	CALL_4
0x499	      0xb803000000	                              mov eax, 3	        94	clean.c	FUNCTION_5	IF_4
0x49e	            0xeb3d	                           jmp 0x400051d	        94	clean.c	FUNCTION_5	IF_4
0x4a0	        0x488b45f8	                mov rax, qword [rbp - 8]	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4a4	      0xbe00000000	                              mov esi, 0	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4a9	          0x4889c7	                            mov rdi, rax	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4ac	      0xe800000000	                          call 0x40004f1	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4b1	            0x85c0	                           test eax, eax	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4b3	            0x7507	                           jne 0x40004fc	        95	clean.c	FUNCTION_5	IF_5	CALL_5
0x4b5	      0xb804000000	                              mov eax, 4	        96	clean.c	FUNCTION_5	IF_5
0x4ba	            0xeb21	                           jmp 0x400051d	        96	clean.c	FUNCTION_5	IF_5
0x4bc	        0x488b45f8	                mov rax, qword [rbp - 8]	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4c0	      0xbe00000000	                              mov esi, 0	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4c5	          0x4889c7	                            mov rdi, rax	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4c8	      0xe800000000	                          call 0x400050d	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4cd	            0x85c0	                           test eax, eax	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4cf	            0x7507	                           jne 0x4000518	        97	clean.c	FUNCTION_5	IF_6	CALL_6
0x4d1	      0xb805000000	                              mov eax, 5	        98	clean.c	FUNCTION_5	IF_6
0x4d6	            0xeb05	                           jmp 0x400051d	        98	clean.c	FUNCTION_5	IF_6
0x4d8	      0xb8ffffffff	                     mov eax, 0xffffffff	        99	clean.c	FUNCTION_5
0x4dd	              0xc9	                                   leave	       100	clean.c	FUNCTION_5
0x4de	              0xc3	                                     ret	       100	clean.c	FUNCTION_5
Q_	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,1:DO,0:ELSE,0	14
0x31a	              0x55	                                push rbp	        59	gettext.h	FUNCTION_4
0x31b	          0x4889e5	                            mov rbp, rsp	        59	gettext.h	FUNCTION_4
0x31e	        0x4883ec20	                           sub rsp, 0x20	        59	gettext.h	FUNCTION_4
0x322	        0x48897df8	                mov qword [rbp - 8], rdi	        59	gettext.h	FUNCTION_4
0x326	        0x488975f0	             mov qword [rbp - 0x10], rsi	        59	gettext.h	FUNCTION_4
0x32a	        0x488955e8	             mov qword [rbp - 0x18], rdx	        59	gettext.h	FUNCTION_4
0x32e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        62	gettext.h	FUNCTION_4	CALL_2
0x332	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        62	gettext.h	FUNCTION_4	CALL_2
0x336	        0x488b45f8	                mov rax, qword [rbp - 8]	        62	gettext.h	FUNCTION_4	CALL_2
0x33a	          0x4889ce	                            mov rsi, rcx	        62	gettext.h	FUNCTION_4	CALL_2
0x33d	          0x4889c7	                            mov rdi, rax	        62	gettext.h	FUNCTION_4	CALL_2
0x340	      0xe800000000	                          call 0x4000385	        62	gettext.h	FUNCTION_4	CALL_2
0x345	              0xc9	                                   leave	        63	gettext.h	FUNCTION_4
0x346	              0xc3	                                     ret	        63	gettext.h	FUNCTION_4
remove_dirs	functions,0:SWITCH,0:WHILE,1:FOR,1:CALL,37:IF,13:DO,0:ELSE,5	342
0x70a	              0x55	                                push rbp	       154	clean.c	FUNCTION_10
0x70b	          0x4889e5	                            mov rbp, rsp	       154	clean.c	FUNCTION_10
0x70e	              0x53	                                push rbx	       154	clean.c	FUNCTION_10
0x70f	    0x4881ec580100	                          sub rsp, 0x158	       154	clean.c	FUNCTION_10
0x716	    0x4889bdc8feff	            mov qword [rbp - 0x138], rdi	       154	clean.c	FUNCTION_10
0x71d	    0x4889b5c0feff	            mov qword [rbp - 0x140], rsi	       154	clean.c	FUNCTION_10
0x724	    0x8995bcfeffff	            mov dword [rbp - 0x144], edx	       154	clean.c	FUNCTION_10
0x72a	    0x898db8feffff	            mov dword [rbp - 0x148], ecx	       154	clean.c	FUNCTION_10
0x730	    0x448985b4feff	            mov dword [rbp - 0x14c], r8d	       154	clean.c	FUNCTION_10
0x737	    0x4c898da8feff	             mov qword [rbp - 0x158], r9	       154	clean.c	FUNCTION_10
0x73e	    0x64488b042528	                mov rax, qword fs:[0x28]	       154	clean.c	FUNCTION_10
0x747	        0x488945e8	             mov qword [rbp - 0x18], rax	       154	clean.c	FUNCTION_10
0x74b	            0x31c0	                            xor eax, eax	       154	clean.c	FUNCTION_10
0x74d	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       156	clean.c	FUNCTION_10
0x758	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	       156	clean.c	FUNCTION_10
0x763	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       156	clean.c	FUNCTION_10
0x76e	    0xc785e8feffff	              mov dword [rbp - 0x118], 0	       158	clean.c	FUNCTION_10
0x778	    0xc785e0feffff	              mov dword [rbp - 0x120], 0	       158	clean.c	FUNCTION_10
0x782	    0xc785dcfeffff	              mov dword [rbp - 0x124], 1	       158	clean.c	FUNCTION_10
0x78c	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       158	clean.c	FUNCTION_10
0x793	        0x488b4008	                mov rax, qword [rax + 8]	       158	clean.c	FUNCTION_10
0x797	    0x8985ecfeffff	            mov dword [rbp - 0x114], eax	       158	clean.c	FUNCTION_10
0x79d	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	       159	clean.c	FUNCTION_10
0x7a8	    0xc78538ffffff	               mov dword [rbp - 0xc8], 0	       159	clean.c	FUNCTION_10
0x7b2	    0xc7853cffffff	               mov dword [rbp - 0xc4], 0	       159	clean.c	FUNCTION_10
0x7bc	     0xfb68540ffff	            movzx eax, byte [rbp - 0xc0]	       159	clean.c	FUNCTION_10
0x7c3	          0x83c801	                               or eax, 1	       159	clean.c	FUNCTION_10
0x7c6	    0x888540ffffff	               mov byte [rbp - 0xc0], al	       159	clean.c	FUNCTION_10
0x7cc	    0x48c78548ffff	               mov qword [rbp - 0xb8], 0	       159	clean.c	FUNCTION_10
0x7d7	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       161	clean.c	FUNCTION_10
0x7de	    0xc70001000000	                      mov dword [rax], 1	       161	clean.c	FUNCTION_10
0x7e4	    0x8b85bcfeffff	            mov eax, dword [rbp - 0x144]	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7ea	          0x83e002	                              and eax, 2	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7ed	            0x85c0	                           test eax, eax	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7ef	     0xf8492000000	                            je 0x40008c7	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7f5	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7fc	          0x4889c7	                            mov rdi, rax	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x7ff	      0xe800000000	                          call 0x4000844	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x804	            0x85c0	                           test eax, eax	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x806	            0x747f	                            je 0x40008c7	       163	clean.c	FUNCTION_10	IF_1	CALL_1
0x808	    0x83bdb4feffff	              cmp dword [rbp - 0x14c], 0	       164	clean.c	FUNCTION_10	IF_1	IF_2
0x80f	            0x7564	                           jne 0x40008b5	       164	clean.c	FUNCTION_10	IF_1	IF_2
0x811	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x818	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x81c	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x823	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x82a	          0x4889ce	                            mov rsi, rcx	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x82d	          0x4889c7	                            mov rdi, rax	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x830	      0xe800000000	                          call 0x4000875	       165	clean.c	FUNCTION_10	IF_1	IF_2	CALL_2
0x835	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x83c	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x843	            0x7411	                            je 0x4000896	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x845	    0x488b05000000	            mov rax, qword [0x0400088c] 	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x84c	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x84f	      0xe89afaffff	                               call sym.	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x854	            0xeb0f	                           jmp 0x40008a5	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x856	    0x488b05000000	            mov rax, qword [0x0400089d] 	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x85d	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x860	      0xe889faffff	                               call sym.	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x865	          0x4889de	                            mov rsi, rbx	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x868	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x86b	      0xb800000000	                              mov eax, 0	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x870	      0xe800000000	                          call 0x40008b5	       166	clean.c	FUNCTION_10	IF_1	IF_2	CALL_5
0x875	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       170	clean.c	FUNCTION_10	IF_1
0x87c	    0xc70000000000	                      mov dword [rax], 0	       170	clean.c	FUNCTION_10	IF_1
0x882	      0xe9f0040000	                           jmp 0x4000db7	       171	clean.c	FUNCTION_10	IF_1
0x887	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       174	clean.c	FUNCTION_10	CALL_6
0x88e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       174	clean.c	FUNCTION_10	CALL_6
0x892	          0x4889c7	                            mov rdi, rax	       174	clean.c	FUNCTION_10	CALL_6
0x895	      0xe800000000	                          call 0x40008da	       174	clean.c	FUNCTION_10	CALL_6
0x89a	    0x48898500ffff	            mov qword [rbp - 0x100], rax	       174	clean.c	FUNCTION_10	CALL_6
0x8a1	    0x4883bd00ffff	              cmp qword [rbp - 0x100], 0	       175	clean.c	FUNCTION_10	IF_3
0x8a9	     0xf85b7000000	                           jne 0x40009a6	       175	clean.c	FUNCTION_10	IF_3
0x8af	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8b6	            0x7515	                           jne 0x400090d	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8b8	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8bf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8c3	          0x4889c7	                            mov rdi, rax	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8c6	      0xe800000000	                          call 0x400090b	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8cb	            0xeb05	                           jmp 0x4000912	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8cd	      0xb800000000	                              mov eax, 0	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8d2	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       177	clean.c	FUNCTION_10	IF_3	CALL_7
0x8d8	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       178	clean.c	FUNCTION_10	IF_3	IF_4
0x8df	            0x7474	                            je 0x4000995	       178	clean.c	FUNCTION_10	IF_3	IF_4
0x8e1	      0xe800000000	                          call 0x4000926	       179	clean.c	FUNCTION_10	IF_3	IF_4
0x8e6	            0x8b00	                    mov eax, dword [rax]	       179	clean.c	FUNCTION_10	IF_3	IF_4
0x8e8	    0x8985f0feffff	            mov dword [rbp - 0x110], eax	       179	clean.c	FUNCTION_10	IF_3	IF_4
0x8ee	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x8f5	        0x488b4010	            mov rax, qword [rax + 0x10] 	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x8f9	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x900	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x907	          0x4889ce	                            mov rsi, rcx	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x90a	          0x4889c7	                            mov rdi, rax	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x90d	      0xe800000000	                          call 0x4000952	       180	clean.c	FUNCTION_10	IF_3	IF_4	CALL_8
0x912	      0xe800000000	                          call 0x4000957	       181	clean.c	FUNCTION_10	IF_3	IF_4
0x917	          0x4889c2	                            mov rdx, rax	       181	clean.c	FUNCTION_10	IF_3	IF_4
0x91a	    0x8b85f0feffff	            mov eax, dword [rbp - 0x110]	       181	clean.c	FUNCTION_10	IF_3	IF_4
0x920	            0x8902	                    mov dword [rdx], eax	       181	clean.c	FUNCTION_10	IF_3	IF_4
0x922	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x929	    0x488b05000000	            mov rax, qword [0x04000970] 	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x930	          0x4889c7	                            mov rdi, rax	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x933	      0xe8b6f9ffff	                               call sym.	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x938	          0x4889de	                            mov rsi, rbx	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x93b	          0x4889c7	                            mov rdi, rax	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x93e	      0xb800000000	                              mov eax, 0	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x943	      0xe800000000	                          call 0x4000988	       182	clean.c	FUNCTION_10	IF_3	IF_4	CALL_10
0x948	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       183	clean.c	FUNCTION_10	IF_3	IF_4
0x94f	    0xc70000000000	                      mov dword [rax], 0	       183	clean.c	FUNCTION_10	IF_3	IF_4
0x955	    0x8b85e8feffff	            mov eax, dword [rbp - 0x118]	       185	clean.c	FUNCTION_10	IF_3
0x95b	    0x8985e0feffff	            mov dword [rbp - 0x120], eax	       185	clean.c	FUNCTION_10	IF_3
0x961	      0xe911040000	                           jmp 0x4000db7	       186	clean.c	FUNCTION_10	IF_3
0x966	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       189	clean.c	FUNCTION_10	CALL_11
0x96d	      0xbe2f000000	                           mov esi, 0x2f	       189	clean.c	FUNCTION_10	CALL_11
0x972	          0x4889c7	                            mov rdi, rax	       189	clean.c	FUNCTION_10	CALL_11
0x975	      0xe822f9ffff	                call sym.strbuf_complete	       189	clean.c	FUNCTION_10	CALL_11
0x97a	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       191	clean.c	FUNCTION_10
0x981	        0x488b4008	                mov rax, qword [rax + 8]	       191	clean.c	FUNCTION_10
0x985	    0x8985f4feffff	            mov dword [rbp - 0x10c], eax	       191	clean.c	FUNCTION_10
0x98b	      0xe93d020000	                           jmp 0x4000c0d	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0x990	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x997	        0x4883c013	                           add rax, 0x13	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x99b	          0x4889c7	                            mov rdi, rax	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x99e	      0xe8a4f9ffff	               call sym.is_dot_or_dotdot	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x9a3	            0x85c0	                           test eax, eax	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x9a5	     0xf8521020000	                           jne 0x4000c0c	       194	clean.c	FUNCTION_10	WHILE_1	IF_5	CALL_13
0x9ab	    0x8b85f4feffff	            mov eax, dword [rbp - 0x10c]	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9b1	          0x4863d0	                         movsxd rdx, eax	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9b4	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9bb	          0x4889d6	                            mov rsi, rdx	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9be	          0x4889c7	                            mov rdi, rax	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9c1	      0xe867f7ffff	                  call sym.strbuf_setlen	       197	clean.c	FUNCTION_10	WHILE_1	CALL_14
0x9c6	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9cd	        0x488d5013	                   lea rdx, [rax + 0x13]	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9d1	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9d8	          0x4889d6	                            mov rsi, rdx	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9db	          0x4889c7	                            mov rdi, rax	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9de	      0xe852f8ffff	                  call sym.strbuf_addstr	       198	clean.c	FUNCTION_10	WHILE_1	CALL_15
0x9e3	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0x9ea	        0x488b4010	            mov rax, qword [rax + 0x10] 	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0x9ee	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0x9f5	          0x4889d6	                            mov rsi, rdx	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0x9f8	          0x4889c7	                            mov rdi, rax	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0x9fb	      0xe800000000	                          call 0x4000a40	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0xa00	            0x85c0	                           test eax, eax	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0xa02	     0xf85ab010000	                           jne 0x4000bf3	       199	clean.c	FUNCTION_10	WHILE_1	IF_6	CALL_16
0xa08	    0x8b8568ffffff	             mov eax, dword [rbp - 0x98]	       201	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	CALL_17
0xa0e	      0x2500f00000	                         and eax, 0xf000	       201	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	CALL_17
0xa13	      0x3d00400000	                         cmp eax, 0x4000	       201	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	CALL_17
0xa18	     0xf85a1000000	                           jne 0x4000aff	       201	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	CALL_17
0xa1e	    0x4c8d85dcfeff	                   lea r8, [rbp - 0x124]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa25	    0x8bbdb4feffff	            mov edi, dword [rbp - 0x14c]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa2b	    0x8b8db8feffff	            mov ecx, dword [rbp - 0x148]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa31	    0x8b95bcfeffff	            mov edx, dword [rbp - 0x144]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa37	    0x488bb5c0feff	            mov rsi, qword [rbp - 0x140]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa3e	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa45	          0x4d89c1	                              mov r9, r8	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa48	          0x4189f8	                            mov r8d, edi	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa4b	          0x4889c7	                            mov rdi, rax	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa4e	      0xe8b7fcffff	                    call sym.remove_dirs	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa53	            0x85c0	                           test eax, eax	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa55	            0x740a	                            je 0x4000aa1	       202	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8	CALL_18
0xa57	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       203	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_8
0xa61	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       204	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9
0xa67	            0x85c0	                           test eax, eax	       204	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9
0xa69	            0x7442	                            je 0x4000aed	       204	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9
0xa6b	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa72	        0x488b4010	            mov rax, qword [rax + 0x10] 	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa76	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa7d	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa84	          0x4889ce	                            mov rsi, rcx	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa87	          0x4889c7	                            mov rdi, rax	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa8a	      0xe800000000	                          call 0x4000acf	       205	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0xa8f	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	       206	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_20
0xa96	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       206	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_20
0xa9d	          0x4889d6	                            mov rsi, rdx	       206	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_20
0xaa0	          0x4889c7	                            mov rdi, rax	       206	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_20
0xaa3	      0xe800000000	                          call 0x4000ae8	       206	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	IF_9	CALL_20
0xaa8	      0xe920010000	                           jmp 0x4000c0d	       209	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7
0xaad	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       208	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	ELSE_2
0xab4	    0xc70000000000	                      mov dword [rax], 0	       208	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7	ELSE_2
0xaba	      0xe90e010000	                           jmp 0x4000c0d	       209	clean.c	FUNCTION_10	WHILE_1	ELSE_1	IF_7
0xabf	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xac6	            0x7515	                           jne 0x4000b1d	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xac8	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xacf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xad3	          0x4889c7	                            mov rdi, rax	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xad6	      0xe800000000	                          call 0x4000b1b	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xadb	            0xeb05	                           jmp 0x4000b22	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xadd	      0xb800000000	                              mov eax, 0	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xae2	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       211	clean.c	FUNCTION_10	WHILE_1	ELSE_3	CALL_21
0xae8	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       212	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10
0xaef	            0x7542	                           jne 0x4000b73	       212	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10
0xaf1	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xaf8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xafc	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xb03	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xb0a	          0x4889ce	                            mov rsi, rcx	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xb0d	          0x4889c7	                            mov rdi, rax	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xb10	      0xe800000000	                          call 0x4000b55	       213	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_22
0xb15	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	       214	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_23
0xb1c	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       214	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_23
0xb23	          0x4889d6	                            mov rsi, rdx	       214	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_23
0xb26	          0x4889c7	                            mov rdi, rax	       214	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_23
0xb29	      0xe800000000	                          call 0x4000b6e	       214	clean.c	FUNCTION_10	WHILE_1	ELSE_3	IF_10	CALL_23
0xb2e	      0xe99a000000	                           jmp 0x4000c0d	       223	clean.c	FUNCTION_10	WHILE_1	ELSE_3
0xb33	      0xe800000000	                          call 0x4000b78	       216	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb38	            0x8b00	                    mov eax, dword [rax]	       216	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb3a	    0x8985f8feffff	            mov dword [rbp - 0x108], eax	       216	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb40	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb47	        0x488b4010	            mov rax, qword [rax + 0x10] 	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb4b	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb52	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb59	          0x4889ce	                            mov rsi, rcx	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb5c	          0x4889c7	                            mov rdi, rax	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb5f	      0xe800000000	                          call 0x4000ba4	       217	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_24
0xb64	      0xe800000000	                          call 0x4000ba9	       218	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb69	          0x4889c2	                            mov rdx, rax	       218	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb6c	    0x8b85f8feffff	            mov eax, dword [rbp - 0x108]	       218	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb72	            0x8902	                    mov dword [rdx], eax	       218	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xb74	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb7b	    0x488b05000000	            mov rax, qword [0x04000bc2] 	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb82	          0x4889c7	                            mov rdi, rax	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb85	      0xe864f7ffff	                               call sym.	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb8a	          0x4889de	                            mov rsi, rbx	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb8d	          0x4889c7	                            mov rdi, rax	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb90	      0xb800000000	                              mov eax, 0	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb95	      0xe800000000	                          call 0x4000bda	       219	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4	CALL_26
0xb9a	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       220	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xba1	    0xc70000000000	                      mov dword [rax], 0	       220	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xba7	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       221	clean.c	FUNCTION_10	WHILE_1	ELSE_3	ELSE_4
0xbb1	            0xeb1a	                           jmp 0x4000c0d	       223	clean.c	FUNCTION_10	WHILE_1	ELSE_3
0xbb3	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       227	clean.c	FUNCTION_10	WHILE_1
0xbba	    0xc70000000000	                      mov dword [rax], 0	       227	clean.c	FUNCTION_10	WHILE_1
0xbc0	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       228	clean.c	FUNCTION_10	WHILE_1
0xbca	            0xeb25	                           jmp 0x4000c31	       228	clean.c	FUNCTION_10	WHILE_1
0xbcc	              0x90	                                     nop	       195	clean.c	FUNCTION_10	WHILE_1	IF_5
0xbcd	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbd4	          0x4889c7	                            mov rdi, rax	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbd7	      0xe800000000	                          call 0x4000c1c	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbdc	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbe3	    0x4883bd08ffff	               cmp qword [rbp - 0xf8], 0	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbeb	     0xf859ffdffff	                           jne 0x40009d0	       192	clean.c	FUNCTION_10	WHILE_1	CALL_12
0xbf1	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       231	clean.c	FUNCTION_10	CALL_27
0xbf8	          0x4889c7	                            mov rdi, rax	       231	clean.c	FUNCTION_10	CALL_27
0xbfb	      0xe800000000	                          call 0x4000c40	       231	clean.c	FUNCTION_10	CALL_27
0xc00	    0x8b85ecfeffff	            mov eax, dword [rbp - 0x114]	       233	clean.c	FUNCTION_10	CALL_28
0xc06	          0x4863d0	                         movsxd rdx, eax	       233	clean.c	FUNCTION_10	CALL_28
0xc09	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       233	clean.c	FUNCTION_10	CALL_28
0xc10	          0x4889d6	                            mov rsi, rdx	       233	clean.c	FUNCTION_10	CALL_28
0xc13	          0x4889c7	                            mov rdi, rax	       233	clean.c	FUNCTION_10	CALL_28
0xc16	      0xe812f5ffff	                  call sym.strbuf_setlen	       233	clean.c	FUNCTION_10	CALL_28
0xc1b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       235	clean.c	FUNCTION_10	IF_11
0xc22	            0x8b00	                    mov eax, dword [rax]	       235	clean.c	FUNCTION_10	IF_11
0xc24	            0x85c0	                           test eax, eax	       235	clean.c	FUNCTION_10	IF_11
0xc26	     0xf84bf000000	                            je 0x4000d2b	       235	clean.c	FUNCTION_10	IF_11
0xc2c	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc33	            0x7515	                           jne 0x4000c8a	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc35	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc3c	        0x488b4010	            mov rax, qword [rax + 0x10] 	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc40	          0x4889c7	                            mov rdi, rax	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc43	      0xe800000000	                          call 0x4000c88	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc48	            0xeb05	                           jmp 0x4000c8f	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc4a	      0xb800000000	                              mov eax, 0	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc4f	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       236	clean.c	FUNCTION_10	IF_11	CALL_29
0xc55	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       237	clean.c	FUNCTION_10	IF_11	IF_12
0xc5c	            0x750f	                           jne 0x4000cad	       237	clean.c	FUNCTION_10	IF_11	IF_12
0xc5e	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       238	clean.c	FUNCTION_10	IF_11	IF_12
0xc65	    0xc70001000000	                      mov dword [rax], 1	       238	clean.c	FUNCTION_10	IF_11	IF_12
0xc6b	            0xeb7e	                           jmp 0x4000d2b	       238	clean.c	FUNCTION_10	IF_11	IF_12
0xc6d	      0xe800000000	                          call 0x4000cb2	       240	clean.c	FUNCTION_10	IF_11	ELSE_5
0xc72	            0x8b00	                    mov eax, dword [rax]	       240	clean.c	FUNCTION_10	IF_11	ELSE_5
0xc74	    0x8985fcfeffff	            mov dword [rbp - 0x104], eax	       240	clean.c	FUNCTION_10	IF_11	ELSE_5
0xc7a	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc81	        0x488b4010	            mov rax, qword [rax + 0x10] 	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc85	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc8c	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc93	          0x4889ce	                            mov rsi, rcx	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc96	          0x4889c7	                            mov rdi, rax	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc99	      0xe800000000	                          call 0x4000cde	       241	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_30
0xc9e	      0xe800000000	                          call 0x4000ce3	       242	clean.c	FUNCTION_10	IF_11	ELSE_5
0xca3	          0x4889c2	                            mov rdx, rax	       242	clean.c	FUNCTION_10	IF_11	ELSE_5
0xca6	    0x8b85fcfeffff	            mov eax, dword [rbp - 0x104]	       242	clean.c	FUNCTION_10	IF_11	ELSE_5
0xcac	            0x8902	                    mov dword [rdx], eax	       242	clean.c	FUNCTION_10	IF_11	ELSE_5
0xcae	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcb5	    0x488b05000000	            mov rax, qword [0x04000cfc] 	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcbc	          0x4889c7	                            mov rdi, rax	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcbf	      0xe82af6ffff	                               call sym.	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcc4	          0x4889de	                            mov rsi, rbx	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcc7	          0x4889c7	                            mov rdi, rax	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcca	      0xb800000000	                              mov eax, 0	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xccf	      0xe800000000	                          call 0x4000d14	       243	clean.c	FUNCTION_10	IF_11	ELSE_5	CALL_32
0xcd4	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       244	clean.c	FUNCTION_10	IF_11	ELSE_5
0xcdb	    0xc70000000000	                      mov dword [rax], 0	       244	clean.c	FUNCTION_10	IF_11	ELSE_5
0xce1	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       245	clean.c	FUNCTION_10	IF_11	ELSE_5
0xceb	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       249	clean.c	FUNCTION_10	IF_13
0xcf2	            0x8b00	                    mov eax, dword [rax]	       249	clean.c	FUNCTION_10	IF_13
0xcf4	            0x85c0	                           test eax, eax	       249	clean.c	FUNCTION_10	IF_13
0xcf6	            0x757f	                           jne 0x4000db7	       249	clean.c	FUNCTION_10	IF_13
0xcf8	    0x83bdb4feffff	              cmp dword [rbp - 0x14c], 0	       249	clean.c	FUNCTION_10	IF_13
0xcff	            0x7576	                           jne 0x4000db7	       249	clean.c	FUNCTION_10	IF_13
0xd01	    0xc785e4feffff	              mov dword [rbp - 0x11c], 0	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd0b	            0xeb5a	                           jmp 0x4000da7	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd0d	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd14	    0x8b95e4feffff	            mov edx, dword [rbp - 0x11c]	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd1a	          0x4863d2	                         movsxd rdx, edx	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd1d	        0x48c1e204	                              shl rdx, 4	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd21	          0x4801d0	                            add rax, rdx	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd24	          0x488b18	                    mov rbx, qword [rax]	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd27	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd2e	            0x7411	                            je 0x4000d81	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd30	    0x488b05000000	            mov rax, qword [0x04000d77] 	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd37	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd3a	      0xe8aff5ffff	                               call sym.	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd3f	            0xeb0f	                           jmp 0x4000d90	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd41	    0x488b05000000	            mov rax, qword [0x04000d88] 	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd48	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd4b	      0xe89ef5ffff	                               call sym.	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd50	          0x4889de	                            mov rsi, rbx	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd53	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd56	      0xb800000000	                              mov eax, 0	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd5b	      0xe800000000	                          call 0x4000da0	       252	clean.c	FUNCTION_10	IF_13	CALL_35
0xd60	    0x8385e4feffff	              add dword [rbp - 0x11c], 1	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd67	    0x8b9538ffffff	             mov edx, dword [rbp - 0xc8]	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd6d	    0x8b85e4feffff	            mov eax, dword [rbp - 0x11c]	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd73	            0x39c2	                            cmp edx, eax	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd75	            0x7796	                            ja 0x4000d4d	       251	clean.c	FUNCTION_10	IF_13	FOR_1
0xd77	    0x488d8510ffff	                   lea rax, [rbp - 0xf0]	       255	clean.c	FUNCTION_10	CALL_36
0xd7e	          0x4889c7	                            mov rdi, rax	       255	clean.c	FUNCTION_10	CALL_36
0xd81	      0xe800000000	                          call 0x4000dc6	       255	clean.c	FUNCTION_10	CALL_36
0xd86	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       256	clean.c	FUNCTION_10	CALL_37
0xd8d	      0xbe00000000	                              mov esi, 0	       256	clean.c	FUNCTION_10	CALL_37
0xd92	          0x4889c7	                            mov rdi, rax	       256	clean.c	FUNCTION_10	CALL_37
0xd95	      0xe800000000	                          call 0x4000dda	       256	clean.c	FUNCTION_10	CALL_37
0xd9a	    0x8b85e0feffff	            mov eax, dword [rbp - 0x120]	       257	clean.c	FUNCTION_10
0xda0	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       258	clean.c	FUNCTION_10
0xda4	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       258	clean.c	FUNCTION_10
0xdad	            0x7405	                            je 0x4000df4	       258	clean.c	FUNCTION_10
0xdaf	      0xe800000000	                          call 0x4000df4	       258	clean.c	FUNCTION_10
0xdb4	    0x4881c4580100	                          add rsp, 0x158	       258	clean.c	FUNCTION_10
0xdbb	              0x5b	                                 pop rbx	       258	clean.c	FUNCTION_10
0xdbc	              0x5d	                                 pop rbp	       258	clean.c	FUNCTION_10
0xdbd	              0xc3	                                     ret	       258	clean.c	FUNCTION_10
pretty_print_dels	functions,1:SWITCH,0:WHILE,0:FOR,0:CALL,4:IF,0:DO,0:ELSE,0	72
0xdbe	              0x55	                                push rbp	       261	clean.c	FUNCTION_11
0xdbf	          0x4889e5	                            mov rbp, rsp	       261	clean.c	FUNCTION_11
0xdc2	        0x4883c480	             add rsp, 0xffffffffffffff80	       261	clean.c	FUNCTION_11
0xdc6	    0x64488b042528	                mov rax, qword fs:[0x28]	       261	clean.c	FUNCTION_11
0xdcf	        0x488945f8	                mov qword [rbp - 8], rax	       261	clean.c	FUNCTION_11
0xdd3	            0x31c0	                            xor eax, eax	       261	clean.c	FUNCTION_11
0xdd5	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       262	clean.c	FUNCTION_11
0xddd	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       262	clean.c	FUNCTION_11
0xde4	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       262	clean.c	FUNCTION_11
0xdeb	         0xfb645e0	            movzx eax, byte [rbp - 0x20]	       262	clean.c	FUNCTION_11
0xdef	          0x83c801	                               or eax, 1	       262	clean.c	FUNCTION_11
0xdf2	          0x8845e0	               mov byte [rbp - 0x20], al	       262	clean.c	FUNCTION_11
0xdf5	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       262	clean.c	FUNCTION_11
0xdfd	    0x48c745900000	               mov qword [rbp - 0x70], 0	       264	clean.c	FUNCTION_11
0xe05	    0x48c745980000	               mov qword [rbp - 0x68], 0	       264	clean.c	FUNCTION_11
0xe0d	    0x48c745a00000	               mov qword [rbp - 0x60], 0	       264	clean.c	FUNCTION_11
0xe15	    0x488b05000000	            mov rax, qword [0x04000e5c] 	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe1c	        0x48894580	             mov qword [rbp - 0x80], rax	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe20	            0xeb34	                           jmp 0x4000e96	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe22	        0x488b4580	             mov rax, qword [rbp - 0x80]	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe26	          0x488b00	                    mov rax, qword [rax]	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe29	        0x488d5590	                   lea rdx, [rbp - 0x70]	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe2d	      0xbe00000000	                              mov esi, 0	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe32	          0x4889c7	                            mov rdi, rax	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe35	      0xe800000000	                          call 0x4000e7a	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe3a	        0x48894588	             mov qword [rbp - 0x78], rax	       269	clean.c	FUNCTION_11	FUNCTION_1	CALL_1
0xe3e	        0x488b5588	             mov rdx, qword [rbp - 0x78]	       270	clean.c	FUNCTION_11	FUNCTION_1	CALL_2
0xe42	        0x488d45d0	                   lea rax, [rbp - 0x30]	       270	clean.c	FUNCTION_11	FUNCTION_1	CALL_2
0xe46	          0x4889d6	                            mov rsi, rdx	       270	clean.c	FUNCTION_11	FUNCTION_1	CALL_2
0xe49	          0x4889c7	                            mov rdi, rax	       270	clean.c	FUNCTION_11	FUNCTION_1	CALL_2
0xe4c	      0xe800000000	                          call 0x4000e91	       270	clean.c	FUNCTION_11	FUNCTION_1	CALL_2
0xe51	      0x4883458010	            add qword [rbp - 0x80], 0x10	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe56	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe5b	            0x741c	                            je 0x4000eb9	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe5d	    0x488b05000000	            mov rax, qword [0x04000ea4] 	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe64	    0x8b1500000000	            mov edx, dword [0x04000eaa] 	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe6a	            0x89d2	                            mov edx, edx	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe6c	        0x48c1e204	                              shl rdx, 4	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe70	          0x4801d0	                            add rax, rdx	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe73	        0x483b4580	             cmp rax, qword [rbp - 0x80]	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe77	            0x77a9	                            ja 0x4000e62	       268	clean.c	FUNCTION_11	FUNCTION_1
0xe79	    0x8b0500000000	            mov eax, dword [0x04000ebf] 	       277	clean.c	FUNCTION_11
0xe7f	          0x83e0cf	                     and eax, 0xffffffcf	       277	clean.c	FUNCTION_11
0xe82	          0x83c810	                            or eax, 0x10	       277	clean.c	FUNCTION_11
0xe85	    0x890500000000	            mov dword [0x04000ecb], eax 	       277	clean.c	FUNCTION_11
0xe8b	        0x488d45b0	                   lea rax, [rbp - 0x50]	       278	clean.c	FUNCTION_11	CALL_1
0xe8f	      0xba18000000	                           mov edx, 0x18	       278	clean.c	FUNCTION_11	CALL_1
0xe94	      0xbe00000000	                              mov esi, 0	       278	clean.c	FUNCTION_11	CALL_1
0xe99	          0x4889c7	                            mov rdi, rax	       278	clean.c	FUNCTION_11	CALL_1
0xe9c	      0xe800000000	                          call 0x4000ee1	       278	clean.c	FUNCTION_11	CALL_1
0xea1	    0x48c745b80000	               mov qword [rbp - 0x48], 0	       279	clean.c	FUNCTION_11
0xea9	    0xc745b4020000	               mov dword [rbp - 0x4c], 2	       280	clean.c	FUNCTION_11
0xeb0	    0x8b0d00000000	            mov ecx, dword [0x04000ef6] 	       281	clean.c	FUNCTION_11	CALL_2
0xeb6	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       281	clean.c	FUNCTION_11	CALL_2
0xeba	        0x488d45d0	                   lea rax, [rbp - 0x30]	       281	clean.c	FUNCTION_11	CALL_2
0xebe	            0x89ce	                            mov esi, ecx	       281	clean.c	FUNCTION_11	CALL_2
0xec0	          0x4889c7	                            mov rdi, rax	       281	clean.c	FUNCTION_11	CALL_2
0xec3	      0xe800000000	                          call 0x4000f08	       281	clean.c	FUNCTION_11	CALL_2
0xec8	        0x488d4590	                   lea rax, [rbp - 0x70]	       282	clean.c	FUNCTION_11	CALL_3
0xecc	          0x4889c7	                            mov rdi, rax	       282	clean.c	FUNCTION_11	CALL_3
0xecf	      0xe800000000	                          call 0x4000f14	       282	clean.c	FUNCTION_11	CALL_3
0xed4	        0x488d45d0	                   lea rax, [rbp - 0x30]	       283	clean.c	FUNCTION_11	CALL_4
0xed8	      0xbe00000000	                              mov esi, 0	       283	clean.c	FUNCTION_11	CALL_4
0xedd	          0x4889c7	                            mov rdi, rax	       283	clean.c	FUNCTION_11	CALL_4
0xee0	      0xe800000000	                          call 0x4000f25	       283	clean.c	FUNCTION_11	CALL_4
0xee5	              0x90	                                     nop	       284	clean.c	FUNCTION_11
0xee6	        0x488b45f8	                mov rax, qword [rbp - 8]	       284	clean.c	FUNCTION_11
0xeea	    0x644833042528	                xor rax, qword fs:[0x28]	       284	clean.c	FUNCTION_11
0xef3	            0x7405	                            je 0x4000f3a	       284	clean.c	FUNCTION_11
0xef5	      0xe800000000	                          call 0x4000f3a	       284	clean.c	FUNCTION_11
0xefa	              0xc9	                                   leave	       284	clean.c	FUNCTION_11
0xefb	              0xc3	                                     ret	       284	clean.c	FUNCTION_11
find_unique	functions,0:SWITCH,1:WHILE,0:FOR,2:CALL,4:IF,6:DO,0:ELSE,2	99
0x1316	              0x55	                                push rbp	       376	clean.c	FUNCTION_15
0x1317	          0x4889e5	                            mov rbp, rsp	       376	clean.c	FUNCTION_15
0x131a	        0x4883ec30	                           sub rsp, 0x30	       376	clean.c	FUNCTION_15
0x131e	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       376	clean.c	FUNCTION_15
0x1322	        0x488975d0	             mov qword [rbp - 0x30], rsi	       376	clean.c	FUNCTION_15
0x1326	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       379	clean.c	FUNCTION_15
0x132d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       381	clean.c	FUNCTION_15	CALL_1
0x1331	          0x4889c7	                            mov rdi, rax	       381	clean.c	FUNCTION_15	CALL_1
0x1334	      0xe800000000	                          call 0x4001379	       381	clean.c	FUNCTION_15	CALL_1
0x1339	          0x8945ec	             mov dword [rbp - 0x14], eax	       381	clean.c	FUNCTION_15	CALL_1
0x133c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       382	clean.c	FUNCTION_15	SWITCH_1
0x1340	            0x8b00	                    mov eax, dword [rax]	       382	clean.c	FUNCTION_15	SWITCH_1
0x1342	          0x83f801	                              cmp eax, 1	       382	clean.c	FUNCTION_15	SWITCH_1
0x1345	     0xf84ad000000	                            je 0x4001438	       382	clean.c	FUNCTION_15	SWITCH_1
0x134b	          0x83f802	                              cmp eax, 2	       382	clean.c	FUNCTION_15	SWITCH_1
0x134e	            0x740f	                            je 0x400139f	       382	clean.c	FUNCTION_15	SWITCH_1
0x1350	      0xbf00000000	                              mov edi, 0	       384	clean.c	FUNCTION_15	SWITCH_1	CALL_2
0x1355	      0xb800000000	                              mov eax, 0	       384	clean.c	FUNCTION_15	SWITCH_1	CALL_2
0x135a	      0xe800000000	                          call 0x400139f	       384	clean.c	FUNCTION_15	SWITCH_1	CALL_2
0x135f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       387	clean.c	FUNCTION_15	SWITCH_1
0x1363	        0x488b4008	                mov rax, qword [rax + 8]	       387	clean.c	FUNCTION_15	SWITCH_1
0x1367	        0x488945f0	             mov qword [rbp - 0x10], rax	       387	clean.c	FUNCTION_15	SWITCH_1
0x136b	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x1372	            0xeb74	                           jmp 0x4001428	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x1374	        0x837dec01	               cmp dword [rbp - 0x14], 1	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1378	            0x751d	                           jne 0x40013d7	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x137a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x137e	           0xfb610	                   movzx edx, byte [rax]	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1381	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1385	           0xfb600	                   movzx eax, byte [rax]	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1388	            0x38c2	                              cmp dl, al	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x138a	            0x750b	                           jne 0x40013d7	       389	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x138c	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       390	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x138f	          0x83c001	                              add eax, 1	       390	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1392	          0x8945e8	             mov dword [rbp - 0x18], eax	       390	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1395	            0xeb5f	                           jmp 0x4001436	       391	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_1
0x1397	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x139a	          0x4863d0	                         movsxd rdx, eax	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x139d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13a1	        0x488b4808	                mov rcx, qword [rax + 8]	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13a5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13a9	          0x4889ce	                            mov rsi, rcx	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13ac	          0x4889c7	                            mov rdi, rax	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13af	      0xe800000000	                          call 0x40013f4	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13b4	            0x85c0	                           test eax, eax	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13b6	            0x7527	                           jne 0x400141f	       393	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	CALL_3
0x13b8	        0x837de800	               cmp dword [rbp - 0x18], 0	       394	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3
0x13bc	            0x7418	                            je 0x4001416	       394	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3
0x13be	        0x837dec01	               cmp dword [rbp - 0x14], 1	       395	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x13c2	            0x7509	                           jne 0x400140d	       395	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x13c4	    0xc745e8ffffff	     mov dword [rbp - 0x18], 0xffffffff 	       397	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x13cb	            0xeb12	                           jmp 0x400141f	       397	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x13cd	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       399	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	ELSE_1
0x13d4	            0xeb20	                           jmp 0x4001436	       400	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	IF_3	ELSE_1
0x13d6	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       403	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	ELSE_2
0x13d9	          0x83c001	                              add eax, 1	       403	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	ELSE_2
0x13dc	          0x8945e8	             mov dword [rbp - 0x18], eax	       403	clean.c	FUNCTION_15	SWITCH_1	FOR_1	IF_2	ELSE_2
0x13df	        0x8345e401	               add dword [rbp - 0x1c], 1	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13e3	      0x488345f020	            add qword [rbp - 0x10], 0x20	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13e8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13ec	          0x8b4004	                mov eax, dword [rax + 4]	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13ef	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13f2	            0x7f80	                            jg 0x40013b4	       388	clean.c	FUNCTION_15	SWITCH_1	FOR_1
0x13f4	            0xeb69	                           jmp 0x400149f	       407	clean.c	FUNCTION_15	SWITCH_1
0x13f6	            0xeb67	                           jmp 0x400149f	       407	clean.c	FUNCTION_15	SWITCH_1
0x13f8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       409	clean.c	FUNCTION_15	SWITCH_1
0x13fc	        0x488b4008	                mov rax, qword [rax + 8]	       409	clean.c	FUNCTION_15	SWITCH_1
0x1400	          0x488b00	                    mov rax, qword [rax]	       409	clean.c	FUNCTION_15	SWITCH_1
0x1403	        0x488945f8	                mov qword [rbp - 8], rax	       409	clean.c	FUNCTION_15	SWITCH_1
0x1407	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x140e	            0xeb42	                           jmp 0x4001492	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x1410	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1413	          0x4863d0	                         movsxd rdx, eax	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1416	        0x488b45f8	                mov rax, qword [rbp - 8]	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x141a	          0x488b08	                    mov rcx, qword [rax]	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x141d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1421	          0x4889ce	                            mov rsi, rcx	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1424	          0x4889c7	                            mov rdi, rax	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1427	      0xe800000000	                          call 0x400146c	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x142c	            0x85c0	                           test eax, eax	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x142e	            0x7519	                           jne 0x4001489	       411	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	CALL_4
0x1430	        0x837de800	               cmp dword [rbp - 0x18], 0	       412	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	IF_6
0x1434	            0x740a	                            je 0x4001480	       412	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	IF_6
0x1436	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       413	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	IF_6
0x143d	              0x90	                                     nop	       414	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5	IF_6
0x143e	            0xeb1e	                           jmp 0x400149e	       419	clean.c	FUNCTION_15	SWITCH_1
0x1440	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       416	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5
0x1443	          0x83c001	                              add eax, 1	       416	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5
0x1446	          0x8945e8	             mov dword [rbp - 0x18], eax	       416	clean.c	FUNCTION_15	SWITCH_1	FOR_2	IF_5
0x1449	        0x8345e401	               add dword [rbp - 0x1c], 1	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x144d	      0x488345f810	               add qword [rbp - 8], 0x10	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x1452	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x1456	          0x8b4004	                mov eax, dword [rax + 4]	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x1459	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x145c	            0x7fb2	                            jg 0x4001450	       410	clean.c	FUNCTION_15	SWITCH_1	FOR_2
0x145e	              0x90	                                     nop	       419	clean.c	FUNCTION_15	SWITCH_1
0x145f	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       421	clean.c	FUNCTION_15
0x1462	              0xc9	                                   leave	       422	clean.c	FUNCTION_15
0x1463	              0xc3	                                     ret	       422	clean.c	FUNCTION_15
clean_cmd	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,0:IF,0:DO,0:ELSE,0	5
0x1b4f	              0x55	                                push rbp	       643	clean.c	FUNCTION_18
0x1b50	          0x4889e5	                            mov rbp, rsp	       643	clean.c	FUNCTION_18
0x1b53	      0xb80a000000	                            mov eax, 0xa	       644	clean.c	FUNCTION_18
0x1b58	              0x5d	                                 pop rbp	       645	clean.c	FUNCTION_18
0x1b59	              0xc3	                                     ret	       645	clean.c	FUNCTION_18
interactive_main_loop	functions,0:SWITCH,0:WHILE,1:FOR,0:CALL,16:IF,3:DO,0:ELSE,1	89
0x21b7	              0x55	                                push rbp	       809	clean.c	FUNCTION_24
0x21b8	          0x4889e5	                            mov rbp, rsp	       809	clean.c	FUNCTION_24
0x21bb	    0x4881ec100100	                          sub rsp, 0x110	       809	clean.c	FUNCTION_24
0x21c2	    0x64488b042528	                mov rax, qword fs:[0x28]	       809	clean.c	FUNCTION_24
0x21cb	        0x488945f8	                mov qword [rbp - 8], rax	       809	clean.c	FUNCTION_24
0x21cf	            0x31c0	                            xor eax, eax	       809	clean.c	FUNCTION_24
0x21d1	      0xe969010000	                           jmp 0x400237f	       810	clean.c	FUNCTION_24	WHILE_1
0x21d6	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       813	clean.c	FUNCTION_24	WHILE_1
0x21dd	      0xbe00000000	                              mov esi, 0	       813	clean.c	FUNCTION_24	WHILE_1
0x21e2	      0xba18000000	                           mov edx, 0x18	       813	clean.c	FUNCTION_24	WHILE_1
0x21e7	          0x4889c7	                            mov rdi, rax	       813	clean.c	FUNCTION_24	WHILE_1
0x21ea	          0x4889d1	                            mov rcx, rdx	       813	clean.c	FUNCTION_24	WHILE_1
0x21ed	          0xf348a5	  rep movsq qword [rdi], qword ptr [rsi]	       813	clean.c	FUNCTION_24	WHILE_1
0x21f0	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       823	clean.c	FUNCTION_24	WHILE_1	CALL_1
0x21fb	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	       824	clean.c	FUNCTION_24	WHILE_1	CALL_2
0x2206	    0xc78520ffffff	               mov dword [rbp - 0xe0], 1	       825	clean.c	FUNCTION_24	WHILE_1
0x2210	    0xc78500ffffff	              mov dword [rbp - 0x100], 2	       827	clean.c	FUNCTION_24	WHILE_1
0x221a	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       828	clean.c	FUNCTION_24	WHILE_1
0x2221	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       828	clean.c	FUNCTION_24	WHILE_1
0x2228	    0xc78504ffffff	               mov dword [rbp - 0xfc], 6	       829	clean.c	FUNCTION_24	WHILE_1
0x2232	      0xbf03000000	                              mov edi, 3	       831	clean.c	FUNCTION_24	WHILE_1	CALL_3
0x2237	      0xe86be4ffff	              call sym.clean_print_color	       831	clean.c	FUNCTION_24	WHILE_1	CALL_3
0x223c	    0x8b0500000000	            mov eax, dword [0x04002282] 	       834	clean.c	FUNCTION_24	WHILE_1
0x2242	            0x89c0	                            mov eax, eax	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2244	          0x4889c2	                            mov rdx, rax	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2247	      0xbe00000000	                              mov esi, 0	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x224c	      0xbf00000000	                              mov edi, 0	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2251	      0xe8c4e0ffff	                              call sym.Q	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2256	          0x4889c7	                            mov rdi, rax	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2259	      0xb800000000	                              mov eax, 0	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x225e	      0xe800000000	                          call 0x40022a3	       832	clean.c	FUNCTION_24	WHILE_1	CALL_5
0x2263	      0xbf00000000	                              mov edi, 0	       835	clean.c	FUNCTION_24	WHILE_1	CALL_6
0x2268	      0xe83ae4ffff	              call sym.clean_print_color	       835	clean.c	FUNCTION_24	WHILE_1	CALL_6
0x226d	      0xe84cebffff	              call sym.pretty_print_dels	       837	clean.c	FUNCTION_24	WHILE_1	CALL_7
0x2272	    0x488d9500ffff	                  lea rdx, [rbp - 0x100]	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x2279	    0x488d8510ffff	                   lea rax, [rbp - 0xf0]	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x2280	          0x4889d6	                            mov rsi, rdx	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x2283	          0x4889c7	                            mov rdi, rax	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x2286	      0xe842f5ffff	                call sym.list_and_choose	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x228b	    0x488985f8feff	            mov qword [rbp - 0x108], rax	       839	clean.c	FUNCTION_24	WHILE_1	CALL_8
0x2292	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       841	clean.c	FUNCTION_24	WHILE_1	IF_1
0x2299	            0x8b00	                    mov eax, dword [rax]	       841	clean.c	FUNCTION_24	WHILE_1	IF_1
0x229b	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       841	clean.c	FUNCTION_24	WHILE_1	IF_1
0x229e	            0x747d	                            je 0x400235d	       841	clean.c	FUNCTION_24	WHILE_1	IF_1
0x22a0	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22a7	            0x8b00	                    mov eax, dword [rax]	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22a9	            0x4898	                                    cdqe	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22ab	        0x48c1e005	                              shl rax, 5	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22af	          0x4801e8	                            add rax, rbp	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22b2	    0x482db8000000	                           sub rax, 0xb8	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22b8	          0x488b00	                    mov rax, qword [rax]	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22bb	            0xffd0	                                call rax	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22bd	    0x8985f4feffff	            mov dword [rbp - 0x10c], eax	       843	clean.c	FUNCTION_24	WHILE_1	IF_1	CALL_9
0x22c3	    0x83bdf4feffff	           cmp dword [rbp - 0x10c], 0xa 	       844	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2
0x22ca	            0x7456	                            je 0x4002362	       844	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2
0x22cc	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       845	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	CALL_10
0x22d3	          0x4889c7	                            mov rdi, rax	       845	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	CALL_10
0x22d6	      0xe800000000	                          call 0x400231b	       845	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	CALL_10
0x22db	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       845	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	CALL_10
0x22e6	    0x8b0500000000	            mov eax, dword [0x0400232c] 	       846	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3
0x22ec	            0x85c0	                           test eax, eax	       846	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3
0x22ee	            0x754f	                           jne 0x400237f	       846	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3
0x22f0	      0xbf05000000	                              mov edi, 5	       847	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_11
0x22f5	      0xe8ade3ffff	              call sym.clean_print_color	       847	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_11
0x22fa	      0xbf00000000	                              mov edi, 0	       848	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_13
0x22ff	      0xe8eadfffff	                               call sym.	       848	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_13
0x2304	          0x4889c7	                            mov rdi, rax	       848	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_13
0x2307	      0xb800000000	                              mov eax, 0	       848	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_13
0x230c	      0xe800000000	                          call 0x4002351	       848	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_13
0x2311	      0xbf00000000	                              mov edi, 0	       849	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_14
0x2316	      0xe88ce3ffff	              call sym.clean_print_color	       849	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3	CALL_14
0x231b	            0xeb20	                           jmp 0x400237d	       850	clean.c	FUNCTION_24	WHILE_1	IF_1	IF_2	IF_3
0x231d	      0xe82efeffff	                       call sym.quit_cmd	       855	clean.c	FUNCTION_24	WHILE_1	ELSE_1	CALL_15
0x2322	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       858	clean.c	FUNCTION_24	WHILE_1	CALL_16
0x2329	          0x4889c7	                            mov rdi, rax	       858	clean.c	FUNCTION_24	WHILE_1	CALL_16
0x232c	      0xe800000000	                          call 0x4002371	       858	clean.c	FUNCTION_24	WHILE_1	CALL_16
0x2331	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       858	clean.c	FUNCTION_24	WHILE_1	CALL_16
0x233c	              0x90	                                     nop	       859	clean.c	FUNCTION_24	WHILE_1
0x233d	            0xeb0e	                           jmp 0x400238d	       861	clean.c	FUNCTION_24
0x233f	    0x8b0500000000	            mov eax, dword [0x04002385] 	       810	clean.c	FUNCTION_24	WHILE_1
0x2345	            0x85c0	                           test eax, eax	       810	clean.c	FUNCTION_24	WHILE_1
0x2347	     0xf8589feffff	                           jne 0x4002216	       810	clean.c	FUNCTION_24	WHILE_1
0x234d	              0x90	                                     nop	       861	clean.c	FUNCTION_24
0x234e	        0x488b45f8	                mov rax, qword [rbp - 8]	       861	clean.c	FUNCTION_24
0x2352	    0x644833042528	                xor rax, qword fs:[0x28]	       861	clean.c	FUNCTION_24
0x235b	            0x7405	                            je 0x40023a2	       861	clean.c	FUNCTION_24
0x235d	      0xe800000000	                          call 0x40023a2	       861	clean.c	FUNCTION_24
0x2362	              0xc9	                                   leave	       861	clean.c	FUNCTION_24
0x2363	              0xc3	                                     ret	       861	clean.c	FUNCTION_24
st_mult	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,2:IF,1:DO,0:ELSE,0	22
0xa5	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_55
0xa6	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_55
0xa9	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_55
0xad	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_55
0xb1	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_55
0xb5	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xba	            0x7430	                            je 0x400012c	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xbc	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xc3	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xc8	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xcc	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xd0	            0x731a	                           jae 0x400012c	       795	git-compat-util.h	FUNCTION_55	IF_1	CALL_1
0xd2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xd6	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xda	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xdd	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xe2	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xe7	      0xe800000000	                          call 0x400012c	       796	git-compat-util.h	FUNCTION_55	IF_1	CALL_2
0xec	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_55
0xf0	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_55
0xf5	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_55
0xf6	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_55
select_by_numbers_cmd	functions,0:SWITCH,0:WHILE,0:FOR,1:CALL,4:IF,2:DO,0:ELSE,2	77
0x1e97	              0x55	                                push rbp	       714	clean.c	FUNCTION_20
0x1e98	          0x4889e5	                            mov rbp, rsp	       714	clean.c	FUNCTION_20
0x1e9b	        0x4883ec50	                           sub rsp, 0x50	       714	clean.c	FUNCTION_20
0x1e9f	    0x64488b042528	                mov rax, qword fs:[0x28]	       714	clean.c	FUNCTION_20
0x1ea8	        0x488945f8	                mov qword [rbp - 8], rax	       714	clean.c	FUNCTION_20
0x1eac	            0x31c0	                            xor eax, eax	       714	clean.c	FUNCTION_20
0x1eae	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       721	clean.c	FUNCTION_20
0x1eb6	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       722	clean.c	FUNCTION_20	CALL_1
0x1ebe	    0xc745f0000000	               mov dword [rbp - 0x10], 0	       723	clean.c	FUNCTION_20
0x1ec5	    0xc745d0010000	               mov dword [rbp - 0x30], 1	       725	clean.c	FUNCTION_20
0x1ecc	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       726	clean.c	FUNCTION_20
0x1ed4	    0x8b0500000000	            mov eax, dword [0x04001f1a] 	       727	clean.c	FUNCTION_20
0x1eda	          0x8945d4	             mov dword [rbp - 0x2c], eax	       727	clean.c	FUNCTION_20
0x1edd	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       729	clean.c	FUNCTION_20	CALL_2
0x1ee1	        0x488d45e0	                   lea rax, [rbp - 0x20]	       729	clean.c	FUNCTION_20	CALL_2
0x1ee5	          0x4889d6	                            mov rsi, rdx	       729	clean.c	FUNCTION_20	CALL_2
0x1ee8	          0x4889c7	                            mov rdi, rax	       729	clean.c	FUNCTION_20	CALL_2
0x1eeb	      0xe8ddf8ffff	                call sym.list_and_choose	       729	clean.c	FUNCTION_20	CALL_2
0x1ef0	        0x488945c0	             mov qword [rbp - 0x40], rax	       729	clean.c	FUNCTION_20	CALL_2
0x1ef4	    0x488b05000000	            mov rax, qword [0x04001f3b] 	       730	clean.c	FUNCTION_20
0x1efb	        0x488945c8	             mov qword [rbp - 0x38], rax	       730	clean.c	FUNCTION_20
0x1eff	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       731	clean.c	FUNCTION_20	FOR_1
0x1f06	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       731	clean.c	FUNCTION_20	FOR_1
0x1f0d	            0xeb74	                           jmp 0x4001fc3	       731	clean.c	FUNCTION_20	FOR_1
0x1f0f	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f12	            0x4898	                                    cdqe	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f14	    0x488d14850000	                        lea rdx, [rax*4]	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f1c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f20	          0x4801d0	                            add rax, rdx	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f23	            0x8b00	                    mov eax, dword [rax]	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f25	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f28	            0x7e1b	                           jle 0x4001f85	       732	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f2a	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f2d	            0x4898	                                    cdqe	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f2f	        0x48c1e004	                              shl rax, 4	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f33	          0x4889c2	                            mov rdx, rax	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f36	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f3a	          0x4801d0	                            add rax, rdx	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f3d	          0x488b00	                    mov rax, qword [rax]	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f40	          0xc60000	                       mov byte [rax], 0	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f43	            0xeb3a	                           jmp 0x4001fbf	       733	clean.c	FUNCTION_20	FOR_1	IF_1
0x1f45	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f48	            0x4898	                                    cdqe	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f4a	    0x488d14850000	                        lea rdx, [rax*4]	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f52	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f56	          0x4801d0	                            add rax, rdx	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f59	            0x8b00	                    mov eax, dword [rax]	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f5b	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f5e	            0x7506	                           jne 0x4001fa6	       734	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f60	        0x8345bc01	               add dword [rbp - 0x44], 1	       736	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f64	            0xeb19	                           jmp 0x4001fbf	       737	clean.c	FUNCTION_20	FOR_1	ELSE_1	IF_2
0x1f66	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f69	            0x4898	                                    cdqe	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f6b	        0x48c1e004	                              shl rax, 4	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f6f	          0x4889c2	                            mov rdx, rax	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f72	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f76	          0x4801d0	                            add rax, rdx	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f79	          0x488b00	                    mov rax, qword [rax]	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f7c	          0xc60000	                       mov byte [rax], 0	       740	clean.c	FUNCTION_20	FOR_1	ELSE_2
0x1f7f	        0x8345b801	               add dword [rbp - 0x48], 1	       731	clean.c	FUNCTION_20	FOR_1
0x1f83	    0x8b1500000000	            mov edx, dword [0x04001fc9] 	       731	clean.c	FUNCTION_20	FOR_1
0x1f89	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       731	clean.c	FUNCTION_20	FOR_1
0x1f8c	            0x39c2	                            cmp edx, eax	       731	clean.c	FUNCTION_20	FOR_1
0x1f8e	     0xf877bffffff	                            ja 0x4001f4f	       731	clean.c	FUNCTION_20	FOR_1
0x1f94	      0xbe00000000	                              mov esi, 0	       744	clean.c	FUNCTION_20	CALL_3
0x1f99	      0xbf00000000	                              mov edi, 0	       744	clean.c	FUNCTION_20	CALL_3
0x1f9e	      0xe800000000	                          call 0x4001fe3	       744	clean.c	FUNCTION_20	CALL_3
0x1fa3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       746	clean.c	FUNCTION_20	CALL_4
0x1fa7	          0x4889c7	                            mov rdi, rax	       746	clean.c	FUNCTION_20	CALL_4
0x1faa	      0xe800000000	                          call 0x4001fef	       746	clean.c	FUNCTION_20	CALL_4
0x1faf	      0xb800000000	                              mov eax, 0	       747	clean.c	FUNCTION_20
0x1fb4	        0x488b4df8	                mov rcx, qword [rbp - 8]	       748	clean.c	FUNCTION_20
0x1fb8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       748	clean.c	FUNCTION_20
0x1fc1	            0x7405	                            je 0x4002008	       748	clean.c	FUNCTION_20
0x1fc3	      0xe800000000	                          call 0x4002008	       748	clean.c	FUNCTION_20
0x1fc8	              0xc9	                                   leave	       748	clean.c	FUNCTION_20
0x1fc9	              0xc3	                                     ret	       748	clean.c	FUNCTION_20
quit_cmd	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,3:IF,0:DO,0:ELSE,0	13
0x2150	              0x55	                                push rbp	       786	clean.c	FUNCTION_22
0x2151	          0x4889e5	                            mov rbp, rsp	       786	clean.c	FUNCTION_22
0x2154	      0xbe00000000	                              mov esi, 0	       787	clean.c	FUNCTION_22	CALL_1
0x2159	      0xbf00000000	                              mov edi, 0	       787	clean.c	FUNCTION_22	CALL_1
0x215e	      0xe800000000	                          call 0x40021a3	       787	clean.c	FUNCTION_22	CALL_1
0x2163	      0xbf00000000	                              mov edi, 0	       788	clean.c	FUNCTION_22	CALL_3
0x2168	      0xe881e1ffff	                               call sym.	       788	clean.c	FUNCTION_22	CALL_3
0x216d	          0x4889c7	                            mov rdi, rax	       788	clean.c	FUNCTION_22	CALL_3
0x2170	      0xb800000000	                              mov eax, 0	       788	clean.c	FUNCTION_22	CALL_3
0x2175	      0xe800000000	                          call 0x40021ba	       788	clean.c	FUNCTION_22	CALL_3
0x217a	      0xb80a000000	                            mov eax, 0xa	       789	clean.c	FUNCTION_22
0x217f	              0x5d	                                 pop rbp	       790	clean.c	FUNCTION_22
0x2180	              0xc3	                                     ret	       790	clean.c	FUNCTION_22
git_clean_config	functions,0:SWITCH,0:WHILE,0:FOR,0:CALL,11:IF,6:DO,0:ELSE,0	101
0x4df	              0x55	                                push rbp	       103	clean.c	FUNCTION_6
0x4e0	          0x4889e5	                            mov rbp, rsp	       103	clean.c	FUNCTION_6
0x4e3	        0x4883ec40	                           sub rsp, 0x40	       103	clean.c	FUNCTION_6
0x4e7	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       103	clean.c	FUNCTION_6
0x4eb	        0x488975d0	             mov qword [rbp - 0x30], rsi	       103	clean.c	FUNCTION_6
0x4ef	        0x488955c8	             mov qword [rbp - 0x38], rdx	       103	clean.c	FUNCTION_6
0x4f3	    0x64488b042528	                mov rax, qword fs:[0x28]	       103	clean.c	FUNCTION_6
0x4fc	        0x488945f8	                mov qword [rbp - 8], rax	       103	clean.c	FUNCTION_6
0x500	            0x31c0	                            xor eax, eax	       103	clean.c	FUNCTION_6
0x502	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x506	      0xbe00000000	                              mov esi, 0	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x50b	          0x4889c7	                            mov rdi, rax	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x50e	      0xe800000000	                          call 0x4000553	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x513	            0x85c0	                           test eax, eax	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x515	            0x741f	                            je 0x4000576	       106	clean.c	FUNCTION_6	IF_1	CALL_1
0x517	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       107	clean.c	FUNCTION_6	CALL_2
0x51b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       107	clean.c	FUNCTION_6	CALL_2
0x51f	      0xb900000000	                              mov ecx, 0	       107	clean.c	FUNCTION_6	CALL_2
0x524	      0xba00000000	                              mov edx, 0	       107	clean.c	FUNCTION_6	CALL_2
0x529	          0x4889c7	                            mov rdi, rax	       107	clean.c	FUNCTION_6	CALL_2
0x52c	      0xe800000000	                          call 0x4000571	       107	clean.c	FUNCTION_6	CALL_2
0x531	      0xe913010000	                           jmp 0x4000689	       107	clean.c	FUNCTION_6	CALL_2
0x536	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x53a	      0xbe00000000	                              mov esi, 0	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x53f	          0x4889c7	                            mov rdi, rax	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x542	      0xe800000000	                          call 0x4000587	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x547	            0x85c0	                           test eax, eax	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x549	            0x7523	                           jne 0x40005ae	       111	clean.c	FUNCTION_6	IF_2	CALL_3
0x54b	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x54f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x553	          0x4889d6	                            mov rsi, rdx	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x556	          0x4889c7	                            mov rdi, rax	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x559	      0xe800000000	                          call 0x400059e	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x55e	    0x890500000000	            mov dword [0x040005a4], eax 	       112	clean.c	FUNCTION_6	IF_2	CALL_4
0x564	      0xb800000000	                              mov eax, 0	       113	clean.c	FUNCTION_6	IF_2
0x569	      0xe9db000000	                           jmp 0x4000689	       113	clean.c	FUNCTION_6	IF_2
0x56e	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x572	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x576	      0xbe00000000	                              mov esi, 0	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x57b	          0x4889c7	                            mov rdi, rax	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x57e	      0xe888faffff	                    call sym.skip_prefix	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x583	            0x85c0	                           test eax, eax	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x585	            0x746e	                            je 0x4000635	       115	clean.c	FUNCTION_6	IF_3	CALL_5
0x587	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       116	clean.c	FUNCTION_6	IF_3	CALL_6
0x58b	          0x4889c7	                            mov rdi, rax	       116	clean.c	FUNCTION_6	IF_3	CALL_6
0x58e	      0xe88efeffff	         call sym.parse_clean_color_slot	       116	clean.c	FUNCTION_6	IF_3	CALL_6
0x593	          0x8945ec	             mov dword [rbp - 0x14], eax	       116	clean.c	FUNCTION_6	IF_3	CALL_6
0x596	        0x837dec00	               cmp dword [rbp - 0x14], 0	       117	clean.c	FUNCTION_6	IF_3	IF_4
0x59a	            0x790a	                           jns 0x40005e6	       117	clean.c	FUNCTION_6	IF_3	IF_4
0x59c	      0xb800000000	                              mov eax, 0	       118	clean.c	FUNCTION_6	IF_3	IF_4
0x5a1	      0xe9a3000000	                           jmp 0x4000689	       118	clean.c	FUNCTION_6	IF_3	IF_4
0x5a6	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       119	clean.c	FUNCTION_6	IF_3	IF_5
0x5ab	            0x7516	                           jne 0x4000603	       119	clean.c	FUNCTION_6	IF_3	IF_5
0x5ad	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       120	clean.c	FUNCTION_6	IF_3	CALL_7
0x5b1	          0x4889c7	                            mov rdi, rax	       120	clean.c	FUNCTION_6	IF_3	CALL_7
0x5b4	      0xe800000000	                          call 0x40005f9	       120	clean.c	FUNCTION_6	IF_3	CALL_7
0x5b9	      0xe842faffff	                    call sym.const_error	       120	clean.c	FUNCTION_6	IF_3	CALL_7
0x5be	      0xe986000000	                           jmp 0x4000689	       120	clean.c	FUNCTION_6	IF_3	CALL_7
0x5c3	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5c6	          0x4863d0	                         movsxd rdx, eax	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5c9	          0x4889d0	                            mov rax, rdx	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5cc	        0x48c1e002	                              shl rax, 2	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5d0	          0x4801d0	                            add rax, rdx	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5d3	          0x4889c2	                            mov rdx, rax	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5d6	        0x48c1e204	                              shl rdx, 4	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5da	          0x4829c2	                            sub rdx, rax	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5dd	    0x4881c2000000	                              add rdx, 0	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5e4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5e8	          0x4889d6	                            mov rsi, rdx	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5eb	          0x4889c7	                            mov rdi, rax	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5ee	      0xe800000000	                          call 0x4000633	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5f3	            0xeb54	                           jmp 0x4000689	       121	clean.c	FUNCTION_6	IF_3	CALL_8
0x5f5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x5f9	      0xbe00000000	                              mov esi, 0	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x5fe	          0x4889c7	                            mov rdi, rax	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x601	      0xe800000000	                          call 0x4000646	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x606	            0x85c0	                           test eax, eax	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x608	            0x7528	                           jne 0x4000672	       124	clean.c	FUNCTION_6	IF_6	CALL_9
0x60a	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x60e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x612	          0x4889d6	                            mov rsi, rdx	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x615	          0x4889c7	                            mov rdi, rax	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x618	      0xe800000000	                          call 0x400065d	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x61d	            0x85c0	                           test eax, eax	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x61f	           0xf94c0	                                 sete al	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x622	           0xfb6c0	                           movzx eax, al	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x625	    0x890500000000	            mov dword [0x0400066b], eax 	       125	clean.c	FUNCTION_6	IF_6	CALL_10
0x62b	      0xb800000000	                              mov eax, 0	       126	clean.c	FUNCTION_6	IF_6
0x630	            0xeb17	                           jmp 0x4000689	       126	clean.c	FUNCTION_6	IF_6
0x632	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       130	clean.c	FUNCTION_6	CALL_11
0x636	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       130	clean.c	FUNCTION_6	CALL_11
0x63a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       130	clean.c	FUNCTION_6	CALL_11
0x63e	          0x4889ce	                            mov rsi, rcx	       130	clean.c	FUNCTION_6	CALL_11
0x641	          0x4889c7	                            mov rdi, rax	       130	clean.c	FUNCTION_6	CALL_11
0x644	      0xe800000000	                          call 0x4000689	       130	clean.c	FUNCTION_6	CALL_11
0x649	        0x488b4df8	                mov rcx, qword [rbp - 8]	       131	clean.c	FUNCTION_6
0x64d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       131	clean.c	FUNCTION_6
0x656	            0x7405	                            je 0x400069d	       131	clean.c	FUNCTION_6
0x658	      0xe800000000	                          call 0x400069d	       131	clean.c	FUNCTION_6
0x65d	              0xc9	                                   leave	       131	clean.c	FUNCTION_6
0x65e	              0xc3	                                     ret	       131	clean.c	FUNCTION_6
