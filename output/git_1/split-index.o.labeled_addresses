is_null_oid	functions,0:DO,0:FOR,0:CALL,1:IF,0:WHILE,0:SWITCH,0:ELSE,0	13
0x400016c	              0x55	                                push rbp	       989	cache.h	FUNCTION_11
0x400016d	          0x4889e5	                            mov rbp, rsp	       989	cache.h	FUNCTION_11
0x4000170	        0x4883ec10	                           sub rsp, 0x10	       989	cache.h	FUNCTION_11
0x4000174	        0x48897df8	                mov qword [rbp - 8], rdi	       989	cache.h	FUNCTION_11
0x4000178	        0x488b45f8	                mov rax, qword [rbp - 8]	       990	cache.h	FUNCTION_11	CALL_1
0x400017c	      0xbe00000000	                              mov esi, 0	       990	cache.h	FUNCTION_11	CALL_1
0x4000181	          0x4889c7	                            mov rdi, rax	       990	cache.h	FUNCTION_11	CALL_1
0x4000184	      0xe8b9ffffff	                        call sym.hashcmp	       990	cache.h	FUNCTION_11	CALL_1
0x4000189	            0x85c0	                           test eax, eax	       990	cache.h	FUNCTION_11	CALL_1
0x400018b	           0xf94c0	                                 sete al	       990	cache.h	FUNCTION_11	CALL_1
0x400018e	           0xfb6c0	                           movzx eax, al	       990	cache.h	FUNCTION_11	CALL_1
0x4000191	              0xc9	                                   leave	       991	cache.h	FUNCTION_11
0x4000192	              0xc3	                                     ret	       991	cache.h	FUNCTION_11
write_link_extension	functions,0:DO,0:FOR,0:CALL,3:IF,1:WHILE,0:SWITCH,0:ELSE,0	39
0x4000355	              0x55	                                push rbp	        46	split-index.c	FUNCTION_30
0x4000356	          0x4889e5	                            mov rbp, rsp	        46	split-index.c	FUNCTION_30
0x4000359	        0x4883ec20	                           sub rsp, 0x20	        46	split-index.c	FUNCTION_30
0x400035d	        0x48897de8	             mov qword [rbp - 0x18], rdi	        46	split-index.c	FUNCTION_30
0x4000361	        0x488975e0	             mov qword [rbp - 0x20], rsi	        46	split-index.c	FUNCTION_30
0x4000365	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        47	split-index.c	FUNCTION_30
0x4000369	        0x488b4028	            mov rax, qword [rax + 0x28] 	        47	split-index.c	FUNCTION_30
0x400036d	        0x488945f8	                mov qword [rbp - 8], rax	        47	split-index.c	FUNCTION_30
0x4000371	        0x488b4df8	                mov rcx, qword [rbp - 8]	        48	split-index.c	FUNCTION_30	CALL_1
0x4000375	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        48	split-index.c	FUNCTION_30	CALL_1
0x4000379	      0xba14000000	                           mov edx, 0x14	        48	split-index.c	FUNCTION_30	CALL_1
0x400037e	          0x4889ce	                            mov rsi, rcx	        48	split-index.c	FUNCTION_30	CALL_1
0x4000381	          0x4889c7	                            mov rdi, rax	        48	split-index.c	FUNCTION_30	CALL_1
0x4000384	      0xe800000000	                          call 0x4000389	        48	split-index.c	FUNCTION_30	CALL_1
0x4000389	        0x488b45f8	                mov rax, qword [rbp - 8]	        49	split-index.c	FUNCTION_30	IF_1
0x400038d	        0x488b4020	            mov rax, qword [rax + 0x20] 	        49	split-index.c	FUNCTION_30	IF_1
0x4000391	          0x4885c0	                           test rax, rax	        49	split-index.c	FUNCTION_30	IF_1
0x4000394	            0x7514	                           jne 0x40003aa	        49	split-index.c	FUNCTION_30	IF_1
0x4000396	        0x488b45f8	                mov rax, qword [rbp - 8]	        49	split-index.c	FUNCTION_30	IF_1
0x400039a	        0x488b4028	            mov rax, qword [rax + 0x28] 	        49	split-index.c	FUNCTION_30	IF_1
0x400039e	          0x4885c0	                           test rax, rax	        49	split-index.c	FUNCTION_30	IF_1
0x40003a1	            0x7507	                           jne 0x40003aa	        49	split-index.c	FUNCTION_30	IF_1
0x40003a3	      0xb800000000	                              mov eax, 0	        50	split-index.c	FUNCTION_30	IF_1
0x40003a8	            0xeb33	                           jmp 0x40003dd	        50	split-index.c	FUNCTION_30	IF_1
0x40003aa	        0x488b45f8	                mov rax, qword [rbp - 8]	        51	split-index.c	FUNCTION_30	CALL_2
0x40003ae	        0x488b4020	            mov rax, qword [rax + 0x20] 	        51	split-index.c	FUNCTION_30	CALL_2
0x40003b2	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        51	split-index.c	FUNCTION_30	CALL_2
0x40003b6	          0x4889d6	                            mov rsi, rdx	        51	split-index.c	FUNCTION_30	CALL_2
0x40003b9	          0x4889c7	                            mov rdi, rax	        51	split-index.c	FUNCTION_30	CALL_2
0x40003bc	      0xe800000000	                          call 0x40003c1	        51	split-index.c	FUNCTION_30	CALL_2
0x40003c1	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	split-index.c	FUNCTION_30	CALL_3
0x40003c5	        0x488b4028	            mov rax, qword [rax + 0x28] 	        52	split-index.c	FUNCTION_30	CALL_3
0x40003c9	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        52	split-index.c	FUNCTION_30	CALL_3
0x40003cd	          0x4889d6	                            mov rsi, rdx	        52	split-index.c	FUNCTION_30	CALL_3
0x40003d0	          0x4889c7	                            mov rdi, rax	        52	split-index.c	FUNCTION_30	CALL_3
0x40003d3	      0xe800000000	                          call 0x40003d8	        52	split-index.c	FUNCTION_30	CALL_3
0x40003d8	      0xb800000000	                              mov eax, 0	        53	split-index.c	FUNCTION_30
0x40003dd	              0xc9	                                   leave	        54	split-index.c	FUNCTION_30
0x40003de	              0xc3	                                     ret	        54	split-index.c	FUNCTION_30
init_split_index	functions,0:DO,0:FOR,0:CALL,1:IF,1:WHILE,0:SWITCH,0:ELSE,0	21
0x40001be	              0x55	                                push rbp	         6	split-index.c	FUNCTION_28
0x40001bf	          0x4889e5	                            mov rbp, rsp	         6	split-index.c	FUNCTION_28
0x40001c2	        0x4883ec10	                           sub rsp, 0x10	         6	split-index.c	FUNCTION_28
0x40001c6	        0x48897df8	                mov qword [rbp - 8], rdi	         6	split-index.c	FUNCTION_28
0x40001ca	        0x488b45f8	                mov rax, qword [rbp - 8]	         7	split-index.c	FUNCTION_28	IF_1
0x40001ce	        0x488b4028	            mov rax, qword [rax + 0x28] 	         7	split-index.c	FUNCTION_28	IF_1
0x40001d2	          0x4885c0	                           test rax, rax	         7	split-index.c	FUNCTION_28	IF_1
0x40001d5	            0x7529	                           jne 0x4000200	         7	split-index.c	FUNCTION_28	IF_1
0x40001d7	      0xbe48000000	                           mov esi, 0x48	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001dc	      0xbf01000000	                              mov edi, 1	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001e1	      0xe800000000	                          call 0x40001e6	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001e6	          0x4889c2	                            mov rdx, rax	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001e9	        0x488b45f8	                mov rax, qword [rbp - 8]	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001ed	        0x48895028	             mov qword [rax + 0x28], rdx	         8	split-index.c	FUNCTION_28	IF_1	CALL_1
0x40001f1	        0x488b45f8	                mov rax, qword [rbp - 8]	         9	split-index.c	FUNCTION_28	IF_1
0x40001f5	        0x488b4028	            mov rax, qword [rax + 0x28] 	         9	split-index.c	FUNCTION_28	IF_1
0x40001f9	    0xc74044010000	               mov dword [rax + 0x44], 1	         9	split-index.c	FUNCTION_28	IF_1
0x4000200	        0x488b45f8	                mov rax, qword [rbp - 8]	        11	split-index.c	FUNCTION_28
0x4000204	        0x488b4028	            mov rax, qword [rax + 0x28] 	        11	split-index.c	FUNCTION_28
0x4000208	              0xc9	                                   leave	        12	split-index.c	FUNCTION_28
0x4000209	              0xc3	                                     ret	        12	split-index.c	FUNCTION_28
const_error	functions,0:DO,0:FOR,0:CALL,0:IF,0:WHILE,0:SWITCH,0:ELSE,0	5
0x4000040	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_48
0x4000041	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_48
0x4000044	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_48
0x4000049	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_48
0x400004a	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_48
discard_split_index	functions,0:DO,0:FOR,0:CALL,3:IF,3:WHILE,0:SWITCH,0:ELSE,0	41
0x4000ff0	              0x55	                                push rbp	       280	split-index.c	FUNCTION_38
0x4000ff1	          0x4889e5	                            mov rbp, rsp	       280	split-index.c	FUNCTION_38
0x4000ff4	        0x4883ec20	                           sub rsp, 0x20	       280	split-index.c	FUNCTION_38
0x4000ff8	        0x48897de8	             mov qword [rbp - 0x18], rdi	       280	split-index.c	FUNCTION_38
0x4000ffc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       281	split-index.c	FUNCTION_38
0x4001000	        0x488b4028	            mov rax, qword [rax + 0x28] 	       281	split-index.c	FUNCTION_38
0x4001004	        0x488945f8	                mov qword [rbp - 8], rax	       281	split-index.c	FUNCTION_38
0x4001008	      0x48837df800	                  cmp qword [rbp - 8], 0	       282	split-index.c	FUNCTION_38	IF_1
0x400100d	            0x7463	                            je 0x4001072	       282	split-index.c	FUNCTION_38	IF_1
0x400100f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       284	split-index.c	FUNCTION_38
0x4001013	    0x48c740280000	               mov qword [rax + 0x28], 0	       284	split-index.c	FUNCTION_38
0x400101b	        0x488b45f8	                mov rax, qword [rbp - 8]	       285	split-index.c	FUNCTION_38
0x400101f	          0x8b4044	            mov eax, dword [rax + 0x44] 	       285	split-index.c	FUNCTION_38
0x4001022	          0x8d50ff	                      lea edx, [rax - 1]	       285	split-index.c	FUNCTION_38
0x4001025	        0x488b45f8	                mov rax, qword [rbp - 8]	       285	split-index.c	FUNCTION_38
0x4001029	          0x895044	             mov dword [rax + 0x44], edx	       285	split-index.c	FUNCTION_38
0x400102c	        0x488b45f8	                mov rax, qword [rbp - 8]	       286	split-index.c	FUNCTION_38	IF_2
0x4001030	          0x8b4044	            mov eax, dword [rax + 0x44] 	       286	split-index.c	FUNCTION_38	IF_2
0x4001033	            0x85c0	                           test eax, eax	       286	split-index.c	FUNCTION_38	IF_2
0x4001035	            0x753e	                           jne 0x4001075	       286	split-index.c	FUNCTION_38	IF_2
0x4001037	        0x488b45f8	                mov rax, qword [rbp - 8]	       288	split-index.c	FUNCTION_38	IF_3
0x400103b	        0x488b4018	            mov rax, qword [rax + 0x18] 	       288	split-index.c	FUNCTION_38	IF_3
0x400103f	          0x4885c0	                           test rax, rax	       288	split-index.c	FUNCTION_38	IF_3
0x4001042	            0x7420	                            je 0x4001064	       288	split-index.c	FUNCTION_38	IF_3
0x4001044	        0x488b45f8	                mov rax, qword [rbp - 8]	       289	split-index.c	FUNCTION_38	IF_3	CALL_1
0x4001048	        0x488b4018	            mov rax, qword [rax + 0x18] 	       289	split-index.c	FUNCTION_38	IF_3	CALL_1
0x400104c	          0x4889c7	                            mov rdi, rax	       289	split-index.c	FUNCTION_38	IF_3	CALL_1
0x400104f	      0xe800000000	                          call 0x4001054	       289	split-index.c	FUNCTION_38	IF_3	CALL_1
0x4001054	        0x488b45f8	                mov rax, qword [rbp - 8]	       290	split-index.c	FUNCTION_38	IF_3	CALL_2
0x4001058	        0x488b4018	            mov rax, qword [rax + 0x18] 	       290	split-index.c	FUNCTION_38	IF_3	CALL_2
0x400105c	          0x4889c7	                            mov rdi, rax	       290	split-index.c	FUNCTION_38	IF_3	CALL_2
0x400105f	      0xe800000000	                          call 0x4001064	       290	split-index.c	FUNCTION_38	IF_3	CALL_2
0x4001064	        0x488b45f8	                mov rax, qword [rbp - 8]	       292	split-index.c	FUNCTION_38	CALL_3
0x4001068	          0x4889c7	                            mov rdi, rax	       292	split-index.c	FUNCTION_38	CALL_3
0x400106b	      0xe800000000	                          call 0x4001070	       292	split-index.c	FUNCTION_38	CALL_3
0x4001070	            0xeb04	                           jmp 0x4001076	       292	split-index.c	FUNCTION_38	CALL_3
0x4001072	              0x90	                                     nop	       283	split-index.c	FUNCTION_38	IF_1
0x4001073	            0xeb01	                           jmp 0x4001076	       283	split-index.c	FUNCTION_38	IF_1
0x4001075	              0x90	                                     nop	       287	split-index.c	FUNCTION_38	IF_2
0x4001076	              0xc9	                                   leave	       293	split-index.c	FUNCTION_38
0x4001077	              0xc3	                                     ret	       293	split-index.c	FUNCTION_38
mark_entry_for_delete	functions,0:DO,0:FOR,0:CALL,1:IF,1:WHILE,0:SWITCH,0:ELSE,0	42
0x40005e1	              0x55	                                push rbp	        93	split-index.c	FUNCTION_33
0x40005e2	          0x4889e5	                            mov rbp, rsp	        93	split-index.c	FUNCTION_33
0x40005e5	        0x4883ec20	                           sub rsp, 0x20	        93	split-index.c	FUNCTION_33
0x40005e9	        0x48897de8	             mov qword [rbp - 0x18], rdi	        93	split-index.c	FUNCTION_33
0x40005ed	        0x488975e0	             mov qword [rbp - 0x20], rsi	        93	split-index.c	FUNCTION_33
0x40005f1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        94	split-index.c	FUNCTION_33
0x40005f5	        0x488945f8	                mov qword [rbp - 8], rax	        94	split-index.c	FUNCTION_33
0x40005f9	        0x488b45f8	                mov rax, qword [rbp - 8]	        95	split-index.c	FUNCTION_33	IF_1
0x40005fd	          0x8b400c	              mov eax, dword [rax + 0xc]	        95	split-index.c	FUNCTION_33	IF_1
0x4000600	            0x89c0	                            mov eax, eax	        95	split-index.c	FUNCTION_33	IF_1
0x4000602	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	        95	split-index.c	FUNCTION_33	IF_1
0x4000606	            0x7720	                            ja 0x4000628	        95	split-index.c	FUNCTION_33	IF_1
0x4000608	        0x488b45f8	                mov rax, qword [rbp - 8]	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x400060c	          0x8b400c	              mov eax, dword [rax + 0xc]	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x400060f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000613	            0x89d1	                            mov ecx, edx	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000615	            0x89c2	                            mov edx, eax	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000617	            0x89ce	                            mov esi, ecx	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000619	      0xbf00000000	                              mov edi, 0	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x400061e	      0xb800000000	                              mov eax, 0	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000623	      0xe800000000	                          call 0x4000628	        96	split-index.c	FUNCTION_33	IF_1	CALL_1
0x4000628	        0x488b45f8	                mov rax, qword [rbp - 8]	        98	split-index.c	FUNCTION_33
0x400062c	          0x488b00	                    mov rax, qword [rax]	        98	split-index.c	FUNCTION_33
0x400062f	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        98	split-index.c	FUNCTION_33
0x4000633	        0x48c1e203	                              shl rdx, 3	        98	split-index.c	FUNCTION_33
0x4000637	          0x4801d0	                            add rax, rdx	        98	split-index.c	FUNCTION_33
0x400063a	          0x488b00	                    mov rax, qword [rax]	        98	split-index.c	FUNCTION_33
0x400063d	        0x488b55f8	                mov rdx, qword [rbp - 8]	        98	split-index.c	FUNCTION_33
0x4000641	          0x488b12	                    mov rdx, qword [rdx]	        98	split-index.c	FUNCTION_33
0x4000644	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	        98	split-index.c	FUNCTION_33
0x4000648	        0x48c1e103	                              shl rcx, 3	        98	split-index.c	FUNCTION_33
0x400064c	          0x4801ca	                            add rdx, rcx	        98	split-index.c	FUNCTION_33
0x400064f	          0x488b12	                    mov rdx, qword [rdx]	        98	split-index.c	FUNCTION_33
0x4000652	          0x8b5238	            mov edx, dword [rdx + 0x38] 	        98	split-index.c	FUNCTION_33
0x4000655	    0x81ca00000200	                         or edx, 0x20000	        98	split-index.c	FUNCTION_33
0x400065b	          0x895038	             mov dword [rax + 0x38], edx	        98	split-index.c	FUNCTION_33
0x400065e	        0x488b45f8	                mov rax, qword [rbp - 8]	        99	split-index.c	FUNCTION_33
0x4000662	        0x488b4028	            mov rax, qword [rax + 0x28] 	        99	split-index.c	FUNCTION_33
0x4000666	    0xc7403c010000	               mov dword [rax + 0x3c], 1	        99	split-index.c	FUNCTION_33
0x400066d	              0x90	                                     nop	       100	split-index.c	FUNCTION_33
0x400066e	              0xc9	                                   leave	       100	split-index.c	FUNCTION_33
0x400066f	              0xc3	                                     ret	       100	split-index.c	FUNCTION_33
st_mult	functions,0:DO,0:FOR,0:CALL,1:IF,1:WHILE,0:SWITCH,0:ELSE,0	22
0x400004b	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_57
0x400004c	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_57
0x400004f	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_57
0x4000053	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_57
0x4000057	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_57
0x400005b	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000060	            0x7430	                            je 0x4000092	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000062	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000069	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_57	IF_1
0x400006e	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000072	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000076	            0x731a	                           jae 0x4000092	       795	git-compat-util.h	FUNCTION_57	IF_1
0x4000078	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x400007c	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x4000080	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x4000083	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x4000088	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x400008d	      0xe800000000	                          call 0x4000092	       796	git-compat-util.h	FUNCTION_57	IF_1	CALL_1
0x4000092	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_57
0x4000096	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_57
0x400009b	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_57
0x400009c	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_57
hashcpy	functions,0:DO,0:FOR,0:CALL,1:IF,0:WHILE,0:SWITCH,0:ELSE,0	14
0x4000193	              0x55	                                push rbp	       994	cache.h	FUNCTION_12
0x4000194	          0x4889e5	                            mov rbp, rsp	       994	cache.h	FUNCTION_12
0x4000197	        0x4883ec10	                           sub rsp, 0x10	       994	cache.h	FUNCTION_12
0x400019b	        0x48897df8	                mov qword [rbp - 8], rdi	       994	cache.h	FUNCTION_12
0x400019f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       994	cache.h	FUNCTION_12
0x40001a3	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       995	cache.h	FUNCTION_12	CALL_1
0x40001a7	        0x488b45f8	                mov rax, qword [rbp - 8]	       995	cache.h	FUNCTION_12	CALL_1
0x40001ab	      0xba14000000	                           mov edx, 0x14	       995	cache.h	FUNCTION_12	CALL_1
0x40001b0	          0x4889ce	                            mov rsi, rcx	       995	cache.h	FUNCTION_12	CALL_1
0x40001b3	          0x4889c7	                            mov rdi, rax	       995	cache.h	FUNCTION_12	CALL_1
0x40001b6	      0xe800000000	                          call 0x40001bb	       995	cache.h	FUNCTION_12	CALL_1
0x40001bb	              0x90	                                     nop	       996	cache.h	FUNCTION_12
0x40001bc	              0xc9	                                   leave	       996	cache.h	FUNCTION_12
0x40001bd	              0xc3	                                     ret	       996	cache.h	FUNCTION_12
copy_cache_entry	functions,0:DO,0:FOR,0:CALL,1:IF,0:WHILE,0:SWITCH,0:ELSE,0	27
0x40000e8	              0x55	                                push rbp	       228	cache.h	FUNCTION_1
0x40000e9	          0x4889e5	                            mov rbp, rsp	       228	cache.h	FUNCTION_1
0x40000ec	        0x4883ec20	                           sub rsp, 0x20	       228	cache.h	FUNCTION_1
0x40000f0	        0x48897de8	             mov qword [rbp - 0x18], rdi	       228	cache.h	FUNCTION_1
0x40000f4	        0x488975e0	             mov qword [rbp - 0x20], rsi	       228	cache.h	FUNCTION_1
0x40000f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       229	cache.h	FUNCTION_1
0x40000fc	          0x8b4038	            mov eax, dword [rax + 0x38] 	       229	cache.h	FUNCTION_1
0x40000ff	      0x2500001000	                       and eax, 0x100000	       229	cache.h	FUNCTION_1
0x4000104	          0x8945fc	                mov dword [rbp - 4], eax	       229	cache.h	FUNCTION_1
0x4000107	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       232	cache.h	FUNCTION_1	CALL_1
0x400010b	        0x488d4810	                   lea rcx, [rax + 0x10]	       232	cache.h	FUNCTION_1	CALL_1
0x400010f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       232	cache.h	FUNCTION_1	CALL_1
0x4000113	        0x4883c010	                           add rax, 0x10	       232	cache.h	FUNCTION_1	CALL_1
0x4000117	      0xba48000000	                           mov edx, 0x48	       232	cache.h	FUNCTION_1	CALL_1
0x400011c	          0x4889ce	                            mov rsi, rcx	       232	cache.h	FUNCTION_1	CALL_1
0x400011f	          0x4889c7	                            mov rdi, rax	       232	cache.h	FUNCTION_1	CALL_1
0x4000122	      0xe800000000	                          call 0x4000127	       232	cache.h	FUNCTION_1	CALL_1
0x4000127	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       237	cache.h	FUNCTION_1
0x400012b	          0x8b4038	            mov eax, dword [rax + 0x38] 	       237	cache.h	FUNCTION_1
0x400012e	      0x25ffffefff	                     and eax, 0xffefffff	       237	cache.h	FUNCTION_1
0x4000133	           0xb45fc	                 or eax, dword [rbp - 4]	       237	cache.h	FUNCTION_1
0x4000136	            0x89c2	                            mov edx, eax	       237	cache.h	FUNCTION_1
0x4000138	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       237	cache.h	FUNCTION_1
0x400013c	          0x895038	             mov dword [rax + 0x38], edx	       237	cache.h	FUNCTION_1
0x400013f	              0x90	                                     nop	       238	cache.h	FUNCTION_1
0x4000140	              0xc9	                                   leave	       238	cache.h	FUNCTION_1
0x4000141	              0xc3	                                     ret	       238	cache.h	FUNCTION_1
save_or_free_index_entry	functions,0:DO,0:FOR,0:CALL,1:IF,1:WHILE,0:SWITCH,0:ELSE,1	52
0x4001078	              0x55	                                push rbp	       296	split-index.c	FUNCTION_39
0x4001079	          0x4889e5	                            mov rbp, rsp	       296	split-index.c	FUNCTION_39
0x400107c	        0x4883ec10	                           sub rsp, 0x10	       296	split-index.c	FUNCTION_39
0x4001080	        0x48897df8	                mov qword [rbp - 8], rdi	       296	split-index.c	FUNCTION_39
0x4001084	        0x488975f0	             mov qword [rbp - 0x10], rsi	       296	split-index.c	FUNCTION_39
0x4001088	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       297	split-index.c	FUNCTION_39	IF_1
0x400108c	          0x8b4040	            mov eax, dword [rax + 0x40] 	       297	split-index.c	FUNCTION_39	IF_1
0x400108f	            0x85c0	                           test eax, eax	       297	split-index.c	FUNCTION_39	IF_1
0x4001091	            0x747a	                            je 0x400110d	       297	split-index.c	FUNCTION_39	IF_1
0x4001093	        0x488b45f8	                mov rax, qword [rbp - 8]	       298	split-index.c	FUNCTION_39	IF_1
0x4001097	        0x488b4028	            mov rax, qword [rax + 0x28] 	       298	split-index.c	FUNCTION_39	IF_1
0x400109b	          0x4885c0	                           test rax, rax	       297	split-index.c	FUNCTION_39	IF_1
0x400109e	            0x746d	                            je 0x400110d	       297	split-index.c	FUNCTION_39	IF_1
0x40010a0	        0x488b45f8	                mov rax, qword [rbp - 8]	       299	split-index.c	FUNCTION_39	IF_1
0x40010a4	        0x488b4028	            mov rax, qword [rax + 0x28] 	       299	split-index.c	FUNCTION_39	IF_1
0x40010a8	        0x488b4018	            mov rax, qword [rax + 0x18] 	       299	split-index.c	FUNCTION_39	IF_1
0x40010ac	          0x4885c0	                           test rax, rax	       298	split-index.c	FUNCTION_39	IF_1
0x40010af	            0x745c	                            je 0x400110d	       298	split-index.c	FUNCTION_39	IF_1
0x40010b1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       300	split-index.c	FUNCTION_39	IF_1
0x40010b5	          0x8b5040	            mov edx, dword [rax + 0x40] 	       300	split-index.c	FUNCTION_39	IF_1
0x40010b8	        0x488b45f8	                mov rax, qword [rbp - 8]	       300	split-index.c	FUNCTION_39	IF_1
0x40010bc	        0x488b4028	            mov rax, qword [rax + 0x28] 	       300	split-index.c	FUNCTION_39	IF_1
0x40010c0	        0x488b4018	            mov rax, qword [rax + 0x18] 	       300	split-index.c	FUNCTION_39	IF_1
0x40010c4	          0x8b400c	              mov eax, dword [rax + 0xc]	       300	split-index.c	FUNCTION_39	IF_1
0x40010c7	            0x39c2	                            cmp edx, eax	       299	split-index.c	FUNCTION_39	IF_1
0x40010c9	            0x7742	                            ja 0x400110d	       299	split-index.c	FUNCTION_39	IF_1
0x40010cb	        0x488b45f8	                mov rax, qword [rbp - 8]	       301	split-index.c	FUNCTION_39	IF_1
0x40010cf	        0x488b4028	            mov rax, qword [rax + 0x28] 	       301	split-index.c	FUNCTION_39	IF_1
0x40010d3	        0x488b4018	            mov rax, qword [rax + 0x18] 	       301	split-index.c	FUNCTION_39	IF_1
0x40010d7	          0x488b10	                    mov rdx, qword [rax]	       301	split-index.c	FUNCTION_39	IF_1
0x40010da	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       301	split-index.c	FUNCTION_39	IF_1
0x40010de	          0x8b4040	            mov eax, dword [rax + 0x40] 	       301	split-index.c	FUNCTION_39	IF_1
0x40010e1	          0x83e801	                              sub eax, 1	       301	split-index.c	FUNCTION_39	IF_1
0x40010e4	            0x89c0	                            mov eax, eax	       301	split-index.c	FUNCTION_39	IF_1
0x40010e6	        0x48c1e003	                              shl rax, 3	       301	split-index.c	FUNCTION_39	IF_1
0x40010ea	          0x4801d0	                            add rax, rdx	       301	split-index.c	FUNCTION_39	IF_1
0x40010ed	          0x488b00	                    mov rax, qword [rax]	       301	split-index.c	FUNCTION_39	IF_1
0x40010f0	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       300	split-index.c	FUNCTION_39	IF_1
0x40010f4	            0x7517	                           jne 0x400110d	       300	split-index.c	FUNCTION_39	IF_1
0x40010f6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       302	split-index.c	FUNCTION_39	IF_1
0x40010fa	          0x8b4038	            mov eax, dword [rax + 0x38] 	       302	split-index.c	FUNCTION_39	IF_1
0x40010fd	       0xd00000200	                         or eax, 0x20000	       302	split-index.c	FUNCTION_39	IF_1
0x4001102	            0x89c2	                            mov edx, eax	       302	split-index.c	FUNCTION_39	IF_1
0x4001104	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       302	split-index.c	FUNCTION_39	IF_1
0x4001108	          0x895038	             mov dword [rax + 0x38], edx	       302	split-index.c	FUNCTION_39	IF_1
0x400110b	            0xeb0c	                           jmp 0x4001119	       302	split-index.c	FUNCTION_39	IF_1
0x400110d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       304	split-index.c	FUNCTION_39	CALL_1
0x4001111	          0x4889c7	                            mov rdi, rax	       304	split-index.c	FUNCTION_39	CALL_1
0x4001114	      0xe800000000	                          call 0x4001119	       304	split-index.c	FUNCTION_39	CALL_1
0x4001119	              0x90	                                     nop	       305	split-index.c	FUNCTION_39
0x400111a	              0xc9	                                   leave	       305	split-index.c	FUNCTION_39
0x400111b	              0xc3	                                     ret	       305	split-index.c	FUNCTION_39
move_cache_to_base_index	functions,0:DO,0:FOR,1:CALL,2:IF,0:WHILE,0:SWITCH,0:ELSE,0	131
0x4000425	              0x55	                                push rbp	        71	split-index.c	FUNCTION_32
0x4000426	          0x4889e5	                            mov rbp, rsp	        71	split-index.c	FUNCTION_32
0x4000429	              0x53	                                push rbx	        71	split-index.c	FUNCTION_32
0x400042a	        0x4883ec28	                           sub rsp, 0x28	        71	split-index.c	FUNCTION_32
0x400042e	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        71	split-index.c	FUNCTION_32
0x4000432	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        72	split-index.c	FUNCTION_32
0x4000436	        0x488b4028	            mov rax, qword [rax + 0x28] 	        72	split-index.c	FUNCTION_32
0x400043a	        0x488945e8	             mov qword [rbp - 0x18], rax	        72	split-index.c	FUNCTION_32
0x400043e	      0xbed0000000	                           mov esi, 0xd0	        80	split-index.c	FUNCTION_32	CALL_1
0x4000443	      0xbf01000000	                              mov edi, 1	        80	split-index.c	FUNCTION_32	CALL_1
0x4000448	      0xe800000000	                          call 0x400044d	        80	split-index.c	FUNCTION_32	CALL_1
0x400044d	          0x4889c2	                            mov rdx, rax	        80	split-index.c	FUNCTION_32	CALL_1
0x4000450	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        80	split-index.c	FUNCTION_32	CALL_1
0x4000454	        0x48895018	             mov qword [rax + 0x18], rdx	        80	split-index.c	FUNCTION_32	CALL_1
0x4000458	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        81	split-index.c	FUNCTION_32
0x400045c	        0x488b4018	            mov rax, qword [rax + 0x18] 	        81	split-index.c	FUNCTION_32
0x4000460	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        81	split-index.c	FUNCTION_32
0x4000464	          0x8b5208	                mov edx, dword [rdx + 8]	        81	split-index.c	FUNCTION_32
0x4000467	          0x895008	                mov dword [rax + 8], edx	        81	split-index.c	FUNCTION_32
0x400046a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        83	split-index.c	FUNCTION_32
0x400046e	        0x488b4018	            mov rax, qword [rax + 0x18] 	        83	split-index.c	FUNCTION_32
0x4000472	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        83	split-index.c	FUNCTION_32
0x4000476	        0x488b5230	            mov rdx, qword [rdx + 0x30] 	        83	split-index.c	FUNCTION_32
0x400047a	        0x48895030	             mov qword [rax + 0x30], rdx	        83	split-index.c	FUNCTION_32
0x400047e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        84	split-index.c	FUNCTION_32
0x4000482	          0x8b500c	              mov edx, dword [rax + 0xc]	        84	split-index.c	FUNCTION_32
0x4000485	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x4000489	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x400048d	          0x8b4010	            mov eax, dword [rax + 0x10] 	        84	split-index.c	FUNCTION_32
0x4000490	            0x39c2	                            cmp edx, eax	        84	split-index.c	FUNCTION_32
0x4000492	     0xf8696000000	                           jbe 0x400052e	        84	split-index.c	FUNCTION_32
0x4000498	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x400049c	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x40004a0	          0x8b5010	            mov edx, dword [rax + 0x10] 	        84	split-index.c	FUNCTION_32
0x40004a3	            0x89d0	                            mov eax, edx	        84	split-index.c	FUNCTION_32
0x40004a5	             0x1c0	                            add eax, eax	        84	split-index.c	FUNCTION_32
0x40004a7	             0x1d0	                            add eax, edx	        84	split-index.c	FUNCTION_32
0x40004a9	          0x83c030	                           add eax, 0x30	        84	split-index.c	FUNCTION_32
0x40004ac	            0xd1e8	                              shr eax, 1	        84	split-index.c	FUNCTION_32
0x40004ae	            0x89c2	                            mov edx, eax	        84	split-index.c	FUNCTION_32
0x40004b0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        84	split-index.c	FUNCTION_32
0x40004b4	          0x8b400c	              mov eax, dword [rax + 0xc]	        84	split-index.c	FUNCTION_32
0x40004b7	            0x39c2	                            cmp edx, eax	        84	split-index.c	FUNCTION_32
0x40004b9	            0x7314	                           jae 0x40004cf	        84	split-index.c	FUNCTION_32
0x40004bb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x40004bf	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x40004c3	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        84	split-index.c	FUNCTION_32
0x40004c7	          0x8b520c	              mov edx, dword [rdx + 0xc]	        84	split-index.c	FUNCTION_32
0x40004ca	          0x895010	             mov dword [rax + 0x10], edx	        84	split-index.c	FUNCTION_32
0x40004cd	            0xeb21	                           jmp 0x40004f0	        84	split-index.c	FUNCTION_32
0x40004cf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x40004d3	        0x488b4818	            mov rcx, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x40004d7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x40004db	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x40004df	          0x8b5010	            mov edx, dword [rax + 0x10] 	        84	split-index.c	FUNCTION_32
0x40004e2	            0x89d0	                            mov eax, edx	        84	split-index.c	FUNCTION_32
0x40004e4	             0x1c0	                            add eax, eax	        84	split-index.c	FUNCTION_32
0x40004e6	             0x1d0	                            add eax, edx	        84	split-index.c	FUNCTION_32
0x40004e8	          0x83c030	                           add eax, 0x30	        84	split-index.c	FUNCTION_32
0x40004eb	            0xd1e8	                              shr eax, 1	        84	split-index.c	FUNCTION_32
0x40004ed	          0x894110	             mov dword [rcx + 0x10], eax	        84	split-index.c	FUNCTION_32
0x40004f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x40004f4	        0x488b5818	            mov rbx, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x40004f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x40004fc	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x4000500	          0x8b4010	            mov eax, dword [rax + 0x10] 	        84	split-index.c	FUNCTION_32
0x4000503	            0x89c0	                            mov eax, eax	        84	split-index.c	FUNCTION_32
0x4000505	          0x4889c6	                            mov rsi, rax	        84	split-index.c	FUNCTION_32
0x4000508	      0xbf08000000	                              mov edi, 8	        84	split-index.c	FUNCTION_32
0x400050d	      0xe839fbffff	                        call sym.st_mult	        84	split-index.c	FUNCTION_32
0x4000512	          0x4889c2	                            mov rdx, rax	        84	split-index.c	FUNCTION_32
0x4000515	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        84	split-index.c	FUNCTION_32
0x4000519	        0x488b4018	            mov rax, qword [rax + 0x18] 	        84	split-index.c	FUNCTION_32
0x400051d	          0x488b00	                    mov rax, qword [rax]	        84	split-index.c	FUNCTION_32
0x4000520	          0x4889d6	                            mov rsi, rdx	        84	split-index.c	FUNCTION_32
0x4000523	          0x4889c7	                            mov rdi, rax	        84	split-index.c	FUNCTION_32
0x4000526	      0xe800000000	                          call 0x400052b	        84	split-index.c	FUNCTION_32
0x400052b	          0x488903	                    mov qword [rbx], rax	        84	split-index.c	FUNCTION_32
0x400052e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        85	split-index.c	FUNCTION_32
0x4000532	        0x488b4018	            mov rax, qword [rax + 0x18] 	        85	split-index.c	FUNCTION_32
0x4000536	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	        85	split-index.c	FUNCTION_32
0x400053a	          0x8b520c	              mov edx, dword [rdx + 0xc]	        85	split-index.c	FUNCTION_32
0x400053d	          0x89500c	              mov dword [rax + 0xc], edx	        85	split-index.c	FUNCTION_32
0x4000540	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        86	split-index.c	FUNCTION_32
0x4000544	          0x8b400c	              mov eax, dword [rax + 0xc]	        86	split-index.c	FUNCTION_32
0x4000547	            0x89c2	                            mov edx, eax	        86	split-index.c	FUNCTION_32
0x4000549	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        86	split-index.c	FUNCTION_32
0x400054d	          0x488b30	                    mov rsi, qword [rax]	        86	split-index.c	FUNCTION_32
0x4000550	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        86	split-index.c	FUNCTION_32
0x4000554	        0x488b4018	            mov rax, qword [rax + 0x18] 	        86	split-index.c	FUNCTION_32
0x4000558	          0x488b00	                    mov rax, qword [rax]	        86	split-index.c	FUNCTION_32
0x400055b	      0xb908000000	                              mov ecx, 8	        86	split-index.c	FUNCTION_32
0x4000560	          0x4889c7	                            mov rdi, rax	        86	split-index.c	FUNCTION_32
0x4000563	      0xe835fbffff	                     call sym.copy_array	        86	split-index.c	FUNCTION_32
0x4000568	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        87	split-index.c	FUNCTION_32	CALL_2
0x400056c	        0x488b4018	            mov rax, qword [rax + 0x18] 	        87	split-index.c	FUNCTION_32	CALL_2
0x4000570	          0x4889c7	                            mov rdi, rax	        87	split-index.c	FUNCTION_32	CALL_2
0x4000573	      0xe867feffff	        call sym.mark_base_index_entries	        87	split-index.c	FUNCTION_32	CALL_2
0x4000578	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	        88	split-index.c	FUNCTION_32	FOR_1
0x400057f	            0xeb46	                           jmp 0x40005c7	        88	split-index.c	FUNCTION_32	FOR_1
0x4000581	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        89	split-index.c	FUNCTION_32	FOR_1
0x4000585	        0x488b4018	            mov rax, qword [rax + 0x18] 	        89	split-index.c	FUNCTION_32	FOR_1
0x4000589	          0x488b00	                    mov rax, qword [rax]	        89	split-index.c	FUNCTION_32	FOR_1
0x400058c	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	        89	split-index.c	FUNCTION_32	FOR_1
0x400058f	          0x4863d2	                         movsxd rdx, edx	        89	split-index.c	FUNCTION_32	FOR_1
0x4000592	        0x48c1e203	                              shl rdx, 3	        89	split-index.c	FUNCTION_32	FOR_1
0x4000596	          0x4801d0	                            add rax, rdx	        89	split-index.c	FUNCTION_32	FOR_1
0x4000599	          0x488b00	                    mov rax, qword [rax]	        89	split-index.c	FUNCTION_32	FOR_1
0x400059c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        89	split-index.c	FUNCTION_32	FOR_1
0x40005a0	        0x488b5218	            mov rdx, qword [rdx + 0x18] 	        89	split-index.c	FUNCTION_32	FOR_1
0x40005a4	          0x488b12	                    mov rdx, qword [rdx]	        89	split-index.c	FUNCTION_32	FOR_1
0x40005a7	          0x8b4de4	             mov ecx, dword [rbp - 0x1c]	        89	split-index.c	FUNCTION_32	FOR_1
0x40005aa	          0x4863c9	                         movsxd rcx, ecx	        89	split-index.c	FUNCTION_32	FOR_1
0x40005ad	        0x48c1e103	                              shl rcx, 3	        89	split-index.c	FUNCTION_32	FOR_1
0x40005b1	          0x4801ca	                            add rdx, rcx	        89	split-index.c	FUNCTION_32	FOR_1
0x40005b4	          0x488b12	                    mov rdx, qword [rdx]	        89	split-index.c	FUNCTION_32	FOR_1
0x40005b7	          0x8b5238	            mov edx, dword [rdx + 0x38] 	        89	split-index.c	FUNCTION_32	FOR_1
0x40005ba	    0x81e2fffffff7	                     and edx, 0xf7ffffff	        89	split-index.c	FUNCTION_32	FOR_1
0x40005c0	          0x895038	             mov dword [rax + 0x38], edx	        89	split-index.c	FUNCTION_32	FOR_1
0x40005c3	        0x8345e401	               add dword [rbp - 0x1c], 1	        88	split-index.c	FUNCTION_32	FOR_1
0x40005c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        88	split-index.c	FUNCTION_32	FOR_1
0x40005cb	        0x488b4018	            mov rax, qword [rax + 0x18] 	        88	split-index.c	FUNCTION_32	FOR_1
0x40005cf	          0x8b500c	              mov edx, dword [rax + 0xc]	        88	split-index.c	FUNCTION_32	FOR_1
0x40005d2	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	        88	split-index.c	FUNCTION_32	FOR_1
0x40005d5	            0x39c2	                            cmp edx, eax	        88	split-index.c	FUNCTION_32	FOR_1
0x40005d7	            0x77a8	                            ja 0x4000581	        88	split-index.c	FUNCTION_32	FOR_1
0x40005d9	              0x90	                                     nop	        90	split-index.c	FUNCTION_32
0x40005da	        0x4883c428	                           add rsp, 0x28	        90	split-index.c	FUNCTION_32
0x40005de	              0x5b	                                 pop rbx	        90	split-index.c	FUNCTION_32
0x40005df	              0x5d	                                 pop rbp	        90	split-index.c	FUNCTION_32
0x40005e0	              0xc3	                                     ret	        90	split-index.c	FUNCTION_32
replace_entry	functions,0:DO,0:FOR,0:CALL,6:IF,4:WHILE,0:SWITCH,0:ELSE,0	103
0x4000670	              0x55	                                push rbp	       103	split-index.c	FUNCTION_34
0x4000671	          0x4889e5	                            mov rbp, rsp	       103	split-index.c	FUNCTION_34
0x4000674	        0x4883ec30	                           sub rsp, 0x30	       103	split-index.c	FUNCTION_34
0x4000678	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       103	split-index.c	FUNCTION_34
0x400067c	        0x488975d0	             mov qword [rbp - 0x30], rsi	       103	split-index.c	FUNCTION_34
0x4000680	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       104	split-index.c	FUNCTION_34
0x4000684	        0x488945e0	             mov qword [rbp - 0x20], rax	       104	split-index.c	FUNCTION_34
0x4000688	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       105	split-index.c	FUNCTION_34
0x400068c	        0x488b4028	            mov rax, qword [rax + 0x28] 	       105	split-index.c	FUNCTION_34
0x4000690	        0x488945e8	             mov qword [rbp - 0x18], rax	       105	split-index.c	FUNCTION_34
0x4000694	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       108	split-index.c	FUNCTION_34	IF_1
0x4000698	          0x8b400c	              mov eax, dword [rax + 0xc]	       108	split-index.c	FUNCTION_34	IF_1
0x400069b	            0x89c0	                            mov eax, eax	       108	split-index.c	FUNCTION_34	IF_1
0x400069d	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       108	split-index.c	FUNCTION_34	IF_1
0x40006a1	            0x7720	                            ja 0x40006c3	       108	split-index.c	FUNCTION_34	IF_1
0x40006a3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006a7	          0x8b400c	              mov eax, dword [rax + 0xc]	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006aa	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006ae	            0x89d1	                            mov ecx, edx	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006b0	            0x89c2	                            mov edx, eax	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006b2	            0x89ce	                            mov esi, ecx	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006b4	      0xbf00000000	                              mov edi, 0	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006b9	      0xb800000000	                              mov eax, 0	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006be	      0xe800000000	                          call 0x40006c3	       109	split-index.c	FUNCTION_34	IF_1	CALL_1
0x40006c3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       111	split-index.c	FUNCTION_34	IF_2
0x40006c7	          0x8b5040	            mov edx, dword [rax + 0x40] 	       111	split-index.c	FUNCTION_34	IF_2
0x40006ca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       111	split-index.c	FUNCTION_34	IF_2
0x40006ce	          0x8b4038	            mov eax, dword [rax + 0x38] 	       111	split-index.c	FUNCTION_34	IF_2
0x40006d1	            0x39c2	                            cmp edx, eax	       111	split-index.c	FUNCTION_34	IF_2
0x40006d3	            0x721f	                            jb 0x40006f4	       111	split-index.c	FUNCTION_34	IF_2
0x40006d5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006d9	          0x8b5038	            mov edx, dword [rax + 0x38] 	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006dc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006e0	          0x8b4040	            mov eax, dword [rax + 0x40] 	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006e3	            0x89c6	                            mov esi, eax	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006e5	      0xbf00000000	                              mov edi, 0	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006ea	      0xb800000000	                              mov eax, 0	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006ef	      0xe800000000	                          call 0x40006f4	       112	split-index.c	FUNCTION_34	IF_2	CALL_2
0x40006f4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       114	split-index.c	FUNCTION_34
0x40006f8	          0x488b00	                    mov rax, qword [rax]	       114	split-index.c	FUNCTION_34
0x40006fb	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       114	split-index.c	FUNCTION_34
0x40006ff	        0x48c1e203	                              shl rdx, 3	       114	split-index.c	FUNCTION_34
0x4000703	          0x4801d0	                            add rax, rdx	       114	split-index.c	FUNCTION_34
0x4000706	          0x488b00	                    mov rax, qword [rax]	       114	split-index.c	FUNCTION_34
0x4000709	        0x488945f0	             mov qword [rbp - 0x10], rax	       114	split-index.c	FUNCTION_34
0x400070d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       115	split-index.c	FUNCTION_34	IF_3
0x4000711	          0x8b4038	            mov eax, dword [rax + 0x38] 	       115	split-index.c	FUNCTION_34	IF_3
0x4000714	      0x2500000200	                        and eax, 0x20000	       115	split-index.c	FUNCTION_34	IF_3
0x4000719	            0x85c0	                           test eax, eax	       115	split-index.c	FUNCTION_34	IF_3
0x400071b	            0x7415	                            je 0x4000732	       115	split-index.c	FUNCTION_34	IF_3
0x400071d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       116	split-index.c	FUNCTION_34	IF_3	CALL_3
0x4000721	            0x89c6	                            mov esi, eax	       116	split-index.c	FUNCTION_34	IF_3	CALL_3
0x4000723	      0xbf00000000	                              mov edi, 0	       116	split-index.c	FUNCTION_34	IF_3	CALL_3
0x4000728	      0xb800000000	                              mov eax, 0	       116	split-index.c	FUNCTION_34	IF_3	CALL_3
0x400072d	      0xe800000000	                          call 0x4000732	       116	split-index.c	FUNCTION_34	IF_3	CALL_3
0x4000732	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       118	split-index.c	FUNCTION_34
0x4000736	        0x488b5030	            mov rdx, qword [rax + 0x30] 	       118	split-index.c	FUNCTION_34
0x400073a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       118	split-index.c	FUNCTION_34
0x400073e	          0x8b4040	            mov eax, dword [rax + 0x40] 	       118	split-index.c	FUNCTION_34
0x4000741	            0x89c0	                            mov eax, eax	       118	split-index.c	FUNCTION_34
0x4000743	        0x48c1e003	                              shl rax, 3	       118	split-index.c	FUNCTION_34
0x4000747	          0x4801d0	                            add rax, rdx	       118	split-index.c	FUNCTION_34
0x400074a	          0x488b00	                    mov rax, qword [rax]	       118	split-index.c	FUNCTION_34
0x400074d	        0x488945f8	                mov qword [rbp - 8], rax	       118	split-index.c	FUNCTION_34
0x4000751	        0x488b45f8	                mov rax, qword [rbp - 8]	       119	split-index.c	FUNCTION_34	IF_4
0x4000755	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       119	split-index.c	FUNCTION_34	IF_4
0x4000758	            0x85c0	                           test eax, eax	       119	split-index.c	FUNCTION_34	IF_4
0x400075a	            0x7415	                            je 0x4000771	       119	split-index.c	FUNCTION_34	IF_4
0x400075c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       120	split-index.c	FUNCTION_34	IF_4	CALL_4
0x4000760	            0x89c6	                            mov esi, eax	       120	split-index.c	FUNCTION_34	IF_4	CALL_4
0x4000762	      0xbf00000000	                              mov edi, 0	       120	split-index.c	FUNCTION_34	IF_4	CALL_4
0x4000767	      0xb800000000	                              mov eax, 0	       120	split-index.c	FUNCTION_34	IF_4	CALL_4
0x400076c	      0xe800000000	                          call 0x4000771	       120	split-index.c	FUNCTION_34	IF_4	CALL_4
0x4000771	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       122	split-index.c	FUNCTION_34
0x4000775	          0x8d5001	                      lea edx, [rax + 1]	       122	split-index.c	FUNCTION_34
0x4000778	        0x488b45f8	                mov rax, qword [rbp - 8]	       122	split-index.c	FUNCTION_34
0x400077c	          0x895040	             mov dword [rax + 0x40], edx	       122	split-index.c	FUNCTION_34
0x400077f	        0x488b45f8	                mov rax, qword [rbp - 8]	       123	split-index.c	FUNCTION_34
0x4000783	          0x8b4038	            mov eax, dword [rax + 0x38] 	       123	split-index.c	FUNCTION_34
0x4000786	       0xd00000008	                    or eax, section_end.	       123	split-index.c	FUNCTION_34
0x400078b	            0x89c2	                            mov edx, eax	       123	split-index.c	FUNCTION_34
0x400078d	        0x488b45f8	                mov rax, qword [rbp - 8]	       123	split-index.c	FUNCTION_34
0x4000791	          0x895038	             mov dword [rax + 0x38], edx	       123	split-index.c	FUNCTION_34
0x4000794	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       124	split-index.c	FUNCTION_34
0x4000798	          0x8b503c	            mov edx, dword [rax + 0x3c] 	       124	split-index.c	FUNCTION_34
0x400079b	        0x488b45f8	                mov rax, qword [rbp - 8]	       124	split-index.c	FUNCTION_34
0x400079f	          0x89503c	             mov dword [rax + 0x3c], edx	       124	split-index.c	FUNCTION_34
0x40007a2	        0x488b55f8	                mov rdx, qword [rbp - 8]	       125	split-index.c	FUNCTION_34	CALL_5
0x40007a6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       125	split-index.c	FUNCTION_34	CALL_5
0x40007aa	          0x4889d6	                            mov rsi, rdx	       125	split-index.c	FUNCTION_34	CALL_5
0x40007ad	          0x4889c7	                            mov rdi, rax	       125	split-index.c	FUNCTION_34	CALL_5
0x40007b0	      0xe833f9ffff	               call sym.copy_cache_entry	       125	split-index.c	FUNCTION_34	CALL_5
0x40007b5	        0x488b45f8	                mov rax, qword [rbp - 8]	       126	split-index.c	FUNCTION_34	CALL_6
0x40007b9	          0x4889c7	                            mov rdi, rax	       126	split-index.c	FUNCTION_34	CALL_6
0x40007bc	      0xe800000000	                          call 0x40007c1	       126	split-index.c	FUNCTION_34	CALL_6
0x40007c1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       127	split-index.c	FUNCTION_34
0x40007c5	          0x8b4040	            mov eax, dword [rax + 0x40] 	       127	split-index.c	FUNCTION_34
0x40007c8	          0x8d5001	                      lea edx, [rax + 1]	       127	split-index.c	FUNCTION_34
0x40007cb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       127	split-index.c	FUNCTION_34
0x40007cf	          0x895040	             mov dword [rax + 0x40], edx	       127	split-index.c	FUNCTION_34
0x40007d2	              0x90	                                     nop	       128	split-index.c	FUNCTION_34
0x40007d3	              0xc9	                                   leave	       128	split-index.c	FUNCTION_34
0x40007d4	              0xc3	                                     ret	       128	split-index.c	FUNCTION_34
read_link_extension	functions,0:DO,0:FOR,0:CALL,6:IF,5:WHILE,0:SWITCH,0:ELSE,0	86
0x400020a	              0x55	                                push rbp	        16	split-index.c	FUNCTION_29
0x400020b	          0x4889e5	                            mov rbp, rsp	        16	split-index.c	FUNCTION_29
0x400020e	        0x4883ec40	                           sub rsp, 0x40	        16	split-index.c	FUNCTION_29
0x4000212	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        16	split-index.c	FUNCTION_29
0x4000216	        0x488975d0	             mov qword [rbp - 0x30], rsi	        16	split-index.c	FUNCTION_29
0x400021a	        0x488955c8	             mov qword [rbp - 0x38], rdx	        16	split-index.c	FUNCTION_29
0x400021e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        17	split-index.c	FUNCTION_29
0x4000222	        0x488945f0	             mov qword [rbp - 0x10], rax	        17	split-index.c	FUNCTION_29
0x4000226	      0x48837dc813	           cmp qword [rbp - 0x38], 0x13 	        21	split-index.c	FUNCTION_29	IF_1
0x400022b	            0x7719	                            ja 0x4000246	        21	split-index.c	FUNCTION_29	IF_1
0x400022d	      0xbf00000000	                              mov edi, 0	        22	split-index.c	FUNCTION_29	IF_1
0x4000232	      0xb800000000	                              mov eax, 0	        22	split-index.c	FUNCTION_29	IF_1
0x4000237	      0xe800000000	                          call 0x400023c	        22	split-index.c	FUNCTION_29	IF_1
0x400023c	      0xe8fffdffff	                    call sym.const_error	        22	split-index.c	FUNCTION_29	IF_1
0x4000241	      0xe90d010000	                           jmp 0x4000353	        22	split-index.c	FUNCTION_29	IF_1
0x4000246	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        23	split-index.c	FUNCTION_29	CALL_1
0x400024a	          0x4889c7	                            mov rdi, rax	        23	split-index.c	FUNCTION_29	CALL_1
0x400024d	      0xe800000000	                          call 0x4000252	        23	split-index.c	FUNCTION_29	CALL_1
0x4000252	        0x488945f8	                mov qword [rbp - 8], rax	        23	split-index.c	FUNCTION_29	CALL_1
0x4000256	        0x488b45f8	                mov rax, qword [rbp - 8]	        24	split-index.c	FUNCTION_29	CALL_2
0x400025a	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        24	split-index.c	FUNCTION_29	CALL_2
0x400025e	          0x4889d6	                            mov rsi, rdx	        24	split-index.c	FUNCTION_29	CALL_2
0x4000261	          0x4889c7	                            mov rdi, rax	        24	split-index.c	FUNCTION_29	CALL_2
0x4000264	      0xe82affffff	                        call sym.hashcpy	        24	split-index.c	FUNCTION_29	CALL_2
0x4000269	      0x488345f014	            add qword [rbp - 0x10], 0x14	        25	split-index.c	FUNCTION_29
0x400026e	      0x48836dc814	            sub qword [rbp - 0x38], 0x14	        26	split-index.c	FUNCTION_29
0x4000273	      0x48837dc800	               cmp qword [rbp - 0x38], 0	        27	split-index.c	FUNCTION_29	IF_2
0x4000278	            0x750a	                           jne 0x4000284	        27	split-index.c	FUNCTION_29	IF_2
0x400027a	      0xb800000000	                              mov eax, 0	        28	split-index.c	FUNCTION_29	IF_2
0x400027f	      0xe9cf000000	                           jmp 0x4000353	        28	split-index.c	FUNCTION_29	IF_2
0x4000284	      0xe800000000	                          call 0x4000289	        29	split-index.c	FUNCTION_29	CALL_3
0x4000289	          0x4889c2	                            mov rdx, rax	        29	split-index.c	FUNCTION_29	CALL_3
0x400028c	        0x488b45f8	                mov rax, qword [rbp - 8]	        29	split-index.c	FUNCTION_29	CALL_3
0x4000290	        0x48895020	             mov qword [rax + 0x20], rdx	        29	split-index.c	FUNCTION_29	CALL_3
0x4000294	        0x488b45f8	                mov rax, qword [rbp - 8]	        30	split-index.c	FUNCTION_29	CALL_4
0x4000298	        0x488b4020	            mov rax, qword [rax + 0x20] 	        30	split-index.c	FUNCTION_29	CALL_4
0x400029c	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	        30	split-index.c	FUNCTION_29	CALL_4
0x40002a0	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        30	split-index.c	FUNCTION_29	CALL_4
0x40002a4	          0x4889ce	                            mov rsi, rcx	        30	split-index.c	FUNCTION_29	CALL_4
0x40002a7	          0x4889c7	                            mov rdi, rax	        30	split-index.c	FUNCTION_29	CALL_4
0x40002aa	      0xe800000000	                          call 0x40002af	        30	split-index.c	FUNCTION_29	CALL_4
0x40002af	          0x8945ec	             mov dword [rbp - 0x14], eax	        30	split-index.c	FUNCTION_29	CALL_4
0x40002b2	        0x837dec00	               cmp dword [rbp - 0x14], 0	        31	split-index.c	FUNCTION_29	IF_3
0x40002b6	            0x7919	                           jns 0x40002d1	        31	split-index.c	FUNCTION_29	IF_3
0x40002b8	      0xbf00000000	                              mov edi, 0	        32	split-index.c	FUNCTION_29	IF_3
0x40002bd	      0xb800000000	                              mov eax, 0	        32	split-index.c	FUNCTION_29	IF_3
0x40002c2	      0xe800000000	                          call 0x40002c7	        32	split-index.c	FUNCTION_29	IF_3
0x40002c7	      0xe874fdffff	                    call sym.const_error	        32	split-index.c	FUNCTION_29	IF_3
0x40002cc	      0xe982000000	                           jmp 0x4000353	        32	split-index.c	FUNCTION_29	IF_3
0x40002d1	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        33	split-index.c	FUNCTION_29
0x40002d4	            0x4898	                                    cdqe	        33	split-index.c	FUNCTION_29
0x40002d6	        0x480145f0	            add qword [rbp - 0x10], rax 	        33	split-index.c	FUNCTION_29
0x40002da	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        34	split-index.c	FUNCTION_29
0x40002dd	            0x4898	                                    cdqe	        34	split-index.c	FUNCTION_29
0x40002df	        0x482945c8	             sub qword [rbp - 0x38], rax	        34	split-index.c	FUNCTION_29
0x40002e3	      0xe800000000	                          call 0x40002e8	        35	split-index.c	FUNCTION_29	CALL_5
0x40002e8	          0x4889c2	                            mov rdx, rax	        35	split-index.c	FUNCTION_29	CALL_5
0x40002eb	        0x488b45f8	                mov rax, qword [rbp - 8]	        35	split-index.c	FUNCTION_29	CALL_5
0x40002ef	        0x48895028	             mov qword [rax + 0x28], rdx	        35	split-index.c	FUNCTION_29	CALL_5
0x40002f3	        0x488b45f8	                mov rax, qword [rbp - 8]	        36	split-index.c	FUNCTION_29	CALL_6
0x40002f7	        0x488b4028	            mov rax, qword [rax + 0x28] 	        36	split-index.c	FUNCTION_29	CALL_6
0x40002fb	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	        36	split-index.c	FUNCTION_29	CALL_6
0x40002ff	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        36	split-index.c	FUNCTION_29	CALL_6
0x4000303	          0x4889ce	                            mov rsi, rcx	        36	split-index.c	FUNCTION_29	CALL_6
0x4000306	          0x4889c7	                            mov rdi, rax	        36	split-index.c	FUNCTION_29	CALL_6
0x4000309	      0xe800000000	                          call 0x400030e	        36	split-index.c	FUNCTION_29	CALL_6
0x400030e	          0x8945ec	             mov dword [rbp - 0x14], eax	        36	split-index.c	FUNCTION_29	CALL_6
0x4000311	        0x837dec00	               cmp dword [rbp - 0x14], 0	        37	split-index.c	FUNCTION_29	IF_4
0x4000315	            0x7916	                           jns 0x400032d	        37	split-index.c	FUNCTION_29	IF_4
0x4000317	      0xbf00000000	                              mov edi, 0	        38	split-index.c	FUNCTION_29	IF_4
0x400031c	      0xb800000000	                              mov eax, 0	        38	split-index.c	FUNCTION_29	IF_4
0x4000321	      0xe800000000	                          call 0x4000326	        38	split-index.c	FUNCTION_29	IF_4
0x4000326	      0xe815fdffff	                    call sym.const_error	        38	split-index.c	FUNCTION_29	IF_4
0x400032b	            0xeb26	                           jmp 0x4000353	        38	split-index.c	FUNCTION_29	IF_4
0x400032d	          0x8b45ec	             mov eax, dword [rbp - 0x14]	        39	split-index.c	FUNCTION_29	IF_5
0x4000330	            0x4898	                                    cdqe	        39	split-index.c	FUNCTION_29	IF_5
0x4000332	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	        39	split-index.c	FUNCTION_29	IF_5
0x4000336	            0x7416	                            je 0x400034e	        39	split-index.c	FUNCTION_29	IF_5
0x4000338	      0xbf00000000	                              mov edi, 0	        40	split-index.c	FUNCTION_29	IF_5
0x400033d	      0xb800000000	                              mov eax, 0	        40	split-index.c	FUNCTION_29	IF_5
0x4000342	      0xe800000000	                          call 0x4000347	        40	split-index.c	FUNCTION_29	IF_5
0x4000347	      0xe8f4fcffff	                    call sym.const_error	        40	split-index.c	FUNCTION_29	IF_5
0x400034c	            0xeb05	                           jmp 0x4000353	        40	split-index.c	FUNCTION_29	IF_5
0x400034e	      0xb800000000	                              mov eax, 0	        41	split-index.c	FUNCTION_29
0x4000353	              0xc9	                                   leave	        42	split-index.c	FUNCTION_29
0x4000354	              0xc3	                                     ret	        42	split-index.c	FUNCTION_29
mark_base_index_entries	functions,0:DO,0:FOR,1:CALL,0:IF,0:WHILE,0:SWITCH,0:ELSE,0	24
0x40003df	              0x55	                                push rbp	        57	split-index.c	FUNCTION_31
0x40003e0	          0x4889e5	                            mov rbp, rsp	        57	split-index.c	FUNCTION_31
0x40003e3	        0x48897de8	             mov qword [rbp - 0x18], rdi	        57	split-index.c	FUNCTION_31
0x40003e7	    0xc745fc000000	                  mov dword [rbp - 4], 0	        66	split-index.c	FUNCTION_31	FOR_1
0x40003ee	            0xeb24	                           jmp 0x4000414	        66	split-index.c	FUNCTION_31	FOR_1
0x40003f0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        67	split-index.c	FUNCTION_31	FOR_1
0x40003f4	          0x488b00	                    mov rax, qword [rax]	        67	split-index.c	FUNCTION_31	FOR_1
0x40003f7	          0x8b55fc	                mov edx, dword [rbp - 4]	        67	split-index.c	FUNCTION_31	FOR_1
0x40003fa	          0x4863d2	                         movsxd rdx, edx	        67	split-index.c	FUNCTION_31	FOR_1
0x40003fd	        0x48c1e203	                              shl rdx, 3	        67	split-index.c	FUNCTION_31	FOR_1
0x4000401	          0x4801d0	                            add rax, rdx	        67	split-index.c	FUNCTION_31	FOR_1
0x4000404	          0x488b00	                    mov rax, qword [rax]	        67	split-index.c	FUNCTION_31	FOR_1
0x4000407	          0x8b55fc	                mov edx, dword [rbp - 4]	        67	split-index.c	FUNCTION_31	FOR_1
0x400040a	          0x83c201	                              add edx, 1	        67	split-index.c	FUNCTION_31	FOR_1
0x400040d	          0x895040	             mov dword [rax + 0x40], edx	        67	split-index.c	FUNCTION_31	FOR_1
0x4000410	        0x8345fc01	                  add dword [rbp - 4], 1	        66	split-index.c	FUNCTION_31	FOR_1
0x4000414	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        66	split-index.c	FUNCTION_31	FOR_1
0x4000418	          0x8b500c	              mov edx, dword [rax + 0xc]	        66	split-index.c	FUNCTION_31	FOR_1
0x400041b	          0x8b45fc	                mov eax, dword [rbp - 4]	        66	split-index.c	FUNCTION_31	FOR_1
0x400041e	            0x39c2	                            cmp edx, eax	        66	split-index.c	FUNCTION_31	FOR_1
0x4000420	            0x77ce	                            ja 0x40003f0	        66	split-index.c	FUNCTION_31	FOR_1
0x4000422	              0x90	                                     nop	        68	split-index.c	FUNCTION_31
0x4000423	              0x5d	                                 pop rbp	        68	split-index.c	FUNCTION_31
0x4000424	              0xc3	                                     ret	        68	split-index.c	FUNCTION_31
remove_split_index	functions,0:DO,0:FOR,0:CALL,0:IF,1:WHILE,0:SWITCH,0:ELSE,0	18
0x4001250	              0x55	                                push rbp	       331	split-index.c	FUNCTION_42
0x4001251	          0x4889e5	                            mov rbp, rsp	       331	split-index.c	FUNCTION_42
0x4001254	        0x48897df8	                mov qword [rbp - 8], rdi	       331	split-index.c	FUNCTION_42
0x4001258	        0x488b45f8	                mov rax, qword [rbp - 8]	       332	split-index.c	FUNCTION_42	IF_1
0x400125c	        0x488b4028	            mov rax, qword [rax + 0x28] 	       332	split-index.c	FUNCTION_42	IF_1
0x4001260	          0x4885c0	                           test rax, rax	       332	split-index.c	FUNCTION_42	IF_1
0x4001263	            0x741f	                            je 0x4001284	       332	split-index.c	FUNCTION_42	IF_1
0x4001265	        0x488b45f8	                mov rax, qword [rbp - 8]	       339	split-index.c	FUNCTION_42	IF_1
0x4001269	    0x48c740280000	               mov qword [rax + 0x28], 0	       339	split-index.c	FUNCTION_42	IF_1
0x4001271	        0x488b45f8	                mov rax, qword [rbp - 8]	       340	split-index.c	FUNCTION_42	IF_1
0x4001275	          0x8b4014	            mov eax, dword [rax + 0x14] 	       340	split-index.c	FUNCTION_42	IF_1
0x4001278	          0x83c801	                               or eax, 1	       340	split-index.c	FUNCTION_42	IF_1
0x400127b	            0x89c2	                            mov edx, eax	       340	split-index.c	FUNCTION_42	IF_1
0x400127d	        0x488b45f8	                mov rax, qword [rbp - 8]	       340	split-index.c	FUNCTION_42	IF_1
0x4001281	          0x895014	             mov dword [rax + 0x14], edx	       340	split-index.c	FUNCTION_42	IF_1
0x4001284	              0x90	                                     nop	       342	split-index.c	FUNCTION_42
0x4001285	              0x5d	                                 pop rbp	       342	split-index.c	FUNCTION_42
0x4001286	              0xc3	                                     ret	       342	split-index.c	FUNCTION_42
merge_base_index	functions,0:DO,0:FOR,1:CALL,8:IF,2:WHILE,0:SWITCH,0:ELSE,0	173
0x40007d5	              0x55	                                push rbp	       131	split-index.c	FUNCTION_35
0x40007d6	          0x4889e5	                            mov rbp, rsp	       131	split-index.c	FUNCTION_35
0x40007d9	        0x4883ec20	                           sub rsp, 0x20	       131	split-index.c	FUNCTION_35
0x40007dd	        0x48897de8	             mov qword [rbp - 0x18], rdi	       131	split-index.c	FUNCTION_35
0x40007e1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       132	split-index.c	FUNCTION_35
0x40007e5	        0x488b4028	            mov rax, qword [rax + 0x28] 	       132	split-index.c	FUNCTION_35
0x40007e9	        0x488945f8	                mov qword [rbp - 8], rax	       132	split-index.c	FUNCTION_35
0x40007ed	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	split-index.c	FUNCTION_35	CALL_1
0x40007f1	        0x488b4018	            mov rax, qword [rax + 0x18] 	       135	split-index.c	FUNCTION_35	CALL_1
0x40007f5	          0x4889c7	                            mov rdi, rax	       135	split-index.c	FUNCTION_35	CALL_1
0x40007f8	      0xe8e2fbffff	        call sym.mark_base_index_entries	       135	split-index.c	FUNCTION_35	CALL_1
0x40007fd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       137	split-index.c	FUNCTION_35
0x4000801	          0x488b10	                    mov rdx, qword [rax]	       137	split-index.c	FUNCTION_35
0x4000804	        0x488b45f8	                mov rax, qword [rbp - 8]	       137	split-index.c	FUNCTION_35
0x4000808	        0x48895030	             mov qword [rax + 0x30], rdx	       137	split-index.c	FUNCTION_35
0x400080c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       138	split-index.c	FUNCTION_35
0x4000810	          0x8b500c	              mov edx, dword [rax + 0xc]	       138	split-index.c	FUNCTION_35
0x4000813	        0x488b45f8	                mov rax, qword [rbp - 8]	       138	split-index.c	FUNCTION_35
0x4000817	          0x895038	             mov dword [rax + 0x38], edx	       138	split-index.c	FUNCTION_35
0x400081a	        0x488b45f8	                mov rax, qword [rbp - 8]	       139	split-index.c	FUNCTION_35
0x400081e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       139	split-index.c	FUNCTION_35
0x4000822	          0x8b500c	              mov edx, dword [rax + 0xc]	       139	split-index.c	FUNCTION_35
0x4000825	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       139	split-index.c	FUNCTION_35
0x4000829	          0x89500c	              mov dword [rax + 0xc], edx	       139	split-index.c	FUNCTION_35
0x400082c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       140	split-index.c	FUNCTION_35
0x4000830	    0x48c700000000	                      mov qword [rax], 0	       140	split-index.c	FUNCTION_35
0x4000837	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       141	split-index.c	FUNCTION_35
0x400083b	    0xc74010000000	               mov dword [rax + 0x10], 0	       141	split-index.c	FUNCTION_35
0x4000842	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x4000846	          0x8b500c	              mov edx, dword [rax + 0xc]	       142	split-index.c	FUNCTION_35
0x4000849	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x400084d	          0x8b4010	            mov eax, dword [rax + 0x10] 	       142	split-index.c	FUNCTION_35
0x4000850	            0x39c2	                            cmp edx, eax	       142	split-index.c	FUNCTION_35
0x4000852	            0x767f	                           jbe 0x40008d3	       142	split-index.c	FUNCTION_35
0x4000854	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x4000858	          0x8b5010	            mov edx, dword [rax + 0x10] 	       142	split-index.c	FUNCTION_35
0x400085b	            0x89d0	                            mov eax, edx	       142	split-index.c	FUNCTION_35
0x400085d	             0x1c0	                            add eax, eax	       142	split-index.c	FUNCTION_35
0x400085f	             0x1d0	                            add eax, edx	       142	split-index.c	FUNCTION_35
0x4000861	          0x83c030	                           add eax, 0x30	       142	split-index.c	FUNCTION_35
0x4000864	            0xd1e8	                              shr eax, 1	       142	split-index.c	FUNCTION_35
0x4000866	            0x89c2	                            mov edx, eax	       142	split-index.c	FUNCTION_35
0x4000868	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x400086c	          0x8b400c	              mov eax, dword [rax + 0xc]	       142	split-index.c	FUNCTION_35
0x400086f	            0x39c2	                            cmp edx, eax	       142	split-index.c	FUNCTION_35
0x4000871	            0x7310	                           jae 0x4000883	       142	split-index.c	FUNCTION_35
0x4000873	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x4000877	          0x8b500c	              mov edx, dword [rax + 0xc]	       142	split-index.c	FUNCTION_35
0x400087a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x400087e	          0x895010	             mov dword [rax + 0x10], edx	       142	split-index.c	FUNCTION_35
0x4000881	            0xeb1b	                           jmp 0x400089e	       142	split-index.c	FUNCTION_35
0x4000883	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x4000887	          0x8b5010	            mov edx, dword [rax + 0x10] 	       142	split-index.c	FUNCTION_35
0x400088a	            0x89d0	                            mov eax, edx	       142	split-index.c	FUNCTION_35
0x400088c	             0x1c0	                            add eax, eax	       142	split-index.c	FUNCTION_35
0x400088e	             0x1d0	                            add eax, edx	       142	split-index.c	FUNCTION_35
0x4000890	          0x83c030	                           add eax, 0x30	       142	split-index.c	FUNCTION_35
0x4000893	            0xd1e8	                              shr eax, 1	       142	split-index.c	FUNCTION_35
0x4000895	            0x89c2	                            mov edx, eax	       142	split-index.c	FUNCTION_35
0x4000897	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x400089b	          0x895010	             mov dword [rax + 0x10], edx	       142	split-index.c	FUNCTION_35
0x400089e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x40008a2	          0x8b4010	            mov eax, dword [rax + 0x10] 	       142	split-index.c	FUNCTION_35
0x40008a5	            0x89c0	                            mov eax, eax	       142	split-index.c	FUNCTION_35
0x40008a7	          0x4889c6	                            mov rsi, rax	       142	split-index.c	FUNCTION_35
0x40008aa	      0xbf08000000	                              mov edi, 8	       142	split-index.c	FUNCTION_35
0x40008af	      0xe897f7ffff	                        call sym.st_mult	       142	split-index.c	FUNCTION_35
0x40008b4	          0x4889c2	                            mov rdx, rax	       142	split-index.c	FUNCTION_35
0x40008b7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x40008bb	          0x488b00	                    mov rax, qword [rax]	       142	split-index.c	FUNCTION_35
0x40008be	          0x4889d6	                            mov rsi, rdx	       142	split-index.c	FUNCTION_35
0x40008c1	          0x4889c7	                            mov rdi, rax	       142	split-index.c	FUNCTION_35
0x40008c4	      0xe800000000	                          call 0x40008c9	       142	split-index.c	FUNCTION_35
0x40008c9	          0x4889c2	                            mov rdx, rax	       142	split-index.c	FUNCTION_35
0x40008cc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       142	split-index.c	FUNCTION_35
0x40008d0	          0x488910	                    mov qword [rax], rdx	       142	split-index.c	FUNCTION_35
0x40008d3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       143	split-index.c	FUNCTION_35
0x40008d7	          0x8b400c	              mov eax, dword [rax + 0xc]	       143	split-index.c	FUNCTION_35
0x40008da	            0x89c2	                            mov edx, eax	       143	split-index.c	FUNCTION_35
0x40008dc	        0x488b45f8	                mov rax, qword [rbp - 8]	       143	split-index.c	FUNCTION_35
0x40008e0	        0x488b4018	            mov rax, qword [rax + 0x18] 	       143	split-index.c	FUNCTION_35
0x40008e4	          0x488b30	                    mov rsi, qword [rax]	       143	split-index.c	FUNCTION_35
0x40008e7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       143	split-index.c	FUNCTION_35
0x40008eb	          0x488b00	                    mov rax, qword [rax]	       143	split-index.c	FUNCTION_35
0x40008ee	      0xb908000000	                              mov ecx, 8	       143	split-index.c	FUNCTION_35
0x40008f3	          0x4889c7	                            mov rdi, rax	       143	split-index.c	FUNCTION_35
0x40008f6	      0xe8a2f7ffff	                     call sym.copy_array	       143	split-index.c	FUNCTION_35
0x40008fb	        0x488b45f8	                mov rax, qword [rbp - 8]	       145	split-index.c	FUNCTION_35
0x40008ff	    0xc7403c000000	               mov dword [rax + 0x3c], 0	       145	split-index.c	FUNCTION_35
0x4000906	        0x488b45f8	                mov rax, qword [rbp - 8]	       146	split-index.c	FUNCTION_35
0x400090a	    0xc74040000000	               mov dword [rax + 0x40], 0	       146	split-index.c	FUNCTION_35
0x4000911	        0x488b45f8	                mov rax, qword [rbp - 8]	       147	split-index.c	FUNCTION_35	CALL_2
0x4000915	        0x488b4028	            mov rax, qword [rax + 0x28] 	       147	split-index.c	FUNCTION_35	CALL_2
0x4000919	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       147	split-index.c	FUNCTION_35	CALL_2
0x400091d	      0xbe00000000	                              mov esi, 0	       147	split-index.c	FUNCTION_35	CALL_2
0x4000922	          0x4889c7	                            mov rdi, rax	       147	split-index.c	FUNCTION_35	CALL_2
0x4000925	      0xe800000000	                          call 0x400092a	       147	split-index.c	FUNCTION_35	CALL_2
0x400092a	        0x488b45f8	                mov rax, qword [rbp - 8]	       148	split-index.c	FUNCTION_35	CALL_3
0x400092e	        0x488b4020	            mov rax, qword [rax + 0x20] 	       148	split-index.c	FUNCTION_35	CALL_3
0x4000932	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       148	split-index.c	FUNCTION_35	CALL_3
0x4000936	      0xbe00000000	                              mov esi, 0	       148	split-index.c	FUNCTION_35	CALL_3
0x400093b	          0x4889c7	                            mov rdi, rax	       148	split-index.c	FUNCTION_35	CALL_3
0x400093e	      0xe800000000	                          call 0x4000943	       148	split-index.c	FUNCTION_35	CALL_3
0x4000943	        0x488b45f8	                mov rax, qword [rbp - 8]	       149	split-index.c	FUNCTION_35	IF_1
0x4000947	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       149	split-index.c	FUNCTION_35	IF_1
0x400094a	            0x85c0	                           test eax, eax	       149	split-index.c	FUNCTION_35	IF_1
0x400094c	            0x740c	                            je 0x400095a	       149	split-index.c	FUNCTION_35	IF_1
0x400094e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       150	split-index.c	FUNCTION_35	CALL_4
0x4000952	          0x4889c7	                            mov rdi, rax	       150	split-index.c	FUNCTION_35	CALL_4
0x4000955	      0xe800000000	                          call 0x400095a	       150	split-index.c	FUNCTION_35	CALL_4
0x400095a	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	split-index.c	FUNCTION_35	FOR_1
0x400095e	          0x8b4040	            mov eax, dword [rax + 0x40] 	       152	split-index.c	FUNCTION_35	FOR_1
0x4000961	          0x8945f4	              mov dword [rbp - 0xc], eax	       152	split-index.c	FUNCTION_35	FOR_1
0x4000964	            0xeb76	                           jmp 0x40009dc	       152	split-index.c	FUNCTION_35	FOR_1
0x4000966	        0x488b45f8	                mov rax, qword [rbp - 8]	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x400096a	        0x488b4030	            mov rax, qword [rax + 0x30] 	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x400096e	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x4000971	        0x48c1e203	                              shl rdx, 3	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x4000975	          0x4801d0	                            add rax, rdx	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x4000978	          0x488b00	                    mov rax, qword [rax]	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x400097b	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x400097e	            0x85c0	                           test eax, eax	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x4000980	            0x7514	                           jne 0x4000996	       153	split-index.c	FUNCTION_35	FOR_1	IF_2
0x4000982	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       154	split-index.c	FUNCTION_35	FOR_1	IF_2	CALL_5
0x4000985	            0x89c6	                            mov esi, eax	       154	split-index.c	FUNCTION_35	FOR_1	IF_2	CALL_5
0x4000987	      0xbf00000000	                              mov edi, 0	       154	split-index.c	FUNCTION_35	FOR_1	IF_2	CALL_5
0x400098c	      0xb800000000	                              mov eax, 0	       154	split-index.c	FUNCTION_35	FOR_1	IF_2	CALL_5
0x4000991	      0xe800000000	                          call 0x4000996	       154	split-index.c	FUNCTION_35	FOR_1	IF_2	CALL_5
0x4000996	        0x488b45f8	                mov rax, qword [rbp - 8]	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x400099a	        0x488b4030	            mov rax, qword [rax + 0x30] 	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x400099e	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009a1	        0x48c1e203	                              shl rdx, 3	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009a5	          0x4801d0	                            add rax, rdx	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009a8	          0x488b08	                    mov rcx, qword [rax]	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009ab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009af	      0xba25000000	                           mov edx, 0x25	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009b4	          0x4889ce	                            mov rsi, rcx	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009b7	          0x4889c7	                            mov rdi, rax	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009ba	      0xe800000000	                          call 0x40009bf	       156	split-index.c	FUNCTION_35	FOR_1	CALL_6
0x40009bf	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	split-index.c	FUNCTION_35	FOR_1
0x40009c3	        0x488b4030	            mov rax, qword [rax + 0x30] 	       165	split-index.c	FUNCTION_35	FOR_1
0x40009c7	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       165	split-index.c	FUNCTION_35	FOR_1
0x40009ca	        0x48c1e203	                              shl rdx, 3	       165	split-index.c	FUNCTION_35	FOR_1
0x40009ce	          0x4801d0	                            add rax, rdx	       165	split-index.c	FUNCTION_35	FOR_1
0x40009d1	    0x48c700000000	                      mov qword [rax], 0	       165	split-index.c	FUNCTION_35	FOR_1
0x40009d8	        0x8345f401	                add dword [rbp - 0xc], 1	       152	split-index.c	FUNCTION_35	FOR_1
0x40009dc	        0x488b45f8	                mov rax, qword [rbp - 8]	       152	split-index.c	FUNCTION_35	FOR_1
0x40009e0	          0x8b4038	            mov eax, dword [rax + 0x38] 	       152	split-index.c	FUNCTION_35	FOR_1
0x40009e3	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       152	split-index.c	FUNCTION_35	FOR_1
0x40009e6	     0xf877affffff	                            ja 0x4000966	       152	split-index.c	FUNCTION_35	FOR_1
0x40009ec	        0x488b45f8	                mov rax, qword [rbp - 8]	       168	split-index.c	FUNCTION_35	CALL_7
0x40009f0	        0x488b4020	            mov rax, qword [rax + 0x20] 	       168	split-index.c	FUNCTION_35	CALL_7
0x40009f4	          0x4889c7	                            mov rdi, rax	       168	split-index.c	FUNCTION_35	CALL_7
0x40009f7	      0xe800000000	                          call 0x40009fc	       168	split-index.c	FUNCTION_35	CALL_7
0x40009fc	        0x488b45f8	                mov rax, qword [rbp - 8]	       169	split-index.c	FUNCTION_35	CALL_8
0x4000a00	        0x488b4028	            mov rax, qword [rax + 0x28] 	       169	split-index.c	FUNCTION_35	CALL_8
0x4000a04	          0x4889c7	                            mov rdi, rax	       169	split-index.c	FUNCTION_35	CALL_8
0x4000a07	      0xe800000000	                          call 0x4000a0c	       169	split-index.c	FUNCTION_35	CALL_8
0x4000a0c	        0x488b45f8	                mov rax, qword [rbp - 8]	       170	split-index.c	FUNCTION_35
0x4000a10	        0x488b4030	            mov rax, qword [rax + 0x30] 	       170	split-index.c	FUNCTION_35
0x4000a14	          0x4889c7	                            mov rdi, rax	       170	split-index.c	FUNCTION_35
0x4000a17	      0xe800000000	                          call 0x4000a1c	       170	split-index.c	FUNCTION_35
0x4000a1c	        0x488b45f8	                mov rax, qword [rbp - 8]	       170	split-index.c	FUNCTION_35
0x4000a20	    0x48c740300000	               mov qword [rax + 0x30], 0	       170	split-index.c	FUNCTION_35
0x4000a28	        0x488b45f8	                mov rax, qword [rbp - 8]	       171	split-index.c	FUNCTION_35
0x4000a2c	    0x48c740200000	               mov qword [rax + 0x20], 0	       171	split-index.c	FUNCTION_35
0x4000a34	        0x488b45f8	                mov rax, qword [rbp - 8]	       172	split-index.c	FUNCTION_35
0x4000a38	    0x48c740280000	               mov qword [rax + 0x28], 0	       172	split-index.c	FUNCTION_35
0x4000a40	        0x488b45f8	                mov rax, qword [rbp - 8]	       173	split-index.c	FUNCTION_35
0x4000a44	    0xc74038000000	               mov dword [rax + 0x38], 0	       173	split-index.c	FUNCTION_35
0x4000a4b	              0x90	                                     nop	       174	split-index.c	FUNCTION_35
0x4000a4c	              0xc9	                                   leave	       174	split-index.c	FUNCTION_35
0x4000a4d	              0xc3	                                     ret	       174	split-index.c	FUNCTION_35
copy_array	functions,0:DO,0:FOR,0:CALL,2:IF,1:WHILE,0:SWITCH,0:ELSE,0	23
0x400009d	              0x55	                                push rbp	       852	git-compat-util.h	FUNCTION_59
0x400009e	          0x4889e5	                            mov rbp, rsp	       852	git-compat-util.h	FUNCTION_59
0x40000a1	        0x4883ec20	                           sub rsp, 0x20	       852	git-compat-util.h	FUNCTION_59
0x40000a5	        0x48897df8	                mov qword [rbp - 8], rdi	       852	git-compat-util.h	FUNCTION_59
0x40000a9	        0x488975f0	             mov qword [rbp - 0x10], rsi	       852	git-compat-util.h	FUNCTION_59
0x40000ad	        0x488955e8	             mov qword [rbp - 0x18], rdx	       852	git-compat-util.h	FUNCTION_59
0x40000b1	        0x48894de0	             mov qword [rbp - 0x20], rcx	       852	git-compat-util.h	FUNCTION_59
0x40000b5	      0x48837de800	               cmp qword [rbp - 0x18], 0	       853	git-compat-util.h	FUNCTION_59	IF_1
0x40000ba	            0x7429	                            je 0x40000e5	       853	git-compat-util.h	FUNCTION_59	IF_1
0x40000bc	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000c0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000c4	          0x4889d6	                            mov rsi, rdx	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000c7	          0x4889c7	                            mov rdi, rax	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000ca	      0xe87cffffff	                        call sym.st_mult	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000cf	          0x4889c2	                            mov rdx, rax	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000d2	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000d6	        0x488b45f8	                mov rax, qword [rbp - 8]	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000da	          0x4889ce	                            mov rsi, rcx	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000dd	          0x4889c7	                            mov rdi, rax	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000e0	      0xe800000000	                          call 0x40000e5	       854	git-compat-util.h	FUNCTION_59	CALL_2
0x40000e5	              0x90	                                     nop	       855	git-compat-util.h	FUNCTION_59
0x40000e6	              0xc9	                                   leave	       855	git-compat-util.h	FUNCTION_59
0x40000e7	              0xc3	                                     ret	       855	git-compat-util.h	FUNCTION_59
finish_writing_split_index	functions,0:DO,0:FOR,0:CALL,4:IF,0:WHILE,0:SWITCH,0:ELSE,0	35
0x4000f6d	              0x55	                                push rbp	       267	split-index.c	FUNCTION_37
0x4000f6e	          0x4889e5	                            mov rbp, rsp	       267	split-index.c	FUNCTION_37
0x4000f71	        0x4883ec20	                           sub rsp, 0x20	       267	split-index.c	FUNCTION_37
0x4000f75	        0x48897de8	             mov qword [rbp - 0x18], rdi	       267	split-index.c	FUNCTION_37
0x4000f79	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       268	split-index.c	FUNCTION_37	CALL_1
0x4000f7d	          0x4889c7	                            mov rdi, rax	       268	split-index.c	FUNCTION_37	CALL_1
0x4000f80	      0xe800000000	                          call 0x4000f85	       268	split-index.c	FUNCTION_37	CALL_1
0x4000f85	        0x488945f8	                mov qword [rbp - 8], rax	       268	split-index.c	FUNCTION_37	CALL_1
0x4000f89	        0x488b45f8	                mov rax, qword [rbp - 8]	       270	split-index.c	FUNCTION_37	CALL_2
0x4000f8d	        0x488b4020	            mov rax, qword [rax + 0x20] 	       270	split-index.c	FUNCTION_37	CALL_2
0x4000f91	          0x4889c7	                            mov rdi, rax	       270	split-index.c	FUNCTION_37	CALL_2
0x4000f94	      0xe800000000	                          call 0x4000f99	       270	split-index.c	FUNCTION_37	CALL_2
0x4000f99	        0x488b45f8	                mov rax, qword [rbp - 8]	       271	split-index.c	FUNCTION_37	CALL_3
0x4000f9d	        0x488b4028	            mov rax, qword [rax + 0x28] 	       271	split-index.c	FUNCTION_37	CALL_3
0x4000fa1	          0x4889c7	                            mov rdi, rax	       271	split-index.c	FUNCTION_37	CALL_3
0x4000fa4	      0xe800000000	                          call 0x4000fa9	       271	split-index.c	FUNCTION_37	CALL_3
0x4000fa9	        0x488b45f8	                mov rax, qword [rbp - 8]	       272	split-index.c	FUNCTION_37
0x4000fad	    0x48c740200000	               mov qword [rax + 0x20], 0	       272	split-index.c	FUNCTION_37
0x4000fb5	        0x488b45f8	                mov rax, qword [rbp - 8]	       273	split-index.c	FUNCTION_37
0x4000fb9	    0x48c740280000	               mov qword [rax + 0x28], 0	       273	split-index.c	FUNCTION_37
0x4000fc1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       274	split-index.c	FUNCTION_37	CALL_4
0x4000fc5	          0x488b00	                    mov rax, qword [rax]	       274	split-index.c	FUNCTION_37	CALL_4
0x4000fc8	          0x4889c7	                            mov rdi, rax	       274	split-index.c	FUNCTION_37	CALL_4
0x4000fcb	      0xe800000000	                          call 0x4000fd0	       274	split-index.c	FUNCTION_37	CALL_4
0x4000fd0	        0x488b45f8	                mov rax, qword [rbp - 8]	       275	split-index.c	FUNCTION_37
0x4000fd4	        0x488b5030	            mov rdx, qword [rax + 0x30] 	       275	split-index.c	FUNCTION_37
0x4000fd8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       275	split-index.c	FUNCTION_37
0x4000fdc	          0x488910	                    mov qword [rax], rdx	       275	split-index.c	FUNCTION_37
0x4000fdf	        0x488b45f8	                mov rax, qword [rbp - 8]	       276	split-index.c	FUNCTION_37
0x4000fe3	          0x8b5038	            mov edx, dword [rax + 0x38] 	       276	split-index.c	FUNCTION_37
0x4000fe6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       276	split-index.c	FUNCTION_37
0x4000fea	          0x89500c	              mov dword [rax + 0xc], edx	       276	split-index.c	FUNCTION_37
0x4000fed	              0x90	                                     nop	       277	split-index.c	FUNCTION_37
0x4000fee	              0xc9	                                   leave	       277	split-index.c	FUNCTION_37
0x4000fef	              0xc3	                                     ret	       277	split-index.c	FUNCTION_37
replace_index_entry_in_base	functions,0:DO,0:FOR,0:CALL,1:IF,2:WHILE,0:SWITCH,0:ELSE,0	72
0x400111c	              0x55	                                push rbp	       310	split-index.c	FUNCTION_40
0x400111d	          0x4889e5	                            mov rbp, rsp	       310	split-index.c	FUNCTION_40
0x4001120	        0x4883ec20	                           sub rsp, 0x20	       310	split-index.c	FUNCTION_40
0x4001124	        0x48897df8	                mov qword [rbp - 8], rdi	       310	split-index.c	FUNCTION_40
0x4001128	        0x488975f0	             mov qword [rbp - 0x10], rsi	       310	split-index.c	FUNCTION_40
0x400112c	        0x488955e8	             mov qword [rbp - 0x18], rdx	       310	split-index.c	FUNCTION_40
0x4001130	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       311	split-index.c	FUNCTION_40	IF_1
0x4001134	          0x8b4040	            mov eax, dword [rax + 0x40] 	       311	split-index.c	FUNCTION_40	IF_1
0x4001137	            0x85c0	                           test eax, eax	       311	split-index.c	FUNCTION_40	IF_1
0x4001139	     0xf84d3000000	                            je 0x4001212	       311	split-index.c	FUNCTION_40	IF_1
0x400113f	        0x488b45f8	                mov rax, qword [rbp - 8]	       312	split-index.c	FUNCTION_40	IF_1
0x4001143	        0x488b4028	            mov rax, qword [rax + 0x28] 	       312	split-index.c	FUNCTION_40	IF_1
0x4001147	          0x4885c0	                           test rax, rax	       311	split-index.c	FUNCTION_40	IF_1
0x400114a	     0xf84c2000000	                            je 0x4001212	       311	split-index.c	FUNCTION_40	IF_1
0x4001150	        0x488b45f8	                mov rax, qword [rbp - 8]	       313	split-index.c	FUNCTION_40	IF_1
0x4001154	        0x488b4028	            mov rax, qword [rax + 0x28] 	       313	split-index.c	FUNCTION_40	IF_1
0x4001158	        0x488b4018	            mov rax, qword [rax + 0x18] 	       313	split-index.c	FUNCTION_40	IF_1
0x400115c	          0x4885c0	                           test rax, rax	       312	split-index.c	FUNCTION_40	IF_1
0x400115f	     0xf84ad000000	                            je 0x4001212	       312	split-index.c	FUNCTION_40	IF_1
0x4001165	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       314	split-index.c	FUNCTION_40	IF_1
0x4001169	          0x8b5040	            mov edx, dword [rax + 0x40] 	       314	split-index.c	FUNCTION_40	IF_1
0x400116c	        0x488b45f8	                mov rax, qword [rbp - 8]	       314	split-index.c	FUNCTION_40	IF_1
0x4001170	        0x488b4028	            mov rax, qword [rax + 0x28] 	       314	split-index.c	FUNCTION_40	IF_1
0x4001174	        0x488b4018	            mov rax, qword [rax + 0x18] 	       314	split-index.c	FUNCTION_40	IF_1
0x4001178	          0x8b400c	              mov eax, dword [rax + 0xc]	       314	split-index.c	FUNCTION_40	IF_1
0x400117b	            0x39c2	                            cmp edx, eax	       313	split-index.c	FUNCTION_40	IF_1
0x400117d	     0xf878f000000	                            ja 0x4001212	       313	split-index.c	FUNCTION_40	IF_1
0x4001183	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       315	split-index.c	FUNCTION_40	IF_1
0x4001187	          0x8b5040	            mov edx, dword [rax + 0x40] 	       315	split-index.c	FUNCTION_40	IF_1
0x400118a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       315	split-index.c	FUNCTION_40	IF_1
0x400118e	          0x895040	             mov dword [rax + 0x40], edx	       315	split-index.c	FUNCTION_40	IF_1
0x4001191	        0x488b45f8	                mov rax, qword [rbp - 8]	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x4001195	        0x488b4028	            mov rax, qword [rax + 0x28] 	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x4001199	        0x488b4018	            mov rax, qword [rax + 0x18] 	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x400119d	          0x488b10	                    mov rdx, qword [rax]	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011a0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011a4	          0x8b4040	            mov eax, dword [rax + 0x40] 	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011a7	          0x83e801	                              sub eax, 1	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011aa	            0x89c0	                            mov eax, eax	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011ac	        0x48c1e003	                              shl rax, 3	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011b0	          0x4801d0	                            add rax, rdx	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011b3	          0x488b00	                    mov rax, qword [rax]	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011b6	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011ba	            0x742d	                            je 0x40011e9	       316	split-index.c	FUNCTION_40	IF_1	IF_2
0x40011bc	        0x488b45f8	                mov rax, qword [rbp - 8]	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011c0	        0x488b4028	            mov rax, qword [rax + 0x28] 	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011c4	        0x488b4018	            mov rax, qword [rax + 0x18] 	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011c8	          0x488b10	                    mov rdx, qword [rax]	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011cb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011cf	          0x8b4040	            mov eax, dword [rax + 0x40] 	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011d2	          0x83e801	                              sub eax, 1	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011d5	            0x89c0	                            mov eax, eax	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011d7	        0x48c1e003	                              shl rax, 3	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011db	          0x4801d0	                            add rax, rdx	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011de	          0x488b00	                    mov rax, qword [rax]	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011e1	          0x4889c7	                            mov rdi, rax	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011e4	      0xe800000000	                          call 0x40011e9	       317	split-index.c	FUNCTION_40	IF_1	CALL_1
0x40011e9	        0x488b45f8	                mov rax, qword [rbp - 8]	       318	split-index.c	FUNCTION_40	IF_1
0x40011ed	        0x488b4028	            mov rax, qword [rax + 0x28] 	       318	split-index.c	FUNCTION_40	IF_1
0x40011f1	        0x488b4018	            mov rax, qword [rax + 0x18] 	       318	split-index.c	FUNCTION_40	IF_1
0x40011f5	          0x488b10	                    mov rdx, qword [rax]	       318	split-index.c	FUNCTION_40	IF_1
0x40011f8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       318	split-index.c	FUNCTION_40	IF_1
0x40011fc	          0x8b4040	            mov eax, dword [rax + 0x40] 	       318	split-index.c	FUNCTION_40	IF_1
0x40011ff	          0x83e801	                              sub eax, 1	       318	split-index.c	FUNCTION_40	IF_1
0x4001202	            0x89c0	                            mov eax, eax	       318	split-index.c	FUNCTION_40	IF_1
0x4001204	        0x48c1e003	                              shl rax, 3	       318	split-index.c	FUNCTION_40	IF_1
0x4001208	          0x4801c2	                            add rdx, rax	       318	split-index.c	FUNCTION_40	IF_1
0x400120b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       318	split-index.c	FUNCTION_40	IF_1
0x400120f	          0x488902	                    mov qword [rdx], rax	       318	split-index.c	FUNCTION_40	IF_1
0x4001212	              0x90	                                     nop	       320	split-index.c	FUNCTION_40
0x4001213	              0xc9	                                   leave	       320	split-index.c	FUNCTION_40
0x4001214	              0xc3	                                     ret	       320	split-index.c	FUNCTION_40
add_split_index	functions,0:DO,0:FOR,0:CALL,1:IF,1:WHILE,0:SWITCH,0:ELSE,0	20
0x4001215	              0x55	                                push rbp	       323	split-index.c	FUNCTION_41
0x4001216	          0x4889e5	                            mov rbp, rsp	       323	split-index.c	FUNCTION_41
0x4001219	        0x4883ec10	                           sub rsp, 0x10	       323	split-index.c	FUNCTION_41
0x400121d	        0x48897df8	                mov qword [rbp - 8], rdi	       323	split-index.c	FUNCTION_41
0x4001221	        0x488b45f8	                mov rax, qword [rbp - 8]	       324	split-index.c	FUNCTION_41	IF_1
0x4001225	        0x488b4028	            mov rax, qword [rax + 0x28] 	       324	split-index.c	FUNCTION_41	IF_1
0x4001229	          0x4885c0	                           test rax, rax	       324	split-index.c	FUNCTION_41	IF_1
0x400122c	            0x751f	                           jne 0x400124d	       324	split-index.c	FUNCTION_41	IF_1
0x400122e	        0x488b45f8	                mov rax, qword [rbp - 8]	       325	split-index.c	FUNCTION_41	IF_1	CALL_1
0x4001232	          0x4889c7	                            mov rdi, rax	       325	split-index.c	FUNCTION_41	IF_1	CALL_1
0x4001235	      0xe800000000	                          call 0x400123a	       325	split-index.c	FUNCTION_41	IF_1	CALL_1
0x400123a	        0x488b45f8	                mov rax, qword [rbp - 8]	       326	split-index.c	FUNCTION_41	IF_1
0x400123e	          0x8b4014	            mov eax, dword [rax + 0x14] 	       326	split-index.c	FUNCTION_41	IF_1
0x4001241	          0x83c840	                            or eax, 0x40	       326	split-index.c	FUNCTION_41	IF_1
0x4001244	            0x89c2	                            mov edx, eax	       326	split-index.c	FUNCTION_41	IF_1
0x4001246	        0x488b45f8	                mov rax, qword [rbp - 8]	       326	split-index.c	FUNCTION_41	IF_1
0x400124a	          0x895014	             mov dword [rax + 0x14], edx	       326	split-index.c	FUNCTION_41	IF_1
0x400124d	              0x90	                                     nop	       328	split-index.c	FUNCTION_41
0x400124e	              0xc9	                                   leave	       328	split-index.c	FUNCTION_41
0x400124f	              0xc3	                                     ret	       328	split-index.c	FUNCTION_41
prepare_to_write_split_index	functions,0:DO,0:FOR,3:CALL,10:IF,10:WHILE,0:SWITCH,0:ELSE,1	381
0x4000a4e	              0x55	                                push rbp	       177	split-index.c	FUNCTION_36
0x4000a4f	          0x4889e5	                            mov rbp, rsp	       177	split-index.c	FUNCTION_36
0x4000a52	        0x4883ec50	                           sub rsp, 0x50	       177	split-index.c	FUNCTION_36
0x4000a56	        0x48897db8	             mov qword [rbp - 0x48], rdi	       177	split-index.c	FUNCTION_36
0x4000a5a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       178	split-index.c	FUNCTION_36	CALL_1
0x4000a5e	          0x4889c7	                            mov rdi, rax	       178	split-index.c	FUNCTION_36	CALL_1
0x4000a61	      0xe800000000	                          call 0x4000a66	       178	split-index.c	FUNCTION_36	CALL_1
0x4000a66	        0x488945e8	             mov qword [rbp - 0x18], rax	       178	split-index.c	FUNCTION_36	CALL_1
0x4000a6a	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       179	split-index.c	FUNCTION_36
0x4000a72	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       180	split-index.c	FUNCTION_36
0x4000a79	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       180	split-index.c	FUNCTION_36
0x4000a80	      0xe800000000	                          call 0x4000a85	       182	split-index.c	FUNCTION_36	CALL_2
0x4000a85	          0x4889c2	                            mov rdx, rax	       182	split-index.c	FUNCTION_36	CALL_2
0x4000a88	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       182	split-index.c	FUNCTION_36	CALL_2
0x4000a8c	        0x48895020	             mov qword [rax + 0x20], rdx	       182	split-index.c	FUNCTION_36	CALL_2
0x4000a90	      0xe800000000	                          call 0x4000a95	       183	split-index.c	FUNCTION_36	CALL_3
0x4000a95	          0x4889c2	                            mov rdx, rax	       183	split-index.c	FUNCTION_36	CALL_3
0x4000a98	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       183	split-index.c	FUNCTION_36	CALL_3
0x4000a9c	        0x48895028	             mov qword [rax + 0x28], rdx	       183	split-index.c	FUNCTION_36	CALL_3
0x4000aa0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       185	split-index.c	FUNCTION_36	IF_1
0x4000aa4	        0x488b4018	            mov rax, qword [rax + 0x18] 	       185	split-index.c	FUNCTION_36	IF_1
0x4000aa8	          0x4885c0	                           test rax, rax	       185	split-index.c	FUNCTION_36	IF_1
0x4000aab	     0xf8444030000	                            je 0x4000df5	       185	split-index.c	FUNCTION_36	IF_1
0x4000ab1	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ab8	      0xe9a7010000	                           jmp 0x4000c64	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000abd	    0xc745d000b000	      mov dword [rbp - 0x30], 0x6000b000	       196	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ac4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ac8	          0x488b00	                    mov rax, qword [rax]	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000acb	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ace	          0x4863d2	                         movsxd rdx, edx	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ad1	        0x48c1e203	                              shl rdx, 3	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ad5	          0x4801d0	                            add rax, rdx	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ad8	          0x488b00	                    mov rax, qword [rax]	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000adb	        0x488945f0	             mov qword [rbp - 0x10], rax	       199	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000adf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       200	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000ae3	          0x8b4040	            mov eax, dword [rax + 0x40] 	       200	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000ae6	            0x85c0	                           test eax, eax	       200	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000ae8	     0xf846e010000	                            je 0x4000c5c	       200	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000aee	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000af2	          0x8b5040	            mov edx, dword [rax + 0x40] 	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000af5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000af9	        0x488b4018	            mov rax, qword [rax + 0x18] 	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000afd	          0x8b400c	              mov eax, dword [rax + 0xc]	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b00	            0x39c2	                            cmp edx, eax	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b02	            0x7610	                           jbe 0x4000b14	       202	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b04	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       203	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b08	    0xc74040000000	               mov dword [rax + 0x40], 0	       203	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b0f	      0xe94c010000	                           jmp 0x4000c60	       204	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_3
0x4000b14	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b18	          0x8b4038	            mov eax, dword [rax + 0x38] 	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b1b	       0xd00000004	           or eax, loc.imp.discard_index	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b20	            0x89c2	                            mov edx, eax	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b22	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b26	          0x895038	             mov dword [rax + 0x38], edx	       206	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b29	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b2d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b31	          0x488b10	                    mov rdx, qword [rax]	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b34	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b38	          0x8b4040	            mov eax, dword [rax + 0x40] 	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b3b	          0x83e801	                              sub eax, 1	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b3e	            0x89c0	                            mov eax, eax	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b40	        0x48c1e003	                              shl rax, 3	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b44	          0x4801d0	                            add rax, rdx	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b47	          0x488b00	                    mov rax, qword [rax]	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b4a	        0x488945f8	                mov qword [rbp - 8], rax	       207	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000b4e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       208	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_4
0x4000b52	        0x483b45f8	                cmp rax, qword [rbp - 8]	       208	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_4
0x4000b56	     0xf8403010000	                            je 0x4000c5f	       208	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_4
0x4000b5c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b60	          0x8b503c	            mov edx, dword [rax + 0x3c] 	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b63	        0x488b45f8	                mov rax, qword [rbp - 8]	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b67	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b6a	            0x39c2	                            cmp edx, eax	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b6c	            0x751f	                           jne 0x4000b8d	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b6e	        0x488b45f8	                mov rax, qword [rbp - 8]	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b72	        0x488d5058	                   lea rdx, [rax + 0x58]	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b76	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b7a	        0x4883c058	                           add rax, 0x58	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b7e	          0x4889d6	                            mov rsi, rdx	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b81	          0x4889c7	                            mov rdi, rax	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b84	      0xe800000000	                          call 0x4000b89	       211	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5	CALL_4
0x4000b89	            0x85c0	                           test eax, eax	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b8b	            0x7410	                            je 0x4000b9d	       210	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b8d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       212	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b91	    0xc74040000000	               mov dword [rax + 0x40], 0	       212	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b98	      0xe9c3000000	                           jmp 0x4000c60	       213	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_5
0x4000b9d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       215	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ba1	          0x8b4038	            mov eax, dword [rax + 0x38] 	       215	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ba4	          0x8945d4	             mov dword [rbp - 0x2c], eax	       215	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000ba7	        0x488b45f8	                mov rax, qword [rbp - 8]	       216	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bab	          0x8b4038	            mov eax, dword [rax + 0x38] 	       216	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bae	          0x8945d8	             mov dword [rbp - 0x28], eax	       216	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bb1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bb5	          0x8b4038	            mov eax, dword [rax + 0x38] 	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bb8	          0x2345d0	             and eax, dword [rbp - 0x30]	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bbb	            0x89c2	                            mov edx, eax	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bbd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bc1	          0x895038	             mov dword [rax + 0x38], edx	       218	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bc4	        0x488b45f8	                mov rax, qword [rbp - 8]	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bc8	          0x8b4038	            mov eax, dword [rax + 0x38] 	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bcb	          0x2345d0	             and eax, dword [rbp - 0x30]	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bce	            0x89c2	                            mov edx, eax	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bd0	        0x488b45f8	                mov rax, qword [rbp - 8]	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bd4	          0x895038	             mov dword [rax + 0x38], edx	       219	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bd7	        0x488b45f8	                mov rax, qword [rbp - 8]	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bdb	        0x488d4810	                   lea rcx, [rax + 0x10]	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bdf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000be3	        0x4883c010	                           add rax, 0x10	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000be7	      0xba48000000	                           mov edx, 0x48	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bec	          0x4889ce	                            mov rsi, rcx	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bef	          0x4889c7	                            mov rdi, rax	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bf2	      0xe800000000	                          call 0x4000bf7	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bf7	          0x8945dc	             mov dword [rbp - 0x24], eax	       220	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_5
0x4000bfa	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       223	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000bfe	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	       223	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c01	          0x895038	             mov dword [rax + 0x38], edx	       223	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c04	        0x488b45f8	                mov rax, qword [rbp - 8]	       224	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c08	          0x8b55d8	             mov edx, dword [rbp - 0x28]	       224	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c0b	          0x895038	             mov dword [rax + 0x38], edx	       224	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c0e	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       225	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c12	            0x7415	                            je 0x4000c29	       225	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c14	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c18	          0x8b4038	            mov eax, dword [rax + 0x38] 	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c1b	       0xd00000008	                    or eax, section_end.	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c20	            0x89c2	                            mov edx, eax	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c22	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c26	          0x895038	             mov dword [rax + 0x38], edx	       226	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_6
0x4000c29	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_6
0x4000c2d	          0x4889c7	                            mov rdi, rax	       227	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_6
0x4000c30	      0xe800000000	                          call 0x4000c35	       227	split-index.c	FUNCTION_36	IF_1	FOR_1	CALL_6
0x4000c35	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c39	        0x488b4018	            mov rax, qword [rax + 0x18] 	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c3d	          0x488b10	                    mov rdx, qword [rax]	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c40	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c44	          0x8b4040	            mov eax, dword [rax + 0x40] 	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c47	          0x83e801	                              sub eax, 1	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c4a	            0x89c0	                            mov eax, eax	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c4c	        0x48c1e003	                              shl rax, 3	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c50	          0x4801c2	                            add rdx, rax	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c53	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c57	          0x488902	                    mov qword [rdx], rax	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c5a	            0xeb04	                           jmp 0x4000c60	       228	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c5c	              0x90	                                     nop	       201	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000c5d	            0xeb01	                           jmp 0x4000c60	       201	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_2
0x4000c5f	              0x90	                                     nop	       209	split-index.c	FUNCTION_36	IF_1	FOR_1	IF_4
0x4000c60	        0x8345c401	               add dword [rbp - 0x3c], 1	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c64	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c68	          0x8b500c	              mov edx, dword [rax + 0xc]	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c6b	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c6e	            0x39c2	                            cmp edx, eax	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c70	     0xf8747feffff	                            ja 0x4000abd	       193	split-index.c	FUNCTION_36	IF_1	FOR_1
0x4000c76	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c7d	      0xe95d010000	                           jmp 0x4000ddf	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c82	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c86	        0x488b4018	            mov rax, qword [rax + 0x18] 	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c8a	          0x488b00	                    mov rax, qword [rax]	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c8d	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c90	          0x4863d2	                         movsxd rdx, edx	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c93	        0x48c1e203	                              shl rdx, 3	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c97	          0x4801d0	                            add rax, rdx	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c9a	          0x488b00	                    mov rax, qword [rax]	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000c9d	        0x488945f0	             mov qword [rbp - 0x10], rax	       231	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000ca1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000ca5	          0x8b4038	            mov eax, dword [rax + 0x38] 	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000ca8	      0x2500000200	                        and eax, 0x20000	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cad	            0x85c0	                           test eax, eax	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000caf	            0x7510	                           jne 0x4000cc1	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cb1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       233	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cb5	          0x8b4038	            mov eax, dword [rax + 0x38] 	       233	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cb8	      0x2500000004	          and eax, loc.imp.discard_index	       233	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cbd	            0x85c0	                           test eax, eax	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cbf	            0x751e	                           jne 0x4000cdf	       232	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_7
0x4000cc1	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cc4	          0x4863d0	                         movsxd rdx, eax	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cc7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000ccb	        0x488b4020	            mov rax, qword [rax + 0x20] 	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000ccf	          0x4889d6	                            mov rsi, rdx	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cd2	          0x4889c7	                            mov rdi, rax	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cd5	      0xe800000000	                          call 0x4000cda	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cda	      0xe9da000000	                           jmp 0x4000db9	       234	split-index.c	FUNCTION_36	IF_1	FOR_2	CALL_7
0x4000cdf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       235	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000ce3	          0x8b4038	            mov eax, dword [rax + 0x38] 	       235	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000ce6	      0x2500000008	                   and eax, section_end.	       235	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000ceb	            0x85c0	                           test eax, eax	       235	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000ced	     0xf84c6000000	                            je 0x4000db9	       235	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000cf3	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000cf6	          0x4863d0	                         movsxd rdx, eax	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000cf9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000cfd	        0x488b4028	            mov rax, qword [rax + 0x28] 	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000d01	          0x4889d6	                            mov rsi, rdx	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000d04	          0x4889c7	                            mov rdi, rax	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000d07	      0xe800000000	                          call 0x4000d0c	       236	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8	CALL_8
0x4000d0c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d10	          0x8b4038	            mov eax, dword [rax + 0x38] 	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d13	       0xd00000010	                      or eax, 0x10000000	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d18	            0x89c2	                            mov edx, eax	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d1a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d1e	          0x895038	             mov dword [rax + 0x38], edx	       237	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d21	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d24	          0x83c001	                              add eax, 1	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d27	          0x3b45cc	             cmp eax, dword [rbp - 0x34]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d2a	            0x7e6c	                           jle 0x4000d98	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d2c	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d2f	          0x8d5010	                   lea edx, [rax + 0x10]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d32	            0x89d0	                            mov eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d34	             0x1c0	                            add eax, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d36	             0x1d0	                            add eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d38	            0x89c2	                            mov edx, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d3a	          0xc1ea1f	                           shr edx, 0x1f	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d3d	             0x1d0	                            add eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d3f	            0xd1f8	                              sar eax, 1	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d41	            0x89c2	                            mov edx, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d43	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d46	          0x83c001	                              add eax, 1	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d49	            0x39c2	                            cmp edx, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d4b	            0x7d0b	                           jge 0x4000d58	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d4d	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d50	          0x83c001	                              add eax, 1	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d53	          0x8945cc	             mov dword [rbp - 0x34], eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d56	            0xeb18	                           jmp 0x4000d70	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d58	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d5b	          0x8d5010	                   lea edx, [rax + 0x10]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d5e	            0x89d0	                            mov eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d60	             0x1c0	                            add eax, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d62	             0x1d0	                            add eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d64	            0x89c2	                            mov edx, eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d66	          0xc1ea1f	                           shr edx, 0x1f	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d69	             0x1d0	                            add eax, edx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d6b	            0xd1f8	                              sar eax, 1	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d6d	          0x8945cc	             mov dword [rbp - 0x34], eax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d70	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d73	            0x4898	                                    cdqe	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d75	          0x4889c6	                            mov rsi, rax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d78	      0xbf08000000	                              mov edi, 8	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d7d	      0xe8c9f2ffff	                        call sym.st_mult	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d82	          0x4889c2	                            mov rdx, rax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d85	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d89	          0x4889d6	                            mov rsi, rdx	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d8c	          0x4889c7	                            mov rdi, rax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d8f	      0xe800000000	                          call 0x4000d94	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d94	        0x488945e0	             mov qword [rbp - 0x20], rax	       238	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d98	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d9b	          0x8d5001	                      lea edx, [rax + 1]	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000d9e	          0x8955c8	             mov dword [rbp - 0x38], edx	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000da1	            0x4898	                                    cdqe	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000da3	    0x488d14c50000	                        lea rdx, [rax*8]	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000dab	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000daf	          0x4801c2	                            add rdx, rax	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000db2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000db6	          0x488902	                    mov qword [rdx], rax	       239	split-index.c	FUNCTION_36	IF_1	FOR_2	ELSE_1	IF_8
0x4000db9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dbd	        0x4883c044	                           add rax, 0x44	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dc1	          0x4889c7	                            mov rdi, rax	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dc4	      0xe8a3f3ffff	                    call sym.is_null_oid	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dc9	            0x85c0	                           test eax, eax	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dcb	            0x740e	                            je 0x4000ddb	       241	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9	CALL_9
0x4000dcd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       242	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9
0x4000dd1	         0xfb65038	           movzx edx, byte [rax + 0x38] 	       242	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9
0x4000dd5	          0x83ca04	                               or edx, 4	       242	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9
0x4000dd8	          0x885038	               mov byte [rax + 0x38], dl	       242	split-index.c	FUNCTION_36	IF_1	FOR_2	IF_9
0x4000ddb	        0x8345c401	               add dword [rbp - 0x3c], 1	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000ddf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000de3	        0x488b4018	            mov rax, qword [rax + 0x18] 	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000de7	          0x8b500c	              mov edx, dword [rax + 0xc]	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000dea	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000ded	            0x39c2	                            cmp edx, eax	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000def	     0xf878dfeffff	                            ja 0x4000c82	       230	split-index.c	FUNCTION_36	IF_1	FOR_2
0x4000df5	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       246	split-index.c	FUNCTION_36	FOR_3
0x4000dfc	      0xe925010000	                           jmp 0x4000f26	       246	split-index.c	FUNCTION_36	FOR_3
0x4000e01	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e05	          0x488b00	                    mov rax, qword [rax]	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e08	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e0b	          0x4863d2	                         movsxd rdx, edx	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e0e	        0x48c1e203	                              shl rdx, 3	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e12	          0x4801d0	                            add rax, rdx	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e15	          0x488b00	                    mov rax, qword [rax]	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e18	        0x488945f0	             mov qword [rbp - 0x10], rax	       247	split-index.c	FUNCTION_36	FOR_3
0x4000e1c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e20	        0x488b4018	            mov rax, qword [rax + 0x18] 	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e24	          0x4885c0	                           test rax, rax	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e27	            0x740f	                            je 0x4000e38	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e29	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e2d	          0x8b4040	            mov eax, dword [rax + 0x40] 	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e30	            0x85c0	                           test eax, eax	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e32	     0xf85d5000000	                           jne 0x4000f0d	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e38	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e3c	          0x8b4038	            mov eax, dword [rax + 0x38] 	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e3f	      0x2500000200	                        and eax, 0x20000	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e44	            0x85c0	                           test eax, eax	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e46	     0xf85c1000000	                           jne 0x4000f0d	       248	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e4c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e50	          0x8b4038	            mov eax, dword [rax + 0x38] 	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e53	      0x2500000010	                     and eax, 0x10000000	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e58	            0x85c0	                           test eax, eax	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e5a	            0x7419	                            je 0x4000e75	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e5c	      0xb900000000	                              mov ecx, 0	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e61	      0xbaf9000000	                           mov edx, 0xf9	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e66	      0xbe00000000	                              mov esi, 0	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e6b	      0xbf00000000	                              mov edi, 0	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e70	      0xe800000000	                          call 0x4000e75	       249	split-index.c	FUNCTION_36	FOR_3	IF_10	CALL_10
0x4000e75	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e78	          0x83c001	                              add eax, 1	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e7b	          0x3b45cc	             cmp eax, dword [rbp - 0x34]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e7e	            0x7e6c	                           jle 0x4000eec	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e80	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e83	          0x8d5010	                   lea edx, [rax + 0x10]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e86	            0x89d0	                            mov eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e88	             0x1c0	                            add eax, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e8a	             0x1d0	                            add eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e8c	            0x89c2	                            mov edx, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e8e	          0xc1ea1f	                           shr edx, 0x1f	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e91	             0x1d0	                            add eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e93	            0xd1f8	                              sar eax, 1	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e95	            0x89c2	                            mov edx, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e97	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e9a	          0x83c001	                              add eax, 1	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e9d	            0x39c2	                            cmp edx, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000e9f	            0x7d0b	                           jge 0x4000eac	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ea1	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ea4	          0x83c001	                              add eax, 1	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ea7	          0x8945cc	             mov dword [rbp - 0x34], eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eaa	            0xeb18	                           jmp 0x4000ec4	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eac	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eaf	          0x8d5010	                   lea edx, [rax + 0x10]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eb2	            0x89d0	                            mov eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eb4	             0x1c0	                            add eax, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eb6	             0x1d0	                            add eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eb8	            0x89c2	                            mov edx, eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eba	          0xc1ea1f	                           shr edx, 0x1f	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ebd	             0x1d0	                            add eax, edx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ebf	            0xd1f8	                              sar eax, 1	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ec1	          0x8945cc	             mov dword [rbp - 0x34], eax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ec4	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ec7	            0x4898	                                    cdqe	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ec9	          0x4889c6	                            mov rsi, rax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ecc	      0xbf08000000	                              mov edi, 8	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ed1	      0xe875f1ffff	                        call sym.st_mult	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ed6	          0x4889c2	                            mov rdx, rax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ed9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000edd	          0x4889d6	                            mov rsi, rdx	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ee0	          0x4889c7	                            mov rdi, rax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ee3	      0xe800000000	                          call 0x4000ee8	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ee8	        0x488945e0	             mov qword [rbp - 0x20], rax	       250	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eec	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eef	          0x8d5001	                      lea edx, [rax + 1]	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ef2	          0x8955c8	             mov dword [rbp - 0x38], edx	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ef5	            0x4898	                                    cdqe	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000ef7	    0x488d14c50000	                        lea rdx, [rax*8]	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000eff	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000f03	          0x4801c2	                            add rdx, rax	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000f06	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000f0a	          0x488902	                    mov qword [rdx], rax	       251	split-index.c	FUNCTION_36	FOR_3	IF_10
0x4000f0d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f11	          0x8b4038	            mov eax, dword [rax + 0x38] 	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f14	      0x25fffffffb	                     and eax, 0xfbffffff	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f19	            0x89c2	                            mov edx, eax	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f1b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f1f	          0x895038	             mov dword [rax + 0x38], edx	       253	split-index.c	FUNCTION_36	FOR_3
0x4000f22	        0x8345c401	               add dword [rbp - 0x3c], 1	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f26	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f2a	          0x8b500c	              mov edx, dword [rax + 0xc]	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f2d	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f30	            0x39c2	                            cmp edx, eax	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f32	     0xf87c9feffff	                            ja 0x4000e01	       246	split-index.c	FUNCTION_36	FOR_3
0x4000f38	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       260	split-index.c	FUNCTION_36
0x4000f3c	          0x488b10	                    mov rdx, qword [rax]	       260	split-index.c	FUNCTION_36
0x4000f3f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       260	split-index.c	FUNCTION_36
0x4000f43	        0x48895030	             mov qword [rax + 0x30], rdx	       260	split-index.c	FUNCTION_36
0x4000f47	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       261	split-index.c	FUNCTION_36
0x4000f4b	          0x8b500c	              mov edx, dword [rax + 0xc]	       261	split-index.c	FUNCTION_36
0x4000f4e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       261	split-index.c	FUNCTION_36
0x4000f52	          0x895038	             mov dword [rax + 0x38], edx	       261	split-index.c	FUNCTION_36
0x4000f55	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       262	split-index.c	FUNCTION_36
0x4000f59	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       262	split-index.c	FUNCTION_36
0x4000f5d	          0x488910	                    mov qword [rax], rdx	       262	split-index.c	FUNCTION_36
0x4000f60	          0x8b55c8	             mov edx, dword [rbp - 0x38]	       263	split-index.c	FUNCTION_36
0x4000f63	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       263	split-index.c	FUNCTION_36
0x4000f67	          0x89500c	              mov dword [rax + 0xc], edx	       263	split-index.c	FUNCTION_36
0x4000f6a	              0x90	                                     nop	       264	split-index.c	FUNCTION_36
0x4000f6b	              0xc9	                                   leave	       264	split-index.c	FUNCTION_36
0x4000f6c	              0xc3	                                     ret	       264	split-index.c	FUNCTION_36
hashcmp	functions,0:DO,0:FOR,0:CALL,1:IF,0:WHILE,0:SWITCH,0:ELSE,0	13
0x4000142	              0x55	                                push rbp	       974	cache.h	FUNCTION_8
0x4000143	          0x4889e5	                            mov rbp, rsp	       974	cache.h	FUNCTION_8
0x4000146	        0x4883ec10	                           sub rsp, 0x10	       974	cache.h	FUNCTION_8
0x400014a	        0x48897df8	                mov qword [rbp - 8], rdi	       974	cache.h	FUNCTION_8
0x400014e	        0x488975f0	             mov qword [rbp - 0x10], rsi	       974	cache.h	FUNCTION_8
0x4000152	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       975	cache.h	FUNCTION_8	CALL_1
0x4000156	        0x488b45f8	                mov rax, qword [rbp - 8]	       975	cache.h	FUNCTION_8	CALL_1
0x400015a	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_8	CALL_1
0x400015f	          0x4889ce	                            mov rsi, rcx	       975	cache.h	FUNCTION_8	CALL_1
0x4000162	          0x4889c7	                            mov rdi, rax	       975	cache.h	FUNCTION_8	CALL_1
0x4000165	      0xe800000000	                          call 0x400016a	       975	cache.h	FUNCTION_8	CALL_1
0x400016a	              0xc9	                                   leave	       976	cache.h	FUNCTION_8
0x400016b	              0xc3	                                     ret	       976	cache.h	FUNCTION_8
