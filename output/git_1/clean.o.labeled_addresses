st_mult	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,1:FOR,0	22
0x40000e5	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_15
0x40000e6	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_15
0x40000e9	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_15
0x40000ed	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_15
0x40000f1	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_15
0x40000f5	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_15	IF_1
0x40000fa	            0x7430	                            je 0x400012c	       795	git-compat-util.h	FUNCTION_15	IF_1
0x40000fc	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_15	IF_1
0x4000103	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_15	IF_1
0x4000108	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_15	IF_1
0x400010c	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_15	IF_1
0x4000110	            0x731a	                           jae 0x400012c	       795	git-compat-util.h	FUNCTION_15	IF_1
0x4000112	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x4000116	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x400011a	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x400011d	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x4000122	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x4000127	      0xe800000000	                          call 0x400012c	       796	git-compat-util.h	FUNCTION_15	IF_1	CALL_1
0x400012c	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_15
0x4000130	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_15
0x4000135	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_15
0x4000136	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_15
git_clean_config	DO,0:WHILE,0:SWITCH,0:IF,6:functions,0:ELSE,0:CALL,11:FOR,0	101
0x400051f	              0x55	                                push rbp	       103	clean.c	FUNCTION_29
0x4000520	          0x4889e5	                            mov rbp, rsp	       103	clean.c	FUNCTION_29
0x4000523	        0x4883ec40	                           sub rsp, 0x40	       103	clean.c	FUNCTION_29
0x4000527	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       103	clean.c	FUNCTION_29
0x400052b	        0x488975d0	             mov qword [rbp - 0x30], rsi	       103	clean.c	FUNCTION_29
0x400052f	        0x488955c8	             mov qword [rbp - 0x38], rdx	       103	clean.c	FUNCTION_29
0x4000533	    0x64488b042528	                mov rax, qword fs:[0x28]	       103	clean.c	FUNCTION_29
0x400053c	        0x488945f8	                mov qword [rbp - 8], rax	       103	clean.c	FUNCTION_29
0x4000540	            0x31c0	                            xor eax, eax	       103	clean.c	FUNCTION_29
0x4000542	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x4000546	      0xbe00000000	                              mov esi, 0	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x400054b	          0x4889c7	                            mov rdi, rax	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x400054e	      0xe800000000	                          call 0x4000553	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x4000553	            0x85c0	                           test eax, eax	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x4000555	            0x741f	                            je 0x4000576	       106	clean.c	FUNCTION_29	IF_1	CALL_1
0x4000557	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	       107	clean.c	FUNCTION_29	CALL_2
0x400055b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       107	clean.c	FUNCTION_29	CALL_2
0x400055f	      0xb900000000	                              mov ecx, 0	       107	clean.c	FUNCTION_29	CALL_2
0x4000564	      0xba00000000	                              mov edx, 0	       107	clean.c	FUNCTION_29	CALL_2
0x4000569	          0x4889c7	                            mov rdi, rax	       107	clean.c	FUNCTION_29	CALL_2
0x400056c	      0xe800000000	                          call 0x4000571	       107	clean.c	FUNCTION_29	CALL_2
0x4000571	      0xe913010000	                           jmp 0x4000689	       107	clean.c	FUNCTION_29	CALL_2
0x4000576	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x400057a	      0xbe00000000	                              mov esi, 0	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x400057f	          0x4889c7	                            mov rdi, rax	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x4000582	      0xe800000000	                          call 0x4000587	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x4000587	            0x85c0	                           test eax, eax	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x4000589	            0x7523	                           jne 0x40005ae	       111	clean.c	FUNCTION_29	IF_2	CALL_3
0x400058b	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x400058f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x4000593	          0x4889d6	                            mov rsi, rdx	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x4000596	          0x4889c7	                            mov rdi, rax	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x4000599	      0xe800000000	                          call 0x400059e	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x400059e	    0x890500000000	            mov dword [0x040005a4], eax 	       112	clean.c	FUNCTION_29	IF_2	CALL_4
0x40005a4	      0xb800000000	                              mov eax, 0	       113	clean.c	FUNCTION_29	IF_2
0x40005a9	      0xe9db000000	                           jmp 0x4000689	       113	clean.c	FUNCTION_29	IF_2
0x40005ae	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005b2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005b6	      0xbe00000000	                              mov esi, 0	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005bb	          0x4889c7	                            mov rdi, rax	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005be	      0xe888faffff	                    call sym.skip_prefix	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005c3	            0x85c0	                           test eax, eax	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005c5	            0x746e	                            je 0x4000635	       115	clean.c	FUNCTION_29	IF_3	CALL_5
0x40005c7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       116	clean.c	FUNCTION_29	IF_3	CALL_6
0x40005cb	          0x4889c7	                            mov rdi, rax	       116	clean.c	FUNCTION_29	IF_3	CALL_6
0x40005ce	      0xe88efeffff	         call sym.parse_clean_color_slot	       116	clean.c	FUNCTION_29	IF_3	CALL_6
0x40005d3	          0x8945ec	             mov dword [rbp - 0x14], eax	       116	clean.c	FUNCTION_29	IF_3	CALL_6
0x40005d6	        0x837dec00	               cmp dword [rbp - 0x14], 0	       117	clean.c	FUNCTION_29	IF_3	IF_4
0x40005da	            0x790a	                           jns 0x40005e6	       117	clean.c	FUNCTION_29	IF_3	IF_4
0x40005dc	      0xb800000000	                              mov eax, 0	       118	clean.c	FUNCTION_29	IF_3	IF_4
0x40005e1	      0xe9a3000000	                           jmp 0x4000689	       118	clean.c	FUNCTION_29	IF_3	IF_4
0x40005e6	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       119	clean.c	FUNCTION_29	IF_3	IF_5
0x40005eb	            0x7516	                           jne 0x4000603	       119	clean.c	FUNCTION_29	IF_3	IF_5
0x40005ed	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       120	clean.c	FUNCTION_29	IF_3	CALL_7
0x40005f1	          0x4889c7	                            mov rdi, rax	       120	clean.c	FUNCTION_29	IF_3	CALL_7
0x40005f4	      0xe800000000	                          call 0x40005f9	       120	clean.c	FUNCTION_29	IF_3	CALL_7
0x40005f9	      0xe842faffff	                    call sym.const_error	       120	clean.c	FUNCTION_29	IF_3	CALL_7
0x40005fe	      0xe986000000	                           jmp 0x4000689	       120	clean.c	FUNCTION_29	IF_3	CALL_7
0x4000603	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000606	          0x4863d0	                         movsxd rdx, eax	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000609	          0x4889d0	                            mov rax, rdx	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x400060c	        0x48c1e002	                              shl rax, 2	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000610	          0x4801d0	                            add rax, rdx	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000613	          0x4889c2	                            mov rdx, rax	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000616	        0x48c1e204	                              shl rdx, 4	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x400061a	          0x4829c2	                            sub rdx, rax	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x400061d	    0x4881c2000000	                              add rdx, 0	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000624	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000628	          0x4889d6	                            mov rsi, rdx	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x400062b	          0x4889c7	                            mov rdi, rax	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x400062e	      0xe800000000	                          call 0x4000633	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000633	            0xeb54	                           jmp 0x4000689	       121	clean.c	FUNCTION_29	IF_3	CALL_8
0x4000635	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x4000639	      0xbe00000000	                              mov esi, 0	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x400063e	          0x4889c7	                            mov rdi, rax	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x4000641	      0xe800000000	                          call 0x4000646	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x4000646	            0x85c0	                           test eax, eax	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x4000648	            0x7528	                           jne 0x4000672	       124	clean.c	FUNCTION_29	IF_6	CALL_9
0x400064a	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x400064e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x4000652	          0x4889d6	                            mov rsi, rdx	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x4000655	          0x4889c7	                            mov rdi, rax	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x4000658	      0xe800000000	                          call 0x400065d	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x400065d	            0x85c0	                           test eax, eax	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x400065f	           0xf94c0	                                 sete al	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x4000662	           0xfb6c0	                           movzx eax, al	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x4000665	    0x890500000000	            mov dword [0x0400066b], eax 	       125	clean.c	FUNCTION_29	IF_6	CALL_10
0x400066b	      0xb800000000	                              mov eax, 0	       126	clean.c	FUNCTION_29	IF_6
0x4000670	            0xeb17	                           jmp 0x4000689	       126	clean.c	FUNCTION_29	IF_6
0x4000672	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       130	clean.c	FUNCTION_29	CALL_11
0x4000676	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       130	clean.c	FUNCTION_29	CALL_11
0x400067a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       130	clean.c	FUNCTION_29	CALL_11
0x400067e	          0x4889ce	                            mov rsi, rcx	       130	clean.c	FUNCTION_29	CALL_11
0x4000681	          0x4889c7	                            mov rdi, rax	       130	clean.c	FUNCTION_29	CALL_11
0x4000684	      0xe800000000	                          call 0x4000689	       130	clean.c	FUNCTION_29	CALL_11
0x4000689	        0x488b4df8	                mov rcx, qword [rbp - 8]	       131	clean.c	FUNCTION_29
0x400068d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       131	clean.c	FUNCTION_29
0x4000696	            0x7405	                            je 0x400069d	       131	clean.c	FUNCTION_29
0x4000698	      0xe800000000	                          call 0x400069d	       131	clean.c	FUNCTION_29
0x400069d	              0xc9	                                   leave	       131	clean.c	FUNCTION_29
0x400069e	              0xc3	                                     ret	       131	clean.c	FUNCTION_29
exclude_cb	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,1:FOR,0	17
0x4000711	              0x55	                                push rbp	       146	clean.c	FUNCTION_32
0x4000712	          0x4889e5	                            mov rbp, rsp	       146	clean.c	FUNCTION_32
0x4000715	        0x4883ec30	                           sub rsp, 0x30	       146	clean.c	FUNCTION_32
0x4000719	        0x48897de8	             mov qword [rbp - 0x18], rdi	       146	clean.c	FUNCTION_32
0x400071d	        0x488975e0	             mov qword [rbp - 0x20], rsi	       146	clean.c	FUNCTION_32
0x4000721	          0x8955dc	             mov dword [rbp - 0x24], edx	       146	clean.c	FUNCTION_32
0x4000724	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	clean.c	FUNCTION_32
0x4000728	        0x488b4010	            mov rax, qword [rax + 0x10] 	       147	clean.c	FUNCTION_32
0x400072c	        0x488945f8	                mov qword [rbp - 8], rax	       147	clean.c	FUNCTION_32
0x4000730	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       148	clean.c	FUNCTION_32	CALL_1
0x4000734	        0x488b45f8	                mov rax, qword [rbp - 8]	       148	clean.c	FUNCTION_32	CALL_1
0x4000738	          0x4889d6	                            mov rsi, rdx	       148	clean.c	FUNCTION_32	CALL_1
0x400073b	          0x4889c7	                            mov rdi, rax	       148	clean.c	FUNCTION_32	CALL_1
0x400073e	      0xe800000000	                          call 0x4000743	       148	clean.c	FUNCTION_32	CALL_1
0x4000743	      0xb800000000	                              mov eax, 0	       149	clean.c	FUNCTION_32
0x4000748	              0xc9	                                   leave	       150	clean.c	FUNCTION_32
0x4000749	              0xc3	                                     ret	       150	clean.c	FUNCTION_32
prompt_help_cmd	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,5:FOR,0	21
0x4000fb6	              0x55	                                push rbp	       299	clean.c	FUNCTION_36
0x4000fb7	          0x4889e5	                            mov rbp, rsp	       299	clean.c	FUNCTION_36
0x4000fba	        0x4883ec10	                           sub rsp, 0x10	       299	clean.c	FUNCTION_36
0x4000fbe	          0x897dfc	                mov dword [rbp - 4], edi	       299	clean.c	FUNCTION_36
0x4000fc1	      0xbf04000000	                              mov edi, 4	       300	clean.c	FUNCTION_36	CALL_1
0x4000fc6	      0xe81cf7ffff	              call sym.clean_print_color	       300	clean.c	FUNCTION_36	CALL_1
0x4000fcb	        0x837dfc00	                  cmp dword [rbp - 4], 0	       301	clean.c	FUNCTION_36	CALL_2
0x4000fcf	            0x740c	                            je 0x4000fdd	       301	clean.c	FUNCTION_36	CALL_2
0x4000fd1	      0xbf00000000	                              mov edi, 0	       301	clean.c	FUNCTION_36	CALL_2
0x4000fd6	      0xe853f3ffff	                               call sym.	       301	clean.c	FUNCTION_36	CALL_2
0x4000fdb	            0xeb0a	                           jmp 0x4000fe7	       301	clean.c	FUNCTION_36	CALL_2
0x4000fdd	      0xbf00000000	                              mov edi, 0	       301	clean.c	FUNCTION_36	CALL_2
0x4000fe2	      0xe847f3ffff	                               call sym.	       301	clean.c	FUNCTION_36	CALL_2
0x4000fe7	          0x4889c7	                            mov rdi, rax	       301	clean.c	FUNCTION_36	CALL_2
0x4000fea	      0xb800000000	                              mov eax, 0	       301	clean.c	FUNCTION_36	CALL_2
0x4000fef	      0xe800000000	                          call 0x4000ff4	       301	clean.c	FUNCTION_36	CALL_2
0x4000ff4	      0xbf00000000	                              mov edi, 0	       314	clean.c	FUNCTION_36	CALL_5
0x4000ff9	      0xe8e9f6ffff	              call sym.clean_print_color	       314	clean.c	FUNCTION_36	CALL_5
0x4000ffe	              0x90	                                     nop	       315	clean.c	FUNCTION_36
0x4000fff	              0xc9	                                   leave	       315	clean.c	FUNCTION_36
0x4001000	              0xc3	                                     ret	       315	clean.c	FUNCTION_36
print_highlight_menu_stuff	DO,0:WHILE,0:SWITCH,1:IF,2:functions,1:ELSE,1:CALL,12:FOR,2	226
0x4001001	              0x55	                                push rbp	       321	clean.c	FUNCTION_37
0x4001002	          0x4889e5	                            mov rbp, rsp	       321	clean.c	FUNCTION_37
0x4001005	        0x4883c480	             add rsp, 0xffffffffffffff80	       321	clean.c	FUNCTION_37
0x4001009	        0x48897d88	             mov qword [rbp - 0x78], rdi	       321	clean.c	FUNCTION_37
0x400100d	        0x48897580	             mov qword [rbp - 0x80], rsi	       321	clean.c	FUNCTION_37
0x4001011	    0x64488b042528	                mov rax, qword fs:[0x28]	       321	clean.c	FUNCTION_37
0x400101a	        0x488945f8	                mov qword [rbp - 8], rax	       321	clean.c	FUNCTION_37
0x400101e	            0x31c0	                            xor eax, eax	       321	clean.c	FUNCTION_37
0x4001020	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       322	clean.c	FUNCTION_37
0x4001028	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       322	clean.c	FUNCTION_37
0x400102f	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       322	clean.c	FUNCTION_37
0x4001036	         0xfb645e0	            movzx eax, byte [rbp - 0x20]	       322	clean.c	FUNCTION_37
0x400103a	          0x83c801	                               or eax, 1	       322	clean.c	FUNCTION_37
0x400103d	          0x8845e0	               mov byte [rbp - 0x20], al	       322	clean.c	FUNCTION_37
0x4001040	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       322	clean.c	FUNCTION_37
0x4001048	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       323	clean.c	FUNCTION_37
0x4001050	    0x48c745b80000	               mov qword [rbp - 0x48], 0	       323	clean.c	FUNCTION_37
0x4001058	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       323	clean.c	FUNCTION_37
0x4001060	        0x488b4588	             mov rax, qword [rbp - 0x78]	       328	clean.c	FUNCTION_37	SWITCH_1
0x4001064	            0x8b00	                    mov eax, dword [rax]	       328	clean.c	FUNCTION_37	SWITCH_1
0x4001066	          0x83f801	                              cmp eax, 1	       328	clean.c	FUNCTION_37	SWITCH_1
0x4001069	     0xf84a9010000	                            je 0x4001218	       328	clean.c	FUNCTION_37	SWITCH_1
0x400106f	          0x83f802	                              cmp eax, 2	       328	clean.c	FUNCTION_37	SWITCH_1
0x4001072	            0x740f	                            je 0x4001083	       328	clean.c	FUNCTION_37	SWITCH_1
0x4001074	      0xbf00000000	                              mov edi, 0	       330	clean.c	FUNCTION_37	SWITCH_1	CALL_1
0x4001079	      0xb800000000	                              mov eax, 0	       330	clean.c	FUNCTION_37	SWITCH_1	CALL_1
0x400107e	      0xe800000000	                          call 0x4001083	       330	clean.c	FUNCTION_37	SWITCH_1	CALL_1
0x4001083	        0x488b4588	             mov rax, qword [rbp - 0x78]	       332	clean.c	FUNCTION_37	SWITCH_1
0x4001087	        0x488b4008	                mov rax, qword [rax + 8]	       332	clean.c	FUNCTION_37	SWITCH_1
0x400108b	        0x48894598	             mov qword [rbp - 0x68], rax	       332	clean.c	FUNCTION_37	SWITCH_1
0x400108f	    0xc74590000000	               mov dword [rbp - 0x70], 0	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x4001096	      0xe968010000	                           jmp 0x4001203	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x400109b	    0xc74594000000	               mov dword [rbp - 0x6c], 0	       335	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40010a2	        0x488b4598	             mov rax, qword [rbp - 0x68]	       337	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40010a6	        0x488b4008	                mov rax, qword [rax + 8]	       337	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40010aa	        0x488945a8	             mov qword [rbp - 0x58], rax	       337	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40010ae	        0x488b4580	             mov rax, qword [rbp - 0x80]	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010b2	          0x488b00	                    mov rax, qword [rax]	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010b5	          0x8b5590	             mov edx, dword [rbp - 0x70]	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010b8	          0x4863d2	                         movsxd rdx, edx	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010bb	        0x48c1e202	                              shl rdx, 2	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010bf	          0x4801d0	                            add rax, rdx	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010c2	            0x8b00	                    mov eax, dword [rax]	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010c4	            0x85c0	                           test eax, eax	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010c6	            0x7925	                           jns 0x40010ed	       338	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010c8	        0x488b4580	             mov rax, qword [rbp - 0x80]	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010cc	          0x488b00	                    mov rax, qword [rax]	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010cf	          0x8b5590	             mov edx, dword [rbp - 0x70]	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010d2	          0x4863d2	                         movsxd rdx, edx	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010d5	        0x48c1e202	                              shl rdx, 2	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010d9	          0x4801c2	                            add rdx, rax	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010dc	        0x488b4598	             mov rax, qword [rbp - 0x68]	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010e0	          0x8b4010	            mov eax, dword [rax + 0x10] 	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010e3	            0x85c0	                           test eax, eax	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010e5	           0xf95c0	                                setne al	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010e8	           0xfb6c0	                           movzx eax, al	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010eb	            0x8902	                    mov dword [rdx], eax	       339	clean.c	FUNCTION_37	SWITCH_1	FOR_1	IF_1
0x40010ed	          0x8b4590	             mov eax, dword [rbp - 0x70]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x40010f0	          0x8d5001	                      lea edx, [rax + 1]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x40010f3	        0x488b4580	             mov rax, qword [rbp - 0x80]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x40010f7	          0x488b00	                    mov rax, qword [rax]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x40010fa	          0x8b4d90	             mov ecx, dword [rbp - 0x70]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x40010fd	          0x4863c9	                         movsxd rcx, ecx	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001100	        0x48c1e102	                              shl rcx, 2	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001104	          0x4801c8	                            add rax, rcx	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001107	            0x8b00	                    mov eax, dword [rax]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001109	            0x85c0	                           test eax, eax	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400110b	            0x7407	                            je 0x4001114	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400110d	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001112	            0xeb05	                           jmp 0x4001119	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001114	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001119	        0x488d45b0	                   lea rax, [rbp - 0x50]	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400111d	            0x89d1	                            mov ecx, edx	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400111f	          0x4889f2	                            mov rdx, rsi	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001122	      0xbe00000000	                              mov esi, 0	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001127	          0x4889c7	                            mov rdi, rax	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400112a	      0xb800000000	                              mov eax, 0	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x400112f	      0xe800000000	                          call 0x4001134	       340	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_2
0x4001134	      0xe98e000000	                           jmp 0x40011c7	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x4001139	        0x837d9400	               cmp dword [rbp - 0x6c], 0	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x400113d	            0x756b	                           jne 0x40011aa	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x400113f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x4001143	           0xfb610	                   movzx edx, byte [rax]	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x4001146	        0x488b4598	             mov rax, qword [rbp - 0x68]	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x400114a	           0xfb600	                   movzx eax, byte [rax]	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x400114d	            0x38c2	                              cmp dl, al	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x400114f	            0x7559	                           jne 0x40011aa	       342	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x4001151	      0xbf02000000	                              mov edi, 2	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x4001156	      0xe844f5ffff	                call sym.clean_get_color	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x400115b	          0x4889c2	                            mov rdx, rax	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x400115e	        0x488d45b0	                   lea rax, [rbp - 0x50]	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x4001162	          0x4889d6	                            mov rsi, rdx	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x4001165	          0x4889c7	                            mov rdi, rax	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x4001168	      0xe808f1ffff	                  call sym.strbuf_addstr	       343	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_4
0x400116d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x4001171	           0xfb600	                   movzx eax, byte [rax]	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x4001174	           0xfbed0	                           movsx edx, al	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x4001177	        0x488d45b0	                   lea rax, [rbp - 0x50]	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x400117b	            0x89d6	                            mov esi, edx	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x400117d	          0x4889c7	                            mov rdi, rax	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x4001180	      0xe882f0ffff	                   call sym.strbuf_addch	       344	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_5
0x4001185	      0xbf00000000	                              mov edi, 0	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x400118a	      0xe810f5ffff	                call sym.clean_get_color	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x400118f	          0x4889c2	                            mov rdx, rax	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x4001192	        0x488d45b0	                   lea rax, [rbp - 0x50]	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x4001196	          0x4889d6	                            mov rsi, rdx	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x4001199	          0x4889c7	                            mov rdi, rax	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x400119c	      0xe8d4f0ffff	                  call sym.strbuf_addstr	       345	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2	CALL_7
0x40011a1	    0xc74594010000	               mov dword [rbp - 0x6c], 1	       346	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x40011a8	            0xeb18	                           jmp 0x40011c2	       346	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	IF_2
0x40011aa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011ae	           0xfb600	                   movzx eax, byte [rax]	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011b1	           0xfbed0	                           movsx edx, al	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011b4	        0x488d45b0	                   lea rax, [rbp - 0x50]	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011b8	            0x89d6	                            mov esi, edx	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011ba	          0x4889c7	                            mov rdi, rax	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011bd	      0xe845f0ffff	                   call sym.strbuf_addch	       348	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2	ELSE_1	CALL_8
0x40011c2	      0x488345a801	               add qword [rbp - 0x58], 1	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x40011c7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x40011cb	           0xfb600	                   movzx eax, byte [rax]	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x40011ce	            0x84c0	                             test al, al	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x40011d0	     0xf8563ffffff	                           jne 0x4001139	       341	clean.c	FUNCTION_37	SWITCH_1	FOR_1	FOR_2
0x40011d6	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       351	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_9
0x40011da	        0x488d45d0	                   lea rax, [rbp - 0x30]	       351	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_9
0x40011de	          0x4889d6	                            mov rsi, rdx	       351	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_9
0x40011e1	          0x4889c7	                            mov rdi, rax	       351	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_9
0x40011e4	      0xe800000000	                          call 0x40011e9	       351	clean.c	FUNCTION_37	SWITCH_1	FOR_1	CALL_9
0x40011e9	        0x488d45b0	                   lea rax, [rbp - 0x50]	       352	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40011ed	      0xbe00000000	                              mov esi, 0	       352	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40011f2	          0x4889c7	                            mov rdi, rax	       352	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40011f5	      0xe873efffff	                  call sym.strbuf_setlen	       352	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40011fa	        0x83459001	               add dword [rbp - 0x70], 1	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x40011fe	      0x4883459820	            add qword [rbp - 0x68], 0x20	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x4001203	        0x488b4588	             mov rax, qword [rbp - 0x78]	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x4001207	          0x8b4004	                mov eax, dword [rax + 4]	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x400120a	          0x3b4590	             cmp eax, dword [rbp - 0x70]	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x400120d	     0xf8f88feffff	                            jg 0x400109b	       333	clean.c	FUNCTION_37	SWITCH_1	FOR_1
0x4001213	      0xe9fe000000	                           jmp 0x4001316	       354	clean.c	FUNCTION_37	SWITCH_1
0x4001218	    0xc74590000000	               mov dword [rbp - 0x70], 0	       356	clean.c	FUNCTION_37	SWITCH_1
0x400121f	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001223	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001227	          0x488b00	                    mov rax, qword [rax]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400122a	        0x488945a0	             mov qword [rbp - 0x60], rax	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400122e	      0xe9b2000000	                           jmp 0x40012e5	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001233	        0x488b4580	             mov rax, qword [rbp - 0x80]	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001237	          0x488b00	                    mov rax, qword [rax]	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400123a	          0x8b5590	             mov edx, dword [rbp - 0x70]	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400123d	          0x4863d2	                         movsxd rdx, edx	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001240	        0x48c1e202	                              shl rdx, 2	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001244	          0x4801d0	                            add rax, rdx	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001247	            0x8b00	                    mov eax, dword [rax]	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001249	            0x85c0	                           test eax, eax	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400124b	            0x791a	                           jns 0x4001267	       358	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400124d	        0x488b4580	             mov rax, qword [rbp - 0x80]	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001251	          0x488b00	                    mov rax, qword [rax]	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001254	          0x8b5590	             mov edx, dword [rbp - 0x70]	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001257	          0x4863d2	                         movsxd rdx, edx	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400125a	        0x48c1e202	                              shl rdx, 2	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x400125e	          0x4801d0	                            add rax, rdx	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001261	    0xc70000000000	                      mov dword [rax], 0	       359	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	IF_1
0x4001267	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400126b	          0x488b08	                    mov rcx, qword [rax]	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400126e	          0x8b4590	             mov eax, dword [rbp - 0x70]	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x4001271	          0x8d5001	                      lea edx, [rax + 1]	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x4001274	        0x488b4580	             mov rax, qword [rbp - 0x80]	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001278	          0x488b00	                    mov rax, qword [rax]	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400127b	          0x8b7590	             mov esi, dword [rbp - 0x70]	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400127e	          0x4863f6	                         movsxd rsi, esi	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001281	        0x48c1e602	                              shl rsi, 2	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001285	          0x4801f0	                            add rax, rsi	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001288	            0x8b00	                    mov eax, dword [rax]	       361	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400128a	            0x85c0	                           test eax, eax	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400128c	            0x7407	                            je 0x4001295	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400128e	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x4001293	            0xeb05	                           jmp 0x400129a	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x4001295	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400129a	        0x488d45b0	                   lea rax, [rbp - 0x50]	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x400129e	          0x4989c8	                             mov r8, rcx	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012a1	            0x89d1	                            mov ecx, edx	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012a3	          0x4889f2	                            mov rdx, rsi	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012a6	      0xbe00000000	                              mov esi, 0	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012ab	          0x4889c7	                            mov rdi, rax	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012ae	      0xb800000000	                              mov eax, 0	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012b3	      0xe800000000	                          call 0x40012b8	       360	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_1
0x40012b8	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       362	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_2
0x40012bc	        0x488d45d0	                   lea rax, [rbp - 0x30]	       362	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_2
0x40012c0	          0x4889d6	                            mov rsi, rdx	       362	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_2
0x40012c3	          0x4889c7	                            mov rdi, rax	       362	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_2
0x40012c6	      0xe800000000	                          call 0x40012cb	       362	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1	CALL_2
0x40012cb	        0x488d45b0	                   lea rax, [rbp - 0x50]	       363	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012cf	      0xbe00000000	                              mov esi, 0	       363	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012d4	          0x4889c7	                            mov rdi, rax	       363	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012d7	      0xe891eeffff	                  call sym.strbuf_setlen	       363	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012dc	        0x83459001	               add dword [rbp - 0x70], 1	       364	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012e0	      0x488345a010	            add qword [rbp - 0x60], 0x10	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012e5	      0x48837da000	               cmp qword [rbp - 0x60], 0	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012ea	            0x7429	                            je 0x4001315	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012ec	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012f0	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012f4	          0x488b10	                    mov rdx, qword [rax]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012f7	        0x488b4588	             mov rax, qword [rbp - 0x78]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012fb	        0x488b4008	                mov rax, qword [rax + 8]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x40012ff	          0x8b4008	                mov eax, dword [rax + 8]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001302	            0x89c0	                            mov eax, eax	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001304	        0x48c1e004	                              shl rax, 4	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001308	          0x4801d0	                            add rax, rdx	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400130b	        0x483b45a0	             cmp rax, qword [rbp - 0x60]	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x400130f	     0xf871effffff	                            ja 0x4001233	       357	clean.c	FUNCTION_37	SWITCH_1	FUNCTION_1
0x4001315	              0x90	                                     nop	       366	clean.c	FUNCTION_37	SWITCH_1
0x4001316	        0x488d45d0	                   lea rax, [rbp - 0x30]	       369	clean.c	FUNCTION_37	CALL_10
0x400131a	          0x4889c7	                            mov rdi, rax	       369	clean.c	FUNCTION_37	CALL_10
0x400131d	      0xe81afcffff	             call sym.pretty_print_menus	       369	clean.c	FUNCTION_37	CALL_10
0x4001322	        0x488d45b0	                   lea rax, [rbp - 0x50]	       371	clean.c	FUNCTION_37	CALL_11
0x4001326	          0x4889c7	                            mov rdi, rax	       371	clean.c	FUNCTION_37	CALL_11
0x4001329	      0xe800000000	                          call 0x400132e	       371	clean.c	FUNCTION_37	CALL_11
0x400132e	        0x488d45d0	                   lea rax, [rbp - 0x30]	       372	clean.c	FUNCTION_37	CALL_12
0x4001332	      0xbe00000000	                              mov esi, 0	       372	clean.c	FUNCTION_37	CALL_12
0x4001337	          0x4889c7	                            mov rdi, rax	       372	clean.c	FUNCTION_37	CALL_12
0x400133a	      0xe800000000	                          call 0x400133f	       372	clean.c	FUNCTION_37	CALL_12
0x400133f	              0x90	                                     nop	       373	clean.c	FUNCTION_37
0x4001340	        0x488b45f8	                mov rax, qword [rbp - 8]	       373	clean.c	FUNCTION_37
0x4001344	    0x644833042528	                xor rax, qword fs:[0x28]	       373	clean.c	FUNCTION_37
0x400134d	            0x7405	                            je 0x4001354	       373	clean.c	FUNCTION_37
0x400134f	      0xe800000000	                          call 0x4001354	       373	clean.c	FUNCTION_37
0x4001354	              0xc9	                                   leave	       373	clean.c	FUNCTION_37
0x4001355	              0xc3	                                     ret	       373	clean.c	FUNCTION_37
parse_choice	DO,1:WHILE,0:SWITCH,0:IF,12:functions,0:ELSE,7:CALL,16:FOR,4	242
0x40014a4	              0x55	                                push rbp	       450	clean.c	FUNCTION_39
0x40014a5	          0x4889e5	                            mov rbp, rsp	       450	clean.c	FUNCTION_39
0x40014a8	              0x53	                                push rbx	       450	clean.c	FUNCTION_39
0x40014a9	        0x4883ec68	                           sub rsp, 0x68	       450	clean.c	FUNCTION_39
0x40014ad	        0x48897da8	             mov qword [rbp - 0x58], rdi	       450	clean.c	FUNCTION_39
0x40014b1	          0x8975a4	             mov dword [rbp - 0x5c], esi	       450	clean.c	FUNCTION_39
0x40014b4	        0x48895598	             mov qword [rbp - 0x68], rdx	       450	clean.c	FUNCTION_39
0x40014b8	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       452	clean.c	FUNCTION_39
0x40014bf	        0x837da400	               cmp dword [rbp - 0x5c], 0	       455	clean.c	FUNCTION_39	IF_1
0x40014c3	            0x7419	                            je 0x40014de	       455	clean.c	FUNCTION_39	IF_1
0x40014c5	      0xba00000000	                              mov edx, 0	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014ca	      0xbe0a000000	                            mov esi, 0xa	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014cf	        0x488d7d10	                   lea rdi, [rbp + 0x10]	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014d3	      0xe8d2edffff	               call sym.strbuf_split_max	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014d8	        0x488945d0	             mov qword [rbp - 0x30], rax	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014dc	            0xeb44	                           jmp 0x4001522	       456	clean.c	FUNCTION_39	IF_1	CALL_1
0x40014de	        0x488b4520	            mov rax, qword [rbp + 0x20] 	       458	clean.c	FUNCTION_39	ELSE_1
0x40014e2	        0x488945e0	             mov qword [rbp - 0x20], rax	       458	clean.c	FUNCTION_39	ELSE_1
0x40014e6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       460	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014ea	           0xfb600	                   movzx eax, byte [rax]	       460	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014ed	            0x3c2c	                            cmp al, 0x2c	       460	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014ef	            0x7507	                           jne 0x40014f8	       460	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014f1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       461	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014f5	          0xc60020	                    mov byte [rax], 0x20	       461	clean.c	FUNCTION_39	ELSE_1	DO_1	IF_2
0x40014f8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x40014fc	        0x488d5001	                      lea rdx, [rax + 1]	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x4001500	        0x488955e0	             mov qword [rbp - 0x20], rdx	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x4001504	           0xfb600	                   movzx eax, byte [rax]	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x4001507	            0x84c0	                             test al, al	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x4001509	            0x75db	                           jne 0x40014e6	       462	clean.c	FUNCTION_39	ELSE_1	DO_1
0x400150b	      0xba00000000	                              mov edx, 0	       463	clean.c	FUNCTION_39	ELSE_1	CALL_2
0x4001510	      0xbe20000000	                           mov esi, 0x20	       463	clean.c	FUNCTION_39	ELSE_1	CALL_2
0x4001515	        0x488d7d10	                   lea rdi, [rbp + 0x10]	       463	clean.c	FUNCTION_39	ELSE_1	CALL_2
0x4001519	      0xe88cedffff	               call sym.strbuf_split_max	       463	clean.c	FUNCTION_39	ELSE_1	CALL_2
0x400151e	        0x488945d0	             mov qword [rbp - 0x30], rax	       463	clean.c	FUNCTION_39	ELSE_1	CALL_2
0x4001522	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       466	clean.c	FUNCTION_39	FOR_1
0x4001526	        0x488945d8	             mov qword [rbp - 0x28], rax	       466	clean.c	FUNCTION_39	FOR_1
0x400152a	      0xe986020000	                           jmp 0x40017b5	       466	clean.c	FUNCTION_39	FOR_1
0x400152f	    0xc745bc010000	               mov dword [rbp - 0x44], 1	       468	clean.c	FUNCTION_39	FOR_1
0x4001536	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       469	clean.c	FUNCTION_39	FOR_1
0x400153d	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       469	clean.c	FUNCTION_39	FOR_1
0x4001544	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       472	clean.c	FUNCTION_39	FOR_1	CALL_3
0x4001548	          0x488b00	                    mov rax, qword [rax]	       472	clean.c	FUNCTION_39	FOR_1	CALL_3
0x400154b	          0x4889c7	                            mov rdi, rax	       472	clean.c	FUNCTION_39	FOR_1	CALL_3
0x400154e	      0xe800000000	                          call 0x4001553	       472	clean.c	FUNCTION_39	FOR_1	CALL_3
0x4001553	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       473	clean.c	FUNCTION_39	FOR_1	IF_3
0x4001557	          0x488b00	                    mov rax, qword [rax]	       473	clean.c	FUNCTION_39	FOR_1	IF_3
0x400155a	        0x488b4008	                mov rax, qword [rax + 8]	       473	clean.c	FUNCTION_39	FOR_1	IF_3
0x400155e	          0x4885c0	                           test rax, rax	       473	clean.c	FUNCTION_39	FOR_1	IF_3
0x4001561	     0xf8448020000	                            je 0x40017af	       473	clean.c	FUNCTION_39	FOR_1	IF_3
0x4001567	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x400156b	          0x488b00	                    mov rax, qword [rax]	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x400156e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x4001572	           0xfb600	                   movzx eax, byte [rax]	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x4001575	            0x3c2d	                            cmp al, 0x2d	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x4001577	            0x7520	                           jne 0x4001599	       477	clean.c	FUNCTION_39	FOR_1	IF_4
0x4001579	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       478	clean.c	FUNCTION_39	FOR_1	IF_4
0x4001580	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x4001584	          0x488b00	                    mov rax, qword [rax]	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x4001587	      0xba01000000	                              mov edx, 1	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x400158c	      0xbe00000000	                              mov esi, 0	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x4001591	          0x4889c7	                            mov rdi, rax	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x4001594	      0xe800000000	                          call 0x4001599	       479	clean.c	FUNCTION_39	FOR_1	IF_4	CALL_4
0x4001599	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       482	clean.c	FUNCTION_39	FOR_1
0x40015a0	    0xc745cc010000	               mov dword [rbp - 0x34], 1	       483	clean.c	FUNCTION_39	FOR_1
0x40015a7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x40015ab	          0x488b00	                    mov rax, qword [rax]	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x40015ae	        0x488b4010	            mov rax, qword [rax + 0x10] 	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x40015b2	        0x488945e8	             mov qword [rbp - 0x18], rax	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x40015b6	            0xeb63	                           jmp 0x400161b	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x40015b8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5
0x40015bc	           0xfb600	                   movzx eax, byte [rax]	       485	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5
0x40015bf	            0x3c2d	                            cmp al, 0x2d	       485	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5
0x40015c1	            0x7526	                           jne 0x40015e9	       485	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5
0x40015c3	        0x837dc800	               cmp dword [rbp - 0x38], 0	       486	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	IF_6
0x40015c7	            0x7510	                           jne 0x40015d9	       486	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	IF_6
0x40015c9	    0xc745c8010000	               mov dword [rbp - 0x38], 1	       487	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	IF_6
0x40015d0	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       488	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	IF_6
0x40015d7	            0xeb3d	                           jmp 0x4001616	       488	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	IF_6
0x40015d9	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       490	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	ELSE_2
0x40015e0	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       491	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	ELSE_2
0x40015e7	            0xeb3d	                           jmp 0x4001626	       492	clean.c	FUNCTION_39	FOR_1	FOR_2	IF_5	ELSE_2
0x40015e9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015ed	           0xfb600	                   movzx eax, byte [rax]	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015f0	           0xfb6c0	                           movzx eax, al	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015f3	            0x4898	                                    cdqe	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015f5	     0xfb680000000	                   movzx eax, byte [rax]	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015fc	           0xfb6c0	                           movzx eax, al	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x40015ff	          0x83e002	                              and eax, 2	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x4001602	            0x85c0	                           test eax, eax	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x4001604	            0x7510	                           jne 0x4001616	       494	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x4001606	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       495	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x400160d	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       496	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x4001614	            0xeb10	                           jmp 0x4001626	       497	clean.c	FUNCTION_39	FOR_1	FOR_2	ELSE_3	IF_7
0x4001616	      0x488345e801	               add qword [rbp - 0x18], 1	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x400161b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x400161f	           0xfb600	                   movzx eax, byte [rax]	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x4001622	            0x84c0	                             test al, al	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x4001624	            0x7592	                           jne 0x40015b8	       484	clean.c	FUNCTION_39	FOR_1	FOR_2
0x4001626	        0x837dcc00	               cmp dword [rbp - 0x34], 0	       501	clean.c	FUNCTION_39	FOR_1	IF_8
0x400162a	            0x7421	                            je 0x400164d	       501	clean.c	FUNCTION_39	FOR_1	IF_8
0x400162c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x4001630	          0x488b00	                    mov rax, qword [rax]	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x4001633	        0x488b4010	            mov rax, qword [rax + 0x10] 	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x4001637	          0x4889c7	                            mov rdi, rax	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x400163a	      0xe800000000	                          call 0x400163f	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x400163f	          0x8945c0	             mov dword [rbp - 0x40], eax	       502	clean.c	FUNCTION_39	FOR_1	IF_8	CALL_5
0x4001642	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       503	clean.c	FUNCTION_39	FOR_1	IF_8
0x4001645	          0x8945c4	             mov dword [rbp - 0x3c], eax	       503	clean.c	FUNCTION_39	FOR_1	IF_8
0x4001648	      0xe9c6000000	                           jmp 0x4001713	       503	clean.c	FUNCTION_39	FOR_1	IF_8
0x400164d	        0x837dc800	               cmp dword [rbp - 0x38], 0	       504	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9
0x4001651	            0x746e	                            je 0x40016c1	       504	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9
0x4001653	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x4001657	          0x488b00	                    mov rax, qword [rax]	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x400165a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x400165e	          0x4889c7	                            mov rdi, rax	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x4001661	      0xe800000000	                          call 0x4001666	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x4001666	          0x8945c0	             mov dword [rbp - 0x40], eax	       505	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_6
0x4001669	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x400166d	          0x488b00	                    mov rax, qword [rax]	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001670	        0x488b4010	            mov rax, qword [rax + 0x10] 	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001674	      0xbe2d000000	                           mov esi, 0x2d	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001679	          0x4889c7	                            mov rdi, rax	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x400167c	      0xe800000000	                          call 0x4001681	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001681	        0x4883c001	                              add rax, 1	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001685	           0xfb600	                   movzx eax, byte [rax]	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x4001688	            0x84c0	                             test al, al	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x400168a	            0x750c	                           jne 0x4001698	       507	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10	CALL_7
0x400168c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       508	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10
0x4001690	          0x8b4004	                mov eax, dword [rax + 4]	       508	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10
0x4001693	          0x8945c4	             mov dword [rbp - 0x3c], eax	       508	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10
0x4001696	            0xeb7b	                           jmp 0x4001713	       508	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	IF_10
0x4001698	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x400169c	          0x488b00	                    mov rax, qword [rax]	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x400169f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016a3	      0xbe2d000000	                           mov esi, 0x2d	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016a8	          0x4889c7	                            mov rdi, rax	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016ab	      0xe800000000	                          call 0x40016b0	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016b0	        0x4883c001	                              add rax, 1	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016b4	          0x4889c7	                            mov rdi, rax	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016b7	      0xe800000000	                          call 0x40016bc	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016bc	          0x8945c4	             mov dword [rbp - 0x3c], eax	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016bf	            0xeb52	                           jmp 0x4001713	       510	clean.c	FUNCTION_39	FOR_1	ELSE_4	IF_9	CALL_9
0x40016c1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016c5	          0x488b00	                    mov rax, qword [rax]	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016c8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016cc	      0xbe00000000	                              mov esi, 0	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016d1	          0x4889c7	                            mov rdi, rax	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016d4	      0xe800000000	                          call 0x40016d9	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016d9	            0x85c0	                           test eax, eax	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016db	            0x7513	                           jne 0x40016f0	       511	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11	CALL_10
0x40016dd	    0xc745c0010000	               mov dword [rbp - 0x40], 1	       512	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11
0x40016e4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       513	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11
0x40016e8	          0x8b4004	                mov eax, dword [rax + 4]	       513	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11
0x40016eb	          0x8945c4	             mov dword [rbp - 0x3c], eax	       513	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11
0x40016ee	            0xeb23	                           jmp 0x4001713	       513	clean.c	FUNCTION_39	FOR_1	ELSE_6	IF_11
0x40016f0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x40016f4	          0x488b00	                    mov rax, qword [rax]	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x40016f7	        0x488b4010	            mov rax, qword [rax + 0x10] 	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x40016fb	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x40016ff	          0x4889d6	                            mov rsi, rdx	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x4001702	          0x4889c7	                            mov rdi, rax	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x4001705	      0xe84cfcffff	                    call sym.find_unique	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x400170a	          0x8945c0	             mov dword [rbp - 0x40], eax	       515	clean.c	FUNCTION_39	FOR_1	ELSE_7	CALL_11
0x400170d	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       516	clean.c	FUNCTION_39	FOR_1	ELSE_7
0x4001710	          0x8945c4	             mov dword [rbp - 0x3c], eax	       516	clean.c	FUNCTION_39	FOR_1	ELSE_7
0x4001713	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001717	            0x7e28	                           jle 0x4001741	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001719	        0x837dc000	               cmp dword [rbp - 0x40], 0	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x400171d	            0x7e22	                           jle 0x4001741	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x400171f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001723	          0x8b4004	                mov eax, dword [rax + 4]	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001726	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001729	            0x7c16	                            jl 0x4001741	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x400172b	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x400172e	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001731	            0x7f0e	                            jg 0x4001741	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001733	        0x837da400	               cmp dword [rbp - 0x5c], 0	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001737	            0x7443	                            je 0x400177c	       519	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001739	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       520	clean.c	FUNCTION_39	FOR_1	IF_12
0x400173c	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       520	clean.c	FUNCTION_39	FOR_1	IF_12
0x400173f	            0x743b	                            je 0x400177c	       520	clean.c	FUNCTION_39	FOR_1	IF_12
0x4001741	      0xbf05000000	                              mov edi, 5	       521	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_12
0x4001746	      0xe89cefffff	              call sym.clean_print_color	       521	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_12
0x400174b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x400174f	          0x488b00	                    mov rax, qword [rax]	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001752	        0x488b5810	            mov rbx, qword [rax + 0x10] 	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001756	      0xbf00000000	                              mov edi, 0	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x400175b	      0xe8ceebffff	                               call sym.	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001760	          0x4889de	                            mov rsi, rbx	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001763	          0x4889c7	                            mov rdi, rax	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001766	      0xb800000000	                              mov eax, 0	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x400176b	      0xe800000000	                          call 0x4001770	       522	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_14
0x4001770	      0xbf00000000	                              mov edi, 0	       523	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_15
0x4001775	      0xe86defffff	              call sym.clean_print_color	       523	clean.c	FUNCTION_39	FOR_1	IF_12	CALL_15
0x400177a	            0xeb34	                           jmp 0x40017b0	       524	clean.c	FUNCTION_39	FOR_1	IF_12
0x400177c	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x400177f	          0x8945b8	             mov dword [rbp - 0x48], eax	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001782	            0xeb21	                           jmp 0x40017a5	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001784	        0x488b4598	             mov rax, qword [rbp - 0x68]	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001788	          0x488b00	                    mov rax, qword [rax]	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x400178b	          0x8b55b8	             mov edx, dword [rbp - 0x48]	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x400178e	          0x4863d2	                         movsxd rdx, edx	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001791	        0x48c1e202	                              shl rdx, 2	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001795	        0x4883ea04	                              sub rdx, 4	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x4001799	          0x4801c2	                            add rdx, rax	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x400179c	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x400179f	            0x8902	                    mov dword [rdx], eax	       528	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017a1	        0x8345b801	               add dword [rbp - 0x48], 1	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017a5	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017a8	          0x3b45c4	             cmp eax, dword [rbp - 0x3c]	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017ab	            0x7ed7	                           jle 0x4001784	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017ad	            0xeb01	                           jmp 0x40017b0	       527	clean.c	FUNCTION_39	FOR_1	FOR_3
0x40017af	              0x90	                                     nop	       474	clean.c	FUNCTION_39	FOR_1	IF_3
0x40017b0	      0x488345d808	               add qword [rbp - 0x28], 8	       466	clean.c	FUNCTION_39	FOR_1
0x40017b5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       466	clean.c	FUNCTION_39	FOR_1
0x40017b9	          0x488b00	                    mov rax, qword [rax]	       466	clean.c	FUNCTION_39	FOR_1
0x40017bc	          0x4885c0	                           test rax, rax	       466	clean.c	FUNCTION_39	FOR_1
0x40017bf	     0xf856afdffff	                           jne 0x400152f	       466	clean.c	FUNCTION_39	FOR_1
0x40017c5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       531	clean.c	FUNCTION_39	CALL_16
0x40017c9	          0x4889c7	                            mov rdi, rax	       531	clean.c	FUNCTION_39	CALL_16
0x40017cc	      0xe800000000	                          call 0x40017d1	       531	clean.c	FUNCTION_39	CALL_16
0x40017d1	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       533	clean.c	FUNCTION_39	FOR_4
0x40017d8	            0xeb1d	                           jmp 0x40017f7	       533	clean.c	FUNCTION_39	FOR_4
0x40017da	        0x488b4598	             mov rax, qword [rbp - 0x68]	       534	clean.c	FUNCTION_39	FOR_4
0x40017de	          0x488b00	                    mov rax, qword [rax]	       534	clean.c	FUNCTION_39	FOR_4
0x40017e1	          0x8b55b8	             mov edx, dword [rbp - 0x48]	       534	clean.c	FUNCTION_39	FOR_4
0x40017e4	          0x4863d2	                         movsxd rdx, edx	       534	clean.c	FUNCTION_39	FOR_4
0x40017e7	        0x48c1e202	                              shl rdx, 2	       534	clean.c	FUNCTION_39	FOR_4
0x40017eb	          0x4801d0	                            add rax, rdx	       534	clean.c	FUNCTION_39	FOR_4
0x40017ee	            0x8b00	                    mov eax, dword [rax]	       534	clean.c	FUNCTION_39	FOR_4
0x40017f0	           0x145b4	             add dword [rbp - 0x4c], eax	       534	clean.c	FUNCTION_39	FOR_4
0x40017f3	        0x8345b801	               add dword [rbp - 0x48], 1	       533	clean.c	FUNCTION_39	FOR_4
0x40017f7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       533	clean.c	FUNCTION_39	FOR_4
0x40017fb	          0x8b4004	                mov eax, dword [rax + 4]	       533	clean.c	FUNCTION_39	FOR_4
0x40017fe	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       533	clean.c	FUNCTION_39	FOR_4
0x4001801	            0x7fd7	                            jg 0x40017da	       533	clean.c	FUNCTION_39	FOR_4
0x4001803	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	       535	clean.c	FUNCTION_39
0x4001806	        0x4883c468	                           add rsp, 0x68	       536	clean.c	FUNCTION_39
0x400180a	              0x5b	                                 pop rbx	       536	clean.c	FUNCTION_39
0x400180b	              0x5d	                                 pop rbp	       536	clean.c	FUNCTION_39
0x400180c	              0xc3	                                     ret	       536	clean.c	FUNCTION_39
clean_get_color	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,1:FOR,0	22
0x400069f	              0x55	                                push rbp	       134	clean.c	FUNCTION_30
0x40006a0	          0x4889e5	                            mov rbp, rsp	       134	clean.c	FUNCTION_30
0x40006a3	        0x4883ec10	                           sub rsp, 0x10	       134	clean.c	FUNCTION_30
0x40006a7	          0x897dfc	                mov dword [rbp - 4], edi	       134	clean.c	FUNCTION_30
0x40006aa	    0x8b0500000000	            mov eax, dword [0x040006b0] 	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006b0	            0x89c6	                            mov esi, eax	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006b2	      0xbf01000000	                              mov edi, 1	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006b7	      0xe800000000	                          call 0x40006bc	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006bc	            0x85c0	                           test eax, eax	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006be	            0x7420	                            je 0x40006e0	       135	clean.c	FUNCTION_30	IF_1	CALL_1
0x40006c0	          0x8b55fc	                mov edx, dword [rbp - 4]	       136	clean.c	FUNCTION_30	IF_1
0x40006c3	          0x4889d0	                            mov rax, rdx	       136	clean.c	FUNCTION_30	IF_1
0x40006c6	        0x48c1e002	                              shl rax, 2	       136	clean.c	FUNCTION_30	IF_1
0x40006ca	          0x4801d0	                            add rax, rdx	       136	clean.c	FUNCTION_30	IF_1
0x40006cd	          0x4889c2	                            mov rdx, rax	       136	clean.c	FUNCTION_30	IF_1
0x40006d0	        0x48c1e204	                              shl rdx, 4	       136	clean.c	FUNCTION_30	IF_1
0x40006d4	          0x4829c2	                            sub rdx, rax	       136	clean.c	FUNCTION_30	IF_1
0x40006d7	    0x488d82000000	                          lea rax, [rdx]	       136	clean.c	FUNCTION_30	IF_1
0x40006de	            0xeb05	                           jmp 0x40006e5	       136	clean.c	FUNCTION_30	IF_1
0x40006e0	      0xb800000000	                              mov eax, 0	       137	clean.c	FUNCTION_30
0x40006e5	              0xc9	                                   leave	       138	clean.c	FUNCTION_30
0x40006e6	              0xc3	                                     ret	       138	clean.c	FUNCTION_30
ask_each_cmd	DO,0:WHILE,0:SWITCH,0:IF,1:functions,1:ELSE,0:CALL,3:FOR,0	90
0x400200a	              0x55	                                push rbp	       751	clean.c	FUNCTION_44
0x400200b	          0x4889e5	                            mov rbp, rsp	       751	clean.c	FUNCTION_44
0x400200e	        0x4883ec60	                           sub rsp, 0x60	       751	clean.c	FUNCTION_44
0x4002012	    0x64488b042528	                mov rax, qword fs:[0x28]	       751	clean.c	FUNCTION_44
0x400201b	        0x488945f8	                mov qword [rbp - 8], rax	       751	clean.c	FUNCTION_44
0x400201f	            0x31c0	                            xor eax, eax	       751	clean.c	FUNCTION_44
0x4002021	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       752	clean.c	FUNCTION_44
0x4002029	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       752	clean.c	FUNCTION_44
0x4002031	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       752	clean.c	FUNCTION_44
0x4002039	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       753	clean.c	FUNCTION_44
0x4002041	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       753	clean.c	FUNCTION_44
0x4002049	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       753	clean.c	FUNCTION_44
0x4002051	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       756	clean.c	FUNCTION_44
0x4002058	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       756	clean.c	FUNCTION_44
0x400205f	    0x488b05000000	            mov rax, qword [0x04002066] 	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002066	        0x488945b0	             mov qword [rbp - 0x50], rax	       758	clean.c	FUNCTION_44	FUNCTION_1
0x400206a	      0xe9b2000000	                           jmp 0x4002121	       758	clean.c	FUNCTION_44	FUNCTION_1
0x400206f	        0x837dac00	               cmp dword [rbp - 0x54], 0	       760	clean.c	FUNCTION_44	FUNCTION_1	IF_1
0x4002073	            0x7577	                           jne 0x40020ec	       760	clean.c	FUNCTION_44	FUNCTION_1	IF_1
0x4002075	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x4002079	          0x488b00	                    mov rax, qword [rax]	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x400207c	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x4002080	      0xbe00000000	                              mov esi, 0	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x4002085	          0x4889c7	                            mov rdi, rax	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x4002088	      0xe800000000	                          call 0x400208d	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x400208d	        0x488945b8	             mov qword [rbp - 0x48], rax	       761	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_1
0x4002091	      0xbf00000000	                              mov edi, 0	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x4002096	      0xe893e2ffff	                               call sym.	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x400209b	          0x4889c2	                            mov rdx, rax	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x400209e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x40020a2	          0x4889c6	                            mov rsi, rax	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x40020a5	          0x4889d7	                            mov rdi, rdx	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x40020a8	      0xb800000000	                              mov eax, 0	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x40020ad	      0xe800000000	                          call 0x40020b2	       763	clean.c	FUNCTION_44	FUNCTION_1	IF_1	CALL_3
0x40020b2	    0x488b15000000	            mov rdx, qword [0x040020b9] 	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020b9	        0x488d45c0	                   lea rax, [rbp - 0x40]	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020bd	          0x4889d6	                            mov rsi, rdx	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020c0	          0x4889c7	                            mov rdi, rax	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020c3	      0xe800000000	                          call 0x40020c8	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020c8	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020cb	            0x740e	                            je 0x40020db	       764	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_4
0x40020cd	        0x488d45c0	                   lea rax, [rbp - 0x40]	       765	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_5
0x40020d1	          0x4889c7	                            mov rdi, rax	       765	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_5
0x40020d4	      0xe800000000	                          call 0x40020d9	       765	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_5
0x40020d9	            0xeb11	                           jmp 0x40020ec	       765	clean.c	FUNCTION_44	FUNCTION_1	IF_1	IF_2	CALL_5
0x40020db	      0xbf0a000000	                            mov edi, 0xa	       767	clean.c	FUNCTION_44	FUNCTION_1	IF_1	ELSE_1	CALL_6
0x40020e0	      0xe800000000	                          call 0x40020e5	       767	clean.c	FUNCTION_44	FUNCTION_1	IF_1	ELSE_1	CALL_6
0x40020e5	    0xc745ac010000	               mov dword [rbp - 0x54], 1	       768	clean.c	FUNCTION_44	FUNCTION_1	IF_1	ELSE_1
0x40020ec	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x40020f0	          0x4885c0	                           test rax, rax	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x40020f3	            0x7419	                            je 0x400210e	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x40020f5	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x40020f9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x40020fd	      0xbe00000000	                              mov esi, 0	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x4002102	          0x4889c7	                            mov rdi, rax	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x4002105	      0xe800000000	                          call 0x400210a	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x400210a	            0x85c0	                           test eax, eax	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x400210c	            0x740e	                            je 0x400211c	       771	clean.c	FUNCTION_44	FUNCTION_1	IF_3	CALL_7
0x400210e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       772	clean.c	FUNCTION_44	FUNCTION_1	IF_3
0x4002112	          0x488b00	                    mov rax, qword [rax]	       772	clean.c	FUNCTION_44	FUNCTION_1	IF_3
0x4002115	          0xc60000	                       mov byte [rax], 0	       772	clean.c	FUNCTION_44	FUNCTION_1	IF_3
0x4002118	        0x8345a801	               add dword [rbp - 0x58], 1	       773	clean.c	FUNCTION_44	FUNCTION_1	IF_3
0x400211c	      0x488345b010	            add qword [rbp - 0x50], 0x10	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002121	      0x48837db000	               cmp qword [rbp - 0x50], 0	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002126	            0x7420	                            je 0x4002148	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002128	    0x488b05000000	            mov rax, qword [0x0400212f] 	       758	clean.c	FUNCTION_44	FUNCTION_1
0x400212f	    0x8b1500000000	            mov edx, dword [0x04002135] 	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002135	            0x89d2	                            mov edx, edx	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002137	        0x48c1e204	                              shl rdx, 4	       758	clean.c	FUNCTION_44	FUNCTION_1
0x400213b	          0x4801d0	                            add rax, rdx	       758	clean.c	FUNCTION_44	FUNCTION_1
0x400213e	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002142	     0xf8727ffffff	                            ja 0x400206f	       758	clean.c	FUNCTION_44	FUNCTION_1
0x4002148	        0x837da800	               cmp dword [rbp - 0x58], 0	       777	clean.c	FUNCTION_44	IF_1
0x400214c	            0x740f	                            je 0x400215d	       777	clean.c	FUNCTION_44	IF_1
0x400214e	      0xbe00000000	                              mov esi, 0	       778	clean.c	FUNCTION_44	CALL_1
0x4002153	      0xbf00000000	                              mov edi, 0	       778	clean.c	FUNCTION_44	CALL_1
0x4002158	      0xe800000000	                          call 0x400215d	       778	clean.c	FUNCTION_44	CALL_1
0x400215d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       780	clean.c	FUNCTION_44	CALL_2
0x4002161	          0x4889c7	                            mov rdi, rax	       780	clean.c	FUNCTION_44	CALL_2
0x4002164	      0xe800000000	                          call 0x4002169	       780	clean.c	FUNCTION_44	CALL_2
0x4002169	        0x488d45c0	                   lea rax, [rbp - 0x40]	       781	clean.c	FUNCTION_44	CALL_3
0x400216d	          0x4889c7	                            mov rdi, rax	       781	clean.c	FUNCTION_44	CALL_3
0x4002170	      0xe800000000	                          call 0x4002175	       781	clean.c	FUNCTION_44	CALL_3
0x4002175	      0xb80a000000	                            mov eax, 0xa	       782	clean.c	FUNCTION_44
0x400217a	        0x488b4df8	                mov rcx, qword [rbp - 8]	       783	clean.c	FUNCTION_44
0x400217e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       783	clean.c	FUNCTION_44
0x4002187	            0x7405	                            je 0x400218e	       783	clean.c	FUNCTION_44
0x4002189	      0xe800000000	                          call 0x400218e	       783	clean.c	FUNCTION_44
0x400218e	              0xc9	                                   leave	       783	clean.c	FUNCTION_44
0x400218f	              0xc3	                                     ret	       783	clean.c	FUNCTION_44
strbuf_complete	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,1:FOR,0	27
0x40002dc	              0x55	                                push rbp	       594	strbuf.h	FUNCTION_62
0x40002dd	          0x4889e5	                            mov rbp, rsp	       594	strbuf.h	FUNCTION_62
0x40002e0	        0x4883ec10	                           sub rsp, 0x10	       594	strbuf.h	FUNCTION_62
0x40002e4	        0x48897df8	                mov qword [rbp - 8], rdi	       594	strbuf.h	FUNCTION_62
0x40002e8	            0x89f0	                            mov eax, esi	       594	strbuf.h	FUNCTION_62
0x40002ea	          0x8845f4	                mov byte [rbp - 0xc], al	       594	strbuf.h	FUNCTION_62
0x40002ed	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_62	IF_1
0x40002f1	        0x488b4008	                mov rax, qword [rax + 8]	       595	strbuf.h	FUNCTION_62	IF_1
0x40002f5	          0x4885c0	                           test rax, rax	       595	strbuf.h	FUNCTION_62	IF_1
0x40002f8	            0x7431	                            je 0x400032b	       595	strbuf.h	FUNCTION_62	IF_1
0x40002fa	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_62	IF_1
0x40002fe	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       595	strbuf.h	FUNCTION_62	IF_1
0x4000302	        0x488b45f8	                mov rax, qword [rbp - 8]	       595	strbuf.h	FUNCTION_62	IF_1
0x4000306	        0x488b4008	                mov rax, qword [rax + 8]	       595	strbuf.h	FUNCTION_62	IF_1
0x400030a	        0x4883e801	                              sub rax, 1	       595	strbuf.h	FUNCTION_62	IF_1
0x400030e	          0x4801d0	                            add rax, rdx	       595	strbuf.h	FUNCTION_62	IF_1
0x4000311	           0xfb600	                   movzx eax, byte [rax]	       595	strbuf.h	FUNCTION_62	IF_1
0x4000314	          0x3a45f4	                cmp al, byte [rbp - 0xc]	       595	strbuf.h	FUNCTION_62	IF_1
0x4000317	            0x7412	                            je 0x400032b	       595	strbuf.h	FUNCTION_62	IF_1
0x4000319	         0xfbe55f4	             movsx edx, byte [rbp - 0xc]	       596	strbuf.h	FUNCTION_62	CALL_1
0x400031d	        0x488b45f8	                mov rax, qword [rbp - 8]	       596	strbuf.h	FUNCTION_62	CALL_1
0x4000321	            0x89d6	                            mov esi, edx	       596	strbuf.h	FUNCTION_62	CALL_1
0x4000323	          0x4889c7	                            mov rdi, rax	       596	strbuf.h	FUNCTION_62	CALL_1
0x4000326	      0xe8dcfeffff	                   call sym.strbuf_addch	       596	strbuf.h	FUNCTION_62	CALL_1
0x400032b	              0x90	                                     nop	       597	strbuf.h	FUNCTION_62
0x400032c	              0xc9	                                   leave	       597	strbuf.h	FUNCTION_62
0x400032d	              0xc3	                                     ret	       597	strbuf.h	FUNCTION_62
remove_dirs	DO,0:WHILE,1:SWITCH,0:IF,13:functions,0:ELSE,5:CALL,36:FOR,1	342
0x400074a	              0x55	                                push rbp	       154	clean.c	FUNCTION_33
0x400074b	          0x4889e5	                            mov rbp, rsp	       154	clean.c	FUNCTION_33
0x400074e	              0x53	                                push rbx	       154	clean.c	FUNCTION_33
0x400074f	    0x4881ec580100	                          sub rsp, 0x158	       154	clean.c	FUNCTION_33
0x4000756	    0x4889bdc8feff	            mov qword [rbp - 0x138], rdi	       154	clean.c	FUNCTION_33
0x400075d	    0x4889b5c0feff	            mov qword [rbp - 0x140], rsi	       154	clean.c	FUNCTION_33
0x4000764	    0x8995bcfeffff	            mov dword [rbp - 0x144], edx	       154	clean.c	FUNCTION_33
0x400076a	    0x898db8feffff	            mov dword [rbp - 0x148], ecx	       154	clean.c	FUNCTION_33
0x4000770	    0x448985b4feff	            mov dword [rbp - 0x14c], r8d	       154	clean.c	FUNCTION_33
0x4000777	    0x4c898da8feff	             mov qword [rbp - 0x158], r9	       154	clean.c	FUNCTION_33
0x400077e	    0x64488b042528	                mov rax, qword fs:[0x28]	       154	clean.c	FUNCTION_33
0x4000787	        0x488945e8	             mov qword [rbp - 0x18], rax	       154	clean.c	FUNCTION_33
0x400078b	            0x31c0	                            xor eax, eax	       154	clean.c	FUNCTION_33
0x400078d	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       156	clean.c	FUNCTION_33
0x4000798	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	       156	clean.c	FUNCTION_33
0x40007a3	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       156	clean.c	FUNCTION_33
0x40007ae	    0xc785e8feffff	              mov dword [rbp - 0x118], 0	       158	clean.c	FUNCTION_33
0x40007b8	    0xc785e0feffff	              mov dword [rbp - 0x120], 0	       158	clean.c	FUNCTION_33
0x40007c2	    0xc785dcfeffff	              mov dword [rbp - 0x124], 1	       158	clean.c	FUNCTION_33
0x40007cc	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       158	clean.c	FUNCTION_33
0x40007d3	        0x488b4008	                mov rax, qword [rax + 8]	       158	clean.c	FUNCTION_33
0x40007d7	    0x8985ecfeffff	            mov dword [rbp - 0x114], eax	       158	clean.c	FUNCTION_33
0x40007dd	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	       159	clean.c	FUNCTION_33
0x40007e8	    0xc78538ffffff	               mov dword [rbp - 0xc8], 0	       159	clean.c	FUNCTION_33
0x40007f2	    0xc7853cffffff	               mov dword [rbp - 0xc4], 0	       159	clean.c	FUNCTION_33
0x40007fc	     0xfb68540ffff	            movzx eax, byte [rbp - 0xc0]	       159	clean.c	FUNCTION_33
0x4000803	          0x83c801	                               or eax, 1	       159	clean.c	FUNCTION_33
0x4000806	    0x888540ffffff	               mov byte [rbp - 0xc0], al	       159	clean.c	FUNCTION_33
0x400080c	    0x48c78548ffff	               mov qword [rbp - 0xb8], 0	       159	clean.c	FUNCTION_33
0x4000817	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       161	clean.c	FUNCTION_33
0x400081e	    0xc70001000000	                      mov dword [rax], 1	       161	clean.c	FUNCTION_33
0x4000824	    0x8b85bcfeffff	            mov eax, dword [rbp - 0x144]	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x400082a	          0x83e002	                              and eax, 2	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x400082d	            0x85c0	                           test eax, eax	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x400082f	     0xf8492000000	                            je 0x40008c7	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x4000835	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x400083c	          0x4889c7	                            mov rdi, rax	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x400083f	      0xe800000000	                          call 0x4000844	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x4000844	            0x85c0	                           test eax, eax	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x4000846	            0x747f	                            je 0x40008c7	       163	clean.c	FUNCTION_33	IF_1	CALL_1
0x4000848	    0x83bdb4feffff	              cmp dword [rbp - 0x14c], 0	       164	clean.c	FUNCTION_33	IF_1	IF_2
0x400084f	            0x7564	                           jne 0x40008b5	       164	clean.c	FUNCTION_33	IF_1	IF_2
0x4000851	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x4000858	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x400085c	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x4000863	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x400086a	          0x4889ce	                            mov rsi, rcx	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x400086d	          0x4889c7	                            mov rdi, rax	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x4000870	      0xe800000000	                          call 0x4000875	       165	clean.c	FUNCTION_33	IF_1	IF_2	CALL_2
0x4000875	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x400087c	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x4000883	            0x7411	                            je 0x4000896	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x4000885	    0x488b05000000	            mov rax, qword [0x0400088c] 	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x400088c	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x400088f	      0xe89afaffff	                               call sym.	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x4000894	            0xeb0f	                           jmp 0x40008a5	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x4000896	    0x488b05000000	            mov rax, qword [0x0400089d] 	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x400089d	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008a0	      0xe889faffff	                               call sym.	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008a5	          0x4889de	                            mov rsi, rbx	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008a8	          0x4889c7	                            mov rdi, rax	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008ab	      0xb800000000	                              mov eax, 0	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008b0	      0xe800000000	                          call 0x40008b5	       166	clean.c	FUNCTION_33	IF_1	IF_2	CALL_5
0x40008b5	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       170	clean.c	FUNCTION_33	IF_1
0x40008bc	    0xc70000000000	                      mov dword [rax], 0	       170	clean.c	FUNCTION_33	IF_1
0x40008c2	      0xe9f0040000	                           jmp 0x4000db7	       171	clean.c	FUNCTION_33	IF_1
0x40008c7	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       174	clean.c	FUNCTION_33	CALL_6
0x40008ce	        0x488b4010	            mov rax, qword [rax + 0x10] 	       174	clean.c	FUNCTION_33	CALL_6
0x40008d2	          0x4889c7	                            mov rdi, rax	       174	clean.c	FUNCTION_33	CALL_6
0x40008d5	      0xe800000000	                          call 0x40008da	       174	clean.c	FUNCTION_33	CALL_6
0x40008da	    0x48898500ffff	            mov qword [rbp - 0x100], rax	       174	clean.c	FUNCTION_33	CALL_6
0x40008e1	    0x4883bd00ffff	              cmp qword [rbp - 0x100], 0	       175	clean.c	FUNCTION_33	IF_3
0x40008e9	     0xf85b7000000	                           jne 0x40009a6	       175	clean.c	FUNCTION_33	IF_3
0x40008ef	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x40008f6	            0x7515	                           jne 0x400090d	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x40008f8	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x40008ff	        0x488b4010	            mov rax, qword [rax + 0x10] 	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x4000903	          0x4889c7	                            mov rdi, rax	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x4000906	      0xe800000000	                          call 0x400090b	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x400090b	            0xeb05	                           jmp 0x4000912	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x400090d	      0xb800000000	                              mov eax, 0	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x4000912	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       177	clean.c	FUNCTION_33	IF_3	CALL_7
0x4000918	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       178	clean.c	FUNCTION_33	IF_3	IF_4
0x400091f	            0x7474	                            je 0x4000995	       178	clean.c	FUNCTION_33	IF_3	IF_4
0x4000921	      0xe800000000	                          call 0x4000926	       179	clean.c	FUNCTION_33	IF_3	IF_4
0x4000926	            0x8b00	                    mov eax, dword [rax]	       179	clean.c	FUNCTION_33	IF_3	IF_4
0x4000928	    0x8985f0feffff	            mov dword [rbp - 0x110], eax	       179	clean.c	FUNCTION_33	IF_3	IF_4
0x400092e	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x4000935	        0x488b4010	            mov rax, qword [rax + 0x10] 	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x4000939	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x4000940	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x4000947	          0x4889ce	                            mov rsi, rcx	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x400094a	          0x4889c7	                            mov rdi, rax	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x400094d	      0xe800000000	                          call 0x4000952	       180	clean.c	FUNCTION_33	IF_3	IF_4	CALL_8
0x4000952	      0xe800000000	                          call 0x4000957	       181	clean.c	FUNCTION_33	IF_3	IF_4
0x4000957	          0x4889c2	                            mov rdx, rax	       181	clean.c	FUNCTION_33	IF_3	IF_4
0x400095a	    0x8b85f0feffff	            mov eax, dword [rbp - 0x110]	       181	clean.c	FUNCTION_33	IF_3	IF_4
0x4000960	            0x8902	                    mov dword [rdx], eax	       181	clean.c	FUNCTION_33	IF_3	IF_4
0x4000962	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000969	    0x488b05000000	            mov rax, qword [0x04000970] 	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000970	          0x4889c7	                            mov rdi, rax	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000973	      0xe8b6f9ffff	                               call sym.	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000978	          0x4889de	                            mov rsi, rbx	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x400097b	          0x4889c7	                            mov rdi, rax	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x400097e	      0xb800000000	                              mov eax, 0	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000983	      0xe800000000	                          call 0x4000988	       182	clean.c	FUNCTION_33	IF_3	IF_4	CALL_10
0x4000988	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       183	clean.c	FUNCTION_33	IF_3	IF_4
0x400098f	    0xc70000000000	                      mov dword [rax], 0	       183	clean.c	FUNCTION_33	IF_3	IF_4
0x4000995	    0x8b85e8feffff	            mov eax, dword [rbp - 0x118]	       185	clean.c	FUNCTION_33	IF_3
0x400099b	    0x8985e0feffff	            mov dword [rbp - 0x120], eax	       185	clean.c	FUNCTION_33	IF_3
0x40009a1	      0xe911040000	                           jmp 0x4000db7	       186	clean.c	FUNCTION_33	IF_3
0x40009a6	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       189	clean.c	FUNCTION_33	CALL_11
0x40009ad	      0xbe2f000000	                           mov esi, 0x2f	       189	clean.c	FUNCTION_33	CALL_11
0x40009b2	          0x4889c7	                            mov rdi, rax	       189	clean.c	FUNCTION_33	CALL_11
0x40009b5	      0xe822f9ffff	                call sym.strbuf_complete	       189	clean.c	FUNCTION_33	CALL_11
0x40009ba	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       191	clean.c	FUNCTION_33
0x40009c1	        0x488b4008	                mov rax, qword [rax + 8]	       191	clean.c	FUNCTION_33
0x40009c5	    0x8985f4feffff	            mov dword [rbp - 0x10c], eax	       191	clean.c	FUNCTION_33
0x40009cb	      0xe93d020000	                           jmp 0x4000c0d	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x40009d0	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009d7	        0x4883c013	                           add rax, 0x13	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009db	          0x4889c7	                            mov rdi, rax	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009de	      0xe8a4f9ffff	               call sym.is_dot_or_dotdot	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009e3	            0x85c0	                           test eax, eax	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009e5	     0xf8521020000	                           jne 0x4000c0c	       194	clean.c	FUNCTION_33	WHILE_1	IF_5	CALL_13
0x40009eb	    0x8b85f4feffff	            mov eax, dword [rbp - 0x10c]	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x40009f1	          0x4863d0	                         movsxd rdx, eax	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x40009f4	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x40009fb	          0x4889d6	                            mov rsi, rdx	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x40009fe	          0x4889c7	                            mov rdi, rax	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x4000a01	      0xe867f7ffff	                  call sym.strbuf_setlen	       197	clean.c	FUNCTION_33	WHILE_1	CALL_14
0x4000a06	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a0d	        0x488d5013	                   lea rdx, [rax + 0x13]	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a11	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a18	          0x4889d6	                            mov rsi, rdx	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a1b	          0x4889c7	                            mov rdi, rax	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a1e	      0xe852f8ffff	                  call sym.strbuf_addstr	       198	clean.c	FUNCTION_33	WHILE_1	CALL_15
0x4000a23	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a2a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a2e	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a35	          0x4889d6	                            mov rsi, rdx	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a38	          0x4889c7	                            mov rdi, rax	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a3b	      0xe800000000	                          call 0x4000a40	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a40	            0x85c0	                           test eax, eax	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a42	     0xf85ab010000	                           jne 0x4000bf3	       199	clean.c	FUNCTION_33	WHILE_1	IF_6
0x4000a48	    0x8b8568ffffff	             mov eax, dword [rbp - 0x98]	       201	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	CALL_16
0x4000a4e	      0x2500f00000	                         and eax, 0xf000	       201	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	CALL_16
0x4000a53	      0x3d00400000	                         cmp eax, 0x4000	       201	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	CALL_16
0x4000a58	     0xf85a1000000	                           jne 0x4000aff	       201	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	CALL_16
0x4000a5e	    0x4c8d85dcfeff	                   lea r8, [rbp - 0x124]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a65	    0x8bbdb4feffff	            mov edi, dword [rbp - 0x14c]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a6b	    0x8b8db8feffff	            mov ecx, dword [rbp - 0x148]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a71	    0x8b95bcfeffff	            mov edx, dword [rbp - 0x144]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a77	    0x488bb5c0feff	            mov rsi, qword [rbp - 0x140]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a7e	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a85	          0x4d89c1	                              mov r9, r8	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a88	          0x4189f8	                            mov r8d, edi	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a8b	          0x4889c7	                            mov rdi, rax	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a8e	      0xe8b7fcffff	                    call sym.remove_dirs	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a93	            0x85c0	                           test eax, eax	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a95	            0x740a	                            je 0x4000aa1	       202	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8	CALL_17
0x4000a97	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       203	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_8
0x4000aa1	    0x8b85dcfeffff	            mov eax, dword [rbp - 0x124]	       204	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9
0x4000aa7	            0x85c0	                           test eax, eax	       204	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9
0x4000aa9	            0x7442	                            je 0x4000aed	       204	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9
0x4000aab	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000ab2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000ab6	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000abd	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000ac4	          0x4889ce	                            mov rsi, rcx	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000ac7	          0x4889c7	                            mov rdi, rax	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000aca	      0xe800000000	                          call 0x4000acf	       205	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_18
0x4000acf	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	       206	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0x4000ad6	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       206	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0x4000add	          0x4889d6	                            mov rsi, rdx	       206	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0x4000ae0	          0x4889c7	                            mov rdi, rax	       206	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0x4000ae3	      0xe800000000	                          call 0x4000ae8	       206	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	IF_9	CALL_19
0x4000ae8	      0xe920010000	                           jmp 0x4000c0d	       209	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7
0x4000aed	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       208	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	ELSE_2
0x4000af4	    0xc70000000000	                      mov dword [rax], 0	       208	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7	ELSE_2
0x4000afa	      0xe90e010000	                           jmp 0x4000c0d	       209	clean.c	FUNCTION_33	WHILE_1	ELSE_1	IF_7
0x4000aff	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b06	            0x7515	                           jne 0x4000b1d	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b08	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b0f	        0x488b4010	            mov rax, qword [rax + 0x10] 	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b13	          0x4889c7	                            mov rdi, rax	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b16	      0xe800000000	                          call 0x4000b1b	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b1b	            0xeb05	                           jmp 0x4000b22	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b1d	      0xb800000000	                              mov eax, 0	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b22	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       211	clean.c	FUNCTION_33	WHILE_1	ELSE_3	CALL_20
0x4000b28	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       212	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10
0x4000b2f	            0x7542	                           jne 0x4000b73	       212	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10
0x4000b31	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b38	        0x488b4010	            mov rax, qword [rax + 0x10] 	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b3c	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b43	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b4a	          0x4889ce	                            mov rsi, rcx	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b4d	          0x4889c7	                            mov rdi, rax	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b50	      0xe800000000	                          call 0x4000b55	       213	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_21
0x4000b55	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	       214	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_22
0x4000b5c	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       214	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_22
0x4000b63	          0x4889d6	                            mov rsi, rdx	       214	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_22
0x4000b66	          0x4889c7	                            mov rdi, rax	       214	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_22
0x4000b69	      0xe800000000	                          call 0x4000b6e	       214	clean.c	FUNCTION_33	WHILE_1	ELSE_3	IF_10	CALL_22
0x4000b6e	      0xe99a000000	                           jmp 0x4000c0d	       223	clean.c	FUNCTION_33	WHILE_1	ELSE_3
0x4000b73	      0xe800000000	                          call 0x4000b78	       216	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000b78	            0x8b00	                    mov eax, dword [rax]	       216	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000b7a	    0x8985f8feffff	            mov dword [rbp - 0x108], eax	       216	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000b80	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b87	        0x488b4010	            mov rax, qword [rax + 0x10] 	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b8b	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b92	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b99	          0x4889ce	                            mov rsi, rcx	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b9c	          0x4889c7	                            mov rdi, rax	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000b9f	      0xe800000000	                          call 0x4000ba4	       217	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_23
0x4000ba4	      0xe800000000	                          call 0x4000ba9	       218	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000ba9	          0x4889c2	                            mov rdx, rax	       218	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000bac	    0x8b85f8feffff	            mov eax, dword [rbp - 0x108]	       218	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000bb2	            0x8902	                    mov dword [rdx], eax	       218	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000bb4	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bbb	    0x488b05000000	            mov rax, qword [0x04000bc2] 	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bc2	          0x4889c7	                            mov rdi, rax	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bc5	      0xe864f7ffff	                               call sym.	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bca	          0x4889de	                            mov rsi, rbx	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bcd	          0x4889c7	                            mov rdi, rax	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bd0	      0xb800000000	                              mov eax, 0	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bd5	      0xe800000000	                          call 0x4000bda	       219	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4	CALL_25
0x4000bda	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       220	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000be1	    0xc70000000000	                      mov dword [rax], 0	       220	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000be7	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       221	clean.c	FUNCTION_33	WHILE_1	ELSE_3	ELSE_4
0x4000bf1	            0xeb1a	                           jmp 0x4000c0d	       223	clean.c	FUNCTION_33	WHILE_1	ELSE_3
0x4000bf3	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       227	clean.c	FUNCTION_33	WHILE_1
0x4000bfa	    0xc70000000000	                      mov dword [rax], 0	       227	clean.c	FUNCTION_33	WHILE_1
0x4000c00	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       228	clean.c	FUNCTION_33	WHILE_1
0x4000c0a	            0xeb25	                           jmp 0x4000c31	       228	clean.c	FUNCTION_33	WHILE_1
0x4000c0c	              0x90	                                     nop	       195	clean.c	FUNCTION_33	WHILE_1	IF_5
0x4000c0d	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c14	          0x4889c7	                            mov rdi, rax	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c17	      0xe800000000	                          call 0x4000c1c	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c1c	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c23	    0x4883bd08ffff	               cmp qword [rbp - 0xf8], 0	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c2b	     0xf859ffdffff	                           jne 0x40009d0	       192	clean.c	FUNCTION_33	WHILE_1	CALL_12
0x4000c31	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       231	clean.c	FUNCTION_33	CALL_26
0x4000c38	          0x4889c7	                            mov rdi, rax	       231	clean.c	FUNCTION_33	CALL_26
0x4000c3b	      0xe800000000	                          call 0x4000c40	       231	clean.c	FUNCTION_33	CALL_26
0x4000c40	    0x8b85ecfeffff	            mov eax, dword [rbp - 0x114]	       233	clean.c	FUNCTION_33	CALL_27
0x4000c46	          0x4863d0	                         movsxd rdx, eax	       233	clean.c	FUNCTION_33	CALL_27
0x4000c49	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       233	clean.c	FUNCTION_33	CALL_27
0x4000c50	          0x4889d6	                            mov rsi, rdx	       233	clean.c	FUNCTION_33	CALL_27
0x4000c53	          0x4889c7	                            mov rdi, rax	       233	clean.c	FUNCTION_33	CALL_27
0x4000c56	      0xe812f5ffff	                  call sym.strbuf_setlen	       233	clean.c	FUNCTION_33	CALL_27
0x4000c5b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       235	clean.c	FUNCTION_33	IF_11
0x4000c62	            0x8b00	                    mov eax, dword [rax]	       235	clean.c	FUNCTION_33	IF_11
0x4000c64	            0x85c0	                           test eax, eax	       235	clean.c	FUNCTION_33	IF_11
0x4000c66	     0xf84bf000000	                            je 0x4000d2b	       235	clean.c	FUNCTION_33	IF_11
0x4000c6c	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c73	            0x7515	                           jne 0x4000c8a	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c75	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c7c	        0x488b4010	            mov rax, qword [rax + 0x10] 	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c80	          0x4889c7	                            mov rdi, rax	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c83	      0xe800000000	                          call 0x4000c88	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c88	            0xeb05	                           jmp 0x4000c8f	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c8a	      0xb800000000	                              mov eax, 0	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c8f	    0x8985e8feffff	            mov dword [rbp - 0x118], eax	       236	clean.c	FUNCTION_33	IF_11	CALL_28
0x4000c95	    0x83bde8feffff	              cmp dword [rbp - 0x118], 0	       237	clean.c	FUNCTION_33	IF_11	IF_12
0x4000c9c	            0x750f	                           jne 0x4000cad	       237	clean.c	FUNCTION_33	IF_11	IF_12
0x4000c9e	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       238	clean.c	FUNCTION_33	IF_11	IF_12
0x4000ca5	    0xc70001000000	                      mov dword [rax], 1	       238	clean.c	FUNCTION_33	IF_11	IF_12
0x4000cab	            0xeb7e	                           jmp 0x4000d2b	       238	clean.c	FUNCTION_33	IF_11	IF_12
0x4000cad	      0xe800000000	                          call 0x4000cb2	       240	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000cb2	            0x8b00	                    mov eax, dword [rax]	       240	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000cb4	    0x8985fcfeffff	            mov dword [rbp - 0x104], eax	       240	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000cba	    0x488b85c8feff	            mov rax, qword [rbp - 0x138]	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cc1	        0x488b4010	            mov rax, qword [rax + 0x10] 	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cc5	    0x488d9510ffff	                   lea rdx, [rbp - 0xf0]	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000ccc	    0x488b8dc0feff	            mov rcx, qword [rbp - 0x140]	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cd3	          0x4889ce	                            mov rsi, rcx	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cd6	          0x4889c7	                            mov rdi, rax	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cd9	      0xe800000000	                          call 0x4000cde	       241	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_29
0x4000cde	      0xe800000000	                          call 0x4000ce3	       242	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000ce3	          0x4889c2	                            mov rdx, rax	       242	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000ce6	    0x8b85fcfeffff	            mov eax, dword [rbp - 0x104]	       242	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000cec	            0x8902	                    mov dword [rdx], eax	       242	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000cee	    0x488b9d20ffff	             mov rbx, qword [rbp - 0xe0]	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000cf5	    0x488b05000000	            mov rax, qword [0x04000cfc] 	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000cfc	          0x4889c7	                            mov rdi, rax	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000cff	      0xe82af6ffff	                               call sym.	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000d04	          0x4889de	                            mov rsi, rbx	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000d07	          0x4889c7	                            mov rdi, rax	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000d0a	      0xb800000000	                              mov eax, 0	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000d0f	      0xe800000000	                          call 0x4000d14	       243	clean.c	FUNCTION_33	IF_11	ELSE_5	CALL_31
0x4000d14	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       244	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000d1b	    0xc70000000000	                      mov dword [rax], 0	       244	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000d21	    0xc785e0feffff	              mov dword [rbp - 0x120], 1	       245	clean.c	FUNCTION_33	IF_11	ELSE_5
0x4000d2b	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       249	clean.c	FUNCTION_33	IF_13
0x4000d32	            0x8b00	                    mov eax, dword [rax]	       249	clean.c	FUNCTION_33	IF_13
0x4000d34	            0x85c0	                           test eax, eax	       249	clean.c	FUNCTION_33	IF_13
0x4000d36	            0x757f	                           jne 0x4000db7	       249	clean.c	FUNCTION_33	IF_13
0x4000d38	    0x83bdb4feffff	              cmp dword [rbp - 0x14c], 0	       249	clean.c	FUNCTION_33	IF_13
0x4000d3f	            0x7576	                           jne 0x4000db7	       249	clean.c	FUNCTION_33	IF_13
0x4000d41	    0xc785e4feffff	              mov dword [rbp - 0x11c], 0	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000d4b	            0xeb5a	                           jmp 0x4000da7	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000d4d	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d54	    0x8b95e4feffff	            mov edx, dword [rbp - 0x11c]	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d5a	          0x4863d2	                         movsxd rdx, edx	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d5d	        0x48c1e204	                              shl rdx, 4	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d61	          0x4801d0	                            add rax, rdx	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d64	          0x488b18	                    mov rbx, qword [rax]	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d67	    0x83bdb8feffff	              cmp dword [rbp - 0x148], 0	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d6e	            0x7411	                            je 0x4000d81	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d70	    0x488b05000000	            mov rax, qword [0x04000d77] 	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d77	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d7a	      0xe8aff5ffff	                               call sym.	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d7f	            0xeb0f	                           jmp 0x4000d90	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d81	    0x488b05000000	            mov rax, qword [0x04000d88] 	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d88	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d8b	      0xe89ef5ffff	                               call sym.	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d90	          0x4889de	                            mov rsi, rbx	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d93	          0x4889c7	                            mov rdi, rax	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d96	      0xb800000000	                              mov eax, 0	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000d9b	      0xe800000000	                          call 0x4000da0	       252	clean.c	FUNCTION_33	IF_13	CALL_34
0x4000da0	    0x8385e4feffff	              add dword [rbp - 0x11c], 1	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000da7	    0x8b9538ffffff	             mov edx, dword [rbp - 0xc8]	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000dad	    0x8b85e4feffff	            mov eax, dword [rbp - 0x11c]	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000db3	            0x39c2	                            cmp edx, eax	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000db5	            0x7796	                            ja 0x4000d4d	       251	clean.c	FUNCTION_33	IF_13	FOR_1
0x4000db7	    0x488d8510ffff	                   lea rax, [rbp - 0xf0]	       255	clean.c	FUNCTION_33	CALL_35
0x4000dbe	          0x4889c7	                            mov rdi, rax	       255	clean.c	FUNCTION_33	CALL_35
0x4000dc1	      0xe800000000	                          call 0x4000dc6	       255	clean.c	FUNCTION_33	CALL_35
0x4000dc6	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       256	clean.c	FUNCTION_33	CALL_36
0x4000dcd	      0xbe00000000	                              mov esi, 0	       256	clean.c	FUNCTION_33	CALL_36
0x4000dd2	          0x4889c7	                            mov rdi, rax	       256	clean.c	FUNCTION_33	CALL_36
0x4000dd5	      0xe800000000	                          call 0x4000dda	       256	clean.c	FUNCTION_33	CALL_36
0x4000dda	    0x8b85e0feffff	            mov eax, dword [rbp - 0x120]	       257	clean.c	FUNCTION_33
0x4000de0	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       258	clean.c	FUNCTION_33
0x4000de4	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       258	clean.c	FUNCTION_33
0x4000ded	            0x7405	                            je 0x4000df4	       258	clean.c	FUNCTION_33
0x4000def	      0xe800000000	                          call 0x4000df4	       258	clean.c	FUNCTION_33
0x4000df4	    0x4881c4580100	                          add rsp, 0x158	       258	clean.c	FUNCTION_33
0x4000dfb	              0x5b	                                 pop rbx	       258	clean.c	FUNCTION_33
0x4000dfc	              0x5d	                                 pop rbp	       258	clean.c	FUNCTION_33
0x4000dfd	              0xc3	                                     ret	       258	clean.c	FUNCTION_33
filter_by_patterns_cmd	DO,0:WHILE,0:SWITCH,0:IF,6:functions,1:ELSE,2:CALL,21:FOR,2	173
0x4001b9a	              0x55	                                push rbp	       648	clean.c	FUNCTION_42
0x4001b9b	          0x4889e5	                            mov rbp, rsp	       648	clean.c	FUNCTION_42
0x4001b9e	              0x53	                                push rbx	       648	clean.c	FUNCTION_42
0x4001b9f	    0x4881ec780100	                          sub rsp, 0x178	       648	clean.c	FUNCTION_42
0x4001ba6	    0x64488b042528	                mov rax, qword fs:[0x28]	       648	clean.c	FUNCTION_42
0x4001baf	        0x488945e8	             mov qword [rbp - 0x18], rax	       648	clean.c	FUNCTION_42
0x4001bb3	            0x31c0	                            xor eax, eax	       648	clean.c	FUNCTION_42
0x4001bb5	    0x48c785b0feff	              mov qword [rbp - 0x150], 0	       650	clean.c	FUNCTION_42
0x4001bc0	    0x48c785b8feff	              mov qword [rbp - 0x148], 0	       650	clean.c	FUNCTION_42
0x4001bcb	    0x48c785c0feff	              mov qword [rbp - 0x140], 0	       650	clean.c	FUNCTION_42
0x4001bd6	    0xc78590feffff	    mov dword [rbp - 0x170], 0xffffffff 	       654	clean.c	FUNCTION_42
0x4001be0	    0x8b0500000000	            mov eax, dword [0x04001be6] 	       657	clean.c	FUNCTION_42	FOR_1	IF_1
0x4001be6	            0x85c0	                           test eax, eax	       657	clean.c	FUNCTION_42	FOR_1	IF_1
0x4001be8	     0xf84b3020000	                            je 0x4001ea1	       657	clean.c	FUNCTION_42	FOR_1	IF_1
0x4001bee	    0x83bd90feffff	              cmp dword [rbp - 0x170], 0	       660	clean.c	FUNCTION_42	FOR_1	IF_2
0x4001bf5	            0x7405	                            je 0x4001bfc	       660	clean.c	FUNCTION_42	FOR_1	IF_2
0x4001bf7	      0xe802f2ffff	              call sym.pretty_print_dels	       661	clean.c	FUNCTION_42	FOR_1	CALL_1
0x4001bfc	      0xbf02000000	                              mov edi, 2	       663	clean.c	FUNCTION_42	FOR_1	CALL_2
0x4001c01	      0xe8e1eaffff	              call sym.clean_print_color	       663	clean.c	FUNCTION_42	FOR_1	CALL_2
0x4001c06	      0xbf00000000	                              mov edi, 0	       664	clean.c	FUNCTION_42	FOR_1	CALL_4
0x4001c0b	      0xe81ee7ffff	                               call sym.	       664	clean.c	FUNCTION_42	FOR_1	CALL_4
0x4001c10	          0x4889c7	                            mov rdi, rax	       664	clean.c	FUNCTION_42	FOR_1	CALL_4
0x4001c13	      0xb800000000	                              mov eax, 0	       664	clean.c	FUNCTION_42	FOR_1	CALL_4
0x4001c18	      0xe800000000	                          call 0x4001c1d	       664	clean.c	FUNCTION_42	FOR_1	CALL_4
0x4001c1d	      0xbf00000000	                              mov edi, 0	       665	clean.c	FUNCTION_42	FOR_1	CALL_5
0x4001c22	      0xe8c0eaffff	              call sym.clean_print_color	       665	clean.c	FUNCTION_42	FOR_1	CALL_5
0x4001c27	    0x488b15000000	            mov rdx, qword [0x04001c2e] 	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c2e	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c35	          0x4889d6	                            mov rsi, rdx	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c38	          0x4889c7	                            mov rdi, rax	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c3b	      0xe800000000	                          call 0x4001c40	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c40	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c43	            0x7411	                            je 0x4001c56	       666	clean.c	FUNCTION_42	FOR_1	IF_3	CALL_6
0x4001c45	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       667	clean.c	FUNCTION_42	FOR_1	CALL_7
0x4001c4c	          0x4889c7	                            mov rdi, rax	       667	clean.c	FUNCTION_42	FOR_1	CALL_7
0x4001c4f	      0xe800000000	                          call 0x4001c54	       667	clean.c	FUNCTION_42	FOR_1	CALL_7
0x4001c54	            0xeb0a	                           jmp 0x4001c60	       667	clean.c	FUNCTION_42	FOR_1	CALL_7
0x4001c56	      0xbf0a000000	                            mov edi, 0xa	       669	clean.c	FUNCTION_42	FOR_1	CALL_8
0x4001c5b	      0xe800000000	                          call 0x4001c60	       669	clean.c	FUNCTION_42	FOR_1	CALL_8
0x4001c60	    0x488b85b8feff	            mov rax, qword [rbp - 0x148]	       672	clean.c	FUNCTION_42	FOR_1	IF_4
0x4001c67	          0x4885c0	                           test rax, rax	       672	clean.c	FUNCTION_42	FOR_1	IF_4
0x4001c6a	     0xf8434020000	                            je 0x4001ea4	       672	clean.c	FUNCTION_42	FOR_1	IF_4
0x4001c70	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       675	clean.c	FUNCTION_42	FOR_1	CALL_9
0x4001c77	      0xba10010000	                          mov edx, 0x110	       675	clean.c	FUNCTION_42	FOR_1	CALL_9
0x4001c7c	      0xbe00000000	                              mov esi, 0	       675	clean.c	FUNCTION_42	FOR_1	CALL_9
0x4001c81	          0x4889c7	                            mov rdi, rax	       675	clean.c	FUNCTION_42	FOR_1	CALL_9
0x4001c84	      0xe800000000	                          call 0x4001c89	       675	clean.c	FUNCTION_42	FOR_1	CALL_9
0x4001c89	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001c90	      0xba00000000	                              mov edx, 0	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001c95	      0xbe00000000	                              mov esi, 0	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001c9a	          0x4889c7	                            mov rdi, rax	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001c9d	      0xe800000000	                          call 0x4001ca2	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001ca2	    0x488985a0feff	            mov qword [rbp - 0x160], rax	       676	clean.c	FUNCTION_42	FOR_1	CALL_10
0x4001ca9	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cb0	      0xba00000000	                              mov edx, 0	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cb5	      0xbe20000000	                           mov esi, 0x20	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cba	          0x4889c7	                            mov rdi, rax	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cbd	      0xe8e8e5ffff	               call sym.strbuf_split_max	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cc2	    0x488985a8feff	            mov qword [rbp - 0x158], rax	       677	clean.c	FUNCTION_42	FOR_1	CALL_11
0x4001cc9	    0xc78594feffff	              mov dword [rbp - 0x16c], 0	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001cd3	      0xe99f000000	                           jmp 0x4001d77	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001cd8	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cde	            0x4898	                                    cdqe	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001ce0	    0x488d14c50000	                        lea rdx, [rax*8]	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001ce8	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cef	          0x4801d0	                            add rax, rdx	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cf2	          0x488b00	                    mov rax, qword [rax]	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cf5	          0x4889c7	                            mov rdi, rax	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cf8	      0xe800000000	                          call 0x4001cfd	       680	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_12
0x4001cfd	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d03	            0x4898	                                    cdqe	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d05	    0x488d14c50000	                        lea rdx, [rax*8]	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d0d	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d14	          0x4801d0	                            add rax, rdx	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d17	          0x488b00	                    mov rax, qword [rax]	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d1a	        0x488b4008	                mov rax, qword [rax + 8]	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d1e	          0x4885c0	                           test rax, rax	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d21	            0x744c	                            je 0x4001d6f	       681	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d23	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d29	            0xf7d0	                                 not eax	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d2b	            0x89c1	                            mov ecx, eax	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d2d	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d33	            0x4898	                                    cdqe	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d35	    0x488d14c50000	                        lea rdx, [rax*8]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d3d	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d44	          0x4801d0	                            add rax, rdx	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d47	          0x488b00	                    mov rax, qword [rax]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d4a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d4e	    0x488b95a0feff	            mov rdx, qword [rbp - 0x160]	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d55	          0x4189c8	                            mov r8d, ecx	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d58	          0x4889d1	                            mov rcx, rdx	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d5b	      0xba00000000	                              mov edx, 0	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d60	      0xbe00000000	                              mov esi, 0	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d65	          0x4889c7	                            mov rdi, rax	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d68	      0xe800000000	                          call 0x4001d6d	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d6d	            0xeb01	                           jmp 0x4001d70	       684	clean.c	FUNCTION_42	FOR_1	FOR_2	CALL_13
0x4001d6f	              0x90	                                     nop	       682	clean.c	FUNCTION_42	FOR_1	FOR_2	IF_5
0x4001d70	    0x838594feffff	              add dword [rbp - 0x16c], 1	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d77	    0x8b8594feffff	            mov eax, dword [rbp - 0x16c]	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d7d	            0x4898	                                    cdqe	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d7f	    0x488d14c50000	                        lea rdx, [rax*8]	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d87	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d8e	          0x4801d0	                            add rax, rdx	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d91	          0x488b00	                    mov rax, qword [rax]	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d94	          0x4885c0	                           test rax, rax	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d97	     0xf853bffffff	                           jne 0x4001cd8	       679	clean.c	FUNCTION_42	FOR_1	FOR_2
0x4001d9d	    0xc78590feffff	              mov dword [rbp - 0x170], 0	       687	clean.c	FUNCTION_42	FOR_1
0x4001da7	    0x488b05000000	            mov rax, qword [0x04001dae] 	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001dae	    0x48898598feff	            mov qword [rbp - 0x168], rax	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001db5	            0xeb4f	                           jmp 0x4001e06	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001db7	    0xc7858cfeffff	              mov dword [rbp - 0x174], 0	       689	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001dc1	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dc8	          0x488b10	                    mov rdx, qword [rax]	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dcb	    0x488d8d8cfeff	                  lea rcx, [rbp - 0x174]	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dd2	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dd9	      0xbe00000000	                              mov esi, 0	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dde	          0x4889c7	                            mov rdi, rax	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001de1	      0xe800000000	                          call 0x4001de6	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001de6	            0x85c0	                           test eax, eax	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001de8	            0x7414	                            je 0x4001dfe	       691	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1	CALL_1
0x4001dea	    0x488b8598feff	            mov rax, qword [rbp - 0x168]	       692	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1
0x4001df1	          0x488b00	                    mov rax, qword [rax]	       692	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1
0x4001df4	          0xc60000	                       mov byte [rax], 0	       692	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1
0x4001df7	    0x838590feffff	              add dword [rbp - 0x170], 1	       693	clean.c	FUNCTION_42	FOR_1	FUNCTION_1	IF_1
0x4001dfe	    0x48838598feff	           add qword [rbp - 0x168], 0x10	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e06	    0x4883bd98feff	              cmp qword [rbp - 0x168], 0	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e0e	            0x741f	                            je 0x4001e2f	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e10	    0x488b05000000	            mov rax, qword [0x04001e17] 	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e17	    0x8b1500000000	            mov edx, dword [0x04001e1d] 	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e1d	            0x89d2	                            mov edx, edx	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e1f	        0x48c1e204	                              shl rdx, 4	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e23	          0x4801d0	                            add rax, rdx	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e26	    0x483b8598feff	            cmp rax, qword [rbp - 0x168]	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e2d	            0x7788	                            ja 0x4001db7	       688	clean.c	FUNCTION_42	FOR_1	FUNCTION_1
0x4001e2f	    0x83bd90feffff	              cmp dword [rbp - 0x170], 0	       697	clean.c	FUNCTION_42	FOR_1	IF_6
0x4001e36	            0x7411	                            je 0x4001e49	       697	clean.c	FUNCTION_42	FOR_1	IF_6
0x4001e38	      0xbe00000000	                              mov esi, 0	       698	clean.c	FUNCTION_42	FOR_1	IF_6	CALL_14
0x4001e3d	      0xbf00000000	                              mov edi, 0	       698	clean.c	FUNCTION_42	FOR_1	IF_6	CALL_14
0x4001e42	      0xe800000000	                          call 0x4001e47	       698	clean.c	FUNCTION_42	FOR_1	IF_6	CALL_14
0x4001e47	            0xeb35	                           jmp 0x4001e7e	       698	clean.c	FUNCTION_42	FOR_1	IF_6	CALL_14
0x4001e49	      0xbf05000000	                              mov edi, 5	       700	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_15
0x4001e4e	      0xe894e8ffff	              call sym.clean_print_color	       700	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_15
0x4001e53	    0x488b9dc0feff	            mov rbx, qword [rbp - 0x140]	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e5a	      0xbf00000000	                              mov edi, 0	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e5f	      0xe8cae4ffff	                               call sym.	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e64	          0x4889de	                            mov rsi, rbx	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e67	          0x4889c7	                            mov rdi, rax	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e6a	      0xb800000000	                              mov eax, 0	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e6f	      0xe800000000	                          call 0x4001e74	       701	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_17
0x4001e74	      0xbf00000000	                              mov edi, 0	       702	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_18
0x4001e79	      0xe869e8ffff	              call sym.clean_print_color	       702	clean.c	FUNCTION_42	FOR_1	ELSE_2	CALL_18
0x4001e7e	    0x488b85a8feff	            mov rax, qword [rbp - 0x158]	       705	clean.c	FUNCTION_42	FOR_1	CALL_19
0x4001e85	          0x4889c7	                            mov rdi, rax	       705	clean.c	FUNCTION_42	FOR_1	CALL_19
0x4001e88	      0xe800000000	                          call 0x4001e8d	       705	clean.c	FUNCTION_42	FOR_1	CALL_19
0x4001e8d	    0x488d85d0feff	                  lea rax, [rbp - 0x130]	       706	clean.c	FUNCTION_42	FOR_1	CALL_20
0x4001e94	          0x4889c7	                            mov rdi, rax	       706	clean.c	FUNCTION_42	FOR_1	CALL_20
0x4001e97	      0xe800000000	                          call 0x4001e9c	       706	clean.c	FUNCTION_42	FOR_1	CALL_20
0x4001e9c	      0xe93ffdffff	                           jmp 0x4001be0	       707	clean.c	FUNCTION_42	FOR_1
0x4001ea1	              0x90	                                     nop	       658	clean.c	FUNCTION_42	FOR_1	IF_1
0x4001ea2	            0xeb01	                           jmp 0x4001ea5	       658	clean.c	FUNCTION_42	FOR_1	IF_1
0x4001ea4	              0x90	                                     nop	       673	clean.c	FUNCTION_42	FOR_1	IF_4
0x4001ea5	    0x488d85b0feff	                  lea rax, [rbp - 0x150]	       709	clean.c	FUNCTION_42	CALL_21
0x4001eac	          0x4889c7	                            mov rdi, rax	       709	clean.c	FUNCTION_42	CALL_21
0x4001eaf	      0xe800000000	                          call 0x4001eb4	       709	clean.c	FUNCTION_42	CALL_21
0x4001eb4	      0xb800000000	                              mov eax, 0	       710	clean.c	FUNCTION_42
0x4001eb9	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       711	clean.c	FUNCTION_42
0x4001ebd	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       711	clean.c	FUNCTION_42
0x4001ec6	            0x7405	                            je 0x4001ecd	       711	clean.c	FUNCTION_42
0x4001ec8	      0xe800000000	                          call 0x4001ecd	       711	clean.c	FUNCTION_42
0x4001ecd	    0x4881c4780100	                          add rsp, 0x178	       711	clean.c	FUNCTION_42
0x4001ed4	              0x5b	                                 pop rbx	       711	clean.c	FUNCTION_42
0x4001ed5	              0x5d	                                 pop rbp	       711	clean.c	FUNCTION_42
0x4001ed6	              0xc3	                                     ret	       711	clean.c	FUNCTION_42
clean_cmd	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,0:FOR,0	5
0x4001b8f	              0x55	                                push rbp	       643	clean.c	FUNCTION_41
0x4001b90	          0x4889e5	                            mov rbp, rsp	       643	clean.c	FUNCTION_41
0x4001b93	      0xb80a000000	                            mov eax, 0xa	       644	clean.c	FUNCTION_41
0x4001b98	              0x5d	                                 pop rbp	       645	clean.c	FUNCTION_41
0x4001b99	              0xc3	                                     ret	       645	clean.c	FUNCTION_41
correct_untracked_entries	DO,0:WHILE,2:SWITCH,0:IF,1:functions,0:ELSE,1:CALL,5:FOR,1	126
0x40023a4	              0x55	                                push rbp	       864	clean.c	FUNCTION_48
0x40023a5	          0x4889e5	                            mov rbp, rsp	       864	clean.c	FUNCTION_48
0x40023a8	        0x4883ec30	                           sub rsp, 0x30	       864	clean.c	FUNCTION_48
0x40023ac	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       864	clean.c	FUNCTION_48
0x40023b0	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       867	clean.c	FUNCTION_48	FOR_1
0x40023b7	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       867	clean.c	FUNCTION_48	FOR_1
0x40023ba	          0x8945f0	             mov dword [rbp - 0x10], eax	       867	clean.c	FUNCTION_48	FOR_1
0x40023bd	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       867	clean.c	FUNCTION_48	FOR_1
0x40023c0	          0x8945ec	             mov dword [rbp - 0x14], eax	       867	clean.c	FUNCTION_48	FOR_1
0x40023c3	      0xe961010000	                           jmp 0x4002529	       867	clean.c	FUNCTION_48	FOR_1
0x40023c8	        0x8345f401	                add dword [rbp - 0xc], 1	       871	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x40023cc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x40023d0	          0x8b4008	                mov eax, dword [rax + 8]	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x40023d3	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x40023d6	            0x7e39	                           jle 0x4002411	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x40023d8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023dc	        0x488b4020	            mov rax, qword [rax + 0x20] 	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023e0	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023e3	          0x4863d2	                         movsxd rdx, edx	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023e6	        0x48c1e203	                              shl rdx, 3	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023ea	          0x4801c2	                            add rdx, rax	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023ed	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023f1	        0x488b4018	            mov rax, qword [rax + 0x18] 	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023f5	          0x8b4dec	             mov ecx, dword [rbp - 0x14]	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023f8	          0x4863c9	                         movsxd rcx, ecx	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023fb	        0x48c1e103	                              shl rcx, 3	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x40023ff	          0x4801c8	                            add rax, rcx	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x4002402	          0x4889d6	                            mov rsi, rdx	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x4002405	          0x4889c7	                            mov rdi, rax	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x4002408	      0xe800000000	                          call 0x400240d	       870	clean.c	FUNCTION_48	FOR_1	WHILE_1	CALL_1
0x400240d	            0x85c0	                           test eax, eax	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x400240f	            0x79b7	                           jns 0x40023c8	       869	clean.c	FUNCTION_48	FOR_1	WHILE_1
0x4002411	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x4002415	          0x8b4008	                mov eax, dword [rax + 8]	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x4002418	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x400241b	            0x7e64	                           jle 0x4002481	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x400241d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002421	        0x488b4020	            mov rax, qword [rax + 0x20] 	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002425	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002428	          0x4863d2	                         movsxd rdx, edx	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x400242b	        0x48c1e203	                              shl rdx, 3	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x400242f	          0x4801d0	                            add rax, rdx	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002432	          0x488b10	                    mov rdx, qword [rax]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002435	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002439	        0x488b4018	            mov rax, qword [rax + 0x18] 	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x400243d	          0x8b4dec	             mov ecx, dword [rbp - 0x14]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002440	          0x4863c9	                         movsxd rcx, ecx	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002443	        0x48c1e103	                              shl rcx, 3	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002447	          0x4801c8	                            add rax, rcx	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x400244a	          0x488b00	                    mov rax, qword [rax]	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x400244d	          0x4889d6	                            mov rsi, rdx	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002450	          0x4889c7	                            mov rdi, rax	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002453	      0xe800000000	                          call 0x4002458	       874	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_2
0x4002458	            0x85c0	                           test eax, eax	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x400245a	            0x7425	                            je 0x4002481	       873	clean.c	FUNCTION_48	FOR_1	IF_1
0x400245c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002460	        0x488b4018	            mov rax, qword [rax + 0x18] 	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002464	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002467	          0x4863d2	                         movsxd rdx, edx	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x400246a	        0x48c1e203	                              shl rdx, 3	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x400246e	          0x4801d0	                            add rax, rdx	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002471	          0x488b00	                    mov rax, qword [rax]	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002474	          0x4889c7	                            mov rdi, rax	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002477	      0xe800000000	                          call 0x400247c	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x400247c	      0xe9a4000000	                           jmp 0x4002525	       876	clean.c	FUNCTION_48	FOR_1	IF_1	CALL_3
0x4002481	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002485	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002489	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x400248c	          0x8d5001	                      lea edx, [rax + 1]	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x400248f	          0x8955ec	             mov dword [rbp - 0x14], edx	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002492	            0x4898	                                    cdqe	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002494	        0x48c1e003	                              shl rax, 3	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002498	          0x4801c8	                            add rax, rcx	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x400249b	          0x488b00	                    mov rax, qword [rax]	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x400249e	        0x488945f8	                mov qword [rbp - 8], rax	       878	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024a2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024a6	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024aa	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024ad	          0x8d5001	                      lea edx, [rax + 1]	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024b0	          0x8955f0	             mov dword [rbp - 0x10], edx	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024b3	            0x4898	                                    cdqe	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024b5	        0x48c1e003	                              shl rax, 3	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024b9	        0x488d1401	                    lea rdx, [rcx + rax]	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024bd	        0x488b45f8	                mov rax, qword [rbp - 8]	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024c1	          0x488902	                    mov qword [rdx], rax	       881	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x40024c4	            0xeb25	                           jmp 0x40024eb	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x40024c6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024ca	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024ce	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024d1	          0x8d5001	                      lea edx, [rax + 1]	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024d4	          0x8955ec	             mov dword [rbp - 0x14], edx	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024d7	            0x4898	                                    cdqe	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024d9	        0x48c1e003	                              shl rax, 3	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024dd	          0x4801c8	                            add rax, rcx	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024e0	          0x488b00	                    mov rax, qword [rax]	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024e3	          0x4889c7	                            mov rdi, rax	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024e6	      0xe800000000	                          call 0x40024eb	       886	clean.c	FUNCTION_48	FOR_1	ELSE_1	CALL_5
0x40024eb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x40024ef	            0x8b00	                    mov eax, dword [rax]	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x40024f1	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x40024f4	            0x7e2b	                           jle 0x4002521	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x40024f6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x40024fa	        0x488b4018	            mov rax, qword [rax + 0x18] 	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x40024fe	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002501	          0x4863d2	                         movsxd rdx, edx	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002504	        0x48c1e203	                              shl rdx, 3	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002508	          0x4801d0	                            add rax, rdx	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x400250b	          0x488b10	                    mov rdx, qword [rax]	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x400250e	        0x488b45f8	                mov rax, qword [rbp - 8]	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002512	          0x4889d6	                            mov rsi, rdx	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002515	          0x4889c7	                            mov rdi, rax	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x4002518	      0xe800000000	                          call 0x400251d	       885	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2	CALL_4
0x400251d	            0x85c0	                           test eax, eax	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x400251f	            0x75a5	                           jne 0x40024c6	       884	clean.c	FUNCTION_48	FOR_1	ELSE_1	WHILE_2
0x4002521	        0x836dec01	               sub dword [rbp - 0x14], 1	       889	clean.c	FUNCTION_48	FOR_1	ELSE_1
0x4002525	        0x8345ec01	               add dword [rbp - 0x14], 1	       867	clean.c	FUNCTION_48	FOR_1
0x4002529	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       867	clean.c	FUNCTION_48	FOR_1
0x400252d	            0x8b00	                    mov eax, dword [rax]	       867	clean.c	FUNCTION_48	FOR_1
0x400252f	          0x3b45ec	             cmp eax, dword [rbp - 0x14]	       867	clean.c	FUNCTION_48	FOR_1
0x4002532	     0xf8f94feffff	                            jg 0x40023cc	       867	clean.c	FUNCTION_48	FOR_1
0x4002538	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       892	clean.c	FUNCTION_48
0x400253c	          0x8b55f0	             mov edx, dword [rbp - 0x10]	       892	clean.c	FUNCTION_48
0x400253f	            0x8910	                    mov dword [rax], edx	       892	clean.c	FUNCTION_48
0x4002541	              0x90	                                     nop	       893	clean.c	FUNCTION_48
0x4002542	              0xc9	                                   leave	       893	clean.c	FUNCTION_48
0x4002543	              0xc3	                                     ret	       893	clean.c	FUNCTION_48
dir_path_match	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,1:FOR,0	45
0x40003d5	              0x55	                                push rbp	       343	dir.h	FUNCTION_52
0x40003d6	          0x4889e5	                            mov rbp, rsp	       343	dir.h	FUNCTION_52
0x40003d9	        0x4883ec30	                           sub rsp, 0x30	       343	dir.h	FUNCTION_52
0x40003dd	        0x48897de8	             mov qword [rbp - 0x18], rdi	       343	dir.h	FUNCTION_52
0x40003e1	        0x488975e0	             mov qword [rbp - 0x20], rsi	       343	dir.h	FUNCTION_52
0x40003e5	          0x8955dc	             mov dword [rbp - 0x24], edx	       343	dir.h	FUNCTION_52
0x40003e8	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       343	dir.h	FUNCTION_52
0x40003ec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_52
0x40003f0	            0x8b00	                    mov eax, dword [rax]	       344	dir.h	FUNCTION_52
0x40003f2	            0x85c0	                           test eax, eax	       344	dir.h	FUNCTION_52
0x40003f4	            0x741f	                            je 0x4000415	       344	dir.h	FUNCTION_52
0x40003f6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_52
0x40003fa	            0x8b00	                    mov eax, dword [rax]	       344	dir.h	FUNCTION_52
0x40003fc	          0x8d50ff	                      lea edx, [rax - 1]	       344	dir.h	FUNCTION_52
0x40003ff	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       344	dir.h	FUNCTION_52
0x4000403	            0x89d2	                            mov edx, edx	       344	dir.h	FUNCTION_52
0x4000405	       0xfb6441004	        movzx eax, byte [rax + rdx + 4] 	       344	dir.h	FUNCTION_52
0x400040a	            0x3c2f	                            cmp al, 0x2f	       344	dir.h	FUNCTION_52
0x400040c	            0x7507	                           jne 0x4000415	       344	dir.h	FUNCTION_52
0x400040e	      0xb801000000	                              mov eax, 1	       344	dir.h	FUNCTION_52
0x4000413	            0xeb05	                           jmp 0x400041a	       344	dir.h	FUNCTION_52
0x4000415	      0xb800000000	                              mov eax, 0	       344	dir.h	FUNCTION_52
0x400041a	          0x8945f8	                mov dword [rbp - 8], eax	       344	dir.h	FUNCTION_52
0x400041d	        0x837df800	                  cmp dword [rbp - 8], 0	       345	dir.h	FUNCTION_52
0x4000421	            0x740b	                            je 0x400042e	       345	dir.h	FUNCTION_52
0x4000423	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       345	dir.h	FUNCTION_52
0x4000427	            0x8b00	                    mov eax, dword [rax]	       345	dir.h	FUNCTION_52
0x4000429	          0x83e801	                              sub eax, 1	       345	dir.h	FUNCTION_52
0x400042c	            0xeb06	                           jmp 0x4000434	       345	dir.h	FUNCTION_52
0x400042e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       345	dir.h	FUNCTION_52
0x4000432	            0x8b00	                    mov eax, dword [rax]	       345	dir.h	FUNCTION_52
0x4000434	          0x8945fc	                mov dword [rbp - 4], eax	       345	dir.h	FUNCTION_52
0x4000437	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       346	dir.h	FUNCTION_52	CALL_1
0x400043b	        0x488d7004	                      lea rsi, [rax + 4]	       346	dir.h	FUNCTION_52	CALL_1
0x400043f	        0x448b45f8	                mov r8d, dword [rbp - 8]	       346	dir.h	FUNCTION_52	CALL_1
0x4000443	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	       346	dir.h	FUNCTION_52	CALL_1
0x4000447	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	       346	dir.h	FUNCTION_52	CALL_1
0x400044a	          0x8b55fc	                mov edx, dword [rbp - 4]	       346	dir.h	FUNCTION_52	CALL_1
0x400044d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       346	dir.h	FUNCTION_52	CALL_1
0x4000451	          0x4589c1	                            mov r9d, r8d	       346	dir.h	FUNCTION_52	CALL_1
0x4000454	          0x4989f8	                             mov r8, rdi	       346	dir.h	FUNCTION_52	CALL_1
0x4000457	          0x4889c7	                            mov rdi, rax	       346	dir.h	FUNCTION_52	CALL_1
0x400045a	      0xe800000000	                          call 0x400045f	       346	dir.h	FUNCTION_52	CALL_1
0x400045f	              0xc9	                                   leave	       348	dir.h	FUNCTION_52
0x4000460	              0xc3	                                     ret	       348	dir.h	FUNCTION_52
is_dot_or_dotdot	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,0:FOR,0	27
0x4000387	              0x55	                                push rbp	       276	dir.h	FUNCTION_50
0x4000388	          0x4889e5	                            mov rbp, rsp	       276	dir.h	FUNCTION_50
0x400038b	        0x48897df8	                mov qword [rbp - 8], rdi	       276	dir.h	FUNCTION_50
0x400038f	        0x488b45f8	                mov rax, qword [rbp - 8]	       277	dir.h	FUNCTION_50
0x4000393	           0xfb600	                   movzx eax, byte [rax]	       277	dir.h	FUNCTION_50
0x4000396	            0x3c2e	                            cmp al, 0x2e	       277	dir.h	FUNCTION_50
0x4000398	            0x7534	                           jne 0x40003ce	       277	dir.h	FUNCTION_50
0x400039a	        0x488b45f8	                mov rax, qword [rbp - 8]	       278	dir.h	FUNCTION_50
0x400039e	        0x4883c001	                              add rax, 1	       278	dir.h	FUNCTION_50
0x40003a2	           0xfb600	                   movzx eax, byte [rax]	       278	dir.h	FUNCTION_50
0x40003a5	            0x84c0	                             test al, al	       277	dir.h	FUNCTION_50
0x40003a7	            0x741e	                            je 0x40003c7	       277	dir.h	FUNCTION_50
0x40003a9	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	dir.h	FUNCTION_50
0x40003ad	        0x4883c001	                              add rax, 1	       279	dir.h	FUNCTION_50
0x40003b1	           0xfb600	                   movzx eax, byte [rax]	       279	dir.h	FUNCTION_50
0x40003b4	            0x3c2e	                            cmp al, 0x2e	       278	dir.h	FUNCTION_50
0x40003b6	            0x7516	                           jne 0x40003ce	       278	dir.h	FUNCTION_50
0x40003b8	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	dir.h	FUNCTION_50
0x40003bc	        0x4883c002	                              add rax, 2	       279	dir.h	FUNCTION_50
0x40003c0	           0xfb600	                   movzx eax, byte [rax]	       279	dir.h	FUNCTION_50
0x40003c3	            0x84c0	                             test al, al	       279	dir.h	FUNCTION_50
0x40003c5	            0x7507	                           jne 0x40003ce	       279	dir.h	FUNCTION_50
0x40003c7	      0xb801000000	                              mov eax, 1	       277	dir.h	FUNCTION_50
0x40003cc	            0xeb05	                           jmp 0x40003d3	       277	dir.h	FUNCTION_50
0x40003ce	      0xb800000000	                              mov eax, 0	       277	dir.h	FUNCTION_50
0x40003d3	              0x5d	                                 pop rbp	       280	dir.h	FUNCTION_50
0x40003d4	              0xc3	                                     ret	       280	dir.h	FUNCTION_50
quit_cmd	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,3:FOR,0	13
0x4002190	              0x55	                                push rbp	       786	clean.c	FUNCTION_45
0x4002191	          0x4889e5	                            mov rbp, rsp	       786	clean.c	FUNCTION_45
0x4002194	      0xbe00000000	                              mov esi, 0	       787	clean.c	FUNCTION_45	CALL_1
0x4002199	      0xbf00000000	                              mov edi, 0	       787	clean.c	FUNCTION_45	CALL_1
0x400219e	      0xe800000000	                          call 0x40021a3	       787	clean.c	FUNCTION_45	CALL_1
0x40021a3	      0xbf00000000	                              mov edi, 0	       788	clean.c	FUNCTION_45	CALL_3
0x40021a8	      0xe881e1ffff	                               call sym.	       788	clean.c	FUNCTION_45	CALL_3
0x40021ad	          0x4889c7	                            mov rdi, rax	       788	clean.c	FUNCTION_45	CALL_3
0x40021b0	      0xb800000000	                              mov eax, 0	       788	clean.c	FUNCTION_45	CALL_3
0x40021b5	      0xe800000000	                          call 0x40021ba	       788	clean.c	FUNCTION_45	CALL_3
0x40021ba	      0xb80a000000	                            mov eax, 0xa	       789	clean.c	FUNCTION_45
0x40021bf	              0x5d	                                 pop rbp	       790	clean.c	FUNCTION_45
0x40021c0	              0xc3	                                     ret	       790	clean.c	FUNCTION_45
cmd_clean	DO,0:WHILE,0:SWITCH,0:IF,15:functions,1:ELSE,2:CALL,39:FOR,4	516
0x4002544	              0x55	                                push rbp	       896	clean.c	FUNCTION_49
0x4002545	          0x4889e5	                            mov rbp, rsp	       896	clean.c	FUNCTION_49
0x4002548	    0x4881ecf00400	                          sub rsp, 0x4f0	       896	clean.c	FUNCTION_49
0x400254f	    0x89bd2cfbffff	            mov dword [rbp - 0x4d4], edi	       896	clean.c	FUNCTION_49
0x4002555	    0x4889b520fbff	            mov qword [rbp - 0x4e0], rsi	       896	clean.c	FUNCTION_49
0x400255c	    0x48899518fbff	            mov qword [rbp - 0x4e8], rdx	       896	clean.c	FUNCTION_49
0x4002563	    0x64488b042528	                mov rax, qword fs:[0x28]	       896	clean.c	FUNCTION_49
0x400256c	        0x488945f8	                mov qword [rbp - 8], rax	       896	clean.c	FUNCTION_49
0x4002570	            0x31c0	                            xor eax, eax	       896	clean.c	FUNCTION_49
0x4002572	    0xc78534fbffff	              mov dword [rbp - 0x4cc], 0	       898	clean.c	FUNCTION_49
0x400257c	    0xc78538fbffff	              mov dword [rbp - 0x4c8], 0	       898	clean.c	FUNCTION_49
0x4002586	    0xc7853cfbffff	              mov dword [rbp - 0x4c4], 0	       898	clean.c	FUNCTION_49
0x4002590	    0xc78540fbffff	              mov dword [rbp - 0x4c0], 0	       898	clean.c	FUNCTION_49
0x400259a	    0xc78544fbffff	              mov dword [rbp - 0x4bc], 0	       899	clean.c	FUNCTION_49
0x40025a4	    0xc78550fbffff	              mov dword [rbp - 0x4b0], 0	       899	clean.c	FUNCTION_49
0x40025ae	    0xc78554fbffff	              mov dword [rbp - 0x4ac], 0	       899	clean.c	FUNCTION_49
0x40025b8	    0xc78548fbffff	              mov dword [rbp - 0x4b8], 1	       899	clean.c	FUNCTION_49
0x40025c2	    0xc78558fbffff	              mov dword [rbp - 0x4a8], 2	       900	clean.c	FUNCTION_49
0x40025cc	    0x48c78590fbff	              mov qword [rbp - 0x470], 0	       901	clean.c	FUNCTION_49
0x40025d7	    0x48c78598fbff	              mov qword [rbp - 0x468], 0	       901	clean.c	FUNCTION_49
0x40025e2	    0x48c785a0fbff	              mov qword [rbp - 0x460], 0	       901	clean.c	FUNCTION_49
0x40025ed	    0x48c785d0fbff	              mov qword [rbp - 0x430], 0	       904	clean.c	FUNCTION_49
0x40025f8	    0x48c785d8fbff	              mov qword [rbp - 0x428], 0	       904	clean.c	FUNCTION_49
0x4002603	    0x48c785e0fbff	              mov qword [rbp - 0x420], 0	       904	clean.c	FUNCTION_49
0x400260e	    0x48c785f0fbff	              mov qword [rbp - 0x410], 0	       905	clean.c	FUNCTION_49
0x4002619	    0xc785f8fbffff	              mov dword [rbp - 0x408], 0	       905	clean.c	FUNCTION_49
0x4002623	    0xc785fcfbffff	              mov dword [rbp - 0x404], 0	       905	clean.c	FUNCTION_49
0x400262d	     0xfb68500fcff	           movzx eax, byte [rbp - 0x400]	       905	clean.c	FUNCTION_49
0x4002634	          0x83e0fe	                     and eax, 0xfffffffe	       905	clean.c	FUNCTION_49
0x4002637	    0x888500fcffff	              mov byte [rbp - 0x400], al	       905	clean.c	FUNCTION_49
0x400263d	    0x48c78508fcff	              mov qword [rbp - 0x3f8], 0	       905	clean.c	FUNCTION_49
0x4002648	    0x488d95b0fdff	                  lea rdx, [rbp - 0x250]	       909	clean.c	FUNCTION_49
0x400264f	      0xb800000000	                              mov eax, 0	       909	clean.c	FUNCTION_49
0x4002654	      0xb948000000	                           mov ecx, 0x48	       909	clean.c	FUNCTION_49
0x4002659	          0x4889d7	                            mov rdi, rdx	       909	clean.c	FUNCTION_49
0x400265c	          0xf348ab	              rep stosq qword [rdi], rax	       909	clean.c	FUNCTION_49
0x400265f	    0xc785b0fdffff	              mov dword [rbp - 0x250], 6	       909	clean.c	FUNCTION_49
0x4002669	    0xc785b4fdffff	          mov dword [rbp - 0x24c], 0x71 	       909	clean.c	FUNCTION_49
0x4002673	    0x48c785b8fdff	              mov qword [rbp - 0x248], 0	       909	clean.c	FUNCTION_49
0x400267e	    0x488d853cfbff	                  lea rax, [rbp - 0x4c4]	       909	clean.c	FUNCTION_49
0x4002685	    0x488985c0fdff	            mov qword [rbp - 0x240], rax	       909	clean.c	FUNCTION_49
0x400268c	    0x48c785d0fdff	              mov qword [rbp - 0x230], 0	       909	clean.c	FUNCTION_49
0x4002697	    0xc785d8fdffff	              mov dword [rbp - 0x228], 2	       909	clean.c	FUNCTION_49
0x40026a1	    0xc785f0fdffff	              mov dword [rbp - 0x210], 7	       909	clean.c	FUNCTION_49
0x40026ab	    0xc785f4fdffff	          mov dword [rbp - 0x20c], 0x6e 	       909	clean.c	FUNCTION_49
0x40026b5	    0x48c785f8fdff	              mov qword [rbp - 0x208], 0	       909	clean.c	FUNCTION_49
0x40026c0	    0x488d8534fbff	                  lea rax, [rbp - 0x4cc]	       909	clean.c	FUNCTION_49
0x40026c7	    0x48898500feff	            mov qword [rbp - 0x200], rax	       909	clean.c	FUNCTION_49
0x40026ce	    0x48c78510feff	              mov qword [rbp - 0x1f0], 0	       909	clean.c	FUNCTION_49
0x40026d9	    0xc78518feffff	              mov dword [rbp - 0x1e8], 2	       909	clean.c	FUNCTION_49
0x40026e3	    0x48c78528feff	              mov qword [rbp - 0x1d8], 1	       909	clean.c	FUNCTION_49
0x40026ee	    0xc78530feffff	              mov dword [rbp - 0x1d0], 6	       909	clean.c	FUNCTION_49
0x40026f8	    0xc78534feffff	          mov dword [rbp - 0x1cc], 0x66 	       909	clean.c	FUNCTION_49
0x4002702	    0x48c78538feff	              mov qword [rbp - 0x1c8], 0	       909	clean.c	FUNCTION_49
0x400270d	    0x48c78540feff	              mov qword [rbp - 0x1c0], 0	       909	clean.c	FUNCTION_49
0x4002718	    0x48c78550feff	              mov qword [rbp - 0x1b0], 0	       909	clean.c	FUNCTION_49
0x4002723	    0xc78558feffff	         mov dword [rbp - 0x1a8], 0x202 	       909	clean.c	FUNCTION_49
0x400272d	    0xc78570feffff	              mov dword [rbp - 0x190], 7	       909	clean.c	FUNCTION_49
0x4002737	    0xc78574feffff	          mov dword [rbp - 0x18c], 0x69 	       909	clean.c	FUNCTION_49
0x4002741	    0x48c78578feff	              mov qword [rbp - 0x188], 0	       909	clean.c	FUNCTION_49
0x400274c	    0x48c78580feff	              mov qword [rbp - 0x180], 0	       909	clean.c	FUNCTION_49
0x4002757	    0x48c78590feff	              mov qword [rbp - 0x170], 0	       909	clean.c	FUNCTION_49
0x4002762	    0xc78598feffff	              mov dword [rbp - 0x168], 2	       909	clean.c	FUNCTION_49
0x400276c	    0x48c785a8feff	              mov qword [rbp - 0x158], 1	       909	clean.c	FUNCTION_49
0x4002777	    0xc785b0feffff	              mov dword [rbp - 0x150], 7	       909	clean.c	FUNCTION_49
0x4002781	    0xc785b4feffff	          mov dword [rbp - 0x14c], 0x64 	       909	clean.c	FUNCTION_49
0x400278b	    0x488d8538fbff	                  lea rax, [rbp - 0x4c8]	       909	clean.c	FUNCTION_49
0x4002792	    0x488985c0feff	            mov qword [rbp - 0x140], rax	       909	clean.c	FUNCTION_49
0x4002799	    0x48c785d0feff	              mov qword [rbp - 0x130], 0	       909	clean.c	FUNCTION_49
0x40027a4	    0xc785d8feffff	              mov dword [rbp - 0x128], 2	       909	clean.c	FUNCTION_49
0x40027ae	    0x48c785e8feff	              mov qword [rbp - 0x118], 1	       909	clean.c	FUNCTION_49
0x40027b9	    0xc785f0feffff	           mov dword [rbp - 0x110], 0xc 	       909	clean.c	FUNCTION_49
0x40027c3	    0xc785f4feffff	          mov dword [rbp - 0x10c], 0x65 	       909	clean.c	FUNCTION_49
0x40027cd	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       909	clean.c	FUNCTION_49
0x40027d8	    0x488d85f0fbff	                  lea rax, [rbp - 0x410]	       909	clean.c	FUNCTION_49
0x40027df	    0x48898500ffff	            mov qword [rbp - 0x100], rax	       909	clean.c	FUNCTION_49
0x40027e6	    0x48c78508ffff	               mov qword [rbp - 0xf8], 0	       909	clean.c	FUNCTION_49
0x40027f1	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       909	clean.c	FUNCTION_49
0x40027fc	    0xc78518ffffff	               mov dword [rbp - 0xe8], 4	       909	clean.c	FUNCTION_49
0x4002806	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       909	clean.c	FUNCTION_49
0x4002811	    0xc78530ffffff	               mov dword [rbp - 0xd0], 7	       909	clean.c	FUNCTION_49
0x400281b	    0xc78534ffffff	           mov dword [rbp - 0xcc], 0x78 	       909	clean.c	FUNCTION_49
0x4002825	    0x488d8540fbff	                  lea rax, [rbp - 0x4c0]	       909	clean.c	FUNCTION_49
0x400282c	    0x48898540ffff	             mov qword [rbp - 0xc0], rax	       909	clean.c	FUNCTION_49
0x4002833	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       909	clean.c	FUNCTION_49
0x400283e	    0xc78558ffffff	               mov dword [rbp - 0xa8], 2	       909	clean.c	FUNCTION_49
0x4002848	    0x48c78568ffff	               mov qword [rbp - 0x98], 1	       909	clean.c	FUNCTION_49
0x4002853	    0xc78570ffffff	               mov dword [rbp - 0x90], 7	       909	clean.c	FUNCTION_49
0x400285d	    0xc78574ffffff	           mov dword [rbp - 0x8c], 0x58 	       909	clean.c	FUNCTION_49
0x4002867	    0x488d8544fbff	                  lea rax, [rbp - 0x4bc]	       909	clean.c	FUNCTION_49
0x400286e	        0x48894580	             mov qword [rbp - 0x80], rax	       909	clean.c	FUNCTION_49
0x4002872	    0x48c745900000	               mov qword [rbp - 0x70], 0	       909	clean.c	FUNCTION_49
0x400287a	    0xc74598020000	               mov dword [rbp - 0x68], 2	       909	clean.c	FUNCTION_49
0x4002881	    0x48c745a80100	               mov qword [rbp - 0x58], 1	       909	clean.c	FUNCTION_49
0x4002889	      0xbe00000000	                              mov esi, 0	       924	clean.c	FUNCTION_49	CALL_9
0x400288e	      0xbf00000000	                              mov edi, 0	       924	clean.c	FUNCTION_49	CALL_9
0x4002893	      0xe800000000	                          call 0x4002898	       924	clean.c	FUNCTION_49	CALL_9
0x4002898	    0x8b0500000000	            mov eax, dword [0x0400289e] 	       925	clean.c	FUNCTION_49	IF_1
0x400289e	            0x85c0	                           test eax, eax	       925	clean.c	FUNCTION_49	IF_1
0x40028a0	            0x790c	                           jns 0x40028ae	       925	clean.c	FUNCTION_49	IF_1
0x40028a2	    0xc70500000000	               mov dword [0x040028ac], 0	       926	clean.c	FUNCTION_49	IF_1
0x40028ac	            0xeb0a	                           jmp 0x40028b8	       926	clean.c	FUNCTION_49	IF_1
0x40028ae	    0xc78550fbffff	              mov dword [rbp - 0x4b0], 1	       928	clean.c	FUNCTION_49	ELSE_1
0x40028b8	    0x488d8db0fdff	                  lea rcx, [rbp - 0x250]	       930	clean.c	FUNCTION_49	CALL_10
0x40028bf	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	       930	clean.c	FUNCTION_49	CALL_10
0x40028c6	    0x488bb520fbff	            mov rsi, qword [rbp - 0x4e0]	       930	clean.c	FUNCTION_49	CALL_10
0x40028cd	    0x8b852cfbffff	            mov eax, dword [rbp - 0x4d4]	       930	clean.c	FUNCTION_49	CALL_10
0x40028d3	    0x41b900000000	                              mov r9d, 0	       930	clean.c	FUNCTION_49	CALL_10
0x40028d9	    0x41b800000000	                              mov r8d, 0	       930	clean.c	FUNCTION_49	CALL_10
0x40028df	            0x89c7	                            mov edi, eax	       930	clean.c	FUNCTION_49	CALL_10
0x40028e1	      0xe800000000	                          call 0x40028e6	       930	clean.c	FUNCTION_49	CALL_10
0x40028e6	    0x89852cfbffff	            mov dword [rbp - 0x4d4], eax	       930	clean.c	FUNCTION_49	CALL_10
0x40028ec	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       933	clean.c	FUNCTION_49	CALL_11
0x40028f3	      0xba10010000	                          mov edx, 0x110	       933	clean.c	FUNCTION_49	CALL_11
0x40028f8	      0xbe00000000	                              mov esi, 0	       933	clean.c	FUNCTION_49	CALL_11
0x40028fd	          0x4889c7	                            mov rdi, rax	       933	clean.c	FUNCTION_49	CALL_11
0x4002900	      0xe800000000	                          call 0x4002905	       933	clean.c	FUNCTION_49	CALL_11
0x4002905	    0x8b8544fbffff	            mov eax, dword [rbp - 0x4bc]	       934	clean.c	FUNCTION_49	IF_2
0x400290b	            0x85c0	                           test eax, eax	       934	clean.c	FUNCTION_49	IF_2
0x400290d	            0x740f	                            je 0x400291e	       934	clean.c	FUNCTION_49	IF_2
0x400290f	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       935	clean.c	FUNCTION_49	IF_2
0x4002915	          0x83c801	                               or eax, 1	       935	clean.c	FUNCTION_49	IF_2
0x4002918	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       935	clean.c	FUNCTION_49	IF_2
0x400291e	    0x8b8540fbffff	            mov eax, dword [rbp - 0x4c0]	       937	clean.c	FUNCTION_49	IF_3
0x4002924	            0x85c0	                           test eax, eax	       937	clean.c	FUNCTION_49	IF_3
0x4002926	            0x7421	                            je 0x4002949	       937	clean.c	FUNCTION_49	IF_3
0x4002928	    0x8b8544fbffff	            mov eax, dword [rbp - 0x4bc]	       937	clean.c	FUNCTION_49	IF_3
0x400292e	            0x85c0	                           test eax, eax	       937	clean.c	FUNCTION_49	IF_3
0x4002930	            0x7417	                            je 0x4002949	       937	clean.c	FUNCTION_49	IF_3
0x4002932	      0xbf00000000	                              mov edi, 0	       938	clean.c	FUNCTION_49	CALL_13
0x4002937	      0xe8f2d9ffff	                               call sym.	       938	clean.c	FUNCTION_49	CALL_13
0x400293c	          0x4889c7	                            mov rdi, rax	       938	clean.c	FUNCTION_49	CALL_13
0x400293f	      0xb800000000	                              mov eax, 0	       938	clean.c	FUNCTION_49	CALL_13
0x4002944	      0xe800000000	                          call 0x4002949	       938	clean.c	FUNCTION_49	CALL_13
0x4002949	    0x8b0500000000	            mov eax, dword [0x0400294f] 	       940	clean.c	FUNCTION_49	IF_4
0x400294f	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_49	IF_4
0x4002951	            0x754b	                           jne 0x400299e	       940	clean.c	FUNCTION_49	IF_4
0x4002953	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	       940	clean.c	FUNCTION_49	IF_4
0x4002959	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_49	IF_4
0x400295b	            0x7541	                           jne 0x400299e	       940	clean.c	FUNCTION_49	IF_4
0x400295d	    0x8b0500000000	            mov eax, dword [0x04002963] 	       940	clean.c	FUNCTION_49	IF_4
0x4002963	            0x85c0	                           test eax, eax	       940	clean.c	FUNCTION_49	IF_4
0x4002965	            0x7537	                           jne 0x400299e	       940	clean.c	FUNCTION_49	IF_4
0x4002967	    0x83bd50fbffff	              cmp dword [rbp - 0x4b0], 0	       941	clean.c	FUNCTION_49	IF_4	IF_5
0x400296e	            0x7417	                            je 0x4002987	       941	clean.c	FUNCTION_49	IF_4	IF_5
0x4002970	      0xbf00000000	                              mov edi, 0	       942	clean.c	FUNCTION_49	IF_4	IF_5	CALL_15
0x4002975	      0xe8b4d9ffff	                               call sym.	       942	clean.c	FUNCTION_49	IF_4	IF_5	CALL_15
0x400297a	          0x4889c7	                            mov rdi, rax	       942	clean.c	FUNCTION_49	IF_4	IF_5	CALL_15
0x400297d	      0xb800000000	                              mov eax, 0	       942	clean.c	FUNCTION_49	IF_4	IF_5	CALL_15
0x4002982	      0xe800000000	                          call 0x4002987	       942	clean.c	FUNCTION_49	IF_4	IF_5	CALL_15
0x4002987	      0xbf00000000	                              mov edi, 0	       945	clean.c	FUNCTION_49	IF_4	ELSE_2	CALL_17
0x400298c	      0xe89dd9ffff	                               call sym.	       945	clean.c	FUNCTION_49	IF_4	ELSE_2	CALL_17
0x4002991	          0x4889c7	                            mov rdi, rax	       945	clean.c	FUNCTION_49	IF_4	ELSE_2	CALL_17
0x4002994	      0xb800000000	                              mov eax, 0	       945	clean.c	FUNCTION_49	IF_4	ELSE_2	CALL_17
0x4002999	      0xe800000000	                          call 0x400299e	       945	clean.c	FUNCTION_49	IF_4	ELSE_2	CALL_17
0x400299e	    0x8b0500000000	            mov eax, dword [0x040029a4] 	       949	clean.c	FUNCTION_49	IF_6
0x40029a4	          0x83f801	                              cmp eax, 1	       949	clean.c	FUNCTION_49	IF_6
0x40029a7	            0x7e0a	                           jle 0x40029b3	       949	clean.c	FUNCTION_49	IF_6
0x40029a9	    0xc78558fbffff	              mov dword [rbp - 0x4a8], 0	       950	clean.c	FUNCTION_49	IF_6
0x40029b3	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       952	clean.c	FUNCTION_49
0x40029b9	          0x83c802	                               or eax, 2	       952	clean.c	FUNCTION_49
0x40029bc	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       952	clean.c	FUNCTION_49
0x40029c2	    0x8b8538fbffff	            mov eax, dword [rbp - 0x4c8]	       954	clean.c	FUNCTION_49	IF_7
0x40029c8	            0x85c0	                           test eax, eax	       954	clean.c	FUNCTION_49	IF_7
0x40029ca	            0x740e	                            je 0x40029da	       954	clean.c	FUNCTION_49	IF_7
0x40029cc	    0x8b85b0fcffff	            mov eax, dword [rbp - 0x350]	       955	clean.c	FUNCTION_49	IF_7
0x40029d2	             0xca0	                             or al, 0xa0	       955	clean.c	FUNCTION_49	IF_7
0x40029d4	    0x8985b0fcffff	            mov dword [rbp - 0x350], eax	       955	clean.c	FUNCTION_49	IF_7
0x40029da	      0xbf00000000	                              mov edi, 0	       957	clean.c	FUNCTION_49	IF_8	CALL_18
0x40029df	      0xe800000000	                          call 0x40029e4	       957	clean.c	FUNCTION_49	IF_8	CALL_18
0x40029e4	            0x85c0	                           test eax, eax	       957	clean.c	FUNCTION_49	IF_8	CALL_18
0x40029e6	            0x7917	                           jns 0x40029ff	       957	clean.c	FUNCTION_49	IF_8	CALL_18
0x40029e8	      0xbf00000000	                              mov edi, 0	       958	clean.c	FUNCTION_49	CALL_20
0x40029ed	      0xe83cd9ffff	                               call sym.	       958	clean.c	FUNCTION_49	CALL_20
0x40029f2	          0x4889c7	                            mov rdi, rax	       958	clean.c	FUNCTION_49	CALL_20
0x40029f5	      0xb800000000	                              mov eax, 0	       958	clean.c	FUNCTION_49	CALL_20
0x40029fa	      0xe800000000	                          call 0x40029ff	       958	clean.c	FUNCTION_49	CALL_20
0x40029ff	    0x8b8540fbffff	            mov eax, dword [rbp - 0x4c0]	       960	clean.c	FUNCTION_49	IF_9
0x4002a05	            0x85c0	                           test eax, eax	       960	clean.c	FUNCTION_49	IF_9
0x4002a07	            0x750f	                           jne 0x4002a18	       960	clean.c	FUNCTION_49	IF_9
0x4002a09	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       961	clean.c	FUNCTION_49	CALL_21
0x4002a10	          0x4889c7	                            mov rdi, rax	       961	clean.c	FUNCTION_49	CALL_21
0x4002a13	      0xe800000000	                          call 0x4002a18	       961	clean.c	FUNCTION_49	CALL_21
0x4002a18	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       963	clean.c	FUNCTION_49	CALL_22
0x4002a1f	      0xba00000000	                              mov edx, 0	       963	clean.c	FUNCTION_49	CALL_22
0x4002a24	      0xbe00000000	                              mov esi, 0	       963	clean.c	FUNCTION_49	CALL_22
0x4002a29	          0x4889c7	                            mov rdi, rax	       963	clean.c	FUNCTION_49	CALL_22
0x4002a2c	      0xe800000000	                          call 0x4002a31	       963	clean.c	FUNCTION_49	CALL_22
0x4002a31	    0x48898570fbff	            mov qword [rbp - 0x490], rax	       963	clean.c	FUNCTION_49	CALL_22
0x4002a38	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	       964	clean.c	FUNCTION_49	FOR_1
0x4002a42	            0xeb4a	                           jmp 0x4002a8e	       964	clean.c	FUNCTION_49	FOR_1
0x4002a44	    0x8b854cfbffff	            mov eax, dword [rbp - 0x4b4]	       965	clean.c	FUNCTION_49	CALL_23
0x4002a4a	            0xf7d0	                                 not eax	       965	clean.c	FUNCTION_49	CALL_23
0x4002a4c	            0x89c1	                            mov ecx, eax	       965	clean.c	FUNCTION_49	CALL_23
0x4002a4e	    0x488b85f0fbff	            mov rax, qword [rbp - 0x410]	       965	clean.c	FUNCTION_49	CALL_23
0x4002a55	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	       965	clean.c	FUNCTION_49	CALL_23
0x4002a5b	          0x4863d2	                         movsxd rdx, edx	       965	clean.c	FUNCTION_49	CALL_23
0x4002a5e	        0x48c1e204	                              shl rdx, 4	       965	clean.c	FUNCTION_49	CALL_23
0x4002a62	          0x4801d0	                            add rax, rdx	       965	clean.c	FUNCTION_49	CALL_23
0x4002a65	          0x488b00	                    mov rax, qword [rax]	       965	clean.c	FUNCTION_49	CALL_23
0x4002a68	    0x488b9570fbff	            mov rdx, qword [rbp - 0x490]	       965	clean.c	FUNCTION_49	CALL_23
0x4002a6f	          0x4189c8	                            mov r8d, ecx	       965	clean.c	FUNCTION_49	CALL_23
0x4002a72	          0x4889d1	                            mov rcx, rdx	       965	clean.c	FUNCTION_49	CALL_23
0x4002a75	      0xba00000000	                              mov edx, 0	       965	clean.c	FUNCTION_49	CALL_23
0x4002a7a	      0xbe00000000	                              mov esi, 0	       965	clean.c	FUNCTION_49	CALL_23
0x4002a7f	          0x4889c7	                            mov rdi, rax	       965	clean.c	FUNCTION_49	CALL_23
0x4002a82	      0xe800000000	                          call 0x4002a87	       965	clean.c	FUNCTION_49	CALL_23
0x4002a87	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	       964	clean.c	FUNCTION_49	FOR_1
0x4002a8e	    0x8b95f8fbffff	            mov edx, dword [rbp - 0x408]	       964	clean.c	FUNCTION_49	FOR_1
0x4002a94	    0x8b854cfbffff	            mov eax, dword [rbp - 0x4b4]	       964	clean.c	FUNCTION_49	FOR_1
0x4002a9a	            0x39c2	                            cmp edx, eax	       964	clean.c	FUNCTION_49	FOR_1
0x4002a9c	            0x77a6	                            ja 0x4002a44	       964	clean.c	FUNCTION_49	FOR_1
0x4002a9e	    0x488b8d20fbff	            mov rcx, qword [rbp - 0x4e0]	       967	clean.c	FUNCTION_49	CALL_24
0x4002aa5	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	       967	clean.c	FUNCTION_49	CALL_24
0x4002aac	    0x488d85b0fbff	                  lea rax, [rbp - 0x450]	       967	clean.c	FUNCTION_49	CALL_24
0x4002ab3	          0x4989c8	                             mov r8, rcx	       967	clean.c	FUNCTION_49	CALL_24
0x4002ab6	          0x4889d1	                            mov rcx, rdx	       967	clean.c	FUNCTION_49	CALL_24
0x4002ab9	      0xba01000000	                              mov edx, 1	       967	clean.c	FUNCTION_49	CALL_24
0x4002abe	      0xbe00000000	                              mov esi, 0	       967	clean.c	FUNCTION_49	CALL_24
0x4002ac3	          0x4889c7	                            mov rdi, rax	       967	clean.c	FUNCTION_49	CALL_24
0x4002ac6	      0xe800000000	                          call 0x4002acb	       967	clean.c	FUNCTION_49	CALL_24
0x4002acb	    0x488d95b0fbff	                  lea rdx, [rbp - 0x450]	       971	clean.c	FUNCTION_49	CALL_25
0x4002ad2	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       971	clean.c	FUNCTION_49	CALL_25
0x4002ad9	      0xbe00000000	                              mov esi, 0	       971	clean.c	FUNCTION_49	CALL_25
0x4002ade	          0x4889c7	                            mov rdi, rax	       971	clean.c	FUNCTION_49	CALL_25
0x4002ae1	      0xe800000000	                          call 0x4002ae6	       971	clean.c	FUNCTION_49	CALL_25
0x4002ae6	    0x488d85a0fcff	                  lea rax, [rbp - 0x360]	       972	clean.c	FUNCTION_49	CALL_26
0x4002aed	          0x4889c7	                            mov rdi, rax	       972	clean.c	FUNCTION_49	CALL_26
0x4002af0	      0xe8aff8ffff	      call sym.correct_untracked_entries	       972	clean.c	FUNCTION_49	CALL_26
0x4002af5	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	       974	clean.c	FUNCTION_49	FOR_2
0x4002aff	      0xe94f010000	                           jmp 0x4002c53	       974	clean.c	FUNCTION_49	FOR_2
0x4002b04	    0x488b85b8fcff	            mov rax, qword [rbp - 0x348]	       975	clean.c	FUNCTION_49	FOR_2
0x4002b0b	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	       975	clean.c	FUNCTION_49	FOR_2
0x4002b11	          0x4863d2	                         movsxd rdx, edx	       975	clean.c	FUNCTION_49	FOR_2
0x4002b14	        0x48c1e203	                              shl rdx, 3	       975	clean.c	FUNCTION_49	FOR_2
0x4002b18	          0x4801d0	                            add rax, rdx	       975	clean.c	FUNCTION_49	FOR_2
0x4002b1b	          0x488b00	                    mov rax, qword [rax]	       975	clean.c	FUNCTION_49	FOR_2
0x4002b1e	    0x48898578fbff	            mov qword [rbp - 0x488], rax	       975	clean.c	FUNCTION_49	FOR_2
0x4002b25	    0xc7855cfbffff	              mov dword [rbp - 0x4a4], 0	       976	clean.c	FUNCTION_49	FOR_2
0x4002b2f	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b36	            0x8b00	                    mov eax, dword [rax]	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b38	            0x89c2	                            mov edx, eax	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b3a	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b41	        0x4883c004	                              add rax, 4	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b45	          0x4889c6	                            mov rsi, rax	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b48	      0xbf00000000	                              mov edi, 0	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b4d	      0xe800000000	                          call 0x4002b52	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b52	            0x85c0	                           test eax, eax	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b54	     0xf84eb000000	                            je 0x4002c45	       980	clean.c	FUNCTION_49	FOR_2	IF_10	CALL_27
0x4002b5a	    0x8b85b0fbffff	            mov eax, dword [rbp - 0x450]	       983	clean.c	FUNCTION_49	FOR_2	IF_11
0x4002b60	            0x85c0	                           test eax, eax	       983	clean.c	FUNCTION_49	FOR_2	IF_11
0x4002b62	            0x7426	                            je 0x4002b8a	       983	clean.c	FUNCTION_49	FOR_2	IF_11
0x4002b64	    0x488db5b0fbff	                  lea rsi, [rbp - 0x450]	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b6b	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b72	      0xb900000000	                              mov ecx, 0	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b77	      0xba00000000	                              mov edx, 0	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b7c	          0x4889c7	                            mov rdi, rax	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b7f	      0xe851d8ffff	                 call sym.dir_path_match	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b84	    0x89855cfbffff	            mov dword [rbp - 0x4a4], eax	       984	clean.c	FUNCTION_49	FOR_2	CALL_28
0x4002b8a	    0x8b85b0fbffff	            mov eax, dword [rbp - 0x450]	       986	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002b90	            0x85c0	                           test eax, eax	       986	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002b92	            0x740d	                            je 0x4002ba1	       986	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002b94	    0x83bd5cfbffff	              cmp dword [rbp - 0x4a4], 0	       986	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002b9b	     0xf84a7000000	                            je 0x4002c48	       986	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002ba1	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002ba8	        0x488d5004	                      lea rdx, [rax + 4]	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bac	    0x488d8510fcff	                  lea rax, [rbp - 0x3f0]	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bb3	          0x4889c6	                            mov rsi, rax	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bb6	          0x4889d7	                            mov rdi, rdx	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bb9	      0xe800000000	                          call 0x4002bbe	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bbe	            0x85c0	                           test eax, eax	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bc0	            0x741d	                            je 0x4002bdf	       989	clean.c	FUNCTION_49	FOR_2	IF_13
0x4002bc2	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bc9	        0x4883c004	                              add rax, 4	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bcd	          0x4889c6	                            mov rsi, rax	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bd0	      0xbf00000000	                              mov edi, 0	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bd5	      0xb800000000	                              mov eax, 0	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bda	      0xe800000000	                          call 0x4002bdf	       990	clean.c	FUNCTION_49	FOR_2	CALL_29
0x4002bdf	    0x8b8528fcffff	            mov eax, dword [rbp - 0x3d8]	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002be5	      0x2500f00000	                         and eax, 0xf000	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bea	      0x3d00400000	                         cmp eax, 0x4000	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bef	            0x7513	                           jne 0x4002c04	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bf1	    0x8b8538fbffff	            mov eax, dword [rbp - 0x4c8]	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bf7	            0x85c0	                           test eax, eax	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bf9	            0x7509	                           jne 0x4002c04	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002bfb	    0x83bd5cfbffff	              cmp dword [rbp - 0x4a4], 3	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002c02	            0x7547	                           jne 0x4002c4b	       992	clean.c	FUNCTION_49	FOR_2	IF_14	CALL_30
0x4002c04	    0x488b8578fbff	            mov rax, qword [rbp - 0x488]	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c0b	        0x488d4804	                      lea rcx, [rax + 4]	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c0f	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c16	    0x488b8518fbff	            mov rax, qword [rbp - 0x4e8]	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c1d	          0x4889c6	                            mov rsi, rax	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c20	          0x4889cf	                            mov rdi, rcx	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c23	      0xe800000000	                          call 0x4002c28	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c28	    0x48898580fbff	            mov qword [rbp - 0x480], rax	       996	clean.c	FUNCTION_49	FOR_2	CALL_31
0x4002c2f	    0x488b8580fbff	            mov rax, qword [rbp - 0x480]	       997	clean.c	FUNCTION_49	FOR_2	CALL_32
0x4002c36	          0x4889c6	                            mov rsi, rax	       997	clean.c	FUNCTION_49	FOR_2	CALL_32
0x4002c39	      0xbf00000000	                              mov edi, 0	       997	clean.c	FUNCTION_49	FOR_2	CALL_32
0x4002c3e	      0xe800000000	                          call 0x4002c43	       997	clean.c	FUNCTION_49	FOR_2	CALL_32
0x4002c43	            0xeb07	                           jmp 0x4002c4c	       997	clean.c	FUNCTION_49	FOR_2	CALL_32
0x4002c45	              0x90	                                     nop	       981	clean.c	FUNCTION_49	FOR_2	IF_10
0x4002c46	            0xeb04	                           jmp 0x4002c4c	       981	clean.c	FUNCTION_49	FOR_2	IF_10
0x4002c48	              0x90	                                     nop	       987	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002c49	            0xeb01	                           jmp 0x4002c4c	       987	clean.c	FUNCTION_49	FOR_2	IF_12
0x4002c4b	              0x90	                                     nop	       994	clean.c	FUNCTION_49	FOR_2	IF_14
0x4002c4c	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	       974	clean.c	FUNCTION_49	FOR_2
0x4002c53	    0x8b85a0fcffff	            mov eax, dword [rbp - 0x360]	       974	clean.c	FUNCTION_49	FOR_2
0x4002c59	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	       974	clean.c	FUNCTION_49	FOR_2
0x4002c5f	     0xf8f9ffeffff	                            jg 0x4002b04	       974	clean.c	FUNCTION_49	FOR_2
0x4002c65	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	      1000	clean.c	FUNCTION_49	FOR_3
0x4002c6f	            0xeb29	                           jmp 0x4002c9a	      1000	clean.c	FUNCTION_49	FOR_3
0x4002c71	    0x488b85b8fcff	            mov rax, qword [rbp - 0x348]	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c78	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c7e	          0x4863d2	                         movsxd rdx, edx	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c81	        0x48c1e203	                              shl rdx, 3	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c85	          0x4801d0	                            add rax, rdx	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c88	          0x488b00	                    mov rax, qword [rax]	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c8b	          0x4889c7	                            mov rdi, rax	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c8e	      0xe800000000	                          call 0x4002c93	      1001	clean.c	FUNCTION_49	CALL_33
0x4002c93	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	      1000	clean.c	FUNCTION_49	FOR_3
0x4002c9a	    0x8b85a0fcffff	            mov eax, dword [rbp - 0x360]	      1000	clean.c	FUNCTION_49	FOR_3
0x4002ca0	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	      1000	clean.c	FUNCTION_49	FOR_3
0x4002ca6	            0x7fc9	                            jg 0x4002c71	      1000	clean.c	FUNCTION_49	FOR_3
0x4002ca8	    0xc7854cfbffff	              mov dword [rbp - 0x4b4], 0	      1003	clean.c	FUNCTION_49	FOR_4
0x4002cb2	            0xeb29	                           jmp 0x4002cdd	      1003	clean.c	FUNCTION_49	FOR_4
0x4002cb4	    0x488b85c0fcff	            mov rax, qword [rbp - 0x340]	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cbb	    0x8b954cfbffff	            mov edx, dword [rbp - 0x4b4]	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cc1	          0x4863d2	                         movsxd rdx, edx	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cc4	        0x48c1e203	                              shl rdx, 3	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cc8	          0x4801d0	                            add rax, rdx	      1004	clean.c	FUNCTION_49	CALL_34
0x4002ccb	          0x488b00	                    mov rax, qword [rax]	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cce	          0x4889c7	                            mov rdi, rax	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cd1	      0xe800000000	                          call 0x4002cd6	      1004	clean.c	FUNCTION_49	CALL_34
0x4002cd6	    0x83854cfbffff	              add dword [rbp - 0x4b4], 1	      1003	clean.c	FUNCTION_49	FOR_4
0x4002cdd	    0x8b85a8fcffff	            mov eax, dword [rbp - 0x358]	      1003	clean.c	FUNCTION_49	FOR_4
0x4002ce3	    0x3b854cfbffff	            cmp eax, dword [rbp - 0x4b4]	      1003	clean.c	FUNCTION_49	FOR_4
0x4002ce9	            0x7fc9	                            jg 0x4002cb4	      1003	clean.c	FUNCTION_49	FOR_4
0x4002ceb	    0x8b0500000000	            mov eax, dword [0x04002cf1] 	      1006	clean.c	FUNCTION_49	IF_15
0x4002cf1	            0x85c0	                           test eax, eax	      1006	clean.c	FUNCTION_49	IF_15
0x4002cf3	            0x740f	                            je 0x4002d04	      1006	clean.c	FUNCTION_49	IF_15
0x4002cf5	    0x8b0500000000	            mov eax, dword [0x04002cfb] 	      1006	clean.c	FUNCTION_49	IF_15
0x4002cfb	            0x85c0	                           test eax, eax	      1006	clean.c	FUNCTION_49	IF_15
0x4002cfd	            0x7405	                            je 0x4002d04	      1006	clean.c	FUNCTION_49	IF_15
0x4002cff	      0xe8f3f4ffff	          call sym.interactive_main_loop	      1007	clean.c	FUNCTION_49	CALL_35
0x4002d04	    0x488b05000000	            mov rax, qword [0x04002d0b] 	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002d0b	    0x48898568fbff	            mov qword [rbp - 0x498], rax	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002d12	      0xe97b020000	                           jmp 0x4002f92	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002d17	    0x4883bd18fbff	              cmp qword [rbp - 0x4e8], 0	      1012	clean.c	FUNCTION_49	FUNCTION_1	IF_1
0x4002d1f	            0x7419	                            je 0x4002d3a	      1012	clean.c	FUNCTION_49	FUNCTION_1	IF_1
0x4002d21	    0x488b9518fbff	            mov rdx, qword [rbp - 0x4e8]	      1013	clean.c	FUNCTION_49	FUNCTION_1	CALL_1
0x4002d28	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1013	clean.c	FUNCTION_49	FUNCTION_1	CALL_1
0x4002d2f	          0x4889d6	                            mov rsi, rdx	      1013	clean.c	FUNCTION_49	FUNCTION_1	CALL_1
0x4002d32	          0x4889c7	                            mov rdi, rax	      1013	clean.c	FUNCTION_49	FUNCTION_1	CALL_1
0x4002d35	      0xe83bd5ffff	                  call sym.strbuf_addstr	      1013	clean.c	FUNCTION_49	FUNCTION_1	CALL_1
0x4002d3a	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d41	          0x488b10	                    mov rdx, qword [rax]	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d44	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d4b	          0x4889d6	                            mov rsi, rdx	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d4e	          0x4889c7	                            mov rdi, rax	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d51	      0xe81fd5ffff	                  call sym.strbuf_addstr	      1015	clean.c	FUNCTION_49	FUNCTION_1	CALL_2
0x4002d56	    0x488b85a0fbff	            mov rax, qword [rbp - 0x460]	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d5d	    0x488d9510fcff	                  lea rdx, [rbp - 0x3f0]	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d64	          0x4889d6	                            mov rsi, rdx	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d67	          0x4889c7	                            mov rdi, rax	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d6a	      0xe800000000	                          call 0x4002d6f	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d6f	            0x85c0	                           test eax, eax	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d71	     0xf8512020000	                           jne 0x4002f89	      1022	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002d77	    0x8b8528fcffff	            mov eax, dword [rbp - 0x3d8]	      1025	clean.c	FUNCTION_49	FUNCTION_1	IF_3	CALL_3
0x4002d7d	      0x2500f00000	                         and eax, 0xf000	      1025	clean.c	FUNCTION_49	FUNCTION_1	IF_3	CALL_3
0x4002d82	      0x3d00400000	                         cmp eax, 0x4000	      1025	clean.c	FUNCTION_49	FUNCTION_1	IF_3	CALL_3
0x4002d87	     0xf85cd000000	                           jne 0x4002e5a	      1025	clean.c	FUNCTION_49	FUNCTION_1	IF_3	CALL_3
0x4002d8d	    0x8bbd3cfbffff	            mov edi, dword [rbp - 0x4c4]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002d93	    0x8b8d34fbffff	            mov ecx, dword [rbp - 0x4cc]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002d99	    0x4c8d8548fbff	                   lea r8, [rbp - 0x4b8]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002da0	    0x8b9558fbffff	            mov edx, dword [rbp - 0x4a8]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002da6	    0x488bb518fbff	            mov rsi, qword [rbp - 0x4e8]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dad	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002db4	          0x4d89c1	                              mov r9, r8	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002db7	          0x4189f8	                            mov r8d, edi	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dba	          0x4889c7	                            mov rdi, rax	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dbd	      0xe888d9ffff	                    call sym.remove_dirs	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dc2	            0x85c0	                           test eax, eax	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dc4	            0x7407	                            je 0x4002dcd	      1026	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4	CALL_4
0x4002dc6	    0x838554fbffff	              add dword [rbp - 0x4ac], 1	      1027	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_4
0x4002dcd	    0x8b8548fbffff	            mov eax, dword [rbp - 0x4b8]	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002dd3	            0x85c0	                           test eax, eax	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002dd5	     0xf8498010000	                            je 0x4002f73	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002ddb	    0x8b853cfbffff	            mov eax, dword [rbp - 0x4c4]	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002de1	            0x85c0	                           test eax, eax	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002de3	     0xf858a010000	                           jne 0x4002f73	      1028	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5
0x4002de9	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002df0	          0x488b00	                    mov rax, qword [rax]	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002df3	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002dfa	      0xbe00000000	                              mov esi, 0	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002dff	          0x4889c7	                            mov rdi, rax	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002e02	      0xe800000000	                          call 0x4002e07	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002e07	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1029	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_5
0x4002e0e	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e14	            0x85c0	                           test eax, eax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e16	            0x7414	                            je 0x4002e2c	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e18	    0x488b05000000	            mov rax, qword [0x04002e1f] 	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e1f	          0x4889c7	                            mov rdi, rax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e22	      0xe807d5ffff	                               call sym.	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e27	          0x4889c2	                            mov rdx, rax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e2a	            0xeb12	                           jmp 0x4002e3e	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e2c	    0x488b05000000	            mov rax, qword [0x04002e33] 	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e33	          0x4889c7	                            mov rdi, rax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e36	      0xe8f3d4ffff	                               call sym.	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e3b	          0x4889c2	                            mov rdx, rax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e3e	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e45	          0x4889c6	                            mov rsi, rax	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e48	          0x4889d7	                            mov rdi, rdx	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e4b	      0xb800000000	                              mov eax, 0	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e50	      0xe800000000	                          call 0x4002e55	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e55	      0xe919010000	                           jmp 0x4002f73	      1030	clean.c	FUNCTION_49	FUNCTION_1	IF_3	IF_5	CALL_8
0x4002e5a	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e60	            0x85c0	                           test eax, eax	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e62	            0x7511	                           jne 0x4002e75	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e64	    0x488b85a0fbff	            mov rax, qword [rbp - 0x460]	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e6b	          0x4889c7	                            mov rdi, rax	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e6e	      0xe800000000	                          call 0x4002e73	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e73	            0xeb05	                           jmp 0x4002e7a	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e75	      0xb800000000	                              mov eax, 0	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e7a	    0x898560fbffff	            mov dword [rbp - 0x4a0], eax	      1033	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	CALL_9
0x4002e80	    0x83bd60fbffff	              cmp dword [rbp - 0x4a0], 0	      1034	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002e87	            0x7474	                            je 0x4002efd	      1034	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002e89	      0xe800000000	                          call 0x4002e8e	      1035	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002e8e	            0x8b00	                    mov eax, dword [rax]	      1035	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002e90	    0x898564fbffff	            mov dword [rbp - 0x49c], eax	      1035	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002e96	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002e9d	          0x488b00	                    mov rax, qword [rax]	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002ea0	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002ea7	      0xbe00000000	                              mov esi, 0	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002eac	          0x4889c7	                            mov rdi, rax	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002eaf	      0xe800000000	                          call 0x4002eb4	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002eb4	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1036	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_10
0x4002ebb	      0xe800000000	                          call 0x4002ec0	      1037	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002ec0	          0x4889c2	                            mov rdx, rax	      1037	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002ec3	    0x8b8564fbffff	            mov eax, dword [rbp - 0x49c]	      1037	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002ec9	            0x8902	                    mov dword [rdx], eax	      1037	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002ecb	    0x488b05000000	            mov rax, qword [0x04002ed2] 	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002ed2	          0x4889c7	                            mov rdi, rax	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002ed5	      0xe854d4ffff	                               call sym.	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002eda	          0x4889c2	                            mov rdx, rax	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002edd	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002ee4	          0x4889c6	                            mov rsi, rax	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002ee7	          0x4889d7	                            mov rdi, rdx	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002eea	      0xb800000000	                              mov eax, 0	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002eef	      0xe800000000	                          call 0x4002ef4	      1038	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6	CALL_12
0x4002ef4	    0x838554fbffff	              add dword [rbp - 0x4ac], 1	      1039	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002efb	            0xeb76	                           jmp 0x4002f73	      1039	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	IF_6
0x4002efd	    0x8b853cfbffff	            mov eax, dword [rbp - 0x4c4]	      1040	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x4002f03	            0x85c0	                           test eax, eax	      1040	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x4002f05	            0x756c	                           jne 0x4002f73	      1040	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7
0x4002f07	    0x488b8568fbff	            mov rax, qword [rbp - 0x498]	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f0e	          0x488b00	                    mov rax, qword [rax]	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f11	    0x488d95d0fbff	                  lea rdx, [rbp - 0x430]	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f18	      0xbe00000000	                              mov esi, 0	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f1d	          0x4889c7	                            mov rdi, rax	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f20	      0xe800000000	                          call 0x4002f25	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f25	    0x48898588fbff	            mov qword [rbp - 0x478], rax	      1041	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_13
0x4002f2c	    0x8b8534fbffff	            mov eax, dword [rbp - 0x4cc]	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f32	            0x85c0	                           test eax, eax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f34	            0x7414	                            je 0x4002f4a	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f36	    0x488b05000000	            mov rax, qword [0x04002f3d] 	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f3d	          0x4889c7	                            mov rdi, rax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f40	      0xe8e9d3ffff	                               call sym.	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f45	          0x4889c2	                            mov rdx, rax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f48	            0xeb12	                           jmp 0x4002f5c	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f4a	    0x488b05000000	            mov rax, qword [0x04002f51] 	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f51	          0x4889c7	                            mov rdi, rax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f54	      0xe8d5d3ffff	                               call sym.	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f59	          0x4889c2	                            mov rdx, rax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f5c	    0x488b8588fbff	            mov rax, qword [rbp - 0x478]	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f63	          0x4889c6	                            mov rsi, rax	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f66	          0x4889d7	                            mov rdi, rdx	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f69	      0xb800000000	                              mov eax, 0	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f6e	      0xe800000000	                          call 0x4002f73	      1042	clean.c	FUNCTION_49	FUNCTION_1	ELSE_1	ELSE_2	IF_7	CALL_16
0x4002f73	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1045	clean.c	FUNCTION_49	FUNCTION_1
0x4002f7a	      0xbe00000000	                              mov esi, 0	      1045	clean.c	FUNCTION_49	FUNCTION_1
0x4002f7f	          0x4889c7	                            mov rdi, rax	      1045	clean.c	FUNCTION_49	FUNCTION_1
0x4002f82	      0xe8e6d1ffff	                  call sym.strbuf_setlen	      1045	clean.c	FUNCTION_49	FUNCTION_1
0x4002f87	            0xeb01	                           jmp 0x4002f8a	      1045	clean.c	FUNCTION_49	FUNCTION_1
0x4002f89	              0x90	                                     nop	      1023	clean.c	FUNCTION_49	FUNCTION_1	IF_2
0x4002f8a	    0x48838568fbff	           add qword [rbp - 0x498], 0x10	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002f92	    0x4883bd68fbff	              cmp qword [rbp - 0x498], 0	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002f9a	            0x7423	                            je 0x4002fbf	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002f9c	    0x488b05000000	            mov rax, qword [0x04002fa3] 	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fa3	    0x8b1500000000	            mov edx, dword [0x04002fa9] 	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fa9	            0x89d2	                            mov edx, edx	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fab	        0x48c1e204	                              shl rdx, 4	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002faf	          0x4801d0	                            add rax, rdx	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fb2	    0x483b8568fbff	            cmp rax, qword [rbp - 0x498]	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fb9	     0xf8758fdffff	                            ja 0x4002d17	      1009	clean.c	FUNCTION_49	FUNCTION_1
0x4002fbf	    0x488d8590fbff	                  lea rax, [rbp - 0x470]	      1048	clean.c	FUNCTION_49	CALL_36
0x4002fc6	          0x4889c7	                            mov rdi, rax	      1048	clean.c	FUNCTION_49	CALL_36
0x4002fc9	      0xe800000000	                          call 0x4002fce	      1048	clean.c	FUNCTION_49	CALL_36
0x4002fce	    0x488d85d0fbff	                  lea rax, [rbp - 0x430]	      1049	clean.c	FUNCTION_49	CALL_37
0x4002fd5	          0x4889c7	                            mov rdi, rax	      1049	clean.c	FUNCTION_49	CALL_37
0x4002fd8	      0xe800000000	                          call 0x4002fdd	      1049	clean.c	FUNCTION_49	CALL_37
0x4002fdd	      0xbe00000000	                              mov esi, 0	      1050	clean.c	FUNCTION_49	CALL_38
0x4002fe2	      0xbf00000000	                              mov edi, 0	      1050	clean.c	FUNCTION_49	CALL_38
0x4002fe7	      0xe800000000	                          call 0x4002fec	      1050	clean.c	FUNCTION_49	CALL_38
0x4002fec	    0x488d85f0fbff	                  lea rax, [rbp - 0x410]	      1051	clean.c	FUNCTION_49	CALL_39
0x4002ff3	      0xbe00000000	                              mov esi, 0	      1051	clean.c	FUNCTION_49	CALL_39
0x4002ff8	          0x4889c7	                            mov rdi, rax	      1051	clean.c	FUNCTION_49	CALL_39
0x4002ffb	      0xe800000000	                          call 0x4003000	      1051	clean.c	FUNCTION_49	CALL_39
0x4003000	    0x83bd54fbffff	              cmp dword [rbp - 0x4ac], 0	      1052	clean.c	FUNCTION_49
0x4003007	           0xf95c0	                                setne al	      1052	clean.c	FUNCTION_49
0x400300a	           0xfb6c0	                           movzx eax, al	      1052	clean.c	FUNCTION_49
0x400300d	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1053	clean.c	FUNCTION_49
0x4003011	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1053	clean.c	FUNCTION_49
0x400301a	            0x7405	                            je 0x4003021	      1053	clean.c	FUNCTION_49
0x400301c	      0xe800000000	                          call 0x4003021	      1053	clean.c	FUNCTION_49
0x4003021	              0xc9	                                   leave	      1053	clean.c	FUNCTION_49
0x4003022	              0xc3	                                     ret	      1053	clean.c	FUNCTION_49
strbuf_addch	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,2:FOR,0	33
0x4000207	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_56
0x4000208	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_56
0x400020b	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_56
0x400020f	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_56
0x4000213	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_56
0x4000216	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x400021a	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x400021d	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000222	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000225	            0x7511	                           jne 0x4000238	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000227	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_56	CALL_2
0x400022b	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000230	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000233	      0xe800000000	                          call 0x4000238	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000238	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x400023c	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_56
0x4000240	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x4000244	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_56
0x4000248	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_56
0x400024c	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x4000250	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_56
0x4000254	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_56
0x4000257	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_56
0x400025a	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_56
0x400025c	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_56
0x4000260	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_56
0x4000264	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_56
0x4000268	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_56
0x400026c	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_56
0x400026f	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_56
0x4000272	              0x90	                                     nop	       231	strbuf.h	FUNCTION_56
0x4000273	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_56
0x4000274	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_56
strbuf_avail	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,0:FOR,0	18
0x4000137	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_54
0x4000138	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_54
0x400013b	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_54
0x400013f	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x4000143	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_54
0x4000146	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_54
0x4000149	            0x741b	                            je 0x4000166	       141	strbuf.h	FUNCTION_54
0x400014b	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x400014f	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_54
0x4000152	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x4000156	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_54
0x400015a	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_54
0x400015d	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_54
0x4000160	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_54
0x4000164	            0xeb05	                           jmp 0x400016b	       141	strbuf.h	FUNCTION_54
0x4000166	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_54
0x400016b	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_54
0x400016c	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_54
pretty_print_dels	DO,0:WHILE,0:SWITCH,0:IF,0:functions,1:ELSE,0:CALL,4:FOR,0	72
0x4000dfe	              0x55	                                push rbp	       261	clean.c	FUNCTION_34
0x4000dff	          0x4889e5	                            mov rbp, rsp	       261	clean.c	FUNCTION_34
0x4000e02	        0x4883c480	             add rsp, 0xffffffffffffff80	       261	clean.c	FUNCTION_34
0x4000e06	    0x64488b042528	                mov rax, qword fs:[0x28]	       261	clean.c	FUNCTION_34
0x4000e0f	        0x488945f8	                mov qword [rbp - 8], rax	       261	clean.c	FUNCTION_34
0x4000e13	            0x31c0	                            xor eax, eax	       261	clean.c	FUNCTION_34
0x4000e15	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       262	clean.c	FUNCTION_34
0x4000e1d	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       262	clean.c	FUNCTION_34
0x4000e24	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       262	clean.c	FUNCTION_34
0x4000e2b	         0xfb645e0	            movzx eax, byte [rbp - 0x20]	       262	clean.c	FUNCTION_34
0x4000e2f	          0x83c801	                               or eax, 1	       262	clean.c	FUNCTION_34
0x4000e32	          0x8845e0	               mov byte [rbp - 0x20], al	       262	clean.c	FUNCTION_34
0x4000e35	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       262	clean.c	FUNCTION_34
0x4000e3d	    0x48c745900000	               mov qword [rbp - 0x70], 0	       264	clean.c	FUNCTION_34
0x4000e45	    0x48c745980000	               mov qword [rbp - 0x68], 0	       264	clean.c	FUNCTION_34
0x4000e4d	    0x48c745a00000	               mov qword [rbp - 0x60], 0	       264	clean.c	FUNCTION_34
0x4000e55	    0x488b05000000	            mov rax, qword [0x04000e5c] 	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e5c	        0x48894580	             mov qword [rbp - 0x80], rax	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e60	            0xeb34	                           jmp 0x4000e96	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e62	        0x488b4580	             mov rax, qword [rbp - 0x80]	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e66	          0x488b00	                    mov rax, qword [rax]	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e69	        0x488d5590	                   lea rdx, [rbp - 0x70]	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e6d	      0xbe00000000	                              mov esi, 0	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e72	          0x4889c7	                            mov rdi, rax	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e75	      0xe800000000	                          call 0x4000e7a	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e7a	        0x48894588	             mov qword [rbp - 0x78], rax	       269	clean.c	FUNCTION_34	FUNCTION_1	CALL_1
0x4000e7e	        0x488b5588	             mov rdx, qword [rbp - 0x78]	       270	clean.c	FUNCTION_34	FUNCTION_1	CALL_2
0x4000e82	        0x488d45d0	                   lea rax, [rbp - 0x30]	       270	clean.c	FUNCTION_34	FUNCTION_1	CALL_2
0x4000e86	          0x4889d6	                            mov rsi, rdx	       270	clean.c	FUNCTION_34	FUNCTION_1	CALL_2
0x4000e89	          0x4889c7	                            mov rdi, rax	       270	clean.c	FUNCTION_34	FUNCTION_1	CALL_2
0x4000e8c	      0xe800000000	                          call 0x4000e91	       270	clean.c	FUNCTION_34	FUNCTION_1	CALL_2
0x4000e91	      0x4883458010	            add qword [rbp - 0x80], 0x10	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e96	      0x48837d8000	               cmp qword [rbp - 0x80], 0	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e9b	            0x741c	                            je 0x4000eb9	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000e9d	    0x488b05000000	            mov rax, qword [0x04000ea4] 	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000ea4	    0x8b1500000000	            mov edx, dword [0x04000eaa] 	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eaa	            0x89d2	                            mov edx, edx	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eac	        0x48c1e204	                              shl rdx, 4	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eb0	          0x4801d0	                            add rax, rdx	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eb3	        0x483b4580	             cmp rax, qword [rbp - 0x80]	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eb7	            0x77a9	                            ja 0x4000e62	       268	clean.c	FUNCTION_34	FUNCTION_1
0x4000eb9	    0x8b0500000000	            mov eax, dword [0x04000ebf] 	       277	clean.c	FUNCTION_34
0x4000ebf	          0x83e0cf	                     and eax, 0xffffffcf	       277	clean.c	FUNCTION_34
0x4000ec2	          0x83c810	                            or eax, 0x10	       277	clean.c	FUNCTION_34
0x4000ec5	    0x890500000000	            mov dword [0x04000ecb], eax 	       277	clean.c	FUNCTION_34
0x4000ecb	        0x488d45b0	                   lea rax, [rbp - 0x50]	       278	clean.c	FUNCTION_34	CALL_1
0x4000ecf	      0xba18000000	                           mov edx, 0x18	       278	clean.c	FUNCTION_34	CALL_1
0x4000ed4	      0xbe00000000	                              mov esi, 0	       278	clean.c	FUNCTION_34	CALL_1
0x4000ed9	          0x4889c7	                            mov rdi, rax	       278	clean.c	FUNCTION_34	CALL_1
0x4000edc	      0xe800000000	                          call 0x4000ee1	       278	clean.c	FUNCTION_34	CALL_1
0x4000ee1	    0x48c745b80000	               mov qword [rbp - 0x48], 0	       279	clean.c	FUNCTION_34
0x4000ee9	    0xc745b4020000	               mov dword [rbp - 0x4c], 2	       280	clean.c	FUNCTION_34
0x4000ef0	    0x8b0d00000000	            mov ecx, dword [0x04000ef6] 	       281	clean.c	FUNCTION_34	CALL_2
0x4000ef6	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       281	clean.c	FUNCTION_34	CALL_2
0x4000efa	        0x488d45d0	                   lea rax, [rbp - 0x30]	       281	clean.c	FUNCTION_34	CALL_2
0x4000efe	            0x89ce	                            mov esi, ecx	       281	clean.c	FUNCTION_34	CALL_2
0x4000f00	          0x4889c7	                            mov rdi, rax	       281	clean.c	FUNCTION_34	CALL_2
0x4000f03	      0xe800000000	                          call 0x4000f08	       281	clean.c	FUNCTION_34	CALL_2
0x4000f08	        0x488d4590	                   lea rax, [rbp - 0x70]	       282	clean.c	FUNCTION_34	CALL_3
0x4000f0c	          0x4889c7	                            mov rdi, rax	       282	clean.c	FUNCTION_34	CALL_3
0x4000f0f	      0xe800000000	                          call 0x4000f14	       282	clean.c	FUNCTION_34	CALL_3
0x4000f14	        0x488d45d0	                   lea rax, [rbp - 0x30]	       283	clean.c	FUNCTION_34	CALL_4
0x4000f18	      0xbe00000000	                              mov esi, 0	       283	clean.c	FUNCTION_34	CALL_4
0x4000f1d	          0x4889c7	                            mov rdi, rax	       283	clean.c	FUNCTION_34	CALL_4
0x4000f20	      0xe800000000	                          call 0x4000f25	       283	clean.c	FUNCTION_34	CALL_4
0x4000f25	              0x90	                                     nop	       284	clean.c	FUNCTION_34
0x4000f26	        0x488b45f8	                mov rax, qword [rbp - 8]	       284	clean.c	FUNCTION_34
0x4000f2a	    0x644833042528	                xor rax, qword fs:[0x28]	       284	clean.c	FUNCTION_34
0x4000f33	            0x7405	                            je 0x4000f3a	       284	clean.c	FUNCTION_34
0x4000f35	      0xe800000000	                          call 0x4000f3a	       284	clean.c	FUNCTION_34
0x4000f3a	              0xc9	                                   leave	       284	clean.c	FUNCTION_34
0x4000f3b	              0xc3	                                     ret	       284	clean.c	FUNCTION_34
help_cmd	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,4:FOR,0	14
0x40021c1	              0x55	                                push rbp	       793	clean.c	FUNCTION_46
0x40021c2	          0x4889e5	                            mov rbp, rsp	       793	clean.c	FUNCTION_46
0x40021c5	      0xbf04000000	                              mov edi, 4	       794	clean.c	FUNCTION_46	CALL_1
0x40021ca	      0xe818e5ffff	              call sym.clean_print_color	       794	clean.c	FUNCTION_46	CALL_1
0x40021cf	      0xbf00000000	                              mov edi, 0	       795	clean.c	FUNCTION_46	CALL_3
0x40021d4	      0xe855e1ffff	                               call sym.	       795	clean.c	FUNCTION_46	CALL_3
0x40021d9	          0x4889c7	                            mov rdi, rax	       795	clean.c	FUNCTION_46	CALL_3
0x40021dc	      0xb800000000	                              mov eax, 0	       795	clean.c	FUNCTION_46	CALL_3
0x40021e1	      0xe800000000	                          call 0x40021e6	       795	clean.c	FUNCTION_46	CALL_3
0x40021e6	      0xbf00000000	                              mov edi, 0	       804	clean.c	FUNCTION_46	CALL_4
0x40021eb	      0xe8f7e4ffff	              call sym.clean_print_color	       804	clean.c	FUNCTION_46	CALL_4
0x40021f0	      0xb800000000	                              mov eax, 0	       805	clean.c	FUNCTION_46
0x40021f5	              0x5d	                                 pop rbp	       806	clean.c	FUNCTION_46
0x40021f6	              0xc3	                                     ret	       806	clean.c	FUNCTION_46
const_error	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,0:FOR,0	5
0x4000040	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_6
0x4000041	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_6
0x4000044	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_6
0x4000049	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_6
0x400004a	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_6
Q_	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,0:FOR,0	14
0x400035a	              0x55	                                push rbp	        59	gettext.h	FUNCTION_67
0x400035b	          0x4889e5	                            mov rbp, rsp	        59	gettext.h	FUNCTION_67
0x400035e	        0x4883ec20	                           sub rsp, 0x20	        59	gettext.h	FUNCTION_67
0x4000362	        0x48897df8	                mov qword [rbp - 8], rdi	        59	gettext.h	FUNCTION_67
0x4000366	        0x488975f0	             mov qword [rbp - 0x10], rsi	        59	gettext.h	FUNCTION_67
0x400036a	        0x488955e8	             mov qword [rbp - 0x18], rdx	        59	gettext.h	FUNCTION_67
0x400036e	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        62	gettext.h	FUNCTION_67
0x4000372	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	        62	gettext.h	FUNCTION_67
0x4000376	        0x488b45f8	                mov rax, qword [rbp - 8]	        62	gettext.h	FUNCTION_67
0x400037a	          0x4889ce	                            mov rsi, rcx	        62	gettext.h	FUNCTION_67
0x400037d	          0x4889c7	                            mov rdi, rax	        62	gettext.h	FUNCTION_67
0x4000380	      0xe800000000	                          call 0x4000385	        62	gettext.h	FUNCTION_67
0x4000385	              0xc9	                                   leave	        63	gettext.h	FUNCTION_67
0x4000386	              0xc3	                                     ret	        63	gettext.h	FUNCTION_67
skip_prefix	DO,1:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,0:FOR,0	27
0x400004b	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_7
0x400004c	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_7
0x400004f	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_7
0x4000053	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_7
0x4000057	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_7
0x400005b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x400005f	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000062	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000064	            0x7512	                           jne 0x4000078	       484	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000066	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x400006a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x400006e	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000071	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000076	            0xeb27	                           jmp 0x400009f	       486	git-compat-util.h	FUNCTION_7	DO_1	IF_1
0x4000078	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x400007c	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000080	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000084	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000087	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x400008b	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x400008f	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000093	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000096	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_7	DO_1
0x4000098	            0x74c1	                            je 0x400005b	       488	git-compat-util.h	FUNCTION_7	DO_1
0x400009a	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_7
0x400009f	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_7
0x40000a0	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_7
clean_print_color	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,2:FOR,0	14
0x40006e7	              0x55	                                push rbp	       141	clean.c	FUNCTION_31
0x40006e8	          0x4889e5	                            mov rbp, rsp	       141	clean.c	FUNCTION_31
0x40006eb	        0x4883ec10	                           sub rsp, 0x10	       141	clean.c	FUNCTION_31
0x40006ef	          0x897dfc	                mov dword [rbp - 4], edi	       141	clean.c	FUNCTION_31
0x40006f2	          0x8b45fc	                mov eax, dword [rbp - 4]	       142	clean.c	FUNCTION_31	CALL_2
0x40006f5	            0x89c7	                            mov edi, eax	       142	clean.c	FUNCTION_31	CALL_2
0x40006f7	      0xe8a3ffffff	                call sym.clean_get_color	       142	clean.c	FUNCTION_31	CALL_2
0x40006fc	          0x4889c6	                            mov rsi, rax	       142	clean.c	FUNCTION_31	CALL_2
0x40006ff	      0xbf00000000	                              mov edi, 0	       142	clean.c	FUNCTION_31	CALL_2
0x4000704	      0xb800000000	                              mov eax, 0	       142	clean.c	FUNCTION_31	CALL_2
0x4000709	      0xe800000000	                          call 0x400070e	       142	clean.c	FUNCTION_31	CALL_2
0x400070e	              0x90	                                     nop	       143	clean.c	FUNCTION_31
0x400070f	              0xc9	                                   leave	       143	clean.c	FUNCTION_31
0x4000710	              0xc3	                                     ret	       143	clean.c	FUNCTION_31
interactive_main_loop	DO,0:WHILE,1:SWITCH,0:IF,3:functions,0:ELSE,1:CALL,12:FOR,0	89
0x40021f7	              0x55	                                push rbp	       809	clean.c	FUNCTION_47
0x40021f8	          0x4889e5	                            mov rbp, rsp	       809	clean.c	FUNCTION_47
0x40021fb	    0x4881ec100100	                          sub rsp, 0x110	       809	clean.c	FUNCTION_47
0x4002202	    0x64488b042528	                mov rax, qword fs:[0x28]	       809	clean.c	FUNCTION_47
0x400220b	        0x488945f8	                mov qword [rbp - 8], rax	       809	clean.c	FUNCTION_47
0x400220f	            0x31c0	                            xor eax, eax	       809	clean.c	FUNCTION_47
0x4002211	      0xe969010000	                           jmp 0x400237f	       810	clean.c	FUNCTION_47	WHILE_1
0x4002216	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       813	clean.c	FUNCTION_47	WHILE_1
0x400221d	      0xbe00000000	                              mov esi, 0	       813	clean.c	FUNCTION_47	WHILE_1
0x4002222	      0xba18000000	                           mov edx, 0x18	       813	clean.c	FUNCTION_47	WHILE_1
0x4002227	          0x4889c7	                            mov rdi, rax	       813	clean.c	FUNCTION_47	WHILE_1
0x400222a	          0x4889d1	                            mov rcx, rdx	       813	clean.c	FUNCTION_47	WHILE_1
0x400222d	          0xf348a5	  rep movsq qword [rdi], qword ptr [rsi]	       813	clean.c	FUNCTION_47	WHILE_1
0x4002230	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	       823	clean.c	FUNCTION_47	WHILE_1
0x400223b	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	       824	clean.c	FUNCTION_47	WHILE_1
0x4002246	    0xc78520ffffff	               mov dword [rbp - 0xe0], 1	       825	clean.c	FUNCTION_47	WHILE_1
0x4002250	    0xc78500ffffff	              mov dword [rbp - 0x100], 2	       827	clean.c	FUNCTION_47	WHILE_1
0x400225a	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       828	clean.c	FUNCTION_47	WHILE_1
0x4002261	    0x48898508ffff	             mov qword [rbp - 0xf8], rax	       828	clean.c	FUNCTION_47	WHILE_1
0x4002268	    0xc78504ffffff	               mov dword [rbp - 0xfc], 6	       829	clean.c	FUNCTION_47	WHILE_1
0x4002272	      0xbf03000000	                              mov edi, 3	       831	clean.c	FUNCTION_47	WHILE_1	CALL_1
0x4002277	      0xe86be4ffff	              call sym.clean_print_color	       831	clean.c	FUNCTION_47	WHILE_1	CALL_1
0x400227c	    0x8b0500000000	            mov eax, dword [0x04002282] 	       834	clean.c	FUNCTION_47	WHILE_1
0x4002282	            0x89c0	                            mov eax, eax	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x4002284	          0x4889c2	                            mov rdx, rax	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x4002287	      0xbe00000000	                              mov esi, 0	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x400228c	      0xbf00000000	                              mov edi, 0	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x4002291	      0xe8c4e0ffff	                              call sym.Q	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x4002296	          0x4889c7	                            mov rdi, rax	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x4002299	      0xb800000000	                              mov eax, 0	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x400229e	      0xe800000000	                          call 0x40022a3	       832	clean.c	FUNCTION_47	WHILE_1	CALL_3
0x40022a3	      0xbf00000000	                              mov edi, 0	       835	clean.c	FUNCTION_47	WHILE_1	CALL_4
0x40022a8	      0xe83ae4ffff	              call sym.clean_print_color	       835	clean.c	FUNCTION_47	WHILE_1	CALL_4
0x40022ad	      0xe84cebffff	              call sym.pretty_print_dels	       837	clean.c	FUNCTION_47	WHILE_1	CALL_5
0x40022b2	    0x488d9500ffff	                  lea rdx, [rbp - 0x100]	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022b9	    0x488d8510ffff	                   lea rax, [rbp - 0xf0]	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022c0	          0x4889d6	                            mov rsi, rdx	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022c3	          0x4889c7	                            mov rdi, rax	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022c6	      0xe842f5ffff	                call sym.list_and_choose	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022cb	    0x488985f8feff	            mov qword [rbp - 0x108], rax	       839	clean.c	FUNCTION_47	WHILE_1	CALL_6
0x40022d2	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       841	clean.c	FUNCTION_47	WHILE_1	IF_1
0x40022d9	            0x8b00	                    mov eax, dword [rax]	       841	clean.c	FUNCTION_47	WHILE_1	IF_1
0x40022db	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       841	clean.c	FUNCTION_47	WHILE_1	IF_1
0x40022de	            0x747d	                            je 0x400235d	       841	clean.c	FUNCTION_47	WHILE_1	IF_1
0x40022e0	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022e7	            0x8b00	                    mov eax, dword [rax]	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022e9	            0x4898	                                    cdqe	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022eb	        0x48c1e005	                              shl rax, 5	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022ef	          0x4801e8	                            add rax, rbp	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022f2	    0x482db8000000	                           sub rax, 0xb8	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022f8	          0x488b00	                    mov rax, qword [rax]	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022fb	            0xffd0	                                call rax	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x40022fd	    0x8985f4feffff	            mov dword [rbp - 0x10c], eax	       843	clean.c	FUNCTION_47	WHILE_1	IF_1	CALL_7
0x4002303	    0x83bdf4feffff	           cmp dword [rbp - 0x10c], 0xa 	       844	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x400230a	            0x7456	                            je 0x4002362	       844	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x400230c	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       845	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x4002313	          0x4889c7	                            mov rdi, rax	       845	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x4002316	      0xe800000000	                          call 0x400231b	       845	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x400231b	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       845	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2
0x4002326	    0x8b0500000000	            mov eax, dword [0x0400232c] 	       846	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3
0x400232c	            0x85c0	                           test eax, eax	       846	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3
0x400232e	            0x754f	                           jne 0x400237f	       846	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3
0x4002330	      0xbf05000000	                              mov edi, 5	       847	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_8
0x4002335	      0xe8ade3ffff	              call sym.clean_print_color	       847	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_8
0x400233a	      0xbf00000000	                              mov edi, 0	       848	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_10
0x400233f	      0xe8eadfffff	                               call sym.	       848	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_10
0x4002344	          0x4889c7	                            mov rdi, rax	       848	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_10
0x4002347	      0xb800000000	                              mov eax, 0	       848	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_10
0x400234c	      0xe800000000	                          call 0x4002351	       848	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_10
0x4002351	      0xbf00000000	                              mov edi, 0	       849	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_11
0x4002356	      0xe88ce3ffff	              call sym.clean_print_color	       849	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3	CALL_11
0x400235b	            0xeb20	                           jmp 0x400237d	       850	clean.c	FUNCTION_47	WHILE_1	IF_1	IF_2	IF_3
0x400235d	      0xe82efeffff	                       call sym.quit_cmd	       855	clean.c	FUNCTION_47	WHILE_1	ELSE_1	CALL_12
0x4002362	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	       858	clean.c	FUNCTION_47	WHILE_1
0x4002369	          0x4889c7	                            mov rdi, rax	       858	clean.c	FUNCTION_47	WHILE_1
0x400236c	      0xe800000000	                          call 0x4002371	       858	clean.c	FUNCTION_47	WHILE_1
0x4002371	    0x48c785f8feff	              mov qword [rbp - 0x108], 0	       858	clean.c	FUNCTION_47	WHILE_1
0x400237c	              0x90	                                     nop	       859	clean.c	FUNCTION_47	WHILE_1
0x400237d	            0xeb0e	                           jmp 0x400238d	       861	clean.c	FUNCTION_47
0x400237f	    0x8b0500000000	            mov eax, dword [0x04002385] 	       810	clean.c	FUNCTION_47	WHILE_1
0x4002385	            0x85c0	                           test eax, eax	       810	clean.c	FUNCTION_47	WHILE_1
0x4002387	     0xf8589feffff	                           jne 0x4002216	       810	clean.c	FUNCTION_47	WHILE_1
0x400238d	              0x90	                                     nop	       861	clean.c	FUNCTION_47
0x400238e	        0x488b45f8	                mov rax, qword [rbp - 8]	       861	clean.c	FUNCTION_47
0x4002392	    0x644833042528	                xor rax, qword fs:[0x28]	       861	clean.c	FUNCTION_47
0x400239b	            0x7405	                            je 0x40023a2	       861	clean.c	FUNCTION_47
0x400239d	      0xe800000000	                          call 0x40023a2	       861	clean.c	FUNCTION_47
0x40023a2	              0xc9	                                   leave	       861	clean.c	FUNCTION_47
0x40023a3	              0xc3	                                     ret	       861	clean.c	FUNCTION_47
strbuf_split_max	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,1:FOR,0	16
0x40002aa	              0x55	                                push rbp	       532	strbuf.h	FUNCTION_60
0x40002ab	          0x4889e5	                            mov rbp, rsp	       532	strbuf.h	FUNCTION_60
0x40002ae	        0x4883ec10	                           sub rsp, 0x10	       532	strbuf.h	FUNCTION_60
0x40002b2	        0x48897df8	                mov qword [rbp - 8], rdi	       532	strbuf.h	FUNCTION_60
0x40002b6	          0x8975f4	              mov dword [rbp - 0xc], esi	       532	strbuf.h	FUNCTION_60
0x40002b9	          0x8955f0	             mov dword [rbp - 0x10], edx	       532	strbuf.h	FUNCTION_60
0x40002bc	        0x488b45f8	                mov rax, qword [rbp - 8]	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002c0	        0x488b7008	                mov rsi, qword [rax + 8]	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002c4	        0x488b45f8	                mov rax, qword [rbp - 8]	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002c8	        0x488b4010	            mov rax, qword [rax + 0x10] 	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002cc	          0x8b4df0	             mov ecx, dword [rbp - 0x10]	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002cf	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002d2	          0x4889c7	                            mov rdi, rax	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002d5	      0xe800000000	                          call 0x40002da	       533	strbuf.h	FUNCTION_60	CALL_1
0x40002da	              0xc9	                                   leave	       534	strbuf.h	FUNCTION_60
0x40002db	              0xc3	                                     ret	       534	strbuf.h	FUNCTION_60
select_by_numbers_cmd	DO,0:WHILE,0:SWITCH,0:IF,2:functions,0:ELSE,2:CALL,3:FOR,1	77
0x4001ed7	              0x55	                                push rbp	       714	clean.c	FUNCTION_43
0x4001ed8	          0x4889e5	                            mov rbp, rsp	       714	clean.c	FUNCTION_43
0x4001edb	        0x4883ec50	                           sub rsp, 0x50	       714	clean.c	FUNCTION_43
0x4001edf	    0x64488b042528	                mov rax, qword fs:[0x28]	       714	clean.c	FUNCTION_43
0x4001ee8	        0x488945f8	                mov qword [rbp - 8], rax	       714	clean.c	FUNCTION_43
0x4001eec	            0x31c0	                            xor eax, eax	       714	clean.c	FUNCTION_43
0x4001eee	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       721	clean.c	FUNCTION_43
0x4001ef6	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       722	clean.c	FUNCTION_43
0x4001efe	    0xc745f0000000	               mov dword [rbp - 0x10], 0	       723	clean.c	FUNCTION_43
0x4001f05	    0xc745d0010000	               mov dword [rbp - 0x30], 1	       725	clean.c	FUNCTION_43
0x4001f0c	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       726	clean.c	FUNCTION_43
0x4001f14	    0x8b0500000000	            mov eax, dword [0x04001f1a] 	       727	clean.c	FUNCTION_43
0x4001f1a	          0x8945d4	             mov dword [rbp - 0x2c], eax	       727	clean.c	FUNCTION_43
0x4001f1d	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       729	clean.c	FUNCTION_43	CALL_1
0x4001f21	        0x488d45e0	                   lea rax, [rbp - 0x20]	       729	clean.c	FUNCTION_43	CALL_1
0x4001f25	          0x4889d6	                            mov rsi, rdx	       729	clean.c	FUNCTION_43	CALL_1
0x4001f28	          0x4889c7	                            mov rdi, rax	       729	clean.c	FUNCTION_43	CALL_1
0x4001f2b	      0xe8ddf8ffff	                call sym.list_and_choose	       729	clean.c	FUNCTION_43	CALL_1
0x4001f30	        0x488945c0	             mov qword [rbp - 0x40], rax	       729	clean.c	FUNCTION_43	CALL_1
0x4001f34	    0x488b05000000	            mov rax, qword [0x04001f3b] 	       730	clean.c	FUNCTION_43
0x4001f3b	        0x488945c8	             mov qword [rbp - 0x38], rax	       730	clean.c	FUNCTION_43
0x4001f3f	    0xc745b8000000	               mov dword [rbp - 0x48], 0	       731	clean.c	FUNCTION_43	FOR_1
0x4001f46	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       731	clean.c	FUNCTION_43	FOR_1
0x4001f4d	            0xeb74	                           jmp 0x4001fc3	       731	clean.c	FUNCTION_43	FOR_1
0x4001f4f	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f52	            0x4898	                                    cdqe	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f54	    0x488d14850000	                        lea rdx, [rax*4]	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f5c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f60	          0x4801d0	                            add rax, rdx	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f63	            0x8b00	                    mov eax, dword [rax]	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f65	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f68	            0x7e1b	                           jle 0x4001f85	       732	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f6a	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f6d	            0x4898	                                    cdqe	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f6f	        0x48c1e004	                              shl rax, 4	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f73	          0x4889c2	                            mov rdx, rax	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f76	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f7a	          0x4801d0	                            add rax, rdx	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f7d	          0x488b00	                    mov rax, qword [rax]	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f80	          0xc60000	                       mov byte [rax], 0	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f83	            0xeb3a	                           jmp 0x4001fbf	       733	clean.c	FUNCTION_43	FOR_1	IF_1
0x4001f85	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f88	            0x4898	                                    cdqe	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f8a	    0x488d14850000	                        lea rdx, [rax*4]	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f92	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f96	          0x4801d0	                            add rax, rdx	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f99	            0x8b00	                    mov eax, dword [rax]	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f9b	          0x3b45b8	             cmp eax, dword [rbp - 0x48]	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001f9e	            0x7506	                           jne 0x4001fa6	       734	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001fa0	        0x8345bc01	               add dword [rbp - 0x44], 1	       736	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001fa4	            0xeb19	                           jmp 0x4001fbf	       737	clean.c	FUNCTION_43	FOR_1	ELSE_1	IF_2
0x4001fa6	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fa9	            0x4898	                                    cdqe	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fab	        0x48c1e004	                              shl rax, 4	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001faf	          0x4889c2	                            mov rdx, rax	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fb2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fb6	          0x4801d0	                            add rax, rdx	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fb9	          0x488b00	                    mov rax, qword [rax]	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fbc	          0xc60000	                       mov byte [rax], 0	       740	clean.c	FUNCTION_43	FOR_1	ELSE_2
0x4001fbf	        0x8345b801	               add dword [rbp - 0x48], 1	       731	clean.c	FUNCTION_43	FOR_1
0x4001fc3	    0x8b1500000000	            mov edx, dword [0x04001fc9] 	       731	clean.c	FUNCTION_43	FOR_1
0x4001fc9	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       731	clean.c	FUNCTION_43	FOR_1
0x4001fcc	            0x39c2	                            cmp edx, eax	       731	clean.c	FUNCTION_43	FOR_1
0x4001fce	     0xf877bffffff	                            ja 0x4001f4f	       731	clean.c	FUNCTION_43	FOR_1
0x4001fd4	      0xbe00000000	                              mov esi, 0	       744	clean.c	FUNCTION_43	CALL_2
0x4001fd9	      0xbf00000000	                              mov edi, 0	       744	clean.c	FUNCTION_43	CALL_2
0x4001fde	      0xe800000000	                          call 0x4001fe3	       744	clean.c	FUNCTION_43	CALL_2
0x4001fe3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       746	clean.c	FUNCTION_43	CALL_3
0x4001fe7	          0x4889c7	                            mov rdi, rax	       746	clean.c	FUNCTION_43	CALL_3
0x4001fea	      0xe800000000	                          call 0x4001fef	       746	clean.c	FUNCTION_43	CALL_3
0x4001fef	      0xb800000000	                              mov eax, 0	       747	clean.c	FUNCTION_43
0x4001ff4	        0x488b4df8	                mov rcx, qword [rbp - 8]	       748	clean.c	FUNCTION_43
0x4001ff8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       748	clean.c	FUNCTION_43
0x4002001	            0x7405	                            je 0x4002008	       748	clean.c	FUNCTION_43
0x4002003	      0xe800000000	                          call 0x4002008	       748	clean.c	FUNCTION_43
0x4002008	              0xc9	                                   leave	       748	clean.c	FUNCTION_43
0x4002009	              0xc3	                                     ret	       748	clean.c	FUNCTION_43
strbuf_setlen	DO,0:WHILE,0:SWITCH,0:IF,2:functions,0:ELSE,1:CALL,2:FOR,0	43
0x400016d	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_55
0x400016e	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_55
0x4000171	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_55
0x4000175	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_55
0x4000179	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_55
0x400017d	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000181	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000184	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_55	IF_1
0x4000187	            0x740d	                            je 0x4000196	       162	strbuf.h	FUNCTION_55	IF_1
0x4000189	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_55	IF_1
0x400018d	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000190	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_55	IF_1
0x4000194	            0xeb05	                           jmp 0x400019b	       162	strbuf.h	FUNCTION_55	IF_1
0x4000196	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_55	IF_1
0x400019b	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_55	IF_1
0x400019f	            0x730f	                           jae 0x40001b0	       162	strbuf.h	FUNCTION_55	IF_1
0x40001a1	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_55	CALL_1
0x40001a6	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_55	CALL_1
0x40001ab	      0xe800000000	                          call 0x40001b0	       163	strbuf.h	FUNCTION_55	CALL_1
0x40001b0	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_55
0x40001b4	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_55
0x40001b8	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_55
0x40001bc	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_55	IF_2
0x40001c0	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_55	IF_2
0x40001c4	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_55	IF_2
0x40001ca	            0x7414	                            je 0x40001e0	       165	strbuf.h	FUNCTION_55	IF_2
0x40001cc	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_55	IF_2
0x40001d0	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_55	IF_2
0x40001d4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_55	IF_2
0x40001d8	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_55	IF_2
0x40001db	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_55	IF_2
0x40001de	            0xeb24	                           jmp 0x4000204	       169	strbuf.h	FUNCTION_55
0x40001e0	     0xfb605000000	           movzx eax, byte [0x040001e7] 	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001e7	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001e9	            0x7419	                            je 0x4000204	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001eb	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001f0	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001f5	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001fa	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40001ff	      0xe800000000	                          call 0x4000204	       168	strbuf.h	FUNCTION_55	CALL_2
0x4000204	              0x90	                                     nop	       169	strbuf.h	FUNCTION_55
0x4000205	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_55
0x4000206	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_55
strbuf_addstr	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,2:FOR,0	17
0x4000275	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_57
0x4000276	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_57
0x4000279	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_57
0x400027d	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_57
0x4000281	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_57
0x4000285	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000289	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x400028c	      0xe800000000	                          call 0x4000291	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000291	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000294	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000298	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_57	CALL_2
0x400029c	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_57	CALL_2
0x400029f	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x40002a2	      0xe800000000	                          call 0x40002a7	       279	strbuf.h	FUNCTION_57	CALL_2
0x40002a7	              0x90	                                     nop	       280	strbuf.h	FUNCTION_57
0x40002a8	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_57
0x40002a9	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_57
_	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,0:FOR,0	15
0x400032e	              0x55	                                push rbp	        51	gettext.h	FUNCTION_66
0x400032f	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_66
0x4000332	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_66
0x4000336	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_66
0x400033a	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_66	IF_1
0x400033e	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_66	IF_1
0x4000341	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_66	IF_1
0x4000343	            0x7507	                           jne 0x400034c	        52	gettext.h	FUNCTION_66	IF_1
0x4000345	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_66	IF_1
0x400034a	            0xeb0c	                           jmp 0x4000358	        53	gettext.h	FUNCTION_66	IF_1
0x400034c	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_66
0x4000350	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_66
0x4000353	      0xe800000000	                          call 0x4000358	        54	gettext.h	FUNCTION_66
0x4000358	              0xc9	                                   leave	        55	gettext.h	FUNCTION_66
0x4000359	              0xc3	                                     ret	        55	gettext.h	FUNCTION_66
pretty_print_menus	DO,0:WHILE,0:SWITCH,0:IF,0:functions,0:ELSE,0:CALL,2:FOR,0	29
0x4000f3c	              0x55	                                push rbp	       287	clean.c	FUNCTION_35
0x4000f3d	          0x4889e5	                            mov rbp, rsp	       287	clean.c	FUNCTION_35
0x4000f40	        0x4883ec40	                           sub rsp, 0x40	       287	clean.c	FUNCTION_35
0x4000f44	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       287	clean.c	FUNCTION_35
0x4000f48	    0x64488b042528	                mov rax, qword fs:[0x28]	       287	clean.c	FUNCTION_35
0x4000f51	        0x488945f8	                mov qword [rbp - 8], rax	       287	clean.c	FUNCTION_35
0x4000f55	            0x31c0	                            xor eax, eax	       287	clean.c	FUNCTION_35
0x4000f57	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       288	clean.c	FUNCTION_35
0x4000f5e	    0xc745dc110000	           mov dword [rbp - 0x24], 0x11 	       291	clean.c	FUNCTION_35
0x4000f65	        0x488d45e0	                   lea rax, [rbp - 0x20]	       292	clean.c	FUNCTION_35	CALL_1
0x4000f69	      0xba18000000	                           mov edx, 0x18	       292	clean.c	FUNCTION_35	CALL_1
0x4000f6e	      0xbe00000000	                              mov esi, 0	       292	clean.c	FUNCTION_35	CALL_1
0x4000f73	          0x4889c7	                            mov rdi, rax	       292	clean.c	FUNCTION_35	CALL_1
0x4000f76	      0xe800000000	                          call 0x4000f7b	       292	clean.c	FUNCTION_35	CALL_1
0x4000f7b	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       293	clean.c	FUNCTION_35
0x4000f83	    0xc745e4020000	               mov dword [rbp - 0x1c], 2	       294	clean.c	FUNCTION_35
0x4000f8a	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       295	clean.c	FUNCTION_35	CALL_2
0x4000f8e	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	       295	clean.c	FUNCTION_35	CALL_2
0x4000f91	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       295	clean.c	FUNCTION_35	CALL_2
0x4000f95	            0x89ce	                            mov esi, ecx	       295	clean.c	FUNCTION_35	CALL_2
0x4000f97	          0x4889c7	                            mov rdi, rax	       295	clean.c	FUNCTION_35	CALL_2
0x4000f9a	      0xe800000000	                          call 0x4000f9f	       295	clean.c	FUNCTION_35	CALL_2
0x4000f9f	              0x90	                                     nop	       296	clean.c	FUNCTION_35
0x4000fa0	        0x488b45f8	                mov rax, qword [rbp - 8]	       296	clean.c	FUNCTION_35
0x4000fa4	    0x644833042528	                xor rax, qword fs:[0x28]	       296	clean.c	FUNCTION_35
0x4000fad	            0x7405	                            je 0x4000fb4	       296	clean.c	FUNCTION_35
0x4000faf	      0xe800000000	                          call 0x4000fb4	       296	clean.c	FUNCTION_35
0x4000fb4	              0xc9	                                   leave	       296	clean.c	FUNCTION_35
0x4000fb5	              0xc3	                                     ret	       296	clean.c	FUNCTION_35
parse_clean_color_slot	DO,0:WHILE,0:SWITCH,0:IF,6:functions,0:ELSE,0:CALL,6:FOR,0	55
0x4000461	              0x55	                                push rbp	        86	clean.c	FUNCTION_28
0x4000462	          0x4889e5	                            mov rbp, rsp	        86	clean.c	FUNCTION_28
0x4000465	        0x4883ec10	                           sub rsp, 0x10	        86	clean.c	FUNCTION_28
0x4000469	        0x48897df8	                mov qword [rbp - 8], rdi	        86	clean.c	FUNCTION_28
0x400046d	        0x488b45f8	                mov rax, qword [rbp - 8]	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x4000471	      0xbe00000000	                              mov esi, 0	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x4000476	          0x4889c7	                            mov rdi, rax	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x4000479	      0xe800000000	                          call 0x400047e	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x400047e	            0x85c0	                           test eax, eax	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x4000480	            0x750a	                           jne 0x400048c	        87	clean.c	FUNCTION_28	IF_1	CALL_1
0x4000482	      0xb800000000	                              mov eax, 0	        88	clean.c	FUNCTION_28	IF_1
0x4000487	      0xe991000000	                           jmp 0x400051d	        88	clean.c	FUNCTION_28	IF_1
0x400048c	        0x488b45f8	                mov rax, qword [rbp - 8]	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x4000490	      0xbe00000000	                              mov esi, 0	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x4000495	          0x4889c7	                            mov rdi, rax	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x4000498	      0xe800000000	                          call 0x400049d	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x400049d	            0x85c0	                           test eax, eax	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x400049f	            0x7507	                           jne 0x40004a8	        89	clean.c	FUNCTION_28	IF_2	CALL_2
0x40004a1	      0xb801000000	                              mov eax, 1	        90	clean.c	FUNCTION_28	IF_2
0x40004a6	            0xeb75	                           jmp 0x400051d	        90	clean.c	FUNCTION_28	IF_2
0x40004a8	        0x488b45f8	                mov rax, qword [rbp - 8]	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004ac	      0xbe00000000	                              mov esi, 0	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004b1	          0x4889c7	                            mov rdi, rax	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004b4	      0xe800000000	                          call 0x40004b9	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004b9	            0x85c0	                           test eax, eax	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004bb	            0x7507	                           jne 0x40004c4	        91	clean.c	FUNCTION_28	IF_3	CALL_3
0x40004bd	      0xb802000000	                              mov eax, 2	        92	clean.c	FUNCTION_28	IF_3
0x40004c2	            0xeb59	                           jmp 0x400051d	        92	clean.c	FUNCTION_28	IF_3
0x40004c4	        0x488b45f8	                mov rax, qword [rbp - 8]	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004c8	      0xbe00000000	                              mov esi, 0	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004cd	          0x4889c7	                            mov rdi, rax	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004d0	      0xe800000000	                          call 0x40004d5	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004d5	            0x85c0	                           test eax, eax	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004d7	            0x7507	                           jne 0x40004e0	        93	clean.c	FUNCTION_28	IF_4	CALL_4
0x40004d9	      0xb803000000	                              mov eax, 3	        94	clean.c	FUNCTION_28	IF_4
0x40004de	            0xeb3d	                           jmp 0x400051d	        94	clean.c	FUNCTION_28	IF_4
0x40004e0	        0x488b45f8	                mov rax, qword [rbp - 8]	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004e4	      0xbe00000000	                              mov esi, 0	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004e9	          0x4889c7	                            mov rdi, rax	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004ec	      0xe800000000	                          call 0x40004f1	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004f1	            0x85c0	                           test eax, eax	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004f3	            0x7507	                           jne 0x40004fc	        95	clean.c	FUNCTION_28	IF_5	CALL_5
0x40004f5	      0xb804000000	                              mov eax, 4	        96	clean.c	FUNCTION_28	IF_5
0x40004fa	            0xeb21	                           jmp 0x400051d	        96	clean.c	FUNCTION_28	IF_5
0x40004fc	        0x488b45f8	                mov rax, qword [rbp - 8]	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x4000500	      0xbe00000000	                              mov esi, 0	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x4000505	          0x4889c7	                            mov rdi, rax	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x4000508	      0xe800000000	                          call 0x400050d	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x400050d	            0x85c0	                           test eax, eax	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x400050f	            0x7507	                           jne 0x4000518	        97	clean.c	FUNCTION_28	IF_6	CALL_6
0x4000511	      0xb805000000	                              mov eax, 5	        98	clean.c	FUNCTION_28	IF_6
0x4000516	            0xeb05	                           jmp 0x400051d	        98	clean.c	FUNCTION_28	IF_6
0x4000518	      0xb8ffffffff	                     mov eax, 0xffffffff	        99	clean.c	FUNCTION_28
0x400051d	              0xc9	                                   leave	       100	clean.c	FUNCTION_28
0x400051e	              0xc3	                                     ret	       100	clean.c	FUNCTION_28
list_and_choose	DO,0:WHILE,0:SWITCH,0:IF,12:functions,0:ELSE,3:CALL,19:FOR,4	248
0x400180d	              0x55	                                push rbp	       550	clean.c	FUNCTION_40
0x400180e	          0x4889e5	                            mov rbp, rsp	       550	clean.c	FUNCTION_40
0x4001811	            0x4155	                                push r13	       550	clean.c	FUNCTION_40
0x4001813	            0x4154	                                push r12	       550	clean.c	FUNCTION_40
0x4001815	              0x53	                                push rbx	       550	clean.c	FUNCTION_40
0x4001816	        0x4883ec58	                           sub rsp, 0x58	       550	clean.c	FUNCTION_40
0x400181a	        0x48897d98	             mov qword [rbp - 0x68], rdi	       550	clean.c	FUNCTION_40
0x400181e	        0x48897590	             mov qword [rbp - 0x70], rsi	       550	clean.c	FUNCTION_40
0x4001822	    0x64488b042528	                mov rax, qword fs:[0x28]	       550	clean.c	FUNCTION_40
0x400182b	        0x488945d8	             mov qword [rbp - 0x28], rax	       550	clean.c	FUNCTION_40
0x400182f	            0x31c0	                            xor eax, eax	       550	clean.c	FUNCTION_40
0x4001831	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       551	clean.c	FUNCTION_40
0x4001839	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       551	clean.c	FUNCTION_40
0x4001841	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       551	clean.c	FUNCTION_40
0x4001849	    0xc745a0000000	               mov dword [rbp - 0x60], 0	       553	clean.c	FUNCTION_40
0x4001850	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       554	clean.c	FUNCTION_40
0x4001857	        0x488b4590	             mov rax, qword [rbp - 0x70]	       557	clean.c	FUNCTION_40
0x400185b	          0x8b4004	                mov eax, dword [rax + 4]	       557	clean.c	FUNCTION_40
0x400185e	            0x4898	                                    cdqe	       557	clean.c	FUNCTION_40
0x4001860	          0x4889c6	                            mov rsi, rax	       557	clean.c	FUNCTION_40
0x4001863	      0xbf04000000	                              mov edi, 4	       557	clean.c	FUNCTION_40
0x4001868	      0xe878e8ffff	                        call sym.st_mult	       557	clean.c	FUNCTION_40
0x400186d	          0x4889c7	                            mov rdi, rax	       557	clean.c	FUNCTION_40
0x4001870	      0xe800000000	                          call 0x4001875	       557	clean.c	FUNCTION_40
0x4001875	        0x488945b0	             mov qword [rbp - 0x50], rax	       557	clean.c	FUNCTION_40
0x4001879	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       559	clean.c	FUNCTION_40	FOR_1
0x4001880	            0xeb1b	                           jmp 0x400189d	       559	clean.c	FUNCTION_40	FOR_1
0x4001882	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       560	clean.c	FUNCTION_40	FOR_1
0x4001886	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       560	clean.c	FUNCTION_40	FOR_1
0x4001889	          0x4863d2	                         movsxd rdx, edx	       560	clean.c	FUNCTION_40	FOR_1
0x400188c	        0x48c1e202	                              shl rdx, 2	       560	clean.c	FUNCTION_40	FOR_1
0x4001890	          0x4801d0	                            add rax, rdx	       560	clean.c	FUNCTION_40	FOR_1
0x4001893	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       560	clean.c	FUNCTION_40	FOR_1
0x4001899	        0x8345a801	               add dword [rbp - 0x58], 1	       559	clean.c	FUNCTION_40	FOR_1
0x400189d	        0x488b4590	             mov rax, qword [rbp - 0x70]	       559	clean.c	FUNCTION_40	FOR_1
0x40018a1	          0x8b4004	                mov eax, dword [rax + 4]	       559	clean.c	FUNCTION_40	FOR_1
0x40018a4	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       559	clean.c	FUNCTION_40	FOR_1
0x40018a7	            0x7fd9	                            jg 0x4001882	       559	clean.c	FUNCTION_40	FOR_1
0x40018a9	        0x488b4598	             mov rax, qword [rbp - 0x68]	       563	clean.c	FUNCTION_40	FOR_2	IF_1
0x40018ad	          0x488b00	                    mov rax, qword [rax]	       563	clean.c	FUNCTION_40	FOR_2	IF_1
0x40018b0	          0x4885c0	                           test rax, rax	       563	clean.c	FUNCTION_40	FOR_2	IF_1
0x40018b3	            0x7441	                            je 0x40018f6	       563	clean.c	FUNCTION_40	FOR_2	IF_1
0x40018b5	      0xbf00000000	                              mov edi, 0	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018ba	      0xe8e0edffff	                call sym.clean_get_color	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018bf	          0x4989c4	                            mov r12, rax	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018c2	        0x488b4598	             mov rax, qword [rbp - 0x68]	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018c6	          0x488b00	                    mov rax, qword [rax]	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018c9	          0x4889c7	                            mov rdi, rax	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018cc	      0xe85deaffff	                               call sym.	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018d1	          0x4889c3	                            mov rbx, rax	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018d4	      0xbf03000000	                              mov edi, 3	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018d9	      0xe8c1edffff	                call sym.clean_get_color	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018de	          0x4c89e1	                            mov rcx, r12	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018e1	          0x4889da	                            mov rdx, rbx	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018e4	          0x4889c6	                            mov rsi, rax	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018e7	      0xbf00000000	                              mov edi, 0	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018ec	      0xb800000000	                              mov eax, 0	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018f1	      0xe800000000	                          call 0x40018f6	       564	clean.c	FUNCTION_40	FOR_2	IF_1	CALL_1
0x40018f6	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       571	clean.c	FUNCTION_40	FOR_2	CALL_5
0x40018fa	        0x488b4590	             mov rax, qword [rbp - 0x70]	       571	clean.c	FUNCTION_40	FOR_2	CALL_5
0x40018fe	          0x4889d6	                            mov rsi, rdx	       571	clean.c	FUNCTION_40	FOR_2	CALL_5
0x4001901	          0x4889c7	                            mov rdi, rax	       571	clean.c	FUNCTION_40	FOR_2	CALL_5
0x4001904	      0xe8f8f6ffff	     call sym.print_highlight_menu_stuff	       571	clean.c	FUNCTION_40	FOR_2	CALL_5
0x4001909	        0x488b4598	             mov rax, qword [rbp - 0x68]	       573	clean.c	FUNCTION_40	FOR_2	IF_2
0x400190d	          0x8b4010	            mov eax, dword [rax + 0x10] 	       573	clean.c	FUNCTION_40	FOR_2	IF_2
0x4001910	          0x83e004	                              and eax, 4	       573	clean.c	FUNCTION_40	FOR_2	IF_2
0x4001913	            0x85c0	                           test eax, eax	       573	clean.c	FUNCTION_40	FOR_2	IF_2
0x4001915	     0xf853f010000	                           jne 0x4001a5a	       573	clean.c	FUNCTION_40	FOR_2	IF_2
0x400191b	        0x488b4598	             mov rax, qword [rbp - 0x68]	       576	clean.c	FUNCTION_40	FOR_2	IF_3
0x400191f	        0x488b4008	                mov rax, qword [rax + 8]	       576	clean.c	FUNCTION_40	FOR_2	IF_3
0x4001923	          0x4885c0	                           test rax, rax	       576	clean.c	FUNCTION_40	FOR_2	IF_3
0x4001926	            0x745f	                            je 0x4001987	       576	clean.c	FUNCTION_40	FOR_2	IF_3
0x4001928	      0xbf00000000	                              mov edi, 0	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400192d	      0xe86dedffff	                call sym.clean_get_color	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001932	          0x4989c5	                            mov r13, rax	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001935	        0x488b4598	             mov rax, qword [rbp - 0x68]	       580	clean.c	FUNCTION_40	FOR_2	IF_3
0x4001939	          0x8b4010	            mov eax, dword [rax + 0x10] 	       580	clean.c	FUNCTION_40	FOR_2	IF_3
0x400193c	          0x83e001	                              and eax, 1	       580	clean.c	FUNCTION_40	FOR_2	IF_3
0x400193f	            0x85c0	                           test eax, eax	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001941	            0x7407	                            je 0x400194a	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001943	      0xbb00000000	                              mov ebx, 0	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001948	            0xeb05	                           jmp 0x400194f	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400194a	      0xbb00000000	                              mov ebx, 0	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400194f	        0x488b4598	             mov rax, qword [rbp - 0x68]	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001953	        0x488b4008	                mov rax, qword [rax + 8]	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001957	          0x4889c7	                            mov rdi, rax	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400195a	      0xe8cfe9ffff	                               call sym.	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400195f	          0x4989c4	                            mov r12, rax	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001962	      0xbf02000000	                              mov edi, 2	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001967	      0xe833edffff	                call sym.clean_get_color	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400196c	          0x4d89e8	                             mov r8, r13	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400196f	          0x4889d9	                            mov rcx, rbx	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001972	          0x4c89e2	                            mov rdx, r12	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001975	          0x4889c6	                            mov rsi, rax	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001978	      0xbf00000000	                              mov edi, 0	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x400197d	      0xb800000000	                              mov eax, 0	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001982	      0xe800000000	                          call 0x4001987	       577	clean.c	FUNCTION_40	FOR_2	IF_3	CALL_6
0x4001987	    0x488b15000000	            mov rdx, qword [0x0400198e] 	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x400198e	        0x488d45c0	                   lea rax, [rbp - 0x40]	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x4001992	          0x4889d6	                            mov rsi, rdx	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x4001995	          0x4889c7	                            mov rdi, rax	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x4001998	      0xe800000000	                          call 0x400199d	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x400199d	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x40019a0	            0x7423	                            je 0x40019c5	       584	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_10
0x40019a2	        0x488d45c0	                   lea rax, [rbp - 0x40]	       585	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_11
0x40019a6	          0x4889c7	                            mov rdi, rax	       585	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_11
0x40019a9	      0xe800000000	                          call 0x40019ae	       585	clean.c	FUNCTION_40	FOR_2	IF_4	CALL_11
0x40019ae	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019b2	      0xbe00000000	                              mov esi, 0	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019b7	          0x4889c7	                            mov rdi, rax	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019ba	      0xe800000000	                          call 0x40019bf	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019bf	            0x85c0	                           test eax, eax	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019c1	            0x7521	                           jne 0x40019e4	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019c3	            0xeb0c	                           jmp 0x40019d1	       592	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_12
0x40019c5	    0xc745a4010000	               mov dword [rbp - 0x5c], 1	       587	clean.c	FUNCTION_40	FOR_2	ELSE_1
0x40019cc	      0xe990000000	                           jmp 0x4001a61	       588	clean.c	FUNCTION_40	FOR_2	ELSE_1
0x40019d1	        0x488b4598	             mov rax, qword [rbp - 0x68]	       593	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_13
0x40019d5	          0x8b4010	            mov eax, dword [rax + 0x10] 	       593	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_13
0x40019d8	          0x83e001	                              and eax, 1	       593	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_13
0x40019db	            0x89c7	                            mov edi, eax	       593	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_13
0x40019dd	      0xe8d4f5ffff	                call sym.prompt_help_cmd	       593	clean.c	FUNCTION_40	FOR_2	IF_5	CALL_13
0x40019e2	            0xeb71	                           jmp 0x4001a55	       594	clean.c	FUNCTION_40	FOR_2	IF_5
0x40019e4	        0x488b4598	             mov rax, qword [rbp - 0x68]	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019e8	          0x8b4010	            mov eax, dword [rax + 0x10] 	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019eb	          0x83e001	                              and eax, 1	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019ee	            0x85c0	                           test eax, eax	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019f0	            0x7509	                           jne 0x40019fb	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019f2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019f6	          0x4885c0	                           test rax, rax	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019f9	            0x7462	                            je 0x4001a5d	       598	clean.c	FUNCTION_40	FOR_2	IF_6
0x40019fb	        0x488b4598	             mov rax, qword [rbp - 0x68]	       602	clean.c	FUNCTION_40	FOR_2
0x40019ff	          0x8b4010	            mov eax, dword [rax + 0x10] 	       602	clean.c	FUNCTION_40	FOR_2
0x4001a02	          0x83e001	                              and eax, 1	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a05	            0x89c1	                            mov ecx, eax	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a07	        0x488d55b0	                   lea rdx, [rbp - 0x50]	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a0b	        0x488b4590	             mov rax, qword [rbp - 0x70]	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a0f	        0x4883ec08	                              sub rsp, 8	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a13	          0xff75d0	                 push qword [rbp - 0x30]	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a16	          0xff75c8	                 push qword [rbp - 0x38]	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a19	          0xff75c0	                 push qword [rbp - 0x40]	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a1c	            0x89ce	                            mov esi, ecx	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a1e	          0x4889c7	                            mov rdi, rax	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a21	      0xe87efaffff	                   call sym.parse_choice	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a26	        0x4883c420	                           add rsp, 0x20	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a2a	          0x8945a0	             mov dword [rbp - 0x60], eax	       601	clean.c	FUNCTION_40	FOR_2	CALL_14
0x4001a2d	        0x488b4598	             mov rax, qword [rbp - 0x68]	       606	clean.c	FUNCTION_40	FOR_2	IF_7
0x4001a31	          0x8b4010	            mov eax, dword [rax + 0x10] 	       606	clean.c	FUNCTION_40	FOR_2	IF_7
0x4001a34	          0x83e001	                              and eax, 1	       606	clean.c	FUNCTION_40	FOR_2	IF_7
0x4001a37	            0x85c0	                           test eax, eax	       606	clean.c	FUNCTION_40	FOR_2	IF_7
0x4001a39	            0x740c	                            je 0x4001a47	       606	clean.c	FUNCTION_40	FOR_2	IF_7
0x4001a3b	        0x837da000	               cmp dword [rbp - 0x60], 0	       607	clean.c	FUNCTION_40	FOR_2	IF_7	IF_8
0x4001a3f	     0xf8464feffff	                            je 0x40018a9	       607	clean.c	FUNCTION_40	FOR_2	IF_7	IF_8
0x4001a45	            0xeb1a	                           jmp 0x4001a61	       608	clean.c	FUNCTION_40	FOR_2	IF_7	IF_8
0x4001a47	        0x488b4598	             mov rax, qword [rbp - 0x68]	       609	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a4b	          0x8b4010	            mov eax, dword [rax + 0x10] 	       609	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a4e	          0x83e002	                              and eax, 2	       609	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a51	            0x85c0	                           test eax, eax	       609	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a53	            0x750b	                           jne 0x4001a60	       609	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a55	      0xe94ffeffff	                           jmp 0x40018a9	       612	clean.c	FUNCTION_40	FOR_2
0x4001a5a	              0x90	                                     nop	       574	clean.c	FUNCTION_40	FOR_2	IF_2
0x4001a5b	            0xeb04	                           jmp 0x4001a61	       574	clean.c	FUNCTION_40	FOR_2	IF_2
0x4001a5d	              0x90	                                     nop	       599	clean.c	FUNCTION_40	FOR_2	IF_6
0x4001a5e	            0xeb01	                           jmp 0x4001a61	       599	clean.c	FUNCTION_40	FOR_2	IF_6
0x4001a60	              0x90	                                     nop	       610	clean.c	FUNCTION_40	FOR_2	ELSE_2	IF_9
0x4001a61	        0x837da400	               cmp dword [rbp - 0x5c], 0	       614	clean.c	FUNCTION_40	IF_10
0x4001a65	            0x741d	                            je 0x4001a84	       614	clean.c	FUNCTION_40	IF_10
0x4001a67	      0xbf04000000	                              mov edi, 4	       615	clean.c	FUNCTION_40	IF_10	CALL_15
0x4001a6c	      0xe800000000	                          call 0x4001a71	       615	clean.c	FUNCTION_40	IF_10	CALL_15
0x4001a71	        0x488945b8	             mov qword [rbp - 0x48], rax	       615	clean.c	FUNCTION_40	IF_10	CALL_15
0x4001a75	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       616	clean.c	FUNCTION_40	IF_10
0x4001a79	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       616	clean.c	FUNCTION_40	IF_10
0x4001a7f	      0xe9d0000000	                           jmp 0x4001b54	       616	clean.c	FUNCTION_40	IF_10
0x4001a84	    0xc745ac000000	               mov dword [rbp - 0x54], 0	       618	clean.c	FUNCTION_40	ELSE_3
0x4001a8b	        0x837da000	               cmp dword [rbp - 0x60], 0	       624	clean.c	FUNCTION_40	ELSE_3	IF_11
0x4001a8f	            0x752f	                           jne 0x4001ac0	       624	clean.c	FUNCTION_40	ELSE_3	IF_11
0x4001a91	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001a98	            0xeb1a	                           jmp 0x4001ab4	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001a9a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001a9e	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001aa1	          0x4863d2	                         movsxd rdx, edx	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001aa4	        0x48c1e202	                              shl rdx, 2	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001aa8	          0x4801d0	                            add rax, rdx	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001aab	            0x8b00	                    mov eax, dword [rax]	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001aad	           0x145a0	             add dword [rbp - 0x60], eax	       626	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001ab0	        0x8345a801	               add dword [rbp - 0x58], 1	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001ab4	        0x488b4590	             mov rax, qword [rbp - 0x70]	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001ab8	          0x8b4004	                mov eax, dword [rax + 4]	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001abb	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001abe	            0x7fda	                            jg 0x4001a9a	       625	clean.c	FUNCTION_40	ELSE_3	IF_11	FOR_3
0x4001ac0	          0x8b45a0	             mov eax, dword [rbp - 0x60]	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ac3	            0x4898	                                    cdqe	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ac5	      0xbe01000000	                              mov esi, 1	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001aca	          0x4889c7	                            mov rdi, rax	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001acd	      0xe8cfe5ffff	                         call sym.st_add	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ad2	      0xbe04000000	                              mov esi, 4	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ad7	          0x4889c7	                            mov rdi, rax	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ada	      0xe800000000	                          call 0x4001adf	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001adf	        0x488945b8	             mov qword [rbp - 0x48], rax	       629	clean.c	FUNCTION_40	ELSE_3	CALL_17
0x4001ae3	    0xc745a8000000	               mov dword [rbp - 0x58], 0	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001aea	            0xeb3a	                           jmp 0x4001b26	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001aec	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001af0	          0x8b55a8	             mov edx, dword [rbp - 0x58]	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001af3	          0x4863d2	                         movsxd rdx, edx	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001af6	        0x48c1e202	                              shl rdx, 2	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001afa	          0x4801d0	                            add rax, rdx	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001afd	            0x8b00	                    mov eax, dword [rax]	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001aff	            0x85c0	                           test eax, eax	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b01	            0x741f	                            je 0x4001b22	       631	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b03	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b06	          0x8d5001	                      lea edx, [rax + 1]	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b09	          0x8955ac	             mov dword [rbp - 0x54], edx	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b0c	            0x4898	                                    cdqe	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b0e	    0x488d14850000	                        lea rdx, [rax*4]	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b16	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b1a	          0x4801c2	                            add rdx, rax	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b1d	          0x8b45a8	             mov eax, dword [rbp - 0x58]	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b20	            0x8902	                    mov dword [rdx], eax	       632	clean.c	FUNCTION_40	ELSE_3	FOR_4	IF_12
0x4001b22	        0x8345a801	               add dword [rbp - 0x58], 1	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b26	        0x488b4590	             mov rax, qword [rbp - 0x70]	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b2a	          0x8b4004	                mov eax, dword [rax + 4]	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b2d	          0x3b45a8	             cmp eax, dword [rbp - 0x58]	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b30	            0x7e08	                           jle 0x4001b3a	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b32	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b35	          0x3b45a0	             cmp eax, dword [rbp - 0x60]	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b38	            0x7cb2	                            jl 0x4001aec	       630	clean.c	FUNCTION_40	ELSE_3	FOR_4
0x4001b3a	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b3d	            0x4898	                                    cdqe	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b3f	    0x488d14850000	                        lea rdx, [rax*4]	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b47	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b4b	          0x4801d0	                            add rax, rdx	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b4e	    0xc700ffffffff	            mov dword [rax], 0xffffffff 	       634	clean.c	FUNCTION_40	ELSE_3
0x4001b54	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       637	clean.c	FUNCTION_40	CALL_18
0x4001b58	          0x4889c7	                            mov rdi, rax	       637	clean.c	FUNCTION_40	CALL_18
0x4001b5b	      0xe800000000	                          call 0x4001b60	       637	clean.c	FUNCTION_40	CALL_18
0x4001b60	        0x488d45c0	                   lea rax, [rbp - 0x40]	       638	clean.c	FUNCTION_40	CALL_19
0x4001b64	          0x4889c7	                            mov rdi, rax	       638	clean.c	FUNCTION_40	CALL_19
0x4001b67	      0xe800000000	                          call 0x4001b6c	       638	clean.c	FUNCTION_40	CALL_19
0x4001b6c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       639	clean.c	FUNCTION_40
0x4001b70	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       640	clean.c	FUNCTION_40
0x4001b74	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       640	clean.c	FUNCTION_40
0x4001b7d	            0x7405	                            je 0x4001b84	       640	clean.c	FUNCTION_40
0x4001b7f	      0xe800000000	                          call 0x4001b84	       640	clean.c	FUNCTION_40
0x4001b84	        0x488d65e8	                   lea rsp, [rbp - 0x18]	       640	clean.c	FUNCTION_40
0x4001b88	              0x5b	                                 pop rbx	       640	clean.c	FUNCTION_40
0x4001b89	            0x415c	                                 pop r12	       640	clean.c	FUNCTION_40
0x4001b8b	            0x415d	                                 pop r13	       640	clean.c	FUNCTION_40
0x4001b8d	              0x5d	                                 pop rbp	       640	clean.c	FUNCTION_40
0x4001b8e	              0xc3	                                     ret	       640	clean.c	FUNCTION_40
find_unique	DO,0:WHILE,0:SWITCH,1:IF,6:functions,0:ELSE,2:CALL,4:FOR,2	99
0x4001356	              0x55	                                push rbp	       376	clean.c	FUNCTION_38
0x4001357	          0x4889e5	                            mov rbp, rsp	       376	clean.c	FUNCTION_38
0x400135a	        0x4883ec30	                           sub rsp, 0x30	       376	clean.c	FUNCTION_38
0x400135e	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       376	clean.c	FUNCTION_38
0x4001362	        0x488975d0	             mov qword [rbp - 0x30], rsi	       376	clean.c	FUNCTION_38
0x4001366	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       379	clean.c	FUNCTION_38
0x400136d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       381	clean.c	FUNCTION_38	CALL_1
0x4001371	          0x4889c7	                            mov rdi, rax	       381	clean.c	FUNCTION_38	CALL_1
0x4001374	      0xe800000000	                          call 0x4001379	       381	clean.c	FUNCTION_38	CALL_1
0x4001379	          0x8945ec	             mov dword [rbp - 0x14], eax	       381	clean.c	FUNCTION_38	CALL_1
0x400137c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       382	clean.c	FUNCTION_38	SWITCH_1
0x4001380	            0x8b00	                    mov eax, dword [rax]	       382	clean.c	FUNCTION_38	SWITCH_1
0x4001382	          0x83f801	                              cmp eax, 1	       382	clean.c	FUNCTION_38	SWITCH_1
0x4001385	     0xf84ad000000	                            je 0x4001438	       382	clean.c	FUNCTION_38	SWITCH_1
0x400138b	          0x83f802	                              cmp eax, 2	       382	clean.c	FUNCTION_38	SWITCH_1
0x400138e	            0x740f	                            je 0x400139f	       382	clean.c	FUNCTION_38	SWITCH_1
0x4001390	      0xbf00000000	                              mov edi, 0	       384	clean.c	FUNCTION_38	SWITCH_1	CALL_2
0x4001395	      0xb800000000	                              mov eax, 0	       384	clean.c	FUNCTION_38	SWITCH_1	CALL_2
0x400139a	      0xe800000000	                          call 0x400139f	       384	clean.c	FUNCTION_38	SWITCH_1	CALL_2
0x400139f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       387	clean.c	FUNCTION_38	SWITCH_1
0x40013a3	        0x488b4008	                mov rax, qword [rax + 8]	       387	clean.c	FUNCTION_38	SWITCH_1
0x40013a7	        0x488945f0	             mov qword [rbp - 0x10], rax	       387	clean.c	FUNCTION_38	SWITCH_1
0x40013ab	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x40013b2	            0xeb74	                           jmp 0x4001428	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x40013b4	        0x837dec01	               cmp dword [rbp - 0x14], 1	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013b8	            0x751d	                           jne 0x40013d7	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013ba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013be	           0xfb610	                   movzx edx, byte [rax]	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013c1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013c5	           0xfb600	                   movzx eax, byte [rax]	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013c8	            0x38c2	                              cmp dl, al	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013ca	            0x750b	                           jne 0x40013d7	       389	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013cc	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       390	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013cf	          0x83c001	                              add eax, 1	       390	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013d2	          0x8945e8	             mov dword [rbp - 0x18], eax	       390	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013d5	            0xeb5f	                           jmp 0x4001436	       391	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_1
0x40013d7	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013da	          0x4863d0	                         movsxd rdx, eax	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013dd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013e1	        0x488b4808	                mov rcx, qword [rax + 8]	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013e5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013e9	          0x4889ce	                            mov rsi, rcx	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013ec	          0x4889c7	                            mov rdi, rax	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013ef	      0xe800000000	                          call 0x40013f4	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013f4	            0x85c0	                           test eax, eax	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013f6	            0x7527	                           jne 0x400141f	       393	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	CALL_3
0x40013f8	        0x837de800	               cmp dword [rbp - 0x18], 0	       394	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3
0x40013fc	            0x7418	                            je 0x4001416	       394	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3
0x40013fe	        0x837dec01	               cmp dword [rbp - 0x14], 1	       395	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x4001402	            0x7509	                           jne 0x400140d	       395	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x4001404	    0xc745e8ffffff	     mov dword [rbp - 0x18], 0xffffffff 	       397	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x400140b	            0xeb12	                           jmp 0x400141f	       397	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	IF_4
0x400140d	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       399	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	ELSE_1
0x4001414	            0xeb20	                           jmp 0x4001436	       400	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	IF_3	ELSE_1
0x4001416	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       403	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	ELSE_2
0x4001419	          0x83c001	                              add eax, 1	       403	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	ELSE_2
0x400141c	          0x8945e8	             mov dword [rbp - 0x18], eax	       403	clean.c	FUNCTION_38	SWITCH_1	FOR_1	IF_2	ELSE_2
0x400141f	        0x8345e401	               add dword [rbp - 0x1c], 1	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x4001423	      0x488345f020	            add qword [rbp - 0x10], 0x20	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x4001428	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x400142c	          0x8b4004	                mov eax, dword [rax + 4]	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x400142f	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x4001432	            0x7f80	                            jg 0x40013b4	       388	clean.c	FUNCTION_38	SWITCH_1	FOR_1
0x4001434	            0xeb69	                           jmp 0x400149f	       407	clean.c	FUNCTION_38	SWITCH_1
0x4001436	            0xeb67	                           jmp 0x400149f	       407	clean.c	FUNCTION_38	SWITCH_1
0x4001438	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       409	clean.c	FUNCTION_38	SWITCH_1
0x400143c	        0x488b4008	                mov rax, qword [rax + 8]	       409	clean.c	FUNCTION_38	SWITCH_1
0x4001440	          0x488b00	                    mov rax, qword [rax]	       409	clean.c	FUNCTION_38	SWITCH_1
0x4001443	        0x488945f8	                mov qword [rbp - 8], rax	       409	clean.c	FUNCTION_38	SWITCH_1
0x4001447	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x400144e	            0xeb42	                           jmp 0x4001492	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x4001450	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001453	          0x4863d0	                         movsxd rdx, eax	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001456	        0x488b45f8	                mov rax, qword [rbp - 8]	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x400145a	          0x488b08	                    mov rcx, qword [rax]	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x400145d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001461	          0x4889ce	                            mov rsi, rcx	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001464	          0x4889c7	                            mov rdi, rax	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001467	      0xe800000000	                          call 0x400146c	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x400146c	            0x85c0	                           test eax, eax	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x400146e	            0x7519	                           jne 0x4001489	       411	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	CALL_4
0x4001470	        0x837de800	               cmp dword [rbp - 0x18], 0	       412	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	IF_6
0x4001474	            0x740a	                            je 0x4001480	       412	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	IF_6
0x4001476	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       413	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	IF_6
0x400147d	              0x90	                                     nop	       414	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5	IF_6
0x400147e	            0xeb1e	                           jmp 0x400149e	       419	clean.c	FUNCTION_38	SWITCH_1
0x4001480	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       416	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5
0x4001483	          0x83c001	                              add eax, 1	       416	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5
0x4001486	          0x8945e8	             mov dword [rbp - 0x18], eax	       416	clean.c	FUNCTION_38	SWITCH_1	FOR_2	IF_5
0x4001489	        0x8345e401	               add dword [rbp - 0x1c], 1	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x400148d	      0x488345f810	               add qword [rbp - 8], 0x10	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x4001492	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x4001496	          0x8b4004	                mov eax, dword [rax + 4]	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x4001499	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x400149c	            0x7fb2	                            jg 0x4001450	       410	clean.c	FUNCTION_38	SWITCH_1	FOR_2
0x400149e	              0x90	                                     nop	       419	clean.c	FUNCTION_38	SWITCH_1
0x400149f	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       421	clean.c	FUNCTION_38
0x40014a2	              0xc9	                                   leave	       422	clean.c	FUNCTION_38
0x40014a3	              0xc3	                                     ret	       422	clean.c	FUNCTION_38
st_add	DO,0:WHILE,0:SWITCH,0:IF,1:functions,0:ELSE,0:CALL,1:FOR,0	20
0x40000a1	              0x55	                                push rbp	       784	git-compat-util.h	FUNCTION_14
0x40000a2	          0x4889e5	                            mov rbp, rsp	       784	git-compat-util.h	FUNCTION_14
0x40000a5	        0x4883ec10	                           sub rsp, 0x10	       784	git-compat-util.h	FUNCTION_14
0x40000a9	        0x48897df8	                mov qword [rbp - 8], rdi	       784	git-compat-util.h	FUNCTION_14
0x40000ad	        0x488975f0	             mov qword [rbp - 0x10], rsi	       784	git-compat-util.h	FUNCTION_14
0x40000b1	        0x488b45f8	                mov rax, qword [rbp - 8]	       785	git-compat-util.h	FUNCTION_14	IF_1
0x40000b5	          0x48f7d0	                                 not rax	       785	git-compat-util.h	FUNCTION_14	IF_1
0x40000b8	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       785	git-compat-util.h	FUNCTION_14	IF_1
0x40000bc	            0x731a	                           jae 0x40000d8	       785	git-compat-util.h	FUNCTION_14	IF_1
0x40000be	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000c2	        0x488b45f8	                mov rax, qword [rbp - 8]	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000c6	          0x4889c6	                            mov rsi, rax	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000c9	      0xbf00000000	                              mov edi, 0	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000ce	      0xb800000000	                              mov eax, 0	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000d3	      0xe800000000	                          call 0x40000d8	       786	git-compat-util.h	FUNCTION_14	IF_1	CALL_1
0x40000d8	        0x488b55f8	                mov rdx, qword [rbp - 8]	       788	git-compat-util.h	FUNCTION_14
0x40000dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       788	git-compat-util.h	FUNCTION_14
0x40000e0	          0x4801d0	                            add rax, rdx	       788	git-compat-util.h	FUNCTION_14
0x40000e3	              0xc9	                                   leave	       789	git-compat-util.h	FUNCTION_14
0x40000e4	              0xc3	                                     ret	       789	git-compat-util.h	FUNCTION_14
