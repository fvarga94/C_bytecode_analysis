userformat_want_item	WHILE,0:DO,0:CALL,0:functions,0:IF,1:FOR,0:SWITCH,1:ELSE,0	33
0x4003f3f	              0x55	                                push rbp	      1480	pretty.c	FUNCTION_42
0x4003f40	          0x4889e5	                            mov rbp, rsp	      1480	pretty.c	FUNCTION_42
0x4003f43	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1480	pretty.c	FUNCTION_42
0x4003f47	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1480	pretty.c	FUNCTION_42
0x4003f4b	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1480	pretty.c	FUNCTION_42
0x4003f4f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1481	pretty.c	FUNCTION_42
0x4003f53	        0x488945f8	                mov qword [rbp - 8], rax	      1481	pretty.c	FUNCTION_42
0x4003f57	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f5b	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f5e	            0x3c2b	                            cmp al, 0x2b	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f60	            0x7416	                            je 0x4003f78	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f62	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f66	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f69	            0x3c2d	                            cmp al, 0x2d	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f6b	            0x740b	                            je 0x4003f78	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f6d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f71	           0xfb600	                   movzx eax, byte [rax]	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f74	            0x3c20	                            cmp al, 0x20	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f76	            0x7505	                           jne 0x4003f7d	      1483	pretty.c	FUNCTION_42	IF_1
0x4003f78	      0x488345e001	               add qword [rbp - 0x20], 1	      1484	pretty.c	FUNCTION_42	IF_1
0x4003f7d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x4003f81	           0xfb600	                   movzx eax, byte [rax]	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x4003f84	           0xfbec0	                           movsx eax, al	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x4003f87	          0x83f84e	                           cmp eax, 0x4e	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x4003f8a	            0x750d	                           jne 0x4003f99	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x4003f8c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x4003f90	           0xfb610	                   movzx edx, byte [rax]	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x4003f93	          0x83ca01	                               or edx, 1	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x4003f96	            0x8810	                      mov byte [rax], dl	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x4003f98	              0x90	                                     nop	      1489	pretty.c	FUNCTION_42	SWITCH_1
0x4003f99	      0xb800000000	                              mov eax, 0	      1491	pretty.c	FUNCTION_42
0x4003f9e	              0x5d	                                 pop rbp	      1492	pretty.c	FUNCTION_42
0x4003f9f	              0xc3	                                     ret	      1492	pretty.c	FUNCTION_42
strbuf_addstr	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	17
0x40002ba	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_58
0x40002bb	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_58
0x40002be	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_58
0x40002c2	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_58
0x40002c6	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_58
0x40002ca	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002ce	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002d1	      0xe800000000	                          call 0x40002d6	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002d6	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002d9	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002dd	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002e1	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002e4	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002e7	      0xe800000000	                          call 0x40002ec	       279	strbuf.h	FUNCTION_58	CALL_2
0x40002ec	              0x90	                                     nop	       280	strbuf.h	FUNCTION_58
0x40002ed	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_58
0x40002ee	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_58
strbuf_setlen	WHILE,0:DO,0:CALL,2:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,1	43
0x40001b2	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_56
0x40001b3	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_56
0x40001b6	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_56
0x40001ba	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_56
0x40001be	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_56
0x40001c2	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_56	IF_1
0x40001c6	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_56	IF_1
0x40001c9	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_56	IF_1
0x40001cc	            0x740d	                            je 0x40001db	       162	strbuf.h	FUNCTION_56	IF_1
0x40001ce	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_56	IF_1
0x40001d2	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_56	IF_1
0x40001d5	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_56	IF_1
0x40001d9	            0xeb05	                           jmp 0x40001e0	       162	strbuf.h	FUNCTION_56	IF_1
0x40001db	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_56	IF_1
0x40001e0	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_56	IF_1
0x40001e4	            0x730f	                           jae 0x40001f5	       162	strbuf.h	FUNCTION_56	IF_1
0x40001e6	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_56	CALL_1
0x40001eb	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_56	CALL_1
0x40001f0	      0xe800000000	                          call 0x40001f5	       163	strbuf.h	FUNCTION_56	CALL_1
0x40001f5	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_56
0x40001f9	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_56
0x40001fd	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_56
0x4000201	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_56	IF_2
0x4000205	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_56	IF_2
0x4000209	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_56	IF_2
0x400020f	            0x7414	                            je 0x4000225	       165	strbuf.h	FUNCTION_56	IF_2
0x4000211	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_56	IF_2
0x4000215	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_56	IF_2
0x4000219	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_56	IF_2
0x400021d	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_56	IF_2
0x4000220	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_56	IF_2
0x4000223	            0xeb24	                           jmp 0x4000249	       169	strbuf.h	FUNCTION_56
0x4000225	     0xfb605000000	           movzx eax, byte [0x0400022c] 	       168	strbuf.h	FUNCTION_56	CALL_2
0x400022c	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_56	CALL_2
0x400022e	            0x7419	                            je 0x4000249	       168	strbuf.h	FUNCTION_56	CALL_2
0x4000230	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x4000235	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_56	CALL_2
0x400023a	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x400023f	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_56	CALL_2
0x4000244	      0xe800000000	                          call 0x4000249	       168	strbuf.h	FUNCTION_56	CALL_2
0x4000249	              0x90	                                     nop	       169	strbuf.h	FUNCTION_56
0x400024a	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_56
0x400024b	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_56
pp_header	WHILE,0:DO,0:CALL,13:functions,0:IF,8:FOR,1:SWITCH,0:ELSE,0	140
0x400425b	              0x55	                                push rbp	      1557	pretty.c	FUNCTION_45
0x400425c	          0x4889e5	                            mov rbp, rsp	      1557	pretty.c	FUNCTION_45
0x400425f	        0x4883ec60	                           sub rsp, 0x60	      1557	pretty.c	FUNCTION_45
0x4004263	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1557	pretty.c	FUNCTION_45
0x4004267	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1557	pretty.c	FUNCTION_45
0x400426b	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1557	pretty.c	FUNCTION_45
0x400426f	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1557	pretty.c	FUNCTION_45
0x4004273	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1557	pretty.c	FUNCTION_45
0x4004277	    0x64488b042528	                mov rax, qword fs:[0x28]	      1557	pretty.c	FUNCTION_45
0x4004280	        0x488945f8	                mov qword [rbp - 8], rax	      1557	pretty.c	FUNCTION_45
0x4004284	            0x31c0	                            xor eax, eax	      1557	pretty.c	FUNCTION_45
0x4004286	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1558	pretty.c	FUNCTION_45
0x400428d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1561	pretty.c	FUNCTION_45	FOR_1
0x4004291	          0x488b00	                    mov rax, qword [rax]	      1561	pretty.c	FUNCTION_45	FOR_1
0x4004294	        0x488945f0	             mov qword [rbp - 0x10], rax	      1561	pretty.c	FUNCTION_45	FOR_1
0x4004298	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x400429c	          0x488b00	                    mov rax, qword [rax]	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x400429f	          0x4889c7	                            mov rdi, rax	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x40042a2	      0xe836c9ffff	                   call sym.get_one_line	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x40042a7	          0x8945e0	             mov dword [rbp - 0x20], eax	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x40042aa	        0x837de000	               cmp dword [rbp - 0x20], 0	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x40042ae	     0xf8492010000	                            je 0x4004446	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x40042b4	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042b8	          0x488b10	                    mov rdx, qword [rax]	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042bb	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042be	            0x4898	                                    cdqe	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042c0	          0x4801c2	                            add rdx, rax	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042c3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042c7	          0x488910	                    mov qword [rax], rdx	      1566	pretty.c	FUNCTION_45	FOR_1
0x40042ca	        0x837de001	               cmp dword [rbp - 0x20], 1	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x40042ce	     0xf8475010000	                            je 0x4004449	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x40042d4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40042d8	            0x8b00	                    mov eax, dword [rax]	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40042da	            0x85c0	                           test eax, eax	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40042dc	            0x751e	                           jne 0x40042fc	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40042de	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042e1	          0x4863d0	                         movsxd rdx, eax	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042e4	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042e8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042ec	          0x4889ce	                            mov rsi, rcx	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042ef	          0x4889c7	                            mov rdi, rax	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042f2	      0xe800000000	                          call 0x40042f7	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40042f7	      0xe945010000	                           jmp 0x4004441	      1574	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40042fc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x4004300	      0xbe00000000	                              mov esi, 0	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x4004305	          0x4889c7	                            mov rdi, rax	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x4004308	      0xe800000000	                          call 0x400430d	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x400430d	            0x85c0	                           test eax, eax	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x400430f	            0x7419	                            je 0x400432a	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x4004311	        0x837de030	           cmp dword [rbp - 0x20], 0x30 	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x4004315	     0xf8425010000	                            je 0x4004440	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x400431b	      0xbf00000000	                              mov edi, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x4004320	      0xb800000000	                              mov eax, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x4004325	      0xe800000000	                          call 0x400432a	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x400432a	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x400432e	            0x754b	                           jne 0x400437b	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4004330	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4004334	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4004338	          0x4889c7	                            mov rdi, rax	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x400433b	      0xe800000000	                          call 0x4004340	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4004340	          0x8945e4	             mov dword [rbp - 0x1c], eax	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x4004343	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4004346	          0x6bc032	                     imul eax, eax, 0x32	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4004349	          0x83c014	                           add eax, 0x14	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x400434c	            0x89c2	                            mov edx, eax	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x400434e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4004352	          0x4889d6	                            mov rsi, rdx	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4004355	          0x4889c7	                            mov rdi, rax	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x4004358	      0xe800000000	                          call 0x400435d	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x400435d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4004361	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4004365	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4004369	          0x4889ce	                            mov rsi, rcx	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x400436c	          0x4889c7	                            mov rdi, rax	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x400436f	      0xe821d5ffff	                 call sym.add_merge_info	      1587	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_7
0x4004374	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x400437b	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x400437f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4004383	      0xbe00000000	                              mov esi, 0	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4004388	          0x4889c7	                            mov rdi, rax	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x400438b	      0xe8b0bcffff	                    call sym.skip_prefix	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4004390	            0x85c0	                           test eax, eax	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4004392	            0x7438	                            je 0x40043cc	      1596	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_8
0x4004394	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4004397	          0x83c050	                           add eax, 0x50	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x400439a	          0x4863d0	                         movsxd rdx, eax	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x400439d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x40043a1	          0x4889d6	                            mov rsi, rdx	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x40043a4	          0x4889c7	                            mov rdi, rax	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x40043a7	      0xe800000000	                          call 0x40043ac	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x40043ac	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043b0	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043b4	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043b8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043bc	          0x4989f0	                             mov r8, rsi	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043bf	      0xbe00000000	                              mov esi, 0	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043c4	          0x4889c7	                            mov rdi, rax	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043c7	      0xe800000000	                          call 0x40043cc	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x40043cc	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043d0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043d4	      0xbe00000000	                              mov esi, 0	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043d9	          0x4889c7	                            mov rdi, rax	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043dc	      0xe85fbcffff	                    call sym.skip_prefix	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043e1	            0x85c0	                           test eax, eax	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043e3	     0xf84a4feffff	                            je 0x400428d	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043e9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x40043ed	            0x8b00	                    mov eax, dword [rax]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x40043ef	          0x83f803	                              cmp eax, 3	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043f2	            0x740f	                            je 0x4004403	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x40043f4	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x40043f8	            0x8b00	                    mov eax, dword [rax]	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x40043fa	          0x83f804	                              cmp eax, 4	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x40043fd	     0xf858afeffff	                           jne 0x400428d	      1601	pretty.c	FUNCTION_45	FOR_1	IF_8
0x4004403	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4004406	          0x83c050	                           add eax, 0x50	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4004409	          0x4863d0	                         movsxd rdx, eax	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x400440c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4004410	          0x4889d6	                            mov rsi, rdx	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4004413	          0x4889c7	                            mov rdi, rax	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4004416	      0xe800000000	                          call 0x400441b	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x400441b	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x400441f	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4004423	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4004427	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x400442b	          0x4989f0	                             mov r8, rsi	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x400442e	      0xbe00000000	                              mov esi, 0	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4004433	          0x4889c7	                            mov rdi, rax	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4004436	      0xe800000000	                          call 0x400443b	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x400443b	      0xe94dfeffff	                           jmp 0x400428d	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4004440	              0x90	                                     nop	      1580	pretty.c	FUNCTION_45	FOR_1	IF_4
0x4004441	      0xe947feffff	                           jmp 0x400428d	      1605	pretty.c	FUNCTION_45	FOR_1
0x4004446	              0x90	                                     nop	      1565	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4004447	            0xeb01	                           jmp 0x400444a	      1565	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4004449	              0x90	                                     nop	      1570	pretty.c	FUNCTION_45	FOR_1	IF_2
0x400444a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1606	pretty.c	FUNCTION_45
0x400444e	    0x644833042528	                xor rax, qword fs:[0x28]	      1606	pretty.c	FUNCTION_45
0x4004457	            0x7405	                            je 0x400445e	      1606	pretty.c	FUNCTION_45
0x4004459	      0xe800000000	                          call 0x400445e	      1606	pretty.c	FUNCTION_45
0x400445e	              0xc9	                                   leave	      1606	pretty.c	FUNCTION_45
0x400445f	              0xc3	                                     ret	      1606	pretty.c	FUNCTION_45
get_commit_format	WHILE,0:DO,0:CALL,8:functions,0:IF,5:FOR,0:SWITCH,0:ELSE,0	97
0x4000a75	              0x55	                                push rbp	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000a76	          0x4889e5	                            mov rbp, rsp	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000a79	        0x4883ec20	                           sub rsp, 0x20	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000a7d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000a81	        0x488975e0	             mov qword [rbp - 0x20], rsi	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000a85	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       158	pretty.c	WHILE_3	FUNCTION_7
0x4000a89	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	       158	pretty.c	WHILE_3	FUNCTION_7
0x4000a8d	          0x83e2f7	                     and edx, 0xfffffff7	       158	pretty.c	WHILE_3	FUNCTION_7
0x4000a90	          0x88507b	               mov byte [rax + 0x7b], dl	       158	pretty.c	WHILE_3	FUNCTION_7
0x4000a93	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000a97	          0x4885c0	                           test rax, rax	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000a9a	            0x7513	                           jne 0x4000aaf	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000a9c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       160	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000aa0	    0xc780a4000000	               mov dword [rax + 0xa4], 1	       160	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000aaa	      0xe92c010000	                           jmp 0x4000bdb	       161	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x4000aaf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000ab3	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000ab7	      0xbe00000000	                              mov esi, 0	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000abc	          0x4889c7	                            mov rdi, rax	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000abf	      0xe87cf5ffff	                    call sym.skip_prefix	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000ac4	            0x85c0	                           test eax, eax	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000ac6	            0x741d	                            je 0x4000ae5	       163	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_1
0x4000ac8	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000acc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000ad0	      0xba00000000	                              mov edx, 0	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000ad5	          0x4889ce	                            mov rsi, rcx	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000ad8	          0x4889c7	                            mov rdi, rax	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000adb	      0xe834f9ffff	               call sym.save_user_format	       164	pretty.c	WHILE_3	FUNCTION_7	IF_2	CALL_2
0x4000ae0	      0xe9f6000000	                           jmp 0x4000bdb	       165	pretty.c	WHILE_3	FUNCTION_7	IF_2
0x4000ae5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000ae9	           0xfb600	                   movzx eax, byte [rax]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000aec	            0x84c0	                             test al, al	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000aee	            0x742f	                            je 0x4000b1f	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000af0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000af4	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000af8	      0xbe00000000	                              mov esi, 0	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000afd	          0x4889c7	                            mov rdi, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b00	      0xe83bf5ffff	                    call sym.skip_prefix	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b05	            0x85c0	                           test eax, eax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b07	            0x7516	                           jne 0x4000b1f	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b09	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b0d	      0xbe25000000	                           mov esi, 0x25	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b12	          0x4889c7	                            mov rdi, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b15	      0xe800000000	                          call 0x4000b1a	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b1a	          0x4885c0	                           test rax, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b1d	            0x741d	                            je 0x4000b3c	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000b1f	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b23	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b27	      0xba01000000	                              mov edx, 1	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b2c	          0x4889ce	                            mov rsi, rcx	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b2f	          0x4889c7	                            mov rdi, rax	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b32	      0xe8ddf8ffff	               call sym.save_user_format	       169	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_5
0x4000b37	      0xe99f000000	                           jmp 0x4000bdb	       170	pretty.c	WHILE_3	FUNCTION_7	IF_3
0x4000b3c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0x4000b40	          0x4889c7	                            mov rdi, rax	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0x4000b43	      0xe8f6feffff	             call sym.find_commit_format	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0x4000b48	        0x488945f8	                mov qword [rbp - 8], rax	       173	pretty.c	WHILE_3	FUNCTION_7	CALL_6
0x4000b4c	      0x48837df800	                  cmp qword [rbp - 8], 0	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0x4000b51	            0x7516	                           jne 0x4000b69	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0x4000b53	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000b57	          0x4889c6	                            mov rsi, rax	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000b5a	      0xbf00000000	                              mov edi, 0	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000b5f	      0xb800000000	                              mov eax, 0	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000b64	      0xe800000000	                          call 0x4000b69	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000b69	        0x488b45f8	                mov rax, qword [rbp - 8]	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000b6d	          0x8b5008	                mov edx, dword [rax + 8]	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000b70	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000b74	    0x8990a4000000	             mov dword [rax + 0xa4], edx	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000b7a	        0x488b45f8	                mov rax, qword [rbp - 8]	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b7e	          0x8b400c	              mov eax, dword [rax + 0xc]	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b81	          0x83e001	                              and eax, 1	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b84	            0x89c2	                            mov edx, eax	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b86	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b8a	          0x83e201	                              and edx, 1	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b8d	    0x8d0cd5000000	                        lea ecx, [rdx*8]	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b94	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b98	          0x83e2f7	                     and edx, 0xfffffff7	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b9b	             0x9ca	                             or edx, ecx	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000b9d	          0x88507b	               mov byte [rax + 0x7b], dl	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000ba0	        0x488b45f8	                mov rax, qword [rbp - 8]	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000ba4	          0x8b5010	            mov edx, dword [rax + 0x10] 	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000ba7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000bab	    0x89909c000000	             mov dword [rax + 0x9c], edx	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000bb1	        0x488b45f8	                mov rax, qword [rbp - 8]	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000bb5	          0x8b4008	                mov eax, dword [rax + 8]	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000bb8	          0x83f808	                              cmp eax, 8	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000bbb	            0x751e	                           jne 0x4000bdb	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000bbd	        0x488b45f8	                mov rax, qword [rbp - 8]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bc1	          0x8b500c	              mov edx, dword [rax + 0xc]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bc4	        0x488b45f8	                mov rax, qword [rbp - 8]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bc8	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bcc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bd0	          0x4889ce	                            mov rsi, rcx	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bd3	          0x4889c7	                            mov rdi, rax	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bd6	      0xe839f8ffff	               call sym.save_user_format	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000bdb	              0xc9	                                   leave	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000bdc	              0xc3	                                     ret	       184	pretty.c	WHILE_3	FUNCTION_7
parse_commit_header	WHILE,0:DO,0:CALL,2:functions,0:IF,3:FOR,2:SWITCH,0:ELSE,2	121
0x40020d7	              0x55	                                push rbp	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020d8	          0x4889e5	                            mov rbp, rsp	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020db	        0x4883ec30	                           sub rsp, 0x30	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020df	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020e3	    0x64488b042528	                mov rax, qword fs:[0x28]	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020ec	        0x488945f8	                mov qword [rbp - 8], rax	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020f0	            0x31c0	                            xor eax, eax	       791	pretty.c	WHILE_3	FUNCTION_28
0x40020f2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       792	pretty.c	WHILE_3	FUNCTION_28
0x40020f6	        0x488b4050	            mov rax, qword [rax + 0x50] 	       792	pretty.c	WHILE_3	FUNCTION_28
0x40020fa	        0x488945f0	             mov qword [rbp - 0x10], rax	       792	pretty.c	WHILE_3	FUNCTION_28
0x40020fe	    0xc745e0000000	               mov dword [rbp - 0x20], 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002105	      0xe926010000	                           jmp 0x4002230	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400210a	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400210d	          0x8945e4	             mov dword [rbp - 0x1c], eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002110	            0xeb04	                           jmp 0x4002116	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002112	        0x8345e401	               add dword [rbp - 0x1c], 1	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002116	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002119	          0x4863d0	                         movsxd rdx, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400211c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002120	          0x4801d0	                            add rax, rdx	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002123	           0xfb600	                   movzx eax, byte [rax]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002126	            0x84c0	                             test al, al	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002128	            0x7414	                            je 0x400213e	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400212a	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400212d	          0x4863d0	                         movsxd rdx, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002130	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002134	          0x4801d0	                            add rax, rdx	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002137	           0xfb600	                   movzx eax, byte [rax]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400213a	            0x3c0a	                             cmp al, 0xa	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400213c	            0x75d4	                           jne 0x4002112	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400213e	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x4002141	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x4002144	     0xf8400010000	                            je 0x400224a	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x400214a	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x400214d	          0x4863d0	                         movsxd rdx, eax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002150	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002154	        0x488d0c02	                    lea rcx, [rdx + rax]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002158	        0x488d45e8	                   lea rax, [rbp - 0x18]	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x400215c	          0x4889c2	                            mov rdx, rax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x400215f	      0xbe00000000	                              mov esi, 0	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002164	          0x4889cf	                            mov rdi, rcx	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002167	      0xe8d4deffff	                    call sym.skip_prefix	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x400216c	            0x85c0	                           test eax, eax	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x400216e	            0x7449	                            je 0x40021b9	       803	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2	CALL_1
0x4002170	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002174	          0x4889c2	                            mov rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002177	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x400217b	          0x4829c2	                            sub rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x400217e	          0x4889d0	                            mov rax, rdx	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002181	          0x4889c2	                            mov rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002184	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002188	    0x488990800000	             mov qword [rax + 0x80], rdx	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x400218f	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002192	          0x4863d0	                         movsxd rdx, eax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002195	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002199	          0x4801d0	                            add rax, rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x400219c	          0x4889c2	                            mov rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x400219f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021a3	          0x4829c2	                            sub rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021a6	          0x4889d0	                            mov rax, rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021a9	          0x4889c2	                            mov rdx, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021ac	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021b0	    0x488990880000	             mov qword [rax + 0x88], rdx	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021b7	            0xeb6d	                           jmp 0x4002226	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x40021b9	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021bc	          0x4863d0	                         movsxd rdx, eax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021bf	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021c3	        0x488d0c02	                    lea rcx, [rdx + rax]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021c7	        0x488d45e8	                   lea rax, [rbp - 0x18]	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021cb	          0x4889c2	                            mov rdx, rax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021ce	      0xbe00000000	                              mov esi, 0	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021d3	          0x4889cf	                            mov rdi, rcx	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021d6	      0xe865deffff	                    call sym.skip_prefix	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021db	            0x85c0	                           test eax, eax	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021dd	            0x7447	                            je 0x4002226	       806	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3	CALL_2
0x40021df	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021e3	          0x4889c2	                            mov rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021ea	          0x4829c2	                            sub rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021ed	          0x4889d0	                            mov rax, rdx	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021f0	          0x4889c2	                            mov rdx, rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021f3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021f7	    0x488990900000	             mov qword [rax + 0x90], rdx	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x40021fe	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002201	          0x4863d0	                         movsxd rdx, eax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002204	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002208	          0x4801d0	                            add rax, rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x400220b	          0x4889c2	                            mov rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x400220e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002212	          0x4829c2	                            sub rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002215	          0x4889d0	                            mov rax, rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002218	          0x4889c2	                            mov rdx, rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x400221b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x400221f	    0x488990980000	             mov qword [rax + 0x98], rdx	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002226	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       810	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002229	          0x8945e0	             mov dword [rbp - 0x20], eax	       810	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400222c	        0x8345e001	               add dword [rbp - 0x20], 1	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002230	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002233	          0x4863d0	                         movsxd rdx, eax	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002236	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400223a	          0x4801d0	                            add rax, rdx	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400223d	           0xfb600	                   movzx eax, byte [rax]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002240	            0x84c0	                             test al, al	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002242	     0xf85c2feffff	                           jne 0x400210a	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002248	            0xeb01	                           jmp 0x400224b	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400224a	              0x90	                                     nop	       802	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x400224b	          0x8b45e0	             mov eax, dword [rbp - 0x20]	       812	pretty.c	WHILE_3	FUNCTION_28
0x400224e	          0x4863d0	                         movsxd rdx, eax	       812	pretty.c	WHILE_3	FUNCTION_28
0x4002251	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       812	pretty.c	WHILE_3	FUNCTION_28
0x4002255	    0x488990a00000	             mov qword [rax + 0xa0], rdx	       812	pretty.c	WHILE_3	FUNCTION_28
0x400225c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       813	pretty.c	WHILE_3	FUNCTION_28
0x4002260	         0xfb65010	           movzx edx, byte [rax + 0x10] 	       813	pretty.c	WHILE_3	FUNCTION_28
0x4002264	          0x83ca01	                               or edx, 1	       813	pretty.c	WHILE_3	FUNCTION_28
0x4002267	          0x885010	               mov byte [rax + 0x10], dl	       813	pretty.c	WHILE_3	FUNCTION_28
0x400226a	              0x90	                                     nop	       814	pretty.c	WHILE_3	FUNCTION_28
0x400226b	        0x488b45f8	                mov rax, qword [rbp - 8]	       814	pretty.c	WHILE_3	FUNCTION_28
0x400226f	    0x644833042528	                xor rax, qword fs:[0x28]	       814	pretty.c	WHILE_3	FUNCTION_28
0x4002278	            0x7405	                            je 0x400227f	       814	pretty.c	WHILE_3	FUNCTION_28
0x400227a	      0xe800000000	                          call 0x400227f	       814	pretty.c	WHILE_3	FUNCTION_28
0x400227f	              0xc9	                                   leave	       814	pretty.c	WHILE_3	FUNCTION_28
0x4002280	              0xc3	                                     ret	       814	pretty.c	WHILE_3	FUNCTION_28
pp_commit_easy	WHILE,0:DO,0:CALL,1:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	29
0x4004d7e	              0x55	                                push rbp	      1867	pretty.c	FUNCTION_53
0x4004d7f	          0x4889e5	                            mov rbp, rsp	      1867	pretty.c	FUNCTION_53
0x4004d82	    0x4881ecd00000	                           sub rsp, 0xd0	      1867	pretty.c	FUNCTION_53
0x4004d89	    0x89bd4cffffff	             mov dword [rbp - 0xb4], edi	      1867	pretty.c	FUNCTION_53
0x4004d8f	    0x4889b540ffff	             mov qword [rbp - 0xc0], rsi	      1867	pretty.c	FUNCTION_53
0x4004d96	    0x48899538ffff	             mov qword [rbp - 0xc8], rdx	      1867	pretty.c	FUNCTION_53
0x4004d9d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1867	pretty.c	FUNCTION_53
0x4004da6	        0x488945f8	                mov qword [rbp - 8], rax	      1867	pretty.c	FUNCTION_53
0x4004daa	            0x31c0	                            xor eax, eax	      1867	pretty.c	FUNCTION_53
0x4004dac	    0x488d9550ffff	                   lea rdx, [rbp - 0xb0]	      1868	pretty.c	FUNCTION_53
0x4004db3	      0xb800000000	                              mov eax, 0	      1868	pretty.c	FUNCTION_53
0x4004db8	      0xb914000000	                           mov ecx, 0x14	      1868	pretty.c	FUNCTION_53
0x4004dbd	          0x4889d7	                            mov rdi, rdx	      1868	pretty.c	FUNCTION_53
0x4004dc0	          0xf348ab	              rep stosq qword [rdi], rax	      1868	pretty.c	FUNCTION_53
0x4004dc3	    0x8b854cffffff	             mov eax, dword [rbp - 0xb4]	      1869	pretty.c	FUNCTION_53
0x4004dc9	    0x898550ffffff	             mov dword [rbp - 0xb0], eax	      1869	pretty.c	FUNCTION_53
0x4004dcf	    0x488b9538ffff	             mov rdx, qword [rbp - 0xc8]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004dd6	    0x488b8d40ffff	             mov rcx, qword [rbp - 0xc0]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004ddd	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004de4	          0x4889ce	                            mov rsi, rcx	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004de7	          0x4889c7	                            mov rdi, rax	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004dea	      0xe800000000	                          call 0x4004def	      1870	pretty.c	FUNCTION_53	CALL_1
0x4004def	              0x90	                                     nop	      1871	pretty.c	FUNCTION_53
0x4004df0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1871	pretty.c	FUNCTION_53
0x4004df4	    0x644833042528	                xor rax, qword fs:[0x28]	      1871	pretty.c	FUNCTION_53
0x4004dfd	            0x7405	                            je 0x4004e04	      1871	pretty.c	FUNCTION_53
0x4004dff	      0xe800000000	                          call 0x4004e04	      1871	pretty.c	FUNCTION_53
0x4004e04	              0xc9	                                   leave	      1871	pretty.c	FUNCTION_53
0x4004e05	              0xc3	                                     ret	      1871	pretty.c	FUNCTION_53
is_blank_line	WHILE,1:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	32
0x40017c0	              0x55	                                push rbp	       515	pretty.c	WHILE_3	FUNCTION_20
0x40017c1	          0x4889e5	                            mov rbp, rsp	       515	pretty.c	WHILE_3	FUNCTION_20
0x40017c4	        0x48897de8	             mov qword [rbp - 0x18], rdi	       515	pretty.c	WHILE_3	FUNCTION_20
0x40017c8	        0x488975e0	             mov qword [rbp - 0x20], rsi	       515	pretty.c	WHILE_3	FUNCTION_20
0x40017cc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       516	pretty.c	WHILE_3	FUNCTION_20
0x40017d0	            0x8b00	                    mov eax, dword [rax]	       516	pretty.c	WHILE_3	FUNCTION_20
0x40017d2	          0x8945fc	                mov dword [rbp - 4], eax	       516	pretty.c	WHILE_3	FUNCTION_20
0x40017d5	            0xeb04	                           jmp 0x40017db	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017d7	        0x836dfc01	                  sub dword [rbp - 4], 1	       518	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017db	        0x837dfc00	                  cmp dword [rbp - 4], 0	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017df	            0x7429	                            je 0x400180a	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017e1	          0x8b45fc	                mov eax, dword [rbp - 4]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017e4	            0x4898	                                    cdqe	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017e6	        0x488d50ff	                      lea rdx, [rax - 1]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017ea	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017ee	          0x4801d0	                            add rax, rdx	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017f1	           0xfb600	                   movzx eax, byte [rax]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017f4	           0xfb6c0	                           movzx eax, al	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017f7	            0x4898	                                    cdqe	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x40017f9	     0xfb680000000	                   movzx eax, byte [rax]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x4001800	           0xfb6c0	                           movzx eax, al	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x4001803	          0x83e001	                              and eax, 1	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x4001806	            0x85c0	                           test eax, eax	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x4001808	            0x75cd	                           jne 0x40017d7	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1
0x400180a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       519	pretty.c	WHILE_3	FUNCTION_20
0x400180e	          0x8b55fc	                mov edx, dword [rbp - 4]	       519	pretty.c	WHILE_3	FUNCTION_20
0x4001811	            0x8910	                    mov dword [rax], edx	       519	pretty.c	WHILE_3	FUNCTION_20
0x4001813	        0x837dfc00	                  cmp dword [rbp - 4], 0	       520	pretty.c	WHILE_3	FUNCTION_20
0x4001817	           0xf94c0	                                 sete al	       520	pretty.c	WHILE_3	FUNCTION_20
0x400181a	           0xfb6c0	                           movzx eax, al	       520	pretty.c	WHILE_3	FUNCTION_20
0x400181d	              0x5d	                                 pop rbp	       521	pretty.c	WHILE_3	FUNCTION_20
0x400181e	              0xc3	                                     ret	       521	pretty.c	WHILE_3	FUNCTION_20
pretty_print_commit	WHILE,0:DO,0:CALL,17:functions,0:IF,11:FOR,1:SWITCH,0:ELSE,1	179
0x4004b0a	              0x55	                                push rbp	      1791	pretty.c	FUNCTION_52
0x4004b0b	          0x4889e5	                            mov rbp, rsp	      1791	pretty.c	FUNCTION_52
0x4004b0e	        0x4883ec60	                           sub rsp, 0x60	      1791	pretty.c	FUNCTION_52
0x4004b12	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1791	pretty.c	FUNCTION_52
0x4004b16	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1791	pretty.c	FUNCTION_52
0x4004b1a	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1791	pretty.c	FUNCTION_52
0x4004b1e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1791	pretty.c	FUNCTION_52
0x4004b27	        0x488945f8	                mov qword [rbp - 8], rax	      1791	pretty.c	FUNCTION_52
0x4004b2b	            0x31c0	                            xor eax, eax	      1791	pretty.c	FUNCTION_52
0x4004b2d	    0xc745c4040000	               mov dword [rbp - 0x3c], 4	      1793	pretty.c	FUNCTION_52
0x4004b34	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1797	pretty.c	FUNCTION_52
0x4004b38	          0x8b403c	            mov eax, dword [rax + 0x3c] 	      1797	pretty.c	FUNCTION_52
0x4004b3b	          0x8945c8	             mov dword [rbp - 0x38], eax	      1797	pretty.c	FUNCTION_52
0x4004b3e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1799	pretty.c	FUNCTION_52	IF_1
0x4004b42	            0x8b00	                    mov eax, dword [rax]	      1799	pretty.c	FUNCTION_52	IF_1
0x4004b44	          0x83f808	                              cmp eax, 8	      1799	pretty.c	FUNCTION_52	IF_1
0x4004b47	            0x7520	                           jne 0x4004b69	      1799	pretty.c	FUNCTION_52	IF_1
0x4004b49	    0x488b35000000	            mov rsi, qword [0x04004b50] 	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b50	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b54	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b58	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b5c	          0x4889c7	                            mov rdi, rax	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b5f	      0xe800000000	                          call 0x4004b64	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b64	      0xe9ff010000	                           jmp 0x4004d68	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4004b69	      0xe800000000	                          call 0x4004b6e	      1804	pretty.c	FUNCTION_52	CALL_2
0x4004b6e	        0x488945e0	             mov qword [rbp - 0x20], rax	      1804	pretty.c	FUNCTION_52	CALL_2
0x4004b72	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b76	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b7a	      0xbe00000000	                              mov esi, 0	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b7f	          0x4889c7	                            mov rdi, rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b82	      0xe800000000	                          call 0x4004b87	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b87	        0x488945e8	             mov qword [rbp - 0x18], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b8b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b8f	        0x488945d8	             mov qword [rbp - 0x28], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x4004b93	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004b97	            0x8b00	                    mov eax, dword [rax]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004b99	          0x83f805	                              cmp eax, 5	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004b9c	            0x7411	                            je 0x4004baf	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004b9e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004ba2	            0x8b00	                    mov eax, dword [rax]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004ba4	            0x89c7	                            mov edi, eax	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004ba6	      0xe8e1b7ffff	               call sym.cmit_fmt_is_mail	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004bab	            0x85c0	                           test eax, eax	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004bad	            0x7407	                            je 0x4004bb6	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x4004baf	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x4004bb6	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bba	            0x8b00	                    mov eax, dword [rax]	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bbc	            0x89c7	                            mov edi, eax	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bbe	      0xe8c9b7ffff	               call sym.cmit_fmt_is_mail	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bc3	            0x85c0	                           test eax, eax	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bc5	            0x7478	                            je 0x4004c3f	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bc7	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bcb	            0x7572	                           jne 0x4004c3f	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x4004bcd	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004bd4	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004bd7	          0x8945d0	             mov dword [rbp - 0x30], eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004bda	            0xeb48	                           jmp 0x4004c24	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004bdc	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x4004be0	            0x7527	                           jne 0x4004c09	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x4004be2	        0x837dd40a	            cmp dword [rbp - 0x2c], 0xa 	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004be6	            0x7538	                           jne 0x4004c20	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004be8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bec	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bef	          0x4863d2	                         movsxd rdx, edx	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bf2	        0x4883c201	                              add rdx, 1	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bf6	          0x4801d0	                            add rax, rdx	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bf9	           0xfb600	                   movzx eax, byte [rax]	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bfc	            0x3c0a	                             cmp al, 0xa	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004bfe	            0x7520	                           jne 0x4004c20	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004c00	    0xc745d0010000	               mov dword [rbp - 0x30], 1	      1824	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004c07	            0xeb17	                           jmp 0x4004c20	      1824	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4004c09	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4004c0c	            0x89c7	                            mov edi, eax	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4004c0e	      0xe806c0ffff	                      call sym.non_ascii	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4004c13	            0x85c0	                           test eax, eax	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4004c15	            0x7409	                            je 0x4004c20	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4004c17	    0xc745c8010000	               mov dword [rbp - 0x38], 1	      1827	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6
0x4004c1e	            0xeb1f	                           jmp 0x4004c3f	      1828	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6
0x4004c20	        0x8345cc01	               add dword [rbp - 0x34], 1	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c24	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c28	          0x8b45cc	             mov eax, dword [rbp - 0x34]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c2b	            0x4898	                                    cdqe	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c2d	          0x4801d0	                            add rax, rdx	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c30	           0xfb600	                   movzx eax, byte [rax]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c33	           0xfbec0	                           movsx eax, al	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c36	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c39	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c3d	            0x759d	                           jne 0x4004bdc	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4004c3f	        0x488b7da8	             mov rdi, qword [rbp - 0x58]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c43	        0x488d4dd8	                   lea rcx, [rbp - 0x28]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c47	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c4b	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c4f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c53	          0x4989f8	                             mov r8, rdi	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c56	          0x4889c7	                            mov rdi, rax	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c59	      0xe8fdf5ffff	                      call sym.pp_header	      1833	pretty.c	FUNCTION_52	CALL_7
0x4004c5e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c62	            0x8b00	                    mov eax, dword [rax]	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c64	          0x83f805	                              cmp eax, 5	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c67	            0x741c	                            je 0x4004c85	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c69	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c6d	          0x8b4034	            mov eax, dword [rax + 0x34] 	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c70	            0x85c0	                           test eax, eax	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c72	            0x7511	                           jne 0x4004c85	      1834	pretty.c	FUNCTION_52	IF_7
0x4004c74	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4004c78	      0xbe0a000000	                            mov esi, 0xa	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4004c7d	          0x4889c7	                            mov rdi, rax	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4004c80	      0xe8c7b5ffff	                   call sym.strbuf_addch	      1835	pretty.c	FUNCTION_52	IF_7	CALL_8
0x4004c85	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1839	pretty.c	FUNCTION_52	CALL_9
0x4004c89	          0x4889c7	                            mov rdi, rax	      1839	pretty.c	FUNCTION_52	CALL_9
0x4004c8c	      0xe800000000	                          call 0x4004c91	      1839	pretty.c	FUNCTION_52	CALL_9
0x4004c91	        0x488945d8	             mov qword [rbp - 0x28], rax	      1839	pretty.c	FUNCTION_52	CALL_9
0x4004c95	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004c99	            0x8b00	                    mov eax, dword [rax]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004c9b	          0x83f805	                              cmp eax, 5	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004c9e	            0x7411	                            je 0x4004cb1	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004ca0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004ca4	            0x8b00	                    mov eax, dword [rax]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004ca6	            0x89c7	                            mov edi, eax	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004ca8	      0xe8dfb6ffff	               call sym.cmit_fmt_is_mail	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004cad	            0x85c0	                           test eax, eax	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004caf	            0x741e	                            je 0x4004ccf	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4004cb1	          0x8b7dc8	             mov edi, dword [rbp - 0x38]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cb4	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cb8	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cbc	        0x488d75d8	                   lea rsi, [rbp - 0x28]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cc0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cc4	          0x4189f8	                            mov r8d, edi	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cc7	          0x4889c7	                            mov rdi, rax	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004cca	      0xe800000000	                          call 0x4004ccf	      1843	pretty.c	FUNCTION_52	CALL_11
0x4004ccf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1845	pretty.c	FUNCTION_52
0x4004cd3	        0x488b4008	                mov rax, qword [rax + 8]	      1845	pretty.c	FUNCTION_52
0x4004cd7	        0x488945f0	             mov qword [rbp - 0x10], rax	      1845	pretty.c	FUNCTION_52
0x4004cdb	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1846	pretty.c	FUNCTION_52	IF_9
0x4004cdf	            0x8b00	                    mov eax, dword [rax]	      1846	pretty.c	FUNCTION_52	IF_9
0x4004ce1	          0x83f805	                              cmp eax, 5	      1846	pretty.c	FUNCTION_52	IF_9
0x4004ce4	            0x7417	                            je 0x4004cfd	      1846	pretty.c	FUNCTION_52	IF_9
0x4004ce6	          0x8b4dc4	             mov ecx, dword [rbp - 0x3c]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004ce9	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004ced	        0x488d75d8	                   lea rsi, [rbp - 0x28]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004cf1	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004cf5	          0x4889c7	                            mov rdi, rax	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004cf8	      0xe800000000	                          call 0x4004cfd	      1847	pretty.c	FUNCTION_52	CALL_12
0x4004cfd	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1848	pretty.c	FUNCTION_52	CALL_13
0x4004d01	          0x4889c7	                            mov rdi, rax	      1848	pretty.c	FUNCTION_52	CALL_13
0x4004d04	      0xe800000000	                          call 0x4004d09	      1848	pretty.c	FUNCTION_52	CALL_13
0x4004d09	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1851	pretty.c	FUNCTION_52	IF_10
0x4004d0d	            0x8b00	                    mov eax, dword [rax]	      1851	pretty.c	FUNCTION_52	IF_10
0x4004d0f	          0x83f805	                              cmp eax, 5	      1851	pretty.c	FUNCTION_52	IF_10
0x4004d12	            0x7411	                            je 0x4004d25	      1851	pretty.c	FUNCTION_52	IF_10
0x4004d14	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1852	pretty.c	FUNCTION_52	CALL_14
0x4004d18	      0xbe0a000000	                            mov esi, 0xa	      1852	pretty.c	FUNCTION_52	CALL_14
0x4004d1d	          0x4889c7	                            mov rdi, rax	      1852	pretty.c	FUNCTION_52	CALL_14
0x4004d20	      0xe827b5ffff	                   call sym.strbuf_addch	      1852	pretty.c	FUNCTION_52	CALL_14
0x4004d25	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d29	            0x8b00	                    mov eax, dword [rax]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d2b	            0x89c7	                            mov edi, eax	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d2d	      0xe85ab6ffff	               call sym.cmit_fmt_is_mail	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d32	            0x85c0	                           test eax, eax	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d34	            0x741f	                            je 0x4004d55	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d36	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d3a	        0x488b4008	                mov rax, qword [rax + 8]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d3e	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d42	            0x7711	                            ja 0x4004d55	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4004d44	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1860	pretty.c	FUNCTION_52	CALL_16
0x4004d48	      0xbe0a000000	                            mov esi, 0xa	      1860	pretty.c	FUNCTION_52	CALL_16
0x4004d4d	          0x4889c7	                            mov rdi, rax	      1860	pretty.c	FUNCTION_52	CALL_16
0x4004d50	      0xe8f7b4ffff	                   call sym.strbuf_addch	      1860	pretty.c	FUNCTION_52	CALL_16
0x4004d55	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1862	pretty.c	FUNCTION_52	CALL_17
0x4004d59	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1862	pretty.c	FUNCTION_52	CALL_17
0x4004d5d	          0x4889d6	                            mov rsi, rdx	      1862	pretty.c	FUNCTION_52	CALL_17
0x4004d60	          0x4889c7	                            mov rdi, rax	      1862	pretty.c	FUNCTION_52	CALL_17
0x4004d63	      0xe800000000	                          call 0x4004d68	      1862	pretty.c	FUNCTION_52	CALL_17
0x4004d68	        0x488b45f8	                mov rax, qword [rbp - 8]	      1863	pretty.c	FUNCTION_52
0x4004d6c	    0x644833042528	                xor rax, qword fs:[0x28]	      1863	pretty.c	FUNCTION_52
0x4004d75	            0x7405	                            je 0x4004d7c	      1863	pretty.c	FUNCTION_52
0x4004d77	      0xe800000000	                          call 0x4004d7c	      1863	pretty.c	FUNCTION_52
0x4004d7c	              0xc9	                                   leave	      1863	pretty.c	FUNCTION_52
0x4004d7d	              0xc3	                                     ret	      1863	pretty.c	FUNCTION_52
parse_commit_message	WHILE,0:DO,0:CALL,3:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	48
0x40024ef	              0x55	                                push rbp	       875	pretty.c	WHILE_3	FUNCTION_32
0x40024f0	          0x4889e5	                            mov rbp, rsp	       875	pretty.c	WHILE_3	FUNCTION_32
0x40024f3	        0x4883ec20	                           sub rsp, 0x20	       875	pretty.c	WHILE_3	FUNCTION_32
0x40024f7	        0x48897de8	             mov qword [rbp - 0x18], rdi	       875	pretty.c	WHILE_3	FUNCTION_32
0x40024fb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       876	pretty.c	WHILE_3	FUNCTION_32
0x40024ff	        0x488b5050	            mov rdx, qword [rax + 0x50] 	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002503	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002507	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	       876	pretty.c	WHILE_3	FUNCTION_32
0x400250e	          0x4801d0	                            add rax, rdx	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002511	        0x488945f0	             mov qword [rbp - 0x10], rax	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002515	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       877	pretty.c	WHILE_3	FUNCTION_32
0x4002519	        0x488b4050	            mov rax, qword [rax + 0x50] 	       877	pretty.c	WHILE_3	FUNCTION_32
0x400251d	        0x488945f8	                mov qword [rbp - 8], rax	       877	pretty.c	WHILE_3	FUNCTION_32
0x4002521	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x4002525	          0x4889c7	                            mov rdi, rax	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x4002528	      0xe800000000	                          call 0x400252d	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x400252d	        0x488945f0	             mov qword [rbp - 0x10], rax	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x4002531	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       880	pretty.c	WHILE_3	FUNCTION_32
0x4002535	        0x488b45f8	                mov rax, qword [rbp - 8]	       880	pretty.c	WHILE_3	FUNCTION_32
0x4002539	          0x4829c2	                            sub rdx, rax	       880	pretty.c	WHILE_3	FUNCTION_32
0x400253c	          0x4889d0	                            mov rax, rdx	       880	pretty.c	WHILE_3	FUNCTION_32
0x400253f	          0x4889c2	                            mov rdx, rax	       880	pretty.c	WHILE_3	FUNCTION_32
0x4002542	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       880	pretty.c	WHILE_3	FUNCTION_32
0x4002546	    0x488990a80000	             mov qword [rax + 0xa8], rdx	       880	pretty.c	WHILE_3	FUNCTION_32
0x400254d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002551	      0xba00000000	                              mov edx, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002556	          0x4889c6	                            mov rsi, rax	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002559	      0xbf00000000	                              mov edi, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x400255e	      0xe800000000	                          call 0x4002563	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002563	        0x488945f0	             mov qword [rbp - 0x10], rax	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002567	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x400256b	          0x4889c7	                            mov rdi, rax	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x400256e	      0xe800000000	                          call 0x4002573	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x4002573	        0x488945f0	             mov qword [rbp - 0x10], rax	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x4002577	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       884	pretty.c	WHILE_3	FUNCTION_32
0x400257b	        0x488b45f8	                mov rax, qword [rbp - 8]	       884	pretty.c	WHILE_3	FUNCTION_32
0x400257f	          0x4829c2	                            sub rdx, rax	       884	pretty.c	WHILE_3	FUNCTION_32
0x4002582	          0x4889d0	                            mov rax, rdx	       884	pretty.c	WHILE_3	FUNCTION_32
0x4002585	          0x4889c2	                            mov rdx, rax	       884	pretty.c	WHILE_3	FUNCTION_32
0x4002588	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       884	pretty.c	WHILE_3	FUNCTION_32
0x400258c	    0x488990b00000	             mov qword [rax + 0xb0], rdx	       884	pretty.c	WHILE_3	FUNCTION_32
0x4002593	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       886	pretty.c	WHILE_3	FUNCTION_32
0x4002597	         0xfb65010	           movzx edx, byte [rax + 0x10] 	       886	pretty.c	WHILE_3	FUNCTION_32
0x400259b	          0x83ca02	                               or edx, 2	       886	pretty.c	WHILE_3	FUNCTION_32
0x400259e	          0x885010	               mov byte [rax + 0x10], dl	       886	pretty.c	WHILE_3	FUNCTION_32
0x40025a1	              0x90	                                     nop	       887	pretty.c	WHILE_3	FUNCTION_32
0x40025a2	              0xc9	                                   leave	       887	pretty.c	WHILE_3	FUNCTION_32
0x40025a3	              0xc3	                                     ret	       887	pretty.c	WHILE_3	FUNCTION_32
find_commit_format	WHILE,0:DO,0:CALL,2:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	16
0x4000a3e	              0x55	                                push rbp	       147	pretty.c	WHILE_3	FUNCTION_6
0x4000a3f	          0x4889e5	                            mov rbp, rsp	       147	pretty.c	WHILE_3	FUNCTION_6
0x4000a42	        0x4883ec10	                           sub rsp, 0x10	       147	pretty.c	WHILE_3	FUNCTION_6
0x4000a46	        0x48897df8	                mov qword [rbp - 8], rdi	       147	pretty.c	WHILE_3	FUNCTION_6
0x4000a4a	    0x488b05000000	            mov rax, qword [0x04000a51] 	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0x4000a51	          0x4885c0	                           test rax, rax	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0x4000a54	            0x7505	                           jne 0x4000a5b	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0x4000a56	      0xe8e4fcffff	           call sym.setup_commit_formats	       149	pretty.c	WHILE_3	FUNCTION_6	CALL_1
0x4000a5b	        0x488b4df8	                mov rcx, qword [rbp - 8]	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a5f	        0x488b45f8	                mov rax, qword [rbp - 8]	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a63	      0xba00000000	                              mov edx, 0	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a68	          0x4889ce	                            mov rsi, rcx	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a6b	          0x4889c7	                            mov rdi, rax	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a6e	      0xe8a0feffff	   call sym.find_commit_format_recursive	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000a73	              0xc9	                                   leave	       152	pretty.c	WHILE_3	FUNCTION_6
0x4000a74	              0xc3	                                     ret	       152	pretty.c	WHILE_3	FUNCTION_6
pp_user_info	WHILE,0:DO,0:CALL,31:functions,0:IF,8:FOR,0:SWITCH,1:ELSE,3	326
0x40011fe	              0x55	                                push rbp	       428	pretty.c	WHILE_3	FUNCTION_19
0x40011ff	          0x4889e5	                            mov rbp, rsp	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001202	              0x53	                                push rbx	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001203	    0x4881ecd80000	                           sub rsp, 0xd8	       428	pretty.c	WHILE_3	FUNCTION_19
0x400120a	    0x4889bd48ffff	             mov qword [rbp - 0xb8], rdi	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001211	    0x4889b540ffff	             mov qword [rbp - 0xc0], rsi	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001218	    0x48899538ffff	             mov qword [rbp - 0xc8], rdx	       428	pretty.c	WHILE_3	FUNCTION_19
0x400121f	    0x48898d30ffff	             mov qword [rbp - 0xd0], rcx	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001226	    0x4c898528ffff	              mov qword [rbp - 0xd8], r8	       428	pretty.c	WHILE_3	FUNCTION_19
0x400122d	    0x64488b042528	                mov rax, qword fs:[0x28]	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001236	        0x488945e8	             mov qword [rbp - 0x18], rax	       428	pretty.c	WHILE_3	FUNCTION_19
0x400123a	            0x31c0	                            xor eax, eax	       428	pretty.c	WHILE_3	FUNCTION_19
0x400123c	    0xc78554ffffff	           mov dword [rbp - 0xac], 0x4e 	       433	pretty.c	WHILE_3	FUNCTION_19
0x4001246	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x400124d	            0x8b00	                    mov eax, dword [rax]	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x400124f	          0x83f805	                              cmp eax, 5	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x4001252	     0xf8447050000	                            je 0x400179f	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x4001258	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       438	pretty.c	WHILE_3	FUNCTION_19
0x400125f	      0xbe0a000000	                            mov esi, 0xa	       438	pretty.c	WHILE_3	FUNCTION_19
0x4001264	          0x4889c7	                            mov rdi, rax	       438	pretty.c	WHILE_3	FUNCTION_19
0x4001267	      0xe800000000	                          call 0x400126c	       438	pretty.c	WHILE_3	FUNCTION_19
0x400126c	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       438	pretty.c	WHILE_3	FUNCTION_19
0x4001273	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x400127a	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001281	          0x4829c2	                            sub rdx, rax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001284	          0x4889d0	                            mov rax, rdx	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001287	            0x89c2	                            mov edx, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001289	    0x488b8d30ffff	             mov rcx, qword [rbp - 0xd0]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001290	        0x488d45a0	                   lea rax, [rbp - 0x60]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001294	          0x4889ce	                            mov rsi, rcx	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x4001297	          0x4889c7	                            mov rdi, rax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x400129a	      0xe800000000	                          call 0x400129f	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x400129f	            0x85c0	                           test eax, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x40012a1	     0xf85fb040000	                           jne 0x40017a2	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_1
0x40012a7	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       442	pretty.c	WHILE_3	FUNCTION_19
0x40012ab	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       442	pretty.c	WHILE_3	FUNCTION_19
0x40012b2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012b6	          0x4889c2	                            mov rdx, rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012b9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012bd	          0x4829c2	                            sub rdx, rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012c0	          0x4889d0	                            mov rax, rdx	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012c3	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x40012ca	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       444	pretty.c	WHILE_3	FUNCTION_19
0x40012ce	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       444	pretty.c	WHILE_3	FUNCTION_19
0x40012d5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012d9	          0x4889c2	                            mov rdx, rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012dc	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012e0	          0x4829c2	                            sub rdx, rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012e3	          0x4889d0	                            mov rax, rdx	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012e6	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x40012ed	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x40012f4	        0x488b4060	            mov rax, qword [rax + 0x60] 	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x40012f8	          0x4885c0	                           test rax, rax	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x40012fb	            0x7432	                            je 0x400132f	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x40012fd	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x4001304	        0x488b4060	            mov rax, qword [rax + 0x60] 	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x4001308	    0x488dbd68ffff	                   lea rdi, [rbp - 0x98]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x400130f	    0x488d8d60ffff	                   lea rcx, [rbp - 0xa0]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x4001316	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x400131d	    0x488db558ffff	                   lea rsi, [rbp - 0xa8]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x4001324	          0x4989f8	                             mov r8, rdi	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x4001327	          0x4889c7	                            mov rdi, rax	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x400132a	      0xe800000000	                          call 0x400132f	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_2
0x400132f	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x4001336	            0x8b00	                    mov eax, dword [rax]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x4001338	            0x89c7	                            mov edi, eax	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x400133a	      0xe84df0ffff	               call sym.cmit_fmt_is_mail	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x400133f	            0x85c0	                           test eax, eax	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x4001341	     0xf8405030000	                            je 0x400164c	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_3
0x4001347	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x400134e	        0x488b4070	            mov rax, qword [rax + 0x70] 	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001352	          0x4885c0	                           test rax, rax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001355	     0xf8448010000	                            je 0x40014a3	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x400135b	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001362	        0x488b4070	            mov rax, qword [rax + 0x70] 	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001366	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x400136a	          0x4889d6	                            mov rsi, rdx	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x400136d	          0x4889c7	                            mov rdi, rax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001370	      0xe800000000	                          call 0x4001375	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001375	            0x85c0	                           test eax, eax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x4001377	     0xf8426010000	                            je 0x40014a3	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_4
0x400137d	    0x48c745800000	               mov qword [rbp - 0x80], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001385	    0x48c745880000	               mov qword [rbp - 0x78], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400138d	    0x48c745900000	               mov qword [rbp - 0x70], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001395	        0x488d4580	                   lea rax, [rbp - 0x80]	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x4001399	      0xbe00000000	                              mov esi, 0	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x400139e	          0x4889c7	                            mov rdi, rax	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x40013a1	      0xe814efffff	                  call sym.strbuf_addstr	       454	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x40013a6	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013ad	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013b4	        0x488d4580	                   lea rax, [rbp - 0x80]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013b8	          0x4889ce	                            mov rsi, rcx	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013bb	          0x4889c7	                            mov rdi, rax	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013be	      0xe800000000	                          call 0x40013c3	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_6
0x40013c3	        0x488d4580	                   lea rax, [rbp - 0x80]	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40013c7	      0xbe00000000	                              mov esi, 0	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40013cc	          0x4889c7	                            mov rdi, rax	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40013cf	      0xe8e6eeffff	                  call sym.strbuf_addstr	       456	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40013d4	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013db	    0x488b8d58ffff	             mov rcx, qword [rbp - 0xa8]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013e2	        0x488d4580	                   lea rax, [rbp - 0x80]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013e6	          0x4889ce	                            mov rsi, rcx	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013e9	          0x4889c7	                            mov rdi, rax	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013ec	      0xe800000000	                          call 0x40013f1	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_8
0x40013f1	        0x488d4580	                   lea rax, [rbp - 0x80]	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40013f5	      0xbe00000000	                              mov esi, 0	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40013fa	          0x4889c7	                            mov rdi, rax	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40013fd	      0xe8b8eeffff	                  call sym.strbuf_addstr	       458	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x4001402	        0x488d4580	                   lea rax, [rbp - 0x80]	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x4001406	      0xbe00000000	                              mov esi, 0	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x400140b	          0x4889c7	                            mov rdi, rax	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x400140e	      0xe800000000	                          call 0x4001413	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x4001413	          0x4889c2	                            mov rdx, rax	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x4001416	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x400141d	        0x4883c078	                           add rax, 0x78	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x4001421	          0x4889d6	                            mov rsi, rdx	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x4001424	          0x4889c7	                            mov rdi, rax	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x4001427	      0xe800000000	                          call 0x400142c	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_10
0x400142c	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001433	        0x488b4070	            mov rax, qword [rax + 0x70] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001437	        0x488b4010	            mov rax, qword [rax + 0x10] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400143b	    0x48898558ffff	             mov qword [rbp - 0xa8], rax	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001442	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001449	        0x488b4070	            mov rax, qword [rax + 0x70] 	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400144d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001451	          0x4889c2	                            mov rdx, rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001454	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400145b	          0x4829c2	                            sub rdx, rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400145e	          0x4889d0	                            mov rax, rdx	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001461	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001468	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400146f	        0x488b4070	            mov rax, qword [rax + 0x70] 	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001473	          0x488b00	                    mov rax, qword [rax]	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001476	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400147d	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001484	        0x488b4070	            mov rax, qword [rax + 0x70] 	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001488	        0x488b4008	                mov rax, qword [rax + 8]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400148c	          0x4889c2	                            mov rdx, rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400148f	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001496	          0x4829c2	                            sub rdx, rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001499	          0x4889d0	                            mov rax, rdx	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400149c	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x40014a3	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_12
0x40014aa	      0xbe00000000	                              mov esi, 0	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_12
0x40014af	          0x4889c7	                            mov rdi, rax	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_12
0x40014b2	      0xe803eeffff	                  call sym.strbuf_addstr	       468	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_12
0x40014b7	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014be	            0x89c1	                            mov ecx, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014c0	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014c7	      0xba01000000	                              mov edx, 1	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014cc	            0x89ce	                            mov esi, ecx	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014ce	          0x4889c7	                            mov rdi, rax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014d1	      0xe8f9f9ffff	         call sym.needs_rfc2047_encoding	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014d6	            0x85c0	                           test eax, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014d8	            0x7439	                            je 0x4001513	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_13
0x40014da	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014e1	    0x488bb560ffff	             mov rsi, qword [rbp - 0xa0]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014e8	    0x488b8d28ffff	             mov rcx, qword [rbp - 0xd8]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014ef	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014f6	    0x41b801000000	                              mov r8d, 1	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014fc	          0x4889c7	                            mov rdi, rax	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x40014ff	      0xe859faffff	                    call sym.add_rfc2047	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001504	    0xc78554ffffff	           mov dword [rbp - 0xac], 0x4c 	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x400150e	      0xe9c7000000	                           jmp 0x40015da	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x4001513	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x400151a	            0x89c2	                            mov edx, eax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x400151c	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x4001523	            0x89d6	                            mov esi, edx	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x4001525	          0x4889c7	                            mov rdi, rax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x4001528	      0xe891f7ffff	           call sym.needs_rfc822_quoting	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x400152d	            0x85c0	                           test eax, eax	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x400152f	            0x7474	                            je 0x40015a5	       473	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_15
0x4001531	    0x48c745800000	               mov qword [rbp - 0x80], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x4001539	    0x48c745880000	               mov qword [rbp - 0x78], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x4001541	    0x48c745900000	               mov qword [rbp - 0x70], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x4001549	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001550	            0x89c2	                            mov edx, eax	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001552	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001559	        0x488d4580	                   lea rax, [rbp - 0x80]	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x400155d	          0x4889ce	                            mov rsi, rcx	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001560	          0x4889c7	                            mov rdi, rax	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001563	      0xe8f8f7ffff	              call sym.add_rfc822_quoted	       475	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_16
0x4001568	        0x488b4588	             mov rax, qword [rbp - 0x78]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x400156c	            0x89c7	                            mov edi, eax	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x400156e	        0x488b7590	             mov rsi, qword [rbp - 0x70]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001572	    0x8b9554ffffff	             mov edx, dword [rbp - 0xac]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001578	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x400157f	          0x4189d1	                            mov r9d, edx	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001582	    0x41b801000000	                              mov r8d, 1	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001588	      0xb9faffffff	                     mov ecx, 0xfffffffa	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x400158d	            0x89fa	                            mov edx, edi	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x400158f	          0x4889c7	                            mov rdi, rax	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001592	      0xe800000000	                          call 0x4001597	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_17
0x4001597	        0x488d4580	                   lea rax, [rbp - 0x80]	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x400159b	          0x4889c7	                            mov rdi, rax	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x400159e	      0xe800000000	                          call 0x40015a3	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x40015a3	            0xeb35	                           jmp 0x40015da	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x40015a5	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015ac	            0x89c7	                            mov edi, eax	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015ae	    0x488bb560ffff	             mov rsi, qword [rbp - 0xa0]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015b5	    0x8b9554ffffff	             mov edx, dword [rbp - 0xac]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015bb	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015c2	          0x4189d1	                            mov r9d, edx	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015c5	    0x41b801000000	                              mov r8d, 1	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015cb	      0xb9faffffff	                     mov ecx, 0xfffffffa	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015d0	            0x89fa	                            mov edx, edi	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015d2	          0x4889c7	                            mov rdi, rax	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015d5	      0xe800000000	                          call 0x40015da	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_19
0x40015da	    0x8b8554ffffff	             mov eax, dword [rbp - 0xac]	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x40015e0	          0x4863d8	                         movsxd rbx, eax	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x40015e3	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015ea	          0x4889c7	                            mov rdi, rax	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015ed	      0xe81cf7ffff	               call sym.last_line_length	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015f2	          0x4863d0	                         movsxd rdx, eax	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015f5	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015fc	          0x4801d0	                            add rax, rdx	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x40015ff	        0x4883c003	                              add rax, 3	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_22
0x4001603	          0x4839c3	                            cmp rbx, rax	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x4001606	            0x7314	                           jae 0x400161c	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x4001608	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_23
0x400160f	      0xbe0a000000	                            mov esi, 0xa	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_23
0x4001614	          0x4889c7	                            mov rdi, rax	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_23
0x4001617	      0xe830ecffff	                   call sym.strbuf_addch	       486	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_23
0x400161c	    0x488b9558ffff	             mov rdx, qword [rbp - 0xa8]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001623	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x400162a	            0x89c6	                            mov esi, eax	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x400162c	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001633	          0x4889d1	                            mov rcx, rdx	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001636	            0x89f2	                            mov edx, esi	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001638	      0xbe00000000	                              mov esi, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x400163d	          0x4889c7	                            mov rdi, rax	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001640	      0xb800000000	                              mov eax, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x4001645	      0xe800000000	                          call 0x400164a	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x400164a	            0xeb70	                           jmp 0x40016bc	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_24
0x400164c	    0x488bb558ffff	             mov rsi, qword [rbp - 0xa8]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001653	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400165a	          0x4189c0	                            mov r8d, eax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400165d	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001664	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400166b	          0x4189c1	                            mov r9d, eax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400166e	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       490	pretty.c	WHILE_3	FUNCTION_19	ELSE_3
0x4001675	            0x8b00	                    mov eax, dword [rax]	       490	pretty.c	WHILE_3	FUNCTION_19	ELSE_3
0x4001677	          0x83f804	                              cmp eax, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400167a	            0x7507	                           jne 0x4001683	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400167c	      0xbf04000000	                              mov edi, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001681	            0xeb05	                           jmp 0x4001688	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001683	      0xbf00000000	                              mov edi, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001688	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400168f	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x4001696	        0x4883ec08	                              sub rsp, 8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400169a	              0x56	                                push rsi	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400169b	            0x4150	                                 push r8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400169d	              0x51	                                push rcx	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x400169e	    0x41b800000000	                              mov r8d, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016a4	            0x89f9	                            mov ecx, edi	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016a6	      0xbe00000000	                              mov esi, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016ab	          0x4889c7	                            mov rdi, rax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016ae	      0xb800000000	                              mov eax, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016b3	      0xe800000000	                          call 0x40016b8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016b8	        0x4883c420	                           add rsp, 0x20	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_25
0x40016bc	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016c3	            0x8b00	                    mov eax, dword [rax]	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016c5	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016c8	     0xf8492000000	                            je 0x4001760	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016ce	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016d1	            0x770a	                            ja 0x40016dd	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016d3	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016d6	            0x7413	                            je 0x40016eb	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016d8	      0xe9c8000000	                           jmp 0x40017a5	       510	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016dd	          0x83e806	                              sub eax, 6	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016e0	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016e3	     0xf87bc000000	                            ja 0x40017a5	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016e9	            0xeb3b	                           jmp 0x4001726	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40016eb	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       497	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x40016f2	        0x488d5018	                   lea rdx, [rax + 0x18]	       497	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x40016f6	        0x488d45a0	                   lea rax, [rbp - 0x60]	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x40016fa	          0x4889d6	                            mov rsi, rdx	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x40016fd	          0x4889c7	                            mov rdi, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001700	      0xe800000000	                          call 0x4001705	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001705	          0x4889c2	                            mov rdx, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001708	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x400170f	      0xbe00000000	                              mov esi, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001714	          0x4889c7	                            mov rdi, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001717	      0xb800000000	                              mov eax, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x400171c	      0xe800000000	                          call 0x4001721	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_26
0x4001721	      0xe980000000	                           jmp 0x40017a6	       498	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001726	      0xbf05000000	                              mov edi, 5	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x400172b	      0xe800000000	                          call 0x4001730	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001730	          0x4889c2	                            mov rdx, rax	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001733	        0x488d45a0	                   lea rax, [rbp - 0x60]	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001737	          0x4889d6	                            mov rsi, rdx	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x400173a	          0x4889c7	                            mov rdi, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x400173d	      0xe800000000	                          call 0x4001742	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001742	          0x4889c2	                            mov rdx, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001745	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x400174c	      0xbe00000000	                              mov esi, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001751	          0x4889c7	                            mov rdi, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001754	      0xb800000000	                              mov eax, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001759	      0xe800000000	                          call 0x400175e	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x400175e	            0xeb46	                           jmp 0x40017a6	       503	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001760	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       506	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x4001767	        0x488d5018	                   lea rdx, [rax + 0x18]	       506	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x400176b	        0x488d45a0	                   lea rax, [rbp - 0x60]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x400176f	          0x4889d6	                            mov rsi, rdx	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001772	          0x4889c7	                            mov rdi, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001775	      0xe800000000	                          call 0x400177a	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x400177a	          0x4889c1	                            mov rcx, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x400177d	    0x488b9540ffff	             mov rdx, qword [rbp - 0xc0]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001784	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x400178b	      0xbe00000000	                              mov esi, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001790	          0x4889c7	                            mov rdi, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001793	      0xb800000000	                              mov eax, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x4001798	      0xe800000000	                          call 0x400179d	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_30
0x400179d	            0xeb07	                           jmp 0x40017a6	       507	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x400179f	              0x90	                                     nop	       436	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40017a0	            0xeb04	                           jmp 0x40017a6	       436	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40017a2	              0x90	                                     nop	       440	pretty.c	WHILE_3	FUNCTION_19	IF_2
0x40017a3	            0xeb01	                           jmp 0x40017a6	       440	pretty.c	WHILE_3	FUNCTION_19	IF_2
0x40017a5	              0x90	                                     nop	       510	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40017a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017aa	    0x644833042528	                xor rax, qword fs:[0x28]	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017b3	            0x7405	                            je 0x40017ba	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017b5	      0xe800000000	                          call 0x40017ba	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017ba	        0x488b5df8	                mov rbx, qword [rbp - 8]	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017be	              0xc9	                                   leave	       512	pretty.c	WHILE_3	FUNCTION_19
0x40017bf	              0xc3	                                     ret	       512	pretty.c	WHILE_3	FUNCTION_19
logmsg_reencode	WHILE,0:DO,0:CALL,10:functions,0:IF,9:FOR,0:SWITCH,0:ELSE,2	104
0x4001baa	              0x55	                                push rbp	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bab	          0x4889e5	                            mov rbp, rsp	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bae	        0x4883ec40	                           sub rsp, 0x40	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bb2	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bb6	        0x488975d0	             mov qword [rbp - 0x30], rsi	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bba	        0x488955c8	             mov qword [rbp - 0x38], rdx	       601	pretty.c	WHILE_3	FUNCTION_25
0x4001bbe	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x4001bc2	      0xbe00000000	                              mov esi, 0	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x4001bc7	          0x4889c7	                            mov rdi, rax	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x4001bca	      0xe800000000	                          call 0x4001bcf	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x4001bcf	        0x488945e8	             mov qword [rbp - 0x18], rax	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x4001bd3	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001bd8	            0x740b	                            je 0x4001be5	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001bda	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001bde	           0xfb600	                   movzx eax, byte [rax]	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001be1	            0x84c0	                             test al, al	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001be3	            0x752b	                           jne 0x4001c10	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001be5	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x4001bea	            0x741b	                            je 0x4001c07	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x4001bec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001bf0	      0xbe00000000	                              mov esi, 0	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001bf5	          0x4889c7	                            mov rdi, rax	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001bf8	      0xe899fdffff	                     call sym.get_header	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001bfd	          0x4889c2	                            mov rdx, rax	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001c00	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001c04	          0x488910	                    mov qword [rax], rdx	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001c07	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       611	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001c0b	      0xe911010000	                           jmp 0x4001d21	       611	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x4001c10	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001c14	      0xbe00000000	                              mov esi, 0	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001c19	          0x4889c7	                            mov rdi, rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001c1c	      0xe875fdffff	                     call sym.get_header	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001c21	        0x488945f0	             mov qword [rbp - 0x10], rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001c25	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001c2a	            0x740b	                            je 0x4001c37	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001c2c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001c30	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001c34	          0x488910	                    mov qword [rax], rdx	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001c37	      0x48837df000	               cmp qword [rbp - 0x10], 0	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c3c	            0x7406	                            je 0x4001c44	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c3e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c42	            0xeb07	                           jmp 0x4001c4b	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c44	    0x488b05000000	            mov rax, qword [0x04001c4b] 	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c4b	        0x488945f8	                mov qword [rbp - 8], rax	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001c4f	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c53	        0x488b45f8	                mov rax, qword [rbp - 8]	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c57	          0x4889d6	                            mov rsi, rdx	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c5a	          0x4889c7	                            mov rdi, rax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c5d	      0xe800000000	                          call 0x4001c62	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c62	            0x85c0	                           test eax, eax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c64	            0x7443	                            je 0x4001ca9	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001c66	      0x48837df000	               cmp qword [rbp - 0x10], 0	       623	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x4001c6b	            0x7509	                           jne 0x4001c76	       623	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x4001c6d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       624	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x4001c71	      0xe9ab000000	                           jmp 0x4001d21	       624	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_5
0x4001c76	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c7a	      0xbe00000000	                              mov esi, 0	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c7f	          0x4889c7	                            mov rdi, rax	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c82	      0xe800000000	                          call 0x4001c87	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c87	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c8b	            0x7512	                           jne 0x4001c9f	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001c8d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001c91	          0x4889c7	                            mov rdi, rax	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001c94	      0xe800000000	                          call 0x4001c99	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001c99	        0x488945e0	             mov qword [rbp - 0x20], rax	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001c9d	            0xeb3f	                           jmp 0x4001cde	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001c9f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x4001ca3	        0x488945e0	             mov qword [rbp - 0x20], rax	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x4001ca7	            0xeb35	                           jmp 0x4001cde	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x4001ca9	        0x488b55f8	                mov rdx, qword [rbp - 8]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cad	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cb1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cb5	          0x4889ce	                            mov rsi, rcx	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cb8	          0x4889c7	                            mov rdi, rax	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cbb	      0xe8ede6ffff	                call sym.reencode_string	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cc0	        0x488945e0	             mov qword [rbp - 0x20], rax	       645	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_7
0x4001cc4	      0x48837de000	               cmp qword [rbp - 0x20], 0	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x4001cc9	            0x7413	                            je 0x4001cde	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x4001ccb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x4001ccf	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x4001cd3	          0x4889d6	                            mov rsi, rdx	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x4001cd6	          0x4889c7	                            mov rdi, rax	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x4001cd9	      0xe800000000	                          call 0x4001cde	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x4001cde	      0x48837de000	               cmp qword [rbp - 0x20], 0	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x4001ce3	            0x7417	                            je 0x4001cfc	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x4001ce5	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001ce9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001ced	          0x4889d6	                            mov rsi, rdx	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001cf0	          0x4889c7	                            mov rdi, rax	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001cf3	      0xe80ffdffff	        call sym.replace_encoding_header	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001cf8	        0x488945e0	             mov qword [rbp - 0x20], rax	       655	pretty.c	WHILE_3	FUNCTION_25	CALL_9
0x4001cfc	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001d01	            0x750c	                           jne 0x4001d0f	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001d03	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x4001d07	          0x4889c7	                            mov rdi, rax	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x4001d0a	      0xe800000000	                          call 0x4001d0f	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x4001d0f	      0x48837de000	               cmp qword [rbp - 0x20], 0	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d14	            0x7406	                            je 0x4001d1c	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d16	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d1a	            0xeb04	                           jmp 0x4001d20	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d1c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d20	              0x90	                                     nop	       663	pretty.c	WHILE_3	FUNCTION_25
0x4001d21	              0xc9	                                   leave	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001d22	              0xc3	                                     ret	       664	pretty.c	WHILE_3	FUNCTION_25
reencode_string	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	18
0x40003ad	              0x55	                                push rbp	        42	utf8.h	FUNCTION_66
0x40003ae	          0x4889e5	                            mov rbp, rsp	        42	utf8.h	FUNCTION_66
0x40003b1	        0x4883ec20	                           sub rsp, 0x20	        42	utf8.h	FUNCTION_66
0x40003b5	        0x48897df8	                mov qword [rbp - 8], rdi	        42	utf8.h	FUNCTION_66
0x40003b9	        0x488975f0	             mov qword [rbp - 0x10], rsi	        42	utf8.h	FUNCTION_66
0x40003bd	        0x488955e8	             mov qword [rbp - 0x18], rdx	        42	utf8.h	FUNCTION_66
0x40003c1	        0x488b45f8	                mov rax, qword [rbp - 8]	        43	utf8.h	FUNCTION_66	CALL_2
0x40003c5	          0x4889c7	                            mov rdi, rax	        43	utf8.h	FUNCTION_66	CALL_2
0x40003c8	      0xe800000000	                          call 0x40003cd	        43	utf8.h	FUNCTION_66	CALL_2
0x40003cd	            0x89c6	                            mov esi, eax	        43	utf8.h	FUNCTION_66	CALL_2
0x40003cf	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	        43	utf8.h	FUNCTION_66	CALL_2
0x40003d3	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        43	utf8.h	FUNCTION_66	CALL_2
0x40003d7	        0x488b45f8	                mov rax, qword [rbp - 8]	        43	utf8.h	FUNCTION_66	CALL_2
0x40003db	    0x41b800000000	                              mov r8d, 0	        43	utf8.h	FUNCTION_66	CALL_2
0x40003e1	          0x4889c7	                            mov rdi, rax	        43	utf8.h	FUNCTION_66	CALL_2
0x40003e4	      0xe800000000	                          call 0x40003e9	        43	utf8.h	FUNCTION_66	CALL_2
0x40003e9	              0xc9	                                   leave	        46	utf8.h	FUNCTION_66
0x40003ea	              0xc3	                                     ret	        46	utf8.h	FUNCTION_66
show_ident_date	WHILE,0:DO,0:CALL,3:functions,0:IF,4:FOR,0:SWITCH,0:ELSE,1	58
0x400111e	              0x55	                                push rbp	       408	pretty.c	WHILE_3	FUNCTION_18
0x400111f	          0x4889e5	                            mov rbp, rsp	       408	pretty.c	WHILE_3	FUNCTION_18
0x4001122	        0x4883ec20	                           sub rsp, 0x20	       408	pretty.c	WHILE_3	FUNCTION_18
0x4001126	        0x48897de8	             mov qword [rbp - 0x18], rdi	       408	pretty.c	WHILE_3	FUNCTION_18
0x400112a	        0x488975e0	             mov qword [rbp - 0x20], rsi	       408	pretty.c	WHILE_3	FUNCTION_18
0x400112e	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       409	pretty.c	WHILE_3	FUNCTION_18
0x4001136	    0x48c745f80000	                  mov qword [rbp - 8], 0	       410	pretty.c	WHILE_3	FUNCTION_18
0x400113e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001142	        0x488b4020	            mov rax, qword [rax + 0x20] 	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001146	          0x4885c0	                           test rax, rax	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001149	            0x742b	                            je 0x4001176	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x400114b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x400114f	        0x488b4028	            mov rax, qword [rax + 0x28] 	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001153	          0x4885c0	                           test rax, rax	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001156	            0x741e	                            je 0x4001176	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001158	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x400115c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001160	      0xba0a000000	                            mov edx, 0xa	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001165	      0xbe00000000	                              mov esi, 0	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x400116a	          0x4889c7	                            mov rdi, rax	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x400116d	      0xe800000000	                          call 0x4001172	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001172	        0x488945f0	             mov qword [rbp - 0x10], rax	       413	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4001176	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_1
0x400117a	          0x4889c7	                            mov rdi, rax	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_1
0x400117d	      0xe800000000	                          call 0x4001182	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_1
0x4001182	            0x85c0	                           test eax, eax	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_1
0x4001184	            0x740a	                            je 0x4001190	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_1
0x4001186	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x400118e	            0xeb54	                           jmp 0x40011e4	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x4001190	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4001194	        0x488b4030	            mov rax, qword [rax + 0x30] 	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4001198	          0x4885c0	                           test rax, rax	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x400119b	            0x742b	                            je 0x40011c8	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x400119d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x40011a1	        0x488b4038	            mov rax, qword [rax + 0x38] 	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x40011a5	          0x4885c0	                           test rax, rax	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x40011a8	            0x741e	                            je 0x40011c8	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x40011aa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011ae	        0x488b4030	            mov rax, qword [rax + 0x30] 	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011b2	      0xba0a000000	                            mov edx, 0xa	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011b7	      0xbe00000000	                              mov esi, 0	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011bc	          0x4889c7	                            mov rdi, rax	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011bf	      0xe800000000	                          call 0x40011c4	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011c4	        0x488945f8	                mov qword [rbp - 8], rax	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_2
0x40011c8	    0x48817df8feff	        cmp qword [rbp - 8], 0x7ffffffe 	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x40011d0	            0x7f0a	                            jg 0x40011dc	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x40011d2	    0x48817df80100	 cmp qword [rbp - 8], 0xffffffff80000001	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x40011da	            0x7d08	                           jge 0x40011e4	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x40011dc	    0x48c745f80000	                  mov qword [rbp - 8], 0	       420	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x40011e4	        0x488b45f8	                mov rax, qword [rbp - 8]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011e8	            0x89c1	                            mov ecx, eax	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011ea	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011ee	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011f2	            0x89ce	                            mov esi, ecx	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011f4	          0x4889c7	                            mov rdi, rax	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011f7	      0xe800000000	                          call 0x40011fc	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_3
0x40011fc	              0xc9	                                   leave	       423	pretty.c	WHILE_3	FUNCTION_18
0x40011fd	              0xc3	                                     ret	       423	pretty.c	WHILE_3	FUNCTION_18
parse_color	WHILE,0:DO,0:CALL,15:functions,0:IF,12:FOR,0:SWITCH,0:ELSE,5	167
0x40027b2	              0x55	                                push rbp	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027b3	          0x4889e5	                            mov rbp, rsp	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027b6	    0x4881eca00000	                           sub rsp, 0xa0	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027bd	    0x4889bd78ffff	             mov qword [rbp - 0x88], rdi	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027c4	    0x4889b570ffff	             mov qword [rbp - 0x90], rsi	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027cb	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027d2	    0x64488b042528	                mov rax, qword fs:[0x28]	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027db	        0x488945f8	                mov qword [rbp - 8], rax	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027df	            0x31c0	                            xor eax, eax	       938	pretty.c	WHILE_3	FUNCTION_36
0x40027e1	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       939	pretty.c	WHILE_3	FUNCTION_36
0x40027e8	        0x48894580	             mov qword [rbp - 0x80], rax	       939	pretty.c	WHILE_3	FUNCTION_36
0x40027ec	    0x48c745900000	               mov qword [rbp - 0x70], 0	       940	pretty.c	WHILE_3	FUNCTION_36
0x40027f4	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x40027fb	        0x4883c001	                              add rax, 1	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x40027ff	           0xfb600	                   movzx eax, byte [rax]	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002802	            0x3c28	                            cmp al, 0x28	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002804	     0xf8541010000	                           jne 0x400294b	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x400280a	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002811	        0x4883c002	                              add rax, 2	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002815	        0x48894588	             mov qword [rbp - 0x78], rax	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002819	        0x488b4588	             mov rax, qword [rbp - 0x78]	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x400281d	      0xbe29000000	                           mov esi, 0x29	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4002822	          0x4889c7	                            mov rdi, rax	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4002825	      0xe800000000	                          call 0x400282a	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x400282a	        0x48894598	             mov qword [rbp - 0x68], rax	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x400282e	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4002833	            0x750a	                           jne 0x400283f	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4002835	      0xb800000000	                              mov eax, 0	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x400283a	      0xe910020000	                           jmp 0x4002a4f	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x400283f	        0x488b4588	             mov rax, qword [rbp - 0x78]	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x4002843	        0x488d5588	                   lea rdx, [rbp - 0x78]	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x4002847	      0xbe00000000	                              mov esi, 0	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x400284c	          0x4889c7	                            mov rdi, rax	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x400284f	      0xe8ecd7ffff	                    call sym.skip_prefix	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x4002854	            0x85c0	                           test eax, eax	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x4002856	            0x7438	                            je 0x4002890	       950	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	CALL_2
0x4002858	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x400285f	        0x488b4008	                mov rax, qword [rax + 8]	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002863	          0x8b4068	            mov eax, dword [rax + 0x68] 	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002866	            0x89c6	                            mov esi, eax	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002868	      0xbf01000000	                              mov edi, 1	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x400286d	      0xe800000000	                          call 0x4002872	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002872	            0x85c0	                           test eax, eax	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002874	            0x756b	                           jne 0x40028e1	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002876	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x400287a	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4002881	          0x4829c2	                            sub rdx, rax	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4002884	          0x4889d0	                            mov rax, rdx	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4002887	        0x4883c001	                              add rax, 1	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x400288b	      0xe9bf010000	                           jmp 0x4002a4f	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4002890	        0x488b4588	             mov rax, qword [rbp - 0x78]	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x4002894	        0x488d5588	                   lea rdx, [rbp - 0x78]	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x4002898	      0xbe00000000	                              mov esi, 0	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x400289d	          0x4889c7	                            mov rdi, rax	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x40028a0	      0xe89bd7ffff	                    call sym.skip_prefix	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x40028a5	            0x85c0	                           test eax, eax	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x40028a7	            0x7538	                           jne 0x40028e1	       953	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_1	IF_5	CALL_4
0x40028a9	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028b0	        0x488b4008	                mov rax, qword [rax + 8]	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028b4	          0x8b4068	            mov eax, dword [rax + 0x68] 	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028b7	            0x89c6	                            mov esi, eax	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028b9	      0xbf01000000	                              mov edi, 1	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028be	      0xe800000000	                          call 0x40028c3	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028c3	            0x85c0	                           test eax, eax	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028c5	            0x751a	                           jne 0x40028e1	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x40028c7	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028cb	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028d2	          0x4829c2	                            sub rdx, rax	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028d5	          0x4889d0	                            mov rax, rdx	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028d8	        0x4883c001	                              add rax, 1	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028dc	      0xe96e010000	                           jmp 0x4002a4f	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x40028e1	        0x488b4598	             mov rax, qword [rbp - 0x68]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028e5	        0x488b5588	             mov rdx, qword [rbp - 0x78]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028e9	          0x4829d0	                            sub rax, rdx	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028ec	            0x89c1	                            mov ecx, eax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028ee	        0x488b4588	             mov rax, qword [rbp - 0x78]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028f2	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028f6	            0x89ce	                            mov esi, ecx	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028f8	          0x4889c7	                            mov rdi, rax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x40028fb	      0xe800000000	                          call 0x4002900	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4002900	            0x85c0	                           test eax, eax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4002902	            0x7917	                           jns 0x400291b	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4002904	      0xbf00000000	                              mov edi, 0	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4002909	      0xe8e1d9ffff	                               call sym.	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x400290e	          0x4889c7	                            mov rdi, rax	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4002911	      0xb800000000	                              mov eax, 0	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4002916	      0xe800000000	                          call 0x400291b	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x400291b	        0x488d55a0	                   lea rdx, [rbp - 0x60]	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x400291f	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x4002926	          0x4889d6	                            mov rsi, rdx	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x4002929	          0x4889c7	                            mov rdi, rax	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x400292c	      0xe889d9ffff	                  call sym.strbuf_addstr	       963	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_9
0x4002931	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002935	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x400293c	          0x4829c2	                            sub rdx, rax	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x400293f	          0x4889d0	                            mov rax, rdx	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002942	        0x4883c001	                              add rax, 1	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002946	      0xe904010000	                           jmp 0x4002a4f	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x400294b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x4002952	        0x488d4801	                      lea rcx, [rax + 1]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x4002956	        0x488d4580	                   lea rax, [rbp - 0x80]	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x400295a	          0x4889c2	                            mov rdx, rax	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x400295d	      0xbe00000000	                              mov esi, 0	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x4002962	          0x4889cf	                            mov rdi, rcx	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x4002965	      0xe8d6d6ffff	                    call sym.skip_prefix	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x400296a	            0x85c0	                           test eax, eax	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x400296c	            0x740d	                            je 0x400297b	       972	pretty.c	WHILE_3	FUNCTION_36	IF_8	CALL_10
0x400296e	    0x48c745900000	               mov qword [rbp - 0x70], 0	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x4002976	      0xe985000000	                           jmp 0x4002a00	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x400297b	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x4002982	        0x488d4801	                      lea rcx, [rax + 1]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x4002986	        0x488d4580	                   lea rax, [rbp - 0x80]	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x400298a	          0x4889c2	                            mov rdx, rax	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x400298d	      0xbe00000000	                              mov esi, 0	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x4002992	          0x4889cf	                            mov rdi, rcx	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x4002995	      0xe8a6d6ffff	                    call sym.skip_prefix	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x400299a	            0x85c0	                           test eax, eax	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x400299c	            0x740a	                            je 0x40029a8	       974	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9	CALL_11
0x400299e	    0x48c745900000	               mov qword [rbp - 0x70], 0	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x40029a6	            0xeb58	                           jmp 0x4002a00	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x40029a8	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029af	        0x488d4801	                      lea rcx, [rax + 1]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029b3	        0x488d4580	                   lea rax, [rbp - 0x80]	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029b7	          0x4889c2	                            mov rdx, rax	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029ba	      0xbe00000000	                              mov esi, 0	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029bf	          0x4889cf	                            mov rdi, rcx	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029c2	      0xe879d6ffff	                    call sym.skip_prefix	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029c7	            0x85c0	                           test eax, eax	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029c9	            0x740a	                            je 0x40029d5	       976	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10	CALL_12
0x40029cb	    0x48c745900000	               mov qword [rbp - 0x70], 0	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x40029d3	            0xeb2b	                           jmp 0x4002a00	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x40029d5	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029dc	        0x488d4801	                      lea rcx, [rax + 1]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029e0	        0x488d4580	                   lea rax, [rbp - 0x80]	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029e4	          0x4889c2	                            mov rdx, rax	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029e7	      0xbe00000000	                              mov esi, 0	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029ec	          0x4889cf	                            mov rdi, rcx	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029ef	      0xe84cd6ffff	                    call sym.skip_prefix	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029f4	            0x85c0	                           test eax, eax	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029f6	            0x7408	                            je 0x4002a00	       978	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11	CALL_13
0x40029f8	    0x48c745900000	               mov qword [rbp - 0x70], 0	       979	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11
0x4002a00	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a05	            0x7434	                            je 0x4002a3b	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a07	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a0e	        0x488b4008	                mov rax, qword [rax + 8]	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a12	          0x8b4068	            mov eax, dword [rax + 0x68] 	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a15	            0x89c6	                            mov esi, eax	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a17	      0xbf01000000	                              mov edi, 1	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a1c	      0xe800000000	                          call 0x4002a21	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a21	            0x85c0	                           test eax, eax	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a23	            0x7416	                            je 0x4002a3b	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002a25	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x4002a29	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x4002a30	          0x4889d6	                            mov rsi, rdx	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x4002a33	          0x4889c7	                            mov rdi, rax	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x4002a36	      0xe87fd8ffff	                  call sym.strbuf_addstr	       982	pretty.c	WHILE_3	FUNCTION_36	CALL_15
0x4002a3b	        0x488b4580	             mov rax, qword [rbp - 0x80]	       984	pretty.c	WHILE_3	FUNCTION_36
0x4002a3f	          0x4889c2	                            mov rdx, rax	       984	pretty.c	WHILE_3	FUNCTION_36
0x4002a42	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       984	pretty.c	WHILE_3	FUNCTION_36
0x4002a49	          0x4829c2	                            sub rdx, rax	       984	pretty.c	WHILE_3	FUNCTION_36
0x4002a4c	          0x4889d0	                            mov rax, rdx	       984	pretty.c	WHILE_3	FUNCTION_36
0x4002a4f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       985	pretty.c	WHILE_3	FUNCTION_36
0x4002a53	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       985	pretty.c	WHILE_3	FUNCTION_36
0x4002a5c	            0x7405	                            je 0x4002a63	       985	pretty.c	WHILE_3	FUNCTION_36
0x4002a5e	      0xe800000000	                          call 0x4002a63	       985	pretty.c	WHILE_3	FUNCTION_36
0x4002a63	              0xc9	                                   leave	       985	pretty.c	WHILE_3	FUNCTION_36
0x4002a64	              0xc3	                                     ret	       985	pretty.c	WHILE_3	FUNCTION_36
save_user_format	WHILE,0:DO,0:CALL,2:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	24
0x4000414	              0x55	                                push rbp	        36	pretty.c	WHILE_3	FUNCTION_2
0x4000415	          0x4889e5	                            mov rbp, rsp	        36	pretty.c	WHILE_3	FUNCTION_2
0x4000418	        0x4883ec20	                           sub rsp, 0x20	        36	pretty.c	WHILE_3	FUNCTION_2
0x400041c	        0x48897df8	                mov qword [rbp - 8], rdi	        36	pretty.c	WHILE_3	FUNCTION_2
0x4000420	        0x488975f0	             mov qword [rbp - 0x10], rsi	        36	pretty.c	WHILE_3	FUNCTION_2
0x4000424	          0x8955ec	             mov dword [rbp - 0x14], edx	        36	pretty.c	WHILE_3	FUNCTION_2
0x4000427	    0x488b05000000	            mov rax, qword [0x0400042e] 	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x400042e	          0x4889c7	                            mov rdi, rax	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000431	      0xe800000000	                          call 0x4000436	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000436	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x400043a	          0x4889c7	                            mov rdi, rax	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x400043d	      0xe800000000	                          call 0x4000442	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000442	    0x488905000000	            mov qword [0x04000449], rax 	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000449	        0x837dec00	               cmp dword [rbp - 0x14], 0	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x400044d	            0x740e	                            je 0x400045d	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x400044f	        0x488b45f8	                mov rax, qword [rbp - 8]	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000453	         0xfb6507b	           movzx edx, byte [rax + 0x7b] 	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000457	          0x83ca08	                               or edx, 8	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x400045a	          0x88507b	               mov byte [rax + 0x7b], dl	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x400045d	        0x488b45f8	                mov rax, qword [rbp - 8]	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000461	    0xc780a4000000	               mov dword [rax + 0xa4], 8	        41	pretty.c	WHILE_3	FUNCTION_2
0x400046b	              0x90	                                     nop	        42	pretty.c	WHILE_3	FUNCTION_2
0x400046c	              0xc9	                                   leave	        42	pretty.c	WHILE_3	FUNCTION_2
0x400046d	              0xc3	                                     ret	        42	pretty.c	WHILE_3	FUNCTION_2
format_commit_one	WHILE,0:DO,0:CALL,63:functions,0:IF,29:FOR,3:SWITCH,7:ELSE,4	758
0x4002d79	              0x55	                                push rbp	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d7a	          0x4889e5	                            mov rbp, rsp	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d7d	              0x53	                                push rbx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d7e	    0x4881eca80000	                           sub rsp, 0xa8	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d85	    0x4889bd68ffff	             mov qword [rbp - 0x98], rdi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d8c	    0x4889b560ffff	             mov qword [rbp - 0xa0], rsi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d93	    0x48899558ffff	             mov qword [rbp - 0xa8], rdx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002d9a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002da3	        0x488945e8	             mov qword [rbp - 0x18], rax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002da7	            0x31c0	                            xor eax, eax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4002da9	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	      1081	pretty.c	WHILE_3	FUNCTION_39
0x4002db0	        0x488945a8	             mov qword [rbp - 0x58], rax	      1081	pretty.c	WHILE_3	FUNCTION_39
0x4002db4	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1082	pretty.c	WHILE_3	FUNCTION_39
0x4002db8	          0x488b00	                    mov rax, qword [rax]	      1082	pretty.c	WHILE_3	FUNCTION_39
0x4002dbb	        0x488945b0	             mov qword [rbp - 0x50], rax	      1082	pretty.c	WHILE_3	FUNCTION_39
0x4002dbf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1083	pretty.c	WHILE_3	FUNCTION_39
0x4002dc3	        0x488b4050	            mov rax, qword [rax + 0x50] 	      1083	pretty.c	WHILE_3	FUNCTION_39
0x4002dc7	        0x488945b8	             mov qword [rbp - 0x48], rax	      1083	pretty.c	WHILE_3	FUNCTION_39
0x4002dcb	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002dd2	           0xfb600	                   movzx eax, byte [rax]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002dd5	           0xfbec0	                           movsx eax, al	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002dd8	          0x83e83c	                           sub eax, 0x3c	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002ddb	          0x83f83c	                           cmp eax, 0x3c	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002dde	     0xf8790020000	                            ja 0x4003074	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002de4	            0x89c0	                            mov eax, eax	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002de6	    0x488b04c50000	                  mov rax, qword [rax*8]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002dee	            0xffe0	                                 jmp rax	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002df0	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002df7	        0x4883c001	                              add rax, 1	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002dfb	      0xbe00000000	                              mov esi, 0	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002e00	          0x4889c7	                            mov rdi, rax	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002e03	      0xe800000000	                          call 0x4002e08	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002e08	            0x85c0	                           test eax, eax	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002e0a	            0x7459	                            je 0x4002e65	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4002e0c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e10	        0x488b4008	                mov rax, qword [rax + 8]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e14	          0x8b4068	            mov eax, dword [rax + 0x68] 	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e17	            0x89c6	                            mov esi, eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e19	      0xbf01000000	                              mov edi, 1	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e1e	      0xe800000000	                          call 0x4002e23	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e23	            0x89c2	                            mov edx, eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e25	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e29	          0x895078	             mov dword [rax + 0x78], edx	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4002e2c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e30	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e33	            0x85c0	                           test eax, eax	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e35	            0x7424	                            je 0x4002e5b	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e37	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e3e	        0x488b4008	                mov rax, qword [rax + 8]	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e42	          0x4885c0	                           test rax, rax	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e45	            0x7414	                            je 0x4002e5b	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4002e47	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x4002e4e	      0xbe00000000	                              mov esi, 0	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x4002e53	          0x4889c7	                            mov rdi, rax	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x4002e56	      0xe85fd4ffff	                  call sym.strbuf_addstr	      1094	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_3
0x4002e5b	      0xb807000000	                              mov eax, 7	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x4002e60	      0xe9200b0000	                           jmp 0x4003985	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x4002e65	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e69	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e70	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e77	          0x4889ce	                            mov rsi, rcx	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e7a	          0x4889c7	                            mov rdi, rax	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e7d	      0xe830f9ffff	                    call sym.parse_color	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e82	    0x898578ffffff	             mov dword [rbp - 0x88], eax	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4002e88	    0x83bd78ffffff	               cmp dword [rbp - 0x88], 0	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4002e8f	            0x740b	                            je 0x4002e9c	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4002e91	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1099	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4002e95	    0xc74078000000	               mov dword [rax + 0x78], 0	      1099	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4002e9c	    0x8b8578ffffff	             mov eax, dword [rbp - 0x88]	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x4002ea2	            0x4898	                                    cdqe	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x4002ea4	      0xe9dc0a0000	                           jmp 0x4003985	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x4002ea9	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x4002eb0	      0xbe0a000000	                            mov esi, 0xa	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x4002eb5	          0x4889c7	                            mov rdi, rax	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x4002eb8	      0xe88fd3ffff	                   call sym.strbuf_addch	      1108	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_5
0x4002ebd	      0xb801000000	                              mov eax, 1	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002ec2	      0xe9be0a0000	                           jmp 0x4003985	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002ec7	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x4002ece	        0x4883c001	                              add rax, 1	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x4002ed2	          0x4889c7	                            mov rdi, rax	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x4002ed5	      0xe85cd4ffff	                        call sym.hex2chr	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x4002eda	    0x89857cffffff	             mov dword [rbp - 0x84], eax	      1112	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_6
0x4002ee0	    0x83bd7cffffff	               cmp dword [rbp - 0x84], 0	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4002ee7	            0x790a	                           jns 0x4002ef3	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4002ee9	      0xb800000000	                              mov eax, 0	      1114	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4002eee	      0xe9920a0000	                           jmp 0x4003985	      1114	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4002ef3	    0x8b957cffffff	             mov edx, dword [rbp - 0x84]	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x4002ef9	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x4002f00	            0x89d6	                            mov esi, edx	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x4002f02	          0x4889c7	                            mov rdi, rax	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x4002f05	      0xe842d3ffff	                   call sym.strbuf_addch	      1115	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_7
0x4002f0a	      0xb803000000	                              mov eax, 3	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002f0f	      0xe9710a0000	                           jmp 0x4003985	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4002f14	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f1b	        0x4883c001	                              add rax, 1	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f1f	           0xfb600	                   movzx eax, byte [rax]	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f22	            0x3c28	                            cmp al, 0x28	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f24	     0xf851e010000	                           jne 0x4003048	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f2a	    0x48c745900000	               mov qword [rbp - 0x70], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f32	    0x48c745980000	               mov qword [rbp - 0x68], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f3a	    0x48c745a00000	               mov qword [rbp - 0x60], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f42	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f49	        0x4883c002	                              add rax, 2	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f4d	        0x488945c0	             mov qword [rbp - 0x40], rax	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4002f51	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4002f55	      0xbe29000000	                           mov esi, 0x29	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4002f5a	          0x4889c7	                            mov rdi, rax	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4002f5d	      0xe800000000	                          call 0x4002f62	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4002f62	        0x488945c8	             mov qword [rbp - 0x38], rax	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4002f66	      0x48837dc800	               cmp qword [rbp - 0x38], 0	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4002f6b	            0x750a	                           jne 0x4002f77	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4002f6d	      0xb800000000	                              mov eax, 0	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4002f72	      0xe90e0a0000	                           jmp 0x4003985	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4002f77	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x4002f7b	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x4002f7f	     0xf8687000000	                           jbe 0x400300c	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x4002f85	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f89	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f8d	      0xba0a000000	                            mov edx, 0xa	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f92	          0x4889ce	                            mov rsi, rcx	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f95	          0x4889c7	                            mov rdi, rax	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f98	      0xe800000000	                          call 0x4002f9d	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002f9d	        0x48894590	             mov qword [rbp - 0x70], rax	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4002fa1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4002fa5	           0xfb600	                   movzx eax, byte [rax]	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4002fa8	            0x3c2c	                            cmp al, 0x2c	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4002faa	            0x754b	                           jne 0x4002ff7	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4002fac	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fb0	        0x488d4801	                      lea rcx, [rax + 1]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fb4	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fb8	      0xba0a000000	                            mov edx, 0xa	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fbd	          0x4889c6	                            mov rsi, rax	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fc0	          0x4889cf	                            mov rdi, rcx	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fc3	      0xe800000000	                          call 0x4002fc8	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fc8	        0x48894598	             mov qword [rbp - 0x68], rax	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4002fcc	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4002fd0	           0xfb600	                   movzx eax, byte [rax]	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4002fd3	            0x3c2c	                            cmp al, 0x2c	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4002fd5	            0x7520	                           jne 0x4002ff7	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4002fd7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002fdb	        0x488d4801	                      lea rcx, [rax + 1]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002fdf	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002fe3	      0xba0a000000	                            mov edx, 0xa	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002fe8	          0x4889c6	                            mov rsi, rax	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002feb	          0x4889cf	                            mov rdi, rcx	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002fee	      0xe800000000	                          call 0x4002ff3	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002ff3	        0x488945a0	             mov qword [rbp - 0x60], rax	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4002ff7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4002ffb	           0xfb600	                   movzx eax, byte [rax]	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4002ffe	            0x3c29	                            cmp al, 0x29	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4003000	            0x740a	                            je 0x400300c	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4003002	      0xb800000000	                              mov eax, 0	      1135	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4003007	      0xe979090000	                           jmp 0x4003985	      1135	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x400300c	        0x488b7da0	             mov rdi, qword [rbp - 0x60]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003010	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003014	        0x488b5590	             mov rdx, qword [rbp - 0x70]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003018	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x400301c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003023	          0x4989f8	                             mov r8, rdi	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003026	          0x4889c7	                            mov rdi, rax	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x4003029	      0xe842f6ffff	            call sym.rewrap_message_tail	      1137	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_12
0x400302e	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4003032	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4003039	          0x4829c2	                            sub rdx, rax	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x400303c	          0x4889d0	                            mov rax, rdx	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x400303f	        0x4883c001	                              add rax, 1	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4003043	      0xe93d090000	                           jmp 0x4003985	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4003048	      0xb800000000	                              mov eax, 0	      1140	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_2
0x400304d	      0xe933090000	                           jmp 0x4003985	      1140	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_2
0x4003052	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x4003056	    0x488b8d60ffff	             mov rcx, qword [rbp - 0xa0]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x400305d	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x4003064	          0x4889ce	                            mov rsi, rcx	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x4003067	          0x4889c7	                            mov rdi, rax	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x400306a	      0xe8f6f9ffff	      call sym.parse_padding_placeholder	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x400306f	      0xe911090000	                           jmp 0x4003985	      1144	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	CALL_13
0x4003074	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x4003078	           0xfb600	                   movzx eax, byte [rax]	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x400307b	          0x83e001	                              and eax, 1	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x400307e	            0x84c0	                             test al, al	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x4003080	            0x7510	                           jne 0x4003092	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x4003082	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x4003086	        0x4883c004	                              add rax, 4	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x400308a	          0x4889c7	                            mov rdi, rax	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x400308d	      0xe800000000	                          call 0x4003092	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x4003092	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003099	           0xfb600	                   movzx eax, byte [rax]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400309c	           0xfbec0	                           movsx eax, al	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400309f	          0x83e844	                           sub eax, 0x44	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030a2	          0x83f830	                           cmp eax, 0x30	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030a5	     0xf8777040000	                            ja 0x4003522	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030ab	            0x89c0	                            mov eax, eax	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030ad	    0x488b04c50000	                  mov rax, qword [rax*8]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030b5	            0xffe0	                                 jmp rax	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40030b7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030bb	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030be	      0xbe06000000	                              mov esi, 6	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030c3	            0x89c7	                            mov edi, eax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030c5	      0xe800000000	                          call 0x40030ca	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030ca	          0x4889c2	                            mov rdx, rax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030cd	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030d4	          0x4889d6	                            mov rsi, rdx	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030d7	          0x4889c7	                            mov rdi, rax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030da	      0xe8dbd1ffff	                  call sym.strbuf_addstr	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40030df	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030e3	        0x4883c004	                              add rax, 4	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030e7	          0x4889c7	                            mov rdi, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030ea	      0xe800000000	                          call 0x40030ef	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030ef	          0x4889c2	                            mov rdx, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030f2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030f9	          0x4889d6	                            mov rsi, rdx	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030fc	          0x4889c7	                            mov rdi, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40030ff	      0xe8b6d1ffff	                  call sym.strbuf_addstr	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x4003104	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003108	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x400310b	      0xbe00000000	                              mov esi, 0	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003110	            0x89c7	                            mov edi, eax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003112	      0xe800000000	                          call 0x4003117	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003117	          0x4889c2	                            mov rdx, rax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x400311a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003121	          0x4889d6	                            mov rsi, rdx	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003124	          0x4889c7	                            mov rdi, rax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4003127	      0xe88ed1ffff	                  call sym.strbuf_addstr	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x400312c	      0xb801000000	                              mov eax, 1	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003131	      0xe94f080000	                           jmp 0x4003985	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003136	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400313a	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400313d	      0xbe06000000	                              mov esi, 6	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003142	            0x89c7	                            mov edi, eax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003144	      0xe800000000	                          call 0x4003149	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003149	          0x4889c2	                            mov rdx, rax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400314c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003153	          0x4889d6	                            mov rsi, rdx	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003156	          0x4889c7	                            mov rdi, rax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4003159	      0xe85cd1ffff	                  call sym.strbuf_addstr	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400315e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1160	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003162	        0x488b4008	                mov rax, qword [rax + 8]	      1160	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003166	          0x8b5004	                mov edx, dword [rax + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4003169	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x400316d	        0x488d4804	                      lea rcx, [rax + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4003171	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4003178	          0x4889ce	                            mov rsi, rcx	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x400317b	          0x4889c7	                            mov rdi, rax	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x400317e	      0xe800000000	                          call 0x4003183	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4003183	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x4003187	          0x8b4078	            mov eax, dword [rax + 0x78] 	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x400318a	      0xbe00000000	                              mov esi, 0	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x400318f	            0x89c7	                            mov edi, eax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x4003191	      0xe800000000	                          call 0x4003196	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x4003196	          0x4889c2	                            mov rdx, rax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x4003199	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40031a0	          0x4889d6	                            mov rsi, rdx	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40031a3	          0x4889c7	                            mov rdi, rax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40031a6	      0xe80fd1ffff	                  call sym.strbuf_addstr	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40031ab	      0xb801000000	                              mov eax, 1	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031b0	      0xe9d0070000	                           jmp 0x4003985	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031b5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031b9	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031bc	      0xe800000000	                          call 0x40031c1	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031c1	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031c4	      0xe800000000	                          call 0x40031c9	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031c9	          0x4889c2	                            mov rdx, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031cc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031d3	          0x4889d6	                            mov rsi, rdx	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031d6	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031d9	      0xe8dcd0ffff	                  call sym.strbuf_addstr	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40031de	      0xb801000000	                              mov eax, 1	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031e3	      0xe99d070000	                           jmp 0x4003985	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031e8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1169	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031ec	        0x488b4008	                mov rax, qword [rax + 8]	      1169	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40031f0	          0x8b5804	                mov ebx, dword [rax + 4]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x40031f3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x40031f7	          0x4889c7	                            mov rdi, rax	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x40031fa	      0xe800000000	                          call 0x40031ff	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x40031ff	          0x4889c1	                            mov rcx, rax	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x4003202	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4003209	            0x89da	                            mov edx, ebx	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x400320b	          0x4889ce	                            mov rsi, rcx	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x400320e	          0x4889c7	                            mov rdi, rax	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4003211	      0xe800000000	                          call 0x4003216	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4003216	      0xb801000000	                              mov eax, 1	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400321b	      0xe965070000	                           jmp 0x4003985	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003220	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4003224	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4003228	        0x48894588	             mov qword [rbp - 0x78], rax	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400322c	            0xeb56	                           jmp 0x4003284	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400322e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x4003232	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x4003236	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x400323a	            0x7414	                            je 0x4003250	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x400323c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x4003243	      0xbe20000000	                           mov esi, 0x20	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x4003248	          0x4889c7	                            mov rdi, rax	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x400324b	      0xe8fccfffff	                   call sym.strbuf_addch	      1174	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_31
0x4003250	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003254	          0x488b00	                    mov rax, qword [rax]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003257	        0x4883c004	                              add rax, 4	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x400325b	          0x4889c7	                            mov rdi, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x400325e	      0xe800000000	                          call 0x4003263	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003263	          0x4889c2	                            mov rdx, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003266	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x400326d	          0x4889d6	                            mov rsi, rdx	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003270	          0x4889c7	                            mov rdi, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003273	      0xe842d0ffff	                  call sym.strbuf_addstr	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4003278	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400327c	        0x488b4008	                mov rax, qword [rax + 8]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4003280	        0x48894588	             mov qword [rbp - 0x78], rax	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4003284	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4003289	            0x75a3	                           jne 0x400322e	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400328b	      0xb801000000	                              mov eax, 1	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003290	      0xe9f0060000	                           jmp 0x4003985	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003295	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x4003299	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x400329d	        0x48894588	             mov qword [rbp - 0x78], rax	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032a1	            0xeb56	                           jmp 0x40032f9	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032a3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40032a7	        0x488b4030	            mov rax, qword [rax + 0x30] 	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40032ab	        0x483b4588	             cmp rax, qword [rbp - 0x78]	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40032af	            0x7414	                            je 0x40032c5	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40032b1	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x40032b8	      0xbe20000000	                           mov esi, 0x20	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x40032bd	          0x4889c7	                            mov rdi, rax	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x40032c0	      0xe887cfffff	                   call sym.strbuf_addch	      1181	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_34
0x40032c5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1183	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032c9	        0x488b4008	                mov rax, qword [rax + 8]	      1183	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032cd	          0x8b5004	                mov edx, dword [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032d0	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032d4	          0x488b00	                    mov rax, qword [rax]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032d7	        0x488d4804	                      lea rcx, [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032db	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032e2	          0x4889ce	                            mov rsi, rcx	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032e5	          0x4889c7	                            mov rdi, rax	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032e8	      0xe800000000	                          call 0x40032ed	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x40032ed	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032f1	        0x488b4008	                mov rax, qword [rax + 8]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032f5	        0x48894588	             mov qword [rbp - 0x78], rax	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032f9	      0x48837d8800	               cmp qword [rbp - 0x78], 0	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40032fe	            0x75a3	                           jne 0x40032a3	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x4003300	      0xb801000000	                              mov eax, 1	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003305	      0xe97b060000	                           jmp 0x4003985	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400330a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400330e	          0x4889c6	                            mov rsi, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4003311	      0xbf00000000	                              mov edi, 0	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4003316	      0xe800000000	                          call 0x400331b	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400331b	          0x4889c2	                            mov rdx, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400331e	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4003325	          0x4889d6	                            mov rsi, rdx	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4003328	          0x4889c7	                            mov rdi, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400332b	      0xe88acfffff	                  call sym.strbuf_addstr	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4003330	      0xb801000000	                              mov eax, 1	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003335	      0xe94b060000	                           jmp 0x4003985	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400333a	      0xbe01000000	                              mov esi, 1	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x400333f	      0xbf00000000	                              mov edi, 0	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x4003344	      0xe800000000	                          call 0x4003349	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x4003349	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x400334d	          0x8b5078	            mov edx, dword [rax + 0x78] 	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x4003350	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x4003354	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x400335b	    0x41b900000000	                              mov r9d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x4003361	    0x41b800000000	                              mov r8d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x4003367	      0xb900000000	                              mov ecx, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x400336c	          0x4889c7	                            mov rdi, rax	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x400336f	      0xe800000000	                          call 0x4003374	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x4003374	      0xb801000000	                              mov eax, 1	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003379	      0xe907060000	                           jmp 0x4003985	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400337e	      0xbe01000000	                              mov esi, 1	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x4003383	      0xbf00000000	                              mov edi, 0	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x4003388	      0xe800000000	                          call 0x400338d	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x400338d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x4003391	          0x8b5078	            mov edx, dword [rax + 0x78] 	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x4003394	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x4003398	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x400339f	    0x41b900000000	                              mov r9d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40033a5	    0x41b800000000	                              mov r8d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40033ab	      0xb900000000	                              mov ecx, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40033b0	          0x4889c7	                            mov rdi, rax	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40033b3	      0xe800000000	                          call 0x40033b8	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40033b8	      0xb801000000	                              mov eax, 1	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40033bd	      0xe9c3050000	                           jmp 0x4003985	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40033c2	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033c9	        0x4883c001	                              add rax, 1	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033cd	           0xfb600	                   movzx eax, byte [rax]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033d0	           0xfbec0	                           movsx eax, al	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033d3	          0x83e844	                           sub eax, 0x44	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033d6	          0x83f82f	                           cmp eax, 0x2f	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033d9	     0xf87f6000000	                            ja 0x40034d5	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033df	            0x89c0	                            mov eax, eax	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033e1	    0x488b04c50000	                  mov rax, qword [rax*8]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033e9	            0xffe0	                                 jmp rax	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40033eb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x40033ef	        0x488b4008	                mov rax, qword [rax + 8]	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x40033f3	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x40033f7	          0x4885c0	                           test rax, rax	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x40033fa	            0x7457	                            je 0x4003453	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x40033fc	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1206	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003403	        0x4883c001	                              add rax, 1	      1206	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003407	           0xfb600	                   movzx eax, byte [rax]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400340a	            0x3c64	                            cmp al, 0x64	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400340c	           0xf94c0	                                 sete al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400340f	           0xfb6c8	                           movzx ecx, al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003412	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003416	        0x488b4008	                mov rax, qword [rax + 8]	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x400341a	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x400341e	          0x83e001	                              and eax, 1	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003421	           0xfb6d0	                           movzx edx, al	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003424	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1204	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003428	        0x488b4008	                mov rax, qword [rax + 8]	      1204	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x400342c	        0x488d7818	                   lea rdi, [rax + 0x18]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003430	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1203	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003434	        0x488b4008	                mov rax, qword [rax + 8]	      1203	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4003438	        0x488b7048	            mov rsi, qword [rax + 0x48] 	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400343c	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003443	          0x4189c8	                            mov r8d, ecx	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003446	            0x89d1	                            mov ecx, edx	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003448	          0x4889fa	                            mov rdx, rdi	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400344b	          0x4889c7	                            mov rdi, rax	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400344e	      0xe800000000	                          call 0x4003453	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4003453	      0xb802000000	                              mov eax, 2	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4003458	      0xe928050000	                           jmp 0x4003985	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400345d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4003461	        0x488b4008	                mov rax, qword [rax + 8]	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4003465	        0x488b4048	            mov rax, qword [rax + 0x48] 	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4003469	          0x4885c0	                           test rax, rax	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x400346c	            0x741e	                            je 0x400348c	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x400346e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4003472	        0x488b4008	                mov rax, qword [rax + 8]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4003476	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x400347a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4003481	          0x4889d6	                            mov rsi, rdx	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4003484	          0x4889c7	                            mov rdi, rax	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4003487	      0xe800000000	                          call 0x400348c	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x400348c	      0xb802000000	                              mov eax, 2	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4003491	      0xe9ef040000	                           jmp 0x4003985	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4003496	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1219	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400349a	        0x488b4008	                mov rax, qword [rax + 8]	      1219	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400349e	        0x488d4818	                   lea rcx, [rax + 0x18]	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034a2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1218	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40034a6	        0x488b4008	                mov rax, qword [rax + 8]	      1218	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40034aa	        0x488b5048	            mov rdx, qword [rax + 0x48] 	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034ae	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40034b5	        0x4883c001	                              add rax, 1	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40034b9	           0xfb600	                   movzx eax, byte [rax]	      1217	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x40034bc	           0xfbef0	                           movsx esi, al	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034bf	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034c6	          0x4889c7	                            mov rdi, rax	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034c9	      0xe872f2ffff	           call sym.format_reflog_person	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034ce	            0x4898	                                    cdqe	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034d0	      0xe9b0040000	                           jmp 0x4003985	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40034d5	      0xb800000000	                              mov eax, 0	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40034da	      0xe9a6040000	                           jmp 0x4003985	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40034df	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40034e3	        0x488b4008	                mov rax, qword [rax + 8]	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40034e7	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40034eb	          0x4885c0	                           test rax, rax	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40034ee	            0x7428	                            je 0x4003518	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40034f0	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x40034f4	        0x488b4008	                mov rax, qword [rax + 8]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x40034f8	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x40034fc	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x4003503	          0x4889d6	                            mov rsi, rdx	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x4003506	          0x4889c7	                            mov rdi, rax	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x4003509	      0xe8accdffff	                  call sym.strbuf_addstr	      1224	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16	CALL_45
0x400350e	      0xb801000000	                              mov eax, 1	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x4003513	      0xe96d040000	                           jmp 0x4003985	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x4003518	      0xb800000000	                              mov eax, 0	      1227	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400351d	      0xe963040000	                           jmp 0x4003985	      1227	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4003522	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4003529	           0xfb600	                   movzx eax, byte [rax]	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400352c	            0x3c47	                            cmp al, 0x47	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400352e	     0xf853f010000	                           jne 0x4003673	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4003534	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x4003538	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x400353c	            0x84c0	                             test al, al	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x400353e	            0x751a	                           jne 0x400355a	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x4003540	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4003544	        0x488d5018	                   lea rdx, [rax + 0x18]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4003548	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x400354c	          0x488b00	                    mov rax, qword [rax]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x400354f	          0x4889d6	                            mov rsi, rdx	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4003552	          0x4889c7	                            mov rdi, rax	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4003555	      0xe800000000	                          call 0x400355a	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x400355a	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003561	        0x4883c001	                              add rax, 1	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003565	           0xfb600	                   movzx eax, byte [rax]	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003568	           0xfbec0	                           movsx eax, al	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400356b	          0x83f847	                           cmp eax, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400356e	            0x7422	                            je 0x4003592	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003570	          0x83f847	                           cmp eax, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003573	            0x7f0a	                            jg 0x400357f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003575	          0x83f83f	                           cmp eax, 0x3f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003578	            0x7448	                            je 0x40035c2	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400357a	      0xe9d6000000	                           jmp 0x4003655	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400357f	          0x83f84b	                           cmp eax, 0x4b	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003582	     0xf84a4000000	                            je 0x400362c	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003588	          0x83f853	                           cmp eax, 0x53	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400358b	            0x7476	                            je 0x4003603	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400358d	      0xe9c3000000	                           jmp 0x4003655	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003592	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x4003596	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x400359a	          0x4885c0	                           test rax, rax	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x400359d	     0xf84bc000000	                            je 0x400365f	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x40035a3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035a7	        0x488b5020	            mov rdx, qword [rax + 0x20] 	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035ab	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035b2	          0x4889d6	                            mov rsi, rdx	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035b5	          0x4889c7	                            mov rdi, rax	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035b8	      0xe8fdccffff	                  call sym.strbuf_addstr	      1236	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_47
0x40035bd	      0xe99d000000	                           jmp 0x400365f	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x40035c2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035c6	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035ca	           0xfbec0	                           movsx eax, al	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035cd	          0x83e842	                           sub eax, 0x42	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035d0	          0x83f817	                           cmp eax, 0x17	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035d3	     0xf8789000000	                            ja 0x4003662	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035d9	            0x89c0	                            mov eax, eax	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035db	    0x488b04c50000	                  mov rax, qword [rax*8]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035e3	            0xffe0	                                 jmp rax	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40035e5	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035e9	         0xfb64030	           movzx eax, byte [rax + 0x30] 	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035ed	           0xfbed0	                           movsx edx, al	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035f0	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035f7	            0x89d6	                            mov esi, edx	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035f9	          0x4889c7	                            mov rdi, rax	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40035fc	      0xe84bccffff	                   call sym.strbuf_addch	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x4003601	            0xeb5f	                           jmp 0x4003662	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003603	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x4003607	        0x488b4038	            mov rax, qword [rax + 0x38] 	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x400360b	          0x4885c0	                           test rax, rax	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x400360e	            0x7455	                            je 0x4003665	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x4003610	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x4003614	        0x488b5038	            mov rdx, qword [rax + 0x38] 	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x4003618	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x400361f	          0x4889d6	                            mov rsi, rdx	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x4003622	          0x4889c7	                            mov rdi, rax	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x4003625	      0xe890ccffff	                  call sym.strbuf_addstr	      1253	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_49
0x400362a	            0xeb39	                           jmp 0x4003665	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400362c	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4003630	        0x488b4040	            mov rax, qword [rax + 0x40] 	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4003634	          0x4885c0	                           test rax, rax	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4003637	            0x742f	                            je 0x4003668	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4003639	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x400363d	        0x488b5040	            mov rdx, qword [rax + 0x40] 	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x4003641	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x4003648	          0x4889d6	                            mov rsi, rdx	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x400364b	          0x4889c7	                            mov rdi, rax	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x400364e	      0xe867ccffff	                  call sym.strbuf_addstr	      1257	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	CALL_50
0x4003653	            0xeb13	                           jmp 0x4003668	      1258	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003655	      0xb800000000	                              mov eax, 0	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400365a	      0xe926030000	                           jmp 0x4003985	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400365f	              0x90	                                     nop	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003660	            0xeb07	                           jmp 0x4003669	      1237	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003662	              0x90	                                     nop	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003663	            0xeb04	                           jmp 0x4003669	      1250	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003665	              0x90	                                     nop	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003666	            0xeb01	                           jmp 0x4003669	      1254	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003668	              0x90	                                     nop	      1258	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4003669	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400366e	      0xe912030000	                           jmp 0x4003985	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4003673	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x4003677	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x400367b	          0x83e001	                              and eax, 1	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x400367e	            0x84c0	                             test al, al	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x4003680	            0x750c	                           jne 0x400368e	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x4003682	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x4003686	          0x4889c7	                            mov rdi, rax	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x4003689	      0xe849eaffff	            call sym.parse_commit_header	      1268	pretty.c	WHILE_3	FUNCTION_39	CALL_51
0x400368e	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4003695	           0xfb600	                   movzx eax, byte [rax]	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4003698	           0xfbec0	                           movsx eax, al	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400369b	          0x83f861	                           cmp eax, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400369e	            0x7426	                            je 0x40036c6	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036a0	          0x83f861	                           cmp eax, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036a3	            0x7f0e	                            jg 0x40036b3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036a5	          0x83f842	                           cmp eax, 0x42	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036a8	     0xf84f3000000	                            je 0x40037a1	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036ae	      0xe920010000	                           jmp 0x40037d3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036b3	          0x83f863	                           cmp eax, 0x63	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036b6	            0x7463	                            je 0x400371b	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036b8	          0x83f865	                           cmp eax, 0x65	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036bb	     0xf84af000000	                            je 0x4003770	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036c1	      0xe90d010000	                           jmp 0x40037d3	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036c6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1274	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036ca	        0x488b4008	                mov rax, qword [rax + 8]	      1274	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036ce	        0x488d4818	                   lea rcx, [rax + 0x18]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036d2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036d6	    0x488b80880000	            mov rax, qword [rax + 0x88] 	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036dd	            0x89c7	                            mov edi, eax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036df	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036e3	    0x488b90800000	            mov rdx, qword [rax + 0x80] 	      1273	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40036ea	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036ee	          0x4801c2	                            add rdx, rax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036f1	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036f8	        0x4883c001	                              add rax, 1	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036fc	           0xfb600	                   movzx eax, byte [rax]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x40036ff	           0xfbef0	                           movsx esi, al	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4003702	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4003709	          0x4989c8	                             mov r8, rcx	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400370c	            0x89f9	                            mov ecx, edi	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400370e	          0x4889c7	                            mov rdi, rax	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4003711	      0xe89de6ffff	             call sym.format_person_part	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4003716	      0xe96a020000	                           jmp 0x4003985	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400371b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1278	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400371f	        0x488b4008	                mov rax, qword [rax + 8]	      1278	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4003723	        0x488d4818	                   lea rcx, [rax + 0x18]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003727	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400372b	    0x488b80980000	            mov rax, qword [rax + 0x98] 	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4003732	            0x89c7	                            mov edi, eax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003734	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4003738	    0x488b90900000	            mov rdx, qword [rax + 0x90] 	      1277	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400373f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003743	          0x4801c2	                            add rdx, rax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003746	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400374d	        0x4883c001	                              add rax, 1	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003751	           0xfb600	                   movzx eax, byte [rax]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003754	           0xfbef0	                           movsx esi, al	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003757	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400375e	          0x4989c8	                             mov r8, rcx	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003761	            0x89f9	                            mov ecx, edi	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003763	          0x4889c7	                            mov rdi, rax	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003766	      0xe848e6ffff	             call sym.format_person_part	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400376b	      0xe915020000	                           jmp 0x4003985	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4003770	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x4003774	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x4003778	          0x4885c0	                           test rax, rax	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x400377b	            0x741a	                            je 0x4003797	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x400377d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x4003781	        0x488b5058	            mov rdx, qword [rax + 0x58] 	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x4003785	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x400378c	          0x4889d6	                            mov rsi, rdx	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x400378f	          0x4889c7	                            mov rdi, rax	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x4003792	      0xe823cbffff	                  call sym.strbuf_addstr	      1281	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_54
0x4003797	      0xb801000000	                              mov eax, 1	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400379c	      0xe9e4010000	                           jmp 0x4003985	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40037a1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037a5	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037ac	        0x488d5001	                      lea rdx, [rax + 1]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037b0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037b4	          0x4801c2	                            add rdx, rax	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037b7	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037be	          0x4889d6	                            mov rsi, rdx	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037c1	          0x4889c7	                            mov rdi, rax	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037c4	      0xe8f1caffff	                  call sym.strbuf_addstr	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40037c9	      0xb801000000	                              mov eax, 1	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40037ce	      0xe9b2010000	                           jmp 0x4003985	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40037d3	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x40037d7	         0xfb64010	           movzx eax, byte [rax + 0x10] 	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x40037db	          0x83e002	                              and eax, 2	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x40037de	            0x84c0	                             test al, al	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x40037e0	            0x750c	                           jne 0x40037ee	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x40037e2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x40037e6	          0x4889c7	                            mov rdi, rax	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x40037e9	      0xe801edffff	           call sym.parse_commit_message	      1291	pretty.c	WHILE_3	FUNCTION_39	CALL_56
0x40037ee	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40037f5	           0xfb600	                   movzx eax, byte [rax]	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40037f8	           0xfbec0	                           movsx eax, al	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40037fb	          0x83f866	                           cmp eax, 0x66	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40037fe	            0x7443	                            je 0x4003843	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003800	          0x83f873	                           cmp eax, 0x73	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003803	            0x740a	                            je 0x400380f	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003805	          0x83f862	                           cmp eax, 0x62	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003808	            0x7467	                            je 0x4003871	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400380a	      0xe990000000	                           jmp 0x400389f	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400380f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003813	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x400381a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x400381e	        0x488d0c02	                    lea rcx, [rdx + rax]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003822	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003829	      0xba00000000	                              mov edx, 0	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x400382e	          0x4889ce	                            mov rsi, rcx	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003831	          0x4889c7	                            mov rdi, rax	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003834	      0xe800000000	                          call 0x4003839	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4003839	      0xb801000000	                              mov eax, 1	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400383e	      0xe942010000	                           jmp 0x4003985	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003843	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x4003847	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x400384e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x4003852	          0x4801c2	                            add rdx, rax	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x4003855	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x400385c	          0x4889d6	                            mov rsi, rdx	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x400385f	          0x4889c7	                            mov rdi, rax	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x4003862	      0xe861eaffff	       call sym.format_sanitized_subject	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x4003867	      0xb801000000	                              mov eax, 1	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400386c	      0xe914010000	                           jmp 0x4003985	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4003871	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x4003875	    0x488b90b00000	            mov rdx, qword [rax + 0xb0] 	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x400387c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x4003880	          0x4801c2	                            add rdx, rax	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x4003883	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x400388a	          0x4889d6	                            mov rsi, rdx	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x400388d	          0x4889c7	                            mov rdi, rax	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x4003890	      0xe825caffff	                  call sym.strbuf_addstr	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x4003895	      0xb801000000	                              mov eax, 1	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400389a	      0xe9e6000000	                           jmp 0x4003985	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400389f	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038a3	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038aa	      0xbe00000000	                              mov esi, 0	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038af	          0x4889c7	                            mov rdi, rax	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038b2	      0xe889c7ffff	                    call sym.skip_prefix	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038b7	            0x85c0	                           test eax, eax	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038b9	     0xf84c1000000	                            je 0x4003980	      1305	pretty.c	WHILE_3	FUNCTION_39	IF_25	CALL_60
0x40038bf	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x40038c7	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x40038cf	    0xc745e0000000	               mov dword [rbp - 0x20], 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x40038d6	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038da	           0xfb600	                   movzx eax, byte [rax]	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038dd	            0x3c3a	                            cmp al, 0x3a	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038df	            0x7551	                           jne 0x4003932	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038e1	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038e5	        0x4883c001	                              add rax, 1	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038e9	        0x48894580	             mov qword [rbp - 0x80], rax	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x40038ed	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x40038f1	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x40038f5	      0xbe00000000	                              mov esi, 0	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x40038fa	          0x4889c7	                            mov rdi, rax	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x40038fd	      0xe8d9f3ffff	          call sym.match_placeholder_arg	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4003902	            0x85c0	                           test eax, eax	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4003904	            0x7409	                            je 0x400390f	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4003906	    0xc745d8010000	               mov dword [rbp - 0x28], 1	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x400390d	            0xebde	                           jmp 0x40038ed	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x400390f	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4003913	        0x488d5580	                   lea rdx, [rbp - 0x80]	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4003917	      0xbe00000000	                              mov esi, 0	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x400391c	          0x4889c7	                            mov rdi, rax	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x400391f	      0xe8b7f3ffff	          call sym.match_placeholder_arg	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4003924	            0x85c0	                           test eax, eax	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4003926	            0x7409	                            je 0x4003931	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4003928	    0xc745e0010000	               mov dword [rbp - 0x20], 1	      1313	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28
0x400392f	            0xebbc	                           jmp 0x40038ed	      1316	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_4
0x4003931	              0x90	                                     nop	      1315	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_4
0x4003932	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4003936	           0xfb600	                   movzx eax, byte [rax]	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4003939	            0x3c29	                            cmp al, 0x29	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400393b	            0x7543	                           jne 0x4003980	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400393d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003941	    0x488b90a80000	            mov rdx, qword [rax + 0xa8] 	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003948	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x400394c	        0x488d0c02	                    lea rcx, [rdx + rax]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003950	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003954	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x400395b	          0x4889ce	                            mov rsi, rcx	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x400395e	          0x4889c7	                            mov rdi, rax	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003961	      0xe800000000	                          call 0x4003966	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4003966	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400396a	          0x4889c2	                            mov rdx, rax	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400396d	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4003974	          0x4829c2	                            sub rdx, rax	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4003977	          0x4889d0	                            mov rax, rdx	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400397a	        0x4883c001	                              add rax, 1	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x400397e	            0xeb05	                           jmp 0x4003985	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4003980	      0xb800000000	                              mov eax, 0	      1324	pretty.c	WHILE_3	FUNCTION_39
0x4003985	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4003989	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4003992	            0x7405	                            je 0x4003999	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4003994	      0xe800000000	                          call 0x4003999	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4003999	    0x4881c4a80000	                           add rsp, 0xa8	      1325	pretty.c	WHILE_3	FUNCTION_39
0x40039a0	              0x5b	                                 pop rbx	      1325	pretty.c	WHILE_3	FUNCTION_39
0x40039a1	              0x5d	                                 pop rbp	      1325	pretty.c	WHILE_3	FUNCTION_39
0x40039a2	              0xc3	                                     ret	      1325	pretty.c	WHILE_3	FUNCTION_39
istitlechar	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	25
0x4002281	              0x55	                                push rbp	       817	pretty.c	WHILE_3	FUNCTION_29
0x4002282	          0x4889e5	                            mov rbp, rsp	       817	pretty.c	WHILE_3	FUNCTION_29
0x4002285	            0x89f8	                            mov eax, edi	       817	pretty.c	WHILE_3	FUNCTION_29
0x4002287	          0x8845fc	                  mov byte [rbp - 4], al	       817	pretty.c	WHILE_3	FUNCTION_29
0x400228a	        0x807dfc60	                cmp byte [rbp - 4], 0x60	       819	pretty.c	WHILE_3	FUNCTION_29
0x400228e	            0x7e06	                           jle 0x4002296	       819	pretty.c	WHILE_3	FUNCTION_29
0x4002290	        0x807dfc7a	                cmp byte [rbp - 4], 0x7a	       818	pretty.c	WHILE_3	FUNCTION_29
0x4002294	            0x7e24	                           jle 0x40022ba	       818	pretty.c	WHILE_3	FUNCTION_29
0x4002296	        0x807dfc40	                cmp byte [rbp - 4], 0x40	       818	pretty.c	WHILE_3	FUNCTION_29
0x400229a	            0x7e06	                           jle 0x40022a2	       818	pretty.c	WHILE_3	FUNCTION_29
0x400229c	        0x807dfc5a	                cmp byte [rbp - 4], 0x5a	       818	pretty.c	WHILE_3	FUNCTION_29
0x40022a0	            0x7e18	                           jle 0x40022ba	       818	pretty.c	WHILE_3	FUNCTION_29
0x40022a2	        0x807dfc2f	                cmp byte [rbp - 4], 0x2f	       818	pretty.c	WHILE_3	FUNCTION_29
0x40022a6	            0x7e06	                           jle 0x40022ae	       818	pretty.c	WHILE_3	FUNCTION_29
0x40022a8	        0x807dfc39	                cmp byte [rbp - 4], 0x39	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022ac	            0x7e0c	                           jle 0x40022ba	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022ae	        0x807dfc2e	                cmp byte [rbp - 4], 0x2e	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022b2	            0x7406	                            je 0x40022ba	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022b4	        0x807dfc5f	                cmp byte [rbp - 4], 0x5f	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022b8	            0x7507	                           jne 0x40022c1	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022ba	      0xb801000000	                              mov eax, 1	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022bf	            0xeb05	                           jmp 0x40022c6	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022c1	      0xb800000000	                              mov eax, 0	       819	pretty.c	WHILE_3	FUNCTION_29
0x40022c6	              0x5d	                                 pop rbp	       820	pretty.c	WHILE_3	FUNCTION_29
0x40022c7	              0xc3	                                     ret	       820	pretty.c	WHILE_3	FUNCTION_29
hex2chr	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	31
0x4000336	              0x55	                                push rbp	      1281	cache.h	FUNCTION_91
0x4000337	          0x4889e5	                            mov rbp, rsp	      1281	cache.h	FUNCTION_91
0x400033a	              0x53	                                push rbx	      1281	cache.h	FUNCTION_91
0x400033b	        0x4883ec18	                           sub rsp, 0x18	      1281	cache.h	FUNCTION_91
0x400033f	        0x48897de0	             mov qword [rbp - 0x20], rdi	      1281	cache.h	FUNCTION_91
0x4000343	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1282	cache.h	FUNCTION_91	CALL_1
0x4000347	           0xfb600	                   movzx eax, byte [rax]	      1282	cache.h	FUNCTION_91	CALL_1
0x400034a	           0xfb6c0	                           movzx eax, al	      1282	cache.h	FUNCTION_91	CALL_1
0x400034d	            0x89c7	                            mov edi, eax	      1282	cache.h	FUNCTION_91	CALL_1
0x400034f	      0xe8c7ffffff	                         call sym.hexval	      1282	cache.h	FUNCTION_91	CALL_1
0x4000354	          0x8945f4	              mov dword [rbp - 0xc], eax	      1282	cache.h	FUNCTION_91	CALL_1
0x4000357	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1283	cache.h	FUNCTION_91	CALL_2
0x400035a	          0x83e0f0	                     and eax, 0xfffffff0	      1283	cache.h	FUNCTION_91	CALL_2
0x400035d	            0x85c0	                           test eax, eax	      1283	cache.h	FUNCTION_91	CALL_2
0x400035f	            0x7521	                           jne 0x4000382	      1283	cache.h	FUNCTION_91	CALL_2
0x4000361	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1283	cache.h	FUNCTION_91	CALL_2
0x4000364	          0xc1e004	                              shl eax, 4	      1283	cache.h	FUNCTION_91	CALL_2
0x4000367	            0x89c3	                            mov ebx, eax	      1283	cache.h	FUNCTION_91	CALL_2
0x4000369	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1283	cache.h	FUNCTION_91	CALL_2
0x400036d	        0x4883c001	                              add rax, 1	      1283	cache.h	FUNCTION_91	CALL_2
0x4000371	           0xfb600	                   movzx eax, byte [rax]	      1283	cache.h	FUNCTION_91	CALL_2
0x4000374	           0xfb6c0	                           movzx eax, al	      1283	cache.h	FUNCTION_91	CALL_2
0x4000377	            0x89c7	                            mov edi, eax	      1283	cache.h	FUNCTION_91	CALL_2
0x4000379	      0xe89dffffff	                         call sym.hexval	      1283	cache.h	FUNCTION_91	CALL_2
0x400037e	             0x9d8	                             or eax, ebx	      1283	cache.h	FUNCTION_91	CALL_2
0x4000380	            0xeb03	                           jmp 0x4000385	      1283	cache.h	FUNCTION_91	CALL_2
0x4000382	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1283	cache.h	FUNCTION_91	CALL_2
0x4000385	        0x4883c418	                           add rsp, 0x18	      1284	cache.h	FUNCTION_91
0x4000389	              0x5b	                                 pop rbx	      1284	cache.h	FUNCTION_91
0x400038a	              0x5d	                                 pop rbp	      1284	cache.h	FUNCTION_91
0x400038b	              0xc3	                                     ret	      1284	cache.h	FUNCTION_91
strbuf_avail	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	18
0x400017c	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_55
0x400017d	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_55
0x4000180	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_55
0x4000184	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x4000188	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_55
0x400018b	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_55
0x400018e	            0x741b	                            je 0x40001ab	       141	strbuf.h	FUNCTION_55
0x4000190	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x4000194	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_55
0x4000197	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_55
0x400019b	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_55
0x400019f	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_55
0x40001a2	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_55
0x40001a5	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_55
0x40001a9	            0xeb05	                           jmp 0x40001b0	       141	strbuf.h	FUNCTION_55
0x40001ab	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_55
0x40001b0	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_55
0x40001b1	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_55
format_subject	WHILE,0:DO,0:CALL,5:functions,0:IF,3:FOR,1:SWITCH,0:ELSE,0	64
0x4002408	              0x55	                                push rbp	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002409	          0x4889e5	                            mov rbp, rsp	       852	pretty.c	WHILE_3	FUNCTION_31
0x400240c	        0x4883ec40	                           sub rsp, 0x40	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002410	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002414	        0x488975d0	             mov qword [rbp - 0x30], rsi	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002418	        0x488955c8	             mov qword [rbp - 0x38], rdx	       852	pretty.c	WHILE_3	FUNCTION_31
0x400241c	    0x64488b042528	                mov rax, qword fs:[0x28]	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002425	        0x488945f8	                mov qword [rbp - 8], rax	       852	pretty.c	WHILE_3	FUNCTION_31
0x4002429	            0x31c0	                            xor eax, eax	       852	pretty.c	WHILE_3	FUNCTION_31
0x400242b	    0xc745ec010000	               mov dword [rbp - 0x14], 1	       853	pretty.c	WHILE_3	FUNCTION_31
0x4002432	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       856	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x4002436	        0x488945f0	             mov qword [rbp - 0x10], rax	       856	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x400243a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x400243e	          0x4889c7	                            mov rdi, rax	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x4002441	      0xe897e7ffff	                   call sym.get_one_line	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x4002446	          0x8945e8	             mov dword [rbp - 0x18], eax	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x4002449	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x400244c	            0x4898	                                    cdqe	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x400244e	        0x480145d0	            add qword [rbp - 0x30], rax 	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x4002452	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002455	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002457	            0x7474	                            je 0x40024cd	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002459	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400245d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002461	          0x4889d6	                            mov rsi, rdx	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002464	          0x4889c7	                            mov rdi, rax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002467	      0xe854f3ffff	                  call sym.is_blank_line	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400246c	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400246e	            0x755d	                           jne 0x40024cd	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4002470	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x4002475	            0x746b	                            je 0x40024e2	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x4002477	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x400247a	          0x83c002	                              add eax, 2	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x400247d	          0x4863d0	                         movsxd rdx, eax	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x4002480	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x4002484	          0x4889d6	                            mov rsi, rdx	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x4002487	          0x4889c7	                            mov rdi, rax	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x400248a	      0xe800000000	                          call 0x400248f	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x400248f	        0x837dec00	               cmp dword [rbp - 0x14], 0	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x4002493	            0x7513	                           jne 0x40024a8	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x4002495	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x4002499	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x400249d	          0x4889d6	                            mov rsi, rdx	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x40024a0	          0x4889c7	                            mov rdi, rax	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x40024a3	      0xe812deffff	                  call sym.strbuf_addstr	       867	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_4
0x40024a8	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024ab	          0x4863d0	                         movsxd rdx, eax	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024ae	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024b2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024b6	          0x4889ce	                            mov rsi, rcx	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024b9	          0x4889c7	                            mov rdi, rax	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024bc	      0xe800000000	                          call 0x40024c1	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40024c1	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x40024c8	      0xe965ffffff	                           jmp 0x4002432	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x40024cd	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       871	pretty.c	WHILE_3	FUNCTION_31
0x40024d1	        0x488b4df8	                mov rcx, qword [rbp - 8]	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024d5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024de	            0x740d	                            je 0x40024ed	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024e0	            0xeb06	                           jmp 0x40024e8	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024e2	              0x90	                                     nop	       864	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x40024e3	      0xe94affffff	                           jmp 0x4002432	       870	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x40024e8	      0xe800000000	                          call 0x40024ed	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024ed	              0xc9	                                   leave	       872	pretty.c	WHILE_3	FUNCTION_31
0x40024ee	              0xc3	                                     ret	       872	pretty.c	WHILE_3	FUNCTION_31
is_rfc2047_special	WHILE,0:DO,0:CALL,1:functions,0:IF,3:FOR,0:SWITCH,0:ELSE,0	60
0x4000e14	              0x55	                                push rbp	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e15	          0x4889e5	                            mov rbp, rsp	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e18	        0x4883ec08	                              sub rsp, 8	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e1c	            0x89f8	                            mov eax, edi	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e1e	          0x8975f8	                mov dword [rbp - 8], esi	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e21	          0x8845fc	                  mov byte [rbp - 4], al	       291	pretty.c	WHILE_3	FUNCTION_15
0x4000e24	         0xfbe45fc	               movsx eax, byte [rbp - 4]	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e28	            0x89c7	                            mov edi, eax	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e2a	      0xe8eafdffff	                      call sym.non_ascii	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e2f	            0x85c0	                           test eax, eax	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e31	            0x750c	                           jne 0x4000e3f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e33	        0x807dfc1f	                cmp byte [rbp - 4], 0x1f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e37	            0x7e06	                           jle 0x4000e3f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e39	        0x807dfc7f	                cmp byte [rbp - 4], 0x7f	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e3d	            0x750a	                           jne 0x4000e49	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_1
0x4000e3f	      0xb801000000	                              mov eax, 1	       308	pretty.c	WHILE_3	FUNCTION_15	IF_1
0x4000e44	      0xe984000000	                           jmp 0x4000ecd	       308	pretty.c	WHILE_3	FUNCTION_15	IF_1
0x4000e49	         0xfb645fc	               movzx eax, byte [rbp - 4]	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e4d	           0xfb6c0	                           movzx eax, al	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e50	            0x4898	                                    cdqe	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e52	     0xfb680000000	                   movzx eax, byte [rax]	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e59	           0xfb6c0	                           movzx eax, al	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e5c	          0x83e001	                              and eax, 1	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e5f	            0x85c0	                           test eax, eax	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e61	            0x7512	                           jne 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e63	        0x807dfc3d	                cmp byte [rbp - 4], 0x3d	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e67	            0x740c	                            je 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e69	        0x807dfc3f	                cmp byte [rbp - 4], 0x3f	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e6d	            0x7406	                            je 0x4000e75	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e6f	        0x807dfc5f	                cmp byte [rbp - 4], 0x5f	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e73	            0x7507	                           jne 0x4000e7c	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e75	      0xb801000000	                              mov eax, 1	       316	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e7a	            0xeb51	                           jmp 0x4000ecd	       316	pretty.c	WHILE_3	FUNCTION_15	IF_2
0x4000e7c	        0x837df801	                  cmp dword [rbp - 8], 1	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x4000e80	            0x7407	                            je 0x4000e89	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x4000e82	      0xb800000000	                              mov eax, 0	       336	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x4000e87	            0xeb44	                           jmp 0x4000ecd	       336	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x4000e89	         0xfb645fc	               movzx eax, byte [rbp - 4]	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e8d	           0xfb6c0	                           movzx eax, al	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e90	            0x4898	                                    cdqe	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e92	     0xfb680000000	                   movzx eax, byte [rax]	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e99	           0xfb6c0	                           movzx eax, al	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e9c	          0x83e006	                              and eax, 6	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000e9f	            0x85c0	                           test eax, eax	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ea1	            0x7525	                           jne 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ea3	        0x807dfc21	                cmp byte [rbp - 4], 0x21	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ea7	            0x741f	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ea9	        0x807dfc2a	                cmp byte [rbp - 4], 0x2a	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ead	            0x7419	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000eaf	        0x807dfc2b	                cmp byte [rbp - 4], 0x2b	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000eb3	            0x7413	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000eb5	        0x807dfc2d	                cmp byte [rbp - 4], 0x2d	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000eb9	            0x740d	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ebb	        0x807dfc2f	                cmp byte [rbp - 4], 0x2f	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ebf	            0x7407	                            je 0x4000ec8	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ec1	      0xb801000000	                              mov eax, 1	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ec6	            0xeb05	                           jmp 0x4000ecd	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ec8	      0xb800000000	                              mov eax, 0	       339	pretty.c	WHILE_3	FUNCTION_15
0x4000ecd	              0xc9	                                   leave	       340	pretty.c	WHILE_3	FUNCTION_15
0x4000ece	              0xc3	                                     ret	       340	pretty.c	WHILE_3	FUNCTION_15
format_reflog_person	WHILE,0:DO,0:CALL,3:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,0	34
0x4002740	              0x55	                                push rbp	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002741	          0x4889e5	                            mov rbp, rsp	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002744	        0x4883ec30	                           sub rsp, 0x30	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002748	        0x48897de8	             mov qword [rbp - 0x18], rdi	       922	pretty.c	WHILE_3	FUNCTION_35
0x400274c	            0x89f0	                            mov eax, esi	       922	pretty.c	WHILE_3	FUNCTION_35
0x400274e	        0x488955d8	             mov qword [rbp - 0x28], rdx	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002752	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002756	          0x8845e4	               mov byte [rbp - 0x1c], al	       922	pretty.c	WHILE_3	FUNCTION_35
0x4002759	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x400275e	            0x7507	                           jne 0x4002767	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x4002760	      0xb802000000	                              mov eax, 2	       926	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x4002765	            0xeb49	                           jmp 0x40027b0	       926	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x4002767	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x400276b	          0x4889c7	                            mov rdi, rax	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x400276e	      0xe800000000	                          call 0x4002773	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x4002773	        0x488945f8	                mov qword [rbp - 8], rax	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x4002777	      0x48837df800	                  cmp qword [rbp - 8], 0	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x400277c	            0x7507	                           jne 0x4002785	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x400277e	      0xb802000000	                              mov eax, 2	       930	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x4002783	            0xeb2b	                           jmp 0x40027b0	       930	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x4002785	        0x488b45f8	                mov rax, qword [rbp - 8]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x4002789	          0x4889c7	                            mov rdi, rax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x400278c	      0xe800000000	                          call 0x4002791	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x4002791	            0x89c7	                            mov edi, eax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x4002793	         0xfbe75e4	            movsx esi, byte [rbp - 0x1c]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x4002797	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x400279b	        0x488b55f8	                mov rdx, qword [rbp - 8]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x400279f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40027a3	          0x4989c8	                             mov r8, rcx	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40027a6	            0x89f9	                            mov ecx, edi	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40027a8	          0x4889c7	                            mov rdi, rax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40027ab	      0xe803f6ffff	             call sym.format_person_part	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40027b0	              0xc9	                                   leave	       933	pretty.c	WHILE_3	FUNCTION_35
0x40027b1	              0xc3	                                     ret	       933	pretty.c	WHILE_3	FUNCTION_35
commit_format_is_empty	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	14
0x40003eb	              0x55	                                push rbp	        31	pretty.c	WHILE_3	FUNCTION_1
0x40003ec	          0x4889e5	                            mov rbp, rsp	        31	pretty.c	WHILE_3	FUNCTION_1
0x40003ef	          0x897dfc	                mov dword [rbp - 4], edi	        31	pretty.c	WHILE_3	FUNCTION_1
0x40003f2	        0x837dfc08	                  cmp dword [rbp - 4], 8	        32	pretty.c	WHILE_3	FUNCTION_1
0x40003f6	            0x7515	                           jne 0x400040d	        32	pretty.c	WHILE_3	FUNCTION_1
0x40003f8	    0x488b05000000	            mov rax, qword [0x040003ff] 	        32	pretty.c	WHILE_3	FUNCTION_1
0x40003ff	           0xfb600	                   movzx eax, byte [rax]	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000402	            0x84c0	                             test al, al	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000404	            0x7507	                           jne 0x400040d	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000406	      0xb801000000	                              mov eax, 1	        32	pretty.c	WHILE_3	FUNCTION_1
0x400040b	            0xeb05	                           jmp 0x4000412	        32	pretty.c	WHILE_3	FUNCTION_1
0x400040d	      0xb800000000	                              mov eax, 0	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000412	              0x5d	                                 pop rbp	        33	pretty.c	WHILE_3	FUNCTION_1
0x4000413	              0xc3	                                     ret	        33	pretty.c	WHILE_3	FUNCTION_1
last_line_length	WHILE,0:DO,0:CALL,0:functions,0:IF,1:FOR,1:SWITCH,0:ELSE,0	30
0x4000d0e	              0x55	                                push rbp	       254	pretty.c	WHILE_3	FUNCTION_13
0x4000d0f	          0x4889e5	                            mov rbp, rsp	       254	pretty.c	WHILE_3	FUNCTION_13
0x4000d12	        0x48897de8	             mov qword [rbp - 0x18], rdi	       254	pretty.c	WHILE_3	FUNCTION_13
0x4000d16	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d1a	        0x488b4008	                mov rax, qword [rax + 8]	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d1e	          0x83e801	                              sub eax, 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d21	          0x8945fc	                mov dword [rbp - 4], eax	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d24	            0xeb1b	                           jmp 0x4000d41	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d2a	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d2e	          0x8b45fc	                mov eax, dword [rbp - 4]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d31	            0x4898	                                    cdqe	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d33	          0x4801d0	                            add rax, rdx	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d36	           0xfb600	                   movzx eax, byte [rax]	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d39	            0x3c0a	                             cmp al, 0xa	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d3b	            0x740c	                            je 0x4000d49	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d3d	        0x836dfc01	                  sub dword [rbp - 4], 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d41	        0x837dfc00	                  cmp dword [rbp - 4], 0	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d45	            0x79df	                           jns 0x4000d26	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d47	            0xeb01	                           jmp 0x4000d4a	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000d49	              0x90	                                     nop	       260	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000d4a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d4e	        0x488b4008	                mov rax, qword [rax + 8]	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d52	            0x89c2	                            mov edx, eax	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d54	          0x8b45fc	                mov eax, dword [rbp - 4]	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d57	            0x29c2	                            sub edx, eax	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d59	            0x89d0	                            mov eax, edx	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d5b	          0x83e801	                              sub eax, 1	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000d5e	              0x5d	                                 pop rbp	       262	pretty.c	WHILE_3	FUNCTION_13
0x4000d5f	              0xc3	                                     ret	       262	pretty.c	WHILE_3	FUNCTION_13
replace_encoding_header	WHILE,1:DO,0:CALL,13:functions,0:IF,3:FOR,0:SWITCH,0:ELSE,1	110
0x4001a07	              0x55	                                push rbp	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a08	          0x4889e5	                            mov rbp, rsp	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a0b	              0x53	                                push rbx	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a0c	        0x4883ec58	                           sub rsp, 0x58	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a10	        0x48897da8	             mov qword [rbp - 0x58], rdi	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a14	        0x488975a0	             mov qword [rbp - 0x60], rsi	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a18	    0x64488b042528	                mov rax, qword fs:[0x28]	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a21	        0x488945e8	             mov qword [rbp - 0x18], rax	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a25	            0x31c0	                            xor eax, eax	       568	pretty.c	WHILE_3	FUNCTION_24
0x4001a27	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x4001a2f	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x4001a37	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x4001a3f	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       571	pretty.c	WHILE_3	FUNCTION_24
0x4001a43	        0x488945b8	             mov qword [rbp - 0x48], rax	       571	pretty.c	WHILE_3	FUNCTION_24
0x4001a47	            0xeb35	                           jmp 0x4001a7e	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a49	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x4001a4d	      0xbe0a000000	                            mov esi, 0xa	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x4001a52	          0x4889c7	                            mov rdi, rax	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x4001a55	      0xe800000000	                          call 0x4001a5a	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x4001a5a	        0x488945b8	             mov qword [rbp - 0x48], rax	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x4001a5e	      0x48837db800	               cmp qword [rbp - 0x48], 0	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a63	            0x7410	                            je 0x4001a75	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a65	      0x488345b801	               add qword [rbp - 0x48], 1	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a6a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a6e	           0xfb600	                   movzx eax, byte [rax]	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a71	            0x3c0a	                             cmp al, 0xa	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a73	            0x7509	                           jne 0x4001a7e	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a75	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       577	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a79	      0xe911010000	                           jmp 0x4001b8f	       577	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x4001a7e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a82	      0xbe00000000	                              mov esi, 0	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a87	          0x4889c7	                            mov rdi, rax	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a8a	      0xe800000000	                          call 0x4001a8f	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a8f	            0x85c0	                           test eax, eax	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a91	            0x74b6	                            je 0x4001a49	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001a93	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001a97	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001a9b	          0x4829c2	                            sub rdx, rax	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001a9e	          0x4889d0	                            mov rax, rdx	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001aa1	        0x488945c0	             mov qword [rbp - 0x40], rax	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001aa5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001aa9	      0xbe0a000000	                            mov esi, 0xa	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001aae	          0x4889c7	                            mov rdi, rax	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001ab1	      0xe800000000	                          call 0x4001ab6	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001ab6	        0x488945b8	             mov qword [rbp - 0x48], rax	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001aba	      0x48837db800	               cmp qword [rbp - 0x48], 0	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x4001abf	            0x7509	                           jne 0x4001aca	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x4001ac1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       582	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x4001ac5	      0xe9c5000000	                           jmp 0x4001b8f	       582	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x4001aca	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ace	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ad2	          0x4829c2	                            sub rdx, rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ad5	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ad9	      0xb901000000	                              mov ecx, 1	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ade	          0x4829c1	                            sub rcx, rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ae1	          0x4889c8	                            mov rax, rcx	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ae4	          0x4801d0	                            add rax, rdx	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001ae7	        0x488945c8	             mov qword [rbp - 0x38], rax	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001aeb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001aef	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001af2	      0xe800000000	                          call 0x4001af7	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001af7	        0x488d5801	                      lea rbx, [rax + 1]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001afb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001aff	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b02	      0xe800000000	                          call 0x4001b07	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b07	          0x4889c2	                            mov rdx, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b0a	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b0e	        0x488d45d0	                   lea rax, [rbp - 0x30]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b12	          0x4889d9	                            mov rcx, rbx	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b15	          0x4889c7	                            mov rdi, rax	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b18	      0xe800000000	                          call 0x4001b1d	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001b1d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001b21	          0x4889c7	                            mov rdi, rax	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001b24	      0xe800000000	                          call 0x4001b29	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001b29	            0x85c0	                           test eax, eax	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001b2b	            0x7419	                            je 0x4001b46	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001b2d	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b31	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b35	        0x488d45d0	                   lea rax, [rbp - 0x30]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b39	          0x4889ce	                            mov rsi, rcx	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b3c	          0x4889c7	                            mov rdi, rax	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b3f	      0xe800000000	                          call 0x4001b44	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b44	            0xeb38	                           jmp 0x4001b7e	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001b46	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b4a	          0x4889c7	                            mov rdi, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b4d	      0xe800000000	                          call 0x4001b52	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b52	          0x4889c1	                            mov rcx, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b55	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b59	        0x488d78f6	                    lea rdi, [rax - 0xa]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b5d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b61	        0x488d7009	                      lea rsi, [rax + 9]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b65	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b69	        0x488d45d0	                   lea rax, [rbp - 0x30]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b6d	          0x4989c8	                             mov r8, rcx	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b70	          0x4889d1	                            mov rcx, rdx	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b73	          0x4889fa	                            mov rdx, rdi	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b76	          0x4889c7	                            mov rdi, rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b79	      0xe800000000	                          call 0x4001b7e	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001b7e	        0x488d45d0	                   lea rax, [rbp - 0x30]	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x4001b82	      0xbe00000000	                              mov esi, 0	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x4001b87	          0x4889c7	                            mov rdi, rax	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x4001b8a	      0xe800000000	                          call 0x4001b8f	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x4001b8f	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001b93	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001b9c	            0x7405	                            je 0x4001ba3	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001b9e	      0xe800000000	                          call 0x4001ba3	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001ba3	        0x4883c458	                           add rsp, 0x58	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001ba7	              0x5b	                                 pop rbx	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001ba8	              0x5d	                                 pop rbp	       596	pretty.c	WHILE_3	FUNCTION_24
0x4001ba9	              0xc3	                                     ret	       596	pretty.c	WHILE_3	FUNCTION_24
mailmap_name	WHILE,0:DO,0:CALL,3:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	37
0x4001d23	              0x55	                                push rbp	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d24	          0x4889e5	                            mov rbp, rsp	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d27	        0x4883ec20	                           sub rsp, 0x20	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d2b	        0x48897df8	                mov qword [rbp - 8], rdi	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d2f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d33	        0x488955e8	             mov qword [rbp - 0x18], rdx	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d37	        0x48894de0	             mov qword [rbp - 0x20], rcx	       668	pretty.c	WHILE_3	FUNCTION_26
0x4001d3b	    0x488b05000000	            mov rax, qword [0x04001d42] 	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x4001d42	          0x4885c0	                           test rax, rax	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x4001d45	            0x752a	                           jne 0x4001d71	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x4001d47	      0xbe20000000	                           mov esi, 0x20	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4001d4c	      0xbf01000000	                              mov edi, 1	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4001d51	      0xe800000000	                          call 0x4001d56	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4001d56	    0x488905000000	            mov qword [0x04001d5d], rax 	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4001d5d	    0x488b05000000	            mov rax, qword [0x04001d64] 	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4001d64	      0xbe00000000	                              mov esi, 0	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4001d69	          0x4889c7	                            mov rdi, rax	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4001d6c	      0xe800000000	                          call 0x4001d71	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4001d71	    0x488b05000000	            mov rax, qword [0x04001d78] 	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d78	          0x8b4008	                mov eax, dword [rax + 8]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d7b	            0x85c0	                           test eax, eax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d7d	            0x742d	                            je 0x4001dac	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d7f	    0x488b05000000	            mov rax, qword [0x04001d86] 	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d86	        0x488b7de0	             mov rdi, qword [rbp - 0x20]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d8a	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d8e	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d92	        0x488b75f8	                mov rsi, qword [rbp - 8]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d96	          0x4989f8	                             mov r8, rdi	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d99	          0x4889c7	                            mov rdi, rax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001d9c	      0xe800000000	                          call 0x4001da1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001da1	            0x85c0	                           test eax, eax	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001da3	            0x7407	                            je 0x4001dac	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001da5	      0xb801000000	                              mov eax, 1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001daa	            0xeb05	                           jmp 0x4001db1	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001dac	      0xb800000000	                              mov eax, 0	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4001db1	              0xc9	                                   leave	       675	pretty.c	WHILE_3	FUNCTION_26
0x4001db2	              0xc3	                                     ret	       675	pretty.c	WHILE_3	FUNCTION_26
skip_blank_lines	WHILE,0:DO,0:CALL,2:functions,0:IF,2:FOR,1:SWITCH,0:ELSE,0	36
0x400181f	              0x55	                                push rbp	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001820	          0x4889e5	                            mov rbp, rsp	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001823	        0x4883ec20	                           sub rsp, 0x20	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001827	        0x48897de8	             mov qword [rbp - 0x18], rdi	       524	pretty.c	WHILE_3	FUNCTION_21
0x400182b	    0x64488b042528	                mov rax, qword fs:[0x28]	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001834	        0x488945f8	                mov qword [rbp - 8], rax	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001838	            0x31c0	                            xor eax, eax	       524	pretty.c	WHILE_3	FUNCTION_21
0x400183a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x400183e	          0x4889c7	                            mov rdi, rax	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001841	      0xe897f3ffff	                   call sym.get_one_line	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001846	          0x8945f4	              mov dword [rbp - 0xc], eax	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001849	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       527	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x400184c	          0x8945f0	             mov dword [rbp - 0x10], eax	       527	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x400184f	        0x837df400	                cmp dword [rbp - 0xc], 0	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x4001853	            0x7422	                            je 0x4001877	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x4001855	        0x488d55f0	                   lea rdx, [rbp - 0x10]	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001859	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x400185d	          0x4889d6	                            mov rsi, rdx	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001860	          0x4889c7	                            mov rdi, rax	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001863	      0xe858ffffff	                  call sym.is_blank_line	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001868	            0x85c0	                           test eax, eax	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x400186a	            0x740e	                            je 0x400187a	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x400186c	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x400186f	            0x4898	                                    cdqe	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001871	        0x480145e8	            add qword [rbp - 0x18], rax 	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001875	            0xebc3	                           jmp 0x400183a	       533	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001877	              0x90	                                     nop	       529	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x4001878	            0xeb01	                           jmp 0x400187b	       529	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x400187a	              0x90	                                     nop	       531	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2
0x400187b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       534	pretty.c	WHILE_3	FUNCTION_21
0x400187f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       535	pretty.c	WHILE_3	FUNCTION_21
0x4001883	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       535	pretty.c	WHILE_3	FUNCTION_21
0x400188c	            0x7405	                            je 0x4001893	       535	pretty.c	WHILE_3	FUNCTION_21
0x400188e	      0xe800000000	                          call 0x4001893	       535	pretty.c	WHILE_3	FUNCTION_21
0x4001893	              0xc9	                                   leave	       535	pretty.c	WHILE_3	FUNCTION_21
0x4001894	              0xc3	                                     ret	       535	pretty.c	WHILE_3	FUNCTION_21
get_header	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	30
0x4001996	              0x55	                                push rbp	       561	pretty.c	WHILE_3	FUNCTION_23
0x4001997	          0x4889e5	                            mov rbp, rsp	       561	pretty.c	WHILE_3	FUNCTION_23
0x400199a	        0x4883ec30	                           sub rsp, 0x30	       561	pretty.c	WHILE_3	FUNCTION_23
0x400199e	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       561	pretty.c	WHILE_3	FUNCTION_23
0x40019a2	        0x488975d0	             mov qword [rbp - 0x30], rsi	       561	pretty.c	WHILE_3	FUNCTION_23
0x40019a6	    0x64488b042528	                mov rax, qword fs:[0x28]	       561	pretty.c	WHILE_3	FUNCTION_23
0x40019af	        0x488945f8	                mov qword [rbp - 8], rax	       561	pretty.c	WHILE_3	FUNCTION_23
0x40019b3	            0x31c0	                            xor eax, eax	       561	pretty.c	WHILE_3	FUNCTION_23
0x40019b5	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019b9	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019bd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019c1	          0x4889ce	                            mov rsi, rcx	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019c4	          0x4889c7	                            mov rdi, rax	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019c7	      0xe800000000	                          call 0x40019cc	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019cc	        0x488945f0	             mov qword [rbp - 0x10], rax	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40019d0	      0x48837df000	               cmp qword [rbp - 0x10], 0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019d5	            0x7415	                            je 0x40019ec	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019d7	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019db	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019df	          0x4889d6	                            mov rsi, rdx	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019e2	          0x4889c7	                            mov rdi, rax	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019e5	      0xe800000000	                          call 0x40019ea	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019ea	            0xeb05	                           jmp 0x40019f1	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019ec	      0xb800000000	                              mov eax, 0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40019f1	        0x488b4df8	                mov rcx, qword [rbp - 8]	       565	pretty.c	WHILE_3	FUNCTION_23
0x40019f5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       565	pretty.c	WHILE_3	FUNCTION_23
0x40019fe	            0x7405	                            je 0x4001a05	       565	pretty.c	WHILE_3	FUNCTION_23
0x4001a00	      0xe800000000	                          call 0x4001a05	       565	pretty.c	WHILE_3	FUNCTION_23
0x4001a05	              0xc9	                                   leave	       565	pretty.c	WHILE_3	FUNCTION_23
0x4001a06	              0xc3	                                     ret	       565	pretty.c	WHILE_3	FUNCTION_23
rewrap_message_tail	WHILE,0:DO,0:CALL,1:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,0	55
0x4002670	              0x55	                                push rbp	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002671	          0x4889e5	                            mov rbp, rsp	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002674	        0x4883ec30	                           sub rsp, 0x30	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002678	        0x48897df8	                mov qword [rbp - 8], rdi	       906	pretty.c	WHILE_3	FUNCTION_34
0x400267c	        0x488975f0	             mov qword [rbp - 0x10], rsi	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002680	        0x488955e8	             mov qword [rbp - 0x18], rdx	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002684	        0x48894de0	             mov qword [rbp - 0x20], rcx	       906	pretty.c	WHILE_3	FUNCTION_34
0x4002688	        0x4c8945d8	              mov qword [rbp - 0x28], r8	       906	pretty.c	WHILE_3	FUNCTION_34
0x400268c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4002690	        0x488b4060	            mov rax, qword [rax + 0x60] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4002694	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4002698	            0x7520	                           jne 0x40026ba	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400269a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400269e	        0x488b4068	            mov rax, qword [rax + 0x68] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026a2	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026a6	            0x7512	                           jne 0x40026ba	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026a8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       908	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026ac	        0x488b4070	            mov rax, qword [rax + 0x70] 	       908	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026b0	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026b4	     0xf8483000000	                            je 0x400273d	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x40026ba	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026be	    0x488b90b80000	            mov rdx, qword [rax + 0xb8] 	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026c5	        0x488b45f8	                mov rax, qword [rbp - 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026c9	        0x488b4008	                mov rax, qword [rax + 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026cd	          0x4839c2	                            cmp rdx, rax	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026d0	            0x7332	                           jae 0x4002704	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x40026d2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026d6	        0x488b7870	            mov rdi, qword [rax + 0x70] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026da	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026de	        0x488b4868	            mov rcx, qword [rax + 0x68] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026e2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026e6	        0x488b5060	            mov rdx, qword [rax + 0x60] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026ea	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026ee	    0x488bb0b80000	            mov rsi, qword [rax + 0xb8] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026f5	        0x488b45f8	                mov rax, qword [rbp - 8]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026f9	          0x4989f8	                             mov r8, rdi	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026fc	          0x4889c7	                            mov rdi, rax	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40026ff	      0xe8a0feffff	                    call sym.strbuf_wrap	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4002704	        0x488b45f8	                mov rax, qword [rbp - 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x4002708	        0x488b5008	                mov rdx, qword [rax + 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x400270c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       912	pretty.c	WHILE_3	FUNCTION_34
0x4002710	    0x488990b80000	             mov qword [rax + 0xb8], rdx	       912	pretty.c	WHILE_3	FUNCTION_34
0x4002717	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       913	pretty.c	WHILE_3	FUNCTION_34
0x400271b	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       913	pretty.c	WHILE_3	FUNCTION_34
0x400271f	        0x48895060	             mov qword [rax + 0x60], rdx	       913	pretty.c	WHILE_3	FUNCTION_34
0x4002723	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       914	pretty.c	WHILE_3	FUNCTION_34
0x4002727	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       914	pretty.c	WHILE_3	FUNCTION_34
0x400272b	        0x48895068	             mov qword [rax + 0x68], rdx	       914	pretty.c	WHILE_3	FUNCTION_34
0x400272f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       915	pretty.c	WHILE_3	FUNCTION_34
0x4002733	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       915	pretty.c	WHILE_3	FUNCTION_34
0x4002737	        0x48895070	             mov qword [rax + 0x70], rdx	       915	pretty.c	WHILE_3	FUNCTION_34
0x400273b	            0xeb01	                           jmp 0x400273e	       915	pretty.c	WHILE_3	FUNCTION_34
0x400273d	              0x90	                                     nop	       909	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400273e	              0xc9	                                   leave	       916	pretty.c	WHILE_3	FUNCTION_34
0x400273f	              0xc3	                                     ret	       916	pretty.c	WHILE_3	FUNCTION_34
add_rfc822_quoted	WHILE,0:DO,0:CALL,5:functions,0:IF,0:FOR,1:SWITCH,1:ELSE,0	54
0x4000d60	              0x55	                                push rbp	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d61	          0x4889e5	                            mov rbp, rsp	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d64	        0x4883ec30	                           sub rsp, 0x30	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d68	        0x48897de8	             mov qword [rbp - 0x18], rdi	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d6c	        0x488975e0	             mov qword [rbp - 0x20], rsi	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d70	          0x8955dc	             mov dword [rbp - 0x24], edx	       265	pretty.c	WHILE_3	FUNCTION_14
0x4000d73	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d76	          0x83c002	                              add eax, 2	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d79	          0x4863d0	                         movsxd rdx, eax	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d7c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d80	          0x4889d6	                            mov rsi, rdx	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d83	          0x4889c7	                            mov rdi, rax	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d86	      0xe800000000	                          call 0x4000d8b	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x4000d8b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0x4000d8f	      0xbe22000000	                           mov esi, 0x22	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0x4000d94	          0x4889c7	                            mov rdi, rax	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0x4000d97	      0xe8b0f4ffff	                   call sym.strbuf_addch	       271	pretty.c	WHILE_3	FUNCTION_14	CALL_2
0x4000d9c	    0xc745fc000000	                  mov dword [rbp - 4], 0	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000da3	            0xeb53	                           jmp 0x4000df8	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000da5	          0x8b45fc	                mov eax, dword [rbp - 4]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000da8	          0x4863d0	                         movsxd rdx, eax	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000dab	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000daf	          0x4801d0	                            add rax, rdx	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000db2	           0xfb600	                   movzx eax, byte [rax]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000db5	           0xfbec0	                           movsx eax, al	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000db8	          0x83f822	                           cmp eax, 0x22	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000dbb	            0x7405	                            je 0x4000dc2	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000dbd	          0x83f85c	                           cmp eax, 0x5c	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000dc0	            0x7511	                           jne 0x4000dd3	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4000dc2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0x4000dc6	      0xbe5c000000	                           mov esi, 0x5c	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0x4000dcb	          0x4889c7	                            mov rdi, rax	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0x4000dce	      0xe879f4ffff	                   call sym.strbuf_addch	       276	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_3
0x4000dd3	          0x8b45fc	                mov eax, dword [rbp - 4]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000dd6	          0x4863d0	                         movsxd rdx, eax	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000dd9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000ddd	          0x4801d0	                            add rax, rdx	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000de0	           0xfb600	                   movzx eax, byte [rax]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000de3	           0xfbed0	                           movsx edx, al	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000de6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000dea	            0x89d6	                            mov esi, edx	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000dec	          0x4889c7	                            mov rdi, rax	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000def	      0xe858f4ffff	                   call sym.strbuf_addch	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x4000df4	        0x8345fc01	                  add dword [rbp - 4], 1	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000df8	          0x8b45fc	                mov eax, dword [rbp - 4]	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000dfb	          0x3b45dc	             cmp eax, dword [rbp - 0x24]	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000dfe	            0x7ca5	                            jl 0x4000da5	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x4000e00	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0x4000e04	      0xbe22000000	                           mov esi, 0x22	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0x4000e09	          0x4889c7	                            mov rdi, rax	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0x4000e0c	      0xe83bf4ffff	                   call sym.strbuf_addch	       282	pretty.c	WHILE_3	FUNCTION_14	CALL_5
0x4000e11	              0x90	                                     nop	       283	pretty.c	WHILE_3	FUNCTION_14
0x4000e12	              0xc9	                                   leave	       283	pretty.c	WHILE_3	FUNCTION_14
0x4000e13	              0xc3	                                     ret	       283	pretty.c	WHILE_3	FUNCTION_14
strbuf_addch	WHILE,0:DO,0:CALL,2:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	33
0x400024c	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_57
0x400024d	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_57
0x4000250	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_57
0x4000254	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_57
0x4000258	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_57
0x400025b	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x400025f	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x4000262	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x4000267	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x400026a	            0x7511	                           jne 0x400027d	       227	strbuf.h	FUNCTION_57	IF_1	CALL_1
0x400026c	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_57	CALL_2
0x4000270	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_57	CALL_2
0x4000275	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_57	CALL_2
0x4000278	      0xe800000000	                          call 0x400027d	       228	strbuf.h	FUNCTION_57	CALL_2
0x400027d	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x4000281	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_57
0x4000285	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x4000289	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_57
0x400028d	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_57
0x4000291	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_57
0x4000295	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_57
0x4000299	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_57
0x400029c	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_57
0x400029f	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_57
0x40002a1	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_57
0x40002a5	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_57
0x40002a9	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_57
0x40002ad	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_57
0x40002b1	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_57
0x40002b4	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_57
0x40002b7	              0x90	                                     nop	       231	strbuf.h	FUNCTION_57
0x40002b8	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_57
0x40002b9	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_57
non_ascii	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	14
0x4000c19	              0x55	                                push rbp	       206	pretty.c	WHILE_3	FUNCTION_9
0x4000c1a	          0x4889e5	                            mov rbp, rsp	       206	pretty.c	WHILE_3	FUNCTION_9
0x4000c1d	          0x897dfc	                mov dword [rbp - 4], edi	       206	pretty.c	WHILE_3	FUNCTION_9
0x4000c20	          0x8b45fc	                mov eax, dword [rbp - 4]	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c23	          0x83e080	                     and eax, 0xffffff80	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c26	            0x85c0	                           test eax, eax	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c28	            0x7506	                           jne 0x4000c30	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c2a	        0x837dfc1b	               cmp dword [rbp - 4], 0x1b	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c2e	            0x7507	                           jne 0x4000c37	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c30	      0xb801000000	                              mov eax, 1	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c35	            0xeb05	                           jmp 0x4000c3c	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c37	      0xb800000000	                              mov eax, 0	       207	pretty.c	WHILE_3	FUNCTION_9
0x4000c3c	              0x5d	                                 pop rbp	       208	pretty.c	WHILE_3	FUNCTION_9
0x4000c3d	              0xc3	                                     ret	       208	pretty.c	WHILE_3	FUNCTION_9
cmit_fmt_is_mail	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	12
0x400038c	              0x55	                                push rbp	        53	pretty.h	FUNCTION_94
0x400038d	          0x4889e5	                            mov rbp, rsp	        53	pretty.h	FUNCTION_94
0x4000390	          0x897dfc	                mov dword [rbp - 4], edi	        53	pretty.h	FUNCTION_94
0x4000393	        0x837dfc06	                  cmp dword [rbp - 4], 6	        54	pretty.h	FUNCTION_94
0x4000397	            0x7406	                            je 0x400039f	        54	pretty.h	FUNCTION_94
0x4000399	        0x837dfc07	                  cmp dword [rbp - 4], 7	        54	pretty.h	FUNCTION_94
0x400039d	            0x7507	                           jne 0x40003a6	        54	pretty.h	FUNCTION_94
0x400039f	      0xb801000000	                              mov eax, 1	        54	pretty.h	FUNCTION_94
0x40003a4	            0xeb05	                           jmp 0x40003ab	        54	pretty.h	FUNCTION_94
0x40003a6	      0xb800000000	                              mov eax, 0	        54	pretty.h	FUNCTION_94
0x40003ab	              0x5d	                                 pop rbp	        55	pretty.h	FUNCTION_94
0x40003ac	              0xc3	                                     ret	        55	pretty.h	FUNCTION_94
pp_utf8_width	WHILE,1:DO,0:CALL,1:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	39
0x4004743	              0x55	                                push rbp	      1674	pretty.c	FUNCTION_47
0x4004744	          0x4889e5	                            mov rbp, rsp	      1674	pretty.c	FUNCTION_47
0x4004747	        0x4883ec30	                           sub rsp, 0x30	      1674	pretty.c	FUNCTION_47
0x400474b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1674	pretty.c	FUNCTION_47
0x400474f	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1674	pretty.c	FUNCTION_47
0x4004753	    0x64488b042528	                mov rax, qword fs:[0x28]	      1674	pretty.c	FUNCTION_47
0x400475c	        0x488945f8	                mov qword [rbp - 8], rax	      1674	pretty.c	FUNCTION_47
0x4004760	            0x31c0	                            xor eax, eax	      1674	pretty.c	FUNCTION_47
0x4004762	    0xc745e8000000	               mov dword [rbp - 0x18], 0	      1675	pretty.c	FUNCTION_47
0x4004769	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1676	pretty.c	FUNCTION_47
0x400476d	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1676	pretty.c	FUNCTION_47
0x4004771	          0x4829d0	                            sub rax, rdx	      1676	pretty.c	FUNCTION_47
0x4004774	        0x488945f0	             mov qword [rbp - 0x10], rax	      1676	pretty.c	FUNCTION_47
0x4004778	            0xeb32	                           jmp 0x40047ac	      1678	pretty.c	FUNCTION_47	WHILE_1
0x400477a	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x400477e	        0x488d45d8	                   lea rax, [rbp - 0x28]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4004782	          0x4889d6	                            mov rsi, rdx	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4004785	          0x4889c7	                            mov rdi, rax	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4004788	      0xe800000000	                          call 0x400478d	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x400478d	          0x8945ec	             mov dword [rbp - 0x14], eax	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4004790	        0x837dec00	               cmp dword [rbp - 0x14], 0	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4004794	            0x7809	                            js 0x400479f	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4004796	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x400479a	          0x4885c0	                           test rax, rax	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x400479d	            0x7507	                           jne 0x40047a6	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x400479f	      0xb8ffffffff	                     mov eax, 0xffffffff	      1681	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x40047a4	            0xeb12	                           jmp 0x40047b8	      1681	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x40047a6	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1682	pretty.c	FUNCTION_47	WHILE_1
0x40047a9	           0x145e8	             add dword [rbp - 0x18], eax	      1682	pretty.c	FUNCTION_47	WHILE_1
0x40047ac	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1678	pretty.c	FUNCTION_47	WHILE_1
0x40047b0	          0x4885c0	                           test rax, rax	      1678	pretty.c	FUNCTION_47	WHILE_1
0x40047b3	            0x75c5	                           jne 0x400477a	      1678	pretty.c	FUNCTION_47	WHILE_1
0x40047b5	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1684	pretty.c	FUNCTION_47
0x40047b8	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1685	pretty.c	FUNCTION_47
0x40047bc	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1685	pretty.c	FUNCTION_47
0x40047c5	            0x7405	                            je 0x40047cc	      1685	pretty.c	FUNCTION_47
0x40047c7	      0xe800000000	                          call 0x40047cc	      1685	pretty.c	FUNCTION_47
0x40047cc	              0xc9	                                   leave	      1685	pretty.c	FUNCTION_47
0x40047cd	              0xc3	                                     ret	      1685	pretty.c	FUNCTION_47
pp_title_line	WHILE,0:DO,0:CALL,20:functions,0:IF,9:FOR,2:SWITCH,0:ELSE,2	201
0x4004460	              0x55	                                push rbp	      1613	pretty.c	FUNCTION_46
0x4004461	          0x4889e5	                            mov rbp, rsp	      1613	pretty.c	FUNCTION_46
0x4004464	              0x53	                                push rbx	      1613	pretty.c	FUNCTION_46
0x4004465	        0x4883ec68	                           sub rsp, 0x68	      1613	pretty.c	FUNCTION_46
0x4004469	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1613	pretty.c	FUNCTION_46
0x400446d	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1613	pretty.c	FUNCTION_46
0x4004471	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1613	pretty.c	FUNCTION_46
0x4004475	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1613	pretty.c	FUNCTION_46
0x4004479	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1613	pretty.c	FUNCTION_46
0x400447d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1613	pretty.c	FUNCTION_46
0x4004486	        0x488945e8	             mov qword [rbp - 0x18], rax	      1613	pretty.c	FUNCTION_46
0x400448a	            0x31c0	                            xor eax, eax	      1613	pretty.c	FUNCTION_46
0x400448c	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1617	pretty.c	FUNCTION_46	CALL_1
0x4004490	      0xbe50000000	                           mov esi, 0x50	      1617	pretty.c	FUNCTION_46	CALL_1
0x4004495	          0x4889c7	                            mov rdi, rax	      1617	pretty.c	FUNCTION_46	CALL_1
0x4004498	      0xe800000000	                          call 0x400449d	      1617	pretty.c	FUNCTION_46	CALL_1
0x400449d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1619	pretty.c	FUNCTION_46
0x40044a1	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1619	pretty.c	FUNCTION_46
0x40044a4	            0x85c0	                           test eax, eax	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044a6	            0x7407	                            je 0x40044af	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044a8	      0xba00000000	                              mov edx, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044ad	            0xeb05	                           jmp 0x40044b4	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044af	      0xba00000000	                              mov edx, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044b4	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044b8	          0x488b08	                    mov rcx, qword [rax]	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044bb	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044bf	          0x4889ce	                            mov rsi, rcx	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044c2	          0x4889c7	                            mov rdi, rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044c5	      0xe800000000	                          call 0x40044ca	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044ca	          0x4889c2	                            mov rdx, rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044cd	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044d1	          0x488910	                    mov qword [rax], rdx	      1618	pretty.c	FUNCTION_46	CALL_2
0x40044d4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044d8	    0x488d90000400	                  lea rdx, [rax + 0x400]	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044df	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044e3	          0x4889d6	                            mov rsi, rdx	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044e6	          0x4889c7	                            mov rdi, rax	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044e9	      0xe800000000	                          call 0x40044ee	      1621	pretty.c	FUNCTION_46	CALL_3
0x40044ee	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1622	pretty.c	FUNCTION_46	IF_1
0x40044f2	          0x8b4034	            mov eax, dword [rax + 0x34] 	      1622	pretty.c	FUNCTION_46	IF_1
0x40044f5	            0x85c0	                           test eax, eax	      1622	pretty.c	FUNCTION_46	IF_1
0x40044f7	     0xf849c000000	                            je 0x4004599	      1622	pretty.c	FUNCTION_46	IF_1
0x40044fd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x4004501	        0x488b4050	            mov rax, qword [rax + 0x50] 	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x4004505	          0x4885c0	                           test rax, rax	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x4004508	            0x7417	                            je 0x4004521	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x400450a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x400450e	        0x488b5050	            mov rdx, qword [rax + 0x50] 	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x4004512	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x4004516	          0x4889d6	                            mov rsi, rdx	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x4004519	          0x4889c7	                            mov rdi, rax	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x400451c	      0xe800000000	                          call 0x4004521	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x4004521	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4004525	            0x89c1	                            mov ecx, eax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4004527	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400452b	      0xba00000000	                              mov edx, 0	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4004530	            0x89ce	                            mov esi, ecx	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4004532	          0x4889c7	                            mov rdi, rax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4004535	      0xe895c9ffff	         call sym.needs_rfc2047_encoding	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400453a	            0x85c0	                           test eax, eax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400453c	            0x7420	                            je 0x400455e	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400453e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4004542	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4004546	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400454a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400454e	    0x41b800000000	                              mov r8d, 0	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4004554	          0x4889c7	                            mov rdi, rax	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4004557	      0xe801caffff	                    call sym.add_rfc2047	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400455c	            0xeb4e	                           jmp 0x40045ac	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400455e	    0x8b1d00000000	            mov ebx, dword [0x04004564] 	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004564	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x4004568	          0x4889c7	                            mov rdi, rax	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x400456b	      0xe89ec7ffff	               call sym.last_line_length	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x4004570	            0xf7d8	                                 neg eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004572	            0x89c2	                            mov edx, eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004574	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004578	            0x89c7	                            mov edi, eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400457a	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400457e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004582	          0x4189d9	                            mov r9d, ebx	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004585	    0x41b801000000	                              mov r8d, 1	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400458b	            0x89d1	                            mov ecx, edx	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400458d	            0x89fa	                            mov edx, edi	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400458f	          0x4889c7	                            mov rdi, rax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004592	      0xe800000000	                          call 0x4004597	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004597	            0xeb13	                           jmp 0x40045ac	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4004599	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x400459d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x40045a1	          0x4889d6	                            mov rsi, rdx	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x40045a4	          0x4889c7	                            mov rdi, rax	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x40045a7	      0xe800000000	                          call 0x40045ac	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x40045ac	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1634	pretty.c	FUNCTION_46	CALL_10
0x40045b0	      0xbe0a000000	                            mov esi, 0xa	      1634	pretty.c	FUNCTION_46	CALL_10
0x40045b5	          0x4889c7	                            mov rdi, rax	      1634	pretty.c	FUNCTION_46	CALL_10
0x40045b8	      0xe88fbcffff	                   call sym.strbuf_addch	      1634	pretty.c	FUNCTION_46	CALL_10
0x40045bd	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1636	pretty.c	FUNCTION_46	IF_4
0x40045c1	            0x754b	                           jne 0x400460e	      1636	pretty.c	FUNCTION_46	IF_4
0x40045c3	    0xc745c0000000	               mov dword [rbp - 0x40], 0	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40045ca	            0xeb31	                           jmp 0x40045fd	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40045cc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045d0	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045d4	          0x8b55c0	             mov edx, dword [rbp - 0x40]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045d7	          0x4863d2	                         movsxd rdx, edx	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045da	        0x48c1e204	                              shl rdx, 4	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045de	          0x4801d0	                            add rax, rdx	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045e1	          0x488b00	                    mov rax, qword [rax]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045e4	          0x4889c7	                            mov rdi, rax	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045e7	      0xe800000000	                          call 0x40045ec	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045ec	            0x85c0	                           test eax, eax	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045ee	            0x7409	                            je 0x40045f9	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40045f0	    0xc7459c010000	               mov dword [rbp - 0x64], 1	      1640	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5
0x40045f7	            0xeb15	                           jmp 0x400460e	      1641	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5
0x40045f9	        0x8345c001	               add dword [rbp - 0x40], 1	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40045fd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x4004601	    0x8b9080000000	            mov edx, dword [rax + 0x80] 	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x4004607	          0x8b45c0	             mov eax, dword [rbp - 0x40]	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x400460a	            0x39c2	                            cmp edx, eax	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x400460c	            0x77be	                            ja 0x40045cc	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x400460e	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1646	pretty.c	FUNCTION_46	IF_6
0x4004612	            0x7e24	                           jle 0x4004638	      1646	pretty.c	FUNCTION_46	IF_6
0x4004614	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1647	pretty.c	FUNCTION_46	IF_6
0x400461c	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x4004620	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x4004624	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x4004628	          0x4889ce	                            mov rsi, rcx	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x400462b	          0x4889c7	                            mov rdi, rax	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x400462e	      0xb800000000	                              mov eax, 0	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x4004633	      0xe800000000	                          call 0x4004638	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x4004638	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1653	pretty.c	FUNCTION_46	IF_7
0x400463c	        0x488b4008	                mov rax, qword [rax + 8]	      1653	pretty.c	FUNCTION_46	IF_7
0x4004640	          0x4885c0	                           test rax, rax	      1653	pretty.c	FUNCTION_46	IF_7
0x4004643	            0x7417	                            je 0x400465c	      1653	pretty.c	FUNCTION_46	IF_7
0x4004645	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4004649	        0x488b5008	                mov rdx, qword [rax + 8]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x400464d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4004651	          0x4889d6	                            mov rsi, rdx	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4004654	          0x4889c7	                            mov rdi, rax	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x4004657	      0xe85ebcffff	                  call sym.strbuf_addstr	      1654	pretty.c	FUNCTION_46	IF_7	CALL_13
0x400465c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4004660	            0x8b00	                    mov eax, dword [rax]	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4004662	            0x89c7	                            mov edi, eax	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4004664	      0xe823bdffff	               call sym.cmit_fmt_is_mail	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4004669	            0x85c0	                           test eax, eax	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x400466b	            0x7411	                            je 0x400467e	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x400466d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4004671	      0xbe0a000000	                            mov esi, 0xa	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4004676	          0x4889c7	                            mov rdi, rax	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x4004679	      0xe8cebbffff	                   call sym.strbuf_addch	      1657	pretty.c	FUNCTION_46	IF_8	CALL_15
0x400467e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1660	pretty.c	FUNCTION_46	IF_9
0x4004682	    0x8b8080000000	            mov eax, dword [rax + 0x80] 	      1660	pretty.c	FUNCTION_46	IF_9
0x4004688	            0x85c0	                           test eax, eax	      1660	pretty.c	FUNCTION_46	IF_9
0x400468a	     0xf848b000000	                            je 0x400471b	      1660	pretty.c	FUNCTION_46	IF_9
0x4004690	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x4004697	            0xeb4b	                           jmp 0x40046e4	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x4004699	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x400469d	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046a1	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046a4	          0x4863d2	                         movsxd rdx, edx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046a7	        0x48c1e204	                              shl rdx, 4	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046ab	          0x4801d0	                            add rax, rdx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046ae	          0x488b10	                    mov rdx, qword [rax]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046b1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046b5	          0x4889d6	                            mov rsi, rdx	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046b8	          0x4889c7	                            mov rdi, rax	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046bb	      0xe8fabbffff	                  call sym.strbuf_addstr	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x40046c0	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046c4	        0x488b4078	            mov rax, qword [rax + 0x78] 	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046c8	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046cb	          0x4863d2	                         movsxd rdx, edx	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046ce	        0x48c1e204	                              shl rdx, 4	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046d2	          0x4801d0	                            add rax, rdx	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046d5	          0x488b00	                    mov rax, qword [rax]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046d8	          0x4889c7	                            mov rdi, rax	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046db	      0xe800000000	                          call 0x40046e0	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40046e0	        0x8345c401	               add dword [rbp - 0x3c], 1	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046e4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046e8	    0x8b9080000000	            mov edx, dword [rax + 0x80] 	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046ee	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046f1	            0x39c2	                            cmp edx, eax	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046f3	            0x77a4	                            ja 0x4004699	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40046f5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x40046f9	        0x4883c078	                           add rax, 0x78	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x40046fd	      0xbe00000000	                              mov esi, 0	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x4004702	          0x4889c7	                            mov rdi, rax	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x4004705	      0xe800000000	                          call 0x400470a	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x400470a	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x400470e	      0xbe0a000000	                            mov esi, 0xa	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x4004713	          0x4889c7	                            mov rdi, rax	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x4004716	      0xe831bbffff	                   call sym.strbuf_addch	      1667	pretty.c	FUNCTION_46	IF_9	CALL_19
0x400471b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1670	pretty.c	FUNCTION_46	CALL_20
0x400471f	          0x4889c7	                            mov rdi, rax	      1670	pretty.c	FUNCTION_46	CALL_20
0x4004722	      0xe800000000	                          call 0x4004727	      1670	pretty.c	FUNCTION_46	CALL_20
0x4004727	              0x90	                                     nop	      1671	pretty.c	FUNCTION_46
0x4004728	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1671	pretty.c	FUNCTION_46
0x400472c	    0x644833042528	                xor rax, qword fs:[0x28]	      1671	pretty.c	FUNCTION_46
0x4004735	            0x7405	                            je 0x400473c	      1671	pretty.c	FUNCTION_46
0x4004737	      0xe800000000	                          call 0x400473c	      1671	pretty.c	FUNCTION_46
0x400473c	        0x4883c468	                           add rsp, 0x68	      1671	pretty.c	FUNCTION_46
0x4004740	              0x5b	                                 pop rbx	      1671	pretty.c	FUNCTION_46
0x4004741	              0x5d	                                 pop rbp	      1671	pretty.c	FUNCTION_46
0x4004742	              0xc3	                                     ret	      1671	pretty.c	FUNCTION_46
has_non_ascii	WHILE,1:DO,0:CALL,1:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,0	26
0x4000c3e	              0x55	                                push rbp	       211	pretty.c	WHILE_3	FUNCTION_10
0x4000c3f	          0x4889e5	                            mov rbp, rsp	       211	pretty.c	WHILE_3	FUNCTION_10
0x4000c42	        0x4883ec18	                           sub rsp, 0x18	       211	pretty.c	WHILE_3	FUNCTION_10
0x4000c46	        0x48897de8	             mov qword [rbp - 0x18], rdi	       211	pretty.c	WHILE_3	FUNCTION_10
0x4000c4a	      0x48837de800	               cmp qword [rbp - 0x18], 0	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000c4f	            0x751c	                           jne 0x4000c6d	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000c51	      0xb800000000	                              mov eax, 0	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000c56	            0xeb35	                           jmp 0x4000c8d	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000c58	          0x8b45fc	                mov eax, dword [rbp - 4]	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000c5b	            0x89c7	                            mov edi, eax	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000c5d	      0xe8b7ffffff	                      call sym.non_ascii	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000c62	            0x85c0	                           test eax, eax	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000c64	            0x7407	                            je 0x4000c6d	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000c66	      0xb801000000	                              mov eax, 1	       217	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2
0x4000c6b	            0xeb20	                           jmp 0x4000c8d	       217	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2
0x4000c6d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c71	        0x488d5001	                      lea rdx, [rax + 1]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c75	        0x488955e8	             mov qword [rbp - 0x18], rdx	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c79	           0xfb600	                   movzx eax, byte [rax]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c7c	           0xfbec0	                           movsx eax, al	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c7f	          0x8945fc	                mov dword [rbp - 4], eax	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c82	        0x837dfc00	                  cmp dword [rbp - 4], 0	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c86	            0x75d0	                           jne 0x4000c58	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000c88	      0xb800000000	                              mov eax, 0	       219	pretty.c	WHILE_3	FUNCTION_10
0x4000c8d	              0xc9	                                   leave	       220	pretty.c	WHILE_3	FUNCTION_10
0x4000c8e	              0xc3	                                     ret	       220	pretty.c	WHILE_3	FUNCTION_10
hexval	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	10
0x400031b	              0x55	                                push rbp	      1272	cache.h	FUNCTION_90
0x400031c	          0x4889e5	                            mov rbp, rsp	      1272	cache.h	FUNCTION_90
0x400031f	            0x89f8	                            mov eax, edi	      1272	cache.h	FUNCTION_90
0x4000321	          0x8845fc	                  mov byte [rbp - 4], al	      1272	cache.h	FUNCTION_90
0x4000324	         0xfb645fc	               movzx eax, byte [rbp - 4]	      1273	cache.h	FUNCTION_90
0x4000328	            0x4898	                                    cdqe	      1273	cache.h	FUNCTION_90
0x400032a	     0xfb680000000	                   movzx eax, byte [rax]	      1273	cache.h	FUNCTION_90
0x4000331	           0xfbec0	                           movsx eax, al	      1273	cache.h	FUNCTION_90
0x4000334	              0x5d	                                 pop rbp	      1274	cache.h	FUNCTION_90
0x4000335	              0xc3	                                     ret	      1274	cache.h	FUNCTION_90
format_commit_item	WHILE,1:DO,0:CALL,5:functions,0:IF,7:FOR,0:SWITCH,1:ELSE,3	109
0x4003dcc	              0x55	                                push rbp	      1432	pretty.c	FUNCTION_41
0x4003dcd	          0x4889e5	                            mov rbp, rsp	      1432	pretty.c	FUNCTION_41
0x4003dd0	        0x4883ec30	                           sub rsp, 0x30	      1432	pretty.c	FUNCTION_41
0x4003dd4	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1432	pretty.c	FUNCTION_41
0x4003dd8	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1432	pretty.c	FUNCTION_41
0x4003ddc	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1432	pretty.c	FUNCTION_41
0x4003de0	    0xc745f4000000	                mov dword [rbp - 0xc], 0	      1440	pretty.c	FUNCTION_41
0x4003de7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003deb	           0xfb600	                   movzx eax, byte [rax]	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003dee	           0xfbec0	                           movsx eax, al	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003df1	          0x83f82b	                           cmp eax, 0x2b	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003df4	            0x7415	                            je 0x4003e0b	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003df6	          0x83f82d	                           cmp eax, 0x2d	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003df9	            0x7407	                            je 0x4003e02	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003dfb	          0x83f820	                           cmp eax, 0x20	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003dfe	            0x7414	                            je 0x4003e14	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4003e00	            0xeb1a	                           jmp 0x4003e1c	      1453	pretty.c	FUNCTION_41	SWITCH_1
0x4003e02	    0xc745f4020000	                mov dword [rbp - 0xc], 2	      1444	pretty.c	FUNCTION_41	SWITCH_1
0x4003e09	            0xeb11	                           jmp 0x4003e1c	      1445	pretty.c	FUNCTION_41	SWITCH_1
0x4003e0b	    0xc745f4010000	                mov dword [rbp - 0xc], 1	      1447	pretty.c	FUNCTION_41	SWITCH_1
0x4003e12	            0xeb08	                           jmp 0x4003e1c	      1448	pretty.c	FUNCTION_41	SWITCH_1
0x4003e14	    0xc745f4030000	                mov dword [rbp - 0xc], 3	      1450	pretty.c	FUNCTION_41	SWITCH_1
0x4003e1b	              0x90	                                     nop	      1451	pretty.c	FUNCTION_41	SWITCH_1
0x4003e1c	        0x837df400	                cmp dword [rbp - 0xc], 0	      1455	pretty.c	FUNCTION_41	IF_1
0x4003e20	            0x7405	                            je 0x4003e27	      1455	pretty.c	FUNCTION_41	IF_1
0x4003e22	      0x488345e001	               add qword [rbp - 0x20], 1	      1456	pretty.c	FUNCTION_41	IF_1
0x4003e27	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1458	pretty.c	FUNCTION_41
0x4003e2b	        0x488b4008	                mov rax, qword [rax + 8]	      1458	pretty.c	FUNCTION_41
0x4003e2f	        0x488945f8	                mov qword [rbp - 8], rax	      1458	pretty.c	FUNCTION_41
0x4003e33	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1459	pretty.c	FUNCTION_41	IF_2
0x4003e37	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1459	pretty.c	FUNCTION_41	IF_2
0x4003e3a	            0x85c0	                           test eax, eax	      1459	pretty.c	FUNCTION_41	IF_2
0x4003e3c	            0x741c	                            je 0x4003e5a	      1459	pretty.c	FUNCTION_41	IF_2
0x4003e3e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e42	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e46	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e4a	          0x4889ce	                            mov rsi, rcx	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e4d	          0x4889c7	                            mov rdi, rax	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e50	      0xe84efbffff	          call sym.format_and_pad_commit	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e55	          0x8945f0	             mov dword [rbp - 0x10], eax	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e58	            0xeb1a	                           jmp 0x4003e74	      1460	pretty.c	FUNCTION_41	CALL_1
0x4003e5a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e5e	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e62	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e66	          0x4889ce	                            mov rsi, rcx	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e69	          0x4889c7	                            mov rdi, rax	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e6c	      0xe808efffff	              call sym.format_commit_one	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e71	          0x8945f0	             mov dword [rbp - 0x10], eax	      1462	pretty.c	FUNCTION_41	CALL_2
0x4003e74	        0x837df400	                cmp dword [rbp - 0xc], 0	      1463	pretty.c	FUNCTION_41	IF_3
0x4003e78	            0x750a	                           jne 0x4003e84	      1463	pretty.c	FUNCTION_41	IF_3
0x4003e7a	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1464	pretty.c	FUNCTION_41	IF_3
0x4003e7d	            0x4898	                                    cdqe	      1464	pretty.c	FUNCTION_41	IF_3
0x4003e7f	      0xe9b9000000	                           jmp 0x4003f3d	      1464	pretty.c	FUNCTION_41	IF_3
0x4003e84	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e88	        0x488b4008	                mov rax, qword [rax + 8]	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e8c	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e90	            0x7550	                           jne 0x4003ee2	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e92	        0x837df402	                cmp dword [rbp - 0xc], 2	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e96	            0x754a	                           jne 0x4003ee2	      1466	pretty.c	FUNCTION_41	IF_4
0x4003e98	            0xeb1b	                           jmp 0x4003eb5	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003e9a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003e9e	        0x488b4008	                mov rax, qword [rax + 8]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003ea2	        0x488d50ff	                      lea rdx, [rax - 1]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003ea6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003eaa	          0x4889d6	                            mov rsi, rdx	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003ead	          0x4889c7	                            mov rdi, rax	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003eb0	      0xe8fdc2ffff	                  call sym.strbuf_setlen	      1468	pretty.c	FUNCTION_41	IF_4	CALL_3
0x4003eb5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003eb9	        0x488b4008	                mov rax, qword [rax + 8]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ebd	          0x4885c0	                           test rax, rax	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ec0	            0x7472	                            je 0x4003f34	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ec2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ec6	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003eca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ece	        0x488b4008	                mov rax, qword [rax + 8]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ed2	        0x4883e801	                              sub rax, 1	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ed6	          0x4801d0	                            add rax, rdx	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ed9	           0xfb600	                   movzx eax, byte [rax]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003edc	            0x3c0a	                             cmp al, 0xa	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ede	            0x74ba	                            je 0x4003e9a	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4003ee0	            0xeb52	                           jmp 0x4003f34	      1466	pretty.c	FUNCTION_41	IF_4
0x4003ee2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4003ee6	        0x488b4008	                mov rax, qword [rax + 8]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4003eea	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4003eee	            0x7445	                            je 0x4003f35	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4003ef0	        0x837df401	                cmp dword [rbp - 0xc], 1	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x4003ef4	            0x751c	                           jne 0x4003f12	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x4003ef6	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003efa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003efe	      0xb901000000	                              mov ecx, 1	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003f03	      0xba00000000	                              mov edx, 0	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003f08	          0x4889c7	                            mov rdi, rax	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003f0b	      0xe800000000	                          call 0x4003f10	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003f10	            0xeb23	                           jmp 0x4003f35	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4003f12	        0x837df403	                cmp dword [rbp - 0xc], 3	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f16	            0x751d	                           jne 0x4003f35	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f18	        0x488b75f8	                mov rsi, qword [rbp - 8]	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f1c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f20	      0xb901000000	                              mov ecx, 1	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f25	      0xba00000000	                              mov edx, 0	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f2a	          0x4889c7	                            mov rdi, rax	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f2d	      0xe800000000	                          call 0x4003f32	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f32	            0xeb01	                           jmp 0x4003f35	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003f34	              0x90	                                     nop	      1466	pretty.c	FUNCTION_41	IF_4
0x4003f35	          0x8b45f0	             mov eax, dword [rbp - 0x10]	      1475	pretty.c	FUNCTION_41
0x4003f38	          0x83c001	                              add eax, 1	      1475	pretty.c	FUNCTION_41
0x4003f3b	            0x4898	                                    cdqe	      1475	pretty.c	FUNCTION_41
0x4003f3d	              0xc9	                                   leave	      1476	pretty.c	FUNCTION_41
0x4003f3e	              0xc3	                                     ret	      1476	pretty.c	FUNCTION_41
find_commit_format_recursive	WHILE,0:DO,0:CALL,4:functions,0:IF,4:FOR,1:SWITCH,0:ELSE,0	80
0x4000913	              0x55	                                push rbp	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000914	          0x4889e5	                            mov rbp, rsp	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000917	        0x4883ec40	                           sub rsp, 0x40	       114	pretty.c	WHILE_3	FUNCTION_5
0x400091b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       114	pretty.c	WHILE_3	FUNCTION_5
0x400091f	        0x488975d0	             mov qword [rbp - 0x30], rsi	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000923	          0x8955cc	             mov dword [rbp - 0x34], edx	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000926	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       115	pretty.c	WHILE_3	FUNCTION_5
0x400092e	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       116	pretty.c	WHILE_3	FUNCTION_5
0x4000936	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x4000939	          0x4863d0	                         movsxd rdx, eax	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x400093c	    0x488b05000000	            mov rax, qword [0x04000943] 	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x4000943	          0x4839c2	                            cmp rdx, rax	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x4000946	            0x7216	                            jb 0x400095e	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x4000948	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x400094c	          0x4889c6	                            mov rsi, rax	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x400094f	      0xbf00000000	                              mov edi, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x4000954	      0xb800000000	                              mov eax, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x4000959	      0xe800000000	                          call 0x400095e	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x400095e	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x4000965	      0xe985000000	                           jmp 0x40009ef	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x400096a	    0x488b05000000	            mov rax, qword [0x04000971] 	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000971	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000974	          0x4863d2	                         movsxd rdx, edx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000977	        0x48c1e205	                              shl rdx, 5	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400097b	          0x4801d0	                            add rax, rdx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400097e	          0x488b00	                    mov rax, qword [rax]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000981	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000985	          0x4889d6	                            mov rsi, rdx	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000988	          0x4889c7	                            mov rdi, rax	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400098b	      0xe800000000	                          call 0x4000990	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000990	            0x85c0	                           test eax, eax	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000992	            0x7456	                            je 0x40009ea	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000994	    0x488b05000000	            mov rax, qword [0x0400099b] 	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x400099b	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x400099e	          0x4863d2	                         movsxd rdx, edx	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009a1	        0x48c1e205	                              shl rdx, 5	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009a5	          0x4801d0	                            add rax, rdx	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009a8	          0x488b00	                    mov rax, qword [rax]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009ab	          0x4889c7	                            mov rdi, rax	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009ae	      0xe800000000	                          call 0x40009b3	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009b3	        0x488945f8	                mov qword [rbp - 8], rax	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40009b7	      0x48837de800	               cmp qword [rbp - 0x18], 0	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009bc	            0x740a	                            je 0x40009c8	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009be	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009c2	        0x483b45f8	                cmp rax, qword [rbp - 8]	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009c6	            0x7623	                           jbe 0x40009eb	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009c8	    0x488b05000000	            mov rax, qword [0x040009cf] 	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009cf	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009d2	          0x4863d2	                         movsxd rdx, edx	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009d5	        0x48c1e205	                              shl rdx, 5	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009d9	          0x4801d0	                            add rax, rdx	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009dc	        0x488945e8	             mov qword [rbp - 0x18], rax	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009e0	        0x488b45f8	                mov rax, qword [rbp - 8]	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009e4	        0x488945f0	             mov qword [rbp - 0x10], rax	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009e8	            0xeb01	                           jmp 0x40009eb	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x40009ea	              0x90	                                     nop	       128	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2
0x40009eb	        0x8345e401	               add dword [rbp - 0x1c], 1	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40009ef	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40009f2	          0x4863d0	                         movsxd rdx, eax	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40009f5	    0x488b05000000	            mov rax, qword [0x040009fc] 	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40009fc	          0x4839c2	                            cmp rdx, rax	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40009ff	     0xf8265ffffff	                            jb 0x400096a	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x4000a05	      0x48837de800	               cmp qword [rbp - 0x18], 0	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a0a	            0x742c	                            je 0x4000a38	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a0c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a10	          0x8b4014	            mov eax, dword [rax + 0x14] 	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a13	            0x85c0	                           test eax, eax	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a15	            0x7421	                            je 0x4000a38	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000a17	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a1a	          0x8d5001	                      lea edx, [rax + 1]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a1d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a21	        0x488b4018	            mov rax, qword [rax + 0x18] 	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a25	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a29	          0x4889ce	                            mov rsi, rcx	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a2c	          0x4889c7	                            mov rdi, rax	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a2f	      0xe8dffeffff	   call sym.find_commit_format_recursive	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a34	        0x488945e8	             mov qword [rbp - 0x18], rax	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000a38	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       143	pretty.c	WHILE_3	FUNCTION_5
0x4000a3c	              0xc9	                                   leave	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000a3d	              0xc3	                                     ret	       144	pretty.c	WHILE_3	FUNCTION_5
format_person_part	WHILE,0:DO,0:CALL,15:functions,0:IF,7:FOR,0:SWITCH,1:ELSE,0	199
0x4001db3	              0x55	                                push rbp	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001db4	          0x4889e5	                            mov rbp, rsp	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001db7	    0x4881eca00000	                           sub rsp, 0xa0	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dbe	    0x4889bd78ffff	             mov qword [rbp - 0x88], rdi	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dc5	            0x89f0	                            mov eax, esi	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dc7	    0x48899568ffff	             mov qword [rbp - 0x98], rdx	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dce	    0x898d70ffffff	             mov dword [rbp - 0x90], ecx	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dd4	    0x4c898560ffff	              mov qword [rbp - 0xa0], r8	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001ddb	    0x888574ffffff	               mov byte [rbp - 0x8c], al	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001de1	    0x64488b042528	                mov rax, qword fs:[0x28]	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dea	        0x488945f8	                mov qword [rbp - 8], rax	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001dee	            0x31c0	                            xor eax, eax	       680	pretty.c	WHILE_3	FUNCTION_27
0x4001df0	    0xc7458c020000	               mov dword [rbp - 0x74], 2	       682	pretty.c	WHILE_3	FUNCTION_27
0x4001df7	    0x8b9570ffffff	             mov edx, dword [rbp - 0x90]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001dfd	    0x488b8d68ffff	             mov rcx, qword [rbp - 0x98]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e04	        0x488d45b0	                   lea rax, [rbp - 0x50]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e08	          0x4889ce	                            mov rsi, rcx	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e0b	          0x4889c7	                            mov rdi, rax	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e0e	      0xe800000000	                          call 0x4001e13	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e13	            0x85c0	                           test eax, eax	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e15	     0xf8857020000	                            js 0x4002072	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4001e1b	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       690	pretty.c	WHILE_3	FUNCTION_27
0x4001e1f	        0x48894590	             mov qword [rbp - 0x70], rax	       690	pretty.c	WHILE_3	FUNCTION_27
0x4001e23	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e27	          0x4889c2	                            mov rdx, rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e2a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e2e	          0x4829c2	                            sub rdx, rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e31	          0x4889d0	                            mov rax, rdx	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e34	        0x488945a8	             mov qword [rbp - 0x58], rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x4001e38	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       692	pretty.c	WHILE_3	FUNCTION_27
0x4001e3c	        0x48894598	             mov qword [rbp - 0x68], rax	       692	pretty.c	WHILE_3	FUNCTION_27
0x4001e40	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e44	          0x4889c2	                            mov rdx, rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e47	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e4b	          0x4829c2	                            sub rdx, rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e4e	          0x4889d0	                            mov rax, rdx	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e51	        0x488945a0	             mov qword [rbp - 0x60], rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x4001e55	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x4e 	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4001e5c	            0x7409	                            je 0x4001e67	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4001e5e	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x45 	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4001e65	            0x7518	                           jne 0x4001e7f	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4001e67	        0x488d4da8	                   lea rcx, [rbp - 0x58]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e6b	        0x488d5590	                   lea rdx, [rbp - 0x70]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e6f	        0x488d75a0	                   lea rsi, [rbp - 0x60]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e73	        0x488d4598	                   lea rax, [rbp - 0x68]	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e77	          0x4889c7	                            mov rdi, rax	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e7a	      0xe8a4feffff	                   call sym.mailmap_name	       696	pretty.c	WHILE_3	FUNCTION_27	CALL_2
0x4001e7f	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x6e 	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001e86	            0x7409	                            je 0x4001e91	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001e88	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x4e 	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001e8f	            0x7524	                           jne 0x4001eb5	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001e91	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001e95	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001e99	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001ea0	          0x4889ce	                            mov rsi, rcx	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001ea3	          0x4889c7	                            mov rdi, rax	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001ea6	      0xe800000000	                          call 0x4001eab	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4001eab	          0x8b458c	             mov eax, dword [rbp - 0x74]	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001eae	            0x4898	                                    cdqe	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001eb0	      0xe90c020000	                           jmp 0x40020c1	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4001eb5	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x65 	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ebc	            0x7409	                            je 0x4001ec7	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ebe	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x45 	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ec5	            0x7524	                           jne 0x4001eeb	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ec7	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001ecb	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001ecf	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001ed6	          0x4889ce	                            mov rsi, rcx	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001ed9	          0x4889c7	                            mov rdi, rax	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001edc	      0xe800000000	                          call 0x4001ee1	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4001ee1	          0x8b458c	             mov eax, dword [rbp - 0x74]	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ee4	            0x4898	                                    cdqe	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001ee6	      0xe9d6010000	                           jmp 0x40020c1	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4001eeb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4001eef	          0x4885c0	                           test rax, rax	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4001ef2	     0xf847d010000	                            je 0x4002075	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4001ef8	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x74 	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4001eff	            0x7534	                           jne 0x4001f35	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4001f01	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f05	          0x4889c2	                            mov rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f08	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f0c	          0x4829c2	                            sub rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f0f	          0x4889d0	                            mov rax, rdx	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f12	          0x4889c2	                            mov rdx, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f15	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f19	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f20	          0x4889ce	                            mov rsi, rcx	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f23	          0x4889c7	                            mov rdi, rax	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f26	      0xe800000000	                          call 0x4001f2b	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4001f2b	          0x8b458c	             mov eax, dword [rbp - 0x74]	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4001f2e	            0x4898	                                    cdqe	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4001f30	      0xe98c010000	                           jmp 0x40020c1	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4001f35	     0xfbe8574ffff	            movsx eax, byte [rbp - 0x8c]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f3c	          0x83e844	                           sub eax, 0x44	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f3f	          0x83f82e	                           cmp eax, 0x2e	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f42	     0xf872e010000	                            ja 0x4002076	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f48	            0x89c0	                            mov eax, eax	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f4a	    0x488b04c50000	                  mov rax, qword [rax*8]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f52	            0xffe0	                                 jmp rax	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f54	    0x488b9560ffff	             mov rdx, qword [rbp - 0xa0]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f5b	        0x488d45b0	                   lea rax, [rbp - 0x50]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f5f	          0x4889d6	                            mov rsi, rdx	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f62	          0x4889c7	                            mov rdi, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f65	      0xe800000000	                          call 0x4001f6a	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f6a	          0x4889c2	                            mov rdx, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f6d	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f74	          0x4889d6	                            mov rsi, rdx	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f77	          0x4889c7	                            mov rdi, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f7a	      0xe83be3ffff	                  call sym.strbuf_addstr	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4001f7f	          0x8b458c	             mov eax, dword [rbp - 0x74]	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f82	            0x4898	                                    cdqe	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f84	      0xe938010000	                           jmp 0x40020c1	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001f89	      0xbf05000000	                              mov edi, 5	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001f8e	      0xe800000000	                          call 0x4001f93	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001f93	          0x4889c2	                            mov rdx, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001f96	        0x488d45b0	                   lea rax, [rbp - 0x50]	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001f9a	          0x4889d6	                            mov rsi, rdx	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001f9d	          0x4889c7	                            mov rdi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fa0	      0xe800000000	                          call 0x4001fa5	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fa5	          0x4889c2	                            mov rdx, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fa8	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001faf	          0x4889d6	                            mov rsi, rdx	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fb2	          0x4889c7	                            mov rdi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fb5	      0xe800e3ffff	                  call sym.strbuf_addstr	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_9
0x4001fba	          0x8b458c	             mov eax, dword [rbp - 0x74]	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001fbd	            0x4898	                                    cdqe	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001fbf	      0xe9fd000000	                           jmp 0x40020c1	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001fc4	      0xbf01000000	                              mov edi, 1	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fc9	      0xe800000000	                          call 0x4001fce	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fce	          0x4889c2	                            mov rdx, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fd1	        0x488d45b0	                   lea rax, [rbp - 0x50]	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fd5	          0x4889d6	                            mov rsi, rdx	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fd8	          0x4889c7	                            mov rdi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fdb	      0xe800000000	                          call 0x4001fe0	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fe0	          0x4889c2	                            mov rdx, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fe3	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fea	          0x4889d6	                            mov rsi, rdx	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001fed	          0x4889c7	                            mov rdi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001ff0	      0xe8c5e2ffff	                  call sym.strbuf_addstr	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_11
0x4001ff5	          0x8b458c	             mov eax, dword [rbp - 0x74]	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001ff8	            0x4898	                                    cdqe	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001ffa	      0xe9c2000000	                           jmp 0x40020c1	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001fff	      0xbf03000000	                              mov edi, 3	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002004	      0xe800000000	                          call 0x4002009	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002009	          0x4889c2	                            mov rdx, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x400200c	        0x488d45b0	                   lea rax, [rbp - 0x50]	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002010	          0x4889d6	                            mov rsi, rdx	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002013	          0x4889c7	                            mov rdi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002016	      0xe800000000	                          call 0x400201b	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x400201b	          0x4889c2	                            mov rdx, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x400201e	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002025	          0x4889d6	                            mov rsi, rdx	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002028	          0x4889c7	                            mov rdi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x400202b	      0xe88ae2ffff	                  call sym.strbuf_addstr	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4002030	          0x8b458c	             mov eax, dword [rbp - 0x74]	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4002033	            0x4898	                                    cdqe	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4002035	      0xe987000000	                           jmp 0x40020c1	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x400203a	      0xbf04000000	                              mov edi, 4	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x400203f	      0xe800000000	                          call 0x4002044	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002044	          0x4889c2	                            mov rdx, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002047	        0x488d45b0	                   lea rax, [rbp - 0x50]	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x400204b	          0x4889d6	                            mov rsi, rdx	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x400204e	          0x4889c7	                            mov rdi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002051	      0xe800000000	                          call 0x4002056	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002056	          0x4889c2	                            mov rdx, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002059	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002060	          0x4889d6	                            mov rsi, rdx	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002063	          0x4889c7	                            mov rdi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x4002066	      0xe84fe2ffff	                  call sym.strbuf_addstr	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_15
0x400206b	          0x8b458c	             mov eax, dword [rbp - 0x74]	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x400206e	            0x4898	                                    cdqe	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4002070	            0xeb4f	                           jmp 0x40020c1	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4002072	              0x90	                                     nop	       688	pretty.c	WHILE_3	FUNCTION_27	IF_1
0x4002073	            0xeb01	                           jmp 0x4002076	       688	pretty.c	WHILE_3	FUNCTION_27	IF_1
0x4002075	              0x90	                                     nop	       707	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4002076	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x6e 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400207d	            0x7436	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400207f	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x65 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4002086	            0x742d	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4002088	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x74 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400208f	            0x7424	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4002091	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x64 	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4002098	            0x741b	                            je 0x40020b5	       738	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400209a	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x44 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020a1	            0x7412	                            je 0x40020b5	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020a3	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x72 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020aa	            0x7409	                            je 0x40020b5	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020ac	    0x80bd74ffffff	            cmp byte [rbp - 0x8c], 0x69 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020b3	            0x7507	                           jne 0x40020bc	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020b5	          0x8b458c	             mov eax, dword [rbp - 0x74]	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020b8	            0x4898	                                    cdqe	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020ba	            0xeb05	                           jmp 0x40020c1	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x40020bc	      0xb800000000	                              mov eax, 0	       742	pretty.c	WHILE_3	FUNCTION_27
0x40020c1	        0x488b4df8	                mov rcx, qword [rbp - 8]	       743	pretty.c	WHILE_3	FUNCTION_27
0x40020c5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       743	pretty.c	WHILE_3	FUNCTION_27
0x40020ce	            0x7405	                            je 0x40020d5	       743	pretty.c	WHILE_3	FUNCTION_27
0x40020d0	      0xe800000000	                          call 0x40020d5	       743	pretty.c	WHILE_3	FUNCTION_27
0x40020d5	              0xc9	                                   leave	       743	pretty.c	WHILE_3	FUNCTION_27
0x40020d6	              0xc3	                                     ret	       743	pretty.c	WHILE_3	FUNCTION_27
format_and_pad_commit	WHILE,3:DO,0:CALL,14:functions,0:IF,11:FOR,0:SWITCH,1:ELSE,2	295
0x40039a3	              0x55	                                push rbp	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039a4	          0x4889e5	                            mov rbp, rsp	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039a7	              0x53	                                push rbx	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039a8	    0x4881ec880000	                           sub rsp, 0x88	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039af	        0x48897d88	             mov qword [rbp - 0x78], rdi	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039b3	        0x48897580	             mov qword [rbp - 0x80], rsi	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039b7	    0x48899578ffff	             mov qword [rbp - 0x88], rdx	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039be	    0x64488b042528	                mov rax, qword fs:[0x28]	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039c7	        0x488945e8	             mov qword [rbp - 0x18], rax	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039cb	            0x31c0	                            xor eax, eax	      1330	pretty.c	WHILE_3	FUNCTION_40
0x40039cd	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x40039d5	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x40039dd	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x40039e5	    0xc74598000000	               mov dword [rbp - 0x68], 0	      1332	pretty.c	WHILE_3	FUNCTION_40
0x40039ec	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1332	pretty.c	WHILE_3	FUNCTION_40
0x40039f3	          0x8b407c	            mov eax, dword [rax + 0x7c] 	      1332	pretty.c	WHILE_3	FUNCTION_40
0x40039f6	          0x89459c	             mov dword [rbp - 0x64], eax	      1332	pretty.c	WHILE_3	FUNCTION_40
0x40039f9	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x40039fd	            0x7964	                           jns 0x4003a63	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x40039ff	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a03	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a07	      0xbe0a000000	                            mov esi, 0xa	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a0c	          0x4889c7	                            mov rdi, rax	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a0f	      0xe800000000	                          call 0x4003a14	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a14	        0x488945b8	             mov qword [rbp - 0x48], rax	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4003a18	      0x48837db800	               cmp qword [rbp - 0x48], 0	      1336	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4003a1d	            0x750c	                           jne 0x4003a2b	      1336	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4003a1f	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4003a23	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4003a27	        0x488945b8	             mov qword [rbp - 0x48], rax	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4003a2b	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a2f	      0xba01000000	                              mov edx, 1	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a34	      0xbeffffffff	                     mov esi, 0xffffffff	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a39	          0x4889c7	                            mov rdi, rax	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a3c	      0xe800000000	                          call 0x4003a41	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a41	          0x8945a4	             mov dword [rbp - 0x5c], eax	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4003a44	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a4b	        0x488b4008	                mov rax, qword [rax + 8]	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a4f	    0x8b8098000000	            mov eax, dword [rax + 0x98] 	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a55	           0x145a4	             add dword [rbp - 0x5c], eax	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a58	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a5b	            0xf7d8	                                 neg eax	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a5d	          0x2b45a4	             sub eax, dword [rbp - 0x5c]	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a60	          0x89459c	             mov dword [rbp - 0x64], eax	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4003a63	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a67	           0xfb600	                   movzx eax, byte [rax]	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a6a	            0x3c43	                            cmp al, 0x43	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a6c	           0xf94c0	                                 sete al	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a6f	           0xfb6c0	                           movzx eax, al	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a72	          0x8945a8	             mov dword [rbp - 0x58], eax	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a75	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a7c	        0x488b4d80	             mov rcx, qword [rbp - 0x80]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a80	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a84	          0x4889ce	                            mov rsi, rcx	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a87	          0x4889c7	                            mov rdi, rax	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a8a	      0xe8eaf2ffff	              call sym.format_commit_one	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a8f	          0x8945ac	             mov dword [rbp - 0x54], eax	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4003a92	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1345	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a95	           0x14598	             add dword [rbp - 0x68], eax	      1345	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003a98	        0x837da800	               cmp dword [rbp - 0x58], 0	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4003a9c	            0x741f	                            je 0x4003abd	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4003a9e	          0x8b45ac	             mov eax, dword [rbp - 0x54]	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003aa1	            0x4898	                                    cdqe	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003aa3	        0x48014580	            add qword [rbp - 0x80], rax 	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003aa7	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4003aab	           0xfb600	                   movzx eax, byte [rax]	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4003aae	            0x3c25	                            cmp al, 0x25	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4003ab0	            0x750e	                           jne 0x4003ac0	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4003ab2	      0x4883458001	               add qword [rbp - 0x80], 1	      1353	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003ab7	        0x83459801	               add dword [rbp - 0x68], 1	      1354	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003abb	            0xeba6	                           jmp 0x4003a63	      1355	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4003abd	              0x90	                                     nop	      1348	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4003abe	            0xeb01	                           jmp 0x4003ac1	      1348	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4003ac0	              0x90	                                     nop	      1352	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4003ac1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003ac5	      0xba01000000	                              mov edx, 1	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003aca	      0xbeffffffff	                     mov esi, 0xffffffff	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003acf	          0x4889c7	                            mov rdi, rax	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003ad2	      0xe800000000	                          call 0x4003ad7	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003ad7	          0x8945b0	             mov dword [rbp - 0x50], eax	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4003ada	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003ae1	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003ae4	          0x83f803	                              cmp eax, 3	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003ae7	     0xf853d010000	                           jne 0x4003c2a	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003aed	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003af1	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003af5	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003af9	        0x488b4008	                mov rax, qword [rax + 8]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003afd	        0x4883e801	                              sub rax, 1	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003b01	          0x4801d0	                            add rax, rdx	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003b04	        0x488945c0	             mov qword [rbp - 0x40], rax	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4003b08	      0xe9c7000000	                           jmp 0x4003bd4	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b0d	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b11	           0xfb600	                   movzx eax, byte [rax]	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b14	            0x3c20	                            cmp al, 0x20	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b16	            0x750e	                           jne 0x4003b26	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b18	      0x48836dc001	               sub qword [rbp - 0x40], 1	      1363	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b1d	        0x83459c01	               add dword [rbp - 0x64], 1	      1364	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b21	      0xe9ae000000	                           jmp 0x4003bd4	      1365	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4003b26	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4003b2a	           0xfb600	                   movzx eax, byte [rax]	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4003b2d	            0x3c6d	                            cmp al, 0x6d	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4003b2f	     0xf85bb000000	                           jne 0x4003bf0	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4003b35	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b39	        0x4883e801	                              sub rax, 1	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b3d	        0x488945c8	             mov qword [rbp - 0x38], rax	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b41	            0xeb05	                           jmp 0x4003b48	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b43	      0x48836dc801	               sub qword [rbp - 0x38], 1	      1372	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4003b48	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b4c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b50	          0x4829c2	                            sub rdx, rax	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b53	          0x4889d0	                            mov rax, rdx	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b56	        0x4883f809	                              cmp rax, 9	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b5a	            0x7f0b	                            jg 0x4003b67	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b5c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b60	           0xfb600	                   movzx eax, byte [rax]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b63	            0x3c1b	                            cmp al, 0x1b	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b65	            0x75dc	                           jne 0x4003b43	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003b67	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b6b	           0xfb600	                   movzx eax, byte [rax]	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b6e	            0x3c1b	                            cmp al, 0x1b	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b70	            0x757f	                           jne 0x4003bf1	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b72	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b76	        0x4883c001	                              add rax, 1	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b7a	          0x4889c2	                            mov rdx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b7d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b81	          0x4829c2	                            sub rdx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b84	          0x4889d0	                            mov rax, rdx	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b87	          0x4889c3	                            mov rbx, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b8a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b8e	          0x4889c7	                            mov rdi, rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b91	      0xe800000000	                          call 0x4003b96	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4003b96	          0x4839c3	                            cmp rbx, rax	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b99	            0x7556	                           jne 0x4003bf1	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4003b9b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003b9f	        0x4883c001	                              add rax, 1	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003ba3	          0x4889c2	                            mov rdx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003ba6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003baa	          0x4829c2	                            sub rdx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bad	          0x4889d0	                            mov rax, rdx	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bb0	          0x4889c1	                            mov rcx, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bb3	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bb7	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bbb	      0xbe00000000	                              mov esi, 0	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bc0	          0x4889c7	                            mov rdi, rax	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bc3	      0xe800000000	                          call 0x4003bc8	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4003bc8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4003bcc	        0x4883e801	                              sub rax, 1	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4003bd0	        0x488945c0	             mov qword [rbp - 0x40], rax	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4003bd4	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003bd7	          0x3b459c	             cmp eax, dword [rbp - 0x64]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003bda	            0x7e15	                           jle 0x4003bf1	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003bdc	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003be0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003be4	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003be8	     0xf821fffffff	                            jb 0x4003b0d	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003bee	            0xeb01	                           jmp 0x4003bf1	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003bf0	              0x90	                                     nop	      1369	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4003bf1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003bf5	        0x4883c001	                              add rax, 1	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003bf9	          0x4889c2	                            mov rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003bfc	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c00	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c04	          0x4829c2	                            sub rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c07	          0x4889d0	                            mov rax, rdx	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c0a	          0x4889c2	                            mov rdx, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c0d	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c11	          0x4889d6	                            mov rsi, rdx	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c14	          0x4889c7	                            mov rdi, rax	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c17	      0xe896c5ffff	                  call sym.strbuf_setlen	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4003c1c	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1384	pretty.c	FUNCTION_40	IF_5
0x4003c23	    0xc74048020000	               mov dword [rax + 0x48], 2	      1384	pretty.c	FUNCTION_40	IF_5
0x4003c2a	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1387	pretty.c	FUNCTION_40	IF_9
0x4003c2d	          0x3b459c	             cmp eax, dword [rbp - 0x64]	      1387	pretty.c	FUNCTION_40	IF_9
0x4003c30	     0xf8eb7000000	                           jle 0x4003ced	      1387	pretty.c	FUNCTION_40	IF_9
0x4003c36	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c3d	          0x8b404c	            mov eax, dword [rax + 0x4c] 	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c40	          0x83f801	                              cmp eax, 1	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c43	            0x7415	                            je 0x4003c5a	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c45	          0x83f801	                              cmp eax, 1	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c48	     0xf8286000000	                            jb 0x4003cd4	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c4e	          0x83f802	                              cmp eax, 2	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c51	            0x742c	                            je 0x4003c7f	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c53	          0x83f803	                              cmp eax, 3	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c56	            0x7456	                            je 0x4003cae	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c58	            0xeb7b	                           jmp 0x4003cd5	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c5a	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1391	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c5d	          0x8d50fe	                      lea edx, [rax - 2]	      1391	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c60	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c63	            0x29d0	                            sub eax, edx	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c65	            0x89c2	                            mov edx, eax	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c67	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c6b	      0xb900000000	                              mov ecx, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c70	      0xbe00000000	                              mov esi, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c75	          0x4889c7	                            mov rdi, rax	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c78	      0xe800000000	                          call 0x4003c7d	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4003c7d	            0xeb56	                           jmp 0x4003cd5	      1393	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c7f	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1397	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c82	          0x8d50fe	                      lea edx, [rax - 2]	      1397	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c85	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003c88	            0x29d0	                            sub eax, edx	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003c8a	            0x89c2	                            mov edx, eax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003c8c	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c8f	            0x89c1	                            mov ecx, eax	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c91	          0xc1e91f	                           shr ecx, 0x1f	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c94	             0x1c8	                            add eax, ecx	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c96	            0xd1f8	                              sar eax, 1	      1396	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003c98	          0x8d70ff	                      lea esi, [rax - 1]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003c9b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003c9f	      0xb900000000	                              mov ecx, 0	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003ca4	          0x4889c7	                            mov rdi, rax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003ca7	      0xe800000000	                          call 0x4003cac	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4003cac	            0xeb27	                           jmp 0x4003cd5	      1399	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003cae	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1402	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003cb1	          0x8d50fe	                      lea edx, [rax - 2]	      1402	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003cb4	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cb7	            0x29d0	                            sub eax, edx	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cb9	            0x89c2	                            mov edx, eax	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cbb	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cbe	          0x8d70fe	                      lea esi, [rax - 2]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cc1	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cc5	      0xb900000000	                              mov ecx, 0	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cca	          0x4889c7	                            mov rdi, rax	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003ccd	      0xe800000000	                          call 0x4003cd2	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4003cd2	            0xeb01	                           jmp 0x4003cd5	      1404	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003cd4	              0x90	                                     nop	      1406	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4003cd5	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003cd9	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003cdd	          0x4889d6	                            mov rsi, rdx	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003ce0	          0x4889c7	                            mov rdi, rax	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003ce3	      0xe800000000	                          call 0x4003ce8	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003ce8	      0xe9a2000000	                           jmp 0x4003d8f	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4003ced	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003cf1	        0x488b4008	                mov rax, qword [rax + 8]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003cf5	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003cf8	    0xc745a0000000	               mov dword [rbp - 0x60], 0	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003cff	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d06	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d09	          0x83f802	                              cmp eax, 2	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d0c	            0x750b	                           jne 0x4003d19	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d0e	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d11	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d14	          0x8945a0	             mov dword [rbp - 0x60], eax	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d17	            0xeb21	                           jmp 0x4003d3a	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4003d19	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d20	          0x8b4048	            mov eax, dword [rax + 0x48] 	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d23	          0x83f804	                              cmp eax, 4	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d26	            0x7512	                           jne 0x4003d3a	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d28	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d2b	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d2e	            0x89c2	                            mov edx, eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d30	          0xc1ea1f	                           shr edx, 0x1f	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d33	             0x1d0	                            add eax, edx	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d35	            0xd1f8	                              sar eax, 1	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d37	          0x8945a0	             mov dword [rbp - 0x60], eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4003d3a	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d3d	          0x2b45b0	             sub eax, dword [rbp - 0x50]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d40	            0x89c2	                            mov edx, eax	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d42	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d46	             0x1d0	                            add eax, edx	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d48	          0x89459c	             mov dword [rbp - 0x64], eax	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4003d4b	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d4e	          0x4863d0	                         movsxd rdx, eax	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d51	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d55	      0xbe20000000	                           mov esi, 0x20	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d5a	          0x4889c7	                            mov rdi, rax	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d5d	      0xe800000000	                          call 0x4003d62	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4003d62	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d66	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d6a	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d6e	        0x488b4910	            mov rcx, qword [rcx + 0x10] 	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d72	          0x8b75b4	             mov esi, dword [rbp - 0x4c]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d75	          0x4863fe	                         movsxd rdi, esi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d78	          0x8b75a0	             mov esi, dword [rbp - 0x60]	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d7b	          0x4863f6	                         movsxd rsi, esi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d7e	          0x4801fe	                            add rsi, rdi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d81	          0x4801f1	                            add rcx, rsi	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d84	          0x4889c6	                            mov rsi, rax	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d87	          0x4889cf	                            mov rdi, rcx	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d8a	      0xe800000000	                          call 0x4003d8f	      1421	pretty.c	FUNCTION_40	ELSE_1	CALL_13
0x4003d8f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1424	pretty.c	FUNCTION_40	CALL_14
0x4003d93	          0x4889c7	                            mov rdi, rax	      1424	pretty.c	FUNCTION_40	CALL_14
0x4003d96	      0xe800000000	                          call 0x4003d9b	      1424	pretty.c	FUNCTION_40	CALL_14
0x4003d9b	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	      1425	pretty.c	FUNCTION_40
0x4003da2	    0xc74048000000	               mov dword [rax + 0x48], 0	      1425	pretty.c	FUNCTION_40
0x4003da9	          0x8b4598	             mov eax, dword [rbp - 0x68]	      1426	pretty.c	FUNCTION_40
0x4003dac	            0x4898	                                    cdqe	      1426	pretty.c	FUNCTION_40
0x4003dae	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	      1427	pretty.c	FUNCTION_40
0x4003db2	    0x6448331c2528	                xor rbx, qword fs:[0x28]	      1427	pretty.c	FUNCTION_40
0x4003dbb	            0x7405	                            je 0x4003dc2	      1427	pretty.c	FUNCTION_40
0x4003dbd	      0xe800000000	                          call 0x4003dc2	      1427	pretty.c	FUNCTION_40
0x4003dc2	    0x4881c4880000	                           add rsp, 0x88	      1427	pretty.c	FUNCTION_40
0x4003dc9	              0x5b	                                 pop rbx	      1427	pretty.c	FUNCTION_40
0x4003dca	              0x5d	                                 pop rbp	      1427	pretty.c	FUNCTION_40
0x4003dcb	              0xc3	                                     ret	      1427	pretty.c	FUNCTION_40
format_sanitized_subject	WHILE,2:DO,0:CALL,4:functions,0:IF,3:FOR,1:SWITCH,0:ELSE,1	93
0x40022c8	              0x55	                                push rbp	       823	pretty.c	WHILE_3	FUNCTION_30
0x40022c9	          0x4889e5	                            mov rbp, rsp	       823	pretty.c	WHILE_3	FUNCTION_30
0x40022cc	        0x4883ec30	                           sub rsp, 0x30	       823	pretty.c	WHILE_3	FUNCTION_30
0x40022d0	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       823	pretty.c	WHILE_3	FUNCTION_30
0x40022d4	        0x488975d0	             mov qword [rbp - 0x30], rsi	       823	pretty.c	WHILE_3	FUNCTION_30
0x40022d8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       825	pretty.c	WHILE_3	FUNCTION_30
0x40022dc	        0x488b4008	                mov rax, qword [rax + 8]	       825	pretty.c	WHILE_3	FUNCTION_30
0x40022e0	        0x488945f8	                mov qword [rbp - 8], rax	       825	pretty.c	WHILE_3	FUNCTION_30
0x40022e4	    0xc745ec020000	               mov dword [rbp - 0x14], 2	       826	pretty.c	WHILE_3	FUNCTION_30
0x40022eb	            0xeb77	                           jmp 0x4002364	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40022ed	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40022f1	           0xfb600	                   movzx eax, byte [rax]	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40022f4	           0xfbec0	                           movsx eax, al	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40022f7	            0x89c7	                            mov edi, eax	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40022f9	      0xe883ffffff	                    call sym.istitlechar	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40022fe	            0x85c0	                           test eax, eax	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x4002300	            0x7459	                            je 0x400235b	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x4002302	        0x837dec01	               cmp dword [rbp - 0x14], 1	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x4002306	            0x7511	                           jne 0x4002319	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x4002308	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x400230c	      0xbe2d000000	                           mov esi, 0x2d	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x4002311	          0x4889c7	                            mov rdi, rax	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x4002314	      0xe833dfffff	                   call sym.strbuf_addch	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x4002319	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x4002320	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002324	           0xfb600	                   movzx eax, byte [rax]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002327	           0xfbed0	                           movsx edx, al	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x400232a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x400232e	            0x89d6	                            mov esi, edx	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002330	          0x4889c7	                            mov rdi, rax	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002333	      0xe814dfffff	                   call sym.strbuf_addch	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002338	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x400233c	           0xfb600	                   movzx eax, byte [rax]	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x400233f	            0x3c2e	                            cmp al, 0x2e	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x4002341	            0x751c	                           jne 0x400235f	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x4002343	            0xeb05	                           jmp 0x400234a	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002345	      0x488345d001	               add qword [rbp - 0x30], 1	       836	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x400234a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x400234e	        0x4883c001	                              add rax, 1	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002352	           0xfb600	                   movzx eax, byte [rax]	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002355	            0x3c2e	                            cmp al, 0x2e	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002357	            0x74ec	                            je 0x4002345	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002359	            0xeb04	                           jmp 0x400235f	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x400235b	        0x834dec01	                or dword [rbp - 0x14], 1	       838	pretty.c	WHILE_3	FUNCTION_30	FOR_1	ELSE_1
0x400235f	      0x488345d001	               add qword [rbp - 0x30], 1	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002364	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002368	           0xfb600	                   movzx eax, byte [rax]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400236b	            0x84c0	                             test al, al	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400236d	            0x740f	                            je 0x400237e	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400236f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002373	           0xfb600	                   movzx eax, byte [rax]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002376	            0x3c0a	                             cmp al, 0xa	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002378	     0xf856fffffff	                           jne 0x40022ed	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400237e	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       842	pretty.c	WHILE_3	FUNCTION_30
0x4002386	            0xeb05	                           jmp 0x400238d	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002388	      0x488345f001	               add qword [rbp - 0x10], 1	       846	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400238d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002391	        0x488b4008	                mov rax, qword [rax + 8]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002395	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002399	        0x483b45f8	                cmp rax, qword [rbp - 8]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400239d	            0x7644	                           jbe 0x40023e3	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400239f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023a3	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023a7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023ab	        0x488b4008	                mov rax, qword [rax + 8]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023af	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023b3	        0x4883e801	                              sub rax, 1	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023b7	          0x4801d0	                            add rax, rdx	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023ba	           0xfb600	                   movzx eax, byte [rax]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023bd	            0x3c2e	                            cmp al, 0x2e	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023bf	            0x74c7	                            je 0x4002388	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023c1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023c5	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023c9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023cd	        0x488b4008	                mov rax, qword [rax + 8]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023d1	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023d5	        0x4883e801	                              sub rax, 1	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023d9	          0x4801d0	                            add rax, rdx	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023dc	           0xfb600	                   movzx eax, byte [rax]	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023df	            0x3c2d	                            cmp al, 0x2d	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023e1	            0x74a5	                            je 0x4002388	       845	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40023e3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023e7	        0x488b4008	                mov rax, qword [rax + 8]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023eb	        0x482b45f0	             sub rax, qword [rbp - 0x10]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023ef	          0x4889c1	                            mov rcx, rax	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023f2	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023f6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023fa	          0x4889ce	                            mov rsi, rcx	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40023fd	          0x4889c7	                            mov rdi, rax	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x4002400	      0xe800000000	                          call 0x4002405	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x4002405	              0x90	                                     nop	       848	pretty.c	WHILE_3	FUNCTION_30
0x4002406	              0xc9	                                   leave	       848	pretty.c	WHILE_3	FUNCTION_30
0x4002407	              0xc3	                                     ret	       848	pretty.c	WHILE_3	FUNCTION_30
is_rfc822_special	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,1:ELSE,0	16
0x4000c8f	              0x55	                                push rbp	       223	pretty.c	WHILE_3	FUNCTION_11
0x4000c90	          0x4889e5	                            mov rbp, rsp	       223	pretty.c	WHILE_3	FUNCTION_11
0x4000c93	            0x89f8	                            mov eax, edi	       223	pretty.c	WHILE_3	FUNCTION_11
0x4000c95	          0x8845fc	                  mov byte [rbp - 4], al	       223	pretty.c	WHILE_3	FUNCTION_11
0x4000c98	         0xfbe45fc	               movsx eax, byte [rbp - 4]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000c9c	          0x83e822	                           sub eax, 0x22	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000c9f	          0x83f83b	                           cmp eax, 0x3b	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000ca2	            0x7713	                            ja 0x4000cb7	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000ca4	            0x89c0	                            mov eax, eax	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000ca6	    0x488b04c50000	                  mov rax, qword [rax*8]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000cae	            0xffe0	                                 jmp rax	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000cb0	      0xb801000000	                              mov eax, 1	       238	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000cb5	            0xeb05	                           jmp 0x4000cbc	       238	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000cb7	      0xb800000000	                              mov eax, 0	       240	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x4000cbc	              0x5d	                                 pop rbp	       242	pretty.c	WHILE_3	FUNCTION_11
0x4000cbd	              0xc3	                                     ret	       242	pretty.c	WHILE_3	FUNCTION_11
st_mult	WHILE,0:DO,0:CALL,1:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	22
0x4000096	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_109
0x4000097	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_109
0x400009a	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_109
0x400009e	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_109
0x40000a2	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_109
0x40000a6	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000ab	            0x7430	                            je 0x40000dd	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000ad	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000b4	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000b9	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000bd	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000c1	            0x731a	                           jae 0x40000dd	       795	git-compat-util.h	FUNCTION_109	IF_1
0x40000c3	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000c7	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000cb	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000ce	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000d3	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000d8	      0xe800000000	                          call 0x40000dd	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x40000dd	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_109
0x40000e1	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_109
0x40000e6	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_109
0x40000e7	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_109
_	WHILE,0:DO,0:CALL,0:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	15
0x40002ef	              0x55	                                push rbp	        51	gettext.h	FUNCTION_124
0x40002f0	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_124
0x40002f3	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_124
0x40002f7	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_124
0x40002fb	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_124	IF_1
0x40002ff	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_124	IF_1
0x4000302	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_124	IF_1
0x4000304	            0x7507	                           jne 0x400030d	        52	gettext.h	FUNCTION_124	IF_1
0x4000306	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_124	IF_1
0x400030b	            0xeb0c	                           jmp 0x4000319	        53	gettext.h	FUNCTION_124	IF_1
0x400030d	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_124
0x4000311	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_124
0x4000314	      0xe800000000	                          call 0x4000319	        54	gettext.h	FUNCTION_124
0x4000319	              0xc9	                                   leave	        55	gettext.h	FUNCTION_124
0x400031a	              0xc3	                                     ret	        55	gettext.h	FUNCTION_124
match_placeholder_arg	WHILE,0:DO,0:CALL,1:functions,0:IF,3:FOR,0:SWITCH,0:ELSE,0	45
0x4002cdb	              0x55	                                push rbp	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cdc	          0x4889e5	                            mov rbp, rsp	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cdf	        0x4883ec30	                           sub rsp, 0x30	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002ce3	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002ce7	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002ceb	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cef	    0x64488b042528	                mov rax, qword fs:[0x28]	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cf8	        0x488945f8	                mov qword [rbp - 8], rax	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cfc	            0x31c0	                            xor eax, eax	      1061	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002cfe	        0x488d55f0	                   lea rdx, [rbp - 0x10]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d02	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d06	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d0a	          0x4889ce	                            mov rsi, rcx	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d0d	          0x4889c7	                            mov rdi, rax	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d10	      0xe82bd3ffff	                    call sym.skip_prefix	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d15	            0x85c0	                           test eax, eax	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d17	            0x7507	                           jne 0x4002d20	      1064	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1	CALL_1
0x4002d19	      0xb800000000	                              mov eax, 0	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x4002d1e	            0xeb43	                           jmp 0x4002d63	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x4002d20	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d24	           0xfb600	                   movzx eax, byte [rax]	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d27	            0x3c2c	                            cmp al, 0x2c	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d29	            0x7516	                           jne 0x4002d41	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d2b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d2f	        0x488d5001	                      lea rdx, [rax + 1]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d33	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d37	          0x488910	                    mov qword [rax], rdx	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d3a	      0xb801000000	                              mov eax, 1	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d3f	            0xeb22	                           jmp 0x4002d63	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4002d41	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d45	           0xfb600	                   movzx eax, byte [rax]	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d48	            0x3c29	                            cmp al, 0x29	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d4a	            0x7512	                           jne 0x4002d5e	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d4c	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d50	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d54	          0x488910	                    mov qword [rax], rdx	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d57	      0xb801000000	                              mov eax, 1	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d5c	            0xeb05	                           jmp 0x4002d63	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x4002d5e	      0xb800000000	                              mov eax, 0	      1074	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d63	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d67	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d70	            0x7405	                            je 0x4002d77	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d72	      0xe800000000	                          call 0x4002d77	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d77	              0xc9	                                   leave	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x4002d78	              0xc3	                                     ret	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
pp_remainder	WHILE,0:DO,0:CALL,9:functions,0:IF,7:FOR,1:SWITCH,0:ELSE,2	114
0x400497f	              0x55	                                push rbp	      1753	pretty.c	FUNCTION_51
0x4004980	          0x4889e5	                            mov rbp, rsp	      1753	pretty.c	FUNCTION_51
0x4004983	        0x4883ec40	                           sub rsp, 0x40	      1753	pretty.c	FUNCTION_51
0x4004987	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1753	pretty.c	FUNCTION_51
0x400498b	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1753	pretty.c	FUNCTION_51
0x400498f	        0x488955c8	             mov qword [rbp - 0x38], rdx	      1753	pretty.c	FUNCTION_51
0x4004993	          0x894dc4	             mov dword [rbp - 0x3c], ecx	      1753	pretty.c	FUNCTION_51
0x4004996	    0x64488b042528	                mov rax, qword fs:[0x28]	      1753	pretty.c	FUNCTION_51
0x400499f	        0x488945f8	                mov qword [rbp - 8], rax	      1753	pretty.c	FUNCTION_51
0x40049a3	            0x31c0	                            xor eax, eax	      1753	pretty.c	FUNCTION_51
0x40049a5	    0xc745ec010000	               mov dword [rbp - 0x14], 1	      1754	pretty.c	FUNCTION_51
0x40049ac	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1756	pretty.c	FUNCTION_51	FOR_1
0x40049b0	          0x488b00	                    mov rax, qword [rax]	      1756	pretty.c	FUNCTION_51	FOR_1
0x40049b3	        0x488945f0	             mov qword [rbp - 0x10], rax	      1756	pretty.c	FUNCTION_51	FOR_1
0x40049b7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40049bb	          0x4889c7	                            mov rdi, rax	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40049be	      0xe81ac2ffff	                   call sym.get_one_line	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40049c3	          0x8945e8	             mov dword [rbp - 0x18], eax	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40049c6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049ca	          0x488b10	                    mov rdx, qword [rax]	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049cd	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049d0	            0x4898	                                    cdqe	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049d2	          0x4801c2	                            add rdx, rax	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049d5	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049d9	          0x488910	                    mov qword [rax], rdx	      1758	pretty.c	FUNCTION_51	FOR_1
0x40049dc	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x40049df	            0x85c0	                           test eax, eax	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x40049e1	     0xf8400010000	                            je 0x4004ae7	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x40049e7	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049eb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049ef	          0x4889d6	                            mov rsi, rdx	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049f2	          0x4889c7	                            mov rdi, rax	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049f5	      0xe8c6cdffff	                  call sym.is_blank_line	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049fa	            0x85c0	                           test eax, eax	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049fc	            0x7419	                            je 0x4004a17	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40049fe	        0x837dec00	               cmp dword [rbp - 0x14], 0	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x4004a02	     0xf85f5000000	                           jne 0x4004afd	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x4004a08	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4004a0c	            0x8b00	                    mov eax, dword [rax]	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4004a0e	          0x83f802	                              cmp eax, 2	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4004a11	     0xf84d3000000	                            je 0x4004aea	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4004a17	    0xc745ec000000	               mov dword [rbp - 0x14], 0	      1769	pretty.c	FUNCTION_51	FOR_1
0x4004a1e	          0x8b55e8	             mov edx, dword [rbp - 0x18]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a21	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a24	             0x1d0	                            add eax, edx	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a26	          0x83c014	                           add eax, 0x14	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a29	          0x4863d0	                         movsxd rdx, eax	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a2c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a30	          0x4889d6	                            mov rsi, rdx	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a33	          0x4889c7	                            mov rdi, rax	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a36	      0xe800000000	                          call 0x4004a3b	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x4004a3b	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x4004a3f	            0x741f	                            je 0x4004a60	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x4004a41	          0x8b7de8	             mov edi, dword [rbp - 0x18]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a44	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a48	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a4b	        0x488b75c8	             mov rsi, qword [rbp - 0x38]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a4f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a53	          0x4189f8	                            mov r8d, edi	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a56	          0x4889c7	                            mov rdi, rax	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a59	      0xe85dfeffff	               call sym.pp_handle_indent	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a5e	            0xeb71	                           jmp 0x4004ad1	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x4004a60	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4004a64	          0x8b4038	            mov eax, dword [rax + 0x38] 	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4004a67	            0x85c0	                           test eax, eax	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4004a69	            0x741c	                            je 0x4004a87	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4004a6b	          0x8b4de8	             mov ecx, dword [rbp - 0x18]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a6e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a72	          0x8b7038	            mov esi, dword [rax + 0x38] 	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a75	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a79	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a7d	          0x4889c7	                            mov rdi, rax	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a80	      0xe849fdffff	           call sym.strbuf_add_tabexpand	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a85	            0xeb4a	                           jmp 0x4004ad1	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4004a87	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004a8b	            0x8b00	                    mov eax, dword [rax]	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004a8d	          0x83f807	                              cmp eax, 7	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004a90	            0x7526	                           jne 0x4004ab8	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004a92	          0x8b55e8	             mov edx, dword [rbp - 0x18]	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4004a95	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4004a99	            0x89d6	                            mov esi, edx	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4004a9b	          0x4889c7	                            mov rdi, rax	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4004a9e	      0xe88dfeffff	                 call sym.is_mboxrd_from	      1779	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7	CALL_6
0x4004aa3	            0x85c0	                           test eax, eax	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004aa5	            0x7411	                            je 0x4004ab8	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4004aa7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4004aab	      0xbe3e000000	                           mov esi, 0x3e	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4004ab0	          0x4889c7	                            mov rdi, rax	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4004ab3	      0xe894b7ffff	                   call sym.strbuf_addch	      1780	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_7
0x4004ab8	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004abb	          0x4863d0	                         movsxd rdx, eax	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004abe	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004ac2	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004ac6	          0x4889ce	                            mov rsi, rcx	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004ac9	          0x4889c7	                            mov rdi, rax	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004acc	      0xe800000000	                          call 0x4004ad1	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x4004ad1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4004ad5	      0xbe0a000000	                            mov esi, 0xa	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4004ada	          0x4889c7	                            mov rdi, rax	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4004add	      0xe86ab7ffff	                   call sym.strbuf_addch	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4004ae2	      0xe9c5feffff	                           jmp 0x40049ac	      1784	pretty.c	FUNCTION_51	FOR_1	CALL_9
0x4004ae7	              0x90	                                     nop	      1761	pretty.c	FUNCTION_51	FOR_1	IF_1
0x4004ae8	            0xeb01	                           jmp 0x4004aeb	      1761	pretty.c	FUNCTION_51	FOR_1	IF_1
0x4004aea	              0x90	                                     nop	      1767	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x4004aeb	              0x90	                                     nop	      1786	pretty.c	FUNCTION_51
0x4004aec	        0x488b45f8	                mov rax, qword [rbp - 8]	      1786	pretty.c	FUNCTION_51
0x4004af0	    0x644833042528	                xor rax, qword fs:[0x28]	      1786	pretty.c	FUNCTION_51
0x4004af9	            0x740d	                            je 0x4004b08	      1786	pretty.c	FUNCTION_51
0x4004afb	            0xeb06	                           jmp 0x4004b03	      1786	pretty.c	FUNCTION_51
0x4004afd	              0x90	                                     nop	      1765	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x4004afe	      0xe9a9feffff	                           jmp 0x40049ac	      1785	pretty.c	FUNCTION_51	FOR_1
0x4004b03	      0xe800000000	                          call 0x4004b08	      1786	pretty.c	FUNCTION_51
0x4004b08	              0xc9	                                   leave	      1786	pretty.c	FUNCTION_51
0x4004b09	              0xc3	                                     ret	      1786	pretty.c	FUNCTION_51
strbuf_wrap	WHILE,0:DO,0:CALL,4:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	52
0x40025a4	              0x55	                                push rbp	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025a5	          0x4889e5	                            mov rbp, rsp	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025a8	        0x4883ec50	                           sub rsp, 0x50	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025ac	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025b0	        0x488975d0	             mov qword [rbp - 0x30], rsi	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025b4	        0x488955c8	             mov qword [rbp - 0x38], rdx	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025b8	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025bc	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025c0	    0x64488b042528	                mov rax, qword fs:[0x28]	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025c9	        0x488945f8	                mov qword [rbp - 8], rax	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025cd	            0x31c0	                            xor eax, eax	       891	pretty.c	WHILE_3	FUNCTION_33
0x40025cf	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x40025d7	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x40025df	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x40025e7	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x40025ec	            0x741b	                            je 0x4002609	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x40025ee	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x40025f2	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x40025f6	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x40025fa	        0x488d45e0	                   lea rax, [rbp - 0x20]	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x40025fe	          0x4889ce	                            mov rsi, rcx	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x4002601	          0x4889c7	                            mov rdi, rax	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x4002604	      0xe800000000	                          call 0x4002609	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x4002609	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400260d	          0x4189c0	                            mov r8d, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002610	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002614	            0x89c1	                            mov ecx, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002616	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400261a	            0x89c7	                            mov edi, eax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400261c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002620	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002624	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002628	        0x488d3402	                    lea rsi, [rdx + rax]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400262c	        0x488d45e0	                   lea rax, [rbp - 0x20]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002630	            0x89fa	                            mov edx, edi	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002632	          0x4889c7	                            mov rdi, rax	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4002635	      0xe800000000	                          call 0x400263a	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400263a	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x400263e	        0x488d45e0	                   lea rax, [rbp - 0x20]	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x4002642	          0x4889d6	                            mov rsi, rdx	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x4002645	          0x4889c7	                            mov rdi, rax	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x4002648	      0xe89bdaffff	                    call sym.strbuf_swap	       898	pretty.c	WHILE_3	FUNCTION_33	CALL_3
0x400264d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x4002651	          0x4889c7	                            mov rdi, rax	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x4002654	      0xe800000000	                          call 0x4002659	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x4002659	              0x90	                                     nop	       900	pretty.c	WHILE_3	FUNCTION_33
0x400265a	        0x488b45f8	                mov rax, qword [rbp - 8]	       900	pretty.c	WHILE_3	FUNCTION_33
0x400265e	    0x644833042528	                xor rax, qword fs:[0x28]	       900	pretty.c	WHILE_3	FUNCTION_33
0x4002667	            0x7405	                            je 0x400266e	       900	pretty.c	WHILE_3	FUNCTION_33
0x4002669	      0xe800000000	                          call 0x400266e	       900	pretty.c	WHILE_3	FUNCTION_33
0x400266e	              0xc9	                                   leave	       900	pretty.c	WHILE_3	FUNCTION_33
0x400266f	              0xc3	                                     ret	       900	pretty.c	WHILE_3	FUNCTION_33
strbuf_swap	WHILE,0:DO,0:CALL,0:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	39
0x40000e8	              0x55	                                push rbp	       126	strbuf.h	FUNCTION_54
0x40000e9	          0x4889e5	                            mov rbp, rsp	       126	strbuf.h	FUNCTION_54
0x40000ec	        0x4883ec40	                           sub rsp, 0x40	       126	strbuf.h	FUNCTION_54
0x40000f0	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       126	strbuf.h	FUNCTION_54
0x40000f4	        0x488975c0	             mov qword [rbp - 0x40], rsi	       126	strbuf.h	FUNCTION_54
0x40000f8	    0x64488b042528	                mov rax, qword fs:[0x28]	       126	strbuf.h	FUNCTION_54
0x4000101	        0x488945f8	                mov qword [rbp - 8], rax	       126	strbuf.h	FUNCTION_54
0x4000105	            0x31c0	                            xor eax, eax	       126	strbuf.h	FUNCTION_54
0x4000107	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       127	strbuf.h	FUNCTION_54
0x400010b	        0x488945d0	             mov qword [rbp - 0x30], rax	       127	strbuf.h	FUNCTION_54
0x400010f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       127	strbuf.h	FUNCTION_54
0x4000113	        0x488945d8	             mov qword [rbp - 0x28], rax	       127	strbuf.h	FUNCTION_54
0x4000117	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_54
0x400011b	          0x488b10	                    mov rdx, qword [rax]	       127	strbuf.h	FUNCTION_54
0x400011e	        0x488955e0	             mov qword [rbp - 0x20], rdx	       127	strbuf.h	FUNCTION_54
0x4000122	        0x488b5008	                mov rdx, qword [rax + 8]	       127	strbuf.h	FUNCTION_54
0x4000126	        0x488955e8	             mov qword [rbp - 0x18], rdx	       127	strbuf.h	FUNCTION_54
0x400012a	        0x488b4010	            mov rax, qword [rax + 0x10] 	       127	strbuf.h	FUNCTION_54
0x400012e	        0x488945f0	             mov qword [rbp - 0x10], rax	       127	strbuf.h	FUNCTION_54
0x4000132	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_54
0x4000136	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_54
0x400013a	      0xba18000000	                           mov edx, 0x18	       127	strbuf.h	FUNCTION_54
0x400013f	          0x4889ce	                            mov rsi, rcx	       127	strbuf.h	FUNCTION_54
0x4000142	          0x4889c7	                            mov rdi, rax	       127	strbuf.h	FUNCTION_54
0x4000145	      0xe800000000	                          call 0x400014a	       127	strbuf.h	FUNCTION_54
0x400014a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_54
0x400014e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       127	strbuf.h	FUNCTION_54
0x4000152	          0x488910	                    mov qword [rax], rdx	       127	strbuf.h	FUNCTION_54
0x4000155	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       127	strbuf.h	FUNCTION_54
0x4000159	        0x48895008	                mov qword [rax + 8], rdx	       127	strbuf.h	FUNCTION_54
0x400015d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       127	strbuf.h	FUNCTION_54
0x4000161	        0x48895010	             mov qword [rax + 0x10], rdx	       127	strbuf.h	FUNCTION_54
0x4000165	              0x90	                                     nop	       128	strbuf.h	FUNCTION_54
0x4000166	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	strbuf.h	FUNCTION_54
0x400016a	    0x644833042528	                xor rax, qword fs:[0x28]	       128	strbuf.h	FUNCTION_54
0x4000173	            0x7405	                            je 0x400017a	       128	strbuf.h	FUNCTION_54
0x4000175	      0xe800000000	                          call 0x400017a	       128	strbuf.h	FUNCTION_54
0x400017a	              0xc9	                                   leave	       128	strbuf.h	FUNCTION_54
0x400017b	              0xc3	                                     ret	       128	strbuf.h	FUNCTION_54
pp_handle_indent	WHILE,0:DO,0:CALL,3:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,1	36
0x40048bb	              0x55	                                push rbp	      1731	pretty.c	FUNCTION_49
0x40048bc	          0x4889e5	                            mov rbp, rsp	      1731	pretty.c	FUNCTION_49
0x40048bf	        0x4883ec20	                           sub rsp, 0x20	      1731	pretty.c	FUNCTION_49
0x40048c3	        0x48897df8	                mov qword [rbp - 8], rdi	      1731	pretty.c	FUNCTION_49
0x40048c7	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1731	pretty.c	FUNCTION_49
0x40048cb	          0x8955ec	             mov dword [rbp - 0x14], edx	      1731	pretty.c	FUNCTION_49
0x40048ce	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1731	pretty.c	FUNCTION_49
0x40048d2	        0x448945e8	             mov dword [rbp - 0x18], r8d	      1731	pretty.c	FUNCTION_49
0x40048d6	          0x8b45ec	             mov eax, dword [rbp - 0x14]	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048d9	          0x4863d0	                         movsxd rdx, eax	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048dc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048e0	      0xbe20000000	                           mov esi, 0x20	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048e5	          0x4889c7	                            mov rdi, rax	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048e8	      0xe800000000	                          call 0x40048ed	      1732	pretty.c	FUNCTION_49	CALL_1
0x40048ed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1733	pretty.c	FUNCTION_49	IF_1
0x40048f1	          0x8b4038	            mov eax, dword [rax + 0x38] 	      1733	pretty.c	FUNCTION_49	IF_1
0x40048f4	            0x85c0	                           test eax, eax	      1733	pretty.c	FUNCTION_49	IF_1
0x40048f6	            0x741c	                            je 0x4004914	      1733	pretty.c	FUNCTION_49	IF_1
0x40048f8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1734	pretty.c	FUNCTION_49	CALL_2
0x40048fc	          0x8b7038	            mov esi, dword [rax + 0x38] 	      1734	pretty.c	FUNCTION_49	CALL_2
0x40048ff	          0x8b4de8	             mov ecx, dword [rbp - 0x18]	      1734	pretty.c	FUNCTION_49	CALL_2
0x4004902	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1734	pretty.c	FUNCTION_49	CALL_2
0x4004906	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1734	pretty.c	FUNCTION_49	CALL_2
0x400490a	          0x4889c7	                            mov rdi, rax	      1734	pretty.c	FUNCTION_49	CALL_2
0x400490d	      0xe8bcfeffff	           call sym.strbuf_add_tabexpand	      1734	pretty.c	FUNCTION_49	CALL_2
0x4004912	            0xeb19	                           jmp 0x400492d	      1737	pretty.c	FUNCTION_49
0x4004914	          0x8b45e8	             mov eax, dword [rbp - 0x18]	      1736	pretty.c	FUNCTION_49	CALL_3
0x4004917	          0x4863d0	                         movsxd rdx, eax	      1736	pretty.c	FUNCTION_49	CALL_3
0x400491a	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1736	pretty.c	FUNCTION_49	CALL_3
0x400491e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1736	pretty.c	FUNCTION_49	CALL_3
0x4004922	          0x4889ce	                            mov rsi, rcx	      1736	pretty.c	FUNCTION_49	CALL_3
0x4004925	          0x4889c7	                            mov rdi, rax	      1736	pretty.c	FUNCTION_49	CALL_3
0x4004928	      0xe800000000	                          call 0x400492d	      1736	pretty.c	FUNCTION_49	CALL_3
0x400492d	              0x90	                                     nop	      1737	pretty.c	FUNCTION_49
0x400492e	              0xc9	                                   leave	      1737	pretty.c	FUNCTION_49
0x400492f	              0xc3	                                     ret	      1737	pretty.c	FUNCTION_49
format_commit_message	WHILE,0:DO,0:CALL,10:functions,0:IF,5:FOR,0:SWITCH,0:ELSE,1	112
0x4004036	              0x55	                                push rbp	      1510	pretty.c	FUNCTION_44
0x4004037	          0x4889e5	                            mov rbp, rsp	      1510	pretty.c	FUNCTION_44
0x400403a	    0x4881ec100100	                          sub rsp, 0x110	      1510	pretty.c	FUNCTION_44
0x4004041	    0x4889bd08ffff	             mov qword [rbp - 0xf8], rdi	      1510	pretty.c	FUNCTION_44
0x4004048	    0x4889b500ffff	            mov qword [rbp - 0x100], rsi	      1510	pretty.c	FUNCTION_44
0x400404f	    0x488995f8feff	            mov qword [rbp - 0x108], rdx	      1510	pretty.c	FUNCTION_44
0x4004056	    0x48898df0feff	            mov qword [rbp - 0x110], rcx	      1510	pretty.c	FUNCTION_44
0x400405d	    0x64488b042528	                mov rax, qword fs:[0x28]	      1510	pretty.c	FUNCTION_44
0x4004066	        0x488945f8	                mov qword [rbp - 8], rax	      1510	pretty.c	FUNCTION_44
0x400406a	            0x31c0	                            xor eax, eax	      1510	pretty.c	FUNCTION_44
0x400406c	    0x488b85f0feff	            mov rax, qword [rbp - 0x110]	      1512	pretty.c	FUNCTION_44
0x4004073	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1512	pretty.c	FUNCTION_44
0x4004077	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	      1512	pretty.c	FUNCTION_44
0x400407e	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	      1513	pretty.c	FUNCTION_44
0x4004089	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	      1515	pretty.c	FUNCTION_44	CALL_1
0x4004090	      0xbac0000000	                           mov edx, 0xc0	      1515	pretty.c	FUNCTION_44	CALL_1
0x4004095	      0xbe00000000	                              mov esi, 0	      1515	pretty.c	FUNCTION_44	CALL_1
0x400409a	          0x4889c7	                            mov rdi, rax	      1515	pretty.c	FUNCTION_44	CALL_1
0x400409d	      0xe800000000	                          call 0x40040a2	      1515	pretty.c	FUNCTION_44	CALL_1
0x40040a2	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1516	pretty.c	FUNCTION_44
0x40040a9	    0x48898530ffff	             mov qword [rbp - 0xd0], rax	      1516	pretty.c	FUNCTION_44
0x40040b0	    0x488b85f0feff	            mov rax, qword [rbp - 0x110]	      1517	pretty.c	FUNCTION_44
0x40040b7	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	      1517	pretty.c	FUNCTION_44
0x40040be	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1518	pretty.c	FUNCTION_44
0x40040c5	        0x488b4008	                mov rax, qword [rax + 8]	      1518	pretty.c	FUNCTION_44
0x40040c9	        0x488945e8	             mov qword [rbp - 0x18], rax	      1518	pretty.c	FUNCTION_44
0x40040cd	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040d4	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040db	        0x488d4858	                   lea rcx, [rax + 0x58]	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040df	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040e6	          0x4889ce	                            mov rsi, rcx	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040e9	          0x4889c7	                            mov rdi, rax	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040ec	      0xe800000000	                          call 0x40040f1	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040f1	        0x48894580	             mov qword [rbp - 0x80], rax	      1523	pretty.c	FUNCTION_44	CALL_2
0x40040f5	    0x488d9530ffff	                   lea rdx, [rbp - 0xd0]	      1527	pretty.c	FUNCTION_44	CALL_3
0x40040fc	    0x488bb500ffff	            mov rsi, qword [rbp - 0x100]	      1527	pretty.c	FUNCTION_44	CALL_3
0x4004103	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1527	pretty.c	FUNCTION_44	CALL_3
0x400410a	          0x4889d1	                            mov rcx, rdx	      1527	pretty.c	FUNCTION_44	CALL_3
0x400410d	      0xba00000000	                              mov edx, 0	      1527	pretty.c	FUNCTION_44	CALL_3
0x4004112	          0x4889c7	                            mov rdi, rax	      1527	pretty.c	FUNCTION_44	CALL_3
0x4004115	      0xe800000000	                          call 0x400411a	      1527	pretty.c	FUNCTION_44	CALL_3
0x400411a	    0x488db530ffff	                   lea rsi, [rbp - 0xd0]	      1528	pretty.c	FUNCTION_44	CALL_4
0x4004121	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1528	pretty.c	FUNCTION_44	CALL_4
0x4004128	    0x41b800000000	                              mov r8d, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x400412e	      0xb900000000	                              mov ecx, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x4004133	      0xba00000000	                              mov edx, 0	      1528	pretty.c	FUNCTION_44	CALL_4
0x4004138	          0x4889c7	                            mov rdi, rax	      1528	pretty.c	FUNCTION_44	CALL_4
0x400413b	      0xe830e5ffff	            call sym.rewrap_message_tail	      1528	pretty.c	FUNCTION_44	CALL_4
0x4004140	    0x4883bd18ffff	               cmp qword [rbp - 0xe8], 0	      1531	pretty.c	FUNCTION_44	IF_1
0x4004148	            0x742a	                            je 0x4004174	      1531	pretty.c	FUNCTION_44	IF_1
0x400414a	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4004151	    0x488b8520ffff	             mov rax, qword [rbp - 0xe0]	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4004158	          0x4889d6	                            mov rsi, rdx	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x400415b	          0x4889c7	                            mov rdi, rax	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x400415e	      0xe800000000	                          call 0x4004163	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4004163	            0x85c0	                           test eax, eax	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4004165	            0x743b	                            je 0x40041a2	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x4004167	    0x48c78518ffff	               mov qword [rbp - 0xe8], 0	      1533	pretty.c	FUNCTION_44	IF_1	IF_2
0x4004172	            0xeb2e	                           jmp 0x40041a2	      1533	pretty.c	FUNCTION_44	IF_1	IF_2
0x4004174	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4004178	          0x4885c0	                           test rax, rax	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x400417b	            0x7425	                            je 0x40041a2	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x400417d	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4004181	    0x488b9520ffff	             mov rdx, qword [rbp - 0xe0]	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4004188	          0x4889d6	                            mov rsi, rdx	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x400418b	          0x4889c7	                            mov rdi, rax	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x400418e	      0xe800000000	                          call 0x4004193	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x4004193	            0x85c0	                           test eax, eax	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4004195	            0x750b	                           jne 0x40041a2	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4004197	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1537	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x400419b	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	      1537	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40041a2	    0x4883bd18ffff	               cmp qword [rbp - 0xe8], 0	      1540	pretty.c	FUNCTION_44	IF_4
0x40041aa	            0x7476	                            je 0x4004222	      1540	pretty.c	FUNCTION_44	IF_4
0x40041ac	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041b3	        0x488b4008	                mov rax, qword [rax + 8]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041b7	            0x89c7	                            mov edi, eax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041b9	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041c0	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041c4	    0x488db514ffff	                   lea rsi, [rbp - 0xec]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041cb	    0x488b8d20ffff	             mov rcx, qword [rbp - 0xe0]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041d2	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041d9	          0x4989f0	                             mov r8, rsi	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041dc	            0x89fe	                            mov esi, edi	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041de	          0x4889c7	                            mov rdi, rax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041e1	      0xe800000000	                          call 0x40041e6	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041e6	    0x48898528ffff	             mov qword [rbp - 0xd8], rax	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x40041ed	    0x4883bd28ffff	               cmp qword [rbp - 0xd8], 0	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x40041f5	            0x742b	                            je 0x4004222	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x40041f7	    0x8b8514ffffff	             mov eax, dword [rbp - 0xec]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x40041fd	          0x83c001	                              add eax, 1	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4004200	          0x4863c8	                         movsxd rcx, eax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4004203	    0x8b8514ffffff	             mov eax, dword [rbp - 0xec]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4004209	          0x4863d0	                         movsxd rdx, eax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400420c	    0x488bb528ffff	             mov rsi, qword [rbp - 0xd8]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4004213	    0x488b85f8feff	            mov rax, qword [rbp - 0x108]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400421a	          0x4889c7	                            mov rdi, rax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400421d	      0xe800000000	                          call 0x4004222	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4004222	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1548	pretty.c	FUNCTION_44	CALL_9
0x4004226	          0x4889c7	                            mov rdi, rax	      1548	pretty.c	FUNCTION_44	CALL_9
0x4004229	      0xe800000000	                          call 0x400422e	      1548	pretty.c	FUNCTION_44	CALL_9
0x400422e	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      1549	pretty.c	FUNCTION_44	CALL_10
0x4004232	    0x488b8508ffff	             mov rax, qword [rbp - 0xf8]	      1549	pretty.c	FUNCTION_44	CALL_10
0x4004239	          0x4889d6	                            mov rsi, rdx	      1549	pretty.c	FUNCTION_44	CALL_10
0x400423c	          0x4889c7	                            mov rdi, rax	      1549	pretty.c	FUNCTION_44	CALL_10
0x400423f	      0xe800000000	                          call 0x4004244	      1549	pretty.c	FUNCTION_44	CALL_10
0x4004244	              0x90	                                     nop	      1550	pretty.c	FUNCTION_44
0x4004245	        0x488b45f8	                mov rax, qword [rbp - 8]	      1550	pretty.c	FUNCTION_44
0x4004249	    0x644833042528	                xor rax, qword fs:[0x28]	      1550	pretty.c	FUNCTION_44
0x4004252	            0x7405	                            je 0x4004259	      1550	pretty.c	FUNCTION_44
0x4004254	      0xe800000000	                          call 0x4004259	      1550	pretty.c	FUNCTION_44
0x4004259	              0xc9	                                   leave	      1550	pretty.c	FUNCTION_44
0x400425a	              0xc3	                                     ret	      1550	pretty.c	FUNCTION_44
needs_rfc822_quoting	WHILE,0:DO,0:CALL,1:functions,0:IF,1:FOR,1:SWITCH,0:ELSE,0	26
0x4000cbe	              0x55	                                push rbp	       245	pretty.c	WHILE_3	FUNCTION_12
0x4000cbf	          0x4889e5	                            mov rbp, rsp	       245	pretty.c	WHILE_3	FUNCTION_12
0x4000cc2	        0x4883ec20	                           sub rsp, 0x20	       245	pretty.c	WHILE_3	FUNCTION_12
0x4000cc6	        0x48897de8	             mov qword [rbp - 0x18], rdi	       245	pretty.c	WHILE_3	FUNCTION_12
0x4000cca	          0x8975e4	             mov dword [rbp - 0x1c], esi	       245	pretty.c	WHILE_3	FUNCTION_12
0x4000ccd	    0xc745fc000000	                  mov dword [rbp - 4], 0	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000cd4	            0xeb29	                           jmp 0x4000cff	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000cd6	          0x8b45fc	                mov eax, dword [rbp - 4]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000cd9	          0x4863d0	                         movsxd rdx, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000cdc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000ce0	          0x4801d0	                            add rax, rdx	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000ce3	           0xfb600	                   movzx eax, byte [rax]	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000ce6	           0xfbec0	                           movsx eax, al	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000ce9	            0x89c7	                            mov edi, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000ceb	      0xe89fffffff	              call sym.is_rfc822_special	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000cf0	            0x85c0	                           test eax, eax	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000cf2	            0x7407	                            je 0x4000cfb	       248	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1	CALL_1
0x4000cf4	      0xb801000000	                              mov eax, 1	       249	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1
0x4000cf9	            0xeb11	                           jmp 0x4000d0c	       249	pretty.c	WHILE_3	FUNCTION_12	FOR_1	IF_1
0x4000cfb	        0x8345fc01	                  add dword [rbp - 4], 1	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000cff	          0x8b45fc	                mov eax, dword [rbp - 4]	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000d02	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000d05	            0x7ccf	                            jl 0x4000cd6	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4000d07	      0xb800000000	                              mov eax, 0	       250	pretty.c	WHILE_3	FUNCTION_12
0x4000d0c	              0xc9	                                   leave	       251	pretty.c	WHILE_3	FUNCTION_12
0x4000d0d	              0xc3	                                     ret	       251	pretty.c	WHILE_3	FUNCTION_12
add_rfc2047	WHILE,1:DO,0:CALL,11:functions,0:IF,1:FOR,1:SWITCH,0:ELSE,0	130
0x4000f5d	              0x55	                                push rbp	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f5e	          0x4889e5	                            mov rbp, rsp	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f61	              0x53	                                push rbx	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f62	        0x4883ec68	                           sub rsp, 0x68	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f66	        0x48897db8	             mov qword [rbp - 0x48], rdi	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f6a	        0x488975b0	             mov qword [rbp - 0x50], rsi	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f6e	        0x488955a8	             mov qword [rbp - 0x58], rdx	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f72	        0x48894da0	             mov qword [rbp - 0x60], rcx	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f76	        0x4489459c	             mov dword [rbp - 0x64], r8d	       360	pretty.c	WHILE_3	FUNCTION_17
0x4000f7a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x4000f7e	          0x4889c7	                            mov rdi, rax	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x4000f81	      0xe888fdffff	               call sym.last_line_length	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x4000f86	          0x8945d0	             mov dword [rbp - 0x30], eax	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x4000f89	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f8d	          0x4889d0	                            mov rax, rdx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f90	          0x4801c0	                            add rax, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f93	        0x488d1c10	                    lea rbx, [rax + rdx]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f97	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f9b	          0x4889c7	                            mov rdi, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000f9e	      0xe800000000	                          call 0x4000fa3	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fa3	          0x4801d8	                            add rax, rbx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fa6	        0x488d5064	                   lea rdx, [rax + 0x64]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000faa	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fae	          0x4889d6	                            mov rsi, rdx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fb1	          0x4889c7	                            mov rdi, rax	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fb4	      0xe800000000	                          call 0x4000fb9	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000fb9	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fbd	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fc1	      0xbe00000000	                              mov esi, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fc6	          0x4889c7	                            mov rdi, rax	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fc9	      0xb800000000	                              mov eax, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fce	      0xe800000000	                          call 0x4000fd3	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000fd3	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fd7	          0x4889c7	                            mov rdi, rax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fda	      0xe800000000	                          call 0x4000fdf	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fdf	            0x89c2	                            mov edx, eax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fe1	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fe4	             0x1d0	                            add eax, edx	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fe6	          0x83c005	                              add eax, 5	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fe9	          0x8945d0	             mov dword [rbp - 0x30], eax	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000fec	      0xe907010000	                           jmp 0x40010f8	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000ff1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       377	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000ff5	        0x488945e0	             mov qword [rbp - 0x20], rax	       377	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000ff9	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4000ffd	        0x488d4da8	                   lea rcx, [rbp - 0x58]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4001001	        0x488d45b0	                   lea rax, [rbp - 0x50]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4001005	          0x4889ce	                            mov rsi, rcx	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4001008	          0x4889c7	                            mov rdi, rax	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x400100b	      0xe800000000	                          call 0x4001010	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4001010	          0x8945d4	             mov dword [rbp - 0x2c], eax	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4001013	        0x837dd401	               cmp dword [rbp - 0x2c], 1	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001017	            0x7f1a	                            jg 0x4001033	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001019	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x400101d	           0xfb600	                   movzx eax, byte [rax]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001020	           0xfbec0	                           movsx eax, al	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001023	          0x8b559c	             mov edx, dword [rbp - 0x64]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001026	            0x89d6	                            mov esi, edx	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001028	            0x89c7	                            mov edi, eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x400102a	      0xe8e5fdffff	             call sym.is_rfc2047_special	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x400102f	            0x85c0	                           test eax, eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001031	            0x7407	                            je 0x400103a	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001033	      0xb801000000	                              mov eax, 1	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001038	            0xeb05	                           jmp 0x400103f	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x400103a	      0xb800000000	                              mov eax, 0	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x400103f	          0x8945d8	             mov dword [rbp - 0x28], eax	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4001042	        0x837dd800	               cmp dword [rbp - 0x28], 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001046	            0x7407	                            je 0x400104f	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001048	      0xb800000000	                              mov eax, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400104d	            0xeb05	                           jmp 0x4001054	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400104f	      0xb800000000	                              mov eax, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001054	        0x488945e8	             mov qword [rbp - 0x18], rax	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001058	        0x837dd800	               cmp dword [rbp - 0x28], 0	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400105c	            0x740b	                            je 0x4001069	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400105e	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001061	            0x89d0	                            mov eax, edx	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001063	             0x1c0	                            add eax, eax	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001065	             0x1d0	                            add eax, edx	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001067	            0xeb05	                           jmp 0x400106e	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001069	      0xb801000000	                              mov eax, 1	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400106e	          0x8945dc	             mov dword [rbp - 0x24], eax	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001071	          0x8b55d0	             mov edx, dword [rbp - 0x30]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001074	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001077	             0x1d0	                            add eax, edx	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001079	          0x8d5002	                      lea edx, [rax + 2]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x400107c	    0x8b0500000000	            mov eax, dword [0x04001082] 	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001082	            0x39c2	                            cmp edx, eax	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001084	            0x7e2c	                           jle 0x40010b2	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4001086	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x400108a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x400108e	      0xbe00000000	                              mov esi, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4001093	          0x4889c7	                            mov rdi, rax	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4001096	      0xb800000000	                              mov eax, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x400109b	      0xe800000000	                          call 0x40010a0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x40010a0	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x40010a4	          0x4889c7	                            mov rdi, rax	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x40010a7	      0xe800000000	                          call 0x40010ac	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x40010ac	          0x83c006	                              add eax, 6	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x40010af	          0x8945d0	             mov dword [rbp - 0x30], eax	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x40010b2	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010b9	            0xeb2f	                           jmp 0x40010ea	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010bb	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010be	          0x4863d0	                         movsxd rdx, eax	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010c1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010c5	          0x4801d0	                            add rax, rdx	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010c8	           0xfb600	                   movzx eax, byte [rax]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010cb	           0xfb6d0	                           movzx edx, al	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010ce	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010d2	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010d6	          0x4889ce	                            mov rsi, rcx	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010d9	          0x4889c7	                            mov rdi, rax	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010dc	      0xb800000000	                              mov eax, 0	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010e1	      0xe800000000	                          call 0x40010e6	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x40010e6	        0x8345cc01	               add dword [rbp - 0x34], 1	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010ea	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010ed	          0x3b45d4	             cmp eax, dword [rbp - 0x2c]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010f0	            0x7cc9	                            jl 0x40010bb	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x40010f2	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       401	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40010f5	           0x145d0	             add dword [rbp - 0x30], eax	       401	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40010f8	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40010fc	          0x4885c0	                           test rax, rax	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40010ff	     0xf85ecfeffff	                           jne 0x4000ff1	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4001105	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x4001109	      0xbe00000000	                              mov esi, 0	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x400110e	          0x4889c7	                            mov rdi, rax	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x4001111	      0xe8a4f1ffff	                  call sym.strbuf_addstr	       403	pretty.c	WHILE_3	FUNCTION_17	CALL_11
0x4001116	              0x90	                                     nop	       404	pretty.c	WHILE_3	FUNCTION_17
0x4001117	        0x4883c468	                           add rsp, 0x68	       404	pretty.c	WHILE_3	FUNCTION_17
0x400111b	              0x5b	                                 pop rbx	       404	pretty.c	WHILE_3	FUNCTION_17
0x400111c	              0x5d	                                 pop rbp	       404	pretty.c	WHILE_3	FUNCTION_17
0x400111d	              0xc3	                                     ret	       404	pretty.c	WHILE_3	FUNCTION_17
get_one_line	WHILE,0:DO,0:CALL,0:functions,0:IF,2:FOR,1:SWITCH,0:ELSE,0	21
0x4000bdd	              0x55	                                push rbp	       190	pretty.c	WHILE_3	FUNCTION_8
0x4000bde	          0x4889e5	                            mov rbp, rsp	       190	pretty.c	WHILE_3	FUNCTION_8
0x4000be1	        0x48897de8	             mov qword [rbp - 0x18], rdi	       190	pretty.c	WHILE_3	FUNCTION_8
0x4000be5	    0xc745fc000000	                  mov dword [rbp - 4], 0	       191	pretty.c	WHILE_3	FUNCTION_8
0x4000bec	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000bf0	        0x488d5001	                      lea rdx, [rax + 1]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000bf4	        0x488955e8	             mov qword [rbp - 0x18], rdx	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000bf8	           0xfb600	                   movzx eax, byte [rax]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000bfb	          0x8845fb	                  mov byte [rbp - 5], al	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000bfe	        0x807dfb00	                   cmp byte [rbp - 5], 0	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x4000c02	            0x740c	                            je 0x4000c10	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x4000c04	        0x8345fc01	                  add dword [rbp - 4], 1	       197	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000c08	        0x807dfb0a	                 cmp byte [rbp - 5], 0xa	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0x4000c0c	            0x7405	                            je 0x4000c13	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0x4000c0e	            0xebdc	                           jmp 0x4000bec	       200	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000c10	              0x90	                                     nop	       196	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x4000c11	            0xeb01	                           jmp 0x4000c14	       196	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x4000c13	              0x90	                                     nop	       199	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0x4000c14	          0x8b45fc	                mov eax, dword [rbp - 4]	       201	pretty.c	WHILE_3	FUNCTION_8
0x4000c17	              0x5d	                                 pop rbp	       202	pretty.c	WHILE_3	FUNCTION_8
0x4000c18	              0xc3	                                     ret	       202	pretty.c	WHILE_3	FUNCTION_8
skip_prefix	WHILE,0:DO,1:CALL,0:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	27
0x4000040	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_101
0x4000041	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_101
0x4000044	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_101
0x4000048	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_101
0x400004c	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_101
0x4000050	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000054	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000057	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000059	            0x7512	                           jne 0x400006d	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400005b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400005f	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000063	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000066	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400006b	            0xeb27	                           jmp 0x4000094	       486	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400006d	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000071	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000075	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000079	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400007c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000080	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000084	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000088	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400008b	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400008d	            0x74c1	                            je 0x4000050	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400008f	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_101
0x4000094	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_101
0x4000095	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_101
git_pretty_formats_config	WHILE,0:DO,0:CALL,9:functions,0:IF,7:FOR,2:SWITCH,0:ELSE,2	177
0x400046e	              0x55	                                push rbp	        45	pretty.c	WHILE_3	FUNCTION_3
0x400046f	          0x4889e5	                            mov rbp, rsp	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000472	        0x4883ec50	                           sub rsp, 0x50	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000476	        0x48897dc8	             mov qword [rbp - 0x38], rdi	        45	pretty.c	WHILE_3	FUNCTION_3
0x400047a	        0x488975c0	             mov qword [rbp - 0x40], rsi	        45	pretty.c	WHILE_3	FUNCTION_3
0x400047e	        0x488955b8	             mov qword [rbp - 0x48], rdx	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000482	    0x64488b042528	                mov rax, qword fs:[0x28]	        45	pretty.c	WHILE_3	FUNCTION_3
0x400048b	        0x488945f8	                mov qword [rbp - 8], rax	        45	pretty.c	WHILE_3	FUNCTION_3
0x400048f	            0x31c0	                            xor eax, eax	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000491	    0x48c745f00000	               mov qword [rbp - 0x10], 0	        46	pretty.c	WHILE_3	FUNCTION_3
0x4000499	        0x488d55e0	                   lea rdx, [rbp - 0x20]	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x400049d	        0x488b45c8	             mov rax, qword [rbp - 0x38]	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004a1	      0xbe00000000	                              mov esi, 0	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004a6	          0x4889c7	                            mov rdi, rax	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004a9	      0xe892fbffff	                    call sym.skip_prefix	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004ae	            0x85c0	                           test eax, eax	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004b0	            0x750a	                           jne 0x40004bc	        51	pretty.c	WHILE_3	FUNCTION_3	IF_1	CALL_1
0x40004b2	      0xb800000000	                              mov eax, 0	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x40004b7	      0xe96d020000	                           jmp 0x4000729	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x40004bc	    0xc745dc000000	               mov dword [rbp - 0x24], 0	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x40004c3	            0xeb38	                           jmp 0x40004fd	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x40004c5	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004c9	    0x488b05000000	            mov rax, qword [0x040004d0] 	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004d0	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004d3	          0x4863c9	                         movsxd rcx, ecx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004d6	        0x48c1e105	                              shl rcx, 5	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004da	          0x4801c8	                            add rax, rcx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004dd	          0x488b00	                    mov rax, qword [rax]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004e0	          0x4889d6	                            mov rsi, rdx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004e3	          0x4889c7	                            mov rdi, rax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004e6	      0xe800000000	                          call 0x40004eb	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004eb	            0x85c0	                           test eax, eax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004ed	            0x750a	                           jne 0x40004f9	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x40004ef	      0xb800000000	                              mov eax, 0	        56	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2
0x40004f4	      0xe930020000	                           jmp 0x4000729	        56	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2
0x40004f9	        0x8345dc01	               add dword [rbp - 0x24], 1	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x40004fd	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000500	          0x4863d0	                         movsxd rdx, eax	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000503	    0x488b05000000	            mov rax, qword [0x0400050a] 	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400050a	          0x4839c2	                            cmp rdx, rax	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400050d	            0x72b6	                            jb 0x40004c5	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400050f	    0x488b05000000	            mov rax, qword [0x04000516] 	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000516	          0x8945dc	             mov dword [rbp - 0x24], eax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000519	            0xeb48	                           jmp 0x4000563	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x400051b	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x400051f	    0x488b05000000	            mov rax, qword [0x04000526] 	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000526	          0x8b4ddc	             mov ecx, dword [rbp - 0x24]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000529	          0x4863c9	                         movsxd rcx, ecx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x400052c	        0x48c1e105	                              shl rcx, 5	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000530	          0x4801c8	                            add rax, rcx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000533	          0x488b00	                    mov rax, qword [rax]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000536	          0x4889d6	                            mov rsi, rdx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000539	          0x4889c7	                            mov rdi, rax	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x400053c	      0xe800000000	                          call 0x4000541	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000541	            0x85c0	                           test eax, eax	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000543	            0x751a	                           jne 0x400055f	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x4000545	    0x488b05000000	            mov rax, qword [0x0400054c] 	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x400054c	          0x8b55dc	             mov edx, dword [rbp - 0x24]	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x400054f	          0x4863d2	                         movsxd rdx, edx	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x4000552	        0x48c1e205	                              shl rdx, 5	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x4000556	          0x4801d0	                            add rax, rdx	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x4000559	        0x488945f0	             mov qword [rbp - 0x10], rax	        61	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x400055d	            0xeb16	                           jmp 0x4000575	        62	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3
0x400055f	        0x8345dc01	               add dword [rbp - 0x24], 1	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000563	          0x8b45dc	             mov eax, dword [rbp - 0x24]	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000566	          0x4863d0	                         movsxd rdx, eax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000569	    0x488b05000000	            mov rax, qword [0x04000570] 	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000570	          0x4839c2	                            cmp rdx, rax	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000573	            0x72a6	                            jb 0x400051b	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x4000575	      0x48837df000	               cmp qword [rbp - 0x10], 0	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400057a	     0xf85e8000000	                           jne 0x4000668	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000580	    0x488b05000000	            mov rax, qword [0x04000587] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000587	        0x488d5001	                      lea rdx, [rax + 1]	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400058b	    0x488b05000000	            mov rax, qword [0x04000592] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000592	          0x4839c2	                            cmp rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000595	     0xf868c000000	                           jbe 0x4000627	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400059b	    0x488b15000000	            mov rdx, qword [0x040005a2] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005a2	          0x4889d0	                            mov rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005a5	          0x4801c0	                            add rax, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005a8	          0x4801d0	                            add rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005ab	        0x4883c030	                           add rax, 0x30	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005af	          0x48d1e8	                              shr rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005b2	          0x4889c2	                            mov rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005b5	    0x488b05000000	            mov rax, qword [0x040005bc] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005bc	        0x4883c001	                              add rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005c0	          0x4839c2	                            cmp rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005c3	            0x7314	                           jae 0x40005d9	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005c5	    0x488b05000000	            mov rax, qword [0x040005cc] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005cc	        0x4883c001	                              add rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005d0	    0x488905000000	            mov qword [0x040005d7], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005d7	            0xeb1e	                           jmp 0x40005f7	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005d9	    0x488b15000000	            mov rdx, qword [0x040005e0] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005e0	          0x4889d0	                            mov rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005e3	          0x4801c0	                            add rax, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005e6	          0x4801d0	                            add rax, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005e9	        0x4883c030	                           add rax, 0x30	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005ed	          0x48d1e8	                              shr rax, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005f0	    0x488905000000	            mov qword [0x040005f7], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005f7	    0x488b05000000	            mov rax, qword [0x040005fe] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40005fe	          0x4889c6	                            mov rsi, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000601	      0xbf20000000	                           mov edi, 0x20	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000606	      0xe88bfaffff	                        call sym.st_mult	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400060b	          0x4889c2	                            mov rdx, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400060e	    0x488b05000000	            mov rax, qword [0x04000615] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000615	          0x4889d6	                            mov rsi, rdx	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000618	          0x4889c7	                            mov rdi, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400061b	      0xe800000000	                          call 0x4000620	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000620	    0x488905000000	            mov qword [0x04000627], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000627	    0x488b05000000	            mov rax, qword [0x0400062e] 	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400062e	    0x488b15000000	            mov rdx, qword [0x04000635] 	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000635	        0x48c1e205	                              shl rdx, 5	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000639	          0x4801d0	                            add rax, rdx	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400063c	        0x488945f0	             mov qword [rbp - 0x10], rax	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000640	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000644	      0xba20000000	                           mov edx, 0x20	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000649	      0xbe00000000	                              mov esi, 0	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x400064e	          0x4889c7	                            mov rdi, rax	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000651	      0xe800000000	                          call 0x4000656	        70	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000656	    0x488b05000000	            mov rax, qword [0x0400065d] 	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400065d	        0x4883c001	                              add rax, 1	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000661	    0x488905000000	            mov qword [0x04000668], rax 	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000668	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x400066c	          0x4889c7	                            mov rdi, rax	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x400066f	      0xe800000000	                          call 0x4000674	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x4000674	          0x4889c2	                            mov rdx, rax	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x4000677	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x400067b	          0x488910	                    mov qword [rax], rdx	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_5
0x400067e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        75	pretty.c	WHILE_3	FUNCTION_3
0x4000682	    0xc74008080000	                  mov dword [rax + 8], 8	        75	pretty.c	WHILE_3	FUNCTION_3
0x4000689	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x400068d	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x4000691	        0x488d45e8	                   lea rax, [rbp - 0x18]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x4000695	          0x4889ce	                            mov rsi, rcx	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x4000698	          0x4889c7	                            mov rdi, rax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x400069b	      0xe800000000	                          call 0x40006a0	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x40006a0	            0x85c0	                           test eax, eax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x40006a2	            0x7407	                            je 0x40006ab	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_6
0x40006a4	      0xb8ffffffff	                     mov eax, 0xffffffff	        77	pretty.c	WHILE_3	FUNCTION_3	IF_5
0x40006a9	            0xeb7e	                           jmp 0x4000729	        77	pretty.c	WHILE_3	FUNCTION_3	IF_5
0x40006ab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006af	        0x488d55e8	                   lea rdx, [rbp - 0x18]	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006b3	      0xbe00000000	                              mov esi, 0	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006b8	          0x4889c7	                            mov rdi, rax	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006bb	      0xe880f9ffff	                    call sym.skip_prefix	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006c0	            0x85c0	                           test eax, eax	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006c2	            0x740d	                            je 0x40006d1	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_7
0x40006c4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x40006c8	    0xc7400c000000	                mov dword [rax + 0xc], 0	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x40006cf	            0xeb47	                           jmp 0x4000718	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x40006d1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006d5	        0x488d55e8	                   lea rdx, [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006d9	      0xbe00000000	                              mov esi, 0	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006de	          0x4889c7	                            mov rdi, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006e1	      0xe85af9ffff	                    call sym.skip_prefix	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006e6	            0x85c0	                           test eax, eax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006e8	            0x7516	                           jne 0x4000700	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006ea	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006ee	      0xbe25000000	                           mov esi, 0x25	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006f3	          0x4889c7	                            mov rdi, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006f6	      0xe800000000	                          call 0x40006fb	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006fb	          0x4885c0	                           test rax, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x40006fe	            0x740d	                            je 0x400070d	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_9
0x4000700	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x4000704	    0xc7400c010000	                mov dword [rax + 0xc], 1	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x400070b	            0xeb0b	                           jmp 0x4000718	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x400070d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        84	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000711	    0xc74014010000	               mov dword [rax + 0x14], 1	        84	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000718	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400071c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000720	        0x48895018	             mov qword [rax + 0x18], rdx	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000724	      0xb800000000	                              mov eax, 0	        87	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000729	        0x488b75f8	                mov rsi, qword [rbp - 8]	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400072d	    0x644833342528	                xor rsi, qword fs:[0x28]	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000736	            0x7405	                            je 0x400073d	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000738	      0xe800000000	                          call 0x400073d	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400073d	              0xc9	                                   leave	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400073e	              0xc3	                                     ret	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
setup_commit_formats	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	83
0x400073f	              0x55	                                push rbp	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000740	          0x4889e5	                            mov rbp, rsp	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000743	    0x4881ec100100	                          sub rsp, 0x110	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400074a	    0x64488b042528	                mov rax, qword fs:[0x28]	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000753	        0x488945f8	                mov qword [rbp - 8], rax	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000757	            0x31c0	                            xor eax, eax	        91	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000759	    0x488d95f0feff	                  lea rdx, [rbp - 0x110]	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000760	      0xb800000000	                              mov eax, 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000765	      0xb920000000	                           mov ecx, 0x20	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400076a	          0x4889d7	                            mov rdi, rdx	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400076d	          0xf348ab	              rep stosq qword [rdi], rax	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000770	    0x48c785f0feff	              mov qword [rbp - 0x110], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400077b	    0x48c78510ffff	               mov qword [rbp - 0xf0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000786	    0xc78518ffffff	               mov dword [rbp - 0xe8], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000790	    0xc78520ffffff	               mov dword [rbp - 0xe0], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400079a	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007a5	    0xc78538ffffff	               mov dword [rbp - 0xc8], 2	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007af	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007ba	    0xc78558ffffff	               mov dword [rbp - 0xa8], 6	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007c4	    0x48c78570ffff	               mov qword [rbp - 0x90], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007cf	    0xc78578ffffff	               mov dword [rbp - 0x88], 7	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007d9	    0x48c745900000	               mov qword [rbp - 0x70], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007e1	    0xc74598040000	               mov dword [rbp - 0x68], 4	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007e8	    0xc745a0080000	               mov dword [rbp - 0x60], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007ef	    0x48c745b00000	               mov qword [rbp - 0x50], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007f7	    0xc745b8030000	               mov dword [rbp - 0x48], 3	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40007fe	    0xc745c0080000	               mov dword [rbp - 0x40], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000805	    0x48c745d00000	               mov qword [rbp - 0x30], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400080d	    0xc745d8050000	               mov dword [rbp - 0x28], 5	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000814	    0xc745dc010000	               mov dword [rbp - 0x24], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400081b	    0x48c705000000	               mov qword [0x04000826], 8	       102	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000826	    0x488b05000000	            mov rax, qword [0x0400082d] 	       103	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400082d	    0x488905000000	            mov qword [0x04000834], rax 	       103	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000834	    0x488b15000000	            mov rdx, qword [0x0400083b] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400083b	    0x488b05000000	            mov rax, qword [0x04000842] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000842	          0x4839c2	                            cmp rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000845	     0xf8684000000	                           jbe 0x40008cf	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400084b	    0x488b15000000	            mov rdx, qword [0x04000852] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000852	          0x4889d0	                            mov rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000855	          0x4801c0	                            add rax, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000858	          0x4801d0	                            add rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400085b	        0x4883c030	                           add rax, 0x30	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400085f	          0x48d1e8	                              shr rax, 1	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000862	          0x4889c2	                            mov rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000865	    0x488b05000000	            mov rax, qword [0x0400086c] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400086c	          0x4839c2	                            cmp rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400086f	            0x7310	                           jae 0x4000881	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000871	    0x488b05000000	            mov rax, qword [0x04000878] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000878	    0x488905000000	            mov qword [0x0400087f], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400087f	            0xeb1e	                           jmp 0x400089f	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000881	    0x488b15000000	            mov rdx, qword [0x04000888] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000888	          0x4889d0	                            mov rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400088b	          0x4801c0	                            add rax, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400088e	          0x4801d0	                            add rax, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000891	        0x4883c030	                           add rax, 0x30	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000895	          0x48d1e8	                              shr rax, 1	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000898	    0x488905000000	            mov qword [0x0400089f], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400089f	    0x488b05000000	            mov rax, qword [0x040008a6] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008a6	          0x4889c6	                            mov rsi, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008a9	      0xbf20000000	                           mov edi, 0x20	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008ae	      0xe8e3f7ffff	                        call sym.st_mult	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008b3	          0x4889c2	                            mov rdx, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008b6	    0x488b05000000	            mov rax, qword [0x040008bd] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008bd	          0x4889d6	                            mov rsi, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008c0	          0x4889c7	                            mov rdi, rax	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008c3	      0xe800000000	                          call 0x40008c8	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008c8	    0x488905000000	            mov qword [0x040008cf], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008cf	    0x488b05000000	            mov rax, qword [0x040008d6] 	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008d6	    0x488d8df0feff	                  lea rcx, [rbp - 0x110]	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008dd	      0xba00010000	                          mov edx, 0x100	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008e2	          0x4889ce	                            mov rsi, rcx	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008e5	          0x4889c7	                            mov rdi, rax	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008e8	      0xe800000000	                          call 0x40008ed	       105	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x40008ed	      0xbe00000000	                              mov esi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x40008f2	      0xbf00000000	                              mov edi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x40008f7	      0xe800000000	                          call 0x40008fc	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x40008fc	              0x90	                                     nop	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x40008fd	        0x488b45f8	                mov rax, qword [rbp - 8]	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000901	    0x644833042528	                xor rax, qword fs:[0x28]	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400090a	            0x7405	                            je 0x4000911	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x400090c	      0xe800000000	                          call 0x4000911	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000911	              0xc9	                                   leave	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000912	              0xc3	                                     ret	       109	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
parse_padding_placeholder	WHILE,0:DO,0:CALL,7:functions,0:IF,14:FOR,0:SWITCH,1:ELSE,6	168
0x4002a65	              0x55	                                push rbp	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a66	          0x4889e5	                            mov rbp, rsp	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a69	        0x4883ec60	                           sub rsp, 0x60	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a6d	        0x48897db8	             mov qword [rbp - 0x48], rdi	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a71	        0x488975b0	             mov qword [rbp - 0x50], rsi	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a75	        0x488955a8	             mov qword [rbp - 0x58], rdx	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a79	    0x64488b042528	                mov rax, qword fs:[0x28]	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a82	        0x488945f8	                mov qword [rbp - 8], rax	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a86	            0x31c0	                            xor eax, eax	       990	pretty.c	WHILE_3	FUNCTION_37
0x4002a88	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       991	pretty.c	WHILE_3	FUNCTION_37
0x4002a8c	        0x488945e0	             mov qword [rbp - 0x20], rax	       991	pretty.c	WHILE_3	FUNCTION_37
0x4002a90	    0xc745d0000000	               mov dword [rbp - 0x30], 0	       993	pretty.c	WHILE_3	FUNCTION_37
0x4002a97	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002a9b	        0x488d5001	                      lea rdx, [rax + 1]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002a9f	        0x488955e0	             mov qword [rbp - 0x20], rdx	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002aa3	           0xfb600	                   movzx eax, byte [rax]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002aa6	           0xfbec0	                           movsx eax, al	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002aa9	          0x83f83c	                           cmp eax, 0x3c	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002aac	            0x7407	                            je 0x4002ab5	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002aae	          0x83f83e	                           cmp eax, 0x3e	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002ab1	            0x740b	                            je 0x4002abe	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002ab3	            0xeb44	                           jmp 0x4002af9	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002ab5	    0xc745cc010000	               mov dword [rbp - 0x34], 1	       997	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002abc	            0xeb45	                           jmp 0x4002b03	       998	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4002abe	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ac2	           0xfb600	                   movzx eax, byte [rax]	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ac5	            0x3c3c	                            cmp al, 0x3c	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ac7	            0x750e	                           jne 0x4002ad7	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ac9	    0xc745cc040000	               mov dword [rbp - 0x34], 4	      1001	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ad0	      0x488345e001	               add qword [rbp - 0x20], 1	      1002	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4002ad5	            0xeb2c	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002ad7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002adb	           0xfb600	                   movzx eax, byte [rax]	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002ade	            0x3c3e	                            cmp al, 0x3e	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002ae0	            0x750e	                           jne 0x4002af0	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002ae2	    0xc745cc030000	               mov dword [rbp - 0x34], 3	      1004	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002ae9	      0x488345e001	               add qword [rbp - 0x20], 1	      1005	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4002aee	            0xeb13	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002af0	    0xc745cc020000	               mov dword [rbp - 0x34], 2	      1007	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002af7	            0xeb0a	                           jmp 0x4002b03	      1008	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002af9	      0xb800000000	                              mov eax, 0	      1010	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002afe	      0xe9c2010000	                           jmp 0x4002cc5	      1010	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4002b03	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b07	           0xfb600	                   movzx eax, byte [rax]	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b0a	            0x3c7c	                            cmp al, 0x7c	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b0c	            0x750c	                           jne 0x4002b1a	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b0e	    0xc745d0010000	               mov dword [rbp - 0x30], 1	      1015	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b15	      0x488345e001	               add qword [rbp - 0x20], 1	      1016	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4002b1a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b1e	           0xfb600	                   movzx eax, byte [rax]	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b21	            0x3c28	                            cmp al, 0x28	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b23	     0xf8597010000	                           jne 0x4002cc0	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b29	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b2d	        0x4883c001	                              add rax, 1	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b31	        0x488945f0	             mov qword [rbp - 0x10], rax	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002b35	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b39	      0xbe00000000	                              mov esi, 0	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b3e	          0x4889c7	                            mov rdi, rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b41	      0xe800000000	                          call 0x4002b46	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b46	          0x4889c2	                            mov rdx, rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b49	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b4d	          0x4801d0	                            add rax, rdx	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b50	        0x488945e8	             mov qword [rbp - 0x18], rax	      1021	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_1
0x4002b54	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b59	            0x740a	                            je 0x4002b65	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b5b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b5f	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b63	            0x750a	                           jne 0x4002b6f	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b65	      0xb800000000	                              mov eax, 0	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b6a	      0xe956010000	                           jmp 0x4002cc5	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002b6f	        0x488d4dd8	                   lea rcx, [rbp - 0x28]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b73	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b77	      0xba0a000000	                            mov edx, 0xa	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b7c	          0x4889ce	                            mov rsi, rcx	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b7f	          0x4889c7	                            mov rdi, rax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b82	      0xe800000000	                          call 0x4002b87	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b87	          0x8945d4	             mov dword [rbp - 0x2c], eax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4002b8a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b8e	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b92	            0x7406	                            je 0x4002b9a	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b94	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b98	            0x750a	                           jne 0x4002ba4	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b9a	      0xb800000000	                              mov eax, 0	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002b9f	      0xe921010000	                           jmp 0x4002cc5	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002ba4	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x4002ba8	            0x791e	                           jns 0x4002bc8	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x4002baa	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x4002bae	            0x7408	                            je 0x4002bb8	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x4002bb0	      0xe800000000	                          call 0x4002bb5	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x4002bb5	           0x145d4	             add dword [rbp - 0x2c], eax	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x4002bb8	        0x837dd400	               cmp dword [rbp - 0x2c], 0	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4002bbc	            0x790a	                           jns 0x4002bc8	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4002bbe	      0xb800000000	                              mov eax, 0	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4002bc3	      0xe9fd000000	                           jmp 0x4002cc5	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4002bc8	        0x837dd000	               cmp dword [rbp - 0x30], 0	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bcc	            0x7407	                            je 0x4002bd5	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bce	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bd1	            0xf7d8	                                 neg eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bd3	            0xeb03	                           jmp 0x4002bd8	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bd5	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bd8	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bdc	          0x89427c	             mov dword [rdx + 0x7c], eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002bdf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002be3	          0x8b55cc	             mov edx, dword [rbp - 0x34]	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002be6	          0x895048	             mov dword [rax + 0x48], edx	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4002be9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002bed	           0xfb600	                   movzx eax, byte [rax]	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002bf0	            0x3c2c	                            cmp al, 0x2c	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002bf2	     0xf85a9000000	                           jne 0x4002ca1	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002bf8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002bfc	        0x4883c001	                              add rax, 1	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002c00	        0x488945f0	             mov qword [rbp - 0x10], rax	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4002c04	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4002c08	      0xbe29000000	                           mov esi, 0x29	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4002c0d	          0x4889c7	                            mov rdi, rax	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4002c10	      0xe800000000	                          call 0x4002c15	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4002c15	        0x488945e8	             mov qword [rbp - 0x18], rax	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4002c19	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c1e	            0x740a	                            je 0x4002c2a	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c20	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c24	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c28	            0x750a	                           jne 0x4002c34	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c2a	      0xb800000000	                              mov eax, 0	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c2f	      0xe991000000	                           jmp 0x4002cc5	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002c34	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c38	      0xbe00000000	                              mov esi, 0	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c3d	          0x4889c7	                            mov rdi, rax	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c40	      0xe800000000	                          call 0x4002c45	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c45	            0x85c0	                           test eax, eax	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c47	            0x740d	                            je 0x4002c56	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4002c49	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x4002c4d	    0xc7404c030000	               mov dword [rax + 0x4c], 3	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x4002c54	            0xeb56	                           jmp 0x4002cac	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x4002c56	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c5a	      0xbe00000000	                              mov esi, 0	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c5f	          0x4889c7	                            mov rdi, rax	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c62	      0xe800000000	                          call 0x4002c67	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c67	            0x85c0	                           test eax, eax	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c69	            0x740d	                            je 0x4002c78	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002c6b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x4002c6f	    0xc7404c010000	               mov dword [rax + 0x4c], 1	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x4002c76	            0xeb34	                           jmp 0x4002cac	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x4002c78	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c7c	      0xbe00000000	                              mov esi, 0	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c81	          0x4889c7	                            mov rdi, rax	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c84	      0xe800000000	                          call 0x4002c89	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c89	            0x85c0	                           test eax, eax	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c8b	            0x740d	                            je 0x4002c9a	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002c8d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x4002c91	    0xc7404c020000	               mov dword [rax + 0x4c], 2	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x4002c98	            0xeb12	                           jmp 0x4002cac	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x4002c9a	      0xb800000000	                              mov eax, 0	      1050	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_5
0x4002c9f	            0xeb24	                           jmp 0x4002cc5	      1050	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_5
0x4002ca1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1052	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002ca5	    0xc7404c000000	               mov dword [rax + 0x4c], 0	      1052	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cac	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cb0	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cb4	          0x4829c2	                            sub rdx, rax	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cb7	          0x4889d0	                            mov rax, rdx	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cba	        0x4883c001	                              add rax, 1	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cbe	            0xeb05	                           jmp 0x4002cc5	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002cc0	      0xb800000000	                              mov eax, 0	      1056	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cc5	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cc9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cd2	            0x7405	                            je 0x4002cd9	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cd4	      0xe800000000	                          call 0x4002cd9	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cd9	              0xc9	                                   leave	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4002cda	              0xc3	                                     ret	      1057	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
add_merge_info	WHILE,1:DO,0:CALL,7:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,1	71
0x4001895	              0x55	                                push rbp	       539	pretty.c	WHILE_3	FUNCTION_22
0x4001896	          0x4889e5	                            mov rbp, rsp	       539	pretty.c	WHILE_3	FUNCTION_22
0x4001899	        0x4883ec30	                           sub rsp, 0x30	       539	pretty.c	WHILE_3	FUNCTION_22
0x400189d	        0x48897de8	             mov qword [rbp - 0x18], rdi	       539	pretty.c	WHILE_3	FUNCTION_22
0x40018a1	        0x488975e0	             mov qword [rbp - 0x20], rsi	       539	pretty.c	WHILE_3	FUNCTION_22
0x40018a5	        0x488955d8	             mov qword [rbp - 0x28], rdx	       539	pretty.c	WHILE_3	FUNCTION_22
0x40018a9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       540	pretty.c	WHILE_3	FUNCTION_22
0x40018ad	        0x488b4030	            mov rax, qword [rax + 0x30] 	       540	pretty.c	WHILE_3	FUNCTION_22
0x40018b1	        0x488945f0	             mov qword [rbp - 0x10], rax	       540	pretty.c	WHILE_3	FUNCTION_22
0x40018b5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018b9	            0x8b00	                    mov eax, dword [rax]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018bb	          0x83f805	                              cmp eax, 5	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018be	     0xf84cf000000	                            je 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018c4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018c8	            0x8b00	                    mov eax, dword [rax]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018ca	            0x89c7	                            mov edi, eax	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018cc	      0xe8bbeaffff	               call sym.cmit_fmt_is_mail	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018d1	            0x85c0	                           test eax, eax	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018d3	     0xf85ba000000	                           jne 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018d9	      0x48837df000	               cmp qword [rbp - 0x10], 0	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018de	     0xf84af000000	                            je 0x4001993	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x40018e4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x40018e8	        0x488b4008	                mov rax, qword [rax + 8]	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x40018ec	          0x4885c0	                           test rax, rax	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x40018ef	     0xf849e000000	                            je 0x4001993	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x40018f5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x40018f9	      0xbe00000000	                              mov esi, 0	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x40018fe	          0x4889c7	                            mov rdi, rax	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x4001901	      0xe8b4e9ffff	                  call sym.strbuf_addstr	       546	pretty.c	WHILE_3	FUNCTION_22	CALL_2
0x4001906	            0xeb71	                           jmp 0x4001979	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001908	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x400190c	          0x488b00	                    mov rax, qword [rax]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x400190f	        0x4883c004	                              add rax, 4	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001913	        0x488945f8	                mov qword [rbp - 8], rax	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001917	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x400191b	      0xbe20000000	                           mov esi, 0x20	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x4001920	          0x4889c7	                            mov rdi, rax	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x4001923	      0xe824e9ffff	                   call sym.strbuf_addch	       550	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_3
0x4001928	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x400192c	          0x8b4004	                mov eax, dword [rax + 4]	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x400192f	            0x85c0	                           test eax, eax	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x4001931	            0x741c	                            je 0x400194f	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x4001933	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x4001937	          0x8b5004	                mov edx, dword [rax + 4]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x400193a	        0x488b4df8	                mov rcx, qword [rbp - 8]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x400193e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x4001942	          0x4889ce	                            mov rsi, rcx	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x4001945	          0x4889c7	                            mov rdi, rax	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x4001948	      0xe800000000	                          call 0x400194d	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x400194d	            0xeb1e	                           jmp 0x400196d	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x400194f	        0x488b45f8	                mov rax, qword [rbp - 8]	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x4001953	          0x4889c7	                            mov rdi, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x4001956	      0xe800000000	                          call 0x400195b	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x400195b	          0x4889c2	                            mov rdx, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x400195e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x4001962	          0x4889d6	                            mov rsi, rdx	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x4001965	          0x4889c7	                            mov rdi, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x4001968	      0xe84de9ffff	                  call sym.strbuf_addstr	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x400196d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001971	        0x488b4008	                mov rax, qword [rax + 8]	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001975	        0x488945f0	             mov qword [rbp - 0x10], rax	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001979	      0x48837df000	               cmp qword [rbp - 0x10], 0	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x400197e	            0x7588	                           jne 0x4001908	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4001980	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x4001984	      0xbe0a000000	                            mov esi, 0xa	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x4001989	          0x4889c7	                            mov rdi, rax	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x400198c	      0xe8bbe8ffff	                   call sym.strbuf_addch	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x4001991	            0xeb01	                           jmp 0x4001994	       557	pretty.c	WHILE_3	FUNCTION_22	CALL_7
0x4001993	              0x90	                                     nop	       544	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x4001994	              0xc9	                                   leave	       558	pretty.c	WHILE_3	FUNCTION_22
0x4001995	              0xc3	                                     ret	       558	pretty.c	WHILE_3	FUNCTION_22
needs_rfc2047_encoding	WHILE,0:DO,0:CALL,1:functions,0:IF,2:FOR,1:SWITCH,0:ELSE,0	47
0x4000ecf	              0x55	                                push rbp	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000ed0	          0x4889e5	                            mov rbp, rsp	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000ed3	        0x4883ec20	                           sub rsp, 0x20	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000ed7	        0x48897de8	             mov qword [rbp - 0x18], rdi	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000edb	          0x8975e4	             mov dword [rbp - 0x1c], esi	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000ede	          0x8955e0	             mov dword [rbp - 0x20], edx	       344	pretty.c	WHILE_3	FUNCTION_16
0x4000ee1	    0xc745f8000000	                  mov dword [rbp - 8], 0	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000ee8	            0xeb64	                           jmp 0x4000f4e	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000eea	          0x8b45f8	                mov eax, dword [rbp - 8]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000eed	          0x4863d0	                         movsxd rdx, eax	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000ef0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000ef4	          0x4801d0	                            add rax, rdx	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000ef7	           0xfb600	                   movzx eax, byte [rax]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000efa	           0xfbec0	                           movsx eax, al	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000efd	          0x8945fc	                mov dword [rbp - 4], eax	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000f00	          0x8b45fc	                mov eax, dword [rbp - 4]	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f03	            0x89c7	                            mov edi, eax	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f05	      0xe80ffdffff	                      call sym.non_ascii	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f0a	            0x85c0	                           test eax, eax	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f0c	            0x7506	                           jne 0x4000f14	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f0e	        0x837dfc0a	                cmp dword [rbp - 4], 0xa	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f12	            0x7507	                           jne 0x4000f1b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000f14	      0xb801000000	                              mov eax, 1	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x4000f19	            0xeb40	                           jmp 0x4000f5b	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x4000f1b	          0x8b45f8	                mov eax, dword [rbp - 8]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f1e	          0x83c001	                              add eax, 1	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f21	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f24	            0x7d24	                           jge 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f26	        0x837dfc3d	               cmp dword [rbp - 4], 0x3d	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f2a	            0x751e	                           jne 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f2c	          0x8b45f8	                mov eax, dword [rbp - 8]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f2f	            0x4898	                                    cdqe	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f31	        0x488d5001	                      lea rdx, [rax + 1]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f35	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f39	          0x4801d0	                            add rax, rdx	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f3c	           0xfb600	                   movzx eax, byte [rax]	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f3f	            0x3c3f	                            cmp al, 0x3f	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f41	            0x7507	                           jne 0x4000f4a	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f43	      0xb801000000	                              mov eax, 1	       352	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f48	            0xeb11	                           jmp 0x4000f5b	       352	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000f4a	        0x8345f801	                  add dword [rbp - 8], 1	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000f4e	          0x8b45f8	                mov eax, dword [rbp - 8]	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000f51	          0x3b45e4	             cmp eax, dword [rbp - 0x1c]	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000f54	            0x7c94	                            jl 0x4000eea	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000f56	      0xb800000000	                              mov eax, 0	       355	pretty.c	WHILE_3	FUNCTION_16
0x4000f5b	              0xc9	                                   leave	       356	pretty.c	WHILE_3	FUNCTION_16
0x4000f5c	              0xc3	                                     ret	       356	pretty.c	WHILE_3	FUNCTION_16
is_mboxrd_from	WHILE,0:DO,0:CALL,2:functions,0:IF,0:FOR,0:SWITCH,0:ELSE,0	24
0x4004930	              0x55	                                push rbp	      1740	pretty.c	FUNCTION_50
0x4004931	          0x4889e5	                            mov rbp, rsp	      1740	pretty.c	FUNCTION_50
0x4004934	        0x4883ec10	                           sub rsp, 0x10	      1740	pretty.c	FUNCTION_50
0x4004938	        0x48897df8	                mov qword [rbp - 8], rdi	      1740	pretty.c	FUNCTION_50
0x400493c	          0x8975f4	              mov dword [rbp - 0xc], esi	      1740	pretty.c	FUNCTION_50
0x400493f	        0x837df404	                cmp dword [rbp - 0xc], 4	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004943	            0x7e33	                           jle 0x4004978	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004945	        0x488b45f8	                mov rax, qword [rbp - 8]	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004949	      0xbe00000000	                              mov esi, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x400494e	          0x4889c7	                            mov rdi, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004951	      0xe800000000	                          call 0x4004956	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004956	          0x4889c2	                            mov rdx, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004959	        0x488b45f8	                mov rax, qword [rbp - 8]	      1746	pretty.c	FUNCTION_50	CALL_2
0x400495d	          0x4801d0	                            add rax, rdx	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004960	      0xbe00000000	                              mov esi, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004965	          0x4889c7	                            mov rdi, rax	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004968	      0xe800000000	                          call 0x400496d	      1746	pretty.c	FUNCTION_50	CALL_2
0x400496d	            0x85c0	                           test eax, eax	      1746	pretty.c	FUNCTION_50	CALL_2
0x400496f	            0x7407	                            je 0x4004978	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004971	      0xb801000000	                              mov eax, 1	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004976	            0xeb05	                           jmp 0x400497d	      1746	pretty.c	FUNCTION_50	CALL_2
0x4004978	      0xb800000000	                              mov eax, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x400497d	              0xc9	                                   leave	      1747	pretty.c	FUNCTION_50
0x400497e	              0xc3	                                     ret	      1747	pretty.c	FUNCTION_50
userformat_find_requirements	WHILE,0:DO,0:CALL,2:functions,0:IF,2:FOR,0:SWITCH,0:ELSE,0	36
0x4003fa0	              0x55	                                push rbp	      1495	pretty.c	FUNCTION_43
0x4003fa1	          0x4889e5	                            mov rbp, rsp	      1495	pretty.c	FUNCTION_43
0x4003fa4	        0x4883ec30	                           sub rsp, 0x30	      1495	pretty.c	FUNCTION_43
0x4003fa8	        0x48897dd8	             mov qword [rbp - 0x28], rdi	      1495	pretty.c	FUNCTION_43
0x4003fac	        0x488975d0	             mov qword [rbp - 0x30], rsi	      1495	pretty.c	FUNCTION_43
0x4003fb0	    0x64488b042528	                mov rax, qword fs:[0x28]	      1495	pretty.c	FUNCTION_43
0x4003fb9	        0x488945f8	                mov qword [rbp - 8], rax	      1495	pretty.c	FUNCTION_43
0x4003fbd	            0x31c0	                            xor eax, eax	      1495	pretty.c	FUNCTION_43
0x4003fbf	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1496	pretty.c	FUNCTION_43
0x4003fc7	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1496	pretty.c	FUNCTION_43
0x4003fcf	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1496	pretty.c	FUNCTION_43
0x4003fd7	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1498	pretty.c	FUNCTION_43	IF_1
0x4003fdc	            0x7517	                           jne 0x4003ff5	      1498	pretty.c	FUNCTION_43	IF_1
0x4003fde	    0x488b05000000	            mov rax, qword [0x04003fe5] 	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x4003fe5	          0x4885c0	                           test rax, rax	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x4003fe8	            0x7435	                            je 0x400401f	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x4003fea	    0x488b05000000	            mov rax, qword [0x04003ff1] 	      1501	pretty.c	FUNCTION_43	IF_1
0x4003ff1	        0x488945d8	             mov qword [rbp - 0x28], rax	      1501	pretty.c	FUNCTION_43	IF_1
0x4003ff5	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1503	pretty.c	FUNCTION_43	CALL_1
0x4003ff9	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1503	pretty.c	FUNCTION_43	CALL_1
0x4003ffd	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1503	pretty.c	FUNCTION_43	CALL_1
0x4004001	          0x4889d1	                            mov rcx, rdx	      1503	pretty.c	FUNCTION_43	CALL_1
0x4004004	      0xba00000000	                              mov edx, 0	      1503	pretty.c	FUNCTION_43	CALL_1
0x4004009	          0x4889c7	                            mov rdi, rax	      1503	pretty.c	FUNCTION_43	CALL_1
0x400400c	      0xe800000000	                          call 0x4004011	      1503	pretty.c	FUNCTION_43	CALL_1
0x4004011	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1504	pretty.c	FUNCTION_43	CALL_2
0x4004015	          0x4889c7	                            mov rdi, rax	      1504	pretty.c	FUNCTION_43	CALL_2
0x4004018	      0xe800000000	                          call 0x400401d	      1504	pretty.c	FUNCTION_43	CALL_2
0x400401d	            0xeb01	                           jmp 0x4004020	      1504	pretty.c	FUNCTION_43	CALL_2
0x400401f	              0x90	                                     nop	      1500	pretty.c	FUNCTION_43	IF_1	IF_2
0x4004020	        0x488b45f8	                mov rax, qword [rbp - 8]	      1505	pretty.c	FUNCTION_43
0x4004024	    0x644833042528	                xor rax, qword fs:[0x28]	      1505	pretty.c	FUNCTION_43
0x400402d	            0x7405	                            je 0x4004034	      1505	pretty.c	FUNCTION_43
0x400402f	      0xe800000000	                          call 0x4004034	      1505	pretty.c	FUNCTION_43
0x4004034	              0xc9	                                   leave	      1505	pretty.c	FUNCTION_43
0x4004035	              0xc3	                                     ret	      1505	pretty.c	FUNCTION_43
strbuf_add_tabexpand	WHILE,1:DO,0:CALL,5:functions,0:IF,1:FOR,0:SWITCH,0:ELSE,0	69
0x40047ce	              0x55	                                push rbp	      1689	pretty.c	FUNCTION_48
0x40047cf	          0x4889e5	                            mov rbp, rsp	      1689	pretty.c	FUNCTION_48
0x40047d2	        0x4883ec30	                           sub rsp, 0x30	      1689	pretty.c	FUNCTION_48
0x40047d6	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1689	pretty.c	FUNCTION_48
0x40047da	          0x8975e4	             mov dword [rbp - 0x1c], esi	      1689	pretty.c	FUNCTION_48
0x40047dd	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1689	pretty.c	FUNCTION_48
0x40047e1	          0x894de0	             mov dword [rbp - 0x20], ecx	      1689	pretty.c	FUNCTION_48
0x40047e4	      0xe98d000000	                           jmp 0x4004876	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40047e9	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047ed	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047f1	          0x4889d6	                            mov rsi, rdx	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047f4	          0x4889c7	                            mov rdi, rax	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047f7	      0xe847ffffff	                  call sym.pp_utf8_width	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047fc	          0x8945f4	              mov dword [rbp - 0xc], eax	      1693	pretty.c	FUNCTION_48	WHILE_1	CALL_2
0x40047ff	        0x837df400	                cmp dword [rbp - 0xc], 0	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x4004803	     0xf8895000000	                            js 0x400489e	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x4004809	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400480d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004811	          0x4829c2	                            sub rdx, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004814	          0x4889d0	                            mov rax, rdx	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004817	          0x4889c2	                            mov rdx, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400481a	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400481e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004822	          0x4889ce	                            mov rsi, rcx	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004825	          0x4889c7	                            mov rdi, rax	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4004828	      0xe800000000	                          call 0x400482d	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400482d	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004830	              0x99	                                     cdq	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004831	          0xf77de4	                 idiv dword [rbp - 0x1c]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004834	          0x8b45e4	             mov eax, dword [rbp - 0x1c]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004837	            0x29d0	                            sub eax, edx	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004839	          0x4863d0	                         movsxd rdx, eax	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x400483c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004840	      0xbe20000000	                           mov esi, 0x20	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004845	          0x4889c7	                            mov rdi, rax	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4004848	      0xe800000000	                          call 0x400484d	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x400484d	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004850	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004854	        0x4883c201	                              add rdx, 1	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004858	          0x4889d1	                            mov rcx, rdx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x400485b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x400485f	          0x4829d1	                            sub rcx, rdx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004862	          0x4889ca	                            mov rdx, rcx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004865	            0x29d0	                            sub eax, edx	      1711	pretty.c	FUNCTION_48	WHILE_1
0x4004867	          0x8945e0	             mov dword [rbp - 0x20], eax	      1711	pretty.c	FUNCTION_48	WHILE_1
0x400486a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1712	pretty.c	FUNCTION_48	WHILE_1
0x400486e	        0x4883c001	                              add rax, 1	      1712	pretty.c	FUNCTION_48	WHILE_1
0x4004872	        0x488945d8	             mov qword [rbp - 0x28], rax	      1712	pretty.c	FUNCTION_48	WHILE_1
0x4004876	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004879	          0x4863d0	                         movsxd rdx, eax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x400487c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004880	      0xbe09000000	                              mov esi, 9	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004885	          0x4889c7	                            mov rdi, rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004888	      0xe800000000	                          call 0x400488d	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x400488d	        0x488945f8	                mov qword [rbp - 8], rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004891	      0x48837df800	                  cmp qword [rbp - 8], 0	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4004896	     0xf854dffffff	                           jne 0x40047e9	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x400489c	            0xeb01	                           jmp 0x400489f	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x400489e	              0x90	                                     nop	      1702	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x400489f	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048a2	          0x4863d0	                         movsxd rdx, eax	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048a5	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048ad	          0x4889ce	                            mov rsi, rcx	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048b0	          0x4889c7	                            mov rdi, rax	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048b3	      0xe800000000	                          call 0x40048b8	      1720	pretty.c	FUNCTION_48	CALL_5
0x40048b8	              0x90	                                     nop	      1721	pretty.c	FUNCTION_48
0x40048b9	              0xc9	                                   leave	      1721	pretty.c	FUNCTION_48
0x40048ba	              0xc3	                                     ret	      1721	pretty.c	FUNCTION_48
