find_commit_format_recursive	DO,0:functions,0:IF,4:ELSE,0:SWITCH,0:FOR,1:CALL,4:WHILE,0	70
0x400038a	            0x4157	                                push r15	       114	pretty.c	WHILE_3	FUNCTION_5
0x400038c	            0x4156	                                push r14	       114	pretty.c	WHILE_3	FUNCTION_5
0x400038e	            0x4155	                                push r13	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000390	            0x4154	                                push r12	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000392	              0x55	                                push rbp	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000393	              0x53	                                push rbx	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000394	        0x4883ec18	                           sub rsp, 0x18	       114	pretty.c	WHILE_3	FUNCTION_5
0x4000398	        0x48893424	                    mov qword [rsp], rsi	       114	pretty.c	WHILE_3	FUNCTION_5
0x400039c	        0x8954240c	              mov dword [rsp + 0xc], edx	       114	pretty.c	WHILE_3	FUNCTION_5
0x40003a0	    0x488b05000000	            mov rax, qword [0x040003a7] 	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x40003a7	          0x4863d2	                         movsxd rdx, edx	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x40003aa	          0x4839c2	                            cmp rdx, rax	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x40003ad	            0x7314	                           jae 0x40003c3	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x40003af	          0x4989fd	                            mov r13, rdi	       119	pretty.c	WHILE_3	FUNCTION_5	IF_1
0x40003b2	    0x41bc00000000	                             mov r12d, 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003b8	          0x4885c0	                           test rax, rax	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003bb	     0xf84ac000000	                            je 0x400046d	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003c1	            0xeb13	                           jmp 0x40003d6	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003c3	        0x488b3424	                    mov rsi, qword [rsp]	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x40003c7	      0xbf00000000	                              mov edi, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x40003cc	      0xb800000000	                              mov eax, 0	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x40003d1	      0xe800000000	                          call 0x40003d6	       120	pretty.c	WHILE_3	FUNCTION_5	IF_1	CALL_1
0x40003d6	      0xbb00000000	                              mov ebx, 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003db	      0xbd00000000	                              mov ebp, 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003e0	    0x41be00000000	                             mov r14d, 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003e6	    0x41bc00000000	                             mov r12d, 0	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x40003ec	    0x49c7c7ffffff	             mov r15, 0xffffffffffffffff	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x40003f3	        0x48c1e305	                              shl rbx, 5	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003f7	    0x488b05000000	            mov rax, qword [0x040003fe] 	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x40003fe	        0x488b3c18	              mov rdi, qword [rax + rbx]	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000402	          0x4c89ee	                            mov rsi, r13	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x4000405	      0xe800000000	                          call 0x400040a	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400040a	            0x85c0	                           test eax, eax	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400040c	            0x742b	                            je 0x4000439	       127	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_2	CALL_2
0x400040e	    0x48031d000000	             add rbx, qword [0x04000415]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000415	          0x488b3b	                    mov rdi, qword [rbx]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000418	      0xb800000000	                              mov eax, 0	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x400041d	          0x4c89f9	                            mov rcx, r15	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000420	            0xf2ae	              repne scasb al, byte [rdi]	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000422	          0x48f7d1	                                 not rcx	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000425	        0x4883e901	                              sub rcx, 1	       130	pretty.c	WHILE_3	FUNCTION_5	FOR_1	CALL_3
0x4000429	          0x4d85e4	                           test r12, r12	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x400042c	            0x7405	                            je 0x4000433	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x400042e	          0x4c39f1	                            cmp rcx, r14	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x4000431	            0x7306	                           jae 0x4000439	       131	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x4000433	          0x4989ce	                            mov r14, rcx	       133	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x4000436	          0x4989dc	                            mov r12, rbx	       132	pretty.c	WHILE_3	FUNCTION_5	FOR_1	IF_3
0x4000439	          0x83c501	                              add ebp, 1	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x400043c	          0x4863dd	                         movsxd rbx, ebp	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x400043f	    0x483b1d000000	            cmp rbx, qword [0x04000446] 	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x4000446	            0x72ab	                            jb 0x40003f3	       124	pretty.c	WHILE_3	FUNCTION_5	FOR_1
0x4000448	          0x4d85e4	                           test r12, r12	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x400044b	            0x7420	                            je 0x400046d	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x400044d	    0x41837c241400	               cmp dword [r12 + 0x14], 0	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000453	            0x7418	                            je 0x400046d	       137	pretty.c	WHILE_3	FUNCTION_5	IF_4
0x4000455	      0x498b7c2418	            mov rdi, qword [r12 + 0x18] 	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x400045a	        0x8b54240c	              mov edx, dword [rsp + 0xc]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x400045e	          0x83c201	                              add edx, 1	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000461	        0x488b3424	                    mov rsi, qword [rsp]	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x4000465	      0xe820ffffff	   call sym.find_commit_format_recursive	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x400046a	          0x4989c4	                            mov r12, rax	       138	pretty.c	WHILE_3	FUNCTION_5	IF_4	CALL_4
0x400046d	          0x4c89e0	                            mov rax, r12	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000470	        0x4883c418	                           add rsp, 0x18	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000474	              0x5b	                                 pop rbx	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000475	              0x5d	                                 pop rbp	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000476	            0x415c	                                 pop r12	       144	pretty.c	WHILE_3	FUNCTION_5
0x4000478	            0x415d	                                 pop r13	       144	pretty.c	WHILE_3	FUNCTION_5
0x400047a	            0x415e	                                 pop r14	       144	pretty.c	WHILE_3	FUNCTION_5
0x400047c	            0x415f	                                 pop r15	       144	pretty.c	WHILE_3	FUNCTION_5
0x400047e	              0xc3	                                     ret	       144	pretty.c	WHILE_3	FUNCTION_5
format_commit_one	DO,0:functions,0:IF,29:ELSE,4:SWITCH,7:FOR,3:CALL,63:WHILE,0	1129
0x4001a17	            0x4157	                                push r15	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a19	            0x4156	                                push r14	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a1b	            0x4155	                                push r13	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a1d	            0x4154	                                push r12	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a1f	              0x55	                                push rbp	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a20	              0x53	                                push rbx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a21	    0x4881eca80000	                           sub rsp, 0xa8	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a28	          0x4889fb	                            mov rbx, rdi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a2b	          0x4889f5	                            mov rbp, rsi	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a2e	          0x4989d4	                            mov r12, rdx	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a31	    0x64488b042528	                mov rax, qword fs:[0x28]	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a3a	    0x488984249800	             mov qword [rsp + 0x98], rax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a42	            0x31c0	                            xor eax, eax	      1080	pretty.c	WHILE_3	FUNCTION_39
0x4001a44	           0xfb60e	                   movzx ecx, byte [rsi]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a47	          0x8d41c4	                   lea eax, [rcx - 0x3c]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a4a	            0x3c3c	                            cmp al, 0x3c	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a4c	     0xf8738060000	                            ja 0x400208a	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a52	           0xfb6c0	                           movzx eax, al	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a55	    0xff24c5000000	                       jmp qword [rax*8]	      1089	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001a5c	        0x4c8d7601	                      lea r14, [rsi + 1]	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a60	      0xbe00000000	                              mov esi, 0	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a65	          0x4c89f7	                            mov rdi, r14	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a68	      0xe800000000	                          call 0x4001a6d	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a6d	            0x85c0	                           test eax, eax	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a6f	            0x744d	                            je 0x4001abe	      1091	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_1
0x4001a71	      0x498b442408	                mov rax, qword [r12 + 8]	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a76	          0x8b7068	            mov esi, dword [rax + 0x68] 	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a79	      0xbf01000000	                              mov edi, 1	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a7e	      0xe800000000	                          call 0x4001a83	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a83	            0x89c2	                            mov edx, eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a85	      0x4189442478	             mov dword [r12 + 0x78], eax	      1092	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	CALL_2
0x4001a8a	      0xb807000000	                              mov eax, 7	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x4001a8f	            0x85d2	                           test edx, edx	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4001a91	     0xf8441100000	                            je 0x4002ad8	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4001a97	      0x48837b0800	                  cmp qword [rbx + 8], 0	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4001a9c	     0xf8436100000	                            je 0x4002ad8	      1093	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1	IF_2
0x4001aa2	      0xba03000000	                              mov edx, 3	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001aa7	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001aac	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001aaf	      0xe800000000	                          call 0x4001ab4	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001ab4	      0xb807000000	                              mov eax, 7	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x4001ab9	      0xe91a100000	                           jmp 0x4002ad8	      1095	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_1
0x4001abe	          0x4d89f5	                            mov r13, r14	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001ac1	      0xb800000000	                              mov eax, 0	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001ac6	        0x807d0128	                cmp byte [rbp + 1], 0x28	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001aca	     0xf85f4000000	                           jne 0x4001bc4	       942	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001ad0	        0x4c8d7d02	                      lea r15, [rbp + 2]	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001ad4	      0xbe29000000	                           mov esi, 0x29	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4001ad9	          0x4c89ff	                            mov rdi, r15	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4001adc	      0xe800000000	                          call 0x4001ae1	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4001ae1	          0x4989c6	                            mov r14, rax	       944	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_1
0x4001ae4	          0x4885c0	                           test rax, rax	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001ae7	     0xf84cc000000	                            je 0x4001bb9	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001aed	          0x4d89fd	                            mov r13, r15	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001af0	      0xb800000000	                              mov eax, 0	       947	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001af5	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001af8	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001afa	     0xf84f40f0000	                            je 0x4002af4	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001b00	        0x4983c501	                              add r13, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b04	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b08	        0x413a55ff	                  cmp dl, byte [r13 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b0c	            0x74e7	                            je 0x4001af5	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b0e	          0x4d89fd	                            mov r13, r15	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b11	      0xb800000000	                              mov eax, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b16	            0xeb0c	                           jmp 0x4001b24	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b18	          0x4929ee	                            sub r14, rbp	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4001b1b	        0x4d8d6e01	                      lea r13, [r14 + 1]	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4001b1f	      0xe947010000	                           jmp 0x4001c6b	       952	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4
0x4001b24	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001b27	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001b29	            0x7422	                            je 0x4001b4d	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001b2b	        0x4983c501	                              add r13, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b2f	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b33	        0x413a55ff	                  cmp dl, byte [r13 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b37	            0x74eb	                            je 0x4001b24	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b39	      0xe9d50f0000	                           jmp 0x4002b13	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001b3e	          0x4929ee	                            sub r14, rbp	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x4001b41	          0x4d89f5	                            mov r13, r14	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x4001b44	        0x4983c501	                              add r13, 1	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x4001b48	      0xe91e010000	                           jmp 0x4001c6b	       958	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6
0x4001b4d	          0x4c89f6	                            mov rsi, r14	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b50	          0x4c29ee	                            sub rsi, r13	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b53	      0x488d542440	                   lea rdx, [rsp + 0x40]	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b58	          0x4c89ef	                            mov rdi, r13	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b5b	      0xe800000000	                          call 0x4001b60	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b60	            0x85c0	                           test eax, eax	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b62	            0x7921	                           jns 0x4001b85	       961	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_7	CALL_6
0x4001b64	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_124	CALL_2
0x4001b69	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_124	CALL_2
0x4001b6e	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_124	CALL_2
0x4001b73	      0xe800000000	                          call 0x4001b78	        54	gettext.h	FUNCTION_124	CALL_2
0x4001b78	          0x4889c7	                            mov rdi, rax	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4001b7b	      0xb800000000	                              mov eax, 0	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4001b80	      0xe800000000	                          call 0x4001b85	       962	pretty.c	WHILE_3	FUNCTION_36	IF_1	CALL_8
0x4001b85	      0x488d742440	                   lea rsi, [rsp + 0x40]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b8a	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b8f	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b96	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b99	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b9b	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001b9e	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001ba1	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001ba5	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001ba8	      0xe800000000	                          call 0x4001bad	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001bad	          0x4929ee	                            sub r14, rbp	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001bb0	        0x4d8d6e01	                      lea r13, [r14 + 1]	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001bb4	      0xe9b2000000	                           jmp 0x4001c6b	       964	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4001bb9	    0x41bd00000000	                             mov r13d, 0	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001bbf	      0xe9a7000000	                           jmp 0x4001c6b	       948	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_2
0x4001bc4	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001bc7	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001bc9	     0xf84a50f0000	                            je 0x4002b74	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001bcf	        0x4983c501	                              add r13, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bd3	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bd7	        0x413a55ff	                  cmp dl, byte [r13 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bdb	            0x74e7	                            je 0x4001bc4	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bdd	          0x4d89f5	                            mov r13, r14	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001be0	      0xb800000000	                              mov eax, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001be5	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001be8	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001bea	     0xf848c0f0000	                            je 0x4002b7c	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001bf0	        0x4983c501	                              add r13, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bf4	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bf8	        0x413a55ff	                  cmp dl, byte [r13 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bfc	            0x74e7	                            je 0x4001be5	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001bfe	          0x4d89f5	                            mov r13, r14	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c01	      0xb800000000	                              mov eax, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c06	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c09	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c0b	     0xf84730f0000	                            je 0x4002b84	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c11	        0x4983c501	                              add r13, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c15	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c19	        0x413a55ff	                  cmp dl, byte [r13 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c1d	            0x74e7	                            je 0x4001c06	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c1f	      0xb800000000	                              mov eax, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c24	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c27	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c29	     0xf845d0f0000	                            je 0x4002b8c	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4001c2f	        0x4983c601	                              add r14, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c33	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c37	        0x413a56ff	                  cmp dl, byte [r14 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c3b	            0x74e7	                            je 0x4001c24	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4001c3d	          0x4989ed	                            mov r13, rbp	       939	pretty.c	WHILE_3	FUNCTION_36
0x4001c40	            0xeb26	                           jmp 0x4001c68	       939	pretty.c	WHILE_3	FUNCTION_36
0x4001c42	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c47	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c4e	          0x4c89f7	                            mov rdi, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c51	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c53	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c56	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c59	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c5d	          0x4c89f6	                            mov rsi, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c60	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c63	      0xe800000000	                          call 0x4001c68	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001c68	          0x4929ed	                            sub r13, rbp	       984	pretty.c	WHILE_3	FUNCTION_36
0x4001c6b	          0x4489e8	                           mov eax, r13d	      1097	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	CALL_4
0x4001c6e	          0x4585ed	                         test r13d, r13d	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4001c71	            0x7409	                            je 0x4001c7c	      1098	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4001c73	    0x41c744247800	               mov dword [r12 + 0x78], 0	      1099	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1	IF_3
0x4001c7c	            0x4898	                                    cdqe	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x4001c7e	      0xe9550e0000	                           jmp 0x4002ad8	      1105	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_1
0x4001c83	          0x488b07	                    mov rax, qword [rdi]	       141	strbuf.h	FUNCTION_73
0x4001c86	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4001c89	            0x740a	                            je 0x4001c95	       141	strbuf.h	FUNCTION_73
0x4001c8b	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001c8f	        0x48394708	                cmp qword [rdi + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001c93	            0x750d	                           jne 0x4001ca2	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001c95	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001c9a	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001c9d	      0xe800000000	                          call 0x4001ca2	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001ca2	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4001ca6	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x4001caa	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4001cae	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4001cb2	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4001cb6	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4001cba	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x4001cbe	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4001cc2	      0xb801000000	                              mov eax, 1	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001cc7	      0xe90c0e0000	                           jmp 0x4002ad8	      1109	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001ccc	         0xfb64601	               movzx eax, byte [rsi + 1]	      1273	cache.h	FUNCTION_149
0x4001cd0	    0x440fb6a00000	                  movzx r12d, byte [rax]	      1273	cache.h	FUNCTION_149
0x4001cd8	        0x410fbec4	                         movsx eax, r12b	      1273	cache.h	FUNCTION_149
0x4001cdc	          0x4189c4	                           mov r12d, eax	      1283	cache.h	FUNCTION_150	CALL_2
0x4001cdf	      0xa9f0ffffff	                    test eax, 0xfffffff0	      1283	cache.h	FUNCTION_150	CALL_2
0x4001ce4	            0x7512	                           jne 0x4001cf8	      1283	cache.h	FUNCTION_150	CALL_2
0x4001ce6	         0xfb65602	               movzx edx, byte [rsi + 2]	      1273	cache.h	FUNCTION_149
0x4001cea	    0x440fbea20000	                  movsx r12d, byte [rdx]	      1283	cache.h	FUNCTION_150	CALL_2
0x4001cf2	          0xc1e004	                              shl eax, 4	      1283	cache.h	FUNCTION_150	CALL_2
0x4001cf5	          0x4109c4	                            or r12d, eax	      1283	cache.h	FUNCTION_150	CALL_2
0x4001cf8	      0xb800000000	                              mov eax, 0	      1114	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4001cfd	          0x4585e4	                         test r12d, r12d	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4001d00	     0xf88d20d0000	                            js 0x4002ad8	      1113	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_4
0x4001d06	          0x488b03	                    mov rax, qword [rbx]	       141	strbuf.h	FUNCTION_73
0x4001d09	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4001d0c	            0x740a	                            je 0x4001d18	       141	strbuf.h	FUNCTION_73
0x4001d0e	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001d12	        0x48394308	                cmp qword [rbx + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001d16	            0x750d	                           jne 0x4001d25	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001d18	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001d1d	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001d20	      0xe800000000	                          call 0x4001d25	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001d25	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4001d29	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x4001d2d	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4001d31	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4001d35	        0x44882402	              mov byte [rdx + rax], r12b	       229	strbuf.h	FUNCTION_75
0x4001d39	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4001d3d	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x4001d41	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4001d45	      0xb803000000	                              mov eax, 3	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001d4a	      0xe9890d0000	                           jmp 0x4002ad8	      1116	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1
0x4001d4f	      0xb800000000	                              mov eax, 0	      1140	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	ELSE_2
0x4001d54	        0x807e0128	                cmp byte [rsi + 1], 0x28	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001d58	     0xf857a0d0000	                           jne 0x4002ad8	      1118	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001d5e	        0x4c8d7602	                      lea r14, [rsi + 2]	      1121	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001d62	      0xbe29000000	                           mov esi, 0x29	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4001d67	          0x4c89f7	                            mov rdi, r14	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4001d6a	      0xe800000000	                          call 0x4001d6f	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4001d6f	          0x4989c5	                            mov r13, rax	      1122	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	CALL_8
0x4001d72	          0x4885c0	                           test rax, rax	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4001d75	     0xf840b010000	                            je 0x4001e86	      1123	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4001d7b	          0x4939c6	                            cmp r14, rax	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x4001d7e	     0xf8384000000	                           jae 0x4001e08	      1125	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7
0x4001d84	      0xba0a000000	                            mov edx, 0xa	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4001d89	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4001d8e	          0x4c89f7	                            mov rdi, r14	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4001d91	      0xe800000000	                          call 0x4001d96	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4001d96	          0x4989c6	                            mov r14, rax	      1126	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	CALL_9
0x4001d99	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4001d9e	    0x48c744240800	                  mov qword [rsp + 8], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001da7	    0x41bf00000000	                             mov r15d, 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001dad	          0x80382c	                    cmp byte [rax], 0x2c	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4001db0	            0x7541	                           jne 0x4001df3	      1127	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8
0x4001db2	        0x488d7801	                      lea rdi, [rax + 1]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4001db6	      0xba0a000000	                            mov edx, 0xa	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4001dbb	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4001dc0	      0xe800000000	                          call 0x4001dc5	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4001dc5	          0x4989c7	                            mov r15, rax	      1128	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	CALL_10
0x4001dc8	      0x488b442420	            mov rax, qword [rsp + 0x20] 	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4001dcd	    0x48c744240800	                  mov qword [rsp + 8], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001dd6	          0x80382c	                    cmp byte [rax], 0x2c	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4001dd9	            0x7518	                           jne 0x4001df3	      1129	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9
0x4001ddb	        0x488d7801	                      lea rdi, [rax + 1]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4001ddf	      0xba0a000000	                            mov edx, 0xa	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4001de4	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4001de9	      0xe800000000	                          call 0x4001dee	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4001dee	      0x4889442408	                mov qword [rsp + 8], rax	      1130	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_8	IF_9	CALL_11
0x4001df3	      0xb800000000	                              mov eax, 0	      1135	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4001df8	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4001dfd	          0x803a29	                    cmp byte [rdx], 0x29	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4001e00	     0xf85d20c0000	                           jne 0x4002ad8	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4001e06	            0xeb15	                           jmp 0x4001e1d	      1134	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_7	IF_10
0x4001e08	    0x48c744240800	                  mov qword [rsp + 8], 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e11	    0x41bf00000000	                             mov r15d, 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e17	    0x41be00000000	                             mov r14d, 0	      1119	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e1d	      0x498b542460	            mov rdx, qword [r12 + 0x60] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e22	          0x4939d6	                            cmp r14, rdx	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e25	            0x7513	                           jne 0x4001e3a	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e27	      0x4d3b7c2468	            cmp r15, qword [r12 + 0x68] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e2c	            0x750c	                           jne 0x4001e3a	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e2e	      0x488b442408	                mov rax, qword [rsp + 8]	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e33	      0x493b442470	            cmp rax, qword [r12 + 0x70] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e38	            0x7440	                            je 0x4001e7a	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4001e3a	    0x498bb424b800	            mov rsi, qword [r12 + 0xb8] 	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x4001e42	        0x483b7308	                cmp rsi, qword [rbx + 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x4001e46	            0x7312	                           jae 0x4001e5a	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x4001e48	      0x498b4c2468	            mov rcx, qword [r12 + 0x68] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4001e4d	      0x4d8b442470	              mov r8, qword [r12 + 0x70]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4001e52	          0x4889df	                            mov rdi, rbx	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4001e55	      0xe8c1e9ffff	                    call sym.strbuf_wrap	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4001e5a	        0x488b4308	                mov rax, qword [rbx + 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x4001e5e	    0x49898424b800	             mov qword [r12 + 0xb8], rax	       912	pretty.c	WHILE_3	FUNCTION_34
0x4001e66	      0x4d89742460	             mov qword [r12 + 0x60], r14	       913	pretty.c	WHILE_3	FUNCTION_34
0x4001e6b	      0x4d897c2468	             mov qword [r12 + 0x68], r15	       914	pretty.c	WHILE_3	FUNCTION_34
0x4001e70	      0x488b442408	                mov rax, qword [rsp + 8]	       915	pretty.c	WHILE_3	FUNCTION_34
0x4001e75	      0x4989442470	             mov qword [r12 + 0x70], rax	       915	pretty.c	WHILE_3	FUNCTION_34
0x4001e7a	          0x4929ed	                            sub r13, rbp	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e7d	        0x498d4501	                      lea rax, [r13 + 1]	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e81	      0xe9520c0000	                           jmp 0x4002ad8	      1138	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5
0x4001e86	      0xb800000000	                              mov eax, 0	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4001e8b	      0xe9480c0000	                           jmp 0x4002ad8	      1124	pretty.c	WHILE_3	FUNCTION_39	SWITCH_1	IF_5	IF_6
0x4001e90	        0x488d5601	                      lea rdx, [rsi + 1]	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001e94	          0x80f93c	                            cmp cl, 0x3c	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001e97	            0x7438	                            je 0x4001ed1	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001e99	      0xb800000000	                              mov eax, 0	      1010	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4001e9e	          0x80f93e	                            cmp cl, 0x3e	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001ea1	     0xf85310c0000	                           jne 0x4002ad8	       995	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001ea7	         0xfb64601	               movzx eax, byte [rsi + 1]	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001eab	            0x3c3c	                            cmp al, 0x3c	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001ead	            0x750c	                           jne 0x4001ebb	      1000	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001eaf	        0x488d5602	                      lea rdx, [rsi + 2]	      1002	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001eb3	    0x41bf04000000	                             mov r15d, 4	      1001	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001eb9	            0xeb1c	                           jmp 0x4001ed7	      1001	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	IF_1
0x4001ebb	    0x41bf02000000	                             mov r15d, 2	      1007	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_2
0x4001ec1	            0x3c3e	                            cmp al, 0x3e	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4001ec3	            0x7512	                           jne 0x4001ed7	      1003	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4001ec5	        0x488d5602	                      lea rdx, [rsi + 2]	      1005	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4001ec9	    0x41bf03000000	                             mov r15d, 3	      1004	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4001ecf	            0xeb06	                           jmp 0x4001ed7	      1004	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1	ELSE_1	IF_2
0x4001ed1	    0x41bf01000000	                             mov r15d, 1	       997	pretty.c	WHILE_3	FUNCTION_37	SWITCH_1
0x4001ed7	    0x41be00000000	                             mov r14d, 0	       993	pretty.c	WHILE_3	FUNCTION_37
0x4001edd	          0x803a7c	                    cmp byte [rdx], 0x7c	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4001ee0	            0x750a	                           jne 0x4001eec	      1014	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4001ee2	        0x4883c201	                              add rdx, 1	      1016	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4001ee6	    0x41be01000000	                             mov r14d, 1	      1015	pretty.c	WHILE_3	FUNCTION_37	ELSE_2	IF_3
0x4001eec	      0xb800000000	                              mov eax, 0	      1056	pretty.c	WHILE_3	FUNCTION_37	ELSE_5	ELSE_6
0x4001ef1	          0x803a28	                    cmp byte [rdx], 0x28	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001ef4	     0xf85de0b0000	                           jne 0x4002ad8	      1019	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001efa	        0x4c8d6a01	                      lea r13, [rdx + 1]	      1020	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001efe	         0xfb64201	               movzx eax, byte [rdx + 1]	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f02	            0x3c2c	                            cmp al, 0x2c	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f04	            0x7714	                            ja 0x4001f1a	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f06	    0x48b901000000	              movabs rcx, 0x120000000001	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f10	        0x480fa3c1	                             bt rcx, rax	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f14	     0xf8248010000	                            jb 0x4002062	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f1a	        0x488d4202	                      lea rax, [rdx + 2]	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f1e	    0x48b901000000	              movabs rcx, 0x120000000001	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f28	          0x4889c3	                            mov rbx, rax	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f2b	           0xfb610	                   movzx edx, byte [rax]	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f2e	          0x80fa2c	                            cmp dl, 0x2c	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f31	     0xf877d0c0000	                            ja 0x4002bb4	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f37	        0x4883c001	                              add rax, 1	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f3b	        0x480fa3d1	                             bt rcx, rdx	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f3f	            0x73e7	                           jae 0x4001f28	       961	string2.h	FUNCTION_61	WHILE_1
0x4001f41	          0x4885db	                           test rbx, rbx	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4001f44	     0xf8422010000	                            je 0x400206c	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4001f4a	          0x4939dd	                            cmp r13, rbx	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4001f4d	     0xf8419010000	                            je 0x400206c	      1024	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4001f53	      0xba0a000000	                            mov edx, 0xa	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f58	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f5d	          0x4c89ef	                            mov rdi, r13	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f60	      0xe800000000	                          call 0x4001f65	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f65	      0x4889442408	                mov qword [rsp + 8], rax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f6a	            0x89c2	                            mov edx, eax	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001f6c	      0x4c396c2420	            cmp qword [rsp + 0x20], r13 	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4001f71	     0xf84ff000000	                            je 0x4002076	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4001f77	            0x85c0	                           test eax, eax	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4001f79	     0xf84f7000000	                            je 0x4002076	      1027	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4001f7f	            0x85c0	                           test eax, eax	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x4001f81	            0x7925	                           jns 0x4001fa8	      1029	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7
0x4001f83	      0xb800000000	                              mov eax, 0	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4001f88	          0x4585f6	                         test r14d, r14d	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x4001f8b	     0xf84470b0000	                            je 0x4002ad8	      1030	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_8
0x4001f91	      0xe800000000	                          call 0x4001f96	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x4001f96	            0x89c2	                            mov edx, eax	      1031	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	CALL_3
0x4001f98	      0xb800000000	                              mov eax, 0	      1033	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4001f9d	         0x3542408	                add edx, dword [rsp + 8]	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4001fa1	            0x790e	                           jns 0x4001fb1	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4001fa3	      0xe9300b0000	                           jmp 0x4002ad8	      1032	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_7	IF_9
0x4001fa8	        0x8b442408	                mov eax, dword [rsp + 8]	      1026	pretty.c	WHILE_3	FUNCTION_37	IF_4	CALL_2
0x4001fac	          0x4585f6	                         test r14d, r14d	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001faf	            0x7404	                            je 0x4001fb5	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001fb1	            0x89d0	                            mov eax, edx	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001fb3	            0xf7d8	                                 neg eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001fb5	      0x418944247c	             mov dword [r12 + 0x7c], eax	      1035	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001fba	      0x45897c2448	            mov dword [r12 + 0x48], r15d	      1036	pretty.c	WHILE_3	FUNCTION_37	IF_4
0x4001fbf	          0x803b2c	                    cmp byte [rbx], 0x2c	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4001fc2	     0xf8585000000	                           jne 0x400204d	      1038	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4001fc8	        0x4c8d6b01	                      lea r13, [rbx + 1]	      1039	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10
0x4001fcc	      0xbe29000000	                           mov esi, 0x29	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4001fd1	          0x4c89ef	                            mov rdi, r13	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4001fd4	      0xe800000000	                          call 0x4001fd9	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4001fd9	          0x4889c3	                            mov rbx, rax	      1040	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	CALL_4
0x4001fdc	          0x4885c0	                           test rax, rax	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4001fdf	     0xf849b000000	                            je 0x4002080	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4001fe5	          0x4939c5	                            cmp r13, rax	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4001fe8	     0xf8492000000	                            je 0x4002080	      1041	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4001fee	      0xbe00000000	                              mov esi, 0	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4001ff3	          0x4c89ef	                            mov rdi, r13	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4001ff6	      0xe800000000	                          call 0x4001ffb	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4001ffb	            0x85c0	                           test eax, eax	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4001ffd	            0x740b	                            je 0x400200a	      1043	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12	CALL_5
0x4001fff	    0x41c744244c03	               mov dword [r12 + 0x4c], 3	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x4002008	            0xeb4c	                           jmp 0x4002056	      1044	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_12
0x400200a	      0xbe00000000	                              mov esi, 0	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x400200f	          0x4c89ef	                            mov rdi, r13	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002012	      0xe800000000	                          call 0x4002017	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002017	            0x85c0	                           test eax, eax	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x4002019	            0x740b	                            je 0x4002026	      1045	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13	CALL_6
0x400201b	    0x41c744244c01	               mov dword [r12 + 0x4c], 1	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x4002024	            0xeb30	                           jmp 0x4002056	      1046	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_3	IF_13
0x4002026	      0xbe00000000	                              mov esi, 0	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x400202b	          0x4c89ef	                            mov rdi, r13	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x400202e	      0xe800000000	                          call 0x4002033	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002033	            0x89c2	                            mov edx, eax	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002035	      0xb800000000	                              mov eax, 0	      1050	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_5
0x400203a	            0x85d2	                           test edx, edx	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x400203c	     0xf84960a0000	                            je 0x4002ad8	      1047	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14	CALL_7
0x4002042	    0x41c744244c02	               mov dword [r12 + 0x4c], 2	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x400204b	            0xeb09	                           jmp 0x4002056	      1048	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	ELSE_4	IF_14
0x400204d	    0x41c744244c00	               mov dword [r12 + 0x4c], 0	      1052	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002056	          0x4829eb	                            sub rbx, rbp	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002059	        0x488d4301	                      lea rax, [rbx + 1]	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x400205d	      0xe9760a0000	                           jmp 0x4002ad8	      1054	pretty.c	WHILE_3	FUNCTION_37	IF_4	ELSE_5	ELSE_6
0x4002062	      0xb800000000	                              mov eax, 0	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002067	      0xe96c0a0000	                           jmp 0x4002ad8	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x400206c	      0xb800000000	                              mov eax, 0	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002071	      0xe9620a0000	                           jmp 0x4002ad8	      1025	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_5
0x4002076	      0xb800000000	                              mov eax, 0	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x400207b	      0xe9580a0000	                           jmp 0x4002ad8	      1028	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_6
0x4002080	      0xb800000000	                              mov eax, 0	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x4002085	      0xe94e0a0000	                           jmp 0x4002ad8	      1042	pretty.c	WHILE_3	FUNCTION_37	IF_4	IF_10	IF_11
0x400208a	        0x4d8b2c24	                    mov r13, qword [r12]	      1082	pretty.c	WHILE_3	FUNCTION_39
0x400208e	      0x4d8b742450	            mov r14, qword [r12 + 0x50] 	      1083	pretty.c	WHILE_3	FUNCTION_39
0x4002093	      0x41f6450001	                      test byte [r13], 1	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x4002098	            0x7509	                           jne 0x40020a3	      1148	pretty.c	WHILE_3	FUNCTION_39	IF_11
0x400209a	        0x498d7d04	                      lea rdi, [r13 + 4]	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x400209e	      0xe800000000	                          call 0x40020a3	      1149	pretty.c	WHILE_3	FUNCTION_39	CALL_14
0x40020a3	         0xfb65500	                   movzx edx, byte [rbp]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020a7	          0x8d42bc	                   lea eax, [rdx - 0x44]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020aa	            0x3c30	                            cmp al, 0x30	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020ac	     0xf8771040000	                            ja 0x4002523	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020b2	           0xfb6c0	                           movzx eax, al	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020b5	    0xff24c5000000	                       jmp qword [rax*8]	      1151	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40020bc	      0x418b7c2478	            mov edi, dword [r12 + 0x78] 	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40020c1	      0xbe06000000	                              mov esi, 6	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40020c6	      0xe800000000	                          call 0x40020cb	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40020cb	          0x4889c6	                            mov rsi, rax	      1153	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_16
0x40020ce	    0x49c7c6ffffff	             mov r14, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020d5	      0xbd00000000	                              mov ebp, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020da	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020dd	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020e0	            0x89e8	                            mov eax, ebp	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020e2	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020e4	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020e7	        0x4a8d1431	                    lea rdx, [rcx + r14]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020eb	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020ee	      0xe800000000	                          call 0x40020f3	       279	strbuf.h	FUNCTION_76	CALL_2
0x40020f3	        0x498d7d04	                      lea rdi, [r13 + 4]	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40020f7	      0xe800000000	                          call 0x40020fc	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40020fc	          0x4889c6	                            mov rsi, rax	      1154	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_18
0x40020ff	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002102	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002105	            0x89e8	                            mov eax, ebp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002107	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002109	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400210c	        0x4a8d1431	                    lea rdx, [rcx + r14]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002110	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002113	      0xe800000000	                          call 0x4002118	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002118	      0x418b7c2478	            mov edi, dword [r12 + 0x78] 	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x400211d	      0xbe00000000	                              mov esi, 0	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4002122	      0xe800000000	                          call 0x4002127	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x4002127	          0x4889c6	                            mov rsi, rax	      1155	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_20
0x400212a	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x400212d	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002130	            0x89e8	                            mov eax, ebp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002132	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002134	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002137	        0x4a8d1431	                    lea rdx, [rcx + r14]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400213b	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400213e	      0xe800000000	                          call 0x4002143	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002143	      0xb801000000	                              mov eax, 1	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002148	      0xe98b090000	                           jmp 0x4002ad8	      1156	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400214d	      0x418b7c2478	            mov edi, dword [r12 + 0x78] 	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4002152	      0xbe06000000	                              mov esi, 6	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x4002157	      0xe800000000	                          call 0x400215c	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400215c	          0x4889c6	                            mov rsi, rax	      1158	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_22
0x400215f	    0x49c7c6ffffff	             mov r14, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002166	      0xbd00000000	                              mov ebp, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x400216b	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x400216e	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002171	            0x89e8	                            mov eax, ebp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002173	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002175	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002178	        0x4a8d1431	                    lea rdx, [rcx + r14]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400217c	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400217f	      0xe800000000	                          call 0x4002184	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002184	      0x498b442408	                mov rax, qword [r12 + 8]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4002189	          0x8b5004	                mov edx, dword [rax + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x400218c	        0x498d7504	                      lea rsi, [r13 + 4]	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4002190	          0x4889df	                            mov rdi, rbx	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4002193	      0xe800000000	                          call 0x4002198	      1159	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_23
0x4002198	      0x418b7c2478	            mov edi, dword [r12 + 0x78] 	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x400219d	      0xbe00000000	                              mov esi, 0	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40021a2	      0xe800000000	                          call 0x40021a7	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40021a7	          0x4889c6	                            mov rsi, rax	      1161	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_25
0x40021aa	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021ad	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021b0	            0x89e8	                            mov eax, ebp	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021b2	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021b4	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021b7	        0x4a8d1431	                    lea rdx, [rcx + r14]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021bb	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021be	      0xe800000000	                          call 0x40021c3	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021c3	      0xb801000000	                              mov eax, 1	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40021c8	      0xe90b090000	                           jmp 0x4002ad8	      1162	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40021cd	          0x4c89ef	                            mov rdi, r13	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40021d0	      0xe800000000	                          call 0x40021d5	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40021d5	          0x4889c7	                            mov rdi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40021d8	      0xe800000000	                          call 0x40021dd	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40021dd	          0x4889c6	                            mov rsi, rax	      1164	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_28
0x40021e0	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021e5	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021ec	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021ef	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021f1	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021f4	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021f7	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021fb	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40021fe	      0xe800000000	                          call 0x4002203	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002203	      0xb801000000	                              mov eax, 1	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002208	      0xe9cb080000	                           jmp 0x4002ad8	      1165	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400220d	      0x498b442408	                mov rax, qword [r12 + 8]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4002212	          0x8b6804	                mov ebp, dword [rax + 4]	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4002215	          0x4c89ef	                            mov rdi, r13	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x4002218	      0xe800000000	                          call 0x400221d	      1168	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_30
0x400221d	            0x89ea	                            mov edx, ebp	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x400221f	          0x4889c6	                            mov rsi, rax	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4002222	          0x4889df	                            mov rdi, rbx	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x4002225	      0xe800000000	                          call 0x400222a	      1167	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_29
0x400222a	      0xb801000000	                              mov eax, 1	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400222f	      0xe9a4080000	                           jmp 0x4002ad8	      1170	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002234	        0x498b6d30	            mov rbp, qword [r13 + 0x30] 	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4002238	    0x49c7c4ffffff	             mov r12, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x400223f	      0xb801000000	                              mov eax, 1	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002244	          0x4885ed	                           test rbp, rbp	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x4002247	     0xf848b080000	                            je 0x4002ad8	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400224d	            0xeb45	                           jmp 0x4002294	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x400224f	        0x49396d30	            cmp qword [r13 + 0x30], rbp 	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x4002253	            0x743f	                            je 0x4002294	      1173	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	IF_12
0x4002255	          0x488b03	                    mov rax, qword [rbx]	       141	strbuf.h	FUNCTION_73
0x4002258	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x400225b	            0x740a	                            je 0x4002267	       141	strbuf.h	FUNCTION_73
0x400225d	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4002261	        0x48394308	                cmp qword [rbx + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4002265	            0x750d	                           jne 0x4002274	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4002267	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x400226c	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x400226f	      0xe800000000	                          call 0x4002274	       228	strbuf.h	FUNCTION_75	CALL_2
0x4002274	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4002278	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x400227c	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4002280	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4002284	        0xc6040220	              mov byte [rdx + rax], 0x20	       229	strbuf.h	FUNCTION_75
0x4002288	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x400228c	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x4002290	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4002294	        0x488b4500	                    mov rax, qword [rbp]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x4002298	        0x488d7804	                      lea rdi, [rax + 4]	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x400229c	      0xe800000000	                          call 0x40022a1	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x40022a1	          0x4889c6	                            mov rsi, rax	      1175	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1	CALL_33
0x40022a4	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022a9	          0x4c89e1	                            mov rcx, r12	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022ac	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022af	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022b1	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022b4	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022b7	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022bb	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022be	      0xe800000000	                          call 0x40022c3	       279	strbuf.h	FUNCTION_76	CALL_2
0x40022c3	        0x488b6d08	                mov rbp, qword [rbp + 8]	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x40022c7	          0x4885ed	                           test rbp, rbp	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x40022ca	            0x7583	                           jne 0x400224f	      1172	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_1
0x40022cc	      0xb801000000	                              mov eax, 1	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40022d1	      0xe902080000	                           jmp 0x4002ad8	      1177	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40022d6	        0x498b6d30	            mov rbp, qword [r13 + 0x30] 	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40022da	      0xb801000000	                              mov eax, 1	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40022df	          0x4885ed	                           test rbp, rbp	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40022e2	     0xf84f0070000	                            je 0x4002ad8	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40022e8	            0xeb45	                           jmp 0x400232f	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x40022ea	        0x49396d30	            cmp qword [r13 + 0x30], rbp 	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40022ee	            0x743f	                            je 0x400232f	      1180	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	IF_13
0x40022f0	          0x488b03	                    mov rax, qword [rbx]	       141	strbuf.h	FUNCTION_73
0x40022f3	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40022f6	            0x740a	                            je 0x4002302	       141	strbuf.h	FUNCTION_73
0x40022f8	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40022fc	        0x48394308	                cmp qword [rbx + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4002300	            0x750d	                           jne 0x400230f	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4002302	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4002307	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x400230a	      0xe800000000	                          call 0x400230f	       228	strbuf.h	FUNCTION_75	CALL_2
0x400230f	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4002313	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x4002317	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x400231b	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x400231f	        0xc6040220	              mov byte [rdx + rax], 0x20	       229	strbuf.h	FUNCTION_75
0x4002323	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4002327	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x400232b	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x400232f	      0x498b442408	                mov rax, qword [r12 + 8]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x4002334	          0x8b5004	                mov edx, dword [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x4002337	        0x488b4500	                    mov rax, qword [rbp]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x400233b	        0x488d7004	                      lea rsi, [rax + 4]	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x400233f	          0x4889df	                            mov rdi, rbx	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x4002342	      0xe800000000	                          call 0x4002347	      1182	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2	CALL_35
0x4002347	        0x488b6d08	                mov rbp, qword [rbp + 8]	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x400234b	          0x4885ed	                           test rbp, rbp	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x400234e	            0x759a	                           jne 0x40022ea	      1179	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	FOR_2
0x4002350	      0xb801000000	                              mov eax, 1	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002355	      0xe97e070000	                           jmp 0x4002ad8	      1185	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x400235a	          0x4c89ee	                            mov rsi, r13	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400235d	      0xbf00000000	                              mov edi, 0	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4002362	      0xe800000000	                          call 0x4002367	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x4002367	          0x4889c6	                            mov rsi, rax	      1187	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_37
0x400236a	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x400236f	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002376	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002379	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400237b	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400237e	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002381	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002385	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002388	      0xe800000000	                          call 0x400238d	       279	strbuf.h	FUNCTION_76	CALL_2
0x400238d	      0xb801000000	                              mov eax, 1	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002392	      0xe941070000	                           jmp 0x4002ad8	      1188	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002397	      0xbe01000000	                              mov esi, 1	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x400239c	      0xbf00000000	                              mov edi, 0	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x40023a1	      0xe800000000	                          call 0x40023a6	      1190	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_38
0x40023a6	      0x418b542478	            mov edx, dword [r12 + 0x78] 	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023ab	    0x41b900000000	                              mov r9d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023b1	    0x41b800000000	                              mov r8d, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023b7	      0xb900000000	                              mov ecx, 0	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023bc	          0x4c89ee	                            mov rsi, r13	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023bf	          0x4889df	                            mov rdi, rbx	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023c2	      0xe800000000	                          call 0x40023c7	      1191	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_39
0x40023c7	      0xb801000000	                              mov eax, 1	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40023cc	      0xe907070000	                           jmp 0x4002ad8	      1192	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40023d1	      0xbe01000000	                              mov esi, 1	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x40023d6	      0xbf00000000	                              mov edi, 0	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x40023db	      0xe800000000	                          call 0x40023e0	      1194	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_40
0x40023e0	      0x418b542478	            mov edx, dword [r12 + 0x78] 	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023e5	    0x41b900000000	                              mov r9d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023eb	    0x41b800000000	                              mov r8d, 0	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023f1	          0x4c89c9	                             mov rcx, r9	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023f4	          0x4c89ee	                            mov rsi, r13	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023f7	          0x4889df	                            mov rdi, rbx	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023fa	      0xe800000000	                          call 0x40023ff	      1195	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	CALL_41
0x40023ff	      0xb801000000	                              mov eax, 1	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002404	      0xe9cf060000	                           jmp 0x4002ad8	      1196	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002409	         0xfb66d01	               movzx ebp, byte [rbp + 1]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400240d	          0x8d45bc	                   lea eax, [rbp - 0x44]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002410	            0x3c2f	                            cmp al, 0x2f	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002412	     0xf8798060000	                            ja 0x4002ab0	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002418	           0xfb6c0	                           movzx eax, al	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400241b	    0xff24c5000000	                       jmp qword [rax*8]	      1198	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002422	      0x498b542408	                mov rdx, qword [r12 + 8]	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4002427	        0x488b7248	            mov rsi, qword [rdx + 0x48] 	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x400242b	      0xb802000000	                              mov eax, 2	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002430	          0x4885f6	                           test rsi, rsi	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4002433	     0xf849f060000	                            je 0x4002ad8	      1201	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4002439	        0x4080fd64	                           cmp bpl, 0x64	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400243d	        0x410f94c0	                                sete r8b	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4002441	        0x450fb6c0	                          movzx r8d, r8b	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4002445	         0xfb64a30	           movzx ecx, byte [rdx + 0x30] 	      1205	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14
0x4002449	          0x83e101	                              and ecx, 1	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x400244c	        0x4883c218	                           add rdx, 0x18	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4002450	          0x4889df	                            mov rdi, rbx	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4002453	      0xe800000000	                          call 0x4002458	      1202	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_14	CALL_42
0x4002458	      0xb802000000	                              mov eax, 2	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400245d	      0xe976060000	                           jmp 0x4002ad8	      1207	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002462	      0x498b442408	                mov rax, qword [r12 + 8]	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4002467	        0x488b7048	            mov rsi, qword [rax + 0x48] 	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x400246b	      0xb802000000	                              mov eax, 2	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002470	          0x4885f6	                           test rsi, rsi	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4002473	     0xf845f060000	                            je 0x4002ad8	      1209	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	IF_15
0x4002479	          0x4889df	                            mov rdi, rbx	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x400247c	      0xe800000000	                          call 0x4002481	      1210	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_43
0x4002481	      0xb802000000	                              mov eax, 2	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002486	      0xe94d060000	                           jmp 0x4002ad8	      1211	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x400248b	      0x4d8b642408	                mov r12, qword [r12 + 8]	      1219	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3
0x4002490	      0x498b7c2448	            mov rdi, qword [r12 + 0x48] 	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x4002495	      0xb802000000	                              mov eax, 2	       926	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x400249a	          0x4885ff	                           test rdi, rdi	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x400249d	            0x743e	                            je 0x40024dd	       925	pretty.c	WHILE_3	FUNCTION_35	IF_1
0x400249f	      0xe800000000	                          call 0x40024a4	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x40024a4	          0x4889c2	                            mov rdx, rax	       928	pretty.c	WHILE_3	FUNCTION_35	CALL_1
0x40024a7	      0xb802000000	                              mov eax, 2	       930	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x40024ac	          0x4885d2	                           test rdx, rdx	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x40024af	            0x742c	                            je 0x40024dd	       929	pretty.c	WHILE_3	FUNCTION_35	IF_2
0x40024b1	      0xb800000000	                              mov eax, 0	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024b6	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024bd	          0x4889d7	                            mov rdi, rdx	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024c0	            0xf2ae	              repne scasb al, byte [rdi]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024c2	          0x4889c8	                            mov rax, rcx	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024c5	          0x48f7d0	                                 not rax	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024c8	        0x488d48ff	                      lea rcx, [rax - 1]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024cc	        0x400fbef5	                          movsx esi, bpl	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024d0	      0x4d8d442418	                    lea r8, [r12 + 0x18]	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024d5	          0x4889df	                            mov rdi, rbx	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024d8	      0xe8e5e8ffff	             call sym.format_person_part	       932	pretty.c	WHILE_3	FUNCTION_35	CALL_3
0x40024dd	            0x4898	                                    cdqe	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40024df	      0xe9f4050000	                           jmp 0x4002ad8	      1216	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	SWITCH_3	CALL_44
0x40024e4	      0x498b442408	                mov rax, qword [r12 + 8]	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40024e9	        0x488b7040	            mov rsi, qword [rax + 0x40] 	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40024ed	      0xb800000000	                              mov eax, 0	      1227	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x40024f2	          0x4885f6	                           test rsi, rsi	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40024f5	     0xf84dd050000	                            je 0x4002ad8	      1223	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x40024fb	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002502	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002505	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002507	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400250a	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x400250d	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002511	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002514	      0xe800000000	                          call 0x4002519	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002519	      0xb801000000	                              mov eax, 1	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x400251e	      0xe9b5050000	                           jmp 0x4002ad8	      1225	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2	IF_16
0x4002523	          0x80fa47	                            cmp dl, 0x47	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002526	     0xf851e010000	                           jne 0x400264a	      1230	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400252c	    0x41807c243000	                cmp byte [r12 + 0x30], 0	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x4002532	            0x750e	                           jne 0x4002542	      1231	pretty.c	WHILE_3	FUNCTION_39	IF_17	IF_18
0x4002534	      0x498d742418	                   lea rsi, [r12 + 0x18]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4002539	        0x498b3c24	                    mov rdi, qword [r12]	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x400253d	      0xe800000000	                          call 0x4002542	      1232	pretty.c	WHILE_3	FUNCTION_39	IF_17	CALL_46
0x4002542	         0xfb64501	               movzx eax, byte [rbp + 1]	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002546	            0x3c47	                            cmp al, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002548	            0x741e	                            je 0x4002568	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400254a	            0x3c47	                            cmp al, 0x47	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400254c	            0x7f09	                            jg 0x4002557	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400254e	            0x3c3f	                            cmp al, 0x3f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002550	            0x7451	                            je 0x40025a3	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002552	      0xe960050000	                           jmp 0x4002ab7	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002557	            0x3c4b	                            cmp al, 0x4b	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002559	     0xf84b0000000	                            je 0x400260f	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x400255f	            0x3c53	                            cmp al, 0x53	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002561	            0x7471	                            je 0x40025d4	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002563	      0xe94f050000	                           jmp 0x4002ab7	      1233	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002568	      0x498b742420	            mov rsi, qword [r12 + 0x20] 	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x400256d	          0x4885f6	                           test rsi, rsi	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x4002570	     0xf8448050000	                            je 0x4002abe	      1235	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_19
0x4002576	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x400257b	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002582	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002585	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002587	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400258a	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x400258d	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002591	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002594	      0xe800000000	                          call 0x4002599	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002599	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400259e	      0xe935050000	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x40025a3	    0x410fb6442430	           movzx eax, byte [r12 + 0x30] 	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025a9	          0x8d50be	                   lea edx, [rax - 0x42]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025ac	          0x80fa17	                            cmp dl, 0x17	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025af	     0xf8710050000	                            ja 0x4002ac5	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025b5	           0xfb6d2	                           movzx edx, dl	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025b8	    0xff24d5000000	                       jmp qword [rdx*8]	      1239	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5
0x40025bf	           0xfbef0	                           movsx esi, al	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40025c2	          0x4889df	                            mov rdi, rbx	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40025c5	      0xe8b5deffff	                   call sym.strbuf_addch	      1248	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	SWITCH_5	CALL_48
0x40025ca	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x40025cf	      0xe904050000	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x40025d4	      0x498b742438	            mov rsi, qword [r12 + 0x38] 	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x40025d9	          0x4885f6	                           test rsi, rsi	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x40025dc	     0xf84ea040000	                            je 0x4002acc	      1252	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_20
0x40025e2	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025e7	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025ee	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025f1	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025f3	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025f6	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025f9	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40025fd	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002600	      0xe800000000	                          call 0x4002605	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002605	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400260a	      0xe9c9040000	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400260f	      0x498b742440	            mov rsi, qword [r12 + 0x40] 	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4002614	          0x4885f6	                           test rsi, rsi	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x4002617	     0xf84b6040000	                            je 0x4002ad3	      1256	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4	IF_21
0x400261d	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002622	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002629	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x400262c	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400262e	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002631	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002634	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002638	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x400263b	      0xe800000000	                          call 0x4002640	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002640	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002645	      0xe98e040000	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x400264a	    0x41f644241001	               test byte [r12 + 0x10], 1	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x4002650	     0xf85ba000000	                           jne 0x4002710	      1267	pretty.c	WHILE_3	FUNCTION_39	IF_22
0x4002656	      0x4d8b442450	              mov r8, qword [r12 + 0x50]	       792	pretty.c	WHILE_3	FUNCTION_28
0x400265b	      0xb900000000	                              mov ecx, 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002660	        0x41803800	                        cmp byte [r8], 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x4002664	     0xf8498000000	                            je 0x4002702	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400266a	            0xeb70	                           jmp 0x40026dc	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x400266c	            0x89c7	                            mov edi, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400266e	          0x8d4701	                      lea eax, [rdi + 1]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002671	          0x4863d0	                         movsxd rdx, eax	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002674	        0x4d8d1410	                     lea r10, [r8 + rdx]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002678	        0x410fb612	                   movzx edx, byte [r10]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400267c	            0x84d2	                             test dl, dl	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x400267e	            0x7405	                            je 0x4002685	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002680	          0x80fa0a	                             cmp dl, 0xa	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002683	            0x75e7	                           jne 0x400266c	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002685	            0x39f0	                            cmp eax, esi	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x4002687	            0x7479	                            je 0x4002702	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x4002689	          0x4c89c8	                             mov rax, r9	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x400268c	      0xba00000000	                              mov edx, 0	       801	pretty.c	WHILE_3	FUNCTION_28	FOR_1	IF_1
0x4002691	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4002694	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4002696	     0xf8499040000	                            je 0x4002b35	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400269c	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026a0	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026a4	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026a7	            0x74e8	                            je 0x4002691	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026a9	      0xb900000000	                              mov ecx, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026ae	           0xfb631	                   movzx esi, byte [rcx]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40026b1	          0x4084f6	                           test sil, sil	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40026b4	     0xf8499040000	                            je 0x4002b53	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40026ba	        0x4983c101	                               add r9, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026be	        0x4883c101	                              add rcx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026c2	        0x413a71ff	                  cmp sil, byte [r9 - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026c6	            0x74e6	                            je 0x40026ae	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40026c8	          0x83c702	                              add edi, 2	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026cb	          0x4863cf	                         movsxd rcx, edi	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026ce	        0x4d8d0c08	                      lea r9, [r8 + rcx]	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026d2	        0x41803900	                        cmp byte [r9], 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026d6	            0x742a	                            je 0x4002702	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026d8	            0x89fe	                            mov esi, edi	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026da	            0xeb12	                           jmp 0x40026ee	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026dc	          0x4d89c1	                              mov r9, r8	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026df	      0xb900000000	                              mov ecx, 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026e4	      0xbe00000000	                              mov esi, 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026e9	      0xbf00000000	                              mov edi, 0	       795	pretty.c	WHILE_3	FUNCTION_28	FOR_1
0x40026ee	          0x4863c7	                         movsxd rax, edi	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x40026f1	      0x410fb60400	              movzx eax, byte [r8 + rax]	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x40026f6	            0x84c0	                             test al, al	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x40026f8	            0x7408	                            je 0x4002702	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x40026fa	            0x3c0a	                             cmp al, 0xa	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x40026fc	     0xf856cffffff	                           jne 0x400266e	       798	pretty.c	WHILE_3	FUNCTION_28	FOR_1	FOR_2
0x4002702	    0x49898c24a000	             mov qword [r12 + 0xa0], rcx	       812	pretty.c	WHILE_3	FUNCTION_28
0x400270a	    0x41804c241001	                 or byte [r12 + 0x10], 1	       813	pretty.c	WHILE_3	FUNCTION_28
0x4002710	         0xfb64500	                   movzx eax, byte [rbp]	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002714	            0x3c61	                            cmp al, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002716	            0x741e	                            je 0x4002736	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002718	            0x3c61	                            cmp al, 0x61	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400271a	            0x7f0d	                            jg 0x4002729	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400271c	            0x3c42	                            cmp al, 0x42	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400271e	     0xf84ac000000	                            je 0x40027d0	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002724	      0xe9e1000000	                           jmp 0x400280a	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002729	            0x3c63	                            cmp al, 0x63	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400272b	            0x7436	                            je 0x4002763	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400272d	            0x3c65	                            cmp al, 0x65	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400272f	            0x745f	                            je 0x4002790	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002731	      0xe9d4000000	                           jmp 0x400280a	      1270	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002736	      0x498b442408	                mov rax, qword [r12 + 8]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400273b	    0x498b8c248800	            mov rcx, qword [r12 + 0x88] 	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002743	          0x4c89f2	                            mov rdx, r14	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002746	    0x490394248000	             add rdx, qword [r12 + 0x80]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400274e	         0xfbe7501	               movsx esi, byte [rbp + 1]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002752	        0x4c8d4018	                    lea r8, [rax + 0x18]	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002756	          0x4889df	                            mov rdi, rbx	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002759	      0xe864e6ffff	             call sym.format_person_part	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x400275e	      0xe975030000	                           jmp 0x4002ad8	      1272	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_52
0x4002763	      0x498b442408	                mov rax, qword [r12 + 8]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002768	    0x498b8c249800	            mov rcx, qword [r12 + 0x98] 	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002770	          0x4c89f2	                            mov rdx, r14	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002773	    0x490394249000	             add rdx, qword [r12 + 0x90]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400277b	         0xfbe7501	               movsx esi, byte [rbp + 1]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400277f	        0x4c8d4018	                    lea r8, [rax + 0x18]	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002783	          0x4889df	                            mov rdi, rbx	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002786	      0xe837e6ffff	             call sym.format_person_part	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x400278b	      0xe948030000	                           jmp 0x4002ad8	      1276	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_53
0x4002790	      0x498b742458	            mov rsi, qword [r12 + 0x58] 	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x4002795	      0xb801000000	                              mov eax, 1	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400279a	          0x4885f6	                           test rsi, rsi	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x400279d	     0xf8435030000	                            je 0x4002ad8	      1280	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	IF_23
0x40027a3	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027a8	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027af	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027b2	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027b4	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027b7	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027ba	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027be	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027c1	      0xe800000000	                          call 0x40027c6	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027c6	      0xb801000000	                              mov eax, 1	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40027cb	      0xe908030000	                           jmp 0x4002ad8	      1282	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x40027d0	    0x498b8424a000	            mov rax, qword [r12 + 0xa0] 	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40027d8	      0x498d740601	                lea rsi, [r14 + rax + 1]	      1285	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6	CALL_55
0x40027dd	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027e2	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027e9	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027ec	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027ee	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027f1	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027f4	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027f8	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40027fb	      0xe800000000	                          call 0x4002800	       279	strbuf.h	FUNCTION_76	CALL_2
0x4002800	      0xb801000000	                              mov eax, 1	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x4002805	      0xe9ce020000	                           jmp 0x4002ad8	      1286	pretty.c	WHILE_3	FUNCTION_39	SWITCH_6
0x400280a	    0x41f644241002	               test byte [r12 + 0x10], 2	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x4002810	            0x754e	                           jne 0x4002860	      1290	pretty.c	WHILE_3	FUNCTION_39	IF_24
0x4002812	      0x4d8b6c2450	            mov r13, qword [r12 + 0x50] 	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002817	          0x4c89ef	                            mov rdi, r13	       876	pretty.c	WHILE_3	FUNCTION_32
0x400281a	    0x4903bc24a000	             add rdi, qword [r12 + 0xa0]	       876	pretty.c	WHILE_3	FUNCTION_32
0x4002822	      0xe800000000	                          call 0x4002827	       879	pretty.c	WHILE_3	FUNCTION_32	CALL_1
0x4002827	          0x4889c2	                            mov rdx, rax	       880	pretty.c	WHILE_3	FUNCTION_32
0x400282a	          0x4c29ea	                            sub rdx, r13	       880	pretty.c	WHILE_3	FUNCTION_32
0x400282d	    0x49899424a800	             mov qword [r12 + 0xa8], rdx	       880	pretty.c	WHILE_3	FUNCTION_32
0x4002835	      0xba00000000	                              mov edx, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x400283a	          0x4889c6	                            mov rsi, rax	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x400283d	      0xbf00000000	                              mov edi, 0	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002842	      0xe800000000	                          call 0x4002847	       882	pretty.c	WHILE_3	FUNCTION_32	CALL_2
0x4002847	          0x4889c7	                            mov rdi, rax	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x400284a	      0xe800000000	                          call 0x400284f	       883	pretty.c	WHILE_3	FUNCTION_32	CALL_3
0x400284f	          0x4c29e8	                            sub rax, r13	       884	pretty.c	WHILE_3	FUNCTION_32
0x4002852	    0x49898424b000	             mov qword [r12 + 0xb0], rax	       884	pretty.c	WHILE_3	FUNCTION_32
0x400285a	    0x41804c241002	                 or byte [r12 + 0x10], 2	       886	pretty.c	WHILE_3	FUNCTION_32
0x4002860	         0xfb64500	                   movzx eax, byte [rbp]	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002864	            0x3c66	                            cmp al, 0x66	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002866	            0x7433	                            je 0x400289b	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002868	            0x3c73	                            cmp al, 0x73	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400286a	            0x740d	                            je 0x4002879	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400286c	            0x3c62	                            cmp al, 0x62	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400286e	     0xf8577010000	                           jne 0x40029eb	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002874	      0xe93a010000	                           jmp 0x40029b3	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002879	          0x4c89f6	                            mov rsi, r14	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x400287c	    0x4903b424a800	             add rsi, qword [r12 + 0xa8]	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4002884	      0xba00000000	                              mov edx, 0	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4002889	          0x4889df	                            mov rdi, rbx	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x400288c	      0xe800000000	                          call 0x4002891	      1295	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_57
0x4002891	      0xb801000000	                              mov eax, 1	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x4002896	      0xe93d020000	                           jmp 0x4002ad8	      1296	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x400289b	    0x4d03b424a800	             add r14, qword [r12 + 0xa8]	      1298	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_58
0x40028a3	        0x488b6b08	                mov rbp, qword [rbx + 8]	       825	pretty.c	WHILE_3	FUNCTION_30
0x40028a7	        0x410fb606	                   movzx eax, byte [r14]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028ab	            0x84c0	                             test al, al	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028ad	     0xf84df000000	                            je 0x4002992	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028b3	            0x3c0a	                             cmp al, 0xa	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028b5	     0xf84d7000000	                            je 0x4002992	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028bb	      0xb902000000	                              mov ecx, 2	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x40028c0	    0x49bcfd0f0000	            movabs r12, 0x2000000000ffd 	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028ca	            0x89c2	                            mov edx, eax	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028cc	          0x83e2df	                     and edx, 0xffffffdf	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028cf	          0x83ea41	                           sub edx, 0x41	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028d2	          0x80fa19	                            cmp dl, 0x19	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028d5	            0x760d	                           jbe 0x40028e4	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028d7	          0x83e82e	                           sub eax, 0x2e	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028da	            0x3c31	                            cmp al, 0x31	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028dc	            0x774a	                            ja 0x4002928	       819	pretty.c	WHILE_3	FUNCTION_29
0x40028de	        0x490fa3c4	                             bt r12, rax	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40028e2	            0x7344	                           jae 0x4002928	       829	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_1
0x40028e4	          0x83f901	                              cmp ecx, 1	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x40028e7	            0x750d	                           jne 0x40028f6	       830	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_2
0x40028e9	      0xbe2d000000	                           mov esi, 0x2d	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x40028ee	          0x4889df	                            mov rdi, rbx	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x40028f1	      0xe889dbffff	                   call sym.strbuf_addch	       831	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_2
0x40028f6	        0x410fbe36	                   movsx esi, byte [r14]	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x40028fa	          0x4889df	                            mov rdi, rbx	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x40028fd	      0xe87ddbffff	                   call sym.strbuf_addch	       833	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	CALL_3
0x4002902	          0x4c89f0	                            mov rax, r14	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x4002905	      0xb900000000	                              mov ecx, 0	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x400290a	        0x41803e2e	                    cmp byte [r14], 0x2e	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x400290e	            0x7528	                           jne 0x4002938	       834	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3
0x4002910	      0x41807e012e	                cmp byte [r14 + 1], 0x2e	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002915	            0x7519	                           jne 0x4002930	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002917	        0x4883c001	                              add rax, 1	       836	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x400291b	        0x8078012e	                cmp byte [rax + 1], 0x2e	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x400291f	            0x74f6	                            je 0x4002917	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002921	      0xb900000000	                              mov ecx, 0	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x4002926	            0xeb10	                           jmp 0x4002938	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x4002928	          0x83c901	                               or ecx, 1	       838	pretty.c	WHILE_3	FUNCTION_30	FOR_1	ELSE_1
0x400292b	          0x4c89f0	                            mov rax, r14	       838	pretty.c	WHILE_3	FUNCTION_30	FOR_1	ELSE_1
0x400292e	            0xeb08	                           jmp 0x4002938	       838	pretty.c	WHILE_3	FUNCTION_30	FOR_1	ELSE_1
0x4002930	          0x4c89f0	                            mov rax, r14	       835	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1	IF_3	WHILE_1
0x4002933	      0xb900000000	                              mov ecx, 0	       832	pretty.c	WHILE_3	FUNCTION_30	FOR_1	IF_1
0x4002938	        0x4c8d7001	                      lea r14, [rax + 1]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400293c	         0xfb64001	               movzx eax, byte [rax + 1]	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002940	            0x84c0	                             test al, al	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002942	            0x7404	                            je 0x4002948	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002944	            0x3c0a	                             cmp al, 0xa	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002946	            0x7582	                           jne 0x40028ca	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x4002948	        0x488b7308	                mov rsi, qword [rbx + 8]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400294c	      0xba00000000	                              mov edx, 0	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002951	          0x4839f5	                            cmp rbp, rsi	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002954	            0x734b	                           jae 0x40029a1	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002956	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400295a	        0x488d56ff	                      lea rdx, [rsi - 1]	       844	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400295e	       0xfb64437ff	         movzx eax, byte [rdi + rsi - 1]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002963	          0x83e82d	                           sub eax, 0x2d	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002966	            0x3c01	                               cmp al, 1	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002968	            0x7732	                            ja 0x400299c	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400296a	          0x4889d6	                            mov rsi, rdx	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400296d	      0xba00000000	                              mov edx, 0	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002972	            0xeb03	                           jmp 0x4002977	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002974	          0x4889ce	                            mov rsi, rcx	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002977	        0x4883c201	                              add rdx, 1	       846	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400297b	          0x4839f5	                            cmp rbp, rsi	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400297e	            0x7421	                            je 0x40029a1	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002980	        0x488d4eff	                      lea rcx, [rsi - 1]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002984	       0xfb64437ff	         movzx eax, byte [rdi + rsi - 1]	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002989	          0x83e82d	                           sub eax, 0x2d	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400298c	            0x3c01	                               cmp al, 1	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x400298e	            0x76e4	                           jbe 0x4002974	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002990	            0xeb0f	                           jmp 0x40029a1	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002992	          0x4889ee	                            mov rsi, rbp	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x4002995	      0xba00000000	                              mov edx, 0	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400299a	            0xeb05	                           jmp 0x40029a1	       828	pretty.c	WHILE_3	FUNCTION_30	FOR_1
0x400299c	      0xba00000000	                              mov edx, 0	       843	pretty.c	WHILE_3	FUNCTION_30	WHILE_2
0x40029a1	          0x4889df	                            mov rdi, rbx	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40029a4	      0xe800000000	                          call 0x40029a9	       847	pretty.c	WHILE_3	FUNCTION_30	CALL_4
0x40029a9	      0xb801000000	                              mov eax, 1	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029ae	      0xe925010000	                           jmp 0x4002ad8	      1299	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029b3	          0x4c89f6	                            mov rsi, r14	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x40029b6	    0x4903b424b000	             add rsi, qword [r12 + 0xb0]	      1301	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7	CALL_59
0x40029be	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029c3	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029ca	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029cd	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029cf	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029d2	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029d5	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029d9	          0x4889df	                            mov rdi, rbx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029dc	      0xe800000000	                          call 0x40029e1	       279	strbuf.h	FUNCTION_76	CALL_2
0x40029e1	      0xb801000000	                              mov eax, 1	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029e6	      0xe9ed000000	                           jmp 0x4002ad8	      1302	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029eb	          0x4889ea	                            mov rdx, rbp	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029ee	      0xb800000000	                              mov eax, 0	      1293	pretty.c	WHILE_3	FUNCTION_39	SWITCH_7
0x40029f3	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40029f6	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40029f8	            0x751d	                           jne 0x4002a17	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40029fa	      0x4889542418	             mov qword [rsp + 0x18], rdx	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40029ff	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x4002a04	      0xb905000000	                              mov ecx, 5	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x4002a09	      0xb800000000	                              mov eax, 0	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x4002a0e	            0xf3ab	              rep stosd dword [rdi], eax	      1306	pretty.c	WHILE_3	FUNCTION_39	IF_25
0x4002a10	          0x803a3a	                    cmp byte [rdx], 0x3a	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x4002a13	            0x7566	                           jne 0x4002a7b	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x4002a15	            0xeb17	                           jmp 0x4002a2e	      1307	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x4002a17	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4002a1b	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4002a1f	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4002a22	            0x74cf	                            je 0x40029f3	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4002a24	      0xb800000000	                              mov eax, 0	      1324	pretty.c	WHILE_3	FUNCTION_39
0x4002a29	      0xe9aa000000	                           jmp 0x4002ad8	      1324	pretty.c	WHILE_3	FUNCTION_39
0x4002a2e	        0x4883c201	                              add rdx, 1	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x4002a32	      0x4889542418	             mov qword [rsp + 0x18], rdx	      1308	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26
0x4002a37	      0x488d542418	                   lea rdx, [rsp + 0x18]	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a3c	      0xbe00000000	                              mov esi, 0	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a41	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a46	      0xe874d6ffff	          call sym.match_placeholder_arg	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a4b	            0x85c0	                           test eax, eax	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a4d	            0x740a	                            je 0x4002a59	      1310	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27	CALL_61
0x4002a4f	    0xc74424280100	               mov dword [rsp + 0x28], 1	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x4002a57	            0xebde	                           jmp 0x4002a37	      1311	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	IF_27
0x4002a59	      0x488d542418	                   lea rdx, [rsp + 0x18]	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a5e	      0xbe00000000	                              mov esi, 0	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a63	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a68	      0xe852d6ffff	          call sym.match_placeholder_arg	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a6d	            0x85c0	                           test eax, eax	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a6f	            0x740a	                            je 0x4002a7b	      1312	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28	CALL_62
0x4002a71	    0xc74424300100	               mov dword [rsp + 0x30], 1	      1313	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28
0x4002a79	            0xebbc	                           jmp 0x4002a37	      1313	pretty.c	WHILE_3	FUNCTION_39	IF_25	IF_26	FOR_3	ELSE_3	IF_28
0x4002a7b	      0xb800000000	                              mov eax, 0	      1324	pretty.c	WHILE_3	FUNCTION_39
0x4002a80	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002a85	          0x803a29	                    cmp byte [rdx], 0x29	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002a88	            0x754e	                           jne 0x4002ad8	      1318	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002a8a	          0x4c89f6	                            mov rsi, r14	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4002a8d	    0x4903b424a800	             add rsi, qword [r12 + 0xa8]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4002a95	      0x488d542420	                   lea rdx, [rsp + 0x20]	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4002a9a	          0x4889df	                            mov rdi, rbx	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4002a9d	      0xe800000000	                          call 0x4002aa2	      1319	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29	CALL_63
0x4002aa2	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002aa7	          0x4829e8	                            sub rax, rbp	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002aaa	        0x4883c001	                              add rax, 1	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002aae	            0xeb28	                           jmp 0x4002ad8	      1320	pretty.c	WHILE_3	FUNCTION_39	IF_25	ELSE_4	IF_29
0x4002ab0	      0xb800000000	                              mov eax, 0	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002ab5	            0xeb21	                           jmp 0x4002ad8	      1221	pretty.c	WHILE_3	FUNCTION_39	SWITCH_2
0x4002ab7	      0xb800000000	                              mov eax, 0	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002abc	            0xeb1a	                           jmp 0x4002ad8	      1260	pretty.c	WHILE_3	FUNCTION_39	IF_17	SWITCH_4
0x4002abe	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002ac3	            0xeb13	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002ac5	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002aca	            0xeb0c	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002acc	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002ad1	            0xeb05	                           jmp 0x4002ad8	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002ad3	      0xb802000000	                              mov eax, 2	      1262	pretty.c	WHILE_3	FUNCTION_39	IF_17
0x4002ad8	    0x488bbc249800	            mov rdi, qword [rsp + 0x98] 	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002ae0	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002ae9	     0xf84d3000000	                            je 0x4002bc2	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002aef	      0xe9c9000000	                           jmp 0x4002bbd	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002af4	      0x498b442408	                mov rax, qword [r12 + 8]	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002af9	          0x8b7068	            mov esi, dword [rax + 0x68] 	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002afc	      0xbf01000000	                              mov edi, 1	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002b01	      0xe800000000	                          call 0x4002b06	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002b06	            0x85c0	                           test eax, eax	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002b08	     0xf840af0ffff	                            je 0x4001b18	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002b0e	      0xe93af0ffff	                           jmp 0x4001b4d	       951	pretty.c	WHILE_3	FUNCTION_36	IF_1	IF_3	IF_4	CALL_3
0x4002b13	      0x498b442408	                mov rax, qword [r12 + 8]	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b18	          0x8b7068	            mov esi, dword [rax + 0x68] 	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b1b	      0xbf01000000	                              mov edi, 1	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b20	      0xe800000000	                          call 0x4002b25	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b25	          0x4d89fd	                            mov r13, r15	       943	pretty.c	WHILE_3	FUNCTION_36	IF_1
0x4002b28	            0x85c0	                           test eax, eax	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b2a	     0xf851df0ffff	                           jne 0x4001b4d	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b30	      0xe909f0ffff	                           jmp 0x4001b3e	       957	pretty.c	WHILE_3	FUNCTION_36	IF_1	ELSE_2	IF_6	CALL_5
0x4002b35	          0x4889c2	                            mov rdx, rax	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b38	          0x4c29c2	                             sub rdx, r8	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b3b	    0x498994248000	             mov qword [r12 + 0x80], rdx	       804	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b43	          0x4929c2	                            sub r10, rax	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b46	    0x4d8994248800	             mov qword [r12 + 0x88], r10	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b4e	      0xe975fbffff	                           jmp 0x40026c8	       805	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_1	IF_2
0x4002b53	          0x4c89c8	                             mov rax, r9	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b56	          0x4c29c0	                             sub rax, r8	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b59	    0x498984249000	             mov qword [r12 + 0x90], rax	       807	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b61	          0x4c89d0	                            mov rax, r10	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b64	          0x4c29c8	                             sub rax, r9	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b67	    0x498984249800	             mov qword [r12 + 0x98], rax	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b6f	      0xe954fbffff	                           jmp 0x40026c8	       808	pretty.c	WHILE_3	FUNCTION_28	FOR_1	ELSE_2	IF_3
0x4002b74	    0x41be00000000	                             mov r14d, 0	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x4002b7a	            0xeb19	                           jmp 0x4002b95	       973	pretty.c	WHILE_3	FUNCTION_36	IF_8
0x4002b7c	    0x41be00000000	                             mov r14d, 0	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x4002b82	            0xeb11	                           jmp 0x4002b95	       975	pretty.c	WHILE_3	FUNCTION_36	ELSE_3	IF_9
0x4002b84	    0x41be00000000	                             mov r14d, 0	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x4002b8a	            0xeb09	                           jmp 0x4002b95	       977	pretty.c	WHILE_3	FUNCTION_36	ELSE_4	IF_10
0x4002b8c	          0x4d89f5	                            mov r13, r14	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4002b8f	    0x41be00000000	                             mov r14d, 0	       979	pretty.c	WHILE_3	FUNCTION_36	ELSE_5	IF_11
0x4002b95	      0x498b442408	                mov rax, qword [r12 + 8]	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002b9a	          0x8b7068	            mov esi, dword [rax + 0x68] 	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002b9d	      0xbf01000000	                              mov edi, 1	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002ba2	      0xe800000000	                          call 0x4002ba7	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002ba7	            0x85c0	                           test eax, eax	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002ba9	     0xf84b9f0ffff	                            je 0x4001c68	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002baf	      0xe98ef0ffff	                           jmp 0x4001c42	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002bb4	        0x4883c001	                              add rax, 1	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002bb8	      0xe96bf3ffff	                           jmp 0x4001f28	       981	pretty.c	WHILE_3	FUNCTION_36	IF_12	CALL_14
0x4002bbd	      0xe800000000	                          call 0x4002bc2	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bc2	    0x4881c4a80000	                           add rsp, 0xa8	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bc9	              0x5b	                                 pop rbx	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bca	              0x5d	                                 pop rbp	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bcb	            0x415c	                                 pop r12	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bcd	            0x415d	                                 pop r13	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bcf	            0x415e	                                 pop r14	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bd1	            0x415f	                                 pop r15	      1325	pretty.c	WHILE_3	FUNCTION_39
0x4002bd3	              0xc3	                                     ret	      1325	pretty.c	WHILE_3	FUNCTION_39
pp_remainder	DO,0:functions,0:IF,7:ELSE,2:SWITCH,0:FOR,1:CALL,9:WHILE,0	138
0x4003560	            0x4157	                                push r15	      1753	pretty.c	FUNCTION_51
0x4003562	            0x4156	                                push r14	      1753	pretty.c	FUNCTION_51
0x4003564	            0x4155	                                push r13	      1753	pretty.c	FUNCTION_51
0x4003566	            0x4154	                                push r12	      1753	pretty.c	FUNCTION_51
0x4003568	              0x55	                                push rbp	      1753	pretty.c	FUNCTION_51
0x4003569	              0x53	                                push rbx	      1753	pretty.c	FUNCTION_51
0x400356a	        0x4883ec28	                           sub rsp, 0x28	      1753	pretty.c	FUNCTION_51
0x400356e	          0x4989ff	                            mov r15, rdi	      1753	pretty.c	FUNCTION_51
0x4003571	          0x4989f4	                            mov r12, rsi	      1753	pretty.c	FUNCTION_51
0x4003574	          0x4889d3	                            mov rbx, rdx	      1753	pretty.c	FUNCTION_51
0x4003577	          0x4189ce	                           mov r14d, ecx	      1753	pretty.c	FUNCTION_51
0x400357a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1753	pretty.c	FUNCTION_51
0x4003583	      0x4889442418	             mov qword [rsp + 0x18], rax	      1753	pretty.c	FUNCTION_51
0x4003588	            0x31c0	                            xor eax, eax	      1753	pretty.c	FUNCTION_51
0x400358a	    0x41bd01000000	                             mov r13d, 1	      1754	pretty.c	FUNCTION_51
0x4003590	          0x4863c1	                         movsxd rax, ecx	      1732	pretty.c	FUNCTION_49	CALL_1
0x4003593	      0x4889442408	                mov qword [rsp + 8], rax	      1732	pretty.c	FUNCTION_49	CALL_1
0x4003598	        0x498b2c24	                    mov rbp, qword [r12]	      1756	pretty.c	FUNCTION_51	FOR_1
0x400359c	          0x4889ef	                            mov rdi, rbp	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x400359f	      0xe89ccaffff	                   call sym.get_one_line	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40035a4	        0x89442414	             mov dword [rsp + 0x14], eax	      1757	pretty.c	FUNCTION_51	FOR_1	CALL_1
0x40035a8	          0x4863d0	                         movsxd rdx, eax	      1758	pretty.c	FUNCTION_51	FOR_1
0x40035ab	          0x4801ea	                            add rdx, rbp	      1758	pretty.c	FUNCTION_51	FOR_1
0x40035ae	        0x49891424	                    mov qword [r12], rdx	      1758	pretty.c	FUNCTION_51	FOR_1
0x40035b2	            0x85c0	                           test eax, eax	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x40035b4	     0xf846b010000	                            je 0x4003725	      1760	pretty.c	FUNCTION_51	FOR_1	IF_1
0x40035ba	      0x488d742414	                   lea rsi, [rsp + 0x14]	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40035bf	          0x4889ef	                            mov rdi, rbp	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40035c2	      0xe8c0caffff	                  call sym.is_blank_line	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40035c7	            0x85c0	                           test eax, eax	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40035c9	            0x740f	                            je 0x40035da	      1763	pretty.c	FUNCTION_51	FOR_1	IF_2	CALL_2
0x40035cb	          0x4585ed	                         test r13d, r13d	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40035ce	            0x75c8	                           jne 0x4003598	      1764	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40035d0	        0x41833f02	                      cmp dword [r15], 2	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x40035d4	     0xf844b010000	                            je 0x4003725	      1766	pretty.c	FUNCTION_51	FOR_1	IF_2	IF_4
0x40035da	          0x4489f6	                           mov esi, r14d	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035dd	         0x3742414	             add esi, dword [rsp + 0x14]	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035e1	          0x83c614	                           add esi, 0x14	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035e4	          0x4863f6	                         movsxd rsi, esi	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035e7	          0x4889df	                            mov rdi, rbx	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035ea	      0xe800000000	                          call 0x40035ef	      1771	pretty.c	FUNCTION_51	FOR_1	CALL_3
0x40035ef	          0x4585f6	                         test r14d, r14d	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x40035f2	            0x7445	                            je 0x4003639	      1772	pretty.c	FUNCTION_51	FOR_1	IF_5
0x40035f4	      0x448b6c2414	           mov r13d, dword [rsp + 0x14] 	      1773	pretty.c	FUNCTION_51	FOR_1	CALL_4
0x40035f9	      0x488b542408	                mov rdx, qword [rsp + 8]	      1732	pretty.c	FUNCTION_49	CALL_1
0x40035fe	      0xbe20000000	                           mov esi, 0x20	      1732	pretty.c	FUNCTION_49	CALL_1
0x4003603	          0x4889df	                            mov rdi, rbx	      1732	pretty.c	FUNCTION_49	CALL_1
0x4003606	      0xe800000000	                          call 0x400360b	      1732	pretty.c	FUNCTION_49	CALL_1
0x400360b	        0x418b7738	            mov esi, dword [r15 + 0x38] 	      1733	pretty.c	FUNCTION_49	IF_1
0x400360f	            0x85f6	                           test esi, esi	      1733	pretty.c	FUNCTION_49	IF_1
0x4003611	            0x7413	                            je 0x4003626	      1733	pretty.c	FUNCTION_49	IF_1
0x4003613	          0x4489e9	                           mov ecx, r13d	      1734	pretty.c	FUNCTION_49	CALL_2
0x4003616	          0x4889ea	                            mov rdx, rbp	      1734	pretty.c	FUNCTION_49	CALL_2
0x4003619	          0x4889df	                            mov rdi, rbx	      1734	pretty.c	FUNCTION_49	CALL_2
0x400361c	      0xe8d9d0ffff	           call sym.strbuf_add_tabexpand	      1734	pretty.c	FUNCTION_49	CALL_2
0x4003621	      0xe9b5000000	                           jmp 0x40036db	      1734	pretty.c	FUNCTION_49	CALL_2
0x4003626	          0x4963d5	                        movsxd rdx, r13d	      1736	pretty.c	FUNCTION_49	CALL_3
0x4003629	          0x4889ee	                            mov rsi, rbp	      1736	pretty.c	FUNCTION_49	CALL_3
0x400362c	          0x4889df	                            mov rdi, rbx	      1736	pretty.c	FUNCTION_49	CALL_3
0x400362f	      0xe800000000	                          call 0x4003634	      1736	pretty.c	FUNCTION_49	CALL_3
0x4003634	      0xe9a2000000	                           jmp 0x40036db	      1736	pretty.c	FUNCTION_49	CALL_3
0x4003639	        0x418b7738	            mov esi, dword [r15 + 0x38] 	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x400363d	            0x85f6	                           test esi, esi	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x400363f	            0x7414	                            je 0x4003655	      1774	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6
0x4003641	        0x8b4c2414	            mov ecx, dword [rsp + 0x14] 	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4003645	          0x4889ea	                            mov rdx, rbp	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4003648	          0x4889df	                            mov rdi, rbx	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x400364b	      0xe8aad0ffff	           call sym.strbuf_add_tabexpand	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4003650	      0xe986000000	                           jmp 0x40036db	      1775	pretty.c	FUNCTION_51	FOR_1	ELSE_1	IF_6	CALL_5
0x4003655	        0x41833f07	                      cmp dword [r15], 7	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x4003659	            0x7570	                           jne 0x40036cb	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x400365b	      0x837c241404	               cmp dword [rsp + 0x14], 4	      1746	pretty.c	FUNCTION_50	CALL_2
0x4003660	            0x7e69	                           jle 0x40036cb	      1746	pretty.c	FUNCTION_50	CALL_2
0x4003662	        0x807d003e	                    cmp byte [rbp], 0x3e	      1027	string2.h	FUNCTION_63	WHILE_1
0x4003666	            0x7513	                           jne 0x400367b	      1027	string2.h	FUNCTION_63	WHILE_1
0x4003668	        0x488d4501	                      lea rax, [rbp + 1]	      1027	string2.h	FUNCTION_63	WHILE_1
0x400366c	          0x4889c7	                            mov rdi, rax	      1027	string2.h	FUNCTION_63	WHILE_1
0x400366f	        0x4883c001	                              add rax, 1	      1027	string2.h	FUNCTION_63	WHILE_1
0x4003673	        0x8078ff3e	                cmp byte [rax - 1], 0x3e	      1027	string2.h	FUNCTION_63	WHILE_1
0x4003677	            0x74f3	                            je 0x400366c	      1027	string2.h	FUNCTION_63	WHILE_1
0x4003679	            0xeb03	                           jmp 0x400367e	      1027	string2.h	FUNCTION_63	WHILE_1
0x400367b	          0x4889ef	                            mov rdi, rbp	      1027	string2.h	FUNCTION_63	WHILE_1
0x400367e	      0xbe00000000	                              mov esi, 0	      1746	pretty.c	FUNCTION_50	CALL_2
0x4003683	      0xe800000000	                          call 0x4003688	      1746	pretty.c	FUNCTION_50	CALL_2
0x4003688	            0x85c0	                           test eax, eax	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x400368a	            0x743f	                            je 0x40036cb	      1778	pretty.c	FUNCTION_51	FOR_1	ELSE_2	IF_7
0x400368c	          0x488b03	                    mov rax, qword [rbx]	       141	strbuf.h	FUNCTION_73
0x400368f	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4003692	            0x740a	                            je 0x400369e	       141	strbuf.h	FUNCTION_73
0x4003694	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003698	        0x48394308	                cmp qword [rbx + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400369c	            0x750d	                           jne 0x40036ab	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400369e	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036a3	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036a6	      0xe800000000	                          call 0x40036ab	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036ab	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x40036af	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x40036b3	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x40036b7	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x40036bb	        0xc604023e	              mov byte [rdx + rax], 0x3e	       229	strbuf.h	FUNCTION_75
0x40036bf	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x40036c3	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x40036c7	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x40036cb	      0x4863542414	         movsxd rdx, dword [rsp + 0x14] 	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x40036d0	          0x4889ee	                            mov rsi, rbp	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x40036d3	          0x4889df	                            mov rdi, rbx	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x40036d6	      0xe800000000	                          call 0x40036db	      1782	pretty.c	FUNCTION_51	FOR_1	ELSE_2	CALL_8
0x40036db	          0x488b03	                    mov rax, qword [rbx]	       141	strbuf.h	FUNCTION_73
0x40036de	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40036e1	            0x740a	                            je 0x40036ed	       141	strbuf.h	FUNCTION_73
0x40036e3	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40036e7	        0x48394308	                cmp qword [rbx + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40036eb	            0x750d	                           jne 0x40036fa	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40036ed	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036f2	          0x4889df	                            mov rdi, rbx	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036f5	      0xe800000000	                          call 0x40036fa	       228	strbuf.h	FUNCTION_75	CALL_2
0x40036fa	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_75
0x40036fe	        0x488b4308	                mov rax, qword [rbx + 8]	       229	strbuf.h	FUNCTION_75
0x4003702	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003706	        0x48894b08	                mov qword [rbx + 8], rcx	       229	strbuf.h	FUNCTION_75
0x400370a	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x400370e	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003712	        0x488b4308	                mov rax, qword [rbx + 8]	       230	strbuf.h	FUNCTION_75
0x4003716	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x400371a	    0x41bd00000000	                             mov r13d, 0	      1769	pretty.c	FUNCTION_51	FOR_1
0x4003720	      0xe973feffff	                           jmp 0x4003598	      1769	pretty.c	FUNCTION_51	FOR_1
0x4003725	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1786	pretty.c	FUNCTION_51
0x400372a	    0x644833042528	                xor rax, qword fs:[0x28]	      1786	pretty.c	FUNCTION_51
0x4003733	            0x7405	                            je 0x400373a	      1786	pretty.c	FUNCTION_51
0x4003735	      0xe800000000	                          call 0x400373a	      1786	pretty.c	FUNCTION_51
0x400373a	        0x4883c428	                           add rsp, 0x28	      1786	pretty.c	FUNCTION_51
0x400373e	              0x5b	                                 pop rbx	      1786	pretty.c	FUNCTION_51
0x400373f	              0x5d	                                 pop rbp	      1786	pretty.c	FUNCTION_51
0x4003740	            0x415c	                                 pop r12	      1786	pretty.c	FUNCTION_51
0x4003742	            0x415d	                                 pop r13	      1786	pretty.c	FUNCTION_51
0x4003744	            0x415e	                                 pop r14	      1786	pretty.c	FUNCTION_51
0x4003746	            0x415f	                                 pop r15	      1786	pretty.c	FUNCTION_51
0x4003748	              0xc3	                                     ret	      1786	pretty.c	FUNCTION_51
pretty_print_commit	DO,0:functions,0:IF,11:ELSE,1:SWITCH,0:FOR,1:CALL,17:WHILE,0	339
0x4003749	            0x4157	                                push r15	      1791	pretty.c	FUNCTION_52
0x400374b	            0x4156	                                push r14	      1791	pretty.c	FUNCTION_52
0x400374d	            0x4155	                                push r13	      1791	pretty.c	FUNCTION_52
0x400374f	            0x4154	                                push r12	      1791	pretty.c	FUNCTION_52
0x4003751	              0x55	                                push rbp	      1791	pretty.c	FUNCTION_52
0x4003752	              0x53	                                push rbx	      1791	pretty.c	FUNCTION_52
0x4003753	        0x4883ec38	                           sub rsp, 0x38	      1791	pretty.c	FUNCTION_52
0x4003757	          0x4989fd	                            mov r13, rdi	      1791	pretty.c	FUNCTION_52
0x400375a	        0x48893424	                    mov qword [rsp], rsi	      1791	pretty.c	FUNCTION_52
0x400375e	          0x4989d4	                            mov r12, rdx	      1791	pretty.c	FUNCTION_52
0x4003761	    0x64488b042528	                mov rax, qword fs:[0x28]	      1791	pretty.c	FUNCTION_52
0x400376a	      0x4889442428	             mov qword [rsp + 0x28], rax	      1791	pretty.c	FUNCTION_52
0x400376f	            0x31c0	                            xor eax, eax	      1791	pretty.c	FUNCTION_52
0x4003771	          0x833f08	                      cmp dword [rdi], 8	      1799	pretty.c	FUNCTION_52	IF_1
0x4003774	            0x7518	                           jne 0x400378e	      1799	pretty.c	FUNCTION_52	IF_1
0x4003776	          0x4889f9	                            mov rcx, rdi	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4003779	    0x488b35000000	            mov rsi, qword [0x04003780] 	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4003780	        0x488b3c24	                    mov rdi, qword [rsp]	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4003784	      0xe800000000	                          call 0x4003789	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x4003789	      0xe9d4040000	                           jmp 0x4003c62	      1800	pretty.c	FUNCTION_52	IF_1	CALL_1
0x400378e	          0x8b473c	            mov eax, dword [rdi + 0x3c] 	      1797	pretty.c	FUNCTION_52
0x4003791	        0x8944241c	             mov dword [rsp + 0x1c], eax	      1797	pretty.c	FUNCTION_52
0x4003795	      0xe800000000	                          call 0x400379a	      1804	pretty.c	FUNCTION_52	CALL_2
0x400379a	      0x4889442408	                mov qword [rsp + 8], rax	      1804	pretty.c	FUNCTION_52	CALL_2
0x400379f	          0x4889c2	                            mov rdx, rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037a2	      0xbe00000000	                              mov esi, 0	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037a7	        0x488b3c24	                    mov rdi, qword [rsp]	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037ab	      0xe800000000	                          call 0x40037b0	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037b0	      0x4889442410	             mov qword [rsp + 0x10], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037b5	      0x4889442420	             mov qword [rsp + 0x20], rax	      1805	pretty.c	FUNCTION_52	CALL_3
0x40037ba	        0x418b4500	                    mov eax, dword [r13]	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037be	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x40037c6	          0x83f805	                              cmp eax, 5	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037c9	     0xf849c000000	                            je 0x400386b	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037cf	          0x83e806	                              sub eax, 6	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037d2	    0xc74424180400	               mov dword [rsp + 0x18], 4	      1793	pretty.c	FUNCTION_52
0x40037da	          0x83f801	                              cmp eax, 1	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037dd	     0xf8788000000	                            ja 0x400386b	      1807	pretty.c	FUNCTION_52	IF_2	CALL_4
0x40037e3	      0x837c241c00	               cmp dword [rsp + 0x1c], 0	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x40037e8	            0x755d	                           jne 0x4003847	      1814	pretty.c	FUNCTION_52	IF_3	CALL_5
0x40037ea	      0x4c8b442410	              mov r8, qword [rsp + 0x10]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037ef	        0x410fb608	                    movzx ecx, byte [r8]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037f3	           0xfbec1	                           movsx eax, cl	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037f6	            0x85c0	                           test eax, eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037f8	            0x7457	                            je 0x4003851	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037fa	      0xbe00000000	                              mov esi, 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x40037ff	      0xbf00000000	                              mov edi, 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4003804	      0xba00000000	                              mov edx, 0	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4003809	            0x85ff	                           test edi, edi	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x400380b	            0x7515	                           jne 0x4003822	      1818	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4
0x400380d	          0x83f80a	                            cmp eax, 0xa	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4003810	            0x7519	                           jne 0x400382b	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4003812	    0x41807c30010a	           cmp byte [r8 + rsi + 1], 0xa 	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4003818	        0x400f94c7	                                sete dil	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x400381c	        0x400fb6ff	                          movzx edi, dil	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4003820	            0xeb09	                           jmp 0x400382b	      1823	pretty.c	FUNCTION_52	IF_3	FOR_1	IF_4	IF_5
0x4003822	            0x84c9	                             test cl, cl	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4003824	            0x7835	                            js 0x400385b	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4003826	          0x83f81b	                           cmp eax, 0x1b	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x4003829	            0x7430	                            je 0x400385b	      1826	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6	CALL_6
0x400382b	          0x83c201	                              add edx, 1	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x400382e	          0x4863f2	                         movsxd rsi, edx	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4003831	      0x410fb60c30	              movzx ecx, byte [r8 + rsi]	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4003836	           0xfbec1	                           movsx eax, cl	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x4003839	            0x85c0	                           test eax, eax	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x400383b	            0x75cc	                           jne 0x4003809	      1817	pretty.c	FUNCTION_52	IF_3	FOR_1
0x400383d	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x4003845	            0xeb24	                           jmp 0x400386b	      1808	pretty.c	FUNCTION_52	IF_2
0x4003847	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x400384f	            0xeb1a	                           jmp 0x400386b	      1808	pretty.c	FUNCTION_52	IF_2
0x4003851	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x4003859	            0xeb10	                           jmp 0x400386b	      1808	pretty.c	FUNCTION_52	IF_2
0x400385b	    0xc74424180000	               mov dword [rsp + 0x18], 0	      1808	pretty.c	FUNCTION_52	IF_2
0x4003863	    0xc744241c0100	               mov dword [rsp + 0x1c], 1	      1827	pretty.c	FUNCTION_52	IF_3	FOR_1	ELSE_1	IF_6
0x400386b	    0x41bf00000000	                             mov r15d, 0	      1558	pretty.c	FUNCTION_45
0x4003871	      0x488b5c2420	            mov rbx, qword [rsp + 0x20] 	      1561	pretty.c	FUNCTION_45	FOR_1
0x4003876	          0x4889df	                            mov rdi, rbx	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x4003879	      0xe8c2c7ffff	                   call sym.get_one_line	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x400387e	          0x4189c6	                           mov r14d, eax	      1562	pretty.c	FUNCTION_45	FOR_1	CALL_1
0x4003881	            0x85c0	                           test eax, eax	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4003883	     0xf841e020000	                            je 0x4003aa7	      1564	pretty.c	FUNCTION_45	FOR_1	IF_1
0x4003889	          0x4863d0	                         movsxd rdx, eax	      1566	pretty.c	FUNCTION_45	FOR_1
0x400388c	        0x488d0413	                    lea rax, [rbx + rdx]	      1566	pretty.c	FUNCTION_45	FOR_1
0x4003890	      0x4889442420	             mov qword [rsp + 0x20], rax	      1566	pretty.c	FUNCTION_45	FOR_1
0x4003895	        0x4183fe01	                             cmp r14d, 1	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x4003899	     0xf8408020000	                            je 0x4003aa7	      1568	pretty.c	FUNCTION_45	FOR_1	IF_2
0x400389f	      0x41837d0000	                      cmp dword [r13], 0	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40038a4	            0x750d	                           jne 0x40038b3	      1572	pretty.c	FUNCTION_45	FOR_1	IF_3
0x40038a6	          0x4889de	                            mov rsi, rbx	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40038a9	          0x4c89e7	                            mov rdi, r12	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40038ac	      0xe800000000	                          call 0x40038b1	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40038b1	            0xebbe	                           jmp 0x4003871	      1573	pretty.c	FUNCTION_45	FOR_1	IF_3	CALL_2
0x40038b3	      0xbe00000000	                              mov esi, 0	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x40038b8	          0x4889df	                            mov rdi, rbx	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x40038bb	      0xe800000000	                          call 0x40038c0	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x40038c0	            0x85c0	                           test eax, eax	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x40038c2	            0x7415	                            je 0x40038d9	      1577	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_3
0x40038c4	        0x4183fe30	                          cmp r14d, 0x30	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x40038c8	            0x74a7	                            je 0x4003871	      1578	pretty.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x40038ca	      0xbf00000000	                              mov edi, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x40038cf	      0xb800000000	                              mov eax, 0	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x40038d4	      0xe800000000	                          call 0x40038d9	      1579	pretty.c	FUNCTION_45	FOR_1	IF_4	CALL_4
0x40038d9	          0x4585ff	                         test r15d, r15d	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x40038dc	     0xf8557010000	                           jne 0x4003a39	      1583	pretty.c	FUNCTION_45	FOR_1	IF_6
0x40038e2	        0x4c8b3c24	                    mov r15, qword [rsp]	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x40038e6	        0x498b7f30	            mov rdi, qword [r15 + 0x30] 	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x40038ea	      0xe800000000	                          call 0x40038ef	      1584	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_5
0x40038ef	          0x6bf032	                     imul esi, eax, 0x32	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x40038f2	          0x83c614	                           add esi, 0x14	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x40038f5	            0x89f6	                            mov esi, esi	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x40038f7	          0x4c89e7	                            mov rdi, r12	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x40038fa	      0xe800000000	                          call 0x40038ff	      1586	pretty.c	FUNCTION_45	FOR_1	IF_6	CALL_6
0x40038ff	        0x418b4500	                    mov eax, dword [r13]	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x4003903	          0x83e805	                              sub eax, 5	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x4003906	          0x83f802	                              cmp eax, 2	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x4003909	     0xf861c010000	                           jbe 0x4003a2b	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x400390f	        0x498b6f30	            mov rbp, qword [r15 + 0x30] 	       540	pretty.c	WHILE_3	FUNCTION_22
0x4003913	          0x4885ed	                           test rbp, rbp	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x4003916	     0xf8417010000	                            je 0x4003a33	       542	pretty.c	WHILE_3	FUNCTION_22	IF_1	CALL_1
0x400391c	    0x41bf01000000	                             mov r15d, 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003922	      0x48837d0800	                  cmp qword [rbp + 8], 0	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x4003927	     0xf840c010000	                            je 0x4003a39	       543	pretty.c	WHILE_3	FUNCTION_22	IF_1
0x400392d	      0xba06000000	                              mov edx, 6	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003932	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003937	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_76	CALL_2
0x400393a	      0xe800000000	                          call 0x400393f	       279	strbuf.h	FUNCTION_76	CALL_2
0x400393f	        0x488b4500	                    mov rax, qword [rbp]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4003943	        0x4c8d7804	                      lea r15, [rax + 4]	       549	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x4003947	        0x498b0424	                    mov rax, qword [r12]	       141	strbuf.h	FUNCTION_73
0x400394b	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x400394e	            0x740b	                            je 0x400395b	       141	strbuf.h	FUNCTION_73
0x4003950	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003954	      0x4939442408	                cmp qword [r12 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003959	            0x750d	                           jne 0x4003968	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400395b	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003960	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003963	      0xe800000000	                          call 0x4003968	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003968	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x400396d	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_75
0x4003972	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003976	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x400397b	        0xc6040220	              mov byte [rdx + rax], 0x20	       229	strbuf.h	FUNCTION_75
0x400397f	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003984	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_75
0x4003989	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x400398d	        0x418b5504	                mov edx, dword [r13 + 4]	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x4003991	            0x85d2	                           test edx, edx	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x4003993	            0x740d	                            je 0x40039a2	       551	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	IF_2
0x4003995	          0x4c89fe	                            mov rsi, r15	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x4003998	          0x4c89e7	                            mov rdi, r12	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x400399b	      0xe800000000	                          call 0x40039a0	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x40039a0	            0xeb2e	                           jmp 0x40039d0	       552	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_4
0x40039a2	          0x4c89ff	                            mov rdi, r15	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x40039a5	      0xe800000000	                          call 0x40039aa	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x40039aa	          0x4889c6	                            mov rsi, rax	       554	pretty.c	WHILE_3	FUNCTION_22	WHILE_1	CALL_6
0x40039ad	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039b2	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039b9	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039bc	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039be	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039c1	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039c4	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039c8	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039cb	      0xe800000000	                          call 0x40039d0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40039d0	        0x488b6d08	                mov rbp, qword [rbp + 8]	       555	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x40039d4	          0x4885ed	                           test rbp, rbp	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x40039d7	     0xf8562ffffff	                           jne 0x400393f	       548	pretty.c	WHILE_3	FUNCTION_22	WHILE_1
0x40039dd	        0x498b0424	                    mov rax, qword [r12]	       141	strbuf.h	FUNCTION_73
0x40039e1	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40039e4	            0x740b	                            je 0x40039f1	       141	strbuf.h	FUNCTION_73
0x40039e6	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40039ea	      0x4939442408	                cmp qword [r12 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40039ef	            0x750d	                           jne 0x40039fe	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40039f1	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40039f6	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_75	CALL_2
0x40039f9	      0xe800000000	                          call 0x40039fe	       228	strbuf.h	FUNCTION_75	CALL_2
0x40039fe	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003a03	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_75
0x4003a08	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003a0c	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003a11	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003a15	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003a1a	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_75
0x4003a1f	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003a23	    0x41bf01000000	                             mov r15d, 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a29	            0xeb0e	                           jmp 0x4003a39	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a2b	    0x41bf01000000	                             mov r15d, 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a31	            0xeb06	                           jmp 0x4003a39	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a33	    0x41bf01000000	                             mov r15d, 1	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a39	          0x4889dd	                            mov rbp, rbx	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a3c	      0xb800000000	                              mov eax, 0	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a41	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a44	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a46	     0xf84cb010000	                            je 0x4003c17	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a4c	        0x4883c501	                              add rbp, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a50	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a54	          0x3a55ff	                  cmp dl, byte [rbp - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a57	            0x74e8	                            je 0x4003a41	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a59	      0xb800000000	                              mov eax, 0	      1588	pretty.c	FUNCTION_45	FOR_1	IF_6
0x4003a5e	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a61	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a63	     0xf84da010000	                            je 0x4003c43	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4003a69	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a6d	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a71	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a74	            0x74e8	                            je 0x4003a5e	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a76	      0xe9f6fdffff	                           jmp 0x4003871	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4003a7b	        0x418d7650	                   lea esi, [r14 + 0x50]	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4003a7f	          0x4863f6	                         movsxd rsi, esi	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4003a82	          0x4c89e7	                            mov rdi, r12	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4003a85	      0xe800000000	                          call 0x4003a8a	      1602	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_12
0x4003a8a	      0x4c8b442408	                 mov r8, qword [rsp + 8]	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003a8f	          0x4889d9	                            mov rcx, rbx	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003a92	          0x4c89e2	                            mov rdx, r12	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003a95	      0xbe00000000	                              mov esi, 0	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003a9a	          0x4c89ef	                            mov rdi, r13	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003a9d	      0xe800000000	                          call 0x4003aa2	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003aa2	      0xe9cafdffff	                           jmp 0x4003871	      1603	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_13
0x4003aa7	      0x41837d0005	                      cmp dword [r13], 5	      1834	pretty.c	FUNCTION_52	IF_7
0x4003aac	            0x744d	                            je 0x4003afb	      1834	pretty.c	FUNCTION_52	IF_7
0x4003aae	      0x41837d3400	               cmp dword [r13 + 0x34], 0	      1834	pretty.c	FUNCTION_52	IF_7
0x4003ab3	            0x7546	                           jne 0x4003afb	      1834	pretty.c	FUNCTION_52	IF_7
0x4003ab5	        0x498b0424	                    mov rax, qword [r12]	       141	strbuf.h	FUNCTION_73
0x4003ab9	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4003abc	            0x740b	                            je 0x4003ac9	       141	strbuf.h	FUNCTION_73
0x4003abe	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003ac2	      0x4939442408	                cmp qword [r12 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003ac7	            0x750d	                           jne 0x4003ad6	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003ac9	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003ace	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003ad1	      0xe800000000	                          call 0x4003ad6	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003ad6	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003adb	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_75
0x4003ae0	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003ae4	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003ae9	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003aed	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003af2	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_75
0x4003af7	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003afb	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1839	pretty.c	FUNCTION_52	CALL_9
0x4003b00	      0xe800000000	                          call 0x4003b05	      1839	pretty.c	FUNCTION_52	CALL_9
0x4003b05	      0x4889442420	             mov qword [rsp + 0x20], rax	      1839	pretty.c	FUNCTION_52	CALL_9
0x4003b0a	        0x418b4500	                    mov eax, dword [r13]	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4003b0e	          0x83e805	                              sub eax, 5	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4003b11	          0x83f802	                              cmp eax, 2	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4003b14	     0xf873e010000	                            ja 0x4003c58	      1842	pretty.c	FUNCTION_52	IF_8	CALL_10
0x4003b1a	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b1f	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b24	          0x4c89e2	                            mov rdx, r12	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b27	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b2c	          0x4c89ef	                            mov rdi, r13	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b2f	      0xe800000000	                          call 0x4003b34	      1843	pretty.c	FUNCTION_52	CALL_11
0x4003b34	      0x498b5c2408	                mov rbx, qword [r12 + 8]	      1845	pretty.c	FUNCTION_52
0x4003b39	      0x41837d0005	                      cmp dword [r13], 5	      1846	pretty.c	FUNCTION_52	IF_9
0x4003b3e	            0x7414	                            je 0x4003b54	      1846	pretty.c	FUNCTION_52	IF_9
0x4003b40	        0x8b4c2418	            mov ecx, dword [rsp + 0x18] 	      1847	pretty.c	FUNCTION_52	CALL_12
0x4003b44	          0x4c89e2	                            mov rdx, r12	      1847	pretty.c	FUNCTION_52	CALL_12
0x4003b47	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1847	pretty.c	FUNCTION_52	CALL_12
0x4003b4c	          0x4c89ef	                            mov rdi, r13	      1847	pretty.c	FUNCTION_52	CALL_12
0x4003b4f	      0xe800000000	                          call 0x4003b54	      1847	pretty.c	FUNCTION_52	CALL_12
0x4003b54	          0x4c89e7	                            mov rdi, r12	      1848	pretty.c	FUNCTION_52	CALL_13
0x4003b57	      0xe800000000	                          call 0x4003b5c	      1848	pretty.c	FUNCTION_52	CALL_13
0x4003b5c	      0x41837d0005	                      cmp dword [r13], 5	      1851	pretty.c	FUNCTION_52	IF_10
0x4003b61	     0xf84a0000000	                            je 0x4003c07	      1851	pretty.c	FUNCTION_52	IF_10
0x4003b67	        0x498b0424	                    mov rax, qword [r12]	       141	strbuf.h	FUNCTION_73
0x4003b6b	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4003b6e	            0x740b	                            je 0x4003b7b	       141	strbuf.h	FUNCTION_73
0x4003b70	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003b74	      0x4939442408	                cmp qword [r12 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003b79	            0x750d	                           jne 0x4003b88	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003b7b	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003b80	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003b83	      0xe800000000	                          call 0x4003b88	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003b88	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003b8d	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_75
0x4003b92	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003b96	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003b9b	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003b9f	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003ba4	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_75
0x4003ba9	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003bad	        0x418b4500	                    mov eax, dword [r13]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bb1	          0x83e806	                              sub eax, 6	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bb4	          0x83f801	                              cmp eax, 1	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bb7	            0x774e	                            ja 0x4003c07	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bb9	      0x498b442408	                mov rax, qword [r12 + 8]	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bbe	          0x4839d8	                            cmp rax, rbx	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bc1	            0x7744	                            ja 0x4003c07	      1859	pretty.c	FUNCTION_52	IF_11	CALL_15
0x4003bc3	        0x498b1424	                    mov rdx, qword [r12]	       141	strbuf.h	FUNCTION_73
0x4003bc7	          0x4885d2	                           test rdx, rdx	       141	strbuf.h	FUNCTION_73
0x4003bca	            0x7409	                            je 0x4003bd5	       141	strbuf.h	FUNCTION_73
0x4003bcc	        0x4883ea01	                              sub rdx, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003bd0	          0x4839c2	                            cmp rdx, rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003bd3	            0x750d	                           jne 0x4003be2	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003bd5	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003bda	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003bdd	      0xe800000000	                          call 0x4003be2	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003be2	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003be7	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_75
0x4003bec	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003bf0	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003bf5	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003bf9	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4003bfe	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_75
0x4003c03	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003c07	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	      1862	pretty.c	FUNCTION_52	CALL_17
0x4003c0c	        0x488b3c24	                    mov rdi, qword [rsp]	      1862	pretty.c	FUNCTION_52	CALL_17
0x4003c10	      0xe800000000	                          call 0x4003c15	      1862	pretty.c	FUNCTION_52	CALL_17
0x4003c15	            0xeb4b	                           jmp 0x4003c62	      1862	pretty.c	FUNCTION_52	CALL_17
0x4003c17	        0x418d7650	                   lea esi, [r14 + 0x50]	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4003c1b	          0x4863f6	                         movsxd rsi, esi	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4003c1e	          0x4c89e7	                            mov rdi, r12	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4003c21	      0xe800000000	                          call 0x4003c26	      1597	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_9
0x4003c26	      0x4c8b442408	                 mov r8, qword [rsp + 8]	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c2b	          0x4889e9	                            mov rcx, rbp	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c2e	          0x4c89e2	                            mov rdx, r12	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c31	      0xbe00000000	                              mov esi, 0	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c36	          0x4c89ef	                            mov rdi, r13	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c39	      0xe800000000	                          call 0x4003c3e	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c3e	      0xe916feffff	                           jmp 0x4003a59	      1598	pretty.c	FUNCTION_45	FOR_1	IF_7	CALL_10
0x4003c43	        0x418b4500	                    mov eax, dword [r13]	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4003c47	          0x83e803	                              sub eax, 3	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4003c4a	          0x83f801	                              cmp eax, 1	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4003c4d	     0xf871efcffff	                            ja 0x4003871	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4003c53	      0xe923feffff	                           jmp 0x4003a7b	      1600	pretty.c	FUNCTION_45	FOR_1	IF_8	CALL_11
0x4003c58	      0x498b5c2408	                mov rbx, qword [r12 + 8]	      1845	pretty.c	FUNCTION_52
0x4003c5d	      0xe9defeffff	                           jmp 0x4003b40	      1845	pretty.c	FUNCTION_52
0x4003c62	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1863	pretty.c	FUNCTION_52
0x4003c67	    0x644833042528	                xor rax, qword fs:[0x28]	      1863	pretty.c	FUNCTION_52
0x4003c70	            0x7405	                            je 0x4003c77	      1863	pretty.c	FUNCTION_52
0x4003c72	      0xe800000000	                          call 0x4003c77	      1863	pretty.c	FUNCTION_52
0x4003c77	        0x4883c438	                           add rsp, 0x38	      1863	pretty.c	FUNCTION_52
0x4003c7b	              0x5b	                                 pop rbx	      1863	pretty.c	FUNCTION_52
0x4003c7c	              0x5d	                                 pop rbp	      1863	pretty.c	FUNCTION_52
0x4003c7d	            0x415c	                                 pop r12	      1863	pretty.c	FUNCTION_52
0x4003c7f	            0x415d	                                 pop r13	      1863	pretty.c	FUNCTION_52
0x4003c81	            0x415e	                                 pop r14	      1863	pretty.c	FUNCTION_52
0x4003c83	            0x415f	                                 pop r15	      1863	pretty.c	FUNCTION_52
0x4003c85	              0xc3	                                     ret	      1863	pretty.c	FUNCTION_52
strbuf_wrap	DO,0:functions,0:IF,1:ELSE,0:SWITCH,0:FOR,0:CALL,4:WHILE,0	58
0x400081b	            0x4156	                                push r14	       891	pretty.c	WHILE_3	FUNCTION_33
0x400081d	            0x4155	                                push r13	       891	pretty.c	WHILE_3	FUNCTION_33
0x400081f	            0x4154	                                push r12	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000821	              0x55	                                push rbp	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000822	              0x53	                                push rbx	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000823	        0x4883ec40	                           sub rsp, 0x40	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000827	          0x4889fb	                            mov rbx, rdi	       891	pretty.c	WHILE_3	FUNCTION_33
0x400082a	          0x4889f5	                            mov rbp, rsi	       891	pretty.c	WHILE_3	FUNCTION_33
0x400082d	          0x4989d6	                            mov r14, rdx	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000830	          0x4989cc	                            mov r12, rcx	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000833	          0x4d89c5	                             mov r13, r8	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000836	    0x64488b042528	                mov rax, qword fs:[0x28]	       891	pretty.c	WHILE_3	FUNCTION_33
0x400083f	      0x4889442438	             mov qword [rsp + 0x38], rax	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000844	            0x31c0	                            xor eax, eax	       891	pretty.c	WHILE_3	FUNCTION_33
0x4000846	    0x48c704240000	                      mov qword [rsp], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x400084e	    0x48c744240800	                  mov qword [rsp + 8], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x4000857	    0x48c744241000	               mov qword [rsp + 0x10], 0	       892	pretty.c	WHILE_3	FUNCTION_33
0x4000860	          0x4885f6	                           test rsi, rsi	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x4000863	            0x740f	                            je 0x4000874	       894	pretty.c	WHILE_3	FUNCTION_33	IF_1
0x4000865	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x4000869	          0x4889ea	                            mov rdx, rbp	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x400086c	          0x4889e7	                            mov rdi, rsp	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x400086f	      0xe800000000	                          call 0x4000874	       895	pretty.c	WHILE_3	FUNCTION_33	CALL_1
0x4000874	          0x4889ee	                            mov rsi, rbp	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4000877	        0x48037310	             add rsi, qword [rbx + 0x10]	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400087b	          0x4589f0	                           mov r8d, r14d	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400087e	          0x4489e9	                           mov ecx, r13d	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4000881	          0x4489e2	                           mov edx, r12d	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4000884	          0x4889e7	                            mov rdi, rsp	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x4000887	      0xe800000000	                          call 0x400088c	       896	pretty.c	WHILE_3	FUNCTION_33	CALL_2
0x400088c	        0x488b0c24	                    mov rcx, qword [rsp]	        53	string3.h	FUNCTION_83	CALL_3
0x4000890	      0x48894c2420	             mov qword [rsp + 0x20], rcx	        53	string3.h	FUNCTION_83	CALL_3
0x4000895	      0x488b542408	                mov rdx, qword [rsp + 8]	        53	string3.h	FUNCTION_83	CALL_3
0x400089a	      0x4889542428	             mov qword [rsp + 0x28], rdx	        53	string3.h	FUNCTION_83	CALL_3
0x400089f	      0x488b442410	            mov rax, qword [rsp + 0x10] 	        53	string3.h	FUNCTION_83	CALL_3
0x40008a4	      0x4889442430	             mov qword [rsp + 0x30], rax	        53	string3.h	FUNCTION_83	CALL_3
0x40008a9	          0x488b33	                    mov rsi, qword [rbx]	        53	string3.h	FUNCTION_83	CALL_3
0x40008ac	        0x48893424	                    mov qword [rsp], rsi	        53	string3.h	FUNCTION_83	CALL_3
0x40008b0	        0x488b7308	                mov rsi, qword [rbx + 8]	        53	string3.h	FUNCTION_83	CALL_3
0x40008b4	      0x4889742408	                mov qword [rsp + 8], rsi	        53	string3.h	FUNCTION_83	CALL_3
0x40008b9	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	        53	string3.h	FUNCTION_83	CALL_3
0x40008bd	      0x4889742410	             mov qword [rsp + 0x10], rsi	        53	string3.h	FUNCTION_83	CALL_3
0x40008c2	          0x48890b	                    mov qword [rbx], rcx	        53	string3.h	FUNCTION_83	CALL_3
0x40008c5	        0x48895308	                mov qword [rbx + 8], rdx	        53	string3.h	FUNCTION_83	CALL_3
0x40008c9	        0x48894310	             mov qword [rbx + 0x10], rax	        53	string3.h	FUNCTION_83	CALL_3
0x40008cd	          0x4889e7	                            mov rdi, rsp	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x40008d0	      0xe800000000	                          call 0x40008d5	       899	pretty.c	WHILE_3	FUNCTION_33	CALL_4
0x40008d5	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008da	    0x644833042528	                xor rax, qword fs:[0x28]	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008e3	            0x7405	                            je 0x40008ea	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008e5	      0xe800000000	                          call 0x40008ea	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008ea	        0x4883c440	                           add rsp, 0x40	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008ee	              0x5b	                                 pop rbx	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008ef	              0x5d	                                 pop rbp	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008f0	            0x415c	                                 pop r12	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008f2	            0x415d	                                 pop r13	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008f4	            0x415e	                                 pop r14	       900	pretty.c	WHILE_3	FUNCTION_33
0x40008f6	              0xc3	                                     ret	       900	pretty.c	WHILE_3	FUNCTION_33
format_subject	DO,0:functions,0:IF,3:ELSE,0:SWITCH,0:FOR,1:CALL,5:WHILE,0	66
0x400193d	            0x4157	                                push r15	       852	pretty.c	WHILE_3	FUNCTION_31
0x400193f	            0x4156	                                push r14	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001941	            0x4155	                                push r13	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001943	            0x4154	                                push r12	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001945	              0x55	                                push rbp	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001946	              0x53	                                push rbx	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001947	        0x4883ec18	                           sub rsp, 0x18	       852	pretty.c	WHILE_3	FUNCTION_31
0x400194b	          0x4989fc	                            mov r12, rdi	       852	pretty.c	WHILE_3	FUNCTION_31
0x400194e	          0x4889f3	                            mov rbx, rsi	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001951	          0x4989d6	                            mov r14, rdx	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001954	    0x64488b042528	                mov rax, qword fs:[0x28]	       852	pretty.c	WHILE_3	FUNCTION_31
0x400195d	      0x4889442408	                mov qword [rsp + 8], rax	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001962	            0x31c0	                            xor eax, eax	       852	pretty.c	WHILE_3	FUNCTION_31
0x4001964	    0x41bd01000000	                             mov r13d, 1	       853	pretty.c	WHILE_3	FUNCTION_31
0x400196a	    0x49c7c7ffffff	             mov r15, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001971	            0xeb03	                           jmp 0x4001976	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001973	          0x4889eb	                            mov rbx, rbp	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x4001976	          0x4889df	                            mov rdi, rbx	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x4001979	      0xe8c2e6ffff	                   call sym.get_one_line	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x400197e	        0x89442404	                mov dword [rsp + 4], eax	       857	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_1
0x4001982	          0x4863e8	                         movsxd rbp, eax	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x4001985	          0x4801dd	                            add rbp, rbx	       859	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x4001988	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400198a	            0x7464	                            je 0x40019f0	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400198c	      0x488d742404	                      lea rsi, [rsp + 4]	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001991	          0x4889df	                            mov rdi, rbx	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001994	      0xe8eee6ffff	                  call sym.is_blank_line	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001999	            0x85c0	                           test eax, eax	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400199b	            0x7553	                           jne 0x40019f0	       860	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400199d	          0x4d85e4	                           test r12, r12	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x40019a0	            0x74d1	                            je 0x4001973	       863	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_2
0x40019a2	        0x8b442404	                mov eax, dword [rsp + 4]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x40019a6	          0x8d7002	                      lea esi, [rax + 2]	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x40019a9	          0x4863f6	                         movsxd rsi, esi	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x40019ac	          0x4c89e7	                            mov rdi, r12	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x40019af	      0xe800000000	                          call 0x40019b4	       865	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_3
0x40019b4	          0x4585ed	                         test r13d, r13d	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x40019b7	            0x751f	                           jne 0x40019d8	       866	pretty.c	WHILE_3	FUNCTION_31	FOR_1	IF_3
0x40019b9	          0x4c89f9	                            mov rcx, r15	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019bc	          0x4c89f7	                            mov rdi, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019bf	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019c4	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019c6	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019c9	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019cd	          0x4c89f6	                            mov rsi, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019d0	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019d3	      0xe800000000	                          call 0x40019d8	       279	strbuf.h	FUNCTION_76	CALL_2
0x40019d8	      0x4863542404	            movsxd rdx, dword [rsp + 4] 	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40019dd	          0x4889de	                            mov rsi, rbx	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40019e0	          0x4c89e7	                            mov rdi, r12	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40019e3	      0xe800000000	                          call 0x40019e8	       868	pretty.c	WHILE_3	FUNCTION_31	FOR_1	CALL_5
0x40019e8	    0x41bd00000000	                             mov r13d, 0	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x40019ee	            0xeb83	                           jmp 0x4001973	       869	pretty.c	WHILE_3	FUNCTION_31	FOR_1
0x40019f0	          0x4889e8	                            mov rax, rbp	       872	pretty.c	WHILE_3	FUNCTION_31
0x40019f3	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       872	pretty.c	WHILE_3	FUNCTION_31
0x40019f8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a01	            0x7405	                            je 0x4001a08	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a03	      0xe800000000	                          call 0x4001a08	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a08	        0x4883c418	                           add rsp, 0x18	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a0c	              0x5b	                                 pop rbx	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a0d	              0x5d	                                 pop rbp	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a0e	            0x415c	                                 pop r12	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a10	            0x415d	                                 pop r13	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a12	            0x415e	                                 pop r14	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a14	            0x415f	                                 pop r15	       872	pretty.c	WHILE_3	FUNCTION_31
0x4001a16	              0xc3	                                     ret	       872	pretty.c	WHILE_3	FUNCTION_31
get_commit_format	DO,0:functions,0:IF,5:ELSE,0:SWITCH,0:FOR,0:CALL,8:WHILE,0	169
0x400098f	            0x4154	                                push r12	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000991	              0x55	                                push rbp	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000992	              0x53	                                push rbx	       155	pretty.c	WHILE_3	FUNCTION_7
0x4000993	    0x4881ec100100	                          sub rsp, 0x110	       155	pretty.c	WHILE_3	FUNCTION_7
0x400099a	          0x4989fc	                            mov r12, rdi	       155	pretty.c	WHILE_3	FUNCTION_7
0x400099d	          0x4889f5	                            mov rbp, rsi	       155	pretty.c	WHILE_3	FUNCTION_7
0x40009a0	    0x64488b042528	                mov rax, qword fs:[0x28]	       155	pretty.c	WHILE_3	FUNCTION_7
0x40009a9	    0x488984240801	            mov qword [rsp + 0x108], rax	       155	pretty.c	WHILE_3	FUNCTION_7
0x40009b1	            0x31c0	                            xor eax, eax	       155	pretty.c	WHILE_3	FUNCTION_7
0x40009b3	        0x80667bf7	             and byte [rsi + 0x7b], 0xf7	       158	pretty.c	WHILE_3	FUNCTION_7
0x40009b7	          0x4889fb	                            mov rbx, rdi	       158	pretty.c	WHILE_3	FUNCTION_7
0x40009ba	      0xb800000000	                              mov eax, 0	       158	pretty.c	WHILE_3	FUNCTION_7
0x40009bf	          0x4885ff	                           test rdi, rdi	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x40009c2	            0x750f	                           jne 0x40009d3	       159	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x40009c4	    0xc786a4000000	               mov dword [rsi + 0xa4], 1	       160	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x40009ce	      0xe9f8020000	                           jmp 0x4000ccb	       161	pretty.c	WHILE_3	FUNCTION_7	IF_1
0x40009d3	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009d6	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009d8	     0xf8493020000	                            je 0x4000c71	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009de	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009e2	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009e6	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009e9	            0x74e8	                            je 0x40009d3	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009eb	      0xe9a8020000	                           jmp 0x4000c98	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009f0	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009f3	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009f5	            0x7412	                            je 0x4000a09	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40009f7	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009fb	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40009ff	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000a02	            0x74ec	                            je 0x40009f0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000a04	      0xe9a7020000	                           jmp 0x4000cb0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000a09	          0x4989d4	                            mov r12, rdx	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000a0c	    0x488b3d000000	            mov rdi, qword [0x04000a13] 	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000a13	      0xe800000000	                          call 0x4000a18	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000a18	          0x4c89e7	                            mov rdi, r12	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000a1b	      0xe800000000	                          call 0x4000a20	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000a20	    0x488905000000	            mov qword [0x04000a27], rax 	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000a27	        0x804d7b08	                 or byte [rbp + 0x7b], 8	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000a2b	    0xc785a4000000	               mov dword [rbp + 0xa4], 8	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000a35	      0xe991020000	                           jmp 0x4000ccb	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000a3a	    0x48833d000000	               cmp qword [0x04000a42], 0	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0x4000a42	     0xf859f010000	                           jne 0x4000be7	       148	pretty.c	WHILE_3	FUNCTION_6	IF_1
0x4000a48	          0x4889e7	                            mov rdi, rsp	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a4b	      0xb920000000	                           mov ecx, 0x20	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a50	      0xb800000000	                              mov eax, 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a55	          0xf348ab	              rep stosq qword [rdi], rax	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a58	    0x48c704240000	                      mov qword [rsp], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a60	    0x48c744242000	               mov qword [rsp + 0x20], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a69	    0xc74424280100	               mov dword [rsp + 0x28], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a71	    0xc74424300800	               mov dword [rsp + 0x30], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a79	    0x48c744244000	               mov qword [rsp + 0x40], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a82	    0xc74424480200	               mov dword [rsp + 0x48], 2	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a8a	    0x48c744246000	               mov qword [rsp + 0x60], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a93	    0xc74424680600	               mov dword [rsp + 0x68], 6	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000a9b	    0x48c784248000	               mov qword [rsp + 0x80], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000aa7	    0xc78424880000	               mov dword [rsp + 0x88], 7	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000ab2	    0x48c78424a000	               mov qword [rsp + 0xa0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000abe	    0xc78424a80000	               mov dword [rsp + 0xa8], 4	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000ac9	    0xc78424b00000	               mov dword [rsp + 0xb0], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000ad4	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000ae0	    0xc78424c80000	               mov dword [rsp + 0xc8], 3	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000aeb	    0xc78424d00000	               mov dword [rsp + 0xd0], 8	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000af6	    0x48c78424e000	               mov qword [rsp + 0xe0], 0	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000b02	    0xc78424e80000	               mov dword [rsp + 0xe8], 5	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000b0d	    0xc78424ec0000	               mov dword [rsp + 0xec], 1	        92	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000b18	    0x48c705000000	               mov qword [0x04000b23], 8	       102	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_1
0x4000b23	    0x48c705000000	               mov qword [0x04000b2e], 8	       103	pretty.c	WHILE_3	ELSE_2	FUNCTION_4
0x4000b2e	    0x488b05000000	            mov rax, qword [0x04000b35] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b35	        0x4883f807	                              cmp rax, 7	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b39	            0x7762	                            ja 0x4000b9d	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b3b	      0x488d544030	          lea rdx, [rax + rax*2 + 0x30] 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b40	          0x48d1ea	                              shr rdx, 1	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b43	        0x4883fa07	                              cmp rdx, 7	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b47	            0x7712	                            ja 0x4000b5b	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b49	    0x48c705000000	               mov qword [0x04000b54], 8	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b54	      0xba08000000	                              mov edx, 8	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b59	            0xeb2a	                           jmp 0x4000b85	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b5b	    0x488915000000	            mov qword [0x04000b62], rdx 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b62	    0x48b8ffffffff	          movabs rax, 0x7ffffffffffffff 	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x4000b6c	          0x4839c2	                            cmp rdx, rax	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x4000b6f	            0x7614	                           jbe 0x4000b85	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x4000b71	      0xbe20000000	                           mov esi, 0x20	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000b76	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000b7b	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000b80	      0xe800000000	                          call 0x4000b85	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000b85	          0x4889d6	                            mov rsi, rdx	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b88	        0x48c1e605	                              shl rsi, 5	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b8c	      0xbf00000000	                              mov edi, 0	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b91	      0xe800000000	                          call 0x4000b96	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b96	    0x488905000000	            mov qword [0x04000b9d], rax 	       104	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_2
0x4000b9d	    0x488b05000000	            mov rax, qword [0x04000ba4] 	        53	string3.h	FUNCTION_83	CALL_3
0x4000ba4	          0x4889e6	                            mov rsi, rsp	        53	string3.h	FUNCTION_83	CALL_3
0x4000ba7	        0x488b1424	                    mov rdx, qword [rsp]	        53	string3.h	FUNCTION_83	CALL_3
0x4000bab	          0x488910	                    mov qword [rax], rdx	        53	string3.h	FUNCTION_83	CALL_3
0x4000bae	    0x488b9424f800	            mov rdx, qword [rsp + 0xf8] 	        53	string3.h	FUNCTION_83	CALL_3
0x4000bb6	    0x488990f80000	             mov qword [rax + 0xf8], rdx	        53	string3.h	FUNCTION_83	CALL_3
0x4000bbd	        0x488d7808	                      lea rdi, [rax + 8]	        53	string3.h	FUNCTION_83	CALL_3
0x4000bc1	        0x4883e7f8	             and rdi, 0xfffffffffffffff8	        53	string3.h	FUNCTION_83	CALL_3
0x4000bc5	          0x4829f8	                            sub rax, rdi	        53	string3.h	FUNCTION_83	CALL_3
0x4000bc8	          0x4829c6	                            sub rsi, rax	        53	string3.h	FUNCTION_83	CALL_3
0x4000bcb	       0x500010000	                          add eax, 0x100	        53	string3.h	FUNCTION_83	CALL_3
0x4000bd0	          0xc1e803	                              shr eax, 3	        53	string3.h	FUNCTION_83	CALL_3
0x4000bd3	            0x89c1	                            mov ecx, eax	        53	string3.h	FUNCTION_83	CALL_3
0x4000bd5	          0xf348a5	  rep movsq qword [rdi], qword ptr [rsi]	        53	string3.h	FUNCTION_83	CALL_3
0x4000bd8	      0xbe00000000	                              mov esi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x4000bdd	      0xbf00000000	                              mov edi, 0	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x4000be2	      0xe800000000	                          call 0x4000be7	       108	pretty.c	WHILE_3	ELSE_2	FUNCTION_4	CALL_5
0x4000be7	      0xba00000000	                              mov edx, 0	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000bec	          0x4c89e6	                            mov rsi, r12	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000bef	          0x4c89e7	                            mov rdi, r12	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000bf2	      0xe893f7ffff	   call sym.find_commit_format_recursive	       151	pretty.c	WHILE_3	FUNCTION_6	CALL_2
0x4000bf7	          0x4885c0	                           test rax, rax	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0x4000bfa	            0x750d	                           jne 0x4000c09	       174	pretty.c	WHILE_3	FUNCTION_7	IF_4
0x4000bfc	          0x4c89e6	                            mov rsi, r12	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000bff	      0xbf00000000	                              mov edi, 0	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000c04	      0xe800000000	                          call 0x4000c09	       175	pretty.c	WHILE_3	FUNCTION_7	CALL_7
0x4000c09	          0x8b5008	                mov edx, dword [rax + 8]	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000c0c	    0x8995a4000000	            mov dword [rbp + 0xa4], edx 	       177	pretty.c	WHILE_3	FUNCTION_7
0x4000c12	         0xfb6500c	            movzx edx, byte [rax + 0xc] 	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c16	          0x83e201	                              and edx, 1	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c19	          0xc1e203	                              shl edx, 3	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c1c	         0xfb64d7b	           movzx ecx, byte [rbp + 0x7b] 	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c20	          0x83e1f7	                     and ecx, 0xfffffff7	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c23	             0x9ca	                             or edx, ecx	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c25	          0x88557b	               mov byte [rbp + 0x7b], dl	       178	pretty.c	WHILE_3	FUNCTION_7
0x4000c28	          0x8b5010	            mov edx, dword [rax + 0x10] 	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000c2b	    0x89959c000000	            mov dword [rbp + 0x9c], edx 	       179	pretty.c	WHILE_3	FUNCTION_7
0x4000c31	        0x83780808	                  cmp dword [rax + 8], 8	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000c35	     0xf8590000000	                           jne 0x4000ccb	       180	pretty.c	WHILE_3	FUNCTION_7	IF_5
0x4000c3b	          0x8b580c	              mov ebx, dword [rax + 0xc]	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000c3e	        0x4c8b6018	            mov r12, qword [rax + 0x18] 	       181	pretty.c	WHILE_3	FUNCTION_7	IF_5	CALL_8
0x4000c42	    0x488b3d000000	            mov rdi, qword [0x04000c49] 	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000c49	      0xe800000000	                          call 0x4000c4e	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000c4e	          0x4c89e7	                            mov rdi, r12	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c51	      0xe800000000	                          call 0x4000c56	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c56	    0x488905000000	            mov qword [0x04000c5d], rax 	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c5d	            0x85db	                           test ebx, ebx	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000c5f	            0x7404	                            je 0x4000c65	        39	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000c61	        0x804d7b08	                 or byte [rbp + 0x7b], 8	        40	pretty.c	WHILE_3	FUNCTION_2	IF_1
0x4000c65	    0xc785a4000000	               mov dword [rbp + 0xa4], 8	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000c6f	            0xeb5a	                           jmp 0x4000ccb	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000c71	    0x488b3d000000	            mov rdi, qword [0x04000c78] 	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000c78	      0xe800000000	                          call 0x4000c7d	        37	pretty.c	WHILE_3	FUNCTION_2	CALL_1
0x4000c7d	          0x4889df	                            mov rdi, rbx	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c80	      0xe800000000	                          call 0x4000c85	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c85	    0x488905000000	            mov qword [0x04000c8c], rax 	        38	pretty.c	WHILE_3	FUNCTION_2	CALL_2
0x4000c8c	    0xc785a4000000	               mov dword [rbp + 0xa4], 8	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000c96	            0xeb33	                           jmp 0x4000ccb	        41	pretty.c	WHILE_3	FUNCTION_2
0x4000c98	      0x41803c2400	                       cmp byte [r12], 0	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000c9d	     0xf8469fdffff	                            je 0x4000a0c	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000ca3	          0x4c89e2	                            mov rdx, r12	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000ca6	      0xb800000000	                              mov eax, 0	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cab	      0xe940fdffff	                           jmp 0x40009f0	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cb0	      0xbe25000000	                           mov esi, 0x25	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cb5	          0x4c89e7	                            mov rdi, r12	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cb8	      0xe800000000	                          call 0x4000cbd	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cbd	          0x4885c0	                           test rax, rax	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cc0	     0xf8546fdffff	                           jne 0x4000a0c	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000cc6	      0xe96ffdffff	                           jmp 0x4000a3a	       168	pretty.c	WHILE_3	FUNCTION_7	IF_3	CALL_4
0x4000ccb	    0x488b84240801	           mov rax, qword [rsp + 0x108] 	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cd3	    0x644833042528	                xor rax, qword fs:[0x28]	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cdc	            0x7405	                            je 0x4000ce3	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cde	      0xe800000000	                          call 0x4000ce3	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000ce3	    0x4881c4100100	                          add rsp, 0x110	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cea	              0x5b	                                 pop rbx	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000ceb	              0x5d	                                 pop rbp	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cec	            0x415c	                                 pop r12	       184	pretty.c	WHILE_3	FUNCTION_7
0x4000cee	              0xc3	                                     ret	       184	pretty.c	WHILE_3	FUNCTION_7
logmsg_reencode	DO,0:functions,0:IF,9:ELSE,2:SWITCH,0:FOR,0:CALL,10:WHILE,0	171
0x40016b8	            0x4157	                                push r15	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016ba	            0x4156	                                push r14	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016bc	            0x4155	                                push r13	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016be	            0x4154	                                push r12	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016c0	              0x55	                                push rbp	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016c1	              0x53	                                push rbx	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016c2	        0x4883ec38	                           sub rsp, 0x38	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016c6	          0x4889fb	                            mov rbx, rdi	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016c9	          0x4989f5	                            mov r13, rsi	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016cc	          0x4989d4	                            mov r12, rdx	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016cf	    0x64488b042528	                mov rax, qword fs:[0x28]	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016d8	      0x4889442428	             mov qword [rsp + 0x28], rax	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016dd	            0x31c0	                            xor eax, eax	       601	pretty.c	WHILE_3	FUNCTION_25
0x40016df	      0xbe00000000	                              mov esi, 0	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x40016e4	      0xe800000000	                          call 0x40016e9	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x40016e9	          0x4889c5	                            mov rbp, rax	       605	pretty.c	WHILE_3	FUNCTION_25	CALL_1
0x40016ec	          0x4d85e4	                           test r12, r12	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x40016ef	            0x7407	                            je 0x40016f8	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x40016f1	      0x41803c2400	                       cmp byte [r12], 0	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x40016f6	            0x751f	                           jne 0x4001717	       608	pretty.c	WHILE_3	FUNCTION_25	IF_1
0x40016f8	          0x4d85ed	                           test r13, r13	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x40016fb	     0xf84cf010000	                            je 0x40018d0	       609	pretty.c	WHILE_3	FUNCTION_25	IF_1	IF_2
0x4001701	      0xbe00000000	                              mov esi, 0	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001706	          0x4889ef	                            mov rdi, rbp	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001709	      0xe89eefffff	                     call sym.get_header	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x400170e	        0x49894500	                    mov qword [r13], rax	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001712	      0xe9b9010000	                           jmp 0x40018d0	       610	pretty.c	WHILE_3	FUNCTION_25	IF_1	CALL_2
0x4001717	      0xbe00000000	                              mov esi, 0	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x400171c	          0x4889c7	                            mov rdi, rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x400171f	      0xe888efffff	                     call sym.get_header	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001724	          0x4989c7	                            mov r15, rax	       613	pretty.c	WHILE_3	FUNCTION_25	CALL_3
0x4001727	          0x4d85ed	                           test r13, r13	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x400172a	            0x7404	                            je 0x4001730	       614	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x400172c	        0x49894500	                    mov qword [r13], rax	       615	pretty.c	WHILE_3	FUNCTION_25	IF_3
0x4001730	          0x4d85ff	                           test r15, r15	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001733	     0xf85c7010000	                           jne 0x4001900	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001739	      0xe9a7010000	                           jmp 0x40018e5	       616	pretty.c	WHILE_3	FUNCTION_25
0x400173e	      0xbe00000000	                              mov esi, 0	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001743	          0x4889df	                            mov rdi, rbx	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001746	      0xe800000000	                          call 0x400174b	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x400174b	          0x4989ee	                            mov r14, rbp	       636	pretty.c	WHILE_3	FUNCTION_25	IF_4	ELSE_1
0x400174e	          0x4839c5	                            cmp rbp, rax	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001751	            0x7552	                           jne 0x40017a5	       633	pretty.c	WHILE_3	FUNCTION_25	IF_4	IF_6	CALL_5
0x4001753	          0x4889ef	                            mov rdi, rbp	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001756	      0xe800000000	                          call 0x400175b	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x400175b	          0x4989c6	                            mov r14, rax	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x400175e	            0xeb45	                           jmp 0x40017a5	       634	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_6
0x4001760	      0xb800000000	                              mov eax, 0	        43	utf8.h	FUNCTION_154	CALL_2
0x4001765	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	        43	utf8.h	FUNCTION_154	CALL_2
0x400176c	          0x4889ef	                            mov rdi, rbp	        43	utf8.h	FUNCTION_154	CALL_2
0x400176f	            0xf2ae	              repne scasb al, byte [rdi]	        43	utf8.h	FUNCTION_154	CALL_2
0x4001771	          0x48f7d1	                                 not rcx	        43	utf8.h	FUNCTION_154	CALL_2
0x4001774	        0x488d71ff	                      lea rsi, [rcx - 1]	        43	utf8.h	FUNCTION_154	CALL_2
0x4001778	    0x41b800000000	                              mov r8d, 0	        43	utf8.h	FUNCTION_154	CALL_2
0x400177e	          0x4889d1	                            mov rcx, rdx	        43	utf8.h	FUNCTION_154	CALL_2
0x4001781	          0x4c89e2	                            mov rdx, r12	        43	utf8.h	FUNCTION_154	CALL_2
0x4001784	          0x4889ef	                            mov rdi, rbp	        43	utf8.h	FUNCTION_154	CALL_2
0x4001787	      0xe800000000	                          call 0x400178c	        43	utf8.h	FUNCTION_154	CALL_2
0x400178c	          0x4989c6	                            mov r14, rax	        43	utf8.h	FUNCTION_154	CALL_2
0x400178f	          0x4885c0	                           test rax, rax	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x4001792	     0xf848a010000	                            je 0x4001922	       646	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	IF_7
0x4001798	          0x4889ee	                            mov rsi, rbp	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x400179b	          0x4889df	                            mov rdi, rbx	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x400179e	      0xe800000000	                          call 0x40017a3	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x40017a3	            0xeb09	                           jmp 0x40017ae	       647	pretty.c	WHILE_3	FUNCTION_25	ELSE_2	CALL_8
0x40017a5	          0x4d85f6	                           test r14, r14	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x40017a8	     0xf846d010000	                            je 0x400191b	       654	pretty.c	WHILE_3	FUNCTION_25	IF_8
0x40017ae	    0x48c744241000	               mov qword [rsp + 0x10], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x40017b7	    0x48c744241800	               mov qword [rsp + 0x18], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x40017c0	    0x48c744242000	               mov qword [rsp + 0x20], 0	       569	pretty.c	WHILE_3	FUNCTION_24
0x40017c9	          0x4c89f3	                            mov rbx, r14	       569	pretty.c	WHILE_3	FUNCTION_24
0x40017cc	            0xeb24	                           jmp 0x40017f2	       569	pretty.c	WHILE_3	FUNCTION_24
0x40017ce	      0xbe0a000000	                            mov esi, 0xa	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x40017d3	          0x4889df	                            mov rdi, rbx	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x40017d6	      0xe800000000	                          call 0x40017db	       575	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_2
0x40017db	          0x4885c0	                           test rax, rax	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x40017de	     0xf84d8000000	                            je 0x40018bc	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x40017e4	        0x488d5801	                      lea rbx, [rax + 1]	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x40017e8	        0x8078010a	                 cmp byte [rax + 1], 0xa	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x40017ec	     0xf84ca000000	                            je 0x40018bc	       576	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	IF_1
0x40017f2	      0xbe00000000	                              mov esi, 0	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x40017f7	          0x4889df	                            mov rdi, rbx	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x40017fa	      0xe800000000	                          call 0x40017ff	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x40017ff	            0x85c0	                           test eax, eax	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001801	            0x74cb	                            je 0x40017ce	       574	pretty.c	WHILE_3	FUNCTION_24	WHILE_1	CALL_1
0x4001803	          0x4889d8	                            mov rax, rbx	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001806	          0x4c29f0	                            sub rax, r14	       579	pretty.c	WHILE_3	FUNCTION_24
0x4001809	      0x4889442408	                mov qword [rsp + 8], rax	       579	pretty.c	WHILE_3	FUNCTION_24
0x400180e	      0xbe0a000000	                            mov esi, 0xa	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001813	          0x4889df	                            mov rdi, rbx	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x4001816	      0xe800000000	                          call 0x400181b	       580	pretty.c	WHILE_3	FUNCTION_24	CALL_3
0x400181b	          0x4885c0	                           test rax, rax	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x400181e	     0xf8498000000	                            je 0x40018bc	       581	pretty.c	WHILE_3	FUNCTION_24	IF_2
0x4001824	          0x4c29f0	                            sub rax, r14	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001827	      0x482b442408	                sub rax, qword [rsp + 8]	       583	pretty.c	WHILE_3	FUNCTION_24
0x400182c	        0x488d5801	                      lea rbx, [rax + 1]	       583	pretty.c	WHILE_3	FUNCTION_24
0x4001830	      0xb800000000	                              mov eax, 0	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001835	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x400183c	          0x4c89f7	                            mov rdi, r14	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x400183f	            0xf2ae	              repne scasb al, byte [rdi]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001841	          0x48f7d1	                                 not rcx	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001844	        0x488d51ff	                      lea rdx, [rcx - 1]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001848	          0x4c89f6	                            mov rsi, r14	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x400184b	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001850	      0xe800000000	                          call 0x4001855	       585	pretty.c	WHILE_3	FUNCTION_24	CALL_6
0x4001855	          0x4c89e7	                            mov rdi, r12	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001858	      0xe800000000	                          call 0x400185d	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x400185d	            0x85c0	                           test eax, eax	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x400185f	            0x7414	                            je 0x4001875	       586	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_7
0x4001861	          0x4889da	                            mov rdx, rbx	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001864	      0x488b742408	                mov rsi, qword [rsp + 8]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001869	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x400186e	      0xe800000000	                          call 0x4001873	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001873	            0xeb35	                           jmp 0x40018aa	       588	pretty.c	WHILE_3	FUNCTION_24	IF_3	CALL_8
0x4001875	      0xb800000000	                              mov eax, 0	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x400187a	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001881	          0x4c89e7	                            mov rdi, r12	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001884	            0xf2ae	              repne scasb al, byte [rdi]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001886	          0x4889c8	                            mov rax, rcx	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001889	          0x48f7d0	                                 not rax	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x400188c	        0x488d53f6	                    lea rdx, [rbx - 0xa]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001890	      0x488b742408	                mov rsi, qword [rsp + 8]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001895	        0x4883c609	                              add rsi, 9	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x4001899	        0x4c8d40ff	                       lea r8, [rax - 1]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x400189d	          0x4c89e1	                            mov rcx, r12	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x40018a0	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x40018a5	      0xe800000000	                          call 0x40018aa	       591	pretty.c	WHILE_3	FUNCTION_24	ELSE_1	CALL_10
0x40018aa	      0xbe00000000	                              mov esi, 0	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x40018af	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x40018b4	      0xe800000000	                          call 0x40018b9	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x40018b9	          0x4989c6	                            mov r14, rax	       595	pretty.c	WHILE_3	FUNCTION_24	CALL_13
0x40018bc	          0x4d85ed	                           test r13, r13	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x40018bf	            0x7508	                           jne 0x40018c9	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x40018c1	          0x4c89ff	                            mov rdi, r15	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x40018c4	      0xe800000000	                          call 0x40018c9	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x40018c9	          0x4d85f6	                           test r14, r14	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x40018cc	        0x490f45ee	                         cmovne rbp, r14	       658	pretty.c	WHILE_3	FUNCTION_25	CALL_10
0x40018d0	          0x4889e8	                            mov rax, rbp	       664	pretty.c	WHILE_3	FUNCTION_25
0x40018d3	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       664	pretty.c	WHILE_3	FUNCTION_25
0x40018d8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       664	pretty.c	WHILE_3	FUNCTION_25
0x40018e1	            0x744b	                            je 0x400192e	       664	pretty.c	WHILE_3	FUNCTION_25
0x40018e3	            0xeb44	                           jmp 0x4001929	       664	pretty.c	WHILE_3	FUNCTION_25
0x40018e5	          0x4c89e6	                            mov rsi, r12	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x40018e8	      0xbf00000000	                              mov edi, 0	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x40018ed	      0xe800000000	                          call 0x40018f2	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x40018f2	            0x85c0	                           test eax, eax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x40018f4	            0x75da	                           jne 0x40018d0	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x40018f6	      0xba00000000	                              mov edx, 0	       616	pretty.c	WHILE_3	FUNCTION_25
0x40018fb	      0xe960feffff	                           jmp 0x4001760	       616	pretty.c	WHILE_3	FUNCTION_25
0x4001900	          0x4c89e6	                            mov rsi, r12	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001903	          0x4c89ff	                            mov rdi, r15	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001906	      0xe800000000	                          call 0x400190b	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x400190b	          0x4c89fa	                            mov rdx, r15	       616	pretty.c	WHILE_3	FUNCTION_25
0x400190e	            0x85c0	                           test eax, eax	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001910	     0xf844afeffff	                            je 0x4001760	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x4001916	      0xe923feffff	                           jmp 0x400173e	       617	pretty.c	WHILE_3	FUNCTION_25	IF_4	CALL_4
0x400191b	          0x4d85ed	                           test r13, r13	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x400191e	            0x75b0	                           jne 0x40018d0	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001920	            0xeb9f	                           jmp 0x40018c1	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001922	          0x4d85ed	                           test r13, r13	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001925	            0x749a	                            je 0x40018c1	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001927	            0xeba7	                           jmp 0x40018d0	       657	pretty.c	WHILE_3	FUNCTION_25	IF_9
0x4001929	      0xe800000000	                          call 0x400192e	       664	pretty.c	WHILE_3	FUNCTION_25
0x400192e	        0x4883c438	                           add rsp, 0x38	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001932	              0x5b	                                 pop rbx	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001933	              0x5d	                                 pop rbp	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001934	            0x415c	                                 pop r12	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001936	            0x415d	                                 pop r13	       664	pretty.c	WHILE_3	FUNCTION_25
0x4001938	            0x415e	                                 pop r14	       664	pretty.c	WHILE_3	FUNCTION_25
0x400193a	            0x415f	                                 pop r15	       664	pretty.c	WHILE_3	FUNCTION_25
0x400193c	              0xc3	                                     ret	       664	pretty.c	WHILE_3	FUNCTION_25
format_commit_item	DO,0:functions,0:IF,7:ELSE,3:SWITCH,1:FOR,0:CALL,5:WHILE,1	301
0x4002bd4	            0x4157	                                push r15	      1432	pretty.c	FUNCTION_41
0x4002bd6	            0x4156	                                push r14	      1432	pretty.c	FUNCTION_41
0x4002bd8	            0x4155	                                push r13	      1432	pretty.c	FUNCTION_41
0x4002bda	            0x4154	                                push r12	      1432	pretty.c	FUNCTION_41
0x4002bdc	              0x55	                                push rbp	      1432	pretty.c	FUNCTION_41
0x4002bdd	              0x53	                                push rbx	      1432	pretty.c	FUNCTION_41
0x4002bde	        0x4883ec48	                           sub rsp, 0x48	      1432	pretty.c	FUNCTION_41
0x4002be2	          0x4989fe	                            mov r14, rdi	      1432	pretty.c	FUNCTION_41
0x4002be5	          0x4889f5	                            mov rbp, rsi	      1432	pretty.c	FUNCTION_41
0x4002be8	          0x4989d5	                            mov r13, rdx	      1432	pretty.c	FUNCTION_41
0x4002beb	    0x64488b042528	                mov rax, qword fs:[0x28]	      1432	pretty.c	FUNCTION_41
0x4002bf4	      0x4889442438	             mov qword [rsp + 0x38], rax	      1432	pretty.c	FUNCTION_41
0x4002bf9	            0x31c0	                            xor eax, eax	      1432	pretty.c	FUNCTION_41
0x4002bfb	           0xfb606	                   movzx eax, byte [rsi]	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002bfe	            0x3c2b	                            cmp al, 0x2b	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c00	            0x7411	                            je 0x4002c13	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c02	            0x3c2d	                            cmp al, 0x2d	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c04	     0xf8423040000	                            je 0x400302d	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c0a	            0x3c20	                            cmp al, 0x20	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c0c	            0x7512	                           jne 0x4002c20	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c0e	      0xe924040000	                           jmp 0x4003037	      1442	pretty.c	FUNCTION_41	SWITCH_1
0x4002c13	    0xc74424080100	                  mov dword [rsp + 8], 1	      1447	pretty.c	FUNCTION_41	SWITCH_1
0x4002c1b	      0xe91f040000	                           jmp 0x400303f	      1447	pretty.c	FUNCTION_41	SWITCH_1
0x4002c20	    0xc74424080000	                  mov dword [rsp + 8], 0	      1440	pretty.c	FUNCTION_41
0x4002c28	        0x498b4608	                mov rax, qword [r14 + 8]	      1458	pretty.c	FUNCTION_41
0x4002c2c	      0x4889442418	             mov qword [rsp + 0x18], rax	      1458	pretty.c	FUNCTION_41
0x4002c31	      0x41837d4800	               cmp dword [r13 + 0x48], 0	      1459	pretty.c	FUNCTION_41	IF_2
0x4002c36	     0xf84f3020000	                            je 0x4002f2f	      1459	pretty.c	FUNCTION_41	IF_2
0x4002c3c	    0x48c744242000	               mov qword [rsp + 0x20], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x4002c45	    0x48c744242800	               mov qword [rsp + 0x28], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x4002c4e	    0x48c744243000	               mov qword [rsp + 0x30], 0	      1331	pretty.c	WHILE_3	FUNCTION_40
0x4002c57	        0x458b7d7c	           mov r15d, dword [r13 + 0x7c] 	      1332	pretty.c	WHILE_3	FUNCTION_40
0x4002c5b	          0x4585ff	                         test r15d, r15d	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c5e	            0x793a	                           jns 0x4002c9a	      1333	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c60	        0x498b5e10	            mov rbx, qword [r14 + 0x10] 	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4002c64	      0xbe0a000000	                            mov esi, 0xa	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4002c69	          0x4889df	                            mov rdi, rbx	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4002c6c	      0xe800000000	                          call 0x4002c71	      1334	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_1
0x4002c71	          0x4885c0	                           test rax, rax	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4002c74	        0x480f44c3	                          cmove rax, rbx	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4002c78	      0xba01000000	                              mov edx, 1	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4002c7d	      0xbeffffffff	                     mov esi, 0xffffffff	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4002c82	          0x4889c7	                            mov rdi, rax	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4002c85	      0xe800000000	                          call 0x4002c8a	      1338	pretty.c	WHILE_3	FUNCTION_40	IF_1	CALL_2
0x4002c8a	          0x41f7df	                                neg r15d	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c8d	        0x498b5508	                mov rdx, qword [r13 + 8]	      1339	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c91	     0x38298000000	             add eax, dword [rdx + 0x98]	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c97	          0x4129c7	                           sub r15d, eax	      1340	pretty.c	WHILE_3	FUNCTION_40	IF_1
0x4002c9a	      0xbb00000000	                              mov ebx, 0	      1337	pretty.c	WHILE_3	FUNCTION_40	IF_1	IF_2
0x4002c9f	      0x440fb66500	                  movzx r12d, byte [rbp]	      1343	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002ca4	          0x4c89ea	                            mov rdx, r13	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4002ca7	          0x4889ee	                            mov rsi, rbp	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4002caa	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4002caf	      0xe863edffff	              call sym.format_commit_one	      1344	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	CALL_3
0x4002cb4	             0x1c3	                            add ebx, eax	      1345	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002cb6	        0x4180fc43	                          cmp r12b, 0x43	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4002cba	            0x7514	                           jne 0x4002cd0	      1347	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_3
0x4002cbc	            0x4898	                                    cdqe	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002cbe	          0x4801c5	                            add rbp, rax	      1350	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002cc1	        0x807d0025	                    cmp byte [rbp], 0x25	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4002cc5	            0x7509	                           jne 0x4002cd0	      1351	pretty.c	WHILE_3	FUNCTION_40	WHILE_1	IF_4
0x4002cc7	        0x4883c501	                              add rbp, 1	      1353	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002ccb	          0x83c301	                              add ebx, 1	      1354	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002cce	            0xebcf	                           jmp 0x4002c9f	      1354	pretty.c	WHILE_3	FUNCTION_40	WHILE_1
0x4002cd0	      0xba01000000	                              mov edx, 1	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4002cd5	      0xbeffffffff	                     mov esi, 0xffffffff	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4002cda	      0x488b7c2430	            mov rdi, qword [rsp + 0x30] 	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4002cdf	      0xe800000000	                          call 0x4002ce4	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4002ce4	        0x8944240c	              mov dword [rsp + 0xc], eax	      1356	pretty.c	WHILE_3	FUNCTION_40	CALL_4
0x4002ce8	        0x418b4548	            mov eax, dword [r13 + 0x48] 	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002cec	          0x83f803	                              cmp eax, 3	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002cef	     0xf852a010000	                           jne 0x4002e1f	      1358	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002cf5	        0x498b4610	            mov rax, qword [r14 + 0x10] 	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002cf9	        0x498b5608	                mov rdx, qword [r14 + 8]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002cfd	      0x4c8d6410ff	                lea r12, [rax + rdx - 1]	      1359	pretty.c	WHILE_3	FUNCTION_40	IF_5
0x4002d02	      0x44397c240c	            cmp dword [rsp + 0xc], r15d 	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d07	     0xf8e9b000000	                           jle 0x4002da8	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d0d	          0x4c39e0	                            cmp rax, r12	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d10	     0xf8392000000	                           jae 0x4002da8	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d16	      0x410fb60424	                   movzx eax, byte [r12]	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d1b	            0x3c20	                            cmp al, 0x20	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d1d	            0x750a	                           jne 0x4002d29	      1362	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d1f	        0x4983ec01	                              sub r12, 1	      1363	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d23	        0x4183c701	                             add r15d, 1	      1364	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d27	            0xeb6e	                           jmp 0x4002d97	      1364	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_6
0x4002d29	            0x3c6d	                            cmp al, 0x6d	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4002d2b	            0x757b	                           jne 0x4002da8	      1368	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2	IF_7
0x4002d2d	      0x498d4424ff	                      lea rax, [r12 - 1]	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d32	          0x4889c2	                            mov rdx, rax	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d35	    0x41807c24ff1b	                cmp byte [r12 - 1], 0x1b	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d3b	     0xf8407030000	                            je 0x4003048	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d41	      0x498d6c24f6	                    lea rbp, [r12 - 0xa]	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d46	        0x4883e801	                              sub rax, 1	      1372	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4002d4a	          0x4889c2	                            mov rdx, rax	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d4d	          0x4839e8	                            cmp rax, rbp	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d50	            0x740a	                            je 0x4002d5c	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d52	          0x80381b	                    cmp byte [rax], 0x1b	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d55	            0x75ef	                           jne 0x4002d46	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d57	      0xe9ec020000	                           jmp 0x4003048	      1371	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d5c	        0x807d001b	                    cmp byte [rbp], 0x1b	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4002d60	            0x7546	                           jne 0x4002da8	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4002d62	      0x498d442401	                      lea rax, [r12 + 1]	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4002d67	          0x4829d0	                            sub rax, rdx	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4002d6a	      0x4889442410	             mov qword [rsp + 0x10], rax	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4002d6f	          0x4889ef	                            mov rdi, rbp	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4002d72	      0xe800000000	                          call 0x4002d77	      1374	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8	CALL_5
0x4002d77	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4002d7c	          0x4839c1	                            cmp rcx, rax	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4002d7f	            0x7527	                           jne 0x4002da8	      1373	pretty.c	FUNCTION_40	IF_5	WHILE_2	IF_8
0x4002d81	          0x4889ea	                            mov rdx, rbp	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4002d84	      0xbe00000000	                              mov esi, 0	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4002d89	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4002d8e	      0xe800000000	                          call 0x4002d93	      1380	pretty.c	FUNCTION_40	IF_5	WHILE_2	CALL_6
0x4002d93	        0x4c8d65ff	                      lea r12, [rbp - 1]	      1381	pretty.c	FUNCTION_40	IF_5	WHILE_2
0x4002d97	      0x44397c240c	            cmp dword [rsp + 0xc], r15d 	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d9c	            0x7e0a	                           jle 0x4002da8	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002d9e	        0x4d396610	            cmp qword [r14 + 0x10], r12 	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002da2	     0xf826effffff	                            jb 0x4002d16	      1360	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4002da8	        0x498b4e10	            mov rcx, qword [r14 + 0x10] 	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4002dac	      0x498d442401	                      lea rax, [r12 + 1]	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4002db1	          0x4829c8	                            sub rax, rcx	      1383	pretty.c	FUNCTION_40	IF_5	CALL_7
0x4002db4	          0x498b16	                    mov rdx, qword [r14]	       162	strbuf.h	FUNCTION_74	IF_1
0x4002db7	        0x4883fa01	                              cmp rdx, 1	       162	strbuf.h	FUNCTION_74	IF_1
0x4002dbb	        0x4883d2ff	             adc rdx, 0xffffffffffffffff	       162	strbuf.h	FUNCTION_74	IF_1
0x4002dbf	          0x4839d0	                            cmp rax, rdx	       162	strbuf.h	FUNCTION_74	IF_1
0x4002dc2	            0x760f	                           jbe 0x4002dd3	       162	strbuf.h	FUNCTION_74	IF_1
0x4002dc4	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002dc9	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002dce	      0xe800000000	                          call 0x4002dd3	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002dd3	        0x49894608	                mov qword [r14 + 8], rax	       164	strbuf.h	FUNCTION_74
0x4002dd7	    0x4881f9000000	                              cmp rcx, 0	       165	strbuf.h	FUNCTION_74	IF_2
0x4002dde	            0x7408	                            je 0x4002de8	       165	strbuf.h	FUNCTION_74	IF_2
0x4002de0	    0x41c644240100	                   mov byte [r12 + 1], 0	       166	strbuf.h	FUNCTION_74	IF_2
0x4002de6	            0xeb22	                           jmp 0x4002e0a	       166	strbuf.h	FUNCTION_74	IF_2
0x4002de8	    0x803d00000000	                cmp byte [0x04002def], 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002def	            0x7419	                            je 0x4002e0a	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002df1	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002df6	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002dfb	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002e00	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002e05	      0xe800000000	                          call 0x4002e0a	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002e0a	    0x41c745480200	               mov dword [r13 + 0x48], 2	      1384	pretty.c	FUNCTION_40	IF_5
0x4002e12	      0x44397c240c	            cmp dword [rsp + 0xc], r15d 	      1387	pretty.c	FUNCTION_40	IF_9
0x4002e17	     0xf8e33020000	                           jle 0x4003050	      1387	pretty.c	FUNCTION_40	IF_9
0x4002e1d	            0xeb0b	                           jmp 0x4002e2a	      1387	pretty.c	FUNCTION_40	IF_9
0x4002e1f	      0x44397c240c	            cmp dword [rsp + 0xc], r15d 	      1387	pretty.c	FUNCTION_40	IF_9
0x4002e24	     0xf8e87000000	                           jle 0x4002eb1	      1387	pretty.c	FUNCTION_40	IF_9
0x4002e2a	        0x418b454c	            mov eax, dword [r13 + 0x4c] 	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e2e	          0x83f802	                              cmp eax, 2	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e31	            0x742b	                            je 0x4002e5e	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e33	          0x83f803	                              cmp eax, 3	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e36	            0x7451	                            je 0x4002e89	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e38	          0x83f801	                              cmp eax, 1	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e3b	            0x7565	                           jne 0x4002ea2	      1388	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e3d	        0x4183ef02	                             sub r15d, 2	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e41	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e45	          0x4429fa	                           sub edx, r15d	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e48	      0xb900000000	                              mov ecx, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e4d	      0xbe00000000	                              mov esi, 0	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e52	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e57	      0xe800000000	                          call 0x4002e5c	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e5c	            0xeb44	                           jmp 0x4002ea2	      1390	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_8
0x4002e5e	        0x418d47fe	                      lea eax, [r15 - 2]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e62	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e66	            0x29c2	                            sub edx, eax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e68	          0x4489f8	                           mov eax, r15d	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e6b	          0xc1e81f	                           shr eax, 0x1f	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e6e	          0x4101c7	                           add r15d, eax	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e71	          0x41d1ff	                             sar r15d, 1	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e74	        0x418d77ff	                      lea esi, [r15 - 1]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e78	      0xb900000000	                              mov ecx, 0	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e7d	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e82	      0xe800000000	                          call 0x4002e87	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e87	            0xeb19	                           jmp 0x4002ea2	      1395	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_9
0x4002e89	        0x418d77fe	                      lea esi, [r15 - 2]	      1402	pretty.c	FUNCTION_40	IF_9	SWITCH_1
0x4002e8d	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4002e91	            0x29f2	                            sub edx, esi	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4002e93	      0xb900000000	                              mov ecx, 0	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4002e98	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4002e9d	      0xe800000000	                          call 0x4002ea2	      1401	pretty.c	FUNCTION_40	IF_9	SWITCH_1	CALL_10
0x4002ea2	      0x488d742420	                   lea rsi, [rsp + 0x20]	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4002ea7	          0x4c89f7	                            mov rdi, r14	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4002eaa	      0xe800000000	                          call 0x4002eaf	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4002eaf	            0xeb6a	                           jmp 0x4002f1b	      1408	pretty.c	FUNCTION_40	IF_9	CALL_11
0x4002eb1	        0x418b6e08	                mov ebp, dword [r14 + 8]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4002eb5	          0x83f802	                              cmp eax, 2	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4002eb8	            0x750a	                           jne 0x4002ec4	      1411	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4002eba	          0x4589fc	                          mov r12d, r15d	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4002ebd	      0x442b64240c	             sub r12d, dword [rsp + 0xc]	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4002ec2	            0xeb1f	                           jmp 0x4002ee3	      1412	pretty.c	FUNCTION_40	ELSE_1	IF_10
0x4002ec4	    0x41bc00000000	                             mov r12d, 0	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4002eca	          0x83f804	                              cmp eax, 4	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ecd	            0x7514	                           jne 0x4002ee3	      1413	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ecf	          0x4489f8	                           mov eax, r15d	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ed2	        0x2b44240c	              sub eax, dword [rsp + 0xc]	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ed6	          0x4189c4	                           mov r12d, eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ed9	        0x41c1ec1f	                          shr r12d, 0x1f	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002edd	          0x4101c4	                           add r12d, eax	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ee0	          0x41d1fc	                             sar r12d, 1	      1414	pretty.c	FUNCTION_40	ELSE_1	ELSE_2	IF_11
0x4002ee3	      0x442b7c240c	             sub r15d, dword [rsp + 0xc]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4002ee8	          0x4489fa	                           mov edx, r15d	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4002eeb	         0x3542428	             add edx, dword [rsp + 0x28]	      1419	pretty.c	FUNCTION_40	ELSE_1
0x4002eef	          0x4863d2	                         movsxd rdx, edx	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4002ef2	      0xbe20000000	                           mov esi, 0x20	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4002ef7	          0x4c89f7	                            mov rdi, r14	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4002efa	      0xe800000000	                          call 0x4002eff	      1420	pretty.c	FUNCTION_40	ELSE_1	CALL_12
0x4002eff	          0x4863fd	                         movsxd rdi, ebp	        53	string3.h	FUNCTION_83	CALL_3
0x4002f02	          0x4d63e4	                        movsxd r12, r12d	        53	string3.h	FUNCTION_83	CALL_3
0x4002f05	          0x4c01e7	                            add rdi, r12	        53	string3.h	FUNCTION_83	CALL_3
0x4002f08	        0x49037e10	             add rdi, qword [r14 + 0x10]	        53	string3.h	FUNCTION_83	CALL_3
0x4002f0c	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	        53	string3.h	FUNCTION_83	CALL_3
0x4002f11	      0x488b742430	            mov rsi, qword [rsp + 0x30] 	        53	string3.h	FUNCTION_83	CALL_3
0x4002f16	      0xe800000000	                          call 0x4002f1b	        53	string3.h	FUNCTION_83	CALL_3
0x4002f1b	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	      1424	pretty.c	FUNCTION_40	CALL_14
0x4002f20	      0xe800000000	                          call 0x4002f25	      1424	pretty.c	FUNCTION_40	CALL_14
0x4002f25	    0x41c745480000	               mov dword [r13 + 0x48], 0	      1425	pretty.c	FUNCTION_40
0x4002f2d	            0xeb10	                           jmp 0x4002f3f	      1425	pretty.c	FUNCTION_40
0x4002f2f	          0x4c89ea	                            mov rdx, r13	      1462	pretty.c	FUNCTION_41	CALL_2
0x4002f32	          0x4889ee	                            mov rsi, rbp	      1462	pretty.c	FUNCTION_41	CALL_2
0x4002f35	          0x4c89f7	                            mov rdi, r14	      1462	pretty.c	FUNCTION_41	CALL_2
0x4002f38	      0xe8daeaffff	              call sym.format_commit_one	      1462	pretty.c	FUNCTION_41	CALL_2
0x4002f3d	            0x89c3	                            mov ebx, eax	      1462	pretty.c	FUNCTION_41	CALL_2
0x4002f3f	          0x4863c3	                         movsxd rax, ebx	      1464	pretty.c	FUNCTION_41	IF_3
0x4002f42	      0x837c240800	                  cmp dword [rsp + 8], 0	      1463	pretty.c	FUNCTION_41	IF_3
0x4002f47	     0xf84ce000000	                            je 0x400301b	      1463	pretty.c	FUNCTION_41	IF_3
0x4002f4d	        0x498b4608	                mov rax, qword [r14 + 8]	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f51	      0x837c240802	                  cmp dword [rsp + 8], 2	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f56	            0x7578	                           jne 0x4002fd0	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f58	      0x4839442418	            cmp qword [rsp + 0x18], rax 	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f5d	            0x7571	                           jne 0x4002fd0	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f5f	            0xeb53	                           jmp 0x4002fb4	      1466	pretty.c	FUNCTION_41	IF_4
0x4002f61	          0x498b16	                    mov rdx, qword [r14]	       162	strbuf.h	FUNCTION_74	IF_1
0x4002f64	        0x4883fa01	                              cmp rdx, 1	       162	strbuf.h	FUNCTION_74	IF_1
0x4002f68	        0x4883d2ff	             adc rdx, 0xffffffffffffffff	       162	strbuf.h	FUNCTION_74	IF_1
0x4002f6c	          0x4839d0	                            cmp rax, rdx	       162	strbuf.h	FUNCTION_74	IF_1
0x4002f6f	            0x760f	                           jbe 0x4002f80	       162	strbuf.h	FUNCTION_74	IF_1
0x4002f71	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002f76	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002f7b	      0xe800000000	                          call 0x4002f80	       163	strbuf.h	FUNCTION_74	CALL_1
0x4002f80	        0x49894608	                mov qword [r14 + 8], rax	       164	strbuf.h	FUNCTION_74
0x4002f84	    0x4881f9000000	                              cmp rcx, 0	       165	strbuf.h	FUNCTION_74	IF_2
0x4002f8b	            0x7405	                            je 0x4002f92	       165	strbuf.h	FUNCTION_74	IF_2
0x4002f8d	          0xc60600	                       mov byte [rsi], 0	       166	strbuf.h	FUNCTION_74	IF_2
0x4002f90	            0xeb22	                           jmp 0x4002fb4	       166	strbuf.h	FUNCTION_74	IF_2
0x4002f92	    0x803d00000000	                cmp byte [0x04002f99], 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002f99	            0x7419	                            je 0x4002fb4	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002f9b	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002fa0	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002fa5	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002faa	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002faf	      0xe800000000	                          call 0x4002fb4	       168	strbuf.h	FUNCTION_74	CALL_2
0x4002fb4	        0x498b4608	                mov rax, qword [r14 + 8]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fb8	          0x4885c0	                           test rax, rax	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fbb	            0x7458	                            je 0x4003015	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fbd	        0x498b4e10	            mov rcx, qword [r14 + 0x10] 	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fc1	        0x4883e801	                              sub rax, 1	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fc5	        0x488d3401	                    lea rsi, [rcx + rax]	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fc9	          0x803e0a	                     cmp byte [rsi], 0xa	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fcc	            0x7493	                            je 0x4002f61	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fce	            0xeb45	                           jmp 0x4003015	      1467	pretty.c	FUNCTION_41	IF_4	WHILE_1
0x4002fd0	      0x4839442418	            cmp qword [rsp + 0x18], rax 	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4002fd5	            0x743e	                            je 0x4003015	      1469	pretty.c	FUNCTION_41	ELSE_2	IF_5
0x4002fd7	      0x837c240801	                  cmp dword [rsp + 8], 1	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x4002fdc	            0x7519	                           jne 0x4002ff7	      1470	pretty.c	FUNCTION_41	ELSE_2	IF_5	IF_6
0x4002fde	      0xb901000000	                              mov ecx, 1	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002fe3	      0xba00000000	                              mov edx, 0	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002fe8	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002fed	          0x4c89f7	                            mov rdi, r14	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002ff0	      0xe800000000	                          call 0x4002ff5	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002ff5	            0xeb1e	                           jmp 0x4003015	      1471	pretty.c	FUNCTION_41	ELSE_2	IF_5	CALL_4
0x4002ff7	      0x837c240803	                  cmp dword [rsp + 8], 3	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4002ffc	            0x7517	                           jne 0x4003015	      1472	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4002ffe	      0xb901000000	                              mov ecx, 1	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003003	      0xba00000000	                              mov edx, 0	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003008	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x400300d	          0x4c89f7	                            mov rdi, r14	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003010	      0xe800000000	                          call 0x4003015	      1473	pretty.c	FUNCTION_41	ELSE_2	IF_5	ELSE_3	IF_7
0x4003015	          0x83c301	                              add ebx, 1	      1475	pretty.c	FUNCTION_41
0x4003018	          0x4863c3	                         movsxd rax, ebx	      1475	pretty.c	FUNCTION_41
0x400301b	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	      1476	pretty.c	FUNCTION_41
0x4003020	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1476	pretty.c	FUNCTION_41
0x4003029	            0x7433	                            je 0x400305e	      1476	pretty.c	FUNCTION_41
0x400302b	            0xeb2c	                           jmp 0x4003059	      1476	pretty.c	FUNCTION_41
0x400302d	    0xc74424080200	                  mov dword [rsp + 8], 2	      1444	pretty.c	FUNCTION_41	SWITCH_1
0x4003035	            0xeb08	                           jmp 0x400303f	      1444	pretty.c	FUNCTION_41	SWITCH_1
0x4003037	    0xc74424080300	                  mov dword [rsp + 8], 3	      1450	pretty.c	FUNCTION_41	SWITCH_1
0x400303f	        0x4883c501	                              add rbp, 1	      1456	pretty.c	FUNCTION_41	IF_1
0x4003043	      0xe9e0fbffff	                           jmp 0x4002c28	      1456	pretty.c	FUNCTION_41	IF_1
0x4003048	          0x4889c5	                            mov rbp, rax	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x400304b	      0xe912fdffff	                           jmp 0x4002d62	      1370	pretty.c	WHILE_3	FUNCTION_40	IF_5	WHILE_2
0x4003050	        0x418b6e08	                mov ebp, dword [r14 + 8]	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003054	      0xe961feffff	                           jmp 0x4002eba	      1410	pretty.c	FUNCTION_40	ELSE_1
0x4003059	      0xe800000000	                          call 0x400305e	      1476	pretty.c	FUNCTION_41
0x400305e	        0x4883c448	                           add rsp, 0x48	      1476	pretty.c	FUNCTION_41
0x4003062	              0x5b	                                 pop rbx	      1476	pretty.c	FUNCTION_41
0x4003063	              0x5d	                                 pop rbp	      1476	pretty.c	FUNCTION_41
0x4003064	            0x415c	                                 pop r12	      1476	pretty.c	FUNCTION_41
0x4003066	            0x415d	                                 pop r13	      1476	pretty.c	FUNCTION_41
0x4003068	            0x415e	                                 pop r14	      1476	pretty.c	FUNCTION_41
0x400306a	            0x415f	                                 pop r15	      1476	pretty.c	FUNCTION_41
0x400306c	              0xc3	                                     ret	      1476	pretty.c	FUNCTION_41
pp_user_info	DO,0:functions,0:IF,8:ELSE,3:SWITCH,1:FOR,0:CALL,33:WHILE,0	348
0x4001093	            0x4157	                                push r15	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001095	            0x4156	                                push r14	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001097	            0x4155	                                push r13	       428	pretty.c	WHILE_3	FUNCTION_19
0x4001099	            0x4154	                                push r12	       428	pretty.c	WHILE_3	FUNCTION_19
0x400109b	              0x55	                                push rbp	       428	pretty.c	WHILE_3	FUNCTION_19
0x400109c	              0x53	                                push rbx	       428	pretty.c	WHILE_3	FUNCTION_19
0x400109d	    0x4881eca80000	                           sub rsp, 0xa8	       428	pretty.c	WHILE_3	FUNCTION_19
0x40010a4	    0x64488b042528	                mov rax, qword fs:[0x28]	       428	pretty.c	WHILE_3	FUNCTION_19
0x40010ad	    0x488984249800	             mov qword [rsp + 0x98], rax	       428	pretty.c	WHILE_3	FUNCTION_19
0x40010b5	            0x31c0	                            xor eax, eax	       428	pretty.c	WHILE_3	FUNCTION_19
0x40010b7	          0x833f05	                      cmp dword [rdi], 5	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010ba	     0xf846b050000	                            je 0x400162b	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010c0	          0x4889fb	                            mov rbx, rdi	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010c3	          0x4989f4	                            mov r12, rsi	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010c6	          0x4889d5	                            mov rbp, rdx	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010c9	          0x4989ce	                            mov r14, rcx	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010cc	          0x4d89c5	                             mov r13, r8	       435	pretty.c	WHILE_3	FUNCTION_19	IF_1
0x40010cf	      0xbe0a000000	                            mov esi, 0xa	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x40010d4	          0x4889cf	                            mov rdi, rcx	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x40010d7	      0xe800000000	                          call 0x40010dc	       438	pretty.c	WHILE_3	FUNCTION_19	CALL_1
0x40010dc	          0x4c29f0	                            sub rax, r14	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010df	          0x4889c2	                            mov rdx, rax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010e2	          0x4c89f6	                            mov rsi, r14	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010e5	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010ea	      0xe800000000	                          call 0x40010ef	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010ef	          0x4189c6	                           mov r14d, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010f2	            0x85c0	                           test eax, eax	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010f4	     0xf8531050000	                           jne 0x400162b	       439	pretty.c	WHILE_3	FUNCTION_19	IF_2	CALL_2
0x40010fa	      0x488b442460	            mov rax, qword [rsp + 0x60] 	       442	pretty.c	WHILE_3	FUNCTION_19
0x40010ff	      0x4889442410	             mov qword [rsp + 0x10], rax	       442	pretty.c	WHILE_3	FUNCTION_19
0x4001104	      0x488b4c2468	            mov rcx, qword [rsp + 0x68] 	       443	pretty.c	WHILE_3	FUNCTION_19
0x4001109	          0x4829c1	                            sub rcx, rax	       443	pretty.c	WHILE_3	FUNCTION_19
0x400110c	      0x48894c2428	             mov qword [rsp + 0x28], rcx	       443	pretty.c	WHILE_3	FUNCTION_19
0x4001111	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       444	pretty.c	WHILE_3	FUNCTION_19
0x4001116	      0x4889442418	             mov qword [rsp + 0x18], rax	       444	pretty.c	WHILE_3	FUNCTION_19
0x400111b	      0x488b4c2458	            mov rcx, qword [rsp + 0x58] 	       445	pretty.c	WHILE_3	FUNCTION_19
0x4001120	          0x4829c1	                            sub rcx, rax	       445	pretty.c	WHILE_3	FUNCTION_19
0x4001123	      0x48894c2420	             mov qword [rsp + 0x20], rcx	       445	pretty.c	WHILE_3	FUNCTION_19
0x4001128	        0x488b7b60	            mov rdi, qword [rbx + 0x60] 	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x400112c	          0x4885ff	                           test rdi, rdi	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x400112f	            0x7419	                            je 0x400114a	       447	pretty.c	WHILE_3	FUNCTION_19	IF_3
0x4001131	      0x4c8d442420	                    lea r8, [rsp + 0x20]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x4001136	      0x488d4c2418	                   lea rcx, [rsp + 0x18]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x400113b	      0x488d542428	                   lea rdx, [rsp + 0x28]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x4001140	      0x488d742410	                   lea rsi, [rsp + 0x10]	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x4001145	      0xe800000000	                          call 0x400114a	       448	pretty.c	WHILE_3	FUNCTION_19	CALL_3
0x400114a	            0x8b03	                    mov eax, dword [rbx]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x400114c	          0x8d50fa	                      lea edx, [rax - 6]	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x400114f	          0x83fa01	                              cmp edx, 1	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x4001152	     0xf8740030000	                            ja 0x4001498	       450	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_4
0x4001158	        0x488b7b70	            mov rdi, qword [rbx + 0x70] 	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x400115c	          0x4885ff	                           test rdi, rdi	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x400115f	     0xf84d9000000	                            je 0x400123e	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x4001165	      0x488d742450	                   lea rsi, [rsp + 0x50]	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x400116a	      0xe800000000	                          call 0x400116f	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x400116f	            0x85c0	                           test eax, eax	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x4001171	     0xf84c7000000	                            je 0x400123e	       451	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_5
0x4001177	    0x48c744243000	               mov qword [rsp + 0x30], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001180	    0x48c744243800	               mov qword [rsp + 0x38], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001189	    0x48c744244000	               mov qword [rsp + 0x40], 0	       452	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001192	      0xba06000000	                              mov edx, 6	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001197	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x400119c	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011a1	      0xe800000000	                          call 0x40011a6	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011a6	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40011ab	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40011b0	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40011b5	      0xe800000000	                          call 0x40011ba	       455	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_7
0x40011ba	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011bf	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011c4	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011c9	      0xe800000000	                          call 0x40011ce	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011ce	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40011d3	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40011d8	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40011dd	      0xe800000000	                          call 0x40011e2	       457	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_9
0x40011e2	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011e7	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011ec	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011f1	      0xe800000000	                          call 0x40011f6	       279	strbuf.h	FUNCTION_76	CALL_2
0x40011f6	      0xbe00000000	                              mov esi, 0	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x40011fb	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x4001200	      0xe800000000	                          call 0x4001205	       460	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_12
0x4001205	        0x488d7b78	                   lea rdi, [rbx + 0x78]	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x4001209	          0x4889c6	                            mov rsi, rax	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x400120c	      0xe800000000	                          call 0x4001211	       459	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5	CALL_11
0x4001211	        0x488b4370	            mov rax, qword [rbx + 0x70] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001215	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001219	      0x4889542410	             mov qword [rsp + 0x10], rdx	       462	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400121e	        0x488b4818	            mov rcx, qword [rax + 0x18] 	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001222	          0x4829d1	                            sub rcx, rdx	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001225	      0x48894c2428	             mov qword [rsp + 0x28], rcx	       463	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400122a	          0x488b10	                    mov rdx, qword [rax]	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400122d	      0x4889542418	             mov qword [rsp + 0x18], rdx	       464	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001232	        0x488b4008	                mov rax, qword [rax + 8]	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001236	          0x4829d0	                            sub rax, rdx	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x4001239	      0x4889442420	             mov qword [rsp + 0x20], rax	       465	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_5
0x400123e	      0xba06000000	                              mov edx, 6	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001243	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001248	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x400124b	      0xe800000000	                          call 0x4001250	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001250	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001255	          0x4189c7	                           mov r15d, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001258	      0x4c8b742418	            mov r14, qword [rsp + 0x18] 	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x400125d	      0xba01000000	                              mov edx, 1	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001262	      0x4889442408	                mov qword [rsp + 8], rax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001267	            0x89c6	                            mov esi, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001269	          0x4c89f7	                            mov rdi, r14	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x400126c	      0xe886f6ffff	         call sym.needs_rfc2047_encoding	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001271	            0x85c0	                           test eax, eax	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001273	            0x7511	                           jne 0x4001286	       469	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_14
0x4001275	      0xba00000000	                              mov edx, 0	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x400127a	      0x837c240800	                  cmp dword [rsp + 8], 0	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x400127f	            0x7f29	                            jg 0x40012aa	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4001281	      0xe9fe020000	                           jmp 0x4001584	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x4001286	    0x41b801000000	                              mov r8d, 1	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x400128c	          0x4c89e9	                            mov rcx, r13	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x400128f	      0x488b542408	                mov rdx, qword [rsp + 8]	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x4001294	          0x4c89f6	                            mov rsi, r14	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x4001297	          0x4889ef	                            mov rdi, rbp	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x400129a	      0xe831f2ffff	                    call sym.add_rfc2047	       470	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6	CALL_15
0x400129f	    0x41bd4c000000	                          mov r13d, 0x4c	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x40012a5	      0xe975010000	                           jmp 0x400141f	       472	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_6
0x40012aa	      0x410fb60416	             movzx eax, byte [r14 + rdx]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012af	          0x83e822	                           sub eax, 0x22	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012b2	            0x3c3b	                            cmp al, 0x3b	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012b4	            0x770a	                            ja 0x40012c0	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012b6	           0xfb6c0	                           movzx eax, al	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012b9	    0xff24c5000000	                       jmp qword [rax*8]	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012c0	        0x4883c201	                              add rdx, 1	       224	pretty.c	WHILE_3	FUNCTION_11	SWITCH_1
0x40012c4	          0x4139d7	                           cmp r15d, edx	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x40012c7	            0x7fe1	                            jg 0x40012aa	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x40012c9	      0xe9b6020000	                           jmp 0x4001584	       247	pretty.c	WHILE_3	FUNCTION_12	FOR_1
0x40012ce	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40012d2	      0x4839442438	            cmp qword [rsp + 0x38], rax 	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40012d7	     0xf8514030000	                           jne 0x40015f1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40012dd	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40012e2	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       228	strbuf.h	FUNCTION_75	CALL_2
0x40012e7	      0xe800000000	                          call 0x40012ec	       228	strbuf.h	FUNCTION_75	CALL_2
0x40012ec	      0xe900030000	                           jmp 0x40015f1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40012f1	          0x4d89ee	                            mov r14, r13	       228	strbuf.h	FUNCTION_75	CALL_2
0x40012f4	      0x410fb64500	                   movzx eax, byte [r13]	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x40012f9	            0x3c22	                            cmp al, 0x22	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x40012fb	            0x7404	                            je 0x4001301	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x40012fd	            0x3c5c	                            cmp al, 0x5c	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x40012ff	            0x7549	                           jne 0x400134a	       273	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1
0x4001301	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       141	strbuf.h	FUNCTION_73
0x4001306	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4001309	            0x740b	                            je 0x4001316	       141	strbuf.h	FUNCTION_73
0x400130b	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400130f	      0x4839442438	            cmp qword [rsp + 0x38], rax 	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001314	            0x750f	                           jne 0x4001325	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001316	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x400131b	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001320	      0xe800000000	                          call 0x4001325	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001325	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       229	strbuf.h	FUNCTION_75
0x400132a	        0x488d5001	                      lea rdx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x400132e	      0x4889542438	             mov qword [rsp + 0x38], rdx	       229	strbuf.h	FUNCTION_75
0x4001333	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       229	strbuf.h	FUNCTION_75
0x4001338	        0xc604025c	              mov byte [rdx + rax], 0x5c	       229	strbuf.h	FUNCTION_75
0x400133c	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       230	strbuf.h	FUNCTION_75
0x4001341	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       230	strbuf.h	FUNCTION_75
0x4001346	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x400134a	        0x450fb636	                  movzx r14d, byte [r14]	       279	pretty.c	WHILE_3	FUNCTION_14	FOR_1	SWITCH_1	CALL_4
0x400134e	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       141	strbuf.h	FUNCTION_73
0x4001353	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4001356	            0x740b	                            je 0x4001363	       141	strbuf.h	FUNCTION_73
0x4001358	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400135c	      0x4839442438	            cmp qword [rsp + 0x38], rax 	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001361	            0x750f	                           jne 0x4001372	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001363	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001368	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       228	strbuf.h	FUNCTION_75	CALL_2
0x400136d	      0xe800000000	                          call 0x4001372	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001372	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       229	strbuf.h	FUNCTION_75
0x4001377	        0x488d5001	                      lea rdx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x400137b	      0x4889542438	             mov qword [rsp + 0x38], rdx	       229	strbuf.h	FUNCTION_75
0x4001380	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       229	strbuf.h	FUNCTION_75
0x4001385	        0x44883402	              mov byte [rdx + rax], r14b	       229	strbuf.h	FUNCTION_75
0x4001389	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       230	strbuf.h	FUNCTION_75
0x400138e	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       230	strbuf.h	FUNCTION_75
0x4001393	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4001397	        0x4983c501	                              add r13, 1	       230	strbuf.h	FUNCTION_75
0x400139b	          0x4d39ef	                            cmp r15, r13	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x400139e	     0xf854dffffff	                           jne 0x40012f1	       272	pretty.c	WHILE_3	FUNCTION_14	FOR_1
0x40013a4	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       141	strbuf.h	FUNCTION_73
0x40013a9	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40013ac	            0x740b	                            je 0x40013b9	       141	strbuf.h	FUNCTION_73
0x40013ae	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40013b2	      0x483b442438	            cmp rax, qword [rsp + 0x38] 	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40013b7	            0x750f	                           jne 0x40013c8	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40013b9	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40013be	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       228	strbuf.h	FUNCTION_75	CALL_2
0x40013c3	      0xe800000000	                          call 0x40013c8	       228	strbuf.h	FUNCTION_75	CALL_2
0x40013c8	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       229	strbuf.h	FUNCTION_75
0x40013cd	        0x488d5001	                      lea rdx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x40013d1	      0x4889542438	             mov qword [rsp + 0x38], rdx	       229	strbuf.h	FUNCTION_75
0x40013d6	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       229	strbuf.h	FUNCTION_75
0x40013db	        0xc6040222	              mov byte [rdx + rax], 0x22	       229	strbuf.h	FUNCTION_75
0x40013df	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       230	strbuf.h	FUNCTION_75
0x40013e4	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       230	strbuf.h	FUNCTION_75
0x40013e9	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x40013ed	    0x41b94e000000	                           mov r9d, 0x4e	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x40013f3	    0x41b801000000	                              mov r8d, 1	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x40013f9	      0xb9faffffff	                     mov ecx, 0xfffffffa	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x40013fe	        0x8b542438	            mov edx, dword [rsp + 0x38] 	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x4001402	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x4001407	          0x4889ef	                            mov rdi, rbp	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x400140a	      0xe800000000	                          call 0x400140f	       476	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_18
0x400140f	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x4001414	      0xe800000000	                          call 0x4001419	       478	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7	CALL_19
0x4001419	    0x41bd4e000000	                          mov r13d, 0x4e	       433	pretty.c	WHILE_3	FUNCTION_19
0x400141f	          0x4889ef	                            mov rdi, rbp	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x4001422	      0xe834ecffff	               call sym.last_line_length	       485	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8	CALL_23
0x4001427	          0x4d63ed	                        movsxd r13, r13d	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x400142a	            0x4898	                                    cdqe	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x400142c	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x4001431	      0x488d440203	                lea rax, [rdx + rax + 3]	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x4001436	          0x4939c5	                            cmp r13, rax	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x4001439	            0x7340	                           jae 0x400147b	       484	pretty.c	WHILE_3	FUNCTION_19	IF_4	IF_8
0x400143b	        0x488b4500	                    mov rax, qword [rbp]	       141	strbuf.h	FUNCTION_73
0x400143f	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4001442	            0x740a	                            je 0x400144e	       141	strbuf.h	FUNCTION_73
0x4001444	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4001448	        0x483b4508	                cmp rax, qword [rbp + 8]	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400144c	            0x750d	                           jne 0x400145b	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400144e	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001453	          0x4889ef	                            mov rdi, rbp	       228	strbuf.h	FUNCTION_75	CALL_2
0x4001456	      0xe800000000	                          call 0x400145b	       228	strbuf.h	FUNCTION_75	CALL_2
0x400145b	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       229	strbuf.h	FUNCTION_75
0x400145f	        0x488b4508	                mov rax, qword [rbp + 8]	       229	strbuf.h	FUNCTION_75
0x4001463	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4001467	        0x48894d08	                mov qword [rbp + 8], rcx	       229	strbuf.h	FUNCTION_75
0x400146b	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x400146f	        0x488b5510	            mov rdx, qword [rbp + 0x10] 	       230	strbuf.h	FUNCTION_75
0x4001473	        0x488b4508	                mov rax, qword [rbp + 8]	       230	strbuf.h	FUNCTION_75
0x4001477	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x400147b	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001480	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001484	      0xbe00000000	                              mov esi, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001489	          0x4889ef	                            mov rdi, rbp	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x400148c	      0xb800000000	                              mov eax, 0	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001491	      0xe800000000	                          call 0x4001496	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001496	            0xeb45	                           jmp 0x40014dd	       487	pretty.c	WHILE_3	FUNCTION_19	IF_4	CALL_25
0x4001498	          0x83f804	                              cmp eax, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x400149b	      0xb804000000	                              mov eax, 4	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014a0	        0x440f44f0	                         cmove r14d, eax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014a4	        0x4883ec08	                              sub rsp, 8	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014a8	        0xff742418	                 push qword [rsp + 0x18]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014ac	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014b1	              0x50	                                push rax	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014b2	        0xff742430	                 push qword [rsp + 0x30]	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014b6	      0x448b4c2440	            mov r9d, dword [rsp + 0x40] 	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014bb	    0x41b800000000	                              mov r8d, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014c1	          0x4489f1	                           mov ecx, r14d	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014c4	          0x4c89e2	                            mov rdx, r12	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014c7	      0xbe00000000	                              mov esi, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014cc	          0x4889ef	                            mov rdi, rbp	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014cf	      0xb800000000	                              mov eax, 0	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014d4	      0xe800000000	                          call 0x40014d9	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014d9	        0x4883c420	                           add rsp, 0x20	       489	pretty.c	WHILE_3	FUNCTION_19	ELSE_3	CALL_26
0x40014dd	            0x8b03	                    mov eax, dword [rbx]	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014df	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014e2	            0x7475	                            je 0x4001559	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014e4	          0x83f804	                              cmp eax, 4	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014e7	            0x770a	                            ja 0x40014f3	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014e9	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014ec	            0x7412	                            je 0x4001500	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014ee	      0xe938010000	                           jmp 0x400162b	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014f3	          0x83e806	                              sub eax, 6	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014f6	          0x83f801	                              cmp eax, 1	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014f9	            0x762d	                           jbe 0x4001528	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x40014fb	      0xe92b010000	                           jmp 0x400162b	       494	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001500	        0x488d7318	                   lea rsi, [rbx + 0x18]	       497	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_28
0x4001504	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x4001509	      0xe800000000	                          call 0x400150e	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x400150e	          0x4889c2	                            mov rdx, rax	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x4001511	      0xbe00000000	                              mov esi, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x4001516	          0x4889ef	                            mov rdi, rbp	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x4001519	      0xb800000000	                              mov eax, 0	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x400151e	      0xe800000000	                          call 0x4001523	       496	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_27
0x4001523	      0xe903010000	                           jmp 0x400162b	       498	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001528	      0xbf05000000	                              mov edi, 5	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x400152d	      0xe800000000	                          call 0x4001532	       502	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_31
0x4001532	          0x4889c6	                            mov rsi, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001535	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x400153a	      0xe800000000	                          call 0x400153f	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x400153f	          0x4889c2	                            mov rdx, rax	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001542	      0xbe00000000	                              mov esi, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001547	          0x4889ef	                            mov rdi, rbp	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x400154a	      0xb800000000	                              mov eax, 0	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x400154f	      0xe800000000	                          call 0x4001554	       501	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_29
0x4001554	      0xe9d2000000	                           jmp 0x400162b	       503	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001559	        0x488d7318	                   lea rsi, [rbx + 0x18]	       506	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_33
0x400155d	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x4001562	      0xe800000000	                          call 0x4001567	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x4001567	          0x4889c1	                            mov rcx, rax	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x400156a	          0x4c89e2	                            mov rdx, r12	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x400156d	      0xbe00000000	                              mov esi, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x4001572	          0x4889ef	                            mov rdi, rbp	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x4001575	      0xb800000000	                              mov eax, 0	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x400157a	      0xe800000000	                          call 0x400157f	       505	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1	CALL_32
0x400157f	      0xe9a7000000	                           jmp 0x400162b	       507	pretty.c	WHILE_3	FUNCTION_19	SWITCH_1
0x4001584	    0x41b94e000000	                           mov r9d, 0x4e	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x400158a	    0x41b801000000	                              mov r8d, 1	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x4001590	      0xb9faffffff	                     mov ecx, 0xfffffffa	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x4001595	        0x8b542408	                mov edx, dword [rsp + 8]	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x4001599	          0x4c89f6	                            mov rsi, r14	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x400159c	          0x4889ef	                            mov rdi, rbp	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x400159f	      0xe800000000	                          call 0x40015a4	       480	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_2	CALL_20
0x40015a4	    0x41bd4e000000	                          mov r13d, 0x4e	       433	pretty.c	WHILE_3	FUNCTION_19
0x40015aa	      0xe970feffff	                           jmp 0x400141f	       433	pretty.c	WHILE_3	FUNCTION_19
0x40015af	    0x48c744243000	               mov qword [rsp + 0x30], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x40015b8	    0x48c744243800	               mov qword [rsp + 0x38], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x40015c1	    0x48c744244000	               mov qword [rsp + 0x40], 0	       474	pretty.c	WHILE_3	FUNCTION_19	IF_4	ELSE_1	IF_7
0x40015ca	        0x8b442408	                mov eax, dword [rsp + 8]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x40015ce	          0x8d7002	                      lea esi, [rax + 2]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x40015d1	          0x4863f6	                         movsxd rsi, esi	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x40015d4	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x40015d9	      0xe800000000	                          call 0x40015de	       269	pretty.c	WHILE_3	FUNCTION_14	CALL_1
0x40015de	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       141	strbuf.h	FUNCTION_73
0x40015e3	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40015e6	     0xf85e2fcffff	                           jne 0x40012ce	       141	strbuf.h	FUNCTION_73
0x40015ec	      0xe9ecfcffff	                           jmp 0x40012dd	       141	strbuf.h	FUNCTION_73
0x40015f1	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       229	strbuf.h	FUNCTION_75
0x40015f6	        0x488d5001	                      lea rdx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x40015fa	      0x4889542438	             mov qword [rsp + 0x38], rdx	       229	strbuf.h	FUNCTION_75
0x40015ff	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       229	strbuf.h	FUNCTION_75
0x4001604	        0xc6040222	              mov byte [rdx + rax], 0x22	       229	strbuf.h	FUNCTION_75
0x4001608	      0x488b442438	            mov rax, qword [rsp + 0x38] 	       230	strbuf.h	FUNCTION_75
0x400160d	      0x488b542440	            mov rdx, qword [rsp + 0x40] 	       230	strbuf.h	FUNCTION_75
0x4001612	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4001616	          0x4d89f5	                            mov r13, r14	       230	strbuf.h	FUNCTION_75
0x4001619	      0x488b442408	                mov rax, qword [rsp + 8]	       230	strbuf.h	FUNCTION_75
0x400161e	          0x8d40ff	                      lea eax, [rax - 1]	       230	strbuf.h	FUNCTION_75
0x4001621	      0x4d8d7c0601	                lea r15, [r14 + rax + 1]	       230	strbuf.h	FUNCTION_75
0x4001626	      0xe9c6fcffff	                           jmp 0x40012f1	       230	strbuf.h	FUNCTION_75
0x400162b	    0x488b84249800	            mov rax, qword [rsp + 0x98] 	       512	pretty.c	WHILE_3	FUNCTION_19
0x4001633	    0x644833042528	                xor rax, qword fs:[0x28]	       512	pretty.c	WHILE_3	FUNCTION_19
0x400163c	            0x7405	                            je 0x4001643	       512	pretty.c	WHILE_3	FUNCTION_19
0x400163e	      0xe800000000	                          call 0x4001643	       512	pretty.c	WHILE_3	FUNCTION_19
0x4001643	    0x4881c4a80000	                           add rsp, 0xa8	       512	pretty.c	WHILE_3	FUNCTION_19
0x400164a	              0x5b	                                 pop rbx	       512	pretty.c	WHILE_3	FUNCTION_19
0x400164b	              0x5d	                                 pop rbp	       512	pretty.c	WHILE_3	FUNCTION_19
0x400164c	            0x415c	                                 pop r12	       512	pretty.c	WHILE_3	FUNCTION_19
0x400164e	            0x415d	                                 pop r13	       512	pretty.c	WHILE_3	FUNCTION_19
0x4001650	            0x415e	                                 pop r14	       512	pretty.c	WHILE_3	FUNCTION_19
0x4001652	            0x415f	                                 pop r15	       512	pretty.c	WHILE_3	FUNCTION_19
0x4001654	              0xc3	                                     ret	       512	pretty.c	WHILE_3	FUNCTION_19
show_ident_date	DO,0:functions,0:IF,4:ELSE,1:SWITCH,0:FOR,0:CALL,4:WHILE,0	48
0x4000d1c	            0x4154	                                push r12	       408	pretty.c	WHILE_3	FUNCTION_18
0x4000d1e	              0x55	                                push rbp	       408	pretty.c	WHILE_3	FUNCTION_18
0x4000d1f	              0x53	                                push rbx	       408	pretty.c	WHILE_3	FUNCTION_18
0x4000d20	          0x4889fd	                            mov rbp, rdi	       408	pretty.c	WHILE_3	FUNCTION_18
0x4000d23	          0x4989f4	                            mov r12, rsi	       408	pretty.c	WHILE_3	FUNCTION_18
0x4000d26	        0x488b7f20	            mov rdi, qword [rdi + 0x20] 	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4000d2a	          0x4885ff	                           test rdi, rdi	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4000d2d	            0x7425	                            je 0x4000d54	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4000d2f	      0xbb00000000	                              mov ebx, 0	       409	pretty.c	WHILE_3	FUNCTION_18
0x4000d34	      0x48837d2800	               cmp qword [rbp + 0x28], 0	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4000d39	            0x741e	                            je 0x4000d59	       412	pretty.c	WHILE_3	FUNCTION_18	IF_1
0x4000d3b	      0xb900000000	                              mov ecx, 0	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d40	      0xba0a000000	                            mov edx, 0xa	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d45	      0xbe00000000	                              mov esi, 0	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d4a	      0xe800000000	                          call 0x4000d4f	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d4f	          0x4889c3	                            mov rbx, rax	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d52	            0xeb05	                           jmp 0x4000d59	       339	inttypes.h	FUNCTION_156	CALL_2
0x4000d54	      0xbb00000000	                              mov ebx, 0	       409	pretty.c	WHILE_3	FUNCTION_18
0x4000d59	          0x4889df	                            mov rdi, rbx	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x4000d5c	      0xe800000000	                          call 0x4000d61	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x4000d61	            0x85c0	                           test eax, eax	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x4000d63	            0x753c	                           jne 0x4000da1	       414	pretty.c	WHILE_3	FUNCTION_18	IF_2	CALL_2
0x4000d65	        0x488b7d30	            mov rdi, qword [rbp + 0x30] 	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d69	          0x4885ff	                           test rdi, rdi	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d6c	            0x743f	                            je 0x4000dad	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d6e	      0xbe00000000	                              mov esi, 0	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d73	      0x48837d3800	               cmp qword [rbp + 0x38], 0	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d78	            0x7438	                            je 0x4000db2	       417	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_3
0x4000d7a	      0xba0a000000	                            mov edx, 0xa	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x4000d7f	      0xe800000000	                          call 0x4000d84	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x4000d84	          0x4889c6	                            mov rsi, rax	       418	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	CALL_3
0x4000d87	    0x488d90ffffff	             lea rdx, [rax + 0x7fffffff]	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000d8e	      0xb8fdffffff	                     mov eax, 0xfffffffd	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000d93	          0x4839c2	                            cmp rdx, rax	       419	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000d96	      0xb800000000	                              mov eax, 0	       420	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000d9b	        0x480f47f0	                          cmova rsi, rax	       420	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000d9f	            0xeb11	                           jmp 0x4000db2	       420	pretty.c	WHILE_3	FUNCTION_18	ELSE_1	IF_4
0x4000da1	      0xbe00000000	                              mov esi, 0	       410	pretty.c	WHILE_3	FUNCTION_18
0x4000da6	      0xbb00000000	                              mov ebx, 0	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x4000dab	            0xeb05	                           jmp 0x4000db2	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x4000dad	      0xbe00000000	                              mov esi, 0	       415	pretty.c	WHILE_3	FUNCTION_18	IF_2
0x4000db2	          0x4c89e2	                            mov rdx, r12	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x4000db5	          0x4889df	                            mov rdi, rbx	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x4000db8	      0xe800000000	                          call 0x4000dbd	       422	pretty.c	WHILE_3	FUNCTION_18	CALL_4
0x4000dbd	              0x5b	                                 pop rbx	       423	pretty.c	WHILE_3	FUNCTION_18
0x4000dbe	              0x5d	                                 pop rbp	       423	pretty.c	WHILE_3	FUNCTION_18
0x4000dbf	            0x415c	                                 pop r12	       423	pretty.c	WHILE_3	FUNCTION_18
0x4000dc1	              0xc3	                                     ret	       423	pretty.c	WHILE_3	FUNCTION_18
is_blank_line	DO,0:functions,0:IF,0:ELSE,0:SWITCH,0:FOR,0:CALL,1:WHILE,1	18
0x4000087	            0x8b06	                    mov eax, dword [rsi]	       516	pretty.c	WHILE_3	FUNCTION_20
0x4000089	            0x85c0	                           test eax, eax	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x400008b	            0x7427	                            je 0x40000b4	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x400008d	          0x4863d0	                         movsxd rdx, eax	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x4000090	       0xfb65417ff	         movzx edx, byte [rdi + rdx - 1]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x4000095	    0xf68200000000	                      test byte [rdx], 1	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x400009c	            0x7416	                            je 0x40000b4	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x400009e	          0x83e801	                              sub eax, 1	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000a1	            0x7411	                            je 0x40000b4	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000a3	          0x4863d0	                         movsxd rdx, eax	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000a6	       0xfb65417ff	         movzx edx, byte [rdi + rdx - 1]	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000ab	    0xf68200000000	                      test byte [rdx], 1	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000b2	            0x75ea	                           jne 0x400009e	       517	pretty.c	WHILE_3	FUNCTION_20	WHILE_1	CALL_1
0x40000b4	            0x8906	                    mov dword [rsi], eax	       519	pretty.c	WHILE_3	FUNCTION_20
0x40000b6	            0x85c0	                           test eax, eax	       520	pretty.c	WHILE_3	FUNCTION_20
0x40000b8	           0xf94c0	                                 sete al	       520	pretty.c	WHILE_3	FUNCTION_20
0x40000bb	           0xfb6c0	                           movzx eax, al	       520	pretty.c	WHILE_3	FUNCTION_20
0x40000be	              0xc3	                                     ret	       521	pretty.c	WHILE_3	FUNCTION_20
skip_blank_lines	DO,0:functions,0:IF,2:ELSE,0:SWITCH,0:FOR,1:CALL,2:WHILE,0	30
0x4001655	              0x55	                                push rbp	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001656	              0x53	                                push rbx	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001657	        0x4883ec18	                           sub rsp, 0x18	       524	pretty.c	WHILE_3	FUNCTION_21
0x400165b	          0x4889fd	                            mov rbp, rdi	       524	pretty.c	WHILE_3	FUNCTION_21
0x400165e	    0x64488b042528	                mov rax, qword fs:[0x28]	       524	pretty.c	WHILE_3	FUNCTION_21
0x4001667	      0x4889442408	                mov qword [rsp + 8], rax	       524	pretty.c	WHILE_3	FUNCTION_21
0x400166c	            0x31c0	                            xor eax, eax	       524	pretty.c	WHILE_3	FUNCTION_21
0x400166e	          0x4889ef	                            mov rdi, rbp	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001671	      0xe8cae9ffff	                   call sym.get_one_line	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001676	            0x89c3	                            mov ebx, eax	       526	pretty.c	WHILE_3	FUNCTION_21	FOR_1	CALL_1
0x4001678	        0x89442404	                mov dword [rsp + 4], eax	       527	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x400167c	            0x85c0	                           test eax, eax	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x400167e	            0x7419	                            je 0x4001699	       528	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_1
0x4001680	      0x488d742404	                      lea rsi, [rsp + 4]	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001685	          0x4889ef	                            mov rdi, rbp	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001688	      0xe8fae9ffff	                  call sym.is_blank_line	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x400168d	            0x85c0	                           test eax, eax	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x400168f	            0x7408	                            je 0x4001699	       530	pretty.c	WHILE_3	FUNCTION_21	FOR_1	IF_2	CALL_2
0x4001691	          0x4863db	                         movsxd rbx, ebx	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001694	          0x4801dd	                            add rbp, rbx	       532	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001697	            0xebd5	                           jmp 0x400166e	       533	pretty.c	WHILE_3	FUNCTION_21	FOR_1
0x4001699	          0x4889e8	                            mov rax, rbp	       535	pretty.c	WHILE_3	FUNCTION_21
0x400169c	      0x488b542408	                mov rdx, qword [rsp + 8]	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016a1	    0x644833142528	                xor rdx, qword fs:[0x28]	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016aa	            0x7405	                            je 0x40016b1	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016ac	      0xe800000000	                          call 0x40016b1	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016b1	        0x4883c418	                           add rsp, 0x18	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016b5	              0x5b	                                 pop rbx	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016b6	              0x5d	                                 pop rbp	       535	pretty.c	WHILE_3	FUNCTION_21
0x40016b7	              0xc3	                                     ret	       535	pretty.c	WHILE_3	FUNCTION_21
format_person_part	DO,0:functions,0:IF,7:ELSE,0:SWITCH,1:FOR,0:CALL,19:WHILE,0	178
0x4000dc2	            0x4155	                                push r13	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dc4	            0x4154	                                push r12	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dc6	              0x55	                                push rbp	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dc7	              0x53	                                push rbx	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dc8	        0x4883ec78	                           sub rsp, 0x78	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dcc	          0x4889fd	                            mov rbp, rdi	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dcf	            0x89f3	                            mov ebx, esi	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dd1	          0x4889d6	                            mov rsi, rdx	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dd4	            0x89ca	                            mov edx, ecx	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dd6	          0x4d89c4	                             mov r12, r8	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000dd9	    0x64488b042528	                mov rax, qword fs:[0x28]	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000de2	      0x4889442468	             mov qword [rsp + 0x68], rax	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000de7	            0x31c0	                            xor eax, eax	       680	pretty.c	WHILE_3	FUNCTION_27
0x4000de9	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4000dee	      0xe800000000	                          call 0x4000df3	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4000df3	            0x85c0	                           test eax, eax	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4000df5	     0xf8858020000	                            js 0x4001053	       687	pretty.c	WHILE_3	FUNCTION_27	IF_1	CALL_1
0x4000dfb	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       690	pretty.c	WHILE_3	FUNCTION_27
0x4000e00	        0x48890424	                    mov qword [rsp], rax	       690	pretty.c	WHILE_3	FUNCTION_27
0x4000e04	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	       691	pretty.c	WHILE_3	FUNCTION_27
0x4000e09	          0x4829c1	                            sub rcx, rax	       691	pretty.c	WHILE_3	FUNCTION_27
0x4000e0c	      0x48894c2418	             mov qword [rsp + 0x18], rcx	       691	pretty.c	WHILE_3	FUNCTION_27
0x4000e11	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       692	pretty.c	WHILE_3	FUNCTION_27
0x4000e16	      0x4889442408	                mov qword [rsp + 8], rax	       692	pretty.c	WHILE_3	FUNCTION_27
0x4000e1b	      0x488b7c2438	            mov rdi, qword [rsp + 0x38] 	       693	pretty.c	WHILE_3	FUNCTION_27
0x4000e20	          0x4829c7	                            sub rdi, rax	       693	pretty.c	WHILE_3	FUNCTION_27
0x4000e23	      0x48897c2410	             mov qword [rsp + 0x10], rdi	       693	pretty.c	WHILE_3	FUNCTION_27
0x4000e28	          0x4189dd	                           mov r13d, ebx	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e2b	        0x4183e5df	                    and r13d, 0xffffffdf	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e2f	          0x80fb4e	                            cmp bl, 0x4e	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e32	            0x7405	                            je 0x4000e39	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e34	          0x80fb45	                            cmp bl, 0x45	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e37	            0x7551	                           jne 0x4000e8a	       695	pretty.c	WHILE_3	FUNCTION_27	IF_2
0x4000e39	    0x48833d000000	               cmp qword [0x04000e41], 0	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x4000e41	            0x7523	                           jne 0x4000e66	       670	pretty.c	WHILE_3	FUNCTION_26	IF_1
0x4000e43	      0xbe20000000	                           mov esi, 0x20	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4000e48	      0xbf01000000	                              mov edi, 1	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4000e4d	      0xe800000000	                          call 0x4000e52	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4000e52	    0x488905000000	            mov qword [0x04000e59], rax 	       671	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_1
0x4000e59	      0xbe00000000	                              mov esi, 0	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4000e5e	          0x4889c7	                            mov rdi, rax	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4000e61	      0xe800000000	                          call 0x4000e66	       672	pretty.c	WHILE_3	FUNCTION_26	IF_1	CALL_2
0x4000e66	    0x488b3d000000	            mov rdi, qword [0x04000e6d] 	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e6d	        0x837f0800	                  cmp dword [rdi + 8], 0	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e71	            0x7417	                            je 0x4000e8a	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e73	      0x4c8d442418	                    lea r8, [rsp + 0x18]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e78	          0x4889e1	                            mov rcx, rsp	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e7b	      0x488d542410	                   lea rdx, [rsp + 0x10]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e80	      0x488d742408	                      lea rsi, [rsp + 8]	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e85	      0xe800000000	                          call 0x4000e8a	       674	pretty.c	WHILE_3	FUNCTION_26	CALL_3
0x4000e8a	        0x4180fd4e	                          cmp r13b, 0x4e	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4000e8e	            0x751b	                           jne 0x4000eab	       697	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4000e90	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4000e95	        0x488b3424	                    mov rsi, qword [rsp]	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4000e99	          0x4889ef	                            mov rdi, rbp	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4000e9c	      0xe800000000	                          call 0x4000ea1	       698	pretty.c	WHILE_3	FUNCTION_27	IF_3	CALL_3
0x4000ea1	      0xb802000000	                              mov eax, 2	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4000ea6	      0xe9c8010000	                           jmp 0x4001073	       699	pretty.c	WHILE_3	FUNCTION_27	IF_3
0x4000eab	        0x4180fd45	                          cmp r13b, 0x45	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4000eaf	            0x751c	                           jne 0x4000ecd	       701	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4000eb1	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4000eb6	      0x488b742408	                mov rsi, qword [rsp + 8]	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4000ebb	          0x4889ef	                            mov rdi, rbp	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4000ebe	      0xe800000000	                          call 0x4000ec3	       702	pretty.c	WHILE_3	FUNCTION_27	IF_4	CALL_4
0x4000ec3	      0xb802000000	                              mov eax, 2	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4000ec8	      0xe9a6010000	                           jmp 0x4001073	       703	pretty.c	WHILE_3	FUNCTION_27	IF_4
0x4000ecd	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4000ed2	          0x4885f6	                           test rsi, rsi	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4000ed5	     0xf8478010000	                            je 0x4001053	       706	pretty.c	WHILE_3	FUNCTION_27	IF_5
0x4000edb	          0x80fb74	                            cmp bl, 0x74	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4000ede	            0x751a	                           jne 0x4000efa	       709	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4000ee0	      0x488b542448	            mov rdx, qword [rsp + 0x48] 	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4000ee5	          0x4829f2	                            sub rdx, rsi	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4000ee8	          0x4889ef	                            mov rdi, rbp	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4000eeb	      0xe800000000	                          call 0x4000ef0	       710	pretty.c	WHILE_3	FUNCTION_27	IF_6	CALL_5
0x4000ef0	      0xb802000000	                              mov eax, 2	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4000ef5	      0xe979010000	                           jmp 0x4001073	       711	pretty.c	WHILE_3	FUNCTION_27	IF_6
0x4000efa	          0x8d43bc	                   lea eax, [rbx - 0x44]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000efd	            0x3c2e	                            cmp al, 0x2e	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000eff	     0xf874e010000	                            ja 0x4001053	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f05	           0xfb6c0	                           movzx eax, al	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f08	    0xff24c5000000	                       jmp qword [rax*8]	       714	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f0f	          0x4c89e6	                            mov rsi, r12	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4000f12	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4000f17	      0xe800000000	                          call 0x4000f1c	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4000f1c	          0x4889c6	                            mov rsi, rax	       716	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_7
0x4000f1f	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f24	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f2b	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f2e	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f30	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f33	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f37	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f3a	      0xe800000000	                          call 0x4000f3f	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f3f	      0xb802000000	                              mov eax, 2	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f44	      0xe92a010000	                           jmp 0x4001073	       717	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f49	      0xbf05000000	                              mov edi, 5	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f4e	      0xe800000000	                          call 0x4000f53	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f53	          0x4889c6	                            mov rsi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f56	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f5b	      0xe800000000	                          call 0x4000f60	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f60	          0x4889c6	                            mov rsi, rax	       719	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_10
0x4000f63	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f68	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f6f	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f72	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f74	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f77	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f7b	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f7e	      0xe800000000	                          call 0x4000f83	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000f83	      0xb802000000	                              mov eax, 2	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f88	      0xe9e6000000	                           jmp 0x4001073	       720	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000f8d	      0xbf01000000	                              mov edi, 1	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000f92	      0xe800000000	                          call 0x4000f97	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000f97	          0x4889c6	                            mov rsi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000f9a	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000f9f	      0xe800000000	                          call 0x4000fa4	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000fa4	          0x4889c6	                            mov rsi, rax	       722	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_13
0x4000fa7	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fac	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fb3	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fb6	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fb8	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fbb	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fbf	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fc2	      0xe800000000	                          call 0x4000fc7	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fc7	      0xb802000000	                              mov eax, 2	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000fcc	      0xe9a2000000	                           jmp 0x4001073	       723	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4000fd1	      0xbf03000000	                              mov edi, 3	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000fd6	      0xe800000000	                          call 0x4000fdb	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000fdb	          0x4889c6	                            mov rsi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000fde	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000fe3	      0xe800000000	                          call 0x4000fe8	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000fe8	          0x4889c6	                            mov rsi, rax	       725	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_16
0x4000feb	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000ff0	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000ff7	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000ffa	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000ffc	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000fff	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001003	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001006	      0xe800000000	                          call 0x400100b	       279	strbuf.h	FUNCTION_76	CALL_2
0x400100b	      0xb802000000	                              mov eax, 2	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001010	            0xeb61	                           jmp 0x4001073	       726	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001012	      0xbf04000000	                              mov edi, 4	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x4001017	      0xe800000000	                          call 0x400101c	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x400101c	          0x4889c6	                            mov rsi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x400101f	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x4001024	      0xe800000000	                          call 0x4001029	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x4001029	          0x4889c6	                            mov rsi, rax	       728	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1	CALL_19
0x400102c	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001031	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001038	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x400103b	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400103d	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001040	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001044	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4001047	      0xe800000000	                          call 0x400104c	       279	strbuf.h	FUNCTION_76	CALL_2
0x400104c	      0xb802000000	                              mov eax, 2	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001051	            0xeb20	                           jmp 0x4001073	       729	pretty.c	WHILE_3	FUNCTION_27	SWITCH_1
0x4001053	          0x8d4bbc	                   lea ecx, [rbx - 0x44]	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4001056	      0xb800000000	                              mov eax, 0	       742	pretty.c	WHILE_3	FUNCTION_27
0x400105b	          0x80f930	                            cmp cl, 0x30	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400105e	            0x7713	                            ja 0x4001073	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4001060	    0x48b801000000	            movabs rax, 0x1442300000001 	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400106a	          0x48d3e8	                             shr rax, cl	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x400106d	          0x83e001	                              and eax, 1	       739	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4001070	          0x4801c0	                            add rax, rax	       740	pretty.c	WHILE_3	FUNCTION_27	IF_7
0x4001073	      0x488b5c2468	            mov rbx, qword [rsp + 0x68] 	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001078	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001081	            0x7405	                            je 0x4001088	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001083	      0xe800000000	                          call 0x4001088	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001088	        0x4883c478	                           add rsp, 0x78	       743	pretty.c	WHILE_3	FUNCTION_27
0x400108c	              0x5b	                                 pop rbx	       743	pretty.c	WHILE_3	FUNCTION_27
0x400108d	              0x5d	                                 pop rbp	       743	pretty.c	WHILE_3	FUNCTION_27
0x400108e	            0x415c	                                 pop r12	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001090	            0x415d	                                 pop r13	       743	pretty.c	WHILE_3	FUNCTION_27
0x4001092	              0xc3	                                     ret	       743	pretty.c	WHILE_3	FUNCTION_27
strbuf_add_tabexpand	DO,0:functions,0:IF,1:ELSE,0:SWITCH,0:FOR,0:CALL,5:WHILE,1	81
0x40006fa	            0x4157	                                push r15	      1689	pretty.c	FUNCTION_48
0x40006fc	            0x4156	                                push r14	      1689	pretty.c	FUNCTION_48
0x40006fe	            0x4155	                                push r13	      1689	pretty.c	FUNCTION_48
0x4000700	            0x4154	                                push r12	      1689	pretty.c	FUNCTION_48
0x4000702	              0x55	                                push rbp	      1689	pretty.c	FUNCTION_48
0x4000703	              0x53	                                push rbx	      1689	pretty.c	FUNCTION_48
0x4000704	        0x4883ec48	                           sub rsp, 0x48	      1689	pretty.c	FUNCTION_48
0x4000708	      0x48897c2418	             mov qword [rsp + 0x18], rdi	      1689	pretty.c	FUNCTION_48
0x400070d	          0x4189f7	                           mov r15d, esi	      1689	pretty.c	FUNCTION_48
0x4000710	          0x4889d5	                            mov rbp, rdx	      1689	pretty.c	FUNCTION_48
0x4000713	          0x4189ce	                           mov r14d, ecx	      1689	pretty.c	FUNCTION_48
0x4000716	    0x64488b042528	                mov rax, qword fs:[0x28]	      1689	pretty.c	FUNCTION_48
0x400071f	      0x4889442438	             mov qword [rsp + 0x38], rax	      1689	pretty.c	FUNCTION_48
0x4000724	            0x31c0	                            xor eax, eax	      1689	pretty.c	FUNCTION_48
0x4000726	      0xe98a000000	                           jmp 0x40007b5	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x400072b	      0x48896c2428	             mov qword [rsp + 0x28], rbp	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x4000730	      0x48896c2408	                mov qword [rsp + 8], rbp	      1676	pretty.c	FUNCTION_47
0x4000735	          0x4d89e5	                            mov r13, r12	      1676	pretty.c	FUNCTION_47
0x4000738	          0x4929ed	                            sub r13, rbp	      1676	pretty.c	FUNCTION_47
0x400073b	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1676	pretty.c	FUNCTION_47
0x4000740	          0x4d85ed	                           test r13, r13	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4000743	     0xf84b4000000	                            je 0x40007fd	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4000749	      0xbb00000000	                              mov ebx, 0	      1678	pretty.c	FUNCTION_47	WHILE_1
0x400074e	      0x488d742430	                   lea rsi, [rsp + 0x30]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4000753	      0x488d7c2428	                   lea rdi, [rsp + 0x28]	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x4000758	      0xe800000000	                          call 0x400075d	      1679	pretty.c	FUNCTION_47	WHILE_1	CALL_1
0x400075d	            0x85c0	                           test eax, eax	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x400075f	            0x7878	                            js 0x40007d9	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4000761	    0x48837c242800	               cmp qword [rsp + 0x28], 0	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4000767	            0x7470	                            je 0x40007d9	      1680	pretty.c	FUNCTION_47	WHILE_1	IF_1
0x4000769	             0x1c3	                            add ebx, eax	      1682	pretty.c	FUNCTION_47	WHILE_1
0x400076b	    0x48837c243000	               cmp qword [rsp + 0x30], 0	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4000771	            0x75db	                           jne 0x400074e	      1678	pretty.c	FUNCTION_47	WHILE_1
0x4000773	            0x85db	                           test ebx, ebx	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x4000775	            0x7862	                            js 0x40007d9	      1701	pretty.c	FUNCTION_48	WHILE_1	IF_1
0x4000777	          0x4c89ea	                            mov rdx, r13	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400077a	          0x4889ee	                            mov rsi, rbp	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400077d	      0x488b6c2418	            mov rbp, qword [rsp + 0x18] 	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4000782	          0x4889ef	                            mov rdi, rbp	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x4000785	      0xe800000000	                          call 0x400078a	      1705	pretty.c	FUNCTION_48	WHILE_1	CALL_3
0x400078a	            0x89d8	                            mov eax, ebx	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x400078c	              0x99	                                     cdq	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x400078d	          0x41f7ff	                               idiv r15d	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4000790	          0x4489f8	                           mov eax, r15d	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4000793	            0x29d0	                            sub eax, edx	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4000795	          0x4863d0	                         movsxd rdx, eax	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x4000798	      0xbe20000000	                           mov esi, 0x20	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x400079d	          0x4889ef	                            mov rdi, rbp	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x40007a0	      0xe800000000	                          call 0x40007a5	      1708	pretty.c	FUNCTION_48	WHILE_1	CALL_4
0x40007a5	      0x498d6c2401	                      lea rbp, [r12 + 1]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x40007aa	          0x4889e8	                            mov rax, rbp	      1711	pretty.c	FUNCTION_48	WHILE_1
0x40007ad	      0x482b442408	                sub rax, qword [rsp + 8]	      1711	pretty.c	FUNCTION_48	WHILE_1
0x40007b2	          0x4129c6	                           sub r14d, eax	      1711	pretty.c	FUNCTION_48	WHILE_1
0x40007b5	          0x4963c6	                        movsxd rax, r14d	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007b8	      0x4889442410	             mov qword [rsp + 0x10], rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007bd	          0x4889c2	                            mov rdx, rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007c0	      0xbe09000000	                              mov esi, 9	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007c5	          0x4889ef	                            mov rdi, rbp	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007c8	      0xe800000000	                          call 0x40007cd	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007cd	          0x4989c4	                            mov r12, rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007d0	          0x4885c0	                           test rax, rax	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007d3	     0xf8552ffffff	                           jne 0x400072b	      1692	pretty.c	FUNCTION_48	WHILE_1	CALL_1
0x40007d9	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      1720	pretty.c	FUNCTION_48	CALL_5
0x40007de	          0x4889ee	                            mov rsi, rbp	      1720	pretty.c	FUNCTION_48	CALL_5
0x40007e1	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1720	pretty.c	FUNCTION_48	CALL_5
0x40007e6	      0xe800000000	                          call 0x40007eb	      1720	pretty.c	FUNCTION_48	CALL_5
0x40007eb	      0x488b442438	            mov rax, qword [rsp + 0x38] 	      1721	pretty.c	FUNCTION_48
0x40007f0	    0x644833042528	                xor rax, qword fs:[0x28]	      1721	pretty.c	FUNCTION_48
0x40007f9	            0x7411	                            je 0x400080c	      1721	pretty.c	FUNCTION_48
0x40007fb	            0xeb0a	                           jmp 0x4000807	      1721	pretty.c	FUNCTION_48
0x40007fd	      0xbb00000000	                              mov ebx, 0	      1675	pretty.c	FUNCTION_47
0x4000802	      0xe970ffffff	                           jmp 0x4000777	      1675	pretty.c	FUNCTION_47
0x4000807	      0xe800000000	                          call 0x400080c	      1721	pretty.c	FUNCTION_48
0x400080c	        0x4883c448	                           add rsp, 0x48	      1721	pretty.c	FUNCTION_48
0x4000810	              0x5b	                                 pop rbx	      1721	pretty.c	FUNCTION_48
0x4000811	              0x5d	                                 pop rbp	      1721	pretty.c	FUNCTION_48
0x4000812	            0x415c	                                 pop r12	      1721	pretty.c	FUNCTION_48
0x4000814	            0x415d	                                 pop r13	      1721	pretty.c	FUNCTION_48
0x4000816	            0x415e	                                 pop r14	      1721	pretty.c	FUNCTION_48
0x4000818	            0x415f	                                 pop r15	      1721	pretty.c	FUNCTION_48
0x400081a	              0xc3	                                     ret	      1721	pretty.c	FUNCTION_48
userformat_want_item	DO,0:functions,0:IF,1:ELSE,0:SWITCH,1:FOR,0:CALL,0:WHILE,0	12
0x4000105	           0xfb606	                   movzx eax, byte [rsi]	      1483	pretty.c	FUNCTION_42	IF_1
0x4000108	          0x8d48d5	                   lea ecx, [rax - 0x2b]	      1483	pretty.c	FUNCTION_42	IF_1
0x400010b	          0xf6c1fd	                           test cl, 0xfd	      1483	pretty.c	FUNCTION_42	IF_1
0x400010e	            0x7404	                            je 0x4000114	      1483	pretty.c	FUNCTION_42	IF_1
0x4000110	            0x3c20	                            cmp al, 0x20	      1483	pretty.c	FUNCTION_42	IF_1
0x4000112	            0x7504	                           jne 0x4000118	      1483	pretty.c	FUNCTION_42	IF_1
0x4000114	        0x4883c601	                              add rsi, 1	      1484	pretty.c	FUNCTION_42	IF_1
0x4000118	          0x803e4e	                    cmp byte [rsi], 0x4e	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x400011b	            0x7503	                           jne 0x4000120	      1486	pretty.c	FUNCTION_42	SWITCH_1
0x400011d	          0x800a01	                        or byte [rdx], 1	      1488	pretty.c	FUNCTION_42	SWITCH_1
0x4000120	      0xb800000000	                              mov eax, 0	      1492	pretty.c	FUNCTION_42
0x4000125	              0xc3	                                     ret	      1492	pretty.c	FUNCTION_42
commit_format_is_empty	DO,0:functions,0:IF,0:ELSE,0:SWITCH,0:FOR,0:CALL,0:WHILE,0	8
0x4000973	      0xb800000000	                              mov eax, 0	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000978	          0x83ff08	                              cmp edi, 8	        32	pretty.c	WHILE_3	FUNCTION_1
0x400097b	            0x7510	                           jne 0x400098d	        32	pretty.c	WHILE_3	FUNCTION_1
0x400097d	    0x488b05000000	            mov rax, qword [0x04000984] 	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000984	          0x803800	                       cmp byte [rax], 0	        32	pretty.c	WHILE_3	FUNCTION_1
0x4000987	           0xf94c0	                                 sete al	        32	pretty.c	WHILE_3	FUNCTION_1
0x400098a	           0xfb6c0	                           movzx eax, al	        32	pretty.c	WHILE_3	FUNCTION_1
0x400098d	            0xf3c3	                                     ret	        33	pretty.c	WHILE_3	FUNCTION_1
add_rfc2047	DO,0:functions,0:IF,1:ELSE,0:SWITCH,0:FOR,1:CALL,11:WHILE,1	129
0x40004d0	            0x4157	                                push r15	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004d2	            0x4156	                                push r14	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004d4	            0x4155	                                push r13	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004d6	            0x4154	                                push r12	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004d8	              0x55	                                push rbp	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004d9	              0x53	                                push rbx	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004da	        0x4883ec28	                           sub rsp, 0x28	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004de	          0x4889fd	                            mov rbp, rdi	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004e1	      0x4889742418	             mov qword [rsp + 0x18], rsi	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004e6	      0x4889542410	             mov qword [rsp + 0x10], rdx	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004eb	          0x4989cf	                            mov r15, rcx	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004ee	      0x448944240c	              mov dword [rsp + 0xc], r8d	       360	pretty.c	WHILE_3	FUNCTION_17
0x40004f3	      0xe863fbffff	               call sym.last_line_length	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x40004f8	          0x4189c4	                           mov r12d, eax	       363	pretty.c	WHILE_3	FUNCTION_17	CALL_1
0x40004fb	    0x49c7c5ffffff	             mov r13, 0xffffffffffffffff	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000502	      0xbb00000000	                              mov ebx, 0	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000507	          0x4c89e9	                            mov rcx, r13	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x400050a	        0x4c893c24	                    mov qword [rsp], r15	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x400050e	          0x4c89ff	                            mov rdi, r15	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000511	            0x89d8	                            mov eax, ebx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000513	            0xf2ae	              repne scasb al, byte [rdi]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000515	          0x48f7d1	                                 not rcx	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000518	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x400051d	      0x488d444064	          lea rax, [rax + rax*2 + 0x64] 	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000522	      0x488d7401ff	                lea rsi, [rcx + rax - 1]	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x4000527	          0x4889ef	                            mov rdi, rbp	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x400052a	      0xe800000000	                          call 0x400052f	       365	pretty.c	WHILE_3	FUNCTION_17	CALL_3
0x400052f	          0x4c89fa	                            mov rdx, r15	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000532	      0xbe00000000	                              mov esi, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000537	          0x4889ef	                            mov rdi, rbp	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x400053a	      0xb800000000	                              mov eax, 0	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x400053f	      0xe800000000	                          call 0x4000544	       366	pretty.c	WHILE_3	FUNCTION_17	CALL_4
0x4000544	          0x4c89e9	                            mov rcx, r13	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000547	          0x4c89ff	                            mov rdi, r15	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x400054a	            0x89d8	                            mov eax, ebx	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x400054c	            0xf2ae	              repne scasb al, byte [rdi]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x400054e	          0x48f7d1	                                 not rcx	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000551	      0x458d6c0c04	               lea r13d, [r12 + rcx + 4]	       367	pretty.c	WHILE_3	FUNCTION_17	CALL_5
0x4000556	    0x48837c241000	               cmp qword [rsp + 0x10], 0	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400055c	     0xf8429010000	                            je 0x400068b	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000562	      0x4c8b7c2418	            mov r15, qword [rsp + 0x18] 	       377	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000567	        0x488b1424	                    mov rdx, qword [rsp]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x400056b	      0x488d742410	                   lea rsi, [rsp + 0x10]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4000570	      0x488d7c2418	                   lea rdi, [rsp + 0x18]	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x4000575	      0xe800000000	                          call 0x400057a	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x400057a	          0x4189c6	                           mov r14d, eax	       378	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_6
0x400057d	          0x83f801	                              cmp eax, 1	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4000580	            0x7f5b	                            jg 0x40005dd	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4000582	        0x410fb607	                   movzx eax, byte [r15]	       379	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_7
0x4000586	          0x8d50e0	                   lea edx, [rax - 0x20]	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0x4000589	          0x80fa5e	                            cmp dl, 0x5e	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0x400058c	            0x774f	                            ja 0x40005dd	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0x400058e	            0x84c0	                             test al, al	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0x4000590	            0x784b	                            js 0x40005dd	       307	pretty.c	WHILE_3	FUNCTION_15	IF_1	CALL_2
0x4000592	           0xfb6d0	                           movzx edx, al	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x4000595	     0xfb692000000	                   movzx edx, byte [rdx]	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x400059c	          0xf6c201	                              test dl, 1	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x400059f	            0x753c	                           jne 0x40005dd	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005a1	            0x89c1	                            mov ecx, eax	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005a3	          0x83e1fd	                     and ecx, 0xfffffffd	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005a6	          0x80f93d	                            cmp cl, 0x3d	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005a9	            0x7432	                            je 0x40005dd	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005ab	            0x3c5f	                            cmp al, 0x5f	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005ad	            0x742e	                            je 0x40005dd	       315	pretty.c	WHILE_3	FUNCTION_15	IF_2	CALL_3
0x40005af	    0x41bc00000000	                             mov r12d, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005b5	    0xc74424080100	                  mov dword [rsp + 8], 1	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005bd	      0x837c240c01	                cmp dword [rsp + 0xc], 1	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x40005c2	            0x7547	                           jne 0x400060b	       335	pretty.c	WHILE_3	FUNCTION_15	IF_3
0x40005c4	          0xf6c206	                              test dl, 6	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005c7	            0x7524	                           jne 0x40005ed	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005c9	            0x3c2f	                            cmp al, 0x2f	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005cb	            0x7710	                            ja 0x40005dd	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005cd	    0x48b900000000	              movabs rcx, 0xac0200000000	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005d7	        0x480fa3c1	                             bt rcx, rax	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005db	            0x7220	                            jb 0x40005fd	       339	pretty.c	WHILE_3	FUNCTION_15	CALL_4
0x40005dd	        0x438d0476	                  lea eax, [r14 + r14*2]	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005e1	        0x89442408	                mov dword [rsp + 8], eax	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005e5	    0x41bc00000000	                             mov r12d, 0	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005eb	            0xeb1e	                           jmp 0x400060b	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005ed	    0x41bc00000000	                             mov r12d, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005f3	    0xc74424080100	                  mov dword [rsp + 8], 1	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005fb	            0xeb0e	                           jmp 0x400060b	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x40005fd	    0x41bc00000000	                             mov r12d, 0	       382	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000603	    0xc74424080100	                  mov dword [rsp + 8], 1	       383	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400060b	        0x8b442408	                mov eax, dword [rsp + 8]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x400060f	      0x428d442802	                lea eax, [rax + r13 + 2]	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4000614	          0x83f84c	                           cmp eax, 0x4c	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4000617	            0x7e34	                           jle 0x400064d	       393	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1
0x4000619	        0x488b1c24	                    mov rbx, qword [rsp]	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x400061d	          0x4889da	                            mov rdx, rbx	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4000620	      0xbe00000000	                              mov esi, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4000625	          0x4889ef	                            mov rdi, rbp	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4000628	      0xb800000000	                              mov eax, 0	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x400062d	      0xe800000000	                          call 0x4000632	       395	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_8
0x4000632	      0xb800000000	                              mov eax, 0	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x4000637	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x400063e	          0x4889df	                            mov rdi, rbx	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x4000641	            0xf2ae	              repne scasb al, byte [rdi]	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x4000643	          0x4889c8	                            mov rax, rcx	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x4000646	          0x48f7d0	                                 not rax	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x4000649	        0x448d6805	                     lea r13d, [rax + 5]	       396	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	IF_1	CALL_9
0x400064d	          0x4585f6	                         test r14d, r14d	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x4000650	            0x7e28	                           jle 0x400067a	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x4000652	          0x4c89fb	                            mov rbx, r15	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x4000655	        0x418d46ff	                      lea eax, [r14 - 1]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x4000659	      0x4d8d740701	                lea r14, [r15 + rax + 1]	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x400065e	           0xfb613	                   movzx edx, byte [rbx]	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x4000661	          0x4c89e6	                            mov rsi, r12	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x4000664	          0x4889ef	                            mov rdi, rbp	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x4000667	      0xb800000000	                              mov eax, 0	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x400066c	      0xe800000000	                          call 0x4000671	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x4000671	        0x4883c301	                              add rbx, 1	       400	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	CALL_10
0x4000675	          0x4939de	                            cmp r14, rbx	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x4000678	            0x75e4	                           jne 0x400065e	       399	pretty.c	WHILE_3	FUNCTION_17	WHILE_1	FOR_1
0x400067a	      0x44036c2408	               add r13d, dword [rsp + 8]	       401	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400067f	    0x48837c241000	               cmp qword [rsp + 0x10], 0	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x4000685	     0xf85d7feffff	                           jne 0x4000562	       369	pretty.c	WHILE_3	FUNCTION_17	WHILE_1
0x400068b	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000690	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000695	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_76	CALL_2
0x4000698	      0xe800000000	                          call 0x400069d	       279	strbuf.h	FUNCTION_76	CALL_2
0x400069d	        0x4883c428	                           add rsp, 0x28	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a1	              0x5b	                                 pop rbx	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a2	              0x5d	                                 pop rbp	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a3	            0x415c	                                 pop r12	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a5	            0x415d	                                 pop r13	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a7	            0x415e	                                 pop r14	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006a9	            0x415f	                                 pop r15	       404	pretty.c	WHILE_3	FUNCTION_17
0x40006ab	              0xc3	                                     ret	       404	pretty.c	WHILE_3	FUNCTION_17
pp_commit_easy	DO,0:functions,0:IF,0:ELSE,0:SWITCH,0:FOR,0:CALL,1:WHILE,0	17
0x4003c86	    0x4881ecb80000	                           sub rsp, 0xb8	      1867	pretty.c	FUNCTION_53
0x4003c8d	          0x4189f8	                            mov r8d, edi	      1867	pretty.c	FUNCTION_53
0x4003c90	    0x64488b042528	                mov rax, qword fs:[0x28]	      1867	pretty.c	FUNCTION_53
0x4003c99	    0x48898424a800	             mov qword [rsp + 0xa8], rax	      1867	pretty.c	FUNCTION_53
0x4003ca1	            0x31c0	                            xor eax, eax	      1867	pretty.c	FUNCTION_53
0x4003ca3	          0x4889e7	                            mov rdi, rsp	      1868	pretty.c	FUNCTION_53
0x4003ca6	      0xb914000000	                           mov ecx, 0x14	      1868	pretty.c	FUNCTION_53
0x4003cab	          0xf348ab	              rep stosq qword [rdi], rax	      1868	pretty.c	FUNCTION_53
0x4003cae	        0x44890424	                    mov dword [rsp], r8d	      1869	pretty.c	FUNCTION_53
0x4003cb2	          0x4889e7	                            mov rdi, rsp	      1870	pretty.c	FUNCTION_53	CALL_1
0x4003cb5	      0xe800000000	                          call 0x4003cba	      1870	pretty.c	FUNCTION_53	CALL_1
0x4003cba	    0x488b8424a800	            mov rax, qword [rsp + 0xa8] 	      1871	pretty.c	FUNCTION_53
0x4003cc2	    0x644833042528	                xor rax, qword fs:[0x28]	      1871	pretty.c	FUNCTION_53
0x4003ccb	            0x7405	                            je 0x4003cd2	      1871	pretty.c	FUNCTION_53
0x4003ccd	      0xe800000000	                          call 0x4003cd2	      1871	pretty.c	FUNCTION_53
0x4003cd2	    0x4881c4b80000	                           add rsp, 0xb8	      1871	pretty.c	FUNCTION_53
0x4003cd9	              0xc3	                                     ret	      1871	pretty.c	FUNCTION_53
userformat_find_requirements	DO,0:functions,0:IF,2:ELSE,0:SWITCH,0:FOR,0:CALL,2:WHILE,0	25
0x400306d	        0x4883ec28	                           sub rsp, 0x28	      1495	pretty.c	FUNCTION_43
0x4003071	    0x64488b042528	                mov rax, qword fs:[0x28]	      1495	pretty.c	FUNCTION_43
0x400307a	      0x4889442418	             mov qword [rsp + 0x18], rax	      1495	pretty.c	FUNCTION_43
0x400307f	            0x31c0	                            xor eax, eax	      1495	pretty.c	FUNCTION_43
0x4003081	    0x48c704240000	                      mov qword [rsp], 0	      1496	pretty.c	FUNCTION_43
0x4003089	    0x48c744240800	                  mov qword [rsp + 8], 0	      1496	pretty.c	FUNCTION_43
0x4003092	    0x48c744241000	               mov qword [rsp + 0x10], 0	      1496	pretty.c	FUNCTION_43
0x400309b	          0x4885ff	                           test rdi, rdi	      1498	pretty.c	FUNCTION_43	IF_1
0x400309e	            0x750c	                           jne 0x40030ac	      1498	pretty.c	FUNCTION_43	IF_1
0x40030a0	    0x488b3d000000	            mov rdi, qword [0x040030a7] 	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x40030a7	          0x4885ff	                           test rdi, rdi	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x40030aa	            0x741b	                            je 0x40030c7	      1499	pretty.c	FUNCTION_43	IF_1	IF_2
0x40030ac	          0x4889f1	                            mov rcx, rsi	      1503	pretty.c	FUNCTION_43	CALL_1
0x40030af	      0xba00000000	                              mov edx, 0	      1503	pretty.c	FUNCTION_43	CALL_1
0x40030b4	          0x4889fe	                            mov rsi, rdi	      1503	pretty.c	FUNCTION_43	CALL_1
0x40030b7	          0x4889e7	                            mov rdi, rsp	      1503	pretty.c	FUNCTION_43	CALL_1
0x40030ba	      0xe800000000	                          call 0x40030bf	      1503	pretty.c	FUNCTION_43	CALL_1
0x40030bf	          0x4889e7	                            mov rdi, rsp	      1504	pretty.c	FUNCTION_43	CALL_2
0x40030c2	      0xe800000000	                          call 0x40030c7	      1504	pretty.c	FUNCTION_43	CALL_2
0x40030c7	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1505	pretty.c	FUNCTION_43
0x40030cc	    0x644833042528	                xor rax, qword fs:[0x28]	      1505	pretty.c	FUNCTION_43
0x40030d5	            0x7405	                            je 0x40030dc	      1505	pretty.c	FUNCTION_43
0x40030d7	      0xe800000000	                          call 0x40030dc	      1505	pretty.c	FUNCTION_43
0x40030dc	        0x4883c428	                           add rsp, 0x28	      1505	pretty.c	FUNCTION_43
0x40030e0	              0xc3	                                     ret	      1505	pretty.c	FUNCTION_43
needs_rfc2047_encoding	DO,0:functions,0:IF,2:ELSE,0:SWITCH,0:FOR,1:CALL,1:WHILE,0	44
0x40008f7	            0x85f6	                           test esi, esi	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x40008f9	            0x7e60	                           jle 0x400095b	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x40008fb	           0xfb607	                   movzx eax, byte [rdi]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x40008fe	           0xfbed0	                           movsx edx, al	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000901	          0x83fa1b	                           cmp edx, 0x1b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000904	        0x410f94c0	                                sete r8b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000908	          0x83fa0a	                            cmp edx, 0xa	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400090b	           0xf94c1	                                 sete cl	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400090e	          0x4108c8	                              or r8b, cl	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000911	            0x754e	                           jne 0x4000961	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000913	            0x84c0	                             test al, al	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000915	            0x784a	                            js 0x4000961	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000917	      0xb801000000	                              mov eax, 1	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400091c	            0xeb22	                           jmp 0x4000940	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400091e	         0xfb60c07	             movzx ecx, byte [rdi + rax]	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000922	           0xfbed1	                           movsx edx, cl	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000925	        0x4883c001	                              add rax, 1	       348	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000929	          0x83fa0a	                            cmp edx, 0xa	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400092c	        0x410f94c1	                                sete r9b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000930	          0x83fa1b	                           cmp edx, 0x1b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000933	        0x410f94c0	                                sete r8b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000937	          0x4508c1	                             or r9b, r8b	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400093a	            0x752b	                           jne 0x4000967	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400093c	            0x84c9	                             test cl, cl	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x400093e	            0x7827	                            js 0x4000967	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000940	            0x89c1	                            mov ecx, eax	       349	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1	CALL_1
0x4000942	          0x83fa3d	                           cmp edx, 0x3d	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000945	            0x750a	                           jne 0x4000951	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000947	            0x39c6	                            cmp esi, eax	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000949	            0x7e06	                           jle 0x4000951	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x400094b	        0x803c073f	              cmp byte [rdi + rax], 0x3f	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x400094f	            0x741c	                            je 0x400096d	       351	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000951	            0x39ce	                            cmp esi, ecx	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000953	            0x7fc9	                            jg 0x400091e	       347	pretty.c	WHILE_3	FUNCTION_16	FOR_1
0x4000955	      0xb800000000	                              mov eax, 0	       355	pretty.c	WHILE_3	FUNCTION_16
0x400095a	              0xc3	                                     ret	       355	pretty.c	WHILE_3	FUNCTION_16
0x400095b	      0xb800000000	                              mov eax, 0	       355	pretty.c	WHILE_3	FUNCTION_16
0x4000960	              0xc3	                                     ret	       355	pretty.c	WHILE_3	FUNCTION_16
0x4000961	      0xb801000000	                              mov eax, 1	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x4000966	              0xc3	                                     ret	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x4000967	      0xb801000000	                              mov eax, 1	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x400096c	              0xc3	                                     ret	       350	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_1
0x400096d	      0xb801000000	                              mov eax, 1	       352	pretty.c	WHILE_3	FUNCTION_16	FOR_1	IF_2
0x4000972	              0xc3	                                     ret	       356	pretty.c	WHILE_3	FUNCTION_16
last_line_length	DO,0:functions,0:IF,1:ELSE,0:SWITCH,0:FOR,1:CALL,0:WHILE,0	17
0x400005b	          0x8b4708	                mov eax, dword [rdi + 8]	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x400005e	          0x83e801	                              sub eax, 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000061	            0x89c2	                            mov edx, eax	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000063	            0x85c0	                           test eax, eax	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000065	            0x781d	                            js 0x4000084	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000067	        0x488b7710	            mov rsi, qword [rdi + 0x10] 	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x400006b	          0x4863c8	                         movsxd rcx, eax	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x400006e	        0x803c0e0a	               cmp byte [rsi + rcx], 0xa	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000072	            0x750b	                           jne 0x400007f	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000074	            0xeb0e	                           jmp 0x4000084	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000076	          0x4863ca	                         movsxd rcx, edx	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x4000079	        0x803c0e0a	               cmp byte [rsi + rcx], 0xa	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x400007d	            0x7405	                            je 0x4000084	       259	pretty.c	WHILE_3	FUNCTION_13	FOR_1	IF_1
0x400007f	          0x83ea01	                              sub edx, 1	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000082	            0x79f2	                           jns 0x4000076	       258	pretty.c	WHILE_3	FUNCTION_13	FOR_1
0x4000084	            0x29d0	                            sub eax, edx	       261	pretty.c	WHILE_3	FUNCTION_13
0x4000086	              0xc3	                                     ret	       262	pretty.c	WHILE_3	FUNCTION_13
get_one_line	DO,0:functions,0:IF,2:ELSE,0:SWITCH,0:FOR,1:CALL,0:WHILE,0	9
0x4000040	      0xb800000000	                              mov eax, 0	       191	pretty.c	WHILE_3	FUNCTION_8
0x4000045	        0x4883c701	                              add rdi, 1	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000049	         0xfb657ff	               movzx edx, byte [rdi - 1]	       194	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x400004d	            0x84d2	                             test dl, dl	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x400004f	            0x7408	                            je 0x4000059	       195	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_1
0x4000051	          0x83c001	                              add eax, 1	       197	pretty.c	WHILE_3	FUNCTION_8	FOR_1
0x4000054	          0x80fa0a	                             cmp dl, 0xa	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0x4000057	            0x75ec	                           jne 0x4000045	       198	pretty.c	WHILE_3	FUNCTION_8	FOR_1	IF_2
0x4000059	            0xf3c3	                                     ret	       202	pretty.c	WHILE_3	FUNCTION_8
match_placeholder_arg	DO,0:functions,0:IF,3:ELSE,0:SWITCH,0:FOR,0:CALL,1:WHILE,0	24
0x40000bf	           0xfb606	                   movzx eax, byte [rsi]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40000c2	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40000c4	            0x7433	                            je 0x40000f9	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40000c6	        0x4883c701	                              add rdi, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40000ca	        0x4883c601	                              add rsi, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40000ce	          0x3a47ff	                  cmp al, byte [rdi - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40000d1	            0x74ec	            je sym.match_placeholder_arg	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40000d3	      0xb800000000	                              mov eax, 0	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x40000d8	              0xc3	                                     ret	      1065	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_1
0x40000d9	        0x4883c701	                              add rdi, 1	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000dd	          0x48893a	                    mov qword [rdx], rdi	      1067	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000e0	      0xb801000000	                              mov eax, 1	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000e5	              0xc3	                                     ret	      1068	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000e6	      0xb800000000	                              mov eax, 0	      1074	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
0x40000eb	          0x80f929	                            cmp cl, 0x29	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x40000ee	            0x7513	                           jne 0x4000103	      1070	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x40000f0	          0x48893a	                    mov qword [rdx], rdi	      1071	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x40000f3	      0xb801000000	                              mov eax, 1	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x40000f8	              0xc3	                                     ret	      1072	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_3
0x40000f9	           0xfb60f	                   movzx ecx, byte [rdi]	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000fc	          0x80f92c	                            cmp cl, 0x2c	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x40000ff	            0x75e5	                           jne 0x40000e6	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4000101	            0xebd6	                           jmp 0x40000d9	      1066	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38	IF_2
0x4000103	            0xf3c3	                                     ret	      1075	pretty.c	WHILE_3	ELSE_5	ELSE_6	FUNCTION_38
has_non_ascii	DO,0:functions,0:IF,2:ELSE,0:SWITCH,0:FOR,0:CALL,1:WHILE,1	17
0x4000cef	          0x4885ff	                           test rdi, rdi	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000cf2	            0x750b	                           jne 0x4000cff	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000cf4	            0xeb1a	                           jmp 0x4000d10	       213	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000cf6	          0x83f81b	                           cmp eax, 0x1b	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000cf9	            0x741b	                            je 0x4000d16	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000cfb	            0x84d2	                             test dl, dl	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000cfd	            0x7817	                            js 0x4000d16	       216	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2	CALL_1
0x4000cff	        0x4883c701	                              add rdi, 1	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d03	         0xfb657ff	               movzx edx, byte [rdi - 1]	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d07	           0xfbec2	                           movsx eax, dl	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d0a	            0x85c0	                           test eax, eax	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d0c	            0x75e8	                           jne 0x4000cf6	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d0e	            0xf3c3	                                     ret	       215	pretty.c	WHILE_3	FUNCTION_10	WHILE_1
0x4000d10	      0xb800000000	                              mov eax, 0	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000d15	              0xc3	                                     ret	       214	pretty.c	WHILE_3	FUNCTION_10	IF_1
0x4000d16	      0xb801000000	                              mov eax, 1	       217	pretty.c	WHILE_3	FUNCTION_10	WHILE_1	IF_2
0x4000d1b	              0xc3	                                     ret	       220	pretty.c	WHILE_3	FUNCTION_10
pp_title_line	DO,0:functions,0:IF,9:ELSE,2:SWITCH,0:FOR,2:CALL,20:WHILE,0	200
0x400327c	            0x4157	                                push r15	      1613	pretty.c	FUNCTION_46
0x400327e	            0x4156	                                push r14	      1613	pretty.c	FUNCTION_46
0x4003280	            0x4155	                                push r13	      1613	pretty.c	FUNCTION_46
0x4003282	            0x4154	                                push r12	      1613	pretty.c	FUNCTION_46
0x4003284	              0x55	                                push rbp	      1613	pretty.c	FUNCTION_46
0x4003285	              0x53	                                push rbx	      1613	pretty.c	FUNCTION_46
0x4003286	        0x4883ec28	                           sub rsp, 0x28	      1613	pretty.c	FUNCTION_46
0x400328a	          0x4889fd	                            mov rbp, rdi	      1613	pretty.c	FUNCTION_46
0x400328d	          0x4989f4	                            mov r12, rsi	      1613	pretty.c	FUNCTION_46
0x4003290	          0x4989d5	                            mov r13, rdx	      1613	pretty.c	FUNCTION_46
0x4003293	          0x4989cf	                            mov r15, rcx	      1613	pretty.c	FUNCTION_46
0x4003296	          0x4489c3	                            mov ebx, r8d	      1613	pretty.c	FUNCTION_46
0x4003299	    0x64488b042528	                mov rax, qword fs:[0x28]	      1613	pretty.c	FUNCTION_46
0x40032a2	      0x4889442418	             mov qword [rsp + 0x18], rax	      1613	pretty.c	FUNCTION_46
0x40032a7	            0x31c0	                            xor eax, eax	      1613	pretty.c	FUNCTION_46
0x40032a9	      0xbe50000000	                           mov esi, 0x50	      1617	pretty.c	FUNCTION_46	CALL_1
0x40032ae	          0x4889e7	                            mov rdi, rsp	      1617	pretty.c	FUNCTION_46	CALL_1
0x40032b1	      0xe800000000	                          call 0x40032b6	      1617	pretty.c	FUNCTION_46	CALL_1
0x40032b6	        0x837d1000	               cmp dword [rbp + 0x10], 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032ba	      0xba00000000	                              mov edx, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032bf	      0xb800000000	                              mov eax, 0	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032c4	        0x480f45d0	                         cmovne rdx, rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032c8	        0x498b3424	                    mov rsi, qword [r12]	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032cc	          0x4889e7	                            mov rdi, rsp	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032cf	      0xe800000000	                          call 0x40032d4	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032d4	        0x49890424	                    mov qword [r12], rax	      1618	pretty.c	FUNCTION_46	CALL_2
0x40032d8	      0x488b442408	                mov rax, qword [rsp + 8]	      1621	pretty.c	FUNCTION_46	CALL_3
0x40032dd	    0x488db0000400	                  lea rsi, [rax + 0x400]	      1621	pretty.c	FUNCTION_46	CALL_3
0x40032e4	          0x4c89ef	                            mov rdi, r13	      1621	pretty.c	FUNCTION_46	CALL_3
0x40032e7	      0xe800000000	                          call 0x40032ec	      1621	pretty.c	FUNCTION_46	CALL_3
0x40032ec	        0x837d3400	               cmp dword [rbp + 0x34], 0	      1622	pretty.c	FUNCTION_46	IF_1
0x40032f0	            0x7470	                            je 0x4003362	      1622	pretty.c	FUNCTION_46	IF_1
0x40032f2	        0x488b7550	            mov rsi, qword [rbp + 0x50] 	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x40032f6	          0x4885f6	                           test rsi, rsi	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x40032f9	            0x7408	                            je 0x4003303	      1623	pretty.c	FUNCTION_46	IF_1	IF_2
0x40032fb	          0x4c89ef	                            mov rdi, r13	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x40032fe	      0xe800000000	                          call 0x4003303	      1624	pretty.c	FUNCTION_46	IF_1	CALL_4
0x4003303	      0x4c8b742408	                mov r14, qword [rsp + 8]	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4003308	      0x4c8b642410	            mov r12, qword [rsp + 0x10] 	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400330d	      0xba00000000	                              mov edx, 0	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4003312	          0x4489f6	                           mov esi, r14d	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4003315	          0x4c89e7	                            mov rdi, r12	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4003318	      0xe8dad5ffff	         call sym.needs_rfc2047_encoding	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400331d	            0x85c0	                           test eax, eax	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x400331f	            0x7419	                            je 0x400333a	      1625	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_5
0x4003321	    0x41b800000000	                              mov r8d, 0	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4003327	          0x4c89f9	                            mov rcx, r15	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400332a	          0x4c89f2	                            mov rdx, r14	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400332d	          0x4c89e6	                            mov rsi, r12	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4003330	          0x4c89ef	                            mov rdi, r13	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4003333	      0xe898d1ffff	                    call sym.add_rfc2047	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x4003338	            0xeb33	                           jmp 0x400336d	      1626	pretty.c	FUNCTION_46	IF_1	IF_3	CALL_6
0x400333a	          0x4c89ef	                            mov rdi, r13	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x400333d	      0xe819cdffff	               call sym.last_line_length	      1630	pretty.c	FUNCTION_46	IF_1	CALL_8
0x4003342	            0xf7d8	                                 neg eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003344	            0x89c1	                            mov ecx, eax	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003346	    0x41b94e000000	                           mov r9d, 0x4e	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400334c	    0x41b801000000	                              mov r8d, 1	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003352	          0x4489f2	                           mov edx, r14d	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003355	          0x4c89e6	                            mov rsi, r12	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003358	          0x4c89ef	                            mov rdi, r13	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x400335b	      0xe800000000	                          call 0x4003360	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003360	            0xeb0b	                           jmp 0x400336d	      1629	pretty.c	FUNCTION_46	IF_1	ELSE_1	CALL_7
0x4003362	          0x4889e6	                            mov rsi, rsp	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x4003365	          0x4c89ef	                            mov rdi, r13	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x4003368	      0xe800000000	                          call 0x400336d	      1632	pretty.c	FUNCTION_46	ELSE_2	CALL_9
0x400336d	        0x498b4500	                    mov rax, qword [r13]	       141	strbuf.h	FUNCTION_73
0x4003371	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x4003374	            0x740a	                            je 0x4003380	       141	strbuf.h	FUNCTION_73
0x4003376	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400337a	        0x49394508	                cmp qword [r13 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x400337e	            0x750d	                           jne 0x400338d	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003380	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003385	          0x4c89ef	                            mov rdi, r13	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003388	      0xe800000000	                          call 0x400338d	       228	strbuf.h	FUNCTION_75	CALL_2
0x400338d	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003391	        0x498b4508	                mov rax, qword [r13 + 8]	       229	strbuf.h	FUNCTION_75
0x4003395	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x4003399	        0x49894d08	                mov qword [r13 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x400339d	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x40033a1	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x40033a5	        0x498b4508	                mov rax, qword [r13 + 8]	       230	strbuf.h	FUNCTION_75
0x40033a9	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x40033ad	            0x85db	                           test ebx, ebx	      1636	pretty.c	FUNCTION_46	IF_4
0x40033af	            0x752e	                           jne 0x40033df	      1636	pretty.c	FUNCTION_46	IF_4
0x40033b1	    0x448ba5800000	           mov r12d, dword [rbp + 0x80] 	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033b8	          0x4585e4	                         test r12d, r12d	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033bb	            0x743b	                            je 0x40033f8	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033bd	        0x4c8b7578	            mov r14, qword [rbp + 0x78] 	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033c1	          0x4863c3	                         movsxd rax, ebx	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033c4	        0x48c1e004	                              shl rax, 4	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033c8	        0x498b3c06	              mov rdi, qword [r14 + rax]	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033cc	      0xe800000000	                          call 0x40033d1	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033d1	            0x85c0	                           test eax, eax	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033d3	            0x750e	                           jne 0x40033e3	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x40033d5	          0x83c301	                              add ebx, 1	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033d8	          0x4439e3	                           cmp ebx, r12d	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033db	            0x75e4	                           jne 0x40033c1	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033dd	            0xeb19	                           jmp 0x40033f8	      1638	pretty.c	FUNCTION_46	IF_4	FOR_1
0x40033df	            0x85db	                           test ebx, ebx	      1646	pretty.c	FUNCTION_46	IF_6
0x40033e1	            0x7e15	                           jle 0x40033f8	      1646	pretty.c	FUNCTION_46	IF_6
0x40033e3	          0x4c89fa	                            mov rdx, r15	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x40033e6	      0xbe00000000	                              mov esi, 0	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x40033eb	          0x4c89ef	                            mov rdi, r13	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x40033ee	      0xb800000000	                              mov eax, 0	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x40033f3	      0xe800000000	                          call 0x40033f8	      1651	pretty.c	FUNCTION_46	IF_6	CALL_12
0x40033f8	        0x488b7508	                mov rsi, qword [rbp + 8]	      1653	pretty.c	FUNCTION_46	IF_7
0x40033fc	          0x4885f6	                           test rsi, rsi	      1653	pretty.c	FUNCTION_46	IF_7
0x40033ff	            0x7423	                            je 0x4003424	      1653	pretty.c	FUNCTION_46	IF_7
0x4003401	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003406	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x400340d	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003410	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003412	          0x4889ca	                            mov rdx, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003415	          0x48f7d2	                                 not rdx	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003418	        0x488d52ff	                      lea rdx, [rdx - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x400341c	          0x4c89ef	                            mov rdi, r13	       279	strbuf.h	FUNCTION_76	CALL_2
0x400341f	      0xe800000000	                          call 0x4003424	       279	strbuf.h	FUNCTION_76	CALL_2
0x4003424	          0x8b4500	                    mov eax, dword [rbp]	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4003427	          0x83e806	                              sub eax, 6	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x400342a	          0x83f801	                              cmp eax, 1	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x400342d	     0xf870a010000	                            ja 0x400353d	      1656	pretty.c	FUNCTION_46	IF_8	CALL_14
0x4003433	        0x498b4500	                    mov rax, qword [r13]	       141	strbuf.h	FUNCTION_73
0x4003437	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x400343a	            0x740a	                            je 0x4003446	       141	strbuf.h	FUNCTION_73
0x400343c	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003440	        0x49394508	                cmp qword [r13 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003444	            0x750d	                           jne 0x4003453	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x4003446	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x400344b	          0x4c89ef	                            mov rdi, r13	       228	strbuf.h	FUNCTION_75	CALL_2
0x400344e	      0xe800000000	                          call 0x4003453	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003453	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003457	        0x498b4508	                mov rax, qword [r13 + 8]	       229	strbuf.h	FUNCTION_75
0x400345b	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x400345f	        0x49894d08	                mov qword [r13 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003463	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003467	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x400346b	        0x498b4508	                mov rax, qword [r13 + 8]	       230	strbuf.h	FUNCTION_75
0x400346f	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003473	    0x83bd80000000	               cmp dword [rbp + 0x80], 0	      1660	pretty.c	FUNCTION_46	IF_9
0x400347a	     0xf84a3000000	                            je 0x4003523	      1660	pretty.c	FUNCTION_46	IF_9
0x4003480	    0x41bc00000000	                             mov r12d, 0	      1639	pretty.c	FUNCTION_46	IF_4	FOR_1	IF_5	CALL_11
0x4003486	    0x49c7c6ffffff	             mov r14, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_76	CALL_2
0x400348d	          0x4963dc	                        movsxd rbx, r12d	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4003490	        0x48c1e304	                              shl rbx, 4	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4003494	        0x488b4578	            mov rax, qword [rbp + 0x78] 	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x4003498	        0x488b3418	              mov rsi, qword [rax + rbx]	      1663	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_16
0x400349c	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034a1	          0x4c89f1	                            mov rcx, r14	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034a4	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034a7	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034a9	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034ac	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034af	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034b3	          0x4c89ef	                            mov rdi, r13	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034b6	      0xe800000000	                          call 0x40034bb	       279	strbuf.h	FUNCTION_76	CALL_2
0x40034bb	        0x488b4578	            mov rax, qword [rbp + 0x78] 	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40034bf	        0x488b3c18	              mov rdi, qword [rax + rbx]	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40034c3	      0xe800000000	                          call 0x40034c8	      1664	pretty.c	FUNCTION_46	IF_9	FOR_2	CALL_17
0x40034c8	        0x4183c401	                             add r12d, 1	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40034cc	    0x4439a5800000	           cmp dword [rbp + 0x80], r12d 	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40034d3	            0x77b8	                            ja 0x400348d	      1662	pretty.c	FUNCTION_46	IF_9	FOR_2
0x40034d5	        0x488d7d78	                   lea rdi, [rbp + 0x78]	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x40034d9	      0xbe00000000	                              mov esi, 0	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x40034de	      0xe800000000	                          call 0x40034e3	      1666	pretty.c	FUNCTION_46	IF_9	CALL_18
0x40034e3	        0x498b4500	                    mov rax, qword [r13]	       141	strbuf.h	FUNCTION_73
0x40034e7	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_73
0x40034ea	            0x740a	                            je 0x40034f6	       141	strbuf.h	FUNCTION_73
0x40034ec	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40034f0	        0x49394508	                cmp qword [r13 + 8], rax	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40034f4	            0x750d	                           jne 0x4003503	       227	strbuf.h	FUNCTION_75	IF_1	CALL_1
0x40034f6	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_75	CALL_2
0x40034fb	          0x4c89ef	                            mov rdi, r13	       228	strbuf.h	FUNCTION_75	CALL_2
0x40034fe	      0xe800000000	                          call 0x4003503	       228	strbuf.h	FUNCTION_75	CALL_2
0x4003503	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       229	strbuf.h	FUNCTION_75
0x4003507	        0x498b4508	                mov rax, qword [r13 + 8]	       229	strbuf.h	FUNCTION_75
0x400350b	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_75
0x400350f	        0x49894d08	                mov qword [r13 + 8], rcx	       229	strbuf.h	FUNCTION_75
0x4003513	        0xc604020a	               mov byte [rdx + rax], 0xa	       229	strbuf.h	FUNCTION_75
0x4003517	        0x498b5510	            mov rdx, qword [r13 + 0x10] 	       230	strbuf.h	FUNCTION_75
0x400351b	        0x498b4508	                mov rax, qword [r13 + 8]	       230	strbuf.h	FUNCTION_75
0x400351f	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_75
0x4003523	          0x4889e7	                            mov rdi, rsp	      1670	pretty.c	FUNCTION_46	CALL_20
0x4003526	      0xe800000000	                          call 0x400352b	      1670	pretty.c	FUNCTION_46	CALL_20
0x400352b	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1671	pretty.c	FUNCTION_46
0x4003530	    0x644833042528	                xor rax, qword fs:[0x28]	      1671	pretty.c	FUNCTION_46
0x4003539	            0x7416	                            je 0x4003551	      1671	pretty.c	FUNCTION_46
0x400353b	            0xeb0f	                           jmp 0x400354c	      1671	pretty.c	FUNCTION_46
0x400353d	    0x83bd80000000	               cmp dword [rbp + 0x80], 0	      1660	pretty.c	FUNCTION_46	IF_9
0x4003544	     0xf8536ffffff	                           jne 0x4003480	      1660	pretty.c	FUNCTION_46	IF_9
0x400354a	            0xebd7	                           jmp 0x4003523	      1660	pretty.c	FUNCTION_46	IF_9
0x400354c	      0xe800000000	                          call 0x4003551	      1671	pretty.c	FUNCTION_46
0x4003551	        0x4883c428	                           add rsp, 0x28	      1671	pretty.c	FUNCTION_46
0x4003555	              0x5b	                                 pop rbx	      1671	pretty.c	FUNCTION_46
0x4003556	              0x5d	                                 pop rbp	      1671	pretty.c	FUNCTION_46
0x4003557	            0x415c	                                 pop r12	      1671	pretty.c	FUNCTION_46
0x4003559	            0x415d	                                 pop r13	      1671	pretty.c	FUNCTION_46
0x400355b	            0x415e	                                 pop r14	      1671	pretty.c	FUNCTION_46
0x400355d	            0x415f	                                 pop r15	      1671	pretty.c	FUNCTION_46
0x400355f	              0xc3	                                     ret	      1671	pretty.c	FUNCTION_46
get_header	DO,0:functions,0:IF,0:ELSE,0:SWITCH,0:FOR,0:CALL,2:WHILE,0	19
0x40006ac	        0x4883ec18	                           sub rsp, 0x18	       561	pretty.c	WHILE_3	FUNCTION_23
0x40006b0	    0x64488b042528	                mov rax, qword fs:[0x28]	       561	pretty.c	WHILE_3	FUNCTION_23
0x40006b9	      0x4889442408	                mov qword [rsp + 8], rax	       561	pretty.c	WHILE_3	FUNCTION_23
0x40006be	            0x31c0	                            xor eax, eax	       561	pretty.c	WHILE_3	FUNCTION_23
0x40006c0	          0x4889e2	                            mov rdx, rsp	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40006c3	      0xe800000000	                          call 0x40006c8	       563	pretty.c	WHILE_3	FUNCTION_23	CALL_1
0x40006c8	          0x4885c0	                           test rax, rax	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006cb	            0x740e	                            je 0x40006db	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006cd	        0x488b3424	                    mov rsi, qword [rsp]	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006d1	          0x4889c7	                            mov rdi, rax	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006d4	      0xe800000000	                          call 0x40006d9	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006d9	            0xeb05	                           jmp 0x40006e0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006db	      0xb800000000	                              mov eax, 0	       564	pretty.c	WHILE_3	FUNCTION_23	CALL_2
0x40006e0	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       565	pretty.c	WHILE_3	FUNCTION_23
0x40006e5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       565	pretty.c	WHILE_3	FUNCTION_23
0x40006ee	            0x7405	                            je 0x40006f5	       565	pretty.c	WHILE_3	FUNCTION_23
0x40006f0	      0xe800000000	                          call 0x40006f5	       565	pretty.c	WHILE_3	FUNCTION_23
0x40006f5	        0x4883c418	                           add rsp, 0x18	       565	pretty.c	WHILE_3	FUNCTION_23
0x40006f9	              0xc3	                                     ret	       565	pretty.c	WHILE_3	FUNCTION_23
format_commit_message	DO,0:functions,0:IF,5:ELSE,1:SWITCH,0:FOR,0:CALL,10:WHILE,0	100
0x40030e1	            0x4156	                                push r14	      1510	pretty.c	FUNCTION_44
0x40030e3	            0x4155	                                push r13	      1510	pretty.c	FUNCTION_44
0x40030e5	            0x4154	                                push r12	      1510	pretty.c	FUNCTION_44
0x40030e7	              0x55	                                push rbp	      1510	pretty.c	FUNCTION_44
0x40030e8	              0x53	                                push rbx	      1510	pretty.c	FUNCTION_44
0x40030e9	    0x4881ece00000	                           sub rsp, 0xe0	      1510	pretty.c	FUNCTION_44
0x40030f0	          0x4989fc	                            mov r12, rdi	      1510	pretty.c	FUNCTION_44
0x40030f3	          0x4989f6	                            mov r14, rsi	      1510	pretty.c	FUNCTION_44
0x40030f6	          0x4889d3	                            mov rbx, rdx	      1510	pretty.c	FUNCTION_44
0x40030f9	          0x4889ca	                            mov rdx, rcx	      1510	pretty.c	FUNCTION_44
0x40030fc	    0x64488b042528	                mov rax, qword fs:[0x28]	      1510	pretty.c	FUNCTION_44
0x4003105	    0x48898424d800	             mov qword [rsp + 0xd8], rax	      1510	pretty.c	FUNCTION_44
0x400310d	            0x31c0	                            xor eax, eax	      1510	pretty.c	FUNCTION_44
0x400310f	        0x4c8b6958	            mov r13, qword [rcx + 0x58] 	      1512	pretty.c	FUNCTION_44
0x4003113	      0x488d6c2410	                   lea rbp, [rsp + 0x10]	        90	string3.h	FUNCTION_86	CALL_6
0x4003118	      0xb918000000	                           mov ecx, 0x18	        90	string3.h	FUNCTION_86	CALL_6
0x400311d	          0x4889ef	                            mov rdi, rbp	        90	string3.h	FUNCTION_86	CALL_6
0x4003120	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_86	CALL_6
0x4003123	      0x4c89642410	             mov qword [rsp + 0x10], r12	      1516	pretty.c	FUNCTION_44
0x4003128	      0x4889542418	             mov qword [rsp + 0x18], rdx	      1517	pretty.c	FUNCTION_44
0x400312d	        0x488b4308	                mov rax, qword [rbx + 8]	      1518	pretty.c	FUNCTION_44
0x4003131	    0x48898424c800	             mov qword [rsp + 0xc8], rax	      1518	pretty.c	FUNCTION_44
0x4003139	      0x488d742468	                   lea rsi, [rsp + 0x68]	      1523	pretty.c	FUNCTION_44	CALL_2
0x400313e	      0xba00000000	                              mov edx, 0	      1523	pretty.c	FUNCTION_44	CALL_2
0x4003143	          0x4c89e7	                            mov rdi, r12	      1523	pretty.c	FUNCTION_44	CALL_2
0x4003146	      0xe800000000	                          call 0x400314b	      1523	pretty.c	FUNCTION_44	CALL_2
0x400314b	      0x4889442460	             mov qword [rsp + 0x60], rax	      1523	pretty.c	FUNCTION_44	CALL_2
0x4003150	          0x4889e9	                            mov rcx, rbp	      1527	pretty.c	FUNCTION_44	CALL_3
0x4003153	      0xba00000000	                              mov edx, 0	      1527	pretty.c	FUNCTION_44	CALL_3
0x4003158	          0x4c89f6	                            mov rsi, r14	      1527	pretty.c	FUNCTION_44	CALL_3
0x400315b	          0x4889df	                            mov rdi, rbx	      1527	pretty.c	FUNCTION_44	CALL_3
0x400315e	      0xe800000000	                          call 0x4003163	      1527	pretty.c	FUNCTION_44	CALL_3
0x4003163	      0x488b542470	            mov rdx, qword [rsp + 0x70] 	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4003168	          0x4885d2	                           test rdx, rdx	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400316b	            0x7513	                           jne 0x4003180	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400316d	    0x48837c247800	               cmp qword [rsp + 0x78], 0	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4003173	            0x750b	                           jne 0x4003180	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4003175	    0x4883bc248000	               cmp qword [rsp + 0x80], 0	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x400317e	            0x744d	                            je 0x40031cd	       907	pretty.c	WHILE_3	FUNCTION_34	IF_1
0x4003180	    0x488bb424c800	            mov rsi, qword [rsp + 0xc8] 	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x4003188	        0x483b7308	                cmp rsi, qword [rbx + 8]	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x400318c	            0x7315	                           jae 0x40031a3	       910	pretty.c	WHILE_3	FUNCTION_34	IF_2
0x400318e	    0x4c8b84248000	              mov r8, qword [rsp + 0x80]	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x4003196	      0x488b4c2478	            mov rcx, qword [rsp + 0x78] 	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x400319b	          0x4889df	                            mov rdi, rbx	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x400319e	      0xe878d6ffff	                    call sym.strbuf_wrap	       911	pretty.c	WHILE_3	FUNCTION_34	CALL_1
0x40031a3	        0x488b4308	                mov rax, qword [rbx + 8]	       912	pretty.c	WHILE_3	FUNCTION_34
0x40031a7	    0x48898424c800	             mov qword [rsp + 0xc8], rax	       912	pretty.c	WHILE_3	FUNCTION_34
0x40031af	    0x48c744247000	               mov qword [rsp + 0x70], 0	       913	pretty.c	WHILE_3	FUNCTION_34
0x40031b8	    0x48c744247800	               mov qword [rsp + 0x78], 0	       914	pretty.c	WHILE_3	FUNCTION_34
0x40031c1	    0x48c784248000	               mov qword [rsp + 0x80], 0	       915	pretty.c	WHILE_3	FUNCTION_34
0x40031cd	          0x4d85ed	                           test r13, r13	      1531	pretty.c	FUNCTION_44	IF_1
0x40031d0	            0x7413	                            je 0x40031e5	      1531	pretty.c	FUNCTION_44	IF_1
0x40031d2	          0x4c89ee	                            mov rsi, r13	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031d5	      0xbf00000000	                              mov edi, 0	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031da	      0xe800000000	                          call 0x40031df	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031df	            0x85c0	                           test eax, eax	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031e1	            0x755a	                           jne 0x400323d	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031e3	            0xeb22	                           jmp 0x4003207	      1532	pretty.c	FUNCTION_44	IF_1	IF_2	CALL_5
0x40031e5	      0x488b7c2468	            mov rdi, qword [rsp + 0x68] 	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40031ea	          0x4885ff	                           test rdi, rdi	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40031ed	            0x744e	                            je 0x400323d	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40031ef	      0xbe00000000	                              mov esi, 0	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x40031f4	      0xe800000000	                          call 0x40031f9	      1536	pretty.c	FUNCTION_44	ELSE_1	IF_3	CALL_6
0x40031f9	            0x85c0	                           test eax, eax	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40031fb	            0x7540	                           jne 0x400323d	      1535	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x40031fd	      0x4c8b6c2468	            mov r13, qword [rsp + 0x68] 	      1537	pretty.c	FUNCTION_44	ELSE_1	IF_3
0x4003202	          0x4d85ed	                           test r13, r13	      1540	pretty.c	FUNCTION_44	IF_4
0x4003205	            0x7436	                            je 0x400323d	      1540	pretty.c	FUNCTION_44	IF_4
0x4003207	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x400320b	      0x4c8d44240c	                     lea r8, [rsp + 0xc]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4003210	      0xb900000000	                              mov ecx, 0	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4003215	          0x4c89ea	                            mov rdx, r13	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4003218	          0x8b7308	                mov esi, dword [rbx + 8]	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x400321b	      0xe800000000	                          call 0x4003220	      1542	pretty.c	FUNCTION_44	IF_4	CALL_7
0x4003220	          0x4885c0	                           test rax, rax	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x4003223	            0x7418	                            je 0x400323d	      1544	pretty.c	FUNCTION_44	IF_4	IF_5
0x4003225	        0x8b54240c	              mov edx, dword [rsp + 0xc]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4003229	          0x8d4a01	                      lea ecx, [rdx + 1]	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400322c	          0x4863c9	                         movsxd rcx, ecx	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400322f	          0x4863d2	                         movsxd rdx, edx	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4003232	          0x4889c6	                            mov rsi, rax	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4003235	          0x4889df	                            mov rdi, rbx	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x4003238	      0xe800000000	                          call 0x400323d	      1545	pretty.c	FUNCTION_44	IF_4	CALL_8
0x400323d	      0x488b7c2468	            mov rdi, qword [rsp + 0x68] 	      1548	pretty.c	FUNCTION_44	CALL_9
0x4003242	      0xe800000000	                          call 0x4003247	      1548	pretty.c	FUNCTION_44	CALL_9
0x4003247	      0x488b742460	            mov rsi, qword [rsp + 0x60] 	      1549	pretty.c	FUNCTION_44	CALL_10
0x400324c	          0x4c89e7	                            mov rdi, r12	      1549	pretty.c	FUNCTION_44	CALL_10
0x400324f	      0xe800000000	                          call 0x4003254	      1549	pretty.c	FUNCTION_44	CALL_10
0x4003254	    0x488b8424d800	            mov rax, qword [rsp + 0xd8] 	      1550	pretty.c	FUNCTION_44
0x400325c	    0x644833042528	                xor rax, qword fs:[0x28]	      1550	pretty.c	FUNCTION_44
0x4003265	            0x7405	                            je 0x400326c	      1550	pretty.c	FUNCTION_44
0x4003267	      0xe800000000	                          call 0x400326c	      1550	pretty.c	FUNCTION_44
0x400326c	    0x4881c4e00000	                           add rsp, 0xe0	      1550	pretty.c	FUNCTION_44
0x4003273	              0x5b	                                 pop rbx	      1550	pretty.c	FUNCTION_44
0x4003274	              0x5d	                                 pop rbp	      1550	pretty.c	FUNCTION_44
0x4003275	            0x415c	                                 pop r12	      1550	pretty.c	FUNCTION_44
0x4003277	            0x415d	                                 pop r13	      1550	pretty.c	FUNCTION_44
0x4003279	            0x415e	                                 pop r14	      1550	pretty.c	FUNCTION_44
0x400327b	              0xc3	                                     ret	      1550	pretty.c	FUNCTION_44
git_pretty_formats_config	DO,0:functions,0:IF,7:ELSE,2:SWITCH,0:FOR,2:CALL,10:WHILE,0	154
0x4000126	            0x4157	                                push r15	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000128	            0x4156	                                push r14	        45	pretty.c	WHILE_3	FUNCTION_3
0x400012a	            0x4155	                                push r13	        45	pretty.c	WHILE_3	FUNCTION_3
0x400012c	            0x4154	                                push r12	        45	pretty.c	WHILE_3	FUNCTION_3
0x400012e	              0x55	                                push rbp	        45	pretty.c	WHILE_3	FUNCTION_3
0x400012f	              0x53	                                push rbx	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000130	        0x4883ec28	                           sub rsp, 0x28	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000134	          0x4989fe	                            mov r14, rdi	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000137	      0x4889742408	                mov qword [rsp + 8], rsi	        45	pretty.c	WHILE_3	FUNCTION_3
0x400013c	    0x64488b042528	                mov rax, qword fs:[0x28]	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000145	      0x4889442418	             mov qword [rsp + 0x18], rax	        45	pretty.c	WHILE_3	FUNCTION_3
0x400014a	            0x31c0	                            xor eax, eax	        45	pretty.c	WHILE_3	FUNCTION_3
0x400014c	          0x4889fb	                            mov rbx, rdi	        45	pretty.c	WHILE_3	FUNCTION_3
0x400014f	      0xb800000000	                              mov eax, 0	        45	pretty.c	WHILE_3	FUNCTION_3
0x4000154	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000157	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x4000159	     0xf84df010000	                            je 0x400033e	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x400015f	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000163	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000167	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400016a	            0x74e8	                            je 0x4000154	       488	git-compat-util.h	FUNCTION_101	DO_1
0x400016c	    0x41bd00000000	                             mov r13d, 0	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x4000172	      0xe9b2010000	                           jmp 0x4000329	        52	pretty.c	WHILE_3	FUNCTION_3	IF_1
0x4000177	        0x48c1e005	                              shl rax, 5	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x400017b	          0x4889de	                            mov rsi, rbx	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x400017e	        0x498b3c07	              mov rdi, qword [r15 + rax]	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000182	      0xe800000000	                          call 0x4000187	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000187	          0x4189c5	                           mov r13d, eax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x400018a	            0x85c0	                           test eax, eax	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x400018c	     0xf8497010000	                            je 0x4000329	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000192	        0x4183c401	                             add r12d, 1	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000196	          0x4963c4	                        movsxd rax, r12d	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000199	          0x4839e8	                            cmp rax, rbp	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400019c	            0x72d9	                            jb 0x4000177	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400019e	          0x4189ec	                           mov r12d, ebp	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001a1	          0x4863ed	                         movsxd rbp, ebp	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001a4	    0x4c8b2d000000	            mov r13, qword [0x040001ab] 	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001ab	          0x4c39ed	                            cmp rbp, r13	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001ae	            0x7335	                           jae 0x40001e5	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001b0	    0x4c8b3d000000	            mov r15, qword [0x040001b7] 	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001b7	        0x48c1e505	                              shl rbp, 5	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001bb	          0x4c01fd	                            add rbp, r15	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001be	          0x4889de	                            mov rsi, rbx	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001c1	        0x488b7d00	                    mov rdi, qword [rbp]	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001c5	      0xe800000000	                          call 0x40001ca	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001ca	            0x85c0	                           test eax, eax	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001cc	            0x740e	                            je 0x40001dc	        60	pretty.c	WHILE_3	FUNCTION_3	FOR_2	IF_3	CALL_3
0x40001ce	        0x4183c401	                             add r12d, 1	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001d2	          0x4963ec	                        movsxd rbp, r12d	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001d5	          0x4c39ed	                            cmp rbp, r13	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001d8	            0x72dd	                            jb 0x40001b7	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001da	            0xeb09	                           jmp 0x40001e5	        59	pretty.c	WHILE_3	FUNCTION_3	FOR_2
0x40001dc	          0x4885ed	                           test rbp, rbp	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40001df	     0xf85a3000000	                           jne 0x4000288	        66	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x40001e5	        0x4983c501	                              add r13, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001e9	    0x488b05000000	            mov rax, qword [0x040001f0] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001f0	          0x4939c5	                            cmp r13, rax	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001f3	            0x7653	                           jbe 0x4000248	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001f5	      0x488d744030	          lea rsi, [rax + rax*2 + 0x30] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001fa	          0x48d1ee	                              shr rsi, 1	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x40001fd	          0x4939f5	                            cmp r13, rsi	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000200	        0x490f47f5	                          cmova rsi, r13	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000204	    0x488935000000	            mov qword [0x0400020b], rsi 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x400020b	          0x4889f2	                            mov rdx, rsi	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x400020e	    0x48b8ffffffff	          movabs rax, 0x7ffffffffffffff 	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x4000218	          0x4839c6	                            cmp rsi, rax	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x400021b	            0x7614	                           jbe 0x4000231	       795	git-compat-util.h	FUNCTION_109	IF_1	CALL_1
0x400021d	      0xbe20000000	                           mov esi, 0x20	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000222	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000227	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x400022c	      0xe800000000	                          call 0x4000231	       796	git-compat-util.h	FUNCTION_109	IF_1	CALL_2
0x4000231	        0x48c1e605	                              shl rsi, 5	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000235	    0x488b3d000000	            mov rdi, qword [0x0400023c] 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x400023c	      0xe800000000	                          call 0x4000241	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000241	    0x488905000000	            mov qword [0x04000248], rax 	        67	pretty.c	WHILE_3	FUNCTION_3	IF_4	CALL_4
0x4000248	    0x488b05000000	            mov rax, qword [0x0400024f] 	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400024f	          0x4889c5	                            mov rbp, rax	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000252	        0x48c1e505	                              shl rbp, 5	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000256	    0x48032d000000	             add rbp, qword [0x0400025d]	        69	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x400025d	    0x48c745000000	                      mov qword [rbp], 0	        90	string3.h	FUNCTION_86	CALL_6
0x4000265	    0x48c745080000	                  mov qword [rbp + 8], 0	        90	string3.h	FUNCTION_86	CALL_6
0x400026d	    0x48c745100000	               mov qword [rbp + 0x10], 0	        90	string3.h	FUNCTION_86	CALL_6
0x4000275	    0x48c745180000	               mov qword [rbp + 0x18], 0	        90	string3.h	FUNCTION_86	CALL_6
0x400027d	        0x4883c001	                              add rax, 1	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000281	    0x488905000000	            mov qword [0x04000288], rax 	        71	pretty.c	WHILE_3	FUNCTION_3	IF_4
0x4000288	          0x4889df	                            mov rdi, rbx	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x400028b	      0xe800000000	                          call 0x4000290	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x4000290	        0x48894500	                    mov qword [rbp], rax	        74	pretty.c	WHILE_3	FUNCTION_3	CALL_6
0x4000294	    0xc74508080000	                  mov dword [rbp + 8], 8	        75	pretty.c	WHILE_3	FUNCTION_3
0x400029b	      0x488b542408	                mov rdx, qword [rsp + 8]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002a0	          0x4c89f6	                            mov rsi, r14	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002a3	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002a8	      0xe800000000	                          call 0x40002ad	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002ad	          0x4189c5	                           mov r13d, eax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002b0	            0x85c0	                           test eax, eax	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002b2	            0x756f	                           jne 0x4000323	        76	pretty.c	WHILE_3	FUNCTION_3	IF_5	CALL_7
0x40002b4	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x40002b9	          0x4889f8	                            mov rax, rdi	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x40002bc	      0xba00000000	                              mov edx, 0	        79	pretty.c	WHILE_3	FUNCTION_3	IF_6	CALL_8
0x40002c1	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002c4	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002c6	            0x750e	                           jne 0x40002d6	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002c8	      0x4889442410	             mov qword [rsp + 0x10], rax	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002cd	    0xc7450c000000	                mov dword [rbp + 0xc], 0	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x40002d4	            0xeb42	                           jmp 0x4000318	        80	pretty.c	WHILE_3	FUNCTION_3	IF_6
0x40002d6	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002da	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002de	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002e1	            0x74de	                            je 0x40002c1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002e3	          0x4889f8	                            mov rax, rdi	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002e6	      0xba00000000	                              mov edx, 0	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002eb	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002ee	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002f0	            0x7507	                           jne 0x40002f9	       484	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002f2	      0x4889442410	             mov qword [rsp + 0x10], rax	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002f7	            0xeb0f	                           jmp 0x4000308	       485	git-compat-util.h	FUNCTION_101	DO_1	IF_1
0x40002f9	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x40002fd	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000301	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000304	            0x74e5	                            je 0x40002eb	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000306	            0xeb5d	                           jmp 0x4000365	       488	git-compat-util.h	FUNCTION_101	DO_1
0x4000308	    0xc7450c010000	                mov dword [rbp + 0xc], 1	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x400030f	            0xeb07	                           jmp 0x4000318	        82	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7
0x4000311	    0xc74514010000	               mov dword [rbp + 0x14], 1	        84	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000318	      0x488b442410	            mov rax, qword [rsp + 0x10] 	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400031d	        0x48894518	            mov qword [rbp + 0x18], rax 	        85	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000321	            0xeb06	                           jmp 0x4000329	        87	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000323	    0x41bdffffffff	                    mov r13d, 0xffffffff	        77	pretty.c	WHILE_3	FUNCTION_3	IF_5
0x4000329	          0x4489e8	                           mov eax, r13d	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400032c	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000331	    0x644833342528	                xor rsi, qword fs:[0x28]	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400033a	            0x743f	                            je 0x400037b	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400033c	            0xeb38	                           jmp 0x4000376	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400033e	    0x488b2d000000	            mov rbp, qword [0x04000345] 	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000345	          0x4885ed	                           test rbp, rbp	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x4000348	     0xf8450feffff	                            je 0x400019e	        54	pretty.c	WHILE_3	FUNCTION_3	FOR_1
0x400034e	    0x4c8b3d000000	            mov r15, qword [0x04000355] 	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000355	      0xb800000000	                              mov eax, 0	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x400035a	    0x41bc00000000	                             mov r12d, 0	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000360	      0xe912feffff	                           jmp 0x4000177	        55	pretty.c	WHILE_3	FUNCTION_3	FOR_1	IF_2	CALL_2
0x4000365	      0xbe25000000	                           mov esi, 0x25	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x400036a	      0xe800000000	                          call 0x400036f	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x400036f	          0x4885c0	                           test rax, rax	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x4000372	            0x7594	                           jne 0x4000308	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x4000374	            0xeb9b	                           jmp 0x4000311	        81	pretty.c	WHILE_3	FUNCTION_3	ELSE_1	IF_7	CALL_10
0x4000376	      0xe800000000	                          call 0x400037b	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400037b	        0x4883c428	                           add rsp, 0x28	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x400037f	              0x5b	                                 pop rbx	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000380	              0x5d	                                 pop rbp	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000381	            0x415c	                                 pop r12	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000383	            0x415d	                                 pop r13	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000385	            0x415e	                                 pop r14	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000387	            0x415f	                                 pop r15	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
0x4000389	              0xc3	                                     ret	        88	pretty.c	WHILE_3	FUNCTION_3	ELSE_2
