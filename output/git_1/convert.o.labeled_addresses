convert_is_binary	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,0:IF,3:DO,0:SWITCH,0	11
0x4000040	      0xb801000000	                              mov eax, 1	        97	convert.c	FUNCTION_2	IF_1
0x4000045	        0x837e0400	                  cmp dword [rsi + 4], 0	        96	convert.c	FUNCTION_2	IF_1
0x4000049	            0x7514	                           jne 0x400005f	        96	convert.c	FUNCTION_2	IF_1
0x400004b	          0x833e00	                      cmp dword [rsi], 0	        98	convert.c	FUNCTION_2	IF_2
0x400004e	            0x750f	                           jne 0x400005f	        98	convert.c	FUNCTION_2	IF_2
0x4000050	          0x8b4610	            mov eax, dword [rsi + 0x10] 	        97	convert.c	FUNCTION_2	IF_1
0x4000053	          0xc1e807	                              shr eax, 7	        97	convert.c	FUNCTION_2	IF_1
0x4000056	          0x3b4614	            cmp eax, dword [rsi + 0x14] 	        97	convert.c	FUNCTION_2	IF_1
0x4000059	           0xf92c0	                                 setb al	        97	convert.c	FUNCTION_2	IF_1
0x400005c	           0xfb6c0	                           movzx eax, al	        97	convert.c	FUNCTION_2	IF_1
0x400005f	            0xf3c3	                                     ret	       103	convert.c	FUNCTION_2
gather_convert_stats	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,4:DO,0:SWITCH,0	36
0x4000241	              0x53	                                push rbx	       106	convert.c	FUNCTION_3
0x4000242	        0x4883ec20	                           sub rsp, 0x20	       106	convert.c	FUNCTION_3
0x4000246	    0x64488b042528	                mov rax, qword fs:[0x28]	       106	convert.c	FUNCTION_3
0x400024f	      0x4889442418	             mov qword [rsp + 0x18], rax	       106	convert.c	FUNCTION_3
0x4000254	            0x31c0	                            xor eax, eax	       106	convert.c	FUNCTION_3
0x4000256	          0x4885ff	                           test rdi, rdi	       109	convert.c	FUNCTION_3	IF_1
0x4000259	            0x7441	                            je 0x400029c	       109	convert.c	FUNCTION_3	IF_1
0x400025b	          0x4889f3	                            mov rbx, rsi	       109	convert.c	FUNCTION_3	IF_1
0x400025e	          0x4885f6	                           test rsi, rsi	       109	convert.c	FUNCTION_3	IF_1
0x4000261	            0x7439	                            je 0x400029c	       109	convert.c	FUNCTION_3	IF_1
0x4000263	          0x4889e2	                            mov rdx, rsp	       111	convert.c	FUNCTION_3	CALL_1
0x4000266	      0xe833ffffff	                   call sym.gather_stats	       111	convert.c	FUNCTION_3	CALL_1
0x400026b	          0x4889e6	                            mov rsi, rsp	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x400026e	          0x4889df	                            mov rdi, rbx	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000271	      0xe8cafdffff	              call sym.convert_is_binary	       112	convert.c	FUNCTION_3	IF_2	CALL_2
0x4000276	          0x83f801	                              cmp eax, 1	       113	convert.c	FUNCTION_3	IF_2
0x4000279	            0x19c0	                            sbb eax, eax	       113	convert.c	FUNCTION_3	IF_2
0x400027b	            0xf7d0	                                 not eax	       113	convert.c	FUNCTION_3	IF_2
0x400027d	          0x83e004	                              and eax, 4	       113	convert.c	FUNCTION_3	IF_2
0x4000280	            0x89c2	                            mov edx, eax	       115	convert.c	FUNCTION_3	IF_3
0x4000282	          0x83ca02	                               or edx, 2	       115	convert.c	FUNCTION_3	IF_3
0x4000285	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       115	convert.c	FUNCTION_3	IF_3
0x400028a	           0xf45c2	                         cmovne eax, edx	       115	convert.c	FUNCTION_3	IF_3
0x400028d	            0x89c2	                            mov edx, eax	       117	convert.c	FUNCTION_3	IF_4
0x400028f	          0x83ca01	                               or edx, 1	       117	convert.c	FUNCTION_3	IF_4
0x4000292	      0x837c240800	                  cmp dword [rsp + 8], 0	       117	convert.c	FUNCTION_3	IF_4
0x4000297	           0xf45c2	                         cmovne eax, edx	       119	convert.c	FUNCTION_3
0x400029a	            0xeb05	                           jmp 0x40002a1	       119	convert.c	FUNCTION_3
0x400029c	      0xb800000000	                              mov eax, 0	       110	convert.c	FUNCTION_3	IF_1
0x40002a1	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       120	convert.c	FUNCTION_3
0x40002a6	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       120	convert.c	FUNCTION_3
0x40002af	            0x7405	                            je 0x40002b6	       120	convert.c	FUNCTION_3
0x40002b1	      0xe800000000	                          call 0x40002b6	       120	convert.c	FUNCTION_3
0x40002b6	        0x4883c420	                           add rsp, 0x20	       120	convert.c	FUNCTION_3
0x40002ba	              0x5b	                                 pop rbx	       120	convert.c	FUNCTION_3
0x40002bb	              0xc3	                                     ret	       120	convert.c	FUNCTION_3
git_path_check_crlf	functions,0:FOR,0:WHILE,0:ELSE,4:CALL,5:IF,5:DO,0:SWITCH,0	33
0x4000312	        0x488b5708	                mov rdx, qword [rdi + 8]	      1237	convert.c	FUNCTION_31
0x4000316	      0xb802000000	                              mov eax, 2	      1240	convert.c	FUNCTION_31	IF_1
0x400031b	    0x4881fa000000	                              cmp rdx, 0	      1239	convert.c	FUNCTION_31	IF_1	CALL_1
0x4000322	            0x745c	                            je 0x4000380	      1239	convert.c	FUNCTION_31	IF_1	CALL_1
0x4000324	    0x4881fa000000	                              cmp rdx, 0	      1241	convert.c	FUNCTION_31	ELSE_1	IF_2	CALL_2
0x400032b	            0x7448	                            je 0x4000375	      1241	convert.c	FUNCTION_31	ELSE_1	IF_2	CALL_2
0x400032d	          0x4885d2	                           test rdx, rdx	      1243	convert.c	FUNCTION_31	ELSE_2	IF_3	CALL_3
0x4000330	            0x7449	                            je 0x400037b	      1243	convert.c	FUNCTION_31	ELSE_2	IF_3	CALL_3
0x4000332	      0xbf00000000	                              mov edi, 0	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000337	      0xb906000000	                              mov ecx, 6	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x400033c	          0x4889d6	                            mov rsi, rdx	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x400033f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000341	        0x400f97c6	                                seta sil	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000345	           0xf92c1	                                 setb cl	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000348	      0xb803000000	                              mov eax, 3	      1246	convert.c	FUNCTION_31	ELSE_3	IF_4
0x400034d	          0x4038ce	                             cmp sil, cl	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000350	            0x742e	                            je 0x4000380	      1245	convert.c	FUNCTION_31	ELSE_3	IF_4	CALL_4
0x4000352	      0xbf00000000	                              mov edi, 0	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4000357	      0xb905000000	                              mov ecx, 5	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x400035c	          0x4889d6	                            mov rsi, rdx	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x400035f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4000361	           0xf97c0	                                 seta al	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4000364	           0xf92c2	                                 setb dl	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4000367	            0x29d0	                            sub eax, edx	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x4000369	           0xfbec0	                           movsx eax, al	      1247	convert.c	FUNCTION_31	ELSE_4	IF_5	CALL_5
0x400036c	          0x83f801	                              cmp eax, 1	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x400036f	            0x19c0	                            sbb eax, eax	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x4000371	          0x83e005	                              and eax, 5	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x4000374	              0xc3	                                     ret	      1248	convert.c	FUNCTION_31	ELSE_4	IF_5
0x4000375	      0xb801000000	                              mov eax, 1	      1242	convert.c	FUNCTION_31	ELSE_1	IF_2
0x400037a	              0xc3	                                     ret	      1242	convert.c	FUNCTION_31	ELSE_1	IF_2
0x400037b	      0xb800000000	                              mov eax, 0	      1249	convert.c	FUNCTION_31
0x4000380	            0xf3c3	                                     ret	      1250	convert.c	FUNCTION_31
cascade_filter	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,3:IF,2:DO,0:SWITCH,0	29
0x4002800	    0x4881ff000000	                              cmp rdi, 0	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4002807	            0x744e	                            je 0x4002857	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4002809	          0x4885ff	                           test rdi, rdi	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x400280c	            0x7449	                            je 0x4002857	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x400280e	    0x4881fe000000	                              cmp rsi, 0	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4002815	            0x7444	                            je 0x400285b	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4002817	          0x4885f6	                           test rsi, rsi	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x400281a	            0x743f	                            je 0x400285b	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x400281c	              0x55	                                push rbp	      1759	convert.c	FUNCTION_52
0x400281d	              0x53	                                push rbx	      1759	convert.c	FUNCTION_52
0x400281e	        0x4883ec08	                              sub rsp, 8	      1759	convert.c	FUNCTION_52
0x4002822	          0x4889f3	                            mov rbx, rsi	      1759	convert.c	FUNCTION_52
0x4002825	          0x4889fd	                            mov rbp, rdi	      1759	convert.c	FUNCTION_52
0x4002828	      0xbf20040000	                          mov edi, 0x420	      1767	convert.c	FUNCTION_52	CALL_3
0x400282d	      0xe800000000	                          call 0x4002832	      1767	convert.c	FUNCTION_52	CALL_3
0x4002832	        0x48896808	                mov qword [rax + 8], rbp	      1768	convert.c	FUNCTION_52
0x4002836	        0x48895810	             mov qword [rax + 0x10], rbx	      1769	convert.c	FUNCTION_52
0x400283a	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1770	convert.c	FUNCTION_52
0x4002844	    0xc78018040000	              mov dword [rax + 0x418], 0	      1770	convert.c	FUNCTION_52
0x400284e	    0x48c700000000	                      mov qword [rax], 0	      1771	convert.c	FUNCTION_52
0x4002855	            0xeb08	                           jmp 0x400285f	      1772	convert.c	FUNCTION_52
0x4002857	          0x4889f0	                            mov rax, rsi	      1763	convert.c	FUNCTION_52	IF_1
0x400285a	              0xc3	                                     ret	      1763	convert.c	FUNCTION_52	IF_1
0x400285b	          0x4889f8	                            mov rax, rdi	      1765	convert.c	FUNCTION_52	IF_2
0x400285e	              0xc3	                                     ret	      1765	convert.c	FUNCTION_52	IF_2
0x400285f	        0x4883c408	                              add rsp, 8	      1773	convert.c	FUNCTION_52
0x4002863	              0x5b	                                 pop rbx	      1773	convert.c	FUNCTION_52
0x4002864	              0x5d	                                 pop rbp	      1773	convert.c	FUNCTION_52
0x4002865	              0xc3	                                     ret	      1773	convert.c	FUNCTION_52
get_stream_filter	functions,0:FOR,0:WHILE,0:ELSE,1:CALL,6:IF,5:DO,0:SWITCH,0	71
0x4002f35	              0x55	                                push rbp	      1930	convert.c	FUNCTION_58
0x4002f36	              0x53	                                push rbx	      1930	convert.c	FUNCTION_58
0x4002f37	        0x4883ec38	                           sub rsp, 0x38	      1930	convert.c	FUNCTION_58
0x4002f3b	          0x4889f3	                            mov rbx, rsi	      1930	convert.c	FUNCTION_58
0x4002f3e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1930	convert.c	FUNCTION_58
0x4002f47	      0x4889442428	             mov qword [rsp + 0x28], rax	      1930	convert.c	FUNCTION_58
0x4002f4c	            0x31c0	                            xor eax, eax	      1930	convert.c	FUNCTION_58
0x4002f4e	          0x4889fe	                            mov rsi, rdi	      1934	convert.c	FUNCTION_58	CALL_1
0x4002f51	          0x4889e7	                            mov rdi, rsp	      1934	convert.c	FUNCTION_58	CALL_1
0x4002f54	      0xe862d6ffff	                  call sym.convert_attrs	      1934	convert.c	FUNCTION_58	CALL_1
0x4002f59	        0x488b1424	                    mov rdx, qword [rsp]	      1935	convert.c	FUNCTION_58	IF_1
0x4002f5d	          0x4885d2	                           test rdx, rdx	      1935	convert.c	FUNCTION_58	IF_1
0x4002f60	            0x7426	                            je 0x4002f88	      1935	convert.c	FUNCTION_58	IF_1
0x4002f62	      0xb800000000	                              mov eax, 0	      1936	convert.c	FUNCTION_58	IF_1
0x4002f67	      0x48837a2000	               cmp qword [rdx + 0x20], 0	      1935	convert.c	FUNCTION_58	IF_1
0x4002f6c	     0xf85d5000000	                           jne 0x4003047	      1935	convert.c	FUNCTION_58	IF_1
0x4002f72	      0x48837a1000	               cmp qword [rdx + 0x10], 0	      1935	convert.c	FUNCTION_58	IF_1
0x4002f77	     0xf85ca000000	                           jne 0x4003047	      1935	convert.c	FUNCTION_58	IF_1
0x4002f7d	      0x48837a1800	               cmp qword [rdx + 0x18], 0	      1935	convert.c	FUNCTION_58	IF_1
0x4002f82	     0xf85bf000000	                           jne 0x4003047	      1935	convert.c	FUNCTION_58	IF_1
0x4002f88	      0xb800000000	                              mov eax, 0	      1939	convert.c	FUNCTION_58	IF_2
0x4002f8d	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      1938	convert.c	FUNCTION_58	IF_2
0x4002f93	     0xf85ae000000	                           jne 0x4003047	      1938	convert.c	FUNCTION_58	IF_2
0x4002f99	        0x8b44240c	              mov eax, dword [rsp + 0xc]	      1941	convert.c	FUNCTION_58	IF_3
0x4002f9d	          0x83e0fd	                     and eax, 0xfffffffd	      1941	convert.c	FUNCTION_58	IF_3
0x4002fa0	          0x83f805	                              cmp eax, 5	      1941	convert.c	FUNCTION_58	IF_3
0x4002fa3	     0xf8499000000	                            je 0x4003042	      1941	convert.c	FUNCTION_58	IF_3
0x4002fa9	      0xbd00000000	                              mov ebp, 0	      1932	convert.c	FUNCTION_58
0x4002fae	      0x837c241000	               cmp dword [rsp + 0x10], 0	      1944	convert.c	FUNCTION_58	IF_4
0x4002fb3	            0x744d	                            je 0x4003002	      1944	convert.c	FUNCTION_58	IF_4
0x4002fb5	      0xbf58000000	                           mov edi, 0x58	      1911	convert.c	FUNCTION_57	CALL_1
0x4002fba	      0xe800000000	                          call 0x4002fbf	      1911	convert.c	FUNCTION_57	CALL_1
0x4002fbf	          0x4889c5	                            mov rbp, rax	      1911	convert.c	FUNCTION_57	CALL_1
0x4002fc2	          0x4889df	                            mov rdi, rbx	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fc5	      0xe800000000	                          call 0x4002fca	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fca	        0x488d7d24	                   lea rdi, [rbp + 0x24]	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fce	          0x4889c1	                            mov rcx, rax	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fd1	      0xba00000000	                              mov edx, 0	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fd6	      0xbe2d000000	                           mov esi, 0x2d	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fdb	      0xb800000000	                              mov eax, 0	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fe0	      0xe800000000	                          call 0x4002fe5	      1913	convert.c	FUNCTION_57	CALL_2
0x4002fe5	        0x488d7d08	                      lea rdi, [rbp + 8]	      1915	convert.c	FUNCTION_57	CALL_4
0x4002fe9	      0xbe00000000	                              mov esi, 0	      1915	convert.c	FUNCTION_57	CALL_4
0x4002fee	      0xe800000000	                          call 0x4002ff3	      1915	convert.c	FUNCTION_57	CALL_4
0x4002ff3	    0x48c745000000	                      mov qword [rbp], 0	      1916	convert.c	FUNCTION_57
0x4002ffb	    0xc74520000000	               mov dword [rbp + 0x20], 0	      1917	convert.c	FUNCTION_57
0x4003002	        0x8b7c240c	              mov edi, dword [rsp + 0xc]	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4003006	      0xe89ae1ffff	                     call sym.output_eol	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x400300b	          0x83f801	                              cmp eax, 1	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x400300e	            0x7523	                           jne 0x4003033	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4003010	      0xbe10000000	                           mov esi, 0x10	      1663	convert.c	FUNCTION_49	CALL_1
0x4003015	      0xbf01000000	                              mov edi, 1	      1663	convert.c	FUNCTION_49	CALL_1
0x400301a	      0xe800000000	                          call 0x400301f	      1663	convert.c	FUNCTION_49	CALL_1
0x400301f	    0x48c700000000	                      mov qword [rax], 0	      1665	convert.c	FUNCTION_49
0x4003026	          0x4889c6	                            mov rsi, rax	      1948	convert.c	FUNCTION_58	CALL_5
0x4003029	          0x4889ef	                            mov rdi, rbp	      1948	convert.c	FUNCTION_58	CALL_5
0x400302c	      0xe8cff7ffff	                 call sym.cascade_filter	      1948	convert.c	FUNCTION_58	CALL_5
0x4003031	            0xeb14	                           jmp 0x4003047	      1948	convert.c	FUNCTION_58	CALL_5
0x4003033	      0xbe00000000	                              mov esi, 0	      1950	convert.c	FUNCTION_58	CALL_6
0x4003038	          0x4889ef	                            mov rdi, rbp	      1950	convert.c	FUNCTION_58	CALL_6
0x400303b	      0xe8c0f7ffff	                 call sym.cascade_filter	      1950	convert.c	FUNCTION_58	CALL_6
0x4003040	            0xeb05	                           jmp 0x4003047	      1950	convert.c	FUNCTION_58	CALL_6
0x4003042	      0xb800000000	                              mov eax, 0	      1942	convert.c	FUNCTION_58	IF_3
0x4003047	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	      1953	convert.c	FUNCTION_58
0x400304c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1953	convert.c	FUNCTION_58
0x4003055	            0x7405	                            je 0x400305c	      1953	convert.c	FUNCTION_58
0x4003057	      0xe800000000	                          call 0x400305c	      1953	convert.c	FUNCTION_58
0x400305c	        0x4883c438	                           add rsp, 0x38	      1953	convert.c	FUNCTION_58
0x4003060	              0x5b	                                 pop rbx	      1953	convert.c	FUNCTION_58
0x4003061	              0x5d	                                 pop rbp	      1953	convert.c	FUNCTION_58
0x4003062	              0xc3	                                     ret	      1953	convert.c	FUNCTION_58
encode_to_git	functions,0:FOR,0:WHILE,0:ELSE,1:CALL,16:IF,7:DO,0:SWITCH,0	309
0x4000cdb	            0x4157	                                push r15	       390	convert.c	FUNCTION_15
0x4000cdd	            0x4156	                                push r14	       390	convert.c	FUNCTION_15
0x4000cdf	            0x4155	                                push r13	       390	convert.c	FUNCTION_15
0x4000ce1	            0x4154	                                push r12	       390	convert.c	FUNCTION_15
0x4000ce3	              0x55	                                push rbp	       390	convert.c	FUNCTION_15
0x4000ce4	              0x53	                                push rbx	       390	convert.c	FUNCTION_15
0x4000ce5	        0x4883ec28	                           sub rsp, 0x28	       390	convert.c	FUNCTION_15
0x4000ce9	    0x64488b042528	                mov rax, qword fs:[0x28]	       390	convert.c	FUNCTION_15
0x4000cf2	      0x4889442418	             mov qword [rsp + 0x18], rax	       390	convert.c	FUNCTION_15
0x4000cf7	            0x31c0	                            xor eax, eax	       390	convert.c	FUNCTION_15
0x4000cf9	          0x4d85c0	                             test r8, r8	       399	convert.c	FUNCTION_15	IF_1
0x4000cfc	     0xf84e4030000	                            je 0x40010e6	       399	convert.c	FUNCTION_15	IF_1
0x4000d02	          0x4989fe	                            mov r14, rdi	       399	convert.c	FUNCTION_15	IF_1
0x4000d05	          0x4889f5	                            mov rbp, rsi	       399	convert.c	FUNCTION_15	IF_1
0x4000d08	          0x4989d4	                            mov r12, rdx	       399	convert.c	FUNCTION_15	IF_1
0x4000d0b	          0x4989cd	                            mov r13, rcx	       399	convert.c	FUNCTION_15	IF_1
0x4000d0e	          0x4c89c3	                             mov rbx, r8	       399	convert.c	FUNCTION_15	IF_1
0x4000d11	          0x4885f6	                           test rsi, rsi	       399	convert.c	FUNCTION_15	IF_1
0x4000d14	            0x7409	                            je 0x4000d1f	       399	convert.c	FUNCTION_15	IF_1
0x4000d16	          0x4885d2	                           test rdx, rdx	       399	convert.c	FUNCTION_15	IF_1
0x4000d19	     0xf84cc030000	                            je 0x40010eb	       399	convert.c	FUNCTION_15	IF_1
0x4000d1f	          0x4d85ed	                           test r13, r13	       408	convert.c	FUNCTION_15	IF_2
0x4000d22	            0x750e	                           jne 0x4000d32	       408	convert.c	FUNCTION_15	IF_2
0x4000d24	      0xb801000000	                              mov eax, 1	       409	convert.c	FUNCTION_15	IF_2
0x4000d29	          0x4885ed	                           test rbp, rbp	       408	convert.c	FUNCTION_15	IF_2
0x4000d2c	     0xf84b9030000	                            je 0x40010eb	       408	convert.c	FUNCTION_15	IF_2
0x4000d32	        0x4183e110	                           and r9d, 0x10	       393	convert.c	FUNCTION_15
0x4000d36	      0x44894c2408	                mov dword [rsp + 8], r9d	       393	convert.c	FUNCTION_15
0x4000d3b	      0xbe00000000	                              mov esi, 0	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000d40	          0x4889df	                            mov rdi, rbx	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000d43	      0xe800000000	                          call 0x4000d48	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000d48	            0x85c0	                           test eax, eax	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000d4a	     0xf84bb030000	                            je 0x400110b	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4000d50	          0x4c89e2	                            mov rdx, r12	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d53	          0x4889ee	                            mov rsi, rbp	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d56	          0x4889df	                            mov rdi, rbx	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d59	      0xe800000000	                          call 0x4000d5e	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d5e	            0x85c0	                           test eax, eax	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d60	     0xf84d6000000	                            je 0x4000e3c	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4000d66	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d6b	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d70	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d75	      0xe800000000	                          call 0x4000d7a	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d7a	          0x4989c4	                            mov r12, rax	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d7d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d82	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d87	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d8c	      0xe800000000	                          call 0x4000d91	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d91	          0x4989c5	                            mov r13, rax	        54	gettext.h	FUNCTION_74	CALL_2
0x4000d94	          0x4889df	                            mov rdi, rbx	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000d97	      0xe800000000	                          call 0x4000d9c	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000d9c	          0x4889c5	                            mov rbp, rax	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x4000d9f	      0xb800000000	                              mov eax, 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000da4	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000dab	          0x4889ef	                            mov rdi, rbp	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000dae	            0xf2ae	              repne scasb al, byte [rdi]	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000db0	          0x48f7d1	                                 not rcx	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000db3	      0xc6440dfd00	             mov byte [rbp + rcx - 3], 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000db8	          0x4889ea	                            mov rdx, rbp	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000dbb	      0xb800000000	                              mov eax, 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x4000dc0	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000dc3	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000dc5	            0x742b	                            je 0x4000df2	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000dc7	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000dcb	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000dcf	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000dd2	            0x74ec	                            je 0x4000dc0	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000dd4	      0xba00000000	                              mov edx, 0	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000dd9	     0xfb682000000	                   movzx eax, byte [rdx]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000de0	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000de2	            0x740e	                            je 0x4000df2	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000de4	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000de8	          0x3a42ff	                  cmp al, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000deb	            0x74ec	                            je 0x4000dd9	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ded	      0xba00000000	                              mov edx, 0	       289	convert.c	FUNCTION_12	IF_1	IF_2
0x4000df2	          0x4c89f6	                            mov rsi, r14	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000df5	          0x4c89ef	                            mov rdi, r13	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000df8	      0xb800000000	                              mov eax, 0	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000dfd	      0xe800000000	                          call 0x4000e02	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4000e02	          0x4889ef	                            mov rdi, rbp	       295	convert.c	FUNCTION_12	IF_1	IF_2	CALL_10
0x4000e05	      0xe800000000	                          call 0x4000e0a	       295	convert.c	FUNCTION_12	IF_1	IF_2	CALL_10
0x4000e0a	      0x837c240800	                  cmp dword [rsp + 8], 0	       296	convert.c	FUNCTION_12	IF_1	IF_2	IF_4
0x4000e0f	            0x7413	                            je 0x4000e24	       296	convert.c	FUNCTION_12	IF_1	IF_2	IF_4
0x4000e11	          0x4889da	                            mov rdx, rbx	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000e14	          0x4c89f6	                            mov rsi, r14	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000e17	          0x4c89e7	                            mov rdi, r12	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000e1a	      0xb800000000	                              mov eax, 0	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000e1f	      0xe800000000	                          call 0x4000e24	       297	convert.c	FUNCTION_12	IF_1	IF_2	CALL_11
0x4000e24	          0x4889da	                            mov rdx, rbx	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e27	          0x4c89f6	                            mov rsi, r14	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e2a	          0x4c89e7	                            mov rdi, r12	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e2d	      0xb800000000	                              mov eax, 0	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e32	      0xe800000000	                          call 0x4000e37	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e37	      0xe9c8020000	                           jmp 0x4001104	       299	convert.c	FUNCTION_12	IF_1	IF_2	ELSE_1	CALL_12
0x4000e3c	          0x4c89e2	                            mov rdx, r12	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e3f	          0x4889ee	                            mov rsi, rbp	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e42	          0x4889df	                            mov rdi, rbx	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e45	      0xe800000000	                          call 0x4000e4a	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e4a	            0x85c0	                           test eax, eax	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e4c	     0xf84b9020000	                            je 0x400110b	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4000e52	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e57	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e5c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e61	      0xe800000000	                          call 0x4000e66	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e66	          0x4989c4	                            mov r12, rax	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e69	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e6e	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e73	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e78	      0xe800000000	                          call 0x4000e7d	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e7d	          0x4989c5	                            mov r13, rax	        54	gettext.h	FUNCTION_74	CALL_2
0x4000e80	          0x4889df	                            mov rdi, rbx	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4000e83	      0xe800000000	                          call 0x4000e88	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4000e88	          0x4889c5	                            mov rbp, rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4000e8b	          0x4889c2	                            mov rdx, rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4000e8e	      0xb800000000	                              mov eax, 0	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4000e93	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000e96	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000e98	            0x742b	                            je 0x4000ec5	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000e9a	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000e9e	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ea2	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ea5	            0x74ec	                            je 0x4000e93	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ea7	      0xba00000000	                              mov edx, 0	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000eac	     0xfb682000000	                   movzx eax, byte [rdx]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000eb3	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000eb5	            0x740e	                            je 0x4000ec5	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4000eb7	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ebb	          0x3a42ff	                  cmp al, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ebe	            0x74ec	                            je 0x4000eac	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4000ec0	      0xba00000000	                              mov edx, 0	       310	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5
0x4000ec5	          0x4889d1	                            mov rcx, rdx	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000ec8	          0x4c89f6	                            mov rsi, r14	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000ecb	          0x4c89ef	                            mov rdi, r13	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000ece	      0xb800000000	                              mov eax, 0	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000ed3	      0xe800000000	                          call 0x4000ed8	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4000ed8	          0x4889ef	                            mov rdi, rbp	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000edb	      0xe800000000	                          call 0x4000ee0	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4000ee0	      0x837c240800	                  cmp dword [rsp + 8], 0	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4000ee5	            0x7413	                            je 0x4000efa	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4000ee7	          0x4889da	                            mov rdx, rbx	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4000eea	          0x4c89f6	                            mov rsi, r14	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4000eed	          0x4c89e7	                            mov rdi, r12	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4000ef0	      0xb800000000	                              mov eax, 0	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4000ef5	      0xe800000000	                          call 0x4000efa	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4000efa	          0x4889da	                            mov rdx, rbx	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000efd	          0x4c89f6	                            mov rsi, r14	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000f00	          0x4c89e7	                            mov rdi, r12	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000f03	      0xb800000000	                              mov eax, 0	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000f08	      0xe800000000	                          call 0x4000f0d	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000f0d	      0xe9f2010000	                           jmp 0x4001104	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4000f12	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000f17	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000f1c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000f21	      0xe800000000	                          call 0x4000f26	        54	gettext.h	FUNCTION_74	CALL_2
0x4000f26	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_74	CALL_2
0x4000f29	      0x837c240800	                  cmp dword [rsp + 8], 0	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4000f2e	            0x7415	                            je 0x4000f45	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4000f30	      0xb900000000	                              mov ecx, 0	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000f35	          0x4889da	                            mov rdx, rbx	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000f38	          0x4c89f6	                            mov rsi, r14	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000f3b	      0xb800000000	                              mov eax, 0	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000f40	      0xe800000000	                          call 0x4000f45	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4000f45	      0xb900000000	                              mov ecx, 0	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x4000f4a	          0x4889da	                            mov rdx, rbx	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x4000f4d	          0x4c89f6	                            mov rsi, r14	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x4000f50	      0xb800000000	                              mov eax, 0	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x4000f55	      0xe800000000	                          call 0x4000f5a	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x4000f5a	      0xb800000000	                              mov eax, 0	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4000f5f	      0xe987010000	                           jmp 0x40010eb	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4000f64	      0x4c63442410	          movsxd r8, dword [rsp + 0x10] 	       432	convert.c	FUNCTION_15	CALL_7
0x4000f69	          0x4c89f9	                            mov rcx, r15	       432	convert.c	FUNCTION_15	CALL_7
0x4000f6c	      0xba00000000	                              mov edx, 0	       432	convert.c	FUNCTION_15	CALL_7
0x4000f71	          0x4c89f6	                            mov rsi, r14	       432	convert.c	FUNCTION_15	CALL_7
0x4000f74	      0xbf00000000	                              mov edi, 0	       432	convert.c	FUNCTION_15	CALL_7
0x4000f79	      0xe827fcffff	                 call sym.trace_encoding	       432	convert.c	FUNCTION_15	CALL_7
0x4000f7e	      0x837c240800	                  cmp dword [rsp + 8], 0	       453	convert.c	FUNCTION_15	IF_6	CALL_8
0x4000f83	     0xf843e010000	                            je 0x40010c7	       453	convert.c	FUNCTION_15	IF_6	CALL_8
0x4000f89	    0x488b3d000000	            mov rdi, qword [0x04000f90] 	       357	convert.c	FUNCTION_14	CALL_1
0x4000f90	          0x4889de	                            mov rsi, rbx	       357	convert.c	FUNCTION_14	CALL_1
0x4000f93	      0x48897c2408	                mov qword [rsp + 8], rdi	       357	convert.c	FUNCTION_14	CALL_1
0x4000f98	      0xe800000000	                          call 0x4000f9d	       357	convert.c	FUNCTION_14	CALL_1
0x4000f9d	          0x4889c2	                            mov rdx, rax	       357	convert.c	FUNCTION_14	CALL_1
0x4000fa0	          0x4885c0	                           test rax, rax	       360	convert.c	FUNCTION_14	IF_1
0x4000fa3	     0xf841e010000	                            je 0x40010c7	       360	convert.c	FUNCTION_14	IF_1
0x4000fa9	    0x49c7c0ffffff	              mov r8, 0xffffffffffffffff	       362	convert.c	FUNCTION_14	CALL_2
0x4000fb0	      0xb800000000	                              mov eax, 0	       362	convert.c	FUNCTION_14	CALL_2
0x4000fb5	          0x4c89c1	                             mov rcx, r8	       362	convert.c	FUNCTION_14	CALL_2
0x4000fb8	          0x4889df	                            mov rdi, rbx	       362	convert.c	FUNCTION_14	CALL_2
0x4000fbb	            0xf2ae	              repne scasb al, byte [rdi]	       362	convert.c	FUNCTION_14	CALL_2
0x4000fbd	          0x48f7d1	                                 not rcx	       362	convert.c	FUNCTION_14	CALL_2
0x4000fc0	        0x4a8d3401	                     lea rsi, [rcx + r8]	       362	convert.c	FUNCTION_14	CALL_2
0x4000fc4	          0x4c89c1	                             mov rcx, r8	       363	convert.c	FUNCTION_14	CALL_3
0x4000fc7	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       363	convert.c	FUNCTION_14	CALL_3
0x4000fcc	            0xf2ae	              repne scasb al, byte [rdi]	       363	convert.c	FUNCTION_14	CALL_3
0x4000fce	          0x4889c8	                            mov rax, rcx	       363	convert.c	FUNCTION_14	CALL_3
0x4000fd1	          0x48f7d0	                                 not rax	       363	convert.c	FUNCTION_14	CALL_3
0x4000fd4	          0x4c01c0	                             add rax, r8	       363	convert.c	FUNCTION_14	CALL_3
0x4000fd7	      0x4839542408	                cmp qword [rsp + 8], rdx	       364	convert.c	FUNCTION_14
0x4000fdc	            0x7419	                            je 0x4000ff7	       364	convert.c	FUNCTION_14
0x4000fde	         0xfb64aff	               movzx ecx, byte [rdx - 1]	       371	convert.c	FUNCTION_14	CALL_4
0x4000fe2	           0xfb6f9	                           movzx edi, cl	       371	convert.c	FUNCTION_14	CALL_4
0x4000fe5	    0xf68700000000	                      test byte [rdi], 1	       371	convert.c	FUNCTION_14	CALL_4
0x4000fec	            0x7509	                           jne 0x4000ff7	       371	convert.c	FUNCTION_14	CALL_4
0x4000fee	          0x80f92c	                            cmp cl, 0x2c	       371	convert.c	FUNCTION_14	CALL_4
0x4000ff1	     0xf85d0000000	                           jne 0x40010c7	       371	convert.c	FUNCTION_14	CALL_4
0x4000ff7	          0x4801f2	                            add rdx, rsi	       362	convert.c	FUNCTION_14	CALL_2
0x4000ffa	            0x4898	                                    cdqe	       379	convert.c	FUNCTION_14
0x4000ffc	      0x4803442408	                add rax, qword [rsp + 8]	       379	convert.c	FUNCTION_14
0x4001001	          0x4839c2	                            cmp rdx, rax	       373	convert.c	FUNCTION_14
0x4001004	     0xf8440010000	                            je 0x400114a	       373	convert.c	FUNCTION_14
0x400100a	          0x4839c2	                            cmp rdx, rax	       379	convert.c	FUNCTION_14
0x400100d	     0xf83b4000000	                           jae 0x40010c7	       379	convert.c	FUNCTION_14
0x4001013	           0xfb602	                   movzx eax, byte [rdx]	       381	convert.c	FUNCTION_14	CALL_5
0x4001016	           0xfb6d0	                           movzx edx, al	       381	convert.c	FUNCTION_14	CALL_5
0x4001019	    0xf68200000000	                      test byte [rdx], 1	       381	convert.c	FUNCTION_14	CALL_5
0x4001020	     0xf8524010000	                           jne 0x400114a	       381	convert.c	FUNCTION_14	CALL_5
0x4001026	            0x3c2c	                            cmp al, 0x2c	       381	convert.c	FUNCTION_14	CALL_5
0x4001028	     0xf8599000000	                           jne 0x40010c7	       381	convert.c	FUNCTION_14	CALL_5
0x400102e	      0xe917010000	                           jmp 0x400114a	       381	convert.c	FUNCTION_14	CALL_5
0x4001033	          0x4989d8	                             mov r8, rbx	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001036	      0xb900000000	                              mov ecx, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400103b	      0xba00000000	                              mov edx, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001040	      0xbecd010000	                          mov esi, 0x1cd	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001045	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400104a	      0xb800000000	                              mov eax, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400104f	      0xe800000000	                          call 0x4001054	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001054	      0x4c63442414	          movsxd r8, dword [rsp + 0x14] 	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4001059	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x400105e	          0x4889da	                            mov rdx, rbx	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4001061	          0x4c89f6	                            mov rsi, r14	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4001064	      0xbf00000000	                              mov edi, 0	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4001069	      0xe837fbffff	                 call sym.trace_encoding	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x400106e	      0x488b742408	                mov rsi, qword [rsp + 8]	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001073	          0x4885f6	                           test rsi, rsi	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001076	            0x7419	                            je 0x4001091	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001078	      0x4863442414	         movsxd rax, dword [rsp + 0x14] 	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x400107d	          0x4939c4	                            cmp r12, rax	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001080	            0x750f	                           jne 0x4001091	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001082	          0x4c89e2	                            mov rdx, r12	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001085	          0x4889ef	                            mov rdi, rbp	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x4001088	      0xe800000000	                          call 0x400108d	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x400108d	            0x85c0	                           test eax, eax	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x400108f	            0x742c	                            je 0x40010bd	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x4001091	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4001096	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x400109b	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x40010a0	      0xe800000000	                          call 0x40010a5	        54	gettext.h	FUNCTION_74	CALL_2
0x40010a5	      0xb900000000	                              mov ecx, 0	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010aa	          0x4889da	                            mov rdx, rbx	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010ad	          0x4c89f6	                            mov rsi, r14	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010b0	          0x4889c7	                            mov rdi, rax	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010b3	      0xb800000000	                              mov eax, 0	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010b8	      0xe800000000	                          call 0x40010bd	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40010bd	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       472	convert.c	FUNCTION_15	IF_6	CALL_15
0x40010c2	      0xe800000000	                          call 0x40010c7	       472	convert.c	FUNCTION_15	IF_6	CALL_15
0x40010c7	        0x8b542410	            mov edx, dword [rsp + 0x10] 	       475	convert.c	FUNCTION_15	CALL_16
0x40010cb	          0x8d4a01	                      lea ecx, [rdx + 1]	       475	convert.c	FUNCTION_15	CALL_16
0x40010ce	          0x4863c9	                         movsxd rcx, ecx	       475	convert.c	FUNCTION_15	CALL_16
0x40010d1	          0x4863d2	                         movsxd rdx, edx	       475	convert.c	FUNCTION_15	CALL_16
0x40010d4	          0x4c89fe	                            mov rsi, r15	       475	convert.c	FUNCTION_15	CALL_16
0x40010d7	          0x4c89ef	                            mov rdi, r13	       475	convert.c	FUNCTION_15	CALL_16
0x40010da	      0xe800000000	                          call 0x40010df	       475	convert.c	FUNCTION_15	CALL_16
0x40010df	      0xb801000000	                              mov eax, 1	       476	convert.c	FUNCTION_15
0x40010e4	            0xeb05	                           jmp 0x40010eb	       476	convert.c	FUNCTION_15
0x40010e6	      0xb800000000	                              mov eax, 0	       400	convert.c	FUNCTION_15	IF_1
0x40010eb	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       477	convert.c	FUNCTION_15
0x40010f0	    0x644833342528	                xor rsi, qword fs:[0x28]	       477	convert.c	FUNCTION_15
0x40010f9	     0xf8497000000	                            je 0x4001196	       477	convert.c	FUNCTION_15
0x40010ff	      0xe98d000000	                           jmp 0x4001191	       477	convert.c	FUNCTION_15
0x4001104	      0xb800000000	                              mov eax, 0	       412	convert.c	FUNCTION_15	IF_3
0x4001109	            0xebe0	                           jmp 0x40010eb	       412	convert.c	FUNCTION_15	IF_3
0x400110b	          0x4d89e0	                             mov r8, r12	       414	convert.c	FUNCTION_15	CALL_2
0x400110e	          0x4889e9	                            mov rcx, rbp	       414	convert.c	FUNCTION_15	CALL_2
0x4001111	          0x4889da	                            mov rdx, rbx	       414	convert.c	FUNCTION_15	CALL_2
0x4001114	          0x4c89f6	                            mov rsi, r14	       414	convert.c	FUNCTION_15	CALL_2
0x4001117	      0xbf00000000	                              mov edi, 0	       414	convert.c	FUNCTION_15	CALL_2
0x400111c	      0xe884faffff	                 call sym.trace_encoding	       414	convert.c	FUNCTION_15	CALL_2
0x4001121	      0x4c8d442410	                    lea r8, [rsp + 0x10]	       415	convert.c	FUNCTION_15	CALL_3
0x4001126	          0x4889d9	                            mov rcx, rbx	       415	convert.c	FUNCTION_15	CALL_3
0x4001129	      0xba00000000	                              mov edx, 0	       415	convert.c	FUNCTION_15	CALL_3
0x400112e	          0x4489e6	                           mov esi, r12d	       415	convert.c	FUNCTION_15	CALL_3
0x4001131	          0x4889ef	                            mov rdi, rbp	       415	convert.c	FUNCTION_15	CALL_3
0x4001134	      0xe800000000	                          call 0x4001139	       415	convert.c	FUNCTION_15	CALL_3
0x4001139	          0x4989c7	                            mov r15, rax	       415	convert.c	FUNCTION_15	CALL_3
0x400113c	          0x4885c0	                           test rax, rax	       417	convert.c	FUNCTION_15	IF_4
0x400113f	     0xf851ffeffff	                           jne 0x4000f64	       417	convert.c	FUNCTION_15	IF_4
0x4001145	      0xe9c8fdffff	                           jmp 0x4000f12	       417	convert.c	FUNCTION_15	IF_4
0x400114a	      0x4c8d442414	                    lea r8, [rsp + 0x14]	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x400114f	      0xb900000000	                              mov ecx, 0	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4001154	          0x4889da	                            mov rdx, rbx	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4001157	        0x8b742410	            mov esi, dword [rsp + 0x10] 	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x400115b	          0x4c89ff	                            mov rdi, r15	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x400115e	      0xe800000000	                          call 0x4001163	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4001163	      0x4889442408	                mov qword [rsp + 8], rax	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4001168	    0x48b8ffffffff	                 movabs rax, 0x1ffffffff	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001172	    0x482305000000	             and rax, qword [0x04001179]	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001179	    0x48ba00000000	                 movabs rdx, 0x100000000	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001183	          0x4839d0	                            cmp rax, rdx	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001186	     0xf85a7feffff	                           jne 0x4001033	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400118c	      0xe9c3feffff	                           jmp 0x4001054	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4001191	      0xe800000000	                          call 0x4001196	       477	convert.c	FUNCTION_15
0x4001196	        0x4883c428	                           add rsp, 0x28	       477	convert.c	FUNCTION_15
0x400119a	              0x5b	                                 pop rbx	       477	convert.c	FUNCTION_15
0x400119b	              0x5d	                                 pop rbp	       477	convert.c	FUNCTION_15
0x400119c	            0x415c	                                 pop r12	       477	convert.c	FUNCTION_15
0x400119e	            0x415d	                                 pop r13	       477	convert.c	FUNCTION_15
0x40011a0	            0x415e	                                 pop r14	       477	convert.c	FUNCTION_15
0x40011a2	            0x415f	                                 pop r15	       477	convert.c	FUNCTION_15
0x40011a4	              0xc3	                                     ret	       477	convert.c	FUNCTION_15
cascade_filter_fn	functions,0:FOR,0:WHILE,1:ELSE,0:CALL,3:IF,8:DO,0:SWITCH,0	123
0x40030a0	            0x4157	                                push r15	      1684	convert.c	FUNCTION_50
0x40030a2	            0x4156	                                push r14	      1684	convert.c	FUNCTION_50
0x40030a4	            0x4155	                                push r13	      1684	convert.c	FUNCTION_50
0x40030a6	            0x4154	                                push r12	      1684	convert.c	FUNCTION_50
0x40030a8	              0x55	                                push rbp	      1684	convert.c	FUNCTION_50
0x40030a9	              0x53	                                push rbx	      1684	convert.c	FUNCTION_50
0x40030aa	        0x4883ec48	                           sub rsp, 0x48	      1684	convert.c	FUNCTION_50
0x40030ae	      0x48894c2410	             mov qword [rsp + 0x10], rcx	      1684	convert.c	FUNCTION_50
0x40030b3	      0x4c89442418	              mov qword [rsp + 0x18], r8	      1684	convert.c	FUNCTION_50
0x40030b8	    0x64488b0c2528	                mov rcx, qword fs:[0x28]	      1684	convert.c	FUNCTION_50
0x40030c1	      0x48894c2438	             mov qword [rsp + 0x38], rcx	      1684	convert.c	FUNCTION_50
0x40030c6	            0x31c9	                            xor ecx, ecx	      1684	convert.c	FUNCTION_50
0x40030c8	          0x4d8b38	                     mov r15, qword [r8]	      1687	convert.c	FUNCTION_50
0x40030cb	          0x4d85ff	                           test r15, r15	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030ce	     0xf845f010000	                            je 0x4003233	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030d4	          0x4889fb	                            mov rbx, rdi	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030d7	          0x4889f5	                            mov rbp, rsi	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030da	          0x4989d6	                            mov r14, rdx	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030dd	    0x41bc00000000	                             mov r12d, 0	      1693	convert.c	FUNCTION_50	WHILE_1
0x40030e3	        0x488d4718	                   lea rax, [rdi + 0x18]	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x40030e7	      0x4889442408	                mov qword [rsp + 8], rax	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x40030ec	          0x4d89fd	                            mov r13, r15	      1694	convert.c	FUNCTION_50	WHILE_1
0x40030ef	          0x4d29e5	                            sub r13, r12	      1694	convert.c	FUNCTION_50	WHILE_1
0x40030f2	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1694	convert.c	FUNCTION_50	WHILE_1
0x40030f7	    0x8bb31c040000	           mov esi, dword [rbx + 0x41c] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40030fd	    0x8b8318040000	           mov eax, dword [rbx + 0x418] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003103	            0x39c6	                            cmp esi, eax	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003105	            0x7d52	                           jge 0x4003159	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003107	            0x29f0	                            sub eax, esi	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003109	            0x4898	                                    cdqe	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400310b	      0x4889442428	             mov qword [rsp + 0x28], rax	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003110	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003115	        0x4a8d0c20	                    lea rcx, [rax + r12]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003119	          0x4863f6	                         movsxd rsi, esi	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x400311c	      0x4803742408	                add rsi, qword [rsp + 8]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003121	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003125	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x400312a	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x400312f	      0xe800000000	                          call 0x4003134	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003134	            0x85c0	                           test eax, eax	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4003136	     0xf850c010000	                           jne 0x4003248	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x400313c	    0x8b8318040000	           mov eax, dword [rbx + 0x418] 	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003142	        0x2b442428	             sub eax, dword [rsp + 0x28]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003146	    0x89831c040000	            mov dword [rbx + 0x41c], eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400314c	          0x4d89fc	                            mov r12, r15	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400314f	      0x4c2b642430	             sub r12, qword [rsp + 0x30]	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003154	      0xe9cf000000	                           jmp 0x4003228	      1705	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4003159	          0x4885ed	                           test rbp, rbp	      1709	convert.c	FUNCTION_50	WHILE_1
0x400315c	     0xf840b010000	                            je 0x400326d	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003162	          0x498b06	                    mov rax, qword [r14]	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003165	      0x4889442428	             mov qword [rsp + 0x28], rax	      1709	convert.c	FUNCTION_50	WHILE_1
0x400316a	          0x4885c0	                           test rax, rax	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x400316d	     0xf84c6000000	                            je 0x4003239	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003173	      0xc644240701	                   mov byte [rsp + 7], 1	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003178	    0x48c744243000	          mov qword [rsp + 0x30], 0x400 	      1712	convert.c	FUNCTION_50	WHILE_1
0x4003181	        0x488b7b08	                mov rdi, qword [rbx + 8]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003185	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400318a	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400318f	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003194	          0x4889ee	                            mov rsi, rbp	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4003197	      0xe800000000	                          call 0x400319c	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400319c	            0x85c0	                           test eax, eax	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400319e	     0xf85ab000000	                           jne 0x400324f	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x40031a4	      0xb800040000	                          mov eax, 0x400	      1717	convert.c	FUNCTION_50	WHILE_1
0x40031a9	        0x2b442430	             sub eax, dword [rsp + 0x30]	      1717	convert.c	FUNCTION_50	WHILE_1
0x40031ad	    0x898318040000	            mov dword [rbx + 0x418], eax	      1717	convert.c	FUNCTION_50	WHILE_1
0x40031b3	    0xc7831c040000	              mov dword [rbx + 0x41c], 0	      1718	convert.c	FUNCTION_50	WHILE_1
0x40031bd	      0x807c240700	                   cmp byte [rsp + 7], 0	      1719	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031c2	            0x7413	                            je 0x40031d7	      1719	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031c4	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031c9	          0x498b06	                    mov rax, qword [r14]	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031cc	          0x4829d0	                            sub rax, rdx	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031cf	          0x498916	                    mov qword [r14], rdx	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x40031d2	          0x4801c5	                            add rbp, rax	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x40031d5	            0x7551	                           jne 0x4003228	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x40031d7	      0xbd00000000	                              mov ebp, 0	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x40031dc	    0x83bb18040000	              cmp dword [rbx + 0x418], 0	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x40031e3	            0x7543	                           jne 0x4003228	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x40031e5	    0x48c744242800	               mov qword [rsp + 0x28], 0	      1730	convert.c	FUNCTION_50	WHILE_1
0x40031ee	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1731	convert.c	FUNCTION_50	WHILE_1
0x40031f3	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x40031f8	        0x4a8d0c20	                    lea rcx, [rax + r12]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x40031fc	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003200	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003205	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x400320a	      0xbe00000000	                              mov esi, 0	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x400320f	      0xe800000000	                          call 0x4003214	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003214	            0x85c0	                           test eax, eax	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003216	            0x753e	                           jne 0x4003256	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x4003218	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x400321d	          0x4939c5	                            cmp r13, rax	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003220	            0x7417	                            je 0x4003239	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x4003222	          0x4d89fc	                            mov r12, r15	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003225	          0x4929c4	                            sub r12, rax	      1738	convert.c	FUNCTION_50	WHILE_1
0x4003228	          0x4d39e7	                            cmp r15, r12	      1693	convert.c	FUNCTION_50	WHILE_1
0x400322b	     0xf87bbfeffff	                            ja 0x40030ec	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003231	            0xeb06	                           jmp 0x4003239	      1693	convert.c	FUNCTION_50	WHILE_1
0x4003233	    0x41bc00000000	                             mov r12d, 0	      1686	convert.c	FUNCTION_50
0x4003239	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1740	convert.c	FUNCTION_50
0x400323e	          0x4c2920	                    sub qword [rax], r12	      1740	convert.c	FUNCTION_50
0x4003241	      0xb800000000	                              mov eax, 0	      1741	convert.c	FUNCTION_50
0x4003246	            0xeb13	                           jmp 0x400325b	      1741	convert.c	FUNCTION_50
0x4003248	      0xb8ffffffff	                     mov eax, 0xffffffff	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x400324d	            0xeb0c	                           jmp 0x400325b	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x400324f	      0xb8ffffffff	                     mov eax, 0xffffffff	      1716	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003254	            0xeb05	                           jmp 0x400325b	      1716	convert.c	FUNCTION_50	WHILE_1	IF_4
0x4003256	      0xb8ffffffff	                     mov eax, 0xffffffff	      1735	convert.c	FUNCTION_50	WHILE_1	IF_7
0x400325b	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	      1742	convert.c	FUNCTION_50
0x4003260	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1742	convert.c	FUNCTION_50
0x4003269	            0x741a	                            je 0x4003285	      1742	convert.c	FUNCTION_50
0x400326b	            0xeb13	                           jmp 0x4003280	      1742	convert.c	FUNCTION_50
0x400326d	    0x48c744242800	               mov qword [rsp + 0x28], 0	      1709	convert.c	FUNCTION_50	WHILE_1
0x4003276	      0xc644240700	                   mov byte [rsp + 7], 0	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x400327b	      0xe9f8feffff	                           jmp 0x4003178	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4003280	      0xe800000000	                          call 0x4003285	      1742	convert.c	FUNCTION_50
0x4003285	        0x4883c448	                           add rsp, 0x48	      1742	convert.c	FUNCTION_50
0x4003289	              0x5b	                                 pop rbx	      1742	convert.c	FUNCTION_50
0x400328a	              0x5d	                                 pop rbp	      1742	convert.c	FUNCTION_50
0x400328b	            0x415c	                                 pop r12	      1742	convert.c	FUNCTION_50
0x400328d	            0x415d	                                 pop r13	      1742	convert.c	FUNCTION_50
0x400328f	            0x415e	                                 pop r14	      1742	convert.c	FUNCTION_50
0x4003291	            0x415f	                                 pop r15	      1742	convert.c	FUNCTION_50
0x4003293	              0xc3	                                     ret	      1742	convert.c	FUNCTION_50
filter_buffer_or_fd	functions,0:FOR,0:WHILE,0:ELSE,1:CALL,15:IF,7:DO,0:SWITCH,0	128
0x4000826	            0x4154	                                push r12	       639	convert.c	FUNCTION_19
0x4000828	              0x55	                                push rbp	       639	convert.c	FUNCTION_19
0x4000829	              0x53	                                push rbx	       639	convert.c	FUNCTION_19
0x400082a	    0x4881ece00000	                           sub rsp, 0xe0	       639	convert.c	FUNCTION_19
0x4000831	            0x89f5	                            mov ebp, esi	       639	convert.c	FUNCTION_19
0x4000833	          0x4889d3	                            mov rbx, rdx	       639	convert.c	FUNCTION_19
0x4000836	    0x64488b042528	                mov rax, qword fs:[0x28]	       639	convert.c	FUNCTION_19
0x400083f	    0x48898424d800	             mov qword [rsp + 0xd8], rax	       639	convert.c	FUNCTION_19
0x4000847	            0x31c0	                            xor eax, eax	       639	convert.c	FUNCTION_19
0x4000849	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       643	convert.c	FUNCTION_19
0x400084e	      0xb90c000000	                            mov ecx, 0xc	       643	convert.c	FUNCTION_19
0x4000853	          0xf348ab	              rep stosq qword [rdi], rax	       643	convert.c	FUNCTION_19
0x4000856	    0x48c744244800	               mov qword [rsp + 0x48], 0	       643	convert.c	FUNCTION_19
0x400085f	    0x48c744245800	               mov qword [rsp + 0x58], 0	       643	convert.c	FUNCTION_19
0x4000868	    0x48c78424a000	               mov qword [rsp + 0xa0], 0	       646	convert.c	FUNCTION_19
0x4000874	    0x48c78424a800	               mov qword [rsp + 0xa8], 0	       646	convert.c	FUNCTION_19
0x4000880	    0x48c704240000	                      mov qword [rsp], 0	       649	convert.c	FUNCTION_19
0x4000888	    0x48c744240800	                  mov qword [rsp + 8], 0	       649	convert.c	FUNCTION_19
0x4000891	    0x48c744241000	               mov qword [rsp + 0x10], 0	       649	convert.c	FUNCTION_19
0x400089a	    0x48c744242000	               mov qword [rsp + 0x20], 0	       650	convert.c	FUNCTION_19
0x40008a3	    0x48c744242800	               mov qword [rsp + 0x28], 0	       650	convert.c	FUNCTION_19
0x40008ac	    0x48c744243000	               mov qword [rsp + 0x30], 0	       650	convert.c	FUNCTION_19
0x40008b5	    0x48c78424b000	               mov qword [rsp + 0xb0], 0	       651	convert.c	FUNCTION_19
0x40008c1	    0x48c78424b800	               mov qword [rsp + 0xb8], 0	       651	convert.c	FUNCTION_19
0x40008cd	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	       651	convert.c	FUNCTION_19
0x40008d9	    0x48c78424c800	               mov qword [rsp + 0xc8], 0	       651	convert.c	FUNCTION_19
0x40008e5	        0x488b7220	            mov rsi, qword [rdx + 0x20] 	       657	convert.c	FUNCTION_19	CALL_1
0x40008e9	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       657	convert.c	FUNCTION_19	CALL_1
0x40008ee	      0xe800000000	                          call 0x40008f3	       657	convert.c	FUNCTION_19	CALL_1
0x40008f3	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       658	convert.c	FUNCTION_19
0x40008f8	    0x48898424b800	             mov qword [rsp + 0xb8], rax	       658	convert.c	FUNCTION_19
0x4000900	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       661	convert.c	FUNCTION_19	CALL_2
0x4000904	    0x488d8c24b000	                   lea rcx, [rsp + 0xb0]	       661	convert.c	FUNCTION_19	CALL_2
0x400090c	      0xba00000000	                              mov edx, 0	       661	convert.c	FUNCTION_19	CALL_2
0x4000911	          0x4889e7	                            mov rdi, rsp	       661	convert.c	FUNCTION_19	CALL_2
0x4000914	      0xe800000000	                          call 0x4000919	       661	convert.c	FUNCTION_19	CALL_2
0x4000919	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       662	convert.c	FUNCTION_19	CALL_3
0x400091e	      0xe800000000	                          call 0x4000923	       662	convert.c	FUNCTION_19	CALL_3
0x4000923	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       664	convert.c	FUNCTION_19
0x4000928	    0x48898424a000	             mov qword [rsp + 0xa0], rax	       664	convert.c	FUNCTION_19
0x4000930	    0x488d8424a000	                   lea rax, [rsp + 0xa0]	       666	convert.c	FUNCTION_19
0x4000938	      0x4889442440	             mov qword [rsp + 0x40], rax	       666	convert.c	FUNCTION_19
0x400093d	    0x808c24880000	              or byte [rsp + 0x88], 0x40	       667	convert.c	FUNCTION_19
0x4000945	    0xc744246cffff	     mov dword [rsp + 0x6c], 0xffffffff 	       668	convert.c	FUNCTION_19
0x400094d	        0x896c2470	             mov dword [rsp + 0x70], ebp	       669	convert.c	FUNCTION_19
0x4000951	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4000956	      0xe800000000	                          call 0x400095b	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400095b	            0x85c0	                           test eax, eax	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400095d	            0x7425	                            je 0x4000984	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400095f	          0x4889e7	                            mov rdi, rsp	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x4000962	      0xe800000000	                          call 0x4000967	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x4000967	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x400096b	      0xbf00000000	                              mov edi, 0	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000970	      0xb800000000	                              mov eax, 0	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000975	      0xe800000000	                          call 0x400097a	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x400097a	      0xb8ffffffff	                     mov eax, 0xffffffff	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x400097f	      0xe9ce000000	                           jmp 0x4000a52	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000984	      0xbe01000000	                              mov esi, 1	       676	convert.c	FUNCTION_19	CALL_7
0x4000989	      0xbf0d000000	                            mov edi, 0xd	       676	convert.c	FUNCTION_19	CALL_7
0x400098e	      0xe800000000	                          call 0x4000993	       676	convert.c	FUNCTION_19	CALL_7
0x4000993	          0x488b33	                    mov rsi, qword [rbx]	       678	convert.c	FUNCTION_19	IF_2
0x4000996	          0x4885f6	                           test rsi, rsi	       678	convert.c	FUNCTION_19	IF_2
0x4000999	            0x7423	                            je 0x40009be	       678	convert.c	FUNCTION_19	IF_2
0x400099b	        0x488b5308	                mov rdx, qword [rbx + 8]	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x400099f	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x40009a3	      0xe800000000	                          call 0x40009a8	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x40009a8	          0x4889c5	                            mov rbp, rax	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x40009ab	      0xe800000000	                          call 0x40009b0	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40009b0	        0x48c1ed3f	                           shr rbp, 0x3f	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x40009b4	          0x833820	                   cmp dword [rax], 0x20	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40009b7	            0x7526	                           jne 0x40009df	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40009b9	      0xe9a9000000	                           jmp 0x4000a67	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x40009be	          0x8b7b10	            mov edi, dword [rbx + 0x10] 	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40009c1	        0x8b74246c	            mov esi, dword [rsp + 0x6c] 	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40009c5	      0xe800000000	                          call 0x40009ca	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40009ca	            0x89c5	                            mov ebp, eax	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40009cc	          0x83f8fd	             cmp eax, 0xfffffffffffffffd	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40009cf	            0x750e	                           jne 0x40009df	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40009d1	      0xe800000000	                          call 0x40009d6	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40009d6	          0x833820	                   cmp dword [rax], 0x20	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40009d9	     0xf8488000000	                            je 0x4000a67	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40009df	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40009e3	      0xe800000000	                          call 0x40009e8	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40009e8	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40009ea	            0x7506	                           jne 0x40009f2	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40009ec	            0x85ed	                           test ebp, ebp	       691	convert.c	FUNCTION_19	IF_6
0x40009ee	            0x7421	                            je 0x4000a11	       691	convert.c	FUNCTION_19	IF_6
0x40009f0	            0xeb0c	                           jmp 0x40009fe	       691	convert.c	FUNCTION_19	IF_6
0x40009f2	      0xbd01000000	                              mov ebp, 1	       690	convert.c	FUNCTION_19	IF_5
0x40009f7	            0xeb05	                           jmp 0x40009fe	       690	convert.c	FUNCTION_19	IF_5
0x40009f9	      0xbd01000000	                              mov ebp, 1	       690	convert.c	FUNCTION_19	IF_5
0x40009fe	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       692	convert.c	FUNCTION_19	CALL_11
0x4000a02	      0xbf00000000	                              mov edi, 0	       692	convert.c	FUNCTION_19	CALL_11
0x4000a07	      0xb800000000	                              mov eax, 0	       692	convert.c	FUNCTION_19	CALL_11
0x4000a0c	      0xe800000000	                          call 0x4000a11	       692	convert.c	FUNCTION_19	CALL_11
0x4000a11	      0xbf0d000000	                            mov edi, 0xd	       694	convert.c	FUNCTION_19	CALL_12
0x4000a16	      0xe800000000	                          call 0x4000a1b	       694	convert.c	FUNCTION_19	CALL_12
0x4000a1b	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       696	convert.c	FUNCTION_19	CALL_13
0x4000a20	      0xe800000000	                          call 0x4000a25	       696	convert.c	FUNCTION_19	CALL_13
0x4000a25	          0x4189c4	                           mov r12d, eax	       696	convert.c	FUNCTION_19	CALL_13
0x4000a28	            0x85c0	                           test eax, eax	       697	convert.c	FUNCTION_19	IF_7
0x4000a2a	            0x7415	                            je 0x4000a41	       697	convert.c	FUNCTION_19	IF_7
0x4000a2c	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       698	convert.c	FUNCTION_19	CALL_14
0x4000a30	            0x89c2	                            mov edx, eax	       698	convert.c	FUNCTION_19	CALL_14
0x4000a32	      0xbf00000000	                              mov edi, 0	       698	convert.c	FUNCTION_19	CALL_14
0x4000a37	      0xb800000000	                              mov eax, 0	       698	convert.c	FUNCTION_19	CALL_14
0x4000a3c	      0xe800000000	                          call 0x4000a41	       698	convert.c	FUNCTION_19	CALL_14
0x4000a41	          0x4889e7	                            mov rdi, rsp	       700	convert.c	FUNCTION_19	CALL_15
0x4000a44	      0xe800000000	                          call 0x4000a49	       700	convert.c	FUNCTION_19	CALL_15
0x4000a49	          0x4109ec	                            or r12d, ebp	       701	convert.c	FUNCTION_19
0x4000a4c	           0xf95c0	                                setne al	       701	convert.c	FUNCTION_19
0x4000a4f	           0xfb6c0	                           movzx eax, al	       701	convert.c	FUNCTION_19
0x4000a52	    0x488b9424d800	            mov rdx, qword [rsp + 0xd8] 	       702	convert.c	FUNCTION_19
0x4000a5a	    0x644833142528	                xor rdx, qword fs:[0x28]	       702	convert.c	FUNCTION_19
0x4000a63	            0x741e	                            je 0x4000a83	       702	convert.c	FUNCTION_19
0x4000a65	            0xeb17	                           jmp 0x4000a7e	       702	convert.c	FUNCTION_19
0x4000a67	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a6b	      0xe800000000	                          call 0x4000a70	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a70	      0xbd00000000	                              mov ebp, 0	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a75	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a77	            0x7498	                            je 0x4000a11	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a79	      0xe97bffffff	                           jmp 0x40009f9	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000a7e	      0xe800000000	                          call 0x4000a83	       702	convert.c	FUNCTION_19
0x4000a83	    0x4881c4e00000	                           add rsp, 0xe0	       702	convert.c	FUNCTION_19
0x4000a8a	              0x5b	                                 pop rbx	       702	convert.c	FUNCTION_19
0x4000a8b	              0x5d	                                 pop rbp	       702	convert.c	FUNCTION_19
0x4000a8c	            0x415c	                                 pop r12	       702	convert.c	FUNCTION_19
0x4000a8e	              0xc3	                                     ret	       702	convert.c	FUNCTION_19
ident_free_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,0:DO,0:SWITCH,0	8
0x40002fb	              0x53	                                push rbx	      1898	convert.c	FUNCTION_56
0x40002fc	          0x4889fb	                            mov rbx, rdi	      1898	convert.c	FUNCTION_56
0x40002ff	        0x488d7f08	                      lea rdi, [rdi + 8]	      1900	convert.c	FUNCTION_56	CALL_1
0x4000303	      0xe800000000	                          call 0x4000308	      1900	convert.c	FUNCTION_56	CALL_1
0x4000308	          0x4889df	                            mov rdi, rbx	      1901	convert.c	FUNCTION_56	CALL_2
0x400030b	      0xe800000000	                          call 0x4000310	      1901	convert.c	FUNCTION_56	CALL_2
0x4000310	              0x5b	                                 pop rbx	      1902	convert.c	FUNCTION_56
0x4000311	              0xc3	                                     ret	      1902	convert.c	FUNCTION_56
lf_to_crlf_filter_fn	functions,0:FOR,1:WHILE,0:ELSE,1:CALL,0:IF,9:DO,0:SWITCH,0	80
0x400008d	      0xb800000000	                              mov eax, 0	      1576	convert.c	FUNCTION_47
0x4000092	        0xf6470801	                  test byte [rdi + 8], 1	      1584	convert.c	FUNCTION_47	IF_1
0x4000096	            0x741c	                            je 0x40000b4	      1584	convert.c	FUNCTION_47	IF_1
0x4000098	      0x440fb64f09	               movzx r9d, byte [rdi + 9]	      1584	convert.c	FUNCTION_47	IF_1
0x400009d	        0x4180f90d	                            cmp r9b, 0xd	      1584	convert.c	FUNCTION_47	IF_1
0x40000a1	            0x7505	                           jne 0x40000a8	      1584	convert.c	FUNCTION_47	IF_1
0x40000a3	          0x4885f6	                           test rsi, rsi	      1584	convert.c	FUNCTION_47	IF_1
0x40000a6	            0x750c	                           jne 0x40000b4	      1584	convert.c	FUNCTION_47	IF_1
0x40000a8	          0x448809	                     mov byte [rcx], r9b	      1585	convert.c	FUNCTION_47	IF_1
0x40000ab	        0x806708fe	                and byte [rdi + 8], 0xfe	      1586	convert.c	FUNCTION_47	IF_1
0x40000af	      0xb801000000	                              mov eax, 1	      1585	convert.c	FUNCTION_47	IF_1
0x40000b4	          0x4885f6	                           test rsi, rsi	      1590	convert.c	FUNCTION_47	IF_2
0x40000b7	            0x7509	                           jne 0x40000c2	      1590	convert.c	FUNCTION_47	IF_2
0x40000b9	          0x492900	                     sub qword [r8], rax	      1591	convert.c	FUNCTION_47	IF_2
0x40000bc	      0xb800000000	                              mov eax, 0	      1649	convert.c	FUNCTION_47
0x40000c1	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
0x40000c2	              0x55	                                push rbp	      1575	convert.c	FUNCTION_47
0x40000c3	              0x53	                                push rbx	      1575	convert.c	FUNCTION_47
0x40000c4	          0x488b1a	                    mov rbx, qword [rdx]	      1595	convert.c	FUNCTION_47
0x40000c7	          0x4885db	                           test rbx, rbx	      1596	convert.c	FUNCTION_47	IF_3
0x40000ca	            0x750b	                           jne 0x40000d7	      1596	convert.c	FUNCTION_47	IF_3
0x40000cc	        0xf6470801	                  test byte [rdi + 8], 1	      1596	convert.c	FUNCTION_47	IF_3
0x40000d0	            0x7511	                           jne 0x40000e3	      1596	convert.c	FUNCTION_47	IF_3
0x40000d2	      0xe9b1000000	                           jmp 0x4000188	      1596	convert.c	FUNCTION_47	IF_3
0x40000d7	    0x41bb00000000	                             mov r11d, 0	      1598	convert.c	FUNCTION_47	IF_3
0x40000dd	        0xf6470801	                  test byte [rdi + 8], 1	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40000e1	            0x740a	                            je 0x40000ed	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x40000e3	        0x806708fe	                and byte [rdi + 8], 0xfe	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x40000e7	    0x41bb01000000	                             mov r11d, 1	      1601	convert.c	FUNCTION_47	IF_3	IF_4
0x40000ed	          0x4d8b10	                     mov r10, qword [r8]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f0	          0x4885db	                           test rbx, rbx	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f3	            0x7471	                            je 0x4000166	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f5	          0x4c39d0	                            cmp rax, r10	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f8	            0x736c	                           jae 0x4000166	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000fa	    0x41b900000000	                              mov r9d, 0	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000100	      0x460fb6140e	             movzx r10d, byte [rsi + r9]	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000105	        0x4180fa0a	                           cmp r10b, 0xa	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x4000109	            0x7512	                           jne 0x400011d	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x400010b	        0x488d6801	                      lea rbp, [rax + 1]	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x400010f	        0xc604010d	               mov byte [rcx + rax], 0xd	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x4000113	          0x4889e8	                            mov rax, rbp	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x4000116	          0x493b28	                     cmp rbp, qword [r8]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000119	            0x7314	                           jae 0x400012f	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400011b	            0xeb28	                           jmp 0x4000145	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400011d	          0x4585db	                         test r11d, r11d	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4000120	            0x7408	                            je 0x400012a	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4000122	        0xc604010d	               mov byte [rcx + rax], 0xd	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x4000126	        0x488d4001	                      lea rax, [rax + 1]	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x400012a	          0x493b00	                     cmp rax, qword [r8]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400012d	            0x720a	                            jb 0x4000139	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400012f	        0x804f0801	                    or byte [rdi + 8], 1	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000133	        0x44885709	                mov byte [rdi + 9], r10b	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000137	            0xeb1a	                           jmp 0x4000153	      1628	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000139	    0x41bb01000000	                             mov r11d, 1	      1632	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x400013f	        0x4180fa0d	                           cmp r10b, 0xd	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4000143	            0x740e	                            je 0x4000153	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x4000145	        0x44881401	              mov byte [rcx + rax], r10b	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000149	        0x488d4001	                      lea rax, [rax + 1]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x400014d	    0x41bb00000000	                             mov r11d, 0	      1636	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000153	        0x4983c101	                               add r9, 1	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000157	          0x4d8b10	                     mov r10, qword [r8]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400015a	          0x4c39cb	                             cmp rbx, r9	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400015d	            0x760d	                           jbe 0x400016c	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400015f	          0x4c39d0	                            cmp rax, r10	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000162	            0x729c	                            jb 0x4000100	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000164	            0xeb06	                           jmp 0x400016c	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000166	    0x41b900000000	                              mov r9d, 0	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400016c	          0x4929c2	                            sub r10, rax	      1640	convert.c	FUNCTION_47	IF_3
0x400016f	          0x4d8910	                     mov qword [r8], r10	      1640	convert.c	FUNCTION_47	IF_3
0x4000172	          0x4c290a	                     sub qword [rdx], r9	      1641	convert.c	FUNCTION_47	IF_3
0x4000175	        0xf6470801	                  test byte [rdi + 8], 1	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000179	            0x750d	                           jne 0x4000188	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x400017b	          0x4585db	                         test r11d, r11d	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x400017e	            0x7408	                            je 0x4000188	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000180	        0x804f0801	                    or byte [rdi + 8], 1	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4000184	        0xc647090d	                 mov byte [rdi + 9], 0xd	      1645	convert.c	FUNCTION_47	IF_3	IF_9
0x4000188	      0xb800000000	                              mov eax, 0	      1649	convert.c	FUNCTION_47
0x400018d	              0x5b	                                 pop rbx	      1649	convert.c	FUNCTION_47
0x400018e	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_47
0x400018f	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
cascade_free_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,3:IF,0:DO,0:SWITCH,0	10
0x4003072	              0x53	                                push rbx	      1745	convert.c	FUNCTION_51
0x4003073	          0x4889fb	                            mov rbx, rdi	      1745	convert.c	FUNCTION_51
0x4003076	        0x488b7f08	                mov rdi, qword [rdi + 8]	      1747	convert.c	FUNCTION_51	CALL_1
0x400307a	      0xe800000000	                          call 0x400307f	      1747	convert.c	FUNCTION_51	CALL_1
0x400307f	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1748	convert.c	FUNCTION_51	CALL_2
0x4003083	      0xe800000000	                          call 0x4003088	      1748	convert.c	FUNCTION_51	CALL_2
0x4003088	          0x4889df	                            mov rdi, rbx	      1749	convert.c	FUNCTION_51	CALL_3
0x400308b	      0xe800000000	                          call 0x4003090	      1749	convert.c	FUNCTION_51	CALL_3
0x4003090	              0x5b	                                 pop rbx	      1750	convert.c	FUNCTION_51
0x4003091	              0xc3	                                     ret	      1750	convert.c	FUNCTION_51
ident_drain	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,3:DO,0:SWITCH,0	33
0x400129f	            0x4155	                                push r13	      1801	convert.c	FUNCTION_54
0x40012a1	            0x4154	                                push r12	      1801	convert.c	FUNCTION_54
0x40012a3	              0x55	                                push rbp	      1801	convert.c	FUNCTION_54
0x40012a4	              0x53	                                push rbx	      1801	convert.c	FUNCTION_54
0x40012a5	        0x4883ec08	                              sub rsp, 8	      1801	convert.c	FUNCTION_54
0x40012a9	          0x4889fd	                            mov rbp, rdi	      1801	convert.c	FUNCTION_54
0x40012ac	        0x488b4710	            mov rax, qword [rdi + 0x10] 	      1802	convert.c	FUNCTION_54
0x40012b0	          0x488b1a	                    mov rbx, qword [rdx]	      1804	convert.c	FUNCTION_54	IF_1
0x40012b3	          0x4839d8	                            cmp rax, rbx	      1804	convert.c	FUNCTION_54	IF_1
0x40012b6	        0x480f46d8	                         cmovbe rbx, rax	      1804	convert.c	FUNCTION_54	IF_1
0x40012ba	          0x4885db	                           test rbx, rbx	      1806	convert.c	FUNCTION_54	IF_2
0x40012bd	            0x742e	                            je 0x40012ed	      1806	convert.c	FUNCTION_54	IF_2
0x40012bf	          0x4989f5	                            mov r13, rsi	      1806	convert.c	FUNCTION_54	IF_2
0x40012c2	          0x4989d4	                            mov r12, rdx	      1806	convert.c	FUNCTION_54	IF_2
0x40012c5	          0x488b3e	                    mov rdi, qword [rsi]	        53	string3.h	FUNCTION_103	CALL_3
0x40012c8	        0x488b7518	            mov rsi, qword [rbp + 0x18] 	        53	string3.h	FUNCTION_103	CALL_3
0x40012cc	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_103	CALL_3
0x40012cf	      0xe800000000	                          call 0x40012d4	        53	string3.h	FUNCTION_103	CALL_3
0x40012d4	        0x488d7d08	                      lea rdi, [rbp + 8]	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x40012d8	          0x4889da	                            mov rdx, rbx	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x40012db	      0xbe00000000	                              mov esi, 0	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x40012e0	      0xe800000000	                          call 0x40012e5	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x40012e5	        0x49015d00	                    add qword [r13], rbx	      1809	convert.c	FUNCTION_54	IF_2
0x40012e9	        0x49291c24	                    sub qword [r12], rbx	      1810	convert.c	FUNCTION_54	IF_2
0x40012ed	      0x48837d1000	               cmp qword [rbp + 0x10], 0	      1812	convert.c	FUNCTION_54	IF_3
0x40012f2	            0x7507	                           jne 0x40012fb	      1812	convert.c	FUNCTION_54	IF_3
0x40012f4	    0xc74520000000	               mov dword [rbp + 0x20], 0	      1813	convert.c	FUNCTION_54	IF_3
0x40012fb	        0x4883c408	                              add rsp, 8	      1814	convert.c	FUNCTION_54
0x40012ff	              0x5b	                                 pop rbx	      1814	convert.c	FUNCTION_54
0x4001300	              0x5d	                                 pop rbp	      1814	convert.c	FUNCTION_54
0x4001301	            0x415c	                                 pop r12	      1814	convert.c	FUNCTION_54
0x4001303	            0x415d	                                 pop r13	      1814	convert.c	FUNCTION_54
0x4001305	              0xc3	                                     ret	      1814	convert.c	FUNCTION_54
handle_filter_error	functions,0:FOR,0:WHILE,0:ELSE,2:CALL,5:IF,2:DO,0:SWITCH,0	38
0x4000382	              0x53	                                push rbx	       778	convert.c	FUNCTION_22
0x4000383	          0x4889f0	                            mov rax, rsi	       778	convert.c	FUNCTION_22
0x4000386	        0x4c8b4710	              mov r8, qword [rdi + 0x10]	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x400038a	      0xbf00000000	                              mov edi, 0	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x400038f	      0xb906000000	                              mov ecx, 6	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4000394	          0x4c89c6	                             mov rsi, r8	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4000397	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x4000399	        0x400f97c6	                                seta sil	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x400039d	           0xf92c1	                                 setb cl	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x40003a0	          0x4038ce	                             cmp sil, cl	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x40003a3	            0x7455	                            je 0x40003fa	       779	convert.c	FUNCTION_22	IF_1	CALL_1
0x40003a5	      0xbf00000000	                              mov edi, 0	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003aa	      0xb906000000	                              mov ecx, 6	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003af	          0x4c89c6	                             mov rsi, r8	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003b2	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003b4	           0xf97c1	                                 seta cl	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003b7	        0x400f92c6	                                setb sil	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003bb	            0x29f1	                            sub ecx, esi	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003bd	           0xfbec9	                           movsx ecx, cl	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003c0	            0x85d2	                           test edx, edx	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003c2	            0x740b	                            je 0x40003cf	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003c4	            0x85c9	                           test ecx, ecx	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003c6	            0x7507	                           jne 0x40003cf	       781	convert.c	FUNCTION_22	ELSE_1	IF_2	CALL_2
0x40003c8	            0xf7d2	                                 not edx	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x40003ca	          0x215078	             and dword [rax + 0x78], edx	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x40003cd	            0xeb2b	                           jmp 0x40003fa	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x40003cf	          0x4889c3	                            mov rbx, rax	       787	convert.c	FUNCTION_22	ELSE_1	IF_2
0x40003d2	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       793	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x40003d6	      0xbf00000000	                              mov edi, 0	       793	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x40003db	      0xb800000000	                              mov eax, 0	       793	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x40003e0	      0xe800000000	                          call 0x40003e5	       793	convert.c	FUNCTION_22	ELSE_2	CALL_3
0x40003e5	          0x4889de	                            mov rsi, rbx	       794	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x40003e8	      0xbf00000000	                              mov edi, 0	       794	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x40003ed	      0xe800000000	                          call 0x40003f2	       794	convert.c	FUNCTION_22	ELSE_2	CALL_4
0x40003f2	          0x4889df	                            mov rdi, rbx	       795	convert.c	FUNCTION_22	ELSE_2	CALL_5
0x40003f5	      0xe800000000	                          call 0x40003fa	       795	convert.c	FUNCTION_22	ELSE_2	CALL_5
0x40003fa	              0x5b	                                 pop rbx	       797	convert.c	FUNCTION_22
0x40003fb	              0xc3	                                     ret	       797	convert.c	FUNCTION_22
count_ident	functions,0:FOR,0:WHILE,2:ELSE,0:CALL,1:IF,7:DO,0:SWITCH,0	79
0x4000ab6	            0x4156	                                push r14	      1049	convert.c	FUNCTION_27
0x4000ab8	            0x4155	                                push r13	      1049	convert.c	FUNCTION_27
0x4000aba	            0x4154	                                push r12	      1049	convert.c	FUNCTION_27
0x4000abc	              0x55	                                push rbp	      1049	convert.c	FUNCTION_27
0x4000abd	              0x53	                                push rbx	      1049	convert.c	FUNCTION_27
0x4000abe	          0x4885f6	                           test rsi, rsi	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000ac1	     0xf84cc000000	                            je 0x4000b93	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000ac7	          0x4889fd	                            mov rbp, rdi	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000aca	          0x4889f3	                            mov rbx, rsi	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000acd	    0x41be00000000	                             mov r14d, 0	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000ad3	        0x4c8d6d01	                      lea r13, [rbp + 1]	      1057	convert.c	FUNCTION_27	WHILE_1
0x4000ad7	        0x4c8d63ff	                      lea r12, [rbx - 1]	      1058	convert.c	FUNCTION_27	WHILE_1
0x4000adb	        0x807d0024	                    cmp byte [rbp], 0x24	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x4000adf	     0xf8588000000	                           jne 0x4000b6d	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x4000ae5	        0x4983fc02	                              cmp r12, 2	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x4000ae9	     0xf86aa000000	                           jbe 0x4000b99	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x4000aef	      0xba02000000	                              mov edx, 2	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000af4	          0x4c89ee	                            mov rsi, r13	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000af7	      0xbf00000000	                              mov edi, 0	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000afc	      0xe800000000	                          call 0x4000b01	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000b01	            0x85c0	                           test eax, eax	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000b03	            0x7570	                           jne 0x4000b75	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x4000b05	         0xfb64503	               movzx eax, byte [rbp + 3]	      1065	convert.c	FUNCTION_27	WHILE_1
0x4000b09	        0x488d4d04	                      lea rcx, [rbp + 4]	      1066	convert.c	FUNCTION_27	WHILE_1
0x4000b0d	        0x488d53fc	                      lea rdx, [rbx - 4]	      1067	convert.c	FUNCTION_27	WHILE_1
0x4000b11	            0x3c24	                            cmp al, 0x24	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x4000b13	            0x750c	                           jne 0x4000b21	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x4000b15	        0x4183c601	                             add r14d, 1	      1069	convert.c	FUNCTION_27	WHILE_1	IF_4
0x4000b19	          0x4889d3	                            mov rbx, rdx	      1067	convert.c	FUNCTION_27	WHILE_1
0x4000b1c	          0x4889cd	                            mov rbp, rcx	      1066	convert.c	FUNCTION_27	WHILE_1
0x4000b1f	            0xeb67	                           jmp 0x4000b88	      1066	convert.c	FUNCTION_27	WHILE_1
0x4000b21	            0x3c3a	                            cmp al, 0x3a	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x4000b23	            0x7558	                           jne 0x4000b7d	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x4000b25	            0xeb26	                           jmp 0x4000b4d	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x4000b27	        0x4883c001	                              add rax, 1	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b2b	         0xfb650ff	               movzx edx, byte [rax - 1]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b2f	        0x4883eb01	                              sub rbx, 1	      1078	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b33	          0x80fa24	                            cmp dl, 0x24	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b36	            0x7509	                           jne 0x4000b41	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b38	        0x4183c601	                             add r14d, 1	      1080	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b3c	          0x4889c5	                            mov rbp, rax	      1081	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b3f	            0xeb47	                           jmp 0x4000b88	      1081	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b41	          0x80fa0a	                             cmp dl, 0xa	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000b44	            0x743f	                            je 0x4000b85	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000b46	          0x4885db	                           test rbx, rbx	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b49	            0x75dc	                           jne 0x4000b27	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b4b	            0xeb4c	                           jmp 0x4000b99	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b4d	          0x4885d2	                           test rdx, rdx	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b50	            0x7447	                            je 0x4000b99	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b52	        0x488d4505	                      lea rax, [rbp + 5]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b56	         0xfb65504	               movzx edx, byte [rbp + 4]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b5a	        0x4883eb05	                              sub rbx, 5	      1078	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b5e	          0x80fa24	                            cmp dl, 0x24	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b61	            0x74d5	                            je 0x4000b38	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000b63	          0x4889c5	                            mov rbp, rax	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b66	          0x80fa0a	                             cmp dl, 0xa	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000b69	            0x741d	                            je 0x4000b88	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000b6b	            0xebd9	                           jmp 0x4000b46	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000b6d	          0x4c89e3	                            mov rbx, r12	      1058	convert.c	FUNCTION_27	WHILE_1
0x4000b70	          0x4c89ed	                            mov rbp, r13	      1057	convert.c	FUNCTION_27	WHILE_1
0x4000b73	            0xeb13	                           jmp 0x4000b88	      1057	convert.c	FUNCTION_27	WHILE_1
0x4000b75	          0x4c89e3	                            mov rbx, r12	      1058	convert.c	FUNCTION_27	WHILE_1
0x4000b78	          0x4c89ed	                            mov rbp, r13	      1057	convert.c	FUNCTION_27	WHILE_1
0x4000b7b	            0xeb0b	                           jmp 0x4000b88	      1057	convert.c	FUNCTION_27	WHILE_1
0x4000b7d	          0x4889d3	                            mov rbx, rdx	      1067	convert.c	FUNCTION_27	WHILE_1
0x4000b80	          0x4889cd	                            mov rbp, rcx	      1066	convert.c	FUNCTION_27	WHILE_1
0x4000b83	            0xeb03	                           jmp 0x4000b88	      1066	convert.c	FUNCTION_27	WHILE_1
0x4000b85	          0x4889c5	                            mov rbp, rax	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000b88	          0x4885db	                           test rbx, rbx	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000b8b	     0xf8542ffffff	                           jne 0x4000ad3	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000b91	            0xeb06	                           jmp 0x4000b99	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000b93	    0x41be00000000	                             mov r14d, 0	      1053	convert.c	FUNCTION_27
0x4000b99	          0x4489f0	                           mov eax, r14d	      1088	convert.c	FUNCTION_27
0x4000b9c	              0x5b	                                 pop rbx	      1088	convert.c	FUNCTION_27
0x4000b9d	              0x5d	                                 pop rbp	      1088	convert.c	FUNCTION_27
0x4000b9e	            0x415c	                                 pop r12	      1088	convert.c	FUNCTION_27
0x4000ba0	            0x415d	                                 pop r13	      1088	convert.c	FUNCTION_27
0x4000ba2	            0x415e	                                 pop r14	      1088	convert.c	FUNCTION_27
0x4000ba4	              0xc3	                                     ret	      1088	convert.c	FUNCTION_27
convert_to_working_tree	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	6
0x4002e98	        0x4883ec08	                              sub rsp, 8	      1488	convert.c	FUNCTION_42
0x4002e9c	    0x41b900000000	                              mov r9d, 0	      1489	convert.c	FUNCTION_42	CALL_1
0x4002ea2	    0x41b800000000	                              mov r8d, 0	      1489	convert.c	FUNCTION_42	CALL_1
0x4002ea8	      0xe8bbeaffff	call sym.convert_to_working_tree_internal	      1489	convert.c	FUNCTION_42	CALL_1
0x4002ead	        0x4883c408	                              add rsp, 8	      1490	convert.c	FUNCTION_42
0x4002eb1	              0xc3	                                     ret	      1490	convert.c	FUNCTION_42
async_query_available_blobs	functions,0:FOR,0:WHILE,1:ELSE,1:CALL,14:IF,6:DO,0:SWITCH,0	104
0x400293e	            0x4154	                                push r12	       916	convert.c	FUNCTION_24
0x4002940	              0x55	                                push rbp	       916	convert.c	FUNCTION_24
0x4002941	              0x53	                                push rbx	       916	convert.c	FUNCTION_24
0x4002942	        0x4883ec20	                           sub rsp, 0x20	       916	convert.c	FUNCTION_24
0x4002946	    0x64488b042528	                mov rax, qword fs:[0x28]	       916	convert.c	FUNCTION_24
0x400294f	      0x4889442418	             mov qword [rsp + 0x18], rax	       916	convert.c	FUNCTION_24
0x4002954	            0x31c0	                            xor eax, eax	       916	convert.c	FUNCTION_24
0x4002956	    0x48c704240000	                      mov qword [rsp], 0	       921	convert.c	FUNCTION_24
0x400295e	    0x48c744240800	                  mov qword [rsp + 8], 0	       921	convert.c	FUNCTION_24
0x4002967	    0x48c744241000	               mov qword [rsp + 0x10], 0	       921	convert.c	FUNCTION_24
0x4002970	    0x833d00000000	               cmp dword [0x04002977], 0	       923	convert.c	FUNCTION_24	CALL_1
0x4002977	            0x7519	                           jne 0x4002992	       923	convert.c	FUNCTION_24	CALL_1
0x4002979	      0xb900000000	                              mov ecx, 0	       923	convert.c	FUNCTION_24	CALL_1
0x400297e	      0xba9b030000	                          mov edx, 0x39b	       923	convert.c	FUNCTION_24	CALL_1
0x4002983	      0xbe00000000	                              mov esi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x4002988	      0xbf00000000	                              mov edi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x400298d	      0xe800000000	                          call 0x4002992	       923	convert.c	FUNCTION_24	CALL_1
0x4002992	          0x4889fd	                            mov rbp, rdi	       923	convert.c	FUNCTION_24	CALL_1
0x4002995	          0x4989f4	                            mov r12, rsi	       923	convert.c	FUNCTION_24	CALL_1
0x4002998	          0x4889fe	                            mov rsi, rdi	       924	convert.c	FUNCTION_24	CALL_2
0x400299b	      0xbf00000000	                              mov edi, 0	       924	convert.c	FUNCTION_24	CALL_2
0x40029a0	      0xe800000000	                          call 0x40029a5	       924	convert.c	FUNCTION_24	CALL_2
0x40029a5	          0x4889c3	                            mov rbx, rax	       924	convert.c	FUNCTION_24	CALL_2
0x40029a8	          0x4885c0	                           test rax, rax	       925	convert.c	FUNCTION_24	IF_1
0x40029ab	            0x751c	                           jne 0x40029c9	       925	convert.c	FUNCTION_24	IF_1
0x40029ad	          0x4889ee	                            mov rsi, rbp	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x40029b0	      0xbf00000000	                              mov edi, 0	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x40029b5	      0xb800000000	                              mov eax, 0	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x40029ba	      0xe800000000	                          call 0x40029bf	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x40029bf	      0xb800000000	                              mov eax, 0	       928	convert.c	FUNCTION_24	IF_1
0x40029c4	      0xe9c3000000	                           jmp 0x4002a8c	       928	convert.c	FUNCTION_24	IF_1
0x40029c9	      0xbe01000000	                              mov esi, 1	       931	convert.c	FUNCTION_24	CALL_4
0x40029ce	      0xbf0d000000	                            mov edi, 0xd	       931	convert.c	FUNCTION_24	CALL_4
0x40029d3	      0xe800000000	                          call 0x40029d8	       931	convert.c	FUNCTION_24	CALL_4
0x40029d8	          0x8b7b44	            mov edi, dword [rbx + 0x44] 	       933	convert.c	FUNCTION_24	CALL_5
0x40029db	      0xbe00000000	                              mov esi, 0	       933	convert.c	FUNCTION_24	CALL_5
0x40029e0	      0xb800000000	                              mov eax, 0	       933	convert.c	FUNCTION_24	CALL_5
0x40029e5	      0xe800000000	                          call 0x40029ea	       933	convert.c	FUNCTION_24	CALL_5
0x40029ea	            0x89c5	                            mov ebp, eax	       933	convert.c	FUNCTION_24	CALL_5
0x40029ec	            0x85c0	                           test eax, eax	       935	convert.c	FUNCTION_24	IF_2
0x40029ee	     0xf85c2000000	                           jne 0x4002ab6	       935	convert.c	FUNCTION_24	IF_2
0x40029f4	          0x8b7b44	            mov edi, dword [rbx + 0x44] 	       938	convert.c	FUNCTION_24	CALL_6
0x40029f7	      0xe800000000	                          call 0x40029fc	       938	convert.c	FUNCTION_24	CALL_6
0x40029fc	            0x89c5	                            mov ebp, eax	       938	convert.c	FUNCTION_24	CALL_6
0x40029fe	            0x85c0	                           test eax, eax	       939	convert.c	FUNCTION_24	IF_3
0x4002a00	     0xf85b0000000	                           jne 0x4002ab6	       939	convert.c	FUNCTION_24	IF_3
0x4002a06	            0xeb1d	                           jmp 0x4002a25	       939	convert.c	FUNCTION_24	IF_3
0x4002a08	      0xba00000000	                              mov edx, 0	       939	convert.c	FUNCTION_24	IF_3
0x4002a0d	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4002a10	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4002a12	     0xf8486000000	                            je 0x4002a9e	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4002a18	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4002a1c	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4002a20	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4002a23	            0x74e8	                            je 0x4002a0d	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4002a25	          0x8b7b48	            mov edi, dword [rbx + 0x48] 	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002a28	      0xbe00000000	                              mov esi, 0	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002a2d	      0xe800000000	                          call 0x4002a32	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002a32	          0x4885c0	                           test rax, rax	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002a35	            0x75d1	                           jne 0x4002a08	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002a37	          0x8b7b48	            mov edi, dword [rbx + 0x48] 	       950	convert.c	FUNCTION_24	CALL_11
0x4002a3a	          0x4889e6	                            mov rsi, rsp	       950	convert.c	FUNCTION_24	CALL_11
0x4002a3d	      0xe800000000	                          call 0x4002a42	       950	convert.c	FUNCTION_24	CALL_11
0x4002a42	            0x89c5	                            mov ebp, eax	       950	convert.c	FUNCTION_24	CALL_11
0x4002a44	            0x85c0	                           test eax, eax	       951	convert.c	FUNCTION_24	IF_5
0x4002a46	            0x756e	                           jne 0x4002ab6	       951	convert.c	FUNCTION_24	IF_5
0x4002a48	      0xbf00000000	                              mov edi, 0	       954	convert.c	FUNCTION_24	CALL_12
0x4002a4d	      0xb908000000	                              mov ecx, 8	       954	convert.c	FUNCTION_24	CALL_12
0x4002a52	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       954	convert.c	FUNCTION_24	CALL_12
0x4002a57	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       954	convert.c	FUNCTION_24	CALL_12
0x4002a59	        0x400f97c5	                                seta bpl	       954	convert.c	FUNCTION_24	CALL_12
0x4002a5d	           0xf92c0	                                 setb al	       954	convert.c	FUNCTION_24	CALL_12
0x4002a60	            0x29c5	                            sub ebp, eax	       954	convert.c	FUNCTION_24	CALL_12
0x4002a62	        0x400fbeed	                          movsx ebp, bpl	       954	convert.c	FUNCTION_24	CALL_12
0x4002a66	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_24	CALL_13
0x4002a6b	      0xe800000000	                          call 0x4002a70	       957	convert.c	FUNCTION_24	CALL_13
0x4002a70	            0x85ed	                           test ebp, ebp	       959	convert.c	FUNCTION_24	IF_6
0x4002a72	            0x7410	                            je 0x4002a84	       959	convert.c	FUNCTION_24	IF_6
0x4002a74	      0xba00000000	                              mov edx, 0	       960	convert.c	FUNCTION_24	CALL_14
0x4002a79	          0x4889de	                            mov rsi, rbx	       960	convert.c	FUNCTION_24	CALL_14
0x4002a7c	          0x4889e7	                            mov rdi, rsp	       960	convert.c	FUNCTION_24	CALL_14
0x4002a7f	      0xe8fed8ffff	            call sym.handle_filter_error	       960	convert.c	FUNCTION_24	CALL_14
0x4002a84	            0x85ed	                           test ebp, ebp	       961	convert.c	FUNCTION_24
0x4002a86	           0xf94c0	                                 sete al	       961	convert.c	FUNCTION_24
0x4002a89	           0xfb6c0	                           movzx eax, al	       961	convert.c	FUNCTION_24
0x4002a8c	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	       962	convert.c	FUNCTION_24
0x4002a91	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       962	convert.c	FUNCTION_24
0x4002a9a	            0x742b	                            je 0x4002ac7	       962	convert.c	FUNCTION_24
0x4002a9c	            0xeb24	                           jmp 0x4002ac2	       962	convert.c	FUNCTION_24
0x4002a9e	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002aa1	      0xe800000000	                          call 0x4002aa6	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002aa6	          0x4889c6	                            mov rsi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002aa9	          0x4c89e7	                            mov rdi, r12	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002aac	      0xe800000000	                          call 0x4002ab1	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002ab1	      0xe96fffffff	                           jmp 0x4002a25	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002ab6	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_24	CALL_13
0x4002abb	      0xe800000000	                          call 0x4002ac0	       957	convert.c	FUNCTION_24	CALL_13
0x4002ac0	            0xebb2	                           jmp 0x4002a74	       957	convert.c	FUNCTION_24	CALL_13
0x4002ac2	      0xe800000000	                          call 0x4002ac7	       962	convert.c	FUNCTION_24
0x4002ac7	        0x4883c420	                           add rsp, 0x20	       962	convert.c	FUNCTION_24
0x4002acb	              0x5b	                                 pop rbx	       962	convert.c	FUNCTION_24
0x4002acc	              0x5d	                                 pop rbp	       962	convert.c	FUNCTION_24
0x4002acd	            0x415c	                                 pop r12	       962	convert.c	FUNCTION_24
0x4002acf	              0xc3	                                     ret	       962	convert.c	FUNCTION_24
start_multi_file_filter_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	9
0x4000a8f	        0x4883ec08	                              sub rsp, 8	       762	convert.c	FUNCTION_21
0x4000a93	        0x4c8d4f78	                    lea r9, [rdi + 0x78]	       771	convert.c	FUNCTION_21	CALL_1
0x4000a97	    0x41b800000000	                              mov r8d, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000a9d	      0xb900000000	                              mov ecx, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000aa2	      0xba00000000	                              mov edx, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000aa7	      0xbe00000000	                              mov esi, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000aac	      0xe800000000	                          call 0x4000ab1	       771	convert.c	FUNCTION_21	CALL_1
0x4000ab1	        0x4883c408	                              add rsp, 8	       774	convert.c	FUNCTION_21
0x4000ab5	              0xc3	                                     ret	       774	convert.c	FUNCTION_21
convert_to_git_filter_fd	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,8:IF,1:DO,0:SWITCH,0	84
0x4002d4e	            0x4156	                                push r14	      1424	convert.c	FUNCTION_39
0x4002d50	            0x4155	                                push r13	      1424	convert.c	FUNCTION_39
0x4002d52	            0x4154	                                push r12	      1424	convert.c	FUNCTION_39
0x4002d54	              0x55	                                push rbp	      1424	convert.c	FUNCTION_39
0x4002d55	              0x53	                                push rbx	      1424	convert.c	FUNCTION_39
0x4002d56	        0x4883ec30	                           sub rsp, 0x30	      1424	convert.c	FUNCTION_39
0x4002d5a	          0x4989fd	                            mov r13, rdi	      1424	convert.c	FUNCTION_39
0x4002d5d	          0x4889f5	                            mov rbp, rsi	      1424	convert.c	FUNCTION_39
0x4002d60	          0x4189d6	                           mov r14d, edx	      1424	convert.c	FUNCTION_39
0x4002d63	          0x4889cb	                            mov rbx, rcx	      1424	convert.c	FUNCTION_39
0x4002d66	          0x4589c4	                           mov r12d, r8d	      1424	convert.c	FUNCTION_39
0x4002d69	    0x64488b042528	                mov rax, qword fs:[0x28]	      1424	convert.c	FUNCTION_39
0x4002d72	      0x4889442428	             mov qword [rsp + 0x28], rax	      1424	convert.c	FUNCTION_39
0x4002d77	            0x31c0	                            xor eax, eax	      1424	convert.c	FUNCTION_39
0x4002d79	          0x4889e7	                            mov rdi, rsp	      1426	convert.c	FUNCTION_39	CALL_1
0x4002d7c	      0xe83ad8ffff	                  call sym.convert_attrs	      1426	convert.c	FUNCTION_39	CALL_1
0x4002d81	        0x4c8b0c24	                     mov r9, qword [rsp]	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d85	          0x4d85c9	                             test r9, r9	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d88	            0x7519	                           jne 0x4002da3	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d8a	      0xb900000000	                              mov ecx, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d8f	      0xba94050000	                          mov edx, 0x594	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d94	      0xbe00000000	                              mov esi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d99	      0xbf00000000	                              mov edi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x4002d9e	      0xe800000000	                          call 0x4002da3	      1428	convert.c	FUNCTION_39	CALL_2
0x4002da3	      0x4983791800	                cmp qword [r9 + 0x18], 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4002da8	            0x7520	                           jne 0x4002dca	      1429	convert.c	FUNCTION_39	CALL_3
0x4002daa	      0x4983792000	                cmp qword [r9 + 0x20], 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4002daf	            0x7519	                           jne 0x4002dca	      1429	convert.c	FUNCTION_39	CALL_3
0x4002db1	      0xb900000000	                              mov ecx, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4002db6	      0xba95050000	                          mov edx, 0x595	      1429	convert.c	FUNCTION_39	CALL_3
0x4002dbb	      0xbe00000000	                              mov esi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4002dc0	      0xbf00000000	                              mov edi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4002dc5	      0xe800000000	                          call 0x4002dca	      1429	convert.c	FUNCTION_39	CALL_3
0x4002dca	            0x6a00	                                  push 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dcc	            0x6a01	                                  push 1	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dce	          0x4989d8	                             mov r8, rbx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dd1	          0x4489f1	                           mov ecx, r14d	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dd4	      0xba00000000	                              mov edx, 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dd9	      0xbe00000000	                              mov esi, 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dde	          0x4889ef	                            mov rdi, rbp	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002de1	      0xe820e5ffff	                   call sym.apply_filter	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002de6	        0x4883c410	                           add rsp, 0x10	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dea	            0x85c0	                           test eax, eax	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dec	            0x7519	                           jne 0x4002e07	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4002dee	        0x488b0424	                    mov rax, qword [rsp]	      1432	convert.c	FUNCTION_39	CALL_5
0x4002df2	          0x488b10	                    mov rdx, qword [rax]	      1432	convert.c	FUNCTION_39	CALL_5
0x4002df5	          0x4889ee	                            mov rsi, rbp	      1432	convert.c	FUNCTION_39	CALL_5
0x4002df8	      0xbf00000000	                              mov edi, 0	      1432	convert.c	FUNCTION_39	CALL_5
0x4002dfd	      0xb800000000	                              mov eax, 0	      1432	convert.c	FUNCTION_39	CALL_5
0x4002e02	      0xe800000000	                          call 0x4002e07	      1432	convert.c	FUNCTION_39	CALL_5
0x4002e07	        0x488b5308	                mov rdx, qword [rbx + 8]	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e0b	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e0f	          0x4589e1	                           mov r9d, r12d	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e12	      0x4c8b442418	              mov r8, qword [rsp + 0x18]	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e17	          0x4889d9	                            mov rcx, rbx	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e1a	          0x4889ef	                            mov rdi, rbp	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e1d	      0xe8b9deffff	                  call sym.encode_to_git	      1434	convert.c	FUNCTION_39	CALL_6
0x4002e22	        0x488b4b08	                mov rcx, qword [rbx + 8]	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e26	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e2a	        0x4883ec08	                              sub rsp, 8	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e2e	            0x4154	                                push r12	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e30	      0x448b4c241c	            mov r9d, dword [rsp + 0x1c] 	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e35	          0x4989d8	                             mov r8, rbx	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e38	          0x4889ee	                            mov rsi, rbp	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e3b	          0x4c89ef	                            mov rdi, r13	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e3e	      0xe874f5ffff	                    call sym.crlf_to_git	      1435	convert.c	FUNCTION_39	CALL_7
0x4002e43	        0x488b5308	                mov rdx, qword [rbx + 8]	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e47	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e4b	      0x448b442420	            mov r8d, dword [rsp + 0x20] 	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e50	          0x4889d9	                            mov rcx, rbx	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e53	          0x4889ef	                            mov rdi, rbp	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e56	      0xe87af3ffff	                   call sym.ident_to_git	      1436	convert.c	FUNCTION_39	CALL_8
0x4002e5b	        0x4883c410	                           add rsp, 0x10	      1437	convert.c	FUNCTION_39
0x4002e5f	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1437	convert.c	FUNCTION_39
0x4002e64	    0x644833042528	                xor rax, qword fs:[0x28]	      1437	convert.c	FUNCTION_39
0x4002e6d	            0x7405	                            je 0x4002e74	      1437	convert.c	FUNCTION_39
0x4002e6f	      0xe800000000	                          call 0x4002e74	      1437	convert.c	FUNCTION_39
0x4002e74	        0x4883c430	                           add rsp, 0x30	      1437	convert.c	FUNCTION_39
0x4002e78	              0x5b	                                 pop rbx	      1437	convert.c	FUNCTION_39
0x4002e79	              0x5d	                                 pop rbp	      1437	convert.c	FUNCTION_39
0x4002e7a	            0x415c	                                 pop r12	      1437	convert.c	FUNCTION_39
0x4002e7c	            0x415d	                                 pop r13	      1437	convert.c	FUNCTION_39
0x4002e7e	            0x415e	                                 pop r14	      1437	convert.c	FUNCTION_39
0x4002e80	              0xc3	                                     ret	      1437	convert.c	FUNCTION_39
convert_to_git	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,6:IF,5:DO,0:SWITCH,0	110
0x4002bcc	            0x4157	                                push r15	      1390	convert.c	FUNCTION_38
0x4002bce	            0x4156	                                push r14	      1390	convert.c	FUNCTION_38
0x4002bd0	            0x4155	                                push r13	      1390	convert.c	FUNCTION_38
0x4002bd2	            0x4154	                                push r12	      1390	convert.c	FUNCTION_38
0x4002bd4	              0x55	                                push rbp	      1390	convert.c	FUNCTION_38
0x4002bd5	              0x53	                                push rbx	      1390	convert.c	FUNCTION_38
0x4002bd6	        0x4883ec48	                           sub rsp, 0x48	      1390	convert.c	FUNCTION_38
0x4002bda	      0x48897c2408	                mov qword [rsp + 8], rdi	      1390	convert.c	FUNCTION_38
0x4002bdf	          0x4989f6	                            mov r14, rsi	      1390	convert.c	FUNCTION_38
0x4002be2	          0x4989d4	                            mov r12, rdx	      1390	convert.c	FUNCTION_38
0x4002be5	          0x4989cd	                            mov r13, rcx	      1390	convert.c	FUNCTION_38
0x4002be8	          0x4c89c3	                             mov rbx, r8	      1390	convert.c	FUNCTION_38
0x4002beb	          0x4589cf	                           mov r15d, r9d	      1390	convert.c	FUNCTION_38
0x4002bee	    0x64488b042528	                mov rax, qword fs:[0x28]	      1390	convert.c	FUNCTION_38
0x4002bf7	      0x4889442438	             mov qword [rsp + 0x38], rax	      1390	convert.c	FUNCTION_38
0x4002bfc	            0x31c0	                            xor eax, eax	      1390	convert.c	FUNCTION_38
0x4002bfe	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	      1394	convert.c	FUNCTION_38	CALL_1
0x4002c03	      0xe8b3d9ffff	                  call sym.convert_attrs	      1394	convert.c	FUNCTION_38	CALL_1
0x4002c08	            0x6a00	                                  push 0	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c0a	            0x6a01	                                  push 1	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c0c	      0x4c8b4c2420	              mov r9, qword [rsp + 0x20]	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c11	          0x4989d8	                             mov r8, rbx	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c14	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c19	          0x4c89ea	                            mov rdx, r13	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c1c	          0x4c89e6	                            mov rsi, r12	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c1f	          0x4c89f7	                            mov rdi, r14	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c22	      0xe8dfe6ffff	                   call sym.apply_filter	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c27	            0x89c5	                            mov ebp, eax	      1396	convert.c	FUNCTION_38	CALL_2
0x4002c29	        0x4883c410	                           add rsp, 0x10	      1397	convert.c	FUNCTION_38	IF_1
0x4002c2d	            0x85c0	                           test eax, eax	      1397	convert.c	FUNCTION_38	IF_1
0x4002c2f	            0x752d	                           jne 0x4002c5e	      1397	convert.c	FUNCTION_38	IF_1
0x4002c31	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1397	convert.c	FUNCTION_38	IF_1
0x4002c36	          0x4885c0	                           test rax, rax	      1397	convert.c	FUNCTION_38	IF_1
0x4002c39	     0xf84c9000000	                            je 0x4002d08	      1397	convert.c	FUNCTION_38	IF_1
0x4002c3f	        0x83782800	               cmp dword [rax + 0x28], 0	      1397	convert.c	FUNCTION_38	IF_1
0x4002c43	     0xf84bf000000	                            je 0x4002d08	      1397	convert.c	FUNCTION_38	IF_1
0x4002c49	          0x488b10	                    mov rdx, qword [rax]	      1398	convert.c	FUNCTION_38	CALL_3
0x4002c4c	          0x4c89f6	                            mov rsi, r14	      1398	convert.c	FUNCTION_38	CALL_3
0x4002c4f	      0xbf00000000	                              mov edi, 0	      1398	convert.c	FUNCTION_38	CALL_3
0x4002c54	      0xb800000000	                              mov eax, 0	      1398	convert.c	FUNCTION_38	CALL_3
0x4002c59	      0xe800000000	                          call 0x4002c5e	      1398	convert.c	FUNCTION_38	CALL_3
0x4002c5e	          0x4885db	                           test rbx, rbx	      1400	convert.c	FUNCTION_38	IF_2
0x4002c61	     0xf84ae000000	                            je 0x4002d15	      1400	convert.c	FUNCTION_38	IF_2
0x4002c67	        0x4c8b6310	            mov r12, qword [rbx + 0x10] 	      1401	convert.c	FUNCTION_38	IF_2
0x4002c6b	        0x4c8b6b08	                mov r13, qword [rbx + 8]	      1402	convert.c	FUNCTION_38	IF_2
0x4002c6f	      0xc644240701	                   mov byte [rsp + 7], 1	      1400	convert.c	FUNCTION_38	IF_2
0x4002c74	          0x4589f9	                           mov r9d, r15d	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c77	      0x4c8b442428	              mov r8, qword [rsp + 0x28]	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c7c	          0x4889d9	                            mov rcx, rbx	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c7f	          0x4c89ea	                            mov rdx, r13	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c82	          0x4c89e6	                            mov rsi, r12	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c85	          0x4c89f7	                            mov rdi, r14	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c88	      0xe84ee0ffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_38	CALL_4
0x4002c8d	             0x9c5	                             or ebp, eax	      1406	convert.c	FUNCTION_38	IF_3
0x4002c8f	            0x740f	                            je 0x4002ca0	      1406	convert.c	FUNCTION_38	IF_3
0x4002c91	      0x807c240700	                   cmp byte [rsp + 7], 0	      1406	convert.c	FUNCTION_38	IF_3
0x4002c96	            0x7408	                            je 0x4002ca0	      1406	convert.c	FUNCTION_38	IF_3
0x4002c98	        0x4c8b6310	            mov r12, qword [rbx + 0x10] 	      1407	convert.c	FUNCTION_38	IF_3
0x4002c9c	        0x4c8b6b08	                mov r13, qword [rbx + 8]	      1408	convert.c	FUNCTION_38	IF_3
0x4002ca0	        0x41f6c708	                            test r15b, 8	      1411	convert.c	FUNCTION_38	IF_4
0x4002ca4	            0x7538	                           jne 0x4002cde	      1411	convert.c	FUNCTION_38	IF_4
0x4002ca6	        0x4883ec08	                              sub rsp, 8	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002caa	            0x4157	                                push r15	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cac	      0x448b4c242c	            mov r9d, dword [rsp + 0x2c] 	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cb1	          0x4989d8	                             mov r8, rbx	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cb4	          0x4c89e9	                            mov rcx, r13	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cb7	          0x4c89e2	                            mov rdx, r12	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cba	          0x4c89f6	                            mov rsi, r14	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cbd	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cc2	      0xe8f0f6ffff	                    call sym.crlf_to_git	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4002cc7	        0x4883c410	                           add rsp, 0x10	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4002ccb	             0x9c5	                             or ebp, eax	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4002ccd	            0x740f	                            je 0x4002cde	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4002ccf	      0x807c240700	                   cmp byte [rsp + 7], 0	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4002cd4	            0x7408	                            je 0x4002cde	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4002cd6	        0x4c8b6310	            mov r12, qword [rbx + 0x10] 	      1414	convert.c	FUNCTION_38	IF_4	IF_5
0x4002cda	        0x4c8b6b08	                mov r13, qword [rbx + 8]	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x4002cde	      0x448b442420	            mov r8d, dword [rsp + 0x20] 	      1418	convert.c	FUNCTION_38	CALL_6
0x4002ce3	          0x4889d9	                            mov rcx, rbx	      1418	convert.c	FUNCTION_38	CALL_6
0x4002ce6	          0x4c89ea	                            mov rdx, r13	      1418	convert.c	FUNCTION_38	CALL_6
0x4002ce9	          0x4c89e6	                            mov rsi, r12	      1418	convert.c	FUNCTION_38	CALL_6
0x4002cec	          0x4c89f7	                            mov rdi, r14	      1418	convert.c	FUNCTION_38	CALL_6
0x4002cef	      0xe8e1f4ffff	                   call sym.ident_to_git	      1418	convert.c	FUNCTION_38	CALL_6
0x4002cf4	             0x9e8	                             or eax, ebp	      1418	convert.c	FUNCTION_38	CALL_6
0x4002cf6	      0x488b4c2438	            mov rcx, qword [rsp + 0x38] 	      1419	convert.c	FUNCTION_38
0x4002cfb	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1419	convert.c	FUNCTION_38
0x4002d04	            0x7439	                            je 0x4002d3f	      1419	convert.c	FUNCTION_38
0x4002d06	            0xeb32	                           jmp 0x4002d3a	      1419	convert.c	FUNCTION_38
0x4002d08	          0x4885db	                           test rbx, rbx	      1400	convert.c	FUNCTION_38	IF_2
0x4002d0b	       0xf95442407	                    setne byte [rsp + 7]	      1400	convert.c	FUNCTION_38	IF_2
0x4002d10	      0xe95fffffff	                           jmp 0x4002c74	      1400	convert.c	FUNCTION_38	IF_2
0x4002d15	          0x4589f9	                           mov r9d, r15d	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d18	      0x4c8b442428	              mov r8, qword [rsp + 0x28]	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d1d	          0x4889d9	                            mov rcx, rbx	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d20	          0x4c89ea	                            mov rdx, r13	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d23	          0x4c89e6	                            mov rsi, r12	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d26	          0x4c89f7	                            mov rdi, r14	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d29	      0xe8addfffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d2e	             0x9c5	                             or ebp, eax	      1405	convert.c	FUNCTION_38	CALL_4
0x4002d30	      0xc644240700	                   mov byte [rsp + 7], 0	      1400	convert.c	FUNCTION_38	IF_2
0x4002d35	      0xe966ffffff	                           jmp 0x4002ca0	      1400	convert.c	FUNCTION_38	IF_2
0x4002d3a	      0xe800000000	                          call 0x4002d3f	      1419	convert.c	FUNCTION_38
0x4002d3f	        0x4883c448	                           add rsp, 0x48	      1419	convert.c	FUNCTION_38
0x4002d43	              0x5b	                                 pop rbx	      1419	convert.c	FUNCTION_38
0x4002d44	              0x5d	                                 pop rbp	      1419	convert.c	FUNCTION_38
0x4002d45	            0x415c	                                 pop r12	      1419	convert.c	FUNCTION_38
0x4002d47	            0x415d	                                 pop r13	      1419	convert.c	FUNCTION_38
0x4002d49	            0x415e	                                 pop r14	      1419	convert.c	FUNCTION_38
0x4002d4b	            0x415f	                                 pop r15	      1419	convert.c	FUNCTION_38
0x4002d4d	              0xc3	                                     ret	      1419	convert.c	FUNCTION_38
get_cached_convert_stats_ascii	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,3:IF,0:DO,0:SWITCH,0	24
0x4002866	              0x55	                                push rbp	       142	convert.c	FUNCTION_5
0x4002867	              0x53	                                push rbx	       142	convert.c	FUNCTION_5
0x4002868	        0x4883ec18	                           sub rsp, 0x18	       142	convert.c	FUNCTION_5
0x400286c	    0x64488b042528	                mov rax, qword fs:[0x28]	       142	convert.c	FUNCTION_5
0x4002875	      0x4889442408	                mov qword [rsp + 8], rax	       142	convert.c	FUNCTION_5
0x400287a	            0x31c0	                            xor eax, eax	       142	convert.c	FUNCTION_5
0x400287c	          0x4889e2	                            mov rdx, rsp	       145	convert.c	FUNCTION_5	CALL_1
0x400287f	      0xe800000000	                          call 0x4002884	       145	convert.c	FUNCTION_5	CALL_1
0x4002884	          0x4889c3	                            mov rbx, rax	       145	convert.c	FUNCTION_5	CALL_1
0x4002887	        0x488b3424	                    mov rsi, qword [rsp]	       146	convert.c	FUNCTION_5	CALL_2
0x400288b	          0x4889c7	                            mov rdi, rax	       146	convert.c	FUNCTION_5	CALL_2
0x400288e	      0xe829daffff	     call sym.gather_convert_stats_ascii	       146	convert.c	FUNCTION_5	CALL_2
0x4002893	          0x4889c5	                            mov rbp, rax	       146	convert.c	FUNCTION_5	CALL_2
0x4002896	          0x4889df	                            mov rdi, rbx	       147	convert.c	FUNCTION_5	CALL_3
0x4002899	      0xe800000000	                          call 0x400289e	       147	convert.c	FUNCTION_5	CALL_3
0x400289e	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       149	convert.c	FUNCTION_5
0x40028a3	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       149	convert.c	FUNCTION_5
0x40028ac	            0x7405	                            je 0x40028b3	       149	convert.c	FUNCTION_5
0x40028ae	      0xe800000000	                          call 0x40028b3	       149	convert.c	FUNCTION_5
0x40028b3	          0x4889e8	                            mov rax, rbp	       149	convert.c	FUNCTION_5
0x40028b6	        0x4883c418	                           add rsp, 0x18	       149	convert.c	FUNCTION_5
0x40028ba	              0x5b	                                 pop rbx	       149	convert.c	FUNCTION_5
0x40028bb	              0x5d	                                 pop rbp	       149	convert.c	FUNCTION_5
0x40028bc	              0xc3	                                     ret	       149	convert.c	FUNCTION_5
convert_to_working_tree_internal	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,6:IF,5:DO,0:SWITCH,0	320
0x4001968	            0x4157	                                push r15	      1442	convert.c	FUNCTION_40
0x400196a	            0x4156	                                push r14	      1442	convert.c	FUNCTION_40
0x400196c	            0x4155	                                push r13	      1442	convert.c	FUNCTION_40
0x400196e	            0x4154	                                push r12	      1442	convert.c	FUNCTION_40
0x4001970	              0x55	                                push rbp	      1442	convert.c	FUNCTION_40
0x4001971	              0x53	                                push rbx	      1442	convert.c	FUNCTION_40
0x4001972	    0x4881ec980000	                           sub rsp, 0x98	      1442	convert.c	FUNCTION_40
0x4001979	      0x48897c2408	                mov qword [rsp + 8], rdi	      1442	convert.c	FUNCTION_40
0x400197e	          0x4889f5	                            mov rbp, rsi	      1442	convert.c	FUNCTION_40
0x4001981	          0x4889d3	                            mov rbx, rdx	      1442	convert.c	FUNCTION_40
0x4001984	          0x4989cf	                            mov r15, rcx	      1442	convert.c	FUNCTION_40
0x4001987	      0x448944241c	             mov dword [rsp + 0x1c], r8d	      1442	convert.c	FUNCTION_40
0x400198c	      0x4c894c2410	              mov qword [rsp + 0x10], r9	      1442	convert.c	FUNCTION_40
0x4001991	    0x64488b042528	                mov rax, qword fs:[0x28]	      1442	convert.c	FUNCTION_40
0x400199a	    0x488984248800	             mov qword [rsp + 0x88], rax	      1442	convert.c	FUNCTION_40
0x40019a2	            0x31c0	                            xor eax, eax	      1442	convert.c	FUNCTION_40
0x40019a4	          0x4889fe	                            mov rsi, rdi	      1446	convert.c	FUNCTION_40	CALL_1
0x40019a7	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	      1446	convert.c	FUNCTION_40	CALL_1
0x40019ac	      0xe80aecffff	                  call sym.convert_attrs	      1446	convert.c	FUNCTION_40	CALL_1
0x40019b1	      0x837c246000	               cmp dword [rsp + 0x60], 0	      1141	convert.c	FUNCTION_29	IF_1
0x40019b6	     0xf8435040000	                            je 0x4001df1	      1141	convert.c	FUNCTION_29	IF_1
0x40019bc	          0x4889de	                            mov rsi, rbx	      1144	convert.c	FUNCTION_29	CALL_1
0x40019bf	          0x4889ef	                            mov rdi, rbp	      1144	convert.c	FUNCTION_29	CALL_1
0x40019c2	      0xe8eff0ffff	                    call sym.count_ident	      1144	convert.c	FUNCTION_29	CALL_1
0x40019c7	          0x4189c4	                           mov r12d, eax	      1144	convert.c	FUNCTION_29	CALL_1
0x40019ca	            0x85c0	                           test eax, eax	      1145	convert.c	FUNCTION_29	IF_2
0x40019cc	     0xf841f040000	                            je 0x4001df1	      1145	convert.c	FUNCTION_29	IF_2
0x40019d2	    0x48c744242000	               mov qword [rsp + 0x20], 0	      1138	convert.c	FUNCTION_29
0x40019db	        0x493b6f10	            cmp rbp, qword [r15 + 0x10] 	      1149	convert.c	FUNCTION_29	IF_3
0x40019df	            0x7512	                           jne 0x40019f3	      1149	convert.c	FUNCTION_29	IF_3
0x40019e1	      0xbe00000000	                              mov esi, 0	      1150	convert.c	FUNCTION_29	CALL_2
0x40019e6	          0x4c89ff	                            mov rdi, r15	      1150	convert.c	FUNCTION_29	CALL_2
0x40019e9	      0xe800000000	                          call 0x40019ee	      1150	convert.c	FUNCTION_29	CALL_2
0x40019ee	      0x4889442420	             mov qword [rsp + 0x20], rax	      1150	convert.c	FUNCTION_29	CALL_2
0x40019f3	      0x488d4c2470	                   lea rcx, [rsp + 0x70]	      1151	convert.c	FUNCTION_29	CALL_3
0x40019f8	      0xba00000000	                              mov edx, 0	      1151	convert.c	FUNCTION_29	CALL_3
0x40019fd	          0x4889de	                            mov rsi, rbx	      1151	convert.c	FUNCTION_29	CALL_3
0x4001a00	          0x4889ef	                            mov rdi, rbp	      1151	convert.c	FUNCTION_29	CALL_3
0x4001a03	      0xe800000000	                          call 0x4001a08	      1151	convert.c	FUNCTION_29	CALL_3
0x4001a08	    0x488b05000000	            mov rax, qword [0x04001a0f] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a0f	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a13	        0x488b7018	            mov rsi, qword [rax + 0x18] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a17	        0x4883c603	                              add rsi, 3	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a1b	          0x4d63e4	                        movsxd r12, r12d	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a1e	        0x4c0fafe6	                           imul r12, rsi	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a22	        0x498d341c	                    lea rsi, [r12 + rbx]	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a26	          0x4c89ff	                            mov rdi, r15	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a29	      0xe800000000	                          call 0x4001a2e	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a2e	            0xeb03	                           jmp 0x4001a33	      1153	convert.c	FUNCTION_29	CALL_4
0x4001a30	          0x4c89e5	                            mov rbp, r12	      1138	convert.c	FUNCTION_29
0x4001a33	          0x4889da	                            mov rdx, rbx	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001a36	      0xbe24000000	                           mov esi, 0x24	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001a3b	          0x4889ef	                            mov rdi, rbp	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001a3e	      0xe800000000	                          call 0x4001a43	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001a43	          0x4989c5	                            mov r13, rax	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001a46	          0x4885c0	                           test rax, rax	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4001a49	     0xf8426010000	                            je 0x4001b75	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4001a4f	        0x4c8d6001	                      lea r12, [rax + 1]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a53	        0x4c892424	                    mov qword [rsp], r12	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a57	          0x4d89e6	                            mov r14, r12	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a5a	          0x4929ee	                            sub r14, rbp	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a5d	          0x4c89f2	                            mov rdx, r14	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a60	          0x4889ee	                            mov rsi, rbp	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a63	          0x4c89ff	                            mov rdi, r15	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a66	      0xe800000000	                          call 0x4001a6b	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001a6b	          0x4c29f3	                            sub rbx, r14	      1160	convert.c	FUNCTION_29	FOR_1
0x4001a6e	        0x4883fb02	                              cmp rbx, 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a72	            0x76bc	                           jbe 0x4001a30	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a74	      0xba02000000	                              mov edx, 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a79	          0x4c89e6	                            mov rsi, r12	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a7c	      0xbf00000000	                              mov edi, 0	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a81	      0xe800000000	                          call 0x4001a86	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a86	            0x85c0	                           test eax, eax	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a88	            0x75a6	                           jne 0x4001a30	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001a8a	      0x410fb64503	               movzx eax, byte [r13 + 3]	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a8f	            0x3c24	                            cmp al, 0x24	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a91	            0x750a	                           jne 0x4001a9d	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a93	        0x4d8d6504	                      lea r12, [r13 + 4]	      1169	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a97	        0x4883eb03	                              sub rbx, 3	      1170	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a9b	            0xeb7f	                           jmp 0x4001b1c	      1170	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001a9d	            0x3c3a	                            cmp al, 0x3a	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001a9f	            0x758f	                           jne 0x4001a30	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001aa1	        0x498d6d04	                      lea rbp, [r13 + 4]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001aa5	        0x488d53fd	                      lea rdx, [rbx - 3]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001aa9	      0xbe24000000	                           mov esi, 0x24	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001aae	          0x4889ef	                            mov rdi, rbp	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001ab1	      0xe800000000	                          call 0x4001ab6	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001ab6	          0x4989c6	                            mov r14, rax	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001ab9	          0x4885c0	                           test rax, rax	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4001abc	     0xf84b0000000	                            je 0x4001b72	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4001ac2	        0x482b0424	                    sub rax, qword [rsp]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001ac6	      0x4889442428	             mov qword [rsp + 0x28], rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001acb	        0x488d50fd	                      lea rdx, [rax - 3]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001acf	      0xbe0a000000	                            mov esi, 0xa	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001ad4	          0x4889ef	                            mov rdi, rbp	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001ad7	      0xe800000000	                          call 0x4001adc	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001adc	          0x4885c0	                           test rax, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001adf	     0xf854bffffff	                           jne 0x4001a30	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001ae5	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001aea	        0x4883ea04	                              sub rdx, 4	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001aee	        0x498d7d05	                      lea rdi, [r13 + 5]	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001af2	      0xbe20000000	                           mov esi, 0x20	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001af7	      0xe800000000	                          call 0x4001afc	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001afc	          0x4885c0	                           test rax, rax	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001aff	            0x740d	                            je 0x4001b0e	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001b01	        0x498d56ff	                      lea rdx, [r14 - 1]	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001b05	          0x4839d0	                            cmp rax, rdx	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001b08	     0xf8222ffffff	                            jb 0x4001a30	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001b0e	        0x4d8d6601	                      lea r12, [r14 + 1]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001b12	          0x4c89e0	                            mov rax, r12	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001b15	        0x482b0424	                    sub rax, qword [rsp]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001b19	          0x4829c3	                            sub rbx, rax	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001b1c	      0xba04000000	                              mov edx, 4	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b21	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b26	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b29	      0xe800000000	                          call 0x4001b2e	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b2e	      0x488d7c2470	                   lea rdi, [rsp + 0x70]	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001b33	      0xe800000000	                          call 0x4001b38	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001b38	          0x4889c6	                            mov rsi, rax	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001b3b	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b42	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b45	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b4a	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b4c	          0x48f7d1	                                 not rcx	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b4f	        0x488d51ff	                      lea rdx, [rcx - 1]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b53	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b56	      0xe800000000	                          call 0x4001b5b	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b5b	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b60	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b65	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b68	      0xe800000000	                          call 0x4001b6d	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b6d	      0xe9befeffff	                           jmp 0x4001a30	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001b72	          0x4c89e5	                            mov rbp, r12	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001b75	          0x4889da	                            mov rdx, rbx	      1211	convert.c	FUNCTION_29	CALL_15
0x4001b78	          0x4889ee	                            mov rsi, rbp	      1211	convert.c	FUNCTION_29	CALL_15
0x4001b7b	          0x4c89ff	                            mov rdi, r15	      1211	convert.c	FUNCTION_29	CALL_15
0x4001b7e	      0xe800000000	                          call 0x4001b83	      1211	convert.c	FUNCTION_29	CALL_15
0x4001b83	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1213	convert.c	FUNCTION_29	CALL_16
0x4001b88	      0xe800000000	                          call 0x4001b8d	      1213	convert.c	FUNCTION_29	CALL_16
0x4001b8d	        0x498b6f10	            mov rbp, qword [r15 + 0x10] 	      1450	convert.c	FUNCTION_40	IF_1
0x4001b91	        0x498b5f08	                mov rbx, qword [r15 + 8]	      1451	convert.c	FUNCTION_40	IF_1
0x4001b95	    0x41bc01000000	                             mov r12d, 1	      1214	convert.c	FUNCTION_29
0x4001b9b	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      1458	convert.c	FUNCTION_40	IF_2
0x4001ba0	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x4001ba3	            0x740e	                            je 0x4001bb3	      1458	convert.c	FUNCTION_40	IF_2
0x4001ba5	      0x4883781000	               cmp qword [rax + 0x10], 0	      1458	convert.c	FUNCTION_40	IF_2
0x4001baa	            0x7512	                           jne 0x4001bbe	      1458	convert.c	FUNCTION_40	IF_2
0x4001bac	      0x4883782000	               cmp qword [rax + 0x20], 0	      1458	convert.c	FUNCTION_40	IF_2
0x4001bb1	            0x750b	                           jne 0x4001bbe	      1458	convert.c	FUNCTION_40	IF_2
0x4001bb3	      0x837c241c00	               cmp dword [rsp + 0x1c], 0	      1458	convert.c	FUNCTION_40	IF_2
0x4001bb8	     0xf8548010000	                           jne 0x4001d06	      1458	convert.c	FUNCTION_40	IF_2
0x4001bbe	      0xba00000000	                              mov edx, 0	       600	convert.c	FUNCTION_18	IF_1
0x4001bc3	          0x4885db	                           test rbx, rbx	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001bc6	     0xf840b010000	                            je 0x4001cd7	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001bcc	      0x448b6c245c	           mov r13d, dword [rsp + 0x5c] 	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4001bd1	          0x4489ef	                           mov edi, r13d	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001bd4	      0xe8ccf5ffff	                     call sym.output_eol	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001bd9	      0xba00000000	                              mov edx, 0	       600	convert.c	FUNCTION_18	IF_1
0x4001bde	          0x83f801	                              cmp eax, 1	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001be1	     0xf85f0000000	                           jne 0x4001cd7	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001be7	      0x488d542430	                   lea rdx, [rsp + 0x30]	       602	convert.c	FUNCTION_18	CALL_2
0x4001bec	          0x4889de	                            mov rsi, rbx	       602	convert.c	FUNCTION_18	CALL_2
0x4001bef	          0x4889ef	                            mov rdi, rbp	       602	convert.c	FUNCTION_18	CALL_2
0x4001bf2	      0xe8a7e5ffff	                   call sym.gather_stats	       602	convert.c	FUNCTION_18	CALL_2
0x4001bf7	          0x4489ea	                           mov edx, r13d	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001bfa	      0x488d742430	                   lea rsi, [rsp + 0x30]	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001bff	          0x4889df	                            mov rdi, rbx	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001c02	      0xe8f9f5ffff	        call sym.will_convert_lf_to_crlf	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001c07	            0x89c2	                            mov edx, eax	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001c09	            0x85c0	                           test eax, eax	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001c0b	     0xf84c6000000	                            je 0x4001cd7	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001c11	    0x48c704240000	                      mov qword [rsp], 0	       596	convert.c	FUNCTION_18
0x4001c19	        0x493b6f10	            cmp rbp, qword [r15 + 0x10] 	       607	convert.c	FUNCTION_18	IF_3
0x4001c1d	            0x7511	                           jne 0x4001c30	       607	convert.c	FUNCTION_18	IF_3
0x4001c1f	      0xbe00000000	                              mov esi, 0	       608	convert.c	FUNCTION_18	CALL_4
0x4001c24	          0x4c89ff	                            mov rdi, r15	       608	convert.c	FUNCTION_18	CALL_4
0x4001c27	      0xe800000000	                          call 0x4001c2c	       608	convert.c	FUNCTION_18	CALL_4
0x4001c2c	        0x48890424	                    mov qword [rsp], rax	       608	convert.c	FUNCTION_18	CALL_4
0x4001c30	        0x8b742438	            mov esi, dword [rsp + 0x38] 	       610	convert.c	FUNCTION_18	CALL_5
0x4001c34	          0x4801de	                            add rsi, rbx	       610	convert.c	FUNCTION_18	CALL_5
0x4001c37	          0x4c89ff	                            mov rdi, r15	       610	convert.c	FUNCTION_18	CALL_5
0x4001c3a	      0xe800000000	                          call 0x4001c3f	       610	convert.c	FUNCTION_18	CALL_5
0x4001c3f	          0x4989dd	                            mov r13, rbx	       610	convert.c	FUNCTION_18	CALL_5
0x4001c42	          0x4989ee	                            mov r14, rbp	       610	convert.c	FUNCTION_18	CALL_5
0x4001c45	      0x448964241c	            mov dword [rsp + 0x1c], r12d	       610	convert.c	FUNCTION_18	CALL_5
0x4001c4a	          0x4c89ea	                            mov rdx, r13	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001c4d	      0xbe0a000000	                            mov esi, 0xa	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001c52	          0x4c89f7	                            mov rdi, r14	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001c55	      0xe800000000	                          call 0x4001c5a	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001c5a	          0x4989c4	                            mov r12, rax	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001c5d	          0x4885c0	                           test rax, rax	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001c60	            0x7454	                            je 0x4001cb6	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001c62	          0x4939c6	                            cmp r14, rax	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001c65	            0x731a	                           jae 0x4001c81	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001c67	        0x8078ff0d	                 cmp byte [rax - 1], 0xd	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001c6b	            0x7514	                           jne 0x4001c81	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001c6d	        0x488d5001	                      lea rdx, [rax + 1]	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c71	          0x4c29f2	                            sub rdx, r14	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c74	          0x4c89f6	                            mov rsi, r14	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c77	          0x4c89ff	                            mov rdi, r15	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c7a	      0xe800000000	                          call 0x4001c7f	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c7f	            0xeb23	                           jmp 0x4001ca4	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001c81	          0x4c89e2	                            mov rdx, r12	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001c84	          0x4c29f2	                            sub rdx, r14	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001c87	          0x4c89f6	                            mov rsi, r14	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001c8a	          0x4c89ff	                            mov rdi, r15	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001c8d	      0xe800000000	                          call 0x4001c92	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001c92	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c97	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c9c	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c9f	      0xe800000000	                          call 0x4001ca4	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ca4	        0x4983c401	                              add r12, 1	       621	convert.c	FUNCTION_18	FOR_1
0x4001ca8	          0x4c89e0	                            mov rax, r12	       621	convert.c	FUNCTION_18	FOR_1
0x4001cab	          0x4c29f0	                            sub rax, r14	       621	convert.c	FUNCTION_18	FOR_1
0x4001cae	          0x4929c5	                            sub r13, rax	       621	convert.c	FUNCTION_18	FOR_1
0x4001cb1	          0x4d89e6	                            mov r14, r12	       622	convert.c	FUNCTION_18	FOR_1
0x4001cb4	            0xeb94	                           jmp 0x4001c4a	       622	convert.c	FUNCTION_18	FOR_1
0x4001cb6	      0x448b64241c	           mov r12d, dword [rsp + 0x1c] 	       622	convert.c	FUNCTION_18	FOR_1
0x4001cbb	          0x4c89ea	                            mov rdx, r13	       622	convert.c	FUNCTION_18	FOR_1
0x4001cbe	          0x4c89f6	                            mov rsi, r14	       624	convert.c	FUNCTION_18	CALL_10
0x4001cc1	          0x4c89ff	                            mov rdi, r15	       624	convert.c	FUNCTION_18	CALL_10
0x4001cc4	      0xe800000000	                          call 0x4001cc9	       624	convert.c	FUNCTION_18	CALL_10
0x4001cc9	        0x488b3c24	                    mov rdi, qword [rsp]	       626	convert.c	FUNCTION_18	CALL_11
0x4001ccd	      0xe800000000	                          call 0x4001cd2	       626	convert.c	FUNCTION_18	CALL_11
0x4001cd2	      0xba01000000	                              mov edx, 1	       627	convert.c	FUNCTION_18
0x4001cd7	          0x4109d4	                            or r12d, edx	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x4001cda	     0xf841c010000	                            je 0x4001dfc	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x4001ce0	      0x4c8b6c2468	            mov r13, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x4001ce5	          0x4d85ed	                           test r13, r13	       489	convert.c	FUNCTION_16	IF_1
0x4001ce8	     0xf8496000000	                            je 0x4001d84	       489	convert.c	FUNCTION_16	IF_1
0x4001cee	        0x498b6f10	            mov rbp, qword [r15 + 0x10] 	      1461	convert.c	FUNCTION_40	IF_2	IF_3
0x4001cf2	        0x498b5f08	                mov rbx, qword [r15 + 8]	      1462	convert.c	FUNCTION_40	IF_2	IF_3
0x4001cf6	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x4001cf9	            0x751f	                           jne 0x4001d1a	       489	convert.c	FUNCTION_16	IF_1
0x4001cfb	          0x4885ed	                           test rbp, rbp	       489	convert.c	FUNCTION_16	IF_1
0x4001cfe	     0xf8580000000	                           jne 0x4001d84	       489	convert.c	FUNCTION_16	IF_1
0x4001d04	            0xeb14	                           jmp 0x4001d1a	       489	convert.c	FUNCTION_16	IF_1
0x4001d06	      0x4c8b6c2468	            mov r13, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x4001d0b	          0x4d85ed	                           test r13, r13	       489	convert.c	FUNCTION_16	IF_1
0x4001d0e	            0x7463	                            je 0x4001d73	       489	convert.c	FUNCTION_16	IF_1
0x4001d10	          0x4885ed	                           test rbp, rbp	       489	convert.c	FUNCTION_16	IF_1
0x4001d13	            0x7405	                            je 0x4001d1a	       489	convert.c	FUNCTION_16	IF_1
0x4001d15	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x4001d18	            0x7460	                            je 0x4001d7a	       489	convert.c	FUNCTION_16	IF_1
0x4001d1a	      0x4c8d442430	                    lea r8, [rsp + 0x30]	       492	convert.c	FUNCTION_16	CALL_1
0x4001d1f	      0xb900000000	                              mov ecx, 0	       492	convert.c	FUNCTION_16	CALL_1
0x4001d24	          0x4c89ea	                            mov rdx, r13	       492	convert.c	FUNCTION_16	CALL_1
0x4001d27	            0x89de	                            mov esi, ebx	       492	convert.c	FUNCTION_16	CALL_1
0x4001d29	          0x4889ef	                            mov rdi, rbp	       492	convert.c	FUNCTION_16	CALL_1
0x4001d2c	      0xe800000000	                          call 0x4001d31	       492	convert.c	FUNCTION_16	CALL_1
0x4001d31	          0x4885c0	                           test rax, rax	       494	convert.c	FUNCTION_16	IF_2
0x4001d34	            0x751e	                           jne 0x4001d54	       494	convert.c	FUNCTION_16	IF_2
0x4001d36	          0x4c89e9	                            mov rcx, r13	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001d39	      0xba00000000	                              mov edx, 0	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001d3e	      0x488b742408	                mov rsi, qword [rsp + 8]	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001d43	      0xbf00000000	                              mov edi, 0	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001d48	      0xe800000000	                          call 0x4001d4d	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001d4d	      0xb800000000	                              mov eax, 0	       497	convert.c	FUNCTION_16	IF_2
0x4001d52	            0xeb2b	                           jmp 0x4001d7f	       497	convert.c	FUNCTION_16	IF_2
0x4001d54	        0x8b542430	            mov edx, dword [rsp + 0x30] 	       500	convert.c	FUNCTION_16	CALL_3
0x4001d58	          0x8d4a01	                      lea ecx, [rdx + 1]	       500	convert.c	FUNCTION_16	CALL_3
0x4001d5b	          0x4863c9	                         movsxd rcx, ecx	       500	convert.c	FUNCTION_16	CALL_3
0x4001d5e	          0x4863d2	                         movsxd rdx, edx	       500	convert.c	FUNCTION_16	CALL_3
0x4001d61	          0x4889c6	                            mov rsi, rax	       500	convert.c	FUNCTION_16	CALL_3
0x4001d64	          0x4c89ff	                            mov rdi, r15	       500	convert.c	FUNCTION_16	CALL_3
0x4001d67	      0xe800000000	                          call 0x4001d6c	       500	convert.c	FUNCTION_16	CALL_3
0x4001d6c	      0xb801000000	                              mov eax, 1	       501	convert.c	FUNCTION_16
0x4001d71	            0xeb0c	                           jmp 0x4001d7f	       501	convert.c	FUNCTION_16
0x4001d73	      0xb800000000	                              mov eax, 0	       490	convert.c	FUNCTION_16	IF_1
0x4001d78	            0xeb05	                           jmp 0x4001d7f	       490	convert.c	FUNCTION_16	IF_1
0x4001d7a	      0xb800000000	                              mov eax, 0	       490	convert.c	FUNCTION_16	IF_1
0x4001d7f	          0x4109c4	                            or r12d, eax	      1467	convert.c	FUNCTION_40	IF_4
0x4001d82	            0x7408	                            je 0x4001d8c	      1467	convert.c	FUNCTION_40	IF_4
0x4001d84	        0x498b6f10	            mov rbp, qword [r15 + 0x10] 	      1468	convert.c	FUNCTION_40	IF_4
0x4001d88	        0x498b5f08	                mov rbx, qword [r15 + 8]	      1469	convert.c	FUNCTION_40	IF_4
0x4001d8c	        0xff742410	                 push qword [rsp + 0x10]	      1472	convert.c	FUNCTION_40	CALL_5
0x4001d90	            0x6a02	                                  push 2	      1472	convert.c	FUNCTION_40	CALL_5
0x4001d92	      0x4c8b4c2460	              mov r9, qword [rsp + 0x60]	      1472	convert.c	FUNCTION_40	CALL_5
0x4001d97	          0x4d89f8	                             mov r8, r15	      1472	convert.c	FUNCTION_40	CALL_5
0x4001d9a	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1472	convert.c	FUNCTION_40	CALL_5
0x4001d9f	          0x4889da	                            mov rdx, rbx	      1472	convert.c	FUNCTION_40	CALL_5
0x4001da2	          0x4889ee	                            mov rsi, rbp	      1472	convert.c	FUNCTION_40	CALL_5
0x4001da5	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1472	convert.c	FUNCTION_40	CALL_5
0x4001daa	      0xe857f5ffff	                   call sym.apply_filter	      1472	convert.c	FUNCTION_40	CALL_5
0x4001daf	        0x4883c410	                           add rsp, 0x10	      1474	convert.c	FUNCTION_40	IF_5
0x4001db3	            0x85c0	                           test eax, eax	      1474	convert.c	FUNCTION_40	IF_5
0x4001db5	            0x7522	                           jne 0x4001dd9	      1474	convert.c	FUNCTION_40	IF_5
0x4001db7	      0x488b542450	            mov rdx, qword [rsp + 0x50] 	      1474	convert.c	FUNCTION_40	IF_5
0x4001dbc	          0x4885d2	                           test rdx, rdx	      1474	convert.c	FUNCTION_40	IF_5
0x4001dbf	            0x7418	                            je 0x4001dd9	      1474	convert.c	FUNCTION_40	IF_5
0x4001dc1	        0x837a2800	               cmp dword [rdx + 0x28], 0	      1474	convert.c	FUNCTION_40	IF_5
0x4001dc5	            0x7412	                            je 0x4001dd9	      1474	convert.c	FUNCTION_40	IF_5
0x4001dc7	          0x488b12	                    mov rdx, qword [rdx]	      1475	convert.c	FUNCTION_40	CALL_6
0x4001dca	      0x488b742408	                mov rsi, qword [rsp + 8]	      1475	convert.c	FUNCTION_40	CALL_6
0x4001dcf	      0xbf00000000	                              mov edi, 0	      1475	convert.c	FUNCTION_40	CALL_6
0x4001dd4	      0xe800000000	                          call 0x4001dd9	      1475	convert.c	FUNCTION_40	CALL_6
0x4001dd9	          0x4409e0	                            or eax, r12d	      1477	convert.c	FUNCTION_40
0x4001ddc	    0x488b8c248800	            mov rcx, qword [rsp + 0x88] 	      1478	convert.c	FUNCTION_40
0x4001de4	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1478	convert.c	FUNCTION_40
0x4001ded	            0x7433	                            je 0x4001e22	      1478	convert.c	FUNCTION_40
0x4001def	            0xeb2c	                           jmp 0x4001e1d	      1478	convert.c	FUNCTION_40
0x4001df1	    0x41bc00000000	                             mov r12d, 0	      1478	convert.c	FUNCTION_40
0x4001df7	      0xe99ffdffff	                           jmp 0x4001b9b	      1478	convert.c	FUNCTION_40
0x4001dfc	      0x4c8b6c2468	            mov r13, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x4001e01	          0x4d85ed	                           test r13, r13	       489	convert.c	FUNCTION_16	IF_1
0x4001e04	            0x7486	                            je 0x4001d8c	       489	convert.c	FUNCTION_16	IF_1
0x4001e06	          0x4885ed	                           test rbp, rbp	       489	convert.c	FUNCTION_16	IF_1
0x4001e09	     0xf840bffffff	                            je 0x4001d1a	       489	convert.c	FUNCTION_16	IF_1
0x4001e0f	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x4001e12	     0xf8474ffffff	                            je 0x4001d8c	       489	convert.c	FUNCTION_16	IF_1
0x4001e18	      0xe9fdfeffff	                           jmp 0x4001d1a	       489	convert.c	FUNCTION_16	IF_1
0x4001e1d	      0xe800000000	                          call 0x4001e22	      1478	convert.c	FUNCTION_40
0x4001e22	    0x4881c4980000	                           add rsp, 0x98	      1478	convert.c	FUNCTION_40
0x4001e29	              0x5b	                                 pop rbx	      1478	convert.c	FUNCTION_40
0x4001e2a	              0x5d	                                 pop rbp	      1478	convert.c	FUNCTION_40
0x4001e2b	            0x415c	                                 pop r12	      1478	convert.c	FUNCTION_40
0x4001e2d	            0x415d	                                 pop r13	      1478	convert.c	FUNCTION_40
0x4001e2f	            0x415e	                                 pop r14	      1478	convert.c	FUNCTION_40
0x4001e31	            0x415f	                                 pop r15	      1478	convert.c	FUNCTION_40
0x4001e33	              0xc3	                                     ret	      1478	convert.c	FUNCTION_40
free_stream_filter	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	5
0x4003063	        0x4883ec08	                              sub rsp, 8	      1956	convert.c	FUNCTION_59
0x4003067	          0x488b07	                    mov rax, qword [rdi]	      1957	convert.c	FUNCTION_59	CALL_1
0x400306a	          0xff5008	                    call qword [rax + 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x400306d	        0x4883c408	                              add rsp, 8	      1958	convert.c	FUNCTION_59
0x4003071	              0xc3	                                     ret	      1958	convert.c	FUNCTION_59
gather_convert_stats_ascii	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,1:DO,0:SWITCH,1	18
0x40002bc	        0x4883ec08	                              sub rsp, 8	       123	convert.c	FUNCTION_4
0x40002c0	      0xe87cffffff	           call sym.gather_convert_stats	       124	convert.c	FUNCTION_4	CALL_1
0x40002c5	      0xba00000000	                              mov edx, 0	       127	convert.c	FUNCTION_4	IF_1
0x40002ca	            0xa804	                              test al, 4	       126	convert.c	FUNCTION_4	IF_1
0x40002cc	            0x7525	                           jne 0x40002f3	       126	convert.c	FUNCTION_4	IF_1
0x40002ce	      0xba00000000	                              mov edx, 0	       132	convert.c	FUNCTION_4	SWITCH_1
0x40002d3	          0x83f802	                              cmp eax, 2	       128	convert.c	FUNCTION_4	SWITCH_1
0x40002d6	            0x741b	                            je 0x40002f3	       128	convert.c	FUNCTION_4	SWITCH_1
0x40002d8	      0xba00000000	                              mov edx, 0	       134	convert.c	FUNCTION_4	SWITCH_1
0x40002dd	          0x83f803	                              cmp eax, 3	       128	convert.c	FUNCTION_4	SWITCH_1
0x40002e0	            0x7411	                            je 0x40002f3	       128	convert.c	FUNCTION_4	SWITCH_1
0x40002e2	          0x83f801	                              cmp eax, 1	       136	convert.c	FUNCTION_4	SWITCH_1
0x40002e5	      0xba00000000	                              mov edx, 0	       136	convert.c	FUNCTION_4	SWITCH_1
0x40002ea	      0xb800000000	                              mov eax, 0	       136	convert.c	FUNCTION_4	SWITCH_1
0x40002ef	        0x480f44d0	                          cmove rdx, rax	       136	convert.c	FUNCTION_4	SWITCH_1
0x40002f3	          0x4889d0	                            mov rax, rdx	       138	convert.c	FUNCTION_4
0x40002f6	        0x4883c408	                              add rsp, 8	       138	convert.c	FUNCTION_4
0x40002fa	              0xc3	                                     ret	       138	convert.c	FUNCTION_4
trace_encoding	functions,0:FOR,1:WHILE,0:ELSE,0:CALL,6:IF,0:DO,0:SWITCH,0	79
0x4000ba5	            0x4155	                                push r13	       329	convert.c	FUNCTION_13
0x4000ba7	            0x4154	                                push r12	       329	convert.c	FUNCTION_13
0x4000ba9	              0x55	                                push rbp	       329	convert.c	FUNCTION_13
0x4000baa	              0x53	                                push rbx	       329	convert.c	FUNCTION_13
0x4000bab	        0x4883ec28	                           sub rsp, 0x28	       329	convert.c	FUNCTION_13
0x4000baf	          0x4989cc	                            mov r12, rcx	       329	convert.c	FUNCTION_13
0x4000bb2	          0x4c89c5	                             mov rbp, r8	       329	convert.c	FUNCTION_13
0x4000bb5	    0x64488b042528	                mov rax, qword fs:[0x28]	       329	convert.c	FUNCTION_13
0x4000bbe	      0x4889442418	             mov qword [rsp + 0x18], rax	       329	convert.c	FUNCTION_13
0x4000bc3	            0x31c0	                            xor eax, eax	       329	convert.c	FUNCTION_13
0x4000bc5	    0x48c704240000	                      mov qword [rsp], 0	       331	convert.c	FUNCTION_13
0x4000bcd	    0x48c744240800	                  mov qword [rsp + 8], 0	       331	convert.c	FUNCTION_13
0x4000bd6	    0x48c744241000	               mov qword [rsp + 0x10], 0	       331	convert.c	FUNCTION_13
0x4000bdf	          0x4989d0	                             mov r8, rdx	       334	convert.c	FUNCTION_13	CALL_2
0x4000be2	          0x4889f1	                            mov rcx, rsi	       334	convert.c	FUNCTION_13	CALL_2
0x4000be5	          0x4889fa	                            mov rdx, rdi	       334	convert.c	FUNCTION_13	CALL_2
0x4000be8	      0xbe00000000	                              mov esi, 0	       334	convert.c	FUNCTION_13	CALL_2
0x4000bed	          0x4889e7	                            mov rdi, rsp	       334	convert.c	FUNCTION_13	CALL_2
0x4000bf0	      0xe800000000	                          call 0x4000bf5	       334	convert.c	FUNCTION_13	CALL_2
0x4000bf5	          0x4d85e4	                           test r12, r12	       335	convert.c	FUNCTION_13	FOR_1
0x4000bf8	        0x410f95c5	                              setne r13b	       335	convert.c	FUNCTION_13	FOR_1
0x4000bfc	          0x4885ed	                           test rbp, rbp	       335	convert.c	FUNCTION_13	FOR_1
0x4000bff	            0x7469	                            je 0x4000c6a	       335	convert.c	FUNCTION_13	FOR_1
0x4000c01	          0x4584ed	                         test r13b, r13b	       335	convert.c	FUNCTION_13	FOR_1
0x4000c04	            0x7464	                            je 0x4000c6a	       335	convert.c	FUNCTION_13	FOR_1
0x4000c06	      0xb800000000	                              mov eax, 0	       335	convert.c	FUNCTION_13	FOR_1
0x4000c0b	      0xba00000000	                              mov edx, 0	       335	convert.c	FUNCTION_13	FOR_1
0x4000c10	          0x8d5a01	                      lea ebx, [rdx + 1]	       341	convert.c	FUNCTION_13	FOR_1
0x4000c13	    0x41b90a000000	                            mov r9d, 0xa	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c19	          0xf6c307	                              test bl, 7	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c1c	            0x7411	                            je 0x4000c2f	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c1e	          0x4863cb	                         movsxd rcx, ebx	       341	convert.c	FUNCTION_13	FOR_1
0x4000c21	          0x4839e9	                            cmp rcx, rbp	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c24	          0x4519c9	                            sbb r9d, r9d	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c27	        0x4183e116	                           and r9d, 0x16	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c2b	        0x4183c10a	                            add r9d, 0xa	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c2f	      0x410fb60c04	             movzx ecx, byte [r12 + rax]	       340	convert.c	FUNCTION_13	FOR_1
0x4000c34	          0x8d41df	                   lea eax, [rcx - 0x21]	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c37	        0x440fbec1	                           movsx r8d, cl	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c3b	            0x3c5d	                            cmp al, 0x5d	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c3d	           0xfb6c9	                           movzx ecx, cl	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c40	      0xb820000000	                           mov eax, 0x20	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c45	        0x440f47c0	                          cmova r8d, eax	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c49	      0xbe00000000	                              mov esi, 0	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c4e	          0x4889e7	                            mov rdi, rsp	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c51	      0xb800000000	                              mov eax, 0	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c56	      0xe800000000	                          call 0x4000c5b	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000c5b	          0x4863c3	                         movsxd rax, ebx	       335	convert.c	FUNCTION_13	FOR_1
0x4000c5e	            0x89da	                            mov edx, ebx	       335	convert.c	FUNCTION_13	FOR_1
0x4000c60	          0x4839e8	                            cmp rax, rbp	       335	convert.c	FUNCTION_13	FOR_1
0x4000c63	            0x7305	                           jae 0x4000c6a	       335	convert.c	FUNCTION_13	FOR_1
0x4000c65	          0x4584ed	                         test r13b, r13b	       335	convert.c	FUNCTION_13	FOR_1
0x4000c68	            0x75a6	                           jne 0x4000c10	       335	convert.c	FUNCTION_13	FOR_1
0x4000c6a	      0xba01000000	                              mov edx, 1	       344	convert.c	FUNCTION_13	CALL_4
0x4000c6f	      0xbe0a000000	                            mov esi, 0xa	       344	convert.c	FUNCTION_13	CALL_4
0x4000c74	          0x4889e7	                            mov rdi, rsp	       344	convert.c	FUNCTION_13	CALL_4
0x4000c77	      0xe800000000	                          call 0x4000c7c	       344	convert.c	FUNCTION_13	CALL_4
0x4000c7c	    0x48b8ffffffff	                 movabs rax, 0x1ffffffff	       346	convert.c	FUNCTION_13	CALL_5
0x4000c86	    0x482305000000	             and rax, qword [0x04000c8d]	       346	convert.c	FUNCTION_13	CALL_5
0x4000c8d	    0x48ba00000000	                 movabs rdx, 0x100000000	       346	convert.c	FUNCTION_13	CALL_5
0x4000c97	          0x4839d0	                            cmp rax, rdx	       346	convert.c	FUNCTION_13	CALL_5
0x4000c9a	            0x7417	                            je 0x4000cb3	       346	convert.c	FUNCTION_13	CALL_5
0x4000c9c	          0x4889e1	                            mov rcx, rsp	       346	convert.c	FUNCTION_13	CALL_5
0x4000c9f	      0xba00000000	                              mov edx, 0	       346	convert.c	FUNCTION_13	CALL_5
0x4000ca4	      0xbe5a010000	                          mov esi, 0x15a	       346	convert.c	FUNCTION_13	CALL_5
0x4000ca9	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_13	CALL_5
0x4000cae	      0xe800000000	                          call 0x4000cb3	       346	convert.c	FUNCTION_13	CALL_5
0x4000cb3	          0x4889e7	                            mov rdi, rsp	       347	convert.c	FUNCTION_13	CALL_6
0x4000cb6	      0xe800000000	                          call 0x4000cbb	       347	convert.c	FUNCTION_13	CALL_6
0x4000cbb	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       348	convert.c	FUNCTION_13
0x4000cc0	    0x644833042528	                xor rax, qword fs:[0x28]	       348	convert.c	FUNCTION_13
0x4000cc9	            0x7405	                            je 0x4000cd0	       348	convert.c	FUNCTION_13
0x4000ccb	      0xe800000000	                          call 0x4000cd0	       348	convert.c	FUNCTION_13
0x4000cd0	        0x4883c428	                           add rsp, 0x28	       348	convert.c	FUNCTION_13
0x4000cd4	              0x5b	                                 pop rbx	       348	convert.c	FUNCTION_13
0x4000cd5	              0x5d	                                 pop rbp	       348	convert.c	FUNCTION_13
0x4000cd6	            0x415c	                                 pop r12	       348	convert.c	FUNCTION_13
0x4000cd8	            0x415d	                                 pop r13	       348	convert.c	FUNCTION_13
0x4000cda	              0xc3	                                     ret	       348	convert.c	FUNCTION_13
crlf_to_git	functions,0:FOR,0:WHILE,0:ELSE,1:CALL,9:IF,14:DO,2:SWITCH,0	268
0x40023b7	            0x4157	                                push r15	       508	convert.c	FUNCTION_17
0x40023b9	            0x4156	                                push r14	       508	convert.c	FUNCTION_17
0x40023bb	            0x4155	                                push r13	       508	convert.c	FUNCTION_17
0x40023bd	            0x4154	                                push r12	       508	convert.c	FUNCTION_17
0x40023bf	              0x55	                                push rbp	       508	convert.c	FUNCTION_17
0x40023c0	              0x53	                                push rbx	       508	convert.c	FUNCTION_17
0x40023c1	        0x4883ec68	                           sub rsp, 0x68	       508	convert.c	FUNCTION_17
0x40023c5	      0x48897c2408	                mov qword [rsp + 8], rdi	       508	convert.c	FUNCTION_17
0x40023ca	        0x48893424	                    mov qword [rsp], rsi	       508	convert.c	FUNCTION_17
0x40023ce	    0x64488b042528	                mov rax, qword fs:[0x28]	       508	convert.c	FUNCTION_17
0x40023d7	      0x4889442458	             mov qword [rsp + 0x58], rax	       508	convert.c	FUNCTION_17
0x40023dc	            0x31c0	                            xor eax, eax	       508	convert.c	FUNCTION_17
0x40023de	        0x4183f901	                              cmp r9d, 1	       513	convert.c	FUNCTION_17	IF_1
0x40023e2	     0xf8437030000	                            je 0x400271f	       513	convert.c	FUNCTION_17	IF_1
0x40023e8	          0x4889d3	                            mov rbx, rdx	       513	convert.c	FUNCTION_17	IF_1
0x40023eb	          0x4889cd	                            mov rbp, rcx	       513	convert.c	FUNCTION_17	IF_1
0x40023ee	          0x4d89c5	                             mov r13, r8	       513	convert.c	FUNCTION_17	IF_1
0x40023f1	          0x4589cc	                           mov r12d, r9d	       513	convert.c	FUNCTION_17	IF_1
0x40023f4	          0x4885d2	                           test rdx, rdx	       513	convert.c	FUNCTION_17	IF_1
0x40023f7	            0x7409	                            je 0x4002402	       513	convert.c	FUNCTION_17	IF_1
0x40023f9	          0x4885c9	                           test rcx, rcx	       513	convert.c	FUNCTION_17	IF_1
0x40023fc	     0xf843e030000	                            je 0x4002740	       513	convert.c	FUNCTION_17	IF_1
0x4002402	          0x4d85ed	                           test r13, r13	       521	convert.c	FUNCTION_17	IF_2
0x4002405	            0x750e	                           jne 0x4002415	       521	convert.c	FUNCTION_17	IF_2
0x4002407	      0xb801000000	                              mov eax, 1	       522	convert.c	FUNCTION_17	IF_2
0x400240c	          0x4885db	                           test rbx, rbx	       521	convert.c	FUNCTION_17	IF_2
0x400240f	     0xf842b030000	                            je 0x4002740	       521	convert.c	FUNCTION_17	IF_2
0x4002415	      0x488d542420	                   lea rdx, [rsp + 0x20]	       524	convert.c	FUNCTION_17	CALL_1
0x400241a	          0x4889ee	                            mov rsi, rbp	       524	convert.c	FUNCTION_17	CALL_1
0x400241d	          0x4889df	                            mov rdi, rbx	       524	convert.c	FUNCTION_17	CALL_1
0x4002420	      0xe879ddffff	                   call sym.gather_stats	       524	convert.c	FUNCTION_17	CALL_1
0x4002425	      0x448b74242c	           mov r14d, dword [rsp + 0x2c] 	       526	convert.c	FUNCTION_17
0x400242a	          0x4585f6	                         test r14d, r14d	       526	convert.c	FUNCTION_17
0x400242d	           0xf95c0	                                setne al	       526	convert.c	FUNCTION_17
0x4002430	           0xfb6c0	                           movzx eax, al	       526	convert.c	FUNCTION_17
0x4002433	        0x89442414	             mov dword [rsp + 0x14], eax	       526	convert.c	FUNCTION_17
0x4002437	      0x458d7c24fb	                     lea r15d, [r12 - 5]	       528	convert.c	FUNCTION_17	IF_3
0x400243c	        0x4183ff02	                             cmp r15d, 2	       528	convert.c	FUNCTION_17	IF_3
0x4002440	     0xf878c000000	                            ja 0x40024d2	       528	convert.c	FUNCTION_17	IF_3
0x4002446	      0x488d742420	                   lea rsi, [rsp + 0x20]	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x400244b	          0x4889ef	                            mov rdi, rbp	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x400244e	      0xe8eddbffff	              call sym.convert_is_binary	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4002453	            0x85c0	                           test eax, eax	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x4002455	     0xf85cb020000	                           jne 0x4002726	       529	convert.c	FUNCTION_17	IF_3	IF_4	CALL_2
0x400245b	    0xf68424a00000	               test byte [rsp + 0xa0], 4	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4002463	            0x756d	                           jne 0x40024d2	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x4002465	      0x488d542440	                   lea rdx, [rsp + 0x40]	       231	convert.c	FUNCTION_10	CALL_1
0x400246a	        0x488b3424	                    mov rsi, qword [rsp]	       231	convert.c	FUNCTION_10	CALL_1
0x400246e	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       231	convert.c	FUNCTION_10	CALL_1
0x4002473	      0xe800000000	                          call 0x4002478	       231	convert.c	FUNCTION_10	CALL_1
0x4002478	          0x4885c0	                           test rax, rax	       232	convert.c	FUNCTION_10	IF_1
0x400247b	            0x7455	                            je 0x40024d2	       232	convert.c	FUNCTION_10	IF_1
0x400247d	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	       235	convert.c	FUNCTION_10	CALL_2
0x4002482	      0x48897c2418	             mov qword [rsp + 0x18], rdi	       235	convert.c	FUNCTION_10	CALL_2
0x4002487	          0x4889fa	                            mov rdx, rdi	       235	convert.c	FUNCTION_10	CALL_2
0x400248a	      0xbe0d000000	                            mov esi, 0xd	       235	convert.c	FUNCTION_10	CALL_2
0x400248f	      0x4889442408	                mov qword [rsp + 8], rax	       235	convert.c	FUNCTION_10	CALL_2
0x4002494	          0x4889c7	                            mov rdi, rax	       235	convert.c	FUNCTION_10	CALL_2
0x4002497	      0xe800000000	                          call 0x400249c	       235	convert.c	FUNCTION_10	CALL_2
0x400249c	          0x4885c0	                           test rax, rax	       236	convert.c	FUNCTION_10	IF_2
0x400249f	     0xf84f1020000	                            je 0x4002796	       236	convert.c	FUNCTION_10	IF_2
0x40024a5	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x40024aa	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x40024af	      0xe88dddffff	           call sym.gather_convert_stats	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x40024b4	        0x89442418	             mov dword [rsp + 0x18], eax	       238	convert.c	FUNCTION_10	IF_2	CALL_3
0x40024b8	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       243	convert.c	FUNCTION_10	CALL_4
0x40024bd	      0xe800000000	                          call 0x40024c2	       243	convert.c	FUNCTION_10	CALL_4
0x40024c2	        0x8b442418	            mov eax, dword [rsp + 0x18] 	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x40024c6	          0x83e006	                              and eax, 6	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x40024c9	          0x83f802	                              cmp eax, 2	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x40024cc	     0xf84b2020000	                            je 0x4002784	       537	convert.c	FUNCTION_17	IF_3	IF_5
0x40024d2	    0x8b8424a00000	            mov eax, dword [rsp + 0xa0] 	       541	convert.c	FUNCTION_17	IF_6
0x40024d9	          0x83e002	                              and eax, 2	       541	convert.c	FUNCTION_17	IF_6
0x40024dc	        0x89442408	                mov dword [rsp + 8], eax	       541	convert.c	FUNCTION_17	IF_6
0x40024e0	            0x7517	                           jne 0x40024f9	       541	convert.c	FUNCTION_17	IF_6
0x40024e2	    0xf68424a00000	               test byte [rsp + 0xa0], 1	       542	convert.c	FUNCTION_17	IF_6
0x40024ea	     0xf8442010000	                            je 0x4002632	       542	convert.c	FUNCTION_17	IF_6
0x40024f0	          0x4885ed	                           test rbp, rbp	       542	convert.c	FUNCTION_17	IF_6
0x40024f3	     0xf8439010000	                            je 0x4002632	       542	convert.c	FUNCTION_17	IF_6
0x40024f9	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       542	convert.c	FUNCTION_17	IF_6
0x40024fe	      0x4889442440	             mov qword [rsp + 0x40], rax	       542	convert.c	FUNCTION_17	IF_6
0x4002503	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       542	convert.c	FUNCTION_17	IF_6
0x4002508	      0x4889442448	             mov qword [rsp + 0x48], rax	       542	convert.c	FUNCTION_17	IF_6
0x400250d	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       542	convert.c	FUNCTION_17	IF_6
0x4002512	      0x4889442450	             mov qword [rsp + 0x50], rax	       542	convert.c	FUNCTION_17	IF_6
0x4002517	          0x4585f6	                         test r14d, r14d	       546	convert.c	FUNCTION_17	IF_6	IF_7
0x400251a	            0x7412	                            je 0x400252e	       546	convert.c	FUNCTION_17	IF_6	IF_7
0x400251c	        0x8b44244c	            mov eax, dword [rsp + 0x4c] 	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x4002520	         0x1442448	             add dword [rsp + 0x48], eax	       547	convert.c	FUNCTION_17	IF_6	IF_7
0x4002524	    0xc744244c0000	               mov dword [rsp + 0x4c], 0	       548	convert.c	FUNCTION_17	IF_6	IF_7
0x400252c	            0xeb08	                           jmp 0x4002536	       548	convert.c	FUNCTION_17	IF_6	IF_7
0x400252e	    0xc74424140000	               mov dword [rsp + 0x14], 0	       548	convert.c	FUNCTION_17	IF_6	IF_7
0x4002536	          0x4489e2	                           mov edx, r12d	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x4002539	      0x488d742440	                   lea rsi, [rsp + 0x40]	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x400253e	          0x4889ef	                            mov rdi, rbp	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x4002541	      0xe8baecffff	        call sym.will_convert_lf_to_crlf	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x4002546	            0x85c0	                           test eax, eax	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x4002548	            0x7410	                            je 0x400255a	       551	convert.c	FUNCTION_17	IF_6	IF_8	CALL_5
0x400254a	        0x8b442448	            mov eax, dword [rsp + 0x48] 	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x400254e	         0x144244c	             add dword [rsp + 0x4c], eax	       552	convert.c	FUNCTION_17	IF_6	IF_8
0x4002552	    0xc74424480000	               mov dword [rsp + 0x48], 0	       553	convert.c	FUNCTION_17	IF_6	IF_8
0x400255a	      0x837c242c00	               cmp dword [rsp + 0x2c], 0	       201	convert.c	FUNCTION_9	IF_1
0x400255f	            0x7468	                            je 0x40025c9	       201	convert.c	FUNCTION_9	IF_1
0x4002561	      0x837c244c00	               cmp dword [rsp + 0x4c], 0	       201	convert.c	FUNCTION_9	IF_1
0x4002566	            0x7561	                           jne 0x40025c9	       201	convert.c	FUNCTION_9	IF_1
0x4002568	    0xf68424a00000	               test byte [rsp + 0xa0], 1	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x4002570	            0x7425	                            je 0x4002597	       205	convert.c	FUNCTION_9	IF_1	IF_2
0x4002572	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4002577	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x400257c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4002581	      0xe800000000	                          call 0x4002586	        54	gettext.h	FUNCTION_74	CALL_2
0x4002586	        0x488b3424	                    mov rsi, qword [rsp]	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x400258a	          0x4889c7	                            mov rdi, rax	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x400258d	      0xb800000000	                              mov eax, 0	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x4002592	      0xe800000000	                          call 0x4002597	       206	convert.c	FUNCTION_9	IF_1	CALL_2
0x4002597	      0x837c240800	                  cmp dword [rsp + 8], 0	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x400259c	     0xf8490000000	                            je 0x4002632	       207	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3
0x40025a2	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x40025a7	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x40025ac	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x40025b1	      0xe800000000	                          call 0x40025b6	        54	gettext.h	FUNCTION_74	CALL_2
0x40025b6	        0x488b3424	                    mov rsi, qword [rsp]	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x40025ba	          0x4889c7	                            mov rdi, rax	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x40025bd	      0xb800000000	                              mov eax, 0	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x40025c2	      0xe800000000	                          call 0x40025c7	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x40025c7	            0xeb69	                           jmp 0x4002632	       208	convert.c	FUNCTION_9	IF_1	ELSE_1	IF_3	CALL_4
0x40025c9	      0x837c242800	               cmp dword [rsp + 0x28], 0	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x40025ce	            0x7462	                            je 0x4002632	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x40025d0	      0x837c244800	               cmp dword [rsp + 0x48], 0	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x40025d5	            0x755b	                           jne 0x4002632	       211	convert.c	FUNCTION_9	ELSE_2	IF_4
0x40025d7	    0xf68424a00000	               test byte [rsp + 0xa0], 1	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x40025df	            0x7425	                            je 0x4002606	       215	convert.c	FUNCTION_9	ELSE_2	IF_4	IF_5
0x40025e1	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x40025e6	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x40025eb	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x40025f0	      0xe800000000	                          call 0x40025f5	        54	gettext.h	FUNCTION_74	CALL_2
0x40025f5	        0x488b3424	                    mov rsi, qword [rsp]	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x40025f9	          0x4889c7	                            mov rdi, rax	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x40025fc	      0xb800000000	                              mov eax, 0	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4002601	      0xe800000000	                          call 0x4002606	       216	convert.c	FUNCTION_9	ELSE_2	IF_4	CALL_6
0x4002606	      0x837c240800	                  cmp dword [rsp + 8], 0	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x400260b	            0x7425	                            je 0x4002632	       217	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6
0x400260d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4002612	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4002617	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x400261c	      0xe800000000	                          call 0x4002621	        54	gettext.h	FUNCTION_74	CALL_2
0x4002621	        0x488b3424	                    mov rsi, qword [rsp]	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4002625	          0x4889c7	                            mov rdi, rax	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4002628	      0xb800000000	                              mov eax, 0	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x400262d	      0xe800000000	                          call 0x4002632	       218	convert.c	FUNCTION_9	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x4002632	      0x837c241400	               cmp dword [rsp + 0x14], 0	       557	convert.c	FUNCTION_17	IF_9
0x4002637	     0xf84f0000000	                            je 0x400272d	       557	convert.c	FUNCTION_17	IF_9
0x400263d	          0x4d85ed	                           test r13, r13	       564	convert.c	FUNCTION_17	IF_10
0x4002640	     0xf84ee000000	                            je 0x4002734	       564	convert.c	FUNCTION_17	IF_10
0x4002646	        0x498b4500	                    mov rax, qword [r13]	       141	strbuf.h	FUNCTION_62
0x400264a	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x400264d	            0x7408	                            je 0x4002657	       141	strbuf.h	FUNCTION_62
0x400264f	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_62
0x4002653	        0x492b4508	                sub rax, qword [r13 + 8]	       141	strbuf.h	FUNCTION_62
0x4002657	        0x498b5508	                mov rdx, qword [r13 + 8]	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400265b	          0x4801d0	                            add rax, rdx	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x400265e	          0x4839c5	                            cmp rbp, rax	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4002661	            0x760e	                           jbe 0x4002671	       568	convert.c	FUNCTION_17	IF_11	CALL_7
0x4002663	          0x4889ee	                            mov rsi, rbp	       569	convert.c	FUNCTION_17	CALL_8
0x4002666	          0x4829d6	                            sub rsi, rdx	       569	convert.c	FUNCTION_17	CALL_8
0x4002669	          0x4c89ef	                            mov rdi, r13	       569	convert.c	FUNCTION_17	CALL_8
0x400266c	      0xe800000000	                          call 0x4002671	       569	convert.c	FUNCTION_17	CALL_8
0x4002671	        0x498b4510	            mov rax, qword [r13 + 0x10] 	       570	convert.c	FUNCTION_17
0x4002675	        0x4183ff02	                             cmp r15d, 2	       571	convert.c	FUNCTION_17	IF_12
0x4002679	            0x771d	                            ja 0x4002698	       571	convert.c	FUNCTION_17	IF_12
0x400267b	          0x4801dd	                            add rbp, rbx	       571	convert.c	FUNCTION_17	IF_12
0x400267e	        0x4883c301	                              add rbx, 1	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x4002682	         0xfb653ff	               movzx edx, byte [rbx - 1]	       578	convert.c	FUNCTION_17	IF_12	DO_1
0x4002686	          0x80fa0d	                             cmp dl, 0xd	       579	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4002689	            0x7406	                            je 0x4002691	       579	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x400268b	            0x8810	                      mov byte [rax], dl	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x400268d	        0x488d4001	                      lea rax, [rax + 1]	       580	convert.c	FUNCTION_17	IF_12	DO_1	IF_13
0x4002691	          0x4839eb	                            cmp rbx, rbp	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x4002694	            0x75e8	                           jne 0x400267e	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x4002696	            0xeb24	                           jmp 0x40026bc	       581	convert.c	FUNCTION_17	IF_12	DO_1
0x4002698	        0x4883c301	                              add rbx, 1	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x400269c	         0xfb653ff	               movzx edx, byte [rbx - 1]	       584	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40026a0	          0x80fa0d	                             cmp dl, 0xd	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026a3	            0x750b	                           jne 0x40026b0	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026a5	        0x4883fd01	                              cmp rbp, 1	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026a9	            0x7605	                           jbe 0x40026b0	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026ab	          0x803b0a	                     cmp byte [rbx], 0xa	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026ae	            0x7406	                            je 0x40026b6	       585	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026b0	            0x8810	                      mov byte [rax], dl	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026b2	        0x488d4001	                      lea rax, [rax + 1]	       586	convert.c	FUNCTION_17	ELSE_1	DO_2	IF_14
0x40026b6	        0x4883ed01	                              sub rbp, 1	       587	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40026ba	            0x75dc	                           jne 0x4002698	       587	convert.c	FUNCTION_17	ELSE_1	DO_2
0x40026bc	        0x498b4d10	            mov rcx, qword [r13 + 0x10] 	       589	convert.c	FUNCTION_17	CALL_9
0x40026c0	          0x4889c6	                            mov rsi, rax	       589	convert.c	FUNCTION_17	CALL_9
0x40026c3	          0x4829ce	                            sub rsi, rcx	       589	convert.c	FUNCTION_17	CALL_9
0x40026c6	        0x498b5500	                    mov rdx, qword [r13]	       162	strbuf.h	FUNCTION_63	IF_1
0x40026ca	        0x4883fa01	                              cmp rdx, 1	       162	strbuf.h	FUNCTION_63	IF_1
0x40026ce	        0x4883d2ff	             adc rdx, 0xffffffffffffffff	       162	strbuf.h	FUNCTION_63	IF_1
0x40026d2	          0x4839d6	                            cmp rsi, rdx	       162	strbuf.h	FUNCTION_63	IF_1
0x40026d5	            0x760f	                           jbe 0x40026e6	       162	strbuf.h	FUNCTION_63	IF_1
0x40026d7	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x40026dc	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x40026e1	      0xe800000000	                          call 0x40026e6	       163	strbuf.h	FUNCTION_63	CALL_1
0x40026e6	        0x49897508	                mov qword [r13 + 8], rsi	       164	strbuf.h	FUNCTION_63
0x40026ea	    0x4881f9000000	                              cmp rcx, 0	       165	strbuf.h	FUNCTION_63	IF_2
0x40026f1	            0x740a	                            je 0x40026fd	       165	strbuf.h	FUNCTION_63	IF_2
0x40026f3	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_63	IF_2
0x40026f6	      0xb801000000	                              mov eax, 1	       590	convert.c	FUNCTION_17
0x40026fb	            0xeb43	                           jmp 0x4002740	       590	convert.c	FUNCTION_17
0x40026fd	    0x803d00000000	                cmp byte [0x04002704], 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002704	            0x7435	                            je 0x400273b	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002706	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x400270b	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002710	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002715	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x400271a	      0xe800000000	                          call 0x400271f	       168	strbuf.h	FUNCTION_63	CALL_2
0x400271f	      0xb800000000	                              mov eax, 0	       515	convert.c	FUNCTION_17	IF_1
0x4002724	            0xeb1a	                           jmp 0x4002740	       515	convert.c	FUNCTION_17	IF_1
0x4002726	      0xb800000000	                              mov eax, 0	       530	convert.c	FUNCTION_17	IF_3	IF_4
0x400272b	            0xeb13	                           jmp 0x4002740	       530	convert.c	FUNCTION_17	IF_3	IF_4
0x400272d	      0xb800000000	                              mov eax, 0	       558	convert.c	FUNCTION_17	IF_9
0x4002732	            0xeb0c	                           jmp 0x4002740	       558	convert.c	FUNCTION_17	IF_9
0x4002734	      0xb801000000	                              mov eax, 1	       565	convert.c	FUNCTION_17	IF_10
0x4002739	            0xeb05	                           jmp 0x4002740	       565	convert.c	FUNCTION_17	IF_10
0x400273b	      0xb801000000	                              mov eax, 1	       590	convert.c	FUNCTION_17
0x4002740	      0x488b4c2458	            mov rcx, qword [rsp + 0x58] 	       591	convert.c	FUNCTION_17
0x4002745	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       591	convert.c	FUNCTION_17
0x400274e	     0xf849d000000	                            je 0x40027f1	       591	convert.c	FUNCTION_17
0x4002754	      0xe993000000	                           jmp 0x40027ec	       591	convert.c	FUNCTION_17
0x4002759	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       591	convert.c	FUNCTION_17
0x400275e	      0x4889442440	             mov qword [rsp + 0x40], rax	       591	convert.c	FUNCTION_17
0x4002763	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       591	convert.c	FUNCTION_17
0x4002768	      0x4889442448	             mov qword [rsp + 0x48], rax	       591	convert.c	FUNCTION_17
0x400276d	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       591	convert.c	FUNCTION_17
0x4002772	      0x4889442450	             mov qword [rsp + 0x50], rax	       591	convert.c	FUNCTION_17
0x4002777	    0xc74424140000	               mov dword [rsp + 0x14], 0	       539	convert.c	FUNCTION_17	IF_3	IF_5
0x400277f	      0xe9b2fdffff	                           jmp 0x4002536	       539	convert.c	FUNCTION_17	IF_3	IF_5
0x4002784	    0x8b8424a00000	            mov eax, dword [rsp + 0xa0] 	       541	convert.c	FUNCTION_17	IF_6
0x400278b	          0x83e002	                              and eax, 2	       541	convert.c	FUNCTION_17	IF_6
0x400278e	        0x89442408	                mov dword [rsp + 8], eax	       541	convert.c	FUNCTION_17	IF_6
0x4002792	            0x75c5	                           jne 0x4002759	       541	convert.c	FUNCTION_17	IF_6
0x4002794	            0xeb3a	                           jmp 0x40027d0	       541	convert.c	FUNCTION_17	IF_6
0x4002796	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       243	convert.c	FUNCTION_10	CALL_4
0x400279b	      0xe800000000	                          call 0x40027a0	       243	convert.c	FUNCTION_10	CALL_4
0x40027a0	      0xe92dfdffff	                           jmp 0x40024d2	       243	convert.c	FUNCTION_10	CALL_4
0x40027a5	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       243	convert.c	FUNCTION_10	CALL_4
0x40027aa	      0x4889442440	             mov qword [rsp + 0x40], rax	       243	convert.c	FUNCTION_10	CALL_4
0x40027af	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       243	convert.c	FUNCTION_10	CALL_4
0x40027b4	      0x4889442448	             mov qword [rsp + 0x48], rax	       243	convert.c	FUNCTION_10	CALL_4
0x40027b9	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       243	convert.c	FUNCTION_10	CALL_4
0x40027be	      0x4889442450	             mov qword [rsp + 0x50], rax	       243	convert.c	FUNCTION_10	CALL_4
0x40027c3	    0xc74424140000	               mov dword [rsp + 0x14], 0	       542	convert.c	FUNCTION_17	IF_6
0x40027cb	      0xe966fdffff	                           jmp 0x4002536	       542	convert.c	FUNCTION_17	IF_6
0x40027d0	    0xf68424a00000	               test byte [rsp + 0xa0], 1	       542	convert.c	FUNCTION_17	IF_6
0x40027d8	            0x7405	                            je 0x40027df	       542	convert.c	FUNCTION_17	IF_6
0x40027da	          0x4885ed	                           test rbp, rbp	       542	convert.c	FUNCTION_17	IF_6
0x40027dd	            0x75c6	                           jne 0x40027a5	       542	convert.c	FUNCTION_17	IF_6
0x40027df	    0xc74424140000	               mov dword [rsp + 0x14], 0	       539	convert.c	FUNCTION_17	IF_3	IF_5
0x40027e7	      0xe946feffff	                           jmp 0x4002632	       539	convert.c	FUNCTION_17	IF_3	IF_5
0x40027ec	      0xe800000000	                          call 0x40027f1	       591	convert.c	FUNCTION_17
0x40027f1	        0x4883c468	                           add rsp, 0x68	       591	convert.c	FUNCTION_17
0x40027f5	              0x5b	                                 pop rbx	       591	convert.c	FUNCTION_17
0x40027f6	              0x5d	                                 pop rbp	       591	convert.c	FUNCTION_17
0x40027f7	            0x415c	                                 pop r12	       591	convert.c	FUNCTION_17
0x40027f9	            0x415d	                                 pop r13	       591	convert.c	FUNCTION_17
0x40027fb	            0x415e	                                 pop r14	       591	convert.c	FUNCTION_17
0x40027fd	            0x415f	                                 pop r15	       591	convert.c	FUNCTION_17
0x40027ff	              0xc3	                                     ret	       591	convert.c	FUNCTION_17
apply_filter	functions,0:FOR,0:WHILE,0:ELSE,2:CALL,2:IF,6:DO,0:SWITCH,0	368
0x4001306	            0x4157	                                push r15	       977	convert.c	FUNCTION_25
0x4001308	            0x4156	                                push r14	       977	convert.c	FUNCTION_25
0x400130a	            0x4155	                                push r13	       977	convert.c	FUNCTION_25
0x400130c	            0x4154	                                push r12	       977	convert.c	FUNCTION_25
0x400130e	              0x55	                                push rbp	       977	convert.c	FUNCTION_25
0x400130f	              0x53	                                push rbx	       977	convert.c	FUNCTION_25
0x4001310	    0x4881ecc80000	                           sub rsp, 0xc8	       977	convert.c	FUNCTION_25
0x4001317	        0x48893c24	                    mov qword [rsp], rdi	       977	convert.c	FUNCTION_25
0x400131b	      0x4889742410	             mov qword [rsp + 0x10], rsi	       977	convert.c	FUNCTION_25
0x4001320	      0x4889542408	                mov qword [rsp + 8], rdx	       977	convert.c	FUNCTION_25
0x4001325	        0x894c2418	             mov dword [rsp + 0x18], ecx	       977	convert.c	FUNCTION_25
0x4001329	    0x8b9c24000100	           mov ebx, dword [rsp + 0x100] 	       977	convert.c	FUNCTION_25
0x4001330	    0x4c8bac240801	           mov r13, qword [rsp + 0x108] 	       977	convert.c	FUNCTION_25
0x4001338	    0x64488b042528	                mov rax, qword fs:[0x28]	       977	convert.c	FUNCTION_25
0x4001341	    0x48898424b800	             mov qword [rsp + 0xb8], rax	       977	convert.c	FUNCTION_25
0x4001349	            0x31c0	                            xor eax, eax	       977	convert.c	FUNCTION_25
0x400134b	          0x4d85c9	                             test r9, r9	       980	convert.c	FUNCTION_25	IF_1
0x400134e	     0xf8443050000	                            je 0x4001897	       980	convert.c	FUNCTION_25	IF_1
0x4001354	          0x4c89c5	                             mov rbp, r8	       980	convert.c	FUNCTION_25	IF_1
0x4001357	          0x4d85c0	                             test r8, r8	       983	convert.c	FUNCTION_25	IF_2
0x400135a	     0xf843e050000	                            je 0x400189e	       983	convert.c	FUNCTION_25	IF_2
0x4001360	          0x4189de	                           mov r14d, ebx	       986	convert.c	FUNCTION_25	IF_3
0x4001363	        0x4183e601	                             and r14d, 1	       986	convert.c	FUNCTION_25	IF_3
0x4001367	            0x7415	                            je 0x400137e	       986	convert.c	FUNCTION_25	IF_3
0x4001369	      0x4983792000	                cmp qword [r9 + 0x20], 0	       986	convert.c	FUNCTION_25	IF_3
0x400136e	            0x750e	                           jne 0x400137e	       986	convert.c	FUNCTION_25	IF_3
0x4001370	        0x4d8b6118	              mov r12, qword [r9 + 0x18]	       986	convert.c	FUNCTION_25	IF_3
0x4001374	          0x4d85e4	                           test r12, r12	       986	convert.c	FUNCTION_25	IF_3
0x4001377	            0x7526	                           jne 0x400139f	       986	convert.c	FUNCTION_25	IF_3
0x4001379	      0xe94f050000	                           jmp 0x40018cd	       986	convert.c	FUNCTION_25	IF_3
0x400137e	          0xf6c302	                              test bl, 2	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x4001381	     0xf84b5010000	                            je 0x400153c	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x4001387	      0x4983792000	                cmp qword [r9 + 0x20], 0	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x400138c	     0xf85a1050000	                           jne 0x4001933	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x4001392	        0x4d8b6110	              mov r12, qword [r9 + 0x10]	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x4001396	          0x4d85e4	                           test r12, r12	       991	convert.c	FUNCTION_25	IF_5
0x4001399	     0xf8406050000	                            je 0x40018a5	       991	convert.c	FUNCTION_25	IF_5
0x400139f	      0x41803c2400	                       cmp byte [r12], 0	       991	convert.c	FUNCTION_25	IF_5
0x40013a4	     0xf8492010000	                            je 0x400153c	       991	convert.c	FUNCTION_25	IF_5
0x40013aa	    0x48c744242000	               mov qword [rsp + 0x20], 0	       714	convert.c	FUNCTION_20
0x40013b3	    0x48c744242800	               mov qword [rsp + 0x28], 0	       714	convert.c	FUNCTION_20
0x40013bc	    0x48c744243000	               mov qword [rsp + 0x30], 0	       714	convert.c	FUNCTION_20
0x40013c5	      0x488d5c2470	                   lea rbx, [rsp + 0x70]	        90	string3.h	FUNCTION_106	CALL_6
0x40013ca	      0xb906000000	                              mov ecx, 6	        90	string3.h	FUNCTION_106	CALL_6
0x40013cf	      0xb800000000	                              mov eax, 0	        90	string3.h	FUNCTION_106	CALL_6
0x40013d4	          0x4889df	                            mov rdi, rbx	        90	string3.h	FUNCTION_106	CALL_6
0x40013d7	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_106	CALL_6
0x40013da	    0x48c744247000	               mov qword [rsp + 0x70], 0	       719	convert.c	FUNCTION_20
0x40013e3	      0x488d442440	                   lea rax, [rsp + 0x40]	       720	convert.c	FUNCTION_20
0x40013e8	      0x4889442478	             mov qword [rsp + 0x78], rax	       720	convert.c	FUNCTION_20
0x40013ed	    0xc78424840000	     mov dword [rsp + 0x84], 0xffffffff 	       721	convert.c	FUNCTION_20
0x40013f8	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       722	convert.c	FUNCTION_20
0x40013fd	      0x4889442440	             mov qword [rsp + 0x40], rax	       722	convert.c	FUNCTION_20
0x4001402	      0x488b442408	                mov rax, qword [rsp + 8]	       723	convert.c	FUNCTION_20
0x4001407	      0x4889442448	             mov qword [rsp + 0x48], rax	       723	convert.c	FUNCTION_20
0x400140c	        0x8b442418	            mov eax, dword [rsp + 0x18] 	       724	convert.c	FUNCTION_20
0x4001410	        0x89442450	             mov dword [rsp + 0x50], eax	       724	convert.c	FUNCTION_20
0x4001414	      0x4c89642458	             mov qword [rsp + 0x58], r12	       725	convert.c	FUNCTION_20
0x4001419	        0x488b0424	                    mov rax, qword [rsp]	       726	convert.c	FUNCTION_20
0x400141d	      0x4889442460	             mov qword [rsp + 0x60], rax	       726	convert.c	FUNCTION_20
0x4001422	      0xbf00000000	                              mov edi, 0	       728	convert.c	FUNCTION_20	CALL_2
0x4001427	      0xe800000000	                          call 0x400142c	       728	convert.c	FUNCTION_20	CALL_2
0x400142c	          0x4889df	                            mov rdi, rbx	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x400142f	      0xe800000000	                          call 0x4001434	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001434	            0x89c2	                            mov edx, eax	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001436	      0xb800000000	                              mov eax, 0	       730	convert.c	FUNCTION_20	IF_1
0x400143b	            0x85d2	                           test edx, edx	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x400143d	     0xf856e040000	                           jne 0x40018b1	       729	convert.c	FUNCTION_20	IF_1	CALL_3
0x4001443	      0x488b542408	                mov rdx, qword [rsp + 8]	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001448	    0x8bb424840000	            mov esi, dword [rsp + 0x84] 	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x400144f	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001454	      0xe800000000	                          call 0x4001459	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001459	      0xbb00000000	                              mov ebx, 0	       713	convert.c	FUNCTION_20
0x400145e	          0x4885c0	                           test rax, rax	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001461	            0x7917	                           jns 0x400147a	       732	convert.c	FUNCTION_20	IF_2	CALL_4
0x4001463	          0x4c89e6	                            mov rsi, r12	       733	convert.c	FUNCTION_20	IF_2	CALL_5
0x4001466	      0xbf00000000	                              mov edi, 0	       733	convert.c	FUNCTION_20	IF_2	CALL_5
0x400146b	      0xb800000000	                              mov eax, 0	       733	convert.c	FUNCTION_20	IF_2	CALL_5
0x4001470	      0xe800000000	                          call 0x4001475	       733	convert.c	FUNCTION_20	IF_2	CALL_5
0x4001475	      0xbbffffffff	                     mov ebx, 0xffffffff	       733	convert.c	FUNCTION_20	IF_2	CALL_5
0x400147a	    0x8bbc24840000	            mov edi, dword [rsp + 0x84] 	       735	convert.c	FUNCTION_20	IF_3	CALL_6
0x4001481	      0xe800000000	                          call 0x4001486	       735	convert.c	FUNCTION_20	IF_3	CALL_6
0x4001486	            0x85c0	                           test eax, eax	       735	convert.c	FUNCTION_20	IF_3	CALL_6
0x4001488	            0x7427	                            je 0x40014b1	       735	convert.c	FUNCTION_20	IF_3	CALL_6
0x400148a	          0x4c89e6	                            mov rsi, r12	       736	convert.c	FUNCTION_20	IF_3	CALL_7
0x400148d	      0xbf00000000	                              mov edi, 0	       736	convert.c	FUNCTION_20	IF_3	CALL_7
0x4001492	      0xb800000000	                              mov eax, 0	       736	convert.c	FUNCTION_20	IF_3	CALL_7
0x4001497	      0xe800000000	                          call 0x400149c	       736	convert.c	FUNCTION_20	IF_3	CALL_7
0x400149c	      0x488d7c2470	                   lea rdi, [rsp + 0x70]	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014a1	      0xe800000000	                          call 0x40014a6	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014a6	      0xbbffffffff	                     mov ebx, 0xffffffff	       736	convert.c	FUNCTION_20	IF_3	CALL_7
0x40014ab	            0x85c0	                           test eax, eax	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014ad	            0x747b	                            je 0x400152a	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014af	            0xeb0e	                           jmp 0x40014bf	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014b1	      0x488d7c2470	                   lea rdi, [rsp + 0x70]	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014b6	      0xe800000000	                          call 0x40014bb	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014bb	            0x85c0	                           test eax, eax	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014bd	            0x7419	                            je 0x40014d8	       738	convert.c	FUNCTION_20	IF_4	CALL_8
0x40014bf	          0x4c89e6	                            mov rsi, r12	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014c2	      0xbf00000000	                              mov edi, 0	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014c7	      0xb800000000	                              mov eax, 0	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014cc	      0xe800000000	                          call 0x40014d1	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014d1	      0xbbffffffff	                     mov ebx, 0xffffffff	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014d6	            0xeb52	                           jmp 0x400152a	       739	convert.c	FUNCTION_20	IF_4	CALL_9
0x40014d8	            0x85db	                           test ebx, ebx	       742	convert.c	FUNCTION_20	IF_5
0x40014da	            0x754e	                           jne 0x400152a	       742	convert.c	FUNCTION_20	IF_5
0x40014dc	        0x488b4d00	                    mov rcx, qword [rbp]	        53	string3.h	FUNCTION_103	CALL_3
0x40014e0	    0x48898c24a000	             mov qword [rsp + 0xa0], rcx	        53	string3.h	FUNCTION_103	CALL_3
0x40014e8	        0x488b5508	                mov rdx, qword [rbp + 8]	        53	string3.h	FUNCTION_103	CALL_3
0x40014ec	    0x48899424a800	             mov qword [rsp + 0xa8], rdx	        53	string3.h	FUNCTION_103	CALL_3
0x40014f4	        0x488b4510	            mov rax, qword [rbp + 0x10] 	        53	string3.h	FUNCTION_103	CALL_3
0x40014f8	    0x48898424b000	             mov qword [rsp + 0xb0], rax	        53	string3.h	FUNCTION_103	CALL_3
0x4001500	      0x488b742420	            mov rsi, qword [rsp + 0x20] 	        53	string3.h	FUNCTION_103	CALL_3
0x4001505	        0x48897500	                    mov qword [rbp], rsi	        53	string3.h	FUNCTION_103	CALL_3
0x4001509	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	        53	string3.h	FUNCTION_103	CALL_3
0x400150e	        0x48897508	                mov qword [rbp + 8], rsi	        53	string3.h	FUNCTION_103	CALL_3
0x4001512	      0x488b742430	            mov rsi, qword [rsp + 0x30] 	        53	string3.h	FUNCTION_103	CALL_3
0x4001517	        0x48897510	            mov qword [rbp + 0x10], rsi 	        53	string3.h	FUNCTION_103	CALL_3
0x400151b	      0x48894c2420	             mov qword [rsp + 0x20], rcx	        53	string3.h	FUNCTION_103	CALL_3
0x4001520	      0x4889542428	             mov qword [rsp + 0x28], rdx	        53	string3.h	FUNCTION_103	CALL_3
0x4001525	      0x4889442430	             mov qword [rsp + 0x30], rax	        53	string3.h	FUNCTION_103	CALL_3
0x400152a	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       745	convert.c	FUNCTION_20	CALL_11
0x400152f	      0xe800000000	                          call 0x4001534	       745	convert.c	FUNCTION_20	CALL_11
0x4001534	          0x8d4301	                      lea eax, [rbx + 1]	       746	convert.c	FUNCTION_20
0x4001537	      0xe975030000	                           jmp 0x40018b1	       746	convert.c	FUNCTION_20
0x400153c	        0x4d8b6120	              mov r12, qword [r9 + 0x20]	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001540	          0x4d85e4	                           test r12, r12	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001543	     0xf8463030000	                            je 0x40018ac	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001549	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_25
0x400154e	      0x41803c2400	                       cmp byte [r12], 0	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001553	     0xf8458030000	                            je 0x40018b1	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001559	    0x48c744244000	               mov qword [rsp + 0x40], 0	       808	convert.c	FUNCTION_23
0x4001562	    0x48c744244800	               mov qword [rsp + 0x48], 0	       808	convert.c	FUNCTION_23
0x400156b	    0x48c744245000	               mov qword [rsp + 0x50], 0	       808	convert.c	FUNCTION_23
0x4001574	    0x48c744247000	               mov qword [rsp + 0x70], 0	       809	convert.c	FUNCTION_23
0x400157d	    0x48c744247800	               mov qword [rsp + 0x78], 0	       809	convert.c	FUNCTION_23
0x4001586	    0x48c784248000	               mov qword [rsp + 0x80], 0	       809	convert.c	FUNCTION_23
0x4001592	    0x833d00000000	               cmp dword [0x04001599], 0	       812	convert.c	FUNCTION_23	IF_1
0x4001599	            0x752f	                           jne 0x40015ca	       812	convert.c	FUNCTION_23	IF_1
0x400159b	    0xc70500000000	               mov dword [0x040015a5], 1	       813	convert.c	FUNCTION_23	IF_1
0x40015a5	      0xb900000000	                              mov ecx, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x40015aa	      0xba00000000	                              mov edx, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x40015af	      0xbe00000000	                              mov esi, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x40015b4	      0xbf00000000	                              mov edi, 0	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x40015b9	      0xe800000000	                          call 0x40015be	       814	convert.c	FUNCTION_23	IF_1	CALL_1
0x40015be	      0xbf00000000	                              mov edi, 0	       820	convert.c	FUNCTION_23	CALL_3
0x40015c3	      0xe800000000	                          call 0x40015c8	       820	convert.c	FUNCTION_23	CALL_3
0x40015c8	            0xeb1f	                           jmp 0x40015e9	       820	convert.c	FUNCTION_23	CALL_3
0x40015ca	          0x4c89e6	                            mov rsi, r12	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x40015cd	      0xbf00000000	                              mov edi, 0	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x40015d2	      0xe800000000	                          call 0x40015d7	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x40015d7	          0x4989c7	                            mov r15, rax	       817	convert.c	FUNCTION_23	ELSE_1	CALL_2
0x40015da	      0xbf00000000	                              mov edi, 0	       820	convert.c	FUNCTION_23	CALL_3
0x40015df	      0xe800000000	                          call 0x40015e4	       820	convert.c	FUNCTION_23	CALL_3
0x40015e4	          0x4d85ff	                           test r15, r15	       822	convert.c	FUNCTION_23	IF_2
0x40015e7	            0x753f	                           jne 0x4001628	       822	convert.c	FUNCTION_23	IF_2
0x40015e9	      0xbf80000000	                           mov edi, 0x80	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x40015ee	      0xe800000000	                          call 0x40015f3	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x40015f3	          0x4989c7	                            mov r15, rax	       823	convert.c	FUNCTION_23	IF_2	CALL_4
0x40015f6	    0xc74078000000	               mov dword [rax + 0x78], 0	       824	convert.c	FUNCTION_23	IF_2
0x40015fd	      0xb900000000	                              mov ecx, 0	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001602	          0x4c89e2	                            mov rdx, r12	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001605	          0x4889c6	                            mov rsi, rax	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001608	      0xbf00000000	                              mov edi, 0	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x400160d	      0xe800000000	                          call 0x4001612	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001612	            0x85c0	                           test eax, eax	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001614	            0x7412	                            je 0x4001628	       826	convert.c	FUNCTION_23	IF_2	IF_3	CALL_5
0x4001616	          0x4c89ff	                            mov rdi, r15	       827	convert.c	FUNCTION_23	IF_2	IF_3	CALL_6
0x4001619	      0xe800000000	                          call 0x400161e	       827	convert.c	FUNCTION_23	IF_2	IF_3	CALL_6
0x400161e	      0xb800000000	                              mov eax, 0	       828	convert.c	FUNCTION_23	IF_2	IF_3
0x4001623	      0xe989020000	                           jmp 0x40018b1	       828	convert.c	FUNCTION_23	IF_2	IF_3
0x4001628	        0x41855f78	           test dword [r15 + 0x78], ebx 	       833	convert.c	FUNCTION_23	IF_4
0x400162c	     0xf845e020000	                            je 0x4001890	       833	convert.c	FUNCTION_23	IF_4
0x4001632	          0x4585f6	                         test r14d, r14d	       836	convert.c	FUNCTION_23	IF_5
0x4001635	     0xf85a1020000	                           jne 0x40018dc	       836	convert.c	FUNCTION_23	IF_5
0x400163b	          0xf6c302	                              test bl, 2	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x400163e	     0xf85a0020000	                           jne 0x40018e4	       838	convert.c	FUNCTION_23	ELSE_2	IF_6
0x4001644	      0xbf00000000	                              mov edi, 0	       841	convert.c	FUNCTION_23	CALL_7
0x4001649	      0xb800000000	                              mov eax, 0	       841	convert.c	FUNCTION_23	CALL_7
0x400164e	      0xe800000000	                          call 0x4001653	       841	convert.c	FUNCTION_23	CALL_7
0x4001653	      0xb800000000	                              mov eax, 0	       850	convert.c	FUNCTION_23	CALL_14
0x4001658	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       850	convert.c	FUNCTION_23	CALL_14
0x400165f	        0x488b3c24	                    mov rdi, qword [rsp]	       850	convert.c	FUNCTION_23	CALL_14
0x4001663	            0xf2ae	              repne scasb al, byte [rdi]	       850	convert.c	FUNCTION_23	CALL_14
0x4001665	          0x4889c8	                            mov rax, rcx	       850	convert.c	FUNCTION_23	CALL_14
0x4001668	          0x48f7d0	                                 not rax	       850	convert.c	FUNCTION_23	CALL_14
0x400166b	        0x4883e801	                              sub rax, 1	       850	convert.c	FUNCTION_23	CALL_14
0x400166f	    0x483de2ff0000	                         cmp rax, 0xffe2	       851	convert.c	FUNCTION_23	IF_8
0x4001675	            0x7614	                           jbe 0x400168b	       851	convert.c	FUNCTION_23	IF_8
0x4001677	      0xbf00000000	                              mov edi, 0	       852	convert.c	FUNCTION_23	IF_8	CALL_15
0x400167c	      0xb800000000	                              mov eax, 0	       852	convert.c	FUNCTION_23	IF_8	CALL_15
0x4001681	      0xe800000000	                          call 0x4001686	       852	convert.c	FUNCTION_23	IF_8	CALL_15
0x4001686	      0xe9b1020000	                           jmp 0x400193c	       852	convert.c	FUNCTION_23	IF_8	CALL_15
0x400168b	        0x418b7f44	            mov edi, dword [r15 + 0x44] 	       856	convert.c	FUNCTION_23	CALL_16
0x400168f	        0x488b1424	                    mov rdx, qword [rsp]	       856	convert.c	FUNCTION_23	CALL_16
0x4001693	      0xbe00000000	                              mov esi, 0	       856	convert.c	FUNCTION_23	CALL_16
0x4001698	      0xb800000000	                              mov eax, 0	       856	convert.c	FUNCTION_23	CALL_16
0x400169d	      0xe800000000	                          call 0x40016a2	       856	convert.c	FUNCTION_23	CALL_16
0x40016a2	          0x4189c6	                           mov r14d, eax	       856	convert.c	FUNCTION_23	CALL_16
0x40016a5	            0x85c0	                           test eax, eax	       857	convert.c	FUNCTION_23	IF_9
0x40016a7	     0xf8577020000	                           jne 0x4001924	       857	convert.c	FUNCTION_23	IF_9
0x40016ad	      0x41f6477804	               test byte [r15 + 0x78], 4	       860	convert.c	FUNCTION_23	IF_10
0x40016b2	            0x743c	                            je 0x40016f0	       860	convert.c	FUNCTION_23	IF_10
0x40016b4	          0x4d85ed	                           test r13, r13	       860	convert.c	FUNCTION_23	IF_10
0x40016b7	            0x7437	                            je 0x40016f0	       860	convert.c	FUNCTION_23	IF_10
0x40016b9	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       805	convert.c	FUNCTION_23
0x40016c1	      0x41837d0001	                      cmp dword [r13], 1	       861	convert.c	FUNCTION_23	IF_10
0x40016c6	            0x7530	                           jne 0x40016f8	       861	convert.c	FUNCTION_23	IF_10
0x40016c8	        0x418b7f44	            mov edi, dword [r15 + 0x44] 	       863	convert.c	FUNCTION_23	IF_10	CALL_17
0x40016cc	      0xbe00000000	                              mov esi, 0	       863	convert.c	FUNCTION_23	IF_10	CALL_17
0x40016d1	      0xb800000000	                              mov eax, 0	       863	convert.c	FUNCTION_23	IF_10	CALL_17
0x40016d6	      0xe800000000	                          call 0x40016db	       863	convert.c	FUNCTION_23	IF_10	CALL_17
0x40016db	          0x4189c6	                           mov r14d, eax	       863	convert.c	FUNCTION_23	IF_10	CALL_17
0x40016de	            0x85c0	                           test eax, eax	       864	convert.c	FUNCTION_23	IF_10	IF_11
0x40016e0	     0xf853e020000	                           jne 0x4001924	       864	convert.c	FUNCTION_23	IF_10	IF_11
0x40016e6	    0xc744241c0100	               mov dword [rsp + 0x1c], 1	       862	convert.c	FUNCTION_23	IF_10
0x40016ee	            0xeb08	                           jmp 0x40016f8	       862	convert.c	FUNCTION_23	IF_10
0x40016f0	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       805	convert.c	FUNCTION_23
0x40016f8	        0x418b7f44	            mov edi, dword [r15 + 0x44] 	       868	convert.c	FUNCTION_23	CALL_18
0x40016fc	      0xe800000000	                          call 0x4001701	       868	convert.c	FUNCTION_23	CALL_18
0x4001701	          0x4189c6	                           mov r14d, eax	       868	convert.c	FUNCTION_23	CALL_18
0x4001704	            0x85c0	                           test eax, eax	       869	convert.c	FUNCTION_23	IF_12
0x4001706	     0xf8518020000	                           jne 0x4001924	       869	convert.c	FUNCTION_23	IF_12
0x400170c	        0x8b442418	            mov eax, dword [rsp + 0x18] 	       872	convert.c	FUNCTION_23	IF_13
0x4001710	            0x85c0	                           test eax, eax	       872	convert.c	FUNCTION_23	IF_13
0x4001712	            0x7810	                            js 0x4001724	       872	convert.c	FUNCTION_23	IF_13
0x4001714	        0x418b7744	            mov esi, dword [r15 + 0x44] 	       873	convert.c	FUNCTION_23	CALL_19
0x4001718	            0x89c7	                            mov edi, eax	       873	convert.c	FUNCTION_23	CALL_19
0x400171a	      0xe800000000	                          call 0x400171f	       873	convert.c	FUNCTION_23	CALL_19
0x400171f	          0x4189c6	                           mov r14d, eax	       873	convert.c	FUNCTION_23	CALL_19
0x4001722	            0xeb16	                           jmp 0x400173a	       873	convert.c	FUNCTION_23	CALL_19
0x4001724	        0x418b5744	            mov edx, dword [r15 + 0x44] 	       875	convert.c	FUNCTION_23	CALL_20
0x4001728	      0x488b742408	                mov rsi, qword [rsp + 8]	       875	convert.c	FUNCTION_23	CALL_20
0x400172d	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       875	convert.c	FUNCTION_23	CALL_20
0x4001732	      0xe800000000	                          call 0x4001737	       875	convert.c	FUNCTION_23	CALL_20
0x4001737	          0x4189c6	                           mov r14d, eax	       875	convert.c	FUNCTION_23	CALL_20
0x400173a	          0x4585f6	                         test r14d, r14d	       876	convert.c	FUNCTION_23	IF_14
0x400173d	     0xf85e1010000	                           jne 0x4001924	       876	convert.c	FUNCTION_23	IF_14
0x4001743	        0x418b7f48	            mov edi, dword [r15 + 0x48] 	       879	convert.c	FUNCTION_23	CALL_21
0x4001747	      0x488d742470	                   lea rsi, [rsp + 0x70]	       879	convert.c	FUNCTION_23	CALL_21
0x400174c	      0xe800000000	                          call 0x4001751	       879	convert.c	FUNCTION_23	CALL_21
0x4001751	          0x4189c6	                           mov r14d, eax	       879	convert.c	FUNCTION_23	CALL_21
0x4001754	            0x85c0	                           test eax, eax	       880	convert.c	FUNCTION_23	IF_15
0x4001756	     0xf85c8010000	                           jne 0x4001924	       880	convert.c	FUNCTION_23	IF_15
0x400175c	      0x837c241c00	               cmp dword [rsp + 0x1c], 0	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001761	            0x743e	                            je 0x40017a1	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001763	      0xbe00000000	                              mov esi, 0	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001768	    0x488bbc248000	            mov rdi, qword [rsp + 0x80] 	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001770	      0xe800000000	                          call 0x4001775	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001775	            0x85c0	                           test eax, eax	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001777	            0x7528	                           jne 0x40017a1	       883	convert.c	FUNCTION_23	IF_16	CALL_22
0x4001779	        0x498d7d08	                      lea rdi, [r13 + 8]	       884	convert.c	FUNCTION_23	IF_16	CALL_23
0x400177d	          0x4c89e6	                            mov rsi, r12	       884	convert.c	FUNCTION_23	IF_16	CALL_23
0x4001780	      0xe800000000	                          call 0x4001785	       884	convert.c	FUNCTION_23	IF_16	CALL_23
0x4001785	        0x498d7d28	                   lea rdi, [r13 + 0x28]	       885	convert.c	FUNCTION_23	IF_16	CALL_24
0x4001789	        0x488b3424	                    mov rsi, qword [rsp]	       885	convert.c	FUNCTION_23	IF_16	CALL_24
0x400178d	      0xe800000000	                          call 0x4001792	       885	convert.c	FUNCTION_23	IF_16	CALL_24
0x4001792	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_23	CALL_29
0x4001797	      0xe800000000	                          call 0x400179c	       904	convert.c	FUNCTION_23	CALL_29
0x400179c	      0xe98c000000	                           jmp 0x400182d	       904	convert.c	FUNCTION_23	CALL_29
0x40017a1	      0xbf00000000	                              mov edi, 0	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017a6	      0xb908000000	                              mov ecx, 8	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017ab	    0x488bb4248000	            mov rsi, qword [rsp + 0x80] 	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017b3	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017b5	           0xf97c0	                                 seta al	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017b8	           0xf92c2	                                 setb dl	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017bb	            0x29d0	                            sub eax, edx	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017bd	           0xfbec0	                           movsx eax, al	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x40017c0	            0x85c0	                           test eax, eax	       889	convert.c	FUNCTION_23	ELSE_5	IF_17
0x40017c2	     0xf8554010000	                           jne 0x400191c	       889	convert.c	FUNCTION_23	ELSE_5	IF_17
0x40017c8	        0x418b7f48	            mov edi, dword [r15 + 0x48] 	       892	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40017cc	      0x488d742440	                   lea rsi, [rsp + 0x40]	       892	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40017d1	      0xe800000000	                          call 0x40017d6	       892	convert.c	FUNCTION_23	ELSE_5	CALL_26
0x40017d6	          0x4885c0	                           test rax, rax	       893	convert.c	FUNCTION_23	ELSE_5	IF_18
0x40017d9	     0xf885d010000	                            js 0x400193c	       893	convert.c	FUNCTION_23	ELSE_5	IF_18
0x40017df	        0x418b7f48	            mov edi, dword [r15 + 0x48] 	       896	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40017e3	      0x488d742470	                   lea rsi, [rsp + 0x70]	       896	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40017e8	      0xe800000000	                          call 0x40017ed	       896	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x40017ed	            0x85c0	                           test eax, eax	       897	convert.c	FUNCTION_23	ELSE_5	IF_19
0x40017ef	     0xf852c010000	                           jne 0x4001921	       897	convert.c	FUNCTION_23	ELSE_5	IF_19
0x40017f5	      0xbe00000000	                              mov esi, 0	       900	convert.c	FUNCTION_23	ELSE_5	CALL_28
0x40017fa	    0x488bbc248000	            mov rdi, qword [rsp + 0x80] 	       900	convert.c	FUNCTION_23	ELSE_5	CALL_28
0x4001802	      0xe800000000	                          call 0x4001807	       900	convert.c	FUNCTION_23	ELSE_5	CALL_28
0x4001807	          0x4189c4	                           mov r12d, eax	       900	convert.c	FUNCTION_23	ELSE_5	CALL_28
0x400180a	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_23	CALL_29
0x400180f	      0xe800000000	                          call 0x4001814	       904	convert.c	FUNCTION_23	CALL_29
0x4001814	          0x4585e4	                         test r12d, r12d	       906	convert.c	FUNCTION_23	IF_20
0x4001817	            0x7414	                            je 0x400182d	       906	convert.c	FUNCTION_23	IF_20
0x4001819	          0x4589e6	                          mov r14d, r12d	       900	convert.c	FUNCTION_23	ELSE_5	CALL_28
0x400181c	            0x89da	                            mov edx, ebx	       907	convert.c	FUNCTION_23	CALL_30
0x400181e	          0x4c89fe	                            mov rsi, r15	       907	convert.c	FUNCTION_23	CALL_30
0x4001821	      0x488d7c2470	                   lea rdi, [rsp + 0x70]	       907	convert.c	FUNCTION_23	CALL_30
0x4001826	      0xe857ebffff	            call sym.handle_filter_error	       907	convert.c	FUNCTION_23	CALL_30
0x400182b	            0xeb4e	                           jmp 0x400187b	       907	convert.c	FUNCTION_23	CALL_30
0x400182d	        0x488b4d00	                    mov rcx, qword [rbp]	        53	string3.h	FUNCTION_103	CALL_3
0x4001831	    0x48898c24a000	             mov qword [rsp + 0xa0], rcx	        53	string3.h	FUNCTION_103	CALL_3
0x4001839	        0x488b5508	                mov rdx, qword [rbp + 8]	        53	string3.h	FUNCTION_103	CALL_3
0x400183d	    0x48899424a800	             mov qword [rsp + 0xa8], rdx	        53	string3.h	FUNCTION_103	CALL_3
0x4001845	        0x488b4510	            mov rax, qword [rbp + 0x10] 	        53	string3.h	FUNCTION_103	CALL_3
0x4001849	    0x48898424b000	             mov qword [rsp + 0xb0], rax	        53	string3.h	FUNCTION_103	CALL_3
0x4001851	      0x488b742440	            mov rsi, qword [rsp + 0x40] 	        53	string3.h	FUNCTION_103	CALL_3
0x4001856	        0x48897500	                    mov qword [rbp], rsi	        53	string3.h	FUNCTION_103	CALL_3
0x400185a	      0x488b742448	            mov rsi, qword [rsp + 0x48] 	        53	string3.h	FUNCTION_103	CALL_3
0x400185f	        0x48897508	                mov qword [rbp + 8], rsi	        53	string3.h	FUNCTION_103	CALL_3
0x4001863	      0x488b742450	            mov rsi, qword [rsp + 0x50] 	        53	string3.h	FUNCTION_103	CALL_3
0x4001868	        0x48897510	            mov qword [rbp + 0x10], rsi 	        53	string3.h	FUNCTION_103	CALL_3
0x400186c	      0x48894c2440	             mov qword [rsp + 0x40], rcx	        53	string3.h	FUNCTION_103	CALL_3
0x4001871	      0x4889542448	             mov qword [rsp + 0x48], rdx	        53	string3.h	FUNCTION_103	CALL_3
0x4001876	      0x4889442450	             mov qword [rsp + 0x50], rax	        53	string3.h	FUNCTION_103	CALL_3
0x400187b	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       910	convert.c	FUNCTION_23	CALL_32
0x4001880	      0xe800000000	                          call 0x4001885	       910	convert.c	FUNCTION_23	CALL_32
0x4001885	          0x4585f6	                         test r14d, r14d	       911	convert.c	FUNCTION_23
0x4001888	           0xf94c0	                                 sete al	       911	convert.c	FUNCTION_23
0x400188b	           0xfb6c0	                           movzx eax, al	       911	convert.c	FUNCTION_23
0x400188e	            0xeb21	                           jmp 0x40018b1	       911	convert.c	FUNCTION_23
0x4001890	      0xb800000000	                              mov eax, 0	       834	convert.c	FUNCTION_23	IF_4
0x4001895	            0xeb1a	                           jmp 0x40018b1	       994	convert.c	FUNCTION_25	ELSE_2	IF_6	CALL_2
0x4001897	      0xb800000000	                              mov eax, 0	       981	convert.c	FUNCTION_25	IF_1
0x400189c	            0xeb13	                           jmp 0x40018b1	       981	convert.c	FUNCTION_25	IF_1
0x400189e	      0xb801000000	                              mov eax, 1	       984	convert.c	FUNCTION_25	IF_2
0x40018a3	            0xeb0c	                           jmp 0x40018b1	       984	convert.c	FUNCTION_25	IF_2
0x40018a5	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_25
0x40018aa	            0xeb05	                           jmp 0x40018b1	       997	convert.c	FUNCTION_25
0x40018ac	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_25
0x40018b1	    0x488b8c24b800	            mov rcx, qword [rsp + 0xb8] 	       998	convert.c	FUNCTION_25
0x40018b9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       998	convert.c	FUNCTION_25
0x40018c2	     0xf848e000000	                            je 0x4001956	       998	convert.c	FUNCTION_25
0x40018c8	      0xe984000000	                           jmp 0x4001951	       998	convert.c	FUNCTION_25
0x40018cd	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_25
0x40018d2	          0xf6c302	                              test bl, 2	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40018d5	            0x74da	                            je 0x40018b1	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40018d7	      0xe9b6faffff	                           jmp 0x4001392	       988	convert.c	FUNCTION_25	ELSE_1	IF_4
0x40018dc	    0x41be00000000	                             mov r14d, 0	       837	convert.c	FUNCTION_23	IF_5
0x40018e2	            0xeb06	                           jmp 0x40018ea	       837	convert.c	FUNCTION_23	IF_5
0x40018e4	    0x41be00000000	                             mov r14d, 0	       839	convert.c	FUNCTION_23	ELSE_2	IF_6
0x40018ea	      0xbe01000000	                              mov esi, 1	       843	convert.c	FUNCTION_23	CALL_8
0x40018ef	      0xbf0d000000	                            mov edi, 0xd	       843	convert.c	FUNCTION_23	CALL_8
0x40018f4	      0xe800000000	                          call 0x40018f9	       843	convert.c	FUNCTION_23	CALL_8
0x40018f9	        0x418b7f44	            mov edi, dword [r15 + 0x44] 	       846	convert.c	FUNCTION_23	CALL_12
0x40018fd	          0x4c89f2	                            mov rdx, r14	       846	convert.c	FUNCTION_23	CALL_12
0x4001900	      0xbe00000000	                              mov esi, 0	       846	convert.c	FUNCTION_23	CALL_12
0x4001905	      0xb800000000	                              mov eax, 0	       846	convert.c	FUNCTION_23	CALL_12
0x400190a	      0xe800000000	                          call 0x400190f	       846	convert.c	FUNCTION_23	CALL_12
0x400190f	          0x4189c6	                           mov r14d, eax	       846	convert.c	FUNCTION_23	CALL_12
0x4001912	            0x85c0	                           test eax, eax	       847	convert.c	FUNCTION_23	IF_7
0x4001914	     0xf8439fdffff	                            je 0x4001653	       847	convert.c	FUNCTION_23	IF_7
0x400191a	            0xeb08	                           jmp 0x4001924	       847	convert.c	FUNCTION_23	IF_7
0x400191c	          0x4189c6	                           mov r14d, eax	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x400191f	            0xeb03	                           jmp 0x4001924	       888	convert.c	FUNCTION_23	ELSE_5	CALL_25
0x4001921	          0x4189c6	                           mov r14d, eax	       896	convert.c	FUNCTION_23	ELSE_5	CALL_27
0x4001924	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_23	CALL_29
0x4001929	      0xe800000000	                          call 0x400192e	       904	convert.c	FUNCTION_23	CALL_29
0x400192e	      0xe9e9feffff	                           jmp 0x400181c	       904	convert.c	FUNCTION_23	CALL_29
0x4001933	        0x4d8b6120	              mov r12, qword [r9 + 0x20]	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x4001937	      0xe90dfcffff	                           jmp 0x4001549	       993	convert.c	FUNCTION_25	ELSE_2	IF_6
0x400193c	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_23	CALL_29
0x4001941	      0xe800000000	                          call 0x4001946	       904	convert.c	FUNCTION_23	CALL_29
0x4001946	    0x41be01000000	                             mov r14d, 1	       904	convert.c	FUNCTION_23	CALL_29
0x400194c	      0xe9cbfeffff	                           jmp 0x400181c	       904	convert.c	FUNCTION_23	CALL_29
0x4001951	      0xe800000000	                          call 0x4001956	       998	convert.c	FUNCTION_25
0x4001956	    0x4881c4c80000	                           add rsp, 0xc8	       998	convert.c	FUNCTION_25
0x400195d	              0x5b	                                 pop rbx	       998	convert.c	FUNCTION_25
0x400195e	              0x5d	                                 pop rbp	       998	convert.c	FUNCTION_25
0x400195f	            0x415c	                                 pop r12	       998	convert.c	FUNCTION_25
0x4001961	            0x415d	                                 pop r13	       998	convert.c	FUNCTION_25
0x4001963	            0x415e	                                 pop r14	       998	convert.c	FUNCTION_25
0x4001965	            0x415f	                                 pop r15	       998	convert.c	FUNCTION_25
0x4001967	              0xc3	                                     ret	       998	convert.c	FUNCTION_25
null_filter_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,3:DO,0:SWITCH,0	25
0x400125b	          0x4885f6	                           test rsi, rsi	      1529	convert.c	FUNCTION_44	IF_1
0x400125e	            0x7439	                            je 0x4001299	      1529	convert.c	FUNCTION_44	IF_1
0x4001260	            0x4154	                                push r12	      1526	convert.c	FUNCTION_44
0x4001262	              0x55	                                push rbp	      1526	convert.c	FUNCTION_44
0x4001263	              0x53	                                push rbx	      1526	convert.c	FUNCTION_44
0x4001264	          0x488b1a	                    mov rbx, qword [rdx]	      1531	convert.c	FUNCTION_44
0x4001267	          0x498b00	                     mov rax, qword [r8]	      1532	convert.c	FUNCTION_44	IF_2
0x400126a	          0x4839c3	                            cmp rbx, rax	      1532	convert.c	FUNCTION_44	IF_2
0x400126d	        0x480f47d8	                          cmova rbx, rax	      1532	convert.c	FUNCTION_44	IF_2
0x4001271	          0x4885db	                           test rbx, rbx	      1534	convert.c	FUNCTION_44	IF_3
0x4001274	            0x7419	                            je 0x400128f	      1534	convert.c	FUNCTION_44	IF_3
0x4001276	          0x4d89c4	                             mov r12, r8	      1534	convert.c	FUNCTION_44	IF_3
0x4001279	          0x4889cf	                            mov rdi, rcx	      1534	convert.c	FUNCTION_44	IF_3
0x400127c	          0x4889d5	                            mov rbp, rdx	      1534	convert.c	FUNCTION_44	IF_3
0x400127f	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_104	CALL_3
0x4001282	      0xe800000000	                          call 0x4001287	        59	string3.h	FUNCTION_104	CALL_3
0x4001287	        0x48295d00	                    sub qword [rbp], rbx	      1536	convert.c	FUNCTION_44	IF_3
0x400128b	        0x49291c24	                    sub qword [r12], rbx	      1537	convert.c	FUNCTION_44	IF_3
0x400128f	      0xb800000000	                              mov eax, 0	      1540	convert.c	FUNCTION_44
0x4001294	              0x5b	                                 pop rbx	      1540	convert.c	FUNCTION_44
0x4001295	              0x5d	                                 pop rbp	      1540	convert.c	FUNCTION_44
0x4001296	            0x415c	                                 pop r12	      1540	convert.c	FUNCTION_44
0x4001298	              0xc3	                                     ret	      1540	convert.c	FUNCTION_44
0x4001299	      0xb800000000	                              mov eax, 0	      1540	convert.c	FUNCTION_44
0x400129e	              0xc3	                                     ret	      1540	convert.c	FUNCTION_44
get_convert_attr_ascii	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,1	32
0x4002b4b	        0x4883ec38	                           sub rsp, 0x38	      1362	convert.c	FUNCTION_37
0x4002b4f	          0x4889fe	                            mov rsi, rdi	      1362	convert.c	FUNCTION_37
0x4002b52	    0x64488b042528	                mov rax, qword fs:[0x28]	      1362	convert.c	FUNCTION_37
0x4002b5b	      0x4889442428	             mov qword [rsp + 0x28], rax	      1362	convert.c	FUNCTION_37
0x4002b60	            0x31c0	                            xor eax, eax	      1362	convert.c	FUNCTION_37
0x4002b62	          0x4889e7	                            mov rdi, rsp	      1365	convert.c	FUNCTION_37	CALL_1
0x4002b65	      0xe851daffff	                  call sym.convert_attrs	      1365	convert.c	FUNCTION_37	CALL_1
0x4002b6a	      0x837c240807	                  cmp dword [rsp + 8], 7	      1366	convert.c	FUNCTION_37	SWITCH_1
0x4002b6f	            0x773c	                            ja 0x4002bad	      1366	convert.c	FUNCTION_37	SWITCH_1
0x4002b71	        0x8b442408	                mov eax, dword [rsp + 8]	      1366	convert.c	FUNCTION_37	SWITCH_1
0x4002b75	    0xff24c5000000	                       jmp qword [rax*8]	      1366	convert.c	FUNCTION_37	SWITCH_1
0x4002b7c	      0xb800000000	                              mov eax, 0	      1370	convert.c	FUNCTION_37	SWITCH_1
0x4002b81	            0xeb2f	                           jmp 0x4002bb2	      1370	convert.c	FUNCTION_37	SWITCH_1
0x4002b83	      0xb800000000	                              mov eax, 0	      1372	convert.c	FUNCTION_37	SWITCH_1
0x4002b88	            0xeb28	                           jmp 0x4002bb2	      1372	convert.c	FUNCTION_37	SWITCH_1
0x4002b8a	      0xb800000000	                              mov eax, 0	      1374	convert.c	FUNCTION_37	SWITCH_1
0x4002b8f	            0xeb21	                           jmp 0x4002bb2	      1374	convert.c	FUNCTION_37	SWITCH_1
0x4002b91	      0xb800000000	                              mov eax, 0	      1376	convert.c	FUNCTION_37	SWITCH_1
0x4002b96	            0xeb1a	                           jmp 0x4002bb2	      1376	convert.c	FUNCTION_37	SWITCH_1
0x4002b98	      0xb800000000	                              mov eax, 0	      1378	convert.c	FUNCTION_37	SWITCH_1
0x4002b9d	            0xeb13	                           jmp 0x4002bb2	      1378	convert.c	FUNCTION_37	SWITCH_1
0x4002b9f	      0xb800000000	                              mov eax, 0	      1380	convert.c	FUNCTION_37	SWITCH_1
0x4002ba4	            0xeb0c	                           jmp 0x4002bb2	      1380	convert.c	FUNCTION_37	SWITCH_1
0x4002ba6	      0xb800000000	                              mov eax, 0	      1382	convert.c	FUNCTION_37	SWITCH_1
0x4002bab	            0xeb05	                           jmp 0x4002bb2	      1382	convert.c	FUNCTION_37	SWITCH_1
0x4002bad	      0xb800000000	                              mov eax, 0	      1368	convert.c	FUNCTION_37	SWITCH_1
0x4002bb2	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1385	convert.c	FUNCTION_37
0x4002bb7	    0x644833142528	                xor rdx, qword fs:[0x28]	      1385	convert.c	FUNCTION_37
0x4002bc0	            0x7405	                            je 0x4002bc7	      1385	convert.c	FUNCTION_37
0x4002bc2	      0xe800000000	                          call 0x4002bc7	      1385	convert.c	FUNCTION_37
0x4002bc7	        0x4883c438	                           add rsp, 0x38	      1385	convert.c	FUNCTION_37
0x4002bcb	              0xc3	                                     ret	      1385	convert.c	FUNCTION_37
output_eol	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,0:DO,0:SWITCH,1	26
0x40011a5	        0x4883ec08	                              sub rsp, 8	       175	convert.c	FUNCTION_8
0x40011a9	          0x83ff07	                              cmp edi, 7	       176	convert.c	FUNCTION_8	SWITCH_1
0x40011ac	            0x772f	                            ja 0x40011dd	       176	convert.c	FUNCTION_8	SWITCH_1
0x40011ae	            0x89ff	                            mov edi, edi	       176	convert.c	FUNCTION_8	SWITCH_1
0x40011b0	    0xff24fd000000	                       jmp qword [rdi*8]	       176	convert.c	FUNCTION_8	SWITCH_1
0x40011b7	      0xb801000000	                              mov eax, 1	       180	convert.c	FUNCTION_8	SWITCH_1
0x40011bc	            0xeb3d	                           jmp 0x40011fb	       180	convert.c	FUNCTION_8	SWITCH_1
0x40011be	      0xb802000000	                              mov eax, 2	       182	convert.c	FUNCTION_8	SWITCH_1
0x40011c3	            0xeb36	                           jmp 0x40011fb	       182	convert.c	FUNCTION_8	SWITCH_1
0x40011c5	      0xb802000000	                              mov eax, 2	       187	convert.c	FUNCTION_8	SWITCH_1
0x40011ca	            0xeb2f	                           jmp 0x40011fb	       187	convert.c	FUNCTION_8	SWITCH_1
0x40011cc	      0xe890eeffff	               call sym.text_eol_is_crlf	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011d1	          0x83f801	                              cmp eax, 1	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011d4	            0x19c0	                            sbb eax, eax	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011d6	            0xf7d0	                                 not eax	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011d8	          0x83c002	                              add eax, 2	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011db	            0xeb1e	                           jmp 0x40011fb	       191	convert.c	FUNCTION_8	SWITCH_1	CALL_1
0x40011dd	            0x89fe	                            mov esi, edi	       193	convert.c	FUNCTION_8	CALL_2
0x40011df	      0xbf00000000	                              mov edi, 0	       193	convert.c	FUNCTION_8	CALL_2
0x40011e4	      0xb800000000	                              mov eax, 0	       193	convert.c	FUNCTION_8	CALL_2
0x40011e9	      0xe800000000	                          call 0x40011ee	       193	convert.c	FUNCTION_8	CALL_2
0x40011ee	    0x8b0500000000	            mov eax, dword [0x040011f4] 	       194	convert.c	FUNCTION_8
0x40011f4	            0xeb05	                           jmp 0x40011fb	       194	convert.c	FUNCTION_8
0x40011f6	      0xb800000000	                              mov eax, 0	       178	convert.c	FUNCTION_8	SWITCH_1
0x40011fb	        0x4883c408	                              add rsp, 8	       195	convert.c	FUNCTION_8
0x40011ff	              0xc3	                                     ret	       195	convert.c	FUNCTION_8
gather_stats	functions,0:FOR,1:WHILE,0:ELSE,3:CALL,1:IF,6:DO,0:SWITCH,1	48
0x400019e	    0x48c702000000	                      mov qword [rdx], 0	        90	string3.h	FUNCTION_106	CALL_6
0x40001a5	    0x48c742080000	                  mov qword [rdx + 8], 0	        90	string3.h	FUNCTION_106	CALL_6
0x40001ad	    0x48c742100000	               mov qword [rdx + 0x10], 0	        90	string3.h	FUNCTION_106	CALL_6
0x40001b5	          0x4885f6	                           test rsi, rsi	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x40001b8	     0xf8481000000	                            je 0x400023f	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x40001be	      0xb800000000	                              mov eax, 0	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x40001c3	         0xfb60c07	             movzx ecx, byte [rdi + rax]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x40001c7	          0x80f90d	                             cmp cl, 0xd	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x40001ca	            0x751f	                           jne 0x40001eb	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x40001cc	        0x488d4801	                      lea rcx, [rax + 1]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001d0	          0x4839ce	                            cmp rsi, rcx	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001d3	            0x7610	                           jbe 0x40001e5	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001d5	      0x807c07010a	          cmp byte [rdi + rax + 1], 0xa 	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001da	            0x7509	                           jne 0x40001e5	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001dc	        0x83420c01	                add dword [rdx + 0xc], 1	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001e0	          0x4889c8	                            mov rax, rcx	        56	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001e3	            0xeb43	                           jmp 0x4000228	        56	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40001e5	        0x83420401	                  add dword [rdx + 4], 1	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x40001e9	            0xeb3d	                           jmp 0x4000228	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x40001eb	          0x80f90a	                             cmp cl, 0xa	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40001ee	            0x7506	                           jne 0x40001f6	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40001f0	        0x83420801	                  add dword [rdx + 8], 1	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40001f4	            0xeb32	                           jmp 0x4000228	        63	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40001f6	          0x80f97f	                            cmp cl, 0x7f	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40001f9	            0x7506	                           jne 0x4000201	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40001fb	        0x83421401	               add dword [rdx + 0x14], 1	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x40001ff	            0xeb27	                           jmp 0x4000228	        67	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x4000201	          0x80f91f	                            cmp cl, 0x1f	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000204	            0x771e	                            ja 0x4000224	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000206	          0x80f91b	                            cmp cl, 0x1b	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000209	            0x7713	                            ja 0x400021e	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400020b	           0xfb6c9	                           movzx ecx, cl	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400020e	    0xff24cd000000	                       jmp qword [rcx*8]	        69	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000215	        0x83421001	               add dword [rdx + 0x10], 1	        72	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000219	            0xeb0d	                           jmp 0x4000228	        73	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400021b	          0x830201	                      add dword [rdx], 1	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x400021e	        0x83421401	               add dword [rdx + 0x14], 1	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000222	            0xeb04	                           jmp 0x4000228	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000224	        0x83421001	               add dword [rdx + 0x10], 1	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x4000228	        0x4883c001	                              add rax, 1	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400022c	          0x4839c6	                            cmp rsi, rax	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400022f	            0x7792	                            ja 0x40001c3	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000231	            0xeb05	                           jmp 0x4000238	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000233	        0x836a1401	               sub dword [rdx + 0x14], 1	        87	convert.c	FUNCTION_1
0x4000237	              0xc3	                                     ret	        88	convert.c	FUNCTION_1
0x4000238	      0x807c37ff1a	         cmp byte [rdi + rsi - 1], 0x1a 	        86	convert.c	IF_6	FUNCTION_1
0x400023d	            0x74f4	                            je 0x4000233	        86	convert.c	IF_6	FUNCTION_1
0x400023f	            0xf3c3	                                     ret	        86	convert.c	IF_6	FUNCTION_1
lf_to_crlf_free_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	4
0x4000190	        0x4883ec08	                              sub rsp, 8	      1652	convert.c	FUNCTION_48
0x4000194	      0xe800000000	                          call 0x4000199	      1653	convert.c	FUNCTION_48	CALL_1
0x4000199	        0x4883c408	                              add rsp, 8	      1654	convert.c	FUNCTION_48
0x400019d	              0xc3	                                     ret	      1654	convert.c	FUNCTION_48
will_convert_lf_to_crlf	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,5:DO,0:SWITCH,0	33
0x4001200	            0x4154	                                push r12	       249	convert.c	FUNCTION_11
0x4001202	              0x55	                                push rbp	       249	convert.c	FUNCTION_11
0x4001203	              0x53	                                push rbx	       249	convert.c	FUNCTION_11
0x4001204	          0x4989fc	                            mov r12, rdi	       249	convert.c	FUNCTION_11
0x4001207	          0x4889f5	                            mov rbp, rsi	       249	convert.c	FUNCTION_11
0x400120a	            0x89d3	                            mov ebx, edx	       249	convert.c	FUNCTION_11
0x400120c	            0x89d7	                            mov edi, edx	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x400120e	      0xe892ffffff	                     call sym.output_eol	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x4001213	      0xb900000000	                              mov ecx, 0	       251	convert.c	FUNCTION_11	IF_1
0x4001218	          0x83f801	                              cmp eax, 1	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x400121b	            0x7537	                           jne 0x4001254	       250	convert.c	FUNCTION_11	IF_1	CALL_1
0x400121d	        0x837d0800	                  cmp dword [rbp + 8], 0	       253	convert.c	FUNCTION_11	IF_2
0x4001221	            0x7431	                            je 0x4001254	       253	convert.c	FUNCTION_11	IF_2
0x4001223	          0x83eb05	                              sub ebx, 5	       256	convert.c	FUNCTION_11	IF_3
0x4001226	      0xb901000000	                              mov ecx, 1	       265	convert.c	FUNCTION_11
0x400122b	          0x83fb02	                              cmp ebx, 2	       256	convert.c	FUNCTION_11	IF_3
0x400122e	            0x7724	                            ja 0x4001254	       256	convert.c	FUNCTION_11	IF_3
0x4001230	      0xb900000000	                              mov ecx, 0	       260	convert.c	FUNCTION_11	IF_3	IF_4
0x4001235	        0x837d0400	                  cmp dword [rbp + 4], 0	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x4001239	            0x7519	                           jne 0x4001254	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x400123b	        0x837d0c00	                cmp dword [rbp + 0xc], 0	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x400123f	            0x7513	                           jne 0x4001254	       259	convert.c	FUNCTION_11	IF_3	IF_4
0x4001241	          0x4889ee	                            mov rsi, rbp	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x4001244	          0x4c89e7	                            mov rdi, r12	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x4001247	      0xe8f4edffff	              call sym.convert_is_binary	       262	convert.c	FUNCTION_11	IF_3	IF_5	CALL_2
0x400124c	            0x85c0	                           test eax, eax	       251	convert.c	FUNCTION_11	IF_1
0x400124e	           0xf94c1	                                 sete cl	       251	convert.c	FUNCTION_11	IF_1
0x4001251	           0xfb6c9	                           movzx ecx, cl	       251	convert.c	FUNCTION_11	IF_1
0x4001254	            0x89c8	                            mov eax, ecx	       267	convert.c	FUNCTION_11
0x4001256	              0x5b	                                 pop rbx	       267	convert.c	FUNCTION_11
0x4001257	              0x5d	                                 pop rbp	       267	convert.c	FUNCTION_11
0x4001258	            0x415c	                                 pop r12	       267	convert.c	FUNCTION_11
0x400125a	              0xc3	                                     ret	       267	convert.c	FUNCTION_11
ident_filter_fn	functions,0:FOR,0:WHILE,1:ELSE,1:CALL,12:IF,11:DO,0:SWITCH,1	241
0x4001e34	            0x4157	                                push r15	      1819	convert.c	FUNCTION_55
0x4001e36	            0x4156	                                push r14	      1819	convert.c	FUNCTION_55
0x4001e38	            0x4155	                                push r13	      1819	convert.c	FUNCTION_55
0x4001e3a	            0x4154	                                push r12	      1819	convert.c	FUNCTION_55
0x4001e3c	              0x55	                                push rbp	      1819	convert.c	FUNCTION_55
0x4001e3d	              0x53	                                push rbx	      1819	convert.c	FUNCTION_55
0x4001e3e	        0x4883ec28	                           sub rsp, 0x28	      1819	convert.c	FUNCTION_55
0x4001e42	          0x4889fb	                            mov rbx, rdi	      1819	convert.c	FUNCTION_55
0x4001e45	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      1819	convert.c	FUNCTION_55
0x4001e4a	      0x4c89442410	              mov qword [rsp + 0x10], r8	      1819	convert.c	FUNCTION_55
0x4001e4f	          0x4885f6	                           test rsi, rsi	      1823	convert.c	FUNCTION_55	IF_1
0x4001e52	     0xf8523030000	                           jne 0x400217b	      1823	convert.c	FUNCTION_55	IF_1
0x4001e58	          0x8b4720	            mov eax, dword [rdi + 0x20] 	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4001e5b	          0x8d5002	                      lea edx, [rax + 2]	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4001e5e	          0x83fa01	                              cmp edx, 1	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4001e61	            0x7611	                           jbe 0x4001e74	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4001e63	          0x4863d0	                         movsxd rdx, eax	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4001e66	        0x488d7f08	                      lea rdi, [rdi + 8]	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4001e6a	      0xbe00000000	                              mov esi, 0	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4001e6f	      0xe800000000	                          call 0x4001e74	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4001e74	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4001e79	      0x488d742418	                   lea rsi, [rsp + 0x18]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4001e7e	          0x4889df	                            mov rdi, rbx	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4001e81	      0xe819f4ffff	                    call sym.ident_drain	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4001e86	      0xe936030000	                           jmp 0x40021c1	      1834	convert.c	FUNCTION_55	IF_1
0x4001e8b	        0x837b20ff	cmp dword [rbx + 0x20], 0xffffffffffffffff	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x4001e8f	            0x7524	                           jne 0x4001eb5	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x4001e91	      0x4c8b742410	            mov r14, qword [rsp + 0x10] 	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4001e96	          0x4c89f2	                            mov rdx, r14	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4001e99	      0x488d742418	                   lea rsi, [rsp + 0x18]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4001e9e	          0x4889df	                            mov rdi, rbx	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4001ea1	      0xe8f9f3ffff	                    call sym.ident_drain	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4001ea6	        0x49833e00	                      cmp qword [r14], 0	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4001eaa	     0xf85de020000	                           jne 0x400218e	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4001eb0	      0xe90c030000	                           jmp 0x40021c1	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4001eb5	        0x4c8d7501	                      lea r14, [rbp + 1]	      1847	convert.c	FUNCTION_55	WHILE_1
0x4001eb9	         0xfb66d00	                   movzx ebp, byte [rbp]	      1847	convert.c	FUNCTION_55	WHILE_1
0x4001ebd	        0x440fbee5	                         movsx r12d, bpl	      1847	convert.c	FUNCTION_55	WHILE_1
0x4001ec1	        0x4883e801	                              sub rax, 1	      1848	convert.c	FUNCTION_55	WHILE_1
0x4001ec5	        0x49894500	                    mov qword [r13], rax	      1848	convert.c	FUNCTION_55	WHILE_1
0x4001ec9	          0x8b5320	            mov edx, dword [rbx + 0x20] 	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4001ecc	          0x83fafe	             cmp edx, 0xfffffffffffffffe	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4001ecf	     0xf8530010000	                           jne 0x4002005	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4001ed5	        0x488b4308	                mov rax, qword [rbx + 8]	       141	strbuf.h	FUNCTION_62
0x4001ed9	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4001edc	            0x740a	                            je 0x4001ee8	       141	strbuf.h	FUNCTION_62
0x4001ede	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4001ee2	        0x48394310	            cmp qword [rbx + 0x10], rax 	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4001ee6	            0x750d	                           jne 0x4001ef5	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4001ee8	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x4001eed	          0x4c89ff	                            mov rdi, r15	       228	strbuf.h	FUNCTION_64	CALL_2
0x4001ef0	      0xe800000000	                          call 0x4001ef5	       228	strbuf.h	FUNCTION_64	CALL_2
0x4001ef5	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x4001ef9	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_64
0x4001efd	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_64
0x4001f01	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x4001f05	        0x40882c02	               mov byte [rdx + rax], bpl	       229	strbuf.h	FUNCTION_64
0x4001f09	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x4001f0d	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x4001f11	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x4001f15	        0x4183fc0a	                           cmp r12d, 0xa	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4001f19	            0x740d	                            je 0x4001f28	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4001f1b	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x4001f1e	        0x4183fc24	                          cmp r12d, 0x24	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4001f22	     0xf8566020000	                           jne 0x400218e	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4001f28	        0x4183fc24	                          cmp r12d, 0x24	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4001f2c	     0xf85c4000000	                           jne 0x4001ff6	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4001f32	        0x488b7b18	            mov rdi, qword [rbx + 0x18] 	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4001f36	          0x4889f8	                            mov rax, rdi	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4001f39	      0xba00000000	                              mov edx, 0	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x4001f3e	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4001f41	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4001f43	     0xf845e020000	                            je 0x40021a7	       484	git-compat-util.h	FUNCTION_82	DO_1	IF_1
0x4001f49	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4001f4d	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4001f51	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4001f54	            0x74e8	                            je 0x4001f3e	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4001f56	            0xeb25	                           jmp 0x4001f7d	       488	git-compat-util.h	FUNCTION_82	DO_1
0x4001f58	           0xfb6d2	                           movzx edx, dl	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x4001f5b	    0xf68200000000	                      test byte [rdx], 1	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x4001f62	            0x740b	                            je 0x4001f6f	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x4001f64	      0x807c300124	         cmp byte [rax + rsi + 1], 0x24 	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x4001f69	     0xf8587000000	                           jne 0x4001ff6	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x4001f6f	          0x83c101	                              add ecx, 1	      1793	convert.c	FUNCTION_53	FOR_1
0x4001f72	          0x4863f1	                         movsxd rsi, ecx	      1793	convert.c	FUNCTION_53	FOR_1
0x4001f75	         0xfb61430	             movzx edx, byte [rax + rsi]	      1793	convert.c	FUNCTION_53	FOR_1
0x4001f79	            0x84d2	                             test dl, dl	      1793	convert.c	FUNCTION_53	FOR_1
0x4001f7b	            0x75db	                           jne 0x4001f58	      1793	convert.c	FUNCTION_53	FOR_1
0x4001f7d	      0x48837b0803	                  cmp qword [rbx + 8], 3	       162	strbuf.h	FUNCTION_63	IF_1
0x4001f82	            0x770f	                            ja 0x4001f93	       162	strbuf.h	FUNCTION_63	IF_1
0x4001f84	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x4001f89	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x4001f8e	      0xe800000000	                          call 0x4001f93	       163	strbuf.h	FUNCTION_63	CALL_1
0x4001f93	    0x48c743100300	               mov qword [rbx + 0x10], 3	       164	strbuf.h	FUNCTION_63
0x4001f9b	    0x4881ff000000	                              cmp rdi, 0	       165	strbuf.h	FUNCTION_63	IF_2
0x4001fa2	            0x7406	                            je 0x4001faa	       165	strbuf.h	FUNCTION_63	IF_2
0x4001fa4	        0xc6470300	                   mov byte [rdi + 3], 0	       166	strbuf.h	FUNCTION_63	IF_2
0x4001fa8	            0xeb22	                           jmp 0x4001fcc	       166	strbuf.h	FUNCTION_63	IF_2
0x4001faa	    0x803d00000000	                cmp byte [0x04001fb1], 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fb1	            0x7419	                            je 0x4001fcc	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fb3	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fb8	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fbd	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fc2	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fc7	      0xe800000000	                          call 0x4001fcc	       168	strbuf.h	FUNCTION_63	CALL_2
0x4001fcc	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fd1	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fd8	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fdd	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fdf	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fe2	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fe5	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fe9	      0x488b742408	                mov rsi, qword [rsp + 8]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001fee	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ff1	      0xe800000000	                          call 0x4001ff6	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ff6	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      1862	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4001ffd	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002000	      0xe989010000	                           jmp 0x400218e	      1863	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4002005	          0x83fa03	                              cmp edx, 3	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002008	            0x771d	                            ja 0x4002027	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x400200a	          0x4863c2	                         movsxd rax, edx	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x400200d	     0xfbe80000000	                   movsx eax, byte [rax]	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002014	          0x4139c4	                           cmp r12d, eax	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002017	            0x750e	                           jne 0x4002027	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002019	          0x83c201	                              add edx, 1	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x400201c	          0x895320	             mov dword [rbx + 0x20], edx	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x400201f	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002022	      0xe967010000	                           jmp 0x400218e	      1869	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002027	            0x85d2	                           test edx, edx	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x4002029	     0xf8400010000	                            je 0x400212f	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x400202f	          0x4863d2	                         movsxd rdx, edx	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x4002032	      0xbe00000000	                              mov esi, 0	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x4002037	          0x4c89ff	                            mov rdi, r15	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x400203a	      0xe800000000	                          call 0x400203f	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x400203f	        0x837b2003	               cmp dword [rbx + 0x20], 3	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4002043	     0xf85e6000000	                           jne 0x400212f	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x4002049	        0x4183fc3a	                          cmp r12d, 0x3a	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400204d	            0x7455	                            je 0x40020a4	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400204f	        0x4183fc24	                          cmp r12d, 0x24	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4002053	            0x744f	                            je 0x40020a4	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4002055	        0x488b4308	                mov rax, qword [rbx + 8]	       141	strbuf.h	FUNCTION_62
0x4002059	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x400205c	            0x740a	                            je 0x4002068	       141	strbuf.h	FUNCTION_62
0x400205e	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002062	        0x48394310	            cmp qword [rbx + 0x10], rax 	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002066	            0x750d	                           jne 0x4002075	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002068	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x400206d	          0x4c89ff	                            mov rdi, r15	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002070	      0xe800000000	                          call 0x4002075	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002075	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x4002079	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_64
0x400207d	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_64
0x4002081	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x4002085	        0x40882c02	               mov byte [rdx + rax], bpl	       229	strbuf.h	FUNCTION_64
0x4002089	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x400208d	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x4002091	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x4002095	    0xc74320000000	               mov dword [rbx + 0x20], 0	      1877	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400209c	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x400209f	      0xe9ea000000	                           jmp 0x400218e	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x40020a4	        0x4183fc3a	                          cmp r12d, 0x3a	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40020a8	            0x754f	                           jne 0x40020f9	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40020aa	        0x488b4308	                mov rax, qword [rbx + 8]	       141	strbuf.h	FUNCTION_62
0x40020ae	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x40020b1	            0x740a	                            je 0x40020bd	       141	strbuf.h	FUNCTION_62
0x40020b3	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x40020b7	        0x48394310	            cmp qword [rbx + 0x10], rax 	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x40020bb	            0x750d	                           jne 0x40020ca	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x40020bd	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x40020c2	          0x4c89ff	                            mov rdi, r15	       228	strbuf.h	FUNCTION_64	CALL_2
0x40020c5	      0xe800000000	                          call 0x40020ca	       228	strbuf.h	FUNCTION_64	CALL_2
0x40020ca	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x40020ce	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_64
0x40020d2	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_64
0x40020d6	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x40020da	        0xc604023a	              mov byte [rdx + rax], 0x3a	       229	strbuf.h	FUNCTION_64
0x40020de	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x40020e2	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x40020e6	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x40020ea	    0xc74320feffff	     mov dword [rbx + 0x20], 0xfffffffe 	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40020f1	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x40020f4	      0xe995000000	                           jmp 0x400218e	      1847	convert.c	FUNCTION_55	WHILE_1
0x40020f9	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x40020fe	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002105	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       279	strbuf.h	FUNCTION_65	CALL_2
0x400210a	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_65	CALL_2
0x400210c	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_65	CALL_2
0x400210f	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002112	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002116	      0x488b742408	                mov rsi, qword [rsp + 8]	       279	strbuf.h	FUNCTION_65	CALL_2
0x400211b	          0x4c89ff	                            mov rdi, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x400211e	      0xe800000000	                          call 0x4002123	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002123	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x400212a	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x400212d	            0xeb5f	                           jmp 0x400218e	      1847	convert.c	FUNCTION_55	WHILE_1
0x400212f	        0x488b4308	                mov rax, qword [rbx + 8]	       141	strbuf.h	FUNCTION_62
0x4002133	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4002136	            0x740a	                            je 0x4002142	       141	strbuf.h	FUNCTION_62
0x4002138	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400213c	        0x48394310	            cmp qword [rbx + 0x10], rax 	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002140	            0x750d	                           jne 0x400214f	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002142	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002147	          0x4c89ff	                            mov rdi, r15	       228	strbuf.h	FUNCTION_64	CALL_2
0x400214a	      0xe800000000	                          call 0x400214f	       228	strbuf.h	FUNCTION_64	CALL_2
0x400214f	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x4002153	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       229	strbuf.h	FUNCTION_64
0x4002157	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_64
0x400215b	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x400215f	        0x40882c02	               mov byte [rdx + rax], bpl	       229	strbuf.h	FUNCTION_64
0x4002163	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x4002167	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x400216b	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x400216f	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      1892	convert.c	FUNCTION_55	WHILE_1
0x4002176	          0x4c89f5	                            mov rbp, r14	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002179	            0xeb13	                           jmp 0x400218e	      1847	convert.c	FUNCTION_55	WHILE_1
0x400217b	          0x4889f5	                            mov rbp, rsi	      1847	convert.c	FUNCTION_55	WHILE_1
0x400217e	          0x4989d5	                            mov r13, rdx	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002181	        0x4c8d7f08	                      lea r15, [rdi + 8]	      1891	convert.c	FUNCTION_55	WHILE_1	CALL_12
0x4002185	        0x488d4724	                   lea rax, [rdi + 0x24]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4002189	      0x4889442408	                mov qword [rsp + 8], rax	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x400218e	        0x498b4500	                    mov rax, qword [r13]	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002192	          0x4885c0	                           test rax, rax	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002195	     0xf85f0fcffff	                           jne 0x4001e8b	      1837	convert.c	FUNCTION_55	WHILE_1
0x400219b	        0x837b20ff	cmp dword [rbx + 0x20], 0xffffffffffffffff	      1837	convert.c	FUNCTION_55	WHILE_1
0x400219f	     0xf84ecfcffff	                            je 0x4001e91	      1837	convert.c	FUNCTION_55	WHILE_1
0x40021a5	            0xeb1a	                           jmp 0x40021c1	      1837	convert.c	FUNCTION_55	WHILE_1
0x40021a7	           0xfb610	                   movzx edx, byte [rax]	      1793	convert.c	FUNCTION_53	FOR_1
0x40021aa	      0xb900000000	                              mov ecx, 0	      1793	convert.c	FUNCTION_53	FOR_1
0x40021af	      0xbe00000000	                              mov esi, 0	      1793	convert.c	FUNCTION_53	FOR_1
0x40021b4	            0x84d2	                             test dl, dl	      1793	convert.c	FUNCTION_53	FOR_1
0x40021b6	     0xf859cfdffff	                           jne 0x4001f58	      1793	convert.c	FUNCTION_53	FOR_1
0x40021bc	      0xe9bcfdffff	                           jmp 0x4001f7d	      1793	convert.c	FUNCTION_53	FOR_1
0x40021c1	      0xb800000000	                              mov eax, 0	      1895	convert.c	FUNCTION_55
0x40021c6	        0x4883c428	                           add rsp, 0x28	      1895	convert.c	FUNCTION_55
0x40021ca	              0x5b	                                 pop rbx	      1895	convert.c	FUNCTION_55
0x40021cb	              0x5d	                                 pop rbp	      1895	convert.c	FUNCTION_55
0x40021cc	            0x415c	                                 pop r12	      1895	convert.c	FUNCTION_55
0x40021ce	            0x415d	                                 pop r13	      1895	convert.c	FUNCTION_55
0x40021d0	            0x415e	                                 pop r14	      1895	convert.c	FUNCTION_55
0x40021d2	            0x415f	                                 pop r15	      1895	convert.c	FUNCTION_55
0x40021d4	              0xc3	                                     ret	      1895	convert.c	FUNCTION_55
read_convert_config	functions,0:FOR,1:WHILE,0:ELSE,0:CALL,12:IF,7:DO,0:SWITCH,0	129
0x40003fc	            0x4157	                                push r15	      1001	convert.c	FUNCTION_26
0x40003fe	            0x4156	                                push r14	      1001	convert.c	FUNCTION_26
0x4000400	            0x4155	                                push r13	      1001	convert.c	FUNCTION_26
0x4000402	            0x4154	                                push r12	      1001	convert.c	FUNCTION_26
0x4000404	              0x55	                                push rbp	      1001	convert.c	FUNCTION_26
0x4000405	              0x53	                                push rbx	      1001	convert.c	FUNCTION_26
0x4000406	        0x4883ec28	                           sub rsp, 0x28	      1001	convert.c	FUNCTION_26
0x400040a	          0x4989fe	                            mov r14, rdi	      1001	convert.c	FUNCTION_26
0x400040d	          0x4989f7	                            mov r15, rsi	      1001	convert.c	FUNCTION_26
0x4000410	    0x64488b042528	                mov rax, qword fs:[0x28]	      1001	convert.c	FUNCTION_26
0x4000419	      0x4889442418	             mov qword [rsp + 0x18], rax	      1001	convert.c	FUNCTION_26
0x400041e	            0x31c0	                            xor eax, eax	      1001	convert.c	FUNCTION_26
0x4000420	      0x4c8d442408	                       lea r8, [rsp + 8]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000425	      0x488d4c2404	                      lea rcx, [rsp + 4]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400042a	      0x488d542410	                   lea rdx, [rsp + 0x10]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400042f	      0xbe00000000	                              mov esi, 0	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000434	      0xe800000000	                          call 0x4000439	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000439	            0x85c0	                           test eax, eax	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400043b	     0xf8841010000	                            js 0x4000582	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000441	      0x4c8b6c2410	            mov r13, qword [rsp + 0x10] 	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000446	          0x4d85ed	                           test r13, r13	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000449	     0xf843a010000	                            je 0x4000589	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400044f	    0x488b1d000000	            mov rbx, qword [0x04000456] 	      1012	convert.c	FUNCTION_26	FOR_1
0x4000456	          0x4885db	                           test rbx, rbx	      1012	convert.c	FUNCTION_26	FOR_1
0x4000459	            0x7432	                            je 0x400048d	      1012	convert.c	FUNCTION_26	FOR_1
0x400045b	      0x4c63642404	            movsxd r12, dword [rsp + 4] 	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000460	          0x488b2b	                    mov rbp, qword [rbx]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000463	          0x4c89e2	                            mov rdx, r12	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000466	          0x4c89ee	                            mov rsi, r13	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000469	          0x4889ef	                            mov rdi, rbp	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400046c	      0xe800000000	                          call 0x4000471	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000471	            0x85c0	                           test eax, eax	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000473	            0x7508	                           jne 0x400047d	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000475	    0x42807c250000	                 cmp byte [rbp + r12], 0	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400047b	            0x740b	                            je 0x4000488	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400047d	        0x488b5b08	                mov rbx, qword [rbx + 8]	      1012	convert.c	FUNCTION_26	FOR_1
0x4000481	          0x4885db	                           test rbx, rbx	      1012	convert.c	FUNCTION_26	FOR_1
0x4000484	            0x75da	                           jne 0x4000460	      1012	convert.c	FUNCTION_26	FOR_1
0x4000486	            0xeb05	                           jmp 0x400048d	      1012	convert.c	FUNCTION_26	FOR_1
0x4000488	          0x4885db	                           test rbx, rbx	      1015	convert.c	FUNCTION_26	IF_3
0x400048b	            0x7539	                           jne 0x40004c6	      1015	convert.c	FUNCTION_26	IF_3
0x400048d	      0xbe30000000	                           mov esi, 0x30	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x4000492	      0xbf01000000	                              mov edi, 1	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x4000497	      0xe800000000	                          call 0x400049c	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x400049c	          0x4889c3	                            mov rbx, rax	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x400049f	      0x4863742404	            movsxd rsi, dword [rsp + 4] 	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40004a4	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40004a9	      0xe800000000	                          call 0x40004ae	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40004ae	          0x488903	                    mov qword [rbx], rax	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40004b1	    0x488b05000000	            mov rax, qword [0x040004b8] 	      1018	convert.c	FUNCTION_26	IF_3
0x40004b8	          0x488918	                    mov qword [rax], rbx	      1018	convert.c	FUNCTION_26	IF_3
0x40004bb	        0x488d4308	                      lea rax, [rbx + 8]	      1019	convert.c	FUNCTION_26	IF_3
0x40004bf	    0x488905000000	            mov qword [0x040004c6], rax 	      1019	convert.c	FUNCTION_26	IF_3
0x40004c6	      0x488b442408	                mov rax, qword [rsp + 8]	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004cb	      0xbe00000000	                              mov esi, 0	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004d0	      0xb907000000	                              mov ecx, 7	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004d5	          0x4889c7	                            mov rdi, rax	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004d8	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004da	           0xf97c1	                                 seta cl	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004dd	           0xf92c2	                                 setb dl	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004e0	            0x38d1	                              cmp cl, dl	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004e2	            0x7516	                           jne 0x40004fa	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40004e4	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1032	convert.c	FUNCTION_26	CALL_6
0x40004e8	          0x4c89fa	                            mov rdx, r15	      1032	convert.c	FUNCTION_26	CALL_6
0x40004eb	          0x4c89f6	                            mov rsi, r14	      1032	convert.c	FUNCTION_26	CALL_6
0x40004ee	      0xe800000000	                          call 0x40004f3	      1032	convert.c	FUNCTION_26	CALL_6
0x40004f3	            0x89c5	                            mov ebp, eax	      1032	convert.c	FUNCTION_26	CALL_6
0x40004f5	      0xe99b000000	                           jmp 0x4000595	      1032	convert.c	FUNCTION_26	CALL_6
0x40004fa	      0xbe00000000	                              mov esi, 0	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x40004ff	      0xb906000000	                              mov ecx, 6	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000504	          0x4889c7	                            mov rdi, rax	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000507	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000509	           0xf97c1	                                 seta cl	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400050c	           0xf92c2	                                 setb dl	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400050f	            0x38d1	                              cmp cl, dl	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000511	            0x7513	                           jne 0x4000526	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000513	        0x488d7b18	                   lea rdi, [rbx + 0x18]	      1035	convert.c	FUNCTION_26	CALL_8
0x4000517	          0x4c89fa	                            mov rdx, r15	      1035	convert.c	FUNCTION_26	CALL_8
0x400051a	          0x4c89f6	                            mov rsi, r14	      1035	convert.c	FUNCTION_26	CALL_8
0x400051d	      0xe800000000	                          call 0x4000522	      1035	convert.c	FUNCTION_26	CALL_8
0x4000522	            0x89c5	                            mov ebp, eax	      1035	convert.c	FUNCTION_26	CALL_8
0x4000524	            0xeb6f	                           jmp 0x4000595	      1035	convert.c	FUNCTION_26	CALL_8
0x4000526	      0xbe00000000	                              mov esi, 0	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400052b	      0xb908000000	                              mov ecx, 8	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000530	          0x4889c7	                            mov rdi, rax	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000533	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000535	           0xf97c1	                                 seta cl	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000538	           0xf92c2	                                 setb dl	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400053b	            0x38d1	                              cmp cl, dl	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400053d	            0x7513	                           jne 0x4000552	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400053f	        0x488d7b20	                   lea rdi, [rbx + 0x20]	      1038	convert.c	FUNCTION_26	CALL_10
0x4000543	          0x4c89fa	                            mov rdx, r15	      1038	convert.c	FUNCTION_26	CALL_10
0x4000546	          0x4c89f6	                            mov rsi, r14	      1038	convert.c	FUNCTION_26	CALL_10
0x4000549	      0xe800000000	                          call 0x400054e	      1038	convert.c	FUNCTION_26	CALL_10
0x400054e	            0x89c5	                            mov ebp, eax	      1038	convert.c	FUNCTION_26	CALL_10
0x4000550	            0xeb43	                           jmp 0x4000595	      1038	convert.c	FUNCTION_26	CALL_10
0x4000552	      0xbe00000000	                              mov esi, 0	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000557	      0xb909000000	                              mov ecx, 9	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400055c	          0x4889c7	                            mov rdi, rax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400055f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000561	        0x400f97c5	                                seta bpl	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000565	           0xf92c0	                                 setb al	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000568	            0x29c5	                            sub ebp, eax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400056a	        0x400fbeed	                          movsx ebp, bpl	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400056e	            0x85ed	                           test ebp, ebp	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000570	            0x751e	                           jne 0x4000590	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000572	          0x4c89fe	                            mov rsi, r15	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4000575	          0x4c89f7	                            mov rdi, r14	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4000578	      0xe800000000	                          call 0x400057d	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400057d	          0x894328	             mov dword [rbx + 0x28], eax	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4000580	            0xeb13	                           jmp 0x4000595	      1042	convert.c	FUNCTION_26	IF_7
0x4000582	      0xbd00000000	                              mov ebp, 0	      1011	convert.c	FUNCTION_26	IF_1
0x4000587	            0xeb0c	                           jmp 0x4000595	      1011	convert.c	FUNCTION_26	IF_1
0x4000589	      0xbd00000000	                              mov ebp, 0	      1011	convert.c	FUNCTION_26	IF_1
0x400058e	            0xeb05	                           jmp 0x4000595	      1011	convert.c	FUNCTION_26	IF_1
0x4000590	      0xbd00000000	                              mov ebp, 0	      1045	convert.c	FUNCTION_26
0x4000595	            0x89e8	                            mov eax, ebp	      1046	convert.c	FUNCTION_26
0x4000597	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      1046	convert.c	FUNCTION_26
0x400059c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1046	convert.c	FUNCTION_26
0x40005a5	            0x7405	                            je 0x40005ac	      1046	convert.c	FUNCTION_26
0x40005a7	      0xe800000000	                          call 0x40005ac	      1046	convert.c	FUNCTION_26
0x40005ac	        0x4883c428	                           add rsp, 0x28	      1046	convert.c	FUNCTION_26
0x40005b0	              0x5b	                                 pop rbx	      1046	convert.c	FUNCTION_26
0x40005b1	              0x5d	                                 pop rbp	      1046	convert.c	FUNCTION_26
0x40005b2	            0x415c	                                 pop r12	      1046	convert.c	FUNCTION_26
0x40005b4	            0x415d	                                 pop r13	      1046	convert.c	FUNCTION_26
0x40005b6	            0x415e	                                 pop r14	      1046	convert.c	FUNCTION_26
0x40005b8	            0x415f	                                 pop r15	      1046	convert.c	FUNCTION_26
0x40005ba	              0xc3	                                     ret	      1046	convert.c	FUNCTION_26
get_wt_convert_stats_ascii	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,3:IF,1:DO,0:SWITCH,0	29
0x40028bd	              0x53	                                push rbx	       152	convert.c	FUNCTION_6
0x40028be	        0x4883ec20	                           sub rsp, 0x20	       152	convert.c	FUNCTION_6
0x40028c2	          0x4889fe	                            mov rsi, rdi	       152	convert.c	FUNCTION_6
0x40028c5	    0x64488b042528	                mov rax, qword fs:[0x28]	       152	convert.c	FUNCTION_6
0x40028ce	      0x4889442418	             mov qword [rsp + 0x18], rax	       152	convert.c	FUNCTION_6
0x40028d3	            0x31c0	                            xor eax, eax	       152	convert.c	FUNCTION_6
0x40028d5	    0x48c704240000	                      mov qword [rsp], 0	       154	convert.c	FUNCTION_6
0x40028dd	    0x48c744240800	                  mov qword [rsp + 8], 0	       154	convert.c	FUNCTION_6
0x40028e6	    0x48c744241000	               mov qword [rsp + 0x10], 0	       154	convert.c	FUNCTION_6
0x40028ef	      0xba00000000	                              mov edx, 0	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x40028f4	          0x4889e7	                            mov rdi, rsp	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x40028f7	      0xe800000000	                          call 0x40028fc	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x40028fc	      0xbb00000000	                              mov ebx, 0	       153	convert.c	FUNCTION_6
0x4002901	          0x4885c0	                           test rax, rax	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002904	            0x7812	                            js 0x4002918	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002906	      0x488b742408	                mov rsi, qword [rsp + 8]	       156	convert.c	FUNCTION_6	CALL_2
0x400290b	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       156	convert.c	FUNCTION_6	CALL_2
0x4002910	      0xe8a7d9ffff	     call sym.gather_convert_stats_ascii	       156	convert.c	FUNCTION_6	CALL_2
0x4002915	          0x4889c3	                            mov rbx, rax	       156	convert.c	FUNCTION_6	CALL_2
0x4002918	          0x4889e7	                            mov rdi, rsp	       157	convert.c	FUNCTION_6	CALL_3
0x400291b	      0xe800000000	                          call 0x4002920	       157	convert.c	FUNCTION_6	CALL_3
0x4002920	          0x4889d8	                            mov rax, rbx	       159	convert.c	FUNCTION_6
0x4002923	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       159	convert.c	FUNCTION_6
0x4002928	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       159	convert.c	FUNCTION_6
0x4002931	            0x7405	                            je 0x4002938	       159	convert.c	FUNCTION_6
0x4002933	      0xe800000000	                          call 0x4002938	       159	convert.c	FUNCTION_6
0x4002938	        0x4883c420	                           add rsp, 0x20	       159	convert.c	FUNCTION_6
0x400293c	              0x5b	                                 pop rbx	       159	convert.c	FUNCTION_6
0x400293d	              0xc3	                                     ret	       159	convert.c	FUNCTION_6
renormalize_buffer	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,1:DO,0:SWITCH,0	40
0x4002eb2	            0x4157	                                push r15	      1494	convert.c	FUNCTION_43
0x4002eb4	            0x4156	                                push r14	      1494	convert.c	FUNCTION_43
0x4002eb6	            0x4155	                                push r13	      1494	convert.c	FUNCTION_43
0x4002eb8	            0x4154	                                push r12	      1494	convert.c	FUNCTION_43
0x4002eba	              0x55	                                push rbp	      1494	convert.c	FUNCTION_43
0x4002ebb	              0x53	                                push rbx	      1494	convert.c	FUNCTION_43
0x4002ebc	        0x4883ec08	                              sub rsp, 8	      1494	convert.c	FUNCTION_43
0x4002ec0	          0x4989ff	                            mov r15, rdi	      1494	convert.c	FUNCTION_43
0x4002ec3	          0x4989f6	                            mov r14, rsi	      1494	convert.c	FUNCTION_43
0x4002ec6	          0x4889d5	                            mov rbp, rdx	      1494	convert.c	FUNCTION_43
0x4002ec9	          0x4989cc	                            mov r12, rcx	      1494	convert.c	FUNCTION_43
0x4002ecc	          0x4c89c3	                             mov rbx, r8	      1494	convert.c	FUNCTION_43
0x4002ecf	    0x41b900000000	                              mov r9d, 0	      1495	convert.c	FUNCTION_43	CALL_1
0x4002ed5	    0x41b801000000	                              mov r8d, 1	      1495	convert.c	FUNCTION_43	CALL_1
0x4002edb	          0x4889d9	                            mov rcx, rbx	      1495	convert.c	FUNCTION_43	CALL_1
0x4002ede	          0x4c89e2	                            mov rdx, r12	      1495	convert.c	FUNCTION_43	CALL_1
0x4002ee1	          0x4889ee	                            mov rsi, rbp	      1495	convert.c	FUNCTION_43	CALL_1
0x4002ee4	          0x4c89f7	                            mov rdi, r14	      1495	convert.c	FUNCTION_43	CALL_1
0x4002ee7	      0xe87ceaffff	call sym.convert_to_working_tree_internal	      1495	convert.c	FUNCTION_43	CALL_1
0x4002eec	          0x4189c5	                           mov r13d, eax	      1495	convert.c	FUNCTION_43	CALL_1
0x4002eef	            0x85c0	                           test eax, eax	      1496	convert.c	FUNCTION_43	IF_1
0x4002ef1	            0x7408	                            je 0x4002efb	      1496	convert.c	FUNCTION_43	IF_1
0x4002ef3	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1497	convert.c	FUNCTION_43	IF_1
0x4002ef7	        0x4c8b6308	                mov r12, qword [rbx + 8]	      1498	convert.c	FUNCTION_43	IF_1
0x4002efb	    0x41b904000000	                              mov r9d, 4	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f01	          0x4989d8	                             mov r8, rbx	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f04	          0x4c89e1	                            mov rcx, r12	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f07	          0x4889ea	                            mov rdx, rbp	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f0a	          0x4c89f6	                            mov rsi, r14	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f0d	          0x4c89ff	                            mov rdi, r15	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f10	      0xe800000000	                          call 0x4002f15	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f15	          0x4409e8	                            or eax, r13d	      1500	convert.c	FUNCTION_43	CALL_2
0x4002f18	        0x4883c408	                              add rsp, 8	      1501	convert.c	FUNCTION_43
0x4002f1c	              0x5b	                                 pop rbx	      1501	convert.c	FUNCTION_43
0x4002f1d	              0x5d	                                 pop rbp	      1501	convert.c	FUNCTION_43
0x4002f1e	            0x415c	                                 pop r12	      1501	convert.c	FUNCTION_43
0x4002f20	            0x415d	                                 pop r13	      1501	convert.c	FUNCTION_43
0x4002f22	            0x415e	                                 pop r14	      1501	convert.c	FUNCTION_43
0x4002f24	            0x415f	                                 pop r15	      1501	convert.c	FUNCTION_43
0x4002f26	              0xc3	                                     ret	      1501	convert.c	FUNCTION_43
convert_attrs	functions,0:FOR,0:WHILE,0:ELSE,4:CALL,10:IF,12:DO,0:SWITCH,0	164
0x40005bb	            0x4155	                                push r13	      1294	convert.c	FUNCTION_35
0x40005bd	            0x4154	                                push r12	      1294	convert.c	FUNCTION_35
0x40005bf	              0x55	                                push rbp	      1294	convert.c	FUNCTION_35
0x40005c0	              0x53	                                push rbx	      1294	convert.c	FUNCTION_35
0x40005c1	        0x4883ec08	                              sub rsp, 8	      1294	convert.c	FUNCTION_35
0x40005c5	          0x4889fd	                            mov rbp, rdi	      1294	convert.c	FUNCTION_35
0x40005c8	          0x4889f3	                            mov rbx, rsi	      1294	convert.c	FUNCTION_35
0x40005cb	    0x48833d000000	               cmp qword [0x040005d3], 0	      1297	convert.c	FUNCTION_35	IF_1
0x40005d3	            0x7555	                           jne 0x400062a	      1297	convert.c	FUNCTION_35	IF_1
0x40005d5	        0x4883ec08	                              sub rsp, 8	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005d9	            0x6a00	                                  push 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005db	    0x41b900000000	                              mov r9d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005e1	    0x41b800000000	                              mov r8d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005e7	      0xb900000000	                              mov ecx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005ec	      0xba00000000	                              mov edx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005f1	      0xbe00000000	                              mov esi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005f6	      0xbf00000000	                              mov edi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x40005fb	      0xb800000000	                              mov eax, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000600	      0xe800000000	                          call 0x4000605	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000605	    0x488905000000	            mov qword [0x0400060c], rax 	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x400060c	    0x48c705000000	               mov qword [0x04000617], 0	      1301	convert.c	FUNCTION_35	IF_1
0x4000617	      0xbe00000000	                              mov esi, 0	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x400061c	      0xbf00000000	                              mov edi, 0	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4000621	      0xe800000000	                          call 0x4000626	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4000626	        0x4883c410	                           add rsp, 0x10	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x400062a	    0x488b35000000	            mov rsi, qword [0x04000631] 	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000631	          0x4889df	                            mov rdi, rbx	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000634	      0xe800000000	                          call 0x4000639	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000639	            0x85c0	                           test eax, eax	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x400063b	     0xf8546010000	                           jne 0x4000787	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000641	    0x488b05000000	            mov rax, qword [0x04000648] 	      1306	convert.c	FUNCTION_35	IF_2
0x4000648	        0x4c8b6808	                mov r13, qword [rax + 8]	      1306	convert.c	FUNCTION_35	IF_2
0x400064c	        0x498d7d40	                   lea rdi, [r13 + 0x40]	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000650	      0xe8bdfcffff	            call sym.git_path_check_crlf	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000655	          0x89450c	              mov dword [rbp + 0xc], eax	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000658	            0x85c0	                           test eax, eax	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x400065a	            0x750b	                           jne 0x4000667	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x400065c	          0x4c89ef	                            mov rdi, r13	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x400065f	      0xe8aefcffff	            call sym.git_path_check_crlf	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000664	          0x89450c	              mov dword [rbp + 0xc], eax	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000667	    0x49817d180000	               cmp qword [r13 + 0x18], 0	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x400066f	           0xf94c0	                                 sete al	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000672	           0xfb6c0	                           movzx eax, al	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000675	          0x894510	            mov dword [rbp + 0x10], eax 	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000678	        0x4d8b6528	            mov r12, qword [r13 + 0x28] 	      1267	convert.c	FUNCTION_33
0x400067c	    0x4981fc000000	                              cmp r12, 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000683	           0xf94c2	                                 sete dl	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000686	    0x4981fc000000	                              cmp r12, 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x400068d	           0xf94c0	                                 sete al	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000690	             0x8c2	                               or dl, al	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000692	            0x752b	                           jne 0x40006bf	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000694	          0x4d85e4	                           test r12, r12	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000697	            0x7426	                            je 0x40006bf	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000699	    0x488b1d000000	            mov rbx, qword [0x040006a0] 	      1272	convert.c	FUNCTION_33	FOR_1
0x40006a0	          0x4885db	                           test rbx, rbx	      1272	convert.c	FUNCTION_33	FOR_1
0x40006a3	            0x7421	                            je 0x40006c6	      1272	convert.c	FUNCTION_33	FOR_1
0x40006a5	          0x488b33	                    mov rsi, qword [rbx]	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x40006a8	          0x4c89e7	                            mov rdi, r12	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x40006ab	      0xe800000000	                          call 0x40006b0	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x40006b0	            0x85c0	                           test eax, eax	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x40006b2	            0x7417	                            je 0x40006cb	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x40006b4	        0x488b5b08	                mov rbx, qword [rbx + 8]	      1272	convert.c	FUNCTION_33	FOR_1
0x40006b8	          0x4885db	                           test rbx, rbx	      1272	convert.c	FUNCTION_33	FOR_1
0x40006bb	            0x75e8	                           jne 0x40006a5	      1272	convert.c	FUNCTION_33	FOR_1
0x40006bd	            0xeb0c	                           jmp 0x40006cb	      1272	convert.c	FUNCTION_33	FOR_1
0x40006bf	      0xbb00000000	                              mov ebx, 0	      1271	convert.c	FUNCTION_33	IF_1
0x40006c4	            0xeb05	                           jmp 0x40006cb	      1271	convert.c	FUNCTION_33	IF_1
0x40006c6	      0xbb00000000	                              mov ebx, 0	      1275	convert.c	FUNCTION_33
0x40006cb	        0x48895d00	                    mov qword [rbp], rbx	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x40006cf	          0x8b450c	              mov eax, dword [rbp + 0xc]	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x40006d2	          0x83f801	                              cmp eax, 1	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x40006d5	            0x7438	                            je 0x400070f	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x40006d7	        0x498b7538	            mov rsi, qword [r13 + 0x38] 	      1254	convert.c	FUNCTION_32
0x40006db	          0x4885f6	                           test rsi, rsi	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x40006de	            0x742f	                            je 0x400070f	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x40006e0	          0x803e6c	                    cmp byte [rsi], 0x6c	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006e3	            0x7510	                           jne 0x40006f5	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006e5	        0x807e0166	                cmp byte [rsi + 1], 0x66	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006e9	            0x750a	                           jne 0x40006f5	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006eb	        0x807e0200	                   cmp byte [rsi + 2], 0	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006ef	     0xf84f5000000	                            je 0x40007ea	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x40006f5	      0xbf00000000	                              mov edi, 0	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x40006fa	      0xb905000000	                              mov ecx, 5	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x40006ff	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000701	           0xf97c1	                                 seta cl	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000704	           0xf92c2	                                 setb dl	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000707	            0x38d1	                              cmp cl, dl	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000709	     0xf84f7000000	                            je 0x4000806	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x400070f	        0x498b5d58	            mov rbx, qword [r13 + 0x58] 	      1219	convert.c	FUNCTION_30
0x4000713	          0x4885db	                           test rbx, rbx	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000716	            0x7452	                            je 0x400076a	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000718	          0x803b00	                       cmp byte [rbx], 0	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x400071b	            0x7454	                            je 0x4000771	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x400071d	    0x4881fb000000	                              cmp rbx, 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000724	            0x7409	                            je 0x400072f	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000726	    0x4881fb000000	                              cmp rbx, 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x400072d	            0x7521	                           jne 0x4000750	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x400072f	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_74	CALL_2
0x4000734	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x4000739	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_74	CALL_2
0x400073e	      0xe800000000	                          call 0x4000743	        54	gettext.h	FUNCTION_74	CALL_2
0x4000743	          0x4889c7	                            mov rdi, rax	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4000746	      0xb800000000	                              mov eax, 0	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x400074b	      0xe800000000	                          call 0x4000750	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4000750	      0xbe00000000	                              mov esi, 0	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000755	          0x4889df	                            mov rdi, rbx	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000758	      0xe800000000	                          call 0x400075d	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x400075d	            0x85c0	                           test eax, eax	      1232	convert.c	FUNCTION_30
0x400075f	      0xb800000000	                              mov eax, 0	      1232	convert.c	FUNCTION_30
0x4000764	        0x480f45d8	                         cmovne rbx, rax	      1232	convert.c	FUNCTION_30
0x4000768	            0xeb0c	                           jmp 0x4000776	      1232	convert.c	FUNCTION_30
0x400076a	      0xbb00000000	                              mov ebx, 0	      1222	convert.c	FUNCTION_30	IF_1
0x400076f	            0xeb05	                           jmp 0x4000776	      1222	convert.c	FUNCTION_30	IF_1
0x4000771	      0xbb00000000	                              mov ebx, 0	      1222	convert.c	FUNCTION_30	IF_1
0x4000776	        0x48895d18	            mov qword [rbp + 0x18], rbx 	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x400077a	          0x8b450c	              mov eax, dword [rbp + 0xc]	      1331	convert.c	FUNCTION_35
0x400077d	          0x894508	                mov dword [rbp + 8], eax	      1331	convert.c	FUNCTION_35
0x4000780	          0x83f802	                              cmp eax, 2	      1332	convert.c	FUNCTION_35	IF_9
0x4000783	            0x7421	                            je 0x40007a6	      1332	convert.c	FUNCTION_35	IF_9
0x4000785	            0xeb2f	                           jmp 0x40007b6	      1332	convert.c	FUNCTION_35	IF_9
0x4000787	    0x48c745000000	                      mov qword [rbp], 0	      1325	convert.c	FUNCTION_35	ELSE_4
0x400078f	    0xc7450c000000	                mov dword [rbp + 0xc], 0	      1326	convert.c	FUNCTION_35	ELSE_4
0x4000796	    0xc74510000000	               mov dword [rbp + 0x10], 0	      1327	convert.c	FUNCTION_35	ELSE_4
0x400079d	    0xc74508000000	                  mov dword [rbp + 8], 0	      1331	convert.c	FUNCTION_35
0x40007a4	            0xeb16	                           jmp 0x40007bc	      1331	convert.c	FUNCTION_35
0x40007a6	      0xe8b6f8ffff	               call sym.text_eol_is_crlf	      1333	convert.c	FUNCTION_35	CALL_10
0x40007ab	          0x83f801	                              cmp eax, 1	      1333	convert.c	FUNCTION_35	CALL_10
0x40007ae	            0x19c0	                            sbb eax, eax	      1333	convert.c	FUNCTION_35	CALL_10
0x40007b0	          0x83c004	                              add eax, 4	      1333	convert.c	FUNCTION_35	CALL_10
0x40007b3	          0x89450c	              mov dword [rbp + 0xc], eax	      1333	convert.c	FUNCTION_35	CALL_10
0x40007b6	        0x837d0c00	                cmp dword [rbp + 0xc], 0	      1334	convert.c	FUNCTION_35	IF_10
0x40007ba	            0x755f	                           jne 0x400081b	      1334	convert.c	FUNCTION_35	IF_10
0x40007bc	    0x8b0500000000	            mov eax, dword [0x040007c2] 	      1334	convert.c	FUNCTION_35	IF_10
0x40007c2	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_35	IF_10
0x40007c4	            0x7539	                           jne 0x40007ff	      1334	convert.c	FUNCTION_35	IF_10
0x40007c6	    0xc7450c010000	                mov dword [rbp + 0xc], 1	      1335	convert.c	FUNCTION_35	IF_10
0x40007cd	            0xeb4c	                           jmp 0x400081b	      1335	convert.c	FUNCTION_35	IF_10
0x40007cf	    0xc7450c070000	                mov dword [rbp + 0xc], 7	      1337	convert.c	FUNCTION_35	IF_11
0x40007d6	            0xeb43	                           jmp 0x400081b	      1337	convert.c	FUNCTION_35	IF_11
0x40007d8	    0x833d00000000	cmp dword [0x040007df], 0xffffffffffffffff	      1338	convert.c	FUNCTION_35	IF_12
0x40007df	            0x753a	                           jne 0x400081b	      1338	convert.c	FUNCTION_35	IF_12
0x40007e1	    0xc7450c060000	                mov dword [rbp + 0xc], 6	      1339	convert.c	FUNCTION_35	IF_12
0x40007e8	            0xeb31	                           jmp 0x400081b	      1340	convert.c	FUNCTION_35
0x40007ea	          0x83f805	                              cmp eax, 5	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007ed	           0xf94c0	                                 sete al	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007f0	           0xfb6c0	                           movzx eax, al	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007f3	        0x8d444003	              lea eax, [rax + rax*2 + 3]	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007f7	          0x89450c	              mov dword [rbp + 0xc], eax	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007fa	      0xe910ffffff	                           jmp 0x400070f	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x40007ff	          0x83f801	                              cmp eax, 1	      1336	convert.c	FUNCTION_35	IF_11
0x4000802	            0x75d4	                           jne 0x40007d8	      1336	convert.c	FUNCTION_35	IF_11
0x4000804	            0xebc9	                           jmp 0x40007cf	      1336	convert.c	FUNCTION_35	IF_11
0x4000806	          0x83f805	                              cmp eax, 5	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000809	           0xf94c0	                                 sete al	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x400080c	           0xfb6c0	                           movzx eax, al	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x400080f	        0x8d444004	              lea eax, [rax + rax*2 + 4]	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000813	          0x89450c	              mov dword [rbp + 0xc], eax	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000816	      0xe9f4feffff	                           jmp 0x400070f	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x400081b	        0x4883c408	                              add rsp, 8	      1340	convert.c	FUNCTION_35
0x400081f	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000820	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000821	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000823	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000825	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
would_convert_to_git_filter_fd	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,2:IF,2:DO,0:SWITCH,0	33
0x4002ad0	              0x53	                                push rbx	      1343	convert.c	FUNCTION_36
0x4002ad1	        0x4883ec30	                           sub rsp, 0x30	      1343	convert.c	FUNCTION_36
0x4002ad5	          0x4889fb	                            mov rbx, rdi	      1343	convert.c	FUNCTION_36
0x4002ad8	    0x64488b042528	                mov rax, qword fs:[0x28]	      1343	convert.c	FUNCTION_36
0x4002ae1	      0x4889442428	             mov qword [rsp + 0x28], rax	      1343	convert.c	FUNCTION_36
0x4002ae6	            0x31c0	                            xor eax, eax	      1343	convert.c	FUNCTION_36
0x4002ae8	          0x4889fe	                            mov rsi, rdi	      1346	convert.c	FUNCTION_36	CALL_1
0x4002aeb	          0x4889e7	                            mov rdi, rsp	      1346	convert.c	FUNCTION_36	CALL_1
0x4002aee	      0xe8c8daffff	                  call sym.convert_attrs	      1346	convert.c	FUNCTION_36	CALL_1
0x4002af3	        0x4c8b0c24	                     mov r9, qword [rsp]	      1347	convert.c	FUNCTION_36	IF_1
0x4002af7	          0x4d85c9	                             test r9, r9	      1347	convert.c	FUNCTION_36	IF_1
0x4002afa	            0x742f	                            je 0x4002b2b	      1347	convert.c	FUNCTION_36	IF_1
0x4002afc	        0x418b4128	              mov eax, dword [r9 + 0x28]	      1355	convert.c	FUNCTION_36	IF_2
0x4002b00	            0x85c0	                           test eax, eax	      1355	convert.c	FUNCTION_36	IF_2
0x4002b02	            0x742c	                            je 0x4002b30	      1355	convert.c	FUNCTION_36	IF_2
0x4002b04	            0x6a00	                                  push 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b06	            0x6a01	                                  push 1	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b08	    0x41b800000000	                              mov r8d, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b0e	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b13	      0xba00000000	                              mov edx, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b18	      0xbe00000000	                              mov esi, 0	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b1d	          0x4889df	                            mov rdi, rbx	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b20	      0xe8e1e7ffff	                   call sym.apply_filter	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b25	        0x4883c410	                           add rsp, 0x10	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b29	            0xeb05	                           jmp 0x4002b30	      1358	convert.c	FUNCTION_36	CALL_2
0x4002b2b	      0xb800000000	                              mov eax, 0	      1348	convert.c	FUNCTION_36	IF_1
0x4002b30	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1359	convert.c	FUNCTION_36
0x4002b35	    0x644833142528	                xor rdx, qword fs:[0x28]	      1359	convert.c	FUNCTION_36
0x4002b3e	            0x7405	                            je 0x4002b45	      1359	convert.c	FUNCTION_36
0x4002b40	      0xe800000000	                          call 0x4002b45	      1359	convert.c	FUNCTION_36
0x4002b45	        0x4883c430	                           add rsp, 0x30	      1359	convert.c	FUNCTION_36
0x4002b49	              0x5b	                                 pop rbx	      1359	convert.c	FUNCTION_36
0x4002b4a	              0xc3	                                     ret	      1359	convert.c	FUNCTION_36
text_eol_is_crlf	functions,0:FOR,0:WHILE,0:ELSE,1:CALL,0:IF,4:DO,0:SWITCH,0	13
0x4000061	    0x8b0500000000	            mov eax, dword [0x04000067] 	       163	convert.c	FUNCTION_7	IF_1
0x4000067	          0x83f801	                              cmp eax, 1	       163	convert.c	FUNCTION_7	IF_1
0x400006a	            0x7413	                            je 0x400007f	       163	convert.c	FUNCTION_7	IF_1
0x400006c	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x400006f	            0x7414	                            je 0x4000085	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000071	    0x833d00000000	               cmp dword [0x04000078], 1	       164	convert.c	FUNCTION_7	IF_1
0x4000078	           0xf94c0	                                 sete al	       164	convert.c	FUNCTION_7	IF_1
0x400007b	           0xfb6c0	                           movzx eax, al	       164	convert.c	FUNCTION_7	IF_1
0x400007e	              0xc3	                                     ret	       164	convert.c	FUNCTION_7	IF_1
0x400007f	      0xb801000000	                              mov eax, 1	       164	convert.c	FUNCTION_7	IF_1
0x4000084	              0xc3	                                     ret	       164	convert.c	FUNCTION_7	IF_1
0x4000085	      0xb800000000	                              mov eax, 0	       166	convert.c	FUNCTION_7	ELSE_1	IF_2
0x400008a	              0xc3	                                     ret	       172	convert.c	FUNCTION_7
async_convert_to_working_tree	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	6
0x4002e81	        0x4883ec08	                              sub rsp, 8	      1483	convert.c	FUNCTION_41
0x4002e85	          0x4d89c1	                              mov r9, r8	      1484	convert.c	FUNCTION_41	CALL_1
0x4002e88	    0x41b800000000	                              mov r8d, 0	      1484	convert.c	FUNCTION_41	CALL_1
0x4002e8e	      0xe8d5eaffff	call sym.convert_to_working_tree_internal	      1484	convert.c	FUNCTION_41	CALL_1
0x4002e93	        0x4883c408	                              add rsp, 8	      1485	convert.c	FUNCTION_41
0x4002e97	              0xc3	                                     ret	      1485	convert.c	FUNCTION_41
null_free_fn	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,0:IF,0:DO,0:SWITCH,0	1
0x400008b	            0xf3c3	                                     ret	      1543	convert.c	FUNCTION_45
ident_to_git	functions,0:FOR,1:WHILE,0:ELSE,0:CALL,11:IF,7:DO,0:SWITCH,0	134
0x40021d5	            0x4157	                                push r15	      1092	convert.c	FUNCTION_28
0x40021d7	            0x4156	                                push r14	      1092	convert.c	FUNCTION_28
0x40021d9	            0x4155	                                push r13	      1092	convert.c	FUNCTION_28
0x40021db	            0x4154	                                push r12	      1092	convert.c	FUNCTION_28
0x40021dd	              0x55	                                push rbp	      1092	convert.c	FUNCTION_28
0x40021de	              0x53	                                push rbx	      1092	convert.c	FUNCTION_28
0x40021df	        0x4883ec18	                           sub rsp, 0x18	      1092	convert.c	FUNCTION_28
0x40021e3	      0x48894c2408	                mov qword [rsp + 8], rcx	      1092	convert.c	FUNCTION_28
0x40021e8	          0x4585c0	                           test r8d, r8d	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021eb	     0xf84a4010000	                            je 0x4002395	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021f1	          0x4989f4	                            mov r12, rsi	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021f4	          0x4889d3	                            mov rbx, rdx	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021f7	          0x4885f6	                           test rsi, rsi	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021fa	            0x7413	                            je 0x400220f	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021fc	          0x4889d6	                            mov rsi, rdx	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x40021ff	          0x4c89e7	                            mov rdi, r12	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002202	      0xe8afe8ffff	                    call sym.count_ident	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002207	            0x85c0	                           test eax, eax	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x4002209	     0xf8499010000	                            je 0x40023a8	      1095	convert.c	FUNCTION_28	IF_1	CALL_1
0x400220f	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1098	convert.c	FUNCTION_28	IF_2
0x4002214	          0x4885c9	                           test rcx, rcx	      1098	convert.c	FUNCTION_28	IF_2
0x4002217	     0xf847f010000	                            je 0x400239c	      1098	convert.c	FUNCTION_28	IF_2
0x400221d	          0x488b01	                    mov rax, qword [rcx]	       141	strbuf.h	FUNCTION_62
0x4002220	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4002223	            0x7408	                            je 0x400222d	       141	strbuf.h	FUNCTION_62
0x4002225	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_62
0x4002229	        0x482b4108	                sub rax, qword [rcx + 8]	       141	strbuf.h	FUNCTION_62
0x400222d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002232	        0x488b5108	                mov rdx, qword [rcx + 8]	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002236	          0x4801d0	                            add rax, rdx	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x4002239	          0x4839c3	                            cmp rbx, rax	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400223c	            0x760e	                           jbe 0x400224c	      1102	convert.c	FUNCTION_28	IF_3	CALL_2
0x400223e	          0x4889de	                            mov rsi, rbx	      1103	convert.c	FUNCTION_28	CALL_3
0x4002241	          0x4829d6	                            sub rsi, rdx	      1103	convert.c	FUNCTION_28	CALL_3
0x4002244	          0x4889cf	                            mov rdi, rcx	      1103	convert.c	FUNCTION_28	CALL_3
0x4002247	      0xe800000000	                          call 0x400224c	      1103	convert.c	FUNCTION_28	CALL_3
0x400224c	      0x488b442408	                mov rax, qword [rsp + 8]	      1104	convert.c	FUNCTION_28
0x4002251	        0x4c8b7810	            mov r15, qword [rax + 0x10] 	      1104	convert.c	FUNCTION_28
0x4002255	            0xeb03	                           jmp 0x400225a	      1104	convert.c	FUNCTION_28
0x4002257	          0x4989ec	                            mov r12, rbp	      1092	convert.c	FUNCTION_28
0x400225a	          0x4889da	                            mov rdx, rbx	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x400225d	      0xbe24000000	                           mov esi, 0x24	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x4002262	          0x4c89e7	                            mov rdi, r12	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x4002265	      0xe800000000	                          call 0x400226a	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x400226a	          0x4989c5	                            mov r13, rax	      1106	convert.c	FUNCTION_28	FOR_1	CALL_4
0x400226d	          0x4885c0	                           test rax, rax	      1107	convert.c	FUNCTION_28	FOR_1	IF_4
0x4002270	     0xf84a2000000	                            je 0x4002318	      1107	convert.c	FUNCTION_28	FOR_1	IF_4
0x4002276	        0x488d6801	                      lea rbp, [rax + 1]	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x400227a	        0x48892c24	                    mov qword [rsp], rbp	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x400227e	          0x4989ee	                            mov r14, rbp	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002281	          0x4d29e6	                            sub r14, r12	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002284	          0x4c89f2	                            mov rdx, r14	        59	string3.h	FUNCTION_104	CALL_3
0x4002287	          0x4c89e6	                            mov rsi, r12	        59	string3.h	FUNCTION_104	CALL_3
0x400228a	          0x4c89ff	                            mov rdi, r15	        59	string3.h	FUNCTION_104	CALL_3
0x400228d	      0xe800000000	                          call 0x4002292	        59	string3.h	FUNCTION_104	CALL_3
0x4002292	          0x4d01f7	                            add r15, r14	      1110	convert.c	FUNCTION_28	FOR_1
0x4002295	          0x4c29f3	                            sub rbx, r14	      1111	convert.c	FUNCTION_28	FOR_1
0x4002298	        0x4883fb03	                              cmp rbx, 3	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400229c	            0x76b9	                           jbe 0x4002257	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x400229e	      0xba03000000	                              mov edx, 3	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022a3	      0xbe00000000	                              mov esi, 0	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022a8	          0x4889ef	                            mov rdi, rbp	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022ab	      0xe800000000	                          call 0x40022b0	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022b0	            0x85c0	                           test eax, eax	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022b2	            0x75a3	                           jne 0x4002257	      1114	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_6
0x40022b4	        0x4983c504	                              add r13, 4	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022b8	        0x488d53fd	                      lea rdx, [rbx - 3]	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022bc	      0xbe24000000	                           mov esi, 0x24	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022c1	          0x4c89ef	                            mov rdi, r13	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022c4	      0xe800000000	                          call 0x40022c9	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022c9	          0x4989c4	                            mov r12, rax	      1115	convert.c	FUNCTION_28	FOR_1	IF_5	CALL_7
0x40022cc	          0x4885c0	                           test rax, rax	      1116	convert.c	FUNCTION_28	FOR_1	IF_5	IF_6
0x40022cf	            0x7444	                            je 0x4002315	      1116	convert.c	FUNCTION_28	FOR_1	IF_5	IF_6
0x40022d1	          0x4889c2	                            mov rdx, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022d4	        0x482b1424	                    sub rdx, qword [rsp]	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022d8	        0x4883ea03	                              sub rdx, 3	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022dc	      0xbe0a000000	                            mov esi, 0xa	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022e1	          0x4c89ef	                            mov rdi, r13	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022e4	      0xe800000000	                          call 0x40022e9	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022e9	          0x4885c0	                           test rax, rax	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022ec	     0xf8565ffffff	                           jne 0x4002257	      1118	convert.c	FUNCTION_28	FOR_1	IF_5	IF_7	CALL_8
0x40022f2	    0x6641c7074964	                  mov word [r15], 0x6449	        53	string3.h	FUNCTION_103	CALL_3
0x40022f8	      0x41c6470224	                mov byte [r15 + 2], 0x24	        53	string3.h	FUNCTION_103	CALL_3
0x40022fd	        0x4983c703	                              add r15, 3	      1124	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002301	      0x498d6c2401	                      lea rbp, [r12 + 1]	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002306	          0x4889e8	                            mov rax, rbp	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002309	        0x482b0424	                    sub rax, qword [rsp]	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x400230d	          0x4829c3	                            sub rbx, rax	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002310	      0xe942ffffff	                           jmp 0x4002257	      1125	convert.c	FUNCTION_28	FOR_1	IF_5
0x4002315	          0x4989ec	                            mov r12, rbp	      1109	convert.c	FUNCTION_28	FOR_1	CALL_5
0x4002318	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_104	CALL_3
0x400231b	          0x4c89e6	                            mov rsi, r12	        59	string3.h	FUNCTION_104	CALL_3
0x400231e	          0x4c89ff	                            mov rdi, r15	        59	string3.h	FUNCTION_104	CALL_3
0x4002321	      0xe800000000	                          call 0x4002326	        59	string3.h	FUNCTION_104	CALL_3
0x4002326	          0x4c01fb	                            add rbx, r15	      1130	convert.c	FUNCTION_28	CALL_11
0x4002329	      0x488b442408	                mov rax, qword [rsp + 8]	      1130	convert.c	FUNCTION_28	CALL_11
0x400232e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1130	convert.c	FUNCTION_28	CALL_11
0x4002332	          0x4889d9	                            mov rcx, rbx	      1130	convert.c	FUNCTION_28	CALL_11
0x4002335	          0x4829d1	                            sub rcx, rdx	      1130	convert.c	FUNCTION_28	CALL_11
0x4002338	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_63	IF_1
0x400233b	        0x4883f801	                              cmp rax, 1	       162	strbuf.h	FUNCTION_63	IF_1
0x400233f	        0x4883d0ff	             adc rax, 0xffffffffffffffff	       162	strbuf.h	FUNCTION_63	IF_1
0x4002343	          0x4839c1	                            cmp rcx, rax	       162	strbuf.h	FUNCTION_63	IF_1
0x4002346	            0x760f	                           jbe 0x4002357	       162	strbuf.h	FUNCTION_63	IF_1
0x4002348	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x400234d	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x4002352	      0xe800000000	                          call 0x4002357	       163	strbuf.h	FUNCTION_63	CALL_1
0x4002357	      0x488b442408	                mov rax, qword [rsp + 8]	       164	strbuf.h	FUNCTION_63
0x400235c	        0x48894808	                mov qword [rax + 8], rcx	       164	strbuf.h	FUNCTION_63
0x4002360	    0x4881fa000000	                              cmp rdx, 0	       165	strbuf.h	FUNCTION_63	IF_2
0x4002367	            0x740a	                            je 0x4002373	       165	strbuf.h	FUNCTION_63	IF_2
0x4002369	          0xc60300	                       mov byte [rbx], 0	       166	strbuf.h	FUNCTION_63	IF_2
0x400236c	      0xb801000000	                              mov eax, 1	      1131	convert.c	FUNCTION_28
0x4002371	            0xeb35	                           jmp 0x40023a8	      1131	convert.c	FUNCTION_28
0x4002373	    0x803d00000000	                cmp byte [0x0400237a], 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x400237a	            0x7427	                            je 0x40023a3	       168	strbuf.h	FUNCTION_63	CALL_2
0x400237c	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002381	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002386	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x400238b	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002390	      0xe800000000	                          call 0x4002395	       168	strbuf.h	FUNCTION_63	CALL_2
0x4002395	      0xb800000000	                              mov eax, 0	      1096	convert.c	FUNCTION_28	IF_1
0x400239a	            0xeb0c	                           jmp 0x40023a8	      1096	convert.c	FUNCTION_28	IF_1
0x400239c	      0xb801000000	                              mov eax, 1	      1099	convert.c	FUNCTION_28	IF_2
0x40023a1	            0xeb05	                           jmp 0x40023a8	      1099	convert.c	FUNCTION_28	IF_2
0x40023a3	      0xb801000000	                              mov eax, 1	      1131	convert.c	FUNCTION_28
0x40023a8	        0x4883c418	                           add rsp, 0x18	      1132	convert.c	FUNCTION_28
0x40023ac	              0x5b	                                 pop rbx	      1132	convert.c	FUNCTION_28
0x40023ad	              0x5d	                                 pop rbp	      1132	convert.c	FUNCTION_28
0x40023ae	            0x415c	                                 pop r12	      1132	convert.c	FUNCTION_28
0x40023b0	            0x415d	                                 pop r13	      1132	convert.c	FUNCTION_28
0x40023b2	            0x415e	                                 pop r14	      1132	convert.c	FUNCTION_28
0x40023b4	            0x415f	                                 pop r15	      1132	convert.c	FUNCTION_28
0x40023b6	              0xc3	                                     ret	      1132	convert.c	FUNCTION_28
stream_filter	functions,0:FOR,0:WHILE,0:ELSE,0:CALL,1:IF,0:DO,0:SWITCH,0	5
0x4003092	        0x4883ec08	                              sub rsp, 8	      1963	convert.c	FUNCTION_60
0x4003096	          0x488b07	                    mov rax, qword [rdi]	      1964	convert.c	FUNCTION_60	CALL_1
0x4003099	            0xff10	                        call qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x400309b	        0x4883c408	                              add rsp, 8	      1965	convert.c	FUNCTION_60
0x400309f	              0xc3	                                     ret	      1965	convert.c	FUNCTION_60
