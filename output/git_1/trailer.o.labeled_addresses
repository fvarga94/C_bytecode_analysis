same_trailer	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	24
0x40006b6	              0x55	                                push rbp	        99	trailer.c	FUNCTION_5
0x40006b7	          0x4889e5	                            mov rbp, rsp	        99	trailer.c	FUNCTION_5
0x40006ba	        0x4883ec10	                           sub rsp, 0x10	        99	trailer.c	FUNCTION_5
0x40006be	        0x48897df8	                mov qword [rbp - 8], rdi	        99	trailer.c	FUNCTION_5
0x40006c2	        0x488975f0	             mov qword [rbp - 0x10], rsi	        99	trailer.c	FUNCTION_5
0x40006c6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       100	trailer.c	FUNCTION_5	CALL_2
0x40006ca	        0x488b45f8	                mov rax, qword [rbp - 8]	       100	trailer.c	FUNCTION_5	CALL_2
0x40006ce	          0x4889d6	                            mov rsi, rdx	       100	trailer.c	FUNCTION_5	CALL_2
0x40006d1	          0x4889c7	                            mov rdi, rax	       100	trailer.c	FUNCTION_5	CALL_2
0x40006d4	      0xe8f3feffff	                     call sym.same_token	       100	trailer.c	FUNCTION_5	CALL_2
0x40006d9	            0x85c0	                           test eax, eax	       100	trailer.c	FUNCTION_5	CALL_2
0x40006db	            0x741e	                            je 0x40006fb	       100	trailer.c	FUNCTION_5	CALL_2
0x40006dd	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       100	trailer.c	FUNCTION_5	CALL_2
0x40006e1	        0x488b45f8	                mov rax, qword [rbp - 8]	       100	trailer.c	FUNCTION_5	CALL_2
0x40006e5	          0x4889d6	                            mov rsi, rdx	       100	trailer.c	FUNCTION_5	CALL_2
0x40006e8	          0x4889c7	                            mov rdi, rax	       100	trailer.c	FUNCTION_5	CALL_2
0x40006eb	      0xe891ffffff	                     call sym.same_value	       100	trailer.c	FUNCTION_5	CALL_2
0x40006f0	            0x85c0	                           test eax, eax	       100	trailer.c	FUNCTION_5	CALL_2
0x40006f2	            0x7407	                            je 0x40006fb	       100	trailer.c	FUNCTION_5	CALL_2
0x40006f4	      0xb801000000	                              mov eax, 1	       100	trailer.c	FUNCTION_5	CALL_2
0x40006f9	            0xeb05	                           jmp 0x4000700	       100	trailer.c	FUNCTION_5	CALL_2
0x40006fb	      0xb800000000	                              mov eax, 0	       100	trailer.c	FUNCTION_5	CALL_2
0x4000700	              0xc9	                                   leave	       101	trailer.c	FUNCTION_5
0x4000701	              0xc3	                                     ret	       101	trailer.c	FUNCTION_5
process_trailers_lists	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,3	42
0x4001177	              0x55	                                push rbp	       363	trailer.c	FUNCTION_21
0x4001178	          0x4889e5	                            mov rbp, rsp	       363	trailer.c	FUNCTION_21
0x400117b	        0x4883ec30	                           sub rsp, 0x30	       363	trailer.c	FUNCTION_21
0x400117f	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       363	trailer.c	FUNCTION_21
0x4001183	        0x488975d0	             mov qword [rbp - 0x30], rsi	       363	trailer.c	FUNCTION_21
0x4001187	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       367	trailer.c	FUNCTION_21
0x400118b	          0x488b00	                    mov rax, qword [rax]	       367	trailer.c	FUNCTION_21
0x400118e	        0x488945e8	             mov qword [rbp - 0x18], rax	       367	trailer.c	FUNCTION_21
0x4001192	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       367	trailer.c	FUNCTION_21
0x4001196	          0x488b00	                    mov rax, qword [rax]	       367	trailer.c	FUNCTION_21
0x4001199	        0x488945f0	             mov qword [rbp - 0x10], rax	       367	trailer.c	FUNCTION_21
0x400119d	            0xeb5d	                           jmp 0x40011fc	       367	trailer.c	FUNCTION_21
0x400119f	    0xc745e4000000	               mov dword [rbp - 0x1c], 0	       368	trailer.c	FUNCTION_21
0x40011a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       369	trailer.c	FUNCTION_21
0x40011aa	        0x488945f8	                mov qword [rbp - 8], rax	       369	trailer.c	FUNCTION_21
0x40011ae	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       371	trailer.c	FUNCTION_21	CALL_1
0x40011b2	          0x4889c7	                            mov rdi, rax	       371	trailer.c	FUNCTION_21	CALL_1
0x40011b5	      0xe8eff2ffff	                       call sym.list_del	       371	trailer.c	FUNCTION_21	CALL_1
0x40011ba	        0x488b55f8	                mov rdx, qword [rbp - 8]	       373	trailer.c	FUNCTION_21	CALL_2
0x40011be	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       373	trailer.c	FUNCTION_21	CALL_2
0x40011c2	          0x4889d6	                            mov rsi, rdx	       373	trailer.c	FUNCTION_21	CALL_2
0x40011c5	          0x4889c7	                            mov rdi, rax	       373	trailer.c	FUNCTION_21	CALL_2
0x40011c8	      0xe896feffff	        call sym.find_same_and_apply_arg	       373	trailer.c	FUNCTION_21	CALL_2
0x40011cd	          0x8945e4	             mov dword [rbp - 0x1c], eax	       373	trailer.c	FUNCTION_21	CALL_2
0x40011d0	        0x837de400	               cmp dword [rbp - 0x1c], 0	       375	trailer.c	FUNCTION_21	IF_1
0x40011d4	            0x7513	                           jne 0x40011e9	       375	trailer.c	FUNCTION_21	IF_1
0x40011d6	        0x488b55f8	                mov rdx, qword [rbp - 8]	       376	trailer.c	FUNCTION_21	CALL_3
0x40011da	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       376	trailer.c	FUNCTION_21	CALL_3
0x40011de	          0x4889d6	                            mov rsi, rdx	       376	trailer.c	FUNCTION_21	CALL_3
0x40011e1	          0x4889c7	                            mov rdi, rax	       376	trailer.c	FUNCTION_21	CALL_3
0x40011e4	      0xe8cdfdffff	           call sym.apply_arg_if_missing	       376	trailer.c	FUNCTION_21	CALL_3
0x40011e9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       367	trailer.c	FUNCTION_21
0x40011ed	        0x488945e8	             mov qword [rbp - 0x18], rax	       367	trailer.c	FUNCTION_21
0x40011f1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       367	trailer.c	FUNCTION_21
0x40011f5	          0x488b00	                    mov rax, qword [rax]	       367	trailer.c	FUNCTION_21
0x40011f8	        0x488945f0	             mov qword [rbp - 0x10], rax	       367	trailer.c	FUNCTION_21
0x40011fc	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       367	trailer.c	FUNCTION_21
0x4001200	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       367	trailer.c	FUNCTION_21
0x4001204	            0x7599	                           jne 0x400119f	       367	trailer.c	FUNCTION_21
0x4001206	              0x90	                                     nop	       378	trailer.c	FUNCTION_21
0x4001207	              0xc9	                                   leave	       378	trailer.c	FUNCTION_21
0x4001208	              0xc3	                                     ret	       378	trailer.c	FUNCTION_21
trailer_set_if_missing	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,3:ELSE,3:CALL,2	33
0x400139d	              0x55	                                push rbp	       417	trailer.c	ELSE_6	FUNCTION_24
0x400139e	          0x4889e5	                            mov rbp, rsp	       417	trailer.c	ELSE_6	FUNCTION_24
0x40013a1	        0x4883ec10	                           sub rsp, 0x10	       417	trailer.c	ELSE_6	FUNCTION_24
0x40013a5	        0x48897df8	                mov qword [rbp - 8], rdi	       417	trailer.c	ELSE_6	FUNCTION_24
0x40013a9	        0x488975f0	             mov qword [rbp - 0x10], rsi	       417	trailer.c	ELSE_6	FUNCTION_24
0x40013ad	      0x48837df000	               cmp qword [rbp - 0x10], 0	       418	trailer.c	ELSE_6	FUNCTION_24	IF_1
0x40013b2	            0x750c	                           jne 0x40013c0	       418	trailer.c	ELSE_6	FUNCTION_24	IF_1
0x40013b4	        0x488b45f8	                mov rax, qword [rbp - 8]	       419	trailer.c	ELSE_6	FUNCTION_24	IF_1
0x40013b8	    0xc70000000000	                      mov dword [rax], 0	       419	trailer.c	ELSE_6	FUNCTION_24	IF_1
0x40013be	            0xeb49	                           jmp 0x4001409	       419	trailer.c	ELSE_6	FUNCTION_24	IF_1
0x40013c0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013c4	          0x4889c6	                            mov rsi, rax	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013c7	      0xbf00000000	                              mov edi, 0	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013cc	      0xe800000000	                          call 0x40013d1	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013d1	            0x85c0	                           test eax, eax	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013d3	            0x750c	                           jne 0x40013e1	       420	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2	CALL_1
0x40013d5	        0x488b45f8	                mov rax, qword [rbp - 8]	       421	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2
0x40013d9	    0xc70002000000	                      mov dword [rax], 2	       421	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2
0x40013df	            0xeb28	                           jmp 0x4001409	       421	trailer.c	ELSE_6	FUNCTION_24	ELSE_1	IF_2
0x40013e1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013e5	          0x4889c6	                            mov rsi, rax	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013e8	      0xbf00000000	                              mov edi, 0	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013ed	      0xe800000000	                          call 0x40013f2	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013f2	            0x85c0	                           test eax, eax	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013f4	            0x750c	                           jne 0x4001402	       422	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3	CALL_2
0x40013f6	        0x488b45f8	                mov rax, qword [rbp - 8]	       423	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3
0x40013fa	    0xc70001000000	                      mov dword [rax], 1	       423	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3
0x4001400	            0xeb07	                           jmp 0x4001409	       423	trailer.c	ELSE_6	FUNCTION_24	ELSE_2	IF_3
0x4001402	      0xb8ffffffff	                     mov eax, 0xffffffff	       425	trailer.c	ELSE_6	FUNCTION_24	ELSE_3
0x4001407	            0xeb05	                           jmp 0x400140e	       425	trailer.c	ELSE_6	FUNCTION_24	ELSE_3
0x4001409	      0xb800000000	                              mov eax, 0	       426	trailer.c	ELSE_6	FUNCTION_24	ELSE_3
0x400140e	              0xc9	                                   leave	       427	trailer.c	ELSE_6	FUNCTION_24	ELSE_3
0x400140f	              0xc3	                                     ret	       427	trailer.c	ELSE_6	FUNCTION_24	ELSE_3
strbuf_replace	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,4	42
0x4000770	              0x55	                                push rbp	       112	trailer.c	FUNCTION_7
0x4000771	          0x4889e5	                            mov rbp, rsp	       112	trailer.c	FUNCTION_7
0x4000774	              0x53	                                push rbx	       112	trailer.c	FUNCTION_7
0x4000775	        0x4883ec38	                           sub rsp, 0x38	       112	trailer.c	FUNCTION_7
0x4000779	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       112	trailer.c	FUNCTION_7
0x400077d	        0x488975d0	             mov qword [rbp - 0x30], rsi	       112	trailer.c	FUNCTION_7
0x4000781	        0x488955c8	             mov qword [rbp - 0x38], rdx	       112	trailer.c	FUNCTION_7
0x4000785	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       113	trailer.c	FUNCTION_7	CALL_1
0x4000789	        0x488b4010	            mov rax, qword [rax + 0x10] 	       113	trailer.c	FUNCTION_7	CALL_1
0x400078d	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       113	trailer.c	FUNCTION_7	CALL_1
0x4000791	          0x4889d6	                            mov rsi, rdx	       113	trailer.c	FUNCTION_7	CALL_1
0x4000794	          0x4889c7	                            mov rdi, rax	       113	trailer.c	FUNCTION_7	CALL_1
0x4000797	      0xe800000000	                          call 0x400079c	       113	trailer.c	FUNCTION_7	CALL_1
0x400079c	        0x488945e8	             mov qword [rbp - 0x18], rax	       113	trailer.c	FUNCTION_7	CALL_1
0x40007a0	      0x48837de800	               cmp qword [rbp - 0x18], 0	       114	trailer.c	FUNCTION_7	IF_1
0x40007a5	            0x744c	                            je 0x40007f3	       114	trailer.c	FUNCTION_7	IF_1
0x40007a7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007ab	          0x4889c7	                            mov rdi, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007ae	      0xe800000000	                          call 0x40007b3	       115	trailer.c	FUNCTION_7	CALL_4
0x40007b3	          0x4889c3	                            mov rbx, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007b6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007ba	          0x4889c7	                            mov rdi, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007bd	      0xe800000000	                          call 0x40007c2	       115	trailer.c	FUNCTION_7	CALL_4
0x40007c2	          0x4889c7	                            mov rdi, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007c5	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007c9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007cd	        0x488b4010	            mov rax, qword [rax + 0x10] 	       115	trailer.c	FUNCTION_7	CALL_4
0x40007d1	          0x4829c2	                            sub rdx, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007d4	          0x4889d0	                            mov rax, rdx	       115	trailer.c	FUNCTION_7	CALL_4
0x40007d7	          0x4889c6	                            mov rsi, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007da	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007de	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       115	trailer.c	FUNCTION_7	CALL_4
0x40007e2	          0x4989d8	                             mov r8, rbx	       115	trailer.c	FUNCTION_7	CALL_4
0x40007e5	          0x4889d1	                            mov rcx, rdx	       115	trailer.c	FUNCTION_7	CALL_4
0x40007e8	          0x4889fa	                            mov rdx, rdi	       115	trailer.c	FUNCTION_7	CALL_4
0x40007eb	          0x4889c7	                            mov rdi, rax	       115	trailer.c	FUNCTION_7	CALL_4
0x40007ee	      0xe800000000	                          call 0x40007f3	       115	trailer.c	FUNCTION_7	CALL_4
0x40007f3	              0x90	                                     nop	       116	trailer.c	FUNCTION_7
0x40007f4	        0x4883c438	                           add rsp, 0x38	       116	trailer.c	FUNCTION_7
0x40007f8	              0x5b	                                 pop rbx	       116	trailer.c	FUNCTION_7
0x40007f9	              0x5d	                                 pop rbp	       116	trailer.c	FUNCTION_7
0x40007fa	              0xc3	                                     ret	       116	trailer.c	FUNCTION_7
token_matches_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	38
0x4001a62	              0x55	                                push rbp	       589	trailer.c	FUNCTION_31
0x4001a63	          0x4889e5	                            mov rbp, rsp	       589	trailer.c	FUNCTION_31
0x4001a66	        0x4883ec20	                           sub rsp, 0x20	       589	trailer.c	FUNCTION_31
0x4001a6a	        0x48897df8	                mov qword [rbp - 8], rdi	       589	trailer.c	FUNCTION_31
0x4001a6e	        0x488975f0	             mov qword [rbp - 0x10], rsi	       589	trailer.c	FUNCTION_31
0x4001a72	          0x8955ec	             mov dword [rbp - 0x14], edx	       589	trailer.c	FUNCTION_31
0x4001a75	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a78	          0x4863d0	                         movsxd rdx, eax	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a7b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a7f	        0x488b4820	            mov rcx, qword [rax + 0x20] 	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a83	        0x488b45f8	                mov rax, qword [rbp - 8]	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a87	          0x4889ce	                            mov rsi, rcx	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a8a	          0x4889c7	                            mov rdi, rax	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a8d	      0xe800000000	                          call 0x4001a92	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a92	            0x85c0	                           test eax, eax	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a94	            0x7507	                           jne 0x4001a9d	       590	trailer.c	FUNCTION_31	IF_1	CALL_1
0x4001a96	      0xb801000000	                              mov eax, 1	       591	trailer.c	FUNCTION_31	IF_1
0x4001a9b	            0xeb3b	                           jmp 0x4001ad8	       591	trailer.c	FUNCTION_31	IF_1
0x4001a9d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       592	trailer.c	FUNCTION_31	CALL_2
0x4001aa1	        0x488b4028	            mov rax, qword [rax + 0x28] 	       592	trailer.c	FUNCTION_31	CALL_2
0x4001aa5	          0x4885c0	                           test rax, rax	       592	trailer.c	FUNCTION_31	CALL_2
0x4001aa8	            0x7428	                            je 0x4001ad2	       592	trailer.c	FUNCTION_31	CALL_2
0x4001aaa	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       592	trailer.c	FUNCTION_31	CALL_2
0x4001aad	          0x4863d0	                         movsxd rdx, eax	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ab0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ab4	        0x488b4828	            mov rcx, qword [rax + 0x28] 	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ab8	        0x488b45f8	                mov rax, qword [rbp - 8]	       592	trailer.c	FUNCTION_31	CALL_2
0x4001abc	          0x4889ce	                            mov rsi, rcx	       592	trailer.c	FUNCTION_31	CALL_2
0x4001abf	          0x4889c7	                            mov rdi, rax	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ac2	      0xe800000000	                          call 0x4001ac7	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ac7	            0x85c0	                           test eax, eax	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ac9	            0x7507	                           jne 0x4001ad2	       592	trailer.c	FUNCTION_31	CALL_2
0x4001acb	      0xb801000000	                              mov eax, 1	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ad0	            0xeb05	                           jmp 0x4001ad7	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ad2	      0xb800000000	                              mov eax, 0	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ad7	              0x90	                                     nop	       592	trailer.c	FUNCTION_31	CALL_2
0x4001ad8	              0xc9	                                   leave	       593	trailer.c	FUNCTION_31
0x4001ad9	              0xc3	                                     ret	       593	trailer.c	FUNCTION_31
strbuf_addch	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	33
0x4000300	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_56
0x4000301	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_56
0x4000304	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_56
0x4000308	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_56
0x400030c	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_56
0x400030f	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000313	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000316	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x400031b	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x400031e	            0x7511	                           jne 0x4000331	       227	strbuf.h	FUNCTION_56	IF_1	CALL_1
0x4000320	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000324	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000329	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_56	CALL_2
0x400032c	      0xe800000000	                          call 0x4000331	       228	strbuf.h	FUNCTION_56	CALL_2
0x4000331	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x4000335	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_56
0x4000339	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x400033d	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_56
0x4000341	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_56
0x4000345	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_56
0x4000349	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_56
0x400034d	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_56
0x4000350	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_56
0x4000353	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_56
0x4000355	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_56
0x4000359	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_56
0x400035d	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_56
0x4000361	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_56
0x4000365	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_56
0x4000368	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_56
0x400036b	              0x90	                                     nop	       231	strbuf.h	FUNCTION_56
0x400036c	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_56
0x400036d	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_56
same_token	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,5	50
0x40005cc	              0x55	                                push rbp	        80	trailer.c	FUNCTION_3
0x40005cd	          0x4889e5	                            mov rbp, rsp	        80	trailer.c	FUNCTION_3
0x40005d0	        0x4883ec30	                           sub rsp, 0x30	        80	trailer.c	FUNCTION_3
0x40005d4	        0x48897dd8	             mov qword [rbp - 0x28], rdi	        80	trailer.c	FUNCTION_3
0x40005d8	        0x488975d0	             mov qword [rbp - 0x30], rsi	        80	trailer.c	FUNCTION_3
0x40005dc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        83	trailer.c	FUNCTION_3	IF_1
0x40005e0	        0x488b4010	            mov rax, qword [rax + 0x10] 	        83	trailer.c	FUNCTION_3	IF_1
0x40005e4	          0x4885c0	                           test rax, rax	        83	trailer.c	FUNCTION_3	IF_1
0x40005e7	            0x750a	                           jne 0x40005f3	        83	trailer.c	FUNCTION_3	IF_1
0x40005e9	      0xb800000000	                              mov eax, 0	        84	trailer.c	FUNCTION_3	IF_1
0x40005ee	      0xe98c000000	                           jmp 0x400067f	        84	trailer.c	FUNCTION_3	IF_1
0x40005f3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        86	trailer.c	FUNCTION_3	CALL_2
0x40005f7	        0x488b4010	            mov rax, qword [rax + 0x10] 	        86	trailer.c	FUNCTION_3	CALL_2
0x40005fb	          0x4889c7	                            mov rdi, rax	        86	trailer.c	FUNCTION_3	CALL_2
0x40005fe	      0xe800000000	                          call 0x4000603	        86	trailer.c	FUNCTION_3	CALL_2
0x4000603	          0x4889c2	                            mov rdx, rax	        86	trailer.c	FUNCTION_3	CALL_2
0x4000606	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        86	trailer.c	FUNCTION_3	CALL_2
0x400060a	        0x488b4010	            mov rax, qword [rax + 0x10] 	        86	trailer.c	FUNCTION_3	CALL_2
0x400060e	          0x4889d6	                            mov rsi, rdx	        86	trailer.c	FUNCTION_3	CALL_2
0x4000611	          0x4889c7	                            mov rdi, rax	        86	trailer.c	FUNCTION_3	CALL_2
0x4000614	      0xe86bffffff	    call sym.token_len_without_separator	        86	trailer.c	FUNCTION_3	CALL_2
0x4000619	        0x488945e8	             mov qword [rbp - 0x18], rax	        86	trailer.c	FUNCTION_3	CALL_2
0x400061d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        87	trailer.c	FUNCTION_3	CALL_4
0x4000621	        0x488b4010	            mov rax, qword [rax + 0x10] 	        87	trailer.c	FUNCTION_3	CALL_4
0x4000625	          0x4889c7	                            mov rdi, rax	        87	trailer.c	FUNCTION_3	CALL_4
0x4000628	      0xe800000000	                          call 0x400062d	        87	trailer.c	FUNCTION_3	CALL_4
0x400062d	          0x4889c2	                            mov rdx, rax	        87	trailer.c	FUNCTION_3	CALL_4
0x4000630	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        87	trailer.c	FUNCTION_3	CALL_4
0x4000634	        0x488b4010	            mov rax, qword [rax + 0x10] 	        87	trailer.c	FUNCTION_3	CALL_4
0x4000638	          0x4889d6	                            mov rsi, rdx	        87	trailer.c	FUNCTION_3	CALL_4
0x400063b	          0x4889c7	                            mov rdi, rax	        87	trailer.c	FUNCTION_3	CALL_4
0x400063e	      0xe841ffffff	    call sym.token_len_without_separator	        87	trailer.c	FUNCTION_3	CALL_4
0x4000643	        0x488945f0	             mov qword [rbp - 0x10], rax	        87	trailer.c	FUNCTION_3	CALL_4
0x4000647	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        88	trailer.c	FUNCTION_3
0x400064b	        0x483945e8	            cmp qword [rbp - 0x18], rax 	        88	trailer.c	FUNCTION_3
0x400064f	      0x480f4645e8	          cmovbe rax, qword [rbp - 0x18]	        88	trailer.c	FUNCTION_3
0x4000654	        0x488945f8	                mov qword [rbp - 8], rax	        88	trailer.c	FUNCTION_3
0x4000658	        0x488b45d0	             mov rax, qword [rbp - 0x30]	        90	trailer.c	FUNCTION_3	CALL_5
0x400065c	        0x488b4810	            mov rcx, qword [rax + 0x10] 	        90	trailer.c	FUNCTION_3	CALL_5
0x4000660	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        90	trailer.c	FUNCTION_3	CALL_5
0x4000664	        0x488b4010	            mov rax, qword [rax + 0x10] 	        90	trailer.c	FUNCTION_3	CALL_5
0x4000668	        0x488b55f8	                mov rdx, qword [rbp - 8]	        90	trailer.c	FUNCTION_3	CALL_5
0x400066c	          0x4889ce	                            mov rsi, rcx	        90	trailer.c	FUNCTION_3	CALL_5
0x400066f	          0x4889c7	                            mov rdi, rax	        90	trailer.c	FUNCTION_3	CALL_5
0x4000672	      0xe800000000	                          call 0x4000677	        90	trailer.c	FUNCTION_3	CALL_5
0x4000677	            0x85c0	                           test eax, eax	        90	trailer.c	FUNCTION_3	CALL_5
0x4000679	           0xf94c0	                                 sete al	        90	trailer.c	FUNCTION_3	CALL_5
0x400067c	           0xfb6c0	                           movzx eax, al	        90	trailer.c	FUNCTION_3	CALL_5
0x400067f	              0xc9	                                   leave	        91	trailer.c	FUNCTION_3
0x4000680	              0xc3	                                     ret	        91	trailer.c	FUNCTION_3
strip_suffix_mem	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	38
0x40000a1	              0x55	                                push rbp	       538	git-compat-util.h	FUNCTION_73
0x40000a2	          0x4889e5	                            mov rbp, rsp	       538	git-compat-util.h	FUNCTION_73
0x40000a5	        0x4883ec30	                           sub rsp, 0x30	       538	git-compat-util.h	FUNCTION_73
0x40000a9	        0x48897de8	             mov qword [rbp - 0x18], rdi	       538	git-compat-util.h	FUNCTION_73
0x40000ad	        0x488975e0	             mov qword [rbp - 0x20], rsi	       538	git-compat-util.h	FUNCTION_73
0x40000b1	        0x488955d8	             mov qword [rbp - 0x28], rdx	       538	git-compat-util.h	FUNCTION_73
0x40000b5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       539	git-compat-util.h	FUNCTION_73	CALL_1
0x40000b9	          0x4889c7	                            mov rdi, rax	       539	git-compat-util.h	FUNCTION_73	CALL_1
0x40000bc	      0xe800000000	                          call 0x40000c1	       539	git-compat-util.h	FUNCTION_73	CALL_1
0x40000c1	        0x488945f8	                mov qword [rbp - 8], rax	       539	git-compat-util.h	FUNCTION_73	CALL_1
0x40000c5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000c9	          0x488b00	                    mov rax, qword [rax]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000cc	        0x483b45f8	                cmp rax, qword [rbp - 8]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000d0	            0x722d	                            jb 0x40000ff	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000d2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000d6	          0x488b00	                    mov rax, qword [rax]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000d9	        0x482b45f8	                sub rax, qword [rbp - 8]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000dd	          0x4889c2	                            mov rdx, rax	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000e0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000e4	        0x488d0c02	                    lea rcx, [rdx + rax]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000e8	        0x488b55f8	                mov rdx, qword [rbp - 8]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000ec	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000f0	          0x4889c6	                            mov rsi, rax	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000f3	          0x4889cf	                            mov rdi, rcx	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000f6	      0xe800000000	                          call 0x40000fb	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000fb	            0x85c0	                           test eax, eax	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000fd	            0x7407	                            je 0x4000106	       540	git-compat-util.h	FUNCTION_73	IF_1	CALL_2
0x40000ff	      0xb800000000	                              mov eax, 0	       541	git-compat-util.h	FUNCTION_73	IF_1
0x4000104	            0xeb1a	                           jmp 0x4000120	       541	git-compat-util.h	FUNCTION_73	IF_1
0x4000106	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       542	git-compat-util.h	FUNCTION_73
0x400010a	          0x488b00	                    mov rax, qword [rax]	       542	git-compat-util.h	FUNCTION_73
0x400010d	        0x482b45f8	                sub rax, qword [rbp - 8]	       542	git-compat-util.h	FUNCTION_73
0x4000111	          0x4889c2	                            mov rdx, rax	       542	git-compat-util.h	FUNCTION_73
0x4000114	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       542	git-compat-util.h	FUNCTION_73
0x4000118	          0x488910	                    mov qword [rax], rdx	       542	git-compat-util.h	FUNCTION_73
0x400011b	      0xb801000000	                              mov eax, 1	       543	git-compat-util.h	FUNCTION_73
0x4000120	              0xc9	                                   leave	       544	git-compat-util.h	FUNCTION_73
0x4000121	              0xc3	                                     ret	       544	git-compat-util.h	FUNCTION_73
find_separator	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,3:ELSE,0:CALL,1	62
0x4001ada	              0x55	                                push rbp	       607	trailer.c	FUNCTION_32
0x4001adb	          0x4889e5	                            mov rbp, rsp	       607	trailer.c	FUNCTION_32
0x4001ade	        0x4883ec20	                           sub rsp, 0x20	       607	trailer.c	FUNCTION_32
0x4001ae2	        0x48897de8	             mov qword [rbp - 0x18], rdi	       607	trailer.c	FUNCTION_32
0x4001ae6	        0x488975e0	             mov qword [rbp - 0x20], rsi	       607	trailer.c	FUNCTION_32
0x4001aea	    0xc745f4000000	                mov dword [rbp - 0xc], 0	       608	trailer.c	FUNCTION_32
0x4001af1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       610	trailer.c	FUNCTION_32	FOR_1
0x4001af5	        0x488945f8	                mov qword [rbp - 8], rax	       610	trailer.c	FUNCTION_32	FOR_1
0x4001af9	      0xe98a000000	                           jmp 0x4001b88	       610	trailer.c	FUNCTION_32	FOR_1
0x4001afe	        0x488b45f8	                mov rax, qword [rbp - 8]	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b02	           0xfb600	                   movzx eax, byte [rax]	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b05	           0xfbed0	                           movsx edx, al	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b08	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b0c	            0x89d6	                            mov esi, edx	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b0e	          0x4889c7	                            mov rdi, rax	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b11	      0xe800000000	                          call 0x4001b16	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b16	          0x4885c0	                           test rax, rax	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b19	            0x7410	                            je 0x4001b2b	       611	trailer.c	FUNCTION_32	FOR_1	IF_1	CALL_1
0x4001b1b	        0x488b55f8	                mov rdx, qword [rbp - 8]	       612	trailer.c	FUNCTION_32	FOR_1	IF_1
0x4001b1f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       612	trailer.c	FUNCTION_32	FOR_1	IF_1
0x4001b23	          0x4829c2	                            sub rdx, rax	       612	trailer.c	FUNCTION_32	FOR_1	IF_1
0x4001b26	          0x4889d0	                            mov rax, rdx	       612	trailer.c	FUNCTION_32	FOR_1	IF_1
0x4001b29	            0xeb74	                           jmp 0x4001b9f	       612	trailer.c	FUNCTION_32	FOR_1	IF_1
0x4001b2b	        0x837df400	                cmp dword [rbp - 0xc], 0	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b2f	            0x7528	                           jne 0x4001b59	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b31	        0x488b45f8	                mov rax, qword [rbp - 8]	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b35	           0xfb600	                   movzx eax, byte [rax]	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b38	           0xfb6c0	                           movzx eax, al	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b3b	            0x4898	                                    cdqe	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b3d	     0xfb680000000	                   movzx eax, byte [rax]	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b44	           0xfb6c0	                           movzx eax, al	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b47	          0x83e006	                              and eax, 6	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b4a	            0x85c0	                           test eax, eax	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b4c	            0x7534	                           jne 0x4001b82	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b4e	        0x488b45f8	                mov rax, qword [rbp - 8]	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b52	           0xfb600	                   movzx eax, byte [rax]	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b55	            0x3c2d	                            cmp al, 0x2d	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b57	            0x7429	                            je 0x4001b82	       613	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b59	        0x488b45f8	                mov rax, qword [rbp - 8]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b5d	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b61	            0x7436	                            je 0x4001b99	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b63	        0x488b45f8	                mov rax, qword [rbp - 8]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b67	           0xfb600	                   movzx eax, byte [rax]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b6a	            0x3c20	                            cmp al, 0x20	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b6c	            0x740b	                            je 0x4001b79	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b6e	        0x488b45f8	                mov rax, qword [rbp - 8]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b72	           0xfb600	                   movzx eax, byte [rax]	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b75	            0x3c09	                               cmp al, 9	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b77	            0x7520	                           jne 0x4001b99	       615	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b79	    0xc745f4010000	                mov dword [rbp - 0xc], 1	       616	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b80	            0xeb01	                           jmp 0x4001b83	       617	trailer.c	FUNCTION_32	FOR_1	IF_3
0x4001b82	              0x90	                                     nop	       614	trailer.c	FUNCTION_32	FOR_1	IF_2
0x4001b83	      0x488345f801	                  add qword [rbp - 8], 1	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b88	        0x488b45f8	                mov rax, qword [rbp - 8]	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b8c	           0xfb600	                   movzx eax, byte [rax]	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b8f	            0x84c0	                             test al, al	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b91	     0xf8567ffffff	                           jne 0x4001afe	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b97	            0xeb01	                           jmp 0x4001b9a	       610	trailer.c	FUNCTION_32	FOR_1
0x4001b99	              0x90	                                     nop	       619	trailer.c	FUNCTION_32	FOR_1
0x4001b9a	      0xb8ffffffff	                     mov eax, 0xffffffff	       621	trailer.c	FUNCTION_32
0x4001b9f	              0xc9	                                   leave	       622	trailer.c	FUNCTION_32
0x4001ba0	              0xc3	                                     ret	       622	trailer.c	FUNCTION_32
apply_item_command	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,3:ELSE,2:CALL,4	52
0x4000d88	              0x55	                                push rbp	       251	trailer.c	FUNCTION_17
0x4000d89	          0x4889e5	                            mov rbp, rsp	       251	trailer.c	FUNCTION_17
0x4000d8c	        0x4883ec20	                           sub rsp, 0x20	       251	trailer.c	FUNCTION_17
0x4000d90	        0x48897de8	             mov qword [rbp - 0x18], rdi	       251	trailer.c	FUNCTION_17
0x4000d94	        0x488975e0	             mov qword [rbp - 0x20], rsi	       251	trailer.c	FUNCTION_17
0x4000d98	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       252	trailer.c	FUNCTION_17	IF_1
0x4000d9c	        0x488b4030	            mov rax, qword [rax + 0x30] 	       252	trailer.c	FUNCTION_17	IF_1
0x4000da0	          0x4885c0	                           test rax, rax	       252	trailer.c	FUNCTION_17	IF_1
0x4000da3	     0xf8490000000	                            je 0x4000e39	       252	trailer.c	FUNCTION_17	IF_1
0x4000da9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dad	        0x488b4018	            mov rax, qword [rax + 0x18] 	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000db1	          0x4885c0	                           test rax, rax	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000db4	            0x741d	                            je 0x4000dd3	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000db6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dba	        0x488b4018	            mov rax, qword [rax + 0x18] 	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dbe	           0xfb600	                   movzx eax, byte [rax]	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dc1	            0x84c0	                             test al, al	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dc3	            0x740e	                            je 0x4000dd3	       254	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dc5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       255	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dc9	        0x488b4018	            mov rax, qword [rax + 0x18] 	       255	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dcd	        0x488945f8	                mov qword [rbp - 8], rax	       255	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dd1	            0xeb38	                           jmp 0x4000e0b	       255	trailer.c	FUNCTION_17	IF_1	IF_2
0x4000dd3	      0x48837de800	               cmp qword [rbp - 0x18], 0	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000dd8	            0x7423	                            je 0x4000dfd	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000dda	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000dde	        0x488b4018	            mov rax, qword [rax + 0x18] 	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000de2	          0x4885c0	                           test rax, rax	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000de5	            0x7416	                            je 0x4000dfd	       257	trailer.c	FUNCTION_17	IF_1	ELSE_1	IF_3
0x4000de7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000deb	        0x488b4018	            mov rax, qword [rax + 0x18] 	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000def	          0x4889c7	                            mov rdi, rax	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000df2	      0xe800000000	                          call 0x4000df7	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000df7	        0x488945f8	                mov qword [rbp - 8], rax	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000dfb	            0xeb0e	                           jmp 0x4000e0b	       258	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_1
0x4000dfd	      0xbf00000000	                              mov edi, 0	       260	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_2
0x4000e02	      0xe800000000	                          call 0x4000e07	       260	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_2
0x4000e07	        0x488945f8	                mov qword [rbp - 8], rax	       260	trailer.c	FUNCTION_17	IF_1	ELSE_1	CALL_2
0x4000e0b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e0f	        0x488b4030	            mov rax, qword [rax + 0x30] 	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e13	        0x488b55f8	                mov rdx, qword [rbp - 8]	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e17	          0x4889d6	                            mov rsi, rdx	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e1a	          0x4889c7	                            mov rdi, rax	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e1d	      0xe889fdffff	                  call sym.apply_command	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e22	          0x4889c2	                            mov rdx, rax	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e25	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e29	        0x48895018	             mov qword [rax + 0x18], rdx	       262	trailer.c	FUNCTION_17	IF_1	CALL_3
0x4000e2d	        0x488b45f8	                mov rax, qword [rbp - 8]	       263	trailer.c	FUNCTION_17	IF_1	CALL_4
0x4000e31	          0x4889c7	                            mov rdi, rax	       263	trailer.c	FUNCTION_17	IF_1	CALL_4
0x4000e34	      0xe800000000	                          call 0x4000e39	       263	trailer.c	FUNCTION_17	IF_1	CALL_4
0x4000e39	              0x90	                                     nop	       265	trailer.c	FUNCTION_17
0x4000e3a	              0xc9	                                   leave	       265	trailer.c	FUNCTION_17
0x4000e3b	              0xc3	                                     ret	       265	trailer.c	FUNCTION_17
check_if_different	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,1:IF,2:ELSE,0:CALL,2	42
0x4000b27	              0x55	                                push rbp	       200	trailer.c	FUNCTION_15
0x4000b28	          0x4889e5	                            mov rbp, rsp	       200	trailer.c	FUNCTION_15
0x4000b2b	        0x4883ec30	                           sub rsp, 0x30	       200	trailer.c	FUNCTION_15
0x4000b2f	        0x48897de8	             mov qword [rbp - 0x18], rdi	       200	trailer.c	FUNCTION_15
0x4000b33	        0x488975e0	             mov qword [rbp - 0x20], rsi	       200	trailer.c	FUNCTION_15
0x4000b37	          0x8955dc	             mov dword [rbp - 0x24], edx	       200	trailer.c	FUNCTION_15
0x4000b3a	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       200	trailer.c	FUNCTION_15
0x4000b3e	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       201	trailer.c	FUNCTION_15
0x4000b42	          0x8b4038	            mov eax, dword [rax + 0x38] 	       201	trailer.c	FUNCTION_15
0x4000b45	          0x8945f4	              mov dword [rbp - 0xc], eax	       201	trailer.c	FUNCTION_15
0x4000b48	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b4c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b50	          0x4889d6	                            mov rsi, rdx	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b53	          0x4889c7	                            mov rdi, rax	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b56	      0xe85bfbffff	                   call sym.same_trailer	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b5b	            0x85c0	                           test eax, eax	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b5d	            0x7407	                            je 0x4000b66	       204	trailer.c	FUNCTION_15	DO_1	IF_1	CALL_1
0x4000b5f	      0xb800000000	                              mov eax, 0	       205	trailer.c	FUNCTION_15	DO_1	IF_1
0x4000b64	            0xeb43	                           jmp 0x4000ba9	       205	trailer.c	FUNCTION_15	DO_1	IF_1
0x4000b66	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       210	trailer.c	FUNCTION_15	DO_1	CALL_2
0x4000b69	            0x89c7	                            mov edi, eax	       210	trailer.c	FUNCTION_15	DO_1	CALL_2
0x4000b6b	      0xe8f3f9ffff	                   call sym.after_or_end	       210	trailer.c	FUNCTION_15	DO_1	CALL_2
0x4000b70	            0x85c0	                           test eax, eax	       211	trailer.c	FUNCTION_15	DO_1
0x4000b72	            0x740a	                            je 0x4000b7e	       211	trailer.c	FUNCTION_15	DO_1
0x4000b74	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       211	trailer.c	FUNCTION_15	DO_1
0x4000b78	        0x488b4008	                mov rax, qword [rax + 8]	       211	trailer.c	FUNCTION_15	DO_1
0x4000b7c	            0xeb07	                           jmp 0x4000b85	       211	trailer.c	FUNCTION_15	DO_1
0x4000b7e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       211	trailer.c	FUNCTION_15	DO_1
0x4000b82	          0x488b00	                    mov rax, qword [rax]	       211	trailer.c	FUNCTION_15	DO_1
0x4000b85	        0x488945f8	                mov qword [rbp - 8], rax	       210	trailer.c	FUNCTION_15	DO_1	CALL_2
0x4000b89	        0x488b45f8	                mov rax, qword [rbp - 8]	       212	trailer.c	FUNCTION_15	DO_1	IF_2
0x4000b8d	        0x483b45d0	             cmp rax, qword [rbp - 0x30]	       212	trailer.c	FUNCTION_15	DO_1	IF_2
0x4000b91	            0x7410	                            je 0x4000ba3	       212	trailer.c	FUNCTION_15	DO_1	IF_2
0x4000b93	        0x488b45f8	                mov rax, qword [rbp - 8]	       214	trailer.c	FUNCTION_15	DO_1
0x4000b97	        0x488945e8	             mov qword [rbp - 0x18], rax	       214	trailer.c	FUNCTION_15	DO_1
0x4000b9b	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       215	trailer.c	FUNCTION_15	DO_1
0x4000b9f	            0x75a7	                           jne 0x4000b48	       215	trailer.c	FUNCTION_15	DO_1
0x4000ba1	            0xeb01	                           jmp 0x4000ba4	       215	trailer.c	FUNCTION_15	DO_1
0x4000ba3	              0x90	                                     nop	       213	trailer.c	FUNCTION_15	DO_1	IF_2
0x4000ba4	      0xb801000000	                              mov eax, 1	       216	trailer.c	FUNCTION_15
0x4000ba9	              0xc9	                                   leave	       217	trailer.c	FUNCTION_15
0x4000baa	              0xc3	                                     ret	       217	trailer.c	FUNCTION_15
git_trailer_config	WHILE,0:FOR,1:SWITCH,1:functions,0:DO,0:IF,9:ELSE,0:CALL,22	192
0x40016f4	              0x55	                                push rbp	       505	trailer.c	FUNCTION_28
0x40016f5	          0x4889e5	                            mov rbp, rsp	       505	trailer.c	FUNCTION_28
0x40016f8	        0x4883ec60	                           sub rsp, 0x60	       505	trailer.c	FUNCTION_28
0x40016fc	        0x48897db8	             mov qword [rbp - 0x48], rdi	       505	trailer.c	FUNCTION_28
0x4001700	        0x488975b0	             mov qword [rbp - 0x50], rsi	       505	trailer.c	FUNCTION_28
0x4001704	        0x488955a8	             mov qword [rbp - 0x58], rdx	       505	trailer.c	FUNCTION_28
0x4001708	    0x64488b042528	                mov rax, qword fs:[0x28]	       505	trailer.c	FUNCTION_28
0x4001711	        0x488945f8	                mov qword [rbp - 8], rax	       505	trailer.c	FUNCTION_28
0x4001715	            0x31c0	                            xor eax, eax	       505	trailer.c	FUNCTION_28
0x4001717	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       509	trailer.c	FUNCTION_28
0x400171f	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x4001723	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x4001727	      0xbe00000000	                              mov esi, 0	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x400172c	          0x4889c7	                            mov rdi, rax	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x400172f	      0xe817e9ffff	                    call sym.skip_prefix	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x4001734	            0x85c0	                           test eax, eax	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x4001736	            0x750a	                           jne 0x4001742	       513	trailer.c	FUNCTION_28	IF_1	CALL_1
0x4001738	      0xb800000000	                              mov eax, 0	       514	trailer.c	FUNCTION_28	IF_1
0x400173d	      0xe977020000	                           jmp 0x40019b9	       514	trailer.c	FUNCTION_28	IF_1
0x4001742	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       516	trailer.c	FUNCTION_28	CALL_2
0x4001746	      0xbe2e000000	                           mov esi, 0x2e	       516	trailer.c	FUNCTION_28	CALL_2
0x400174b	          0x4889c7	                            mov rdi, rax	       516	trailer.c	FUNCTION_28	CALL_2
0x400174e	      0xe800000000	                          call 0x4001753	       516	trailer.c	FUNCTION_28	CALL_2
0x4001753	        0x488945e0	             mov qword [rbp - 0x20], rax	       516	trailer.c	FUNCTION_28	CALL_2
0x4001757	      0x48837de000	               cmp qword [rbp - 0x20], 0	       517	trailer.c	FUNCTION_28	IF_2
0x400175c	            0x750a	                           jne 0x4001768	       517	trailer.c	FUNCTION_28	IF_2
0x400175e	      0xb800000000	                              mov eax, 0	       518	trailer.c	FUNCTION_28	IF_2
0x4001763	      0xe951020000	                           jmp 0x40019b9	       518	trailer.c	FUNCTION_28	IF_2
0x4001768	      0x488345e001	               add qword [rbp - 0x20], 1	       520	trailer.c	FUNCTION_28
0x400176d	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       521	trailer.c	FUNCTION_28	FOR_1
0x4001774	            0xeb66	                           jmp 0x40017dc	       521	trailer.c	FUNCTION_28	FOR_1
0x4001776	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001779	            0x4898	                                    cdqe	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x400177b	        0x48c1e004	                              shl rax, 4	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x400177f	    0x480500000000	                              add rax, 0	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001785	          0x488b00	                    mov rax, qword [rax]	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001788	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x400178c	          0x4889d6	                            mov rsi, rdx	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x400178f	          0x4889c7	                            mov rdi, rax	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001792	      0xe800000000	                          call 0x4001797	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001797	            0x85c0	                           test eax, eax	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x4001799	            0x7406	                            je 0x40017a1	       522	trailer.c	FUNCTION_28	FOR_1	IF_3	CALL_3
0x400179b	        0x8345cc01	               add dword [rbp - 0x34], 1	       521	trailer.c	FUNCTION_28	FOR_1
0x400179f	            0xeb3b	                           jmp 0x40017dc	       521	trailer.c	FUNCTION_28	FOR_1
0x40017a1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017a5	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017a9	          0x4829d0	                            sub rax, rdx	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017ac	        0x4883e801	                              sub rax, 1	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017b0	          0x4889c2	                            mov rdx, rax	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017b3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017b7	          0x4889d6	                            mov rsi, rdx	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017ba	          0x4889c7	                            mov rdi, rax	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017bd	      0xe800000000	                          call 0x40017c2	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017c2	        0x488945d8	             mov qword [rbp - 0x28], rax	       524	trailer.c	FUNCTION_28	FOR_1	CALL_4
0x40017c6	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       525	trailer.c	FUNCTION_28	FOR_1
0x40017c9	            0x4898	                                    cdqe	       525	trailer.c	FUNCTION_28	FOR_1
0x40017cb	        0x48c1e004	                              shl rax, 4	       525	trailer.c	FUNCTION_28	FOR_1
0x40017cf	    0x480500000000	                              add rax, 0	       525	trailer.c	FUNCTION_28	FOR_1
0x40017d5	            0x8b00	                    mov eax, dword [rax]	       525	trailer.c	FUNCTION_28	FOR_1
0x40017d7	          0x8945c8	             mov dword [rbp - 0x38], eax	       525	trailer.c	FUNCTION_28	FOR_1
0x40017da	            0xeb08	                           jmp 0x40017e4	       526	trailer.c	FUNCTION_28	FOR_1
0x40017dc	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       521	trailer.c	FUNCTION_28	FOR_1
0x40017df	          0x83f804	                              cmp eax, 4	       521	trailer.c	FUNCTION_28	FOR_1
0x40017e2	            0x7692	                           jbe 0x4001776	       521	trailer.c	FUNCTION_28	FOR_1
0x40017e4	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       529	trailer.c	FUNCTION_28	IF_4
0x40017e9	            0x750a	                           jne 0x40017f5	       529	trailer.c	FUNCTION_28	IF_4
0x40017eb	      0xb800000000	                              mov eax, 0	       530	trailer.c	FUNCTION_28	IF_4
0x40017f0	      0xe9c4010000	                           jmp 0x40019b9	       530	trailer.c	FUNCTION_28	IF_4
0x40017f5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       532	trailer.c	FUNCTION_28	CALL_5
0x40017f9	          0x4889c7	                            mov rdi, rax	       532	trailer.c	FUNCTION_28	CALL_5
0x40017fc	      0xe89ffcffff	                  call sym.get_conf_item	       532	trailer.c	FUNCTION_28	CALL_5
0x4001801	        0x488945e8	             mov qword [rbp - 0x18], rax	       532	trailer.c	FUNCTION_28	CALL_5
0x4001805	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       533	trailer.c	FUNCTION_28
0x4001809	        0x4883c020	                           add rax, 0x20	       533	trailer.c	FUNCTION_28
0x400180d	        0x488945f0	             mov qword [rbp - 0x10], rax	       533	trailer.c	FUNCTION_28
0x4001811	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       534	trailer.c	FUNCTION_28	CALL_6
0x4001815	          0x4889c7	                            mov rdi, rax	       534	trailer.c	FUNCTION_28	CALL_6
0x4001818	      0xe800000000	                          call 0x400181d	       534	trailer.c	FUNCTION_28	CALL_6
0x400181d	        0x837dc804	               cmp dword [rbp - 0x38], 4	       536	trailer.c	FUNCTION_28	SWITCH_1
0x4001821	     0xf8772010000	                            ja 0x4001999	       536	trailer.c	FUNCTION_28	SWITCH_1
0x4001827	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       536	trailer.c	FUNCTION_28	SWITCH_1
0x400182a	    0x488b04c50000	                  mov rax, qword [rax*8]	       536	trailer.c	FUNCTION_28	SWITCH_1
0x4001832	            0xffe0	                                 jmp rax	       536	trailer.c	FUNCTION_28	SWITCH_1
0x4001834	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       538	trailer.c	FUNCTION_28	SWITCH_1	IF_5
0x4001838	        0x488b4008	                mov rax, qword [rax + 8]	       538	trailer.c	FUNCTION_28	SWITCH_1	IF_5
0x400183c	          0x4885c0	                           test rax, rax	       538	trailer.c	FUNCTION_28	SWITCH_1	IF_5
0x400183f	            0x7421	                            je 0x4001862	       538	trailer.c	FUNCTION_28	SWITCH_1	IF_5
0x4001841	      0xbf00000000	                              mov edi, 0	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x4001846	      0xe8a2ecffff	                               call sym.	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x400184b	          0x4889c2	                            mov rdx, rax	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x400184e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x4001852	          0x4889c6	                            mov rsi, rax	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x4001855	          0x4889d7	                            mov rdi, rdx	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x4001858	      0xb800000000	                              mov eax, 0	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x400185d	      0xe800000000	                          call 0x4001862	       539	trailer.c	FUNCTION_28	SWITCH_1	CALL_8
0x4001862	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x4001866	          0x4889c7	                            mov rdi, rax	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x4001869	      0xe800000000	                          call 0x400186e	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x400186e	          0x4889c2	                            mov rdx, rax	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x4001871	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x4001875	        0x48895008	                mov qword [rax + 8], rdx	       540	trailer.c	FUNCTION_28	SWITCH_1	CALL_9
0x4001879	      0xe936010000	                           jmp 0x40019b4	       541	trailer.c	FUNCTION_28	SWITCH_1
0x400187e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       543	trailer.c	FUNCTION_28	SWITCH_1	IF_6
0x4001882	        0x488b4010	            mov rax, qword [rax + 0x10] 	       543	trailer.c	FUNCTION_28	SWITCH_1	IF_6
0x4001886	          0x4885c0	                           test rax, rax	       543	trailer.c	FUNCTION_28	SWITCH_1	IF_6
0x4001889	            0x7421	                            je 0x40018ac	       543	trailer.c	FUNCTION_28	SWITCH_1	IF_6
0x400188b	      0xbf00000000	                              mov edi, 0	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x4001890	      0xe858ecffff	                               call sym.	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x4001895	          0x4889c2	                            mov rdx, rax	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x4001898	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x400189c	          0x4889c6	                            mov rsi, rax	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x400189f	          0x4889d7	                            mov rdi, rdx	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x40018a2	      0xb800000000	                              mov eax, 0	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x40018a7	      0xe800000000	                          call 0x40018ac	       544	trailer.c	FUNCTION_28	SWITCH_1	CALL_11
0x40018ac	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018b0	          0x4889c7	                            mov rdi, rax	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018b3	      0xe800000000	                          call 0x40018b8	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018b8	          0x4889c2	                            mov rdx, rax	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018bb	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018bf	        0x48895010	             mov qword [rax + 0x10], rdx	       545	trailer.c	FUNCTION_28	SWITCH_1	CALL_12
0x40018c3	      0xe9ec000000	                           jmp 0x40019b4	       546	trailer.c	FUNCTION_28	SWITCH_1
0x40018c8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018cc	        0x488d5018	                   lea rdx, [rax + 0x18]	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018d0	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018d4	          0x4889c6	                            mov rsi, rax	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018d7	          0x4889d7	                            mov rdi, rdx	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018da	      0xe800000000	                          call 0x40018df	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018df	            0x85c0	                           test eax, eax	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018e1	     0xf84c6000000	                            je 0x40019ad	       548	trailer.c	FUNCTION_28	SWITCH_1	IF_7	CALL_13
0x40018e7	      0xbf00000000	                              mov edi, 0	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018ec	      0xe8fcebffff	                               call sym.	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018f1	          0x4889c1	                            mov rcx, rax	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018f4	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018f8	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018fc	          0x4889c6	                            mov rsi, rax	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x40018ff	          0x4889cf	                            mov rdi, rcx	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x4001902	      0xb800000000	                              mov eax, 0	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x4001907	      0xe800000000	                          call 0x400190c	       549	trailer.c	FUNCTION_28	SWITCH_1	CALL_15
0x400190c	      0xe99c000000	                           jmp 0x40019ad	       550	trailer.c	FUNCTION_28	SWITCH_1
0x4001911	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001915	        0x488d501c	                   lea rdx, [rax + 0x1c]	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001919	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x400191d	          0x4889c6	                            mov rsi, rax	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001920	          0x4889d7	                            mov rdi, rdx	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001923	      0xe800000000	                          call 0x4001928	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001928	            0x85c0	                           test eax, eax	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x400192a	     0xf8480000000	                            je 0x40019b0	       552	trailer.c	FUNCTION_28	SWITCH_1	IF_8	CALL_16
0x4001930	      0xbf00000000	                              mov edi, 0	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001935	      0xe8b3ebffff	                               call sym.	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x400193a	          0x4889c1	                            mov rcx, rax	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x400193d	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001941	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001945	          0x4889c6	                            mov rsi, rax	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001948	          0x4889cf	                            mov rdi, rcx	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x400194b	      0xb800000000	                              mov eax, 0	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001950	      0xe800000000	                          call 0x4001955	       553	trailer.c	FUNCTION_28	SWITCH_1	CALL_18
0x4001955	            0xeb59	                           jmp 0x40019b0	       554	trailer.c	FUNCTION_28	SWITCH_1
0x4001957	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x400195b	        0x488d5020	                   lea rdx, [rax + 0x20]	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x400195f	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x4001963	          0x4889c6	                            mov rsi, rax	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x4001966	          0x4889d7	                            mov rdi, rdx	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x4001969	      0xe800000000	                          call 0x400196e	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x400196e	            0x85c0	                           test eax, eax	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x4001970	            0x7441	                            je 0x40019b3	       556	trailer.c	FUNCTION_28	SWITCH_1	IF_9	CALL_19
0x4001972	      0xbf00000000	                              mov edi, 0	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x4001977	      0xe871ebffff	                               call sym.	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x400197c	          0x4889c1	                            mov rcx, rax	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x400197f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x4001983	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x4001987	          0x4889c6	                            mov rsi, rax	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x400198a	          0x4889cf	                            mov rdi, rcx	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x400198d	      0xb800000000	                              mov eax, 0	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x4001992	      0xe800000000	                          call 0x4001997	       557	trailer.c	FUNCTION_28	SWITCH_1	CALL_21
0x4001997	            0xeb1a	                           jmp 0x40019b3	       558	trailer.c	FUNCTION_28	SWITCH_1
0x4001999	          0x8b45c8	             mov eax, dword [rbp - 0x38]	       560	trailer.c	FUNCTION_28	SWITCH_1	CALL_22
0x400199c	            0x89c6	                            mov esi, eax	       560	trailer.c	FUNCTION_28	SWITCH_1	CALL_22
0x400199e	      0xbf00000000	                              mov edi, 0	       560	trailer.c	FUNCTION_28	SWITCH_1	CALL_22
0x40019a3	      0xb800000000	                              mov eax, 0	       560	trailer.c	FUNCTION_28	SWITCH_1	CALL_22
0x40019a8	      0xe800000000	                          call 0x40019ad	       560	trailer.c	FUNCTION_28	SWITCH_1	CALL_22
0x40019ad	              0x90	                                     nop	       550	trailer.c	FUNCTION_28	SWITCH_1
0x40019ae	            0xeb04	                           jmp 0x40019b4	       550	trailer.c	FUNCTION_28	SWITCH_1
0x40019b0	              0x90	                                     nop	       554	trailer.c	FUNCTION_28	SWITCH_1
0x40019b1	            0xeb01	                           jmp 0x40019b4	       554	trailer.c	FUNCTION_28	SWITCH_1
0x40019b3	              0x90	                                     nop	       558	trailer.c	FUNCTION_28	SWITCH_1
0x40019b4	      0xb800000000	                              mov eax, 0	       562	trailer.c	FUNCTION_28
0x40019b9	        0x488b4df8	                mov rcx, qword [rbp - 8]	       563	trailer.c	FUNCTION_28
0x40019bd	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       563	trailer.c	FUNCTION_28
0x40019c6	            0x7405	                            je 0x40019cd	       563	trailer.c	FUNCTION_28
0x40019c8	      0xe800000000	                          call 0x40019cd	       563	trailer.c	FUNCTION_28
0x40019cd	              0xc9	                                   leave	       563	trailer.c	FUNCTION_28
0x40019ce	              0xc3	                                     ret	       563	trailer.c	FUNCTION_28
add_trailer_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	24
0x4001d14	              0x55	                                push rbp	       668	trailer.c	FUNCTION_34
0x4001d15	          0x4889e5	                            mov rbp, rsp	       668	trailer.c	FUNCTION_34
0x4001d18	        0x4883ec30	                           sub rsp, 0x30	       668	trailer.c	FUNCTION_34
0x4001d1c	        0x48897de8	             mov qword [rbp - 0x18], rdi	       668	trailer.c	FUNCTION_34
0x4001d20	        0x488975e0	             mov qword [rbp - 0x20], rsi	       668	trailer.c	FUNCTION_34
0x4001d24	        0x488955d8	             mov qword [rbp - 0x28], rdx	       668	trailer.c	FUNCTION_34
0x4001d28	      0xbe01000000	                              mov esi, 1	       669	trailer.c	FUNCTION_34	CALL_1
0x4001d2d	      0xbf20000000	                           mov edi, 0x20	       669	trailer.c	FUNCTION_34	CALL_1
0x4001d32	      0xe800000000	                          call 0x4001d37	       669	trailer.c	FUNCTION_34	CALL_1
0x4001d37	        0x488945f8	                mov qword [rbp - 8], rax	       669	trailer.c	FUNCTION_34	CALL_1
0x4001d3b	        0x488b45f8	                mov rax, qword [rbp - 8]	       670	trailer.c	FUNCTION_34
0x4001d3f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       670	trailer.c	FUNCTION_34
0x4001d43	        0x48895010	             mov qword [rax + 0x10], rdx	       670	trailer.c	FUNCTION_34
0x4001d47	        0x488b45f8	                mov rax, qword [rbp - 8]	       671	trailer.c	FUNCTION_34
0x4001d4b	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       671	trailer.c	FUNCTION_34
0x4001d4f	        0x48895018	             mov qword [rax + 0x18], rdx	       671	trailer.c	FUNCTION_34
0x4001d53	        0x488b45f8	                mov rax, qword [rbp - 8]	       672	trailer.c	FUNCTION_34	CALL_2
0x4001d57	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       672	trailer.c	FUNCTION_34	CALL_2
0x4001d5b	          0x4889d6	                            mov rsi, rdx	       672	trailer.c	FUNCTION_34	CALL_2
0x4001d5e	          0x4889c7	                            mov rdi, rax	       672	trailer.c	FUNCTION_34	CALL_2
0x4001d61	      0xe8d8e6ffff	                  call sym.list_add_tail	       672	trailer.c	FUNCTION_34	CALL_2
0x4001d66	        0x488b45f8	                mov rax, qword [rbp - 8]	       673	trailer.c	FUNCTION_34
0x4001d6a	              0xc9	                                   leave	       674	trailer.c	FUNCTION_34
0x4001d6b	              0xc3	                                     ret	       674	trailer.c	FUNCTION_34
process_trailers	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,5:ELSE,0:CALL,13	110
0x4002bb1	              0x55	                                push rbp	      1032	trailer.c	FUNCTION_48
0x4002bb2	          0x4889e5	                            mov rbp, rsp	      1032	trailer.c	FUNCTION_48
0x4002bb5	        0x4883ec70	                           sub rsp, 0x70	      1032	trailer.c	FUNCTION_48
0x4002bb9	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1032	trailer.c	FUNCTION_48
0x4002bbd	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1032	trailer.c	FUNCTION_48
0x4002bc1	        0x48895598	             mov qword [rbp - 0x68], rdx	      1032	trailer.c	FUNCTION_48
0x4002bc5	    0x64488b042528	                mov rax, qword fs:[0x28]	      1032	trailer.c	FUNCTION_48
0x4002bce	        0x488945f8	                mov qword [rbp - 8], rax	      1032	trailer.c	FUNCTION_48
0x4002bd2	            0x31c0	                            xor eax, eax	      1032	trailer.c	FUNCTION_48
0x4002bd4	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1033	trailer.c	FUNCTION_48
0x4002bd8	        0x488945c0	             mov qword [rbp - 0x40], rax	      1033	trailer.c	FUNCTION_48
0x4002bdc	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1033	trailer.c	FUNCTION_48
0x4002be0	        0x488945c8	             mov qword [rbp - 0x38], rax	      1033	trailer.c	FUNCTION_48
0x4002be4	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1034	trailer.c	FUNCTION_48
0x4002bec	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1034	trailer.c	FUNCTION_48
0x4002bf4	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1034	trailer.c	FUNCTION_48
0x4002bfc	    0x488b05000000	            mov rax, qword [0x04002c03] 	      1036	trailer.c	FUNCTION_48
0x4002c03	        0x488945b8	             mov qword [rbp - 0x48], rax	      1036	trailer.c	FUNCTION_48
0x4002c07	      0xe8c3edffff	              call sym.ensure_configured	      1038	trailer.c	FUNCTION_48	CALL_1
0x4002c0c	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1040	trailer.c	FUNCTION_48	CALL_2
0x4002c10	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1040	trailer.c	FUNCTION_48	CALL_2
0x4002c14	          0x4889d6	                            mov rsi, rdx	      1040	trailer.c	FUNCTION_48	CALL_2
0x4002c17	          0x4889c7	                            mov rdi, rax	      1040	trailer.c	FUNCTION_48	CALL_2
0x4002c1a	      0xe8acf4ffff	                call sym.read_input_file	      1040	trailer.c	FUNCTION_48	CALL_2
0x4002c1f	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1042	trailer.c	FUNCTION_48	IF_1
0x4002c23	            0x8b00	                    mov eax, dword [rax]	      1042	trailer.c	FUNCTION_48	IF_1
0x4002c25	            0x85c0	                           test eax, eax	      1042	trailer.c	FUNCTION_48	IF_1
0x4002c27	            0x7410	                            je 0x4002c39	      1042	trailer.c	FUNCTION_48	IF_1
0x4002c29	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1043	trailer.c	FUNCTION_48	CALL_3
0x4002c2d	          0x4889c7	                            mov rdi, rax	      1043	trailer.c	FUNCTION_48	CALL_3
0x4002c30	      0xe89bfdffff	       call sym.create_in_place_tempfile	      1043	trailer.c	FUNCTION_48	CALL_3
0x4002c35	        0x488945b8	             mov qword [rbp - 0x48], rax	      1043	trailer.c	FUNCTION_48	CALL_3
0x4002c39	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c3d	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c41	        0x488d55c0	                   lea rdx, [rbp - 0x40]	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c45	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c49	          0x4889c7	                            mov rdi, rax	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c4c	      0xe889faffff	             call sym.process_input_file	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c51	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1046	trailer.c	FUNCTION_48	CALL_4
0x4002c54	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1048	trailer.c	FUNCTION_48	IF_2
0x4002c58	          0x8b400c	              mov eax, dword [rax + 0xc]	      1048	trailer.c	FUNCTION_48	IF_2
0x4002c5b	            0x85c0	                           test eax, eax	      1048	trailer.c	FUNCTION_48	IF_2
0x4002c5d	            0x7536	                           jne 0x4002c95	      1048	trailer.c	FUNCTION_48	IF_2
0x4002c5f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1049	trailer.c	FUNCTION_48	IF_2
0x4002c63	        0x488945d0	             mov qword [rbp - 0x30], rax	      1049	trailer.c	FUNCTION_48	IF_2
0x4002c67	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1049	trailer.c	FUNCTION_48	IF_2
0x4002c6b	        0x488945d8	             mov qword [rbp - 0x28], rax	      1049	trailer.c	FUNCTION_48	IF_2
0x4002c6f	        0x488b5598	             mov rdx, qword [rbp - 0x68]	      1050	trailer.c	FUNCTION_48	IF_2	CALL_5
0x4002c73	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1050	trailer.c	FUNCTION_48	IF_2	CALL_5
0x4002c77	          0x4889d6	                            mov rsi, rdx	      1050	trailer.c	FUNCTION_48	IF_2	CALL_5
0x4002c7a	          0x4889c7	                            mov rdi, rax	      1050	trailer.c	FUNCTION_48	IF_2	CALL_5
0x4002c7d	      0xe8b0f1ffff	      call sym.process_command_line_args	      1050	trailer.c	FUNCTION_48	IF_2	CALL_5
0x4002c82	        0x488d55d0	                   lea rdx, [rbp - 0x30]	      1051	trailer.c	FUNCTION_48	IF_2	CALL_6
0x4002c86	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1051	trailer.c	FUNCTION_48	IF_2	CALL_6
0x4002c8a	          0x4889d6	                            mov rsi, rdx	      1051	trailer.c	FUNCTION_48	IF_2	CALL_6
0x4002c8d	          0x4889c7	                            mov rdi, rax	      1051	trailer.c	FUNCTION_48	IF_2	CALL_6
0x4002c90	      0xe8e2e4ffff	         call sym.process_trailers_lists	      1051	trailer.c	FUNCTION_48	IF_2	CALL_6
0x4002c95	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002c99	        0x488d4dc0	                   lea rcx, [rbp - 0x40]	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002c9d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002ca1	          0x4889ce	                            mov rsi, rcx	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002ca4	          0x4889c7	                            mov rdi, rax	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002ca7	      0xe81addffff	                      call sym.print_all	      1054	trailer.c	FUNCTION_48	CALL_7
0x4002cac	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1056	trailer.c	FUNCTION_48	CALL_8
0x4002cb0	          0x4889c7	                            mov rdi, rax	      1056	trailer.c	FUNCTION_48	CALL_8
0x4002cb3	      0xe8bcfcffff	                       call sym.free_all	      1056	trailer.c	FUNCTION_48	CALL_8
0x4002cb8	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1059	trailer.c	FUNCTION_48	IF_3
0x4002cbc	          0x8b4008	                mov eax, dword [rax + 8]	      1059	trailer.c	FUNCTION_48	IF_3
0x4002cbf	            0x85c0	                           test eax, eax	      1059	trailer.c	FUNCTION_48	IF_3
0x4002cc1	            0x752a	                           jne 0x4002ced	      1059	trailer.c	FUNCTION_48	IF_3
0x4002cc3	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cc7	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cca	            0x4898	                                    cdqe	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ccc	          0x4829c2	                            sub rdx, rax	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ccf	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cd3	          0x8b45b4	             mov eax, dword [rbp - 0x4c]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cd6	            0x4898	                                    cdqe	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cd8	        0x488d3c01	                    lea rdi, [rcx + rax]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002cdc	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ce0	          0x4889c1	                            mov rcx, rax	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ce3	      0xbe01000000	                              mov esi, 1	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ce8	      0xe800000000	                          call 0x4002ced	      1060	trailer.c	FUNCTION_48	CALL_9
0x4002ced	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1062	trailer.c	FUNCTION_48	IF_4
0x4002cf1	            0x8b00	                    mov eax, dword [rax]	      1062	trailer.c	FUNCTION_48	IF_4
0x4002cf3	            0x85c0	                           test eax, eax	      1062	trailer.c	FUNCTION_48	IF_4
0x4002cf5	            0x7436	                            je 0x4002d2d	      1062	trailer.c	FUNCTION_48	IF_4
0x4002cf7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002cfb	          0x4889c6	                            mov rsi, rax	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002cfe	      0xbf00000000	                              mov edi, 0	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002d03	      0xe800000000	                          call 0x4002d08	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002d08	            0x85c0	                           test eax, eax	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002d0a	            0x7421	                            je 0x4002d2d	      1063	trailer.c	FUNCTION_48	IF_4	IF_5	CALL_10
0x4002d0c	      0xbf00000000	                              mov edi, 0	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d11	      0xe8d7d7ffff	                               call sym.	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d16	          0x4889c2	                            mov rdx, rax	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d19	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d1d	          0x4889c6	                            mov rsi, rax	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d20	          0x4889d7	                            mov rdi, rdx	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d23	      0xb800000000	                              mov eax, 0	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d28	      0xe800000000	                          call 0x4002d2d	      1064	trailer.c	FUNCTION_48	IF_4	IF_5
0x4002d2d	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1066	trailer.c	FUNCTION_48	CALL_13
0x4002d31	          0x4889c7	                            mov rdi, rax	      1066	trailer.c	FUNCTION_48	CALL_13
0x4002d34	      0xe800000000	                          call 0x4002d39	      1066	trailer.c	FUNCTION_48	CALL_13
0x4002d39	              0x90	                                     nop	      1067	trailer.c	FUNCTION_48
0x4002d3a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1067	trailer.c	FUNCTION_48
0x4002d3e	    0x644833042528	                xor rax, qword fs:[0x28]	      1067	trailer.c	FUNCTION_48
0x4002d47	            0x7405	                            je 0x4002d4e	      1067	trailer.c	FUNCTION_48
0x4002d49	      0xe800000000	                          call 0x4002d4e	      1067	trailer.c	FUNCTION_48
0x4002d4e	              0xc9	                                   leave	      1067	trailer.c	FUNCTION_48
0x4002d4f	              0xc3	                                     ret	      1067	trailer.c	FUNCTION_48
list_add	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	21
0x40003fb	              0x55	                                push rbp	        53	list.h	FUNCTION_91
0x40003fc	          0x4889e5	                            mov rbp, rsp	        53	list.h	FUNCTION_91
0x40003ff	        0x48897df8	                mov qword [rbp - 8], rdi	        53	list.h	FUNCTION_91
0x4000403	        0x488975f0	             mov qword [rbp - 0x10], rsi	        53	list.h	FUNCTION_91
0x4000407	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        54	list.h	FUNCTION_91
0x400040b	          0x488b00	                    mov rax, qword [rax]	        54	list.h	FUNCTION_91
0x400040e	        0x488b55f8	                mov rdx, qword [rbp - 8]	        54	list.h	FUNCTION_91
0x4000412	        0x48895008	                mov qword [rax + 8], rdx	        54	list.h	FUNCTION_91
0x4000416	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        55	list.h	FUNCTION_91
0x400041a	          0x488b10	                    mov rdx, qword [rax]	        55	list.h	FUNCTION_91
0x400041d	        0x488b45f8	                mov rax, qword [rbp - 8]	        55	list.h	FUNCTION_91
0x4000421	          0x488910	                    mov qword [rax], rdx	        55	list.h	FUNCTION_91
0x4000424	        0x488b45f8	                mov rax, qword [rbp - 8]	        56	list.h	FUNCTION_91
0x4000428	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        56	list.h	FUNCTION_91
0x400042c	        0x48895008	                mov qword [rax + 8], rdx	        56	list.h	FUNCTION_91
0x4000430	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        57	list.h	FUNCTION_91
0x4000434	        0x488b55f8	                mov rdx, qword [rbp - 8]	        57	list.h	FUNCTION_91
0x4000438	          0x488910	                    mov qword [rax], rdx	        57	list.h	FUNCTION_91
0x400043b	              0x90	                                     nop	        58	list.h	FUNCTION_91
0x400043c	              0x5d	                                 pop rbp	        58	list.h	FUNCTION_91
0x400043d	              0xc3	                                     ret	        58	list.h	FUNCTION_91
print_tok_val	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,3:ELSE,1:CALL,5	51
0x400090a	              0x55	                                push rbp	       145	trailer.c	FUNCTION_11
0x400090b	          0x4889e5	                            mov rbp, rsp	       145	trailer.c	FUNCTION_11
0x400090e	        0x4883ec30	                           sub rsp, 0x30	       145	trailer.c	FUNCTION_11
0x4000912	        0x48897de8	             mov qword [rbp - 0x18], rdi	       145	trailer.c	FUNCTION_11
0x4000916	        0x488975e0	             mov qword [rbp - 0x20], rsi	       145	trailer.c	FUNCTION_11
0x400091a	        0x488955d8	             mov qword [rbp - 0x28], rdx	       145	trailer.c	FUNCTION_11
0x400091e	      0x48837de000	               cmp qword [rbp - 0x20], 0	       148	trailer.c	FUNCTION_11	IF_1
0x4000923	            0x751f	                           jne 0x4000944	       148	trailer.c	FUNCTION_11	IF_1
0x4000925	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x4000929	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x400092d	      0xbe00000000	                              mov esi, 0	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x4000932	          0x4889c7	                            mov rdi, rax	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x4000935	      0xb800000000	                              mov eax, 0	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x400093a	      0xe800000000	                          call 0x400093f	       149	trailer.c	FUNCTION_11	IF_1	CALL_1
0x400093f	      0xe980000000	                           jmp 0x40009c4	       150	trailer.c	FUNCTION_11	IF_1
0x4000944	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       153	trailer.c	FUNCTION_11	CALL_2
0x4000948	          0x4889c7	                            mov rdi, rax	       153	trailer.c	FUNCTION_11	CALL_2
0x400094b	      0xe851ffffff	            call sym.last_non_space_char	       153	trailer.c	FUNCTION_11	CALL_2
0x4000950	          0x8845ff	                  mov byte [rbp - 1], al	       153	trailer.c	FUNCTION_11	CALL_2
0x4000953	        0x807dff00	                   cmp byte [rbp - 1], 0	       154	trailer.c	FUNCTION_11	IF_2
0x4000957	            0x746a	                            je 0x40009c3	       154	trailer.c	FUNCTION_11	IF_2
0x4000959	         0xfbe55ff	               movsx edx, byte [rbp - 1]	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x400095d	    0x488b05000000	            mov rax, qword [0x04000964] 	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x4000964	            0x89d6	                            mov esi, edx	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x4000966	          0x4889c7	                            mov rdi, rax	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x4000969	      0xe800000000	                          call 0x400096e	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x400096e	          0x4885c0	                           test rax, rax	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x4000971	            0x7420	                            je 0x4000993	       156	trailer.c	FUNCTION_11	IF_3	CALL_3
0x4000973	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       157	trailer.c	FUNCTION_11	CALL_4
0x4000977	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       157	trailer.c	FUNCTION_11	CALL_4
0x400097b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       157	trailer.c	FUNCTION_11	CALL_4
0x400097f	      0xbe00000000	                              mov esi, 0	       157	trailer.c	FUNCTION_11	CALL_4
0x4000984	          0x4889c7	                            mov rdi, rax	       157	trailer.c	FUNCTION_11	CALL_4
0x4000987	      0xb800000000	                              mov eax, 0	       157	trailer.c	FUNCTION_11	CALL_4
0x400098c	      0xe800000000	                          call 0x4000991	       157	trailer.c	FUNCTION_11	CALL_4
0x4000991	            0xeb31	                           jmp 0x40009c4	       157	trailer.c	FUNCTION_11	CALL_4
0x4000993	    0x488b05000000	            mov rax, qword [0x0400099a] 	       159	trailer.c	FUNCTION_11	CALL_5
0x400099a	           0xfb600	                   movzx eax, byte [rax]	       159	trailer.c	FUNCTION_11	CALL_5
0x400099d	           0xfbec8	                           movsx ecx, al	       159	trailer.c	FUNCTION_11	CALL_5
0x40009a0	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       159	trailer.c	FUNCTION_11	CALL_5
0x40009a4	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       159	trailer.c	FUNCTION_11	CALL_5
0x40009a8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       159	trailer.c	FUNCTION_11	CALL_5
0x40009ac	          0x4989f0	                             mov r8, rsi	       159	trailer.c	FUNCTION_11	CALL_5
0x40009af	      0xbe00000000	                              mov esi, 0	       159	trailer.c	FUNCTION_11	CALL_5
0x40009b4	          0x4889c7	                            mov rdi, rax	       159	trailer.c	FUNCTION_11	CALL_5
0x40009b7	      0xb800000000	                              mov eax, 0	       159	trailer.c	FUNCTION_11	CALL_5
0x40009bc	      0xe800000000	                          call 0x40009c1	       159	trailer.c	FUNCTION_11	CALL_5
0x40009c1	            0xeb01	                           jmp 0x40009c4	       159	trailer.c	FUNCTION_11	CALL_5
0x40009c3	              0x90	                                     nop	       155	trailer.c	FUNCTION_11	IF_2
0x40009c4	              0xc9	                                   leave	       160	trailer.c	FUNCTION_11
0x40009c5	              0xc3	                                     ret	       160	trailer.c	FUNCTION_11
unfold_value	WHILE,2:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,1:CALL,6	78
0x40025aa	              0x55	                                push rbp	       916	trailer.c	FUNCTION_44
0x40025ab	          0x4889e5	                            mov rbp, rsp	       916	trailer.c	FUNCTION_44
0x40025ae	        0x4883ec40	                           sub rsp, 0x40	       916	trailer.c	FUNCTION_44
0x40025b2	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       916	trailer.c	FUNCTION_44
0x40025b6	    0x64488b042528	                mov rax, qword fs:[0x28]	       916	trailer.c	FUNCTION_44
0x40025bf	        0x488945f8	                mov qword [rbp - 8], rax	       916	trailer.c	FUNCTION_44
0x40025c3	            0x31c0	                            xor eax, eax	       916	trailer.c	FUNCTION_44
0x40025c5	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       917	trailer.c	FUNCTION_44
0x40025cd	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       917	trailer.c	FUNCTION_44
0x40025d5	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       917	trailer.c	FUNCTION_44
0x40025dd	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       920	trailer.c	FUNCTION_44	CALL_1
0x40025e1	        0x488b5008	                mov rdx, qword [rax + 8]	       920	trailer.c	FUNCTION_44	CALL_1
0x40025e5	        0x488d45e0	                   lea rax, [rbp - 0x20]	       920	trailer.c	FUNCTION_44	CALL_1
0x40025e9	          0x4889d6	                            mov rsi, rdx	       920	trailer.c	FUNCTION_44	CALL_1
0x40025ec	          0x4889c7	                            mov rdi, rax	       920	trailer.c	FUNCTION_44	CALL_1
0x40025ef	      0xe800000000	                          call 0x40025f4	       920	trailer.c	FUNCTION_44	CALL_1
0x40025f4	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       921	trailer.c	FUNCTION_44
0x40025fc	      0xe985000000	                           jmp 0x4002686	       922	trailer.c	FUNCTION_44	WHILE_1
0x4002601	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       923	trailer.c	FUNCTION_44	WHILE_1
0x4002605	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       923	trailer.c	FUNCTION_44	WHILE_1
0x4002609	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       923	trailer.c	FUNCTION_44	WHILE_1
0x400260d	        0x488d5001	                      lea rdx, [rax + 1]	       923	trailer.c	FUNCTION_44	WHILE_1
0x4002611	        0x488955d8	             mov qword [rbp - 0x28], rdx	       923	trailer.c	FUNCTION_44	WHILE_1
0x4002615	          0x4801c8	                            add rax, rcx	       923	trailer.c	FUNCTION_44	WHILE_1
0x4002618	           0xfb600	                   movzx eax, byte [rax]	       923	trailer.c	FUNCTION_44	WHILE_1
0x400261b	          0x8845d7	               mov byte [rbp - 0x29], al	       923	trailer.c	FUNCTION_44	WHILE_1
0x400261e	        0x807dd70a	              cmp byte [rbp - 0x29], 0xa	       924	trailer.c	FUNCTION_44	WHILE_1	IF_1
0x4002622	            0x7550	                           jne 0x4002674	       924	trailer.c	FUNCTION_44	WHILE_1	IF_1
0x4002624	            0xeb05	                           jmp 0x400262b	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002626	      0x488345d801	               add qword [rbp - 0x28], 1	       927	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400262b	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400262f	        0x488b4008	                mov rax, qword [rax + 8]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002633	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002637	            0x7628	                           jbe 0x4002661	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002639	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400263d	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002641	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002645	          0x4801d0	                            add rax, rdx	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002648	           0xfb600	                   movzx eax, byte [rax]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400264b	           0xfb6c0	                           movzx eax, al	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400264e	            0x4898	                                    cdqe	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002650	     0xfb680000000	                   movzx eax, byte [rax]	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002657	           0xfb6c0	                           movzx eax, al	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400265a	          0x83e001	                              and eax, 1	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400265d	            0x85c0	                           test eax, eax	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x400265f	            0x75c5	                           jne 0x4002626	       926	trailer.c	FUNCTION_44	WHILE_1	IF_1	WHILE_2
0x4002661	        0x488d45e0	                   lea rax, [rbp - 0x20]	       928	trailer.c	FUNCTION_44	WHILE_1	IF_1	CALL_2
0x4002665	      0xbe20000000	                           mov esi, 0x20	       928	trailer.c	FUNCTION_44	WHILE_1	IF_1	CALL_2
0x400266a	          0x4889c7	                            mov rdi, rax	       928	trailer.c	FUNCTION_44	WHILE_1	IF_1	CALL_2
0x400266d	      0xe88edcffff	                   call sym.strbuf_addch	       928	trailer.c	FUNCTION_44	WHILE_1	IF_1	CALL_2
0x4002672	            0xeb12	                           jmp 0x4002686	       928	trailer.c	FUNCTION_44	WHILE_1	IF_1	CALL_2
0x4002674	         0xfbe55d7	            movsx edx, byte [rbp - 0x29]	       930	trailer.c	FUNCTION_44	WHILE_1	ELSE_1	CALL_3
0x4002678	        0x488d45e0	                   lea rax, [rbp - 0x20]	       930	trailer.c	FUNCTION_44	WHILE_1	ELSE_1	CALL_3
0x400267c	            0x89d6	                            mov esi, edx	       930	trailer.c	FUNCTION_44	WHILE_1	ELSE_1	CALL_3
0x400267e	          0x4889c7	                            mov rdi, rax	       930	trailer.c	FUNCTION_44	WHILE_1	ELSE_1	CALL_3
0x4002681	      0xe87adcffff	                   call sym.strbuf_addch	       930	trailer.c	FUNCTION_44	WHILE_1	ELSE_1	CALL_3
0x4002686	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       922	trailer.c	FUNCTION_44	WHILE_1
0x400268a	        0x488b4008	                mov rax, qword [rax + 8]	       922	trailer.c	FUNCTION_44	WHILE_1
0x400268e	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       922	trailer.c	FUNCTION_44	WHILE_1
0x4002692	     0xf8769ffffff	                            ja 0x4002601	       922	trailer.c	FUNCTION_44	WHILE_1
0x4002698	        0x488d45e0	                   lea rax, [rbp - 0x20]	       935	trailer.c	FUNCTION_44	CALL_4
0x400269c	          0x4889c7	                            mov rdi, rax	       935	trailer.c	FUNCTION_44	CALL_4
0x400269f	      0xe800000000	                          call 0x40026a4	       935	trailer.c	FUNCTION_44	CALL_4
0x40026a4	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       938	trailer.c	FUNCTION_44	CALL_5
0x40026a8	        0x488d45e0	                   lea rax, [rbp - 0x20]	       938	trailer.c	FUNCTION_44	CALL_5
0x40026ac	          0x4889d6	                            mov rsi, rdx	       938	trailer.c	FUNCTION_44	CALL_5
0x40026af	          0x4889c7	                            mov rdi, rax	       938	trailer.c	FUNCTION_44	CALL_5
0x40026b2	      0xe8e5daffff	                    call sym.strbuf_swap	       938	trailer.c	FUNCTION_44	CALL_5
0x40026b7	        0x488d45e0	                   lea rax, [rbp - 0x20]	       939	trailer.c	FUNCTION_44	CALL_6
0x40026bb	          0x4889c7	                            mov rdi, rax	       939	trailer.c	FUNCTION_44	CALL_6
0x40026be	      0xe800000000	                          call 0x40026c3	       939	trailer.c	FUNCTION_44	CALL_6
0x40026c3	              0x90	                                     nop	       940	trailer.c	FUNCTION_44
0x40026c4	        0x488b45f8	                mov rax, qword [rbp - 8]	       940	trailer.c	FUNCTION_44
0x40026c8	    0x644833042528	                xor rax, qword fs:[0x28]	       940	trailer.c	FUNCTION_44
0x40026d1	            0x7405	                            je 0x40026d8	       940	trailer.c	FUNCTION_44
0x40026d3	      0xe800000000	                          call 0x40026d8	       940	trailer.c	FUNCTION_44
0x40026d8	              0xc9	                                   leave	       940	trailer.c	FUNCTION_44
0x40026d9	              0xc3	                                     ret	       940	trailer.c	FUNCTION_44
capture_command	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1	21
0x4000519	              0x55	                                push rbp	       111	run-command.h	FUNCTION_105
0x400051a	          0x4889e5	                            mov rbp, rsp	       111	run-command.h	FUNCTION_105
0x400051d	        0x4883ec20	                           sub rsp, 0x20	       111	run-command.h	FUNCTION_105
0x4000521	        0x48897df8	                mov qword [rbp - 8], rdi	       111	run-command.h	FUNCTION_105
0x4000525	        0x488975f0	             mov qword [rbp - 0x10], rsi	       111	run-command.h	FUNCTION_105
0x4000529	        0x488955e8	             mov qword [rbp - 0x18], rdx	       111	run-command.h	FUNCTION_105
0x400052d	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       112	run-command.h	FUNCTION_105	CALL_1
0x4000531	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       112	run-command.h	FUNCTION_105	CALL_1
0x4000535	        0x488b45f8	                mov rax, qword [rbp - 8]	       112	run-command.h	FUNCTION_105	CALL_1
0x4000539	        0x4883ec08	                              sub rsp, 8	       112	run-command.h	FUNCTION_105	CALL_1
0x400053d	            0x6a00	                                  push 0	       112	run-command.h	FUNCTION_105	CALL_1
0x400053f	    0x41b900000000	                              mov r9d, 0	       112	run-command.h	FUNCTION_105	CALL_1
0x4000545	          0x4989c8	                             mov r8, rcx	       112	run-command.h	FUNCTION_105	CALL_1
0x4000548	          0x4889d1	                            mov rcx, rdx	       112	run-command.h	FUNCTION_105	CALL_1
0x400054b	      0xba00000000	                              mov edx, 0	       112	run-command.h	FUNCTION_105	CALL_1
0x4000550	      0xbe00000000	                              mov esi, 0	       112	run-command.h	FUNCTION_105	CALL_1
0x4000555	          0x4889c7	                            mov rdi, rax	       112	run-command.h	FUNCTION_105	CALL_1
0x4000558	      0xe800000000	                          call 0x400055d	       112	run-command.h	FUNCTION_105	CALL_1
0x400055d	        0x4883c410	                           add rsp, 0x10	       112	run-command.h	FUNCTION_105	CALL_1
0x4000561	              0xc9	                                   leave	       113	run-command.h	FUNCTION_105
0x4000562	              0xc3	                                     ret	       113	run-command.h	FUNCTION_105
find_trailer_start	WHILE,0:FOR,3:SWITCH,0:functions,0:DO,0:IF,12:ELSE,3:CALL,10	196
0x4002263	              0x55	                                push rbp	       808	trailer.c	FUNCTION_41
0x4002264	          0x4889e5	                            mov rbp, rsp	       808	trailer.c	FUNCTION_41
0x4002267	        0x4883ec60	                           sub rsp, 0x60	       808	trailer.c	FUNCTION_41
0x400226b	        0x48897da8	             mov qword [rbp - 0x58], rdi	       808	trailer.c	FUNCTION_41
0x400226f	        0x488975a0	             mov qword [rbp - 0x60], rsi	       808	trailer.c	FUNCTION_41
0x4002273	    0xc745bc010000	               mov dword [rbp - 0x44], 1	       810	trailer.c	FUNCTION_41
0x400227a	    0xc745c0000000	               mov dword [rbp - 0x40], 0	       811	trailer.c	FUNCTION_41
0x4002281	    0xc745c4000000	               mov dword [rbp - 0x3c], 0	       811	trailer.c	FUNCTION_41
0x4002288	    0xc745c8000000	               mov dword [rbp - 0x38], 0	       811	trailer.c	FUNCTION_41
0x400228f	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       819	trailer.c	FUNCTION_41
0x4002296	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x400229a	        0x488945d8	             mov qword [rbp - 0x28], rax	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x400229e	            0xeb35	                           jmp 0x40022d5	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022a0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       823	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022a4	           0xfb610	                   movzx edx, byte [rax]	       823	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022a7	     0xfb605000000	           movzx eax, byte [0x040022ae] 	       823	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022ae	            0x38c2	                              cmp dl, al	       823	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022b0	            0x7412	                            je 0x40022c4	       823	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022b2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022b6	          0x4889c7	                            mov rdi, rax	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022b9	      0xe844e4ffff	                  call sym.is_blank_line	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022be	            0x85c0	                           test eax, eax	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022c0	            0x7526	                           jne 0x40022e8	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022c2	            0xeb01	                           jmp 0x40022c5	       825	trailer.c	FUNCTION_41	FOR_1	IF_2	CALL_2
0x40022c4	              0x90	                                     nop	       824	trailer.c	FUNCTION_41	FOR_1	IF_1
0x40022c5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022c9	          0x4889c7	                            mov rdi, rax	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022cc	      0xe892feffff	                      call sym.next_line	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022d1	        0x488945d8	             mov qword [rbp - 0x28], rax	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022d5	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022d9	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022dd	          0x4801d0	                            add rax, rdx	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022e0	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022e4	            0x77ba	                            ja 0x40022a0	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022e6	            0xeb01	                           jmp 0x40022e9	       822	trailer.c	FUNCTION_41	FOR_1	CALL_1
0x40022e8	              0x90	                                     nop	       826	trailer.c	FUNCTION_41	FOR_1	IF_2
0x40022e9	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       828	trailer.c	FUNCTION_41
0x40022ed	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       828	trailer.c	FUNCTION_41
0x40022f1	          0x4829c2	                            sub rdx, rax	       828	trailer.c	FUNCTION_41
0x40022f4	          0x4889d0	                            mov rax, rdx	       828	trailer.c	FUNCTION_41
0x40022f7	          0x8945d0	             mov dword [rbp - 0x30], eax	       828	trailer.c	FUNCTION_41
0x40022fa	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x40022fe	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002302	          0x4889d6	                            mov rsi, rdx	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002305	          0x4889c7	                            mov rdi, rax	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002308	      0xe88ffeffff	                      call sym.last_line	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x400230d	          0x8945b8	             mov dword [rbp - 0x48], eax	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002310	      0xe904020000	                           jmp 0x4002519	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002315	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       839	trailer.c	FUNCTION_41	FOR_2
0x4002318	          0x4863d0	                         movsxd rdx, eax	       839	trailer.c	FUNCTION_41	FOR_2
0x400231b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       839	trailer.c	FUNCTION_41	FOR_2
0x400231f	          0x4801d0	                            add rax, rdx	       839	trailer.c	FUNCTION_41	FOR_2
0x4002322	        0x488945f0	             mov qword [rbp - 0x10], rax	       839	trailer.c	FUNCTION_41	FOR_2
0x4002326	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       843	trailer.c	FUNCTION_41	FOR_2	IF_3
0x400232a	           0xfb610	                   movzx edx, byte [rax]	       843	trailer.c	FUNCTION_41	FOR_2	IF_3
0x400232d	     0xfb605000000	           movzx eax, byte [0x04002334] 	       843	trailer.c	FUNCTION_41	FOR_2	IF_3
0x4002334	            0x38c2	                              cmp dl, al	       843	trailer.c	FUNCTION_41	FOR_2	IF_3
0x4002336	            0x7512	                           jne 0x400234a	       843	trailer.c	FUNCTION_41	FOR_2	IF_3
0x4002338	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       844	trailer.c	FUNCTION_41	FOR_2	IF_3
0x400233b	           0x145c8	             add dword [rbp - 0x38], eax	       844	trailer.c	FUNCTION_41	FOR_2	IF_3
0x400233e	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       845	trailer.c	FUNCTION_41	FOR_2	IF_3
0x4002345	      0xe9b7010000	                           jmp 0x4002501	       846	trailer.c	FUNCTION_41	FOR_2	IF_3
0x400234a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       848	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_5
0x400234e	          0x4889c7	                            mov rdi, rax	       848	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_5
0x4002351	      0xe8ace3ffff	                  call sym.is_blank_line	       848	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_5
0x4002356	            0x85c0	                           test eax, eax	       848	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_5
0x4002358	            0x7475	                            je 0x40023cf	       848	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_5
0x400235a	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       849	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_5
0x400235e	     0xf8599010000	                           jne 0x40024fd	       849	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_5
0x4002364	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       851	trailer.c	FUNCTION_41	FOR_2	IF_4
0x4002367	           0x145c8	             add dword [rbp - 0x38], eax	       851	trailer.c	FUNCTION_41	FOR_2	IF_4
0x400236a	        0x837dc000	               cmp dword [rbp - 0x40], 0	       852	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x400236e	            0x742c	                            je 0x400239c	       852	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x4002370	          0x8b55c4	             mov edx, dword [rbp - 0x3c]	       853	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x4002373	            0x89d0	                            mov eax, edx	       853	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x4002375	             0x1c0	                            add eax, eax	       853	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x4002377	             0x1d0	                            add eax, edx	       853	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x4002379	          0x3b45c8	             cmp eax, dword [rbp - 0x38]	       852	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x400237c	            0x7c1e	                            jl 0x400239c	       852	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_6
0x400237e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x4002382	          0x4889c7	                            mov rdi, rax	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x4002385	      0xe8d9fdffff	                      call sym.next_line	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x400238a	          0x4889c2	                            mov rdx, rax	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x400238d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x4002391	          0x4829c2	                            sub rdx, rax	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x4002394	          0x4889d0	                            mov rax, rdx	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x4002397	      0xe98d010000	                           jmp 0x4002529	       854	trailer.c	FUNCTION_41	FOR_2	IF_4	CALL_6
0x400239c	        0x837dc400	               cmp dword [rbp - 0x3c], 0	       855	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023a0	            0x7424	                            je 0x40023c6	       855	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023a2	        0x837dc800	               cmp dword [rbp - 0x38], 0	       855	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023a6	            0x751e	                           jne 0x40023c6	       855	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023a8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023ac	          0x4889c7	                            mov rdi, rax	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023af	      0xe8affdffff	                      call sym.next_line	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023b4	          0x4889c2	                            mov rdx, rax	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023b7	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023bb	          0x4829c2	                            sub rdx, rax	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023be	          0x4889d0	                            mov rax, rdx	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023c1	      0xe963010000	                           jmp 0x4002529	       856	trailer.c	FUNCTION_41	FOR_2	IF_4	ELSE_1	IF_7
0x40023c6	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       857	trailer.c	FUNCTION_41	FOR_2	IF_4
0x40023ca	      0xe95a010000	                           jmp 0x4002529	       857	trailer.c	FUNCTION_41	FOR_2	IF_4
0x40023cf	    0xc745bc000000	               mov dword [rbp - 0x44], 0	       859	trailer.c	FUNCTION_41	FOR_2
0x40023d6	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x40023de	            0xeb36	                           jmp 0x4002416	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x40023e0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023e4	          0x488b10	                    mov rdx, qword [rax]	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023e7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023eb	          0x4889d6	                            mov rsi, rdx	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023ee	          0x4889c7	                            mov rdi, rax	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023f1	      0xe800000000	                          call 0x40023f6	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023f6	            0x85c0	                           test eax, eax	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023f8	            0x7417	                            je 0x4002411	       862	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8	CALL_8
0x40023fa	        0x8345c401	               add dword [rbp - 0x3c], 1	       863	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8
0x40023fe	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       864	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8
0x4002405	    0xc745c0010000	               mov dword [rbp - 0x40], 1	       865	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8
0x400240c	      0xe9f0000000	                           jmp 0x4002501	       866	trailer.c	FUNCTION_41	FOR_2	FOR_3	IF_8
0x4002411	      0x488345e008	               add qword [rbp - 0x20], 8	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x4002416	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x400241a	          0x488b00	                    mov rax, qword [rax]	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x400241d	          0x4885c0	                           test rax, rax	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x4002420	            0x75be	                           jne 0x40023e0	       861	trailer.c	FUNCTION_41	FOR_2	FOR_3
0x4002422	    0x488b15000000	            mov rdx, qword [0x04002429] 	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x4002429	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x400242d	          0x4889d6	                            mov rsi, rdx	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x4002430	          0x4889c7	                            mov rdi, rax	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x4002433	      0xe8a2f6ffff	                 call sym.find_separator	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x4002438	          0x8945d4	             mov dword [rbp - 0x2c], eax	       870	trailer.c	FUNCTION_41	FOR_2	CALL_9
0x400243b	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400243f	     0xf8e82000000	                           jle 0x40024c7	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002445	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002449	           0xfb600	                   movzx eax, byte [rax]	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400244c	           0xfb6c0	                           movzx eax, al	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400244f	            0x4898	                                    cdqe	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002451	     0xfb680000000	                   movzx eax, byte [rax]	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002458	           0xfb6c0	                           movzx eax, al	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400245b	          0x83e001	                              and eax, 1	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400245e	            0x85c0	                           test eax, eax	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002460	            0x7565	                           jne 0x40024c7	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002462	        0x8345c401	               add dword [rbp - 0x3c], 1	       874	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002466	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       875	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400246d	        0x837dc000	               cmp dword [rbp - 0x40], 0	       876	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_10
0x4002471	     0xf8589000000	                           jne 0x4002500	       876	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_10
0x4002477	    0x488b05000000	            mov rax, qword [0x0400247e] 	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400247e	        0x488945e8	             mov qword [rbp - 0x18], rax	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002482	            0xeb37	                           jmp 0x40024bb	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002484	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       880	trailer.c	FUNCTION_41	FOR_2	IF_9
0x4002488	        0x488945f8	                mov qword [rbp - 8], rax	       880	trailer.c	FUNCTION_41	FOR_2	IF_9
0x400248c	          0x8b55d4	             mov edx, dword [rbp - 0x2c]	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x400248f	        0x488b4df8	                mov rcx, qword [rbp - 8]	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x4002493	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x4002497	          0x4889ce	                            mov rsi, rcx	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x400249a	          0x4889c7	                            mov rdi, rax	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x400249d	      0xe8c0f5ffff	             call sym.token_matches_item	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x40024a2	            0x85c0	                           test eax, eax	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x40024a4	            0x740a	                            je 0x40024b0	       881	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11	CALL_10
0x40024a6	    0xc745c0010000	               mov dword [rbp - 0x40], 1	       883	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11
0x40024ad	              0x90	                                     nop	       884	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_11
0x40024ae	            0xeb51	                           jmp 0x4002501	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024b0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024b4	          0x488b00	                    mov rax, qword [rax]	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024b7	        0x488945e8	             mov qword [rbp - 0x18], rax	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024bb	    0x48817de80000	               cmp qword [rbp - 0x18], 0	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024c3	            0x75bf	                           jne 0x4002484	       878	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024c5	            0xeb3a	                           jmp 0x4002501	       871	trailer.c	FUNCTION_41	FOR_2	IF_9
0x40024c7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024cb	           0xfb600	                   movzx eax, byte [rax]	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024ce	           0xfb6c0	                           movzx eax, al	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024d1	            0x4898	                                    cdqe	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024d3	     0xfb680000000	                   movzx eax, byte [rax]	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024da	           0xfb6c0	                           movzx eax, al	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024dd	          0x83e001	                              and eax, 1	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024e0	            0x85c0	                           test eax, eax	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024e2	            0x7406	                            je 0x40024ea	       887	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024e4	        0x8345cc01	               add dword [rbp - 0x34], 1	       888	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024e8	            0xeb17	                           jmp 0x4002501	       888	trailer.c	FUNCTION_41	FOR_2	ELSE_2	IF_12
0x40024ea	        0x8345c801	               add dword [rbp - 0x38], 1	       890	trailer.c	FUNCTION_41	FOR_2	ELSE_3
0x40024ee	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       891	trailer.c	FUNCTION_41	FOR_2	ELSE_3
0x40024f1	           0x145c8	             add dword [rbp - 0x38], eax	       891	trailer.c	FUNCTION_41	FOR_2	ELSE_3
0x40024f4	    0xc745cc000000	               mov dword [rbp - 0x34], 0	       892	trailer.c	FUNCTION_41	FOR_2	ELSE_3
0x40024fb	            0xeb04	                           jmp 0x4002501	       892	trailer.c	FUNCTION_41	FOR_2	ELSE_3
0x40024fd	              0x90	                                     nop	       850	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_5
0x40024fe	            0xeb01	                           jmp 0x4002501	       850	trailer.c	FUNCTION_41	FOR_2	IF_4	IF_5
0x4002500	              0x90	                                     nop	       877	trailer.c	FUNCTION_41	FOR_2	IF_9	IF_10
0x4002501	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x4002504	          0x4863d0	                         movsxd rdx, eax	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x4002507	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x400250b	          0x4889d6	                            mov rsi, rdx	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x400250e	          0x4889c7	                            mov rdi, rax	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x4002511	      0xe886fcffff	                      call sym.last_line	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x4002516	          0x8945b8	             mov dword [rbp - 0x48], eax	       838	trailer.c	FUNCTION_41	FOR_2	CALL_4
0x4002519	          0x8b45b8	             mov eax, dword [rbp - 0x48]	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x400251c	          0x3b45d0	             cmp eax, dword [rbp - 0x30]	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x400251f	     0xf8df0fdffff	                           jge 0x4002315	       836	trailer.c	FUNCTION_41	FOR_2	CALL_3
0x4002525	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       898	trailer.c	FUNCTION_41
0x4002529	              0xc9	                                   leave	       899	trailer.c	FUNCTION_41
0x400252a	              0xc3	                                     ret	       899	trailer.c	FUNCTION_41
token_len_without_separator	WHILE,1:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	23
0x4000584	              0x55	                                push rbp	        73	trailer.c	FUNCTION_2
0x4000585	          0x4889e5	                            mov rbp, rsp	        73	trailer.c	FUNCTION_2
0x4000588	        0x48897df8	                mov qword [rbp - 8], rdi	        73	trailer.c	FUNCTION_2
0x400058c	        0x488975f0	             mov qword [rbp - 0x10], rsi	        73	trailer.c	FUNCTION_2
0x4000590	            0xeb05	                           jmp 0x4000597	        74	trailer.c	FUNCTION_2	WHILE_1
0x4000592	      0x48836df001	               sub qword [rbp - 0x10], 1	        75	trailer.c	FUNCTION_2	WHILE_1
0x4000597	      0x48837df000	               cmp qword [rbp - 0x10], 0	        74	trailer.c	FUNCTION_2	WHILE_1
0x400059c	            0x7428	                            je 0x40005c6	        74	trailer.c	FUNCTION_2	WHILE_1
0x400059e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005a2	        0x488d50ff	                      lea rdx, [rax - 1]	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005a6	        0x488b45f8	                mov rax, qword [rbp - 8]	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005aa	          0x4801d0	                            add rax, rdx	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005ad	           0xfb600	                   movzx eax, byte [rax]	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005b0	           0xfb6c0	                           movzx eax, al	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005b3	            0x4898	                                    cdqe	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005b5	     0xfb680000000	                   movzx eax, byte [rax]	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005bc	           0xfb6c0	                           movzx eax, al	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005bf	          0x83e006	                              and eax, 6	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005c2	            0x85c0	                           test eax, eax	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005c4	            0x74cc	                            je 0x4000592	        74	trailer.c	FUNCTION_2	WHILE_1
0x40005c6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        76	trailer.c	FUNCTION_2
0x40005ca	              0x5d	                                 pop rbp	        77	trailer.c	FUNCTION_2
0x40005cb	              0xc3	                                     ret	        77	trailer.c	FUNCTION_2
process_command_line_args	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,2:ELSE,1:CALL,15	142
0x4001e32	              0x55	                                push rbp	       697	trailer.c	FUNCTION_36
0x4001e33	          0x4889e5	                            mov rbp, rsp	       697	trailer.c	FUNCTION_36
0x4001e36	            0x4154	                                push r12	       697	trailer.c	FUNCTION_36
0x4001e38	              0x53	                                push rbx	       697	trailer.c	FUNCTION_36
0x4001e39	    0x4881eca00000	                           sub rsp, 0xa0	       697	trailer.c	FUNCTION_36
0x4001e40	    0x4889bd58ffff	             mov qword [rbp - 0xa8], rdi	       697	trailer.c	FUNCTION_36
0x4001e47	    0x4889b550ffff	             mov qword [rbp - 0xb0], rsi	       697	trailer.c	FUNCTION_36
0x4001e4e	    0x64488b042528	                mov rax, qword fs:[0x28]	       697	trailer.c	FUNCTION_36
0x4001e57	        0x488945e8	             mov qword [rbp - 0x18], rax	       697	trailer.c	FUNCTION_36
0x4001e5b	            0x31c0	                            xor eax, eax	       697	trailer.c	FUNCTION_36
0x4001e5d	    0x48c745900000	               mov qword [rbp - 0x70], 0	       699	trailer.c	FUNCTION_36
0x4001e65	    0x48c745980000	               mov qword [rbp - 0x68], 0	       699	trailer.c	FUNCTION_36
0x4001e6d	    0x48c745a00000	               mov qword [rbp - 0x60], 0	       699	trailer.c	FUNCTION_36
0x4001e75	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       700	trailer.c	FUNCTION_36
0x4001e7d	    0x48c745b80000	               mov qword [rbp - 0x48], 0	       700	trailer.c	FUNCTION_36
0x4001e85	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       700	trailer.c	FUNCTION_36
0x4001e8d	    0x488b05000000	            mov rax, qword [0x04001e94] 	       708	trailer.c	FUNCTION_36	CALL_1
0x4001e94	          0x4889c6	                            mov rsi, rax	       708	trailer.c	FUNCTION_36	CALL_1
0x4001e97	      0xbf00000000	                              mov edi, 0	       708	trailer.c	FUNCTION_36	CALL_1
0x4001e9c	      0xb800000000	                              mov eax, 0	       708	trailer.c	FUNCTION_36	CALL_1
0x4001ea1	      0xe800000000	                          call 0x4001ea6	       708	trailer.c	FUNCTION_36	CALL_1
0x4001ea6	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       708	trailer.c	FUNCTION_36	CALL_1
0x4001ead	    0x488b05000000	            mov rax, qword [0x04001eb4] 	       711	trailer.c	FUNCTION_36
0x4001eb4	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       711	trailer.c	FUNCTION_36
0x4001ebb	            0xeb75	                           jmp 0x4001f32	       711	trailer.c	FUNCTION_36
0x4001ebd	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       712	trailer.c	FUNCTION_36
0x4001ec4	        0x48894580	             mov qword [rbp - 0x80], rax	       712	trailer.c	FUNCTION_36
0x4001ec8	        0x488b4580	             mov rax, qword [rbp - 0x80]	       713	trailer.c	FUNCTION_36	IF_1
0x4001ecc	        0x488b4030	            mov rax, qword [rax + 0x30] 	       713	trailer.c	FUNCTION_36	IF_1
0x4001ed0	          0x4885c0	                           test rax, rax	       713	trailer.c	FUNCTION_36	IF_1
0x4001ed3	            0x744c	                            je 0x4001f21	       713	trailer.c	FUNCTION_36	IF_1
0x4001ed5	        0x488b4580	             mov rax, qword [rbp - 0x80]	       717	trailer.c	FUNCTION_36	IF_1
0x4001ed9	        0x488d5820	                   lea rbx, [rax + 0x20]	       717	trailer.c	FUNCTION_36	IF_1
0x4001edd	      0xbf00000000	                              mov edi, 0	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001ee2	      0xe800000000	                          call 0x4001ee7	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001ee7	          0x4989c4	                            mov r12, rax	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001eea	        0x488b4580	             mov rax, qword [rbp - 0x80]	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001eee	      0xbe00000000	                              mov esi, 0	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001ef3	          0x4889c7	                            mov rdi, rax	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001ef6	      0xe82dfbffff	                call sym.token_from_item	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001efb	          0x4889c7	                            mov rdi, rax	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001efe	      0xe800000000	                          call 0x4001f03	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f03	          0x4889c6	                            mov rsi, rax	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f06	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f0d	    0x41b800000000	                              mov r8d, 0	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f13	          0x4889d9	                            mov rcx, rbx	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f16	          0x4c89e2	                            mov rdx, r12	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f19	          0x4889c7	                            mov rdi, rax	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f1c	      0xe84bfeffff	                   call sym.add_arg_item	       714	trailer.c	FUNCTION_36	IF_1	CALL_2
0x4001f21	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       711	trailer.c	FUNCTION_36
0x4001f28	          0x488b00	                    mov rax, qword [rax]	       711	trailer.c	FUNCTION_36
0x4001f2b	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       711	trailer.c	FUNCTION_36
0x4001f32	    0x4881bd70ffff	               cmp qword [rbp - 0x90], 0	       711	trailer.c	FUNCTION_36
0x4001f3d	     0xf857affffff	                           jne 0x4001ebd	       711	trailer.c	FUNCTION_36
0x4001f43	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       721	trailer.c	FUNCTION_36
0x4001f4a	          0x488b00	                    mov rax, qword [rax]	       721	trailer.c	FUNCTION_36
0x4001f4d	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       721	trailer.c	FUNCTION_36
0x4001f54	      0xe92e010000	                           jmp 0x4002087	       721	trailer.c	FUNCTION_36
0x4001f59	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       722	trailer.c	FUNCTION_36
0x4001f60	        0x48894588	             mov qword [rbp - 0x78], rax	       722	trailer.c	FUNCTION_36
0x4001f64	        0x488b4588	             mov rax, qword [rbp - 0x78]	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f68	        0x488b4010	            mov rax, qword [rax + 0x10] 	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f6c	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f73	          0x4889d6	                            mov rsi, rdx	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f76	          0x4889c7	                            mov rdi, rax	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f79	      0xe85cfbffff	                 call sym.find_separator	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f7e	    0x898564ffffff	             mov dword [rbp - 0x9c], eax	       724	trailer.c	FUNCTION_36	CALL_6
0x4001f84	    0x83bd64ffffff	               cmp dword [rbp - 0x9c], 0	       726	trailer.c	FUNCTION_36	IF_2
0x4001f8b	            0x7576	                           jne 0x4002003	       726	trailer.c	FUNCTION_36	IF_2
0x4001f8d	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       727	trailer.c	FUNCTION_36	IF_2
0x4001f95	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       727	trailer.c	FUNCTION_36	IF_2
0x4001f9d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       727	trailer.c	FUNCTION_36	IF_2
0x4001fa5	        0x488b4588	             mov rax, qword [rbp - 0x78]	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fa9	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fad	        0x488d45d0	                   lea rax, [rbp - 0x30]	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fb1	          0x4889d6	                            mov rsi, rdx	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fb4	          0x4889c7	                            mov rdi, rax	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fb7	      0xe8b2e3ffff	                  call sym.strbuf_addstr	       728	trailer.c	FUNCTION_36	IF_2	CALL_7
0x4001fbc	        0x488d45d0	                   lea rax, [rbp - 0x30]	       729	trailer.c	FUNCTION_36	IF_2	CALL_8
0x4001fc0	          0x4889c7	                            mov rdi, rax	       729	trailer.c	FUNCTION_36	IF_2	CALL_8
0x4001fc3	      0xe800000000	                          call 0x4001fc8	       729	trailer.c	FUNCTION_36	IF_2	CALL_8
0x4001fc8	        0x488b5de0	             mov rbx, qword [rbp - 0x20]	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fcc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fd0	          0x4189c4	                           mov r12d, eax	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fd3	      0xbf00000000	                              mov edi, 0	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fd8	      0xe810e5ffff	                               call sym.	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fdd	          0x4889da	                            mov rdx, rbx	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fe0	          0x4489e6	                           mov esi, r12d	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fe3	          0x4889c7	                            mov rdi, rax	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001fe6	      0xb800000000	                              mov eax, 0	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001feb	      0xe800000000	                          call 0x4001ff0	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001ff0	      0xe84be0ffff	                    call sym.const_error	       730	trailer.c	FUNCTION_36	IF_2	CALL_9
0x4001ff5	        0x488d45d0	                   lea rax, [rbp - 0x30]	       732	trailer.c	FUNCTION_36	IF_2	CALL_10
0x4001ff9	          0x4889c7	                            mov rdi, rax	       732	trailer.c	FUNCTION_36	IF_2	CALL_10
0x4001ffc	      0xe800000000	                          call 0x4002001	       732	trailer.c	FUNCTION_36	IF_2	CALL_10
0x4002001	            0xeb73	                           jmp 0x4002076	       732	trailer.c	FUNCTION_36	IF_2	CALL_10
0x4002003	        0x488b4588	             mov rax, qword [rbp - 0x78]	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002007	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x400200b	    0x8bbd64ffffff	             mov edi, dword [rbp - 0x9c]	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002011	    0x488d9568ffff	                   lea rdx, [rbp - 0x98]	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002018	        0x488d75b0	                   lea rsi, [rbp - 0x50]	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x400201c	        0x488d4590	                   lea rax, [rbp - 0x70]	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002020	          0x4189f8	                            mov r8d, edi	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002023	          0x4889c7	                            mov rdi, rax	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x4002026	      0xe876fbffff	                  call sym.parse_trailer	       734	trailer.c	FUNCTION_36	ELSE_1	CALL_11
0x400202b	    0x488b9d68ffff	             mov rbx, qword [rbp - 0x98]	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002032	        0x488d45b0	                   lea rax, [rbp - 0x50]	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002036	      0xbe00000000	                              mov esi, 0	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400203b	          0x4889c7	                            mov rdi, rax	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400203e	      0xe800000000	                          call 0x4002043	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002043	          0x4989c4	                            mov r12, rax	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002046	        0x488d4590	                   lea rax, [rbp - 0x70]	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400204a	      0xbe00000000	                              mov esi, 0	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400204f	          0x4889c7	                            mov rdi, rax	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002052	      0xe800000000	                          call 0x4002057	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002057	          0x4889c6	                            mov rsi, rax	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400205a	        0x488b5588	             mov rdx, qword [rbp - 0x78]	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400205e	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002065	          0x4989d0	                             mov r8, rdx	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002068	          0x4889d9	                            mov rcx, rbx	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400206b	          0x4c89e2	                            mov rdx, r12	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x400206e	          0x4889c7	                            mov rdi, rax	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002071	      0xe8f6fcffff	                   call sym.add_arg_item	       736	trailer.c	FUNCTION_36	ELSE_1	CALL_12
0x4002076	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       721	trailer.c	FUNCTION_36
0x400207d	          0x488b00	                    mov rax, qword [rax]	       721	trailer.c	FUNCTION_36
0x4002080	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       721	trailer.c	FUNCTION_36
0x4002087	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       721	trailer.c	FUNCTION_36
0x400208e	    0x483b8550ffff	             cmp rax, qword [rbp - 0xb0]	       721	trailer.c	FUNCTION_36
0x4002095	     0xf85befeffff	                           jne 0x4001f59	       721	trailer.c	FUNCTION_36
0x400209b	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       743	trailer.c	FUNCTION_36	CALL_15
0x40020a2	          0x4889c7	                            mov rdi, rax	       743	trailer.c	FUNCTION_36	CALL_15
0x40020a5	      0xe800000000	                          call 0x40020aa	       743	trailer.c	FUNCTION_36	CALL_15
0x40020aa	              0x90	                                     nop	       744	trailer.c	FUNCTION_36
0x40020ab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       744	trailer.c	FUNCTION_36
0x40020af	    0x644833042528	                xor rax, qword fs:[0x28]	       744	trailer.c	FUNCTION_36
0x40020b8	            0x7405	                            je 0x40020bf	       744	trailer.c	FUNCTION_36
0x40020ba	      0xe800000000	                          call 0x40020bf	       744	trailer.c	FUNCTION_36
0x40020bf	    0x4881c4a00000	                           add rsp, 0xa0	       744	trailer.c	FUNCTION_36
0x40020c6	              0x5b	                                 pop rbx	       744	trailer.c	FUNCTION_36
0x40020c7	            0x415c	                                 pop r12	       744	trailer.c	FUNCTION_36
0x40020c9	              0x5d	                                 pop rbp	       744	trailer.c	FUNCTION_36
0x40020ca	              0xc3	                                     ret	       744	trailer.c	FUNCTION_36
last_non_space_char	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,1	34
0x40008a1	              0x55	                                push rbp	       136	trailer.c	FUNCTION_10
0x40008a2	          0x4889e5	                            mov rbp, rsp	       136	trailer.c	FUNCTION_10
0x40008a5	        0x4883ec20	                           sub rsp, 0x20	       136	trailer.c	FUNCTION_10
0x40008a9	        0x48897de8	             mov qword [rbp - 0x18], rdi	       136	trailer.c	FUNCTION_10
0x40008ad	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008b1	          0x4889c7	                            mov rdi, rax	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008b4	      0xe800000000	                          call 0x40008b9	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008b9	          0x83e801	                              sub eax, 1	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008bc	          0x8945fc	                mov dword [rbp - 4], eax	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008bf	            0xeb3c	                           jmp 0x40008fd	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008c1	          0x8b45fc	                mov eax, dword [rbp - 4]	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008c4	          0x4863d0	                         movsxd rdx, eax	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008c7	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008cb	          0x4801d0	                            add rax, rdx	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008ce	           0xfb600	                   movzx eax, byte [rax]	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008d1	           0xfb6c0	                           movzx eax, al	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008d4	            0x4898	                                    cdqe	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008d6	     0xfb680000000	                   movzx eax, byte [rax]	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008dd	           0xfb6c0	                           movzx eax, al	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008e0	          0x83e001	                              and eax, 1	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008e3	            0x85c0	                           test eax, eax	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008e5	            0x7512	                           jne 0x40008f9	       139	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008e7	          0x8b45fc	                mov eax, dword [rbp - 4]	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008ea	          0x4863d0	                         movsxd rdx, eax	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008ed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008f1	          0x4801d0	                            add rax, rdx	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008f4	           0xfb600	                   movzx eax, byte [rax]	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008f7	            0xeb0f	                           jmp 0x4000908	       140	trailer.c	FUNCTION_10	FOR_1	IF_1
0x40008f9	        0x836dfc01	                  sub dword [rbp - 4], 1	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x40008fd	        0x837dfc00	                  cmp dword [rbp - 4], 0	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x4000901	            0x79be	                           jns 0x40008c1	       138	trailer.c	FUNCTION_10	FOR_1	CALL_1
0x4000903	      0xb800000000	                              mov eax, 0	       141	trailer.c	FUNCTION_10
0x4000908	              0xc9	                                   leave	       142	trailer.c	FUNCTION_10
0x4000909	              0xc3	                                     ret	       142	trailer.c	FUNCTION_10
apply_arg_if_exists	WHILE,0:FOR,0:SWITCH,1:functions,0:DO,0:IF,2:ELSE,2:CALL,16	103
0x4000e3c	              0x55	                                push rbp	       271	trailer.c	FUNCTION_18
0x4000e3d	          0x4889e5	                            mov rbp, rsp	       271	trailer.c	FUNCTION_18
0x4000e40	        0x4883ec20	                           sub rsp, 0x20	       271	trailer.c	FUNCTION_18
0x4000e44	        0x48897df8	                mov qword [rbp - 8], rdi	       271	trailer.c	FUNCTION_18
0x4000e48	        0x488975f0	             mov qword [rbp - 0x10], rsi	       271	trailer.c	FUNCTION_18
0x4000e4c	        0x488955e8	             mov qword [rbp - 0x18], rdx	       271	trailer.c	FUNCTION_18
0x4000e50	        0x48894de0	             mov qword [rbp - 0x20], rcx	       271	trailer.c	FUNCTION_18
0x4000e54	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e58	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e5b	          0x83f805	                              cmp eax, 5	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e5e	     0xf8737010000	                            ja 0x4000f9b	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e64	            0x89c0	                            mov eax, eax	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e66	    0x488b04c50000	                  mov rax, qword [rax*8]	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e6e	            0xffe0	                                 jmp rax	       272	trailer.c	FUNCTION_18	SWITCH_1
0x4000e70	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       274	trailer.c	FUNCTION_18	SWITCH_1	CALL_1
0x4000e74	          0x4889c7	                            mov rdi, rax	       274	trailer.c	FUNCTION_18	SWITCH_1	CALL_1
0x4000e77	      0xe8baf9ffff	                  call sym.free_arg_item	       274	trailer.c	FUNCTION_18	SWITCH_1	CALL_1
0x4000e7c	      0xe932010000	                           jmp 0x4000fb3	       275	trailer.c	FUNCTION_18	SWITCH_1
0x4000e81	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       277	trailer.c	FUNCTION_18	SWITCH_1	CALL_2
0x4000e85	        0x488b45f8	                mov rax, qword [rbp - 8]	       277	trailer.c	FUNCTION_18	SWITCH_1	CALL_2
0x4000e89	          0x4889d6	                            mov rsi, rdx	       277	trailer.c	FUNCTION_18	SWITCH_1	CALL_2
0x4000e8c	          0x4889c7	                            mov rdi, rax	       277	trailer.c	FUNCTION_18	SWITCH_1	CALL_2
0x4000e8f	      0xe8f4feffff	             call sym.apply_item_command	       277	trailer.c	FUNCTION_18	SWITCH_1	CALL_2
0x4000e94	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       278	trailer.c	FUNCTION_18	SWITCH_1	CALL_3
0x4000e98	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       278	trailer.c	FUNCTION_18	SWITCH_1	CALL_3
0x4000e9c	          0x4889d6	                            mov rsi, rdx	       278	trailer.c	FUNCTION_18	SWITCH_1	CALL_3
0x4000e9f	          0x4889c7	                            mov rdi, rax	       278	trailer.c	FUNCTION_18	SWITCH_1	CALL_3
0x4000ea2	      0xe81efcffff	          call sym.add_arg_to_input_list	       278	trailer.c	FUNCTION_18	SWITCH_1	CALL_3
0x4000ea7	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	trailer.c	FUNCTION_18	SWITCH_1	CALL_4
0x4000eab	          0x4889c7	                            mov rdi, rax	       279	trailer.c	FUNCTION_18	SWITCH_1	CALL_4
0x4000eae	      0xe8f6f5ffff	                       call sym.list_del	       279	trailer.c	FUNCTION_18	SWITCH_1	CALL_4
0x4000eb3	        0x488b45f8	                mov rax, qword [rbp - 8]	       280	trailer.c	FUNCTION_18	SWITCH_1	CALL_5
0x4000eb7	          0x4889c7	                            mov rdi, rax	       280	trailer.c	FUNCTION_18	SWITCH_1	CALL_5
0x4000eba	      0xe83cf9ffff	              call sym.free_trailer_item	       280	trailer.c	FUNCTION_18	SWITCH_1	CALL_5
0x4000ebf	      0xe9ef000000	                           jmp 0x4000fb3	       281	trailer.c	FUNCTION_18	SWITCH_1
0x4000ec4	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       283	trailer.c	FUNCTION_18	SWITCH_1	CALL_6
0x4000ec8	        0x488b45f8	                mov rax, qword [rbp - 8]	       283	trailer.c	FUNCTION_18	SWITCH_1	CALL_6
0x4000ecc	          0x4889d6	                            mov rsi, rdx	       283	trailer.c	FUNCTION_18	SWITCH_1	CALL_6
0x4000ecf	          0x4889c7	                            mov rdi, rax	       283	trailer.c	FUNCTION_18	SWITCH_1	CALL_6
0x4000ed2	      0xe8b1feffff	             call sym.apply_item_command	       283	trailer.c	FUNCTION_18	SWITCH_1	CALL_6
0x4000ed7	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       284	trailer.c	FUNCTION_18	SWITCH_1	CALL_7
0x4000edb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       284	trailer.c	FUNCTION_18	SWITCH_1	CALL_7
0x4000edf	          0x4889d6	                            mov rsi, rdx	       284	trailer.c	FUNCTION_18	SWITCH_1	CALL_7
0x4000ee2	          0x4889c7	                            mov rdi, rax	       284	trailer.c	FUNCTION_18	SWITCH_1	CALL_7
0x4000ee5	      0xe8dbfbffff	          call sym.add_arg_to_input_list	       284	trailer.c	FUNCTION_18	SWITCH_1	CALL_7
0x4000eea	      0xe9c4000000	                           jmp 0x4000fb3	       285	trailer.c	FUNCTION_18	SWITCH_1
0x4000eef	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       287	trailer.c	FUNCTION_18	SWITCH_1	CALL_8
0x4000ef3	        0x488b45f8	                mov rax, qword [rbp - 8]	       287	trailer.c	FUNCTION_18	SWITCH_1	CALL_8
0x4000ef7	          0x4889d6	                            mov rsi, rdx	       287	trailer.c	FUNCTION_18	SWITCH_1	CALL_8
0x4000efa	          0x4889c7	                            mov rdi, rax	       287	trailer.c	FUNCTION_18	SWITCH_1	CALL_8
0x4000efd	      0xe886feffff	             call sym.apply_item_command	       287	trailer.c	FUNCTION_18	SWITCH_1	CALL_8
0x4000f02	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f06	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f0a	        0x488b45f8	                mov rax, qword [rbp - 8]	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f0e	          0x4889d1	                            mov rcx, rdx	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f11	      0xba01000000	                              mov edx, 1	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f16	          0x4889c7	                            mov rdi, rax	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f19	      0xe809fcffff	             call sym.check_if_different	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f1e	            0x85c0	                           test eax, eax	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f20	            0x7415	                            je 0x4000f37	       288	trailer.c	FUNCTION_18	SWITCH_1	IF_1	CALL_9
0x4000f22	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       289	trailer.c	FUNCTION_18	SWITCH_1	CALL_10
0x4000f26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       289	trailer.c	FUNCTION_18	SWITCH_1	CALL_10
0x4000f2a	          0x4889d6	                            mov rsi, rdx	       289	trailer.c	FUNCTION_18	SWITCH_1	CALL_10
0x4000f2d	          0x4889c7	                            mov rdi, rax	       289	trailer.c	FUNCTION_18	SWITCH_1	CALL_10
0x4000f30	      0xe890fbffff	          call sym.add_arg_to_input_list	       289	trailer.c	FUNCTION_18	SWITCH_1	CALL_10
0x4000f35	            0xeb7c	                           jmp 0x4000fb3	       292	trailer.c	FUNCTION_18	SWITCH_1
0x4000f37	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       291	trailer.c	FUNCTION_18	SWITCH_1	CALL_11
0x4000f3b	          0x4889c7	                            mov rdi, rax	       291	trailer.c	FUNCTION_18	SWITCH_1	CALL_11
0x4000f3e	      0xe8f3f8ffff	                  call sym.free_arg_item	       291	trailer.c	FUNCTION_18	SWITCH_1	CALL_11
0x4000f43	            0xeb6e	                           jmp 0x4000fb3	       292	trailer.c	FUNCTION_18	SWITCH_1
0x4000f45	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       294	trailer.c	FUNCTION_18	SWITCH_1	CALL_12
0x4000f49	        0x488b45f8	                mov rax, qword [rbp - 8]	       294	trailer.c	FUNCTION_18	SWITCH_1	CALL_12
0x4000f4d	          0x4889d6	                            mov rsi, rdx	       294	trailer.c	FUNCTION_18	SWITCH_1	CALL_12
0x4000f50	          0x4889c7	                            mov rdi, rax	       294	trailer.c	FUNCTION_18	SWITCH_1	CALL_12
0x4000f53	      0xe830feffff	             call sym.apply_item_command	       294	trailer.c	FUNCTION_18	SWITCH_1	CALL_12
0x4000f58	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f5c	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f60	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f64	          0x4889d1	                            mov rcx, rdx	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f67	      0xba00000000	                              mov edx, 0	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f6c	          0x4889c7	                            mov rdi, rax	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f6f	      0xe8b3fbffff	             call sym.check_if_different	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f74	            0x85c0	                           test eax, eax	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f76	            0x7415	                            je 0x4000f8d	       295	trailer.c	FUNCTION_18	SWITCH_1	IF_2	CALL_13
0x4000f78	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       296	trailer.c	FUNCTION_18	SWITCH_1	CALL_14
0x4000f7c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       296	trailer.c	FUNCTION_18	SWITCH_1	CALL_14
0x4000f80	          0x4889d6	                            mov rsi, rdx	       296	trailer.c	FUNCTION_18	SWITCH_1	CALL_14
0x4000f83	          0x4889c7	                            mov rdi, rax	       296	trailer.c	FUNCTION_18	SWITCH_1	CALL_14
0x4000f86	      0xe83afbffff	          call sym.add_arg_to_input_list	       296	trailer.c	FUNCTION_18	SWITCH_1	CALL_14
0x4000f8b	            0xeb26	                           jmp 0x4000fb3	       299	trailer.c	FUNCTION_18	SWITCH_1
0x4000f8d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       298	trailer.c	FUNCTION_18	SWITCH_1	CALL_15
0x4000f91	          0x4889c7	                            mov rdi, rax	       298	trailer.c	FUNCTION_18	SWITCH_1	CALL_15
0x4000f94	      0xe89df8ffff	                  call sym.free_arg_item	       298	trailer.c	FUNCTION_18	SWITCH_1	CALL_15
0x4000f99	            0xeb18	                           jmp 0x4000fb3	       299	trailer.c	FUNCTION_18	SWITCH_1
0x4000f9b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       302	trailer.c	FUNCTION_18	SWITCH_1
0x4000f9f	          0x8b403c	            mov eax, dword [rax + 0x3c] 	       302	trailer.c	FUNCTION_18	SWITCH_1
0x4000fa2	            0x89c6	                            mov esi, eax	       301	trailer.c	FUNCTION_18	SWITCH_1	CALL_16
0x4000fa4	      0xbf00000000	                              mov edi, 0	       301	trailer.c	FUNCTION_18	SWITCH_1	CALL_16
0x4000fa9	      0xb800000000	                              mov eax, 0	       301	trailer.c	FUNCTION_18	SWITCH_1	CALL_16
0x4000fae	      0xe800000000	                          call 0x4000fb3	       301	trailer.c	FUNCTION_18	SWITCH_1	CALL_16
0x4000fb3	              0x90	                                     nop	       304	trailer.c	FUNCTION_18
0x4000fb4	              0xc9	                                   leave	       304	trailer.c	FUNCTION_18
0x4000fb5	              0xc3	                                     ret	       304	trailer.c	FUNCTION_18
find_patch_start	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	32
0x40021fd	              0x55	                                push rbp	       792	trailer.c	FUNCTION_40
0x40021fe	          0x4889e5	                            mov rbp, rsp	       792	trailer.c	FUNCTION_40
0x4002201	        0x4883ec20	                           sub rsp, 0x20	       792	trailer.c	FUNCTION_40
0x4002205	        0x48897de8	             mov qword [rbp - 0x18], rdi	       792	trailer.c	FUNCTION_40
0x4002209	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x400220d	        0x488945f8	                mov qword [rbp - 8], rax	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002211	            0xeb35	                           jmp 0x4002248	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002213	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x4002217	      0xbe00000000	                              mov esi, 0	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x400221c	          0x4889c7	                            mov rdi, rax	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x400221f	      0xe800000000	                          call 0x4002224	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x4002224	            0x85c0	                           test eax, eax	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x4002226	            0x7410	                            je 0x4002238	       796	trailer.c	FUNCTION_40	FOR_1	IF_1	CALL_2
0x4002228	        0x488b55f8	                mov rdx, qword [rbp - 8]	       797	trailer.c	FUNCTION_40	FOR_1	IF_1
0x400222c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       797	trailer.c	FUNCTION_40	FOR_1	IF_1
0x4002230	          0x4829c2	                            sub rdx, rax	       797	trailer.c	FUNCTION_40	FOR_1	IF_1
0x4002233	          0x4889d0	                            mov rax, rdx	       797	trailer.c	FUNCTION_40	FOR_1	IF_1
0x4002236	            0xeb29	                           jmp 0x4002261	       797	trailer.c	FUNCTION_40	FOR_1	IF_1
0x4002238	        0x488b45f8	                mov rax, qword [rbp - 8]	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x400223c	          0x4889c7	                            mov rdi, rax	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x400223f	      0xe81fffffff	                      call sym.next_line	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002244	        0x488945f8	                mov qword [rbp - 8], rax	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002248	        0x488b45f8	                mov rax, qword [rbp - 8]	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x400224c	           0xfb600	                   movzx eax, byte [rax]	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x400224f	            0x84c0	                             test al, al	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002251	            0x75c0	                           jne 0x4002213	       795	trailer.c	FUNCTION_40	FOR_1	CALL_1
0x4002253	        0x488b55f8	                mov rdx, qword [rbp - 8]	       800	trailer.c	FUNCTION_40
0x4002257	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       800	trailer.c	FUNCTION_40
0x400225b	          0x4829c2	                            sub rdx, rax	       800	trailer.c	FUNCTION_40
0x400225e	          0x4889d0	                            mov rax, rdx	       800	trailer.c	FUNCTION_40
0x4002261	              0xc9	                                   leave	       801	trailer.c	FUNCTION_40
0x4002262	              0xc3	                                     ret	       801	trailer.c	FUNCTION_40
is_blank_line	WHILE,1:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	37
0x4000702	              0x55	                                push rbp	       104	trailer.c	FUNCTION_6
0x4000703	          0x4889e5	                            mov rbp, rsp	       104	trailer.c	FUNCTION_6
0x4000706	        0x48897de8	             mov qword [rbp - 0x18], rdi	       104	trailer.c	FUNCTION_6
0x400070a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       105	trailer.c	FUNCTION_6
0x400070e	        0x488945f8	                mov qword [rbp - 8], rax	       105	trailer.c	FUNCTION_6
0x4000712	            0xeb05	                           jmp 0x4000719	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000714	      0x488345f801	                  add qword [rbp - 8], 1	       107	trailer.c	FUNCTION_6	WHILE_1
0x4000719	        0x488b45f8	                mov rax, qword [rbp - 8]	       106	trailer.c	FUNCTION_6	WHILE_1
0x400071d	           0xfb600	                   movzx eax, byte [rax]	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000720	            0x84c0	                             test al, al	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000722	            0x7428	                            je 0x400074c	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000724	        0x488b45f8	                mov rax, qword [rbp - 8]	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000728	           0xfb600	                   movzx eax, byte [rax]	       106	trailer.c	FUNCTION_6	WHILE_1
0x400072b	            0x3c0a	                             cmp al, 0xa	       106	trailer.c	FUNCTION_6	WHILE_1
0x400072d	            0x741d	                            je 0x400074c	       106	trailer.c	FUNCTION_6	WHILE_1
0x400072f	        0x488b45f8	                mov rax, qword [rbp - 8]	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000733	           0xfb600	                   movzx eax, byte [rax]	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000736	           0xfb6c0	                           movzx eax, al	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000739	            0x4898	                                    cdqe	       106	trailer.c	FUNCTION_6	WHILE_1
0x400073b	     0xfb680000000	                   movzx eax, byte [rax]	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000742	           0xfb6c0	                           movzx eax, al	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000745	          0x83e001	                              and eax, 1	       106	trailer.c	FUNCTION_6	WHILE_1
0x4000748	            0x85c0	                           test eax, eax	       106	trailer.c	FUNCTION_6	WHILE_1
0x400074a	            0x75c8	                           jne 0x4000714	       106	trailer.c	FUNCTION_6	WHILE_1
0x400074c	        0x488b45f8	                mov rax, qword [rbp - 8]	       108	trailer.c	FUNCTION_6
0x4000750	           0xfb600	                   movzx eax, byte [rax]	       108	trailer.c	FUNCTION_6
0x4000753	            0x84c0	                             test al, al	       108	trailer.c	FUNCTION_6
0x4000755	            0x740b	                            je 0x4000762	       108	trailer.c	FUNCTION_6
0x4000757	        0x488b45f8	                mov rax, qword [rbp - 8]	       108	trailer.c	FUNCTION_6
0x400075b	           0xfb600	                   movzx eax, byte [rax]	       108	trailer.c	FUNCTION_6
0x400075e	            0x3c0a	                             cmp al, 0xa	       108	trailer.c	FUNCTION_6
0x4000760	            0x7507	                           jne 0x4000769	       108	trailer.c	FUNCTION_6
0x4000762	      0xb801000000	                              mov eax, 1	       108	trailer.c	FUNCTION_6
0x4000767	            0xeb05	                           jmp 0x400076e	       108	trailer.c	FUNCTION_6
0x4000769	      0xb800000000	                              mov eax, 0	       108	trailer.c	FUNCTION_6
0x400076e	              0x5d	                                 pop rbp	       109	trailer.c	FUNCTION_6
0x400076f	              0xc3	                                     ret	       109	trailer.c	FUNCTION_6
parse_trailer	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,4:ELSE,1:CALL,12	100
0x4001ba1	              0x55	                                push rbp	       634	trailer.c	FUNCTION_33
0x4001ba2	          0x4889e5	                            mov rbp, rsp	       634	trailer.c	FUNCTION_33
0x4001ba5	        0x4883ec50	                           sub rsp, 0x50	       634	trailer.c	FUNCTION_33
0x4001ba9	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       634	trailer.c	FUNCTION_33
0x4001bad	        0x488975d0	             mov qword [rbp - 0x30], rsi	       634	trailer.c	FUNCTION_33
0x4001bb1	        0x488955c8	             mov qword [rbp - 0x38], rdx	       634	trailer.c	FUNCTION_33
0x4001bb5	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       634	trailer.c	FUNCTION_33
0x4001bb9	        0x448945bc	             mov dword [rbp - 0x44], r8d	       634	trailer.c	FUNCTION_33
0x4001bbd	        0x837dbcff	cmp dword [rbp - 0x44], 0xffffffffffffffff	       639	trailer.c	FUNCTION_33	IF_1
0x4001bc1	            0x7452	                            je 0x4001c15	       639	trailer.c	FUNCTION_33	IF_1
0x4001bc3	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bc6	          0x4863d0	                         movsxd rdx, eax	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bc9	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bcd	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bd1	          0x4889ce	                            mov rsi, rcx	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bd4	          0x4889c7	                            mov rdi, rax	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bd7	      0xe800000000	                          call 0x4001bdc	       640	trailer.c	FUNCTION_33	IF_1	CALL_1
0x4001bdc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       641	trailer.c	FUNCTION_33	IF_1	CALL_2
0x4001be0	          0x4889c7	                            mov rdi, rax	       641	trailer.c	FUNCTION_33	IF_1	CALL_2
0x4001be3	      0xe800000000	                          call 0x4001be8	       641	trailer.c	FUNCTION_33	IF_1	CALL_2
0x4001be8	          0x8b45bc	             mov eax, dword [rbp - 0x44]	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001beb	            0x4898	                                    cdqe	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bed	        0x488d5001	                      lea rdx, [rax + 1]	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bf1	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bf5	          0x4801c2	                            add rdx, rax	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bf8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bfc	          0x4889d6	                            mov rsi, rdx	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001bff	          0x4889c7	                            mov rdi, rax	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001c02	      0xe867e7ffff	                  call sym.strbuf_addstr	       642	trailer.c	FUNCTION_33	IF_1	CALL_3
0x4001c07	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       643	trailer.c	FUNCTION_33	IF_1	CALL_4
0x4001c0b	          0x4889c7	                            mov rdi, rax	       643	trailer.c	FUNCTION_33	IF_1	CALL_4
0x4001c0e	      0xe800000000	                          call 0x4001c13	       643	trailer.c	FUNCTION_33	IF_1	CALL_4
0x4001c13	            0xeb1f	                           jmp 0x4001c34	       643	trailer.c	FUNCTION_33	IF_1	CALL_4
0x4001c15	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       645	trailer.c	FUNCTION_33	ELSE_1	CALL_5
0x4001c19	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       645	trailer.c	FUNCTION_33	ELSE_1	CALL_5
0x4001c1d	          0x4889d6	                            mov rsi, rdx	       645	trailer.c	FUNCTION_33	ELSE_1	CALL_5
0x4001c20	          0x4889c7	                            mov rdi, rax	       645	trailer.c	FUNCTION_33	ELSE_1	CALL_5
0x4001c23	      0xe846e7ffff	                  call sym.strbuf_addstr	       645	trailer.c	FUNCTION_33	ELSE_1	CALL_5
0x4001c28	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       646	trailer.c	FUNCTION_33	ELSE_1	CALL_6
0x4001c2c	          0x4889c7	                            mov rdi, rax	       646	trailer.c	FUNCTION_33	ELSE_1	CALL_6
0x4001c2f	      0xe800000000	                          call 0x4001c34	       646	trailer.c	FUNCTION_33	ELSE_1	CALL_6
0x4001c34	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c38	        0x488b5008	                mov rdx, qword [rax + 8]	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c3c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c40	        0x488b4010	            mov rax, qword [rax + 0x10] 	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c44	          0x4889d6	                            mov rsi, rdx	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c47	          0x4889c7	                            mov rdi, rax	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c4a	      0xe835e9ffff	    call sym.token_len_without_separator	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c4f	          0x8945e4	             mov dword [rbp - 0x1c], eax	       650	trailer.c	FUNCTION_33	CALL_7
0x4001c52	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       651	trailer.c	FUNCTION_33	IF_2
0x4001c57	            0x740b	                            je 0x4001c64	       651	trailer.c	FUNCTION_33	IF_2
0x4001c59	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       652	trailer.c	FUNCTION_33	IF_2
0x4001c5d	    0x48c700000000	                      mov qword [rax], 0	       652	trailer.c	FUNCTION_33	IF_2
0x4001c64	    0x488b05000000	            mov rax, qword [0x04001c6b] 	       653	trailer.c	FUNCTION_33
0x4001c6b	        0x488945e8	             mov qword [rbp - 0x18], rax	       653	trailer.c	FUNCTION_33
0x4001c6f	      0xe98f000000	                           jmp 0x4001d03	       653	trailer.c	FUNCTION_33
0x4001c74	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       654	trailer.c	FUNCTION_33
0x4001c78	        0x488945f0	             mov qword [rbp - 0x10], rax	       654	trailer.c	FUNCTION_33
0x4001c7c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c80	        0x488b4010	            mov rax, qword [rax + 0x10] 	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c84	          0x8b55e4	             mov edx, dword [rbp - 0x1c]	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c87	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c8b	          0x4889ce	                            mov rsi, rcx	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c8e	          0x4889c7	                            mov rdi, rax	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c91	      0xe8ccfdffff	             call sym.token_matches_item	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c96	            0x85c0	                           test eax, eax	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c98	            0x745e	                            je 0x4001cf8	       655	trailer.c	FUNCTION_33	IF_3	CALL_8
0x4001c9a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       656	trailer.c	FUNCTION_33	IF_3	CALL_9
0x4001c9e	      0xbe00000000	                              mov esi, 0	       656	trailer.c	FUNCTION_33	IF_3	CALL_9
0x4001ca3	          0x4889c7	                            mov rdi, rax	       656	trailer.c	FUNCTION_33	IF_3	CALL_9
0x4001ca6	      0xe800000000	                          call 0x4001cab	       656	trailer.c	FUNCTION_33	IF_3	CALL_9
0x4001cab	        0x488945f8	                mov qword [rbp - 8], rax	       656	trailer.c	FUNCTION_33	IF_3	CALL_9
0x4001caf	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       657	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cb4	            0x740f	                            je 0x4001cc5	       657	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cb6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       658	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cba	        0x488d5020	                   lea rdx, [rax + 0x20]	       658	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cbe	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       658	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cc2	          0x488910	                    mov qword [rax], rdx	       658	trailer.c	FUNCTION_33	IF_3	IF_4
0x4001cc5	        0x488b55f8	                mov rdx, qword [rbp - 8]	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cc9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001ccd	          0x4889d6	                            mov rsi, rdx	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cd0	          0x4889c7	                            mov rdi, rax	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cd3	      0xe850fdffff	                call sym.token_from_item	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cd8	          0x4889c2	                            mov rdx, rax	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cdb	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cdf	          0x4889d6	                            mov rsi, rdx	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001ce2	          0x4889c7	                            mov rdi, rax	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001ce5	      0xe884e6ffff	                  call sym.strbuf_addstr	       659	trailer.c	FUNCTION_33	IF_3	CALL_11
0x4001cea	        0x488b45f8	                mov rax, qword [rbp - 8]	       660	trailer.c	FUNCTION_33	IF_3	CALL_12
0x4001cee	          0x4889c7	                            mov rdi, rax	       660	trailer.c	FUNCTION_33	IF_3	CALL_12
0x4001cf1	      0xe800000000	                          call 0x4001cf6	       660	trailer.c	FUNCTION_33	IF_3	CALL_12
0x4001cf6	            0xeb19	                           jmp 0x4001d11	       661	trailer.c	FUNCTION_33	IF_3
0x4001cf8	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       653	trailer.c	FUNCTION_33
0x4001cfc	          0x488b00	                    mov rax, qword [rax]	       653	trailer.c	FUNCTION_33
0x4001cff	        0x488945e8	             mov qword [rbp - 0x18], rax	       653	trailer.c	FUNCTION_33
0x4001d03	    0x48817de80000	               cmp qword [rbp - 0x18], 0	       653	trailer.c	FUNCTION_33
0x4001d0b	     0xf8563ffffff	                           jne 0x4001c74	       653	trailer.c	FUNCTION_33
0x4001d11	              0x90	                                     nop	       664	trailer.c	FUNCTION_33
0x4001d12	              0xc9	                                   leave	       664	trailer.c	FUNCTION_33
0x4001d13	              0xc3	                                     ret	       664	trailer.c	FUNCTION_33
after_or_end	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	12
0x4000563	              0x55	                                push rbp	        62	trailer.c	FUNCTION_1
0x4000564	          0x4889e5	                            mov rbp, rsp	        62	trailer.c	FUNCTION_1
0x4000567	          0x897dfc	                mov dword [rbp - 4], edi	        62	trailer.c	FUNCTION_1
0x400056a	        0x837dfc02	                  cmp dword [rbp - 4], 2	        63	trailer.c	FUNCTION_1
0x400056e	            0x7406	                            je 0x4000576	        63	trailer.c	FUNCTION_1
0x4000570	        0x837dfc01	                  cmp dword [rbp - 4], 1	        63	trailer.c	FUNCTION_1
0x4000574	            0x7507	                           jne 0x400057d	        63	trailer.c	FUNCTION_1
0x4000576	      0xb801000000	                              mov eax, 1	        63	trailer.c	FUNCTION_1
0x400057b	            0xeb05	                           jmp 0x4000582	        63	trailer.c	FUNCTION_1
0x400057d	      0xb800000000	                              mov eax, 0	        63	trailer.c	FUNCTION_1
0x4000582	              0x5d	                                 pop rbp	        64	trailer.c	FUNCTION_1
0x4000583	              0xc3	                                     ret	        64	trailer.c	FUNCTION_1
same_value	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1	17
0x4000681	              0x55	                                push rbp	        94	trailer.c	FUNCTION_4
0x4000682	          0x4889e5	                            mov rbp, rsp	        94	trailer.c	FUNCTION_4
0x4000685	        0x4883ec10	                           sub rsp, 0x10	        94	trailer.c	FUNCTION_4
0x4000689	        0x48897df8	                mov qword [rbp - 8], rdi	        94	trailer.c	FUNCTION_4
0x400068d	        0x488975f0	             mov qword [rbp - 0x10], rsi	        94	trailer.c	FUNCTION_4
0x4000691	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        95	trailer.c	FUNCTION_4	CALL_1
0x4000695	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        95	trailer.c	FUNCTION_4	CALL_1
0x4000699	        0x488b45f8	                mov rax, qword [rbp - 8]	        95	trailer.c	FUNCTION_4	CALL_1
0x400069d	        0x488b4018	            mov rax, qword [rax + 0x18] 	        95	trailer.c	FUNCTION_4	CALL_1
0x40006a1	          0x4889d6	                            mov rsi, rdx	        95	trailer.c	FUNCTION_4	CALL_1
0x40006a4	          0x4889c7	                            mov rdi, rax	        95	trailer.c	FUNCTION_4	CALL_1
0x40006a7	      0xe800000000	                          call 0x40006ac	        95	trailer.c	FUNCTION_4	CALL_1
0x40006ac	            0x85c0	                           test eax, eax	        95	trailer.c	FUNCTION_4	CALL_1
0x40006ae	           0xf94c0	                                 sete al	        95	trailer.c	FUNCTION_4	CALL_1
0x40006b1	           0xfb6c0	                           movzx eax, al	        95	trailer.c	FUNCTION_4	CALL_1
0x40006b4	              0xc9	                                   leave	        96	trailer.c	FUNCTION_4
0x40006b5	              0xc3	                                     ret	        96	trailer.c	FUNCTION_4
next_line	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	18
0x4002163	              0x55	                                push rbp	       758	trailer.c	FUNCTION_38
0x4002164	          0x4889e5	                            mov rbp, rsp	       758	trailer.c	FUNCTION_38
0x4002167	        0x4883ec20	                           sub rsp, 0x20	       758	trailer.c	FUNCTION_38
0x400216b	        0x48897de8	             mov qword [rbp - 0x18], rdi	       758	trailer.c	FUNCTION_38
0x400216f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       759	trailer.c	FUNCTION_38
0x4002173	      0xbe0a000000	                            mov esi, 0xa	       759	trailer.c	FUNCTION_38
0x4002178	          0x4889c7	                            mov rdi, rax	       759	trailer.c	FUNCTION_38
0x400217b	      0xe800000000	                          call 0x4002180	       759	trailer.c	FUNCTION_38
0x4002180	        0x488945f8	                mov qword [rbp - 8], rax	       759	trailer.c	FUNCTION_38
0x4002184	        0x488b45f8	                mov rax, qword [rbp - 8]	       760	trailer.c	FUNCTION_38
0x4002188	           0xfb600	                   movzx eax, byte [rax]	       760	trailer.c	FUNCTION_38
0x400218b	            0x84c0	                             test al, al	       760	trailer.c	FUNCTION_38
0x400218d	           0xf95c0	                                setne al	       760	trailer.c	FUNCTION_38
0x4002190	           0xfb6d0	                           movzx edx, al	       760	trailer.c	FUNCTION_38
0x4002193	        0x488b45f8	                mov rax, qword [rbp - 8]	       760	trailer.c	FUNCTION_38
0x4002197	          0x4801d0	                            add rax, rdx	       760	trailer.c	FUNCTION_38
0x400219a	              0xc9	                                   leave	       761	trailer.c	FUNCTION_38
0x400219b	              0xc3	                                     ret	       761	trailer.c	FUNCTION_38
strbuf_swap	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	39
0x400019c	              0x55	                                push rbp	       126	strbuf.h	FUNCTION_53
0x400019d	          0x4889e5	                            mov rbp, rsp	       126	strbuf.h	FUNCTION_53
0x40001a0	        0x4883ec40	                           sub rsp, 0x40	       126	strbuf.h	FUNCTION_53
0x40001a4	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       126	strbuf.h	FUNCTION_53
0x40001a8	        0x488975c0	             mov qword [rbp - 0x40], rsi	       126	strbuf.h	FUNCTION_53
0x40001ac	    0x64488b042528	                mov rax, qword fs:[0x28]	       126	strbuf.h	FUNCTION_53
0x40001b5	        0x488945f8	                mov qword [rbp - 8], rax	       126	strbuf.h	FUNCTION_53
0x40001b9	            0x31c0	                            xor eax, eax	       126	strbuf.h	FUNCTION_53
0x40001bb	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       127	strbuf.h	FUNCTION_53
0x40001bf	        0x488945d0	             mov qword [rbp - 0x30], rax	       127	strbuf.h	FUNCTION_53
0x40001c3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       127	strbuf.h	FUNCTION_53
0x40001c7	        0x488945d8	             mov qword [rbp - 0x28], rax	       127	strbuf.h	FUNCTION_53
0x40001cb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_53
0x40001cf	          0x488b10	                    mov rdx, qword [rax]	       127	strbuf.h	FUNCTION_53
0x40001d2	        0x488955e0	             mov qword [rbp - 0x20], rdx	       127	strbuf.h	FUNCTION_53
0x40001d6	        0x488b5008	                mov rdx, qword [rax + 8]	       127	strbuf.h	FUNCTION_53
0x40001da	        0x488955e8	             mov qword [rbp - 0x18], rdx	       127	strbuf.h	FUNCTION_53
0x40001de	        0x488b4010	            mov rax, qword [rax + 0x10] 	       127	strbuf.h	FUNCTION_53
0x40001e2	        0x488945f0	             mov qword [rbp - 0x10], rax	       127	strbuf.h	FUNCTION_53
0x40001e6	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_53
0x40001ea	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_53
0x40001ee	      0xba18000000	                           mov edx, 0x18	       127	strbuf.h	FUNCTION_53
0x40001f3	          0x4889ce	                            mov rsi, rcx	       127	strbuf.h	FUNCTION_53
0x40001f6	          0x4889c7	                            mov rdi, rax	       127	strbuf.h	FUNCTION_53
0x40001f9	      0xe800000000	                          call 0x40001fe	       127	strbuf.h	FUNCTION_53
0x40001fe	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_53
0x4000202	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       127	strbuf.h	FUNCTION_53
0x4000206	          0x488910	                    mov qword [rax], rdx	       127	strbuf.h	FUNCTION_53
0x4000209	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       127	strbuf.h	FUNCTION_53
0x400020d	        0x48895008	                mov qword [rax + 8], rdx	       127	strbuf.h	FUNCTION_53
0x4000211	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       127	strbuf.h	FUNCTION_53
0x4000215	        0x48895010	             mov qword [rax + 0x10], rdx	       127	strbuf.h	FUNCTION_53
0x4000219	              0x90	                                     nop	       128	strbuf.h	FUNCTION_53
0x400021a	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	strbuf.h	FUNCTION_53
0x400021e	    0x644833042528	                xor rax, qword fs:[0x28]	       128	strbuf.h	FUNCTION_53
0x4000227	            0x7405	                            je 0x400022e	       128	strbuf.h	FUNCTION_53
0x4000229	      0xe800000000	                          call 0x400022e	       128	strbuf.h	FUNCTION_53
0x400022e	              0xc9	                                   leave	       128	strbuf.h	FUNCTION_53
0x400022f	              0xc3	                                     ret	       128	strbuf.h	FUNCTION_53
duplicate_conf	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,3	41
0x4001410	              0x55	                                push rbp	       430	trailer.c	ELSE_3	FUNCTION_25
0x4001411	          0x4889e5	                            mov rbp, rsp	       430	trailer.c	ELSE_3	FUNCTION_25
0x4001414	        0x4883ec10	                           sub rsp, 0x10	       430	trailer.c	ELSE_3	FUNCTION_25
0x4001418	        0x48897df8	                mov qword [rbp - 8], rdi	       430	trailer.c	ELSE_3	FUNCTION_25
0x400141c	        0x488975f0	             mov qword [rbp - 0x10], rsi	       430	trailer.c	ELSE_3	FUNCTION_25
0x4001420	        0x488b45f8	                mov rax, qword [rbp - 8]	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001424	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001428	          0x488b0a	                    mov rcx, qword [rdx]	       431	trailer.c	ELSE_3	FUNCTION_25
0x400142b	          0x488908	                    mov qword [rax], rcx	       431	trailer.c	ELSE_3	FUNCTION_25
0x400142e	        0x488b4a08	                mov rcx, qword [rdx + 8]	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001432	        0x48894808	                mov qword [rax + 8], rcx	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001436	        0x488b4a10	            mov rcx, qword [rdx + 0x10] 	       431	trailer.c	ELSE_3	FUNCTION_25
0x400143a	        0x48894810	             mov qword [rax + 0x10], rcx	       431	trailer.c	ELSE_3	FUNCTION_25
0x400143e	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001442	        0x48894818	             mov qword [rax + 0x18], rcx	       431	trailer.c	ELSE_3	FUNCTION_25
0x4001446	        0x488b5220	            mov rdx, qword [rdx + 0x20] 	       431	trailer.c	ELSE_3	FUNCTION_25
0x400144a	        0x48895020	             mov qword [rax + 0x20], rdx	       431	trailer.c	ELSE_3	FUNCTION_25
0x400144e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001452	          0x488b00	                    mov rax, qword [rax]	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001455	          0x4889c7	                            mov rdi, rax	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001458	      0xe817edffff	                call sym.xstrdup_or_null	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x400145d	          0x4889c2	                            mov rdx, rax	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001460	        0x488b45f8	                mov rax, qword [rbp - 8]	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001464	          0x488910	                    mov qword [rax], rdx	       432	trailer.c	ELSE_3	FUNCTION_25	CALL_1
0x4001467	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x400146b	        0x488b4008	                mov rax, qword [rax + 8]	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x400146f	          0x4889c7	                            mov rdi, rax	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x4001472	      0xe8fdecffff	                call sym.xstrdup_or_null	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x4001477	          0x4889c2	                            mov rdx, rax	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x400147a	        0x488b45f8	                mov rax, qword [rbp - 8]	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x400147e	        0x48895008	                mov qword [rax + 8], rdx	       433	trailer.c	ELSE_3	FUNCTION_25	CALL_2
0x4001482	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x4001486	        0x488b4010	            mov rax, qword [rax + 0x10] 	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x400148a	          0x4889c7	                            mov rdi, rax	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x400148d	      0xe8e2ecffff	                call sym.xstrdup_or_null	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x4001492	          0x4889c2	                            mov rdx, rax	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x4001495	        0x488b45f8	                mov rax, qword [rbp - 8]	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x4001499	        0x48895010	             mov qword [rax + 0x10], rdx	       434	trailer.c	ELSE_3	FUNCTION_25	CALL_3
0x400149d	              0x90	                                     nop	       435	trailer.c	ELSE_3	FUNCTION_25
0x400149e	              0xc9	                                   leave	       435	trailer.c	ELSE_3	FUNCTION_25
0x400149f	              0xc3	                                     ret	       435	trailer.c	ELSE_3	FUNCTION_25
free_arg_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,6	30
0x4000836	              0x55	                                push rbp	       126	trailer.c	FUNCTION_9
0x4000837	          0x4889e5	                            mov rbp, rsp	       126	trailer.c	FUNCTION_9
0x400083a	        0x4883ec10	                           sub rsp, 0x10	       126	trailer.c	FUNCTION_9
0x400083e	        0x48897df8	                mov qword [rbp - 8], rdi	       126	trailer.c	FUNCTION_9
0x4000842	        0x488b45f8	                mov rax, qword [rbp - 8]	       127	trailer.c	FUNCTION_9	CALL_1
0x4000846	        0x488b4020	            mov rax, qword [rax + 0x20] 	       127	trailer.c	FUNCTION_9	CALL_1
0x400084a	          0x4889c7	                            mov rdi, rax	       127	trailer.c	FUNCTION_9	CALL_1
0x400084d	      0xe800000000	                          call 0x4000852	       127	trailer.c	FUNCTION_9	CALL_1
0x4000852	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	trailer.c	FUNCTION_9	CALL_2
0x4000856	        0x488b4028	            mov rax, qword [rax + 0x28] 	       128	trailer.c	FUNCTION_9	CALL_2
0x400085a	          0x4889c7	                            mov rdi, rax	       128	trailer.c	FUNCTION_9	CALL_2
0x400085d	      0xe800000000	                          call 0x4000862	       128	trailer.c	FUNCTION_9	CALL_2
0x4000862	        0x488b45f8	                mov rax, qword [rbp - 8]	       129	trailer.c	FUNCTION_9	CALL_3
0x4000866	        0x488b4030	            mov rax, qword [rax + 0x30] 	       129	trailer.c	FUNCTION_9	CALL_3
0x400086a	          0x4889c7	                            mov rdi, rax	       129	trailer.c	FUNCTION_9	CALL_3
0x400086d	      0xe800000000	                          call 0x4000872	       129	trailer.c	FUNCTION_9	CALL_3
0x4000872	        0x488b45f8	                mov rax, qword [rbp - 8]	       130	trailer.c	FUNCTION_9	CALL_4
0x4000876	        0x488b4010	            mov rax, qword [rax + 0x10] 	       130	trailer.c	FUNCTION_9	CALL_4
0x400087a	          0x4889c7	                            mov rdi, rax	       130	trailer.c	FUNCTION_9	CALL_4
0x400087d	      0xe800000000	                          call 0x4000882	       130	trailer.c	FUNCTION_9	CALL_4
0x4000882	        0x488b45f8	                mov rax, qword [rbp - 8]	       131	trailer.c	FUNCTION_9	CALL_5
0x4000886	        0x488b4018	            mov rax, qword [rax + 0x18] 	       131	trailer.c	FUNCTION_9	CALL_5
0x400088a	          0x4889c7	                            mov rdi, rax	       131	trailer.c	FUNCTION_9	CALL_5
0x400088d	      0xe800000000	                          call 0x4000892	       131	trailer.c	FUNCTION_9	CALL_5
0x4000892	        0x488b45f8	                mov rax, qword [rbp - 8]	       132	trailer.c	FUNCTION_9	CALL_6
0x4000896	          0x4889c7	                            mov rdi, rax	       132	trailer.c	FUNCTION_9	CALL_6
0x4000899	      0xe800000000	                          call 0x400089e	       132	trailer.c	FUNCTION_9	CALL_6
0x400089e	              0x90	                                     nop	       133	trailer.c	FUNCTION_9
0x400089f	              0xc9	                                   leave	       133	trailer.c	FUNCTION_9
0x40008a0	              0xc3	                                     ret	       133	trailer.c	FUNCTION_9
strbuf_setlen	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,2:ELSE,1:CALL,2	43
0x4000266	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_55
0x4000267	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_55
0x400026a	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_55
0x400026e	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_55
0x4000272	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_55
0x4000276	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_55	IF_1
0x400027a	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_55	IF_1
0x400027d	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_55	IF_1
0x4000280	            0x740d	                            je 0x400028f	       162	strbuf.h	FUNCTION_55	IF_1
0x4000282	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000286	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000289	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_55	IF_1
0x400028d	            0xeb05	                           jmp 0x4000294	       162	strbuf.h	FUNCTION_55	IF_1
0x400028f	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_55	IF_1
0x4000294	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_55	IF_1
0x4000298	            0x730f	                           jae 0x40002a9	       162	strbuf.h	FUNCTION_55	IF_1
0x400029a	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_55	CALL_1
0x400029f	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_55	CALL_1
0x40002a4	      0xe800000000	                          call 0x40002a9	       163	strbuf.h	FUNCTION_55	CALL_1
0x40002a9	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_55
0x40002ad	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_55
0x40002b1	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_55
0x40002b5	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_55	IF_2
0x40002b9	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_55	IF_2
0x40002bd	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_55	IF_2
0x40002c3	            0x7414	                            je 0x40002d9	       165	strbuf.h	FUNCTION_55	IF_2
0x40002c5	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_55	IF_2
0x40002c9	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_55	IF_2
0x40002cd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_55	IF_2
0x40002d1	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_55	IF_2
0x40002d4	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_55	IF_2
0x40002d7	            0xeb24	                           jmp 0x40002fd	       169	strbuf.h	FUNCTION_55
0x40002d9	     0xfb605000000	           movzx eax, byte [0x040002e0] 	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002e0	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002e2	            0x7419	                            je 0x40002fd	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002e4	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002e9	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002ee	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002f3	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002f8	      0xe800000000	                          call 0x40002fd	       168	strbuf.h	FUNCTION_55	CALL_2
0x40002fd	              0x90	                                     nop	       169	strbuf.h	FUNCTION_55
0x40002fe	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_55
0x40002ff	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_55
list_empty	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	10
0x40004d2	              0x55	                                push rbp	       152	list.h	FUNCTION_99
0x40004d3	          0x4889e5	                            mov rbp, rsp	       152	list.h	FUNCTION_99
0x40004d6	        0x48897df8	                mov qword [rbp - 8], rdi	       152	list.h	FUNCTION_99
0x40004da	        0x488b45f8	                mov rax, qword [rbp - 8]	       153	list.h	FUNCTION_99
0x40004de	          0x488b00	                    mov rax, qword [rax]	       153	list.h	FUNCTION_99
0x40004e1	        0x483b45f8	                cmp rax, qword [rbp - 8]	       153	list.h	FUNCTION_99
0x40004e5	           0xf94c0	                                 sete al	       153	list.h	FUNCTION_99
0x40004e8	           0xfb6c0	                           movzx eax, al	       153	list.h	FUNCTION_99
0x40004eb	              0x5d	                                 pop rbp	       154	list.h	FUNCTION_99
0x40004ec	              0xc3	                                     ret	       154	list.h	FUNCTION_99
read_input_file	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,3:ELSE,1:CALL,7	42
0x40020cb	              0x55	                                push rbp	       747	trailer.c	FUNCTION_37
0x40020cc	          0x4889e5	                            mov rbp, rsp	       747	trailer.c	FUNCTION_37
0x40020cf	        0x4883ec10	                           sub rsp, 0x10	       747	trailer.c	FUNCTION_37
0x40020d3	        0x48897df8	                mov qword [rbp - 8], rdi	       747	trailer.c	FUNCTION_37
0x40020d7	        0x488975f0	             mov qword [rbp - 0x10], rsi	       747	trailer.c	FUNCTION_37
0x40020db	      0x48837df000	               cmp qword [rbp - 0x10], 0	       748	trailer.c	FUNCTION_37	IF_1
0x40020e0	            0x743e	                            je 0x4002120	       748	trailer.c	FUNCTION_37	IF_1
0x40020e2	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020e6	        0x488b45f8	                mov rax, qword [rbp - 8]	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020ea	      0xba00000000	                              mov edx, 0	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020ef	          0x4889ce	                            mov rsi, rcx	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020f2	          0x4889c7	                            mov rdi, rax	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020f5	      0xe800000000	                          call 0x40020fa	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020fa	          0x4885c0	                           test rax, rax	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020fd	            0x7961	                           jns 0x4002160	       749	trailer.c	FUNCTION_37	IF_1	IF_2	CALL_1
0x40020ff	      0xbf00000000	                              mov edi, 0	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002104	      0xe8e4e3ffff	                               call sym.	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002109	          0x4889c2	                            mov rdx, rax	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x400210c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002110	          0x4889c6	                            mov rsi, rax	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002113	          0x4889d7	                            mov rdi, rdx	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002116	      0xb800000000	                              mov eax, 0	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x400211b	      0xe800000000	                          call 0x4002120	       750	trailer.c	FUNCTION_37	IF_1	CALL_3
0x4002120	    0x488b05000000	            mov rax, qword [0x04002127] 	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002127	          0x4889c7	                            mov rdi, rax	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x400212a	      0xe800000000	                          call 0x400212f	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x400212f	            0x89c1	                            mov ecx, eax	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002131	        0x488b45f8	                mov rax, qword [rbp - 8]	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002135	      0xba00000000	                              mov edx, 0	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x400213a	            0x89ce	                            mov esi, ecx	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x400213c	          0x4889c7	                            mov rdi, rax	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x400213f	      0xe800000000	                          call 0x4002144	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002144	          0x4885c0	                           test rax, rax	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002147	            0x7917	                           jns 0x4002160	       752	trailer.c	FUNCTION_37	ELSE_1	IF_3	CALL_5
0x4002149	      0xbf00000000	                              mov edi, 0	       753	trailer.c	FUNCTION_37	ELSE_1	CALL_7
0x400214e	      0xe89ae3ffff	                               call sym.	       753	trailer.c	FUNCTION_37	ELSE_1	CALL_7
0x4002153	          0x4889c7	                            mov rdi, rax	       753	trailer.c	FUNCTION_37	ELSE_1	CALL_7
0x4002156	      0xb800000000	                              mov eax, 0	       753	trailer.c	FUNCTION_37	ELSE_1	CALL_7
0x400215b	      0xe800000000	                          call 0x4002160	       753	trailer.c	FUNCTION_37	ELSE_1	CALL_7
0x4002160	              0x90	                                     nop	       755	trailer.c	FUNCTION_37
0x4002161	              0xc9	                                   leave	       755	trailer.c	FUNCTION_37
0x4002162	              0xc3	                                     ret	       755	trailer.c	FUNCTION_37
create_in_place_tempfile	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,5:ELSE,0:CALL,15	100
0x40029d0	              0x55	                                push rbp	      1001	trailer.c	FUNCTION_47
0x40029d1	          0x4889e5	                            mov rbp, rsp	      1001	trailer.c	FUNCTION_47
0x40029d4	    0x4881ece00000	                           sub rsp, 0xe0	      1001	trailer.c	FUNCTION_47
0x40029db	    0x4889bd28ffff	             mov qword [rbp - 0xd8], rdi	      1001	trailer.c	FUNCTION_47
0x40029e2	    0x64488b042528	                mov rax, qword fs:[0x28]	      1001	trailer.c	FUNCTION_47
0x40029eb	        0x488945f8	                mov qword [rbp - 8], rax	      1001	trailer.c	FUNCTION_47
0x40029ef	            0x31c0	                            xor eax, eax	      1001	trailer.c	FUNCTION_47
0x40029f1	    0x48c78540ffff	               mov qword [rbp - 0xc0], 0	      1003	trailer.c	FUNCTION_47
0x40029fc	    0x48c78548ffff	               mov qword [rbp - 0xb8], 0	      1003	trailer.c	FUNCTION_47
0x4002a07	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	      1003	trailer.c	FUNCTION_47
0x4002a12	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a19	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a20	          0x4889d6	                            mov rsi, rdx	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a23	          0x4889c7	                            mov rdi, rax	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a26	      0xe800000000	                          call 0x4002a2b	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a2b	            0x85c0	                           test eax, eax	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a2d	            0x7424	                            je 0x4002a53	      1007	trailer.c	FUNCTION_47	IF_1
0x4002a2f	      0xbf00000000	                              mov edi, 0	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a34	      0xe8b4daffff	                               call sym.	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a39	          0x4889c2	                            mov rdx, rax	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a3c	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a43	          0x4889c6	                            mov rsi, rax	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a46	          0x4889d7	                            mov rdi, rdx	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a49	      0xb800000000	                              mov eax, 0	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a4e	      0xe800000000	                          call 0x4002a53	      1008	trailer.c	FUNCTION_47	CALL_2
0x4002a53	    0x8b8578ffffff	             mov eax, dword [rbp - 0x88]	      1009	trailer.c	FUNCTION_47	IF_2	CALL_3
0x4002a59	      0x2500f00000	                         and eax, 0xf000	      1009	trailer.c	FUNCTION_47	IF_2	CALL_3
0x4002a5e	      0x3d00800000	                         cmp eax, 0x8000	      1009	trailer.c	FUNCTION_47	IF_2	CALL_3
0x4002a63	            0x7424	                            je 0x4002a89	      1009	trailer.c	FUNCTION_47	IF_2	CALL_3
0x4002a65	      0xbf00000000	                              mov edi, 0	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a6a	      0xe87edaffff	                               call sym.	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a6f	          0x4889c2	                            mov rdx, rax	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a72	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a79	          0x4889c6	                            mov rsi, rax	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a7c	          0x4889d7	                            mov rdi, rdx	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a7f	      0xb800000000	                              mov eax, 0	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a84	      0xe800000000	                          call 0x4002a89	      1010	trailer.c	FUNCTION_47	CALL_5
0x4002a89	    0x8b8578ffffff	             mov eax, dword [rbp - 0x88]	      1011	trailer.c	FUNCTION_47	IF_3
0x4002a8f	      0x2580000000	                           and eax, 0x80	      1011	trailer.c	FUNCTION_47	IF_3
0x4002a94	            0x85c0	                           test eax, eax	      1011	trailer.c	FUNCTION_47	IF_3
0x4002a96	            0x7524	                           jne 0x4002abc	      1011	trailer.c	FUNCTION_47	IF_3
0x4002a98	      0xbf00000000	                              mov edi, 0	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002a9d	      0xe84bdaffff	                               call sym.	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002aa2	          0x4889c2	                            mov rdx, rax	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002aa5	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002aac	          0x4889c6	                            mov rsi, rax	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002aaf	          0x4889d7	                            mov rdi, rdx	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002ab2	      0xb800000000	                              mov eax, 0	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002ab7	      0xe800000000	                          call 0x4002abc	      1012	trailer.c	FUNCTION_47	CALL_7
0x4002abc	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1015	trailer.c	FUNCTION_47	CALL_8
0x4002ac3	      0xbe2f000000	                           mov esi, 0x2f	      1015	trailer.c	FUNCTION_47	CALL_8
0x4002ac8	          0x4889c7	                            mov rdi, rax	      1015	trailer.c	FUNCTION_47	CALL_8
0x4002acb	      0xe800000000	                          call 0x4002ad0	      1015	trailer.c	FUNCTION_47	CALL_8
0x4002ad0	    0x48898530ffff	             mov qword [rbp - 0xd0], rax	      1015	trailer.c	FUNCTION_47	CALL_8
0x4002ad7	    0x4883bd30ffff	               cmp qword [rbp - 0xd0], 0	      1016	trailer.c	FUNCTION_47	IF_4
0x4002adf	            0x7434	                            je 0x4002b15	      1016	trailer.c	FUNCTION_47	IF_4
0x4002ae1	    0x488b9530ffff	             mov rdx, qword [rbp - 0xd0]	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002ae8	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002aef	          0x4829c2	                            sub rdx, rax	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002af2	          0x4889d0	                            mov rax, rdx	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002af5	        0x4883c001	                              add rax, 1	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002af9	          0x4889c2	                            mov rdx, rax	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002afc	    0x488b8d28ffff	             mov rcx, qword [rbp - 0xd8]	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002b03	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002b0a	          0x4889ce	                            mov rsi, rcx	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002b0d	          0x4889c7	                            mov rdi, rax	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002b10	      0xe800000000	                          call 0x4002b15	      1017	trailer.c	FUNCTION_47	CALL_9
0x4002b15	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	      1018	trailer.c	FUNCTION_47	CALL_10
0x4002b1c	      0xbe00000000	                              mov esi, 0	      1018	trailer.c	FUNCTION_47	CALL_10
0x4002b21	          0x4889c7	                            mov rdi, rax	      1018	trailer.c	FUNCTION_47	CALL_10
0x4002b24	      0xe845d8ffff	                  call sym.strbuf_addstr	      1018	trailer.c	FUNCTION_47	CALL_10
0x4002b29	    0x8b8578ffffff	             mov eax, dword [rbp - 0x88]	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b2f	            0x89c2	                            mov edx, eax	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b31	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b38	            0x89d6	                            mov esi, edx	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b3a	          0x4889c7	                            mov rdi, rax	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b3d	      0xe800000000	                          call 0x4002b42	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b42	    0x488905000000	            mov qword [0x04002b49], rax 	      1020	trailer.c	FUNCTION_47	CALL_11
0x4002b49	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	      1021	trailer.c	FUNCTION_47	CALL_12
0x4002b50	          0x4889c7	                            mov rdi, rax	      1021	trailer.c	FUNCTION_47	CALL_12
0x4002b53	      0xe800000000	                          call 0x4002b58	      1021	trailer.c	FUNCTION_47	CALL_12
0x4002b58	    0x488b05000000	            mov rax, qword [0x04002b5f] 	      1022	trailer.c	FUNCTION_47	CALL_13
0x4002b5f	      0xbe00000000	                              mov esi, 0	      1022	trailer.c	FUNCTION_47	CALL_13
0x4002b64	          0x4889c7	                            mov rdi, rax	      1022	trailer.c	FUNCTION_47	CALL_13
0x4002b67	      0xe800000000	                          call 0x4002b6c	      1022	trailer.c	FUNCTION_47	CALL_13
0x4002b6c	    0x48898538ffff	             mov qword [rbp - 0xc8], rax	      1022	trailer.c	FUNCTION_47	CALL_13
0x4002b73	    0x4883bd38ffff	               cmp qword [rbp - 0xc8], 0	      1023	trailer.c	FUNCTION_47	IF_5
0x4002b7b	            0x7517	                           jne 0x4002b94	      1023	trailer.c	FUNCTION_47	IF_5
0x4002b7d	      0xbf00000000	                              mov edi, 0	      1024	trailer.c	FUNCTION_47	CALL_15
0x4002b82	      0xe866d9ffff	                               call sym.	      1024	trailer.c	FUNCTION_47	CALL_15
0x4002b87	          0x4889c7	                            mov rdi, rax	      1024	trailer.c	FUNCTION_47	CALL_15
0x4002b8a	      0xb800000000	                              mov eax, 0	      1024	trailer.c	FUNCTION_47	CALL_15
0x4002b8f	      0xe800000000	                          call 0x4002b94	      1024	trailer.c	FUNCTION_47	CALL_15
0x4002b94	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	      1026	trailer.c	FUNCTION_47
0x4002b9b	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1027	trailer.c	FUNCTION_47
0x4002b9f	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1027	trailer.c	FUNCTION_47
0x4002ba8	            0x7405	                            je 0x4002baf	      1027	trailer.c	FUNCTION_47
0x4002baa	      0xe800000000	                          call 0x4002baf	      1027	trailer.c	FUNCTION_47
0x4002baf	              0xc9	                                   leave	      1027	trailer.c	FUNCTION_47
0x4002bb0	              0xc3	                                     ret	      1027	trailer.c	FUNCTION_47
git_trailer_default_config	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,9:ELSE,3:CALL,16	108
0x400154d	              0x55	                                push rbp	       474	trailer.c	FUNCTION_27
0x400154e	          0x4889e5	                            mov rbp, rsp	       474	trailer.c	FUNCTION_27
0x4001551	        0x4883ec40	                           sub rsp, 0x40	       474	trailer.c	FUNCTION_27
0x4001555	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       474	trailer.c	FUNCTION_27
0x4001559	        0x488975d0	             mov qword [rbp - 0x30], rsi	       474	trailer.c	FUNCTION_27
0x400155d	        0x488955c8	             mov qword [rbp - 0x38], rdx	       474	trailer.c	FUNCTION_27
0x4001561	    0x64488b042528	                mov rax, qword fs:[0x28]	       474	trailer.c	FUNCTION_27
0x400156a	        0x488945f8	                mov qword [rbp - 8], rax	       474	trailer.c	FUNCTION_27
0x400156e	            0x31c0	                            xor eax, eax	       474	trailer.c	FUNCTION_27
0x4001570	        0x488d55e8	                   lea rdx, [rbp - 0x18]	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001574	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001578	      0xbe00000000	                              mov esi, 0	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x400157d	          0x4889c7	                            mov rdi, rax	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001580	      0xe8c6eaffff	                    call sym.skip_prefix	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001585	            0x85c0	                           test eax, eax	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001587	            0x750a	                           jne 0x4001593	       477	trailer.c	FUNCTION_27	IF_1	CALL_1
0x4001589	      0xb800000000	                              mov eax, 0	       478	trailer.c	FUNCTION_27	IF_1
0x400158e	      0xe94b010000	                           jmp 0x40016de	       478	trailer.c	FUNCTION_27	IF_1
0x4001593	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       480	trailer.c	FUNCTION_27	CALL_2
0x4001597	      0xbe2e000000	                           mov esi, 0x2e	       480	trailer.c	FUNCTION_27	CALL_2
0x400159c	          0x4889c7	                            mov rdi, rax	       480	trailer.c	FUNCTION_27	CALL_2
0x400159f	      0xe800000000	                          call 0x40015a4	       480	trailer.c	FUNCTION_27	CALL_2
0x40015a4	        0x488945f0	             mov qword [rbp - 0x10], rax	       480	trailer.c	FUNCTION_27	CALL_2
0x40015a8	      0x48837df000	               cmp qword [rbp - 0x10], 0	       481	trailer.c	FUNCTION_27	IF_2
0x40015ad	     0xf8526010000	                           jne 0x40016d9	       481	trailer.c	FUNCTION_27	IF_2
0x40015b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015b7	      0xbe00000000	                              mov esi, 0	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015bc	          0x4889c7	                            mov rdi, rax	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015bf	      0xe800000000	                          call 0x40015c4	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015c4	            0x85c0	                           test eax, eax	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015c6	            0x7543	                           jne 0x400160b	       482	trailer.c	FUNCTION_27	IF_2	IF_3	CALL_3
0x40015c8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015cc	          0x4889c6	                            mov rsi, rax	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015cf	      0xbf00000000	                              mov edi, 0	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015d4	      0xe800000000	                          call 0x40015d9	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015d9	            0x85c0	                           test eax, eax	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015db	     0xf89f8000000	                           jns 0x40016d9	       483	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_4
0x40015e1	      0xbf00000000	                              mov edi, 0	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015e6	      0xe802efffff	                               call sym.	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015eb	          0x4889c1	                            mov rcx, rax	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015ee	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015f2	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015f6	          0x4889c6	                            mov rsi, rax	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015f9	          0x4889cf	                            mov rdi, rcx	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x40015fc	      0xb800000000	                              mov eax, 0	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x4001601	      0xe800000000	                          call 0x4001606	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x4001606	      0xe9ce000000	                           jmp 0x40016d9	       485	trailer.c	FUNCTION_27	IF_2	IF_3	IF_4	CALL_6
0x400160b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x400160f	      0xbe00000000	                              mov esi, 0	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x4001614	          0x4889c7	                            mov rdi, rax	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x4001617	      0xe800000000	                          call 0x400161c	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x400161c	            0x85c0	                           test eax, eax	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x400161e	            0x7540	                           jne 0x4001660	       487	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	CALL_7
0x4001620	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x4001624	          0x4889c6	                            mov rsi, rax	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x4001627	      0xbf00000000	                              mov edi, 0	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x400162c	      0xe800000000	                          call 0x4001631	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x4001631	            0x85c0	                           test eax, eax	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x4001633	     0xf89a0000000	                           jns 0x40016d9	       488	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_8
0x4001639	      0xbf00000000	                              mov edi, 0	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x400163e	      0xe8aaeeffff	                               call sym.	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001643	          0x4889c1	                            mov rcx, rax	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001646	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x400164a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x400164e	          0x4889c6	                            mov rsi, rax	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001651	          0x4889cf	                            mov rdi, rcx	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001654	      0xb800000000	                              mov eax, 0	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001659	      0xe800000000	                          call 0x400165e	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x400165e	            0xeb79	                           jmp 0x40016d9	       490	trailer.c	FUNCTION_27	IF_2	ELSE_1	IF_5	IF_6	CALL_10
0x4001660	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x4001664	      0xbe00000000	                              mov esi, 0	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x4001669	          0x4889c7	                            mov rdi, rax	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x400166c	      0xe800000000	                          call 0x4001671	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x4001671	            0x85c0	                           test eax, eax	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x4001673	            0x753c	                           jne 0x40016b1	       492	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	CALL_11
0x4001675	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x4001679	          0x4889c6	                            mov rsi, rax	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x400167c	      0xbf00000000	                              mov edi, 0	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x4001681	      0xe800000000	                          call 0x4001686	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x4001686	            0x85c0	                           test eax, eax	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x4001688	            0x794f	                           jns 0x40016d9	       493	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_12
0x400168a	      0xbf00000000	                              mov edi, 0	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x400168f	      0xe859eeffff	                               call sym.	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x4001694	          0x4889c1	                            mov rcx, rax	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x4001697	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x400169b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x400169f	          0x4889c6	                            mov rsi, rax	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x40016a2	          0x4889cf	                            mov rdi, rcx	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x40016a5	      0xb800000000	                              mov eax, 0	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x40016aa	      0xe800000000	                          call 0x40016af	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x40016af	            0xeb28	                           jmp 0x40016d9	       495	trailer.c	FUNCTION_27	IF_2	ELSE_2	IF_7	IF_8	CALL_14
0x40016b1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016b5	      0xbe00000000	                              mov esi, 0	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016ba	          0x4889c7	                            mov rdi, rax	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016bd	      0xe800000000	                          call 0x40016c2	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016c2	            0x85c0	                           test eax, eax	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016c4	            0x7513	                           jne 0x40016d9	       497	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_15
0x40016c6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       498	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_16
0x40016ca	          0x4889c7	                            mov rdi, rax	       498	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_16
0x40016cd	      0xe800000000	                          call 0x40016d2	       498	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_16
0x40016d2	    0x488905000000	            mov qword [0x040016d9], rax 	       498	trailer.c	FUNCTION_27	IF_2	ELSE_3	IF_9	CALL_16
0x40016d9	      0xb800000000	                              mov eax, 0	       501	trailer.c	FUNCTION_27
0x40016de	        0x488b4df8	                mov rcx, qword [rbp - 8]	       502	trailer.c	FUNCTION_27
0x40016e2	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       502	trailer.c	FUNCTION_27
0x40016eb	            0x7405	                            je 0x40016f2	       502	trailer.c	FUNCTION_27
0x40016ed	      0xe800000000	                          call 0x40016f2	       502	trailer.c	FUNCTION_27
0x40016f2	              0xc9	                                   leave	       502	trailer.c	FUNCTION_27
0x40016f3	              0xc3	                                     ret	       502	trailer.c	FUNCTION_27
trailer_set_if_exists	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,6:ELSE,6:CALL,5	60
0x40012c1	              0x55	                                push rbp	       398	trailer.c	ELSE_5	FUNCTION_23
0x40012c2	          0x4889e5	                            mov rbp, rsp	       398	trailer.c	ELSE_5	FUNCTION_23
0x40012c5	        0x4883ec10	                           sub rsp, 0x10	       398	trailer.c	ELSE_5	FUNCTION_23
0x40012c9	        0x48897df8	                mov qword [rbp - 8], rdi	       398	trailer.c	ELSE_5	FUNCTION_23
0x40012cd	        0x488975f0	             mov qword [rbp - 0x10], rsi	       398	trailer.c	ELSE_5	FUNCTION_23
0x40012d1	      0x48837df000	               cmp qword [rbp - 0x10], 0	       399	trailer.c	ELSE_5	FUNCTION_23	IF_1
0x40012d6	            0x750f	                           jne 0x40012e7	       399	trailer.c	ELSE_5	FUNCTION_23	IF_1
0x40012d8	        0x488b45f8	                mov rax, qword [rbp - 8]	       400	trailer.c	ELSE_5	FUNCTION_23	IF_1
0x40012dc	    0xc70000000000	                      mov dword [rax], 0	       400	trailer.c	ELSE_5	FUNCTION_23	IF_1
0x40012e2	      0xe9af000000	                           jmp 0x4001396	       400	trailer.c	ELSE_5	FUNCTION_23	IF_1
0x40012e7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012eb	          0x4889c6	                            mov rsi, rax	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012ee	      0xbf00000000	                              mov edi, 0	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012f3	      0xe800000000	                          call 0x40012f8	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012f8	            0x85c0	                           test eax, eax	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012fa	            0x750f	                           jne 0x400130b	       401	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2	CALL_1
0x40012fc	        0x488b45f8	                mov rax, qword [rbp - 8]	       402	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2
0x4001300	    0xc70002000000	                      mov dword [rax], 2	       402	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2
0x4001306	      0xe98b000000	                           jmp 0x4001396	       402	trailer.c	ELSE_5	FUNCTION_23	ELSE_1	IF_2
0x400130b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x400130f	          0x4889c6	                            mov rsi, rax	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x4001312	      0xbf00000000	                              mov edi, 0	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x4001317	      0xe800000000	                          call 0x400131c	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x400131c	            0x85c0	                           test eax, eax	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x400131e	            0x750c	                           jne 0x400132c	       403	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3	CALL_2
0x4001320	        0x488b45f8	                mov rax, qword [rbp - 8]	       404	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3
0x4001324	    0xc70001000000	                      mov dword [rax], 1	       404	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3
0x400132a	            0xeb6a	                           jmp 0x4001396	       404	trailer.c	ELSE_5	FUNCTION_23	ELSE_2	IF_3
0x400132c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x4001330	          0x4889c6	                            mov rsi, rax	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x4001333	      0xbf00000000	                              mov edi, 0	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x4001338	      0xe800000000	                          call 0x400133d	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x400133d	            0x85c0	                           test eax, eax	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x400133f	            0x750c	                           jne 0x400134d	       405	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4	CALL_3
0x4001341	        0x488b45f8	                mov rax, qword [rbp - 8]	       406	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4
0x4001345	    0xc70003000000	                      mov dword [rax], 3	       406	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4
0x400134b	            0xeb49	                           jmp 0x4001396	       406	trailer.c	ELSE_5	FUNCTION_23	ELSE_3	IF_4
0x400134d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x4001351	          0x4889c6	                            mov rsi, rax	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x4001354	      0xbf00000000	                              mov edi, 0	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x4001359	      0xe800000000	                          call 0x400135e	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x400135e	            0x85c0	                           test eax, eax	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x4001360	            0x750c	                           jne 0x400136e	       407	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5	CALL_4
0x4001362	        0x488b45f8	                mov rax, qword [rbp - 8]	       408	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5
0x4001366	    0xc70004000000	                      mov dword [rax], 4	       408	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5
0x400136c	            0xeb28	                           jmp 0x4001396	       408	trailer.c	ELSE_5	FUNCTION_23	ELSE_4	IF_5
0x400136e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x4001372	          0x4889c6	                            mov rsi, rax	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x4001375	      0xbf00000000	                              mov edi, 0	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x400137a	      0xe800000000	                          call 0x400137f	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x400137f	            0x85c0	                           test eax, eax	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x4001381	            0x750c	                           jne 0x400138f	       409	trailer.c	FUNCTION_23	IF_6	CALL_5
0x4001383	        0x488b45f8	                mov rax, qword [rbp - 8]	       410	trailer.c	FUNCTION_23	IF_6	ELSE_5
0x4001387	    0xc70005000000	                      mov dword [rax], 5	       410	trailer.c	FUNCTION_23	IF_6	ELSE_5
0x400138d	            0xeb07	                           jmp 0x4001396	       410	trailer.c	FUNCTION_23	IF_6	ELSE_5
0x400138f	      0xb8ffffffff	                     mov eax, 0xffffffff	       412	trailer.c	FUNCTION_23	ELSE_5	ELSE_6
0x4001394	            0xeb05	                           jmp 0x400139b	       412	trailer.c	FUNCTION_23	ELSE_5	ELSE_6
0x4001396	      0xb800000000	                              mov eax, 0	       413	trailer.c	FUNCTION_23	ELSE_5	ELSE_6
0x400139b	              0xc9	                                   leave	       414	trailer.c	FUNCTION_23	ELSE_5	ELSE_6
0x400139c	              0xc3	                                     ret	       414	trailer.c	FUNCTION_23	ELSE_5	ELSE_6
free_all	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	28
0x4002974	              0x55	                                push rbp	       990	trailer.c	FUNCTION_46
0x4002975	          0x4889e5	                            mov rbp, rsp	       990	trailer.c	FUNCTION_46
0x4002978	        0x4883ec20	                           sub rsp, 0x20	       990	trailer.c	FUNCTION_46
0x400297c	        0x48897de8	             mov qword [rbp - 0x18], rdi	       990	trailer.c	FUNCTION_46
0x4002980	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       992	trailer.c	FUNCTION_46
0x4002984	          0x488b00	                    mov rax, qword [rax]	       992	trailer.c	FUNCTION_46
0x4002987	        0x488945f0	             mov qword [rbp - 0x10], rax	       992	trailer.c	FUNCTION_46
0x400298b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       992	trailer.c	FUNCTION_46
0x400298f	          0x488b00	                    mov rax, qword [rax]	       992	trailer.c	FUNCTION_46
0x4002992	        0x488945f8	                mov qword [rbp - 8], rax	       992	trailer.c	FUNCTION_46
0x4002996	            0xeb2b	                           jmp 0x40029c3	       992	trailer.c	FUNCTION_46
0x4002998	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       993	trailer.c	FUNCTION_46	CALL_1
0x400299c	          0x4889c7	                            mov rdi, rax	       993	trailer.c	FUNCTION_46	CALL_1
0x400299f	      0xe805dbffff	                       call sym.list_del	       993	trailer.c	FUNCTION_46	CALL_1
0x40029a4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       994	trailer.c	FUNCTION_46	CALL_2
0x40029a8	          0x4889c7	                            mov rdi, rax	       994	trailer.c	FUNCTION_46	CALL_2
0x40029ab	      0xe84bdeffff	              call sym.free_trailer_item	       994	trailer.c	FUNCTION_46	CALL_2
0x40029b0	        0x488b45f8	                mov rax, qword [rbp - 8]	       992	trailer.c	FUNCTION_46
0x40029b4	        0x488945f0	             mov qword [rbp - 0x10], rax	       992	trailer.c	FUNCTION_46
0x40029b8	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       992	trailer.c	FUNCTION_46
0x40029bc	          0x488b00	                    mov rax, qword [rax]	       992	trailer.c	FUNCTION_46
0x40029bf	        0x488945f8	                mov qword [rbp - 8], rax	       992	trailer.c	FUNCTION_46
0x40029c3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       992	trailer.c	FUNCTION_46
0x40029c7	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	       992	trailer.c	FUNCTION_46
0x40029cb	            0x75cb	                           jne 0x4002998	       992	trailer.c	FUNCTION_46
0x40029cd	              0x90	                                     nop	       996	trailer.c	FUNCTION_46
0x40029ce	              0xc9	                                   leave	       996	trailer.c	FUNCTION_46
0x40029cf	              0xc3	                                     ret	       996	trailer.c	FUNCTION_46
apply_arg_if_missing	WHILE,0:FOR,0:SWITCH,1:functions,0:DO,0:IF,1:ELSE,1:CALL,7	52
0x4000fb6	              0x55	                                push rbp	       308	trailer.c	FUNCTION_19
0x4000fb7	          0x4889e5	                            mov rbp, rsp	       308	trailer.c	FUNCTION_19
0x4000fba	        0x4883ec20	                           sub rsp, 0x20	       308	trailer.c	FUNCTION_19
0x4000fbe	        0x48897de8	             mov qword [rbp - 0x18], rdi	       308	trailer.c	FUNCTION_19
0x4000fc2	        0x488975e0	             mov qword [rbp - 0x20], rsi	       308	trailer.c	FUNCTION_19
0x4000fc6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fca	          0x8b4040	            mov eax, dword [rax + 0x40] 	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fcd	          0x83f801	                              cmp eax, 1	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fd0	            0x7413	                            je 0x4000fe5	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fd2	          0x83f802	                              cmp eax, 2	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fd5	            0x7571	                           jne 0x4001048	       312	trailer.c	FUNCTION_19	SWITCH_1
0x4000fd7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       314	trailer.c	FUNCTION_19	SWITCH_1	CALL_1
0x4000fdb	          0x4889c7	                            mov rdi, rax	       314	trailer.c	FUNCTION_19	SWITCH_1	CALL_1
0x4000fde	      0xe853f8ffff	                  call sym.free_arg_item	       314	trailer.c	FUNCTION_19	SWITCH_1	CALL_1
0x4000fe3	            0xeb7b	                           jmp 0x4001060	       315	trailer.c	FUNCTION_19	SWITCH_1
0x4000fe5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       317	trailer.c	FUNCTION_19	SWITCH_1
0x4000fe9	          0x8b4038	            mov eax, dword [rax + 0x38] 	       317	trailer.c	FUNCTION_19	SWITCH_1
0x4000fec	          0x8945f4	              mov dword [rbp - 0xc], eax	       317	trailer.c	FUNCTION_19	SWITCH_1
0x4000fef	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       318	trailer.c	FUNCTION_19	SWITCH_1	CALL_2
0x4000ff3	          0x4889c6	                            mov rsi, rax	       318	trailer.c	FUNCTION_19	SWITCH_1	CALL_2
0x4000ff6	      0xbf00000000	                              mov edi, 0	       318	trailer.c	FUNCTION_19	SWITCH_1	CALL_2
0x4000ffb	      0xe888fdffff	             call sym.apply_item_command	       318	trailer.c	FUNCTION_19	SWITCH_1	CALL_2
0x4001000	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       319	trailer.c	FUNCTION_19	SWITCH_1	CALL_3
0x4001004	          0x4889c7	                            mov rdi, rax	       319	trailer.c	FUNCTION_19	SWITCH_1	CALL_3
0x4001007	      0xe84cfaffff	               call sym.trailer_from_arg	       319	trailer.c	FUNCTION_19	SWITCH_1	CALL_3
0x400100c	        0x488945f8	                mov qword [rbp - 8], rax	       319	trailer.c	FUNCTION_19	SWITCH_1	CALL_3
0x4001010	          0x8b45f4	              mov eax, dword [rbp - 0xc]	       320	trailer.c	FUNCTION_19	SWITCH_1	IF_1	CALL_4
0x4001013	            0x89c7	                            mov edi, eax	       320	trailer.c	FUNCTION_19	SWITCH_1	IF_1	CALL_4
0x4001015	      0xe849f5ffff	                   call sym.after_or_end	       320	trailer.c	FUNCTION_19	SWITCH_1	IF_1	CALL_4
0x400101a	            0x85c0	                           test eax, eax	       320	trailer.c	FUNCTION_19	SWITCH_1	IF_1	CALL_4
0x400101c	            0x7415	                            je 0x4001033	       320	trailer.c	FUNCTION_19	SWITCH_1	IF_1	CALL_4
0x400101e	        0x488b45f8	                mov rax, qword [rbp - 8]	       321	trailer.c	FUNCTION_19	SWITCH_1	CALL_5
0x4001022	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       321	trailer.c	FUNCTION_19	SWITCH_1	CALL_5
0x4001026	          0x4889d6	                            mov rsi, rdx	       321	trailer.c	FUNCTION_19	SWITCH_1	CALL_5
0x4001029	          0x4889c7	                            mov rdi, rax	       321	trailer.c	FUNCTION_19	SWITCH_1	CALL_5
0x400102c	      0xe80df4ffff	                  call sym.list_add_tail	       321	trailer.c	FUNCTION_19	SWITCH_1	CALL_5
0x4001031	            0xeb2d	                           jmp 0x4001060	       324	trailer.c	FUNCTION_19	SWITCH_1
0x4001033	        0x488b45f8	                mov rax, qword [rbp - 8]	       323	trailer.c	FUNCTION_19	SWITCH_1	CALL_6
0x4001037	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       323	trailer.c	FUNCTION_19	SWITCH_1	CALL_6
0x400103b	          0x4889d6	                            mov rsi, rdx	       323	trailer.c	FUNCTION_19	SWITCH_1	CALL_6
0x400103e	          0x4889c7	                            mov rdi, rax	       323	trailer.c	FUNCTION_19	SWITCH_1	CALL_6
0x4001041	      0xe8b5f3ffff	                       call sym.list_add	       323	trailer.c	FUNCTION_19	SWITCH_1	CALL_6
0x4001046	            0xeb18	                           jmp 0x4001060	       324	trailer.c	FUNCTION_19	SWITCH_1
0x4001048	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       327	trailer.c	FUNCTION_19	SWITCH_1
0x400104c	          0x8b4040	            mov eax, dword [rax + 0x40] 	       327	trailer.c	FUNCTION_19	SWITCH_1
0x400104f	            0x89c6	                            mov esi, eax	       326	trailer.c	FUNCTION_19	SWITCH_1	CALL_7
0x4001051	      0xbf00000000	                              mov edi, 0	       326	trailer.c	FUNCTION_19	SWITCH_1	CALL_7
0x4001056	      0xb800000000	                              mov eax, 0	       326	trailer.c	FUNCTION_19	SWITCH_1	CALL_7
0x400105b	      0xe800000000	                          call 0x4001060	       326	trailer.c	FUNCTION_19	SWITCH_1	CALL_7
0x4001060	              0x90	                                     nop	       329	trailer.c	FUNCTION_19
0x4001061	              0xc9	                                   leave	       329	trailer.c	FUNCTION_19
0x4001062	              0xc3	                                     ret	       329	trailer.c	FUNCTION_19
print_all	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	46
0x40009c6	              0x55	                                push rbp	       164	trailer.c	FUNCTION_12
0x40009c7	          0x4889e5	                            mov rbp, rsp	       164	trailer.c	FUNCTION_12
0x40009ca	        0x4883ec30	                           sub rsp, 0x30	       164	trailer.c	FUNCTION_12
0x40009ce	        0x48897de8	             mov qword [rbp - 0x18], rdi	       164	trailer.c	FUNCTION_12
0x40009d2	        0x488975e0	             mov qword [rbp - 0x20], rsi	       164	trailer.c	FUNCTION_12
0x40009d6	        0x488955d8	             mov qword [rbp - 0x28], rdx	       164	trailer.c	FUNCTION_12
0x40009da	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       167	trailer.c	FUNCTION_12
0x40009de	          0x488b00	                    mov rax, qword [rax]	       167	trailer.c	FUNCTION_12
0x40009e1	        0x488945f0	             mov qword [rbp - 0x10], rax	       167	trailer.c	FUNCTION_12
0x40009e5	            0xeb64	                           jmp 0x4000a4b	       167	trailer.c	FUNCTION_12
0x40009e7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       168	trailer.c	FUNCTION_12
0x40009eb	        0x488945f8	                mov qword [rbp - 8], rax	       168	trailer.c	FUNCTION_12
0x40009ef	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x40009f3	          0x8b4004	                mov eax, dword [rax + 4]	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x40009f6	            0x85c0	                           test eax, eax	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x40009f8	            0x740f	                            je 0x4000a09	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x40009fa	        0x488b45f8	                mov rax, qword [rbp - 8]	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x40009fe	        0x488b4018	            mov rax, qword [rax + 0x18] 	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a02	           0xfb600	                   movzx eax, byte [rax]	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a05	            0x84c0	                             test al, al	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a07	            0x7437	                            je 0x4000a40	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a09	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       170	trailer.c	FUNCTION_12	IF_1
0x4000a0d	          0x8b4008	                mov eax, dword [rax + 8]	       170	trailer.c	FUNCTION_12	IF_1
0x4000a10	            0x85c0	                           test eax, eax	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a12	            0x740d	                            je 0x4000a21	       169	trailer.c	FUNCTION_12	IF_1	CALL_1
0x4000a14	        0x488b45f8	                mov rax, qword [rbp - 8]	       170	trailer.c	FUNCTION_12	IF_1
0x4000a18	        0x488b4010	            mov rax, qword [rax + 0x10] 	       170	trailer.c	FUNCTION_12	IF_1
0x4000a1c	          0x4885c0	                           test rax, rax	       170	trailer.c	FUNCTION_12	IF_1
0x4000a1f	            0x741f	                            je 0x4000a40	       170	trailer.c	FUNCTION_12	IF_1
0x4000a21	        0x488b45f8	                mov rax, qword [rbp - 8]	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a25	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a29	        0x488b45f8	                mov rax, qword [rbp - 8]	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a2d	        0x488b4810	            mov rcx, qword [rax + 0x10] 	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a31	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a35	          0x4889ce	                            mov rsi, rcx	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a38	          0x4889c7	                            mov rdi, rax	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a3b	      0xe8cafeffff	                  call sym.print_tok_val	       171	trailer.c	FUNCTION_12	CALL_2
0x4000a40	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       167	trailer.c	FUNCTION_12
0x4000a44	          0x488b00	                    mov rax, qword [rax]	       167	trailer.c	FUNCTION_12
0x4000a47	        0x488945f0	             mov qword [rbp - 0x10], rax	       167	trailer.c	FUNCTION_12
0x4000a4b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       167	trailer.c	FUNCTION_12
0x4000a4f	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	       167	trailer.c	FUNCTION_12
0x4000a53	            0x7592	                           jne 0x40009e7	       167	trailer.c	FUNCTION_12
0x4000a55	              0x90	                                     nop	       173	trailer.c	FUNCTION_12
0x4000a56	              0xc9	                                   leave	       173	trailer.c	FUNCTION_12
0x4000a57	              0xc3	                                     ret	       173	trailer.c	FUNCTION_12
apply_command	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,2:ELSE,1:CALL,9	90
0x4000bab	              0x55	                                push rbp	       220	trailer.c	FUNCTION_16
0x4000bac	          0x4889e5	                            mov rbp, rsp	       220	trailer.c	FUNCTION_16
0x4000baf	              0x53	                                push rbx	       220	trailer.c	FUNCTION_16
0x4000bb0	    0x4881ece80000	                           sub rsp, 0xe8	       220	trailer.c	FUNCTION_16
0x4000bb7	    0x4889bd18ffff	             mov qword [rbp - 0xe8], rdi	       220	trailer.c	FUNCTION_16
0x4000bbe	    0x4889b510ffff	             mov qword [rbp - 0xf0], rsi	       220	trailer.c	FUNCTION_16
0x4000bc5	    0x64488b042528	                mov rax, qword fs:[0x28]	       220	trailer.c	FUNCTION_16
0x4000bce	        0x488945e8	             mov qword [rbp - 0x18], rax	       220	trailer.c	FUNCTION_16
0x4000bd2	            0x31c0	                            xor eax, eax	       220	trailer.c	FUNCTION_16
0x4000bd4	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	       221	trailer.c	FUNCTION_16
0x4000bdf	    0x48c78538ffff	               mov qword [rbp - 0xc8], 0	       221	trailer.c	FUNCTION_16
0x4000bea	    0x48c78540ffff	               mov qword [rbp - 0xc0], 0	       221	trailer.c	FUNCTION_16
0x4000bf5	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       222	trailer.c	FUNCTION_16
0x4000c00	    0x48c78558ffff	               mov qword [rbp - 0xa8], 0	       222	trailer.c	FUNCTION_16
0x4000c0b	    0x48c78560ffff	               mov qword [rbp - 0xa0], 0	       222	trailer.c	FUNCTION_16
0x4000c16	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       223	trailer.c	FUNCTION_16
0x4000c1d	      0xb800000000	                              mov eax, 0	       223	trailer.c	FUNCTION_16
0x4000c22	      0xb90c000000	                            mov ecx, 0xc	       223	trailer.c	FUNCTION_16
0x4000c27	          0x4889d7	                            mov rdi, rdx	       223	trailer.c	FUNCTION_16
0x4000c2a	          0xf348ab	              rep stosq qword [rdi], rax	       223	trailer.c	FUNCTION_16
0x4000c2d	    0x48c78578ffff	               mov qword [rbp - 0x88], 0	       223	trailer.c	FUNCTION_16
0x4000c38	    0x48c745880000	               mov qword [rbp - 0x78], 0	       223	trailer.c	FUNCTION_16
0x4000c40	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       224	trailer.c	FUNCTION_16
0x4000c48	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       224	trailer.c	FUNCTION_16
0x4000c50	    0x488b9518ffff	             mov rdx, qword [rbp - 0xe8]	       227	trailer.c	FUNCTION_16	CALL_1
0x4000c57	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       227	trailer.c	FUNCTION_16	CALL_1
0x4000c5e	          0x4889d6	                            mov rsi, rdx	       227	trailer.c	FUNCTION_16	CALL_1
0x4000c61	          0x4889c7	                            mov rdi, rax	       227	trailer.c	FUNCTION_16	CALL_1
0x4000c64	      0xe805f7ffff	                  call sym.strbuf_addstr	       227	trailer.c	FUNCTION_16	CALL_1
0x4000c69	    0x4883bd10ffff	               cmp qword [rbp - 0xf0], 0	       228	trailer.c	FUNCTION_16	IF_1
0x4000c71	            0x741b	                            je 0x4000c8e	       228	trailer.c	FUNCTION_16	IF_1
0x4000c73	    0x488b9510ffff	             mov rdx, qword [rbp - 0xf0]	       229	trailer.c	FUNCTION_16	CALL_2
0x4000c7a	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       229	trailer.c	FUNCTION_16	CALL_2
0x4000c81	      0xbe00000000	                              mov esi, 0	       229	trailer.c	FUNCTION_16	CALL_2
0x4000c86	          0x4889c7	                            mov rdi, rax	       229	trailer.c	FUNCTION_16	CALL_2
0x4000c89	      0xe8e2faffff	                 call sym.strbuf_replace	       229	trailer.c	FUNCTION_16	CALL_2
0x4000c8e	    0x488b8540ffff	             mov rax, qword [rbp - 0xc0]	       231	trailer.c	FUNCTION_16
0x4000c95	        0x488945d0	             mov qword [rbp - 0x30], rax	       231	trailer.c	FUNCTION_16
0x4000c99	        0x488d45d0	                   lea rax, [rbp - 0x30]	       232	trailer.c	FUNCTION_16
0x4000c9d	    0x48898570ffff	             mov qword [rbp - 0x90], rax	       232	trailer.c	FUNCTION_16
0x4000ca4	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       233	trailer.c	FUNCTION_16
0x4000cac	         0xfb645b8	            movzx eax, byte [rbp - 0x48]	       234	trailer.c	FUNCTION_16
0x4000cb0	          0x83c801	                               or eax, 1	       234	trailer.c	FUNCTION_16
0x4000cb3	          0x8845b8	               mov byte [rbp - 0x48], al	       234	trailer.c	FUNCTION_16
0x4000cb6	         0xfb645b8	            movzx eax, byte [rbp - 0x48]	       235	trailer.c	FUNCTION_16
0x4000cba	          0x83c840	                            or eax, 0x40	       235	trailer.c	FUNCTION_16
0x4000cbd	          0x8845b8	               mov byte [rbp - 0x48], al	       235	trailer.c	FUNCTION_16
0x4000cc0	    0x488d8d50ffff	                   lea rcx, [rbp - 0xb0]	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cc7	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cce	      0xba00040000	                          mov edx, 0x400	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cd3	          0x4889ce	                            mov rsi, rcx	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cd6	          0x4889c7	                            mov rdi, rax	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cd9	      0xe83bf8ffff	                call sym.capture_command	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000cde	            0x85c0	                           test eax, eax	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000ce0	            0x7448	                            je 0x4000d2a	       237	trailer.c	FUNCTION_16	IF_2	CALL_3
0x4000ce2	    0x488b9d40ffff	             mov rbx, qword [rbp - 0xc0]	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000ce9	      0xbf00000000	                              mov edi, 0	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000cee	      0xe8faf7ffff	                               call sym.	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000cf3	          0x4889de	                            mov rsi, rbx	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000cf6	          0x4889c7	                            mov rdi, rax	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000cf9	      0xb800000000	                              mov eax, 0	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000cfe	      0xe800000000	                          call 0x4000d03	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000d03	      0xe838f3ffff	                    call sym.const_error	       238	trailer.c	FUNCTION_16	IF_2	CALL_4
0x4000d08	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	       239	trailer.c	FUNCTION_16	IF_2	CALL_5
0x4000d0f	          0x4889c7	                            mov rdi, rax	       239	trailer.c	FUNCTION_16	IF_2	CALL_5
0x4000d12	      0xe800000000	                          call 0x4000d17	       239	trailer.c	FUNCTION_16	IF_2	CALL_5
0x4000d17	      0xbf00000000	                              mov edi, 0	       240	trailer.c	FUNCTION_16	IF_2	CALL_6
0x4000d1c	      0xe800000000	                          call 0x4000d21	       240	trailer.c	FUNCTION_16	IF_2	CALL_6
0x4000d21	    0x48898528ffff	             mov qword [rbp - 0xd8], rax	       240	trailer.c	FUNCTION_16	IF_2	CALL_6
0x4000d28	            0xeb2a	                           jmp 0x4000d54	       240	trailer.c	FUNCTION_16	IF_2	CALL_6
0x4000d2a	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	       242	trailer.c	FUNCTION_16	ELSE_1	CALL_7
0x4000d31	          0x4889c7	                            mov rdi, rax	       242	trailer.c	FUNCTION_16	ELSE_1	CALL_7
0x4000d34	      0xe800000000	                          call 0x4000d39	       242	trailer.c	FUNCTION_16	ELSE_1	CALL_7
0x4000d39	    0x488d8550ffff	                   lea rax, [rbp - 0xb0]	       243	trailer.c	FUNCTION_16	ELSE_1	CALL_8
0x4000d40	      0xbe00000000	                              mov esi, 0	       243	trailer.c	FUNCTION_16	ELSE_1	CALL_8
0x4000d45	          0x4889c7	                            mov rdi, rax	       243	trailer.c	FUNCTION_16	ELSE_1	CALL_8
0x4000d48	      0xe800000000	                          call 0x4000d4d	       243	trailer.c	FUNCTION_16	ELSE_1	CALL_8
0x4000d4d	    0x48898528ffff	             mov qword [rbp - 0xd8], rax	       243	trailer.c	FUNCTION_16	ELSE_1	CALL_8
0x4000d54	    0x488d8530ffff	                   lea rax, [rbp - 0xd0]	       246	trailer.c	FUNCTION_16	CALL_9
0x4000d5b	          0x4889c7	                            mov rdi, rax	       246	trailer.c	FUNCTION_16	CALL_9
0x4000d5e	      0xe800000000	                          call 0x4000d63	       246	trailer.c	FUNCTION_16	CALL_9
0x4000d63	    0x488b8528ffff	             mov rax, qword [rbp - 0xd8]	       247	trailer.c	FUNCTION_16
0x4000d6a	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       248	trailer.c	FUNCTION_16
0x4000d6e	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       248	trailer.c	FUNCTION_16
0x4000d77	            0x7405	                            je 0x4000d7e	       248	trailer.c	FUNCTION_16
0x4000d79	      0xe800000000	                          call 0x4000d7e	       248	trailer.c	FUNCTION_16
0x4000d7e	    0x4881c4e80000	                           add rsp, 0xe8	       248	trailer.c	FUNCTION_16
0x4000d85	              0x5b	                                 pop rbx	       248	trailer.c	FUNCTION_16
0x4000d86	              0x5d	                                 pop rbp	       248	trailer.c	FUNCTION_16
0x4000d87	              0xc3	                                     ret	       248	trailer.c	FUNCTION_16
ensure_configured	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	19
0x40019cf	              0x55	                                push rbp	       566	trailer.c	FUNCTION_29
0x40019d0	          0x4889e5	                            mov rbp, rsp	       566	trailer.c	FUNCTION_29
0x40019d3	    0x8b0500000000	            mov eax, dword [0x040019d9] 	       567	trailer.c	FUNCTION_29	IF_1
0x40019d9	            0x85c0	                           test eax, eax	       567	trailer.c	FUNCTION_29	IF_1
0x40019db	            0x7548	                           jne 0x4001a25	       567	trailer.c	FUNCTION_29	IF_1
0x40019dd	    0xc70500000000	               mov dword [0x040019e7], 1	       571	trailer.c	FUNCTION_29
0x40019e7	    0xc70500000000	               mov dword [0x040019f1], 1	       572	trailer.c	FUNCTION_29
0x40019f1	    0xc70500000000	               mov dword [0x040019fb], 1	       573	trailer.c	FUNCTION_29
0x40019fb	      0xbe00000000	                              mov esi, 0	       574	trailer.c	FUNCTION_29	CALL_1
0x4001a00	      0xbf00000000	                              mov edi, 0	       574	trailer.c	FUNCTION_29	CALL_1
0x4001a05	      0xe800000000	                          call 0x4001a0a	       574	trailer.c	FUNCTION_29	CALL_1
0x4001a0a	      0xbe00000000	                              mov esi, 0	       575	trailer.c	FUNCTION_29	CALL_2
0x4001a0f	      0xbf00000000	                              mov edi, 0	       575	trailer.c	FUNCTION_29	CALL_2
0x4001a14	      0xe800000000	                          call 0x4001a19	       575	trailer.c	FUNCTION_29	CALL_2
0x4001a19	    0xc70500000000	               mov dword [0x04001a23], 1	       576	trailer.c	FUNCTION_29
0x4001a23	            0xeb01	                           jmp 0x4001a26	       576	trailer.c	FUNCTION_29
0x4001a25	              0x90	                                     nop	       568	trailer.c	FUNCTION_29	IF_1
0x4001a26	              0x5d	                                 pop rbp	       577	trailer.c	FUNCTION_29
0x4001a27	              0xc3	                                     ret	       577	trailer.c	FUNCTION_29
trailer_set_where	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,5:ELSE,5:CALL,4	51
0x4001209	              0x55	                                push rbp	       381	trailer.c	FUNCTION_22
0x400120a	          0x4889e5	                            mov rbp, rsp	       381	trailer.c	FUNCTION_22
0x400120d	        0x4883ec10	                           sub rsp, 0x10	       381	trailer.c	FUNCTION_22
0x4001211	        0x48897df8	                mov qword [rbp - 8], rdi	       381	trailer.c	FUNCTION_22
0x4001215	        0x488975f0	             mov qword [rbp - 0x10], rsi	       381	trailer.c	FUNCTION_22
0x4001219	      0x48837df000	               cmp qword [rbp - 0x10], 0	       382	trailer.c	FUNCTION_22	IF_1
0x400121e	            0x750f	                           jne 0x400122f	       382	trailer.c	FUNCTION_22	IF_1
0x4001220	        0x488b45f8	                mov rax, qword [rbp - 8]	       383	trailer.c	FUNCTION_22	IF_1
0x4001224	    0xc70000000000	                      mov dword [rax], 0	       383	trailer.c	FUNCTION_22	IF_1
0x400122a	      0xe98b000000	                           jmp 0x40012ba	       383	trailer.c	FUNCTION_22	IF_1
0x400122f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x4001233	          0x4889c6	                            mov rsi, rax	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x4001236	      0xbf00000000	                              mov edi, 0	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x400123b	      0xe800000000	                          call 0x4001240	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x4001240	            0x85c0	                           test eax, eax	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x4001242	            0x750c	                           jne 0x4001250	       384	trailer.c	FUNCTION_22	ELSE_1	IF_2	CALL_1
0x4001244	        0x488b45f8	                mov rax, qword [rbp - 8]	       385	trailer.c	FUNCTION_22	ELSE_1	IF_2
0x4001248	    0xc70002000000	                      mov dword [rax], 2	       385	trailer.c	FUNCTION_22	ELSE_1	IF_2
0x400124e	            0xeb6a	                           jmp 0x40012ba	       385	trailer.c	FUNCTION_22	ELSE_1	IF_2
0x4001250	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x4001254	          0x4889c6	                            mov rsi, rax	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x4001257	      0xbf00000000	                              mov edi, 0	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x400125c	      0xe800000000	                          call 0x4001261	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x4001261	            0x85c0	                           test eax, eax	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x4001263	            0x750c	                           jne 0x4001271	       386	trailer.c	FUNCTION_22	ELSE_2	IF_3	CALL_2
0x4001265	        0x488b45f8	                mov rax, qword [rbp - 8]	       387	trailer.c	FUNCTION_22	ELSE_2	IF_3
0x4001269	    0xc70003000000	                      mov dword [rax], 3	       387	trailer.c	FUNCTION_22	ELSE_2	IF_3
0x400126f	            0xeb49	                           jmp 0x40012ba	       387	trailer.c	FUNCTION_22	ELSE_2	IF_3
0x4001271	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x4001275	          0x4889c6	                            mov rsi, rax	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x4001278	      0xbf00000000	                              mov edi, 0	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x400127d	      0xe800000000	                          call 0x4001282	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x4001282	            0x85c0	                           test eax, eax	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x4001284	            0x750c	                           jne 0x4001292	       388	trailer.c	FUNCTION_22	ELSE_3	IF_4	CALL_3
0x4001286	        0x488b45f8	                mov rax, qword [rbp - 8]	       389	trailer.c	FUNCTION_22	ELSE_3	IF_4
0x400128a	    0xc70001000000	                      mov dword [rax], 1	       389	trailer.c	FUNCTION_22	ELSE_3	IF_4
0x4001290	            0xeb28	                           jmp 0x40012ba	       389	trailer.c	FUNCTION_22	ELSE_3	IF_4
0x4001292	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x4001296	          0x4889c6	                            mov rsi, rax	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x4001299	      0xbf00000000	                              mov edi, 0	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x400129e	      0xe800000000	                          call 0x40012a3	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x40012a3	            0x85c0	                           test eax, eax	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x40012a5	            0x750c	                           jne 0x40012b3	       390	trailer.c	FUNCTION_22	ELSE_4	IF_5	CALL_4
0x40012a7	        0x488b45f8	                mov rax, qword [rbp - 8]	       391	trailer.c	FUNCTION_22	ELSE_4	IF_5
0x40012ab	    0xc70004000000	                      mov dword [rax], 4	       391	trailer.c	FUNCTION_22	ELSE_4	IF_5
0x40012b1	            0xeb07	                           jmp 0x40012ba	       391	trailer.c	FUNCTION_22	ELSE_4	IF_5
0x40012b3	      0xb8ffffffff	                     mov eax, 0xffffffff	       393	trailer.c	FUNCTION_22	ELSE_5
0x40012b8	            0xeb05	                           jmp 0x40012bf	       393	trailer.c	FUNCTION_22	ELSE_5
0x40012ba	      0xb800000000	                              mov eax, 0	       394	trailer.c	FUNCTION_22	ELSE_5
0x40012bf	              0xc9	                                   leave	       395	trailer.c	FUNCTION_22	ELSE_5
0x40012c0	              0xc3	                                     ret	       395	trailer.c	FUNCTION_22	ELSE_5
last_line	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,3:ELSE,0:CALL,0	32
0x400219c	              0x55	                                push rbp	       767	trailer.c	FUNCTION_39
0x400219d	          0x4889e5	                            mov rbp, rsp	       767	trailer.c	FUNCTION_39
0x40021a0	        0x48897de8	             mov qword [rbp - 0x18], rdi	       767	trailer.c	FUNCTION_39
0x40021a4	        0x488975e0	             mov qword [rbp - 0x20], rsi	       767	trailer.c	FUNCTION_39
0x40021a8	      0x48837de000	               cmp qword [rbp - 0x20], 0	       769	trailer.c	FUNCTION_39	IF_1
0x40021ad	            0x7507	                           jne 0x40021b6	       769	trailer.c	FUNCTION_39	IF_1
0x40021af	      0xb8ffffffff	                     mov eax, 0xffffffff	       770	trailer.c	FUNCTION_39	IF_1
0x40021b4	            0xeb45	                           jmp 0x40021fb	       770	trailer.c	FUNCTION_39	IF_1
0x40021b6	      0x48837de001	               cmp qword [rbp - 0x20], 1	       771	trailer.c	FUNCTION_39	IF_2
0x40021bb	            0x7507	                           jne 0x40021c4	       771	trailer.c	FUNCTION_39	IF_2
0x40021bd	      0xb800000000	                              mov eax, 0	       772	trailer.c	FUNCTION_39	IF_2
0x40021c2	            0xeb37	                           jmp 0x40021fb	       772	trailer.c	FUNCTION_39	IF_2
0x40021c4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       778	trailer.c	FUNCTION_39
0x40021c8	          0x83e802	                              sub eax, 2	       778	trailer.c	FUNCTION_39
0x40021cb	          0x8945fc	                mov dword [rbp - 4], eax	       778	trailer.c	FUNCTION_39
0x40021ce	            0xeb20	                           jmp 0x40021f0	       780	trailer.c	FUNCTION_39	FOR_1
0x40021d0	          0x8b45fc	                mov eax, dword [rbp - 4]	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021d3	          0x4863d0	                         movsxd rdx, eax	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021d6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021da	          0x4801d0	                            add rax, rdx	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021dd	           0xfb600	                   movzx eax, byte [rax]	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021e0	            0x3c0a	                             cmp al, 0xa	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021e2	            0x7508	                           jne 0x40021ec	       781	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021e4	          0x8b45fc	                mov eax, dword [rbp - 4]	       782	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021e7	          0x83c001	                              add eax, 1	       782	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021ea	            0xeb0f	                           jmp 0x40021fb	       782	trailer.c	FUNCTION_39	FOR_1	IF_3
0x40021ec	        0x836dfc01	                  sub dword [rbp - 4], 1	       780	trailer.c	FUNCTION_39	FOR_1
0x40021f0	        0x837dfc00	                  cmp dword [rbp - 4], 0	       780	trailer.c	FUNCTION_39	FOR_1
0x40021f4	            0x79da	                           jns 0x40021d0	       780	trailer.c	FUNCTION_39	FOR_1
0x40021f6	      0xb800000000	                              mov eax, 0	       784	trailer.c	FUNCTION_39
0x40021fb	              0x5d	                                 pop rbp	       785	trailer.c	FUNCTION_39
0x40021fc	              0xc3	                                     ret	       785	trailer.c	FUNCTION_39
xstrdup_or_null	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1	13
0x4000174	              0x55	                                push rbp	       923	git-compat-util.h	FUNCTION_82
0x4000175	          0x4889e5	                            mov rbp, rsp	       923	git-compat-util.h	FUNCTION_82
0x4000178	        0x4883ec10	                           sub rsp, 0x10	       923	git-compat-util.h	FUNCTION_82
0x400017c	        0x48897df8	                mov qword [rbp - 8], rdi	       923	git-compat-util.h	FUNCTION_82
0x4000180	      0x48837df800	                  cmp qword [rbp - 8], 0	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x4000185	            0x740e	                            je 0x4000195	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x4000187	        0x488b45f8	                mov rax, qword [rbp - 8]	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x400018b	          0x4889c7	                            mov rdi, rax	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x400018e	      0xe800000000	                          call 0x4000193	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x4000193	            0xeb05	                           jmp 0x400019a	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x4000195	      0xb800000000	                              mov eax, 0	       924	git-compat-util.h	FUNCTION_82	CALL_1
0x400019a	              0xc9	                                   leave	       925	git-compat-util.h	FUNCTION_82
0x400019b	              0xc3	                                     ret	       925	git-compat-util.h	FUNCTION_82
list_del	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1	14
0x40004a9	              0x55	                                push rbp	        78	list.h	FUNCTION_94
0x40004aa	          0x4889e5	                            mov rbp, rsp	        78	list.h	FUNCTION_94
0x40004ad	        0x4883ec08	                              sub rsp, 8	        78	list.h	FUNCTION_94
0x40004b1	        0x48897df8	                mov qword [rbp - 8], rdi	        78	list.h	FUNCTION_94
0x40004b5	        0x488b45f8	                mov rax, qword [rbp - 8]	        79	list.h	FUNCTION_94	CALL_1
0x40004b9	          0x488b10	                    mov rdx, qword [rax]	        79	list.h	FUNCTION_94	CALL_1
0x40004bc	        0x488b45f8	                mov rax, qword [rbp - 8]	        79	list.h	FUNCTION_94	CALL_1
0x40004c0	        0x488b4008	                mov rax, qword [rax + 8]	        79	list.h	FUNCTION_94	CALL_1
0x40004c4	          0x4889d6	                            mov rsi, rdx	        79	list.h	FUNCTION_94	CALL_1
0x40004c7	          0x4889c7	                            mov rdi, rax	        79	list.h	FUNCTION_94	CALL_1
0x40004ca	      0xe8b4ffffff	                     call sym.__list_del	        79	list.h	FUNCTION_94	CALL_1
0x40004cf	              0x90	                                     nop	        80	list.h	FUNCTION_94
0x40004d0	              0xc9	                                   leave	        80	list.h	FUNCTION_94
0x40004d1	              0xc3	                                     ret	        80	list.h	FUNCTION_94
format_trailers_from_commit	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,3	30
0x4003268	              0x55	                                push rbp	      1158	trailer.c	FUNCTION_52
0x4003269	          0x4889e5	                            mov rbp, rsp	      1158	trailer.c	FUNCTION_52
0x400326c	        0x4883ec50	                           sub rsp, 0x50	      1158	trailer.c	FUNCTION_52
0x4003270	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1158	trailer.c	FUNCTION_52
0x4003274	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1158	trailer.c	FUNCTION_52
0x4003278	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1158	trailer.c	FUNCTION_52
0x400327c	    0x64488b042528	                mov rax, qword fs:[0x28]	      1158	trailer.c	FUNCTION_52
0x4003285	        0x488945f8	                mov qword [rbp - 8], rax	      1158	trailer.c	FUNCTION_52
0x4003289	            0x31c0	                            xor eax, eax	      1158	trailer.c	FUNCTION_52
0x400328b	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1161	trailer.c	FUNCTION_52	CALL_1
0x400328f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1161	trailer.c	FUNCTION_52	CALL_1
0x4003293	          0x4889d6	                            mov rsi, rdx	      1161	trailer.c	FUNCTION_52	CALL_1
0x4003296	          0x4889c7	                            mov rdi, rax	      1161	trailer.c	FUNCTION_52	CALL_1
0x4003299	      0xe800000000	                          call 0x400329e	      1161	trailer.c	FUNCTION_52	CALL_1
0x400329e	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032a2	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032a6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032aa	          0x4889ce	                            mov rsi, rcx	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032ad	          0x4889c7	                            mov rdi, rax	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032b0	      0xe807feffff	            call sym.format_trailer_info	      1162	trailer.c	FUNCTION_52	CALL_2
0x40032b5	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1163	trailer.c	FUNCTION_52	CALL_3
0x40032b9	          0x4889c7	                            mov rdi, rax	      1163	trailer.c	FUNCTION_52	CALL_3
0x40032bc	      0xe800000000	                          call 0x40032c1	      1163	trailer.c	FUNCTION_52	CALL_3
0x40032c1	              0x90	                                     nop	      1164	trailer.c	FUNCTION_52
0x40032c2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1164	trailer.c	FUNCTION_52
0x40032c6	    0x644833042528	                xor rax, qword fs:[0x28]	      1164	trailer.c	FUNCTION_52
0x40032cf	            0x7405	                            je 0x40032d6	      1164	trailer.c	FUNCTION_52
0x40032d1	      0xe800000000	                          call 0x40032d6	      1164	trailer.c	FUNCTION_52
0x40032d6	              0xc9	                                   leave	      1164	trailer.c	FUNCTION_52
0x40032d7	              0xc3	                                     ret	      1164	trailer.c	FUNCTION_52
st_mult	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,1	22
0x4000122	              0x55	                                push rbp	       794	git-compat-util.h	FUNCTION_78
0x4000123	          0x4889e5	                            mov rbp, rsp	       794	git-compat-util.h	FUNCTION_78
0x4000126	        0x4883ec10	                           sub rsp, 0x10	       794	git-compat-util.h	FUNCTION_78
0x400012a	        0x48897df8	                mov qword [rbp - 8], rdi	       794	git-compat-util.h	FUNCTION_78
0x400012e	        0x488975f0	             mov qword [rbp - 0x10], rsi	       794	git-compat-util.h	FUNCTION_78
0x4000132	      0x48837df800	                  cmp qword [rbp - 8], 0	       795	git-compat-util.h	FUNCTION_78	IF_1
0x4000137	            0x7430	                            je 0x4000169	       795	git-compat-util.h	FUNCTION_78	IF_1
0x4000139	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       795	git-compat-util.h	FUNCTION_78	IF_1
0x4000140	      0xba00000000	                              mov edx, 0	       795	git-compat-util.h	FUNCTION_78	IF_1
0x4000145	        0x48f775f8	                     div qword [rbp - 8]	       795	git-compat-util.h	FUNCTION_78	IF_1
0x4000149	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       795	git-compat-util.h	FUNCTION_78	IF_1
0x400014d	            0x731a	                           jae 0x4000169	       795	git-compat-util.h	FUNCTION_78	IF_1
0x400014f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x4000153	        0x488b45f8	                mov rax, qword [rbp - 8]	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x4000157	          0x4889c6	                            mov rsi, rax	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x400015a	      0xbf00000000	                              mov edi, 0	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x400015f	      0xb800000000	                              mov eax, 0	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x4000164	      0xe800000000	                          call 0x4000169	       796	git-compat-util.h	FUNCTION_78	IF_1	CALL_1
0x4000169	        0x488b45f8	                mov rax, qword [rbp - 8]	       798	git-compat-util.h	FUNCTION_78
0x400016d	      0x480faf45f0	            imul rax, qword [rbp - 0x10]	       798	git-compat-util.h	FUNCTION_78
0x4000172	              0xc9	                                   leave	       799	git-compat-util.h	FUNCTION_78
0x4000173	              0xc3	                                     ret	       799	git-compat-util.h	FUNCTION_78
token_from_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,2:ELSE,0:CALL,0	19
0x4001a28	              0x55	                                push rbp	       580	trailer.c	FUNCTION_30
0x4001a29	          0x4889e5	                            mov rbp, rsp	       580	trailer.c	FUNCTION_30
0x4001a2c	        0x48897df8	                mov qword [rbp - 8], rdi	       580	trailer.c	FUNCTION_30
0x4001a30	        0x488975f0	             mov qword [rbp - 0x10], rsi	       580	trailer.c	FUNCTION_30
0x4001a34	        0x488b45f8	                mov rax, qword [rbp - 8]	       581	trailer.c	FUNCTION_30	IF_1
0x4001a38	        0x488b4028	            mov rax, qword [rax + 0x28] 	       581	trailer.c	FUNCTION_30	IF_1
0x4001a3c	          0x4885c0	                           test rax, rax	       581	trailer.c	FUNCTION_30	IF_1
0x4001a3f	            0x740a	                            je 0x4001a4b	       581	trailer.c	FUNCTION_30	IF_1
0x4001a41	        0x488b45f8	                mov rax, qword [rbp - 8]	       582	trailer.c	FUNCTION_30	IF_1
0x4001a45	        0x488b4028	            mov rax, qword [rax + 0x28] 	       582	trailer.c	FUNCTION_30	IF_1
0x4001a49	            0xeb15	                           jmp 0x4001a60	       582	trailer.c	FUNCTION_30	IF_1
0x4001a4b	      0x48837df000	               cmp qword [rbp - 0x10], 0	       583	trailer.c	FUNCTION_30	IF_2
0x4001a50	            0x7406	                            je 0x4001a58	       583	trailer.c	FUNCTION_30	IF_2
0x4001a52	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       584	trailer.c	FUNCTION_30	IF_2
0x4001a56	            0xeb08	                           jmp 0x4001a60	       584	trailer.c	FUNCTION_30	IF_2
0x4001a58	        0x488b45f8	                mov rax, qword [rbp - 8]	       585	trailer.c	FUNCTION_30
0x4001a5c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       585	trailer.c	FUNCTION_30
0x4001a60	              0x5d	                                 pop rbp	       586	trailer.c	FUNCTION_30
0x4001a61	              0xc3	                                     ret	       586	trailer.c	FUNCTION_30
find_trailer_end	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,1	19
0x400252b	              0x55	                                push rbp	       903	trailer.c	FUNCTION_42
0x400252c	          0x4889e5	                            mov rbp, rsp	       903	trailer.c	FUNCTION_42
0x400252f	              0x53	                                push rbx	       903	trailer.c	FUNCTION_42
0x4002530	        0x4883ec18	                           sub rsp, 0x18	       903	trailer.c	FUNCTION_42
0x4002534	        0x48897de8	             mov qword [rbp - 0x18], rdi	       903	trailer.c	FUNCTION_42
0x4002538	        0x488975e0	             mov qword [rbp - 0x20], rsi	       903	trailer.c	FUNCTION_42
0x400253c	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       904	trailer.c	FUNCTION_42	CALL_1
0x4002540	            0x89c3	                            mov ebx, eax	       904	trailer.c	FUNCTION_42	CALL_1
0x4002542	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       904	trailer.c	FUNCTION_42	CALL_1
0x4002546	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       904	trailer.c	FUNCTION_42	CALL_1
0x400254a	          0x4889d6	                            mov rsi, rdx	       904	trailer.c	FUNCTION_42	CALL_1
0x400254d	          0x4889c7	                            mov rdi, rax	       904	trailer.c	FUNCTION_42	CALL_1
0x4002550	      0xe800000000	                          call 0x4002555	       904	trailer.c	FUNCTION_42	CALL_1
0x4002555	            0x29c3	                            sub ebx, eax	       904	trailer.c	FUNCTION_42	CALL_1
0x4002557	            0x89d8	                            mov eax, ebx	       904	trailer.c	FUNCTION_42	CALL_1
0x4002559	        0x4883c418	                           add rsp, 0x18	       905	trailer.c	FUNCTION_42
0x400255d	              0x5b	                                 pop rbx	       905	trailer.c	FUNCTION_42
0x400255e	              0x5d	                                 pop rbp	       905	trailer.c	FUNCTION_42
0x400255f	              0xc3	                                     ret	       905	trailer.c	FUNCTION_42
ends_with_blank_line	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,2	23
0x4002560	              0x55	                                push rbp	       908	trailer.c	FUNCTION_43
0x4002561	          0x4889e5	                            mov rbp, rsp	       908	trailer.c	FUNCTION_43
0x4002564	        0x4883ec20	                           sub rsp, 0x20	       908	trailer.c	FUNCTION_43
0x4002568	        0x48897de8	             mov qword [rbp - 0x18], rdi	       908	trailer.c	FUNCTION_43
0x400256c	        0x488975e0	             mov qword [rbp - 0x20], rsi	       908	trailer.c	FUNCTION_43
0x4002570	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       909	trailer.c	FUNCTION_43	CALL_1
0x4002574	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       909	trailer.c	FUNCTION_43	CALL_1
0x4002578	          0x4889d6	                            mov rsi, rdx	       909	trailer.c	FUNCTION_43	CALL_1
0x400257b	          0x4889c7	                            mov rdi, rax	       909	trailer.c	FUNCTION_43	CALL_1
0x400257e	      0xe819fcffff	                      call sym.last_line	       909	trailer.c	FUNCTION_43	CALL_1
0x4002583	          0x8945fc	                mov dword [rbp - 4], eax	       909	trailer.c	FUNCTION_43	CALL_1
0x4002586	        0x837dfc00	                  cmp dword [rbp - 4], 0	       910	trailer.c	FUNCTION_43	IF_1
0x400258a	            0x7907	                           jns 0x4002593	       910	trailer.c	FUNCTION_43	IF_1
0x400258c	      0xb800000000	                              mov eax, 0	       911	trailer.c	FUNCTION_43	IF_1
0x4002591	            0xeb15	                           jmp 0x40025a8	       911	trailer.c	FUNCTION_43	IF_1
0x4002593	          0x8b45fc	                mov eax, dword [rbp - 4]	       912	trailer.c	FUNCTION_43	CALL_2
0x4002596	          0x4863d0	                         movsxd rdx, eax	       912	trailer.c	FUNCTION_43	CALL_2
0x4002599	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       912	trailer.c	FUNCTION_43	CALL_2
0x400259d	          0x4801d0	                            add rax, rdx	       912	trailer.c	FUNCTION_43	CALL_2
0x40025a0	          0x4889c7	                            mov rdi, rax	       912	trailer.c	FUNCTION_43	CALL_2
0x40025a3	      0xe85ae1ffff	                  call sym.is_blank_line	       912	trailer.c	FUNCTION_43	CALL_2
0x40025a8	              0xc9	                                   leave	       913	trailer.c	FUNCTION_43
0x40025a9	              0xc3	                                     ret	       913	trailer.c	FUNCTION_43
list_add_tail	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	21
0x400043e	              0x55	                                push rbp	        62	list.h	FUNCTION_92
0x400043f	          0x4889e5	                            mov rbp, rsp	        62	list.h	FUNCTION_92
0x4000442	        0x48897df8	                mov qword [rbp - 8], rdi	        62	list.h	FUNCTION_92
0x4000446	        0x488975f0	             mov qword [rbp - 0x10], rsi	        62	list.h	FUNCTION_92
0x400044a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        63	list.h	FUNCTION_92
0x400044e	        0x488b4008	                mov rax, qword [rax + 8]	        63	list.h	FUNCTION_92
0x4000452	        0x488b55f8	                mov rdx, qword [rbp - 8]	        63	list.h	FUNCTION_92
0x4000456	          0x488910	                    mov qword [rax], rdx	        63	list.h	FUNCTION_92
0x4000459	        0x488b45f8	                mov rax, qword [rbp - 8]	        64	list.h	FUNCTION_92
0x400045d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        64	list.h	FUNCTION_92
0x4000461	          0x488910	                    mov qword [rax], rdx	        64	list.h	FUNCTION_92
0x4000464	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        65	list.h	FUNCTION_92
0x4000468	        0x488b5008	                mov rdx, qword [rax + 8]	        65	list.h	FUNCTION_92
0x400046c	        0x488b45f8	                mov rax, qword [rbp - 8]	        65	list.h	FUNCTION_92
0x4000470	        0x48895008	                mov qword [rax + 8], rdx	        65	list.h	FUNCTION_92
0x4000474	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        66	list.h	FUNCTION_92
0x4000478	        0x488b55f8	                mov rdx, qword [rbp - 8]	        66	list.h	FUNCTION_92
0x400047c	        0x48895008	                mov qword [rax + 8], rdx	        66	list.h	FUNCTION_92
0x4000480	              0x90	                                     nop	        67	list.h	FUNCTION_92
0x4000481	              0x5d	                                 pop rbp	        67	list.h	FUNCTION_92
0x4000482	              0xc3	                                     ret	        67	list.h	FUNCTION_92
trailer_info_release	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	29
0x400305d	              0x55	                                push rbp	      1113	trailer.c	FUNCTION_50
0x400305e	          0x4889e5	                            mov rbp, rsp	      1113	trailer.c	FUNCTION_50
0x4003061	        0x4883ec20	                           sub rsp, 0x20	      1113	trailer.c	FUNCTION_50
0x4003065	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1113	trailer.c	FUNCTION_50
0x4003069	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1115	trailer.c	FUNCTION_50	FOR_1
0x4003070	            0xeb24	                           jmp 0x4003096	      1115	trailer.c	FUNCTION_50	FOR_1
0x4003072	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1116	trailer.c	FUNCTION_50	CALL_1
0x4003076	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1116	trailer.c	FUNCTION_50	CALL_1
0x400307a	          0x8b55fc	                mov edx, dword [rbp - 4]	      1116	trailer.c	FUNCTION_50	CALL_1
0x400307d	          0x4863d2	                         movsxd rdx, edx	      1116	trailer.c	FUNCTION_50	CALL_1
0x4003080	        0x48c1e203	                              shl rdx, 3	      1116	trailer.c	FUNCTION_50	CALL_1
0x4003084	          0x4801d0	                            add rax, rdx	      1116	trailer.c	FUNCTION_50	CALL_1
0x4003087	          0x488b00	                    mov rax, qword [rax]	      1116	trailer.c	FUNCTION_50	CALL_1
0x400308a	          0x4889c7	                            mov rdi, rax	      1116	trailer.c	FUNCTION_50	CALL_1
0x400308d	      0xe800000000	                          call 0x4003092	      1116	trailer.c	FUNCTION_50	CALL_1
0x4003092	        0x8345fc01	                  add dword [rbp - 4], 1	      1115	trailer.c	FUNCTION_50	FOR_1
0x4003096	          0x8b45fc	                mov eax, dword [rbp - 4]	      1115	trailer.c	FUNCTION_50	FOR_1
0x4003099	          0x4863d0	                         movsxd rdx, eax	      1115	trailer.c	FUNCTION_50	FOR_1
0x400309c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1115	trailer.c	FUNCTION_50	FOR_1
0x40030a0	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1115	trailer.c	FUNCTION_50	FOR_1
0x40030a4	          0x4839c2	                            cmp rdx, rax	      1115	trailer.c	FUNCTION_50	FOR_1
0x40030a7	            0x72c9	                            jb 0x4003072	      1115	trailer.c	FUNCTION_50	FOR_1
0x40030a9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1117	trailer.c	FUNCTION_50	CALL_2
0x40030ad	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1117	trailer.c	FUNCTION_50	CALL_2
0x40030b1	          0x4889c7	                            mov rdi, rax	      1117	trailer.c	FUNCTION_50	CALL_2
0x40030b4	      0xe800000000	                          call 0x40030b9	      1117	trailer.c	FUNCTION_50	CALL_2
0x40030b9	              0x90	                                     nop	      1118	trailer.c	FUNCTION_50
0x40030ba	              0xc9	                                   leave	      1118	trailer.c	FUNCTION_50
0x40030bb	              0xc3	                                     ret	      1118	trailer.c	FUNCTION_50
_	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,0	15
0x40004ed	              0x55	                                push rbp	        51	gettext.h	FUNCTION_108
0x40004ee	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_108
0x40004f1	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_108
0x40004f5	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_108
0x40004f9	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_108	IF_1
0x40004fd	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_108	IF_1
0x4000500	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_108	IF_1
0x4000502	            0x7507	                           jne 0x400050b	        52	gettext.h	FUNCTION_108	IF_1
0x4000504	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_108	IF_1
0x4000509	            0xeb0c	                           jmp 0x4000517	        53	gettext.h	FUNCTION_108	IF_1
0x400050b	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_108
0x400050f	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_108
0x4000512	      0xe800000000	                          call 0x4000517	        54	gettext.h	FUNCTION_108
0x4000517	              0xc9	                                   leave	        55	gettext.h	FUNCTION_108
0x4000518	              0xc3	                                     ret	        55	gettext.h	FUNCTION_108
trailer_info_get	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,15	202
0x4002d50	              0x55	                                push rbp	      1070	trailer.c	FUNCTION_49
0x4002d51	          0x4889e5	                            mov rbp, rsp	      1070	trailer.c	FUNCTION_49
0x4002d54	              0x53	                                push rbx	      1070	trailer.c	FUNCTION_49
0x4002d55	        0x4883ec78	                           sub rsp, 0x78	      1070	trailer.c	FUNCTION_49
0x4002d59	        0x48897d88	             mov qword [rbp - 0x78], rdi	      1070	trailer.c	FUNCTION_49
0x4002d5d	        0x48897580	             mov qword [rbp - 0x80], rsi	      1070	trailer.c	FUNCTION_49
0x4002d61	    0x64488b042528	                mov rax, qword fs:[0x28]	      1070	trailer.c	FUNCTION_49
0x4002d6a	        0x488945e8	             mov qword [rbp - 0x18], rax	      1070	trailer.c	FUNCTION_49
0x4002d6e	            0x31c0	                            xor eax, eax	      1070	trailer.c	FUNCTION_49
0x4002d70	    0x48c745a80000	               mov qword [rbp - 0x58], 0	      1073	trailer.c	FUNCTION_49
0x4002d78	    0x48c745b00000	               mov qword [rbp - 0x50], 0	      1074	trailer.c	FUNCTION_49
0x4002d80	    0x48c745b80000	               mov qword [rbp - 0x48], 0	      1074	trailer.c	FUNCTION_49
0x4002d88	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      1075	trailer.c	FUNCTION_49
0x4002d90	      0xe83aecffff	              call sym.ensure_configured	      1077	trailer.c	FUNCTION_49	CALL_1
0x4002d95	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1079	trailer.c	FUNCTION_49	CALL_2
0x4002d99	          0x4889c7	                            mov rdi, rax	      1079	trailer.c	FUNCTION_49	CALL_2
0x4002d9c	      0xe85cf4ffff	               call sym.find_patch_start	      1079	trailer.c	FUNCTION_49	CALL_2
0x4002da1	          0x894594	             mov dword [rbp - 0x6c], eax	      1079	trailer.c	FUNCTION_49	CALL_2
0x4002da4	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002da7	          0x4863d0	                         movsxd rdx, eax	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002daa	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002dae	          0x4889d6	                            mov rsi, rdx	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002db1	          0x4889c7	                            mov rdi, rax	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002db4	      0xe872f7ffff	               call sym.find_trailer_end	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002db9	          0x894598	             mov dword [rbp - 0x68], eax	      1080	trailer.c	FUNCTION_49	CALL_3
0x4002dbc	          0x8b4598	             mov eax, dword [rbp - 0x68]	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dbf	          0x4863d0	                         movsxd rdx, eax	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dc2	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dc6	          0x4889d6	                            mov rsi, rdx	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dc9	          0x4889c7	                            mov rdi, rax	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dcc	      0xe892f4ffff	             call sym.find_trailer_start	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dd1	          0x89459c	             mov dword [rbp - 0x64], eax	      1081	trailer.c	FUNCTION_49	CALL_4
0x4002dd4	          0x8b4598	             mov eax, dword [rbp - 0x68]	      1084	trailer.c	FUNCTION_49
0x4002dd7	          0x2b459c	             sub eax, dword [rbp - 0x64]	      1084	trailer.c	FUNCTION_49
0x4002dda	            0x4898	                                    cdqe	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002ddc	          0x8b559c	             mov edx, dword [rbp - 0x64]	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002ddf	          0x4863ca	                         movsxd rcx, edx	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002de2	        0x488b5580	             mov rdx, qword [rbp - 0x80]	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002de6	        0x488d3c11	                    lea rdi, [rcx + rdx]	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002dea	      0xb900000000	                              mov ecx, 0	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002def	      0xba0a000000	                            mov edx, 0xa	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002df4	          0x4889c6	                            mov rsi, rax	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002df7	      0xe800000000	                          call 0x4002dfc	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002dfc	        0x488945c8	             mov qword [rbp - 0x38], rax	      1083	trailer.c	FUNCTION_49	CALL_5
0x4002e00	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002e04	        0x488945a0	             mov qword [rbp - 0x60], rax	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002e08	      0xe9b9010000	                           jmp 0x4002fc6	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002e0d	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e12	     0xf84b0000000	                            je 0x4002ec8	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e18	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e1c	          0x488b00	                    mov rax, qword [rax]	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e1f	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e23	           0xfb600	                   movzx eax, byte [rax]	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e26	           0xfb6c0	                           movzx eax, al	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e29	            0x4898	                                    cdqe	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e2b	     0xfb680000000	                   movzx eax, byte [rax]	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e32	           0xfb6c0	                           movzx eax, al	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e35	          0x83e001	                              and eax, 1	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e38	            0x85c0	                           test eax, eax	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e3a	     0xf8488000000	                            je 0x4002ec8	      1088	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e40	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1089	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e48	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1089	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e50	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1089	trailer.c	FUNCTION_49	FOR_1	IF_1
0x4002e58	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e5c	          0x488b00	                    mov rax, qword [rax]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e5f	          0x4889c7	                            mov rdi, rax	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e62	      0xe800000000	                          call 0x4002e67	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e67	          0x4889c3	                            mov rbx, rax	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e6a	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e6e	          0x488b00	                    mov rax, qword [rax]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e71	          0x4889c7	                            mov rdi, rax	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e74	      0xe800000000	                          call 0x4002e79	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e79	          0x4889c2	                            mov rdx, rax	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e7c	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e80	          0x488b30	                    mov rsi, qword [rax]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e83	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e87	          0x4889d9	                            mov rcx, rbx	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e8a	          0x4889c7	                            mov rdi, rax	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e8d	      0xe800000000	                          call 0x4002e92	      1090	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_8
0x4002e92	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002e96	          0x488b10	                    mov rdx, qword [rax]	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002e99	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002e9d	          0x4889d6	                            mov rsi, rdx	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002ea0	          0x4889c7	                            mov rdi, rax	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002ea3	      0xe800000000	                          call 0x4002ea8	      1091	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_9
0x4002ea8	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002eac	      0xbe00000000	                              mov esi, 0	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002eb1	          0x4889c7	                            mov rdi, rax	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002eb4	      0xe800000000	                          call 0x4002eb9	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002eb9	          0x4889c2	                            mov rdx, rax	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002ebc	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002ec0	          0x488910	                    mov qword [rax], rdx	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002ec3	      0xe9f9000000	                           jmp 0x4002fc1	      1092	trailer.c	FUNCTION_49	FOR_1	IF_1	CALL_10
0x4002ec8	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ecc	        0x4883c001	                              add rax, 1	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ed0	        0x483b45b8	             cmp rax, qword [rbp - 0x48]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ed4	            0x7671	                           jbe 0x4002f47	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ed6	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002eda	          0x4889d0	                            mov rax, rdx	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002edd	          0x4801c0	                            add rax, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ee0	          0x4801d0	                            add rax, rdx	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ee3	        0x4883c030	                           add rax, 0x30	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ee7	          0x48d1e8	                              shr rax, 1	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002eea	          0x4889c2	                            mov rdx, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002eed	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ef1	        0x4883c001	                              add rax, 1	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ef5	          0x4839c2	                            cmp rdx, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002ef8	            0x730e	                           jae 0x4002f08	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002efa	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002efe	        0x4883c001	                              add rax, 1	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f02	        0x488945b8	             mov qword [rbp - 0x48], rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f06	            0xeb18	                           jmp 0x4002f20	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f08	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f0c	          0x4889d0	                            mov rax, rdx	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f0f	          0x4801c0	                            add rax, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f12	          0x4801d0	                            add rax, rdx	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f15	        0x4883c030	                           add rax, 0x30	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f19	          0x48d1e8	                              shr rax, 1	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f1c	        0x488945b8	             mov qword [rbp - 0x48], rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f20	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f24	          0x4889c6	                            mov rsi, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f27	      0xbf08000000	                              mov edi, 8	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f2c	      0xe8f1d1ffff	                        call sym.st_mult	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f31	          0x4889c2	                            mov rdx, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f34	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f38	          0x4889d6	                            mov rsi, rdx	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f3b	          0x4889c7	                            mov rdi, rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f3e	      0xe800000000	                          call 0x4002f43	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f43	        0x488945a8	             mov qword [rbp - 0x58], rax	      1095	trailer.c	FUNCTION_49	FOR_1	CALL_11
0x4002f47	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f4b	    0x488d14c50000	                        lea rdx, [rax*8]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f53	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f57	        0x488d1c02	                    lea rbx, [rdx + rax]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f5b	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f5f	          0x488b00	                    mov rax, qword [rax]	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f62	      0xbe00000000	                              mov esi, 0	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f67	          0x4889c7	                            mov rdi, rax	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f6a	      0xe800000000	                          call 0x4002f6f	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f6f	          0x488903	                    mov qword [rbx], rax	      1096	trailer.c	FUNCTION_49	FOR_1	CALL_12
0x4002f72	    0x488b15000000	            mov rdx, qword [0x04002f79] 	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f79	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f7d	    0x488d0cc50000	                        lea rcx, [rax*8]	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f85	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f89	          0x4801c8	                            add rax, rcx	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f8c	          0x488b00	                    mov rax, qword [rax]	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f8f	          0x4889d6	                            mov rsi, rdx	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f92	          0x4889c7	                            mov rdi, rax	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f95	      0xe840ebffff	                 call sym.find_separator	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002f9a	            0x85c0	                           test eax, eax	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002f9c	            0x7e15	                           jle 0x4002fb3	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002f9e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1098	trailer.c	FUNCTION_49	FOR_1
0x4002fa2	    0x488d14c50000	                        lea rdx, [rax*8]	      1098	trailer.c	FUNCTION_49	FOR_1
0x4002faa	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002fae	          0x4801d0	                            add rax, rdx	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002fb1	            0xeb05	                           jmp 0x4002fb8	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002fb3	      0xb800000000	                              mov eax, 0	      1099	trailer.c	FUNCTION_49	FOR_1
0x4002fb8	        0x488945c0	             mov qword [rbp - 0x40], rax	      1097	trailer.c	FUNCTION_49	FOR_1	CALL_13
0x4002fbc	      0x488345b001	               add qword [rbp - 0x50], 1	      1100	trailer.c	FUNCTION_49	FOR_1
0x4002fc1	      0x488345a008	               add qword [rbp - 0x60], 8	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002fc6	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002fca	          0x488b00	                    mov rax, qword [rax]	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002fcd	          0x4885c0	                           test rax, rax	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002fd0	     0xf8537feffff	                           jne 0x4002e0d	      1087	trailer.c	FUNCTION_49	FOR_1
0x4002fd6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1102	trailer.c	FUNCTION_49	CALL_14
0x4002fda	          0x4889c7	                            mov rdi, rax	      1102	trailer.c	FUNCTION_49	CALL_14
0x4002fdd	      0xe800000000	                          call 0x4002fe2	      1102	trailer.c	FUNCTION_49	CALL_14
0x4002fe2	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002fe5	          0x4863d0	                         movsxd rdx, eax	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002fe8	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002fec	          0x4889d6	                            mov rsi, rdx	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002fef	          0x4889c7	                            mov rdi, rax	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002ff2	      0xe869f5ffff	           call sym.ends_with_blank_line	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002ff7	            0x89c2	                            mov edx, eax	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002ff9	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002ffd	            0x8910	                    mov dword [rax], edx	      1104	trailer.c	FUNCTION_49	CALL_15
0x4002fff	          0x8b459c	             mov eax, dword [rbp - 0x64]	      1106	trailer.c	FUNCTION_49
0x4003002	          0x4863d0	                         movsxd rdx, eax	      1106	trailer.c	FUNCTION_49
0x4003005	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1106	trailer.c	FUNCTION_49
0x4003009	          0x4801c2	                            add rdx, rax	      1106	trailer.c	FUNCTION_49
0x400300c	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1106	trailer.c	FUNCTION_49
0x4003010	        0x48895008	                mov qword [rax + 8], rdx	      1106	trailer.c	FUNCTION_49
0x4003014	          0x8b4598	             mov eax, dword [rbp - 0x68]	      1107	trailer.c	FUNCTION_49
0x4003017	          0x4863d0	                         movsxd rdx, eax	      1107	trailer.c	FUNCTION_49
0x400301a	        0x488b4580	             mov rax, qword [rbp - 0x80]	      1107	trailer.c	FUNCTION_49
0x400301e	          0x4801c2	                            add rdx, rax	      1107	trailer.c	FUNCTION_49
0x4003021	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1107	trailer.c	FUNCTION_49
0x4003025	        0x48895010	             mov qword [rax + 0x10], rdx	      1107	trailer.c	FUNCTION_49
0x4003029	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1108	trailer.c	FUNCTION_49
0x400302d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1108	trailer.c	FUNCTION_49
0x4003031	        0x48895018	             mov qword [rax + 0x18], rdx	      1108	trailer.c	FUNCTION_49
0x4003035	        0x488b4588	             mov rax, qword [rbp - 0x78]	      1109	trailer.c	FUNCTION_49
0x4003039	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1109	trailer.c	FUNCTION_49
0x400303d	        0x48895020	             mov qword [rax + 0x20], rdx	      1109	trailer.c	FUNCTION_49
0x4003041	              0x90	                                     nop	      1110	trailer.c	FUNCTION_49
0x4003042	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1110	trailer.c	FUNCTION_49
0x4003046	    0x644833042528	                xor rax, qword fs:[0x28]	      1110	trailer.c	FUNCTION_49
0x400304f	            0x7405	                            je 0x4003056	      1110	trailer.c	FUNCTION_49
0x4003051	      0xe800000000	                          call 0x4003056	      1110	trailer.c	FUNCTION_49
0x4003056	        0x4883c478	                           add rsp, 0x78	      1110	trailer.c	FUNCTION_49
0x400305a	              0x5b	                                 pop rbx	      1110	trailer.c	FUNCTION_49
0x400305b	              0x5d	                                 pop rbp	      1110	trailer.c	FUNCTION_49
0x400305c	              0xc3	                                     ret	      1110	trailer.c	FUNCTION_49
strbuf_avail	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	18
0x4000230	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_54
0x4000231	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_54
0x4000234	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_54
0x4000238	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x400023c	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_54
0x400023f	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_54
0x4000242	            0x741b	                            je 0x400025f	       141	strbuf.h	FUNCTION_54
0x4000244	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x4000248	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_54
0x400024b	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_54
0x400024f	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_54
0x4000253	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_54
0x4000256	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_54
0x4000259	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_54
0x400025d	            0xeb05	                           jmp 0x4000264	       141	strbuf.h	FUNCTION_54
0x400025f	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_54
0x4000264	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_54
0x4000265	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_54
find_same_and_apply_arg	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,2:ELSE,0:CALL,4	82
0x4001063	              0x55	                                push rbp	       333	trailer.c	FUNCTION_20
0x4001064	          0x4889e5	                            mov rbp, rsp	       333	trailer.c	FUNCTION_20
0x4001067	        0x4883ec40	                           sub rsp, 0x40	       333	trailer.c	FUNCTION_20
0x400106b	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       333	trailer.c	FUNCTION_20
0x400106f	        0x488975c0	             mov qword [rbp - 0x40], rsi	       333	trailer.c	FUNCTION_20
0x4001073	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       338	trailer.c	FUNCTION_20
0x4001077	          0x8b4038	            mov eax, dword [rax + 0x38] 	       338	trailer.c	FUNCTION_20
0x400107a	          0x8945d4	             mov dword [rbp - 0x2c], eax	       338	trailer.c	FUNCTION_20
0x400107d	        0x837dd402	               cmp dword [rbp - 0x2c], 2	       339	trailer.c	FUNCTION_20
0x4001081	            0x7406	                            je 0x4001089	       339	trailer.c	FUNCTION_20
0x4001083	        0x837dd403	               cmp dword [rbp - 0x2c], 3	       339	trailer.c	FUNCTION_20
0x4001087	            0x7507	                           jne 0x4001090	       339	trailer.c	FUNCTION_20
0x4001089	      0xb801000000	                              mov eax, 1	       339	trailer.c	FUNCTION_20
0x400108e	            0xeb05	                           jmp 0x4001095	       339	trailer.c	FUNCTION_20
0x4001090	      0xb800000000	                              mov eax, 0	       339	trailer.c	FUNCTION_20
0x4001095	          0x8945d8	             mov dword [rbp - 0x28], eax	       339	trailer.c	FUNCTION_20
0x4001098	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	       340	trailer.c	FUNCTION_20	CALL_1
0x400109b	            0x89c7	                            mov edi, eax	       340	trailer.c	FUNCTION_20	CALL_1
0x400109d	      0xe8c1f4ffff	                   call sym.after_or_end	       340	trailer.c	FUNCTION_20	CALL_1
0x40010a2	          0x8945dc	             mov dword [rbp - 0x24], eax	       340	trailer.c	FUNCTION_20	CALL_1
0x40010a5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       343	trailer.c	FUNCTION_20	IF_1	CALL_2
0x40010a9	          0x4889c7	                            mov rdi, rax	       343	trailer.c	FUNCTION_20	IF_1	CALL_2
0x40010ac	      0xe821f4ffff	                     call sym.list_empty	       343	trailer.c	FUNCTION_20	IF_1	CALL_2
0x40010b1	            0x85c0	                           test eax, eax	       343	trailer.c	FUNCTION_20	IF_1	CALL_2
0x40010b3	            0x740a	                            je 0x40010bf	       343	trailer.c	FUNCTION_20	IF_1	CALL_2
0x40010b5	      0xb800000000	                              mov eax, 0	       344	trailer.c	FUNCTION_20	IF_1
0x40010ba	      0xe9b6000000	                           jmp 0x4001175	       344	trailer.c	FUNCTION_20	IF_1
0x40010bf	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       346	trailer.c	FUNCTION_20
0x40010c3	            0x740a	                            je 0x40010cf	       346	trailer.c	FUNCTION_20
0x40010c5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       346	trailer.c	FUNCTION_20
0x40010c9	        0x488b4008	                mov rax, qword [rax + 8]	       346	trailer.c	FUNCTION_20
0x40010cd	            0xeb07	                           jmp 0x40010d6	       346	trailer.c	FUNCTION_20
0x40010cf	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       346	trailer.c	FUNCTION_20
0x40010d3	          0x488b00	                    mov rax, qword [rax]	       346	trailer.c	FUNCTION_20
0x40010d6	        0x488945e8	             mov qword [rbp - 0x18], rax	       346	trailer.c	FUNCTION_20
0x40010da	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       350	trailer.c	FUNCTION_20
0x40010de	            0x740a	                            je 0x40010ea	       350	trailer.c	FUNCTION_20
0x40010e0	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       350	trailer.c	FUNCTION_20
0x40010e4	        0x488b4008	                mov rax, qword [rax + 8]	       350	trailer.c	FUNCTION_20
0x40010e8	            0xeb07	                           jmp 0x40010f1	       350	trailer.c	FUNCTION_20
0x40010ea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       350	trailer.c	FUNCTION_20
0x40010ee	          0x488b00	                    mov rax, qword [rax]	       350	trailer.c	FUNCTION_20
0x40010f1	        0x488945e0	             mov qword [rbp - 0x20], rax	       350	trailer.c	FUNCTION_20
0x40010f5	            0xeb6f	                           jmp 0x4001166	       350	trailer.c	FUNCTION_20
0x40010f7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       351	trailer.c	FUNCTION_20
0x40010fb	        0x488945f0	             mov qword [rbp - 0x10], rax	       351	trailer.c	FUNCTION_20
0x40010ff	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x4001103	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x4001107	          0x4889d6	                            mov rsi, rdx	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x400110a	          0x4889c7	                            mov rdi, rax	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x400110d	      0xe8baf4ffff	                     call sym.same_token	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x4001112	            0x85c0	                           test eax, eax	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x4001114	            0x7508	                           jne 0x400111e	       352	trailer.c	FUNCTION_20	IF_2	CALL_3
0x4001116	        0x837ddc00	               cmp dword [rbp - 0x24], 0	       350	trailer.c	FUNCTION_20
0x400111a	            0x7535	                           jne 0x4001151	       350	trailer.c	FUNCTION_20
0x400111c	            0xeb3d	                           jmp 0x400115b	       350	trailer.c	FUNCTION_20
0x400111e	        0x837dd800	               cmp dword [rbp - 0x28], 0	       354	trailer.c	FUNCTION_20
0x4001122	            0x7406	                            je 0x400112a	       354	trailer.c	FUNCTION_20
0x4001124	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       354	trailer.c	FUNCTION_20
0x4001128	            0xeb04	                           jmp 0x400112e	       354	trailer.c	FUNCTION_20
0x400112a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       354	trailer.c	FUNCTION_20
0x400112e	        0x488945f8	                mov qword [rbp - 8], rax	       354	trailer.c	FUNCTION_20
0x4001132	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       355	trailer.c	FUNCTION_20	CALL_4
0x4001136	        0x488b55f8	                mov rdx, qword [rbp - 8]	       355	trailer.c	FUNCTION_20	CALL_4
0x400113a	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	       355	trailer.c	FUNCTION_20	CALL_4
0x400113e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       355	trailer.c	FUNCTION_20	CALL_4
0x4001142	          0x4889c7	                            mov rdi, rax	       355	trailer.c	FUNCTION_20	CALL_4
0x4001145	      0xe8f2fcffff	            call sym.apply_arg_if_exists	       355	trailer.c	FUNCTION_20	CALL_4
0x400114a	      0xb801000000	                              mov eax, 1	       356	trailer.c	FUNCTION_20
0x400114f	            0xeb24	                           jmp 0x4001175	       356	trailer.c	FUNCTION_20
0x4001151	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       350	trailer.c	FUNCTION_20
0x4001155	        0x488b4008	                mov rax, qword [rax + 8]	       350	trailer.c	FUNCTION_20
0x4001159	            0xeb07	                           jmp 0x4001162	       350	trailer.c	FUNCTION_20
0x400115b	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       350	trailer.c	FUNCTION_20
0x400115f	          0x488b00	                    mov rax, qword [rax]	       350	trailer.c	FUNCTION_20
0x4001162	        0x488945e0	             mov qword [rbp - 0x20], rax	       350	trailer.c	FUNCTION_20
0x4001166	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       350	trailer.c	FUNCTION_20
0x400116a	        0x483b45c8	             cmp rax, qword [rbp - 0x38]	       350	trailer.c	FUNCTION_20
0x400116e	            0x7587	                           jne 0x40010f7	       350	trailer.c	FUNCTION_20
0x4001170	      0xb800000000	                              mov eax, 0	       358	trailer.c	FUNCTION_20
0x4001175	              0xc9	                                   leave	       359	trailer.c	FUNCTION_20
0x4001176	              0xc3	                                     ret	       359	trailer.c	FUNCTION_20
strbuf_addstr	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	17
0x400036e	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_57
0x400036f	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_57
0x4000372	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_57
0x4000376	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_57
0x400037a	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_57
0x400037e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000382	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000385	      0xe800000000	                          call 0x400038a	       279	strbuf.h	FUNCTION_57	CALL_2
0x400038a	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x400038d	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000391	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000395	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_57	CALL_2
0x4000398	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_57	CALL_2
0x400039b	      0xe800000000	                          call 0x40003a0	       279	strbuf.h	FUNCTION_57	CALL_2
0x40003a0	              0x90	                                     nop	       280	strbuf.h	FUNCTION_57
0x40003a1	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_57
0x40003a2	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_57
trailer_from_arg	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,2	28
0x4000a58	              0x55	                                push rbp	       176	trailer.c	FUNCTION_13
0x4000a59	          0x4889e5	                            mov rbp, rsp	       176	trailer.c	FUNCTION_13
0x4000a5c	        0x4883ec20	                           sub rsp, 0x20	       176	trailer.c	FUNCTION_13
0x4000a60	        0x48897de8	             mov qword [rbp - 0x18], rdi	       176	trailer.c	FUNCTION_13
0x4000a64	      0xbe01000000	                              mov esi, 1	       177	trailer.c	FUNCTION_13	CALL_1
0x4000a69	      0xbf20000000	                           mov edi, 0x20	       177	trailer.c	FUNCTION_13	CALL_1
0x4000a6e	      0xe800000000	                          call 0x4000a73	       177	trailer.c	FUNCTION_13	CALL_1
0x4000a73	        0x488945f8	                mov qword [rbp - 8], rax	       177	trailer.c	FUNCTION_13	CALL_1
0x4000a77	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       178	trailer.c	FUNCTION_13
0x4000a7b	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       178	trailer.c	FUNCTION_13
0x4000a7f	        0x488b45f8	                mov rax, qword [rbp - 8]	       178	trailer.c	FUNCTION_13
0x4000a83	        0x48895010	             mov qword [rax + 0x10], rdx	       178	trailer.c	FUNCTION_13
0x4000a87	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       179	trailer.c	FUNCTION_13
0x4000a8b	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       179	trailer.c	FUNCTION_13
0x4000a8f	        0x488b45f8	                mov rax, qword [rbp - 8]	       179	trailer.c	FUNCTION_13
0x4000a93	        0x48895018	             mov qword [rax + 0x18], rdx	       179	trailer.c	FUNCTION_13
0x4000a97	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       180	trailer.c	FUNCTION_13
0x4000a9b	    0x48c740180000	               mov qword [rax + 0x18], 0	       180	trailer.c	FUNCTION_13
0x4000aa3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       180	trailer.c	FUNCTION_13
0x4000aa7	        0x488b5018	            mov rdx, qword [rax + 0x18] 	       180	trailer.c	FUNCTION_13
0x4000aab	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       180	trailer.c	FUNCTION_13
0x4000aaf	        0x48895010	             mov qword [rax + 0x10], rdx	       180	trailer.c	FUNCTION_13
0x4000ab3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       181	trailer.c	FUNCTION_13	CALL_2
0x4000ab7	          0x4889c7	                            mov rdi, rax	       181	trailer.c	FUNCTION_13	CALL_2
0x4000aba	      0xe877fdffff	                  call sym.free_arg_item	       181	trailer.c	FUNCTION_13	CALL_2
0x4000abf	        0x488b45f8	                mov rax, qword [rbp - 8]	       182	trailer.c	FUNCTION_13
0x4000ac3	              0xc9	                                   leave	       183	trailer.c	FUNCTION_13
0x4000ac4	              0xc3	                                     ret	       183	trailer.c	FUNCTION_13
format_trailer_info	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,4:ELSE,1:CALL,8	108
0x40030bc	              0x55	                                push rbp	      1123	trailer.c	FUNCTION_51
0x40030bd	          0x4889e5	                            mov rbp, rsp	      1123	trailer.c	FUNCTION_51
0x40030c0	        0x4883ec70	                           sub rsp, 0x70	      1123	trailer.c	FUNCTION_51
0x40030c4	        0x48897da8	             mov qword [rbp - 0x58], rdi	      1123	trailer.c	FUNCTION_51
0x40030c8	        0x488975a0	             mov qword [rbp - 0x60], rsi	      1123	trailer.c	FUNCTION_51
0x40030cc	        0x48895598	             mov qword [rbp - 0x68], rdx	      1123	trailer.c	FUNCTION_51
0x40030d0	    0x64488b042528	                mov rax, qword fs:[0x28]	      1123	trailer.c	FUNCTION_51
0x40030d9	        0x488945f8	                mov qword [rbp - 8], rax	      1123	trailer.c	FUNCTION_51
0x40030dd	            0x31c0	                            xor eax, eax	      1123	trailer.c	FUNCTION_51
0x40030df	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1127	trailer.c	FUNCTION_51	IF_1
0x40030e3	          0x8b4008	                mov eax, dword [rax + 8]	      1127	trailer.c	FUNCTION_51	IF_1
0x40030e6	            0x85c0	                           test eax, eax	      1127	trailer.c	FUNCTION_51	IF_1
0x40030e8	            0x7543	                           jne 0x400312d	      1127	trailer.c	FUNCTION_51	IF_1
0x40030ea	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1127	trailer.c	FUNCTION_51	IF_1
0x40030ee	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1127	trailer.c	FUNCTION_51	IF_1
0x40030f1	            0x85c0	                           test eax, eax	      1127	trailer.c	FUNCTION_51	IF_1
0x40030f3	            0x7538	                           jne 0x400312d	      1127	trailer.c	FUNCTION_51	IF_1
0x40030f5	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1129	trailer.c	FUNCTION_51	IF_1
0x40030f9	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1129	trailer.c	FUNCTION_51	IF_1
0x40030fd	          0x4889c2	                            mov rdx, rax	      1129	trailer.c	FUNCTION_51	IF_1
0x4003100	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1129	trailer.c	FUNCTION_51	IF_1
0x4003104	        0x488b4008	                mov rax, qword [rax + 8]	      1129	trailer.c	FUNCTION_51	IF_1
0x4003108	          0x4829c2	                            sub rdx, rax	      1129	trailer.c	FUNCTION_51	IF_1
0x400310b	          0x4889d0	                            mov rax, rdx	      1129	trailer.c	FUNCTION_51	IF_1
0x400310e	          0x4889c2	                            mov rdx, rax	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003111	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003115	        0x488b4808	                mov rcx, qword [rax + 8]	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003119	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x400311d	          0x4889ce	                            mov rsi, rcx	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003120	          0x4889c7	                            mov rdi, rax	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003123	      0xe800000000	                          call 0x4003128	      1128	trailer.c	FUNCTION_51	IF_1	CALL_1
0x4003128	      0xe925010000	                           jmp 0x4003252	      1130	trailer.c	FUNCTION_51	IF_1
0x400312d	    0xc745b0000000	               mov dword [rbp - 0x50], 0	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003134	      0xe902010000	                           jmp 0x400323b	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003139	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1134	trailer.c	FUNCTION_51	FOR_1
0x400313d	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1134	trailer.c	FUNCTION_51	FOR_1
0x4003141	          0x8b55b0	             mov edx, dword [rbp - 0x50]	      1134	trailer.c	FUNCTION_51	FOR_1
0x4003144	          0x4863d2	                         movsxd rdx, edx	      1134	trailer.c	FUNCTION_51	FOR_1
0x4003147	        0x48c1e203	                              shl rdx, 3	      1134	trailer.c	FUNCTION_51	FOR_1
0x400314b	          0x4801d0	                            add rax, rdx	      1134	trailer.c	FUNCTION_51	FOR_1
0x400314e	          0x488b00	                    mov rax, qword [rax]	      1134	trailer.c	FUNCTION_51	FOR_1
0x4003151	        0x488945b8	             mov qword [rbp - 0x48], rax	      1134	trailer.c	FUNCTION_51	FOR_1
0x4003155	    0x488b15000000	            mov rdx, qword [0x0400315c] 	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x400315c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x4003160	          0x4889d6	                            mov rsi, rdx	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x4003163	          0x4889c7	                            mov rdi, rax	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x4003166	      0xe86fe9ffff	                 call sym.find_separator	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x400316b	          0x8945b4	             mov dword [rbp - 0x4c], eax	      1135	trailer.c	FUNCTION_51	FOR_1	CALL_2
0x400316e	        0x837db400	               cmp dword [rbp - 0x4c], 0	      1137	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003172	     0xf8ea1000000	                           jle 0x4003219	      1137	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003178	    0x48c745c00000	               mov qword [rbp - 0x40], 0	      1138	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003180	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1138	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003188	    0x48c745d00000	               mov qword [rbp - 0x30], 0	      1138	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003190	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1139	trailer.c	FUNCTION_51	FOR_1	IF_2
0x4003198	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1139	trailer.c	FUNCTION_51	FOR_1	IF_2
0x40031a0	    0x48c745f00000	               mov qword [rbp - 0x10], 0	      1139	trailer.c	FUNCTION_51	FOR_1	IF_2
0x40031a8	          0x8b4db4	             mov ecx, dword [rbp - 0x4c]	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031ab	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031af	        0x488d75e0	                   lea rsi, [rbp - 0x20]	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031b3	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031b7	          0x4189c8	                            mov r8d, ecx	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031ba	          0x4889d1	                            mov rcx, rdx	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031bd	      0xba00000000	                              mov edx, 0	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031c2	          0x4889c7	                            mov rdi, rax	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031c5	      0xe8d7e9ffff	                  call sym.parse_trailer	      1141	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_3
0x40031ca	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1142	trailer.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40031ce	          0x8b4010	            mov eax, dword [rax + 0x10] 	      1142	trailer.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40031d1	            0x85c0	                           test eax, eax	      1142	trailer.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40031d3	            0x740c	                            je 0x40031e1	      1142	trailer.c	FUNCTION_51	FOR_1	IF_2	IF_3
0x40031d5	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1143	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_4
0x40031d9	          0x4889c7	                            mov rdi, rax	      1143	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_4
0x40031dc	      0xe8c9f3ffff	                   call sym.unfold_value	      1143	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_4
0x40031e1	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031e5	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031e9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031ed	      0xbe00000000	                              mov esi, 0	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031f2	          0x4889c7	                            mov rdi, rax	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031f5	      0xb800000000	                              mov eax, 0	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031fa	      0xe800000000	                          call 0x40031ff	      1145	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_5
0x40031ff	        0x488d45c0	                   lea rax, [rbp - 0x40]	      1146	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_6
0x4003203	          0x4889c7	                            mov rdi, rax	      1146	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_6
0x4003206	      0xe800000000	                          call 0x400320b	      1146	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_6
0x400320b	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1147	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_7
0x400320f	          0x4889c7	                            mov rdi, rax	      1147	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_7
0x4003212	      0xe800000000	                          call 0x4003217	      1147	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_7
0x4003217	            0xeb1e	                           jmp 0x4003237	      1147	trailer.c	FUNCTION_51	FOR_1	IF_2	CALL_7
0x4003219	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1149	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4
0x400321d	          0x8b4008	                mov eax, dword [rax + 8]	      1149	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4
0x4003220	            0x85c0	                           test eax, eax	      1149	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4
0x4003222	            0x7513	                           jne 0x4003237	      1149	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4
0x4003224	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1150	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4	CALL_8
0x4003228	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1150	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4	CALL_8
0x400322c	          0x4889d6	                            mov rsi, rdx	      1150	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4	CALL_8
0x400322f	          0x4889c7	                            mov rdi, rax	      1150	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4	CALL_8
0x4003232	      0xe837d1ffff	                  call sym.strbuf_addstr	      1150	trailer.c	FUNCTION_51	FOR_1	ELSE_1	IF_4	CALL_8
0x4003237	        0x8345b001	               add dword [rbp - 0x50], 1	      1133	trailer.c	FUNCTION_51	FOR_1
0x400323b	          0x8b45b0	             mov eax, dword [rbp - 0x50]	      1133	trailer.c	FUNCTION_51	FOR_1
0x400323e	          0x4863d0	                         movsxd rdx, eax	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003241	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003245	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003249	          0x4839c2	                            cmp rdx, rax	      1133	trailer.c	FUNCTION_51	FOR_1
0x400324c	     0xf82e7feffff	                            jb 0x4003139	      1133	trailer.c	FUNCTION_51	FOR_1
0x4003252	        0x488b45f8	                mov rax, qword [rbp - 8]	      1154	trailer.c	FUNCTION_51
0x4003256	    0x644833042528	                xor rax, qword fs:[0x28]	      1154	trailer.c	FUNCTION_51
0x400325f	            0x7405	                            je 0x4003266	      1154	trailer.c	FUNCTION_51
0x4003261	      0xe800000000	                          call 0x4003266	      1154	trailer.c	FUNCTION_51
0x4003266	              0xc9	                                   leave	      1154	trailer.c	FUNCTION_51
0x4003267	              0xc3	                                     ret	      1154	trailer.c	FUNCTION_51
add_arg_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,4:ELSE,0:CALL,3	58
0x4001d6c	              0x55	                                push rbp	       679	trailer.c	FUNCTION_35
0x4001d6d	          0x4889e5	                            mov rbp, rsp	       679	trailer.c	FUNCTION_35
0x4001d70	        0x4883ec40	                           sub rsp, 0x40	       679	trailer.c	FUNCTION_35
0x4001d74	        0x48897de8	             mov qword [rbp - 0x18], rdi	       679	trailer.c	FUNCTION_35
0x4001d78	        0x488975e0	             mov qword [rbp - 0x20], rsi	       679	trailer.c	FUNCTION_35
0x4001d7c	        0x488955d8	             mov qword [rbp - 0x28], rdx	       679	trailer.c	FUNCTION_35
0x4001d80	        0x48894dd0	             mov qword [rbp - 0x30], rcx	       679	trailer.c	FUNCTION_35
0x4001d84	        0x4c8945c8	              mov qword [rbp - 0x38], r8	       679	trailer.c	FUNCTION_35
0x4001d88	      0xbe01000000	                              mov esi, 1	       680	trailer.c	FUNCTION_35	CALL_1
0x4001d8d	      0xbf48000000	                           mov edi, 0x48	       680	trailer.c	FUNCTION_35	CALL_1
0x4001d92	      0xe800000000	                          call 0x4001d97	       680	trailer.c	FUNCTION_35	CALL_1
0x4001d97	        0x488945f8	                mov qword [rbp - 8], rax	       680	trailer.c	FUNCTION_35	CALL_1
0x4001d9b	        0x488b45f8	                mov rax, qword [rbp - 8]	       681	trailer.c	FUNCTION_35
0x4001d9f	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       681	trailer.c	FUNCTION_35
0x4001da3	        0x48895010	             mov qword [rax + 0x10], rdx	       681	trailer.c	FUNCTION_35
0x4001da7	        0x488b45f8	                mov rax, qword [rbp - 8]	       682	trailer.c	FUNCTION_35
0x4001dab	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       682	trailer.c	FUNCTION_35
0x4001daf	        0x48895018	             mov qword [rax + 0x18], rdx	       682	trailer.c	FUNCTION_35
0x4001db3	        0x488b45f8	                mov rax, qword [rbp - 8]	       683	trailer.c	FUNCTION_35	CALL_2
0x4001db7	        0x488d5020	                   lea rdx, [rax + 0x20]	       683	trailer.c	FUNCTION_35	CALL_2
0x4001dbb	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       683	trailer.c	FUNCTION_35	CALL_2
0x4001dbf	          0x4889c6	                            mov rsi, rax	       683	trailer.c	FUNCTION_35	CALL_2
0x4001dc2	          0x4889d7	                            mov rdi, rdx	       683	trailer.c	FUNCTION_35	CALL_2
0x4001dc5	      0xe846f6ffff	                 call sym.duplicate_conf	       683	trailer.c	FUNCTION_35	CALL_2
0x4001dca	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       684	trailer.c	FUNCTION_35	IF_1
0x4001dcf	            0x744b	                            je 0x4001e1c	       684	trailer.c	FUNCTION_35	IF_1
0x4001dd1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       685	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001dd5	          0x8b4018	            mov eax, dword [rax + 0x18] 	       685	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001dd8	            0x85c0	                           test eax, eax	       685	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001dda	            0x740e	                            je 0x4001dea	       685	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001ddc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       686	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001de0	          0x8b5018	            mov edx, dword [rax + 0x18] 	       686	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001de3	        0x488b45f8	                mov rax, qword [rbp - 8]	       686	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001de7	          0x895038	             mov dword [rax + 0x38], edx	       686	trailer.c	FUNCTION_35	IF_1	IF_2
0x4001dea	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       687	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001dee	          0x8b401c	            mov eax, dword [rax + 0x1c] 	       687	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001df1	            0x85c0	                           test eax, eax	       687	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001df3	            0x740e	                            je 0x4001e03	       687	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001df5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       688	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001df9	          0x8b501c	            mov edx, dword [rax + 0x1c] 	       688	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001dfc	        0x488b45f8	                mov rax, qword [rbp - 8]	       688	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001e00	          0x89503c	             mov dword [rax + 0x3c], edx	       688	trailer.c	FUNCTION_35	IF_1	IF_3
0x4001e03	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       689	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e07	          0x8b4020	            mov eax, dword [rax + 0x20] 	       689	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e0a	            0x85c0	                           test eax, eax	       689	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e0c	            0x740e	                            je 0x4001e1c	       689	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e0e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       690	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e12	          0x8b5020	            mov edx, dword [rax + 0x20] 	       690	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e15	        0x488b45f8	                mov rax, qword [rbp - 8]	       690	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e19	          0x895040	             mov dword [rax + 0x40], edx	       690	trailer.c	FUNCTION_35	IF_1	IF_4
0x4001e1c	        0x488b45f8	                mov rax, qword [rbp - 8]	       692	trailer.c	FUNCTION_35	CALL_3
0x4001e20	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       692	trailer.c	FUNCTION_35	CALL_3
0x4001e24	          0x4889d6	                            mov rsi, rdx	       692	trailer.c	FUNCTION_35	CALL_3
0x4001e27	          0x4889c7	                            mov rdi, rax	       692	trailer.c	FUNCTION_35	CALL_3
0x4001e2a	      0xe80fe6ffff	                  call sym.list_add_tail	       692	trailer.c	FUNCTION_35	CALL_3
0x4001e2f	              0x90	                                     nop	       693	trailer.c	FUNCTION_35
0x4001e30	              0xc9	                                   leave	       693	trailer.c	FUNCTION_35
0x4001e31	              0xc3	                                     ret	       693	trailer.c	FUNCTION_35
const_error	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	5
0x4000040	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_69
0x4000041	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_69
0x4000044	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_69
0x4000049	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_69
0x400004a	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_69
add_arg_to_input_list	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,1:CALL,4	30
0x4000ac5	              0x55	                                push rbp	       187	trailer.c	FUNCTION_14
0x4000ac6	          0x4889e5	                            mov rbp, rsp	       187	trailer.c	FUNCTION_14
0x4000ac9	        0x4883ec20	                           sub rsp, 0x20	       187	trailer.c	FUNCTION_14
0x4000acd	        0x48897de8	             mov qword [rbp - 0x18], rdi	       187	trailer.c	FUNCTION_14
0x4000ad1	        0x488975e0	             mov qword [rbp - 0x20], rsi	       187	trailer.c	FUNCTION_14
0x4000ad5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       188	trailer.c	FUNCTION_14	CALL_1
0x4000ad9	          0x8b4038	            mov eax, dword [rax + 0x38] 	       188	trailer.c	FUNCTION_14	CALL_1
0x4000adc	            0x89c7	                            mov edi, eax	       188	trailer.c	FUNCTION_14	CALL_1
0x4000ade	      0xe880faffff	                   call sym.after_or_end	       188	trailer.c	FUNCTION_14	CALL_1
0x4000ae3	          0x8945f4	              mov dword [rbp - 0xc], eax	       188	trailer.c	FUNCTION_14	CALL_1
0x4000ae6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       189	trailer.c	FUNCTION_14	CALL_2
0x4000aea	          0x4889c7	                            mov rdi, rax	       189	trailer.c	FUNCTION_14	CALL_2
0x4000aed	      0xe866ffffff	               call sym.trailer_from_arg	       189	trailer.c	FUNCTION_14	CALL_2
0x4000af2	        0x488945f8	                mov qword [rbp - 8], rax	       189	trailer.c	FUNCTION_14	CALL_2
0x4000af6	        0x837df400	                cmp dword [rbp - 0xc], 0	       190	trailer.c	FUNCTION_14	IF_1
0x4000afa	            0x7415	                            je 0x4000b11	       190	trailer.c	FUNCTION_14	IF_1
0x4000afc	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       191	trailer.c	FUNCTION_14	CALL_3
0x4000b00	        0x488b45f8	                mov rax, qword [rbp - 8]	       191	trailer.c	FUNCTION_14	CALL_3
0x4000b04	          0x4889d6	                            mov rsi, rdx	       191	trailer.c	FUNCTION_14	CALL_3
0x4000b07	          0x4889c7	                            mov rdi, rax	       191	trailer.c	FUNCTION_14	CALL_3
0x4000b0a	      0xe8ecf8ffff	                       call sym.list_add	       191	trailer.c	FUNCTION_14	CALL_3
0x4000b0f	            0xeb13	                           jmp 0x4000b24	       194	trailer.c	FUNCTION_14
0x4000b11	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       193	trailer.c	FUNCTION_14	CALL_4
0x4000b15	        0x488b45f8	                mov rax, qword [rbp - 8]	       193	trailer.c	FUNCTION_14	CALL_4
0x4000b19	          0x4889d6	                            mov rsi, rdx	       193	trailer.c	FUNCTION_14	CALL_4
0x4000b1c	          0x4889c7	                            mov rdi, rax	       193	trailer.c	FUNCTION_14	CALL_4
0x4000b1f	      0xe81af9ffff	                  call sym.list_add_tail	       193	trailer.c	FUNCTION_14	CALL_4
0x4000b24	              0x90	                                     nop	       194	trailer.c	FUNCTION_14
0x4000b25	              0xc9	                                   leave	       194	trailer.c	FUNCTION_14
0x4000b26	              0xc3	                                     ret	       194	trailer.c	FUNCTION_14
get_conf_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,0:CALL,5	46
0x40014a0	              0x55	                                push rbp	       438	trailer.c	FUNCTION_26
0x40014a1	          0x4889e5	                            mov rbp, rsp	       438	trailer.c	FUNCTION_26
0x40014a4	        0x4883ec20	                           sub rsp, 0x20	       438	trailer.c	FUNCTION_26
0x40014a8	        0x48897de8	             mov qword [rbp - 0x18], rdi	       438	trailer.c	FUNCTION_26
0x40014ac	    0x488b05000000	            mov rax, qword [0x040014b3] 	       443	trailer.c	FUNCTION_26
0x40014b3	        0x488945f0	             mov qword [rbp - 0x10], rax	       443	trailer.c	FUNCTION_26
0x40014b7	            0xeb34	                           jmp 0x40014ed	       443	trailer.c	FUNCTION_26
0x40014b9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       444	trailer.c	FUNCTION_26
0x40014bd	        0x488945f8	                mov qword [rbp - 8], rax	       444	trailer.c	FUNCTION_26
0x40014c1	        0x488b45f8	                mov rax, qword [rbp - 8]	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014c5	        0x488b4020	            mov rax, qword [rax + 0x20] 	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014c9	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014cd	          0x4889d6	                            mov rsi, rdx	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014d0	          0x4889c7	                            mov rdi, rax	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014d3	      0xe800000000	                          call 0x40014d8	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014d8	            0x85c0	                           test eax, eax	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014da	            0x7506	                           jne 0x40014e2	       445	trailer.c	FUNCTION_26	IF_1	CALL_1
0x40014dc	        0x488b45f8	                mov rax, qword [rbp - 8]	       446	trailer.c	FUNCTION_26	IF_1
0x40014e0	            0xeb69	                           jmp 0x400154b	       446	trailer.c	FUNCTION_26	IF_1
0x40014e2	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       443	trailer.c	FUNCTION_26
0x40014e6	          0x488b00	                    mov rax, qword [rax]	       443	trailer.c	FUNCTION_26
0x40014e9	        0x488945f0	             mov qword [rbp - 0x10], rax	       443	trailer.c	FUNCTION_26
0x40014ed	    0x48817df00000	               cmp qword [rbp - 0x10], 0	       443	trailer.c	FUNCTION_26
0x40014f5	            0x75c2	                           jne 0x40014b9	       443	trailer.c	FUNCTION_26
0x40014f7	      0xbe01000000	                              mov esi, 1	       450	trailer.c	FUNCTION_26	CALL_2
0x40014fc	      0xbf48000000	                           mov edi, 0x48	       450	trailer.c	FUNCTION_26	CALL_2
0x4001501	      0xe800000000	                          call 0x4001506	       450	trailer.c	FUNCTION_26	CALL_2
0x4001506	        0x488945f8	                mov qword [rbp - 8], rax	       450	trailer.c	FUNCTION_26	CALL_2
0x400150a	        0x488b45f8	                mov rax, qword [rbp - 8]	       451	trailer.c	FUNCTION_26	CALL_3
0x400150e	        0x4883c020	                           add rax, 0x20	       451	trailer.c	FUNCTION_26	CALL_3
0x4001512	      0xbe00000000	                              mov esi, 0	       451	trailer.c	FUNCTION_26	CALL_3
0x4001517	          0x4889c7	                            mov rdi, rax	       451	trailer.c	FUNCTION_26	CALL_3
0x400151a	      0xe8f1feffff	                 call sym.duplicate_conf	       451	trailer.c	FUNCTION_26	CALL_3
0x400151f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       452	trailer.c	FUNCTION_26	CALL_4
0x4001523	          0x4889c7	                            mov rdi, rax	       452	trailer.c	FUNCTION_26	CALL_4
0x4001526	      0xe800000000	                          call 0x400152b	       452	trailer.c	FUNCTION_26	CALL_4
0x400152b	          0x4889c2	                            mov rdx, rax	       452	trailer.c	FUNCTION_26	CALL_4
0x400152e	        0x488b45f8	                mov rax, qword [rbp - 8]	       452	trailer.c	FUNCTION_26	CALL_4
0x4001532	        0x48895020	             mov qword [rax + 0x20], rdx	       452	trailer.c	FUNCTION_26	CALL_4
0x4001536	        0x488b45f8	                mov rax, qword [rbp - 8]	       454	trailer.c	FUNCTION_26	CALL_5
0x400153a	      0xbe00000000	                              mov esi, 0	       454	trailer.c	FUNCTION_26	CALL_5
0x400153f	          0x4889c7	                            mov rdi, rax	       454	trailer.c	FUNCTION_26	CALL_5
0x4001542	      0xe8f7eeffff	                  call sym.list_add_tail	       454	trailer.c	FUNCTION_26	CALL_5
0x4001547	        0x488b45f8	                mov rax, qword [rbp - 8]	       456	trailer.c	FUNCTION_26
0x400154b	              0xc9	                                   leave	       457	trailer.c	FUNCTION_26
0x400154c	              0xc3	                                     ret	       457	trailer.c	FUNCTION_26
strbuf_strip_suffix	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,1:ELSE,1:CALL,2	26
0x40003a3	              0x55	                                push rbp	       495	strbuf.h	FUNCTION_58
0x40003a4	          0x4889e5	                            mov rbp, rsp	       495	strbuf.h	FUNCTION_58
0x40003a7	        0x4883ec10	                           sub rsp, 0x10	       495	strbuf.h	FUNCTION_58
0x40003ab	        0x48897df8	                mov qword [rbp - 8], rdi	       495	strbuf.h	FUNCTION_58
0x40003af	        0x488975f0	             mov qword [rbp - 0x10], rsi	       495	strbuf.h	FUNCTION_58
0x40003b3	        0x488b45f8	                mov rax, qword [rbp - 8]	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003b7	        0x488d4808	                      lea rcx, [rax + 8]	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003bb	        0x488b45f8	                mov rax, qword [rbp - 8]	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003bf	        0x488b4010	            mov rax, qword [rax + 0x10] 	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003c3	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003c7	          0x4889ce	                            mov rsi, rcx	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003ca	          0x4889c7	                            mov rdi, rax	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003cd	      0xe8cffcffff	               call sym.strip_suffix_mem	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003d2	            0x85c0	                           test eax, eax	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003d4	            0x741e	                            je 0x40003f4	       496	strbuf.h	FUNCTION_58	IF_1	CALL_1
0x40003d6	        0x488b45f8	                mov rax, qword [rbp - 8]	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003da	        0x488b5008	                mov rdx, qword [rax + 8]	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003de	        0x488b45f8	                mov rax, qword [rbp - 8]	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003e2	          0x4889d6	                            mov rsi, rdx	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003e5	          0x4889c7	                            mov rdi, rax	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003e8	      0xe879feffff	                  call sym.strbuf_setlen	       497	strbuf.h	FUNCTION_58	IF_1	CALL_2
0x40003ed	      0xb801000000	                              mov eax, 1	       498	strbuf.h	FUNCTION_58	IF_1
0x40003f2	            0xeb05	                           jmp 0x40003f9	       498	strbuf.h	FUNCTION_58	IF_1
0x40003f4	      0xb800000000	                              mov eax, 0	       500	strbuf.h	FUNCTION_58	ELSE_1
0x40003f9	              0xc9	                                   leave	       501	strbuf.h	FUNCTION_58
0x40003fa	              0xc3	                                     ret	       501	strbuf.h	FUNCTION_58
__list_del	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,0	13
0x4000483	              0x55	                                push rbp	        71	list.h	FUNCTION_93
0x4000484	          0x4889e5	                            mov rbp, rsp	        71	list.h	FUNCTION_93
0x4000487	        0x48897df8	                mov qword [rbp - 8], rdi	        71	list.h	FUNCTION_93
0x400048b	        0x488975f0	             mov qword [rbp - 0x10], rsi	        71	list.h	FUNCTION_93
0x400048f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        72	list.h	FUNCTION_93
0x4000493	        0x488b55f8	                mov rdx, qword [rbp - 8]	        72	list.h	FUNCTION_93
0x4000497	        0x48895008	                mov qword [rax + 8], rdx	        72	list.h	FUNCTION_93
0x400049b	        0x488b45f8	                mov rax, qword [rbp - 8]	        73	list.h	FUNCTION_93
0x400049f	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	        73	list.h	FUNCTION_93
0x40004a3	          0x488910	                    mov qword [rax], rdx	        73	list.h	FUNCTION_93
0x40004a6	              0x90	                                     nop	        74	list.h	FUNCTION_93
0x40004a7	              0x5d	                                 pop rbp	        74	list.h	FUNCTION_93
0x40004a8	              0xc3	                                     ret	        74	list.h	FUNCTION_93
free_trailer_item	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:IF,0:ELSE,0:CALL,3	18
0x40007fb	              0x55	                                push rbp	       119	trailer.c	FUNCTION_8
0x40007fc	          0x4889e5	                            mov rbp, rsp	       119	trailer.c	FUNCTION_8
0x40007ff	        0x4883ec10	                           sub rsp, 0x10	       119	trailer.c	FUNCTION_8
0x4000803	        0x48897df8	                mov qword [rbp - 8], rdi	       119	trailer.c	FUNCTION_8
0x4000807	        0x488b45f8	                mov rax, qword [rbp - 8]	       120	trailer.c	FUNCTION_8	CALL_1
0x400080b	        0x488b4010	            mov rax, qword [rax + 0x10] 	       120	trailer.c	FUNCTION_8	CALL_1
0x400080f	          0x4889c7	                            mov rdi, rax	       120	trailer.c	FUNCTION_8	CALL_1
0x4000812	      0xe800000000	                          call 0x4000817	       120	trailer.c	FUNCTION_8	CALL_1
0x4000817	        0x488b45f8	                mov rax, qword [rbp - 8]	       121	trailer.c	FUNCTION_8	CALL_2
0x400081b	        0x488b4018	            mov rax, qword [rax + 0x18] 	       121	trailer.c	FUNCTION_8	CALL_2
0x400081f	          0x4889c7	                            mov rdi, rax	       121	trailer.c	FUNCTION_8	CALL_2
0x4000822	      0xe800000000	                          call 0x4000827	       121	trailer.c	FUNCTION_8	CALL_2
0x4000827	        0x488b45f8	                mov rax, qword [rbp - 8]	       122	trailer.c	FUNCTION_8	CALL_3
0x400082b	          0x4889c7	                            mov rdi, rax	       122	trailer.c	FUNCTION_8	CALL_3
0x400082e	      0xe800000000	                          call 0x4000833	       122	trailer.c	FUNCTION_8	CALL_3
0x4000833	              0x90	                                     nop	       123	trailer.c	FUNCTION_8
0x4000834	              0xc9	                                   leave	       123	trailer.c	FUNCTION_8
0x4000835	              0xc3	                                     ret	       123	trailer.c	FUNCTION_8
process_input_file	WHILE,0:FOR,1:SWITCH,0:functions,0:DO,0:IF,6:ELSE,1:CALL,14	150
0x40026da	              0x55	                                push rbp	       946	trailer.c	FUNCTION_45
0x40026db	          0x4889e5	                            mov rbp, rsp	       946	trailer.c	FUNCTION_45
0x40026de	              0x53	                                push rbx	       946	trailer.c	FUNCTION_45
0x40026df	    0x4881eca80000	                           sub rsp, 0xa8	       946	trailer.c	FUNCTION_45
0x40026e6	    0x4889bd68ffff	             mov qword [rbp - 0x98], rdi	       946	trailer.c	FUNCTION_45
0x40026ed	    0x4889b560ffff	             mov qword [rbp - 0xa0], rsi	       946	trailer.c	FUNCTION_45
0x40026f4	    0x48899558ffff	             mov qword [rbp - 0xa8], rdx	       946	trailer.c	FUNCTION_45
0x40026fb	    0x48898d50ffff	             mov qword [rbp - 0xb0], rcx	       946	trailer.c	FUNCTION_45
0x4002702	    0x64488b042528	                mov rax, qword fs:[0x28]	       946	trailer.c	FUNCTION_45
0x400270b	        0x488945e8	             mov qword [rbp - 0x18], rax	       946	trailer.c	FUNCTION_45
0x400270f	            0x31c0	                            xor eax, eax	       946	trailer.c	FUNCTION_45
0x4002711	    0x48c745800000	               mov qword [rbp - 0x80], 0	       948	trailer.c	FUNCTION_45
0x4002719	    0x48c745880000	               mov qword [rbp - 0x78], 0	       948	trailer.c	FUNCTION_45
0x4002721	    0x48c745900000	               mov qword [rbp - 0x70], 0	       948	trailer.c	FUNCTION_45
0x4002729	    0x48c745a00000	               mov qword [rbp - 0x60], 0	       949	trailer.c	FUNCTION_45
0x4002731	    0x48c745a80000	               mov qword [rbp - 0x58], 0	       949	trailer.c	FUNCTION_45
0x4002739	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       949	trailer.c	FUNCTION_45
0x4002741	    0x488b9560ffff	             mov rdx, qword [rbp - 0xa0]	       952	trailer.c	FUNCTION_45	CALL_1
0x4002748	        0x488d45c0	                   lea rax, [rbp - 0x40]	       952	trailer.c	FUNCTION_45	CALL_1
0x400274c	          0x4889d6	                            mov rsi, rdx	       952	trailer.c	FUNCTION_45	CALL_1
0x400274f	          0x4889c7	                            mov rdi, rax	       952	trailer.c	FUNCTION_45	CALL_1
0x4002752	      0xe800000000	                          call 0x4002757	       952	trailer.c	FUNCTION_45	CALL_1
0x4002757	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       955	trailer.c	FUNCTION_45	IF_1
0x400275e	          0x8b4008	                mov eax, dword [rax + 8]	       955	trailer.c	FUNCTION_45	IF_1
0x4002761	            0x85c0	                           test eax, eax	       955	trailer.c	FUNCTION_45	IF_1
0x4002763	            0x7538	                           jne 0x400279d	       955	trailer.c	FUNCTION_45	IF_1
0x4002765	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       956	trailer.c	FUNCTION_45	CALL_2
0x4002769	          0x4889c2	                            mov rdx, rax	       956	trailer.c	FUNCTION_45	CALL_2
0x400276c	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       956	trailer.c	FUNCTION_45	CALL_2
0x4002773	          0x4829c2	                            sub rdx, rax	       956	trailer.c	FUNCTION_45	CALL_2
0x4002776	          0x4889d0	                            mov rax, rdx	       956	trailer.c	FUNCTION_45	CALL_2
0x4002779	          0x4889c6	                            mov rsi, rax	       956	trailer.c	FUNCTION_45	CALL_2
0x400277c	    0x488b9568ffff	             mov rdx, qword [rbp - 0x98]	       956	trailer.c	FUNCTION_45	CALL_2
0x4002783	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       956	trailer.c	FUNCTION_45	CALL_2
0x400278a	          0x4889d1	                            mov rcx, rdx	       956	trailer.c	FUNCTION_45	CALL_2
0x400278d	          0x4889f2	                            mov rdx, rsi	       956	trailer.c	FUNCTION_45	CALL_2
0x4002790	      0xbe01000000	                              mov esi, 1	       956	trailer.c	FUNCTION_45	CALL_2
0x4002795	          0x4889c7	                            mov rdi, rax	       956	trailer.c	FUNCTION_45	CALL_2
0x4002798	      0xe800000000	                          call 0x400279d	       956	trailer.c	FUNCTION_45	CALL_2
0x400279d	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       958	trailer.c	FUNCTION_45	IF_2
0x40027a4	          0x8b4008	                mov eax, dword [rax + 8]	       958	trailer.c	FUNCTION_45	IF_2
0x40027a7	            0x85c0	                           test eax, eax	       958	trailer.c	FUNCTION_45	IF_2
0x40027a9	            0x751b	                           jne 0x40027c6	       958	trailer.c	FUNCTION_45	IF_2
0x40027ab	          0x8b45c0	             mov eax, dword [rbp - 0x40]	       958	trailer.c	FUNCTION_45	IF_2
0x40027ae	            0x85c0	                           test eax, eax	       958	trailer.c	FUNCTION_45	IF_2
0x40027b0	            0x7514	                           jne 0x40027c6	       958	trailer.c	FUNCTION_45	IF_2
0x40027b2	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       959	trailer.c	FUNCTION_45	CALL_3
0x40027b9	          0x4889c6	                            mov rsi, rax	       959	trailer.c	FUNCTION_45	CALL_3
0x40027bc	      0xbf0a000000	                            mov edi, 0xa	       959	trailer.c	FUNCTION_45	CALL_3
0x40027c1	      0xe800000000	                          call 0x40027c6	       959	trailer.c	FUNCTION_45	CALL_3
0x40027c6	    0xc78570ffffff	               mov dword [rbp - 0x90], 0	       961	trailer.c	FUNCTION_45	FOR_1
0x40027d0	      0xe94b010000	                           jmp 0x4002920	       961	trailer.c	FUNCTION_45	FOR_1
0x40027d5	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       963	trailer.c	FUNCTION_45	FOR_1
0x40027d9	    0x8b9570ffffff	             mov edx, dword [rbp - 0x90]	       963	trailer.c	FUNCTION_45	FOR_1
0x40027df	          0x4863d2	                         movsxd rdx, edx	       963	trailer.c	FUNCTION_45	FOR_1
0x40027e2	        0x48c1e203	                              shl rdx, 3	       963	trailer.c	FUNCTION_45	FOR_1
0x40027e6	          0x4801d0	                            add rax, rdx	       963	trailer.c	FUNCTION_45	FOR_1
0x40027e9	          0x488b00	                    mov rax, qword [rax]	       963	trailer.c	FUNCTION_45	FOR_1
0x40027ec	    0x48898578ffff	             mov qword [rbp - 0x88], rax	       963	trailer.c	FUNCTION_45	FOR_1
0x40027f3	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       964	trailer.c	FUNCTION_45	FOR_1	IF_3
0x40027fa	           0xfb610	                   movzx edx, byte [rax]	       964	trailer.c	FUNCTION_45	FOR_1	IF_3
0x40027fd	     0xfb605000000	           movzx eax, byte [0x04002804] 	       964	trailer.c	FUNCTION_45	FOR_1	IF_3
0x4002804	            0x38c2	                              cmp dl, al	       964	trailer.c	FUNCTION_45	FOR_1	IF_3
0x4002806	     0xf840c010000	                            je 0x4002918	       964	trailer.c	FUNCTION_45	FOR_1	IF_3
0x400280c	    0x488b15000000	            mov rdx, qword [0x04002813] 	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x4002813	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x400281a	          0x4889d6	                            mov rsi, rdx	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x400281d	          0x4889c7	                            mov rdi, rax	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x4002820	      0xe8b5f2ffff	                 call sym.find_separator	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x4002825	    0x898574ffffff	             mov dword [rbp - 0x8c], eax	       966	trailer.c	FUNCTION_45	FOR_1	CALL_4
0x400282b	    0x83bd74ffffff	               cmp dword [rbp - 0x8c], 0	       967	trailer.c	FUNCTION_45	FOR_1	IF_4
0x4002832	     0xf8e81000000	                           jle 0x40028b9	       967	trailer.c	FUNCTION_45	FOR_1	IF_4
0x4002838	    0x8b8d74ffffff	             mov ecx, dword [rbp - 0x8c]	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x400283e	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002845	        0x488d75a0	                   lea rsi, [rbp - 0x60]	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002849	        0x488d4580	                   lea rax, [rbp - 0x80]	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x400284d	          0x4189c8	                            mov r8d, ecx	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002850	          0x4889d1	                            mov rcx, rdx	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002853	      0xba00000000	                              mov edx, 0	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002858	          0x4889c7	                            mov rdi, rax	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x400285b	      0xe841f3ffff	                  call sym.parse_trailer	       968	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_5
0x4002860	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       970	trailer.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x4002867	          0x8b4010	            mov eax, dword [rax + 0x10] 	       970	trailer.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x400286a	            0x85c0	                           test eax, eax	       970	trailer.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x400286c	            0x740c	                            je 0x400287a	       970	trailer.c	FUNCTION_45	FOR_1	IF_4	IF_5
0x400286e	        0x488d45a0	                   lea rax, [rbp - 0x60]	       971	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_6
0x4002872	          0x4889c7	                            mov rdi, rax	       971	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_6
0x4002875	      0xe830fdffff	                   call sym.unfold_value	       971	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_6
0x400287a	        0x488d45a0	                   lea rax, [rbp - 0x60]	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x400287e	      0xbe00000000	                              mov esi, 0	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x4002883	          0x4889c7	                            mov rdi, rax	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x4002886	      0xe800000000	                          call 0x400288b	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x400288b	          0x4889c3	                            mov rbx, rax	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x400288e	        0x488d4580	                   lea rax, [rbp - 0x80]	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x4002892	      0xbe00000000	                              mov esi, 0	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x4002897	          0x4889c7	                            mov rdi, rax	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x400289a	      0xe800000000	                          call 0x400289f	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x400289f	          0x4889c1	                            mov rcx, rax	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028a2	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028a9	          0x4889da	                            mov rdx, rbx	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028ac	          0x4889ce	                            mov rsi, rcx	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028af	          0x4889c7	                            mov rdi, rax	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028b2	      0xe85df4ffff	               call sym.add_trailer_item	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028b7	            0xeb60	                           jmp 0x4002919	       972	trailer.c	FUNCTION_45	FOR_1	IF_4	CALL_7
0x40028b9	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       975	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6
0x40028c0	          0x8b4008	                mov eax, dword [rax + 8]	       975	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6
0x40028c3	            0x85c0	                           test eax, eax	       975	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6
0x40028c5	            0x7552	                           jne 0x4002919	       975	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6
0x40028c7	    0x488b9578ffff	             mov rdx, qword [rbp - 0x88]	       976	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_10
0x40028ce	        0x488d45a0	                   lea rax, [rbp - 0x60]	       976	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_10
0x40028d2	          0x4889d6	                            mov rsi, rdx	       976	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_10
0x40028d5	          0x4889c7	                            mov rdi, rax	       976	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_10
0x40028d8	      0xe891daffff	                  call sym.strbuf_addstr	       976	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_10
0x40028dd	        0x488d45a0	                   lea rax, [rbp - 0x60]	       977	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_11
0x40028e1	      0xbe00000000	                              mov esi, 0	       977	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_11
0x40028e6	          0x4889c7	                            mov rdi, rax	       977	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_11
0x40028e9	      0xe8b5daffff	            call sym.strbuf_strip_suffix	       977	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_11
0x40028ee	        0x488d45a0	                   lea rax, [rbp - 0x60]	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x40028f2	      0xbe00000000	                              mov esi, 0	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x40028f7	          0x4889c7	                            mov rdi, rax	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x40028fa	      0xe800000000	                          call 0x40028ff	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x40028ff	          0x4889c2	                            mov rdx, rax	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x4002902	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x4002909	      0xbe00000000	                              mov esi, 0	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x400290e	          0x4889c7	                            mov rdi, rax	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x4002911	      0xe8fef3ffff	               call sym.add_trailer_item	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x4002916	            0xeb01	                           jmp 0x4002919	       978	trailer.c	FUNCTION_45	FOR_1	ELSE_1	IF_6	CALL_12
0x4002918	              0x90	                                     nop	       965	trailer.c	FUNCTION_45	FOR_1	IF_3
0x4002919	    0x838570ffffff	               add dword [rbp - 0x90], 1	       961	trailer.c	FUNCTION_45	FOR_1
0x4002920	    0x8b8570ffffff	             mov eax, dword [rbp - 0x90]	       961	trailer.c	FUNCTION_45	FOR_1
0x4002926	          0x4863d0	                         movsxd rdx, eax	       961	trailer.c	FUNCTION_45	FOR_1
0x4002929	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       961	trailer.c	FUNCTION_45	FOR_1
0x400292d	          0x4839c2	                            cmp rdx, rax	       961	trailer.c	FUNCTION_45	FOR_1
0x4002930	     0xf829ffeffff	                            jb 0x40027d5	       961	trailer.c	FUNCTION_45	FOR_1
0x4002936	        0x488d45c0	                   lea rax, [rbp - 0x40]	       984	trailer.c	FUNCTION_45	CALL_14
0x400293a	          0x4889c7	                            mov rdi, rax	       984	trailer.c	FUNCTION_45	CALL_14
0x400293d	      0xe800000000	                          call 0x4002942	       984	trailer.c	FUNCTION_45	CALL_14
0x4002942	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       986	trailer.c	FUNCTION_45
0x4002946	          0x4889c2	                            mov rdx, rax	       986	trailer.c	FUNCTION_45
0x4002949	    0x488b8560ffff	             mov rax, qword [rbp - 0xa0]	       986	trailer.c	FUNCTION_45
0x4002950	          0x4829c2	                            sub rdx, rax	       986	trailer.c	FUNCTION_45
0x4002953	          0x4889d0	                            mov rax, rdx	       986	trailer.c	FUNCTION_45
0x4002956	        0x488b5de8	             mov rbx, qword [rbp - 0x18]	       987	trailer.c	FUNCTION_45
0x400295a	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       987	trailer.c	FUNCTION_45
0x4002963	            0x7405	                            je 0x400296a	       987	trailer.c	FUNCTION_45
0x4002965	      0xe800000000	                          call 0x400296a	       987	trailer.c	FUNCTION_45
0x400296a	    0x4881c4a80000	                           add rsp, 0xa8	       987	trailer.c	FUNCTION_45
0x4002971	              0x5b	                                 pop rbx	       987	trailer.c	FUNCTION_45
0x4002972	              0x5d	                                 pop rbp	       987	trailer.c	FUNCTION_45
0x4002973	              0xc3	                                     ret	       987	trailer.c	FUNCTION_45
skip_prefix	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,1:IF,1:ELSE,0:CALL,0	27
0x400004b	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_70
0x400004c	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_70
0x400004f	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_70
0x4000053	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_70
0x4000057	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_70
0x400005b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x400005f	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000062	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000064	            0x7512	                           jne 0x4000078	       484	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000066	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x400006a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x400006e	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000071	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000076	            0xeb27	                           jmp 0x400009f	       486	git-compat-util.h	FUNCTION_70	DO_1	IF_1
0x4000078	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x400007c	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000080	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000084	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000087	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x400008b	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x400008f	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000093	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000096	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_70	DO_1
0x4000098	            0x74c1	                            je 0x400005b	       488	git-compat-util.h	FUNCTION_70	DO_1
0x400009a	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_70
0x400009f	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_70
0x40000a0	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_70
