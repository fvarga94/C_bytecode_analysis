git_reset_config	IF,1:ELSE,0:WHILE,0:CALL,3:SWITCH,0:FOR,0:DO,0:functions,0	20
0x4000040	        0x4883ec08	                              sub rsp, 8	       273	reset.c	FUNCTION_10
0x4000044	          0x4889f8	                            mov rax, rdi	       273	reset.c	FUNCTION_10
0x4000047	          0x4989f0	                             mov r8, rsi	       273	reset.c	FUNCTION_10
0x400004a	      0xbf00000000	                              mov edi, 0	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004f	      0xb912000000	                           mov ecx, 0x12	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000054	          0x4889c6	                            mov rsi, rax	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000057	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000059	        0x400f97c6	                                seta sil	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400005d	           0xf92c1	                                 setb cl	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000060	          0x4038ce	                             cmp sil, cl	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000063	            0x750d	                           jne 0x4000072	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000065	          0x4c89c6	                             mov rsi, r8	       275	reset.c	FUNCTION_10	CALL_2
0x4000068	          0x4889c7	                            mov rdi, rax	       275	reset.c	FUNCTION_10	CALL_2
0x400006b	      0xe800000000	                          call 0x4000070	       275	reset.c	FUNCTION_10	CALL_2
0x4000070	            0xeb0b	                           jmp 0x400007d	       275	reset.c	FUNCTION_10	CALL_2
0x4000072	          0x4c89c6	                             mov rsi, r8	       277	reset.c	FUNCTION_10	CALL_3
0x4000075	          0x4889c7	                            mov rdi, rax	       277	reset.c	FUNCTION_10	CALL_3
0x4000078	      0xe800000000	                          call 0x400007d	       277	reset.c	FUNCTION_10	CALL_3
0x400007d	        0x4883c408	                              add rsp, 8	       278	reset.c	FUNCTION_10
0x4000081	              0xc3	                                     ret	       278	reset.c	FUNCTION_10
cmd_reset	IF,26:ELSE,4:WHILE,0:CALL,70:SWITCH,0:FOR,0:DO,0:functions,0	581
0x400044f	            0x4155	                                push r13	       281	reset.c	FUNCTION_11
0x4000451	            0x4154	                                push r12	       281	reset.c	FUNCTION_11
0x4000453	              0x55	                                push rbp	       281	reset.c	FUNCTION_11
0x4000454	              0x53	                                push rbx	       281	reset.c	FUNCTION_11
0x4000455	    0x4881ecc80400	                          sub rsp, 0x4c8	       281	reset.c	FUNCTION_11
0x400045c	            0x89fb	                            mov ebx, edi	       281	reset.c	FUNCTION_11
0x400045e	          0x4889f5	                            mov rbp, rsi	       281	reset.c	FUNCTION_11
0x4000461	          0x4989d4	                            mov r12, rdx	       281	reset.c	FUNCTION_11
0x4000464	    0x64488b042528	                mov rax, qword fs:[0x28]	       281	reset.c	FUNCTION_11
0x400046d	    0x48898424b804	            mov qword [rsp + 0x4b8], rax	       281	reset.c	FUNCTION_11
0x4000475	            0x31c0	                            xor eax, eax	       281	reset.c	FUNCTION_11
0x4000477	    0xc744240c0500	                mov dword [rsp + 0xc], 5	       282	reset.c	FUNCTION_11
0x400047f	    0xc74424100000	               mov dword [rsp + 0x10], 0	       282	reset.c	FUNCTION_11
0x4000487	    0xc74424140000	               mov dword [rsp + 0x14], 0	       283	reset.c	FUNCTION_11
0x400048f	    0xc74424180000	               mov dword [rsp + 0x18], 0	       287	reset.c	FUNCTION_11
0x4000497	    0x488dbc243002	                  lea rdi, [rsp + 0x230]	       288	reset.c	FUNCTION_11
0x400049f	      0xb950000000	                           mov ecx, 0x50	       288	reset.c	FUNCTION_11
0x40004a4	          0xf348ab	              rep stosq qword [rdi], rax	       288	reset.c	FUNCTION_11
0x40004a7	    0xc78424300200	              mov dword [rsp + 0x230], 6	       288	reset.c	FUNCTION_11
0x40004b2	    0xc78424340200	          mov dword [rsp + 0x234], 0x71 	       288	reset.c	FUNCTION_11
0x40004bd	    0x48c784243802	              mov qword [rsp + 0x238], 0	       288	reset.c	FUNCTION_11
0x40004c9	      0x488d442410	                   lea rax, [rsp + 0x10]	       288	reset.c	FUNCTION_11
0x40004ce	    0x488984244002	            mov qword [rsp + 0x240], rax	       288	reset.c	FUNCTION_11
0x40004d6	    0x48c784245002	              mov qword [rsp + 0x250], 0	       288	reset.c	FUNCTION_11
0x40004e2	    0xc78424580200	              mov dword [rsp + 0x258], 2	       288	reset.c	FUNCTION_11
0x40004ed	    0xc78424700200	              mov dword [rsp + 0x270], 7	       288	reset.c	FUNCTION_11
0x40004f8	    0x48c784247802	              mov qword [rsp + 0x278], 0	       288	reset.c	FUNCTION_11
0x4000504	      0x488d44240c	                    lea rax, [rsp + 0xc]	       288	reset.c	FUNCTION_11
0x4000509	    0x488984248002	            mov qword [rsp + 0x280], rax	       288	reset.c	FUNCTION_11
0x4000511	    0x48c784249002	              mov qword [rsp + 0x290], 0	       288	reset.c	FUNCTION_11
0x400051d	    0xc78424980200	              mov dword [rsp + 0x298], 2	       288	reset.c	FUNCTION_11
0x4000528	    0xc78424b00200	              mov dword [rsp + 0x2b0], 7	       288	reset.c	FUNCTION_11
0x4000533	    0x48c78424b802	              mov qword [rsp + 0x2b8], 0	       288	reset.c	FUNCTION_11
0x400053f	    0x48898424c002	            mov qword [rsp + 0x2c0], rax	       288	reset.c	FUNCTION_11
0x4000547	    0x48c78424d002	              mov qword [rsp + 0x2d0], 0	       288	reset.c	FUNCTION_11
0x4000553	    0xc78424d80200	              mov dword [rsp + 0x2d8], 2	       288	reset.c	FUNCTION_11
0x400055e	    0x48c78424e802	              mov qword [rsp + 0x2e8], 1	       288	reset.c	FUNCTION_11
0x400056a	    0xc78424f00200	              mov dword [rsp + 0x2f0], 7	       288	reset.c	FUNCTION_11
0x4000575	    0x48c78424f802	              mov qword [rsp + 0x2f8], 0	       288	reset.c	FUNCTION_11
0x4000581	    0x488984240003	            mov qword [rsp + 0x300], rax	       288	reset.c	FUNCTION_11
0x4000589	    0x48c784241003	              mov qword [rsp + 0x310], 0	       288	reset.c	FUNCTION_11
0x4000595	    0xc78424180300	              mov dword [rsp + 0x318], 2	       288	reset.c	FUNCTION_11
0x40005a0	    0x48c784242803	              mov qword [rsp + 0x328], 2	       288	reset.c	FUNCTION_11
0x40005ac	    0xc78424300300	              mov dword [rsp + 0x330], 7	       288	reset.c	FUNCTION_11
0x40005b7	    0x48c784243803	              mov qword [rsp + 0x338], 0	       288	reset.c	FUNCTION_11
0x40005c3	    0x488984244003	            mov qword [rsp + 0x340], rax	       288	reset.c	FUNCTION_11
0x40005cb	    0x48c784245003	              mov qword [rsp + 0x350], 0	       288	reset.c	FUNCTION_11
0x40005d7	    0xc78424580300	              mov dword [rsp + 0x358], 2	       288	reset.c	FUNCTION_11
0x40005e2	    0x48c784246803	              mov qword [rsp + 0x368], 3	       288	reset.c	FUNCTION_11
0x40005ee	    0xc78424700300	              mov dword [rsp + 0x370], 7	       288	reset.c	FUNCTION_11
0x40005f9	    0x48c784247803	              mov qword [rsp + 0x378], 0	       288	reset.c	FUNCTION_11
0x4000605	    0x488984248003	            mov qword [rsp + 0x380], rax	       288	reset.c	FUNCTION_11
0x400060d	    0x48c784249003	              mov qword [rsp + 0x390], 0	       288	reset.c	FUNCTION_11
0x4000619	    0xc78424980300	              mov dword [rsp + 0x398], 2	       288	reset.c	FUNCTION_11
0x4000624	    0x48c78424a803	              mov qword [rsp + 0x3a8], 4	       288	reset.c	FUNCTION_11
0x4000630	    0xc78424b00300	           mov dword [rsp + 0x3b0], 0xc 	       288	reset.c	FUNCTION_11
0x400063b	    0x48c78424b803	              mov qword [rsp + 0x3b8], 0	       288	reset.c	FUNCTION_11
0x4000647	    0x48c78424c803	              mov qword [rsp + 0x3c8], 0	       288	reset.c	FUNCTION_11
0x4000653	    0x48c78424d003	              mov qword [rsp + 0x3d0], 0	       288	reset.c	FUNCTION_11
0x400065f	    0xc78424d80300	              mov dword [rsp + 0x3d8], 1	       288	reset.c	FUNCTION_11
0x400066a	    0x48c78424e003	              mov qword [rsp + 0x3e0], 0	       288	reset.c	FUNCTION_11
0x4000676	    0xc78424f00300	              mov dword [rsp + 0x3f0], 7	       288	reset.c	FUNCTION_11
0x4000681	    0xc78424f40300	          mov dword [rsp + 0x3f4], 0x70 	       288	reset.c	FUNCTION_11
0x400068c	    0x48c78424f803	              mov qword [rsp + 0x3f8], 0	       288	reset.c	FUNCTION_11
0x4000698	      0x488d442414	                   lea rax, [rsp + 0x14]	       288	reset.c	FUNCTION_11
0x400069d	    0x488984240004	            mov qword [rsp + 0x400], rax	       288	reset.c	FUNCTION_11
0x40006a5	    0x48c784241004	              mov qword [rsp + 0x410], 0	       288	reset.c	FUNCTION_11
0x40006b1	    0xc78424180400	              mov dword [rsp + 0x418], 2	       288	reset.c	FUNCTION_11
0x40006bc	    0x48c784242804	              mov qword [rsp + 0x428], 1	       288	reset.c	FUNCTION_11
0x40006c8	    0xc78424300400	              mov dword [rsp + 0x430], 7	       288	reset.c	FUNCTION_11
0x40006d3	    0xc78424340400	          mov dword [rsp + 0x434], 0x4e 	       288	reset.c	FUNCTION_11
0x40006de	    0x48c784243804	              mov qword [rsp + 0x438], 0	       288	reset.c	FUNCTION_11
0x40006ea	      0x488d442418	                   lea rax, [rsp + 0x18]	       288	reset.c	FUNCTION_11
0x40006ef	    0x488984244004	            mov qword [rsp + 0x440], rax	       288	reset.c	FUNCTION_11
0x40006f7	    0x48c784245004	              mov qword [rsp + 0x450], 0	       288	reset.c	FUNCTION_11
0x4000703	    0xc78424580400	              mov dword [rsp + 0x458], 2	       288	reset.c	FUNCTION_11
0x400070e	    0x48c784246804	              mov qword [rsp + 0x468], 1	       288	reset.c	FUNCTION_11
0x400071a	      0xbe00000000	                              mov esi, 0	       308	reset.c	FUNCTION_11	CALL_18
0x400071f	      0xbf00000000	                              mov edi, 0	       308	reset.c	FUNCTION_11	CALL_18
0x4000724	      0xe800000000	                          call 0x4000729	       308	reset.c	FUNCTION_11	CALL_18
0x4000729	    0x41b901000000	                              mov r9d, 1	       310	reset.c	FUNCTION_11	CALL_19
0x400072f	    0x41b800000000	                              mov r8d, 0	       310	reset.c	FUNCTION_11	CALL_19
0x4000735	    0x488d8c243002	                  lea rcx, [rsp + 0x230]	       310	reset.c	FUNCTION_11	CALL_19
0x400073d	          0x4c89e2	                            mov rdx, r12	       310	reset.c	FUNCTION_11	CALL_19
0x4000740	          0x4889ee	                            mov rsi, rbp	       310	reset.c	FUNCTION_11	CALL_19
0x4000743	            0x89df	                            mov edi, ebx	       310	reset.c	FUNCTION_11	CALL_19
0x4000745	      0xe800000000	                          call 0x400074a	       310	reset.c	FUNCTION_11	CALL_19
0x400074a	      0x448b6c2414	           mov r13d, dword [rsp + 0x14] 	       312	reset.c	FUNCTION_11	CALL_20
0x400074f	        0x488b5d00	                    mov rbx, qword [rbp]	       213	reset.c	FUNCTION_8	IF_1
0x4000753	          0x4885db	                           test rbx, rbx	       213	reset.c	FUNCTION_8	IF_1
0x4000756	     0xf849d000000	                            je 0x40007f9	       213	reset.c	FUNCTION_8	IF_1
0x400075c	          0x803b2d	                    cmp byte [rbx], 0x2d	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x400075f	            0x751a	                           jne 0x400077b	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x4000761	        0x807b012d	                cmp byte [rbx + 1], 0x2d	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x4000765	            0x7514	                           jne 0x400077b	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x4000767	        0x807b0200	                   cmp byte [rbx + 2], 0	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x400076b	            0x750e	                           jne 0x400077b	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x400076d	        0x4883c508	                              add rbp, 8	       215	reset.c	FUNCTION_8	IF_1	IF_2
0x4000771	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x4000776	      0xe983000000	                           jmp 0x40007fe	       199	reset.c	FUNCTION_8
0x400077b	        0x488b4508	                mov rax, qword [rbp + 8]	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400077f	          0x4885c0	                           test rax, rax	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000782	            0x7417	                            je 0x400079b	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000784	          0x80382d	                    cmp byte [rax], 0x2d	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000787	            0x752d	                           jne 0x40007b6	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000789	        0x8078012d	                cmp byte [rax + 1], 0x2d	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400078d	            0x7527	                           jne 0x40007b6	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400078f	        0x80780200	                   cmp byte [rax + 2], 0	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000793	            0x7521	                           jne 0x40007b6	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000795	        0x4883c510	                           add rbp, 0x10	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x4000799	            0xeb63	                           jmp 0x40007fe	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x400079b	    0x488db4241002	                  lea rsi, [rsp + 0x210]	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007a3	          0x4889df	                            mov rdi, rbx	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007a6	      0xe800000000	                          call 0x40007ab	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007ab	            0x85c0	                           test eax, eax	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007ad	            0x741c	                            je 0x40007cb	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007af	      0x48837d0800	                  cmp qword [rbp + 8], 0	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007b4	            0x742b	                            je 0x40007e1	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x40007b6	    0x488db4241002	                  lea rsi, [rsp + 0x210]	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x40007be	        0x488b7d00	                    mov rdi, qword [rbp]	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x40007c2	      0xe800000000	                          call 0x40007c7	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x40007c7	            0x85c0	                           test eax, eax	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x40007c9	            0x7516	                           jne 0x40007e1	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x40007cb	        0x488b7500	                    mov rsi, qword [rbp]	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x40007cf	          0x4c89e7	                            mov rdi, r12	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x40007d2	      0xe800000000	                          call 0x40007d7	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x40007d7	        0x488b5d00	                    mov rbx, qword [rbp]	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x40007db	        0x488d6d08	                      lea rbp, [rbp + 8]	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x40007df	            0xeb1d	                           jmp 0x40007fe	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x40007e1	      0xba01000000	                              mov edx, 1	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x40007e6	        0x488b7500	                    mov rsi, qword [rbp]	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x40007ea	          0x4c89e7	                            mov rdi, r12	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x40007ed	      0xe800000000	                          call 0x40007f2	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x40007f2	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x40007f7	            0xeb05	                           jmp 0x40007fe	       199	reset.c	FUNCTION_8
0x40007f9	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x40007fe	      0xbf00000000	                              mov edi, 0	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x4000803	      0xe800000000	                          call 0x4000808	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x4000808	            0x85c0	                           test eax, eax	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x400080a	            0x7921	                           jns 0x400082d	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x400080c	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000811	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000816	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400081b	      0xe800000000	                          call 0x4000820	        54	gettext.h	FUNCTION_14	CALL_2
0x4000820	          0x4889c7	                            mov rdi, rax	       241	reset.c	FUNCTION_8	CALL_9
0x4000823	      0xb800000000	                              mov eax, 0	       241	reset.c	FUNCTION_8	CALL_9
0x4000828	      0xe800000000	                          call 0x400082d	       241	reset.c	FUNCTION_8	CALL_9
0x400082d	        0x4183fd01	                             cmp r13d, 1	       243	reset.c	FUNCTION_8	CALL_10
0x4000831	            0x19d2	                            sbb edx, edx	       243	reset.c	FUNCTION_8	CALL_10
0x4000833	          0x83e2f0	                     and edx, 0xfffffff0	       243	reset.c	FUNCTION_8	CALL_10
0x4000836	          0x83c212	                           add edx, 0x12	       243	reset.c	FUNCTION_8	CALL_10
0x4000839	          0x4989e8	                             mov r8, rbp	       243	reset.c	FUNCTION_8	CALL_10
0x400083c	          0x4c89e1	                            mov rcx, r12	       243	reset.c	FUNCTION_8	CALL_10
0x400083f	      0xbe00000000	                              mov esi, 0	       243	reset.c	FUNCTION_8	CALL_10
0x4000844	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       243	reset.c	FUNCTION_8	CALL_10
0x4000849	      0xe800000000	                          call 0x400084e	       243	reset.c	FUNCTION_8	CALL_10
0x400084e	      0xbf00000000	                              mov edi, 0	       314	reset.c	FUNCTION_11	CALL_22
0x4000853	      0xb905000000	                              mov ecx, 5	       314	reset.c	FUNCTION_11	CALL_22
0x4000858	          0x4889de	                            mov rsi, rbx	       314	reset.c	FUNCTION_11	CALL_22
0x400085b	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       314	reset.c	FUNCTION_11	CALL_22
0x400085d	           0xf97c2	                                 seta dl	       314	reset.c	FUNCTION_11	CALL_22
0x4000860	           0xf92c0	                                 setb al	       314	reset.c	FUNCTION_11	CALL_22
0x4000863	      0xbd00000000	                              mov ebp, 0	       314	reset.c	FUNCTION_11	CALL_22
0x4000868	            0x38c2	                              cmp dl, al	       314	reset.c	FUNCTION_11	CALL_22
0x400086a	            0x754e	                           jne 0x40008ba	       314	reset.c	FUNCTION_11	CALL_22
0x400086c	    0x488db424d001	                  lea rsi, [rsp + 0x1d0]	       314	reset.c	FUNCTION_11	CALL_22
0x4000874	      0xbf00000000	                              mov edi, 0	       314	reset.c	FUNCTION_11	CALL_22
0x4000879	      0xe800000000	                          call 0x400087e	       314	reset.c	FUNCTION_11	CALL_22
0x400087e	            0x85c0	                           test eax, eax	       314	reset.c	FUNCTION_11	CALL_22
0x4000880	        0x400f95c5	                               setne bpl	       314	reset.c	FUNCTION_11	CALL_22
0x4000884	        0x400fb6ed	                          movzx ebp, bpl	       314	reset.c	FUNCTION_11	CALL_22
0x4000888	            0x7430	                            je 0x40008ba	       315	reset.c	FUNCTION_11	IF_1
0x400088a	    0x488b05000000	            mov rax, qword [0x04000891] 	        53	string3.h	FUNCTION_16	CALL_3
0x4000891	    0x48898424d001	            mov qword [rsp + 0x1d0], rax	        53	string3.h	FUNCTION_16	CALL_3
0x4000899	    0x488b05000000	            mov rax, qword [0x040008a0] 	        53	string3.h	FUNCTION_16	CALL_3
0x40008a0	    0x48898424d801	            mov qword [rsp + 0x1d8], rax	        53	string3.h	FUNCTION_16	CALL_3
0x40008a8	    0x8b0500000000	            mov eax, dword [0x040008ae] 	        53	string3.h	FUNCTION_16	CALL_3
0x40008ae	    0x898424e00100	            mov dword [rsp + 0x1e0], eax	        53	string3.h	FUNCTION_16	CALL_3
0x40008b5	      0xe930010000	                           jmp 0x40009ea	        53	string3.h	FUNCTION_16	CALL_3
0x40008ba	      0x837c243000	               cmp dword [rsp + 0x30], 0	       318	reset.c	FUNCTION_11	ELSE_1	IF_2
0x40008bf	     0xf8595000000	                           jne 0x400095a	       318	reset.c	FUNCTION_11	ELSE_1	IF_2
0x40008c5	    0x488db424d001	                  lea rsi, [rsp + 0x1d0]	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x40008cd	          0x4889df	                            mov rdi, rbx	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x40008d0	      0xe800000000	                          call 0x40008d5	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x40008d5	            0x85c0	                           test eax, eax	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x40008d7	            0x7424	                            je 0x40008fd	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x40008d9	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x40008de	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40008e3	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40008e8	      0xe800000000	                          call 0x40008ed	        54	gettext.h	FUNCTION_14	CALL_2
0x40008ed	          0x4889de	                            mov rsi, rbx	       321	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_26
0x40008f0	          0x4889c7	                            mov rdi, rax	       321	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_26
0x40008f3	      0xb800000000	                              mov eax, 0	       321	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_26
0x40008f8	      0xe800000000	                          call 0x40008fd	       321	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_26
0x40008fd	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       322	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_27
0x4000905	      0xe800000000	                          call 0x400090a	       322	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_27
0x400090a	          0x4885c0	                           test rax, rax	       323	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_4
0x400090d	            0x7524	                           jne 0x4000933	       323	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_4
0x400090f	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000914	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000919	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400091e	      0xe800000000	                          call 0x4000923	        54	gettext.h	FUNCTION_14	CALL_2
0x4000923	          0x4889de	                            mov rsi, rbx	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000926	          0x4889c7	                            mov rdi, rax	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000929	      0xb800000000	                              mov eax, 0	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x400092e	      0xe800000000	                          call 0x4000933	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000933	        0x488b5004	                mov rdx, qword [rax + 4]	        53	string3.h	FUNCTION_16	CALL_3
0x4000937	    0x48899424d001	            mov qword [rsp + 0x1d0], rdx	        53	string3.h	FUNCTION_16	CALL_3
0x400093f	        0x488b500c	              mov rdx, qword [rax + 0xc]	        53	string3.h	FUNCTION_16	CALL_3
0x4000943	    0x48899424d801	            mov qword [rsp + 0x1d8], rdx	        53	string3.h	FUNCTION_16	CALL_3
0x400094b	          0x8b4014	            mov eax, dword [rax + 0x14] 	        53	string3.h	FUNCTION_16	CALL_3
0x400094e	    0x898424e00100	            mov dword [rsp + 0x1e0], eax	        53	string3.h	FUNCTION_16	CALL_3
0x4000955	      0xe990000000	                           jmp 0x40009ea	        53	string3.h	FUNCTION_16	CALL_3
0x400095a	    0x488db424d001	                  lea rsi, [rsp + 0x1d0]	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000962	          0x4889df	                            mov rdi, rbx	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000965	      0xe800000000	                          call 0x400096a	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x400096a	            0x85c0	                           test eax, eax	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x400096c	            0x7424	                            je 0x4000992	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x400096e	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000973	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000978	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400097d	      0xe800000000	                          call 0x4000982	        54	gettext.h	FUNCTION_14	CALL_2
0x4000982	          0x4889de	                            mov rsi, rbx	       329	reset.c	FUNCTION_11	ELSE_2	CALL_33
0x4000985	          0x4889c7	                            mov rdi, rax	       329	reset.c	FUNCTION_11	ELSE_2	CALL_33
0x4000988	      0xb800000000	                              mov eax, 0	       329	reset.c	FUNCTION_11	ELSE_2	CALL_33
0x400098d	      0xe800000000	                          call 0x4000992	       329	reset.c	FUNCTION_11	ELSE_2	CALL_33
0x4000992	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       330	reset.c	FUNCTION_11	ELSE_2	CALL_34
0x400099a	      0xe800000000	                          call 0x400099f	       330	reset.c	FUNCTION_11	ELSE_2	CALL_34
0x400099f	          0x4885c0	                           test rax, rax	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x40009a2	            0x7524	                           jne 0x40009c8	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x40009a4	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x40009a9	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40009ae	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40009b3	      0xe800000000	                          call 0x40009b8	        54	gettext.h	FUNCTION_14	CALL_2
0x40009b8	          0x4889de	                            mov rsi, rbx	       332	reset.c	FUNCTION_11	ELSE_2	CALL_36
0x40009bb	          0x4889c7	                            mov rdi, rax	       332	reset.c	FUNCTION_11	ELSE_2	CALL_36
0x40009be	      0xb800000000	                              mov eax, 0	       332	reset.c	FUNCTION_11	ELSE_2	CALL_36
0x40009c3	      0xe800000000	                          call 0x40009c8	       332	reset.c	FUNCTION_11	ELSE_2	CALL_36
0x40009c8	        0x488b5004	                mov rdx, qword [rax + 4]	        53	string3.h	FUNCTION_16	CALL_3
0x40009cc	    0x48899424d001	            mov qword [rsp + 0x1d0], rdx	        53	string3.h	FUNCTION_16	CALL_3
0x40009d4	        0x488b500c	              mov rdx, qword [rax + 0xc]	        53	string3.h	FUNCTION_16	CALL_3
0x40009d8	    0x48899424d801	            mov qword [rsp + 0x1d8], rdx	        53	string3.h	FUNCTION_16	CALL_3
0x40009e0	          0x8b4014	            mov eax, dword [rax + 0x14] 	        53	string3.h	FUNCTION_16	CALL_3
0x40009e3	    0x898424e00100	            mov dword [rsp + 0x1e0], eax	        53	string3.h	FUNCTION_16	CALL_3
0x40009ea	      0x837c241400	               cmp dword [rsp + 0x14], 0	       336	reset.c	FUNCTION_11	IF_7
0x40009ef	            0x743f	                            je 0x4000a30	       336	reset.c	FUNCTION_11	IF_7
0x40009f1	      0x837c240c05	                cmp dword [rsp + 0xc], 5	       337	reset.c	FUNCTION_11	IF_7	IF_8
0x40009f6	            0x7421	                            je 0x4000a19	       337	reset.c	FUNCTION_11	IF_7	IF_8
0x40009f8	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x40009fd	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a02	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a07	      0xe800000000	                          call 0x4000a0c	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a0c	          0x4889c7	                            mov rdi, rax	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000a0f	      0xb800000000	                              mov eax, 0	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000a14	      0xe800000000	                          call 0x4000a19	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000a19	      0x488d542430	                   lea rdx, [rsp + 0x30]	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x4000a1e	      0xbe00000000	                              mov esi, 0	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x4000a23	          0x4889df	                            mov rdi, rbx	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x4000a26	      0xe800000000	                          call 0x4000a2b	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x4000a2b	      0xe950050000	                           jmp 0x4000f80	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x4000a30	      0x837c243000	               cmp dword [rsp + 0x30], 0	       345	reset.c	FUNCTION_11	IF_9
0x4000a35	            0x747a	                            je 0x4000ab1	       345	reset.c	FUNCTION_11	IF_9
0x4000a37	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x4000a3b	            0x85c0	                           test eax, eax	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x4000a3d	            0x7523	                           jne 0x4000a62	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x4000a3f	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a44	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a49	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a4e	      0xe800000000	                          call 0x4000a53	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a53	          0x4889c7	                            mov rdi, rax	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000a56	      0xb800000000	                              mov eax, 0	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000a5b	      0xe800000000	                          call 0x4000a60	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000a60	            0xeb4f	                           jmp 0x4000ab1	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000a62	          0x83f805	                              cmp eax, 5	       348	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11
0x4000a65	            0x7453	                            je 0x4000aba	       348	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11
0x4000a67	            0x4898	                                    cdqe	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000a69	    0x488b34c50000	                  mov rsi, qword [rax*8]	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000a71	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_14	IF_1
0x4000a76	          0x803e00	                       cmp byte [rsi], 0	        52	gettext.h	FUNCTION_14	IF_1
0x4000a79	            0x7412	                            je 0x4000a8d	        52	gettext.h	FUNCTION_14	IF_1
0x4000a7b	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a80	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a85	      0xe800000000	                          call 0x4000a8a	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a8a	          0x4889c3	                            mov rbx, rax	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a8d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a92	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a97	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000a9c	      0xe800000000	                          call 0x4000aa1	        54	gettext.h	FUNCTION_14	CALL_2
0x4000aa1	          0x4889de	                            mov rsi, rbx	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000aa4	          0x4889c7	                            mov rdi, rax	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000aa7	      0xb800000000	                              mov eax, 0	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000aac	      0xe800000000	                          call 0x4000ab1	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000ab1	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       352	reset.c	FUNCTION_11	IF_12
0x4000ab5	          0x83f805	                              cmp eax, 5	       352	reset.c	FUNCTION_11	IF_12
0x4000ab8	            0x750a	                           jne 0x4000ac4	       352	reset.c	FUNCTION_11	IF_12
0x4000aba	    0xc744240c0000	                mov dword [rsp + 0xc], 0	       353	reset.c	FUNCTION_11	IF_12
0x4000ac2	            0xeb0d	                           jmp 0x4000ad1	       353	reset.c	FUNCTION_11	IF_12
0x4000ac4	          0x83f801	                              cmp eax, 1	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000ac7	     0xf841b050000	                            je 0x4000fe8	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000acd	            0x85c0	                           test eax, eax	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000acf	            0x750a	                           jne 0x4000adb	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000ad1	      0xe800000000	                          call 0x4000ad6	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000ad6	          0x4885c0	                           test rax, rax	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000ad9	            0x7405	                            je 0x4000ae0	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000adb	      0xe800000000	                          call 0x4000ae0	       356	reset.c	FUNCTION_11	CALL_47
0x4000ae0	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000ae5	     0xf85aa040000	                           jne 0x4000f95	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000aeb	      0xe800000000	                          call 0x4000af0	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000af0	            0x85c0	                           test eax, eax	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000af2	            0x744d	                            je 0x4000b41	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000af4	      0x486344240c	          movsxd rax, dword [rsp + 0xc] 	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000af9	    0x488b34c50000	                  mov rsi, qword [rax*8]	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000b01	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_14	IF_1
0x4000b06	          0x803e00	                       cmp byte [rsi], 0	        52	gettext.h	FUNCTION_14	IF_1
0x4000b09	            0x7412	                            je 0x4000b1d	        52	gettext.h	FUNCTION_14	IF_1
0x4000b0b	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b10	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b15	      0xe800000000	                          call 0x4000b1a	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b1a	          0x4889c3	                            mov rbx, rax	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b1d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b22	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b27	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b2c	      0xe800000000	                          call 0x4000b31	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b31	          0x4889de	                            mov rsi, rbx	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000b34	          0x4889c7	                            mov rdi, rax	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000b37	      0xb800000000	                              mov eax, 0	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000b3c	      0xe800000000	                          call 0x4000b41	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000b41	      0x837c241800	               cmp dword [rsp + 0x18], 0	       362	reset.c	FUNCTION_11	IF_15
0x4000b46	            0x742c	                            je 0x4000b74	       362	reset.c	FUNCTION_11	IF_15
0x4000b48	      0x837c240c00	                cmp dword [rsp + 0xc], 0	       362	reset.c	FUNCTION_11	IF_15
0x4000b4d	     0xf84ac000000	                            je 0x4000bff	       362	reset.c	FUNCTION_11	IF_15
0x4000b53	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b58	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b5d	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b62	      0xe800000000	                          call 0x4000b67	        54	gettext.h	FUNCTION_14	CALL_2
0x4000b67	          0x4889c7	                            mov rdi, rax	       363	reset.c	FUNCTION_11	CALL_53
0x4000b6a	      0xb800000000	                              mov eax, 0	       363	reset.c	FUNCTION_11	CALL_53
0x4000b6f	      0xe800000000	                          call 0x4000b74	       363	reset.c	FUNCTION_11	CALL_53
0x4000b74	      0x448b64240c	            mov r12d, dword [rsp + 0xc] 	       368	reset.c	FUNCTION_11	IF_16
0x4000b79	        0x4183fc01	                             cmp r12d, 1	       368	reset.c	FUNCTION_11	IF_16
0x4000b7d	            0x7406	                            je 0x4000b85	       368	reset.c	FUNCTION_11	IF_16
0x4000b7f	        0x4183fc04	                             cmp r12d, 4	       368	reset.c	FUNCTION_11	IF_16
0x4000b83	            0x756f	                           jne 0x4000bf4	       368	reset.c	FUNCTION_11	IF_16
0x4000b85	      0xe800000000	                          call 0x4000b8a	        42	reset.c	FUNCTION_1	CALL_2
0x4000b8a	      0xbe00000000	                              mov esi, 0	        42	reset.c	FUNCTION_1	CALL_2
0x4000b8f	          0x4889c7	                            mov rdi, rax	        42	reset.c	FUNCTION_1	CALL_2
0x4000b92	      0xe800000000	                          call 0x4000b97	        42	reset.c	FUNCTION_1	CALL_2
0x4000b97	            0x85c0	                           test eax, eax	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000b99	            0x740e	                            je 0x4000ba9	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000b9b	      0xbf00000000	                              mov edi, 0	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000ba0	      0xe800000000	                          call 0x4000ba5	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000ba5	            0x85c0	                           test eax, eax	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000ba7	            0x744b	                            je 0x4000bf4	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000ba9	          0x4d63e4	                        movsxd r12, r12d	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000bac	    0x4a8b34e50000	                  mov rsi, qword [r12*8]	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000bb4	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_14	IF_1
0x4000bb9	          0x803e00	                       cmp byte [rsi], 0	        52	gettext.h	FUNCTION_14	IF_1
0x4000bbc	            0x7412	                            je 0x4000bd0	        52	gettext.h	FUNCTION_14	IF_1
0x4000bbe	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bc3	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bc8	      0xe800000000	                          call 0x4000bcd	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bcd	          0x4889c3	                            mov rbx, rax	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bd0	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bd5	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bda	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000bdf	      0xe800000000	                          call 0x4000be4	        54	gettext.h	FUNCTION_14	CALL_2
0x4000be4	          0x4889de	                            mov rsi, rbx	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000be7	          0x4889c7	                            mov rdi, rax	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000bea	      0xb800000000	                              mov eax, 0	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000bef	      0xe800000000	                          call 0x4000bf4	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000bf4	      0x837c240c01	                cmp dword [rsp + 0xc], 1	       371	reset.c	FUNCTION_11	IF_17
0x4000bf9	     0xf84a0010000	                            je 0x4000d9f	       371	reset.c	FUNCTION_11	IF_17
0x4000bff	    0x48c744242000	               mov qword [rsp + 0x20], 0	       372	reset.c	FUNCTION_11	IF_17
0x4000c08	      0xbe01000000	                              mov esi, 1	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x4000c0d	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x4000c12	      0xe800000000	                          call 0x4000c17	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x4000c17	        0x8b74240c	              mov esi, dword [rsp + 0xc]	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c1b	            0x85f6	                           test esi, esi	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c1d	     0xf85e9000000	                           jne 0x4000d0c	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c23	      0x837c241001	               cmp dword [rsp + 0x10], 1	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c28	          0x4519e4	                          sbb r12d, r12d	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c2b	        0x4183e41c	                          and r12d, 0x1c	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c2f	        0x4183c404	                             add r12d, 4	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c33	        0x8b442418	            mov eax, dword [rsp + 0x18] 	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c37	        0x8944241c	             mov dword [rsp + 0x1c], eax	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000c3b	      0x4c8d6c2450	                   lea r13, [rsp + 0x50]	        90	string3.h	FUNCTION_19	CALL_6
0x4000c40	      0xb930000000	                           mov ecx, 0x30	        90	string3.h	FUNCTION_19	CALL_6
0x4000c45	      0xb800000000	                              mov eax, 0	        90	string3.h	FUNCTION_19	CALL_6
0x4000c4a	          0x4c89ef	                            mov rdi, r13	        90	string3.h	FUNCTION_19	CALL_6
0x4000c4d	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_19	CALL_6
0x4000c50	    0x488dbc246001	                  lea rdi, [rsp + 0x160]	       157	reset.c	FUNCTION_5	CALL_2
0x4000c58	      0x488d742430	                   lea rsi, [rsp + 0x30]	       157	reset.c	FUNCTION_5	CALL_2
0x4000c5d	      0xe800000000	                          call 0x4000c62	       157	reset.c	FUNCTION_5	CALL_2
0x4000c62	    0xc78424b00000	         mov dword [rsp + 0xb0], 0x1000 	       158	reset.c	FUNCTION_5
0x4000c6d	    0x48c784249801	              mov qword [rsp + 0x198], 0	       159	reset.c	FUNCTION_5
0x4000c79	      0x488d44241c	                   lea rax, [rsp + 0x1c]	       160	reset.c	FUNCTION_5
0x4000c7e	    0x48898424a001	            mov qword [rsp + 0x1a0], rax	       160	reset.c	FUNCTION_5
0x4000c86	    0x808c248b0000	                 or byte [rsp + 0x8b], 4	       161	reset.c	FUNCTION_5
0x4000c8e	          0x4c89ee	                            mov rsi, r13	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000c91	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000c99	      0xe800000000	                          call 0x4000c9e	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000c9e	            0x89c2	                            mov edx, eax	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000ca0	      0xb801000000	                              mov eax, 1	       377	reset.c	FUNCTION_11	IF_17	IF_18	IF_19
0x4000ca5	            0x85d2	                           test edx, edx	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000ca7	     0xf85d3020000	                           jne 0x4000f80	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000cad	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       165	reset.c	FUNCTION_5	CALL_4
0x4000cb2	      0xe800000000	                          call 0x4000cb7	       165	reset.c	FUNCTION_5	CALL_4
0x4000cb7	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       166	reset.c	FUNCTION_5	CALL_5
0x4000cbc	      0xe800000000	                          call 0x4000cc1	       166	reset.c	FUNCTION_5	CALL_5
0x4000cc1	    0x488dbc246001	                  lea rdi, [rsp + 0x160]	       167	reset.c	FUNCTION_5	CALL_6
0x4000cc9	      0xe800000000	                          call 0x4000cce	       167	reset.c	FUNCTION_5	CALL_6
0x4000cce	      0xe800000000	                          call 0x4000cd3	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000cd3	          0x4885c0	                           test rax, rax	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000cd6	     0xf848a000000	                            je 0x4000d66	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000cdc	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000ce1	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000ce6	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000ceb	      0xe800000000	                          call 0x4000cf0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000cf0	          0x4989c0	                             mov r8, rax	        54	gettext.h	FUNCTION_14	CALL_2
0x4000cf3	      0xb900000000	                              mov ecx, 0	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000cf8	      0xba00000000	                              mov edx, 0	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000cfd	          0x4489e6	                           mov esi, r12d	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000d00	      0xbf00000000	                              mov edi, 0	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000d05	      0xe800000000	                          call 0x4000d0a	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000d0a	            0xeb5a	                           jmp 0x4000d66	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000d0c	        0x8b542410	            mov edx, dword [rsp + 0x10] 	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000d10	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000d18	      0xe813f5ffff	                    call sym.reset_index	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000d1d	      0x837c240c04	                cmp dword [rsp + 0xc], 4	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000d22	            0x751a	                           jne 0x4000d3e	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000d24	            0x85c0	                           test eax, eax	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000d26	            0x7516	                           jne 0x4000d3e	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000d28	        0x8b542410	            mov edx, dword [rsp + 0x10] 	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000d2c	      0xbe00000000	                              mov esi, 0	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000d31	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000d39	      0xe8f2f4ffff	                    call sym.reset_index	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000d3e	            0x85c0	                           test eax, eax	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000d40	            0x7424	                            je 0x4000d66	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000d42	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d47	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d4c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d51	      0xe800000000	                          call 0x4000d56	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d56	          0x4889de	                            mov rsi, rbx	       386	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_63
0x4000d59	          0x4889c7	                            mov rdi, rax	       386	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_63
0x4000d5c	      0xb800000000	                              mov eax, 0	       386	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_63
0x4000d61	      0xe800000000	                          call 0x4000d66	       386	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_63
0x4000d66	      0xba01000000	                              mov edx, 1	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d6b	      0x488d742420	                   lea rsi, [rsp + 0x20]	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d70	      0xbf00000000	                              mov edi, 0	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d75	      0xe800000000	                          call 0x4000d7a	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d7a	            0x85c0	                           test eax, eax	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d7c	            0x7421	                            je 0x4000d9f	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000d7e	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d83	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d88	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d8d	      0xe800000000	                          call 0x4000d92	        54	gettext.h	FUNCTION_14	CALL_2
0x4000d92	          0x4889c7	                            mov rdi, rax	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000d95	      0xb800000000	                              mov eax, 0	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000d9a	      0xe800000000	                          call 0x4000d9f	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000d9f	    0x41bc00000000	                             mov r12d, 0	       282	reset.c	FUNCTION_11
0x4000da5	         0xb6c2430	              or ebp, dword [rsp + 0x30]	       393	reset.c	FUNCTION_11	IF_24
0x4000da9	     0xf85bf010000	                           jne 0x4000f6e	       393	reset.c	FUNCTION_11	IF_24
0x4000daf	    0x48c744245000	               mov qword [rsp + 0x50], 0	       252	reset.c	FUNCTION_9
0x4000db8	    0x48c744245800	               mov qword [rsp + 0x58], 0	       252	reset.c	FUNCTION_9
0x4000dc1	    0x48c744246000	               mov qword [rsp + 0x60], 0	       252	reset.c	FUNCTION_9
0x4000dca	    0x488db4241002	                  lea rsi, [rsp + 0x210]	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000dd2	      0xbf00000000	                              mov edi, 0	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000dd7	      0xe800000000	                          call 0x4000ddc	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000ddc	            0x85c0	                           test eax, eax	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000dde	     0xf84c1010000	                            je 0x4000fa5	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000de4	      0xe9db010000	                           jmp 0x4000fc4	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000de9	    0x488dac241002	                  lea rbp, [rsp + 0x210]	       257	reset.c	FUNCTION_9	IF_1
0x4000df1	      0xba00000000	                              mov edx, 0	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000df6	      0xbe00000000	                              mov esi, 0	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000dfb	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e00	      0xe883f3ffff	             call sym.set_reflog_message	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e05	    0x41b900000000	                              mov r9d, 0	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e0b	    0x41b800000000	                              mov r8d, 0	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e11	          0x4889e9	                            mov rcx, rbp	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e14	    0x488d9424f001	                  lea rdx, [rsp + 0x1f0]	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e1c	      0xbe00000000	                              mov esi, 0	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e21	      0x488b7c2460	            mov rdi, qword [rsp + 0x60] 	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e26	      0xe800000000	                          call 0x4000e2b	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e2b	    0x488dac24f001	                  lea rbp, [rsp + 0x1f0]	       259	reset.c	FUNCTION_9	IF_2
0x4000e33	            0xeb21	                           jmp 0x4000e56	       259	reset.c	FUNCTION_9	IF_2
0x4000e35	      0xb900000000	                              mov ecx, 0	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000e3a	    0x488d94241002	                  lea rdx, [rsp + 0x210]	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000e42	      0xbe00000000	                              mov esi, 0	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000e47	      0xbf00000000	                              mov edi, 0	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000e4c	      0xe800000000	                          call 0x4000e51	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000e51	      0xbd00000000	                              mov ebp, 0	       253	reset.c	FUNCTION_9
0x4000e56	          0x4889da	                            mov rdx, rbx	       265	reset.c	FUNCTION_9	CALL_6
0x4000e59	      0xbe00000000	                              mov esi, 0	       265	reset.c	FUNCTION_9	CALL_6
0x4000e5e	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       265	reset.c	FUNCTION_9	CALL_6
0x4000e63	      0xe820f3ffff	             call sym.set_reflog_message	       265	reset.c	FUNCTION_9	CALL_6
0x4000e68	    0x41b900000000	                              mov r9d, 0	       266	reset.c	FUNCTION_9	CALL_7
0x4000e6e	    0x41b800000000	                              mov r8d, 0	       266	reset.c	FUNCTION_9	CALL_7
0x4000e74	          0x4889e9	                            mov rcx, rbp	       266	reset.c	FUNCTION_9	CALL_7
0x4000e77	    0x488d9424d001	                  lea rdx, [rsp + 0x1d0]	       266	reset.c	FUNCTION_9	CALL_7
0x4000e7f	      0xbe00000000	                              mov esi, 0	       266	reset.c	FUNCTION_9	CALL_7
0x4000e84	      0x488b7c2460	            mov rdi, qword [rsp + 0x60] 	       266	reset.c	FUNCTION_9	CALL_7
0x4000e89	      0xe800000000	                          call 0x4000e8e	       266	reset.c	FUNCTION_9	CALL_7
0x4000e8e	          0x4189c4	                           mov r12d, eax	       266	reset.c	FUNCTION_9	CALL_7
0x4000e91	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       268	reset.c	FUNCTION_9	CALL_8
0x4000e96	      0xe800000000	                          call 0x4000e9b	       268	reset.c	FUNCTION_9	CALL_8
0x4000e9b	      0x837c240c02	                cmp dword [rsp + 0xc], 2	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000ea0	     0xf85c8000000	                           jne 0x4000f6e	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000ea6	          0x4585e4	                         test r12d, r12d	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000ea9	     0xf85bf000000	                           jne 0x4000f6e	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000eaf	      0x837c241000	               cmp dword [rsp + 0x10], 0	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000eb4	     0xf85b4000000	                           jne 0x4000f6e	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000eba	    0x488dbc24d001	                  lea rdi, [rsp + 0x1d0]	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000ec2	      0xe800000000	                          call 0x4000ec7	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000ec7	          0x4889c3	                            mov rbx, rax	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000eca	    0x48c744245000	               mov qword [rsp + 0x50], 0	       109	reset.c	FUNCTION_3
0x4000ed3	    0x48c744245800	               mov qword [rsp + 0x58], 0	       109	reset.c	FUNCTION_3
0x4000edc	    0x48c744246000	               mov qword [rsp + 0x60], 0	       109	reset.c	FUNCTION_3
0x4000ee5	        0x488d7804	                      lea rdi, [rax + 4]	       112	reset.c	FUNCTION_3	CALL_3
0x4000ee9	    0x8b3500000000	            mov esi, dword [0x04000eef] 	       111	reset.c	FUNCTION_3	CALL_2
0x4000eef	      0xe800000000	                          call 0x4000ef4	       111	reset.c	FUNCTION_3	CALL_2
0x4000ef4	          0x4889c5	                            mov rbp, rax	       111	reset.c	FUNCTION_3	CALL_2
0x4000ef7	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000efc	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000f01	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000f06	      0xe800000000	                          call 0x4000f0b	        54	gettext.h	FUNCTION_14	CALL_2
0x4000f0b	          0x4889ea	                            mov rdx, rbp	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f0e	          0x4889c6	                            mov rsi, rax	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f11	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f16	      0xb800000000	                              mov eax, 0	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f1b	      0xe800000000	                          call 0x4000f20	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f20	      0x488d542450	                   lea rdx, [rsp + 0x50]	       114	reset.c	FUNCTION_3	CALL_4
0x4000f25	          0x4889de	                            mov rsi, rbx	       114	reset.c	FUNCTION_3	CALL_4
0x4000f28	      0xbf05000000	                              mov edi, 5	       114	reset.c	FUNCTION_3	CALL_4
0x4000f2d	      0xe800000000	                          call 0x4000f32	       114	reset.c	FUNCTION_3	CALL_4
0x4000f32	    0x48837c245800	               cmp qword [rsp + 0x58], 0	       115	reset.c	FUNCTION_3	IF_1
0x4000f38	            0x7419	                            je 0x4000f53	       115	reset.c	FUNCTION_3	IF_1
0x4000f3a	      0x488b542460	            mov rdx, qword [rsp + 0x60] 	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f3f	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f44	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f49	      0xb800000000	                              mov eax, 0	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f4e	      0xe800000000	                          call 0x4000f53	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000f53	    0x488b35000000	            mov rsi, qword [0x04000f5a] 	        81	stdio.h	FUNCTION_53	CALL_1
0x4000f5a	      0xbf0a000000	                            mov edi, 0xa	        81	stdio.h	FUNCTION_53	CALL_1
0x4000f5f	      0xe800000000	                          call 0x4000f64	        81	stdio.h	FUNCTION_53	CALL_1
0x4000f64	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	       118	reset.c	FUNCTION_3	CALL_7
0x4000f69	      0xe800000000	                          call 0x4000f6e	       118	reset.c	FUNCTION_3	CALL_7
0x4000f6e	          0x4489e0	                           mov eax, r12d	       404	reset.c	FUNCTION_11
0x4000f71	      0x837c243000	               cmp dword [rsp + 0x30], 0	       401	reset.c	FUNCTION_11	IF_26
0x4000f76	            0x7508	                           jne 0x4000f80	       401	reset.c	FUNCTION_11	IF_26
0x4000f78	      0xe800000000	                          call 0x4000f7d	       402	reset.c	FUNCTION_11	CALL_70
0x4000f7d	          0x4489e0	                           mov eax, r12d	       404	reset.c	FUNCTION_11
0x4000f80	    0x488b9c24b804	           mov rbx, qword [rsp + 0x4b8] 	       405	reset.c	FUNCTION_11
0x4000f88	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       405	reset.c	FUNCTION_11
0x4000f91	            0x746a	                            je 0x4000ffd	       405	reset.c	FUNCTION_11
0x4000f93	            0xeb63	                           jmp 0x4000ff8	       405	reset.c	FUNCTION_11
0x4000f95	      0x837c241800	               cmp dword [rsp + 0x18], 0	       362	reset.c	FUNCTION_11	IF_15
0x4000f9a	     0xf84d4fbffff	                            je 0x4000b74	       362	reset.c	FUNCTION_11	IF_15
0x4000fa0	      0xe9aefbffff	                           jmp 0x4000b53	       362	reset.c	FUNCTION_11	IF_15
0x4000fa5	    0x488db424f001	                  lea rsi, [rsp + 0x1f0]	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fad	      0xbf00000000	                              mov edi, 0	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fb2	      0xe800000000	                          call 0x4000fb7	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fb7	            0x85c0	                           test eax, eax	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fb9	     0xf8576feffff	                           jne 0x4000e35	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fbf	      0xe925feffff	                           jmp 0x4000de9	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fc4	    0x488db424f001	                  lea rsi, [rsp + 0x1f0]	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fcc	      0xbf00000000	                              mov edi, 0	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fd1	      0xe800000000	                          call 0x4000fd6	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fd6	      0xbd00000000	                              mov ebp, 0	       254	reset.c	FUNCTION_9
0x4000fdb	            0x85c0	                           test eax, eax	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fdd	     0xf840efeffff	                            je 0x4000df1	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fe3	      0xe96efeffff	                           jmp 0x4000e56	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000fe8	      0x837c241800	               cmp dword [rsp + 0x18], 0	       362	reset.c	FUNCTION_11	IF_15
0x4000fed	     0xf8481fbffff	                            je 0x4000b74	       362	reset.c	FUNCTION_11	IF_15
0x4000ff3	      0xe95bfbffff	                           jmp 0x4000b53	       362	reset.c	FUNCTION_11	IF_15
0x4000ff8	      0xe800000000	                          call 0x4000ffd	       405	reset.c	FUNCTION_11
0x4000ffd	    0x4881c4c80400	                          add rsp, 0x4c8	       405	reset.c	FUNCTION_11
0x4001004	              0x5b	                                 pop rbx	       405	reset.c	FUNCTION_11
0x4001005	              0x5d	                                 pop rbp	       405	reset.c	FUNCTION_11
0x4001006	            0x415c	                                 pop r12	       405	reset.c	FUNCTION_11
0x4001008	            0x415d	                                 pop r13	       405	reset.c	FUNCTION_11
0x400100a	              0xc3	                                     ret	       405	reset.c	FUNCTION_11
reset_index	IF,7:ELSE,0:WHILE,0:CALL,16:SWITCH,1:FOR,1:DO,0:functions,0	125
0x4000230	            0x4155	                                push r13	        46	reset.c	FUNCTION_2
0x4000232	            0x4154	                                push r12	        46	reset.c	FUNCTION_2
0x4000234	              0x55	                                push rbp	        46	reset.c	FUNCTION_2
0x4000235	              0x53	                                push rbx	        46	reset.c	FUNCTION_2
0x4000236	    0x4881ec880300	                          sub rsp, 0x388	        46	reset.c	FUNCTION_2
0x400023d	          0x4989fd	                            mov r13, rdi	        46	reset.c	FUNCTION_2
0x4000240	            0x89f5	                            mov ebp, esi	        46	reset.c	FUNCTION_2
0x4000242	    0x64488b042528	                mov rax, qword fs:[0x28]	        46	reset.c	FUNCTION_2
0x400024b	    0x488984247803	            mov qword [rsp + 0x378], rax	        46	reset.c	FUNCTION_2
0x4000253	            0x31c0	                            xor eax, eax	        46	reset.c	FUNCTION_2
0x4000255	      0x488d742470	                   lea rsi, [rsp + 0x70]	        90	string3.h	FUNCTION_19	CALL_6
0x400025a	      0xb960000000	                           mov ecx, 0x60	        90	string3.h	FUNCTION_19	CALL_6
0x400025f	          0x4889f7	                            mov rdi, rsi	        90	string3.h	FUNCTION_19	CALL_6
0x4000262	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_19	CALL_6
0x4000265	    0xc78424700200	              mov dword [rsp + 0x270], 1	        54	reset.c	FUNCTION_2
0x4000270	    0x48c784249002	              mov qword [rsp + 0x290], 0	        55	reset.c	FUNCTION_2
0x400027c	    0x48c784248802	              mov qword [rsp + 0x288], 0	        56	reset.c	FUNCTION_2
0x4000288	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        57	reset.c	FUNCTION_2
0x4000294	    0xc74424740100	               mov dword [rsp + 0x74], 1	        58	reset.c	FUNCTION_2
0x400029c	            0x85d2	                           test edx, edx	        59	reset.c	FUNCTION_2	IF_1
0x400029e	            0x750b	                           jne 0x40002ab	        59	reset.c	FUNCTION_2	IF_1
0x40002a0	    0xc78424880000	               mov dword [rsp + 0x88], 1	        60	reset.c	FUNCTION_2	IF_1
0x40002ab	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002ae	            0x7414	                            je 0x40002c4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b0	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b3	            0x7c17	                            jl 0x40002cc	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b5	          0x83fd04	                              cmp ebp, 4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b8	            0x7f12	                            jg 0x40002cc	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002ba	    0xc74424780100	               mov dword [rsp + 0x78], 1	        64	reset.c	FUNCTION_2	SWITCH_1
0x40002c2	            0xeb10	                           jmp 0x40002d4	        65	reset.c	FUNCTION_2	SWITCH_1
0x40002c4	    0xc74424780100	               mov dword [rsp + 0x78], 1	        67	reset.c	FUNCTION_2	SWITCH_1
0x40002cc	    0xc74424700100	               mov dword [rsp + 0x70], 1	        70	reset.c	FUNCTION_2	SWITCH_1
0x40002d4	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2	CALL_2
0x40002d9	      0xe800000000	                          call 0x40002de	        73	reset.c	FUNCTION_2	CALL_2
0x40002de	      0xbb00000000	                              mov ebx, 0	        47	reset.c	FUNCTION_2
0x40002e3	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x40002e6	     0xf8586000000	                           jne 0x4000372	        75	reset.c	FUNCTION_2	IF_2
0x40002ec	          0x4889e6	                            mov rsi, rsp	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40002ef	      0xbf00000000	                              mov edi, 0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40002f4	      0xe800000000	                          call 0x40002f9	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40002f9	            0x85c0	                           test eax, eax	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40002fb	            0x7423	                            je 0x4000320	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40002fd	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000302	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000307	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400030c	      0xe800000000	                          call 0x4000311	        54	gettext.h	FUNCTION_14	CALL_2
0x4000311	          0x4889c7	                            mov rdi, rax	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000314	      0xb800000000	                              mov eax, 0	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000319	      0xe800000000	                          call 0x400031e	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x400031e	            0xeb48	                           jmp 0x4000368	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000320	          0x4889e6	                            mov rsi, rsp	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000323	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000328	      0xe800000000	                          call 0x400032d	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x400032d	          0x4885c0	                           test rax, rax	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000330	            0x7523	                           jne 0x4000355	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000332	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000337	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400033c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000341	      0xe800000000	                          call 0x4000346	        54	gettext.h	FUNCTION_14	CALL_2
0x4000346	          0x4889c7	                            mov rdi, rax	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x4000349	      0xb800000000	                              mov eax, 0	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x400034e	      0xe800000000	                          call 0x4000353	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x4000353	            0xeb13	                           jmp 0x4000368	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x4000355	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        82	reset.c	FUNCTION_2	IF_2
0x4000361	      0xbb01000000	                              mov ebx, 1	        81	reset.c	FUNCTION_2	IF_2
0x4000366	            0xeb0a	                           jmp 0x4000372	        81	reset.c	FUNCTION_2	IF_2
0x4000368	      0xb8ffffffff	                     mov eax, 0xffffffff	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x400036d	      0xe9b7000000	                           jmp 0x4000429	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000372	          0x4863c3	                         movsxd rax, ebx	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000375	        0x488d0480	                  lea rax, [rax + rax*4]	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000379	      0x488d7cc420	          lea rdi, [rsp + rax*8 + 0x20] 	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x400037e	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000381	      0xe800000000	                          call 0x4000386	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000386	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000389	            0x7537	                           jne 0x40003c2	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x400038b	          0x4c89ef	                            mov rdi, r13	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x400038e	      0xe800000000	                          call 0x4000393	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000393	          0x4889c5	                            mov rbp, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000396	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x400039b	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40003a0	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x40003a5	      0xe800000000	                          call 0x40003aa	        54	gettext.h	FUNCTION_14	CALL_2
0x40003aa	          0x4889ee	                            mov rsi, rbp	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x40003ad	          0x4889c7	                            mov rdi, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x40003b0	      0xb800000000	                              mov eax, 0	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x40003b5	      0xe800000000	                          call 0x40003ba	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x40003ba	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40003c0	            0xeb41	                           jmp 0x4000403	        51	reset.c	FUNCTION_2
0x40003c2	          0x83c301	                              add ebx, 1	        89	reset.c	FUNCTION_2
0x40003c5	      0x488d542470	                   lea rdx, [rsp + 0x70]	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003ca	      0x488d742420	                   lea rsi, [rsp + 0x20]	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003cf	            0x89df	                            mov edi, ebx	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003d1	      0xe800000000	                          call 0x40003d6	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003d6	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40003dc	            0x85c0	                           test eax, eax	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003de	            0x7523	                           jne 0x4000403	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40003e0	    0x41bc00000000	                             mov r12d, 0	        99	reset.c	FUNCTION_2
0x40003e6	    0xf7c5fdffffff	                    test ebp, 0xfffffffd	        94	reset.c	FUNCTION_2	IF_7
0x40003ec	            0x7515	                           jne 0x4000403	        94	reset.c	FUNCTION_2	IF_7
0x40003ee	          0x4c89ef	                            mov rdi, r13	        95	reset.c	FUNCTION_2	IF_7	CALL_14
0x40003f1	      0xe800000000	                          call 0x40003f6	        95	reset.c	FUNCTION_2	IF_7	CALL_14
0x40003f6	          0x4889c6	                            mov rsi, rax	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x40003f9	      0xbf00000000	                              mov edi, 0	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x40003fe	      0xe800000000	                          call 0x4000403	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x4000403	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000406	            0x85db	                           test ebx, ebx	       102	reset.c	FUNCTION_2	FOR_1
0x4000408	            0x7e1f	                           jle 0x4000429	       102	reset.c	FUNCTION_2	FOR_1
0x400040a	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_16
0x400040f	      0xe800000000	                          call 0x4000414	       103	reset.c	FUNCTION_2	CALL_16
0x4000414	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000417	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x400041a	            0x7e0d	                           jle 0x4000429	       102	reset.c	FUNCTION_2	FOR_1
0x400041c	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	       103	reset.c	FUNCTION_2	CALL_16
0x4000421	      0xe800000000	                          call 0x4000426	       103	reset.c	FUNCTION_2	CALL_16
0x4000426	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000429	    0x488b8c247803	           mov rcx, qword [rsp + 0x378] 	       105	reset.c	FUNCTION_2
0x4000431	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       105	reset.c	FUNCTION_2
0x400043a	            0x7405	                            je 0x4000441	       105	reset.c	FUNCTION_2
0x400043c	      0xe800000000	                          call 0x4000441	       105	reset.c	FUNCTION_2
0x4000441	    0x4881c4880300	                          add rsp, 0x388	       105	reset.c	FUNCTION_2
0x4000448	              0x5b	                                 pop rbx	       105	reset.c	FUNCTION_2
0x4000449	              0x5d	                                 pop rbp	       105	reset.c	FUNCTION_2
0x400044a	            0x415c	                                 pop r12	       105	reset.c	FUNCTION_2
0x400044c	            0x415d	                                 pop r13	       105	reset.c	FUNCTION_2
0x400044e	              0xc3	                                     ret	       105	reset.c	FUNCTION_2
update_index_from_diff	IF,3:ELSE,0:WHILE,0:CALL,7:SWITCH,0:FOR,1:DO,0:functions,0	73
0x4000082	            0x4157	                                push r15	       123	reset.c	FUNCTION_4
0x4000084	            0x4156	                                push r14	       123	reset.c	FUNCTION_4
0x4000086	            0x4155	                                push r13	       123	reset.c	FUNCTION_4
0x4000088	            0x4154	                                push r12	       123	reset.c	FUNCTION_4
0x400008a	              0x55	                                push rbp	       123	reset.c	FUNCTION_4
0x400008b	              0x53	                                push rbx	       123	reset.c	FUNCTION_4
0x400008c	        0x4883ec08	                              sub rsp, 8	       123	reset.c	FUNCTION_4
0x4000090	          0x448b2a	                   mov r13d, dword [rdx]	       125	reset.c	FUNCTION_4
0x4000093	        0x837f0c00	                cmp dword [rdi + 0xc], 0	       127	reset.c	FUNCTION_4	FOR_1
0x4000097	     0xf8edc000000	                           jle 0x4000179	       127	reset.c	FUNCTION_4	FOR_1
0x400009d	          0x4989fc	                            mov r12, rdi	       127	reset.c	FUNCTION_4	FOR_1
0x40000a0	      0xbb00000000	                              mov ebx, 0	       127	reset.c	FUNCTION_4	FOR_1
0x40000a5	          0x4863c3	                         movsxd rax, ebx	       128	reset.c	FUNCTION_4	FOR_1
0x40000a8	        0x498b1424	                    mov rdx, qword [r12]	       128	reset.c	FUNCTION_4	FOR_1
0x40000ac	        0x488b04c2	            mov rax, qword [rdx + rax*8]	       128	reset.c	FUNCTION_4	FOR_1
0x40000b0	          0x488b28	                    mov rbp, qword [rax]	       128	reset.c	FUNCTION_4	FOR_1
0x40000b3	      0x440fb77540	          movzx r14d, word [rbp + 0x40] 	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000b8	    0x41bf01000000	                             mov r15d, 1	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000be	        0x664585f6	                         test r14w, r14w	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000c2	            0x741c	                            je 0x40000e0	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000c4	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_78	CALL_1
0x40000c9	      0xbe00000000	                              mov esi, 0	       975	cache.h	FUNCTION_78	CALL_1
0x40000ce	          0x4889ef	                            mov rdi, rbp	       975	cache.h	FUNCTION_78	CALL_1
0x40000d1	      0xe800000000	                          call 0x40000d6	       975	cache.h	FUNCTION_78	CALL_1
0x40000d6	            0x85c0	                           test eax, eax	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000d8	        0x410f94c7	                               sete r15b	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000dc	        0x450fb6ff	                        movzx r15d, r15b	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000e0	          0x4585ff	                         test r15d, r15d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e3	            0x7415	                            je 0x40000fa	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e5	          0x4585ed	                         test r13d, r13d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e8	            0x7510	                           jne 0x40000fa	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000ea	        0x488b7518	            mov rsi, qword [rbp + 0x18] 	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x40000ee	      0xbf00000000	                              mov edi, 0	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x40000f3	      0xe800000000	                          call 0x40000f8	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x40000f8	            0xeb71	                           jmp 0x400016b	       134	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000fa	        0x488b5518	            mov rdx, qword [rbp + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40000fe	        0x410fb7fe	                         movzx edi, r14w	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000102	    0x41b800000000	                              mov r8d, 0	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000108	      0xb900000000	                              mov ecx, 0	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x400010d	          0x4889ee	                            mov rsi, rbp	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000110	      0xe800000000	                          call 0x4000115	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000115	          0x4989c6	                            mov r14, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000118	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400011b	            0x7528	                           jne 0x4000145	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400011d	        0x488b5d18	            mov rbx, qword [rbp + 0x18] 	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x4000121	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_14	CALL_2
0x4000126	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x400012b	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_14	CALL_2
0x4000130	      0xe800000000	                          call 0x4000135	        54	gettext.h	FUNCTION_14	CALL_2
0x4000135	          0x4889de	                            mov rsi, rbx	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x4000138	          0x4889c7	                            mov rdi, rax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x400013b	      0xb800000000	                              mov eax, 0	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x4000140	      0xe800000000	                          call 0x4000145	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x4000145	          0x4585ff	                         test r15d, r15d	       142	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000148	            0x740f	                            je 0x4000159	       142	reset.c	FUNCTION_4	FOR_1	IF_3
0x400014a	    0x814838000000	       or dword [rax + 0x38], 0x20000000	       143	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000151	          0x4889c7	                            mov rdi, rax	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x4000154	      0xe800000000	                          call 0x4000159	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x4000159	      0xba03000000	                              mov edx, 3	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x400015e	          0x4c89f6	                            mov rsi, r14	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x4000161	      0xbf00000000	                              mov edi, 0	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x4000166	      0xe800000000	                          call 0x400016b	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x400016b	          0x83c301	                              add ebx, 1	       127	reset.c	FUNCTION_4	FOR_1
0x400016e	      0x41395c240c	              cmp dword [r12 + 0xc], ebx	       127	reset.c	FUNCTION_4	FOR_1
0x4000173	     0xf8f2cffffff	                            jg 0x40000a5	       127	reset.c	FUNCTION_4	FOR_1
0x4000179	        0x4883c408	                              add rsp, 8	       148	reset.c	FUNCTION_4
0x400017d	              0x5b	                                 pop rbx	       148	reset.c	FUNCTION_4
0x400017e	              0x5d	                                 pop rbp	       148	reset.c	FUNCTION_4
0x400017f	            0x415c	                                 pop r12	       148	reset.c	FUNCTION_4
0x4000181	            0x415d	                                 pop r13	       148	reset.c	FUNCTION_4
0x4000183	            0x415e	                                 pop r14	       148	reset.c	FUNCTION_4
0x4000185	            0x415f	                                 pop r15	       148	reset.c	FUNCTION_4
0x4000187	              0xc3	                                     ret	       148	reset.c	FUNCTION_4
set_reflog_message	IF,2:ELSE,2:WHILE,0:CALL,5:SWITCH,0:FOR,0:DO,0:functions,0	47
0x4000188	            0x4154	                                push r12	       174	reset.c	FUNCTION_6
0x400018a	              0x55	                                push rbp	       174	reset.c	FUNCTION_6
0x400018b	              0x53	                                push rbx	       174	reset.c	FUNCTION_6
0x400018c	          0x4889fb	                            mov rbx, rdi	       174	reset.c	FUNCTION_6
0x400018f	          0x4989f4	                            mov r12, rsi	       174	reset.c	FUNCTION_6
0x4000192	          0x4889d5	                            mov rbp, rdx	       174	reset.c	FUNCTION_6
0x4000195	      0xbf00000000	                              mov edi, 0	       175	reset.c	FUNCTION_6	CALL_1
0x400019a	      0xe800000000	                          call 0x400019f	       175	reset.c	FUNCTION_6	CALL_1
0x400019f	    0x48c743080000	                  mov qword [rbx + 8], 0	       164	strbuf.h	FUNCTION_62
0x40001a7	        0x488b4b10	            mov rcx, qword [rbx + 0x10] 	       165	strbuf.h	FUNCTION_62	IF_2
0x40001ab	    0x4881f9000000	                              cmp rcx, 0	       165	strbuf.h	FUNCTION_62	IF_2
0x40001b2	            0x7405	                            je 0x40001b9	       165	strbuf.h	FUNCTION_62	IF_2
0x40001b4	          0xc60100	                       mov byte [rcx], 0	       166	strbuf.h	FUNCTION_62	IF_2
0x40001b7	            0xeb22	                           jmp 0x40001db	       166	strbuf.h	FUNCTION_62	IF_2
0x40001b9	    0x803d00000000	                cmp byte [0x040001c0], 0	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001c0	            0x7419	                            je 0x40001db	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001c2	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001c7	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001cc	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001d1	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001d6	      0xe800000000	                          call 0x40001db	       168	strbuf.h	FUNCTION_62	CALL_2
0x40001db	          0x4885c0	                           test rax, rax	       178	reset.c	FUNCTION_6	IF_1
0x40001de	            0x741a	                            je 0x40001fa	       178	reset.c	FUNCTION_6	IF_1
0x40001e0	          0x4c89e1	                            mov rcx, r12	       179	reset.c	FUNCTION_6	CALL_3
0x40001e3	          0x4889c2	                            mov rdx, rax	       179	reset.c	FUNCTION_6	CALL_3
0x40001e6	      0xbe00000000	                              mov esi, 0	       179	reset.c	FUNCTION_6	CALL_3
0x40001eb	          0x4889df	                            mov rdi, rbx	       179	reset.c	FUNCTION_6	CALL_3
0x40001ee	      0xb800000000	                              mov eax, 0	       179	reset.c	FUNCTION_6	CALL_3
0x40001f3	      0xe800000000	                          call 0x40001f8	       179	reset.c	FUNCTION_6	CALL_3
0x40001f8	            0xeb31	                           jmp 0x400022b	       179	reset.c	FUNCTION_6	CALL_3
0x40001fa	          0x4885ed	                           test rbp, rbp	       180	reset.c	FUNCTION_6	ELSE_1	IF_2
0x40001fd	            0x7417	                            je 0x4000216	       180	reset.c	FUNCTION_6	ELSE_1	IF_2
0x40001ff	          0x4889ea	                            mov rdx, rbp	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000202	      0xbe00000000	                              mov esi, 0	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000207	          0x4889df	                            mov rdi, rbx	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x400020a	      0xb800000000	                              mov eax, 0	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x400020f	      0xe800000000	                          call 0x4000214	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000214	            0xeb15	                           jmp 0x400022b	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000216	          0x4c89e2	                            mov rdx, r12	       183	reset.c	FUNCTION_6	CALL_5
0x4000219	      0xbe00000000	                              mov esi, 0	       183	reset.c	FUNCTION_6	CALL_5
0x400021e	          0x4889df	                            mov rdi, rbx	       183	reset.c	FUNCTION_6	CALL_5
0x4000221	      0xb800000000	                              mov eax, 0	       183	reset.c	FUNCTION_6	CALL_5
0x4000226	      0xe800000000	                          call 0x400022b	       183	reset.c	FUNCTION_6	CALL_5
0x400022b	              0x5b	                                 pop rbx	       184	reset.c	FUNCTION_6
0x400022c	              0x5d	                                 pop rbp	       184	reset.c	FUNCTION_6
0x400022d	            0x415c	                                 pop r12	       184	reset.c	FUNCTION_6
0x400022f	              0xc3	                                     ret	       184	reset.c	FUNCTION_6
