resolve_undo_write	functions,1:IF,0:SWITCH,0:CALL,0:DO,0:WHILE,0:ELSE,0:FOR,0	88
0x40000e1	            0x4157	                                push r15	        32	resolve-undo.c	FUNCTION_2
0x40000e3	            0x4156	                                push r14	        32	resolve-undo.c	FUNCTION_2
0x40000e5	            0x4155	                                push r13	        32	resolve-undo.c	FUNCTION_2
0x40000e7	            0x4154	                                push r12	        32	resolve-undo.c	FUNCTION_2
0x40000e9	              0x55	                                push rbp	        32	resolve-undo.c	FUNCTION_2
0x40000ea	              0x53	                                push rbx	        32	resolve-undo.c	FUNCTION_2
0x40000eb	        0x4883ec18	                           sub rsp, 0x18	        32	resolve-undo.c	FUNCTION_2
0x40000ef	          0x4c8b3e	                    mov r15, qword [rsi]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40000f2	          0x4d85ff	                           test r15, r15	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40000f5	     0xf8410010000	                            je 0x400020b	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40000fb	          0x8b4608	                mov eax, dword [rsi + 8]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40000fe	        0x48c1e004	                              shl rax, 4	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000102	          0x4c01f8	                            add rax, r15	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000105	          0x4939c7	                            cmp r15, rax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000108	     0xf83fd000000	                           jae 0x400020b	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400010e	      0x4889742408	                mov qword [rsp + 8], rsi	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000113	          0x4989fc	                            mov r12, rdi	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000116	        0x4d8b6f08	                mov r13, qword [r15 + 8]	        35	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400011a	          0x4d85ed	                           test r13, r13	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x400011d	     0xf84ca000000	                            je 0x40001ed	        38	resolve-undo.c	FUNCTION_2	FUNCTION_1	IF_1
0x4000123	          0x498b37	                    mov rsi, qword [r15]	        40	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_1
0x4000126	      0xb800000000	                              mov eax, 0	       279	strbuf.h	FUNCTION_12	CALL_2
0x400012b	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000132	          0x4889f7	                            mov rdi, rsi	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000135	            0xf2ae	              repne scasb al, byte [rdi]	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000137	          0x4889c8	                            mov rax, rcx	       279	strbuf.h	FUNCTION_12	CALL_2
0x400013a	          0x48f7d0	                                 not rax	       279	strbuf.h	FUNCTION_12	CALL_2
0x400013d	        0x488d50ff	                      lea rdx, [rax - 1]	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000141	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000144	      0xe800000000	                          call 0x4000149	       279	strbuf.h	FUNCTION_12	CALL_2
0x4000149	        0x498b0424	                    mov rax, qword [r12]	       141	strbuf.h	FUNCTION_9
0x400014d	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_9
0x4000150	            0x740b	                            je 0x400015d	       141	strbuf.h	FUNCTION_9
0x4000152	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x4000156	      0x4939442408	                cmp qword [r12 + 8], rax	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x400015b	            0x750d	                           jne 0x400016a	       227	strbuf.h	FUNCTION_11	IF_1	CALL_1
0x400015d	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_11	CALL_2
0x4000162	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_11	CALL_2
0x4000165	      0xe800000000	                          call 0x400016a	       228	strbuf.h	FUNCTION_11	CALL_2
0x400016a	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       229	strbuf.h	FUNCTION_11
0x400016f	      0x498b442408	                mov rax, qword [r12 + 8]	       229	strbuf.h	FUNCTION_11
0x4000174	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_11
0x4000178	      0x49894c2408	                mov qword [r12 + 8], rcx	       229	strbuf.h	FUNCTION_11
0x400017d	        0xc6040200	                 mov byte [rdx + rax], 0	       229	strbuf.h	FUNCTION_11
0x4000181	      0x498b542410	            mov rdx, qword [r12 + 0x10] 	       230	strbuf.h	FUNCTION_11
0x4000186	      0x498b442408	                mov rax, qword [r12 + 8]	       230	strbuf.h	FUNCTION_11
0x400018b	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_11
0x400018f	          0x4d89ee	                            mov r14, r13	       230	strbuf.h	FUNCTION_11
0x4000192	        0x498d5d0c	                    lea rbx, [r13 + 0xc]	       230	strbuf.h	FUNCTION_11
0x4000196	          0x4c89ed	                            mov rbp, r13	       230	strbuf.h	FUNCTION_11
0x4000199	      0xb900000000	                              mov ecx, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x400019e	          0x8b5500	                    mov edx, dword [rbp]	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001a1	      0xbe00000000	                              mov esi, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001a6	          0x4c89e7	                            mov rdi, r12	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001a9	      0xb800000000	                              mov eax, 0	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001ae	      0xe800000000	                          call 0x40001b3	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001b3	        0x4883c504	                              add rbp, 4	        43	resolve-undo.c	FUNCTION_2	FUNCTION_1	CALL_3
0x40001b7	          0x4839eb	                            cmp rbx, rbp	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x40001ba	            0x75dd	                           jne 0x4000199	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x40001bc	        0x4983c548	                           add r13, 0x48	        42	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_1
0x40001c0	        0x41833e00	                      cmp dword [r14], 0	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40001c4	            0x741a	                            je 0x40001e0	        45	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	IF_2
0x40001c6	    0x488b05000000	            mov rax, qword [0x040001cd] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001cd	        0x488b4058	            mov rax, qword [rax + 0x58] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001d1	        0x488b5010	            mov rdx, qword [rax + 0x10] 	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001d5	          0x4889de	                            mov rsi, rbx	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001d8	          0x4c89e7	                            mov rdi, r12	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001db	      0xe800000000	                          call 0x40001e0	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001e0	        0x4983c604	                              add r14, 4	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001e4	        0x4883c314	                           add rbx, 0x14	        47	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2	CALL_4
0x40001e8	          0x4c39eb	                            cmp rbx, r13	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40001eb	            0x75d3	                           jne 0x40001c0	        44	resolve-undo.c	FUNCTION_2	FUNCTION_1	FOR_2
0x40001ed	        0x4983c710	                           add r15, 0x10	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40001f1	            0x7418	                            je 0x400020b	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40001f3	      0x488b7c2408	                mov rdi, qword [rsp + 8]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40001f8	          0x8b4708	                mov eax, dword [rdi + 8]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40001fb	        0x48c1e004	                              shl rax, 4	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x40001ff	          0x480307	                    add rax, qword [rdi]	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000202	          0x4939c7	                            cmp r15, rax	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x4000205	     0xf820bffffff	                            jb 0x4000116	        34	resolve-undo.c	FUNCTION_2	FUNCTION_1
0x400020b	        0x4883c418	                           add rsp, 0x18	        50	resolve-undo.c	FUNCTION_2
0x400020f	              0x5b	                                 pop rbx	        50	resolve-undo.c	FUNCTION_2
0x4000210	              0x5d	                                 pop rbp	        50	resolve-undo.c	FUNCTION_2
0x4000211	            0x415c	                                 pop r12	        50	resolve-undo.c	FUNCTION_2
0x4000213	            0x415d	                                 pop r13	        50	resolve-undo.c	FUNCTION_2
0x4000215	            0x415e	                                 pop r14	        50	resolve-undo.c	FUNCTION_2
0x4000217	            0x415f	                                 pop r15	        50	resolve-undo.c	FUNCTION_2
0x4000219	              0xc3	                                     ret	        50	resolve-undo.c	FUNCTION_2
resolve_undo_clear_index	functions,0:IF,1:SWITCH,0:CALL,2:DO,0:WHILE,0:ELSE,0:FOR,0	18
0x40003b9	              0x55	                                push rbp	       107	resolve-undo.c	FUNCTION_4
0x40003ba	              0x53	                                push rbx	       107	resolve-undo.c	FUNCTION_4
0x40003bb	        0x4883ec08	                              sub rsp, 8	       107	resolve-undo.c	FUNCTION_4
0x40003bf	        0x488b6f18	            mov rbp, qword [rdi + 0x18] 	       108	resolve-undo.c	FUNCTION_4
0x40003c3	          0x4885ed	                           test rbp, rbp	       109	resolve-undo.c	FUNCTION_4	IF_1
0x40003c6	            0x7424	                            je 0x40003ec	       109	resolve-undo.c	FUNCTION_4	IF_1
0x40003c8	          0x4889fb	                            mov rbx, rdi	       109	resolve-undo.c	FUNCTION_4	IF_1
0x40003cb	      0xbe01000000	                              mov esi, 1	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x40003d0	          0x4889ef	                            mov rdi, rbp	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x40003d3	      0xe800000000	                          call 0x40003d8	       111	resolve-undo.c	FUNCTION_4	CALL_1
0x40003d8	          0x4889ef	                            mov rdi, rbp	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x40003db	      0xe800000000	                          call 0x40003e0	       112	resolve-undo.c	FUNCTION_4	CALL_2
0x40003e0	    0x48c743180000	               mov qword [rbx + 0x18], 0	       113	resolve-undo.c	FUNCTION_4
0x40003e8	        0x834b1410	             or dword [rbx + 0x14], 0x10	       114	resolve-undo.c	FUNCTION_4
0x40003ec	        0x4883c408	                              add rsp, 8	       115	resolve-undo.c	FUNCTION_4
0x40003f0	              0x5b	                                 pop rbx	       115	resolve-undo.c	FUNCTION_4
0x40003f1	              0x5d	                                 pop rbp	       115	resolve-undo.c	FUNCTION_4
0x40003f2	              0xc3	                                     ret	       115	resolve-undo.c	FUNCTION_4
unmerge_marked_index	functions,0:IF,2:SWITCH,0:CALL,1:DO,0:WHILE,0:ELSE,0:FOR,1	20
0x4000574	      0x48837f1800	               cmp qword [rdi + 0x18], 0	       170	resolve-undo.c	FUNCTION_6	IF_1
0x4000579	            0x7432	                            je 0x40005ad	       170	resolve-undo.c	FUNCTION_6	IF_1
0x400057b	        0x837f0c00	                cmp dword [rdi + 0xc], 0	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x400057f	            0x742c	                            je 0x40005ad	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x4000581	              0x53	                                push rbx	       167	resolve-undo.c	FUNCTION_6
0x4000582	          0x4889fb	                            mov rbx, rdi	       167	resolve-undo.c	FUNCTION_6
0x4000585	      0xb800000000	                              mov eax, 0	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x400058a	          0x4863d0	                         movsxd rdx, eax	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x400058d	          0x488b0b	                    mov rcx, qword [rbx]	       174	resolve-undo.c	FUNCTION_6	FOR_1
0x4000590	        0x488b14d1	            mov rdx, qword [rcx + rdx*8]	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x4000594	        0xf6423b04	               test byte [rdx + 0x3b], 4	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x4000598	            0x740a	                            je 0x40005a4	       175	resolve-undo.c	FUNCTION_6	FOR_1	IF_2
0x400059a	            0x89c6	                            mov esi, eax	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x400059c	          0x4889df	                            mov rdi, rbx	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x400059f	      0xe800000000	                          call 0x40005a4	       176	resolve-undo.c	FUNCTION_6	FOR_1	CALL_1
0x40005a4	          0x83c001	                              add eax, 1	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x40005a7	          0x39430c	              cmp dword [rbx + 0xc], eax	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x40005aa	            0x77de	                            ja 0x400058a	       173	resolve-undo.c	FUNCTION_6	FOR_1
0x40005ac	              0x5b	                                 pop rbx	       178	resolve-undo.c	FUNCTION_6
0x40005ad	            0xf3c3	                                     ret	       178	resolve-undo.c	FUNCTION_6
record_resolve_undo	functions,0:IF,3:SWITCH,0:CALL,5:DO,0:WHILE,0:ELSE,0:FOR,0	45
0x4000040	            0x4154	                                push r12	         8	resolve-undo.c	FUNCTION_1
0x4000042	              0x55	                                push rbp	         8	resolve-undo.c	FUNCTION_1
0x4000043	              0x53	                                push rbx	         8	resolve-undo.c	FUNCTION_1
0x4000044	          0x8b5e38	            mov ebx, dword [rsi + 0x38] 	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x4000047	    0x81e300300000	                         and ebx, 0x3000	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x400004d	          0xc1eb0c	                            shr ebx, 0xc	        12	resolve-undo.c	FUNCTION_1	CALL_1
0x4000050	            0x85db	                           test ebx, ebx	        14	resolve-undo.c	FUNCTION_1	IF_1
0x4000052	     0xf8484000000	                            je 0x40000dc	        14	resolve-undo.c	FUNCTION_1	IF_1
0x4000058	          0x4889f5	                            mov rbp, rsi	        14	resolve-undo.c	FUNCTION_1	IF_1
0x400005b	          0x4989fc	                            mov r12, rdi	        14	resolve-undo.c	FUNCTION_1	IF_1
0x400005e	      0x48837f1800	               cmp qword [rdi + 0x18], 0	        17	resolve-undo.c	FUNCTION_1	IF_2
0x4000063	            0x7518	                           jne 0x400007d	        17	resolve-undo.c	FUNCTION_1	IF_2
0x4000065	      0xbe20000000	                           mov esi, 0x20	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x400006a	      0xbf01000000	                              mov edi, 1	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x400006f	      0xe800000000	                          call 0x4000074	        18	resolve-undo.c	FUNCTION_1	IF_2	CALL_2
0x4000074	        0x80481001	                 or byte [rax + 0x10], 1	        19	resolve-undo.c	FUNCTION_1	IF_2
0x4000078	      0x4989442418	             mov qword [r12 + 0x18], rax	        20	resolve-undo.c	FUNCTION_1	IF_2
0x400007d	        0x488d7558	                   lea rsi, [rbp + 0x58]	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x4000081	      0x498b7c2418	            mov rdi, qword [r12 + 0x18] 	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x4000086	      0xe800000000	                          call 0x400008b	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x400008b	          0x4989c4	                            mov r12, rax	        23	resolve-undo.c	FUNCTION_1	CALL_3
0x400008e	      0x4883780800	                  cmp qword [rax + 8], 0	        24	resolve-undo.c	FUNCTION_1	IF_3
0x4000093	            0x7514	                           jne 0x40000a9	        24	resolve-undo.c	FUNCTION_1	IF_3
0x4000095	      0xbe48000000	                           mov esi, 0x48	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x400009a	      0xbf01000000	                              mov edi, 1	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x400009f	      0xe800000000	                          call 0x40000a4	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x40000a4	      0x4989442408	                mov qword [r12 + 8], rax	        25	resolve-undo.c	FUNCTION_1	CALL_4
0x40000a9	      0x498b442408	                mov rax, qword [r12 + 8]	        26	resolve-undo.c	FUNCTION_1
0x40000ae	          0x83eb01	                              sub ebx, 1	        27	resolve-undo.c	FUNCTION_1	CALL_5
0x40000b1	          0x4863db	                         movsxd rbx, ebx	        53	string3.h	FUNCTION_19	CALL_3
0x40000b4	        0x488d149b	                  lea rdx, [rbx + rbx*4]	        53	string3.h	FUNCTION_19	CALL_3
0x40000b8	        0x488d3490	                  lea rsi, [rax + rdx*4]	        53	string3.h	FUNCTION_19	CALL_3
0x40000bc	        0x488d560c	                    lea rdx, [rsi + 0xc]	        53	string3.h	FUNCTION_19	CALL_3
0x40000c0	        0x488b7d44	            mov rdi, qword [rbp + 0x44] 	        53	string3.h	FUNCTION_19	CALL_3
0x40000c4	        0x48897e0c	              mov qword [rsi + 0xc], rdi	        53	string3.h	FUNCTION_19	CALL_3
0x40000c8	        0x488b754c	            mov rsi, qword [rbp + 0x4c] 	        53	string3.h	FUNCTION_19	CALL_3
0x40000cc	        0x48897208	                mov qword [rdx + 8], rsi	        53	string3.h	FUNCTION_19	CALL_3
0x40000d0	          0x8b4d54	            mov ecx, dword [rbp + 0x54] 	        53	string3.h	FUNCTION_19	CALL_3
0x40000d3	          0x894a10	             mov dword [rdx + 0x10], ecx	        53	string3.h	FUNCTION_19	CALL_3
0x40000d6	          0x8b5534	            mov edx, dword [rbp + 0x34] 	        28	resolve-undo.c	FUNCTION_1
0x40000d9	          0x891498	            mov dword [rax + rbx*4], edx	        28	resolve-undo.c	FUNCTION_1
0x40000dc	              0x5b	                                 pop rbx	        29	resolve-undo.c	FUNCTION_1
0x40000dd	              0x5d	                                 pop rbp	        29	resolve-undo.c	FUNCTION_1
0x40000de	            0x415c	                                 pop r12	        29	resolve-undo.c	FUNCTION_1
0x40000e0	              0xc3	                                     ret	        29	resolve-undo.c	FUNCTION_1
resolve_undo_read	functions,0:IF,6:SWITCH,0:CALL,8:DO,0:WHILE,1:ELSE,0:FOR,2	114
0x400021a	            0x4157	                                push r15	        53	resolve-undo.c	FUNCTION_3
0x400021c	            0x4156	                                push r14	        53	resolve-undo.c	FUNCTION_3
0x400021e	            0x4155	                                push r13	        53	resolve-undo.c	FUNCTION_3
0x4000220	            0x4154	                                push r12	        53	resolve-undo.c	FUNCTION_3
0x4000222	              0x55	                                push rbp	        53	resolve-undo.c	FUNCTION_3
0x4000223	              0x53	                                push rbx	        53	resolve-undo.c	FUNCTION_3
0x4000224	        0x4883ec38	                           sub rsp, 0x38	        53	resolve-undo.c	FUNCTION_3
0x4000228	          0x4889fb	                            mov rbx, rdi	        53	resolve-undo.c	FUNCTION_3
0x400022b	          0x4989f4	                            mov r12, rsi	        53	resolve-undo.c	FUNCTION_3
0x400022e	    0x64488b042528	                mov rax, qword fs:[0x28]	        53	resolve-undo.c	FUNCTION_3
0x4000237	      0x4889442428	             mov qword [rsp + 0x28], rax	        53	resolve-undo.c	FUNCTION_3
0x400023c	            0x31c0	                            xor eax, eax	        53	resolve-undo.c	FUNCTION_3
0x400023e	    0x488b05000000	            mov rax, qword [0x04000245] 	        58	resolve-undo.c	FUNCTION_3
0x4000245	        0x488b4058	            mov rax, qword [rax + 0x58] 	        58	resolve-undo.c	FUNCTION_3
0x4000249	        0x488b6810	            mov rbp, qword [rax + 0x10] 	        58	resolve-undo.c	FUNCTION_3
0x400024d	      0xbe20000000	                           mov esi, 0x20	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000252	      0xbf01000000	                              mov edi, 1	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000257	      0xe800000000	                          call 0x400025c	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x400025c	      0x4889442410	             mov qword [rsp + 0x10], rax	        60	resolve-undo.c	FUNCTION_3	CALL_1
0x4000261	        0x80481001	                 or byte [rax + 0x10], 1	        61	resolve-undo.c	FUNCTION_3
0x4000265	          0x4d85e4	                           test r12, r12	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000268	     0xf8422010000	                            je 0x4000390	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x400026e	            0x89e8	                            mov eax, ebp	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000270	      0x4889442418	             mov qword [rsp + 0x18], rax	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000275	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x400027c	          0x4889df	                            mov rdi, rbx	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x400027f	      0xb800000000	                              mov eax, 0	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000284	            0xf2ae	              repne scasb al, byte [rdi]	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000286	          0x48f7d1	                                 not rcx	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x4000289	          0x4889cd	                            mov rbp, rcx	        67	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_2
0x400028c	          0x4c39e1	                            cmp rcx, r12	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x400028f	     0xf83d6000000	                           jae 0x400036b	        68	resolve-undo.c	FUNCTION_3	WHILE_1	IF_1
0x4000295	          0x4889de	                            mov rsi, rbx	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x4000298	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x400029d	      0xe800000000	                          call 0x40002a2	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40002a2	          0x4989c5	                            mov r13, rax	        70	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_3
0x40002a5	      0x4883780800	                  cmp qword [rax + 8], 0	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40002aa	            0x7513	                           jne 0x40002bf	        71	resolve-undo.c	FUNCTION_3	WHILE_1	IF_2
0x40002ac	      0xbe48000000	                           mov esi, 0x48	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40002b1	      0xbf01000000	                              mov edi, 1	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40002b6	      0xe800000000	                          call 0x40002bb	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40002bb	        0x49894508	                mov qword [r13 + 8], rax	        72	resolve-undo.c	FUNCTION_3	WHILE_1	CALL_4
0x40002bf	        0x498b4508	                mov rax, qword [r13 + 8]	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002c3	      0x4889442408	                mov qword [rsp + 8], rax	        73	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002c8	          0x4929ec	                            sub r12, rbp	        74	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002cb	          0x4801dd	                            add rbp, rbx	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002ce	          0x4989c7	                            mov r15, rax	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002d1	        0x4c8d680c	                    lea r13, [rax + 0xc]	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002d5	          0x4989c6	                            mov r14, rax	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002d8	            0xeb03	                           jmp 0x40002dd	        75	resolve-undo.c	FUNCTION_3	WHILE_1
0x40002da	          0x4889dd	                            mov rbp, rbx	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x40002dd	      0xba08000000	                              mov edx, 8	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x40002e2	      0x488d742420	                   lea rsi, [rsp + 0x20]	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x40002e7	          0x4889ef	                            mov rdi, rbp	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x40002ea	      0xe800000000	                          call 0x40002ef	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x40002ef	          0x418906	                    mov dword [r14], eax	        78	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	CALL_5
0x40002f2	      0x488b5c2420	            mov rbx, qword [rsp + 0x20] 	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x40002f7	          0x4839eb	                            cmp rbx, rbp	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x40002fa	            0x746f	                            je 0x400036b	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x40002fc	          0x4885db	                           test rbx, rbx	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x40002ff	            0x746a	                            je 0x400036b	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000301	          0x803b00	                       cmp byte [rbx], 0	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000304	            0x7565	                           jne 0x400036b	        79	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_3
0x4000306	        0x4883c301	                              add rbx, 1	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400030a	          0x4889d8	                            mov rax, rbx	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400030d	          0x4829e8	                            sub rax, rbp	        81	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000310	          0x4c39e0	                            cmp rax, r12	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000313	            0x7356	                           jae 0x400036b	        82	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1	IF_4
0x4000315	          0x4929c4	                            sub r12, rax	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000318	        0x4983c604	                              add r14, 4	        84	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400031c	          0x4d39f5	                            cmp r13, r14	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400031f	            0x75b9	                           jne 0x40002da	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000321	      0x488b6c2408	                mov rbp, qword [rsp + 8]	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x4000326	        0x4883c548	                           add rbp, 0x48	        77	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_1
0x400032a	        0x41833f00	                      cmp dword [r15], 0	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x400032e	            0x741e	                            je 0x400034e	        89	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_5
0x4000330	      0x4c8b742418	            mov r14, qword [rsp + 0x18] 	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x4000335	          0x4d39e6	                            cmp r14, r12	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x4000338	            0x7731	                            ja 0x400036b	        91	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2	IF_6
0x400033a	          0x4c89f2	                            mov rdx, r14	        53	string3.h	FUNCTION_19	CALL_3
0x400033d	          0x4889de	                            mov rsi, rbx	        53	string3.h	FUNCTION_19	CALL_3
0x4000340	          0x4c89ef	                            mov rdi, r13	        53	string3.h	FUNCTION_19	CALL_3
0x4000343	      0xe800000000	                          call 0x4000348	        53	string3.h	FUNCTION_19	CALL_3
0x4000348	          0x4d29f4	                            sub r12, r14	        94	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x400034b	          0x4c01f3	                            add rbx, r14	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x400034e	        0x4983c704	                              add r15, 4	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000352	        0x4983c514	                           add r13, 0x14	        95	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000356	          0x4939ed	                            cmp r13, rbp	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x4000359	            0x75cf	                           jne 0x400032a	        88	resolve-undo.c	FUNCTION_3	WHILE_1	FOR_2
0x400035b	          0x4d85e4	                           test r12, r12	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x400035e	     0xf8511ffffff	                           jne 0x4000275	        63	resolve-undo.c	FUNCTION_3	WHILE_1
0x4000364	      0x488b442410	            mov rax, qword [rsp + 0x10] 	        98	resolve-undo.c	FUNCTION_3
0x4000369	            0xeb2a	                           jmp 0x4000395	        98	resolve-undo.c	FUNCTION_3
0x400036b	      0xbe01000000	                              mov esi, 1	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x4000370	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x4000375	      0xe800000000	                          call 0x400037a	       101	resolve-undo.c	FUNCTION_3	CALL_7
0x400037a	      0xbf00000000	                              mov edi, 0	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x400037f	      0xb800000000	                              mov eax, 0	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x4000384	      0xe800000000	                          call 0x4000389	       102	resolve-undo.c	FUNCTION_3	CALL_8
0x4000389	      0xb800000000	                              mov eax, 0	       103	resolve-undo.c	FUNCTION_3
0x400038e	            0xeb05	                           jmp 0x4000395	       103	resolve-undo.c	FUNCTION_3
0x4000390	      0x488b442410	            mov rax, qword [rsp + 0x10] 	        98	resolve-undo.c	FUNCTION_3
0x4000395	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	       104	resolve-undo.c	FUNCTION_3
0x400039a	    0x644833142528	                xor rdx, qword fs:[0x28]	       104	resolve-undo.c	FUNCTION_3
0x40003a3	            0x7405	                            je 0x40003aa	       104	resolve-undo.c	FUNCTION_3
0x40003a5	      0xe800000000	                          call 0x40003aa	       104	resolve-undo.c	FUNCTION_3
0x40003aa	        0x4883c438	                           add rsp, 0x38	       104	resolve-undo.c	FUNCTION_3
0x40003ae	              0x5b	                                 pop rbx	       104	resolve-undo.c	FUNCTION_3
0x40003af	              0x5d	                                 pop rbp	       104	resolve-undo.c	FUNCTION_3
0x40003b0	            0x415c	                                 pop r12	       104	resolve-undo.c	FUNCTION_3
0x40003b2	            0x415d	                                 pop r13	       104	resolve-undo.c	FUNCTION_3
0x40003b4	            0x415e	                                 pop r14	       104	resolve-undo.c	FUNCTION_3
0x40003b6	            0x415f	                                 pop r15	       104	resolve-undo.c	FUNCTION_3
0x40003b8	              0xc3	                                     ret	       104	resolve-undo.c	FUNCTION_3
unmerge_index_entry_at	functions,0:IF,8:SWITCH,0:CALL,11:DO,0:WHILE,1:ELSE,0:FOR,1	108
0x40003f3	            0x4157	                                push r15	       118	resolve-undo.c	FUNCTION_5
0x40003f5	            0x4156	                                push r14	       118	resolve-undo.c	FUNCTION_5
0x40003f7	            0x4155	                                push r13	       118	resolve-undo.c	FUNCTION_5
0x40003f9	            0x4154	                                push r12	       118	resolve-undo.c	FUNCTION_5
0x40003fb	              0x55	                                push rbp	       118	resolve-undo.c	FUNCTION_5
0x40003fc	              0x53	                                push rbx	       118	resolve-undo.c	FUNCTION_5
0x40003fd	        0x4883ec28	                           sub rsp, 0x28	       118	resolve-undo.c	FUNCTION_5
0x4000401	          0x4889fd	                            mov rbp, rdi	       118	resolve-undo.c	FUNCTION_5
0x4000404	            0x89f3	                            mov ebx, esi	       118	resolve-undo.c	FUNCTION_5
0x4000406	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       125	resolve-undo.c	FUNCTION_5	IF_1
0x400040a	          0x4885ff	                           test rdi, rdi	       125	resolve-undo.c	FUNCTION_5	IF_1
0x400040d	     0xf844c010000	                            je 0x400055f	       125	resolve-undo.c	FUNCTION_5	IF_1
0x4000413	        0x4c8b6500	                    mov r12, qword [rbp]	       128	resolve-undo.c	FUNCTION_5
0x4000417	          0x4863c6	                         movsxd rax, esi	       128	resolve-undo.c	FUNCTION_5
0x400041a	        0x4d8b2cc4	            mov r13, qword [r12 + rax*8]	       128	resolve-undo.c	FUNCTION_5
0x400041e	    0x41f745380030	        test dword [r13 + 0x38], 0x3000 	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x4000426	            0x7433	                            je 0x400045b	       129	resolve-undo.c	FUNCTION_5	IF_2	CALL_1
0x4000428	          0x8b6d0c	              mov ebp, dword [rbp + 0xc]	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x400042b	        0x4983c558	                           add r13, 0x58	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x400042f	            0x39f5	                            cmp ebp, esi	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000431	            0x7709	                            ja 0x400043c	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000433	            0xeb1e	                           jmp 0x4000453	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000435	          0x83c301	                              add ebx, 1	       133	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000438	            0x39eb	                            cmp ebx, ebp	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x400043a	            0x7317	                           jae 0x4000453	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x400043c	          0x4863c3	                         movsxd rax, ebx	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x400043f	        0x498b3cc4	            mov rdi, qword [r12 + rax*8]	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x4000443	        0x4883c758	                           add rdi, 0x58	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x4000447	          0x4c89ee	                            mov rsi, r13	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x400044a	      0xe800000000	                          call 0x400044f	       132	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1	CALL_2
0x400044f	            0x85c0	                           test eax, eax	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000451	            0x74e2	                            je 0x4000435	       131	resolve-undo.c	FUNCTION_5	IF_2	WHILE_1
0x4000453	          0x8d43ff	                      lea eax, [rbx - 1]	       134	resolve-undo.c	FUNCTION_5	IF_2
0x4000456	      0xe90a010000	                           jmp 0x4000565	       134	resolve-undo.c	FUNCTION_5	IF_2
0x400045b	        0x4d8d6558	                   lea r12, [r13 + 0x58]	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x400045f	          0x4c89e6	                            mov rsi, r12	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x4000462	      0xe800000000	                          call 0x4000467	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x4000467	      0x4889442418	             mov qword [rsp + 0x18], rax	       136	resolve-undo.c	FUNCTION_5	CALL_3
0x400046c	          0x4885c0	                           test rax, rax	       137	resolve-undo.c	FUNCTION_5	IF_3
0x400046f	     0xf84ee000000	                            je 0x4000563	       137	resolve-undo.c	FUNCTION_5	IF_3
0x4000475	        0x4c8b7808	                mov r15, qword [rax + 8]	       139	resolve-undo.c	FUNCTION_5
0x4000479	            0x89d8	                            mov eax, ebx	       141	resolve-undo.c	FUNCTION_5	IF_4
0x400047b	          0x4d85ff	                           test r15, r15	       140	resolve-undo.c	FUNCTION_5	IF_4
0x400047e	     0xf84e1000000	                            je 0x4000565	       140	resolve-undo.c	FUNCTION_5	IF_4
0x4000484	        0x418b4538	            mov eax, dword [r13 + 0x38] 	       142	resolve-undo.c	FUNCTION_5
0x4000488	      0x2500000004	         and eax, loc.imp.match_pathspec	       142	resolve-undo.c	FUNCTION_5
0x400048d	        0x89442414	             mov dword [rsp + 0x14], eax	       142	resolve-undo.c	FUNCTION_5
0x4000491	          0x4c89e7	                            mov rdi, r12	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x4000494	      0xe800000000	                          call 0x4000499	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x4000499	      0x4889442408	                mov qword [rsp + 8], rax	       143	resolve-undo.c	FUNCTION_5	CALL_4
0x400049e	            0x89de	                            mov esi, ebx	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004a0	          0x4889ef	                            mov rdi, rbp	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004a3	      0xe800000000	                          call 0x40004a8	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004a8	          0x4d89fd	                            mov r13, r15	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004ab	        0x4d8d770c	                    lea r14, [r15 + 0xc]	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004af	    0x41bc01000000	                             mov r12d, 1	       144	resolve-undo.c	FUNCTION_5	CALL_5
0x40004b5	    0xc74424100000	               mov dword [rsp + 0x10], 0	       122	resolve-undo.c	FUNCTION_5
0x40004bd	        0x418b7d00	                    mov edi, dword [r13]	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x40004c1	            0x85ff	                           test edi, edi	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x40004c3	            0x7454	                            je 0x4000519	       147	resolve-undo.c	FUNCTION_5	FOR_1	IF_5
0x40004c5	    0x41b800000000	                              mov r8d, 0	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x40004cb	          0x4489e1	                           mov ecx, r12d	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x40004ce	      0x488b542408	                mov rdx, qword [rsp + 8]	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x40004d3	          0x4c89f6	                            mov rsi, r14	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x40004d6	      0xe800000000	                          call 0x40004db	       149	resolve-undo.c	FUNCTION_5	FOR_1	CALL_6
0x40004db	      0x837c241400	               cmp dword [rsp + 0x14], 0	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x40004e0	            0x7407	                            je 0x40004e9	       151	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x40004e2	    0x814838000000	or dword [rax + 0x38], loc.imp.match_pathspec	       152	resolve-undo.c	FUNCTION_5	FOR_1	IF_6
0x40004e9	      0xba01000000	                              mov edx, 1	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004ee	          0x4889c6	                            mov rsi, rax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004f1	          0x4889ef	                            mov rdi, rbp	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004f4	      0xe800000000	                          call 0x40004f9	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004f9	            0x85c0	                           test eax, eax	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004fb	            0x741c	                            je 0x4000519	       153	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_7
0x40004fd	      0x488b742408	                mov rsi, qword [rsp + 8]	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x4000502	      0xbf00000000	                              mov edi, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x4000507	      0xb800000000	                              mov eax, 0	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x400050c	      0xe800000000	                          call 0x4000511	       155	resolve-undo.c	FUNCTION_5	FOR_1	IF_7	CALL_8
0x4000511	    0xc74424100100	               mov dword [rsp + 0x10], 1	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x4000519	        0x4183c401	                             add r12d, 1	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x400051d	        0x4983c504	                              add r13, 4	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x4000521	        0x4983c614	                           add r14, 0x14	       154	resolve-undo.c	FUNCTION_5	FOR_1	IF_7
0x4000525	        0x4183fc04	                             cmp r12d, 4	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x4000529	            0x7592	                           jne 0x40004bd	       145	resolve-undo.c	FUNCTION_5	FOR_1
0x400052b	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       158	resolve-undo.c	FUNCTION_5	CALL_9
0x4000530	      0xe800000000	                          call 0x4000535	       158	resolve-undo.c	FUNCTION_5	CALL_9
0x4000535	            0x89d8	                            mov eax, ebx	       160	resolve-undo.c	FUNCTION_5	IF_8
0x4000537	      0x837c241000	               cmp dword [rsp + 0x10], 0	       159	resolve-undo.c	FUNCTION_5	IF_8
0x400053c	            0x7527	                           jne 0x4000565	       159	resolve-undo.c	FUNCTION_5	IF_8
0x400053e	          0x4c89ff	                            mov rdi, r15	       161	resolve-undo.c	FUNCTION_5	CALL_10
0x4000541	      0xe800000000	                          call 0x4000546	       161	resolve-undo.c	FUNCTION_5	CALL_10
0x4000546	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       162	resolve-undo.c	FUNCTION_5
0x400054b	    0x48c740080000	                  mov qword [rax + 8], 0	       162	resolve-undo.c	FUNCTION_5
0x4000553	            0x89de	                            mov esi, ebx	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x4000555	          0x4889ef	                            mov rdi, rbp	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x4000558	      0xe800000000	                          call 0x400055d	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x400055d	            0xeb06	                           jmp 0x4000565	       163	resolve-undo.c	FUNCTION_5	CALL_11
0x400055f	            0x89f0	                            mov eax, esi	       126	resolve-undo.c	FUNCTION_5	IF_1
0x4000561	            0xeb02	                           jmp 0x4000565	       126	resolve-undo.c	FUNCTION_5	IF_1
0x4000563	            0x89d8	                            mov eax, ebx	       138	resolve-undo.c	FUNCTION_5	IF_3
0x4000565	        0x4883c428	                           add rsp, 0x28	       164	resolve-undo.c	FUNCTION_5
0x4000569	              0x5b	                                 pop rbx	       164	resolve-undo.c	FUNCTION_5
0x400056a	              0x5d	                                 pop rbp	       164	resolve-undo.c	FUNCTION_5
0x400056b	            0x415c	                                 pop r12	       164	resolve-undo.c	FUNCTION_5
0x400056d	            0x415d	                                 pop r13	       164	resolve-undo.c	FUNCTION_5
0x400056f	            0x415e	                                 pop r14	       164	resolve-undo.c	FUNCTION_5
0x4000571	            0x415f	                                 pop r15	       164	resolve-undo.c	FUNCTION_5
0x4000573	              0xc3	                                     ret	       164	resolve-undo.c	FUNCTION_5
unmerge_index	functions,0:IF,2:SWITCH,0:CALL,2:DO,0:WHILE,0:ELSE,0:FOR,1	40
0x40005af	      0x48837f1800	               cmp qword [rdi + 0x18], 0	       184	resolve-undo.c	FUNCTION_7	IF_1
0x40005b4	            0x7476	                            je 0x400062c	       184	resolve-undo.c	FUNCTION_7	IF_1
0x40005b6	        0x837f0c00	                cmp dword [rdi + 0xc], 0	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40005ba	            0x7470	                            je 0x400062c	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40005bc	            0x4154	                                push r12	       181	resolve-undo.c	FUNCTION_7
0x40005be	              0x55	                                push rbp	       181	resolve-undo.c	FUNCTION_7
0x40005bf	              0x53	                                push rbx	       181	resolve-undo.c	FUNCTION_7
0x40005c0	          0x4989f4	                            mov r12, rsi	       181	resolve-undo.c	FUNCTION_7
0x40005c3	          0x4889fd	                            mov rbp, rdi	       181	resolve-undo.c	FUNCTION_7
0x40005c6	      0xbb00000000	                              mov ebx, 0	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x40005cb	          0x4863c3	                         movsxd rax, ebx	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40005ce	        0x488b5500	                    mov rdx, qword [rbp]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40005d2	        0x488b34c2	            mov rsi, qword [rdx + rax*8]	       188	resolve-undo.c	FUNCTION_7	FOR_1
0x40005d6	          0x8b4634	            mov eax, dword [rsi + 0x34] 	       337	dir.h	FUNCTION_32	CALL_4
0x40005d9	      0x2500f00000	                         and eax, 0xf000	       337	dir.h	FUNCTION_32	CALL_4
0x40005de	      0x3d00400000	                         cmp eax, 0x4000	       336	dir.h	FUNCTION_32	CALL_2
0x40005e3	        0x410f94c1	                                sete r9b	       336	dir.h	FUNCTION_32	CALL_2
0x40005e7	      0x3d00e00000	                         cmp eax, 0xe000	       336	dir.h	FUNCTION_32	CALL_2
0x40005ec	           0xf94c0	                                 sete al	       336	dir.h	FUNCTION_32	CALL_2
0x40005ef	          0x4109c1	                             or r9d, eax	       336	dir.h	FUNCTION_32	CALL_2
0x40005f2	          0x8b563c	            mov edx, dword [rsi + 0x3c] 	       336	dir.h	FUNCTION_32	CALL_2
0x40005f5	        0x4883c658	                           add rsi, 0x58	       336	dir.h	FUNCTION_32	CALL_2
0x40005f9	        0x4183e101	                              and r9d, 1	       336	dir.h	FUNCTION_32	CALL_2
0x40005fd	    0x41b800000000	                              mov r8d, 0	       336	dir.h	FUNCTION_32	CALL_2
0x4000603	      0xb900000000	                              mov ecx, 0	       336	dir.h	FUNCTION_32	CALL_2
0x4000608	          0x4c89e7	                            mov rdi, r12	       336	dir.h	FUNCTION_32	CALL_2
0x400060b	      0xe800000000	                          call 0x4000610	       336	dir.h	FUNCTION_32	CALL_2
0x4000610	            0x85c0	                           test eax, eax	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x4000612	            0x740c	                            je 0x4000620	       189	resolve-undo.c	FUNCTION_7	FOR_1	IF_2	CALL_1
0x4000614	            0x89de	                            mov esi, ebx	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x4000616	          0x4889ef	                            mov rdi, rbp	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x4000619	      0xe800000000	                          call 0x400061e	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x400061e	            0x89c3	                            mov ebx, eax	       191	resolve-undo.c	FUNCTION_7	FOR_1	CALL_2
0x4000620	          0x83c301	                              add ebx, 1	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x4000623	          0x395d0c	              cmp dword [rbp + 0xc], ebx	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x4000626	            0x77a3	                            ja 0x40005cb	       187	resolve-undo.c	FUNCTION_7	FOR_1
0x4000628	              0x5b	                                 pop rbx	       193	resolve-undo.c	FUNCTION_7
0x4000629	              0x5d	                                 pop rbp	       193	resolve-undo.c	FUNCTION_7
0x400062a	            0x415c	                                 pop r12	       193	resolve-undo.c	FUNCTION_7
0x400062c	            0xf3c3	                                     ret	       193	resolve-undo.c	FUNCTION_7
