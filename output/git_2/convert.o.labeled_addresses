count_ident	CALL,1:FOR,0:ELSE,0:IF,7:functions,0:WHILE,2:DO,0:SWITCH,0	65
0x4000990	          0x4885f6	                           test rsi, rsi	      1056	convert.c	FUNCTION_27	WHILE_1
0x4000993	            0x4156	                                push r14	      1049	convert.c	FUNCTION_27
0x4000995	            0x4155	                                push r13	      1049	convert.c	FUNCTION_27
0x4000997	            0x4154	                                push r12	      1049	convert.c	FUNCTION_27
0x4000999	              0x55	                                push rbp	      1049	convert.c	FUNCTION_27
0x400099a	              0x53	                                push rbx	      1049	convert.c	FUNCTION_27
0x400099b	     0xf84b8000000	                            je 0x4000a59	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009a1	          0x4989fc	                            mov r12, rdi	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009a4	          0x4989f5	                            mov r13, rsi	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009a7	          0x4531f6	                          xor r14d, r14d	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009aa	            0xeb13	                           jmp 0x40009bf	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009ac	         0xf1f4000	                         nop dword [rax]	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009b0	          0x4885db	                           test rbx, rbx	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009b3	     0xf8484000000	                            je 0x4000a3d	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009b9	          0x4989dd	                            mov r13, rbx	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009bc	          0x4989ec	                            mov r12, rbp	      1056	convert.c	FUNCTION_27	WHILE_1
0x40009bf	      0x41803c2424	                    cmp byte [r12], 0x24	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x40009c4	      0x498d6c2401	                      lea rbp, [r12 + 1]	      1057	convert.c	FUNCTION_27	WHILE_1
0x40009c9	        0x498d5dff	                      lea rbx, [r13 - 1]	      1058	convert.c	FUNCTION_27	WHILE_1
0x40009cd	            0x75e1	                           jne 0x40009b0	      1059	convert.c	FUNCTION_27	WHILE_1	IF_1
0x40009cf	        0x4883fb02	                              cmp rbx, 2	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x40009d3	            0x7668	                           jbe 0x4000a3d	      1061	convert.c	FUNCTION_27	WHILE_1	IF_2
0x40009d5	      0xba02000000	                              mov edx, 2	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009da	          0x4889ee	                            mov rsi, rbp	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009dd	      0xbf00000000	                              mov edi, 0	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009e2	      0xe800000000	                          call 0x40009e7	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009e7	            0x85c0	                           test eax, eax	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009e9	            0x75ce	                           jne 0x40009b9	      1063	convert.c	FUNCTION_27	WHILE_1	IF_3	CALL_1
0x40009eb	    0x410fb6442403	               movzx eax, byte [r12 + 3]	      1065	convert.c	FUNCTION_27	WHILE_1
0x40009f1	      0x498d6c2404	                      lea rbp, [r12 + 4]	      1066	convert.c	FUNCTION_27	WHILE_1
0x40009f6	        0x498d5dfc	                      lea rbx, [r13 - 4]	      1067	convert.c	FUNCTION_27	WHILE_1
0x40009fa	            0x3c24	                            cmp al, 0x24	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x40009fc	            0x7452	                            je 0x4000a50	      1068	convert.c	FUNCTION_27	WHILE_1	IF_4
0x40009fe	            0x3c3a	                            cmp al, 0x3a	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x4000a00	            0x75ae	                           jne 0x40009b0	      1070	convert.c	FUNCTION_27	WHILE_1	IF_5
0x4000a02	          0x4885db	                           test rbx, rbx	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a05	            0x7436	                            je 0x4000a3d	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a07	    0x410fb6442404	               movzx eax, byte [r12 + 4]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a0d	      0x498d6c2405	                      lea rbp, [r12 + 5]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a12	        0x498d5dfb	                      lea rbx, [r13 - 5]	      1078	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a16	            0x3c24	                            cmp al, 0x24	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a18	            0x7516	                           jne 0x4000a30	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a1a	            0xeb34	                           jmp 0x4000a50	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a1c	         0xf1f4000	                         nop dword [rax]	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a20	        0x4883c501	                              add rbp, 1	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a24	         0xfb645ff	               movzx eax, byte [rbp - 1]	      1077	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a28	        0x4883eb01	                              sub rbx, 1	      1078	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a2c	            0x3c24	                            cmp al, 0x24	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a2e	            0x7420	                            je 0x4000a50	      1079	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a30	            0x3c0a	                             cmp al, 0xa	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000a32	     0xf8478ffffff	                            je 0x40009b0	      1083	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_7
0x4000a38	          0x4885db	                           test rbx, rbx	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a3b	            0x75e3	                           jne 0x4000a20	      1076	convert.c	FUNCTION_27	WHILE_1	WHILE_2
0x4000a3d	              0x5b	                                 pop rbx	      1088	convert.c	FUNCTION_27
0x4000a3e	          0x4489f0	                           mov eax, r14d	      1088	convert.c	FUNCTION_27
0x4000a41	              0x5d	                                 pop rbp	      1088	convert.c	FUNCTION_27
0x4000a42	            0x415c	                                 pop r12	      1088	convert.c	FUNCTION_27
0x4000a44	            0x415d	                                 pop r13	      1088	convert.c	FUNCTION_27
0x4000a46	            0x415e	                                 pop r14	      1088	convert.c	FUNCTION_27
0x4000a48	              0xc3	                                     ret	      1088	convert.c	FUNCTION_27
0x4000a49	     0xf1f80000000	                         nop dword [rax]	      1088	convert.c	FUNCTION_27
0x4000a50	        0x4183c601	                             add r14d, 1	      1080	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a54	      0xe957ffffff	                           jmp 0x40009b0	      1081	convert.c	FUNCTION_27	WHILE_1	WHILE_2	IF_6
0x4000a59	          0x4531f6	                          xor r14d, r14d	      1053	convert.c	FUNCTION_27
0x4000a5c	            0xebdf	                           jmp 0x4000a3d	      1053	convert.c	FUNCTION_27
cascade_filter_fn	CALL,3:FOR,0:ELSE,0:IF,8:functions,0:WHILE,1:DO,0:SWITCH,0	141
0x40001a0	            0x4157	                                push r15	      1684	convert.c	FUNCTION_50
0x40001a2	            0x4156	                                push r14	      1684	convert.c	FUNCTION_50
0x40001a4	            0x4155	                                push r13	      1684	convert.c	FUNCTION_50
0x40001a6	            0x4154	                                push r12	      1684	convert.c	FUNCTION_50
0x40001a8	              0x55	                                push rbp	      1684	convert.c	FUNCTION_50
0x40001a9	              0x53	                                push rbx	      1684	convert.c	FUNCTION_50
0x40001aa	          0x4889fb	                            mov rbx, rdi	      1684	convert.c	FUNCTION_50
0x40001ad	        0x4883ec48	                           sub rsp, 0x48	      1684	convert.c	FUNCTION_50
0x40001b1	          0x4d8b20	                     mov r12, qword [r8]	      1687	convert.c	FUNCTION_50
0x40001b4	    0x64488b3c2528	                mov rdi, qword fs:[0x28]	      1684	convert.c	FUNCTION_50
0x40001bd	      0x48897c2438	             mov qword [rsp + 0x38], rdi	      1684	convert.c	FUNCTION_50
0x40001c2	            0x31ff	                            xor edi, edi	      1684	convert.c	FUNCTION_50
0x40001c4	      0x48894c2410	             mov qword [rsp + 0x10], rcx	      1684	convert.c	FUNCTION_50
0x40001c9	      0x4c89442418	              mov qword [rsp + 0x18], r8	      1684	convert.c	FUNCTION_50
0x40001ce	          0x4d85e4	                           test r12, r12	      1693	convert.c	FUNCTION_50	WHILE_1
0x40001d1	     0xf84f3010000	                            je 0x40003ca	      1693	convert.c	FUNCTION_50	WHILE_1
0x40001d7	        0x488d4318	                   lea rax, [rbx + 0x18]	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x40001db	            0x31ed	                            xor ebp, ebp	      1693	convert.c	FUNCTION_50	WHILE_1
0x40001dd	          0x4989f7	                            mov r15, rsi	      1693	convert.c	FUNCTION_50	WHILE_1
0x40001e0	          0x4989ee	                            mov r14, rbp	      1717	convert.c	FUNCTION_50	WHILE_1
0x40001e3	          0x4889d5	                            mov rbp, rdx	      1717	convert.c	FUNCTION_50	WHILE_1
0x40001e6	      0x4889442408	                mov qword [rsp + 8], rax	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x40001eb	      0xe97e000000	                           jmp 0x400026e	      1715	convert.c	FUNCTION_50	WHILE_1	IF_4
0x40001f0	          0x4d85ff	                           test r15, r15	      1709	convert.c	FUNCTION_50	WHILE_1
0x40001f3	     0xf8427010000	                            je 0x4000320	      1709	convert.c	FUNCTION_50	WHILE_1
0x40001f9	        0x488b4500	                    mov rax, qword [rbp]	      1709	convert.c	FUNCTION_50	WHILE_1
0x40001fd	          0x4885c0	                           test rax, rax	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x4000200	      0x4889442428	             mov qword [rsp + 0x28], rax	      1709	convert.c	FUNCTION_50	WHILE_1
0x4000205	     0xf84d5000000	                            je 0x40002e0	      1710	convert.c	FUNCTION_50	WHILE_1	IF_3
0x400020b	        0x488b7b08	                mov rdi, qword [rbx + 8]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400020f	    0x48c744243000	          mov qword [rsp + 0x30], 0x400 	      1712	convert.c	FUNCTION_50	WHILE_1
0x4000218	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1964	convert.c	FUNCTION_60	CALL_1
0x400021d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000222	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000227	          0x4c89fe	                            mov rsi, r15	      1964	convert.c	FUNCTION_60	CALL_1
0x400022a	          0x488b07	                    mov rax, qword [rdi]	      1964	convert.c	FUNCTION_60	CALL_1
0x400022d	            0xff10	                        call qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x400022f	            0x85c0	                           test eax, eax	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4000231	     0xf8589010000	                           jne 0x40003c0	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4000237	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x400023c	        0x488b4500	                    mov rax, qword [rbp]	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4000240	      0xb900040000	                          mov ecx, 0x400	      1717	convert.c	FUNCTION_50	WHILE_1
0x4000245	        0x2b4c2430	             sub ecx, dword [rsp + 0x30]	      1717	convert.c	FUNCTION_50	WHILE_1
0x4000249	    0xc7831c040000	              mov dword [rbx + 0x41c], 0	      1718	convert.c	FUNCTION_50	WHILE_1
0x4000253	          0x4829d0	                            sub rax, rdx	      1720	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4000256	          0x4901c7	                            add r15, rax	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4000259	    0x898b18040000	            mov dword [rbx + 0x418], ecx	      1717	convert.c	FUNCTION_50	WHILE_1
0x400025f	        0x48895500	                    mov qword [rbp], rdx	      1721	convert.c	FUNCTION_50	WHILE_1	IF_5
0x4000263	     0xf8400010000	                            je 0x4000369	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4000269	          0x4d39f4	                            cmp r12, r14	      1693	convert.c	FUNCTION_50	WHILE_1
0x400026c	            0x7672	                           jbe 0x40002e0	      1693	convert.c	FUNCTION_50	WHILE_1
0x400026e	    0x4863b31c0400	        movsxd rsi, dword [rbx + 0x41c] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4000275	    0x8b8318040000	           mov eax, dword [rbx + 0x418] 	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400027b	          0x4d89e5	                            mov r13, r12	      1694	convert.c	FUNCTION_50	WHILE_1
0x400027e	          0x4d29f5	                            sub r13, r14	      1694	convert.c	FUNCTION_50	WHILE_1
0x4000281	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1694	convert.c	FUNCTION_50	WHILE_1
0x4000286	            0x39c6	                            cmp esi, eax	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4000288	     0xf8d62ffffff	                           jge 0x40001f0	      1697	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400028e	            0x29f0	                            sub eax, esi	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x4000290	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x4000294	      0x4803742408	                add rsi, qword [rsp + 8]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000299	            0x4898	                                    cdqe	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x400029b	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1964	convert.c	FUNCTION_60	CALL_1
0x40002a0	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1964	convert.c	FUNCTION_60	CALL_1
0x40002a5	      0x4889442428	             mov qword [rsp + 0x28], rax	      1698	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002aa	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1964	convert.c	FUNCTION_60	CALL_1
0x40002af	        0x4a8d0c30	                    lea rcx, [rax + r14]	      1964	convert.c	FUNCTION_60	CALL_1
0x40002b3	          0x488b07	                    mov rax, qword [rdi]	      1964	convert.c	FUNCTION_60	CALL_1
0x40002b6	            0xff10	                        call qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x40002b8	            0x85c0	                           test eax, eax	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x40002ba	     0xf8500010000	                           jne 0x40003c0	      1699	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2	CALL_1
0x40002c0	          0x4d89e6	                            mov r14, r12	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002c3	      0x4c2b742430	             sub r14, qword [rsp + 0x30]	      1704	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002c8	    0x8b8318040000	           mov eax, dword [rbx + 0x418] 	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002ce	        0x2b442428	             sub eax, dword [rsp + 0x28]	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002d2	          0x4d39f4	                            cmp r12, r14	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002d5	    0x89831c040000	            mov dword [rbx + 0x41c], eax	      1703	convert.c	FUNCTION_50	WHILE_1	IF_1
0x40002db	            0x7791	                            ja 0x400026e	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002dd	           0xf1f00	                         nop dword [rax]	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002e0	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002e5	          0x4c89f5	                            mov rbp, r14	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002e8	          0x488b00	                    mov rax, qword [rax]	      1693	convert.c	FUNCTION_50	WHILE_1
0x40002eb	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1740	convert.c	FUNCTION_50
0x40002f0	          0x4829e8	                            sub rax, rbp	      1740	convert.c	FUNCTION_50
0x40002f3	          0x488907	                    mov qword [rdi], rax	      1740	convert.c	FUNCTION_50
0x40002f6	            0x31c0	                            xor eax, eax	      1741	convert.c	FUNCTION_50
0x40002f8	      0x488b7c2438	            mov rdi, qword [rsp + 0x38] 	      1742	convert.c	FUNCTION_50
0x40002fd	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      1742	convert.c	FUNCTION_50
0x4000306	     0xf85c7000000	                           jne 0x40003d3	      1742	convert.c	FUNCTION_50
0x400030c	        0x4883c448	                           add rsp, 0x48	      1742	convert.c	FUNCTION_50
0x4000310	              0x5b	                                 pop rbx	      1742	convert.c	FUNCTION_50
0x4000311	              0x5d	                                 pop rbp	      1742	convert.c	FUNCTION_50
0x4000312	            0x415c	                                 pop r12	      1742	convert.c	FUNCTION_50
0x4000314	            0x415d	                                 pop r13	      1742	convert.c	FUNCTION_50
0x4000316	            0x415e	                                 pop r14	      1742	convert.c	FUNCTION_50
0x4000318	            0x415f	                                 pop r15	      1742	convert.c	FUNCTION_50
0x400031a	              0xc3	                                     ret	      1742	convert.c	FUNCTION_50
0x400031b	       0xf1f440000	                   nop dword [rax + rax]	      1742	convert.c	FUNCTION_50
0x4000320	        0x488b7b08	                mov rdi, qword [rbx + 8]	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4000324	            0x31f6	                            xor esi, esi	      1964	convert.c	FUNCTION_60	CALL_1
0x4000326	    0x48c744242800	               mov qword [rsp + 0x28], 0	      1709	convert.c	FUNCTION_50	WHILE_1
0x400032f	    0x48c744243000	          mov qword [rsp + 0x30], 0x400 	      1712	convert.c	FUNCTION_50	WHILE_1
0x4000338	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1964	convert.c	FUNCTION_60	CALL_1
0x400033d	      0x488b4c2408	                mov rcx, qword [rsp + 8]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000342	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000347	          0x488b07	                    mov rax, qword [rdi]	      1964	convert.c	FUNCTION_60	CALL_1
0x400034a	            0xff10	                        call qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x400034c	            0x85c0	                           test eax, eax	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x400034e	            0x7570	                           jne 0x40003c0	      1713	convert.c	FUNCTION_50	WHILE_1	IF_4	CALL_2
0x4000350	      0xb900040000	                          mov ecx, 0x400	      1717	convert.c	FUNCTION_50	WHILE_1
0x4000355	        0x2b4c2430	             sub ecx, dword [rsp + 0x30]	      1717	convert.c	FUNCTION_50	WHILE_1
0x4000359	    0xc7831c040000	              mov dword [rbx + 0x41c], 0	      1718	convert.c	FUNCTION_50	WHILE_1
0x4000363	    0x898b18040000	            mov dword [rbx + 0x418], ecx	      1717	convert.c	FUNCTION_50	WHILE_1
0x4000369	          0x4531ff	                          xor r15d, r15d	      1717	convert.c	FUNCTION_50	WHILE_1
0x400036c	            0x85c9	                           test ecx, ecx	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x400036e	     0xf85f5feffff	                           jne 0x4000269	      1726	convert.c	FUNCTION_50	WHILE_1	IF_6
0x4000374	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1964	convert.c	FUNCTION_60	CALL_1
0x4000379	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x400037d	            0x31f6	                            xor esi, esi	      1964	convert.c	FUNCTION_60	CALL_1
0x400037f	    0x48c744242800	               mov qword [rsp + 0x28], 0	      1730	convert.c	FUNCTION_50	WHILE_1
0x4000388	      0x4c896c2430	             mov qword [rsp + 0x30], r13	      1731	convert.c	FUNCTION_50	WHILE_1
0x400038d	      0x4c8d442430	                    lea r8, [rsp + 0x30]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000392	      0x488d542428	                   lea rdx, [rsp + 0x28]	      1964	convert.c	FUNCTION_60	CALL_1
0x4000397	        0x4a8d0c30	                    lea rcx, [rax + r14]	      1964	convert.c	FUNCTION_60	CALL_1
0x400039b	          0x488b07	                    mov rax, qword [rdi]	      1964	convert.c	FUNCTION_60	CALL_1
0x400039e	            0xff10	                        call qword [rax]	      1964	convert.c	FUNCTION_60	CALL_1
0x40003a0	            0x85c0	                           test eax, eax	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x40003a2	            0x751c	                           jne 0x40003c0	      1732	convert.c	FUNCTION_50	WHILE_1	IF_7	CALL_3
0x40003a4	      0x488b442430	            mov rax, qword [rsp + 0x30] 	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x40003a9	          0x4939c5	                            cmp r13, rax	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x40003ac	     0xf842effffff	                            je 0x40002e0	      1736	convert.c	FUNCTION_50	WHILE_1	IF_8
0x40003b2	          0x4d89e6	                            mov r14, r12	      1738	convert.c	FUNCTION_50	WHILE_1
0x40003b5	          0x4929c6	                            sub r14, rax	      1738	convert.c	FUNCTION_50	WHILE_1
0x40003b8	      0xe9acfeffff	                           jmp 0x4000269	      1738	convert.c	FUNCTION_50	WHILE_1
0x40003bd	           0xf1f00	                         nop dword [rax]	      1738	convert.c	FUNCTION_50	WHILE_1
0x40003c0	      0xb8ffffffff	                     mov eax, 0xffffffff	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x40003c5	      0xe92effffff	                           jmp 0x40002f8	      1702	convert.c	FUNCTION_50	WHILE_1	IF_1	IF_2
0x40003ca	            0x31c0	                            xor eax, eax	      1693	convert.c	FUNCTION_50	WHILE_1
0x40003cc	            0x31ed	                            xor ebp, ebp	      1686	convert.c	FUNCTION_50
0x40003ce	      0xe918ffffff	                           jmp 0x40002eb	      1686	convert.c	FUNCTION_50
0x40003d3	      0xe800000000	                          call 0x40003d8	      1742	convert.c	FUNCTION_50
async_convert_to_working_tree	CALL,1:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	3
0x4003420	          0x4d89c1	                              mov r9, r8	      1484	convert.c	FUNCTION_41	CALL_1
0x4003423	          0x4531c0	                            xor r8d, r8d	      1484	convert.c	FUNCTION_41	CALL_1
0x4003426	      0xe905e5ffff	jmp sym.convert_to_working_tree_internal	      1484	convert.c	FUNCTION_41	CALL_1
would_convert_to_git_filter_fd	CALL,2:FOR,0:ELSE,0:IF,2:functions,0:WHILE,0:DO,0:SWITCH,0	23
0x4003090	        0x4883ec38	                           sub rsp, 0x38	      1343	convert.c	FUNCTION_36
0x4003094	          0x4889fe	                            mov rsi, rdi	      1343	convert.c	FUNCTION_36
0x4003097	          0x4889e7	                            mov rdi, rsp	      1346	convert.c	FUNCTION_36	CALL_1
0x400309a	    0x64488b042528	                mov rax, qword fs:[0x28]	      1343	convert.c	FUNCTION_36
0x40030a3	      0x4889442428	             mov qword [rsp + 0x28], rax	      1343	convert.c	FUNCTION_36
0x40030a8	            0x31c0	                            xor eax, eax	      1343	convert.c	FUNCTION_36
0x40030aa	      0xe8b1dcffff	                  call sym.convert_attrs	      1346	convert.c	FUNCTION_36	CALL_1
0x40030af	        0x488b0424	                    mov rax, qword [rsp]	      1347	convert.c	FUNCTION_36	IF_1
0x40030b3	          0x4885c0	                           test rax, rax	      1347	convert.c	FUNCTION_36	IF_1
0x40030b6	            0x7428	                            je 0x40030e0	      1347	convert.c	FUNCTION_36	IF_1
0x40030b8	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1348	convert.c	FUNCTION_36	IF_1
0x40030bb	            0x85c0	                           test eax, eax	      1348	convert.c	FUNCTION_36	IF_1
0x40030bd	           0xf95c0	                                setne al	      1348	convert.c	FUNCTION_36	IF_1
0x40030c0	           0xfb6c0	                           movzx eax, al	      1348	convert.c	FUNCTION_36	IF_1
0x40030c3	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	      1359	convert.c	FUNCTION_36
0x40030c8	    0x644833142528	                xor rdx, qword fs:[0x28]	      1359	convert.c	FUNCTION_36
0x40030d1	            0x7511	                           jne 0x40030e4	      1359	convert.c	FUNCTION_36
0x40030d3	        0x4883c438	                           add rsp, 0x38	      1359	convert.c	FUNCTION_36
0x40030d7	              0xc3	                                     ret	      1359	convert.c	FUNCTION_36
0x40030d8	     0xf1f84000000	                   nop dword [rax + rax]	      1359	convert.c	FUNCTION_36
0x40030e0	            0x31c0	                            xor eax, eax	      1348	convert.c	FUNCTION_36	IF_1
0x40030e2	            0xebdf	                           jmp 0x40030c3	      1348	convert.c	FUNCTION_36	IF_1
0x40030e4	      0xe800000000	                          call 0x40030e9	      1359	convert.c	FUNCTION_36
get_convert_attr_ascii	CALL,1:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,1	19
0x40030f0	        0x4883ec38	                           sub rsp, 0x38	      1362	convert.c	FUNCTION_37
0x40030f4	          0x4889fe	                            mov rsi, rdi	      1362	convert.c	FUNCTION_37
0x40030f7	          0x4889e7	                            mov rdi, rsp	      1365	convert.c	FUNCTION_37	CALL_1
0x40030fa	    0x64488b042528	                mov rax, qword fs:[0x28]	      1362	convert.c	FUNCTION_37
0x4003103	      0x4889442428	             mov qword [rsp + 0x28], rax	      1362	convert.c	FUNCTION_37
0x4003108	            0x31c0	                            xor eax, eax	      1362	convert.c	FUNCTION_37
0x400310a	      0xe851dcffff	                  call sym.convert_attrs	      1365	convert.c	FUNCTION_37	CALL_1
0x400310f	        0x8b442408	                mov eax, dword [rsp + 8]	      1365	convert.c	FUNCTION_37	CALL_1
0x4003113	          0x8d50ff	                      lea edx, [rax - 1]	      1365	convert.c	FUNCTION_37	CALL_1
0x4003116	      0xb800000000	                              mov eax, 0	      1365	convert.c	FUNCTION_37	CALL_1
0x400311b	          0x83fa06	                              cmp edx, 6	      1365	convert.c	FUNCTION_37	CALL_1
0x400311e	            0x7708	                            ja 0x4003128	      1365	convert.c	FUNCTION_37	CALL_1
0x4003120	    0x488b04d50000	                  mov rax, qword [rdx*8]	      1365	convert.c	FUNCTION_37	CALL_1
0x4003128	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	      1385	convert.c	FUNCTION_37
0x400312d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1385	convert.c	FUNCTION_37
0x4003136	            0x7505	                           jne 0x400313d	      1385	convert.c	FUNCTION_37
0x4003138	        0x4883c438	                           add rsp, 0x38	      1385	convert.c	FUNCTION_37
0x400313c	              0xc3	                                     ret	      1385	convert.c	FUNCTION_37
0x400313d	      0xe800000000	                          call 0x4003142	      1385	convert.c	FUNCTION_37
start_multi_file_filter_fn	CALL,1:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	6
0x4000970	        0x4c8d4f78	                    lea r9, [rdi + 0x78]	       771	convert.c	FUNCTION_21	CALL_1
0x4000974	    0x41b800000000	                              mov r8d, 0	       771	convert.c	FUNCTION_21	CALL_1
0x400097a	            0x31c9	                            xor ecx, ecx	       771	convert.c	FUNCTION_21	CALL_1
0x400097c	      0xba00000000	                              mov edx, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000981	      0xbe00000000	                              mov esi, 0	       771	convert.c	FUNCTION_21	CALL_1
0x4000986	      0xe900000000	                           jmp 0x400098b	       771	convert.c	FUNCTION_21	CALL_1
gather_convert_stats_ascii	CALL,1:FOR,0:ELSE,0:IF,1:functions,0:WHILE,0:DO,0:SWITCH,1	21
0x4001150	          0x4885ff	                           test rdi, rdi	       109	convert.c	FUNCTION_3	IF_1
0x4001153	            0x7405	                            je 0x400115a	       109	convert.c	FUNCTION_3	IF_1
0x4001155	          0x4885f6	                           test rsi, rsi	       109	convert.c	FUNCTION_3	IF_1
0x4001158	            0x7506	                           jne 0x4001160	       109	convert.c	FUNCTION_3	IF_1
0x400115a	      0xb800000000	                              mov eax, 0	       127	convert.c	FUNCTION_4	IF_1
0x400115f	              0xc3	                                     ret	       138	convert.c	FUNCTION_4
0x4001160	        0x4883ec08	                              sub rsp, 8	       123	convert.c	FUNCTION_4
0x4001164	      0xe867ffffff	    call sym.gather_convert_stats.part.3	       123	convert.c	FUNCTION_4
0x4001169	            0xa804	                              test al, 4	       126	convert.c	FUNCTION_4	IF_1
0x400116b	            0x740a	                            je 0x4001177	       126	convert.c	FUNCTION_4	IF_1
0x400116d	      0xb800000000	                              mov eax, 0	       127	convert.c	FUNCTION_4	IF_1
0x4001172	        0x4883c408	                              add rsp, 8	       138	convert.c	FUNCTION_4
0x4001176	              0xc3	                                     ret	       138	convert.c	FUNCTION_4
0x4001177	          0x83e801	                              sub eax, 1	       138	convert.c	FUNCTION_4
0x400117a	          0x83f802	                              cmp eax, 2	       138	convert.c	FUNCTION_4
0x400117d	            0x770d	                            ja 0x400118c	       138	convert.c	FUNCTION_4
0x400117f	    0x488b04c50000	                  mov rax, qword [rax*8]	       138	convert.c	FUNCTION_4
0x4001187	        0x4883c408	                              add rsp, 8	       138	convert.c	FUNCTION_4
0x400118b	              0xc3	                                     ret	       138	convert.c	FUNCTION_4
0x400118c	      0xb800000000	                              mov eax, 0	       127	convert.c	FUNCTION_4	IF_1
0x4001191	            0xebdf	                           jmp 0x4001172	       127	convert.c	FUNCTION_4	IF_1
null_free_fn	CALL,0:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	1
0x4000040	            0xf3c3	                                     ret	      1543	convert.c	FUNCTION_45
trace_encoding	CALL,6:FOR,1:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	78
0x4000a60	            0x4156	                                push r14	       329	convert.c	FUNCTION_13
0x4000a62	            0x4155	                                push r13	       329	convert.c	FUNCTION_13
0x4000a64	          0x4989ce	                            mov r14, rcx	       329	convert.c	FUNCTION_13
0x4000a67	            0x4154	                                push r12	       329	convert.c	FUNCTION_13
0x4000a69	              0x55	                                push rbp	       329	convert.c	FUNCTION_13
0x4000a6a	          0x4889f1	                            mov rcx, rsi	       334	convert.c	FUNCTION_13	CALL_2
0x4000a6d	              0x53	                                push rbx	       329	convert.c	FUNCTION_13
0x4000a6e	          0x4c89c5	                             mov rbp, r8	       329	convert.c	FUNCTION_13
0x4000a71	      0xbe00000000	                              mov esi, 0	       334	convert.c	FUNCTION_13	CALL_2
0x4000a76	          0x4989d0	                             mov r8, rdx	       334	convert.c	FUNCTION_13	CALL_2
0x4000a79	          0x4889fa	                            mov rdx, rdi	       334	convert.c	FUNCTION_13	CALL_2
0x4000a7c	        0x4883ec20	                           sub rsp, 0x20	       329	convert.c	FUNCTION_13
0x4000a80	    0x64488b042528	                mov rax, qword fs:[0x28]	       329	convert.c	FUNCTION_13
0x4000a89	      0x4889442418	             mov qword [rsp + 0x18], rax	       329	convert.c	FUNCTION_13
0x4000a8e	            0x31c0	                            xor eax, eax	       329	convert.c	FUNCTION_13
0x4000a90	          0x4889e7	                            mov rdi, rsp	       334	convert.c	FUNCTION_13	CALL_2
0x4000a93	    0x48c704240000	                      mov qword [rsp], 0	       331	convert.c	FUNCTION_13
0x4000a9b	    0x48c744240800	                  mov qword [rsp + 8], 0	       331	convert.c	FUNCTION_13
0x4000aa4	    0x48c744241000	               mov qword [rsp + 0x10], 0	       331	convert.c	FUNCTION_13
0x4000aad	      0xe800000000	                          call 0x4000ab2	       334	convert.c	FUNCTION_13	CALL_2
0x4000ab2	          0x4d85f6	                           test r14, r14	       335	convert.c	FUNCTION_13	FOR_1
0x4000ab5	            0x7469	                            je 0x4000b20	       335	convert.c	FUNCTION_13	FOR_1
0x4000ab7	            0x31d2	                            xor edx, edx	       335	convert.c	FUNCTION_13	FOR_1
0x4000ab9	          0x4885ed	                           test rbp, rbp	       335	convert.c	FUNCTION_13	FOR_1
0x4000abc	      0xbb01000000	                              mov ebx, 1	       335	convert.c	FUNCTION_13	FOR_1
0x4000ac1	    0x41bc20000000	                          mov r12d, 0x20	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000ac7	            0x750a	                           jne 0x4000ad3	       335	convert.c	FUNCTION_13	FOR_1
0x4000ac9	            0xeb55	                           jmp 0x4000b20	       335	convert.c	FUNCTION_13	FOR_1
0x4000acb	       0xf1f440000	                   nop dword [rax + rax]	       335	convert.c	FUNCTION_13	FOR_1
0x4000ad0	          0x4889c3	                            mov rbx, rax	       335	convert.c	FUNCTION_13	FOR_1
0x4000ad3	        0x448d6a01	                     lea r13d, [rdx + 1]	       341	convert.c	FUNCTION_13	FOR_1
0x4000ad7	    0x41b90a000000	                            mov r9d, 0xa	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000add	        0x41f6c507	                            test r13b, 7	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000ae1	            0x740e	                            je 0x4000af1	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000ae3	          0x4839eb	                            cmp rbx, rbp	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000ae6	          0x4519c9	                            sbb r9d, r9d	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000ae9	        0x4183e116	                           and r9d, 0x16	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000aed	        0x4183c10a	                            add r9d, 0xa	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000af1	    0x450fbe441eff	         movsx r8d, byte [r14 + rbx - 1]	       340	convert.c	FUNCTION_13	FOR_1
0x4000af7	      0xbe00000000	                              mov esi, 0	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000afc	          0x4889e7	                            mov rdi, rsp	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000aff	        0x418d40df	                    lea eax, [r8 - 0x21]	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b03	        0x410fb6c8	                          movzx ecx, r8b	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b07	            0x3c5d	                            cmp al, 0x5d	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b09	        0x450f47c4	                         cmova r8d, r12d	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b0d	            0x31c0	                            xor eax, eax	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b0f	      0xe800000000	                          call 0x4000b14	       336	convert.c	FUNCTION_13	FOR_1	CALL_3
0x4000b14	          0x4839dd	                            cmp rbp, rbx	       335	convert.c	FUNCTION_13	FOR_1
0x4000b17	        0x488d4301	                      lea rax, [rbx + 1]	       335	convert.c	FUNCTION_13	FOR_1
0x4000b1b	          0x4489ea	                           mov edx, r13d	       341	convert.c	FUNCTION_13	FOR_1
0x4000b1e	            0x77b0	                            ja 0x4000ad0	       335	convert.c	FUNCTION_13	FOR_1
0x4000b20	      0xba01000000	                              mov edx, 1	       344	convert.c	FUNCTION_13	CALL_4
0x4000b25	      0xbe0a000000	                            mov esi, 0xa	       344	convert.c	FUNCTION_13	CALL_4
0x4000b2a	          0x4889e7	                            mov rdi, rsp	       344	convert.c	FUNCTION_13	CALL_4
0x4000b2d	      0xe800000000	                          call 0x4000b32	       344	convert.c	FUNCTION_13	CALL_4
0x4000b32	    0x48b8ffffffff	                 movabs rax, 0x1ffffffff	       346	convert.c	FUNCTION_13	CALL_5
0x4000b3c	    0x482305000000	             and rax, qword [0x04000b43]	       346	convert.c	FUNCTION_13	CALL_5
0x4000b43	    0x48ba00000000	                 movabs rdx, 0x100000000	       346	convert.c	FUNCTION_13	CALL_5
0x4000b4d	          0x4839d0	                            cmp rax, rdx	       346	convert.c	FUNCTION_13	CALL_5
0x4000b50	            0x7417	                            je 0x4000b69	       346	convert.c	FUNCTION_13	CALL_5
0x4000b52	          0x4889e1	                            mov rcx, rsp	       346	convert.c	FUNCTION_13	CALL_5
0x4000b55	      0xba00000000	                              mov edx, 0	       346	convert.c	FUNCTION_13	CALL_5
0x4000b5a	      0xbe5a010000	                          mov esi, 0x15a	       346	convert.c	FUNCTION_13	CALL_5
0x4000b5f	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_13	CALL_5
0x4000b64	      0xe800000000	                          call 0x4000b69	       346	convert.c	FUNCTION_13	CALL_5
0x4000b69	          0x4889e7	                            mov rdi, rsp	       347	convert.c	FUNCTION_13	CALL_6
0x4000b6c	      0xe800000000	                          call 0x4000b71	       347	convert.c	FUNCTION_13	CALL_6
0x4000b71	      0x488b442418	            mov rax, qword [rsp + 0x18] 	       348	convert.c	FUNCTION_13
0x4000b76	    0x644833042528	                xor rax, qword fs:[0x28]	       348	convert.c	FUNCTION_13
0x4000b7f	            0x750d	                           jne 0x4000b8e	       348	convert.c	FUNCTION_13
0x4000b81	        0x4883c420	                           add rsp, 0x20	       348	convert.c	FUNCTION_13
0x4000b85	              0x5b	                                 pop rbx	       348	convert.c	FUNCTION_13
0x4000b86	              0x5d	                                 pop rbp	       348	convert.c	FUNCTION_13
0x4000b87	            0x415c	                                 pop r12	       348	convert.c	FUNCTION_13
0x4000b89	            0x415d	                                 pop r13	       348	convert.c	FUNCTION_13
0x4000b8b	            0x415e	                                 pop r14	       348	convert.c	FUNCTION_13
0x4000b8d	              0xc3	                                     ret	       348	convert.c	FUNCTION_13
0x4000b8e	      0xe800000000	                          call 0x4000b93	       348	convert.c	FUNCTION_13
lf_to_crlf_filter_fn	CALL,0:FOR,1:ELSE,1:IF,9:functions,0:WHILE,0:DO,0:SWITCH,0	101
0x4000050	        0xf6470801	                  test byte [rdi + 8], 1	      1584	convert.c	FUNCTION_47	IF_1
0x4000054	              0x55	                                push rbp	      1575	convert.c	FUNCTION_47
0x4000055	              0x53	                                push rbx	      1575	convert.c	FUNCTION_47
0x4000056	     0xf84c4000000	                            je 0x4000120	      1584	convert.c	FUNCTION_47	IF_1
0x400005c	         0xfb64709	               movzx eax, byte [rdi + 9]	      1584	convert.c	FUNCTION_47	IF_1
0x4000060	            0x3c0d	                             cmp al, 0xd	      1584	convert.c	FUNCTION_47	IF_1
0x4000062	     0xf85e8000000	                           jne 0x4000150	      1584	convert.c	FUNCTION_47	IF_1
0x4000068	          0x4885f6	                           test rsi, rsi	      1584	convert.c	FUNCTION_47	IF_1
0x400006b	     0xf84df000000	                            je 0x4000150	      1584	convert.c	FUNCTION_47	IF_1
0x4000071	          0x488b2a	                    mov rbp, qword [rdx]	      1595	convert.c	FUNCTION_47
0x4000074	            0x31c0	                            xor eax, eax	      1576	convert.c	FUNCTION_47
0x4000076	        0x806708fe	                and byte [rdi + 8], 0xfe	      1602	convert.c	FUNCTION_47	IF_3	IF_4
0x400007a	      0xbb01000000	                              mov ebx, 1	      1601	convert.c	FUNCTION_47	IF_3	IF_4
0x400007f	          0x4531c9	                            xor r9d, r9d	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000082	          0x4885ed	                           test rbp, rbp	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000085	          0x4d8b10	                     mov r10, qword [r8]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000088	            0x746b	                            je 0x40000f5	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400008a	          0x4939c2	                            cmp r10, rax	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400008d	            0x772f	                            ja 0x40000be	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x400008f	            0xeb64	                           jmp 0x40000f5	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000091	     0xf1f80000000	                         nop dword [rax]	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x4000098	        0x4180fb0d	                           cmp r11b, 0xd	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x400009c	      0xbb01000000	                              mov ebx, 1	      1632	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x40000a1	            0x740d	                            je 0x40000b0	      1631	convert.c	FUNCTION_47	IF_3	FOR_1	IF_8
0x40000a3	        0x44881c01	              mov byte [rcx + rax], r11b	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000a7	          0x4d8b10	                     mov r10, qword [r8]	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000aa	        0x4883c001	                              add rax, 1	      1637	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000ae	            0x31db	                            xor ebx, ebx	      1636	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000b0	        0x4983c101	                               add r9, 1	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000b4	          0x4939e9	                             cmp r9, rbp	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000b7	            0x733c	                           jae 0x40000f5	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000b9	          0x4c39d0	                            cmp rax, r10	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000bc	            0x7337	                           jae 0x40000f5	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000be	      0x460fb61c0e	             movzx r11d, byte [rsi + r9]	      1606	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000c3	        0x4180fb0a	                           cmp r11b, 0xa	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40000c7	     0xf84a3000000	                            je 0x4000170	      1608	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x40000cd	            0x85db	                           test ebx, ebx	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x40000cf	            0x740b	                            je 0x40000dc	      1610	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x40000d1	        0xc604010d	               mov byte [rcx + rax], 0xd	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x40000d5	          0x4d8b10	                     mov r10, qword [r8]	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x40000d8	        0x4883c001	                              add rax, 1	      1616	convert.c	FUNCTION_47	IF_3	FOR_1	ELSE_1	IF_6
0x40000dc	          0x4c39d0	                            cmp rax, r10	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x40000df	            0x72b7	                            jb 0x4000098	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x40000e1	        0x804f0801	                    or byte [rdi + 8], 1	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x40000e5	        0x44885f09	                mov byte [rdi + 9], r11b	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x40000e9	          0x4d8b10	                     mov r10, qword [r8]	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x40000ec	        0x4983c101	                               add r9, 1	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f0	          0x4939e9	                             cmp r9, rbp	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f3	            0x72c4	                            jb 0x40000b9	      1605	convert.c	FUNCTION_47	IF_3	FOR_1
0x40000f5	          0x4929c2	                            sub r10, rax	      1640	convert.c	FUNCTION_47	IF_3
0x40000f8	          0x4d8910	                     mov qword [r8], r10	      1640	convert.c	FUNCTION_47	IF_3
0x40000fb	          0x4c290a	                     sub qword [rdx], r9	      1641	convert.c	FUNCTION_47	IF_3
0x40000fe	         0xfb64708	               movzx eax, byte [rdi + 8]	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000102	            0xa801	                              test al, 1	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000104	            0x750e	                           jne 0x4000114	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000106	            0x85db	                           test ebx, ebx	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x4000108	            0x740a	                            je 0x4000114	      1643	convert.c	FUNCTION_47	IF_3	IF_9
0x400010a	          0x83c801	                               or eax, 1	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x400010d	        0xc647090d	                 mov byte [rdi + 9], 0xd	      1645	convert.c	FUNCTION_47	IF_3	IF_9
0x4000111	          0x884708	                  mov byte [rdi + 8], al	      1644	convert.c	FUNCTION_47	IF_3	IF_9
0x4000114	            0x31c0	                            xor eax, eax	      1649	convert.c	FUNCTION_47
0x4000116	              0x5b	                                 pop rbx	      1649	convert.c	FUNCTION_47
0x4000117	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_47
0x4000118	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
0x4000119	     0xf1f80000000	                         nop dword [rax]	      1649	convert.c	FUNCTION_47
0x4000120	            0x31c0	                            xor eax, eax	      1576	convert.c	FUNCTION_47
0x4000122	          0x4885f6	                           test rsi, rsi	      1590	convert.c	FUNCTION_47	IF_2
0x4000125	            0x7439	                            je 0x4000160	      1590	convert.c	FUNCTION_47	IF_2
0x4000127	          0x488b2a	                    mov rbp, qword [rdx]	      1595	convert.c	FUNCTION_47
0x400012a	          0x4885ed	                           test rbp, rbp	      1596	convert.c	FUNCTION_47	IF_3
0x400012d	            0x7411	                            je 0x4000140	      1596	convert.c	FUNCTION_47	IF_3
0x400012f	        0xf6470801	                  test byte [rdi + 8], 1	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x4000133	     0xf853dffffff	                           jne 0x4000076	      1600	convert.c	FUNCTION_47	IF_3	IF_4
0x4000139	            0x31db	                            xor ebx, ebx	      1598	convert.c	FUNCTION_47	IF_3
0x400013b	      0xe93fffffff	                           jmp 0x400007f	      1598	convert.c	FUNCTION_47	IF_3
0x4000140	        0xf6470801	                  test byte [rdi + 8], 1	      1596	convert.c	FUNCTION_47	IF_3
0x4000144	     0xf852cffffff	                           jne 0x4000076	      1596	convert.c	FUNCTION_47	IF_3
0x400014a	            0x31c0	                            xor eax, eax	      1649	convert.c	FUNCTION_47
0x400014c	              0x5b	                                 pop rbx	      1649	convert.c	FUNCTION_47
0x400014d	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_47
0x400014e	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
0x400014f	              0x90	                                     nop	      1649	convert.c	FUNCTION_47
0x4000150	            0x8801	                      mov byte [rcx], al	      1585	convert.c	FUNCTION_47	IF_1
0x4000152	        0x806708fe	                and byte [rdi + 8], 0xfe	      1586	convert.c	FUNCTION_47	IF_1
0x4000156	          0x4885f6	                           test rsi, rsi	      1590	convert.c	FUNCTION_47	IF_2
0x4000159	      0xb801000000	                              mov eax, 1	      1585	convert.c	FUNCTION_47	IF_1
0x400015e	            0x75c7	                           jne 0x4000127	      1590	convert.c	FUNCTION_47	IF_2
0x4000160	          0x492900	                     sub qword [r8], rax	      1591	convert.c	FUNCTION_47	IF_2
0x4000163	            0x31c0	                            xor eax, eax	      1649	convert.c	FUNCTION_47
0x4000165	              0x5b	                                 pop rbx	      1649	convert.c	FUNCTION_47
0x4000166	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_47
0x4000167	              0xc3	                                     ret	      1649	convert.c	FUNCTION_47
0x4000168	     0xf1f84000000	                   nop dword [rax + rax]	      1649	convert.c	FUNCTION_47
0x4000170	        0xc604010d	               mov byte [rcx + rax], 0xd	      1609	convert.c	FUNCTION_47	IF_3	FOR_1	IF_5
0x4000174	        0x4883c001	                              add rax, 1	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000178	          0x493b00	                     cmp rax, qword [r8]	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400017b	     0xf8222ffffff	                            jb 0x40000a3	      1625	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000181	        0x804f0801	                    or byte [rdi + 8], 1	      1626	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000185	        0x44885f09	                mov byte [rdi + 9], r11b	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x4000189	          0x4d8b10	                     mov r10, qword [r8]	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
0x400018c	      0xe95bffffff	                           jmp 0x40000ec	      1627	convert.c	FUNCTION_47	IF_3	FOR_1	IF_7
ident_filter_fn	CALL,12:FOR,0:ELSE,1:IF,11:functions,0:WHILE,1:DO,0:SWITCH,1	256
0x40020c0	            0x4157	                                push r15	      1819	convert.c	FUNCTION_55
0x40020c2	            0x4156	                                push r14	      1819	convert.c	FUNCTION_55
0x40020c4	            0x4155	                                push r13	      1819	convert.c	FUNCTION_55
0x40020c6	            0x4154	                                push r12	      1819	convert.c	FUNCTION_55
0x40020c8	              0x55	                                push rbp	      1819	convert.c	FUNCTION_55
0x40020c9	              0x53	                                push rbx	      1819	convert.c	FUNCTION_55
0x40020ca	          0x4889fb	                            mov rbx, rdi	      1819	convert.c	FUNCTION_55
0x40020cd	        0x4883ec28	                           sub rsp, 0x28	      1819	convert.c	FUNCTION_55
0x40020d1	          0x4885f6	                           test rsi, rsi	      1823	convert.c	FUNCTION_55	IF_1
0x40020d4	      0x48894c2418	             mov qword [rsp + 0x18], rcx	      1819	convert.c	FUNCTION_55
0x40020d9	      0x4c89442408	                 mov qword [rsp + 8], r8	      1819	convert.c	FUNCTION_55
0x40020de	     0xf842c020000	                            je 0x4002310	      1823	convert.c	FUNCTION_55	IF_1
0x40020e4	          0x8b4720	            mov eax, dword [rdi + 0x20] 	      1823	convert.c	FUNCTION_55	IF_1
0x40020e7	        0x4c8d6708	                      lea r12, [rdi + 8]	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40020eb	          0x488b0a	                    mov rcx, qword [rdx]	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40020ee	        0x488d7f24	                   lea rdi, [rdi + 0x24]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x40020f2	          0x4989f7	                            mov r15, rsi	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x40020f5	          0x4989d5	                            mov r13, rdx	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x40020f8	      0x48897c2410	             mov qword [rsp + 0x10], rdi	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x40020fd	           0xf1f00	                         nop dword [rax]	      1885	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1	CALL_11
0x4002100	          0x4885c9	                           test rcx, rcx	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002103	            0x753b	                           jne 0x4002140	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002105	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002108	     0xf8530020000	                           jne 0x400233e	      1837	convert.c	FUNCTION_55	WHILE_1
0x400210e	      0x4c8b742408	                mov r14, qword [rsp + 8]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4002113	      0x488d742418	                   lea rsi, [rsp + 0x18]	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4002118	          0x4889df	                            mov rdi, rbx	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x400211b	          0x4c89f2	                            mov rdx, r14	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x400211e	      0xe8cdeaffff	                    call sym.ident_drain	      1841	convert.c	FUNCTION_55	WHILE_1	IF_2	CALL_3
0x4002123	        0x49833e00	                      cmp qword [r14], 0	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4002127	     0xf8411020000	                            je 0x400233e	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x400212d	        0x498b4d00	                    mov rcx, qword [r13]	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4002131	          0x8b4320	            mov eax, dword [rbx + 0x20] 	      1842	convert.c	FUNCTION_55	WHILE_1	IF_2	IF_3
0x4002134	          0x4885c9	                           test rcx, rcx	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002137	            0x74cc	                            je 0x4002105	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002139	     0xf1f80000000	                         nop dword [rax]	      1837	convert.c	FUNCTION_55	WHILE_1
0x4002140	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x4002143	            0x74c9	                            je 0x400210e	      1840	convert.c	FUNCTION_55	WHILE_1	IF_2
0x4002145	        0x450fbe37	                  movsx r14d, byte [r15]	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002149	        0x4883e901	                              sub rcx, 1	      1848	convert.c	FUNCTION_55	WHILE_1
0x400214d	          0x83f8fe	             cmp eax, 0xfffffffffffffffe	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4002150	        0x498d6f01	                      lea rbp, [r15 + 1]	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002154	        0x49894d00	                    mov qword [r13], rcx	      1848	convert.c	FUNCTION_55	WHILE_1
0x4002158	          0x4589f7	                          mov r15d, r14d	      1847	convert.c	FUNCTION_55	WHILE_1
0x400215b	     0xf84ef000000	                            je 0x4002250	      1850	convert.c	FUNCTION_55	WHILE_1	IF_4
0x4002161	          0x83f803	                              cmp eax, 3	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002164	          0x4863d0	                         movsxd rdx, eax	      1867	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002167	            0x7767	                            ja 0x40021d0	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002169	     0xfbeb2000000	                   movsx esi, byte [rdx]	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002170	          0x4139f6	                           cmp r14d, esi	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002173	     0xf8437010000	                            je 0x40022b0	      1866	convert.c	FUNCTION_55	WHILE_1	IF_7
0x4002179	            0x85c0	                           test eax, eax	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x400217b	            0x7553	                           jne 0x40021d0	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x400217d	        0x488b4308	                mov rax, qword [rbx + 8]	      1872	convert.c	FUNCTION_55	WHILE_1	IF_8
0x4002181	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4002184	     0xf85a6000000	                           jne 0x4002230	       141	strbuf.h	FUNCTION_62
0x400218a	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x400218f	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002192	      0xe800000000	                          call 0x4002197	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002197	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       228	strbuf.h	FUNCTION_64	CALL_2
0x400219b	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x400219f	        0x488d4a01	                      lea rcx, [rdx + 1]	       229	strbuf.h	FUNCTION_64
0x40021a3	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x40021a7	        0x44883c10	              mov byte [rax + rdx], r15b	       229	strbuf.h	FUNCTION_64
0x40021ab	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x40021af	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x40021b3	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x40021b7	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      1892	convert.c	FUNCTION_55	WHILE_1
0x40021be	        0x498b4d00	                    mov rcx, qword [r13]	      1892	convert.c	FUNCTION_55	WHILE_1
0x40021c2	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x40021c5	      0xb8ffffffff	                     mov eax, 0xffffffff	      1892	convert.c	FUNCTION_55	WHILE_1
0x40021ca	      0xe931ffffff	                           jmp 0x4002100	      1892	convert.c	FUNCTION_55	WHILE_1
0x40021cf	              0x90	                                     nop	      1892	convert.c	FUNCTION_55	WHILE_1
0x40021d0	      0xbe00000000	                              mov esi, 0	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40021d5	          0x4c89e7	                            mov rdi, r12	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40021d8	      0xe800000000	                          call 0x40021dd	      1873	convert.c	FUNCTION_55	WHILE_1	CALL_8
0x40021dd	        0x837b2003	               cmp dword [rbx + 0x20], 3	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x40021e1	            0x759a	                           jne 0x400217d	      1874	convert.c	FUNCTION_55	WHILE_1	IF_9
0x40021e3	        0x4183fe3a	                          cmp r14d, 0x3a	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x40021e7	            0x740a	                            je 0x40021f3	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x40021e9	        0x4183fe24	                          cmp r14d, 0x24	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x40021ed	     0xf85cd000000	                           jne 0x40022c0	      1875	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x40021f3	        0x4183fe3a	                          cmp r14d, 0x3a	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40021f7	     0xf8453010000	                            je 0x4002350	      1881	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40021fd	      0x4c8b742410	            mov r14, qword [rsp + 0x10] 	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002202	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002205	          0x4c89f7	                            mov rdi, r14	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002208	      0xe800000000	                          call 0x400220d	       279	strbuf.h	FUNCTION_65	CALL_2
0x400220d	          0x4c89f6	                            mov rsi, r14	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002210	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002213	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002216	      0xe800000000	                          call 0x400221b	       279	strbuf.h	FUNCTION_65	CALL_2
0x400221b	    0xc74320ffffff	     mov dword [rbx + 0x20], 0xffffffff 	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x4002222	        0x498b4d00	                    mov rcx, qword [r13]	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x4002226	      0xb8ffffffff	                     mov eax, 0xffffffff	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x400222b	      0xe9d0feffff	                           jmp 0x4002100	      1886	convert.c	FUNCTION_55	WHILE_1	IF_9	ELSE_1
0x4002230	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       141	strbuf.h	FUNCTION_62
0x4002234	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002238	          0x4839c2	                            cmp rdx, rax	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400223b	     0xf855affffff	                           jne 0x400219b	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002241	      0xe944ffffff	                           jmp 0x400218a	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002246	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002250	        0x488b4308	                mov rax, qword [rbx + 8]	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002254	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4002257	     0xf85bb010000	                           jne 0x4002418	       141	strbuf.h	FUNCTION_62
0x400225d	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002262	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002265	      0xe800000000	                          call 0x400226a	       228	strbuf.h	FUNCTION_64	CALL_2
0x400226a	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       228	strbuf.h	FUNCTION_64	CALL_2
0x400226e	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x4002272	        0x488d4a01	                      lea rcx, [rdx + 1]	       229	strbuf.h	FUNCTION_64
0x4002276	        0x4183fe0a	                           cmp r14d, 0xa	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x400227a	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x400227e	        0x44883c10	              mov byte [rax + rdx], r15b	       229	strbuf.h	FUNCTION_64
0x4002282	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x4002286	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x400228a	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x400228e	     0xf8414010000	                            je 0x40023a8	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4002294	        0x4183fe24	                          cmp r14d, 0x24	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x4002298	     0xf840a010000	                            je 0x40023a8	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x400229e	        0x498b4d00	                    mov rcx, qword [r13]	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x40022a2	          0x8b4320	            mov eax, dword [rbx + 0x20] 	      1856	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_5
0x40022a5	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x40022a8	      0xe953feffff	                           jmp 0x4002100	      1847	convert.c	FUNCTION_55	WHILE_1
0x40022ad	           0xf1f00	                         nop dword [rax]	      1847	convert.c	FUNCTION_55	WHILE_1
0x40022b0	          0x83c001	                              add eax, 1	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40022b3	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x40022b6	          0x894320	             mov dword [rbx + 0x20], eax	      1868	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40022b9	      0xe942feffff	                           jmp 0x4002100	      1869	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40022be	            0x6690	                                     nop	      1869	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40022c0	        0x488b4308	                mov rax, qword [rbx + 8]	      1869	convert.c	FUNCTION_55	WHILE_1	IF_7
0x40022c4	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x40022c7	     0xf8563010000	                           jne 0x4002430	       141	strbuf.h	FUNCTION_62
0x40022cd	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x40022d2	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_64	CALL_2
0x40022d5	      0xe800000000	                          call 0x40022da	       228	strbuf.h	FUNCTION_64	CALL_2
0x40022da	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       228	strbuf.h	FUNCTION_64	CALL_2
0x40022de	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x40022e2	        0x488d4a01	                      lea rcx, [rdx + 1]	       229	strbuf.h	FUNCTION_64
0x40022e6	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x40022ea	        0x44883c10	              mov byte [rax + rdx], r15b	       229	strbuf.h	FUNCTION_64
0x40022ee	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x40022f2	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x40022f5	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x40022f9	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x40022fd	    0xc74320000000	               mov dword [rbx + 0x20], 0	      1877	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4002304	            0x31c0	                            xor eax, eax	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4002306	        0x498b4d00	                    mov rcx, qword [r13]	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400230a	      0xe9f1fdffff	                           jmp 0x4002100	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x400230f	              0x90	                                     nop	      1878	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_10
0x4002310	          0x8b4720	            mov eax, dword [rdi + 0x20] 	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4002313	          0x8d5002	                      lea edx, [rax + 2]	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4002316	          0x83fa01	                              cmp edx, 1	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x4002319	            0x7611	                           jbe 0x400232c	      1825	convert.c	FUNCTION_55	IF_1	SWITCH_1
0x400231b	        0x488d7f08	                      lea rdi, [rdi + 8]	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x400231f	          0x4863d0	                         movsxd rdx, eax	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4002322	      0xbe00000000	                              mov esi, 0	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x4002327	      0xe800000000	                          call 0x400232c	      1827	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_1
0x400232c	      0x488b542408	                mov rdx, qword [rsp + 8]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4002331	      0x488d742418	                   lea rsi, [rsp + 0x18]	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4002336	          0x4889df	                            mov rdi, rbx	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x4002339	      0xe8b2e8ffff	                    call sym.ident_drain	      1832	convert.c	FUNCTION_55	IF_1	SWITCH_1	CALL_2
0x400233e	        0x4883c428	                           add rsp, 0x28	      1895	convert.c	FUNCTION_55
0x4002342	            0x31c0	                            xor eax, eax	      1895	convert.c	FUNCTION_55
0x4002344	              0x5b	                                 pop rbx	      1895	convert.c	FUNCTION_55
0x4002345	              0x5d	                                 pop rbp	      1895	convert.c	FUNCTION_55
0x4002346	            0x415c	                                 pop r12	      1895	convert.c	FUNCTION_55
0x4002348	            0x415d	                                 pop r13	      1895	convert.c	FUNCTION_55
0x400234a	            0x415e	                                 pop r14	      1895	convert.c	FUNCTION_55
0x400234c	            0x415f	                                 pop r15	      1895	convert.c	FUNCTION_55
0x400234e	              0xc3	                                     ret	      1895	convert.c	FUNCTION_55
0x400234f	              0x90	                                     nop	      1895	convert.c	FUNCTION_55
0x4002350	        0x488b4308	                mov rax, qword [rbx + 8]	      1895	convert.c	FUNCTION_55
0x4002354	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_62
0x4002357	     0xf84f3000000	                            je 0x4002450	       141	strbuf.h	FUNCTION_62
0x400235d	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       141	strbuf.h	FUNCTION_62
0x4002361	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002365	          0x4839c2	                            cmp rdx, rax	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002368	     0xf84e2000000	                            je 0x4002450	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400236e	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       229	strbuf.h	FUNCTION_64
0x4002372	        0x488d4a01	                      lea rcx, [rdx + 1]	       229	strbuf.h	FUNCTION_64
0x4002376	          0x4989ef	                            mov r15, rbp	      1847	convert.c	FUNCTION_55	WHILE_1
0x4002379	        0x48894b10	             mov qword [rbx + 0x10], rcx	       229	strbuf.h	FUNCTION_64
0x400237d	        0xc604103a	              mov byte [rax + rdx], 0x3a	       229	strbuf.h	FUNCTION_64
0x4002381	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       230	strbuf.h	FUNCTION_64
0x4002385	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       230	strbuf.h	FUNCTION_64
0x4002389	        0xc6040200	                 mov byte [rdx + rax], 0	       230	strbuf.h	FUNCTION_64
0x400238d	    0xc74320feffff	     mov dword [rbx + 0x20], 0xfffffffe 	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x4002394	      0xb8feffffff	                     mov eax, 0xfffffffe	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x4002399	        0x498b4d00	                    mov rcx, qword [r13]	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x400239d	      0xe95efdffff	                           jmp 0x4002100	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40023a2	    0x660f1f440000	                    nop word [rax + rax]	      1883	convert.c	FUNCTION_55	WHILE_1	IF_9	IF_11
0x40023a8	        0x4183fe24	                          cmp r14d, 0x24	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023ac	     0xf8505feffff	                           jne 0x40021b7	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023b2	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023b6	      0xba00000000	                              mov edx, 0	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023bb	          0x4889f0	                            mov rax, rsi	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023be	            0xeb0d	                           jmp 0x40023cd	      1858	convert.c	FUNCTION_55	WHILE_1	IF_4	IF_6	CALL_5
0x40023c0	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40023c4	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40023c8	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40023cb	            0x7531	                           jne 0x40023fe	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40023cd	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40023d0	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40023d2	            0x75ec	                           jne 0x40023c0	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40023d4	           0xfb610	                   movzx edx, byte [rax]	      1793	convert.c	FUNCTION_53	FOR_1
0x40023d7	        0x4883c001	                              add rax, 1	      1793	convert.c	FUNCTION_53	FOR_1
0x40023db	            0x84d2	                             test dl, dl	      1793	convert.c	FUNCTION_53	FOR_1
0x40023dd	            0x741f	                            je 0x40023fe	      1793	convert.c	FUNCTION_53	FOR_1
0x40023df	              0x90	                                     nop	      1793	convert.c	FUNCTION_53	FOR_1
0x40023e0	    0xf68200000000	                      test byte [rdx], 1	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x40023e7	            0x7409	                            je 0x40023f2	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x40023e9	          0x803824	                    cmp byte [rax], 0x24	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x40023ec	     0xf85c5fdffff	                           jne 0x40021b7	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x40023f2	        0x4883c001	                              add rax, 1	      1794	convert.c	FUNCTION_53	FOR_1	IF_2	CALL_2
0x40023f6	         0xfb650ff	               movzx edx, byte [rax - 1]	      1793	convert.c	FUNCTION_53	FOR_1
0x40023fa	            0x84d2	                             test dl, dl	      1793	convert.c	FUNCTION_53	FOR_1
0x40023fc	            0x75e2	                           jne 0x40023e0	      1793	convert.c	FUNCTION_53	FOR_1
0x40023fe	      0x48837b0803	                  cmp qword [rbx + 8], 3	       162	strbuf.h	FUNCTION_63	IF_1
0x4002403	            0x7761	                            ja 0x4002466	       162	strbuf.h	FUNCTION_63	IF_1
0x4002405	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_63	CALL_1
0x400240a	            0x31c0	                            xor eax, eax	       163	strbuf.h	FUNCTION_63	CALL_1
0x400240c	      0xe800000000	                          call 0x4002411	       163	strbuf.h	FUNCTION_63	CALL_1
0x4002411	     0xf1f80000000	                         nop dword [rax]	       163	strbuf.h	FUNCTION_63	CALL_1
0x4002418	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       141	strbuf.h	FUNCTION_62
0x400241c	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002420	          0x4839d0	                            cmp rax, rdx	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002423	     0xf8545feffff	                           jne 0x400226e	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002429	      0xe92ffeffff	                           jmp 0x400225d	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400242e	            0x6690	                                     nop	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002430	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       141	strbuf.h	FUNCTION_62
0x4002434	        0x4883e801	                              sub rax, 1	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002438	          0x4839c2	                            cmp rdx, rax	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x400243b	     0xf859dfeffff	                           jne 0x40022de	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002441	      0xe987feffff	                           jmp 0x40022cd	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002446	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       227	strbuf.h	FUNCTION_64	IF_1	CALL_1
0x4002450	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002455	          0x4c89e7	                            mov rdi, r12	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002458	      0xe800000000	                          call 0x400245d	       228	strbuf.h	FUNCTION_64	CALL_2
0x400245d	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002461	      0xe908ffffff	                           jmp 0x400236e	       228	strbuf.h	FUNCTION_64	CALL_2
0x4002466	    0x4881fe000000	                              cmp rsi, 0	       165	strbuf.h	FUNCTION_63	IF_2
0x400246d	    0x48c743100300	               mov qword [rbx + 0x10], 3	       164	strbuf.h	FUNCTION_63
0x4002475	            0x7424	                            je 0x400249b	       165	strbuf.h	FUNCTION_63	IF_2
0x4002477	        0xc6460300	                   mov byte [rsi + 3], 0	       166	strbuf.h	FUNCTION_63	IF_2
0x400247b	      0x4c8b742410	            mov r14, qword [rsp + 0x10] 	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002480	          0x4c89f7	                            mov rdi, r14	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002483	      0xe800000000	                          call 0x4002488	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002488	          0x4c89f6	                            mov rsi, r14	       279	strbuf.h	FUNCTION_65	CALL_2
0x400248b	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x400248e	          0x4c89e7	                            mov rdi, r12	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002491	      0xe800000000	                          call 0x4002496	       279	strbuf.h	FUNCTION_65	CALL_2
0x4002496	      0xe91cfdffff	                           jmp 0x40021b7	       279	strbuf.h	FUNCTION_65	CALL_2
0x400249b	    0x803d00000000	                cmp byte [0x040024a2], 0	       168	strbuf.h	FUNCTION_63	CALL_2
0x40024a2	            0x74d7	                            je 0x400247b	       168	strbuf.h	FUNCTION_63	CALL_2
0x40024a4	      0xe800000000	                          call 0x40024a9	       168	strbuf.h	FUNCTION_63	CALL_2
cascade_free_fn	CALL,3:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	11
0x40003f0	              0x53	                                push rbx	      1745	convert.c	FUNCTION_51
0x40003f1	          0x4889fb	                            mov rbx, rdi	      1745	convert.c	FUNCTION_51
0x40003f4	        0x488b7f08	                mov rdi, qword [rdi + 8]	      1747	convert.c	FUNCTION_51	CALL_1
0x40003f8	          0x488b07	                    mov rax, qword [rdi]	      1957	convert.c	FUNCTION_59	CALL_1
0x40003fb	          0xff5008	                    call qword [rax + 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x40003fe	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1748	convert.c	FUNCTION_51	CALL_2
0x4000402	          0x488b07	                    mov rax, qword [rdi]	      1957	convert.c	FUNCTION_59	CALL_1
0x4000405	          0xff5008	                    call qword [rax + 8]	      1957	convert.c	FUNCTION_59	CALL_1
0x4000408	          0x4889df	                            mov rdi, rbx	      1749	convert.c	FUNCTION_51	CALL_3
0x400040b	              0x5b	                                 pop rbx	      1750	convert.c	FUNCTION_51
0x400040c	      0xe900000000	                           jmp 0x4000411	      1749	convert.c	FUNCTION_51	CALL_3
convert_to_git	CALL,6:FOR,0:ELSE,0:IF,5:functions,0:WHILE,0:DO,0:SWITCH,0	117
0x4003150	            0x4157	                                push r15	      1390	convert.c	FUNCTION_38
0x4003152	            0x4156	                                push r14	      1390	convert.c	FUNCTION_38
0x4003154	          0x4589cf	                           mov r15d, r9d	      1390	convert.c	FUNCTION_38
0x4003157	            0x4155	                                push r13	      1390	convert.c	FUNCTION_38
0x4003159	            0x4154	                                push r12	      1390	convert.c	FUNCTION_38
0x400315b	          0x4989f5	                            mov r13, rsi	      1390	convert.c	FUNCTION_38
0x400315e	              0x55	                                push rbp	      1390	convert.c	FUNCTION_38
0x400315f	              0x53	                                push rbx	      1390	convert.c	FUNCTION_38
0x4003160	          0x4889d5	                            mov rbp, rdx	      1390	convert.c	FUNCTION_38
0x4003163	          0x4989cc	                            mov r12, rcx	      1390	convert.c	FUNCTION_38
0x4003166	          0x4d89c6	                             mov r14, r8	      1390	convert.c	FUNCTION_38
0x4003169	        0x4883ec48	                           sub rsp, 0x48	      1390	convert.c	FUNCTION_38
0x400316d	      0x48897c2408	                mov qword [rsp + 8], rdi	      1390	convert.c	FUNCTION_38
0x4003172	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	      1394	convert.c	FUNCTION_38	CALL_1
0x4003177	    0x64488b042528	                mov rax, qword fs:[0x28]	      1390	convert.c	FUNCTION_38
0x4003180	      0x4889442438	             mov qword [rsp + 0x38], rax	      1390	convert.c	FUNCTION_38
0x4003185	            0x31c0	                            xor eax, eax	      1390	convert.c	FUNCTION_38
0x4003187	      0xe8d4dbffff	                  call sym.convert_attrs	      1394	convert.c	FUNCTION_38	CALL_1
0x400318c	            0x6a00	                                  push 0	      1396	convert.c	FUNCTION_38	CALL_2
0x400318e	            0x6a01	                                  push 1	      1396	convert.c	FUNCTION_38	CALL_2
0x4003190	          0x4d89f0	                             mov r8, r14	      1396	convert.c	FUNCTION_38	CALL_2
0x4003193	      0x4c8b4c2420	              mov r9, qword [rsp + 0x20]	      1396	convert.c	FUNCTION_38	CALL_2
0x4003198	          0x4c89ef	                            mov rdi, r13	      1396	convert.c	FUNCTION_38	CALL_2
0x400319b	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1396	convert.c	FUNCTION_38	CALL_2
0x40031a0	          0x4c89e2	                            mov rdx, r12	      1396	convert.c	FUNCTION_38	CALL_2
0x40031a3	          0x4889ee	                            mov rsi, rbp	      1396	convert.c	FUNCTION_38	CALL_2
0x40031a6	      0xe865e0ffff	                   call sym.apply_filter	      1396	convert.c	FUNCTION_38	CALL_2
0x40031ab	            0x85c0	                           test eax, eax	      1397	convert.c	FUNCTION_38	IF_1
0x40031ad	            0x89c3	                            mov ebx, eax	      1396	convert.c	FUNCTION_38	CALL_2
0x40031af	              0x5f	                                 pop rdi	      1397	convert.c	FUNCTION_38	IF_1
0x40031b0	            0x4158	                                  pop r8	      1397	convert.c	FUNCTION_38	IF_1
0x40031b2	            0x757c	                           jne 0x4003230	      1397	convert.c	FUNCTION_38	IF_1
0x40031b4	      0x488b442410	            mov rax, qword [rsp + 0x10] 	      1397	convert.c	FUNCTION_38	IF_1
0x40031b9	          0x4885c0	                           test rax, rax	      1397	convert.c	FUNCTION_38	IF_1
0x40031bc	            0x740b	                            je 0x40031c9	      1397	convert.c	FUNCTION_38	IF_1
0x40031be	          0x8b7028	            mov esi, dword [rax + 0x28] 	      1397	convert.c	FUNCTION_38	IF_1
0x40031c1	            0x85f6	                           test esi, esi	      1397	convert.c	FUNCTION_38	IF_1
0x40031c3	     0xf85d9000000	                           jne 0x40032a2	      1397	convert.c	FUNCTION_38	IF_1
0x40031c9	          0x4d85f6	                           test r14, r14	      1400	convert.c	FUNCTION_38	IF_2
0x40031cc	       0xf95442407	                    setne byte [rsp + 7]	      1400	convert.c	FUNCTION_38	IF_2
0x40031d1	      0x4c8b442428	              mov r8, qword [rsp + 0x28]	      1405	convert.c	FUNCTION_38	CALL_4
0x40031d6	          0x4589f9	                           mov r9d, r15d	      1405	convert.c	FUNCTION_38	CALL_4
0x40031d9	          0x4c89f1	                            mov rcx, r14	      1405	convert.c	FUNCTION_38	CALL_4
0x40031dc	          0x4c89e2	                            mov rdx, r12	      1405	convert.c	FUNCTION_38	CALL_4
0x40031df	          0x4889ee	                            mov rsi, rbp	      1405	convert.c	FUNCTION_38	CALL_4
0x40031e2	          0x4c89ef	                            mov rdi, r13	      1405	convert.c	FUNCTION_38	CALL_4
0x40031e5	      0xe8c6f2ffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_38	CALL_4
0x40031ea	             0x9c3	                             or ebx, eax	      1406	convert.c	FUNCTION_38	IF_3
0x40031ec	           0xf95c0	                                setne al	      1406	convert.c	FUNCTION_38	IF_3
0x40031ef	        0x22442407	                  and al, byte [rsp + 7]	      1406	convert.c	FUNCTION_38	IF_3
0x40031f3	            0x7553	                           jne 0x4003248	      1406	convert.c	FUNCTION_38	IF_3
0x40031f5	        0x41f6c708	                            test r15b, 8	      1411	convert.c	FUNCTION_38	IF_4
0x40031f9	            0x745f	                            je 0x400325a	      1411	convert.c	FUNCTION_38	IF_4
0x40031fb	        0x8b4c2420	            mov ecx, dword [rsp + 0x20] 	      1418	convert.c	FUNCTION_38	CALL_6
0x40031ff	          0x4c89f2	                            mov rdx, r14	      1418	convert.c	FUNCTION_38	CALL_6
0x4003202	          0x4c89e6	                            mov rsi, r12	      1418	convert.c	FUNCTION_38	CALL_6
0x4003205	          0x4889ef	                            mov rdi, rbp	      1418	convert.c	FUNCTION_38	CALL_6
0x4003208	      0xe883ecffff	           call sym.ident_to_git.isra.14	      1418	convert.c	FUNCTION_38	CALL_6
0x400320d	             0x9d8	                             or eax, ebx	      1418	convert.c	FUNCTION_38	CALL_6
0x400320f	      0x488b542438	            mov rdx, qword [rsp + 0x38] 	      1419	convert.c	FUNCTION_38
0x4003214	    0x644833142528	                xor rdx, qword fs:[0x28]	      1419	convert.c	FUNCTION_38
0x400321d	            0x757e	                           jne 0x400329d	      1419	convert.c	FUNCTION_38
0x400321f	        0x4883c448	                           add rsp, 0x48	      1419	convert.c	FUNCTION_38
0x4003223	              0x5b	                                 pop rbx	      1419	convert.c	FUNCTION_38
0x4003224	              0x5d	                                 pop rbp	      1419	convert.c	FUNCTION_38
0x4003225	            0x415c	                                 pop r12	      1419	convert.c	FUNCTION_38
0x4003227	            0x415d	                                 pop r13	      1419	convert.c	FUNCTION_38
0x4003229	            0x415e	                                 pop r14	      1419	convert.c	FUNCTION_38
0x400322b	            0x415f	                                 pop r15	      1419	convert.c	FUNCTION_38
0x400322d	              0xc3	                                     ret	      1419	convert.c	FUNCTION_38
0x400322e	            0x6690	                                     nop	      1419	convert.c	FUNCTION_38
0x4003230	          0x4d85f6	                           test r14, r14	      1400	convert.c	FUNCTION_38	IF_2
0x4003233	            0x747f	                            je 0x40032b4	      1400	convert.c	FUNCTION_38	IF_2
0x4003235	        0x498b6e10	            mov rbp, qword [r14 + 0x10] 	      1401	convert.c	FUNCTION_38	IF_2
0x4003239	        0x4d8b6608	                mov r12, qword [r14 + 8]	      1402	convert.c	FUNCTION_38	IF_2
0x400323d	      0xc644240701	                   mov byte [rsp + 7], 1	      1400	convert.c	FUNCTION_38	IF_2
0x4003242	            0xeb8d	                           jmp 0x40031d1	      1400	convert.c	FUNCTION_38	IF_2
0x4003244	         0xf1f4000	                         nop dword [rax]	      1400	convert.c	FUNCTION_38	IF_2
0x4003248	        0x41f6c708	                            test r15b, 8	      1411	convert.c	FUNCTION_38	IF_4
0x400324c	        0x498b6e10	            mov rbp, qword [r14 + 0x10] 	      1407	convert.c	FUNCTION_38	IF_3
0x4003250	        0x4d8b6608	                mov r12, qword [r14 + 8]	      1408	convert.c	FUNCTION_38	IF_3
0x4003254	        0x88442407	                  mov byte [rsp + 7], al	      1408	convert.c	FUNCTION_38	IF_3
0x4003258	            0x75a1	                           jne 0x40031fb	      1411	convert.c	FUNCTION_38	IF_4
0x400325a	        0x4883ec08	                              sub rsp, 8	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400325e	          0x4c89e1	                            mov rcx, r12	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003261	          0x4889ea	                            mov rdx, rbp	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003264	            0x4157	                                push r15	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003266	      0x448b4c242c	            mov r9d, dword [rsp + 0x2c] 	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400326b	          0x4d89f0	                             mov r8, r14	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400326e	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003273	          0x4c89ee	                            mov rsi, r13	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x4003276	      0xe875f6ffff	                    call sym.crlf_to_git	      1412	convert.c	FUNCTION_38	IF_4	CALL_5
0x400327b	             0x9c3	                             or ebx, eax	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400327d	              0x5a	                                 pop rdx	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400327e	              0x59	                                 pop rcx	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400327f	     0xf8476ffffff	                            je 0x40031fb	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4003285	      0x807c240700	                   cmp byte [rsp + 7], 0	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x400328a	     0xf846bffffff	                            je 0x40031fb	      1413	convert.c	FUNCTION_38	IF_4	IF_5
0x4003290	        0x498b6e10	            mov rbp, qword [r14 + 0x10] 	      1414	convert.c	FUNCTION_38	IF_4	IF_5
0x4003294	        0x4d8b6608	                mov r12, qword [r14 + 8]	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x4003298	      0xe95effffff	                           jmp 0x40031fb	      1415	convert.c	FUNCTION_38	IF_4	IF_5
0x400329d	      0xe800000000	                          call 0x40032a2	      1419	convert.c	FUNCTION_38
0x40032a2	          0x488b10	                    mov rdx, qword [rax]	      1398	convert.c	FUNCTION_38	CALL_3
0x40032a5	          0x4c89ee	                            mov rsi, r13	      1398	convert.c	FUNCTION_38	CALL_3
0x40032a8	      0xbf00000000	                              mov edi, 0	      1398	convert.c	FUNCTION_38	CALL_3
0x40032ad	            0x31c0	                            xor eax, eax	      1398	convert.c	FUNCTION_38	CALL_3
0x40032af	      0xe800000000	                          call 0x40032b4	      1398	convert.c	FUNCTION_38	CALL_3
0x40032b4	      0x4c8b442428	              mov r8, qword [rsp + 0x28]	      1405	convert.c	FUNCTION_38	CALL_4
0x40032b9	          0x4589f9	                           mov r9d, r15d	      1405	convert.c	FUNCTION_38	CALL_4
0x40032bc	            0x31c9	                            xor ecx, ecx	      1405	convert.c	FUNCTION_38	CALL_4
0x40032be	          0x4c89e2	                            mov rdx, r12	      1405	convert.c	FUNCTION_38	CALL_4
0x40032c1	          0x4889ee	                            mov rsi, rbp	      1405	convert.c	FUNCTION_38	CALL_4
0x40032c4	          0x4c89ef	                            mov rdi, r13	      1405	convert.c	FUNCTION_38	CALL_4
0x40032c7	      0xe8e4f1ffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_38	CALL_4
0x40032cc	      0xc644240700	                   mov byte [rsp + 7], 0	      1400	convert.c	FUNCTION_38	IF_2
0x40032d1	             0x9c3	                             or ebx, eax	      1405	convert.c	FUNCTION_38	CALL_4
0x40032d3	      0xe91dffffff	                           jmp 0x40031f5	      1405	convert.c	FUNCTION_38	CALL_4
ident_free_fn	CALL,2:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	7
0x4000500	              0x53	                                push rbx	      1898	convert.c	FUNCTION_56
0x4000501	          0x4889fb	                            mov rbx, rdi	      1898	convert.c	FUNCTION_56
0x4000504	        0x488d7f08	                      lea rdi, [rdi + 8]	      1900	convert.c	FUNCTION_56	CALL_1
0x4000508	      0xe800000000	                          call 0x400050d	      1900	convert.c	FUNCTION_56	CALL_1
0x400050d	          0x4889df	                            mov rdi, rbx	      1901	convert.c	FUNCTION_56	CALL_2
0x4000510	              0x5b	                                 pop rbx	      1902	convert.c	FUNCTION_56
0x4000511	      0xe900000000	                           jmp 0x4000516	      1901	convert.c	FUNCTION_56	CALL_2
encode_to_git	CALL,16:FOR,0:ELSE,1:IF,7:functions,0:WHILE,0:DO,0:SWITCH,0	285
0x40024b0	            0x4157	                                push r15	       390	convert.c	FUNCTION_15
0x40024b2	            0x4156	                                push r14	       390	convert.c	FUNCTION_15
0x40024b4	            0x4155	                                push r13	       390	convert.c	FUNCTION_15
0x40024b6	            0x4154	                                push r12	       390	convert.c	FUNCTION_15
0x40024b8	              0x55	                                push rbp	       390	convert.c	FUNCTION_15
0x40024b9	              0x53	                                push rbx	       390	convert.c	FUNCTION_15
0x40024ba	        0x4883ec38	                           sub rsp, 0x38	       390	convert.c	FUNCTION_15
0x40024be	    0x64488b042528	                mov rax, qword fs:[0x28]	       390	convert.c	FUNCTION_15
0x40024c7	      0x4889442428	             mov qword [rsp + 0x28], rax	       390	convert.c	FUNCTION_15
0x40024cc	            0x31c0	                            xor eax, eax	       390	convert.c	FUNCTION_15
0x40024ce	          0x4d85c0	                             test r8, r8	       399	convert.c	FUNCTION_15	IF_1
0x40024d1	            0x7419	                            je 0x40024ec	       399	convert.c	FUNCTION_15	IF_1
0x40024d3	          0x4885f6	                           test rsi, rsi	       399	convert.c	FUNCTION_15	IF_1
0x40024d6	          0x4989fe	                            mov r14, rdi	       399	convert.c	FUNCTION_15	IF_1
0x40024d9	          0x4889f5	                            mov rbp, rsi	       399	convert.c	FUNCTION_15	IF_1
0x40024dc	          0x4989d4	                            mov r12, rdx	       399	convert.c	FUNCTION_15	IF_1
0x40024df	          0x4989cf	                            mov r15, rcx	       399	convert.c	FUNCTION_15	IF_1
0x40024e2	          0x4c89c3	                             mov rbx, r8	       399	convert.c	FUNCTION_15	IF_1
0x40024e5	            0x7431	                            je 0x4002518	       399	convert.c	FUNCTION_15	IF_1
0x40024e7	          0x4885d2	                           test rdx, rdx	       399	convert.c	FUNCTION_15	IF_1
0x40024ea	            0x752c	                           jne 0x4002518	       399	convert.c	FUNCTION_15	IF_1
0x40024ec	            0x31c0	                            xor eax, eax	       412	convert.c	FUNCTION_15	IF_3
0x40024ee	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       477	convert.c	FUNCTION_15
0x40024f3	    0x644833342528	                xor rsi, qword fs:[0x28]	       477	convert.c	FUNCTION_15
0x40024fc	     0xf85b6030000	                           jne 0x40028b8	       477	convert.c	FUNCTION_15
0x4002502	        0x4883c438	                           add rsp, 0x38	       477	convert.c	FUNCTION_15
0x4002506	              0x5b	                                 pop rbx	       477	convert.c	FUNCTION_15
0x4002507	              0x5d	                                 pop rbp	       477	convert.c	FUNCTION_15
0x4002508	            0x415c	                                 pop r12	       477	convert.c	FUNCTION_15
0x400250a	            0x415d	                                 pop r13	       477	convert.c	FUNCTION_15
0x400250c	            0x415e	                                 pop r14	       477	convert.c	FUNCTION_15
0x400250e	            0x415f	                                 pop r15	       477	convert.c	FUNCTION_15
0x4002510	              0xc3	                                     ret	       477	convert.c	FUNCTION_15
0x4002511	     0xf1f80000000	                         nop dword [rax]	       477	convert.c	FUNCTION_15
0x4002518	          0x4d85ff	                           test r15, r15	       408	convert.c	FUNCTION_15	IF_2
0x400251b	            0x750a	                           jne 0x4002527	       408	convert.c	FUNCTION_15	IF_2
0x400251d	          0x4885ed	                           test rbp, rbp	       408	convert.c	FUNCTION_15	IF_2
0x4002520	      0xb801000000	                              mov eax, 1	       409	convert.c	FUNCTION_15	IF_2
0x4002525	            0x74c7	                            je 0x40024ee	       408	convert.c	FUNCTION_15	IF_2
0x4002527	        0x4183e110	                           and r9d, 0x10	       393	convert.c	FUNCTION_15
0x400252b	      0xbe00000000	                              mov esi, 0	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4002530	          0x4889df	                            mov rdi, rbx	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4002533	          0x4589cd	                           mov r13d, r9d	       393	convert.c	FUNCTION_15
0x4002536	      0xe800000000	                          call 0x400253b	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x400253b	            0x85c0	                           test eax, eax	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x400253d	     0xf85b5010000	                           jne 0x40026f8	       273	convert.c	FUNCTION_12	IF_1	CALL_1
0x4002543	          0x4d89e0	                             mov r8, r12	       414	convert.c	FUNCTION_15	CALL_2
0x4002546	          0x4889e9	                            mov rcx, rbp	       414	convert.c	FUNCTION_15	CALL_2
0x4002549	          0x4889da	                            mov rdx, rbx	       414	convert.c	FUNCTION_15	CALL_2
0x400254c	          0x4c89f6	                            mov rsi, r14	       414	convert.c	FUNCTION_15	CALL_2
0x400254f	      0xbf00000000	                              mov edi, 0	       414	convert.c	FUNCTION_15	CALL_2
0x4002554	      0xe807e5ffff	                 call sym.trace_encoding	       414	convert.c	FUNCTION_15	CALL_2
0x4002559	      0x4c8d442420	                    lea r8, [rsp + 0x20]	       415	convert.c	FUNCTION_15	CALL_3
0x400255e	          0x4889d9	                            mov rcx, rbx	       415	convert.c	FUNCTION_15	CALL_3
0x4002561	      0xba00000000	                              mov edx, 0	       415	convert.c	FUNCTION_15	CALL_3
0x4002566	          0x4489e6	                           mov esi, r12d	       415	convert.c	FUNCTION_15	CALL_3
0x4002569	          0x4889ef	                            mov rdi, rbp	       415	convert.c	FUNCTION_15	CALL_3
0x400256c	      0xe800000000	                          call 0x4002571	       415	convert.c	FUNCTION_15	CALL_3
0x4002571	          0x4885c0	                           test rax, rax	       417	convert.c	FUNCTION_15	IF_4
0x4002574	      0x4889442408	                mov qword [rsp + 8], rax	       415	convert.c	FUNCTION_15	CALL_3
0x4002579	     0xf84d1020000	                            je 0x4002850	       417	convert.c	FUNCTION_15	IF_4
0x400257f	      0x4c63442420	          movsxd r8, dword [rsp + 0x20] 	       432	convert.c	FUNCTION_15	CALL_7
0x4002584	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       432	convert.c	FUNCTION_15	CALL_7
0x4002589	      0xba00000000	                              mov edx, 0	       432	convert.c	FUNCTION_15	CALL_7
0x400258e	          0x4c89f6	                            mov rsi, r14	       432	convert.c	FUNCTION_15	CALL_7
0x4002591	      0xbf00000000	                              mov edi, 0	       432	convert.c	FUNCTION_15	CALL_7
0x4002596	      0xe8c5e4ffff	                 call sym.trace_encoding	       432	convert.c	FUNCTION_15	CALL_7
0x400259b	          0x4585ed	                         test r13d, r13d	       453	convert.c	FUNCTION_15	IF_6	CALL_8
0x400259e	     0xf842c010000	                            je 0x40026d0	       453	convert.c	FUNCTION_15	IF_6	CALL_8
0x40025a4	    0x4c8b2d000000	            mov r13, qword [0x040025ab] 	       357	convert.c	FUNCTION_14	CALL_1
0x40025ab	          0x4889de	                            mov rsi, rbx	       357	convert.c	FUNCTION_14	CALL_1
0x40025ae	          0x4c89ef	                            mov rdi, r13	       357	convert.c	FUNCTION_14	CALL_1
0x40025b1	      0xe800000000	                          call 0x40025b6	       357	convert.c	FUNCTION_14	CALL_1
0x40025b6	          0x4885c0	                           test rax, rax	       360	convert.c	FUNCTION_14	IF_1
0x40025b9	      0x4889442410	             mov qword [rsp + 0x10], rax	       360	convert.c	FUNCTION_14	IF_1
0x40025be	     0xf840c010000	                            je 0x40026d0	       360	convert.c	FUNCTION_14	IF_1
0x40025c4	          0x4889df	                            mov rdi, rbx	       362	convert.c	FUNCTION_14	CALL_2
0x40025c7	      0xe800000000	                          call 0x40025cc	       362	convert.c	FUNCTION_14	CALL_2
0x40025cc	          0x4c89ef	                            mov rdi, r13	       363	convert.c	FUNCTION_14	CALL_3
0x40025cf	      0x4889442418	             mov qword [rsp + 0x18], rax	       362	convert.c	FUNCTION_14	CALL_2
0x40025d4	      0xe800000000	                          call 0x40025d9	       363	convert.c	FUNCTION_14	CALL_3
0x40025d9	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       364	convert.c	FUNCTION_14
0x40025de	          0x4939d5	                            cmp r13, rdx	       364	convert.c	FUNCTION_14
0x40025e1	            0x7416	                            je 0x40025f9	       364	convert.c	FUNCTION_14
0x40025e3	         0xfb64aff	               movzx ecx, byte [rdx - 1]	       371	convert.c	FUNCTION_14	CALL_4
0x40025e7	          0x80f92c	                            cmp cl, 0x2c	       371	convert.c	FUNCTION_14	CALL_4
0x40025ea	            0x740d	                            je 0x40025f9	       371	convert.c	FUNCTION_14	CALL_4
0x40025ec	    0xf68100000000	                      test byte [rcx], 1	       371	convert.c	FUNCTION_14	CALL_4
0x40025f3	     0xf84d7000000	                            je 0x40026d0	       371	convert.c	FUNCTION_14	CALL_4
0x40025f9	      0x4803542418	             add rdx, qword [rsp + 0x18]	       362	convert.c	FUNCTION_14	CALL_2
0x40025fe	            0x4898	                                    cdqe	       379	convert.c	FUNCTION_14
0x4002600	          0x4901c5	                            add r13, rax	       379	convert.c	FUNCTION_14
0x4002603	          0x4c39ea	                            cmp rdx, r13	       373	convert.c	FUNCTION_14
0x4002606	            0x741b	                            je 0x4002623	       373	convert.c	FUNCTION_14
0x4002608	     0xf83c2000000	                           jae 0x40026d0	       379	convert.c	FUNCTION_14
0x400260e	           0xfb612	                   movzx edx, byte [rdx]	       381	convert.c	FUNCTION_14	CALL_5
0x4002611	    0xf68200000000	                      test byte [rdx], 1	       381	convert.c	FUNCTION_14	CALL_5
0x4002618	            0x7509	                           jne 0x4002623	       381	convert.c	FUNCTION_14	CALL_5
0x400261a	          0x80fa2c	                            cmp dl, 0x2c	       381	convert.c	FUNCTION_14	CALL_5
0x400261d	     0xf85ad000000	                           jne 0x40026d0	       381	convert.c	FUNCTION_14	CALL_5
0x4002623	        0x8b742420	            mov esi, dword [rsp + 0x20] 	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4002627	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x400262c	      0x4c8d442424	                    lea r8, [rsp + 0x24]	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4002631	          0x4889da	                            mov rdx, rbx	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4002634	      0xb900000000	                              mov ecx, 0	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4002639	      0xe800000000	                          call 0x400263e	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x400263e	          0x4989c5	                            mov r13, rax	       457	convert.c	FUNCTION_15	IF_6	CALL_9
0x4002641	    0x48b8ffffffff	                 movabs rax, 0x1ffffffff	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400264b	    0x482305000000	             and rax, qword [0x04002652]	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002652	    0x48ba00000000	                 movabs rdx, 0x100000000	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400265c	          0x4839d0	                            cmp rax, rdx	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400265f	            0x741e	                            je 0x400267f	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002661	          0x4989d8	                             mov r8, rbx	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002664	      0xb900000000	                              mov ecx, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002669	      0xba00000000	                              mov edx, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400266e	      0xbecd010000	                          mov esi, 0x1cd	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002673	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x4002678	            0x31c0	                            xor eax, eax	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400267a	      0xe800000000	                          call 0x400267f	       461	convert.c	FUNCTION_15	IF_6	CALL_10
0x400267f	      0x4c63442424	          movsxd r8, dword [rsp + 0x24] 	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4002684	          0x4c89e9	                            mov rcx, r13	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4002687	          0x4889da	                            mov rdx, rbx	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x400268a	          0x4c89f6	                            mov rsi, r14	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x400268d	      0xbf00000000	                              mov edi, 0	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4002692	      0xe8c9e3ffff	                 call sym.trace_encoding	       462	convert.c	FUNCTION_15	IF_6	CALL_11
0x4002697	          0x4d85ed	                           test r13, r13	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x400269a	     0xf841d020000	                            je 0x40028bd	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026a0	      0x4863442424	         movsxd rax, dword [rsp + 0x24] 	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026a5	          0x4939c4	                            cmp r12, rax	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026a8	     0xf850f020000	                           jne 0x40028bd	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026ae	          0x4c89e2	                            mov rdx, r12	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x40026b1	          0x4c89ee	                            mov rsi, r13	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x40026b4	          0x4889ef	                            mov rdi, rbp	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x40026b7	      0xe800000000	                          call 0x40026bc	       466	convert.c	FUNCTION_15	IF_6	IF_7	CALL_12
0x40026bc	            0x85c0	                           test eax, eax	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026be	     0xf85f9010000	                           jne 0x40028bd	       465	convert.c	FUNCTION_15	IF_6	IF_7
0x40026c4	          0x4c89ef	                            mov rdi, r13	       472	convert.c	FUNCTION_15	IF_6	CALL_15
0x40026c7	      0xe800000000	                          call 0x40026cc	       472	convert.c	FUNCTION_15	IF_6	CALL_15
0x40026cc	         0xf1f4000	                         nop dword [rax]	       472	convert.c	FUNCTION_15	IF_6	CALL_15
0x40026d0	      0x4863542420	         movsxd rdx, dword [rsp + 0x20] 	       475	convert.c	FUNCTION_15	CALL_16
0x40026d5	      0x488b742408	                mov rsi, qword [rsp + 8]	       475	convert.c	FUNCTION_15	CALL_16
0x40026da	          0x4c89ff	                            mov rdi, r15	       475	convert.c	FUNCTION_15	CALL_16
0x40026dd	          0x8d4a01	                      lea ecx, [rdx + 1]	       475	convert.c	FUNCTION_15	CALL_16
0x40026e0	          0x4863c9	                         movsxd rcx, ecx	       475	convert.c	FUNCTION_15	CALL_16
0x40026e3	      0xe800000000	                          call 0x40026e8	       475	convert.c	FUNCTION_15	CALL_16
0x40026e8	      0xb801000000	                              mov eax, 1	       476	convert.c	FUNCTION_15
0x40026ed	      0xe9fcfdffff	                           jmp 0x40024ee	       476	convert.c	FUNCTION_15
0x40026f2	    0x660f1f440000	                    nop word [rax + rax]	       476	convert.c	FUNCTION_15
0x40026f8	          0x4c89e2	                            mov rdx, r12	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x40026fb	          0x4889ee	                            mov rsi, rbp	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x40026fe	          0x4889df	                            mov rdi, rbx	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4002701	      0xe800000000	                          call 0x4002706	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4002706	            0x85c0	                           test eax, eax	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x4002708	     0xf858a000000	                           jne 0x4002798	       277	convert.c	FUNCTION_12	IF_1	IF_2	CALL_2
0x400270e	          0x4c89e2	                            mov rdx, r12	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4002711	          0x4889ee	                            mov rsi, rbp	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4002714	          0x4889df	                            mov rdi, rbx	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4002717	      0xe800000000	                          call 0x400271c	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x400271c	            0x85c0	                           test eax, eax	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x400271e	     0xf841ffeffff	                            je 0x4002543	       302	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_13
0x4002724	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x4002729	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x400272e	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x4002730	      0xe800000000	                          call 0x4002735	        54	gettext.h	FUNCTION_101	CALL_2
0x4002735	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x400273a	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x400273f	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x4002741	          0x4889c5	                            mov rbp, rax	        54	gettext.h	FUNCTION_101	CALL_2
0x4002744	      0xe800000000	                          call 0x4002749	        54	gettext.h	FUNCTION_101	CALL_2
0x4002749	          0x4889df	                            mov rdi, rbx	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x400274c	          0x4989c4	                            mov r12, rax	        54	gettext.h	FUNCTION_101	CALL_2
0x400274f	      0xe800000000	                          call 0x4002754	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4002754	          0x4989c7	                            mov r15, rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4002757	          0x4889c2	                            mov rdx, rax	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x400275a	      0xb800000000	                              mov eax, 0	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x400275f	            0xeb18	                           jmp 0x4002779	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4002761	     0xf1f80000000	                         nop dword [rax]	       311	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_16
0x4002768	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x400276c	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002770	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002773	     0xf8516010000	                           jne 0x400288f	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002779	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x400277c	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x400277e	            0x75e8	                           jne 0x4002768	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002780	          0x4889d1	                            mov rcx, rdx	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002783	          0x4c89f6	                            mov rsi, r14	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002786	          0x4c89e7	                            mov rdi, r12	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002789	            0x31c0	                            xor eax, eax	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x400278b	      0xe800000000	                          call 0x4002790	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002790	            0xeb77	                           jmp 0x4002809	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002792	    0x660f1f440000	                    nop word [rax + rax]	       314	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_19
0x4002798	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x400279d	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x40027a2	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x40027a4	      0xe800000000	                          call 0x40027a9	        54	gettext.h	FUNCTION_101	CALL_2
0x40027a9	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x40027ae	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x40027b3	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x40027b5	          0x4889c5	                            mov rbp, rax	        54	gettext.h	FUNCTION_101	CALL_2
0x40027b8	      0xe800000000	                          call 0x40027bd	        54	gettext.h	FUNCTION_101	CALL_2
0x40027bd	          0x4889df	                            mov rdi, rbx	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x40027c0	          0x4989c4	                            mov r12, rax	        54	gettext.h	FUNCTION_101	CALL_2
0x40027c3	      0xe800000000	                          call 0x40027c8	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x40027c8	          0x4989c7	                            mov r15, rax	       290	convert.c	FUNCTION_12	IF_1	IF_2	CALL_5
0x40027cb	          0x4889c7	                            mov rdi, rax	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027ce	      0xe800000000	                          call 0x40027d3	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027d3	          0x4c89fa	                            mov rdx, r15	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027d6	    0x41c64407fe00	             mov byte [r15 + rax - 2], 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027dc	      0xb800000000	                              mov eax, 0	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027e1	            0xeb12	                           jmp 0x40027f5	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027e3	       0xf1f440000	                   nop dword [rax + rax]	       291	convert.c	FUNCTION_12	IF_1	IF_2	CALL_6
0x40027e8	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40027ec	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40027f0	          0x3a4aff	                  cmp cl, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40027f3	            0x753b	                           jne 0x4002830	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40027f5	           0xfb608	                   movzx ecx, byte [rax]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40027f8	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40027fa	            0x75ec	                           jne 0x40027e8	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40027fc	          0x4c89f6	                            mov rsi, r14	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x40027ff	          0x4c89e7	                            mov rdi, r12	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4002802	            0x31c0	                            xor eax, eax	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4002804	      0xe800000000	                          call 0x4002809	       294	convert.c	FUNCTION_12	IF_1	IF_2	CALL_9
0x4002809	          0x4c89ff	                            mov rdi, r15	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x400280c	      0xe800000000	                          call 0x4002811	       315	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_20
0x4002811	            0x31c0	                            xor eax, eax	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4002813	          0x4585ed	                         test r13d, r13d	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4002816	          0x4889da	                            mov rdx, rbx	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x4002819	          0x4c89f6	                            mov rsi, r14	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x400281c	          0x4889ef	                            mov rdi, rbp	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
0x400281f	     0xf85be000000	                           jne 0x40028e3	       316	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	IF_7
0x4002825	      0xe800000000	                          call 0x400282a	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x400282a	      0xe9bdfcffff	                           jmp 0x40024ec	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x400282f	              0x90	                                     nop	       319	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0x4002830	            0x31d2	                            xor edx, edx	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002832	            0xeb0d	                           jmp 0x4002841	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002834	         0xf1f4000	                         nop dword [rax]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002838	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x400283c	          0x3a42ff	                  cmp al, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x400283f	            0x7547	                           jne 0x4002888	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002841	     0xfb682000000	                   movzx eax, byte [rdx]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002848	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x400284a	            0x75ec	                           jne 0x4002838	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x400284c	            0xebae	                           jmp 0x40027fc	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x400284e	            0x6690	                                     nop	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002850	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x4002852	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x4002857	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x400285c	      0xe800000000	                          call 0x4002861	        54	gettext.h	FUNCTION_101	CALL_2
0x4002861	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_101	CALL_2
0x4002864	            0x31c0	                            xor eax, eax	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4002866	          0x4585ed	                         test r13d, r13d	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4002869	      0xb900000000	                              mov ecx, 0	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x400286e	          0x4889da	                            mov rdx, rbx	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4002871	          0x4c89f6	                            mov rsi, r14	       426	convert.c	FUNCTION_15	IF_4	CALL_5
0x4002874	            0x7568	                           jne 0x40028de	       425	convert.c	FUNCTION_15	IF_4	IF_5
0x4002876	      0xe800000000	                          call 0x400287b	       428	convert.c	FUNCTION_15	IF_4	ELSE_1	CALL_6
0x400287b	            0x31c0	                            xor eax, eax	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x400287d	      0xe96cfcffff	                           jmp 0x40024ee	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4002882	    0x660f1f440000	                    nop word [rax + rax]	       429	convert.c	FUNCTION_15	IF_4	ELSE_1
0x4002888	            0x31d2	                            xor edx, edx	       289	convert.c	FUNCTION_12	IF_1	IF_2
0x400288a	      0xe96dffffff	                           jmp 0x40027fc	       289	convert.c	FUNCTION_12	IF_1	IF_2
0x400288f	            0x31d2	                            xor edx, edx	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002891	            0xeb0e	                           jmp 0x40028a1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002893	       0xf1f440000	                   nop dword [rax + rax]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002898	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x400289c	          0x3a42ff	                  cmp al, byte [rdx - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x400289f	            0x7510	                           jne 0x40028b1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x40028a1	     0xfb682000000	                   movzx eax, byte [rdx]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40028a8	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40028aa	            0x75ec	                           jne 0x4002898	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40028ac	      0xe9cffeffff	                           jmp 0x4002780	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x40028b1	            0x31d2	                            xor edx, edx	       310	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5
0x40028b3	      0xe9c8feffff	                           jmp 0x4002780	       310	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5
0x40028b8	      0xe800000000	                          call 0x40028bd	       477	convert.c	FUNCTION_15
0x40028bd	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x40028c2	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x40028c7	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x40028c9	      0xe800000000	                          call 0x40028ce	        54	gettext.h	FUNCTION_101	CALL_2
0x40028ce	      0xb900000000	                              mov ecx, 0	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028d3	          0x4889c7	                            mov rdi, rax	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028d6	          0x4889da	                            mov rdx, rbx	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028d9	          0x4c89f6	                            mov rsi, r14	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028dc	            0x31c0	                            xor eax, eax	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028de	      0xe800000000	                          call 0x40028e3	       469	convert.c	FUNCTION_15	IF_6	IF_7	CALL_14
0x40028e3	      0xe800000000	                          call 0x40028e8	       317	convert.c	FUNCTION_12	IF_1	ELSE_2	IF_5	CALL_21
convert_to_working_tree_internal	CALL,6:FOR,0:ELSE,0:IF,5:functions,0:WHILE,0:DO,0:SWITCH,0	340
0x4001930	            0x4157	                                push r15	      1442	convert.c	FUNCTION_40
0x4001932	            0x4156	                                push r14	      1442	convert.c	FUNCTION_40
0x4001934	          0x4989f6	                            mov r14, rsi	      1442	convert.c	FUNCTION_40
0x4001937	            0x4155	                                push r13	      1442	convert.c	FUNCTION_40
0x4001939	            0x4154	                                push r12	      1442	convert.c	FUNCTION_40
0x400193b	          0x4889fe	                            mov rsi, rdi	      1446	convert.c	FUNCTION_40	CALL_1
0x400193e	              0x55	                                push rbp	      1442	convert.c	FUNCTION_40
0x400193f	              0x53	                                push rbx	      1442	convert.c	FUNCTION_40
0x4001940	          0x4889cd	                            mov rbp, rcx	      1442	convert.c	FUNCTION_40
0x4001943	          0x4889d3	                            mov rbx, rdx	      1442	convert.c	FUNCTION_40
0x4001946	    0x4881ec980000	                           sub rsp, 0x98	      1442	convert.c	FUNCTION_40
0x400194d	      0x48897c2408	                mov qword [rsp + 8], rdi	      1442	convert.c	FUNCTION_40
0x4001952	      0x488d7c2450	                   lea rdi, [rsp + 0x50]	      1446	convert.c	FUNCTION_40	CALL_1
0x4001957	      0x4c894c2410	              mov qword [rsp + 0x10], r9	      1442	convert.c	FUNCTION_40
0x400195c	    0x64488b042528	                mov rax, qword fs:[0x28]	      1442	convert.c	FUNCTION_40
0x4001965	    0x488984248800	             mov qword [rsp + 0x88], rax	      1442	convert.c	FUNCTION_40
0x400196d	            0x31c0	                            xor eax, eax	      1442	convert.c	FUNCTION_40
0x400196f	      0x448944241c	             mov dword [rsp + 0x1c], r8d	      1442	convert.c	FUNCTION_40
0x4001974	      0xe8e7f3ffff	                  call sym.convert_attrs	      1446	convert.c	FUNCTION_40	CALL_1
0x4001979	      0x448b4c2460	            mov r9d, dword [rsp + 0x60] 	      1141	convert.c	FUNCTION_29	IF_1
0x400197e	          0x4585c9	                           test r9d, r9d	      1141	convert.c	FUNCTION_29	IF_1
0x4001981	     0xf8519020000	                           jne 0x4001ba0	      1141	convert.c	FUNCTION_29	IF_1
0x4001987	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      1458	convert.c	FUNCTION_40	IF_2
0x400198c	          0x4531ff	                          xor r15d, r15d	      1458	convert.c	FUNCTION_40	IF_2
0x400198f	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x4001992	          0x4989c1	                             mov r9, rax	      1458	convert.c	FUNCTION_40	IF_2
0x4001995	     0xf846c030000	                            je 0x4001d07	      1458	convert.c	FUNCTION_40	IF_2
0x400199b	      0x4883781000	               cmp qword [rax + 0x10], 0	      1458	convert.c	FUNCTION_40	IF_2
0x40019a0	     0xf8442040000	                            je 0x4001de8	      1458	convert.c	FUNCTION_40	IF_2
0x40019a6	          0x4885db	                           test rbx, rbx	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x40019a9	     0xf8599000000	                           jne 0x4001a48	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x40019af	          0x4585ff	                         test r15d, r15d	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x40019b2	     0xf8568010000	                           jne 0x4001b20	      1460	convert.c	FUNCTION_40	IF_2	IF_3
0x40019b8	      0x4c8b642468	            mov r12, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x40019bd	          0x4d85e4	                           test r12, r12	       489	convert.c	FUNCTION_16	IF_1
0x40019c0	     0xf84a1040000	                            je 0x4001e67	       489	convert.c	FUNCTION_16	IF_1
0x40019c6	          0x4d85f6	                           test r14, r14	       489	convert.c	FUNCTION_16	IF_1
0x40019c9	     0xf8477010000	                            je 0x4001b46	       489	convert.c	FUNCTION_16	IF_1
0x40019cf	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x40019d2	     0xf856e010000	                           jne 0x4001b46	       489	convert.c	FUNCTION_16	IF_1
0x40019d8	      0x4c8b4c2450	              mov r9, qword [rsp + 0x50]	       489	convert.c	FUNCTION_16	IF_1
0x40019dd	            0x31db	                            xor ebx, ebx	       489	convert.c	FUNCTION_16	IF_1
0x40019df	        0xff742410	                 push qword [rsp + 0x10]	      1472	convert.c	FUNCTION_40	CALL_5
0x40019e3	            0x6a02	                                  push 2	      1472	convert.c	FUNCTION_40	CALL_5
0x40019e5	          0x4c89f6	                            mov rsi, r14	      1472	convert.c	FUNCTION_40	CALL_5
0x40019e8	      0x488b7c2418	            mov rdi, qword [rsp + 0x18] 	      1472	convert.c	FUNCTION_40	CALL_5
0x40019ed	          0x4989e8	                             mov r8, rbp	      1472	convert.c	FUNCTION_40	CALL_5
0x40019f0	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1472	convert.c	FUNCTION_40	CALL_5
0x40019f5	          0x4889da	                            mov rdx, rbx	      1472	convert.c	FUNCTION_40	CALL_5
0x40019f8	      0xe813f8ffff	                   call sym.apply_filter	      1472	convert.c	FUNCTION_40	CALL_5
0x40019fd	            0x85c0	                           test eax, eax	      1474	convert.c	FUNCTION_40	IF_5
0x40019ff	              0x5e	                                 pop rsi	      1474	convert.c	FUNCTION_40	IF_5
0x4001a00	              0x5f	                                 pop rdi	      1474	convert.c	FUNCTION_40	IF_5
0x4001a01	            0x7515	                           jne 0x4001a18	      1474	convert.c	FUNCTION_40	IF_5
0x4001a03	      0x488b542450	            mov rdx, qword [rsp + 0x50] 	      1474	convert.c	FUNCTION_40	IF_5
0x4001a08	          0x4885d2	                           test rdx, rdx	      1474	convert.c	FUNCTION_40	IF_5
0x4001a0b	            0x740b	                            je 0x4001a18	      1474	convert.c	FUNCTION_40	IF_5
0x4001a0d	          0x8b4a28	            mov ecx, dword [rdx + 0x28] 	      1474	convert.c	FUNCTION_40	IF_5
0x4001a10	            0x85c9	                           test ecx, ecx	      1474	convert.c	FUNCTION_40	IF_5
0x4001a12	     0xf8559040000	                           jne 0x4001e71	      1474	convert.c	FUNCTION_40	IF_5
0x4001a18	          0x4409f8	                            or eax, r15d	      1477	convert.c	FUNCTION_40
0x4001a1b	    0x488b8c248800	            mov rcx, qword [rsp + 0x88] 	      1478	convert.c	FUNCTION_40
0x4001a23	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1478	convert.c	FUNCTION_40
0x4001a2c	     0xf8530040000	                           jne 0x4001e62	      1478	convert.c	FUNCTION_40
0x4001a32	    0x4881c4980000	                           add rsp, 0x98	      1478	convert.c	FUNCTION_40
0x4001a39	              0x5b	                                 pop rbx	      1478	convert.c	FUNCTION_40
0x4001a3a	              0x5d	                                 pop rbp	      1478	convert.c	FUNCTION_40
0x4001a3b	            0x415c	                                 pop r12	      1478	convert.c	FUNCTION_40
0x4001a3d	            0x415d	                                 pop r13	      1478	convert.c	FUNCTION_40
0x4001a3f	            0x415e	                                 pop r14	      1478	convert.c	FUNCTION_40
0x4001a41	            0x415f	                                 pop r15	      1478	convert.c	FUNCTION_40
0x4001a43	              0xc3	                                     ret	      1478	convert.c	FUNCTION_40
0x4001a44	         0xf1f4000	                         nop dword [rax]	      1478	convert.c	FUNCTION_40
0x4001a48	      0x448b64245c	           mov r12d, dword [rsp + 0x5c] 	      1459	convert.c	FUNCTION_40	IF_2	CALL_3
0x4001a4d	          0x4489e7	                           mov edi, r12d	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001a50	      0xe8ebf5ffff	                     call sym.output_eol	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001a55	          0x83f801	                              cmp eax, 1	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001a58	     0xf8551ffffff	                           jne 0x40019af	       599	convert.c	FUNCTION_18	IF_1	CALL_1
0x4001a5e	      0x488d542430	                   lea rdx, [rsp + 0x30]	       602	convert.c	FUNCTION_18	CALL_2
0x4001a63	          0x4889de	                            mov rsi, rbx	       602	convert.c	FUNCTION_18	CALL_2
0x4001a66	          0x4c89f7	                            mov rdi, r14	       602	convert.c	FUNCTION_18	CALL_2
0x4001a69	      0xe8b2e9ffff	                   call sym.gather_stats	       602	convert.c	FUNCTION_18	CALL_2
0x4001a6e	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001a73	          0x4489e6	                           mov esi, r12d	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001a76	      0xe825f7ffff	call sym.will_convert_lf_to_crlf.isra.17	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001a7b	            0x85c0	                           test eax, eax	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001a7d	     0xf842cffffff	                            je 0x40019af	       603	convert.c	FUNCTION_18	IF_2	CALL_3
0x4001a83	          0x4531ed	                          xor r13d, r13d	       596	convert.c	FUNCTION_18
0x4001a86	        0x4c3b7510	            cmp r14, qword [rbp + 0x10] 	       607	convert.c	FUNCTION_18	IF_3
0x4001a8a	     0xf84c0030000	                            je 0x4001e50	       607	convert.c	FUNCTION_18	IF_3
0x4001a90	        0x8b742438	            mov esi, dword [rsp + 0x38] 	       610	convert.c	FUNCTION_18	CALL_5
0x4001a94	          0x4889ef	                            mov rdi, rbp	       610	convert.c	FUNCTION_18	CALL_5
0x4001a97	          0x4801de	                            add rsi, rbx	       610	convert.c	FUNCTION_18	CALL_5
0x4001a9a	      0xe800000000	                          call 0x4001a9f	       610	convert.c	FUNCTION_18	CALL_5
0x4001a9f	            0xeb49	                           jmp 0x4001aea	       610	convert.c	FUNCTION_18	CALL_5
0x4001aa1	     0xf1f80000000	                         nop dword [rax]	       610	convert.c	FUNCTION_18	CALL_5
0x4001aa8	          0x4939c6	                            cmp r14, rax	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001aab	            0x730a	                           jae 0x4001ab7	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001aad	        0x8078ff0d	                 cmp byte [rax - 1], 0xd	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001ab1	     0xf8441030000	                            je 0x4001df8	       615	convert.c	FUNCTION_18	FOR_1	IF_5
0x4001ab7	          0x4c89fa	                            mov rdx, r15	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001aba	        0x4983c701	                              add r15, 1	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001abe	          0x4c89f6	                            mov rsi, r14	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001ac1	          0x4c29f2	                            sub rdx, r14	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001ac4	          0x4889ef	                            mov rdi, rbp	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001ac7	          0x4d89fc	                            mov r12, r15	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001aca	      0xe800000000	                          call 0x4001acf	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001acf	          0x4d29f4	                            sub r12, r14	       618	convert.c	FUNCTION_18	FOR_1	ELSE_1	CALL_8
0x4001ad2	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ad7	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001adc	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001adf	          0x4d89fe	                            mov r14, r15	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ae2	      0xe800000000	                          call 0x4001ae7	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ae7	          0x4c29e3	                            sub rbx, r12	       621	convert.c	FUNCTION_18	FOR_1
0x4001aea	          0x4889da	                            mov rdx, rbx	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001aed	      0xbe0a000000	                            mov esi, 0xa	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001af2	          0x4c89f7	                            mov rdi, r14	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001af5	      0xe800000000	                          call 0x4001afa	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001afa	          0x4885c0	                           test rax, rax	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001afd	          0x4989c7	                            mov r15, rax	       612	convert.c	FUNCTION_18	FOR_1	CALL_6
0x4001b00	            0x75a6	                           jne 0x4001aa8	       613	convert.c	FUNCTION_18	FOR_1	IF_4
0x4001b02	          0x4889ef	                            mov rdi, rbp	       624	convert.c	FUNCTION_18	CALL_10
0x4001b05	          0x4889da	                            mov rdx, rbx	       624	convert.c	FUNCTION_18	CALL_10
0x4001b08	          0x4c89f6	                            mov rsi, r14	       624	convert.c	FUNCTION_18	CALL_10
0x4001b0b	      0xe800000000	                          call 0x4001b10	       624	convert.c	FUNCTION_18	CALL_10
0x4001b10	          0x4c89ef	                            mov rdi, r13	       626	convert.c	FUNCTION_18	CALL_11
0x4001b13	      0xe800000000	                          call 0x4001b18	       626	convert.c	FUNCTION_18	CALL_11
0x4001b18	     0xf1f84000000	                   nop dword [rax + rax]	       626	convert.c	FUNCTION_18	CALL_11
0x4001b20	      0x4c8b642468	            mov r12, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x4001b25	        0x4c8b7510	            mov r14, qword [rbp + 0x10] 	      1461	convert.c	FUNCTION_40	IF_2	IF_3
0x4001b29	        0x488b5d08	                mov rbx, qword [rbp + 8]	      1462	convert.c	FUNCTION_40	IF_2	IF_3
0x4001b2d	          0x4d85e4	                           test r12, r12	       489	convert.c	FUNCTION_16	IF_1
0x4001b30	            0x7452	                            je 0x4001b84	       489	convert.c	FUNCTION_16	IF_1
0x4001b32	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x4001b35	            0x7509	                           jne 0x4001b40	       489	convert.c	FUNCTION_16	IF_1
0x4001b37	          0x4d85f6	                           test r14, r14	       489	convert.c	FUNCTION_16	IF_1
0x4001b3a	     0xf8598020000	                           jne 0x4001dd8	       489	convert.c	FUNCTION_16	IF_1
0x4001b40	    0x41bf01000000	                             mov r15d, 1	       489	convert.c	FUNCTION_16	IF_1
0x4001b46	      0x4c8d442430	                    lea r8, [rsp + 0x30]	       492	convert.c	FUNCTION_16	CALL_1
0x4001b4b	      0xb900000000	                              mov ecx, 0	       492	convert.c	FUNCTION_16	CALL_1
0x4001b50	          0x4c89e2	                            mov rdx, r12	       492	convert.c	FUNCTION_16	CALL_1
0x4001b53	            0x89de	                            mov esi, ebx	       492	convert.c	FUNCTION_16	CALL_1
0x4001b55	          0x4c89f7	                            mov rdi, r14	       492	convert.c	FUNCTION_16	CALL_1
0x4001b58	      0xe800000000	                          call 0x4001b5d	       492	convert.c	FUNCTION_16	CALL_1
0x4001b5d	          0x4885c0	                           test rax, rax	       494	convert.c	FUNCTION_16	IF_2
0x4001b60	     0xf84b2020000	                            je 0x4001e18	       494	convert.c	FUNCTION_16	IF_2
0x4001b66	      0x4863542430	         movsxd rdx, dword [rsp + 0x30] 	       500	convert.c	FUNCTION_16	CALL_3
0x4001b6b	          0x4889c6	                            mov rsi, rax	       500	convert.c	FUNCTION_16	CALL_3
0x4001b6e	          0x4889ef	                            mov rdi, rbp	       500	convert.c	FUNCTION_16	CALL_3
0x4001b71	          0x8d4a01	                      lea ecx, [rdx + 1]	       500	convert.c	FUNCTION_16	CALL_3
0x4001b74	          0x4863c9	                         movsxd rcx, ecx	       500	convert.c	FUNCTION_16	CALL_3
0x4001b77	      0xe800000000	                          call 0x4001b7c	       500	convert.c	FUNCTION_16	CALL_3
0x4001b7c	        0x488b5d08	                mov rbx, qword [rbp + 8]	       500	convert.c	FUNCTION_16	CALL_3
0x4001b80	        0x4c8b7510	            mov r14, qword [rbp + 0x10] 	       500	convert.c	FUNCTION_16	CALL_3
0x4001b84	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       500	convert.c	FUNCTION_16	CALL_3
0x4001b89	          0x4989c1	                             mov r9, rax	       500	convert.c	FUNCTION_16	CALL_3
0x4001b8c	    0x41bf01000000	                             mov r15d, 1	       500	convert.c	FUNCTION_16	CALL_3
0x4001b92	      0xe948feffff	                           jmp 0x40019df	       500	convert.c	FUNCTION_16	CALL_3
0x4001b97	    0x660f1f840000	                    nop word [rax + rax]	       500	convert.c	FUNCTION_16	CALL_3
0x4001ba0	          0x4889de	                            mov rsi, rbx	      1144	convert.c	FUNCTION_29	CALL_1
0x4001ba3	          0x4c89f7	                            mov rdi, r14	      1144	convert.c	FUNCTION_29	CALL_1
0x4001ba6	      0xe8e5edffff	                    call sym.count_ident	      1144	convert.c	FUNCTION_29	CALL_1
0x4001bab	          0x4c63e0	                         movsxd r12, eax	      1144	convert.c	FUNCTION_29	CALL_1
0x4001bae	          0x4585e4	                         test r12d, r12d	      1145	convert.c	FUNCTION_29	IF_2
0x4001bb1	     0xf84d0fdffff	                            je 0x4001987	      1145	convert.c	FUNCTION_29	IF_2
0x4001bb7	        0x4c3b7510	            cmp r14, qword [rbp + 0x10] 	      1149	convert.c	FUNCTION_29	IF_3
0x4001bbb	    0x48c744242000	               mov qword [rsp + 0x20], 0	      1138	convert.c	FUNCTION_29
0x4001bc4	     0xf8472020000	                            je 0x4001e3c	      1149	convert.c	FUNCTION_29	IF_3
0x4001bca	      0x488d4c2470	                   lea rcx, [rsp + 0x70]	      1151	convert.c	FUNCTION_29	CALL_3
0x4001bcf	          0x4889de	                            mov rsi, rbx	      1151	convert.c	FUNCTION_29	CALL_3
0x4001bd2	          0x4c89f7	                            mov rdi, r14	      1151	convert.c	FUNCTION_29	CALL_3
0x4001bd5	      0xba00000000	                              mov edx, 0	      1151	convert.c	FUNCTION_29	CALL_3
0x4001bda	      0xe800000000	                          call 0x4001bdf	      1151	convert.c	FUNCTION_29	CALL_3
0x4001bdf	    0x488b05000000	            mov rax, qword [0x04001be6] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001be6	          0x4889ef	                            mov rdi, rbp	      1153	convert.c	FUNCTION_29	CALL_4
0x4001be9	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001bed	        0x488b7018	            mov rsi, qword [rax + 0x18] 	      1153	convert.c	FUNCTION_29	CALL_4
0x4001bf1	        0x4883c603	                              add rsi, 3	      1153	convert.c	FUNCTION_29	CALL_4
0x4001bf5	        0x4c0fafe6	                           imul r12, rsi	      1153	convert.c	FUNCTION_29	CALL_4
0x4001bf9	        0x498d341c	                    lea rsi, [r12 + rbx]	      1153	convert.c	FUNCTION_29	CALL_4
0x4001bfd	      0xe800000000	                          call 0x4001c02	      1153	convert.c	FUNCTION_29	CALL_4
0x4001c02	            0xeb0f	                           jmp 0x4001c13	      1153	convert.c	FUNCTION_29	CALL_4
0x4001c04	         0xf1f4000	                         nop dword [rax]	      1153	convert.c	FUNCTION_29	CALL_4
0x4001c08	            0x3c3a	                            cmp al, 0x3a	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001c0a	     0xf8440010000	                            je 0x4001d50	      1171	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001c10	          0x4d89fe	                            mov r14, r15	      1138	convert.c	FUNCTION_29
0x4001c13	          0x4889da	                            mov rdx, rbx	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001c16	      0xbe24000000	                           mov esi, 0x24	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001c1b	          0x4c89f7	                            mov rdi, r14	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001c1e	      0xe800000000	                          call 0x4001c23	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001c23	          0x4885c0	                           test rax, rax	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4001c26	          0x4989c5	                            mov r13, rax	      1156	convert.c	FUNCTION_29	FOR_1	CALL_5
0x4001c29	     0xf84a1000000	                            je 0x4001cd0	      1157	convert.c	FUNCTION_29	FOR_1	IF_4
0x4001c2f	        0x4c8d7801	                      lea r15, [rax + 1]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c33	          0x4c89f6	                            mov rsi, r14	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c36	          0x4889ef	                            mov rdi, rbp	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c39	          0x4d89fc	                            mov r12, r15	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c3c	        0x4c893c24	                    mov qword [rsp], r15	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c40	          0x4d29f4	                            sub r12, r14	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c43	          0x4c89e2	                            mov rdx, r12	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c46	          0x4c29e3	                            sub rbx, r12	      1160	convert.c	FUNCTION_29	FOR_1
0x4001c49	      0xe800000000	                          call 0x4001c4e	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001c4e	        0x4883fb02	                              cmp rbx, 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c52	            0x76bc	                           jbe 0x4001c10	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c54	      0xba02000000	                              mov edx, 2	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c59	          0x4c89fe	                            mov rsi, r15	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c5c	      0xbf00000000	                              mov edi, 0	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c61	      0xe800000000	                          call 0x4001c66	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c66	            0x85c0	                           test eax, eax	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c68	            0x75a6	                           jne 0x4001c10	      1164	convert.c	FUNCTION_29	FOR_1	IF_5	CALL_7
0x4001c6a	      0x410fb64503	               movzx eax, byte [r13 + 3]	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001c6f	            0x3c24	                            cmp al, 0x24	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001c71	            0x7595	                           jne 0x4001c08	      1168	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001c73	        0x4d8d7d04	                      lea r15, [r13 + 4]	      1169	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001c77	        0x4883eb03	                              sub rbx, 3	      1170	convert.c	FUNCTION_29	FOR_1	IF_6
0x4001c7b	      0xba04000000	                              mov edx, 4	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c80	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c85	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c88	      0xe800000000	                          call 0x4001c8d	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c8d	      0x488d7c2470	                   lea rdi, [rsp + 0x70]	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001c92	      0xe800000000	                          call 0x4001c97	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001c97	          0x4989c4	                            mov r12, rax	      1208	convert.c	FUNCTION_29	FOR_1	CALL_13
0x4001c9a	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001c9d	      0xe800000000	                          call 0x4001ca2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ca2	          0x4c89e6	                            mov rsi, r12	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ca5	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001ca8	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cab	      0xe800000000	                          call 0x4001cb0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cb0	      0xba02000000	                              mov edx, 2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cb5	      0xbe00000000	                              mov esi, 0	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cba	          0x4889ef	                            mov rdi, rbp	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cbd	      0xe800000000	                          call 0x4001cc2	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cc2	      0xe949ffffff	                           jmp 0x4001c10	       279	strbuf.h	FUNCTION_65	CALL_2
0x4001cc7	          0x4d89fe	                            mov r14, r15	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001cca	    0x660f1f440000	                    nop word [rax + rax]	      1159	convert.c	FUNCTION_29	FOR_1	CALL_6
0x4001cd0	          0x4889da	                            mov rdx, rbx	      1211	convert.c	FUNCTION_29	CALL_15
0x4001cd3	          0x4c89f6	                            mov rsi, r14	      1211	convert.c	FUNCTION_29	CALL_15
0x4001cd6	          0x4889ef	                            mov rdi, rbp	      1211	convert.c	FUNCTION_29	CALL_15
0x4001cd9	      0xe800000000	                          call 0x4001cde	      1211	convert.c	FUNCTION_29	CALL_15
0x4001cde	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	      1213	convert.c	FUNCTION_29	CALL_16
0x4001ce3	    0x41bf01000000	                             mov r15d, 1	      1214	convert.c	FUNCTION_29
0x4001ce9	      0xe800000000	                          call 0x4001cee	      1213	convert.c	FUNCTION_29	CALL_16
0x4001cee	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      1458	convert.c	FUNCTION_40	IF_2
0x4001cf3	        0x4c8b7510	            mov r14, qword [rbp + 0x10] 	      1450	convert.c	FUNCTION_40	IF_1
0x4001cf7	        0x488b5d08	                mov rbx, qword [rbp + 8]	      1451	convert.c	FUNCTION_40	IF_1
0x4001cfb	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_40	IF_2
0x4001cfe	          0x4989c1	                             mov r9, rax	      1458	convert.c	FUNCTION_40	IF_2
0x4001d01	     0xf8594fcffff	                           jne 0x400199b	      1458	convert.c	FUNCTION_40	IF_2
0x4001d07	      0x448b44241c	            mov r8d, dword [rsp + 0x1c] 	      1458	convert.c	FUNCTION_40	IF_2
0x4001d0c	          0x4585c0	                           test r8d, r8d	      1458	convert.c	FUNCTION_40	IF_2
0x4001d0f	     0xf8491fcffff	                            je 0x40019a6	      1458	convert.c	FUNCTION_40	IF_2
0x4001d15	      0x4c8b642468	            mov r12, qword [rsp + 0x68] 	      1466	convert.c	FUNCTION_40	CALL_4
0x4001d1a	          0x4d85e4	                           test r12, r12	       489	convert.c	FUNCTION_16	IF_1
0x4001d1d	            0x7414	                            je 0x4001d33	       489	convert.c	FUNCTION_16	IF_1
0x4001d1f	          0x4d85f6	                           test r14, r14	       489	convert.c	FUNCTION_16	IF_1
0x4001d22	     0xf841efeffff	                            je 0x4001b46	       489	convert.c	FUNCTION_16	IF_1
0x4001d28	          0x4885db	                           test rbx, rbx	       489	convert.c	FUNCTION_16	IF_1
0x4001d2b	     0xf8515feffff	                           jne 0x4001b46	       489	convert.c	FUNCTION_16	IF_1
0x4001d31	            0x31db	                            xor ebx, ebx	       489	convert.c	FUNCTION_16	IF_1
0x4001d33	          0x4585ff	                         test r15d, r15d	      1467	convert.c	FUNCTION_40	IF_4
0x4001d36	     0xf84a3fcffff	                            je 0x40019df	      1467	convert.c	FUNCTION_40	IF_4
0x4001d3c	        0x488b5d08	                mov rbx, qword [rbp + 8]	      1467	convert.c	FUNCTION_40	IF_4
0x4001d40	        0x4c8b7510	            mov r14, qword [rbp + 0x10] 	      1467	convert.c	FUNCTION_40	IF_4
0x4001d44	      0xe940feffff	                           jmp 0x4001b89	      1467	convert.c	FUNCTION_40	IF_4
0x4001d49	     0xf1f80000000	                         nop dword [rax]	      1467	convert.c	FUNCTION_40	IF_4
0x4001d50	        0x4d8d5504	                      lea r10, [r13 + 4]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d54	        0x488d53fd	                      lea rdx, [rbx - 3]	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d58	      0xbe24000000	                           mov esi, 0x24	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d5d	          0x4c89d7	                            mov rdi, r10	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d60	      0x4c89542428	             mov qword [rsp + 0x28], r10	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d65	      0xe800000000	                          call 0x4001d6a	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d6a	          0x4885c0	                           test rax, rax	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4001d6d	          0x4989c6	                            mov r14, rax	      1179	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_8
0x4001d70	     0xf8451ffffff	                            je 0x4001cc7	      1180	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_8
0x4001d76	      0x4c8b542428	            mov r10, qword [rsp + 0x28] 	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d7b	          0x4c29f8	                            sub rax, r15	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d7e	      0xbe0a000000	                            mov esi, 0xa	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d83	        0x488d50fd	                      lea rdx, [rax - 3]	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d87	          0x4989c4	                            mov r12, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d8a	          0x4c89d7	                            mov rdi, r10	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d8d	      0xe800000000	                          call 0x4001d92	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d92	          0x4885c0	                           test rax, rax	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d95	     0xf8575feffff	                           jne 0x4001c10	      1185	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x4001d9b	          0x4c89e2	                            mov rdx, r12	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001d9e	        0x498d7d05	                      lea rdi, [r13 + 5]	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001da2	      0xbe20000000	                           mov esi, 0x20	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001da7	        0x4883ea04	                              sub rdx, 4	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001dab	      0xe800000000	                          call 0x4001db0	      1190	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	CALL_10
0x4001db0	          0x4885c0	                           test rax, rax	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001db3	            0x740d	                            je 0x4001dc2	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001db5	        0x498d56ff	                      lea rdx, [r14 - 1]	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001db9	          0x4839d0	                            cmp rax, rdx	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001dbc	     0xf824efeffff	                            jb 0x4001c10	      1191	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7	IF_10
0x4001dc2	        0x4d8d7e01	                      lea r15, [r14 + 1]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dc6	          0x4c89f8	                            mov rax, r15	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dc9	        0x482b0424	                    sub rax, qword [rsp]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dcd	          0x4829c3	                            sub rbx, rax	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dd0	      0xe9a6feffff	                           jmp 0x4001c7b	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dd5	           0xf1f00	                         nop dword [rax]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dd8	            0x31db	                            xor ebx, ebx	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001dda	      0x488b442450	            mov rax, qword [rsp + 0x50] 	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001ddf	      0xe9a5fdffff	                           jmp 0x4001b89	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001de4	         0xf1f4000	                         nop dword [rax]	      1199	convert.c	FUNCTION_29	FOR_1	ELSE_1	IF_7
0x4001de8	      0x4883782000	               cmp qword [rax + 0x20], 0	      1458	convert.c	FUNCTION_40	IF_2
0x4001ded	     0xf85b3fbffff	                           jne 0x40019a6	      1458	convert.c	FUNCTION_40	IF_2
0x4001df3	      0xe90fffffff	                           jmp 0x4001d07	      1458	convert.c	FUNCTION_40	IF_2
0x4001df8	        0x4983c701	                              add r15, 1	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001dfc	          0x4c89f6	                            mov rsi, r14	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001dff	          0x4889ef	                            mov rdi, rbp	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e02	          0x4d89fc	                            mov r12, r15	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e05	          0x4d29f4	                            sub r12, r14	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e08	          0x4d89fe	                            mov r14, r15	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e0b	          0x4c89e2	                            mov rdx, r12	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e0e	      0xe800000000	                          call 0x4001e13	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e13	      0xe9cffcffff	                           jmp 0x4001ae7	       616	convert.c	FUNCTION_18	FOR_1	IF_5	CALL_7
0x4001e18	      0x488b742408	                mov rsi, qword [rsp + 8]	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e1d	          0x4c89e1	                            mov rcx, r12	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e20	      0xba00000000	                              mov edx, 0	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e25	      0xbf00000000	                              mov edi, 0	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e2a	      0xe800000000	                          call 0x4001e2f	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e2f	      0x488b442450	            mov rax, qword [rsp + 0x50] 	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e34	          0x4989c1	                             mov r9, rax	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e37	      0xe9f7feffff	                           jmp 0x4001d33	       495	convert.c	FUNCTION_16	IF_2	CALL_2
0x4001e3c	            0x31f6	                            xor esi, esi	      1150	convert.c	FUNCTION_29	CALL_2
0x4001e3e	          0x4889ef	                            mov rdi, rbp	      1150	convert.c	FUNCTION_29	CALL_2
0x4001e41	      0xe800000000	                          call 0x4001e46	      1150	convert.c	FUNCTION_29	CALL_2
0x4001e46	      0x4889442420	             mov qword [rsp + 0x20], rax	      1150	convert.c	FUNCTION_29	CALL_2
0x4001e4b	      0xe97afdffff	                           jmp 0x4001bca	      1150	convert.c	FUNCTION_29	CALL_2
0x4001e50	            0x31f6	                            xor esi, esi	       608	convert.c	FUNCTION_18	CALL_4
0x4001e52	          0x4889ef	                            mov rdi, rbp	       608	convert.c	FUNCTION_18	CALL_4
0x4001e55	      0xe800000000	                          call 0x4001e5a	       608	convert.c	FUNCTION_18	CALL_4
0x4001e5a	          0x4989c5	                            mov r13, rax	       608	convert.c	FUNCTION_18	CALL_4
0x4001e5d	      0xe92efcffff	                           jmp 0x4001a90	       608	convert.c	FUNCTION_18	CALL_4
0x4001e62	      0xe800000000	                          call 0x4001e67	      1478	convert.c	FUNCTION_40
0x4001e67	      0x4c8b4c2450	              mov r9, qword [rsp + 0x50]	      1478	convert.c	FUNCTION_40
0x4001e6c	      0xe96efbffff	                           jmp 0x40019df	      1478	convert.c	FUNCTION_40
0x4001e71	          0x488b12	                    mov rdx, qword [rdx]	      1475	convert.c	FUNCTION_40	CALL_6
0x4001e74	      0x488b742408	                mov rsi, qword [rsp + 8]	      1475	convert.c	FUNCTION_40	CALL_6
0x4001e79	      0xbf00000000	                              mov edi, 0	      1475	convert.c	FUNCTION_40	CALL_6
0x4001e7e	      0xe800000000	                          call 0x4001e83	      1475	convert.c	FUNCTION_40	CALL_6
get_wt_convert_stats_ascii	CALL,3:FOR,0:ELSE,0:IF,1:functions,0:WHILE,0:DO,0:SWITCH,0	29
0x4002e70	              0x53	                                push rbx	       152	convert.c	FUNCTION_6
0x4002e71	          0x4889fe	                            mov rsi, rdi	       152	convert.c	FUNCTION_6
0x4002e74	            0x31d2	                            xor edx, edx	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002e76	      0xbb00000000	                              mov ebx, 0	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002e7b	        0x4883ec20	                           sub rsp, 0x20	       152	convert.c	FUNCTION_6
0x4002e7f	          0x4889e7	                            mov rdi, rsp	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002e82	    0x48c704240000	                      mov qword [rsp], 0	       154	convert.c	FUNCTION_6
0x4002e8a	    0x48c744240800	                  mov qword [rsp + 8], 0	       154	convert.c	FUNCTION_6
0x4002e93	    0x64488b042528	                mov rax, qword fs:[0x28]	       152	convert.c	FUNCTION_6
0x4002e9c	      0x4889442418	             mov qword [rsp + 0x18], rax	       152	convert.c	FUNCTION_6
0x4002ea1	            0x31c0	                            xor eax, eax	       152	convert.c	FUNCTION_6
0x4002ea3	    0x48c744241000	               mov qword [rsp + 0x10], 0	       154	convert.c	FUNCTION_6
0x4002eac	      0xe800000000	                          call 0x4002eb1	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002eb1	          0x4885c0	                           test rax, rax	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002eb4	            0x7812	                            js 0x4002ec8	       155	convert.c	FUNCTION_6	IF_1	CALL_1
0x4002eb6	      0x488b742408	                mov rsi, qword [rsp + 8]	       156	convert.c	FUNCTION_6	CALL_2
0x4002ebb	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       156	convert.c	FUNCTION_6	CALL_2
0x4002ec0	      0xe88be2ffff	     call sym.gather_convert_stats_ascii	       156	convert.c	FUNCTION_6	CALL_2
0x4002ec5	          0x4889c3	                            mov rbx, rax	       156	convert.c	FUNCTION_6	CALL_2
0x4002ec8	          0x4889e7	                            mov rdi, rsp	       157	convert.c	FUNCTION_6	CALL_3
0x4002ecb	      0xe800000000	                          call 0x4002ed0	       157	convert.c	FUNCTION_6	CALL_3
0x4002ed0	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       159	convert.c	FUNCTION_6
0x4002ed5	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       159	convert.c	FUNCTION_6
0x4002ede	          0x4889d8	                            mov rax, rbx	       159	convert.c	FUNCTION_6
0x4002ee1	            0x7506	                           jne 0x4002ee9	       159	convert.c	FUNCTION_6
0x4002ee3	        0x4883c420	                           add rsp, 0x20	       159	convert.c	FUNCTION_6
0x4002ee7	              0x5b	                                 pop rbx	       159	convert.c	FUNCTION_6
0x4002ee8	              0xc3	                                     ret	       159	convert.c	FUNCTION_6
0x4002ee9	      0xe800000000	                          call 0x4002eee	       159	convert.c	FUNCTION_6
convert_to_working_tree	CALL,1:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	3
0x4003430	          0x4531c9	                            xor r9d, r9d	      1489	convert.c	FUNCTION_42	CALL_1
0x4003433	          0x4531c0	                            xor r8d, r8d	      1489	convert.c	FUNCTION_42	CALL_1
0x4003436	      0xe9f5e4ffff	jmp sym.convert_to_working_tree_internal	      1489	convert.c	FUNCTION_42	CALL_1
lf_to_crlf_free_fn	CALL,1:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	1
0x40003e0	      0xe900000000	                           jmp 0x40003e5	      1653	convert.c	FUNCTION_48	CALL_1
async_query_available_blobs	CALL,14:FOR,0:ELSE,1:IF,6:functions,0:WHILE,1:DO,0:SWITCH,0	106
0x4002ef0	            0x4154	                                push r12	       916	convert.c	FUNCTION_24
0x4002ef2	              0x55	                                push rbp	       916	convert.c	FUNCTION_24
0x4002ef3	              0x53	                                push rbx	       916	convert.c	FUNCTION_24
0x4002ef4	        0x4883ec20	                           sub rsp, 0x20	       916	convert.c	FUNCTION_24
0x4002ef8	    0x64488b042528	                mov rax, qword fs:[0x28]	       916	convert.c	FUNCTION_24
0x4002f01	      0x4889442418	             mov qword [rsp + 0x18], rax	       916	convert.c	FUNCTION_24
0x4002f06	            0x31c0	                            xor eax, eax	       916	convert.c	FUNCTION_24
0x4002f08	    0x8b0500000000	            mov eax, dword [0x04002f0e] 	       923	convert.c	FUNCTION_24	CALL_1
0x4002f0e	    0x48c704240000	                      mov qword [rsp], 0	       921	convert.c	FUNCTION_24
0x4002f16	    0x48c744240800	                  mov qword [rsp + 8], 0	       921	convert.c	FUNCTION_24
0x4002f1f	    0x48c744241000	               mov qword [rsp + 0x10], 0	       921	convert.c	FUNCTION_24
0x4002f28	            0x85c0	                           test eax, eax	       923	convert.c	FUNCTION_24	CALL_1
0x4002f2a	     0xf843e010000	                            je 0x400306e	       923	convert.c	FUNCTION_24	CALL_1
0x4002f30	          0x4989fc	                            mov r12, rdi	       923	convert.c	FUNCTION_24	CALL_1
0x4002f33	          0x4889f5	                            mov rbp, rsi	       923	convert.c	FUNCTION_24	CALL_1
0x4002f36	          0x4889fe	                            mov rsi, rdi	       924	convert.c	FUNCTION_24	CALL_2
0x4002f39	      0xbf00000000	                              mov edi, 0	       924	convert.c	FUNCTION_24	CALL_2
0x4002f3e	      0xe800000000	                          call 0x4002f43	       924	convert.c	FUNCTION_24	CALL_2
0x4002f43	          0x4885c0	                           test rax, rax	       925	convert.c	FUNCTION_24	IF_1
0x4002f46	          0x4889c3	                            mov rbx, rax	       924	convert.c	FUNCTION_24	CALL_2
0x4002f49	     0xf8404010000	                            je 0x4003053	       925	convert.c	FUNCTION_24	IF_1
0x4002f4f	      0xbe01000000	                              mov esi, 1	       931	convert.c	FUNCTION_24	CALL_4
0x4002f54	      0xbf0d000000	                            mov edi, 0xd	       931	convert.c	FUNCTION_24	CALL_4
0x4002f59	      0xe800000000	                          call 0x4002f5e	       931	convert.c	FUNCTION_24	CALL_4
0x4002f5e	          0x8b7b44	            mov edi, dword [rbx + 0x44] 	       933	convert.c	FUNCTION_24	CALL_5
0x4002f61	            0x31c0	                            xor eax, eax	       933	convert.c	FUNCTION_24	CALL_5
0x4002f63	      0xbe00000000	                              mov esi, 0	       933	convert.c	FUNCTION_24	CALL_5
0x4002f68	      0xe800000000	                          call 0x4002f6d	       933	convert.c	FUNCTION_24	CALL_5
0x4002f6d	            0x85c0	                           test eax, eax	       935	convert.c	FUNCTION_24	IF_2
0x4002f6f	            0x7438	                            je 0x4002fa9	       935	convert.c	FUNCTION_24	IF_2
0x4002f71	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_24	CALL_13
0x4002f76	      0xe800000000	                          call 0x4002f7b	       957	convert.c	FUNCTION_24	CALL_13
0x4002f7b	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       960	convert.c	FUNCTION_24	CALL_14
0x4002f80	            0x31d2	                            xor edx, edx	       960	convert.c	FUNCTION_24	CALL_14
0x4002f82	          0x4889de	                            mov rsi, rbx	       960	convert.c	FUNCTION_24	CALL_14
0x4002f85	      0xe866ddffff	     call sym.handle_filter_error.isra.9	       960	convert.c	FUNCTION_24	CALL_14
0x4002f8a	            0x31c0	                            xor eax, eax	       960	convert.c	FUNCTION_24	CALL_14
0x4002f8c	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	       962	convert.c	FUNCTION_24
0x4002f91	    0x6448331c2528	                xor rbx, qword fs:[0x28]	       962	convert.c	FUNCTION_24
0x4002f9a	     0xf85c9000000	                           jne 0x4003069	       962	convert.c	FUNCTION_24
0x4002fa0	        0x4883c420	                           add rsp, 0x20	       962	convert.c	FUNCTION_24
0x4002fa4	              0x5b	                                 pop rbx	       962	convert.c	FUNCTION_24
0x4002fa5	              0x5d	                                 pop rbp	       962	convert.c	FUNCTION_24
0x4002fa6	            0x415c	                                 pop r12	       962	convert.c	FUNCTION_24
0x4002fa8	              0xc3	                                     ret	       962	convert.c	FUNCTION_24
0x4002fa9	          0x8b7b44	            mov edi, dword [rbx + 0x44] 	       938	convert.c	FUNCTION_24	CALL_6
0x4002fac	      0xe800000000	                          call 0x4002fb1	       938	convert.c	FUNCTION_24	CALL_6
0x4002fb1	            0x85c0	                           test eax, eax	       939	convert.c	FUNCTION_24	IF_3
0x4002fb3	            0x75bc	                           jne 0x4002f71	       939	convert.c	FUNCTION_24	IF_3
0x4002fb5	           0xf1f00	                         nop dword [rax]	       939	convert.c	FUNCTION_24	IF_3
0x4002fb8	          0x8b7b48	            mov edi, dword [rbx + 0x48] 	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fbb	            0x31f6	                            xor esi, esi	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fbd	      0xe800000000	                          call 0x4002fc2	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fc2	          0x4885c0	                           test rax, rax	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fc5	            0x743f	                            je 0x4003006	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fc7	      0xba00000000	                              mov edx, 0	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fcc	            0xeb0f	                           jmp 0x4002fdd	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fce	            0x6690	                                     nop	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002fd0	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002fd4	        0x4883c201	                              add rdx, 1	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002fd8	          0x3a48ff	                  cmp cl, byte [rax - 1]	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002fdb	            0x75db	                           jne 0x4002fb8	       488	git-compat-util.h	FUNCTION_78	DO_1
0x4002fdd	           0xfb60a	                   movzx ecx, byte [rdx]	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002fe0	            0x84c9	                             test cl, cl	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002fe2	            0x75ec	                           jne 0x4002fd0	       484	git-compat-util.h	FUNCTION_78	DO_1	IF_1
0x4002fe4	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002fe7	      0xe800000000	                          call 0x4002fec	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002fec	          0x4889ef	                            mov rdi, rbp	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002fef	          0x4889c6	                            mov rsi, rax	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002ff2	      0xe800000000	                          call 0x4002ff7	       945	convert.c	FUNCTION_24	WHILE_1	CALL_10
0x4002ff7	          0x8b7b48	            mov edi, dword [rbx + 0x48] 	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002ffa	            0x31f6	                            xor esi, esi	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4002ffc	      0xe800000000	                          call 0x4003001	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4003001	          0x4885c0	                           test rax, rax	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4003004	            0x75c1	                           jne 0x4002fc7	       942	convert.c	FUNCTION_24	WHILE_1	CALL_7
0x4003006	          0x8b7b48	            mov edi, dword [rbx + 0x48] 	       950	convert.c	FUNCTION_24	CALL_11
0x4003009	          0x4889e6	                            mov rsi, rsp	       950	convert.c	FUNCTION_24	CALL_11
0x400300c	      0xe800000000	                          call 0x4003011	       950	convert.c	FUNCTION_24	CALL_11
0x4003011	            0x85c0	                           test eax, eax	       951	convert.c	FUNCTION_24	IF_5
0x4003013	     0xf8558ffffff	                           jne 0x4002f71	       951	convert.c	FUNCTION_24	IF_5
0x4003019	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       954	convert.c	FUNCTION_24	CALL_12
0x400301e	      0xbf00000000	                              mov edi, 0	       954	convert.c	FUNCTION_24	CALL_12
0x4003023	      0xb908000000	                              mov ecx, 8	       954	convert.c	FUNCTION_24	CALL_12
0x4003028	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       954	convert.c	FUNCTION_24	CALL_12
0x400302a	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_24	CALL_13
0x400302f	        0x400f97c5	                                seta bpl	       954	convert.c	FUNCTION_24	CALL_12
0x4003033	           0xf92c0	                                 setb al	       954	convert.c	FUNCTION_24	CALL_12
0x4003036	            0x29c5	                            sub ebp, eax	       954	convert.c	FUNCTION_24	CALL_12
0x4003038	        0x400fbeed	                          movsx ebp, bpl	       954	convert.c	FUNCTION_24	CALL_12
0x400303c	      0xe800000000	                          call 0x4003041	       957	convert.c	FUNCTION_24	CALL_13
0x4003041	            0x85ed	                           test ebp, ebp	       959	convert.c	FUNCTION_24	IF_6
0x4003043	     0xf8532ffffff	                           jne 0x4002f7b	       959	convert.c	FUNCTION_24	IF_6
0x4003049	      0xb801000000	                              mov eax, 1	       959	convert.c	FUNCTION_24	IF_6
0x400304e	      0xe939ffffff	                           jmp 0x4002f8c	       961	convert.c	FUNCTION_24
0x4003053	          0x4c89e6	                            mov rsi, r12	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x4003056	      0xbf00000000	                              mov edi, 0	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x400305b	            0x31c0	                            xor eax, eax	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x400305d	      0xe800000000	                          call 0x4003062	       926	convert.c	FUNCTION_24	IF_1	CALL_3
0x4003062	            0x31c0	                            xor eax, eax	       928	convert.c	FUNCTION_24	IF_1
0x4003064	      0xe923ffffff	                           jmp 0x4002f8c	       928	convert.c	FUNCTION_24	IF_1
0x4003069	      0xe800000000	                          call 0x400306e	       962	convert.c	FUNCTION_24
0x400306e	      0xb900000000	                              mov ecx, 0	       923	convert.c	FUNCTION_24	CALL_1
0x4003073	      0xba9b030000	                          mov edx, 0x39b	       923	convert.c	FUNCTION_24	CALL_1
0x4003078	      0xbe00000000	                              mov esi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x400307d	      0xbf00000000	                              mov edi, 0	       923	convert.c	FUNCTION_24	CALL_1
0x4003082	      0xe800000000	                          call 0x4003087	       923	convert.c	FUNCTION_24	CALL_1
gather_stats	CALL,1:FOR,1:ELSE,3:IF,6:functions,0:WHILE,0:DO,0:SWITCH,1	60
0x4000420	            0x31c0	                            xor eax, eax	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000422	          0x4885f6	                           test rsi, rsi	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000425	    0x48c702000000	                      mov qword [rdx], 0	        90	string3.h	FUNCTION_106	CALL_6
0x400042c	    0x48c742080000	                  mov qword [rdx + 8], 0	        90	string3.h	FUNCTION_106	CALL_6
0x4000434	    0x48c742100000	               mov qword [rdx + 0x10], 0	        90	string3.h	FUNCTION_106	CALL_6
0x400043c	    0x41b801000000	                              mov r8d, 1	        90	string3.h	FUNCTION_106	CALL_6
0x4000442	            0x7450	                            je 0x4000494	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000444	         0xfb60c07	             movzx ecx, byte [rdi + rax]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x4000448	          0x80f90d	                             cmp cl, 0xd	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x400044b	            0x7469	                            je 0x40004b6	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x400044d	          0x80f90a	                             cmp cl, 0xa	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x4000450	            0x747e	                            je 0x40004d0	        61	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x4000452	          0x80f97f	                            cmp cl, 0x7f	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x4000455	            0x7429	                            je 0x4000480	        65	convert.c	IF_6	FUNCTION_1	FOR_1	IF_4
0x4000457	          0x80f91f	                            cmp cl, 0x1f	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x400045a	            0x7744	                            ja 0x40004a0	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x400045c	          0x80f91b	                            cmp cl, 0x1b	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x400045f	            0x771f	                            ja 0x4000480	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000461	          0x4d89c1	                              mov r9, r8	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000464	          0x49d3e1	                              shl r9, cl	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000467	    0x41f7c1001300	                     test r9d, 0x8001300	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x400046e	            0x7530	                           jne 0x40004a0	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000470	            0x84c9	                             test cl, cl	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000472	            0x750c	                           jne 0x4000480	        68	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5
0x4000474	          0x830201	                      add dword [rdx], 1	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000477	    0x660f1f840000	                    nop word [rax + rax]	        75	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000480	        0x4883c001	                              add rax, 1	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000484	        0x83421401	               add dword [rdx + 0x14], 1	        78	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_2	IF_5	SWITCH_1
0x4000488	          0x4839c6	                            cmp rsi, rax	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400048b	            0x77b7	                            ja 0x4000444	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x400048d	      0x807c37ff1a	         cmp byte [rdi + rsi - 1], 0x1a 	        86	convert.c	IF_6	FUNCTION_1
0x4000492	            0x744c	                            je 0x40004e0	        86	convert.c	IF_6	FUNCTION_1
0x4000494	            0xf3c3	                                     ret	        86	convert.c	IF_6	FUNCTION_1
0x4000496	    0x662e0f1f8400	                 nop word cs:[rax + rax]	        86	convert.c	IF_6	FUNCTION_1
0x40004a0	        0x83421001	               add dword [rdx + 0x10], 1	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x40004a4	        0x4883c001	                              add rax, 1	        82	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_3
0x40004a8	          0x4839c6	                            cmp rsi, rax	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x40004ab	            0x76e0	                           jbe 0x400048d	        51	convert.c	IF_6	FUNCTION_1	FOR_1
0x40004ad	         0xfb60c07	             movzx ecx, byte [rdi + rax]	        52	convert.c	IF_6	FUNCTION_1	FOR_1
0x40004b1	          0x80f90d	                             cmp cl, 0xd	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x40004b4	            0x7597	                           jne 0x400044d	        53	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1
0x40004b6	        0x488d4801	                      lea rcx, [rax + 1]	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004ba	          0x4839ce	                            cmp rsi, rcx	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004bd	            0x7607	                           jbe 0x40004c6	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004bf	      0x807c07010a	          cmp byte [rdi + rax + 1], 0xa 	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004c4	            0x7422	                            je 0x40004e8	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004c6	        0x83420401	                  add dword [rdx + 4], 1	        58	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	ELSE_1
0x40004ca	          0x4889c8	                            mov rax, rcx	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004cd	            0xebd9	                           jmp 0x40004a8	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004cf	              0x90	                                     nop	        54	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004d0	        0x83420801	                  add dword [rdx + 8], 1	        62	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40004d4	        0x4883c001	                              add rax, 1	        63	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40004d8	            0xebce	                           jmp 0x40004a8	        63	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40004da	    0x660f1f440000	                    nop word [rax + rax]	        63	convert.c	IF_6	FUNCTION_1	FOR_1	ELSE_1	IF_3
0x40004e0	        0x836a1401	               sub dword [rdx + 0x14], 1	        87	convert.c	FUNCTION_1
0x40004e4	              0xc3	                                     ret	        88	convert.c	FUNCTION_1
0x40004e5	           0xf1f00	                         nop dword [rax]	        88	convert.c	FUNCTION_1
0x40004e8	        0x83420c01	                add dword [rdx + 0xc], 1	        55	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004ec	        0x4883c002	                              add rax, 2	        56	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
0x40004f0	            0xebb6	                           jmp 0x40004a8	        56	convert.c	IF_6	FUNCTION_1	FOR_1	IF_1	IF_2
ident_drain	CALL,2:FOR,0:ELSE,0:IF,3:functions,0:WHILE,0:DO,0:SWITCH,0	36
0x4000bf0	            0x4155	                                push r13	      1801	convert.c	FUNCTION_54
0x4000bf2	            0x4154	                                push r12	      1801	convert.c	FUNCTION_54
0x4000bf4	              0x55	                                push rbp	      1801	convert.c	FUNCTION_54
0x4000bf5	              0x53	                                push rbx	      1801	convert.c	FUNCTION_54
0x4000bf6	          0x4889fd	                            mov rbp, rdi	      1801	convert.c	FUNCTION_54
0x4000bf9	        0x4883ec08	                              sub rsp, 8	      1801	convert.c	FUNCTION_54
0x4000bfd	        0x488b4710	            mov rax, qword [rdi + 0x10] 	      1802	convert.c	FUNCTION_54
0x4000c01	          0x488b1a	                    mov rbx, qword [rdx]	      1804	convert.c	FUNCTION_54	IF_1
0x4000c04	          0x4839d8	                            cmp rax, rbx	      1804	convert.c	FUNCTION_54	IF_1
0x4000c07	        0x480f46d8	                         cmovbe rbx, rax	      1804	convert.c	FUNCTION_54	IF_1
0x4000c0b	          0x4885db	                           test rbx, rbx	      1806	convert.c	FUNCTION_54	IF_2
0x4000c0e	            0x7520	                           jne 0x4000c30	      1806	convert.c	FUNCTION_54	IF_2
0x4000c10	          0x4885c0	                           test rax, rax	      1812	convert.c	FUNCTION_54	IF_3
0x4000c13	            0x7507	                           jne 0x4000c1c	      1812	convert.c	FUNCTION_54	IF_3
0x4000c15	    0xc74520000000	               mov dword [rbp + 0x20], 0	      1813	convert.c	FUNCTION_54	IF_3
0x4000c1c	        0x4883c408	                              add rsp, 8	      1814	convert.c	FUNCTION_54
0x4000c20	              0x5b	                                 pop rbx	      1814	convert.c	FUNCTION_54
0x4000c21	              0x5d	                                 pop rbp	      1814	convert.c	FUNCTION_54
0x4000c22	            0x415c	                                 pop r12	      1814	convert.c	FUNCTION_54
0x4000c24	            0x415d	                                 pop r13	      1814	convert.c	FUNCTION_54
0x4000c26	              0xc3	                                     ret	      1814	convert.c	FUNCTION_54
0x4000c27	    0x660f1f840000	                    nop word [rax + rax]	      1814	convert.c	FUNCTION_54
0x4000c30	          0x488b3e	                    mov rdi, qword [rsi]	        53	string3.h	FUNCTION_103	CALL_3
0x4000c33	          0x4989f5	                            mov r13, rsi	        53	string3.h	FUNCTION_103	CALL_3
0x4000c36	        0x488b7518	            mov rsi, qword [rbp + 0x18] 	        53	string3.h	FUNCTION_103	CALL_3
0x4000c3a	          0x4989d4	                            mov r12, rdx	        53	string3.h	FUNCTION_103	CALL_3
0x4000c3d	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_103	CALL_3
0x4000c40	      0xe800000000	                          call 0x4000c45	        53	string3.h	FUNCTION_103	CALL_3
0x4000c45	        0x488d7d08	                      lea rdi, [rbp + 8]	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4000c49	          0x4889da	                            mov rdx, rbx	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4000c4c	            0x31f6	                            xor esi, esi	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4000c4e	      0xe800000000	                          call 0x4000c53	      1808	convert.c	FUNCTION_54	IF_2	CALL_2
0x4000c53	        0x49015d00	                    add qword [r13], rbx	      1809	convert.c	FUNCTION_54	IF_2
0x4000c57	        0x49291c24	                    sub qword [r12], rbx	      1810	convert.c	FUNCTION_54	IF_2
0x4000c5b	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      1810	convert.c	FUNCTION_54	IF_2
0x4000c5f	            0xebaf	                           jmp 0x4000c10	      1810	convert.c	FUNCTION_54	IF_2
read_convert_config	CALL,12:FOR,1:ELSE,0:IF,7:functions,0:WHILE,0:DO,0:SWITCH,0	116
0x4000520	            0x4157	                                push r15	      1001	convert.c	FUNCTION_26
0x4000522	            0x4156	                                push r14	      1001	convert.c	FUNCTION_26
0x4000524	          0x4989f7	                            mov r15, rsi	      1001	convert.c	FUNCTION_26
0x4000527	            0x4155	                                push r13	      1001	convert.c	FUNCTION_26
0x4000529	            0x4154	                                push r12	      1001	convert.c	FUNCTION_26
0x400052b	      0xbe00000000	                              mov esi, 0	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000530	              0x55	                                push rbp	      1001	convert.c	FUNCTION_26
0x4000531	              0x53	                                push rbx	      1001	convert.c	FUNCTION_26
0x4000532	          0x4989fe	                            mov r14, rdi	      1001	convert.c	FUNCTION_26
0x4000535	        0x4883ec28	                           sub rsp, 0x28	      1001	convert.c	FUNCTION_26
0x4000539	      0x4c8d442408	                       lea r8, [rsp + 8]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400053e	      0x488d4c2404	                      lea rcx, [rsp + 4]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000543	      0x488d542410	                   lea rdx, [rsp + 0x10]	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000548	    0x64488b042528	                mov rax, qword fs:[0x28]	      1001	convert.c	FUNCTION_26
0x4000551	      0x4889442418	             mov qword [rsp + 0x18], rax	      1001	convert.c	FUNCTION_26
0x4000556	            0x31c0	                            xor eax, eax	      1001	convert.c	FUNCTION_26
0x4000558	      0xe800000000	                          call 0x400055d	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400055d	            0x85c0	                           test eax, eax	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400055f	     0xf88e2000000	                            js 0x4000647	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000565	      0x4c8b6c2410	            mov r13, qword [rsp + 0x10] 	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400056a	          0x4d85ed	                           test r13, r13	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x400056d	     0xf84d4000000	                            je 0x4000647	      1010	convert.c	FUNCTION_26	IF_1	CALL_1
0x4000573	    0x488b1d000000	            mov rbx, qword [0x0400057a] 	      1012	convert.c	FUNCTION_26	FOR_1
0x400057a	          0x4885db	                           test rbx, rbx	      1012	convert.c	FUNCTION_26	FOR_1
0x400057d	            0x742f	                            je 0x40005ae	      1012	convert.c	FUNCTION_26	FOR_1
0x400057f	      0x4c63642404	            movsxd r12, dword [rsp + 4] 	      1012	convert.c	FUNCTION_26	FOR_1
0x4000584	         0xf1f4000	                         nop dword [rax]	      1012	convert.c	FUNCTION_26	FOR_1
0x4000588	          0x488b2b	                    mov rbp, qword [rbx]	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400058b	          0x4c89e2	                            mov rdx, r12	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400058e	          0x4c89ee	                            mov rsi, r13	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000591	          0x4889ef	                            mov rdi, rbp	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000594	      0xe800000000	                          call 0x4000599	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x4000599	            0x85c0	                           test eax, eax	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400059b	            0x7508	                           jne 0x40005a5	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x400059d	    0x42807c250000	                 cmp byte [rbp + r12], 0	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40005a3	            0x7442	                            je 0x40005e7	      1013	convert.c	FUNCTION_26	FOR_1	IF_2	CALL_2
0x40005a5	        0x488b5b08	                mov rbx, qword [rbx + 8]	      1012	convert.c	FUNCTION_26	FOR_1
0x40005a9	          0x4885db	                           test rbx, rbx	      1012	convert.c	FUNCTION_26	FOR_1
0x40005ac	            0x75da	                           jne 0x4000588	      1012	convert.c	FUNCTION_26	FOR_1
0x40005ae	      0xbe30000000	                           mov esi, 0x30	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x40005b3	      0xbf01000000	                              mov edi, 1	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x40005b8	      0xe800000000	                          call 0x40005bd	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x40005bd	      0x4863742404	            movsxd rsi, dword [rsp + 4] 	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40005c2	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40005c7	          0x4889c3	                            mov rbx, rax	      1016	convert.c	FUNCTION_26	IF_3	CALL_3
0x40005ca	      0xe800000000	                          call 0x40005cf	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40005cf	          0x488903	                    mov qword [rbx], rax	      1017	convert.c	FUNCTION_26	IF_3	CALL_4
0x40005d2	    0x488b05000000	            mov rax, qword [0x040005d9] 	      1018	convert.c	FUNCTION_26	IF_3
0x40005d9	          0x488918	                    mov qword [rax], rbx	      1018	convert.c	FUNCTION_26	IF_3
0x40005dc	        0x488d4308	                      lea rax, [rbx + 8]	      1019	convert.c	FUNCTION_26	IF_3
0x40005e0	    0x488905000000	            mov qword [0x040005e7], rax 	      1019	convert.c	FUNCTION_26	IF_3
0x40005e7	      0x488b442408	                mov rax, qword [rsp + 8]	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40005ec	      0xbe00000000	                              mov esi, 0	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40005f1	      0xb907000000	                              mov ecx, 7	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40005f6	          0x4889c7	                            mov rdi, rax	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40005f9	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x40005fb	     0xf8497000000	                            je 0x4000698	      1031	convert.c	FUNCTION_26	IF_4	CALL_5
0x4000601	      0xbe00000000	                              mov esi, 0	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000606	      0xb906000000	                              mov ecx, 6	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400060b	          0x4889c7	                            mov rdi, rax	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x400060e	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000610	            0x746e	                            je 0x4000680	      1034	convert.c	FUNCTION_26	IF_5	CALL_7
0x4000612	      0xbe00000000	                              mov esi, 0	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000617	      0xb908000000	                              mov ecx, 8	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400061c	          0x4889c7	                            mov rdi, rax	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x400061f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000621	     0xf8484000000	                            je 0x40006ab	      1037	convert.c	FUNCTION_26	IF_6	CALL_9
0x4000627	          0x4889c7	                            mov rdi, rax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400062a	      0xbe00000000	                              mov esi, 0	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400062f	      0xb909000000	                              mov ecx, 9	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000634	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000636	        0x400f97c5	                                seta bpl	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400063a	           0xf92c0	                                 setb al	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400063d	            0x29c5	                            sub ebp, eax	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x400063f	        0x400fbeed	                          movsx ebp, bpl	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000643	            0x85ed	                           test ebp, ebp	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000645	            0x7429	                            je 0x4000670	      1040	convert.c	FUNCTION_26	IF_7	CALL_11
0x4000647	            0x31ed	                            xor ebp, ebp	      1011	convert.c	FUNCTION_26	IF_1
0x4000649	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	      1046	convert.c	FUNCTION_26
0x400064e	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1046	convert.c	FUNCTION_26
0x4000657	            0x89e8	                            mov eax, ebp	      1046	convert.c	FUNCTION_26
0x4000659	            0x7563	                           jne 0x40006be	      1046	convert.c	FUNCTION_26
0x400065b	        0x4883c428	                           add rsp, 0x28	      1046	convert.c	FUNCTION_26
0x400065f	              0x5b	                                 pop rbx	      1046	convert.c	FUNCTION_26
0x4000660	              0x5d	                                 pop rbp	      1046	convert.c	FUNCTION_26
0x4000661	            0x415c	                                 pop r12	      1046	convert.c	FUNCTION_26
0x4000663	            0x415d	                                 pop r13	      1046	convert.c	FUNCTION_26
0x4000665	            0x415e	                                 pop r14	      1046	convert.c	FUNCTION_26
0x4000667	            0x415f	                                 pop r15	      1046	convert.c	FUNCTION_26
0x4000669	              0xc3	                                     ret	      1046	convert.c	FUNCTION_26
0x400066a	    0x660f1f440000	                    nop word [rax + rax]	      1046	convert.c	FUNCTION_26
0x4000670	          0x4c89fe	                            mov rsi, r15	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4000673	          0x4c89f7	                            mov rdi, r14	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x4000676	      0xe800000000	                          call 0x400067b	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400067b	          0x894328	             mov dword [rbx + 0x28], eax	      1041	convert.c	FUNCTION_26	IF_7	CALL_12
0x400067e	            0xebc9	                           jmp 0x4000649	      1042	convert.c	FUNCTION_26	IF_7
0x4000680	        0x488d7b18	                   lea rdi, [rbx + 0x18]	      1035	convert.c	FUNCTION_26	CALL_8
0x4000684	          0x4c89fa	                            mov rdx, r15	      1035	convert.c	FUNCTION_26	CALL_8
0x4000687	          0x4c89f6	                            mov rsi, r14	      1035	convert.c	FUNCTION_26	CALL_8
0x400068a	      0xe800000000	                          call 0x400068f	      1035	convert.c	FUNCTION_26	CALL_8
0x400068f	            0x89c5	                            mov ebp, eax	      1035	convert.c	FUNCTION_26	CALL_8
0x4000691	            0xebb6	                           jmp 0x4000649	      1035	convert.c	FUNCTION_26	CALL_8
0x4000693	       0xf1f440000	                   nop dword [rax + rax]	      1035	convert.c	FUNCTION_26	CALL_8
0x4000698	        0x488d7b10	                   lea rdi, [rbx + 0x10]	      1032	convert.c	FUNCTION_26	CALL_6
0x400069c	          0x4c89fa	                            mov rdx, r15	      1032	convert.c	FUNCTION_26	CALL_6
0x400069f	          0x4c89f6	                            mov rsi, r14	      1032	convert.c	FUNCTION_26	CALL_6
0x40006a2	      0xe800000000	                          call 0x40006a7	      1032	convert.c	FUNCTION_26	CALL_6
0x40006a7	            0x89c5	                            mov ebp, eax	      1032	convert.c	FUNCTION_26	CALL_6
0x40006a9	            0xeb9e	                           jmp 0x4000649	      1032	convert.c	FUNCTION_26	CALL_6
0x40006ab	        0x488d7b20	                   lea rdi, [rbx + 0x20]	      1038	convert.c	FUNCTION_26	CALL_10
0x40006af	          0x4c89fa	                            mov rdx, r15	      1038	convert.c	FUNCTION_26	CALL_10
0x40006b2	          0x4c89f6	                            mov rsi, r14	      1038	convert.c	FUNCTION_26	CALL_10
0x40006b5	      0xe800000000	                          call 0x40006ba	      1038	convert.c	FUNCTION_26	CALL_10
0x40006ba	            0x89c5	                            mov ebp, eax	      1038	convert.c	FUNCTION_26	CALL_10
0x40006bc	            0xeb8b	                           jmp 0x4000649	      1038	convert.c	FUNCTION_26	CALL_10
0x40006be	      0xe800000000	                          call 0x40006c3	      1046	convert.c	FUNCTION_26
get_cached_convert_stats_ascii	CALL,3:FOR,0:ELSE,0:IF,0:functions,0:WHILE,0:DO,0:SWITCH,0	24
0x4002e10	              0x55	                                push rbp	       142	convert.c	FUNCTION_5
0x4002e11	              0x53	                                push rbx	       142	convert.c	FUNCTION_5
0x4002e12	        0x4883ec18	                           sub rsp, 0x18	       142	convert.c	FUNCTION_5
0x4002e16	          0x4889e2	                            mov rdx, rsp	       145	convert.c	FUNCTION_5	CALL_1
0x4002e19	    0x64488b042528	                mov rax, qword fs:[0x28]	       142	convert.c	FUNCTION_5
0x4002e22	      0x4889442408	                mov qword [rsp + 8], rax	       142	convert.c	FUNCTION_5
0x4002e27	            0x31c0	                            xor eax, eax	       142	convert.c	FUNCTION_5
0x4002e29	      0xe800000000	                          call 0x4002e2e	       145	convert.c	FUNCTION_5	CALL_1
0x4002e2e	        0x488b3424	                    mov rsi, qword [rsp]	       146	convert.c	FUNCTION_5	CALL_2
0x4002e32	          0x4889c3	                            mov rbx, rax	       145	convert.c	FUNCTION_5	CALL_1
0x4002e35	          0x4889c7	                            mov rdi, rax	       146	convert.c	FUNCTION_5	CALL_2
0x4002e38	      0xe813e3ffff	     call sym.gather_convert_stats_ascii	       146	convert.c	FUNCTION_5	CALL_2
0x4002e3d	          0x4889df	                            mov rdi, rbx	       147	convert.c	FUNCTION_5	CALL_3
0x4002e40	          0x4889c5	                            mov rbp, rax	       146	convert.c	FUNCTION_5	CALL_2
0x4002e43	      0xe800000000	                          call 0x4002e48	       147	convert.c	FUNCTION_5	CALL_3
0x4002e48	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       149	convert.c	FUNCTION_5
0x4002e4d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       149	convert.c	FUNCTION_5
0x4002e56	            0x750a	                           jne 0x4002e62	       149	convert.c	FUNCTION_5
0x4002e58	        0x4883c418	                           add rsp, 0x18	       149	convert.c	FUNCTION_5
0x4002e5c	          0x4889e8	                            mov rax, rbp	       149	convert.c	FUNCTION_5
0x4002e5f	              0x5b	                                 pop rbx	       149	convert.c	FUNCTION_5
0x4002e60	              0x5d	                                 pop rbp	       149	convert.c	FUNCTION_5
0x4002e61	              0xc3	                                     ret	       149	convert.c	FUNCTION_5
0x4002e62	      0xe800000000	                          call 0x4002e67	       149	convert.c	FUNCTION_5
get_stream_filter	CALL,6:FOR,0:ELSE,1:IF,5:functions,0:WHILE,0:DO,0:SWITCH,0	96
0x40034d0	              0x55	                                push rbp	      1930	convert.c	FUNCTION_58
0x40034d1	              0x53	                                push rbx	      1930	convert.c	FUNCTION_58
0x40034d2	          0x4889f5	                            mov rbp, rsi	      1930	convert.c	FUNCTION_58
0x40034d5	          0x4889fe	                            mov rsi, rdi	      1934	convert.c	FUNCTION_58	CALL_1
0x40034d8	        0x4883ec38	                           sub rsp, 0x38	      1930	convert.c	FUNCTION_58
0x40034dc	          0x4889e7	                            mov rdi, rsp	      1934	convert.c	FUNCTION_58	CALL_1
0x40034df	    0x64488b042528	                mov rax, qword fs:[0x28]	      1930	convert.c	FUNCTION_58
0x40034e8	      0x4889442428	             mov qword [rsp + 0x28], rax	      1930	convert.c	FUNCTION_58
0x40034ed	            0x31c0	                            xor eax, eax	      1930	convert.c	FUNCTION_58
0x40034ef	      0xe86cd8ffff	                  call sym.convert_attrs	      1934	convert.c	FUNCTION_58	CALL_1
0x40034f4	        0x488b1424	                    mov rdx, qword [rsp]	      1935	convert.c	FUNCTION_58	IF_1
0x40034f8	          0x4885d2	                           test rdx, rdx	      1935	convert.c	FUNCTION_58	IF_1
0x40034fb	            0x7417	                            je 0x4003514	      1935	convert.c	FUNCTION_58	IF_1
0x40034fd	            0x31db	                            xor ebx, ebx	      1936	convert.c	FUNCTION_58	IF_1
0x40034ff	      0x48837a2000	               cmp qword [rdx + 0x20], 0	      1935	convert.c	FUNCTION_58	IF_1
0x4003504	            0x754a	                           jne 0x4003550	      1935	convert.c	FUNCTION_58	IF_1
0x4003506	      0x48837a1000	               cmp qword [rdx + 0x10], 0	      1935	convert.c	FUNCTION_58	IF_1
0x400350b	            0x7543	                           jne 0x4003550	      1935	convert.c	FUNCTION_58	IF_1
0x400350d	      0x48837a1800	               cmp qword [rdx + 0x18], 0	      1935	convert.c	FUNCTION_58	IF_1
0x4003512	            0x753c	                           jne 0x4003550	      1935	convert.c	FUNCTION_58	IF_1
0x4003514	            0x31db	                            xor ebx, ebx	      1936	convert.c	FUNCTION_58	IF_1
0x4003516	    0x48837c241800	               cmp qword [rsp + 0x18], 0	      1938	convert.c	FUNCTION_58	IF_2
0x400351c	            0x7532	                           jne 0x4003550	      1938	convert.c	FUNCTION_58	IF_2
0x400351e	        0x8b7c240c	              mov edi, dword [rsp + 0xc]	      1941	convert.c	FUNCTION_58	IF_3
0x4003522	            0x89f8	                            mov eax, edi	      1941	convert.c	FUNCTION_58	IF_3
0x4003524	          0x83e0fd	                     and eax, 0xfffffffd	      1941	convert.c	FUNCTION_58	IF_3
0x4003527	          0x83f805	                              cmp eax, 5	      1941	convert.c	FUNCTION_58	IF_3
0x400352a	            0x7424	                            je 0x4003550	      1941	convert.c	FUNCTION_58	IF_3
0x400352c	        0x8b442410	            mov eax, dword [rsp + 0x10] 	      1944	convert.c	FUNCTION_58	IF_4
0x4003530	            0x85c0	                           test eax, eax	      1944	convert.c	FUNCTION_58	IF_4
0x4003532	            0x753c	                           jne 0x4003570	      1944	convert.c	FUNCTION_58	IF_4
0x4003534	      0xe807dbffff	                     call sym.output_eol	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4003539	          0x83f801	                              cmp eax, 1	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x400353c	     0xf84fa000000	                            je 0x400363c	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x4003542	      0xbb00000000	                              mov ebx, 0	      1763	convert.c	FUNCTION_52	IF_1
0x4003547	    0x660f1f840000	                    nop word [rax + rax]	      1763	convert.c	FUNCTION_52	IF_1
0x4003550	      0x488b4c2428	            mov rcx, qword [rsp + 0x28] 	      1953	convert.c	FUNCTION_58
0x4003555	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1953	convert.c	FUNCTION_58
0x400355e	          0x4889d8	                            mov rax, rbx	      1953	convert.c	FUNCTION_58
0x4003561	     0xf85fb000000	                           jne 0x4003662	      1953	convert.c	FUNCTION_58
0x4003567	        0x4883c438	                           add rsp, 0x38	      1953	convert.c	FUNCTION_58
0x400356b	              0x5b	                                 pop rbx	      1953	convert.c	FUNCTION_58
0x400356c	              0x5d	                                 pop rbp	      1953	convert.c	FUNCTION_58
0x400356d	              0xc3	                                     ret	      1953	convert.c	FUNCTION_58
0x400356e	            0x6690	                                     nop	      1953	convert.c	FUNCTION_58
0x4003570	      0xbf58000000	                           mov edi, 0x58	      1911	convert.c	FUNCTION_57	CALL_1
0x4003575	      0xe800000000	                          call 0x400357a	      1911	convert.c	FUNCTION_57	CALL_1
0x400357a	          0x4889ef	                            mov rdi, rbp	      1913	convert.c	FUNCTION_57	CALL_2
0x400357d	          0x4889c3	                            mov rbx, rax	      1911	convert.c	FUNCTION_57	CALL_1
0x4003580	      0xe800000000	                          call 0x4003585	      1913	convert.c	FUNCTION_57	CALL_2
0x4003585	        0x488d7b24	                   lea rdi, [rbx + 0x24]	      1913	convert.c	FUNCTION_57	CALL_2
0x4003589	          0x4889c1	                            mov rcx, rax	      1913	convert.c	FUNCTION_57	CALL_2
0x400358c	      0xba00000000	                              mov edx, 0	      1913	convert.c	FUNCTION_57	CALL_2
0x4003591	      0xbe2d000000	                           mov esi, 0x2d	      1913	convert.c	FUNCTION_57	CALL_2
0x4003596	            0x31c0	                            xor eax, eax	      1913	convert.c	FUNCTION_57	CALL_2
0x4003598	      0xe800000000	                          call 0x400359d	      1913	convert.c	FUNCTION_57	CALL_2
0x400359d	        0x488d7b08	                      lea rdi, [rbx + 8]	      1915	convert.c	FUNCTION_57	CALL_4
0x40035a1	            0x31f6	                            xor esi, esi	      1915	convert.c	FUNCTION_57	CALL_4
0x40035a3	      0xe800000000	                          call 0x40035a8	      1915	convert.c	FUNCTION_57	CALL_4
0x40035a8	        0x8b7c240c	              mov edi, dword [rsp + 0xc]	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x40035ac	    0x48c703000000	                      mov qword [rbx], 0	      1916	convert.c	FUNCTION_57
0x40035b3	    0xc74320000000	               mov dword [rbx + 0x20], 0	      1917	convert.c	FUNCTION_57
0x40035ba	      0xe881daffff	                     call sym.output_eol	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x40035bf	          0x83f801	                              cmp eax, 1	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x40035c2	            0x7414	                            je 0x40035d8	      1947	convert.c	FUNCTION_58	IF_5	CALL_3
0x40035c4	    0x4881fb000000	                              cmp rbx, 0	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035cb	            0x7583	                           jne 0x4003550	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035cd	      0xe970ffffff	                           jmp 0x4003542	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035d2	    0x660f1f440000	                    nop word [rax + rax]	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035d8	      0xbe10000000	                           mov esi, 0x10	      1663	convert.c	FUNCTION_49	CALL_1
0x40035dd	      0xbf01000000	                              mov edi, 1	      1663	convert.c	FUNCTION_49	CALL_1
0x40035e2	      0xe800000000	                          call 0x40035e7	      1663	convert.c	FUNCTION_49	CALL_1
0x40035e7	    0x4881fb000000	                              cmp rbx, 0	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035ee	          0x4889c5	                            mov rbp, rax	      1663	convert.c	FUNCTION_49	CALL_1
0x40035f1	    0x48c700000000	                      mov qword [rax], 0	      1665	convert.c	FUNCTION_49
0x40035f8	            0x7460	                            je 0x400365a	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x40035fa	    0x4881fd000000	                              cmp rbp, 0	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003601	     0xf8449ffffff	                            je 0x4003550	      1764	convert.c	FUNCTION_52	IF_2	CALL_2
0x4003607	      0xbf20040000	                          mov edi, 0x420	      1767	convert.c	FUNCTION_52	CALL_3
0x400360c	      0xe800000000	                          call 0x4003611	      1767	convert.c	FUNCTION_52	CALL_3
0x4003611	        0x48895808	                mov qword [rax + 8], rbx	      1768	convert.c	FUNCTION_52
0x4003615	        0x48896810	             mov qword [rax + 0x10], rbp	      1769	convert.c	FUNCTION_52
0x4003619	          0x4889c3	                            mov rbx, rax	      1771	convert.c	FUNCTION_52
0x400361c	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1770	convert.c	FUNCTION_52
0x4003626	    0xc78018040000	              mov dword [rax + 0x418], 0	      1770	convert.c	FUNCTION_52
0x4003630	    0x48c700000000	                      mov qword [rax], 0	      1771	convert.c	FUNCTION_52
0x4003637	      0xe914ffffff	                           jmp 0x4003550	      1771	convert.c	FUNCTION_52
0x400363c	      0xbe10000000	                           mov esi, 0x10	      1663	convert.c	FUNCTION_49	CALL_1
0x4003641	      0xbf01000000	                              mov edi, 1	      1663	convert.c	FUNCTION_49	CALL_1
0x4003646	      0xe800000000	                          call 0x400364b	      1663	convert.c	FUNCTION_49	CALL_1
0x400364b	    0x48c700000000	                      mov qword [rax], 0	      1665	convert.c	FUNCTION_49
0x4003652	          0x4889c3	                            mov rbx, rax	      1665	convert.c	FUNCTION_49
0x4003655	      0xe9f6feffff	                           jmp 0x4003550	      1665	convert.c	FUNCTION_49
0x400365a	          0x4889eb	                            mov rbx, rbp	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x400365d	      0xe9eefeffff	                           jmp 0x4003550	      1762	convert.c	FUNCTION_52	IF_1	CALL_1
0x4003662	      0xe800000000	                          call 0x4003667	      1953	convert.c	FUNCTION_58
convert_attrs	CALL,10:FOR,0:ELSE,4:IF,12:functions,0:WHILE,0:DO,0:SWITCH,0	192
0x4000d60	            0x4156	                                push r14	      1294	convert.c	FUNCTION_35
0x4000d62	            0x4155	                                push r13	      1294	convert.c	FUNCTION_35
0x4000d64	            0x4154	                                push r12	      1294	convert.c	FUNCTION_35
0x4000d66	              0x55	                                push rbp	      1294	convert.c	FUNCTION_35
0x4000d67	          0x4889fd	                            mov rbp, rdi	      1294	convert.c	FUNCTION_35
0x4000d6a	              0x53	                                push rbx	      1294	convert.c	FUNCTION_35
0x4000d6b	          0x4889f3	                            mov rbx, rsi	      1294	convert.c	FUNCTION_35
0x4000d6e	    0x488b35000000	            mov rsi, qword [0x04000d75] 	      1297	convert.c	FUNCTION_35	IF_1
0x4000d75	          0x4885f6	                           test rsi, rsi	      1297	convert.c	FUNCTION_35	IF_1
0x4000d78	     0xf8442020000	                            je 0x4000fc0	      1297	convert.c	FUNCTION_35	IF_1
0x4000d7e	          0x4889df	                            mov rdi, rbx	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000d81	      0xe800000000	                          call 0x4000d86	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000d86	            0x85c0	                           test eax, eax	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000d88	     0xf8572010000	                           jne 0x4000f00	      1305	convert.c	FUNCTION_35	IF_2	CALL_3
0x4000d8e	    0x488b05000000	            mov rax, qword [0x04000d95] 	      1306	convert.c	FUNCTION_35	IF_2
0x4000d95	        0x4c8b6008	                mov r12, qword [rax + 8]	      1306	convert.c	FUNCTION_35	IF_2
0x4000d99	      0x498b7c2448	            mov rdi, qword [r12 + 0x48] 	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000d9e	      0xe8cdfeffff	     call sym.git_path_check_crlf.isra.6	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000da3	            0x85c0	                           test eax, eax	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4000da5	          0x4189c5	                           mov r13d, eax	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000da8	          0x89450c	              mov dword [rbp + 0xc], eax	      1307	convert.c	FUNCTION_35	IF_2	CALL_4
0x4000dab	            0x7510	                           jne 0x4000dbd	      1308	convert.c	FUNCTION_35	IF_2	IF_3
0x4000dad	      0x498b7c2408	                mov rdi, qword [r12 + 8]	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000db2	      0xe8b9feffff	     call sym.git_path_check_crlf.isra.6	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000db7	          0x4189c5	                           mov r13d, eax	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000dba	          0x89450c	              mov dword [rbp + 0xc], eax	      1309	convert.c	FUNCTION_35	IF_2	CALL_5
0x4000dbd	            0x31c0	                            xor eax, eax	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000dbf	    0x49817c241800	               cmp qword [r12 + 0x18], 0	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000dc8	      0x4d8b742428	            mov r14, qword [r12 + 0x28] 	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000dcd	           0xf94c0	                                 sete al	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000dd0	    0x4981fe000000	                              cmp r14, 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000dd7	           0xf94c2	                                 sete dl	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000dda	    0x4981fe000000	                              cmp r14, 0	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000de1	          0x894510	            mov dword [rbp + 0x10], eax 	      1310	convert.c	FUNCTION_35	IF_2	CALL_6
0x4000de4	           0xf94c0	                                 sete al	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000de7	             0x8c2	                               or dl, al	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000de9	     0xf852a020000	                           jne 0x4001019	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000def	          0x4d85f6	                           test r14, r14	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000df2	     0xf8421020000	                            je 0x4001019	      1270	convert.c	FUNCTION_33	IF_1	CALL_3
0x4000df8	    0x488b1d000000	            mov rbx, qword [0x04000dff] 	      1272	convert.c	FUNCTION_33	FOR_1
0x4000dff	          0x4885db	                           test rbx, rbx	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e02	            0x7515	                           jne 0x4000e19	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e04	      0xe910020000	                           jmp 0x4001019	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e09	     0xf1f80000000	                         nop dword [rax]	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e10	        0x488b5b08	                mov rbx, qword [rbx + 8]	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e14	          0x4885db	                           test rbx, rbx	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e17	            0x740f	                            je 0x4000e28	      1272	convert.c	FUNCTION_33	FOR_1
0x4000e19	          0x488b33	                    mov rsi, qword [rbx]	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4000e1c	          0x4c89f7	                            mov rdi, r14	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4000e1f	      0xe800000000	                          call 0x4000e24	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4000e24	            0x85c0	                           test eax, eax	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4000e26	            0x75e8	                           jne 0x4000e10	      1273	convert.c	FUNCTION_33	FOR_1	IF_2	CALL_4
0x4000e28	        0x4183fd01	                             cmp r13d, 1	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4000e2c	        0x48895d00	                    mov qword [rbp], rbx	      1311	convert.c	FUNCTION_35	IF_2	CALL_7
0x4000e30	            0x7437	                            je 0x4000e69	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4000e32	      0x498b742438	            mov rsi, qword [r12 + 0x38] 	      1312	convert.c	FUNCTION_35	IF_2	IF_4
0x4000e37	          0x4885f6	                           test rsi, rsi	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x4000e3a	            0x742d	                            je 0x4000e69	      1256	convert.c	FUNCTION_32	IF_1	CALL_1
0x4000e3c	          0x803e6c	                    cmp byte [rsi], 0x6c	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e3f	     0xf852b010000	                           jne 0x4000f70	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e45	        0x807e0166	                cmp byte [rsi + 1], 0x66	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e49	     0xf8521010000	                           jne 0x4000f70	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e4f	        0x807e0200	                   cmp byte [rsi + 2], 0	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e53	     0xf8517010000	                           jne 0x4000f70	      1258	convert.c	FUNCTION_32	ELSE_1	IF_2	CALL_2
0x4000e59	            0x31c0	                            xor eax, eax	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e5b	        0x4183fd05	                             cmp r13d, 5	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e5f	           0xf94c0	                                 sete al	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e62	        0x8d444003	              lea eax, [rax + rax*2 + 3]	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e66	          0x89450c	              mov dword [rbp + 0xc], eax	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e69	      0x498b5c2458	            mov rbx, qword [r12 + 0x58] 	      1319	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_2	IF_7
0x4000e6e	          0x4885db	                           test rbx, rbx	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000e71	     0xf8439010000	                            je 0x4000fb0	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000e77	          0x803b00	                       cmp byte [rbx], 0	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000e7a	     0xf8430010000	                            je 0x4000fb0	      1221	convert.c	FUNCTION_30	IF_1	CALL_2
0x4000e80	    0x4881fb000000	                              cmp rbx, 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000e87	     0xf8493010000	                            je 0x4001020	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000e8d	    0x4881fb000000	                              cmp rbx, 0	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000e94	     0xf8486010000	                            je 0x4001020	      1224	convert.c	FUNCTION_30	IF_2	CALL_4
0x4000e9a	      0xbe00000000	                              mov esi, 0	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000e9f	          0x4889df	                            mov rdi, rbx	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000ea2	      0xe800000000	                          call 0x4000ea7	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000ea7	            0x85c0	                           test eax, eax	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000ea9	     0xf8501010000	                           jne 0x4000fb0	      1229	convert.c	FUNCTION_30	IF_3	CALL_7
0x4000eaf	          0x8b450c	              mov eax, dword [rbp + 0xc]	      1331	convert.c	FUNCTION_35
0x4000eb2	        0x48895d18	            mov qword [rbp + 0x18], rbx 	      1323	convert.c	FUNCTION_35	IF_2	CALL_9
0x4000eb6	          0x83f802	                              cmp eax, 2	      1332	convert.c	FUNCTION_35	IF_9
0x4000eb9	          0x894508	                mov dword [rbp + 8], eax	      1331	convert.c	FUNCTION_35
0x4000ebc	     0xf859e000000	                           jne 0x4000f60	      1332	convert.c	FUNCTION_35	IF_9
0x4000ec2	    0x8b1500000000	            mov edx, dword [0x04000ec8] 	       163	convert.c	FUNCTION_7	IF_1
0x4000ec8	      0xb804000000	                              mov eax, 4	      1333	convert.c	FUNCTION_35	CALL_10
0x4000ecd	          0x83fa01	                              cmp edx, 1	       163	convert.c	FUNCTION_7	IF_1
0x4000ed0	            0x7419	                            je 0x4000eeb	       163	convert.c	FUNCTION_7	IF_1
0x4000ed2	          0x83faff	             cmp edx, 0xffffffffffffffff	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000ed5	      0xb803000000	                              mov eax, 3	      1333	convert.c	FUNCTION_35	CALL_10
0x4000eda	            0x740f	                            je 0x4000eeb	       165	convert.c	FUNCTION_7	ELSE_1	IF_2
0x4000edc	            0x31c0	                            xor eax, eax	      1333	convert.c	FUNCTION_35	CALL_10
0x4000ede	    0x833d00000000	               cmp dword [0x04000ee5], 1	      1333	convert.c	FUNCTION_35	CALL_10
0x4000ee5	           0xf94c0	                                 sete al	      1333	convert.c	FUNCTION_35	CALL_10
0x4000ee8	          0x83c003	                              add eax, 3	      1333	convert.c	FUNCTION_35	CALL_10
0x4000eeb	          0x89450c	              mov dword [rbp + 0xc], eax	      1333	convert.c	FUNCTION_35	CALL_10
0x4000eee	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000eef	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000ef0	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000ef2	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000ef4	            0x415e	                                 pop r14	      1340	convert.c	FUNCTION_35
0x4000ef6	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
0x4000ef7	    0x660f1f840000	                    nop word [rax + rax]	      1340	convert.c	FUNCTION_35
0x4000f00	    0x48c745000000	                      mov qword [rbp], 0	      1325	convert.c	FUNCTION_35	ELSE_4
0x4000f08	    0xc7450c000000	                mov dword [rbp + 0xc], 0	      1326	convert.c	FUNCTION_35	ELSE_4
0x4000f0f	    0xc74510000000	               mov dword [rbp + 0x10], 0	      1327	convert.c	FUNCTION_35	ELSE_4
0x4000f16	    0xc74508000000	                  mov dword [rbp + 8], 0	      1331	convert.c	FUNCTION_35
0x4000f1d	    0x8b0500000000	            mov eax, dword [0x04000f23] 	      1334	convert.c	FUNCTION_35	IF_10
0x4000f23	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_35	IF_10
0x4000f25	            0x7519	                           jne 0x4000f40	      1334	convert.c	FUNCTION_35	IF_10
0x4000f27	    0xc7450c010000	                mov dword [rbp + 0xc], 1	      1335	convert.c	FUNCTION_35	IF_10
0x4000f2e	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000f2f	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000f30	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000f32	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000f34	            0x415e	                                 pop r14	      1340	convert.c	FUNCTION_35
0x4000f36	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
0x4000f37	    0x660f1f840000	                    nop word [rax + rax]	      1340	convert.c	FUNCTION_35
0x4000f40	          0x83f801	                              cmp eax, 1	      1336	convert.c	FUNCTION_35	IF_11
0x4000f43	            0x745b	                            je 0x4000fa0	      1336	convert.c	FUNCTION_35	IF_11
0x4000f45	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1338	convert.c	FUNCTION_35	IF_12
0x4000f48	            0x75a4	                           jne 0x4000eee	      1338	convert.c	FUNCTION_35	IF_12
0x4000f4a	    0xc7450c060000	                mov dword [rbp + 0xc], 6	      1339	convert.c	FUNCTION_35	IF_12
0x4000f51	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000f52	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000f53	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000f55	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000f57	            0x415e	                                 pop r14	      1340	convert.c	FUNCTION_35
0x4000f59	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
0x4000f5a	    0x660f1f440000	                    nop word [rax + rax]	      1340	convert.c	FUNCTION_35
0x4000f60	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_35	IF_10
0x4000f62	            0x74b9	                            je 0x4000f1d	      1334	convert.c	FUNCTION_35	IF_10
0x4000f64	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000f65	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000f66	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000f68	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000f6a	            0x415e	                                 pop r14	      1340	convert.c	FUNCTION_35
0x4000f6c	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
0x4000f6d	           0xf1f00	                         nop dword [rax]	      1340	convert.c	FUNCTION_35
0x4000f70	      0xbf00000000	                              mov edi, 0	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000f75	      0xb905000000	                              mov ecx, 5	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000f7a	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000f7c	     0xf85e7feffff	                           jne 0x4000e69	      1260	convert.c	FUNCTION_32	ELSE_2	IF_3	CALL_3
0x4000f82	            0x31c0	                            xor eax, eax	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f84	        0x4183fd05	                             cmp r13d, 5	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f88	           0xf94c0	                                 sete al	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f8b	        0x8d444004	              lea eax, [rax + rax*2 + 4]	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f8f	          0x89450c	              mov dword [rbp + 0xc], eax	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f92	      0xe9d2feffff	                           jmp 0x4000e69	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000f97	    0x660f1f840000	                    nop word [rax + rax]	      1321	convert.c	FUNCTION_35	IF_2	IF_4	ELSE_3	IF_8
0x4000fa0	    0xc7450c070000	                mov dword [rbp + 0xc], 7	      1337	convert.c	FUNCTION_35	IF_11
0x4000fa7	              0x5b	                                 pop rbx	      1340	convert.c	FUNCTION_35
0x4000fa8	              0x5d	                                 pop rbp	      1340	convert.c	FUNCTION_35
0x4000fa9	            0x415c	                                 pop r12	      1340	convert.c	FUNCTION_35
0x4000fab	            0x415d	                                 pop r13	      1340	convert.c	FUNCTION_35
0x4000fad	            0x415e	                                 pop r14	      1340	convert.c	FUNCTION_35
0x4000faf	              0xc3	                                     ret	      1340	convert.c	FUNCTION_35
0x4000fb0	            0x31db	                            xor ebx, ebx	      1222	convert.c	FUNCTION_30	IF_1
0x4000fb2	      0xe9f8feffff	                           jmp 0x4000eaf	      1222	convert.c	FUNCTION_30	IF_1
0x4000fb7	    0x660f1f840000	                    nop word [rax + rax]	      1222	convert.c	FUNCTION_30	IF_1
0x4000fc0	        0x4883ec08	                              sub rsp, 8	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fc4	      0xba00000000	                              mov edx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fc9	    0x41b900000000	                              mov r9d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fcf	            0x6a00	                                  push 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fd1	    0x41b800000000	                              mov r8d, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fd7	      0xb900000000	                              mov ecx, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fdc	      0xbe00000000	                              mov esi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fe1	      0xbf00000000	                              mov edi, 0	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fe6	            0x31c0	                            xor eax, eax	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fe8	      0xe800000000	                          call 0x4000fed	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000fed	            0x31f6	                            xor esi, esi	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4000fef	      0xbf00000000	                              mov edi, 0	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4000ff4	    0x488905000000	            mov qword [0x04000ffb], rax 	      1298	convert.c	FUNCTION_35	IF_1	CALL_1
0x4000ffb	    0x48c705000000	               mov qword [0x04001006], 0	      1301	convert.c	FUNCTION_35	IF_1
0x4001006	      0xe800000000	                          call 0x400100b	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x400100b	              0x58	                                 pop rax	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x400100c	    0x488b35000000	            mov rsi, qword [0x04001013] 	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4001013	              0x5a	                                 pop rdx	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4001014	      0xe965fdffff	                           jmp 0x4000d7e	      1302	convert.c	FUNCTION_35	IF_1	CALL_2
0x4001019	            0x31db	                            xor ebx, ebx	      1271	convert.c	FUNCTION_33	IF_1
0x400101b	      0xe908feffff	                           jmp 0x4000e28	      1271	convert.c	FUNCTION_33	IF_1
0x4001020	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_101	CALL_2
0x4001022	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_101	CALL_2
0x4001027	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_101	CALL_2
0x400102c	      0xe800000000	                          call 0x4001031	        54	gettext.h	FUNCTION_101	CALL_2
0x4001031	          0x4889c7	                            mov rdi, rax	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4001034	            0x31c0	                            xor eax, eax	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
0x4001036	      0xe800000000	                          call 0x400103b	      1225	convert.c	FUNCTION_30	IF_2	CALL_6
filter_buffer_or_fd	CALL,15:FOR,0:ELSE,1:IF,7:functions,0:WHILE,0:DO,0:SWITCH,0	134
0x40006d0	            0x4154	                                push r12	       639	convert.c	FUNCTION_19
0x40006d2	              0x55	                                push rbp	       639	convert.c	FUNCTION_19
0x40006d3	      0xb90c000000	                            mov ecx, 0xc	       643	convert.c	FUNCTION_19
0x40006d8	              0x53	                                push rbx	       639	convert.c	FUNCTION_19
0x40006d9	            0x89f5	                            mov ebp, esi	       639	convert.c	FUNCTION_19
0x40006db	          0x4889d3	                            mov rbx, rdx	       639	convert.c	FUNCTION_19
0x40006de	    0x4881ece00000	                           sub rsp, 0xe0	       639	convert.c	FUNCTION_19
0x40006e5	        0x488b7220	            mov rsi, qword [rdx + 0x20] 	       657	convert.c	FUNCTION_19	CALL_1
0x40006e9	    0x64488b042528	                mov rax, qword fs:[0x28]	       639	convert.c	FUNCTION_19
0x40006f2	    0x48898424d800	             mov qword [rsp + 0xd8], rax	       639	convert.c	FUNCTION_19
0x40006fa	            0x31c0	                            xor eax, eax	       639	convert.c	FUNCTION_19
0x40006fc	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       643	convert.c	FUNCTION_19
0x4000701	    0x48c78424a000	               mov qword [rsp + 0xa0], 0	       646	convert.c	FUNCTION_19
0x400070d	    0x48c78424a800	               mov qword [rsp + 0xa8], 0	       646	convert.c	FUNCTION_19
0x4000719	    0x48c704240000	                      mov qword [rsp], 0	       649	convert.c	FUNCTION_19
0x4000721	    0x48c744240800	                  mov qword [rsp + 8], 0	       649	convert.c	FUNCTION_19
0x400072a	          0xf348ab	              rep stosq qword [rdi], rax	       643	convert.c	FUNCTION_19
0x400072d	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       657	convert.c	FUNCTION_19	CALL_1
0x4000732	    0x48c744244800	               mov qword [rsp + 0x48], 0	       643	convert.c	FUNCTION_19
0x400073b	    0x48c744245800	               mov qword [rsp + 0x58], 0	       643	convert.c	FUNCTION_19
0x4000744	    0x48c744241000	               mov qword [rsp + 0x10], 0	       649	convert.c	FUNCTION_19
0x400074d	    0x48c744242000	               mov qword [rsp + 0x20], 0	       650	convert.c	FUNCTION_19
0x4000756	    0x48c744242800	               mov qword [rsp + 0x28], 0	       650	convert.c	FUNCTION_19
0x400075f	    0x48c744243000	               mov qword [rsp + 0x30], 0	       650	convert.c	FUNCTION_19
0x4000768	    0x48c78424b000	               mov qword [rsp + 0xb0], 0	       651	convert.c	FUNCTION_19
0x4000774	    0x48c78424b800	               mov qword [rsp + 0xb8], 0	       651	convert.c	FUNCTION_19
0x4000780	    0x48c78424c000	               mov qword [rsp + 0xc0], 0	       651	convert.c	FUNCTION_19
0x400078c	    0x48c78424c800	               mov qword [rsp + 0xc8], 0	       651	convert.c	FUNCTION_19
0x4000798	      0xe800000000	                          call 0x400079d	       657	convert.c	FUNCTION_19	CALL_1
0x400079d	      0x488b442430	            mov rax, qword [rsp + 0x30] 	       658	convert.c	FUNCTION_19
0x40007a2	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       661	convert.c	FUNCTION_19	CALL_2
0x40007a6	    0x488d8c24b000	                   lea rcx, [rsp + 0xb0]	       661	convert.c	FUNCTION_19	CALL_2
0x40007ae	      0xba00000000	                              mov edx, 0	       661	convert.c	FUNCTION_19	CALL_2
0x40007b3	          0x4889e7	                            mov rdi, rsp	       661	convert.c	FUNCTION_19	CALL_2
0x40007b6	    0x48898424b800	             mov qword [rsp + 0xb8], rax	       658	convert.c	FUNCTION_19
0x40007be	      0xe800000000	                          call 0x40007c3	       661	convert.c	FUNCTION_19	CALL_2
0x40007c3	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	       662	convert.c	FUNCTION_19	CALL_3
0x40007c8	      0xe800000000	                          call 0x40007cd	       662	convert.c	FUNCTION_19	CALL_3
0x40007cd	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       664	convert.c	FUNCTION_19
0x40007d2	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x40007d7	    0x808c24880000	              or byte [rsp + 0x88], 0x40	       667	convert.c	FUNCTION_19
0x40007df	    0xc744246cffff	     mov dword [rsp + 0x6c], 0xffffffff 	       668	convert.c	FUNCTION_19
0x40007e7	        0x896c2470	             mov dword [rsp + 0x70], ebp	       669	convert.c	FUNCTION_19
0x40007eb	    0x48898424a000	             mov qword [rsp + 0xa0], rax	       664	convert.c	FUNCTION_19
0x40007f3	    0x488d8424a000	                   lea rax, [rsp + 0xa0]	       666	convert.c	FUNCTION_19
0x40007fb	      0x4889442440	             mov qword [rsp + 0x40], rax	       666	convert.c	FUNCTION_19
0x4000800	      0xe800000000	                          call 0x4000805	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4000805	            0x85c0	                           test eax, eax	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x4000807	     0xf853b010000	                           jne 0x4000948	       671	convert.c	FUNCTION_19	IF_1	CALL_4
0x400080d	      0xbe01000000	                              mov esi, 1	       676	convert.c	FUNCTION_19	CALL_7
0x4000812	      0xbf0d000000	                            mov edi, 0xd	       676	convert.c	FUNCTION_19	CALL_7
0x4000817	      0xe800000000	                          call 0x400081c	       676	convert.c	FUNCTION_19	CALL_7
0x400081c	          0x488b33	                    mov rsi, qword [rbx]	       678	convert.c	FUNCTION_19	IF_2
0x400081f	          0x4885f6	                           test rsi, rsi	       678	convert.c	FUNCTION_19	IF_2
0x4000822	     0xf8498000000	                            je 0x40008c0	       678	convert.c	FUNCTION_19	IF_2
0x4000828	        0x488b5308	                mov rdx, qword [rbx + 8]	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x400082c	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x4000830	      0xe800000000	                          call 0x4000835	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x4000835	          0x4889c5	                            mov rbp, rax	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x4000838	        0x48c1ed3f	                           shr rbp, 0x3f	       679	convert.c	FUNCTION_19	IF_2	CALL_8
0x400083c	      0xe800000000	                          call 0x4000841	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x4000841	          0x833820	                   cmp dword [rax], 0x20	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x4000844	     0xf84e6000000	                            je 0x4000930	       681	convert.c	FUNCTION_19	IF_2	IF_3
0x400084a	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x400084e	      0xe800000000	                          call 0x4000853	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000853	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000855	     0xf8595000000	                           jne 0x40008f0	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x400085b	            0x85ed	                           test ebp, ebp	       691	convert.c	FUNCTION_19	IF_6
0x400085d	     0xf8592000000	                           jne 0x40008f5	       691	convert.c	FUNCTION_19	IF_6
0x4000863	            0x31ed	                            xor ebp, ebp	       690	convert.c	FUNCTION_19	IF_5
0x4000865	      0xbf0d000000	                            mov edi, 0xd	       694	convert.c	FUNCTION_19	CALL_12
0x400086a	      0xe800000000	                          call 0x400086f	       694	convert.c	FUNCTION_19	CALL_12
0x400086f	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       696	convert.c	FUNCTION_19	CALL_13
0x4000874	      0xe800000000	                          call 0x4000879	       696	convert.c	FUNCTION_19	CALL_13
0x4000879	            0x85c0	                           test eax, eax	       697	convert.c	FUNCTION_19	IF_7
0x400087b	          0x4189c4	                           mov r12d, eax	       696	convert.c	FUNCTION_19	CALL_13
0x400087e	     0xf858c000000	                           jne 0x4000910	       697	convert.c	FUNCTION_19	IF_7
0x4000884	          0x4889e7	                            mov rdi, rsp	       700	convert.c	FUNCTION_19	CALL_15
0x4000887	      0xe800000000	                          call 0x400088c	       700	convert.c	FUNCTION_19	CALL_15
0x400088c	            0x31c0	                            xor eax, eax	       701	convert.c	FUNCTION_19
0x400088e	          0x4109ec	                            or r12d, ebp	       701	convert.c	FUNCTION_19
0x4000891	           0xf95c0	                                setne al	       701	convert.c	FUNCTION_19
0x4000894	    0x488b9424d800	            mov rdx, qword [rsp + 0xd8] 	       702	convert.c	FUNCTION_19
0x400089c	    0x644833142528	                xor rdx, qword fs:[0x28]	       702	convert.c	FUNCTION_19
0x40008a5	     0xf85bf000000	                           jne 0x400096a	       702	convert.c	FUNCTION_19
0x40008ab	    0x4881c4e00000	                           add rsp, 0xe0	       702	convert.c	FUNCTION_19
0x40008b2	              0x5b	                                 pop rbx	       702	convert.c	FUNCTION_19
0x40008b3	              0x5d	                                 pop rbp	       702	convert.c	FUNCTION_19
0x40008b4	            0x415c	                                 pop r12	       702	convert.c	FUNCTION_19
0x40008b6	              0xc3	                                     ret	       702	convert.c	FUNCTION_19
0x40008b7	    0x660f1f840000	                    nop word [rax + rax]	       702	convert.c	FUNCTION_19
0x40008c0	          0x8b7b10	            mov edi, dword [rbx + 0x10] 	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40008c3	        0x8b74246c	            mov esi, dword [rsp + 0x6c] 	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40008c7	      0xe800000000	                          call 0x40008cc	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40008cc	          0x83f8fd	             cmp eax, 0xfffffffffffffffd	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40008cf	            0x89c5	                            mov ebp, eax	       684	convert.c	FUNCTION_19	ELSE_1	CALL_9
0x40008d1	     0xf8573ffffff	                           jne 0x400084a	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40008d7	      0xe800000000	                          call 0x40008dc	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40008dc	          0x833820	                   cmp dword [rax], 0x20	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40008df	            0x744f	                            je 0x4000930	       685	convert.c	FUNCTION_19	ELSE_1	IF_4
0x40008e1	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40008e5	      0xe800000000	                          call 0x40008ea	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40008ea	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40008ec	            0x7407	                            je 0x40008f5	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40008ee	            0x6690	                                     nop	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x40008f0	      0xbd01000000	                              mov ebp, 1	       690	convert.c	FUNCTION_19	IF_5
0x40008f5	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       692	convert.c	FUNCTION_19	CALL_11
0x40008f9	      0xbf00000000	                              mov edi, 0	       692	convert.c	FUNCTION_19	CALL_11
0x40008fe	            0x31c0	                            xor eax, eax	       692	convert.c	FUNCTION_19	CALL_11
0x4000900	      0xe800000000	                          call 0x4000905	       692	convert.c	FUNCTION_19	CALL_11
0x4000905	      0xe95bffffff	                           jmp 0x4000865	       692	convert.c	FUNCTION_19	CALL_11
0x400090a	    0x660f1f440000	                    nop word [rax + rax]	       692	convert.c	FUNCTION_19	CALL_11
0x4000910	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       698	convert.c	FUNCTION_19	CALL_14
0x4000914	            0x89c2	                            mov edx, eax	       698	convert.c	FUNCTION_19	CALL_14
0x4000916	      0xbf00000000	                              mov edi, 0	       698	convert.c	FUNCTION_19	CALL_14
0x400091b	            0x31c0	                            xor eax, eax	       698	convert.c	FUNCTION_19	CALL_14
0x400091d	      0xe800000000	                          call 0x4000922	       698	convert.c	FUNCTION_19	CALL_14
0x4000922	      0xe95dffffff	                           jmp 0x4000884	       698	convert.c	FUNCTION_19	CALL_14
0x4000927	    0x660f1f840000	                    nop word [rax + rax]	       698	convert.c	FUNCTION_19	CALL_14
0x4000930	        0x8b7c246c	            mov edi, dword [rsp + 0x6c] 	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000934	      0xe800000000	                          call 0x4000939	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000939	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x400093b	            0x75b3	                           jne 0x40008f0	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x400093d	      0xe921ffffff	                           jmp 0x4000863	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000942	    0x660f1f440000	                    nop word [rax + rax]	       689	convert.c	FUNCTION_19	IF_5	CALL_10
0x4000948	          0x4889e7	                            mov rdi, rsp	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x400094b	      0xe800000000	                          call 0x4000950	       672	convert.c	FUNCTION_19	IF_1	CALL_5
0x4000950	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000954	      0xbf00000000	                              mov edi, 0	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000959	            0x31c0	                            xor eax, eax	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x400095b	      0xe800000000	                          call 0x4000960	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000960	      0xb8ffffffff	                     mov eax, 0xffffffff	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x4000965	      0xe92affffff	                           jmp 0x4000894	       673	convert.c	FUNCTION_19	IF_1	CALL_6
0x400096a	      0xe800000000	                          call 0x400096f	       702	convert.c	FUNCTION_19
renormalize_buffer	CALL,2:FOR,0:ELSE,0:IF,1:functions,0:WHILE,0:DO,0:SWITCH,0	40
0x4003440	            0x4157	                                push r15	      1494	convert.c	FUNCTION_43
0x4003442	            0x4156	                                push r14	      1494	convert.c	FUNCTION_43
0x4003444	          0x4989f6	                            mov r14, rsi	      1494	convert.c	FUNCTION_43
0x4003447	            0x4155	                                push r13	      1494	convert.c	FUNCTION_43
0x4003449	            0x4154	                                push r12	      1494	convert.c	FUNCTION_43
0x400344b	          0x4989cc	                            mov r12, rcx	      1494	convert.c	FUNCTION_43
0x400344e	              0x55	                                push rbp	      1494	convert.c	FUNCTION_43
0x400344f	              0x53	                                push rbx	      1494	convert.c	FUNCTION_43
0x4003450	          0x4889d5	                            mov rbp, rdx	      1494	convert.c	FUNCTION_43
0x4003453	          0x4c89c3	                             mov rbx, r8	      1494	convert.c	FUNCTION_43
0x4003456	          0x4531c9	                            xor r9d, r9d	      1495	convert.c	FUNCTION_43	CALL_1
0x4003459	          0x4989ff	                            mov r15, rdi	      1494	convert.c	FUNCTION_43
0x400345c	        0x4883ec08	                              sub rsp, 8	      1494	convert.c	FUNCTION_43
0x4003460	    0x41b801000000	                              mov r8d, 1	      1495	convert.c	FUNCTION_43	CALL_1
0x4003466	          0x4889d9	                            mov rcx, rbx	      1495	convert.c	FUNCTION_43	CALL_1
0x4003469	          0x4c89e2	                            mov rdx, r12	      1495	convert.c	FUNCTION_43	CALL_1
0x400346c	          0x4889ee	                            mov rsi, rbp	      1495	convert.c	FUNCTION_43	CALL_1
0x400346f	          0x4c89f7	                            mov rdi, r14	      1495	convert.c	FUNCTION_43	CALL_1
0x4003472	      0xe8b9e4ffff	call sym.convert_to_working_tree_internal	      1495	convert.c	FUNCTION_43	CALL_1
0x4003477	            0x85c0	                           test eax, eax	      1496	convert.c	FUNCTION_43	IF_1
0x4003479	          0x4189c5	                           mov r13d, eax	      1495	convert.c	FUNCTION_43	CALL_1
0x400347c	            0x7408	                            je 0x4003486	      1496	convert.c	FUNCTION_43	IF_1
0x400347e	        0x488b6b10	            mov rbp, qword [rbx + 0x10] 	      1497	convert.c	FUNCTION_43	IF_1
0x4003482	        0x4c8b6308	                mov r12, qword [rbx + 8]	      1498	convert.c	FUNCTION_43	IF_1
0x4003486	          0x4989d8	                             mov r8, rbx	      1500	convert.c	FUNCTION_43	CALL_2
0x4003489	          0x4c89e1	                            mov rcx, r12	      1500	convert.c	FUNCTION_43	CALL_2
0x400348c	          0x4889ea	                            mov rdx, rbp	      1500	convert.c	FUNCTION_43	CALL_2
0x400348f	          0x4c89f6	                            mov rsi, r14	      1500	convert.c	FUNCTION_43	CALL_2
0x4003492	          0x4c89ff	                            mov rdi, r15	      1500	convert.c	FUNCTION_43	CALL_2
0x4003495	    0x41b904000000	                              mov r9d, 4	      1500	convert.c	FUNCTION_43	CALL_2
0x400349b	      0xe800000000	                          call 0x40034a0	      1500	convert.c	FUNCTION_43	CALL_2
0x40034a0	        0x4883c408	                              add rsp, 8	      1501	convert.c	FUNCTION_43
0x40034a4	          0x4409e8	                            or eax, r13d	      1500	convert.c	FUNCTION_43	CALL_2
0x40034a7	              0x5b	                                 pop rbx	      1501	convert.c	FUNCTION_43
0x40034a8	              0x5d	                                 pop rbp	      1501	convert.c	FUNCTION_43
0x40034a9	            0x415c	                                 pop r12	      1501	convert.c	FUNCTION_43
0x40034ab	            0x415d	                                 pop r13	      1501	convert.c	FUNCTION_43
0x40034ad	            0x415e	                                 pop r14	      1501	convert.c	FUNCTION_43
0x40034af	            0x415f	                                 pop r15	      1501	convert.c	FUNCTION_43
0x40034b1	              0xc3	                                     ret	      1501	convert.c	FUNCTION_43
convert_to_git_filter_fd	CALL,8:FOR,0:ELSE,0:IF,1:functions,0:WHILE,0:DO,0:SWITCH,0	86
0x40032e0	            0x4156	                                push r14	      1424	convert.c	FUNCTION_39
0x40032e2	            0x4155	                                push r13	      1424	convert.c	FUNCTION_39
0x40032e4	          0x4989fd	                            mov r13, rdi	      1424	convert.c	FUNCTION_39
0x40032e7	            0x4154	                                push r12	      1424	convert.c	FUNCTION_39
0x40032e9	              0x55	                                push rbp	      1424	convert.c	FUNCTION_39
0x40032ea	          0x4189d6	                           mov r14d, edx	      1424	convert.c	FUNCTION_39
0x40032ed	              0x53	                                push rbx	      1424	convert.c	FUNCTION_39
0x40032ee	          0x4889f5	                            mov rbp, rsi	      1424	convert.c	FUNCTION_39
0x40032f1	          0x4889cb	                            mov rbx, rcx	      1424	convert.c	FUNCTION_39
0x40032f4	          0x4589c4	                           mov r12d, r8d	      1424	convert.c	FUNCTION_39
0x40032f7	        0x4883ec30	                           sub rsp, 0x30	      1424	convert.c	FUNCTION_39
0x40032fb	          0x4889e7	                            mov rdi, rsp	      1426	convert.c	FUNCTION_39	CALL_1
0x40032fe	    0x64488b042528	                mov rax, qword fs:[0x28]	      1424	convert.c	FUNCTION_39
0x4003307	      0x4889442428	             mov qword [rsp + 0x28], rax	      1424	convert.c	FUNCTION_39
0x400330c	            0x31c0	                            xor eax, eax	      1424	convert.c	FUNCTION_39
0x400330e	      0xe84ddaffff	                  call sym.convert_attrs	      1426	convert.c	FUNCTION_39	CALL_1
0x4003313	        0x4c8b0c24	                     mov r9, qword [rsp]	      1428	convert.c	FUNCTION_39	CALL_2
0x4003317	          0x4d85c9	                             test r9, r9	      1428	convert.c	FUNCTION_39	CALL_2
0x400331a	     0xf84c4000000	                            je 0x40033e4	      1428	convert.c	FUNCTION_39	CALL_2
0x4003320	      0x4983791800	                cmp qword [r9 + 0x18], 0	      1429	convert.c	FUNCTION_39	CALL_3
0x4003325	     0xf8495000000	                            je 0x40033c0	      1429	convert.c	FUNCTION_39	CALL_3
0x400332b	            0x6a00	                                  push 0	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400332d	            0x6a01	                                  push 1	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400332f	            0x31f6	                            xor esi, esi	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003331	          0x4489f1	                           mov ecx, r14d	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003334	            0x31d2	                            xor edx, edx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003336	          0x4989d8	                             mov r8, rbx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003339	          0x4889ef	                            mov rdi, rbp	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400333c	      0xe8cfdeffff	                   call sym.apply_filter	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003341	            0x85c0	                           test eax, eax	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003343	              0x59	                                 pop rcx	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003344	              0x5e	                                 pop rsi	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x4003345	     0xf84b7000000	                            je 0x4003402	      1431	convert.c	FUNCTION_39	IF_1	CALL_4
0x400334b	      0x4c8b442418	              mov r8, qword [rsp + 0x18]	      1434	convert.c	FUNCTION_39	CALL_6
0x4003350	        0x488b5308	                mov rdx, qword [rbx + 8]	      1434	convert.c	FUNCTION_39	CALL_6
0x4003354	          0x4589e1	                           mov r9d, r12d	      1434	convert.c	FUNCTION_39	CALL_6
0x4003357	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1434	convert.c	FUNCTION_39	CALL_6
0x400335b	          0x4889d9	                            mov rcx, rbx	      1434	convert.c	FUNCTION_39	CALL_6
0x400335e	          0x4889ef	                            mov rdi, rbp	      1434	convert.c	FUNCTION_39	CALL_6
0x4003361	      0xe84af1ffff	                  call sym.encode_to_git	      1434	convert.c	FUNCTION_39	CALL_6
0x4003366	        0x4883ec08	                              sub rsp, 8	      1435	convert.c	FUNCTION_39	CALL_7
0x400336a	        0x488b4b08	                mov rcx, qword [rbx + 8]	      1435	convert.c	FUNCTION_39	CALL_7
0x400336e	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	      1435	convert.c	FUNCTION_39	CALL_7
0x4003372	            0x4154	                                push r12	      1435	convert.c	FUNCTION_39	CALL_7
0x4003374	      0x448b4c241c	            mov r9d, dword [rsp + 0x1c] 	      1435	convert.c	FUNCTION_39	CALL_7
0x4003379	          0x4989d8	                             mov r8, rbx	      1435	convert.c	FUNCTION_39	CALL_7
0x400337c	          0x4889ee	                            mov rsi, rbp	      1435	convert.c	FUNCTION_39	CALL_7
0x400337f	          0x4c89ef	                            mov rdi, r13	      1435	convert.c	FUNCTION_39	CALL_7
0x4003382	      0xe869f5ffff	                    call sym.crlf_to_git	      1435	convert.c	FUNCTION_39	CALL_7
0x4003387	        0x8b4c2420	            mov ecx, dword [rsp + 0x20] 	      1436	convert.c	FUNCTION_39	CALL_8
0x400338b	        0x488b7308	                mov rsi, qword [rbx + 8]	      1436	convert.c	FUNCTION_39	CALL_8
0x400338f	          0x4889da	                            mov rdx, rbx	      1436	convert.c	FUNCTION_39	CALL_8
0x4003392	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	      1436	convert.c	FUNCTION_39	CALL_8
0x4003396	      0xe8f5eaffff	           call sym.ident_to_git.isra.14	      1436	convert.c	FUNCTION_39	CALL_8
0x400339b	              0x58	                                 pop rax	      1437	convert.c	FUNCTION_39
0x400339c	              0x5a	                                 pop rdx	      1437	convert.c	FUNCTION_39
0x400339d	      0x488b442428	            mov rax, qword [rsp + 0x28] 	      1437	convert.c	FUNCTION_39
0x40033a2	    0x644833042528	                xor rax, qword fs:[0x28]	      1437	convert.c	FUNCTION_39
0x40033ab	            0x7550	                           jne 0x40033fd	      1437	convert.c	FUNCTION_39
0x40033ad	        0x4883c430	                           add rsp, 0x30	      1437	convert.c	FUNCTION_39
0x40033b1	              0x5b	                                 pop rbx	      1437	convert.c	FUNCTION_39
0x40033b2	              0x5d	                                 pop rbp	      1437	convert.c	FUNCTION_39
0x40033b3	            0x415c	                                 pop r12	      1437	convert.c	FUNCTION_39
0x40033b5	            0x415d	                                 pop r13	      1437	convert.c	FUNCTION_39
0x40033b7	            0x415e	                                 pop r14	      1437	convert.c	FUNCTION_39
0x40033b9	              0xc3	                                     ret	      1437	convert.c	FUNCTION_39
0x40033ba	    0x660f1f440000	                    nop word [rax + rax]	      1437	convert.c	FUNCTION_39
0x40033c0	      0x4983792000	                cmp qword [r9 + 0x20], 0	      1429	convert.c	FUNCTION_39	CALL_3
0x40033c5	     0xf8560ffffff	                           jne 0x400332b	      1429	convert.c	FUNCTION_39	CALL_3
0x40033cb	      0xb900000000	                              mov ecx, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x40033d0	      0xba95050000	                          mov edx, 0x595	      1429	convert.c	FUNCTION_39	CALL_3
0x40033d5	      0xbe00000000	                              mov esi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x40033da	      0xbf00000000	                              mov edi, 0	      1429	convert.c	FUNCTION_39	CALL_3
0x40033df	      0xe800000000	                          call 0x40033e4	      1429	convert.c	FUNCTION_39	CALL_3
0x40033e4	      0xb900000000	                              mov ecx, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x40033e9	      0xba94050000	                          mov edx, 0x594	      1428	convert.c	FUNCTION_39	CALL_2
0x40033ee	      0xbe00000000	                              mov esi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x40033f3	      0xbf00000000	                              mov edi, 0	      1428	convert.c	FUNCTION_39	CALL_2
0x40033f8	      0xe800000000	                          call 0x40033fd	      1428	convert.c	FUNCTION_39	CALL_2
0x40033fd	      0xe800000000	                          call 0x4003402	      1437	convert.c	FUNCTION_39
0x4003402	        0x488b0424	                    mov rax, qword [rsp]	      1432	convert.c	FUNCTION_39	CALL_5
0x4003406	          0x4889ee	                            mov rsi, rbp	      1432	convert.c	FUNCTION_39	CALL_5
0x4003409	      0xbf00000000	                              mov edi, 0	      1432	convert.c	FUNCTION_39	CALL_5
0x400340e	          0x488b10	                    mov rdx, qword [rax]	      1432	convert.c	FUNCTION_39	CALL_5
0x4003411	            0x31c0	                            xor eax, eax	      1432	convert.c	FUNCTION_39	CALL_5
0x4003413	      0xe800000000	                          call 0x4003418	      1432	convert.c	FUNCTION_39	CALL_5
null_filter_fn	CALL,1:FOR,0:ELSE,0:IF,3:functions,0:WHILE,0:DO,0:SWITCH,0	26
0x4000ba0	          0x4885f6	                           test rsi, rsi	      1529	convert.c	FUNCTION_44	IF_1
0x4000ba3	            0x743b	                            je 0x4000be0	      1529	convert.c	FUNCTION_44	IF_1
0x4000ba5	            0x4154	                                push r12	      1526	convert.c	FUNCTION_44
0x4000ba7	              0x55	                                push rbp	      1526	convert.c	FUNCTION_44
0x4000ba8	              0x53	                                push rbx	      1526	convert.c	FUNCTION_44
0x4000ba9	          0x498b18	                     mov rbx, qword [r8]	      1532	convert.c	FUNCTION_44	IF_2
0x4000bac	          0x488b02	                    mov rax, qword [rdx]	      1531	convert.c	FUNCTION_44
0x4000baf	          0x4839d8	                            cmp rax, rbx	      1531	convert.c	FUNCTION_44
0x4000bb2	        0x480f46d8	                         cmovbe rbx, rax	      1531	convert.c	FUNCTION_44
0x4000bb6	          0x4885db	                           test rbx, rbx	      1534	convert.c	FUNCTION_44	IF_3
0x4000bb9	            0x7419	                            je 0x4000bd4	      1534	convert.c	FUNCTION_44	IF_3
0x4000bbb	          0x4989d4	                            mov r12, rdx	      1534	convert.c	FUNCTION_44	IF_3
0x4000bbe	          0x4889cf	                            mov rdi, rcx	      1534	convert.c	FUNCTION_44	IF_3
0x4000bc1	          0x4889da	                            mov rdx, rbx	        59	string3.h	FUNCTION_104	CALL_3
0x4000bc4	          0x4c89c5	                             mov rbp, r8	        59	string3.h	FUNCTION_104	CALL_3
0x4000bc7	      0xe800000000	                          call 0x4000bcc	        59	string3.h	FUNCTION_104	CALL_3
0x4000bcc	        0x49291c24	                    sub qword [r12], rbx	      1536	convert.c	FUNCTION_44	IF_3
0x4000bd0	        0x48295d00	                    sub qword [rbp], rbx	      1537	convert.c	FUNCTION_44	IF_3
0x4000bd4	              0x5b	                                 pop rbx	      1540	convert.c	FUNCTION_44
0x4000bd5	            0x31c0	                            xor eax, eax	      1540	convert.c	FUNCTION_44
0x4000bd7	              0x5d	                                 pop rbp	      1540	convert.c	FUNCTION_44
0x4000bd8	            0x415c	                                 pop r12	      1540	convert.c	FUNCTION_44
0x4000bda	              0xc3	                                     ret	      1540	convert.c	FUNCTION_44
0x4000bdb	       0xf1f440000	                   nop dword [rax + rax]	      1540	convert.c	FUNCTION_44
0x4000be0	            0x31c0	                            xor eax, eax	      1540	convert.c	FUNCTION_44
0x4000be2	              0xc3	                                     ret	      1540	convert.c	FUNCTION_44
