cmd_reset	WHILE,0:SWITCH,0:CALL,70:ELSE,4:DO,0:functions,0:FOR,0:IF,26	552
0x40004d0	            0x4156	                                push r14	       281	reset.c	FUNCTION_11
0x40004d2	            0x4155	                                push r13	       281	reset.c	FUNCTION_11
0x40004d4	      0xb950000000	                           mov ecx, 0x50	       288	reset.c	FUNCTION_11
0x40004d9	            0x4154	                                push r12	       281	reset.c	FUNCTION_11
0x40004db	              0x55	                                push rbp	       281	reset.c	FUNCTION_11
0x40004dc	          0x4889f5	                            mov rbp, rsi	       281	reset.c	FUNCTION_11
0x40004df	              0x53	                                push rbx	       281	reset.c	FUNCTION_11
0x40004e0	            0x89fb	                            mov ebx, edi	       281	reset.c	FUNCTION_11
0x40004e2	            0x31f6	                            xor esi, esi	       308	reset.c	FUNCTION_11	CALL_18
0x40004e4	          0x4989d4	                            mov r12, rdx	       281	reset.c	FUNCTION_11
0x40004e7	    0x4881ecd00400	                          sub rsp, 0x4d0	       281	reset.c	FUNCTION_11
0x40004ee	    0x64488b042528	                mov rax, qword fs:[0x28]	       281	reset.c	FUNCTION_11
0x40004f7	    0x48898424c804	            mov qword [rsp + 0x4c8], rax	       281	reset.c	FUNCTION_11
0x40004ff	            0x31c0	                            xor eax, eax	       281	reset.c	FUNCTION_11
0x4000501	    0x488dbc244002	                  lea rdi, [rsp + 0x240]	       288	reset.c	FUNCTION_11
0x4000509	    0xc744241c0500	               mov dword [rsp + 0x1c], 5	       282	reset.c	FUNCTION_11
0x4000511	    0xc74424200000	               mov dword [rsp + 0x20], 0	       282	reset.c	FUNCTION_11
0x4000519	    0xc74424240000	               mov dword [rsp + 0x24], 0	       283	reset.c	FUNCTION_11
0x4000521	    0xc74424280000	               mov dword [rsp + 0x28], 0	       287	reset.c	FUNCTION_11
0x4000529	          0xf348ab	              rep stosq qword [rdi], rax	       288	reset.c	FUNCTION_11
0x400052c	      0x488d442420	                   lea rax, [rsp + 0x20]	       288	reset.c	FUNCTION_11
0x4000531	    0xc78424400200	              mov dword [rsp + 0x240], 6	       288	reset.c	FUNCTION_11
0x400053c	    0xc78424440200	          mov dword [rsp + 0x244], 0x71 	       288	reset.c	FUNCTION_11
0x4000547	    0x48c784244802	              mov qword [rsp + 0x248], 0	       288	reset.c	FUNCTION_11
0x4000553	    0x48c784246002	              mov qword [rsp + 0x260], 0	       288	reset.c	FUNCTION_11
0x400055f	      0xbf00000000	                              mov edi, 0	       308	reset.c	FUNCTION_11	CALL_18
0x4000564	    0x488984245002	            mov qword [rsp + 0x250], rax	       288	reset.c	FUNCTION_11
0x400056c	      0x488d44241c	                   lea rax, [rsp + 0x1c]	       288	reset.c	FUNCTION_11
0x4000571	    0xc78424680200	              mov dword [rsp + 0x268], 2	       288	reset.c	FUNCTION_11
0x400057c	    0xc78424800200	              mov dword [rsp + 0x280], 7	       288	reset.c	FUNCTION_11
0x4000587	    0x48c784248802	              mov qword [rsp + 0x288], 0	       288	reset.c	FUNCTION_11
0x4000593	    0x488984249002	            mov qword [rsp + 0x290], rax	       288	reset.c	FUNCTION_11
0x400059b	    0x48898424d002	            mov qword [rsp + 0x2d0], rax	       288	reset.c	FUNCTION_11
0x40005a3	    0x488984241003	            mov qword [rsp + 0x310], rax	       288	reset.c	FUNCTION_11
0x40005ab	    0x48c78424a002	              mov qword [rsp + 0x2a0], 0	       288	reset.c	FUNCTION_11
0x40005b7	    0xc78424a80200	              mov dword [rsp + 0x2a8], 2	       288	reset.c	FUNCTION_11
0x40005c2	    0xc78424c00200	              mov dword [rsp + 0x2c0], 7	       288	reset.c	FUNCTION_11
0x40005cd	    0x48c78424c802	              mov qword [rsp + 0x2c8], 0	       288	reset.c	FUNCTION_11
0x40005d9	    0x48c78424e002	              mov qword [rsp + 0x2e0], 0	       288	reset.c	FUNCTION_11
0x40005e5	    0xc78424e80200	              mov dword [rsp + 0x2e8], 2	       288	reset.c	FUNCTION_11
0x40005f0	    0x48c78424f802	              mov qword [rsp + 0x2f8], 1	       288	reset.c	FUNCTION_11
0x40005fc	    0xc78424000300	              mov dword [rsp + 0x300], 7	       288	reset.c	FUNCTION_11
0x4000607	    0x48c784240803	              mov qword [rsp + 0x308], 0	       288	reset.c	FUNCTION_11
0x4000613	    0x48c784242003	              mov qword [rsp + 0x320], 0	       288	reset.c	FUNCTION_11
0x400061f	    0x488984245003	            mov qword [rsp + 0x350], rax	       288	reset.c	FUNCTION_11
0x4000627	    0x488984249003	            mov qword [rsp + 0x390], rax	       288	reset.c	FUNCTION_11
0x400062f	      0x488d442424	                   lea rax, [rsp + 0x24]	       288	reset.c	FUNCTION_11
0x4000634	    0xc78424280300	              mov dword [rsp + 0x328], 2	       288	reset.c	FUNCTION_11
0x400063f	    0x48c784243803	              mov qword [rsp + 0x338], 2	       288	reset.c	FUNCTION_11
0x400064b	    0xc78424400300	              mov dword [rsp + 0x340], 7	       288	reset.c	FUNCTION_11
0x4000656	    0x488984241004	            mov qword [rsp + 0x410], rax	       288	reset.c	FUNCTION_11
0x400065e	      0x488d442428	                   lea rax, [rsp + 0x28]	       288	reset.c	FUNCTION_11
0x4000663	    0x48c784244803	              mov qword [rsp + 0x348], 0	       288	reset.c	FUNCTION_11
0x400066f	    0x48c784246003	              mov qword [rsp + 0x360], 0	       288	reset.c	FUNCTION_11
0x400067b	    0xc78424680300	              mov dword [rsp + 0x368], 2	       288	reset.c	FUNCTION_11
0x4000686	    0x488984245004	            mov qword [rsp + 0x450], rax	       288	reset.c	FUNCTION_11
0x400068e	    0x48c784247803	              mov qword [rsp + 0x378], 3	       288	reset.c	FUNCTION_11
0x400069a	    0xc78424800300	              mov dword [rsp + 0x380], 7	       288	reset.c	FUNCTION_11
0x40006a5	    0x48c784248803	              mov qword [rsp + 0x388], 0	       288	reset.c	FUNCTION_11
0x40006b1	    0x48c78424a003	              mov qword [rsp + 0x3a0], 0	       288	reset.c	FUNCTION_11
0x40006bd	    0xc78424a80300	              mov dword [rsp + 0x3a8], 2	       288	reset.c	FUNCTION_11
0x40006c8	    0x48c78424b803	              mov qword [rsp + 0x3b8], 4	       288	reset.c	FUNCTION_11
0x40006d4	    0xc78424c00300	           mov dword [rsp + 0x3c0], 0xc 	       288	reset.c	FUNCTION_11
0x40006df	    0x48c78424c803	              mov qword [rsp + 0x3c8], 0	       288	reset.c	FUNCTION_11
0x40006eb	    0x48c78424d803	              mov qword [rsp + 0x3d8], 0	       288	reset.c	FUNCTION_11
0x40006f7	    0x48c78424e003	              mov qword [rsp + 0x3e0], 0	       288	reset.c	FUNCTION_11
0x4000703	    0xc78424e80300	              mov dword [rsp + 0x3e8], 1	       288	reset.c	FUNCTION_11
0x400070e	    0x48c78424f003	              mov qword [rsp + 0x3f0], 0	       288	reset.c	FUNCTION_11
0x400071a	    0xc78424000400	              mov dword [rsp + 0x400], 7	       288	reset.c	FUNCTION_11
0x4000725	    0xc78424040400	          mov dword [rsp + 0x404], 0x70 	       288	reset.c	FUNCTION_11
0x4000730	    0x48c784240804	              mov qword [rsp + 0x408], 0	       288	reset.c	FUNCTION_11
0x400073c	    0x48c784242004	              mov qword [rsp + 0x420], 0	       288	reset.c	FUNCTION_11
0x4000748	    0xc78424280400	              mov dword [rsp + 0x428], 2	       288	reset.c	FUNCTION_11
0x4000753	    0x48c784243804	              mov qword [rsp + 0x438], 1	       288	reset.c	FUNCTION_11
0x400075f	    0xc78424400400	              mov dword [rsp + 0x440], 7	       288	reset.c	FUNCTION_11
0x400076a	    0xc78424440400	          mov dword [rsp + 0x444], 0x4e 	       288	reset.c	FUNCTION_11
0x4000775	    0x48c784244804	              mov qword [rsp + 0x448], 0	       288	reset.c	FUNCTION_11
0x4000781	    0x48c784246004	              mov qword [rsp + 0x460], 0	       288	reset.c	FUNCTION_11
0x400078d	    0xc78424680400	              mov dword [rsp + 0x468], 2	       288	reset.c	FUNCTION_11
0x4000798	    0x48c784247804	              mov qword [rsp + 0x478], 1	       288	reset.c	FUNCTION_11
0x40007a4	      0xe800000000	                          call 0x40007a9	       308	reset.c	FUNCTION_11	CALL_18
0x40007a9	    0x488d8c244002	                  lea rcx, [rsp + 0x240]	       310	reset.c	FUNCTION_11	CALL_19
0x40007b1	            0x89df	                            mov edi, ebx	       310	reset.c	FUNCTION_11	CALL_19
0x40007b3	    0x41b901000000	                              mov r9d, 1	       310	reset.c	FUNCTION_11	CALL_19
0x40007b9	    0x41b800000000	                              mov r8d, 0	       310	reset.c	FUNCTION_11	CALL_19
0x40007bf	          0x4c89e2	                            mov rdx, r12	       310	reset.c	FUNCTION_11	CALL_19
0x40007c2	          0x4889ee	                            mov rsi, rbp	       310	reset.c	FUNCTION_11	CALL_19
0x40007c5	      0xe800000000	                          call 0x40007ca	       310	reset.c	FUNCTION_11	CALL_19
0x40007ca	        0x488b5d00	                    mov rbx, qword [rbp]	       213	reset.c	FUNCTION_8	IF_1
0x40007ce	      0x448b6c2424	           mov r13d, dword [rsp + 0x24] 	       312	reset.c	FUNCTION_11	CALL_20
0x40007d3	          0x4885db	                           test rbx, rbx	       213	reset.c	FUNCTION_8	IF_1
0x40007d6	     0xf8474050000	                            je 0x4000d50	       213	reset.c	FUNCTION_8	IF_1
0x40007dc	          0x803b2d	                    cmp byte [rbx], 0x2d	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007df	     0xf851b010000	                           jne 0x4000900	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007e5	        0x807b012d	                cmp byte [rbx + 1], 0x2d	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007e9	     0xf8511010000	                           jne 0x4000900	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007ef	        0x807b0200	                   cmp byte [rbx + 2], 0	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007f3	     0xf8507010000	                           jne 0x4000900	       214	reset.c	FUNCTION_8	IF_1	IF_2	CALL_1
0x40007f9	        0x4883c508	                              add rbp, 8	       215	reset.c	FUNCTION_8	IF_1	IF_2
0x40007fd	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x4000802	      0xbf00000000	                              mov edi, 0	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x4000807	      0xe800000000	                          call 0x400080c	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x400080c	            0x85c0	                           test eax, eax	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x400080e	     0xf8824070000	                            js 0x4000f38	       240	reset.c	FUNCTION_8	IF_5	CALL_7
0x4000814	        0x4183fd01	                             cmp r13d, 1	       243	reset.c	FUNCTION_8	CALL_10
0x4000818	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       243	reset.c	FUNCTION_8	CALL_10
0x400081d	          0x4c89e1	                            mov rcx, r12	       243	reset.c	FUNCTION_8	CALL_10
0x4000820	            0x19d2	                            sbb edx, edx	       243	reset.c	FUNCTION_8	CALL_10
0x4000822	          0x4989e8	                             mov r8, rbp	       243	reset.c	FUNCTION_8	CALL_10
0x4000825	            0x31f6	                            xor esi, esi	       243	reset.c	FUNCTION_8	CALL_10
0x4000827	          0x83e2f0	                     and edx, 0xfffffff0	       243	reset.c	FUNCTION_8	CALL_10
0x400082a	          0x83c212	                           add edx, 0x12	       243	reset.c	FUNCTION_8	CALL_10
0x400082d	      0xe800000000	                          call 0x4000832	       243	reset.c	FUNCTION_8	CALL_10
0x4000832	      0xbf00000000	                              mov edi, 0	       314	reset.c	FUNCTION_11	CALL_22
0x4000837	      0xb905000000	                              mov ecx, 5	       314	reset.c	FUNCTION_11	CALL_22
0x400083c	          0x4889de	                            mov rsi, rbx	       314	reset.c	FUNCTION_11	CALL_22
0x400083f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       314	reset.c	FUNCTION_11	CALL_22
0x4000841	     0xf8419030000	                            je 0x4000b60	       314	reset.c	FUNCTION_11	CALL_22
0x4000847	        0x8b4c2440	            mov ecx, dword [rsp + 0x40] 	       318	reset.c	FUNCTION_11	ELSE_1	IF_2
0x400084b	            0x85c9	                           test ecx, ecx	       318	reset.c	FUNCTION_11	ELSE_1	IF_2
0x400084d	     0xf855d030000	                           jne 0x4000bb0	       318	reset.c	FUNCTION_11	ELSE_1	IF_2
0x4000853	    0x488db424e001	                  lea rsi, [rsp + 0x1e0]	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x400085b	          0x4889df	                            mov rdi, rbx	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x400085e	      0xe800000000	                          call 0x4000863	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x4000863	            0x85c0	                           test eax, eax	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x4000865	     0xf8575070000	                           jne 0x4000fe0	       320	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_3	CALL_24
0x400086b	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       322	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_27
0x4000873	      0xe800000000	                          call 0x4000878	       322	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_27
0x4000878	          0x4885c0	                           test rax, rax	       323	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_4
0x400087b	     0xf845d030000	                            je 0x4000bde	       323	reset.c	FUNCTION_11	ELSE_1	IF_2	IF_4
0x4000881	        0x488b5004	                mov rdx, qword [rax + 4]	        53	string3.h	FUNCTION_12	CALL_3
0x4000885	          0x4531e4	                          xor r12d, r12d	        53	string3.h	FUNCTION_12	CALL_3
0x4000888	    0x48899424e001	            mov qword [rsp + 0x1e0], rdx	        53	string3.h	FUNCTION_12	CALL_3
0x4000890	        0x488b500c	              mov rdx, qword [rax + 0xc]	        53	string3.h	FUNCTION_12	CALL_3
0x4000894	    0x48899424e801	            mov qword [rsp + 0x1e8], rdx	        53	string3.h	FUNCTION_12	CALL_3
0x400089c	          0x8b4014	            mov eax, dword [rax + 0x14] 	        53	string3.h	FUNCTION_12	CALL_3
0x400089f	    0x898424f00100	            mov dword [rsp + 0x1f0], eax	        53	string3.h	FUNCTION_12	CALL_3
0x40008a6	      0x448b4c2424	            mov r9d, dword [rsp + 0x24] 	       336	reset.c	FUNCTION_11	IF_7
0x40008ab	          0x4585c9	                           test r9d, r9d	       336	reset.c	FUNCTION_11	IF_7
0x40008ae	     0xf84bc000000	                            je 0x4000970	       336	reset.c	FUNCTION_11	IF_7
0x40008b4	      0x837c241c05	               cmp dword [rsp + 0x1c], 5	       337	reset.c	FUNCTION_11	IF_7	IF_8
0x40008b9	     0xf8592060000	                           jne 0x4000f51	       337	reset.c	FUNCTION_11	IF_7	IF_8
0x40008bf	      0x488d542440	                   lea rdx, [rsp + 0x40]	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x40008c4	      0xbe00000000	                              mov esi, 0	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x40008c9	          0x4889df	                            mov rdi, rbx	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x40008cc	      0xe800000000	                          call 0x40008d1	       339	reset.c	FUNCTION_11	IF_7	CALL_40
0x40008d1	    0x488b8c24c804	           mov rcx, qword [rsp + 0x4c8] 	       405	reset.c	FUNCTION_11
0x40008d9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       405	reset.c	FUNCTION_11
0x40008e2	     0xf8564060000	                           jne 0x4000f4c	       405	reset.c	FUNCTION_11
0x40008e8	    0x4881c4d00400	                          add rsp, 0x4d0	       405	reset.c	FUNCTION_11
0x40008ef	              0x5b	                                 pop rbx	       405	reset.c	FUNCTION_11
0x40008f0	              0x5d	                                 pop rbp	       405	reset.c	FUNCTION_11
0x40008f1	            0x415c	                                 pop r12	       405	reset.c	FUNCTION_11
0x40008f3	            0x415d	                                 pop r13	       405	reset.c	FUNCTION_11
0x40008f5	            0x415e	                                 pop r14	       405	reset.c	FUNCTION_11
0x40008f7	              0xc3	                                     ret	       405	reset.c	FUNCTION_11
0x40008f8	     0xf1f84000000	                   nop dword [rax + rax]	       405	reset.c	FUNCTION_11
0x4000900	        0x488b4508	                mov rax, qword [rbp + 8]	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000904	          0x4885c0	                           test rax, rax	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000907	     0xf84e3050000	                            je 0x4000ef0	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400090d	          0x80382d	                    cmp byte [rax], 0x2d	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000910	            0x751e	                           jne 0x4000930	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000912	        0x8078012d	                cmp byte [rax + 1], 0x2d	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000916	            0x7518	                           jne 0x4000930	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x4000918	        0x80780200	                   cmp byte [rax + 2], 0	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400091c	            0x7512	                           jne 0x4000930	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400091e	        0x4883c510	                           add rbp, 0x10	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x4000922	      0xe9dbfeffff	                           jmp 0x4000802	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x4000927	    0x660f1f840000	                    nop word [rax + rax]	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x4000930	    0x4c8db4242002	                  lea r14, [rsp + 0x220]	       218	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3
0x4000938	          0x4889df	                            mov rdi, rbx	       216	reset.c	FUNCTION_8	IF_1	ELSE_1	IF_3	CALL_2
0x400093b	          0x4c89f6	                            mov rsi, r14	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x400093e	      0xe800000000	                          call 0x4000943	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x4000943	            0x85c0	                           test eax, eax	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x4000945	     0xf84b5020000	                            je 0x4000c00	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x400094b	        0x488b7d00	                    mov rdi, qword [rbp]	       226	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_4
0x400094f	          0x4889fe	                            mov rsi, rdi	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x4000952	      0xba01000000	                              mov edx, 1	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x4000957	          0x4c89e7	                            mov rdi, r12	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x400095a	      0xe800000000	                          call 0x400095f	       235	reset.c	FUNCTION_8	IF_1	ELSE_3	CALL_6
0x400095f	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x4000964	      0xe999feffff	                           jmp 0x4000802	       199	reset.c	FUNCTION_8
0x4000969	     0xf1f80000000	                         nop dword [rax]	       199	reset.c	FUNCTION_8
0x4000970	      0x448b442440	            mov r8d, dword [rsp + 0x40] 	       345	reset.c	FUNCTION_11	IF_9
0x4000975	          0x4585c0	                           test r8d, r8d	       345	reset.c	FUNCTION_11	IF_9
0x4000978	     0xf84b5010000	                            je 0x4000b33	       345	reset.c	FUNCTION_11	IF_9
0x400097e	      0x486344241c	         movsxd rax, dword [rsp + 0x1c] 	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x4000983	            0x85c0	                           test eax, eax	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x4000985	     0xf848d010000	                            je 0x4000b18	       346	reset.c	FUNCTION_11	IF_9	IF_10
0x400098b	          0x83f805	                              cmp eax, 5	       348	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11
0x400098e	     0xf8526060000	                           jne 0x4000fba	       348	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11
0x4000994	    0xc744241c0000	               mov dword [rsp + 0x1c], 0	       353	reset.c	FUNCTION_11	IF_12
0x400099c	      0xe800000000	                          call 0x40009a1	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x40009a1	          0x4885c0	                           test rax, rax	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x40009a4	            0x7405	                            je 0x40009ab	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x40009a6	      0xe800000000	                          call 0x40009ab	       356	reset.c	FUNCTION_11	CALL_47
0x40009ab	      0x48636c241c	         movsxd rbp, dword [rsp + 0x1c] 	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x40009b0	            0x85ed	                           test ebp, ebp	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x40009b2	     0xf84a8030000	                            je 0x4000d60	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x40009b8	        0x8b542428	            mov edx, dword [rsp + 0x28] 	       362	reset.c	FUNCTION_11	IF_15
0x40009bc	            0x85d2	                           test edx, edx	       362	reset.c	FUNCTION_11	IF_15
0x40009be	     0xf85c2030000	                           jne 0x4000d86	       362	reset.c	FUNCTION_11	IF_15
0x40009c4	          0x83fd01	                              cmp ebp, 1	       368	reset.c	FUNCTION_11	IF_16
0x40009c7	     0xf845f020000	                            je 0x4000c2c	       368	reset.c	FUNCTION_11	IF_16
0x40009cd	          0x83fd04	                              cmp ebp, 4	       368	reset.c	FUNCTION_11	IF_16
0x40009d0	     0xf8456020000	                            je 0x4000c2c	       368	reset.c	FUNCTION_11	IF_16
0x40009d6	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x40009db	      0xbe01000000	                              mov esi, 1	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x40009e0	    0x48c744243000	               mov qword [rsp + 0x30], 0	       372	reset.c	FUNCTION_11	IF_17
0x40009e9	      0xe800000000	                          call 0x40009ee	       373	reset.c	FUNCTION_11	IF_17	CALL_55
0x40009ee	        0x8b74241c	            mov esi, dword [rsp + 0x1c] 	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x40009f2	            0x85f6	                           test esi, esi	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x40009f4	     0xf85a6030000	                           jne 0x4000da0	       374	reset.c	FUNCTION_11	IF_17	IF_18
0x40009fa	      0x837c242001	               cmp dword [rsp + 0x20], 1	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x40009ff	        0x8b442428	            mov eax, dword [rsp + 0x28] 	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000a03	      0x488d6c2460	                   lea rbp, [rsp + 0x60]	        90	string3.h	FUNCTION_15	CALL_6
0x4000a08	      0xb930000000	                           mov ecx, 0x30	        90	string3.h	FUNCTION_15	CALL_6
0x4000a0d	    0x4c8db4247001	                  lea r14, [rsp + 0x170]	       157	reset.c	FUNCTION_5	CALL_2
0x4000a15	      0x488d742440	                   lea rsi, [rsp + 0x40]	       157	reset.c	FUNCTION_5	CALL_2
0x4000a1a	          0x4889ef	                            mov rdi, rbp	        90	string3.h	FUNCTION_15	CALL_6
0x4000a1d	        0x8944242c	             mov dword [rsp + 0x2c], eax	        90	string3.h	FUNCTION_15	CALL_6
0x4000a21	          0x4519ed	                          sbb r13d, r13d	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000a24	            0x31c0	                            xor eax, eax	        90	string3.h	FUNCTION_15	CALL_6
0x4000a26	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_15	CALL_6
0x4000a29	          0x4c89f7	                            mov rdi, r14	       157	reset.c	FUNCTION_5	CALL_2
0x4000a2c	        0x4183e51c	                          and r13d, 0x1c	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000a30	        0x4183c504	                             add r13d, 4	       375	reset.c	FUNCTION_11	IF_17	IF_18
0x4000a34	      0xe800000000	                          call 0x4000a39	       157	reset.c	FUNCTION_5	CALL_2
0x4000a39	      0x488d44242c	                   lea rax, [rsp + 0x2c]	       160	reset.c	FUNCTION_5
0x4000a3e	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a46	          0x4889ee	                            mov rsi, rbp	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a49	    0x808c249b0000	                 or byte [rsp + 0x9b], 4	       161	reset.c	FUNCTION_5
0x4000a51	    0xc78424c00000	         mov dword [rsp + 0xc0], 0x1000 	       158	reset.c	FUNCTION_5
0x4000a5c	    0x48c78424a801	              mov qword [rsp + 0x1a8], 0	       159	reset.c	FUNCTION_5
0x4000a68	    0x48898424b001	            mov qword [rsp + 0x1b0], rax	       160	reset.c	FUNCTION_5
0x4000a70	      0xe800000000	                          call 0x4000a75	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a75	            0x89c2	                            mov edx, eax	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a77	      0xb801000000	                              mov eax, 1	       377	reset.c	FUNCTION_11	IF_17	IF_18	IF_19
0x4000a7c	            0x85d2	                           test edx, edx	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a7e	     0xf854dfeffff	                           jne 0x40008d1	       163	reset.c	FUNCTION_5	IF_1	CALL_3
0x4000a84	          0x4889ef	                            mov rdi, rbp	       165	reset.c	FUNCTION_5	CALL_4
0x4000a87	      0xe800000000	                          call 0x4000a8c	       165	reset.c	FUNCTION_5	CALL_4
0x4000a8c	          0x4889ef	                            mov rdi, rbp	       166	reset.c	FUNCTION_5	CALL_5
0x4000a8f	      0xe800000000	                          call 0x4000a94	       166	reset.c	FUNCTION_5	CALL_5
0x4000a94	          0x4c89f7	                            mov rdi, r14	       167	reset.c	FUNCTION_5	CALL_6
0x4000a97	      0xe800000000	                          call 0x4000a9c	       167	reset.c	FUNCTION_5	CALL_6
0x4000a9c	      0xe800000000	                          call 0x4000aa1	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000aa1	          0x4885c0	                           test rax, rax	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000aa4	            0x7425	                            je 0x4000acb	       378	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_57
0x4000aa6	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x4000aab	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x4000ab0	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x4000ab2	      0xe800000000	                          call 0x4000ab7	        54	gettext.h	FUNCTION_26	CALL_2
0x4000ab7	            0x31c9	                            xor ecx, ecx	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000ab9	          0x4989c0	                             mov r8, rax	        54	gettext.h	FUNCTION_26	CALL_2
0x4000abc	            0x31d2	                            xor edx, edx	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000abe	          0x4489ee	                           mov esi, r13d	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000ac1	      0xbf00000000	                              mov edi, 0	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000ac6	      0xe800000000	                          call 0x4000acb	       379	reset.c	FUNCTION_11	IF_17	IF_18	IF_20	CALL_58
0x4000acb	      0x488d742430	                   lea rsi, [rsp + 0x30]	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000ad0	      0xba01000000	                              mov edx, 1	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000ad5	      0xbf00000000	                              mov edi, 0	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000ada	      0xe800000000	                          call 0x4000adf	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000adf	            0x85c0	                           test eax, eax	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000ae1	     0xf859e040000	                           jne 0x4000f85	       389	reset.c	FUNCTION_11	IF_17	IF_23	CALL_64
0x4000ae7	        0x8b542440	            mov edx, dword [rsp + 0x40] 	       393	reset.c	FUNCTION_11	IF_24
0x4000aeb	          0x4531ed	                          xor r13d, r13d	       282	reset.c	FUNCTION_11
0x4000aee	          0x4109d4	                            or r12d, edx	       393	reset.c	FUNCTION_11	IF_24
0x4000af1	     0xf8479010000	                            je 0x4000c70	       393	reset.c	FUNCTION_11	IF_24
0x4000af7	            0x85d2	                           test edx, edx	       401	reset.c	FUNCTION_11	IF_26
0x4000af9	          0x4489e8	                           mov eax, r13d	       404	reset.c	FUNCTION_11
0x4000afc	     0xf85cffdffff	                           jne 0x40008d1	       401	reset.c	FUNCTION_11	IF_26
0x4000b02	      0x44896c240c	             mov dword [rsp + 0xc], r13d	       401	reset.c	FUNCTION_11	IF_26
0x4000b07	      0xe800000000	                          call 0x4000b0c	       402	reset.c	FUNCTION_11	CALL_70
0x4000b0c	        0x8b44240c	              mov eax, dword [rsp + 0xc]	       402	reset.c	FUNCTION_11	CALL_70
0x4000b10	      0xe9bcfdffff	                           jmp 0x40008d1	       402	reset.c	FUNCTION_11	CALL_70
0x4000b15	           0xf1f00	                         nop dword [rax]	       402	reset.c	FUNCTION_11	CALL_70
0x4000b18	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x4000b1a	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x4000b1f	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x4000b24	      0xe800000000	                          call 0x4000b29	        54	gettext.h	FUNCTION_26	CALL_2
0x4000b29	          0x4889c7	                            mov rdi, rax	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000b2c	            0x31c0	                            xor eax, eax	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000b2e	      0xe800000000	                          call 0x4000b33	       347	reset.c	FUNCTION_11	IF_9	CALL_42
0x4000b33	      0x48636c241c	         movsxd rbp, dword [rsp + 0x1c] 	       352	reset.c	FUNCTION_11	IF_12
0x4000b38	          0x83fd05	                              cmp ebp, 5	       352	reset.c	FUNCTION_11	IF_12
0x4000b3b	     0xf8453feffff	                            je 0x4000994	       352	reset.c	FUNCTION_11	IF_12
0x4000b41	          0x83fd01	                              cmp ebp, 1	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b44	     0xf84d6000000	                            je 0x4000c20	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b4a	            0x85ed	                           test ebp, ebp	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b4c	     0xf8554feffff	                           jne 0x40009a6	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b52	      0xe945feffff	                           jmp 0x400099c	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b57	    0x660f1f840000	                    nop word [rax + rax]	       355	reset.c	FUNCTION_11	IF_13	CALL_46
0x4000b60	    0x488db424e001	                  lea rsi, [rsp + 0x1e0]	       314	reset.c	FUNCTION_11	CALL_22
0x4000b68	      0xbf00000000	                              mov edi, 0	       314	reset.c	FUNCTION_11	CALL_22
0x4000b6d	      0xe800000000	                          call 0x4000b72	       314	reset.c	FUNCTION_11	CALL_22
0x4000b72	            0x85c0	                           test eax, eax	       314	reset.c	FUNCTION_11	CALL_22
0x4000b74	     0xf84cdfcffff	                            je 0x4000847	       314	reset.c	FUNCTION_11	CALL_22
0x4000b7a	    0x488b05000000	            mov rax, qword [0x04000b81] 	        53	string3.h	FUNCTION_12	CALL_3
0x4000b81	    0x41bc01000000	                             mov r12d, 1	       314	reset.c	FUNCTION_11	CALL_22
0x4000b87	    0x48898424e001	            mov qword [rsp + 0x1e0], rax	        53	string3.h	FUNCTION_12	CALL_3
0x4000b8f	    0x488b05000000	            mov rax, qword [0x04000b96] 	        53	string3.h	FUNCTION_12	CALL_3
0x4000b96	    0x48898424e801	            mov qword [rsp + 0x1e8], rax	        53	string3.h	FUNCTION_12	CALL_3
0x4000b9e	    0x8b0500000000	            mov eax, dword [0x04000ba4] 	        53	string3.h	FUNCTION_12	CALL_3
0x4000ba4	    0x898424f00100	            mov dword [rsp + 0x1f0], eax	        53	string3.h	FUNCTION_12	CALL_3
0x4000bab	      0xe9f6fcffff	                           jmp 0x40008a6	        53	string3.h	FUNCTION_12	CALL_3
0x4000bb0	    0x488db424e001	                  lea rsi, [rsp + 0x1e0]	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000bb8	          0x4889df	                            mov rdi, rbx	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000bbb	      0xe800000000	                          call 0x4000bc0	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000bc0	            0x85c0	                           test eax, eax	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000bc2	     0xf850e040000	                           jne 0x4000fd6	       328	reset.c	FUNCTION_11	ELSE_2	IF_5	CALL_31
0x4000bc8	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       330	reset.c	FUNCTION_11	ELSE_2	CALL_34
0x4000bd0	      0xe800000000	                          call 0x4000bd5	       330	reset.c	FUNCTION_11	ELSE_2	CALL_34
0x4000bd5	          0x4885c0	                           test rax, rax	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x4000bd8	     0xf85a3fcffff	                           jne 0x4000881	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x4000bde	      0xbf00000000	                              mov edi, 0	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x4000be3	       0xf1f440000	                   nop dword [rax + rax]	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x4000be8	      0xe883f4ffff	                       call sym._.part.0	       331	reset.c	FUNCTION_11	ELSE_2	IF_6
0x4000bed	          0x4889de	                            mov rsi, rbx	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000bf0	          0x4889c7	                            mov rdi, rax	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000bf3	            0x31c0	                            xor eax, eax	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000bf5	      0xe800000000	                          call 0x4000bfa	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000bfa	    0x660f1f440000	                    nop word [rax + rax]	       324	reset.c	FUNCTION_11	ELSE_1	IF_2	CALL_29
0x4000c00	        0x488b7500	                    mov rsi, qword [rbp]	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x4000c04	          0x4c89e7	                            mov rdi, r12	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x4000c07	        0x4883c508	                              add rbp, 8	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x4000c0b	      0xe800000000	                          call 0x4000c10	       231	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_5
0x4000c10	        0x488b5df8	                mov rbx, qword [rbp - 8]	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x4000c14	      0xe9e9fbffff	                           jmp 0x4000802	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x4000c19	     0xf1f80000000	                         nop dword [rax]	       232	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4
0x4000c20	        0x8b442428	            mov eax, dword [rsp + 0x28] 	       362	reset.c	FUNCTION_11	IF_15
0x4000c24	            0x85c0	                           test eax, eax	       362	reset.c	FUNCTION_11	IF_15
0x4000c26	     0xf855a010000	                           jne 0x4000d86	       362	reset.c	FUNCTION_11	IF_15
0x4000c2c	      0xe800000000	                          call 0x4000c31	        42	reset.c	FUNCTION_1	CALL_2
0x4000c31	            0x31f6	                            xor esi, esi	        42	reset.c	FUNCTION_1	CALL_2
0x4000c33	          0x4889c7	                            mov rdi, rax	        42	reset.c	FUNCTION_1	CALL_2
0x4000c36	      0xe800000000	                          call 0x4000c3b	        42	reset.c	FUNCTION_1	CALL_2
0x4000c3b	            0x85c0	                           test eax, eax	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c3d	     0xf8422030000	                            je 0x4000f65	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c43	      0xbf00000000	                              mov edi, 0	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c48	      0xe800000000	                          call 0x4000c4d	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c4d	            0x85c0	                           test eax, eax	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c4f	     0xf8510030000	                           jne 0x4000f65	       188	reset.c	FUNCTION_7	IF_1	CALL_2
0x4000c55	      0x837c241c01	               cmp dword [rsp + 0x1c], 1	       371	reset.c	FUNCTION_11	IF_17
0x4000c5a	     0xf8576fdffff	                           jne 0x40009d6	       371	reset.c	FUNCTION_11	IF_17
0x4000c60	        0x8b542440	            mov edx, dword [rsp + 0x40] 	       393	reset.c	FUNCTION_11	IF_24
0x4000c64	          0x4531ed	                          xor r13d, r13d	       282	reset.c	FUNCTION_11
0x4000c67	          0x4109d4	                            or r12d, edx	       393	reset.c	FUNCTION_11	IF_24
0x4000c6a	     0xf8587feffff	                           jne 0x4000af7	       393	reset.c	FUNCTION_11	IF_24
0x4000c70	    0x488db4242002	                  lea rsi, [rsp + 0x220]	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000c78	      0xbf00000000	                              mov edi, 0	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000c7d	    0x48c744246000	               mov qword [rsp + 0x60], 0	       252	reset.c	FUNCTION_9
0x4000c86	    0x48c744246800	               mov qword [rsp + 0x68], 0	       252	reset.c	FUNCTION_9
0x4000c8f	    0x48c744247000	               mov qword [rsp + 0x70], 0	       252	reset.c	FUNCTION_9
0x4000c98	      0xe800000000	                          call 0x4000c9d	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000c9d	            0x85c0	                           test eax, eax	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000c9f	     0xf853b010000	                           jne 0x4000de0	       256	reset.c	FUNCTION_9	IF_1	CALL_1
0x4000ca5	    0x4c8da4240002	                  lea r12, [rsp + 0x200]	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cad	      0xbf00000000	                              mov edi, 0	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cb2	          0x4c89e6	                            mov rsi, r12	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cb5	      0xe800000000	                          call 0x4000cba	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cba	            0x85c0	                           test eax, eax	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cbc	     0xf8449030000	                            je 0x400100b	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000cc2	    0x488d94242002	                  lea rdx, [rsp + 0x220]	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000cca	            0x31c9	                            xor ecx, ecx	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000ccc	      0xbe00000000	                              mov esi, 0	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000cd1	            0x31ff	                            xor edi, edi	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000cd3	      0xe800000000	                          call 0x4000cd8	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000cd8	      0x488d6c2460	                   lea rbp, [rsp + 0x60]	       264	reset.c	FUNCTION_9	ELSE_1	IF_3
0x4000cdd	          0x4531e4	                          xor r12d, r12d	       253	reset.c	FUNCTION_9
0x4000ce0	          0x4889da	                            mov rdx, rbx	       265	reset.c	FUNCTION_9	CALL_6
0x4000ce3	      0xbe00000000	                              mov esi, 0	       265	reset.c	FUNCTION_9	CALL_6
0x4000ce8	          0x4889ef	                            mov rdi, rbp	       265	reset.c	FUNCTION_9	CALL_6
0x4000ceb	      0xe890f3ffff	             call sym.set_reflog_message	       265	reset.c	FUNCTION_9	CALL_6
0x4000cf0	      0x488b7c2470	            mov rdi, qword [rsp + 0x70] 	       266	reset.c	FUNCTION_9	CALL_7
0x4000cf5	    0x488d9424e001	                  lea rdx, [rsp + 0x1e0]	       266	reset.c	FUNCTION_9	CALL_7
0x4000cfd	          0x4531c9	                            xor r9d, r9d	       266	reset.c	FUNCTION_9	CALL_7
0x4000d00	          0x4531c0	                            xor r8d, r8d	       266	reset.c	FUNCTION_9	CALL_7
0x4000d03	          0x4c89e1	                            mov rcx, r12	       266	reset.c	FUNCTION_9	CALL_7
0x4000d06	      0xbe00000000	                              mov esi, 0	       266	reset.c	FUNCTION_9	CALL_7
0x4000d0b	      0xe800000000	                          call 0x4000d10	       266	reset.c	FUNCTION_9	CALL_7
0x4000d10	          0x4889ef	                            mov rdi, rbp	       268	reset.c	FUNCTION_9	CALL_8
0x4000d13	          0x4189c5	                           mov r13d, eax	       266	reset.c	FUNCTION_9	CALL_7
0x4000d16	      0xe800000000	                          call 0x4000d1b	       268	reset.c	FUNCTION_9	CALL_8
0x4000d1b	      0x837c241c02	               cmp dword [rsp + 0x1c], 2	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d20	     0xf85aa000000	                           jne 0x4000dd0	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d26	          0x4585ed	                         test r13d, r13d	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d29	     0xf85a1000000	                           jne 0x4000dd0	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d2f	        0x8b742420	            mov esi, dword [rsp + 0x20] 	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d33	            0x85f6	                           test esi, esi	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d35	     0xf84f9000000	                            je 0x4000e34	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d3b	        0x8b542440	            mov edx, dword [rsp + 0x40] 	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d3f	          0x4531ed	                          xor r13d, r13d	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d42	      0xe9b0fdffff	                           jmp 0x4000af7	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d47	    0x660f1f840000	                    nop word [rax + rax]	       398	reset.c	FUNCTION_11	IF_24	IF_25
0x4000d50	      0xbb00000000	                              mov ebx, 0	       199	reset.c	FUNCTION_8
0x4000d55	      0xe9a8faffff	                           jmp 0x4000802	       199	reset.c	FUNCTION_8
0x4000d5a	    0x660f1f440000	                    nop word [rax + rax]	       199	reset.c	FUNCTION_8
0x4000d60	      0xe800000000	                          call 0x4000d65	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000d65	            0x85c0	                           test eax, eax	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000d67	     0xf852c020000	                           jne 0x4000f99	       358	reset.c	FUNCTION_11	IF_14	CALL_48
0x4000d6d	        0x8b7c2428	            mov edi, dword [rsp + 0x28] 	       362	reset.c	FUNCTION_11	IF_15
0x4000d71	      0x48636c241c	         movsxd rbp, dword [rsp + 0x1c] 	       362	reset.c	FUNCTION_11	IF_15
0x4000d76	            0x85ff	                           test edi, edi	       362	reset.c	FUNCTION_11	IF_15
0x4000d78	     0xf8446fcffff	                            je 0x40009c4	       362	reset.c	FUNCTION_11	IF_15
0x4000d7e	            0x85ed	                           test ebp, ebp	       362	reset.c	FUNCTION_11	IF_15
0x4000d80	     0xf8450fcffff	                            je 0x40009d6	       362	reset.c	FUNCTION_11	IF_15
0x4000d86	      0xbf00000000	                              mov edi, 0	       362	reset.c	FUNCTION_11	IF_15
0x4000d8b	      0xe8e0f2ffff	                       call sym._.part.0	       362	reset.c	FUNCTION_11	IF_15
0x4000d90	          0x4889c7	                            mov rdi, rax	       363	reset.c	FUNCTION_11	CALL_53
0x4000d93	            0x31c0	                            xor eax, eax	       363	reset.c	FUNCTION_11	CALL_53
0x4000d95	      0xe800000000	                          call 0x4000d9a	       363	reset.c	FUNCTION_11	CALL_53
0x4000d9a	    0x660f1f440000	                    nop word [rax + rax]	       363	reset.c	FUNCTION_11	CALL_53
0x4000da0	        0x8b542420	            mov edx, dword [rsp + 0x20] 	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000da4	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000dac	      0xe87ff3ffff	                    call sym.reset_index	       382	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_60
0x4000db1	      0x837c241c04	               cmp dword [rsp + 0x1c], 4	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000db6	     0xf8424010000	                            je 0x4000ee0	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000dbc	            0x85c0	                           test eax, eax	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dbe	     0xf8407fdffff	                            je 0x4000acb	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dc4	      0xe91b010000	                           jmp 0x4000ee4	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dc9	     0xf1f80000000	                         nop dword [rax]	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dd0	        0x8b542440	            mov edx, dword [rsp + 0x40] 	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dd4	      0xe91efdffff	                           jmp 0x4000af7	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000dd9	     0xf1f80000000	                         nop dword [rax]	       385	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_22
0x4000de0	    0x4c8da4240002	                  lea r12, [rsp + 0x200]	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000de8	      0xbf00000000	                              mov edi, 0	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000ded	          0x4531ed	                          xor r13d, r13d	       254	reset.c	FUNCTION_9
0x4000df0	          0x4c89e6	                            mov rsi, r12	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000df3	      0xe800000000	                          call 0x4000df8	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000df8	            0x85c0	                           test eax, eax	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000dfa	     0xf85d8feffff	                           jne 0x4000cd8	       258	reset.c	FUNCTION_9	IF_2	CALL_2
0x4000e00	      0x488d6c2460	                   lea rbp, [rsp + 0x60]	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e05	            0x31d2	                            xor edx, edx	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e07	      0xbe00000000	                              mov esi, 0	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e0c	          0x4889ef	                            mov rdi, rbp	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e0f	      0xe86cf2ffff	             call sym.set_reflog_message	       260	reset.c	FUNCTION_9	IF_2	CALL_3
0x4000e14	      0x488b7c2470	            mov rdi, qword [rsp + 0x70] 	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e19	          0x4531c9	                            xor r9d, r9d	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e1c	          0x4531c0	                            xor r8d, r8d	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e1f	          0x4c89e9	                            mov rcx, r13	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e22	          0x4c89e2	                            mov rdx, r12	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e25	      0xbe00000000	                              mov esi, 0	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e2a	      0xe800000000	                          call 0x4000e2f	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e2f	      0xe9acfeffff	                           jmp 0x4000ce0	       261	reset.c	FUNCTION_9	IF_2	CALL_4
0x4000e34	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000e3c	      0xe800000000	                          call 0x4000e41	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000e41	    0x8b3500000000	            mov esi, dword [0x04000e47] 	       111	reset.c	FUNCTION_3	CALL_2
0x4000e47	        0x488d7804	                      lea rdi, [rax + 4]	       112	reset.c	FUNCTION_3	CALL_3
0x4000e4b	          0x4889c3	                            mov rbx, rax	       399	reset.c	FUNCTION_11	IF_24	CALL_69
0x4000e4e	    0x48c744246000	               mov qword [rsp + 0x60], 0	       109	reset.c	FUNCTION_3
0x4000e57	    0x48c744246800	               mov qword [rsp + 0x68], 0	       109	reset.c	FUNCTION_3
0x4000e60	    0x48c744247000	               mov qword [rsp + 0x70], 0	       109	reset.c	FUNCTION_3
0x4000e69	      0xe800000000	                          call 0x4000e6e	       111	reset.c	FUNCTION_3	CALL_2
0x4000e6e	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x4000e70	          0x4989c4	                            mov r12, rax	       111	reset.c	FUNCTION_3	CALL_2
0x4000e73	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x4000e78	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x4000e7d	      0xe800000000	                          call 0x4000e82	        54	gettext.h	FUNCTION_26	CALL_2
0x4000e82	          0x4c89e2	                            mov rdx, r12	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000e85	          0x4889c6	                            mov rsi, rax	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000e88	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000e8d	            0x31c0	                            xor eax, eax	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000e8f	      0xe800000000	                          call 0x4000e94	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000e94	          0x4889ea	                            mov rdx, rbp	       114	reset.c	FUNCTION_3	CALL_4
0x4000e97	          0x4889de	                            mov rsi, rbx	       114	reset.c	FUNCTION_3	CALL_4
0x4000e9a	      0xbf05000000	                              mov edi, 5	       114	reset.c	FUNCTION_3	CALL_4
0x4000e9f	      0xe800000000	                          call 0x4000ea4	       114	reset.c	FUNCTION_3	CALL_4
0x4000ea4	    0x48837c246800	               cmp qword [rsp + 0x68], 0	       115	reset.c	FUNCTION_3	IF_1
0x4000eaa	            0x7416	                            je 0x4000ec2	       115	reset.c	FUNCTION_3	IF_1
0x4000eac	      0x488b542470	            mov rdx, qword [rsp + 0x70] 	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000eb1	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000eb6	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000ebb	            0x31c0	                            xor eax, eax	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000ebd	      0xe800000000	                          call 0x4000ec2	       104	stdio2.h	FUNCTION_33	CALL_2
0x4000ec2	    0x488b35000000	            mov rsi, qword [0x04000ec9] 	        81	stdio.h	FUNCTION_53	CALL_1
0x4000ec9	      0xbf0a000000	                            mov edi, 0xa	        81	stdio.h	FUNCTION_53	CALL_1
0x4000ece	      0xe800000000	                          call 0x4000ed3	        81	stdio.h	FUNCTION_53	CALL_1
0x4000ed3	          0x4889ef	                            mov rdi, rbp	       118	reset.c	FUNCTION_3	CALL_7
0x4000ed6	      0xe800000000	                          call 0x4000edb	       118	reset.c	FUNCTION_3	CALL_7
0x4000edb	      0xe95bfeffff	                           jmp 0x4000d3b	       118	reset.c	FUNCTION_3	CALL_7
0x4000ee0	            0x85c0	                           test eax, eax	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000ee2	            0x743c	                            je 0x4000f20	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000ee4	      0xbf00000000	                              mov edi, 0	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000ee9	      0xe9fafcffff	                           jmp 0x4000be8	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000eee	            0x6690	                                     nop	       383	reset.c	FUNCTION_11	IF_17	ELSE_4	IF_21
0x4000ef0	    0x4c8db4242002	                  lea r14, [rsp + 0x220]	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000ef8	          0x4889df	                            mov rdi, rbx	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000efb	          0x4c89f6	                            mov rsi, r14	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000efe	      0xe800000000	                          call 0x4000f03	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f03	            0x85c0	                           test eax, eax	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f05	     0xf84f5fcffff	                            je 0x4000c00	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f0b	      0x48837d0800	                  cmp qword [rbp + 8], 0	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f10	        0x488b7d00	                    mov rdi, qword [rbp]	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f14	     0xf8435faffff	                            je 0x400094f	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f1a	      0xe91cfaffff	                           jmp 0x400093b	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f1f	              0x90	                                     nop	       225	reset.c	FUNCTION_8	IF_1	ELSE_2	IF_4	CALL_3
0x4000f20	        0x8b542420	            mov edx, dword [rsp + 0x20] 	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f24	    0x488dbc24e001	                  lea rdi, [rsp + 0x1e0]	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f2c	            0x31f6	                            xor esi, esi	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f2e	      0xe8fdf1ffff	                    call sym.reset_index	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f33	      0xe984feffff	                           jmp 0x4000dbc	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f38	      0xbf00000000	                              mov edi, 0	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f3d	      0xe82ef1ffff	                       call sym._.part.0	       384	reset.c	FUNCTION_11	IF_17	ELSE_4	CALL_61
0x4000f42	          0x4889c7	                            mov rdi, rax	       241	reset.c	FUNCTION_8	CALL_9
0x4000f45	            0x31c0	                            xor eax, eax	       241	reset.c	FUNCTION_8	CALL_9
0x4000f47	      0xe800000000	                          call 0x4000f4c	       241	reset.c	FUNCTION_8	CALL_9
0x4000f4c	      0xe800000000	                          call 0x4000f51	       405	reset.c	FUNCTION_11
0x4000f51	      0xbf00000000	                              mov edi, 0	       405	reset.c	FUNCTION_11
0x4000f56	      0xe815f1ffff	                       call sym._.part.0	       405	reset.c	FUNCTION_11
0x4000f5b	          0x4889c7	                            mov rdi, rax	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000f5e	            0x31c0	                            xor eax, eax	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000f60	      0xe800000000	                          call 0x4000f65	       338	reset.c	FUNCTION_11	IF_7	CALL_39
0x4000f65	    0x488b3ced0000	                  mov rdi, qword [rbp*8]	       189	reset.c	FUNCTION_7	IF_1	CALL_4
0x4000f6d	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_26	IF_1
0x4000f72	          0x803f00	                       cmp byte [rdi], 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000f75	     0xf8583000000	                           jne 0x4000ffe	        52	gettext.h	FUNCTION_26	IF_1
0x4000f7b	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000f80	      0xe963fcffff	                           jmp 0x4000be8	        52	gettext.h	FUNCTION_26	IF_1
0x4000f85	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000f8a	      0xe8e1f0ffff	                       call sym._.part.0	        52	gettext.h	FUNCTION_26	IF_1
0x4000f8f	          0x4889c7	                            mov rdi, rax	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000f92	            0x31c0	                            xor eax, eax	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000f94	      0xe800000000	                          call 0x4000f99	       390	reset.c	FUNCTION_11	IF_17	CALL_66
0x4000f99	      0x486344241c	         movsxd rax, dword [rsp + 0x1c] 	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000f9e	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_26	IF_1
0x4000fa3	    0x488b3cc50000	                  mov rdi, qword [rax*8]	       359	reset.c	FUNCTION_11	IF_14	CALL_50
0x4000fab	          0x803f00	                       cmp byte [rdi], 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fae	            0x753a	                           jne 0x4000fea	        52	gettext.h	FUNCTION_26	IF_1
0x4000fb0	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fb5	      0xe92efcffff	                           jmp 0x4000be8	        52	gettext.h	FUNCTION_26	IF_1
0x4000fba	    0x488b3cc50000	                  mov rdi, qword [rax*8]	       349	reset.c	FUNCTION_11	IF_9	ELSE_3	IF_11	CALL_44
0x4000fc2	      0xbb00000000	                              mov ebx, 0	        53	gettext.h	FUNCTION_26	IF_1
0x4000fc7	          0x803f00	                       cmp byte [rdi], 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fca	            0x7528	                           jne 0x4000ff4	        52	gettext.h	FUNCTION_26	IF_1
0x4000fcc	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fd1	      0xe912fcffff	                           jmp 0x4000be8	        52	gettext.h	FUNCTION_26	IF_1
0x4000fd6	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fdb	      0xe908fcffff	                           jmp 0x4000be8	        52	gettext.h	FUNCTION_26	IF_1
0x4000fe0	      0xbf00000000	                              mov edi, 0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fe5	      0xe9fefbffff	                           jmp 0x4000be8	        52	gettext.h	FUNCTION_26	IF_1
0x4000fea	      0xe881f0ffff	                       call sym._.part.0	        52	gettext.h	FUNCTION_26	IF_1
0x4000fef	          0x4889c3	                            mov rbx, rax	        52	gettext.h	FUNCTION_26	IF_1
0x4000ff2	            0xebbc	                           jmp 0x4000fb0	        52	gettext.h	FUNCTION_26	IF_1
0x4000ff4	      0xe877f0ffff	                       call sym._.part.0	        52	gettext.h	FUNCTION_26	IF_1
0x4000ff9	          0x4889c3	                            mov rbx, rax	        52	gettext.h	FUNCTION_26	IF_1
0x4000ffc	            0xebce	                           jmp 0x4000fcc	        52	gettext.h	FUNCTION_26	IF_1
0x4000ffe	      0xe86df0ffff	                       call sym._.part.0	        52	gettext.h	FUNCTION_26	IF_1
0x4001003	          0x4889c3	                            mov rbx, rax	        52	gettext.h	FUNCTION_26	IF_1
0x4001006	      0xe970ffffff	                           jmp 0x4000f7b	        52	gettext.h	FUNCTION_26	IF_1
0x400100b	    0x4c8dac242002	                  lea r13, [rsp + 0x220]	       257	reset.c	FUNCTION_9	IF_1
0x4001013	      0xe9e8fdffff	                           jmp 0x4000e00	       257	reset.c	FUNCTION_9	IF_1
git_reset_config	WHILE,0:SWITCH,0:CALL,3:ELSE,0:DO,0:functions,0:FOR,0:IF,1	12
0x4000040	          0x4889f8	                            mov rax, rdi	       273	reset.c	FUNCTION_10
0x4000043	          0x4989f0	                             mov r8, rsi	       273	reset.c	FUNCTION_10
0x4000046	      0xbf00000000	                              mov edi, 0	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004b	          0x4889c6	                            mov rsi, rax	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004e	      0xb912000000	                           mov ecx, 0x12	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000053	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000055	          0x4c89c6	                             mov rsi, r8	       275	reset.c	FUNCTION_10	CALL_2
0x4000058	          0x4889c7	                            mov rdi, rax	       275	reset.c	FUNCTION_10	CALL_2
0x400005b	            0x740b	                            je 0x4000068	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400005d	      0xe900000000	                           jmp 0x4000062	       277	reset.c	FUNCTION_10	CALL_3
0x4000062	    0x660f1f440000	                    nop word [rax + rax]	       277	reset.c	FUNCTION_10	CALL_3
0x4000068	      0xe900000000	                           jmp 0x400006d	       275	reset.c	FUNCTION_10	CALL_2
reset_index	WHILE,0:SWITCH,1:CALL,16:ELSE,0:DO,0:functions,0:FOR,1:IF,7	137
0x4000130	            0x4156	                                push r14	        46	reset.c	FUNCTION_2
0x4000132	            0x4155	                                push r13	        46	reset.c	FUNCTION_2
0x4000134	      0xb960000000	                           mov ecx, 0x60	        90	string3.h	FUNCTION_15	CALL_6
0x4000139	            0x4154	                                push r12	        46	reset.c	FUNCTION_2
0x400013b	              0x55	                                push rbp	        46	reset.c	FUNCTION_2
0x400013c	          0x4989fd	                            mov r13, rdi	        46	reset.c	FUNCTION_2
0x400013f	              0x53	                                push rbx	        46	reset.c	FUNCTION_2
0x4000140	            0x89f5	                            mov ebp, esi	        46	reset.c	FUNCTION_2
0x4000142	    0x4881ec800300	                          sub rsp, 0x380	        46	reset.c	FUNCTION_2
0x4000149	      0x4c8d642470	                   lea r12, [rsp + 0x70]	        90	string3.h	FUNCTION_15	CALL_6
0x400014e	    0x64488b042528	                mov rax, qword fs:[0x28]	        46	reset.c	FUNCTION_2
0x4000157	    0x488984247803	            mov qword [rsp + 0x378], rax	        46	reset.c	FUNCTION_2
0x400015f	            0x31c0	                            xor eax, eax	        46	reset.c	FUNCTION_2
0x4000161	          0x4c89e7	                            mov rdi, r12	        90	string3.h	FUNCTION_15	CALL_6
0x4000164	            0x85d2	                           test edx, edx	        59	reset.c	FUNCTION_2	IF_1
0x4000166	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_15	CALL_6
0x4000169	    0xc78424700200	              mov dword [rsp + 0x270], 1	        54	reset.c	FUNCTION_2
0x4000174	    0x48c784249002	              mov qword [rsp + 0x290], 0	        55	reset.c	FUNCTION_2
0x4000180	    0x48c784248802	              mov qword [rsp + 0x288], 0	        56	reset.c	FUNCTION_2
0x400018c	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        57	reset.c	FUNCTION_2
0x4000198	    0xc74424740100	               mov dword [rsp + 0x74], 1	        58	reset.c	FUNCTION_2
0x40001a0	            0x750b	                           jne 0x40001ad	        59	reset.c	FUNCTION_2	IF_1
0x40001a2	    0xc78424880000	               mov dword [rsp + 0x88], 1	        60	reset.c	FUNCTION_2	IF_1
0x40001ad	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001b0	     0xf84ba000000	                            je 0x4000270	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001b6	     0xf8cbc000000	                            jl 0x4000278	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001bc	          0x83fd04	                              cmp ebp, 4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001bf	     0xf8fb3000000	                            jg 0x4000278	        61	reset.c	FUNCTION_2	SWITCH_1
0x40001c5	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2	CALL_2
0x40001ca	    0xc74424780100	               mov dword [rsp + 0x78], 1	        64	reset.c	FUNCTION_2	SWITCH_1
0x40001d2	      0xe800000000	                          call 0x40001d7	        73	reset.c	FUNCTION_2	CALL_2
0x40001d7	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x40001da	     0xf85b3000000	                           jne 0x4000293	        75	reset.c	FUNCTION_2	IF_2
0x40001e0	          0x4889e6	                            mov rsi, rsp	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40001e3	      0xbf00000000	                              mov edi, 0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40001e8	      0xe800000000	                          call 0x40001ed	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40001ed	            0x85c0	                           test eax, eax	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40001ef	     0xf854b010000	                           jne 0x4000340	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_3
0x40001f5	      0x4c8d742420	                   lea r14, [rsp + 0x20]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x40001fa	          0x4889e6	                            mov rsi, rsp	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x40001fd	          0x4c89f7	                            mov rdi, r14	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000200	      0xe800000000	                          call 0x4000205	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000205	          0x4885c0	                           test rax, rax	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000208	     0xf8452010000	                            je 0x4000360	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x400020e	        0x498d7e28	                   lea rdi, [r14 + 0x28]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_6
0x4000212	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000215	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        82	reset.c	FUNCTION_2	IF_2
0x4000221	      0xbb01000000	                              mov ebx, 1	        81	reset.c	FUNCTION_2	IF_2
0x4000226	      0xe800000000	                          call 0x400022b	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x400022b	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x400022e	            0x757a	                           jne 0x40002aa	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x4000230	          0x4c89ef	                            mov rdi, r13	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000233	      0xe800000000	                          call 0x4000238	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000238	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x400023a	          0x4889c5	                            mov rbp, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x400023d	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x4000242	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x4000247	      0xe800000000	                          call 0x400024c	        54	gettext.h	FUNCTION_26	CALL_2
0x400024c	          0x4889ee	                            mov rsi, rbp	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x400024f	          0x4889c7	                            mov rdi, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000252	            0x31c0	                            xor eax, eax	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000254	      0xe800000000	                          call 0x4000259	        86	reset.c	FUNCTION_2	IF_5	CALL_12
0x4000259	            0x85db	                           test ebx, ebx	       102	reset.c	FUNCTION_2	FOR_1
0x400025b	     0xf851d010000	                           jne 0x400037e	       102	reset.c	FUNCTION_2	FOR_1
0x4000261	      0xb8ffffffff	                     mov eax, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000266	            0xeb78	                           jmp 0x40002e0	        51	reset.c	FUNCTION_2
0x4000268	     0xf1f84000000	                   nop dword [rax + rax]	        51	reset.c	FUNCTION_2
0x4000270	    0xc74424780100	               mov dword [rsp + 0x78], 1	        67	reset.c	FUNCTION_2	SWITCH_1
0x4000278	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2	CALL_2
0x400027d	    0xc74424700100	               mov dword [rsp + 0x70], 1	        70	reset.c	FUNCTION_2	SWITCH_1
0x4000285	      0xe800000000	                          call 0x400028a	        73	reset.c	FUNCTION_2	CALL_2
0x400028a	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x400028d	     0xf844dffffff	                            je 0x40001e0	        75	reset.c	FUNCTION_2	IF_2
0x4000293	      0x4c8d742420	                   lea r14, [rsp + 0x20]	        75	reset.c	FUNCTION_2	IF_2
0x4000298	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x400029b	            0x31db	                            xor ebx, ebx	        47	reset.c	FUNCTION_2
0x400029d	          0x4c89f7	                            mov rdi, r14	        75	reset.c	FUNCTION_2	IF_2
0x40002a0	      0xe800000000	                          call 0x40002a5	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x40002a5	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x40002a8	            0x7486	                            je 0x4000230	        85	reset.c	FUNCTION_2	IF_5	CALL_9
0x40002aa	          0x83c301	                              add ebx, 1	        89	reset.c	FUNCTION_2
0x40002ad	          0x4c89e2	                            mov rdx, r12	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002b0	          0x4c89f6	                            mov rsi, r14	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002b3	            0x89df	                            mov edi, ebx	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002b5	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40002bb	      0xe800000000	                          call 0x40002c0	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002c0	            0x85c0	                           test eax, eax	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002c2	            0x744c	                            je 0x4000310	        91	reset.c	FUNCTION_2	IF_6	CALL_13
0x40002c4	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_16
0x40002c9	      0xe800000000	                          call 0x40002ce	       103	reset.c	FUNCTION_2	CALL_16
0x40002ce	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x40002d1	            0x740a	                            je 0x40002dd	       102	reset.c	FUNCTION_2	FOR_1
0x40002d3	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	       103	reset.c	FUNCTION_2	CALL_16
0x40002d8	      0xe800000000	                          call 0x40002dd	       103	reset.c	FUNCTION_2	CALL_16
0x40002dd	          0x4489e0	                           mov eax, r12d	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x40002e0	    0x488b8c247803	           mov rcx, qword [rsp + 0x378] 	       105	reset.c	FUNCTION_2
0x40002e8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       105	reset.c	FUNCTION_2
0x40002f1	     0xf8582000000	                           jne 0x4000379	       105	reset.c	FUNCTION_2
0x40002f7	    0x4881c4800300	                          add rsp, 0x380	       105	reset.c	FUNCTION_2
0x40002fe	              0x5b	                                 pop rbx	       105	reset.c	FUNCTION_2
0x40002ff	              0x5d	                                 pop rbp	       105	reset.c	FUNCTION_2
0x4000300	            0x415c	                                 pop r12	       105	reset.c	FUNCTION_2
0x4000302	            0x415d	                                 pop r13	       105	reset.c	FUNCTION_2
0x4000304	            0x415e	                                 pop r14	       105	reset.c	FUNCTION_2
0x4000306	              0xc3	                                     ret	       105	reset.c	FUNCTION_2
0x4000307	    0x660f1f840000	                    nop word [rax + rax]	       105	reset.c	FUNCTION_2
0x4000310	          0x4531e4	                          xor r12d, r12d	        99	reset.c	FUNCTION_2
0x4000313	          0x83e5fd	                     and ebp, 0xfffffffd	        94	reset.c	FUNCTION_2	IF_7
0x4000316	            0x75ac	                           jne 0x40002c4	        94	reset.c	FUNCTION_2	IF_7
0x4000318	          0x4c89ef	                            mov rdi, r13	        95	reset.c	FUNCTION_2	IF_7	CALL_14
0x400031b	      0xe800000000	                          call 0x4000320	        95	reset.c	FUNCTION_2	IF_7	CALL_14
0x4000320	      0xbf00000000	                              mov edi, 0	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x4000325	          0x4889c6	                            mov rsi, rax	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x4000328	      0xe800000000	                          call 0x400032d	        96	reset.c	FUNCTION_2	IF_7	CALL_15
0x400032d	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_16
0x4000332	      0xe800000000	                          call 0x4000337	       103	reset.c	FUNCTION_2	CALL_16
0x4000337	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x400033a	            0x7597	                           jne 0x40002d3	       102	reset.c	FUNCTION_2	FOR_1
0x400033c	            0xeb9f	                           jmp 0x40002dd	       102	reset.c	FUNCTION_2	FOR_1
0x400033e	            0x6690	                                     nop	       102	reset.c	FUNCTION_2	FOR_1
0x4000340	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x4000342	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x4000347	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x400034c	      0xe800000000	                          call 0x4000351	        54	gettext.h	FUNCTION_26	CALL_2
0x4000351	          0x4889c7	                            mov rdi, rax	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000354	            0x31c0	                            xor eax, eax	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000356	      0xe800000000	                          call 0x400035b	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x400035b	      0xe901ffffff	                           jmp 0x4000261	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000360	      0xbf00000000	                              mov edi, 0	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x4000365	      0xe806fdffff	                       call sym._.part.0	        78	reset.c	FUNCTION_2	IF_2	CALL_5
0x400036a	          0x4889c7	                            mov rdi, rax	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x400036d	            0x31c0	                            xor eax, eax	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x400036f	      0xe800000000	                          call 0x4000374	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x4000374	      0xe9e8feffff	                           jmp 0x4000261	        80	reset.c	FUNCTION_2	IF_2	CALL_8
0x4000379	      0xe800000000	                          call 0x400037e	       105	reset.c	FUNCTION_2
0x400037e	        0x4183ccff	                     or r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x4000382	      0xe93dffffff	                           jmp 0x40002c4	        51	reset.c	FUNCTION_2
update_index_from_diff	WHILE,0:SWITCH,0:CALL,7:ELSE,0:DO,0:functions,0:FOR,1:IF,3	87
0x4000390	            0x4157	                                push r15	       123	reset.c	FUNCTION_4
0x4000392	            0x4156	                                push r14	       123	reset.c	FUNCTION_4
0x4000394	            0x4155	                                push r13	       123	reset.c	FUNCTION_4
0x4000396	            0x4154	                                push r12	       123	reset.c	FUNCTION_4
0x4000398	              0x55	                                push rbp	       123	reset.c	FUNCTION_4
0x4000399	              0x53	                                push rbx	       123	reset.c	FUNCTION_4
0x400039a	        0x4883ec18	                           sub rsp, 0x18	       123	reset.c	FUNCTION_4
0x400039e	          0x8b470c	              mov eax, dword [rdi + 0xc]	       127	reset.c	FUNCTION_4	FOR_1
0x40003a1	          0x448b3a	                   mov r15d, dword [rdx]	       125	reset.c	FUNCTION_4
0x40003a4	            0x85c0	                           test eax, eax	       127	reset.c	FUNCTION_4	FOR_1
0x40003a6	     0xf8e9b000000	                           jle 0x4000447	       127	reset.c	FUNCTION_4	FOR_1
0x40003ac	          0x4989fe	                            mov r14, rdi	       127	reset.c	FUNCTION_4	FOR_1
0x40003af	          0x4531ed	                          xor r13d, r13d	       127	reset.c	FUNCTION_4	FOR_1
0x40003b2	          0x4531e4	                          xor r12d, r12d	       127	reset.c	FUNCTION_4	FOR_1
0x40003b5	            0xeb5c	                           jmp 0x4000413	       127	reset.c	FUNCTION_4	FOR_1
0x40003b7	    0x660f1f840000	                    nop word [rax + rax]	       127	reset.c	FUNCTION_4	FOR_1
0x40003c0	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_67	CALL_1
0x40003c5	      0xbe00000000	                              mov esi, 0	       975	cache.h	FUNCTION_67	CALL_1
0x40003ca	          0x4889df	                            mov rdi, rbx	       975	cache.h	FUNCTION_67	CALL_1
0x40003cd	      0xe800000000	                          call 0x40003d2	       975	cache.h	FUNCTION_67	CALL_1
0x40003d2	            0x85c0	                           test eax, eax	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003d4	            0x7450	                            je 0x4000426	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40003d6	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003da	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003dd	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003df	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003e2	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003e5	      0xe800000000	                          call 0x40003ea	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003ea	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x40003ed	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x40003f0	     0xf84aa000000	                            je 0x40004a0	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x40003f6	      0xba03000000	                              mov edx, 3	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x40003fb	      0xbf00000000	                              mov edi, 0	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x4000400	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x4000404	      0xe800000000	                          call 0x4000409	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x4000409	        0x4983c508	                              add r13, 8	       146	reset.c	FUNCTION_4	FOR_1	CALL_7
0x400040d	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x4000411	            0x7e34	                           jle 0x4000447	       127	reset.c	FUNCTION_4	FOR_1
0x4000413	          0x498b06	                    mov rax, qword [r14]	       128	reset.c	FUNCTION_4	FOR_1
0x4000416	        0x4a8b0428	              mov rax, qword [rax + r13]	       128	reset.c	FUNCTION_4	FOR_1
0x400041a	          0x488b18	                    mov rbx, qword [rax]	       128	reset.c	FUNCTION_4	FOR_1
0x400041d	         0xfb76b40	           movzx ebp, word [rbx + 0x40] 	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000421	          0x6685ed	                             test bp, bp	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000424	            0x759a	                           jne 0x40003c0	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x4000426	          0x4585ff	                         test r15d, r15d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x4000429	            0x7535	                           jne 0x4000460	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x400042b	        0x488b7318	            mov rsi, qword [rbx + 0x18] 	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x400042f	      0xbf00000000	                              mov edi, 0	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x4000434	        0x4183c401	                             add r12d, 1	       127	reset.c	FUNCTION_4	FOR_1
0x4000438	        0x4983c508	                              add r13, 8	       127	reset.c	FUNCTION_4	FOR_1
0x400043c	      0xe800000000	                          call 0x4000441	       133	reset.c	FUNCTION_4	FOR_1	IF_1	CALL_2
0x4000441	        0x4539660c	            cmp dword [r14 + 0xc], r12d 	       127	reset.c	FUNCTION_4	FOR_1
0x4000445	            0x7fcc	                            jg 0x4000413	       127	reset.c	FUNCTION_4	FOR_1
0x4000447	        0x4883c418	                           add rsp, 0x18	       148	reset.c	FUNCTION_4
0x400044b	              0x5b	                                 pop rbx	       148	reset.c	FUNCTION_4
0x400044c	              0x5d	                                 pop rbp	       148	reset.c	FUNCTION_4
0x400044d	            0x415c	                                 pop r12	       148	reset.c	FUNCTION_4
0x400044f	            0x415d	                                 pop r13	       148	reset.c	FUNCTION_4
0x4000451	            0x415e	                                 pop r14	       148	reset.c	FUNCTION_4
0x4000453	            0x415f	                                 pop r15	       148	reset.c	FUNCTION_4
0x4000455	              0xc3	                                     ret	       148	reset.c	FUNCTION_4
0x4000456	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       148	reset.c	FUNCTION_4
0x4000460	        0x488b5318	            mov rdx, qword [rbx + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000464	          0x4531c0	                            xor r8d, r8d	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000467	            0x31c9	                            xor ecx, ecx	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000469	          0x4889de	                            mov rsi, rbx	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x400046c	           0xfb7fd	                           movzx edi, bp	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x400046f	      0xe800000000	                          call 0x4000474	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x4000474	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x4000477	          0x4889c6	                            mov rsi, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_3
0x400047a	            0x7424	                            je 0x40004a0	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400047c	    0x814e38000000	       or dword [rsi + 0x38], 0x20000000	       143	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000483	          0x4889f7	                            mov rdi, rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x4000486	      0x4889742408	                mov qword [rsp + 8], rsi	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x400048b	      0xe800000000	                          call 0x4000490	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x4000490	      0x488b742408	                mov rsi, qword [rsp + 8]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x4000495	      0xe95cffffff	                           jmp 0x40003f6	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x400049a	    0x660f1f440000	                    nop word [rax + rax]	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_6
0x40004a0	        0x488b5b18	            mov rbx, qword [rbx + 0x18] 	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x40004a4	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_26	CALL_2
0x40004a9	            0x31ff	                            xor edi, edi	        54	gettext.h	FUNCTION_26	CALL_2
0x40004ab	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_26	CALL_2
0x40004b0	      0xe800000000	                          call 0x40004b5	        54	gettext.h	FUNCTION_26	CALL_2
0x40004b5	          0x4889de	                            mov rsi, rbx	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x40004b8	          0x4889c7	                            mov rdi, rax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x40004bb	            0x31c0	                            xor eax, eax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
0x40004bd	      0xe800000000	                          call 0x40004c2	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_5
