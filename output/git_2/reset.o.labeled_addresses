set_reflog_message	WHILE,0:functions,0:SWITCH,0:IF,2:DO,0:CALL,4:FOR,0:ELSE,2	47
0x4000188	            0x4154	                                push r12	       174	reset.c	FUNCTION_6
0x400018a	              0x55	                                push rbp	       174	reset.c	FUNCTION_6
0x400018b	              0x53	                                push rbx	       174	reset.c	FUNCTION_6
0x400018c	          0x4889fb	                            mov rbx, rdi	       174	reset.c	FUNCTION_6
0x400018f	          0x4989f4	                            mov r12, rsi	       174	reset.c	FUNCTION_6
0x4000192	          0x4889d5	                            mov rbp, rdx	       174	reset.c	FUNCTION_6
0x4000195	      0xbf00000000	                              mov edi, 0	       175	reset.c	FUNCTION_6	CALL_1
0x400019a	      0xe800000000	                          call 0x400019f	       175	reset.c	FUNCTION_6	CALL_1
0x400019f	    0x48c743080000	                  mov qword [rbx + 8], 0	       164	strbuf.h	FUNCTION_14
0x40001a7	        0x488b4b10	            mov rcx, qword [rbx + 0x10] 	       165	strbuf.h	FUNCTION_14	IF_2
0x40001ab	    0x4881f9000000	                              cmp rcx, 0	       165	strbuf.h	FUNCTION_14	IF_2
0x40001b2	            0x7405	                            je 0x40001b9	       165	strbuf.h	FUNCTION_14	IF_2
0x40001b4	          0xc60100	                       mov byte [rcx], 0	       166	strbuf.h	FUNCTION_14	IF_2
0x40001b7	            0xeb22	                           jmp 0x40001db	       166	strbuf.h	FUNCTION_14	IF_2
0x40001b9	    0x803d00000000	                cmp byte [0x040001c0], 0	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001c0	            0x7419	                            je 0x40001db	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001c2	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001c7	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001cc	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001d1	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001d6	      0xe800000000	                          call 0x40001db	       168	strbuf.h	FUNCTION_14	CALL_2
0x40001db	          0x4885c0	                           test rax, rax	       178	reset.c	FUNCTION_6	IF_1
0x40001de	            0x741a	                            je 0x40001fa	       178	reset.c	FUNCTION_6	IF_1
0x40001e0	          0x4c89e1	                            mov rcx, r12	       179	reset.c	FUNCTION_6	CALL_2
0x40001e3	          0x4889c2	                            mov rdx, rax	       179	reset.c	FUNCTION_6	CALL_2
0x40001e6	      0xbe00000000	                              mov esi, 0	       179	reset.c	FUNCTION_6	CALL_2
0x40001eb	          0x4889df	                            mov rdi, rbx	       179	reset.c	FUNCTION_6	CALL_2
0x40001ee	      0xb800000000	                              mov eax, 0	       179	reset.c	FUNCTION_6	CALL_2
0x40001f3	      0xe800000000	                          call 0x40001f8	       179	reset.c	FUNCTION_6	CALL_2
0x40001f8	            0xeb31	                           jmp 0x400022b	       179	reset.c	FUNCTION_6	CALL_2
0x40001fa	          0x4885ed	                           test rbp, rbp	       180	reset.c	FUNCTION_6	ELSE_1	IF_2
0x40001fd	            0x7417	                            je 0x4000216	       180	reset.c	FUNCTION_6	ELSE_1	IF_2
0x40001ff	          0x4889ea	                            mov rdx, rbp	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000202	      0xbe00000000	                              mov esi, 0	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000207	          0x4889df	                            mov rdi, rbx	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x400020a	      0xb800000000	                              mov eax, 0	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x400020f	      0xe800000000	                          call 0x4000214	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000214	            0xeb15	                           jmp 0x400022b	       181	reset.c	FUNCTION_6	ELSE_1	IF_2
0x4000216	          0x4c89e2	                            mov rdx, r12	       183	reset.c	FUNCTION_6	CALL_4
0x4000219	      0xbe00000000	                              mov esi, 0	       183	reset.c	FUNCTION_6	CALL_4
0x400021e	          0x4889df	                            mov rdi, rbx	       183	reset.c	FUNCTION_6	CALL_4
0x4000221	      0xb800000000	                              mov eax, 0	       183	reset.c	FUNCTION_6	CALL_4
0x4000226	      0xe800000000	                          call 0x400022b	       183	reset.c	FUNCTION_6	CALL_4
0x400022b	              0x5b	                                 pop rbx	       184	reset.c	FUNCTION_6
0x400022c	              0x5d	                                 pop rbp	       184	reset.c	FUNCTION_6
0x400022d	            0x415c	                                 pop r12	       184	reset.c	FUNCTION_6
0x400022f	              0xc3	                                     ret	       184	reset.c	FUNCTION_6
update_index_from_diff	WHILE,0:functions,0:SWITCH,0:IF,3:DO,0:CALL,5:FOR,1:ELSE,0	73
0x4000082	            0x4157	                                push r15	       123	reset.c	FUNCTION_4
0x4000084	            0x4156	                                push r14	       123	reset.c	FUNCTION_4
0x4000086	            0x4155	                                push r13	       123	reset.c	FUNCTION_4
0x4000088	            0x4154	                                push r12	       123	reset.c	FUNCTION_4
0x400008a	              0x55	                                push rbp	       123	reset.c	FUNCTION_4
0x400008b	              0x53	                                push rbx	       123	reset.c	FUNCTION_4
0x400008c	        0x4883ec08	                              sub rsp, 8	       123	reset.c	FUNCTION_4
0x4000090	          0x448b2a	                   mov r13d, dword [rdx]	       125	reset.c	FUNCTION_4
0x4000093	        0x837f0c00	                cmp dword [rdi + 0xc], 0	       127	reset.c	FUNCTION_4	FOR_1
0x4000097	     0xf8edc000000	                           jle 0x4000179	       127	reset.c	FUNCTION_4	FOR_1
0x400009d	          0x4989fc	                            mov r12, rdi	       127	reset.c	FUNCTION_4	FOR_1
0x40000a0	      0xbb00000000	                              mov ebx, 0	       127	reset.c	FUNCTION_4	FOR_1
0x40000a5	          0x4863c3	                         movsxd rax, ebx	       128	reset.c	FUNCTION_4	FOR_1
0x40000a8	        0x498b1424	                    mov rdx, qword [r12]	       128	reset.c	FUNCTION_4	FOR_1
0x40000ac	        0x488b04c2	            mov rax, qword [rdx + rax*8]	       128	reset.c	FUNCTION_4	FOR_1
0x40000b0	          0x488b28	                    mov rbp, qword [rax]	       128	reset.c	FUNCTION_4	FOR_1
0x40000b3	      0x440fb77540	          movzx r14d, word [rbp + 0x40] 	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000b8	    0x41bf01000000	                             mov r15d, 1	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000be	        0x664585f6	                         test r14w, r14w	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000c2	            0x741c	                            je 0x40000e0	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000c4	      0xba14000000	                           mov edx, 0x14	       975	cache.h	FUNCTION_63	CALL_1
0x40000c9	      0xbe00000000	                              mov esi, 0	       975	cache.h	FUNCTION_63	CALL_1
0x40000ce	          0x4889ef	                            mov rdi, rbp	       975	cache.h	FUNCTION_63	CALL_1
0x40000d1	      0xe800000000	                          call 0x40000d6	       975	cache.h	FUNCTION_63	CALL_1
0x40000d6	            0x85c0	                           test eax, eax	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000d8	        0x410f94c7	                               sete r15b	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000dc	        0x450fb6ff	                        movzx r15d, r15b	       129	reset.c	FUNCTION_4	FOR_1	CALL_1
0x40000e0	          0x4585ff	                         test r15d, r15d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e3	            0x7415	                            je 0x40000fa	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e5	          0x4585ed	                         test r13d, r13d	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000e8	            0x7510	                           jne 0x40000fa	       132	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000ea	        0x488b7518	            mov rsi, qword [rbp + 0x18] 	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000ee	      0xbf00000000	                              mov edi, 0	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000f3	      0xe800000000	                          call 0x40000f8	       133	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000f8	            0xeb71	                           jmp 0x400016b	       134	reset.c	FUNCTION_4	FOR_1	IF_1
0x40000fa	        0x488b5518	            mov rdx, qword [rbp + 0x18] 	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x40000fe	        0x410fb7fe	                         movzx edi, r14w	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000102	    0x41b800000000	                              mov r8d, 0	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000108	      0xb900000000	                              mov ecx, 0	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x400010d	          0x4889ee	                            mov rsi, rbp	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000110	      0xe800000000	                          call 0x4000115	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000115	          0x4989c6	                            mov r14, rax	       137	reset.c	FUNCTION_4	FOR_1	CALL_2
0x4000118	          0x4885c0	                           test rax, rax	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400011b	            0x7528	                           jne 0x4000145	       139	reset.c	FUNCTION_4	FOR_1	IF_2
0x400011d	        0x488b5d18	            mov rbx, qword [rbp + 0x18] 	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000121	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_25
0x4000126	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_25
0x400012b	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_25
0x4000130	      0xe800000000	                          call 0x4000135	        54	gettext.h	FUNCTION_25
0x4000135	          0x4889de	                            mov rsi, rbx	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000138	          0x4889c7	                            mov rdi, rax	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x400013b	      0xb800000000	                              mov eax, 0	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000140	      0xe800000000	                          call 0x4000145	       140	reset.c	FUNCTION_4	FOR_1	IF_2	CALL_4
0x4000145	          0x4585ff	                         test r15d, r15d	       142	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000148	            0x740f	                            je 0x4000159	       142	reset.c	FUNCTION_4	FOR_1	IF_3
0x400014a	    0x814838000000	       or dword [rax + 0x38], 0x20000000	       143	reset.c	FUNCTION_4	FOR_1	IF_3
0x4000151	          0x4889c7	                            mov rdi, rax	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000154	      0xe800000000	                          call 0x4000159	       144	reset.c	FUNCTION_4	FOR_1	IF_3	CALL_5
0x4000159	      0xba03000000	                              mov edx, 3	       146	reset.c	FUNCTION_4	FOR_1
0x400015e	          0x4c89f6	                            mov rsi, r14	       146	reset.c	FUNCTION_4	FOR_1
0x4000161	      0xbf00000000	                              mov edi, 0	       146	reset.c	FUNCTION_4	FOR_1
0x4000166	      0xe800000000	                          call 0x400016b	       146	reset.c	FUNCTION_4	FOR_1
0x400016b	          0x83c301	                              add ebx, 1	       127	reset.c	FUNCTION_4	FOR_1
0x400016e	      0x41395c240c	              cmp dword [r12 + 0xc], ebx	       127	reset.c	FUNCTION_4	FOR_1
0x4000173	     0xf8f2cffffff	                            jg 0x40000a5	       127	reset.c	FUNCTION_4	FOR_1
0x4000179	        0x4883c408	                              add rsp, 8	       148	reset.c	FUNCTION_4
0x400017d	              0x5b	                                 pop rbx	       148	reset.c	FUNCTION_4
0x400017e	              0x5d	                                 pop rbp	       148	reset.c	FUNCTION_4
0x400017f	            0x415c	                                 pop r12	       148	reset.c	FUNCTION_4
0x4000181	            0x415d	                                 pop r13	       148	reset.c	FUNCTION_4
0x4000183	            0x415e	                                 pop r14	       148	reset.c	FUNCTION_4
0x4000185	            0x415f	                                 pop r15	       148	reset.c	FUNCTION_4
0x4000187	              0xc3	                                     ret	       148	reset.c	FUNCTION_4
git_reset_config	WHILE,0:functions,0:SWITCH,0:IF,1:DO,0:CALL,3:FOR,0:ELSE,0	20
0x4000040	        0x4883ec08	                              sub rsp, 8	       273	reset.c	FUNCTION_10
0x4000044	          0x4889f8	                            mov rax, rdi	       273	reset.c	FUNCTION_10
0x4000047	          0x4989f0	                             mov r8, rsi	       273	reset.c	FUNCTION_10
0x400004a	      0xbf00000000	                              mov edi, 0	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400004f	      0xb912000000	                           mov ecx, 0x12	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000054	          0x4889c6	                            mov rsi, rax	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000057	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000059	        0x400f97c6	                                seta sil	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x400005d	           0xf92c1	                                 setb cl	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000060	          0x4038ce	                             cmp sil, cl	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000063	            0x750d	                           jne 0x4000072	       274	reset.c	FUNCTION_10	IF_1	CALL_1
0x4000065	          0x4c89c6	                             mov rsi, r8	       275	reset.c	FUNCTION_10	CALL_2
0x4000068	          0x4889c7	                            mov rdi, rax	       275	reset.c	FUNCTION_10	CALL_2
0x400006b	      0xe800000000	                          call 0x4000070	       275	reset.c	FUNCTION_10	CALL_2
0x4000070	            0xeb0b	                           jmp 0x400007d	       275	reset.c	FUNCTION_10	CALL_2
0x4000072	          0x4c89c6	                             mov rsi, r8	       277	reset.c	FUNCTION_10	CALL_3
0x4000075	          0x4889c7	                            mov rdi, rax	       277	reset.c	FUNCTION_10	CALL_3
0x4000078	      0xe800000000	                          call 0x400007d	       277	reset.c	FUNCTION_10	CALL_3
0x400007d	        0x4883c408	                              add rsp, 8	       278	reset.c	FUNCTION_10
0x4000081	              0xc3	                                     ret	       278	reset.c	FUNCTION_10
reset_index	WHILE,0:functions,0:SWITCH,1:IF,7:DO,0:CALL,15:FOR,1:ELSE,0	125
0x4000230	            0x4155	                                push r13	        46	reset.c	FUNCTION_2
0x4000232	            0x4154	                                push r12	        46	reset.c	FUNCTION_2
0x4000234	              0x55	                                push rbp	        46	reset.c	FUNCTION_2
0x4000235	              0x53	                                push rbx	        46	reset.c	FUNCTION_2
0x4000236	    0x4881ec880300	                          sub rsp, 0x388	        46	reset.c	FUNCTION_2
0x400023d	          0x4989fd	                            mov r13, rdi	        46	reset.c	FUNCTION_2
0x4000240	            0x89f5	                            mov ebp, esi	        46	reset.c	FUNCTION_2
0x4000242	    0x64488b042528	                mov rax, qword fs:[0x28]	        46	reset.c	FUNCTION_2
0x400024b	    0x488984247803	            mov qword [rsp + 0x378], rax	        46	reset.c	FUNCTION_2
0x4000253	            0x31c0	                            xor eax, eax	        46	reset.c	FUNCTION_2
0x4000255	      0x488d742470	                   lea rsi, [rsp + 0x70]	        90	string3.h	FUNCTION_30	CALL_6
0x400025a	      0xb960000000	                           mov ecx, 0x60	        90	string3.h	FUNCTION_30	CALL_6
0x400025f	          0x4889f7	                            mov rdi, rsi	        90	string3.h	FUNCTION_30	CALL_6
0x4000262	          0xf348ab	              rep stosq qword [rdi], rax	        90	string3.h	FUNCTION_30	CALL_6
0x4000265	    0xc78424700200	              mov dword [rsp + 0x270], 1	        54	reset.c	FUNCTION_2
0x4000270	    0x48c784249002	              mov qword [rsp + 0x290], 0	        55	reset.c	FUNCTION_2
0x400027c	    0x48c784248802	              mov qword [rsp + 0x288], 0	        56	reset.c	FUNCTION_2
0x4000288	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        57	reset.c	FUNCTION_2
0x4000294	    0xc74424740100	               mov dword [rsp + 0x74], 1	        58	reset.c	FUNCTION_2
0x400029c	            0x85d2	                           test edx, edx	        59	reset.c	FUNCTION_2	IF_1
0x400029e	            0x750b	                           jne 0x40002ab	        59	reset.c	FUNCTION_2	IF_1
0x40002a0	    0xc78424880000	               mov dword [rsp + 0x88], 1	        60	reset.c	FUNCTION_2	IF_1
0x40002ab	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002ae	            0x7414	                            je 0x40002c4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b0	          0x83fd02	                              cmp ebp, 2	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b3	            0x7c17	                            jl 0x40002cc	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b5	          0x83fd04	                              cmp ebp, 4	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002b8	            0x7f12	                            jg 0x40002cc	        61	reset.c	FUNCTION_2	SWITCH_1
0x40002ba	    0xc74424780100	               mov dword [rsp + 0x78], 1	        64	reset.c	FUNCTION_2	SWITCH_1
0x40002c2	            0xeb10	                           jmp 0x40002d4	        65	reset.c	FUNCTION_2	SWITCH_1
0x40002c4	    0xc74424780100	               mov dword [rsp + 0x78], 1	        67	reset.c	FUNCTION_2	SWITCH_1
0x40002cc	    0xc74424700100	               mov dword [rsp + 0x70], 1	        70	reset.c	FUNCTION_2	SWITCH_1
0x40002d4	      0xbf00000000	                              mov edi, 0	        73	reset.c	FUNCTION_2
0x40002d9	      0xe800000000	                          call 0x40002de	        73	reset.c	FUNCTION_2
0x40002de	      0xbb00000000	                              mov ebx, 0	        47	reset.c	FUNCTION_2
0x40002e3	          0x83fd04	                              cmp ebp, 4	        75	reset.c	FUNCTION_2	IF_2
0x40002e6	     0xf8586000000	                           jne 0x4000372	        75	reset.c	FUNCTION_2	IF_2
0x40002ec	          0x4889e6	                            mov rsi, rsp	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40002ef	      0xbf00000000	                              mov edi, 0	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40002f4	      0xe800000000	                          call 0x40002f9	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40002f9	            0x85c0	                           test eax, eax	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40002fb	            0x7423	                            je 0x4000320	        77	reset.c	FUNCTION_2	IF_2	IF_3	CALL_2
0x40002fd	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_25
0x4000302	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_25
0x4000307	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_25
0x400030c	      0xe800000000	                          call 0x4000311	        54	gettext.h	FUNCTION_25
0x4000311	          0x4889c7	                            mov rdi, rax	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000314	      0xb800000000	                              mov eax, 0	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000319	      0xe800000000	                          call 0x400031e	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x400031e	            0xeb48	                           jmp 0x4000368	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000320	          0x4889e6	                            mov rsi, rsp	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000323	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000328	      0xe800000000	                          call 0x400032d	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x400032d	          0x4885c0	                           test rax, rax	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000330	            0x7523	                           jne 0x4000355	        79	reset.c	FUNCTION_2	IF_2	IF_4	CALL_5
0x4000332	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_25
0x4000337	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_25
0x400033c	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_25
0x4000341	      0xe800000000	                          call 0x4000346	        54	gettext.h	FUNCTION_25
0x4000346	          0x4889c7	                            mov rdi, rax	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000349	      0xb800000000	                              mov eax, 0	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x400034e	      0xe800000000	                          call 0x4000353	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000353	            0xeb13	                           jmp 0x4000368	        80	reset.c	FUNCTION_2	IF_2	CALL_7
0x4000355	    0x48c78424d800	               mov qword [rsp + 0xd8], 0	        82	reset.c	FUNCTION_2	IF_2
0x4000361	      0xbb01000000	                              mov ebx, 1	        81	reset.c	FUNCTION_2	IF_2
0x4000366	            0xeb0a	                           jmp 0x4000372	        81	reset.c	FUNCTION_2	IF_2
0x4000368	      0xb8ffffffff	                     mov eax, 0xffffffff	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x400036d	      0xe9b7000000	                           jmp 0x4000429	        78	reset.c	FUNCTION_2	IF_2	CALL_4
0x4000372	          0x4863c3	                         movsxd rax, ebx	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000375	        0x488d0480	                  lea rax, [rax + rax*4]	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000379	      0x488d7cc420	          lea rdi, [rsp + rax*8 + 0x20] 	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400037e	          0x4c89ee	                            mov rsi, r13	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000381	      0xe800000000	                          call 0x4000386	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000386	          0x4885c0	                           test rax, rax	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x4000389	            0x7537	                           jne 0x40003c2	        85	reset.c	FUNCTION_2	IF_5	CALL_8
0x400038b	          0x4c89ef	                            mov rdi, r13	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x400038e	      0xe800000000	                          call 0x4000393	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000393	          0x4889c5	                            mov rbp, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x4000396	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_25
0x400039b	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_25
0x40003a0	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_25
0x40003a5	      0xe800000000	                          call 0x40003aa	        54	gettext.h	FUNCTION_25
0x40003aa	          0x4889ee	                            mov rsi, rbp	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40003ad	          0x4889c7	                            mov rdi, rax	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40003b0	      0xb800000000	                              mov eax, 0	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40003b5	      0xe800000000	                          call 0x40003ba	        86	reset.c	FUNCTION_2	IF_5	CALL_11
0x40003ba	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40003c0	            0xeb41	                           jmp 0x4000403	        51	reset.c	FUNCTION_2
0x40003c2	          0x83c301	                              add ebx, 1	        89	reset.c	FUNCTION_2
0x40003c5	      0x488d542470	                   lea rdx, [rsp + 0x70]	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003ca	      0x488d742420	                   lea rsi, [rsp + 0x20]	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003cf	            0x89df	                            mov edi, ebx	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003d1	      0xe800000000	                          call 0x40003d6	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003d6	    0x41bcffffffff	                    mov r12d, 0xffffffff	        51	reset.c	FUNCTION_2
0x40003dc	            0x85c0	                           test eax, eax	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003de	            0x7523	                           jne 0x4000403	        91	reset.c	FUNCTION_2	IF_6	CALL_12
0x40003e0	    0x41bc00000000	                             mov r12d, 0	        99	reset.c	FUNCTION_2
0x40003e6	    0xf7c5fdffffff	                    test ebp, 0xfffffffd	        94	reset.c	FUNCTION_2	IF_7
0x40003ec	            0x7515	                           jne 0x4000403	        94	reset.c	FUNCTION_2	IF_7
0x40003ee	          0x4c89ef	                            mov rdi, r13	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x40003f1	      0xe800000000	                          call 0x40003f6	        95	reset.c	FUNCTION_2	IF_7	CALL_13
0x40003f6	          0x4889c6	                            mov rsi, rax	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x40003f9	      0xbf00000000	                              mov edi, 0	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x40003fe	      0xe800000000	                          call 0x4000403	        96	reset.c	FUNCTION_2	IF_7	CALL_14
0x4000403	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000406	            0x85db	                           test ebx, ebx	       102	reset.c	FUNCTION_2	FOR_1
0x4000408	            0x7e1f	                           jle 0x4000429	       102	reset.c	FUNCTION_2	FOR_1
0x400040a	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       103	reset.c	FUNCTION_2	CALL_15
0x400040f	      0xe800000000	                          call 0x4000414	       103	reset.c	FUNCTION_2	CALL_15
0x4000414	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000417	          0x83fb01	                              cmp ebx, 1	       102	reset.c	FUNCTION_2	FOR_1
0x400041a	            0x7e0d	                           jle 0x4000429	       102	reset.c	FUNCTION_2	FOR_1
0x400041c	      0x488b7c2448	            mov rdi, qword [rsp + 0x48] 	       103	reset.c	FUNCTION_2	CALL_15
0x4000421	      0xe800000000	                          call 0x4000426	       103	reset.c	FUNCTION_2	CALL_15
0x4000426	          0x4489e0	                           mov eax, r12d	       104	reset.c	FUNCTION_2
0x4000429	    0x488b8c247803	           mov rcx, qword [rsp + 0x378] 	       105	reset.c	FUNCTION_2
0x4000431	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       105	reset.c	FUNCTION_2
0x400043a	            0x7405	                            je 0x4000441	       105	reset.c	FUNCTION_2
0x400043c	      0xe800000000	                          call 0x4000441	       105	reset.c	FUNCTION_2
0x4000441	    0x4881c4880300	                          add rsp, 0x388	       105	reset.c	FUNCTION_2
0x4000448	              0x5b	                                 pop rbx	       105	reset.c	FUNCTION_2
0x4000449	              0x5d	                                 pop rbp	       105	reset.c	FUNCTION_2
0x400044a	            0x415c	                                 pop r12	       105	reset.c	FUNCTION_2
0x400044c	            0x415d	                                 pop r13	       105	reset.c	FUNCTION_2
0x400044e	              0xc3	                                     ret	       105	reset.c	FUNCTION_2
