pop_item	SWITCH,0:WHILE,0:ELSE,0:IF,0:functions,0:CALL,1:DO,0:FOR,0	20
0x4000040	              0x55	                                push rbp	        19	mergesort.c	FUNCTION_2
0x4000041	              0x53	                                push rbx	        19	mergesort.c	FUNCTION_2
0x4000042	        0x4883ec08	                              sub rsp, 8	        19	mergesort.c	FUNCTION_2
0x4000046	          0x4889fb	                            mov rbx, rdi	        19	mergesort.c	FUNCTION_2
0x4000049	          0x488b2f	                    mov rbp, qword [rdi]	        20	mergesort.c	FUNCTION_2
0x400004c	          0x4889ef	                            mov rdi, rbp	        21	mergesort.c	FUNCTION_2	CALL_1
0x400004f	            0xffd6	                                call rsi	        21	mergesort.c	FUNCTION_2	CALL_1
0x4000051	          0x488903	                    mov qword [rbx], rax	        21	mergesort.c	FUNCTION_2	CALL_1
0x4000054	          0x4885c0	                           test rax, rax	        22	mergesort.c	FUNCTION_2
0x4000057	            0x740a	                            je 0x4000063	        22	mergesort.c	FUNCTION_2
0x4000059	        0x488b4308	                mov rax, qword [rbx + 8]	        22	mergesort.c	FUNCTION_2
0x400005d	        0x4883e801	                              sub rax, 1	        22	mergesort.c	FUNCTION_2
0x4000061	            0xeb05	                           jmp 0x4000068	        22	mergesort.c	FUNCTION_2
0x4000063	      0xb800000000	                              mov eax, 0	        22	mergesort.c	FUNCTION_2
0x4000068	        0x48894308	                mov qword [rbx + 8], rax	        22	mergesort.c	FUNCTION_2
0x400006c	          0x4889e8	                            mov rax, rbp	        24	mergesort.c	FUNCTION_2
0x400006f	        0x4883c408	                              add rsp, 8	        24	mergesort.c	FUNCTION_2
0x4000073	              0x5b	                                 pop rbx	        24	mergesort.c	FUNCTION_2
0x4000074	              0x5d	                                 pop rbp	        24	mergesort.c	FUNCTION_2
0x4000075	              0xc3	                                     ret	        24	mergesort.c	FUNCTION_2
llist_mergesort	SWITCH,0:WHILE,2:ELSE,4:IF,6:functions,0:CALL,12:DO,0:FOR,1	144
0x4000076	            0x4157	                                push r15	        30	mergesort.c	FUNCTION_3
0x4000078	            0x4156	                                push r14	        30	mergesort.c	FUNCTION_3
0x400007a	            0x4155	                                push r13	        30	mergesort.c	FUNCTION_3
0x400007c	            0x4154	                                push r12	        30	mergesort.c	FUNCTION_3
0x400007e	              0x55	                                push rbp	        30	mergesort.c	FUNCTION_3
0x400007f	              0x53	                                push rbx	        30	mergesort.c	FUNCTION_3
0x4000080	        0x4883ec58	                           sub rsp, 0x58	        30	mergesort.c	FUNCTION_3
0x4000084	      0x48897c2418	             mov qword [rsp + 0x18], rdi	        30	mergesort.c	FUNCTION_3
0x4000089	          0x4989cf	                            mov r15, rcx	        30	mergesort.c	FUNCTION_3
0x400008c	    0x64488b0c2528	                mov rcx, qword fs:[0x28]	        30	mergesort.c	FUNCTION_3
0x4000095	      0x48894c2448	             mov qword [rsp + 0x48], rcx	        30	mergesort.c	FUNCTION_3
0x400009a	            0x31c9	                            xor ecx, ecx	        30	mergesort.c	FUNCTION_3
0x400009c	          0x4885ff	                           test rdi, rdi	        33	mergesort.c	FUNCTION_3	IF_1
0x400009f	     0xf84b4010000	                            je 0x4000259	        33	mergesort.c	FUNCTION_3	IF_1
0x40000a5	          0x4889f5	                            mov rbp, rsi	        33	mergesort.c	FUNCTION_3	IF_1
0x40000a8	          0x4989d6	                            mov r14, rdx	        33	mergesort.c	FUNCTION_3	IF_1
0x40000ab	    0x48c704240100	                      mov qword [rsp], 1	        33	mergesort.c	FUNCTION_3	IF_1
0x40000b3	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        39	mergesort.c	FUNCTION_3	FOR_1
0x40000b8	      0x4889442420	             mov qword [rsp + 0x20], rax	        39	mergesort.c	FUNCTION_3	FOR_1
0x40000bd	        0x488b1424	                    mov rdx, qword [rsp]	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000c1	        0x488d4aff	                      lea rcx, [rdx - 1]	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000c5	      0x48894c2410	             mov qword [rsp + 0x10], rcx	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000ca	          0x4885d2	                           test rdx, rdx	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000cd	       0xf9544240f	                  setne byte [rsp + 0xf]	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000d2	       0xfb654240f	            movzx edx, byte [rsp + 0xf] 	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000d7	          0x4885c0	                           test rax, rax	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000da	            0x7422	                            je 0x40000fe	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000dc	            0x84d2	                             test dl, dl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000de	            0x741e	                            je 0x40000fe	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000e0	          0x4889cb	                            mov rbx, rcx	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000e3	          0x4889c7	                            mov rdi, rax	        13	mergesort.c	FUNCTION_1	CALL_1
0x40000e6	            0xffd5	                                call rbp	        13	mergesort.c	FUNCTION_1	CALL_1
0x40000e8	          0x4885c0	                           test rax, rax	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000eb	           0xf95c1	                                setne cl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000ee	          0x4885db	                           test rbx, rbx	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000f1	           0xf95c2	                                setne dl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000f4	        0x4883eb01	                              sub rbx, 1	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000f8	            0x84d1	                             test cl, dl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000fa	            0x75e7	                           jne 0x40000e3	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000fc	            0xeb05	                           jmp 0x4000103	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40000fe	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000103	      0x4889442430	             mov qword [rsp + 0x30], rax	        40	mergesort.c	FUNCTION_3	FOR_1	CALL_1
0x4000108	          0x4885c0	                           test rax, rax	        41	mergesort.c	FUNCTION_3	FOR_1	IF_2
0x400010b	     0xf8441010000	                            je 0x4000252	        41	mergesort.c	FUNCTION_3	FOR_1	IF_2
0x4000111	        0x488b0c24	                    mov rcx, qword [rsp]	        43	mergesort.c	FUNCTION_3	FOR_1
0x4000115	      0x48894c2438	             mov qword [rsp + 0x38], rcx	        43	mergesort.c	FUNCTION_3	FOR_1
0x400011a	      0x48894c2428	             mov qword [rsp + 0x28], rcx	        43	mergesort.c	FUNCTION_3	FOR_1
0x400011f	          0x4889c6	                            mov rsi, rax	        45	mergesort.c	FUNCTION_3	FOR_1	IF_3	CALL_2
0x4000122	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	        45	mergesort.c	FUNCTION_3	FOR_1	IF_3	CALL_2
0x4000127	          0x41ffd7	                                call r15	        45	mergesort.c	FUNCTION_3	FOR_1	IF_3	CALL_2
0x400012a	            0x85c0	                           test eax, eax	        45	mergesort.c	FUNCTION_3	FOR_1	IF_3	CALL_2
0x400012c	            0x7e28	                           jle 0x4000156	        45	mergesort.c	FUNCTION_3	FOR_1	IF_3	CALL_2
0x400012e	          0x4889ee	                            mov rsi, rbp	        46	mergesort.c	FUNCTION_3	FOR_1	CALL_3
0x4000131	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	        46	mergesort.c	FUNCTION_3	FOR_1	CALL_3
0x4000136	      0xe805ffffff	                       call sym.pop_item	        46	mergesort.c	FUNCTION_3	FOR_1	CALL_3
0x400013b	      0x4889442418	             mov qword [rsp + 0x18], rax	        46	mergesort.c	FUNCTION_3	FOR_1	CALL_3
0x4000140	      0x488b5c2418	            mov rbx, qword [rsp + 0x18] 	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x4000145	    0x48837c242000	               cmp qword [rsp + 0x20], 0	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x400014b	     0xf8584000000	                           jne 0x40001d5	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x4000151	      0xe9e8000000	                           jmp 0x400023e	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x4000156	          0x4889ee	                            mov rsi, rbp	        48	mergesort.c	FUNCTION_3	FOR_1	CALL_4
0x4000159	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	        48	mergesort.c	FUNCTION_3	FOR_1	CALL_4
0x400015e	      0xe8ddfeffff	                       call sym.pop_item	        48	mergesort.c	FUNCTION_3	FOR_1	CALL_4
0x4000163	      0x4889442418	             mov qword [rsp + 0x18], rax	        48	mergesort.c	FUNCTION_3	FOR_1	CALL_4
0x4000168	            0xebd6	                           jmp 0x4000140	        48	mergesort.c	FUNCTION_3	FOR_1	CALL_4
0x400016a	          0x4889ee	                            mov rsi, rbp	        55	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_5
0x400016d	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	        55	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_5
0x4000172	      0xe8c9feffff	                       call sym.pop_item	        55	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_5
0x4000177	          0x4989c4	                            mov r12, rax	        55	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_5
0x400017a	            0xeb4d	                           jmp 0x40001c9	        55	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_5
0x400017c	    0x48837c243800	               cmp qword [rsp + 0x38], 0	        56	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000182	            0x7512	                           jne 0x4000196	        56	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000184	          0x4889ee	                            mov rsi, rbp	        57	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000187	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	        57	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x400018c	      0xe8affeffff	                       call sym.pop_item	        57	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000191	          0x4989c4	                            mov r12, rax	        57	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000194	            0xeb33	                           jmp 0x40001c9	        57	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_2	IF_5
0x4000196	      0x488b742430	            mov rsi, qword [rsp + 0x30] 	        58	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6	CALL_7
0x400019b	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	        58	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6	CALL_7
0x40001a0	          0x41ffd7	                                call r15	        58	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6	CALL_7
0x40001a3	            0x85c0	                           test eax, eax	        58	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6	CALL_7
0x40001a5	            0x7e12	                           jle 0x40001b9	        58	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6	CALL_7
0x40001a7	          0x4889ee	                            mov rsi, rbp	        59	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6
0x40001aa	      0x488d7c2430	                   lea rdi, [rsp + 0x30]	        59	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6
0x40001af	      0xe88cfeffff	                       call sym.pop_item	        59	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6
0x40001b4	          0x4989c4	                            mov r12, rax	        59	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6
0x40001b7	            0xeb10	                           jmp 0x40001c9	        59	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	ELSE_3	IF_6
0x40001b9	          0x4889ee	                            mov rsi, rbp	        61	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_9
0x40001bc	      0x488d7c2420	                   lea rdi, [rsp + 0x20]	        61	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_9
0x40001c1	      0xe87afeffff	                       call sym.pop_item	        61	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_9
0x40001c6	          0x4989c4	                            mov r12, rax	        61	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_9
0x40001c9	          0x4c89e6	                            mov rsi, r12	        62	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_10
0x40001cc	          0x4889df	                            mov rdi, rbx	        62	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_10
0x40001cf	          0x41ffd6	                                call r14	        62	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_10
0x40001d2	          0x4c89e3	                            mov rbx, r12	        62	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2	CALL_10
0x40001d5	    0x48837c242800	               cmp qword [rsp + 0x28], 0	        51	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2
0x40001db	            0x759f	                           jne 0x400017c	        51	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2
0x40001dd	      0x4c8b6c2438	            mov r13, qword [rsp + 0x38] 	        51	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2
0x40001e2	          0x4d85ed	                           test r13, r13	        51	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2
0x40001e5	            0x7583	                           jne 0x400016a	        51	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	WHILE_2
0x40001e7	      0x488b442430	            mov rax, qword [rsp + 0x30] 	        64	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x40001ec	      0x4889442420	             mov qword [rsp + 0x20], rax	        64	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x40001f1	        0x488b1424	                    mov rdx, qword [rsp]	        65	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x40001f5	      0x4889542428	             mov qword [rsp + 0x28], rdx	        65	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x40001fa	          0x4885c0	                           test rax, rax	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40001fd	            0x7425	                            je 0x4000224	        12	mergesort.c	FUNCTION_1	WHILE_1
0x40001ff	      0x807c240f00	                 cmp byte [rsp + 0xf], 0	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000204	            0x741e	                            je 0x4000224	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000206	      0x4c8b642410	            mov r12, qword [rsp + 0x10] 	        12	mergesort.c	FUNCTION_1	WHILE_1
0x400020b	          0x4889c7	                            mov rdi, rax	        13	mergesort.c	FUNCTION_1	CALL_1
0x400020e	            0xffd5	                                call rbp	        13	mergesort.c	FUNCTION_1	CALL_1
0x4000210	          0x4d85e4	                           test r12, r12	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000213	           0xf95c1	                                setne cl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000216	          0x4885c0	                           test rax, rax	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000219	           0xf95c2	                                setne dl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x400021c	        0x4983ec01	                              sub r12, 1	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000220	            0x84d1	                             test cl, dl	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000222	            0x75e7	                           jne 0x400020b	        12	mergesort.c	FUNCTION_1	WHILE_1
0x4000224	      0x4889442430	             mov qword [rsp + 0x30], rax	        66	mergesort.c	FUNCTION_3	FOR_1	WHILE_1	CALL_11
0x4000229	          0x4885c0	                           test rax, rax	        67	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x400022c	      0x4c0f452c24	                 cmovne r13, qword [rsp]	        67	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x4000231	      0x4c896c2438	             mov qword [rsp + 0x38], r13	        67	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x4000236	    0x48837c242000	               cmp qword [rsp + 0x20], 0	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x400023c	            0x7597	                           jne 0x40001d5	        50	mergesort.c	FUNCTION_3	FOR_1	WHILE_1
0x400023e	      0xbe00000000	                              mov esi, 0	        70	mergesort.c	FUNCTION_3	FOR_1	CALL_12
0x4000243	          0x4889df	                            mov rdi, rbx	        70	mergesort.c	FUNCTION_3	FOR_1	CALL_12
0x4000246	          0x41ffd6	                                call r14	        70	mergesort.c	FUNCTION_3	FOR_1	CALL_12
0x4000249	        0x48d12424	                      shl qword [rsp], 1	        35	mergesort.c	FUNCTION_3	FOR_1
0x400024d	      0xe961feffff	                           jmp 0x40000b3	        71	mergesort.c	FUNCTION_3	FOR_1
0x4000252	      0x488b442418	            mov rax, qword [rsp + 0x18] 	        72	mergesort.c	FUNCTION_3
0x4000257	            0xeb05	                           jmp 0x400025e	        72	mergesort.c	FUNCTION_3
0x4000259	      0xb800000000	                              mov eax, 0	        34	mergesort.c	FUNCTION_3	IF_1
0x400025e	      0x488b4c2448	            mov rcx, qword [rsp + 0x48] 	        73	mergesort.c	FUNCTION_3
0x4000263	    0x6448330c2528	                xor rcx, qword fs:[0x28]	        73	mergesort.c	FUNCTION_3
0x400026c	            0x7405	                            je 0x4000273	        73	mergesort.c	FUNCTION_3
0x400026e	      0xe800000000	                          call 0x4000273	        73	mergesort.c	FUNCTION_3
0x4000273	        0x4883c458	                           add rsp, 0x58	        73	mergesort.c	FUNCTION_3
0x4000277	              0x5b	                                 pop rbx	        73	mergesort.c	FUNCTION_3
0x4000278	              0x5d	                                 pop rbp	        73	mergesort.c	FUNCTION_3
0x4000279	            0x415c	                                 pop r12	        73	mergesort.c	FUNCTION_3
0x400027b	            0x415d	                                 pop r13	        73	mergesort.c	FUNCTION_3
0x400027d	            0x415e	                                 pop r14	        73	mergesort.c	FUNCTION_3
0x400027f	            0x415f	                                 pop r15	        73	mergesort.c	FUNCTION_3
0x4000281	              0xc3	                                     ret	        73	mergesort.c	FUNCTION_3
