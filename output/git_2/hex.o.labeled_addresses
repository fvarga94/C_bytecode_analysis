hex_to_bytes	FOR,1:functions,0:ELSE,0:WHILE,0:IF,1:DO,0:CALL,2:SWITCH,0	33
0x4000040	          0x4885d2	                           test rdx, rdx	        40	hex.c	FUNCTION_1	FOR_1
0x4000043	            0x7469	                            je 0x40000ae	        40	hex.c	FUNCTION_1	FOR_1
0x4000045	           0xfb606	                   movzx eax, byte [rsi]	      1273	cache.h	FUNCTION_32
0x4000048	     0xfbe88000000	                   movsx ecx, byte [rax]	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400004f	          0xc1e104	                              shl ecx, 4	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x4000052	         0xfb64601	               movzx eax, byte [rsi + 1]	      1273	cache.h	FUNCTION_32
0x4000056	     0xfbe80000000	                   movsx eax, byte [rax]	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400005d	             0x9c1	                             or ecx, eax	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400005f	      0xb8ffffffff	                     mov eax, 0xffffffff	        44	hex.c	FUNCTION_1	FOR_1	IF_1
0x4000064	    0xf7c100ffffff	                    test ecx, 0xffffff00	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x400006a	            0x754d	                           jne 0x40000b9	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x400006c	        0x4c8d4701	                       lea r8, [rdi + 1]	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x4000070	          0x4801fa	                            add rdx, rdi	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x4000073	            0xeb26	                           jmp 0x400009b	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x4000075	           0xfb606	                   movzx eax, byte [rsi]	      1273	cache.h	FUNCTION_32
0x4000078	     0xfbe88000000	                   movsx ecx, byte [rax]	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400007f	          0xc1e104	                              shl ecx, 4	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x4000082	         0xfb64601	               movzx eax, byte [rsi + 1]	      1273	cache.h	FUNCTION_32
0x4000086	     0xfbe80000000	                   movsx eax, byte [rax]	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400008d	             0x9c1	                             or ecx, eax	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x400008f	        0x4983c001	                               add r8, 1	        41	hex.c	FUNCTION_1	FOR_1	CALL_2
0x4000093	    0xf7c100ffffff	                    test ecx, 0xffffff00	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x4000099	            0x7519	                           jne 0x40000b4	        43	hex.c	FUNCTION_1	FOR_1	IF_1
0x400009b	        0x418848ff	                   mov byte [r8 - 1], cl	        45	hex.c	FUNCTION_1	FOR_1
0x400009f	        0x4883c602	                              add rsi, 2	        40	hex.c	FUNCTION_1	FOR_1
0x40000a3	          0x4c39c2	                             cmp rdx, r8	        40	hex.c	FUNCTION_1	FOR_1
0x40000a6	            0x75cd	                           jne 0x4000075	        40	hex.c	FUNCTION_1	FOR_1
0x40000a8	      0xb800000000	                              mov eax, 0	        47	hex.c	FUNCTION_1
0x40000ad	              0xc3	                                     ret	        47	hex.c	FUNCTION_1
0x40000ae	      0xb800000000	                              mov eax, 0	        47	hex.c	FUNCTION_1
0x40000b3	              0xc3	                                     ret	        47	hex.c	FUNCTION_1
0x40000b4	      0xb8ffffffff	                     mov eax, 0xffffffff	        44	hex.c	FUNCTION_1	FOR_1	IF_1
0x40000b9	            0xf3c3	                                     ret	        48	hex.c	FUNCTION_1
oid_to_hex_r	FOR,0:functions,0:ELSE,0:WHILE,0:IF,0:DO,0:CALL,1:SWITCH,0	2
0x400016e	      0xe800000000	                          call 0x4000173	        94	hex.c	FUNCTION_6	CALL_1
0x4000173	            0xf3c3	                                     ret	        95	hex.c	FUNCTION_6
parse_oid_hex	FOR,0:functions,0:ELSE,0:WHILE,0:IF,1:DO,0:CALL,1:SWITCH,0	12
0x400010f	              0x55	                                push rbp	        69	hex.c	FUNCTION_4
0x4000110	              0x53	                                push rbx	        69	hex.c	FUNCTION_4
0x4000111	          0x4889fb	                            mov rbx, rdi	        69	hex.c	FUNCTION_4
0x4000114	          0x4889d5	                            mov rbp, rdx	        69	hex.c	FUNCTION_4
0x4000117	      0xe800000000	                          call 0x400011c	        65	hex.c	FUNCTION_3	CALL_1
0x400011c	            0x85c0	                           test eax, eax	        71	hex.c	FUNCTION_4	IF_1
0x400011e	            0x7508	                           jne 0x4000128	        71	hex.c	FUNCTION_4	IF_1
0x4000120	        0x4883c328	                           add rbx, 0x28	        72	hex.c	FUNCTION_4	IF_1
0x4000124	        0x48895d00	                    mov qword [rbp], rbx	        72	hex.c	FUNCTION_4	IF_1
0x4000128	              0x5b	                                 pop rbx	        74	hex.c	FUNCTION_4
0x4000129	              0x5d	                                 pop rbp	        74	hex.c	FUNCTION_4
0x400012a	              0xc3	                                     ret	        74	hex.c	FUNCTION_4
get_sha1_hex	FOR,1:functions,0:ELSE,0:WHILE,0:IF,1:DO,0:CALL,1:SWITCH,0	23
0x40000bb	        0x4c8d4728	                    lea r8, [rdi + 0x28]	        51	hex.c	FUNCTION_2
0x40000bf	           0xfb607	                   movzx eax, byte [rdi]	      1273	cache.h	FUNCTION_32
0x40000c2	     0xfb690000000	                   movzx edx, byte [rax]	      1273	cache.h	FUNCTION_32
0x40000c9	           0xfbeca	                           movsx ecx, dl	      1273	cache.h	FUNCTION_32
0x40000cc	            0x89c8	                            mov eax, ecx	      1283	cache.h	FUNCTION_33	CALL_2
0x40000ce	    0xf7c1f0ffffff	                    test ecx, 0xfffffff0	      1283	cache.h	FUNCTION_33	CALL_2
0x40000d4	            0x7512	                           jne 0x40000e8	      1283	cache.h	FUNCTION_33	CALL_2
0x40000d6	         0xfb64701	               movzx eax, byte [rdi + 1]	      1273	cache.h	FUNCTION_32
0x40000da	     0xfbe90000000	                   movsx edx, byte [rax]	      1283	cache.h	FUNCTION_33	CALL_2
0x40000e1	            0x89c8	                            mov eax, ecx	      1283	cache.h	FUNCTION_33	CALL_2
0x40000e3	          0xc1e004	                              shl eax, 4	      1283	cache.h	FUNCTION_33	CALL_2
0x40000e6	             0x9d0	                             or eax, edx	      1283	cache.h	FUNCTION_33	CALL_2
0x40000e8	            0x85c0	                           test eax, eax	        55	hex.c	FUNCTION_2	FOR_1	IF_1
0x40000ea	            0x7816	                            js 0x4000102	        55	hex.c	FUNCTION_2	FOR_1	IF_1
0x40000ec	        0x4883c601	                              add rsi, 1	        57	hex.c	FUNCTION_2	FOR_1
0x40000f0	          0x8846ff	                  mov byte [rsi - 1], al	        57	hex.c	FUNCTION_2	FOR_1
0x40000f3	        0x4883c702	                              add rdi, 2	        58	hex.c	FUNCTION_2	FOR_1
0x40000f7	          0x4939f8	                             cmp r8, rdi	        53	hex.c	FUNCTION_2	FOR_1
0x40000fa	            0x75c3	                           jne 0x40000bf	        53	hex.c	FUNCTION_2	FOR_1
0x40000fc	      0xb800000000	                              mov eax, 0	        60	hex.c	FUNCTION_2
0x4000101	              0xc3	                                     ret	        60	hex.c	FUNCTION_2
0x4000102	      0xb8ffffffff	                     mov eax, 0xffffffff	        56	hex.c	FUNCTION_2	FOR_1	IF_1
0x4000107	              0xc3	                                     ret	        61	hex.c	FUNCTION_2
oid_to_hex	FOR,0:functions,0:ELSE,0:WHILE,0:IF,0:DO,0:CALL,1:SWITCH,0	2
0x400019f	      0xe800000000	                          call 0x40001a4	       107	hex.c	FUNCTION_8	CALL_1
0x40001a4	            0xf3c3	                                     ret	       108	hex.c	FUNCTION_8
sha1_to_hex_r	FOR,1:functions,0:ELSE,0:WHILE,0:IF,0:DO,0:CALL,0:SWITCH,0	18
0x400012b	          0x4889f8	                            mov rax, rdi	        77	hex.c	FUNCTION_5
0x400012e	        0x4c8d4e14	                    lea r9, [rsi + 0x14]	        77	hex.c	FUNCTION_5
0x4000132	          0x4889f9	                            mov rcx, rdi	        79	hex.c	FUNCTION_5
0x4000135	        0x4883c601	                              add rsi, 1	        83	hex.c	FUNCTION_5	FOR_1
0x4000139	         0xfb656ff	               movzx edx, byte [rsi - 1]	        83	hex.c	FUNCTION_5	FOR_1
0x400013d	          0x4989d0	                             mov r8, rdx	        84	hex.c	FUNCTION_5	FOR_1
0x4000140	        0x49c1e804	                               shr r8, 4	        84	hex.c	FUNCTION_5	FOR_1
0x4000144	        0x4183e00f	                            and r8d, 0xf	        84	hex.c	FUNCTION_5	FOR_1
0x4000148	    0x450fb6800000	                    movzx r8d, byte [r8]	        84	hex.c	FUNCTION_5	FOR_1
0x4000150	          0x448801	                     mov byte [rcx], r8b	        84	hex.c	FUNCTION_5	FOR_1
0x4000153	        0x4883c102	                              add rcx, 2	        84	hex.c	FUNCTION_5	FOR_1
0x4000157	          0x83e20f	                            and edx, 0xf	        85	hex.c	FUNCTION_5	FOR_1
0x400015a	     0xfb692000000	                   movzx edx, byte [rdx]	        85	hex.c	FUNCTION_5	FOR_1
0x4000161	          0x8851ff	                  mov byte [rcx - 1], dl	        85	hex.c	FUNCTION_5	FOR_1
0x4000164	          0x4939f1	                             cmp r9, rsi	        82	hex.c	FUNCTION_5	FOR_1
0x4000167	            0x75cc	                           jne 0x4000135	        82	hex.c	FUNCTION_5	FOR_1
0x4000169	        0xc6402800	                mov byte [rax + 0x28], 0	        87	hex.c	FUNCTION_5
0x400016d	              0xc3	                                     ret	        90	hex.c	FUNCTION_5
sha1_to_hex	FOR,0:functions,0:ELSE,0:WHILE,0:IF,0:DO,0:CALL,2:SWITCH,0	10
0x4000175	          0x4889fe	                            mov rsi, rdi	        98	hex.c	FUNCTION_7
0x4000178	    0x8b0500000000	            mov eax, dword [0x0400017e] 	       101	hex.c	FUNCTION_7	CALL_1
0x400017e	          0x83c001	                              add eax, 1	       101	hex.c	FUNCTION_7	CALL_1
0x4000181	          0x83e003	                              and eax, 3	       101	hex.c	FUNCTION_7	CALL_1
0x4000184	    0x890500000000	            mov dword [0x0400018a], eax 	       101	hex.c	FUNCTION_7	CALL_1
0x400018a	            0x4898	                                    cdqe	       102	hex.c	FUNCTION_7	CALL_2
0x400018c	        0x488d1480	                  lea rdx, [rax + rax*4]	       102	hex.c	FUNCTION_7	CALL_2
0x4000190	    0x488dbcd00000	                  lea rdi, [rax + rdx*8]	       102	hex.c	FUNCTION_7	CALL_2
0x4000198	      0xe800000000	                          call 0x400019d	       102	hex.c	FUNCTION_7	CALL_2
0x400019d	            0xf3c3	                                     ret	       103	hex.c	FUNCTION_7
