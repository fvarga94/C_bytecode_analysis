pretty_print_dels	WHILE,0:CALL,4:ELSE,0:SWITCH,0:IF,0:functions,1:FOR,0:DO,0	58
0x40004b3	              0x53	                                push rbx	       261	clean.c	FUNCTION_7
0x40004b4	        0x4883ec70	                           sub rsp, 0x70	       261	clean.c	FUNCTION_7
0x40004b8	    0x64488b042528	                mov rax, qword fs:[0x28]	       261	clean.c	FUNCTION_7
0x40004c1	      0x4889442468	             mov qword [rsp + 0x68], rax	       261	clean.c	FUNCTION_7
0x40004c6	            0x31c0	                            xor eax, eax	       261	clean.c	FUNCTION_7
0x40004c8	    0x48c744244000	               mov qword [rsp + 0x40], 0	       262	clean.c	FUNCTION_7
0x40004d1	    0xc74424480000	               mov dword [rsp + 0x48], 0	       262	clean.c	FUNCTION_7
0x40004d9	    0xc744244c0000	               mov dword [rsp + 0x4c], 0	       262	clean.c	FUNCTION_7
0x40004e1	      0x804c245001	                 or byte [rsp + 0x50], 1	       262	clean.c	FUNCTION_7
0x40004e6	    0x48c744245800	               mov qword [rsp + 0x58], 0	       262	clean.c	FUNCTION_7
0x40004ef	    0x48c704240000	                      mov qword [rsp], 0	       264	clean.c	FUNCTION_7
0x40004f7	    0x48c744240800	                  mov qword [rsp + 8], 0	       264	clean.c	FUNCTION_7
0x4000500	    0x48c744241000	               mov qword [rsp + 0x10], 0	       264	clean.c	FUNCTION_7
0x4000509	    0x488b1d000000	            mov rbx, qword [0x04000510] 	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000510	          0x4885db	                           test rbx, rbx	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000513	            0x744b	                            je 0x4000560	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000515	    0x8b0500000000	            mov eax, dword [0x0400051b] 	       268	clean.c	FUNCTION_7	FUNCTION_1
0x400051b	        0x48c1e004	                              shl rax, 4	       268	clean.c	FUNCTION_7	FUNCTION_1
0x400051f	          0x4801d8	                            add rax, rbx	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000522	          0x4839c3	                            cmp rbx, rax	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000525	            0x7339	                           jae 0x4000560	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000527	          0x4889e2	                            mov rdx, rsp	       269	clean.c	FUNCTION_7	FUNCTION_1	CALL_1
0x400052a	      0xbe00000000	                              mov esi, 0	       269	clean.c	FUNCTION_7	FUNCTION_1	CALL_1
0x400052f	          0x488b3b	                    mov rdi, qword [rbx]	       269	clean.c	FUNCTION_7	FUNCTION_1	CALL_1
0x4000532	      0xe800000000	                          call 0x4000537	       269	clean.c	FUNCTION_7	FUNCTION_1	CALL_1
0x4000537	          0x4889c6	                            mov rsi, rax	       270	clean.c	FUNCTION_7	FUNCTION_1	CALL_2
0x400053a	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       270	clean.c	FUNCTION_7	FUNCTION_1	CALL_2
0x400053f	      0xe800000000	                          call 0x4000544	       270	clean.c	FUNCTION_7	FUNCTION_1	CALL_2
0x4000544	        0x4883c310	                           add rbx, 0x10	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000548	            0x7416	                            je 0x4000560	       268	clean.c	FUNCTION_7	FUNCTION_1
0x400054a	    0x8b0500000000	            mov eax, dword [0x04000550] 	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000550	        0x48c1e004	                              shl rax, 4	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000554	    0x480305000000	             add rax, qword [0x0400055b]	       268	clean.c	FUNCTION_7	FUNCTION_1
0x400055b	          0x4839c3	                            cmp rbx, rax	       268	clean.c	FUNCTION_7	FUNCTION_1
0x400055e	            0x72c7	                            jb 0x4000527	       268	clean.c	FUNCTION_7	FUNCTION_1
0x4000560	    0x8b3500000000	            mov esi, dword [0x04000566] 	       277	clean.c	FUNCTION_7
0x4000566	          0x83e6cf	                     and esi, 0xffffffcf	       277	clean.c	FUNCTION_7
0x4000569	          0x83ce10	                            or esi, 0x10	       277	clean.c	FUNCTION_7
0x400056c	    0x893500000000	            mov dword [0x04000572], esi 	       277	clean.c	FUNCTION_7
0x4000572	    0x48c744242000	               mov qword [rsp + 0x20], 0	        90	string3.h	FUNCTION_26	CALL_6
0x400057b	    0x48c744243000	               mov qword [rsp + 0x30], 0	        90	string3.h	FUNCTION_26	CALL_6
0x4000584	    0x48c744242800	               mov qword [rsp + 0x28], 0	       279	clean.c	FUNCTION_7
0x400058d	    0xc74424240200	               mov dword [rsp + 0x24], 2	       280	clean.c	FUNCTION_7
0x4000595	      0x488d542420	                   lea rdx, [rsp + 0x20]	       281	clean.c	FUNCTION_7	CALL_2
0x400059a	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       281	clean.c	FUNCTION_7	CALL_2
0x400059f	      0xe800000000	                          call 0x40005a4	       281	clean.c	FUNCTION_7	CALL_2
0x40005a4	          0x4889e7	                            mov rdi, rsp	       282	clean.c	FUNCTION_7	CALL_3
0x40005a7	      0xe800000000	                          call 0x40005ac	       282	clean.c	FUNCTION_7	CALL_3
0x40005ac	      0xbe00000000	                              mov esi, 0	       283	clean.c	FUNCTION_7	CALL_4
0x40005b1	      0x488d7c2440	                   lea rdi, [rsp + 0x40]	       283	clean.c	FUNCTION_7	CALL_4
0x40005b6	      0xe800000000	                          call 0x40005bb	       283	clean.c	FUNCTION_7	CALL_4
0x40005bb	      0x488b442468	            mov rax, qword [rsp + 0x68] 	       284	clean.c	FUNCTION_7
0x40005c0	    0x644833042528	                xor rax, qword fs:[0x28]	       284	clean.c	FUNCTION_7
0x40005c9	            0x7405	                            je 0x40005d0	       284	clean.c	FUNCTION_7
0x40005cb	      0xe800000000	                          call 0x40005d0	       284	clean.c	FUNCTION_7
0x40005d0	        0x4883c470	                           add rsp, 0x70	       284	clean.c	FUNCTION_7
0x40005d4	              0x5b	                                 pop rbx	       284	clean.c	FUNCTION_7
0x40005d5	              0xc3	                                     ret	       284	clean.c	FUNCTION_7
clean_cmd	WHILE,0:CALL,0:ELSE,0:SWITCH,0:IF,0:functions,0:FOR,0:DO,0	2
0x4000040	      0xb80a000000	                            mov eax, 0xa	       645	clean.c	FUNCTION_14
0x4000045	              0xc3	                                     ret	       645	clean.c	FUNCTION_14
git_clean_config	WHILE,0:CALL,11:ELSE,0:SWITCH,0:IF,6:functions,0:FOR,0:DO,0	140
0x400005d	            0x4157	                                push r15	       103	clean.c	FUNCTION_2
0x400005f	            0x4156	                                push r14	       103	clean.c	FUNCTION_2
0x4000061	            0x4155	                                push r13	       103	clean.c	FUNCTION_2
0x4000063	            0x4154	                                push r12	       103	clean.c	FUNCTION_2
0x4000065	              0x55	                                push rbp	       103	clean.c	FUNCTION_2
0x4000066	              0x53	                                push rbx	       103	clean.c	FUNCTION_2
0x4000067	        0x4883ec08	                              sub rsp, 8	       103	clean.c	FUNCTION_2
0x400006b	          0x4989fc	                            mov r12, rdi	       103	clean.c	FUNCTION_2
0x400006e	          0x4989f5	                            mov r13, rsi	       103	clean.c	FUNCTION_2
0x4000071	          0x4989d7	                            mov r15, rdx	       103	clean.c	FUNCTION_2
0x4000074	      0xbe00000000	                              mov esi, 0	       106	clean.c	FUNCTION_2	IF_1	CALL_1
0x4000079	      0xe800000000	                          call 0x400007e	       106	clean.c	FUNCTION_2	IF_1	CALL_1
0x400007e	            0x85c0	                           test eax, eax	       106	clean.c	FUNCTION_2	IF_1	CALL_1
0x4000080	            0x741c	                            je 0x400009e	       106	clean.c	FUNCTION_2	IF_1	CALL_1
0x4000082	      0xb900000000	                              mov ecx, 0	       107	clean.c	FUNCTION_2	CALL_2
0x4000087	      0xba00000000	                              mov edx, 0	       107	clean.c	FUNCTION_2	CALL_2
0x400008c	          0x4c89ee	                            mov rsi, r13	       107	clean.c	FUNCTION_2	CALL_2
0x400008f	          0x4c89e7	                            mov rdi, r12	       107	clean.c	FUNCTION_2	CALL_2
0x4000092	      0xe800000000	                          call 0x4000097	       107	clean.c	FUNCTION_2	CALL_2
0x4000097	            0x89c5	                            mov ebp, eax	       107	clean.c	FUNCTION_2	CALL_2
0x4000099	      0xe999010000	                           jmp 0x4000237	       107	clean.c	FUNCTION_2	CALL_2
0x400009e	          0x4189c6	                           mov r14d, eax	       107	clean.c	FUNCTION_2	CALL_2
0x40000a1	      0xbf00000000	                              mov edi, 0	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000a6	      0xb912000000	                           mov ecx, 0x12	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000ab	          0x4c89e6	                            mov rsi, r12	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000ae	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000b0	        0x400f97c5	                                seta bpl	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000b4	           0xf92c0	                                 setb al	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000b7	            0x29c5	                            sub ebp, eax	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000b9	        0x400fbeed	                          movsx ebp, bpl	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000bd	          0x4c89e3	                            mov rbx, r12	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000c0	      0xb800000000	                              mov eax, 0	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000c5	            0x85ed	                           test ebp, ebp	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000c7	            0x7516	                           jne 0x40000df	       111	clean.c	FUNCTION_2	IF_2	CALL_3
0x40000c9	          0x4c89ee	                            mov rsi, r13	       112	clean.c	FUNCTION_2	IF_2	CALL_4
0x40000cc	          0x4c89e7	                            mov rdi, r12	       112	clean.c	FUNCTION_2	IF_2	CALL_4
0x40000cf	      0xe800000000	                          call 0x40000d4	       112	clean.c	FUNCTION_2	IF_2	CALL_4
0x40000d4	    0x890500000000	            mov dword [0x040000da], eax 	       112	clean.c	FUNCTION_2	IF_2	CALL_4
0x40000da	      0xe958010000	                           jmp 0x4000237	       113	clean.c	FUNCTION_2	IF_2
0x40000df	           0xfb610	                   movzx edx, byte [rax]	       484	git-compat-util.h	FUNCTION_76	DO_1	IF_1
0x40000e2	            0x84d2	                             test dl, dl	       484	git-compat-util.h	FUNCTION_76	DO_1	IF_1
0x40000e4	     0xf8401010000	                            je 0x40001eb	       484	git-compat-util.h	FUNCTION_76	DO_1	IF_1
0x40000ea	        0x4883c301	                              add rbx, 1	       488	git-compat-util.h	FUNCTION_76	DO_1
0x40000ee	        0x4883c001	                              add rax, 1	       488	git-compat-util.h	FUNCTION_76	DO_1
0x40000f2	          0x3a53ff	                  cmp dl, byte [rbx - 1]	       488	git-compat-util.h	FUNCTION_76	DO_1
0x40000f5	            0x74e8	                            je 0x40000df	       488	git-compat-util.h	FUNCTION_76	DO_1
0x40000f7	      0xe906010000	                           jmp 0x4000202	       488	git-compat-util.h	FUNCTION_76	DO_1
0x40000fc	      0xbe00000000	                              mov esi, 0	        89	clean.c	FUNCTION_1	IF_2	CALL_2
0x4000101	          0x4889df	                            mov rdi, rbx	        89	clean.c	FUNCTION_1	IF_2	CALL_2
0x4000104	      0xe800000000	                          call 0x4000109	        89	clean.c	FUNCTION_1	IF_2	CALL_2
0x4000109	            0x85c0	                           test eax, eax	        89	clean.c	FUNCTION_1	IF_2	CALL_2
0x400010b	     0xf8413010000	                            je 0x4000224	        89	clean.c	FUNCTION_1	IF_2	CALL_2
0x4000111	      0xbe00000000	                              mov esi, 0	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x4000116	          0x4889df	                            mov rdi, rbx	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x4000119	      0xe800000000	                          call 0x400011e	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x400011e	            0x89c2	                            mov edx, eax	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x4000120	      0xb802000000	                              mov eax, 2	        92	clean.c	FUNCTION_1	IF_3
0x4000125	            0x85d2	                           test edx, edx	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x4000127	     0xf84fc000000	                            je 0x4000229	        91	clean.c	FUNCTION_1	IF_3	CALL_3
0x400012d	      0xbe00000000	                              mov esi, 0	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x4000132	          0x4889df	                            mov rdi, rbx	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x4000135	      0xe800000000	                          call 0x400013a	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x400013a	            0x89c2	                            mov edx, eax	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x400013c	      0xb803000000	                              mov eax, 3	        94	clean.c	FUNCTION_1	IF_4
0x4000141	            0x85d2	                           test edx, edx	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x4000143	     0xf84e0000000	                            je 0x4000229	        93	clean.c	FUNCTION_1	IF_4	CALL_4
0x4000149	      0xbe00000000	                              mov esi, 0	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x400014e	          0x4889df	                            mov rdi, rbx	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x4000151	      0xe800000000	                          call 0x4000156	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x4000156	            0x89c2	                            mov edx, eax	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x4000158	      0xb804000000	                              mov eax, 4	        96	clean.c	FUNCTION_1	IF_5
0x400015d	            0x85d2	                           test edx, edx	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x400015f	     0xf84c4000000	                            je 0x4000229	        95	clean.c	FUNCTION_1	IF_5	CALL_5
0x4000165	      0xbe00000000	                              mov esi, 0	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x400016a	          0x4889df	                            mov rdi, rbx	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x400016d	      0xe800000000	                          call 0x4000172	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x4000172	            0x89c2	                            mov edx, eax	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x4000174	      0xb805000000	                              mov eax, 5	        98	clean.c	FUNCTION_1	IF_6
0x4000179	          0x4489f5	                           mov ebp, r14d	       118	clean.c	FUNCTION_2	IF_3	IF_4
0x400017c	            0x85d2	                           test edx, edx	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x400017e	     0xf85b3000000	                           jne 0x4000237	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x4000184	      0xe9a0000000	                           jmp 0x4000229	        97	clean.c	FUNCTION_1	IF_6	CALL_6
0x4000189	          0x4c89e7	                            mov rdi, r12	       120	clean.c	FUNCTION_2	IF_3	CALL_7
0x400018c	      0xe800000000	                          call 0x4000191	       120	clean.c	FUNCTION_2	IF_3	CALL_7
0x4000191	      0xbdffffffff	                     mov ebp, 0xffffffff	       120	clean.c	FUNCTION_2	IF_3	CALL_7
0x4000196	      0xe99c000000	                           jmp 0x4000237	       120	clean.c	FUNCTION_2	IF_3	CALL_7
0x400019b	            0x4898	                                    cdqe	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x400019d	        0x488d0480	                  lea rax, [rax + rax*4]	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001a1	          0x4889c6	                            mov rsi, rax	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001a4	        0x48c1e604	                              shl rsi, 4	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001a8	          0x4829c6	                            sub rsi, rax	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001ab	    0x4881c6000000	                              add rsi, 0	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001b2	          0x4c89ef	                            mov rdi, r13	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001b5	      0xe800000000	                          call 0x40001ba	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001ba	            0x89c5	                            mov ebp, eax	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001bc	            0xeb79	                           jmp 0x4000237	       121	clean.c	FUNCTION_2	IF_3	CALL_8
0x40001be	          0x4c89ee	                            mov rsi, r13	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001c1	          0x4c89e7	                            mov rdi, r12	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001c4	      0xe800000000	                          call 0x40001c9	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001c9	            0x85c0	                           test eax, eax	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001cb	           0xf94c0	                                 sete al	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001ce	           0xfb6c0	                           movzx eax, al	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001d1	    0x890500000000	            mov dword [0x040001d7], eax 	       125	clean.c	FUNCTION_2	IF_6	CALL_10
0x40001d7	            0xeb5e	                           jmp 0x4000237	       126	clean.c	FUNCTION_2	IF_6
0x40001d9	          0x4c89fa	                            mov rdx, r15	       130	clean.c	FUNCTION_2	CALL_11
0x40001dc	          0x4c89ee	                            mov rsi, r13	       130	clean.c	FUNCTION_2	CALL_11
0x40001df	          0x4c89e7	                            mov rdi, r12	       130	clean.c	FUNCTION_2	CALL_11
0x40001e2	      0xe800000000	                          call 0x40001e7	       130	clean.c	FUNCTION_2	CALL_11
0x40001e7	            0x89c5	                            mov ebp, eax	       130	clean.c	FUNCTION_2	CALL_11
0x40001e9	            0xeb4c	                           jmp 0x4000237	       130	clean.c	FUNCTION_2	CALL_11
0x40001eb	      0xbe00000000	                              mov esi, 0	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x40001f0	          0x4889df	                            mov rdi, rbx	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x40001f3	      0xe800000000	                          call 0x40001f8	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x40001f8	            0x85c0	                           test eax, eax	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x40001fa	     0xf85fcfeffff	                           jne 0x40000fc	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x4000200	            0xeb27	                           jmp 0x4000229	        87	clean.c	FUNCTION_1	IF_1	CALL_1
0x4000202	      0xbf00000000	                              mov edi, 0	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000207	      0xb913000000	                           mov ecx, 0x13	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x400020c	          0x4c89e6	                            mov rsi, r12	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x400020f	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000211	        0x400f97c5	                                seta bpl	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000215	           0xf92c0	                                 setb al	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000218	            0x29c5	                            sub ebp, eax	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x400021a	        0x400fbeed	                          movsx ebp, bpl	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x400021e	            0x85ed	                           test ebp, ebp	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000220	            0x75b7	                           jne 0x40001d9	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000222	            0xeb9a	                           jmp 0x40001be	       124	clean.c	FUNCTION_2	IF_6	CALL_9
0x4000224	      0xb801000000	                              mov eax, 1	        90	clean.c	FUNCTION_1	IF_2
0x4000229	          0x4d85ed	                           test r13, r13	       119	clean.c	FUNCTION_2	IF_3	IF_5
0x400022c	     0xf8569ffffff	                           jne 0x400019b	       119	clean.c	FUNCTION_2	IF_3	IF_5
0x4000232	      0xe952ffffff	                           jmp 0x4000189	       119	clean.c	FUNCTION_2	IF_3	IF_5
0x4000237	            0x89e8	                            mov eax, ebp	       131	clean.c	FUNCTION_2
0x4000239	        0x4883c408	                              add rsp, 8	       131	clean.c	FUNCTION_2
0x400023d	              0x5b	                                 pop rbx	       131	clean.c	FUNCTION_2
0x400023e	              0x5d	                                 pop rbp	       131	clean.c	FUNCTION_2
0x400023f	            0x415c	                                 pop r12	       131	clean.c	FUNCTION_2
0x4000241	            0x415d	                                 pop r13	       131	clean.c	FUNCTION_2
0x4000243	            0x415e	                                 pop r14	       131	clean.c	FUNCTION_2
0x4000245	            0x415f	                                 pop r15	       131	clean.c	FUNCTION_2
0x4000247	              0xc3	                                     ret	       131	clean.c	FUNCTION_2
clean_print_color	WHILE,0:CALL,1:ELSE,0:SWITCH,0:IF,0:functions,0:FOR,0:DO,0	9
0x4000280	        0x4883ec08	                              sub rsp, 8	       141	clean.c	FUNCTION_4
0x4000284	      0xe8bfffffff	                call sym.clean_get_color	       142	clean.c	FUNCTION_4	CALL_1
0x4000289	          0x4889c2	                            mov rdx, rax	       104	stdio2.h	CALL_15
0x400028c	      0xbe00000000	                              mov esi, 0	       104	stdio2.h	CALL_15
0x4000291	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_15
0x4000296	      0xb800000000	                              mov eax, 0	       104	stdio2.h	CALL_15
0x400029b	      0xe800000000	                          call 0x40002a0	       104	stdio2.h	CALL_15
0x40002a0	        0x4883c408	                              add rsp, 8	       143	clean.c	FUNCTION_4
0x40002a4	              0xc3	                                     ret	       143	clean.c	FUNCTION_4
select_by_numbers_cmd	WHILE,0:CALL,3:ELSE,2:SWITCH,0:IF,2:functions,0:FOR,1:DO,0	54
0x40013b6	              0x53	                                push rbx	       714	clean.c	FUNCTION_16
0x40013b7	        0x4883ec30	                           sub rsp, 0x30	       714	clean.c	FUNCTION_16
0x40013bb	    0x64488b042528	                mov rax, qword fs:[0x28]	       714	clean.c	FUNCTION_16
0x40013c4	      0x4889442428	             mov qword [rsp + 0x28], rax	       714	clean.c	FUNCTION_16
0x40013c9	            0x31c0	                            xor eax, eax	       714	clean.c	FUNCTION_16
0x40013cb	    0x48c744241000	               mov qword [rsp + 0x10], 0	       721	clean.c	FUNCTION_16
0x40013d4	    0x48c744241800	               mov qword [rsp + 0x18], 0	       722	clean.c	FUNCTION_16
0x40013dd	    0xc74424200000	               mov dword [rsp + 0x20], 0	       723	clean.c	FUNCTION_16
0x40013e5	    0xc70424010000	                      mov dword [rsp], 1	       725	clean.c	FUNCTION_16
0x40013ec	    0x48c744240800	                  mov qword [rsp + 8], 0	       726	clean.c	FUNCTION_16
0x40013f5	    0x8b0500000000	            mov eax, dword [0x040013fb] 	       727	clean.c	FUNCTION_16
0x40013fb	        0x89442404	                mov dword [rsp + 4], eax	       727	clean.c	FUNCTION_16
0x40013ff	          0x4889e6	                            mov rsi, rsp	       729	clean.c	FUNCTION_16	CALL_1
0x4001402	      0x488d7c2410	                   lea rdi, [rsp + 0x10]	       729	clean.c	FUNCTION_16	CALL_1
0x4001407	      0xe852f4ffff	                call sym.list_and_choose	       729	clean.c	FUNCTION_16	CALL_1
0x400140c	          0x4889c3	                            mov rbx, rax	       729	clean.c	FUNCTION_16	CALL_1
0x400140f	    0x488b35000000	            mov rsi, qword [0x04001416] 	       730	clean.c	FUNCTION_16
0x4001416	    0x833d00000000	               cmp dword [0x0400141d], 0	       731	clean.c	FUNCTION_16	FOR_1
0x400141d	            0x7446	                            je 0x4001465	       731	clean.c	FUNCTION_16	FOR_1
0x400141f	      0xb900000000	                              mov ecx, 0	       731	clean.c	FUNCTION_16	FOR_1
0x4001424	      0xb800000000	                              mov eax, 0	       731	clean.c	FUNCTION_16	FOR_1
0x4001429	          0x4863d1	                         movsxd rdx, ecx	       732	clean.c	FUNCTION_16	FOR_1	IF_1
0x400142c	          0x8b1493	            mov edx, dword [rbx + rdx*4]	       732	clean.c	FUNCTION_16	FOR_1	IF_1
0x400142f	            0x39c2	                            cmp edx, eax	       732	clean.c	FUNCTION_16	FOR_1	IF_1
0x4001431	            0x7e10	                           jle 0x4001443	       732	clean.c	FUNCTION_16	FOR_1	IF_1
0x4001433	          0x4863d0	                         movsxd rdx, eax	       733	clean.c	FUNCTION_16	FOR_1	IF_1
0x4001436	        0x48c1e204	                              shl rdx, 4	       733	clean.c	FUNCTION_16	FOR_1	IF_1
0x400143a	        0x488b1416	              mov rdx, qword [rsi + rdx]	       733	clean.c	FUNCTION_16	FOR_1	IF_1
0x400143e	          0xc60200	                       mov byte [rdx], 0	       733	clean.c	FUNCTION_16	FOR_1	IF_1
0x4001441	            0xeb17	                           jmp 0x400145a	       733	clean.c	FUNCTION_16	FOR_1	IF_1
0x4001443	            0x39c2	                            cmp edx, eax	       734	clean.c	FUNCTION_16	FOR_1	ELSE_1	IF_2
0x4001445	            0x7505	                           jne 0x400144c	       734	clean.c	FUNCTION_16	FOR_1	ELSE_1	IF_2
0x4001447	          0x83c101	                              add ecx, 1	       736	clean.c	FUNCTION_16	FOR_1	ELSE_1	IF_2
0x400144a	            0xeb0e	                           jmp 0x400145a	       737	clean.c	FUNCTION_16	FOR_1	ELSE_1	IF_2
0x400144c	          0x4863d0	                         movsxd rdx, eax	       740	clean.c	FUNCTION_16	FOR_1	ELSE_2
0x400144f	        0x48c1e204	                              shl rdx, 4	       740	clean.c	FUNCTION_16	FOR_1	ELSE_2
0x4001453	        0x488b1416	              mov rdx, qword [rsi + rdx]	       740	clean.c	FUNCTION_16	FOR_1	ELSE_2
0x4001457	          0xc60200	                       mov byte [rdx], 0	       740	clean.c	FUNCTION_16	FOR_1	ELSE_2
0x400145a	          0x83c001	                              add eax, 1	       731	clean.c	FUNCTION_16	FOR_1
0x400145d	    0x390500000000	            cmp dword [0x04001463], eax 	       731	clean.c	FUNCTION_16	FOR_1
0x4001463	            0x77c4	                            ja 0x4001429	       731	clean.c	FUNCTION_16	FOR_1
0x4001465	      0xbe00000000	                              mov esi, 0	       744	clean.c	FUNCTION_16	CALL_2
0x400146a	      0xbf00000000	                              mov edi, 0	       744	clean.c	FUNCTION_16	CALL_2
0x400146f	      0xe800000000	                          call 0x4001474	       744	clean.c	FUNCTION_16	CALL_2
0x4001474	          0x4889df	                            mov rdi, rbx	       746	clean.c	FUNCTION_16	CALL_3
0x4001477	      0xe800000000	                          call 0x400147c	       746	clean.c	FUNCTION_16	CALL_3
0x400147c	      0xb800000000	                              mov eax, 0	       748	clean.c	FUNCTION_16
0x4001481	      0x488b7c2428	            mov rdi, qword [rsp + 0x28] 	       748	clean.c	FUNCTION_16
0x4001486	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       748	clean.c	FUNCTION_16
0x400148f	            0x7405	                            je 0x4001496	       748	clean.c	FUNCTION_16
0x4001491	      0xe800000000	                          call 0x4001496	       748	clean.c	FUNCTION_16
0x4001496	        0x4883c430	                           add rsp, 0x30	       748	clean.c	FUNCTION_16
0x400149a	              0x5b	                                 pop rbx	       748	clean.c	FUNCTION_16
0x400149b	              0xc3	                                     ret	       748	clean.c	FUNCTION_16
exclude_cb	WHILE,0:CALL,1:ELSE,0:SWITCH,0:IF,0:functions,0:FOR,0:DO,0	6
0x4000046	        0x4883ec08	                              sub rsp, 8	       146	clean.c	FUNCTION_5
0x400004a	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	       148	clean.c	FUNCTION_5	CALL_1
0x400004e	      0xe800000000	                          call 0x4000053	       148	clean.c	FUNCTION_5	CALL_1
0x4000053	      0xb800000000	                              mov eax, 0	       150	clean.c	FUNCTION_5
0x4000058	        0x4883c408	                              add rsp, 8	       150	clean.c	FUNCTION_5
0x400005c	              0xc3	                                     ret	       150	clean.c	FUNCTION_5
help_cmd	WHILE,0:CALL,4:ELSE,0:SWITCH,0:IF,0:functions,0:FOR,0:DO,0	15
0x40002a5	        0x4883ec08	                              sub rsp, 8	       793	clean.c	FUNCTION_19
0x40002a9	      0xbf04000000	                              mov edi, 4	       794	clean.c	FUNCTION_19	CALL_1
0x40002ae	      0xe8cdffffff	              call sym.clean_print_color	       794	clean.c	FUNCTION_19	CALL_1
0x40002b3	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_54
0x40002b8	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_54
0x40002bd	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_54
0x40002c2	      0xe800000000	                          call 0x40002c7	        54	gettext.h	FUNCTION_54
0x40002c7	          0x4889c7	                            mov rdi, rax	       795	clean.c	FUNCTION_19	CALL_3
0x40002ca	      0xb800000000	                              mov eax, 0	       795	clean.c	FUNCTION_19	CALL_3
0x40002cf	      0xe800000000	                          call 0x40002d4	       795	clean.c	FUNCTION_19	CALL_3
0x40002d4	      0xbf00000000	                              mov edi, 0	       804	clean.c	FUNCTION_19	CALL_4
0x40002d9	      0xe8a2ffffff	              call sym.clean_print_color	       804	clean.c	FUNCTION_19	CALL_4
0x40002de	      0xb800000000	                              mov eax, 0	       806	clean.c	FUNCTION_19
0x40002e3	        0x4883c408	                              add rsp, 8	       806	clean.c	FUNCTION_19
0x40002e7	              0xc3	                                     ret	       806	clean.c	FUNCTION_19
quit_cmd	WHILE,0:CALL,2:ELSE,0:SWITCH,0:IF,0:functions,0:FOR,0:DO,0	15
0x4000470	        0x4883ec08	                              sub rsp, 8	       786	clean.c	FUNCTION_18
0x4000474	      0xbe00000000	                              mov esi, 0	       787	clean.c	FUNCTION_18	CALL_1
0x4000479	      0xbf00000000	                              mov edi, 0	       787	clean.c	FUNCTION_18	CALL_1
0x400047e	      0xe800000000	                          call 0x4000483	       787	clean.c	FUNCTION_18	CALL_1
0x4000483	      0xba05000000	                              mov edx, 5	        54	gettext.h	FUNCTION_54
0x4000488	      0xbe00000000	                              mov esi, 0	        54	gettext.h	FUNCTION_54
0x400048d	      0xbf00000000	                              mov edi, 0	        54	gettext.h	FUNCTION_54
0x4000492	      0xe800000000	                          call 0x4000497	        54	gettext.h	FUNCTION_54
0x4000497	          0x4889c6	                            mov rsi, rax	       104	stdio2.h	CALL_15
0x400049a	      0xbf01000000	                              mov edi, 1	       104	stdio2.h	CALL_15
0x400049f	      0xb800000000	                              mov eax, 0	       104	stdio2.h	CALL_15
0x40004a4	      0xe800000000	                          call 0x40004a9	       104	stdio2.h	CALL_15
0x40004a9	      0xb80a000000	                            mov eax, 0xa	       790	clean.c	FUNCTION_18
0x40004ae	        0x4883c408	                              add rsp, 8	       790	clean.c	FUNCTION_18
0x40004b2	              0xc3	                                     ret	       790	clean.c	FUNCTION_18
clean_get_color	WHILE,0:CALL,1:ELSE,0:SWITCH,0:IF,1:functions,0:FOR,0:DO,0	17
0x4000248	              0x53	                                push rbx	       134	clean.c	FUNCTION_3
0x4000249	            0x89fb	                            mov ebx, edi	       134	clean.c	FUNCTION_3
0x400024b	    0x8b3500000000	            mov esi, dword [0x04000251] 	       135	clean.c	FUNCTION_3	IF_1	CALL_1
0x4000251	      0xbf01000000	                              mov edi, 1	       135	clean.c	FUNCTION_3	IF_1	CALL_1
0x4000256	      0xe800000000	                          call 0x400025b	       135	clean.c	FUNCTION_3	IF_1	CALL_1
0x400025b	      0xba00000000	                              mov edx, 0	       137	clean.c	FUNCTION_3
0x4000260	            0x85c0	                           test eax, eax	       135	clean.c	FUNCTION_3	IF_1	CALL_1
0x4000262	            0x7417	                            je 0x400027b	       135	clean.c	FUNCTION_3	IF_1	CALL_1
0x4000264	            0x89df	                            mov edi, ebx	       136	clean.c	FUNCTION_3	IF_1
0x4000266	        0x488d04bf	                  lea rax, [rdi + rdi*4]	       136	clean.c	FUNCTION_3	IF_1
0x400026a	          0x4889c2	                            mov rdx, rax	       136	clean.c	FUNCTION_3	IF_1
0x400026d	        0x48c1e204	                              shl rdx, 4	       136	clean.c	FUNCTION_3	IF_1
0x4000271	          0x4829c2	                            sub rdx, rax	       136	clean.c	FUNCTION_3	IF_1
0x4000274	    0x4881c2000000	                              add rdx, 0	       136	clean.c	FUNCTION_3	IF_1
0x400027b	          0x4889d0	                            mov rax, rdx	       138	clean.c	FUNCTION_3
0x400027e	              0x5b	                                 pop rbx	       138	clean.c	FUNCTION_3
0x400027f	              0xc3	                                     ret	       138	clean.c	FUNCTION_3
