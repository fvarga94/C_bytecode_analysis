add_decoration	DO,0:SWITCH,0:CALL,2:ELSE,0:IF,1:functions,0:FOR,0:WHILE,0	108
0x4000040	            0x4156	                                push r14	        58	decorate.c	FUNCTION_4
0x4000042	            0x4155	                                push r13	        58	decorate.c	FUNCTION_4
0x4000044	            0x4154	                                push r12	        58	decorate.c	FUNCTION_4
0x4000046	              0x55	                                push rbp	        58	decorate.c	FUNCTION_4
0x4000047	          0x4989d4	                            mov r12, rdx	        58	decorate.c	FUNCTION_4
0x400004a	              0x53	                                push rbx	        58	decorate.c	FUNCTION_4
0x400004b	          0x8b470c	              mov eax, dword [rdi + 0xc]	        61	decorate.c	FUNCTION_4	IF_1
0x400004e	      0xbaabaaaaaa	                     mov edx, 0xaaaaaaab	        61	decorate.c	FUNCTION_4	IF_1
0x4000053	        0x448b7708	               mov r14d, dword [rdi + 8]	        61	decorate.c	FUNCTION_4	IF_1
0x4000057	          0x4889fd	                            mov rbp, rdi	        58	decorate.c	FUNCTION_4
0x400005a	          0x4889f3	                            mov rbx, rsi	        58	decorate.c	FUNCTION_4
0x400005d	          0x8d4801	                      lea ecx, [rax + 1]	        61	decorate.c	FUNCTION_4	IF_1
0x4000060	        0x438d0436	                    lea eax, [r14 + r14]	        61	decorate.c	FUNCTION_4	IF_1
0x4000064	            0xf7e2	                                 mul edx	        61	decorate.c	FUNCTION_4	IF_1
0x4000066	            0xd1ea	                              shr edx, 1	        61	decorate.c	FUNCTION_4	IF_1
0x4000068	            0x39d1	                            cmp ecx, edx	        61	decorate.c	FUNCTION_4	IF_1
0x400006a	            0x7765	                            ja 0x40000d1	        61	decorate.c	FUNCTION_4	IF_1
0x400006c	          0x8b4304	                mov eax, dword [rbx + 4]	        11	decorate.c	FUNCTION_1	CALL_1
0x400006f	            0x31d2	                            xor edx, edx	        11	decorate.c	FUNCTION_1	CALL_1
0x4000071	        0x488b7510	            mov rsi, qword [rbp + 0x10] 	        17	decorate.c	FUNCTION_2
0x4000075	          0x41f7f6	                                div r14d	        11	decorate.c	FUNCTION_1	CALL_1
0x4000078	            0xeb19	                           jmp 0x4000093	        11	decorate.c	FUNCTION_1	CALL_1
0x400007a	    0x660f1f440000	                    nop word [rax + rax]	        11	decorate.c	FUNCTION_1	CALL_1
0x4000080	          0x4839c3	                            cmp rbx, rax	        21	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x4000083	            0x743b	                            je 0x40000c0	        21	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x4000085	          0x83c201	                              add edx, 1	        26	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x4000088	      0xb800000000	                              mov eax, 0	        27	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x400008d	          0x4439f2	                           cmp edx, r14d	        26	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x4000090	           0xf43d0	                         cmovae edx, eax	        27	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x4000093	            0x89d1	                            mov ecx, edx	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000095	        0x48c1e104	                              shl rcx, 4	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000099	          0x4801f1	                            add rcx, rsi	        20	decorate.c	FUNCTION_2	WHILE_1
0x400009c	          0x488b01	                    mov rax, qword [rcx]	        20	decorate.c	FUNCTION_2	WHILE_1
0x400009f	          0x4885c0	                           test rax, rax	        20	decorate.c	FUNCTION_2	WHILE_1
0x40000a2	            0x75dc	                           jne 0x4000080	        20	decorate.c	FUNCTION_2	WHILE_1
0x40000a4	          0x488919	                    mov qword [rcx], rbx	        29	decorate.c	FUNCTION_2
0x40000a7	        0x4c896108	                mov qword [rcx + 8], r12	        30	decorate.c	FUNCTION_2
0x40000ab	        0x83450c01	                add dword [rbp + 0xc], 1	        31	decorate.c	FUNCTION_2
0x40000af	              0x5b	                                 pop rbx	        64	decorate.c	FUNCTION_4
0x40000b0	              0x5d	                                 pop rbp	        64	decorate.c	FUNCTION_4
0x40000b1	            0x415c	                                 pop r12	        64	decorate.c	FUNCTION_4
0x40000b3	            0x415d	                                 pop r13	        64	decorate.c	FUNCTION_4
0x40000b5	            0x415e	                                 pop r14	        64	decorate.c	FUNCTION_4
0x40000b7	              0xc3	                                     ret	        64	decorate.c	FUNCTION_4
0x40000b8	     0xf1f84000000	                   nop dword [rax + rax]	        64	decorate.c	FUNCTION_4
0x40000c0	        0x488b4108	                mov rax, qword [rcx + 8]	        22	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x40000c4	        0x4c896108	                mov qword [rcx + 8], r12	        23	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x40000c8	              0x5b	                                 pop rbx	        64	decorate.c	FUNCTION_4
0x40000c9	              0x5d	                                 pop rbp	        64	decorate.c	FUNCTION_4
0x40000ca	            0x415c	                                 pop r12	        64	decorate.c	FUNCTION_4
0x40000cc	            0x415d	                                 pop r13	        64	decorate.c	FUNCTION_4
0x40000ce	            0x415e	                                 pop r14	        64	decorate.c	FUNCTION_4
0x40000d0	              0xc3	                                     ret	        64	decorate.c	FUNCTION_4
0x40000d1	    0x438d8476b80b	         lea eax, [r14 + r14*2 + 0xbb8] 	        41	decorate.c	FUNCTION_3
0x40000d9	        0x4c8b6f10	            mov r13, qword [rdi + 0x10] 	        39	decorate.c	FUNCTION_3
0x40000dd	      0xbe10000000	                           mov esi, 0x10	        42	decorate.c	FUNCTION_3	CALL_1
0x40000e2	            0x89c2	                            mov edx, eax	        41	decorate.c	FUNCTION_3
0x40000e4	          0xc1ea1f	                           shr edx, 0x1f	        41	decorate.c	FUNCTION_3
0x40000e7	             0x1d0	                            add eax, edx	        41	decorate.c	FUNCTION_3
0x40000e9	            0xd1f8	                              sar eax, 1	        41	decorate.c	FUNCTION_3
0x40000eb	          0x894708	                mov dword [rdi + 8], eax	        41	decorate.c	FUNCTION_3
0x40000ee	            0x89c7	                            mov edi, eax	        42	decorate.c	FUNCTION_3	CALL_1
0x40000f0	      0xe800000000	                          call 0x40000f5	        42	decorate.c	FUNCTION_3	CALL_1
0x40000f5	          0x4585f6	                         test r14d, r14d	        45	decorate.c	FUNCTION_3	FOR_1
0x40000f8	          0x4889c7	                            mov rdi, rax	        42	decorate.c	FUNCTION_3	CALL_1
0x40000fb	        0x48894510	            mov qword [rbp + 0x10], rax 	        42	decorate.c	FUNCTION_3	CALL_1
0x40000ff	    0xc7450c000000	                mov dword [rbp + 0xc], 0	        43	decorate.c	FUNCTION_3
0x4000106	            0x7e6f	                           jle 0x4000177	        45	decorate.c	FUNCTION_3	FOR_1
0x4000108	        0x418d46ff	                      lea eax, [r14 - 1]	        45	decorate.c	FUNCTION_3	FOR_1
0x400010c	        0x4d8d4508	                       lea r8, [r13 + 8]	        45	decorate.c	FUNCTION_3	FOR_1
0x4000110	        0x48c1e004	                              shl rax, 4	        45	decorate.c	FUNCTION_3	FOR_1
0x4000114	      0x4d8d540518	            lea r10, [r13 + rax + 0x18] 	        45	decorate.c	FUNCTION_3	FOR_1
0x4000119	     0xf1f80000000	                         nop dword [rax]	        45	decorate.c	FUNCTION_3	FOR_1
0x4000120	          0x4d8b08	                      mov r9, qword [r8]	        47	decorate.c	FUNCTION_3	FOR_1
0x4000123	          0x4d85c9	                             test r9, r9	        49	decorate.c	FUNCTION_3	FOR_1	IF_1
0x4000126	            0x7446	                            je 0x400016e	        49	decorate.c	FUNCTION_3	FOR_1	IF_1
0x4000128	        0x498b70f8	                 mov rsi, qword [r8 - 8]	        46	decorate.c	FUNCTION_3	FOR_1
0x400012c	          0x8b4d08	                mov ecx, dword [rbp + 8]	        16	decorate.c	FUNCTION_2
0x400012f	            0x31d2	                            xor edx, edx	        11	decorate.c	FUNCTION_1	CALL_1
0x4000131	          0x8b4604	                mov eax, dword [rsi + 4]	        11	decorate.c	FUNCTION_1	CALL_1
0x4000134	            0xf7f1	                                 div ecx	        11	decorate.c	FUNCTION_1	CALL_1
0x4000136	            0xeb1a	                           jmp 0x4000152	        11	decorate.c	FUNCTION_1	CALL_1
0x4000138	     0xf1f84000000	                   nop dword [rax + rax]	        11	decorate.c	FUNCTION_1	CALL_1
0x4000140	          0x4c39de	                            cmp rsi, r11	        21	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x4000143	            0x744b	                            je 0x4000190	        21	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x4000145	          0x83c201	                              add edx, 1	        26	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x4000148	      0xb800000000	                              mov eax, 0	        27	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x400014d	            0x39d1	                            cmp ecx, edx	        26	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x400014f	           0xf46d0	                         cmovbe edx, eax	        27	decorate.c	FUNCTION_2	WHILE_1	IF_2
0x4000152	            0x89d0	                            mov eax, edx	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000154	        0x48c1e004	                              shl rax, 4	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000158	          0x4801f8	                            add rax, rdi	        20	decorate.c	FUNCTION_2	WHILE_1
0x400015b	          0x4c8b18	                    mov r11, qword [rax]	        20	decorate.c	FUNCTION_2	WHILE_1
0x400015e	          0x4d85db	                           test r11, r11	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000161	            0x75dd	                           jne 0x4000140	        20	decorate.c	FUNCTION_2	WHILE_1
0x4000163	          0x488930	                    mov qword [rax], rsi	        29	decorate.c	FUNCTION_2
0x4000166	        0x4c894808	                 mov qword [rax + 8], r9	        30	decorate.c	FUNCTION_2
0x400016a	        0x83450c01	                add dword [rbp + 0xc], 1	        31	decorate.c	FUNCTION_2
0x400016e	        0x4983c010	                            add r8, 0x10	        31	decorate.c	FUNCTION_2
0x4000172	          0x4d39c2	                             cmp r10, r8	        45	decorate.c	FUNCTION_3	FOR_1
0x4000175	            0x75a9	                           jne 0x4000120	        45	decorate.c	FUNCTION_3	FOR_1
0x4000177	          0x4c89ef	                            mov rdi, r13	        53	decorate.c	FUNCTION_3	CALL_3
0x400017a	      0xe800000000	                          call 0x400017f	        53	decorate.c	FUNCTION_3	CALL_3
0x400017f	        0x448b7508	               mov r14d, dword [rbp + 8]	        53	decorate.c	FUNCTION_3	CALL_3
0x4000183	      0xe9e4feffff	                           jmp 0x400006c	        53	decorate.c	FUNCTION_3	CALL_3
0x4000188	     0xf1f84000000	                   nop dword [rax + rax]	        53	decorate.c	FUNCTION_3	CALL_3
0x4000190	        0x4c894808	                 mov qword [rax + 8], r9	        23	decorate.c	FUNCTION_2	WHILE_1	IF_1
0x4000194	            0xebd8	                           jmp 0x400016e	        23	decorate.c	FUNCTION_2	WHILE_1	IF_1
lookup_decoration	DO,0:SWITCH,0:CALL,1:ELSE,0:IF,4:functions,0:FOR,1:WHILE,0	26
0x40001a0	        0x448b4708	                mov r8d, dword [rdi + 8]	        71	decorate.c	FUNCTION_5	IF_1
0x40001a4	          0x4585c0	                           test r8d, r8d	        71	decorate.c	FUNCTION_5	IF_1
0x40001a7	            0x7447	                            je 0x40001f0	        71	decorate.c	FUNCTION_5	IF_1
0x40001a9	          0x8b4604	                mov eax, dword [rsi + 4]	        11	decorate.c	FUNCTION_1	CALL_1
0x40001ac	            0x31d2	                            xor edx, edx	        11	decorate.c	FUNCTION_1	CALL_1
0x40001ae	        0x488b7f10	            mov rdi, qword [rdi + 0x10] 	        11	decorate.c	FUNCTION_1	CALL_1
0x40001b2	          0x41f7f0	                                 div r8d	        11	decorate.c	FUNCTION_1	CALL_1
0x40001b5	            0xeb1c	                           jmp 0x40001d3	        11	decorate.c	FUNCTION_1	CALL_1
0x40001b7	    0x660f1f840000	                    nop word [rax + rax]	        11	decorate.c	FUNCTION_1	CALL_1
0x40001c0	          0x4885c9	                           test rcx, rcx	        78	decorate.c	FUNCTION_5	FOR_1	IF_3
0x40001c3	            0x742b	                            je 0x40001f0	        78	decorate.c	FUNCTION_5	FOR_1	IF_3
0x40001c5	          0x83c201	                              add edx, 1	        80	decorate.c	FUNCTION_5	FOR_1	IF_4
0x40001c8	      0xb800000000	                              mov eax, 0	        81	decorate.c	FUNCTION_5	FOR_1	IF_4
0x40001cd	          0x4139d0	                            cmp r8d, edx	        80	decorate.c	FUNCTION_5	FOR_1	IF_4
0x40001d0	           0xf44d0	                          cmove edx, eax	        81	decorate.c	FUNCTION_5	FOR_1	IF_4
0x40001d3	            0x89d0	                            mov eax, edx	        75	decorate.c	FUNCTION_5	FOR_1
0x40001d5	        0x48c1e004	                              shl rax, 4	        75	decorate.c	FUNCTION_5	FOR_1
0x40001d9	          0x4801f8	                            add rax, rdi	        75	decorate.c	FUNCTION_5	FOR_1
0x40001dc	          0x488b08	                    mov rcx, qword [rax]	        76	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001df	          0x4839ce	                            cmp rsi, rcx	        76	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001e2	            0x75dc	                           jne 0x40001c0	        76	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001e4	        0x488b4008	                mov rax, qword [rax + 8]	        77	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001e8	              0xc3	                                     ret	        77	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001e9	     0xf1f80000000	                         nop dword [rax]	        77	decorate.c	FUNCTION_5	FOR_1	IF_2
0x40001f0	            0x31c0	                            xor eax, eax	        72	decorate.c	FUNCTION_5	IF_1
0x40001f2	              0xc3	                                     ret	        83	decorate.c	FUNCTION_5
