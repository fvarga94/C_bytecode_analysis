crypt_get_method_nr	CALL,1:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	33
0x40001c0	            0x4154	                                push r12	       184	crypt.c	FUNCTION_4
0x40001c2	              0x55	                                push rbp	       184	crypt.c	FUNCTION_4
0x40001c3	      0xbe00000000	                              mov esi, 0	       184	crypt.c	FUNCTION_4
0x40001c8	              0x53	                                push rbx	       184	crypt.c	FUNCTION_4
0x40001c9	    0x4c8ba7481700	          mov r12, qword [rdi + 0x1748] 	       185	crypt.c	FUNCTION_4	CALL_1
0x40001d0	      0xbd00000000	                              mov ebp, 0	       185	crypt.c	FUNCTION_4	CALL_1
0x40001d5	      0x41803c2400	                       cmp byte [r12], 0	       185	crypt.c	FUNCTION_4	CALL_1
0x40001da	    0x4c0f44250000	           cmove r12, qword [0x040001e2]	       185	crypt.c	FUNCTION_4	CALL_1
0x40001e2	            0x31db	                            xor ebx, ebx	       140	crypt.c	FUNCTION_1	FOR_1
0x40001e4	          0x4c89e7	                            mov rdi, r12	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x40001e7	      0xe800000000	                          call 0x40001ec	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x40001ec	            0x85c0	                           test eax, eax	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x40001ee	            0x741c	                            je 0x400020c	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x40001f0	          0x83c301	                              add ebx, 1	       140	crypt.c	FUNCTION_1	FOR_1
0x40001f3	        0x4883c560	                           add rbp, 0x60	       140	crypt.c	FUNCTION_1	FOR_1
0x40001f7	          0x83fb03	                              cmp ebx, 3	       140	crypt.c	FUNCTION_1	FOR_1
0x40001fa	            0x741c	                            je 0x4000218	       140	crypt.c	FUNCTION_1	FOR_1
0x40001fc	        0x488b7500	                    mov rsi, qword [rbp]	       140	crypt.c	FUNCTION_1	FOR_1
0x4000200	          0x4c89e7	                            mov rdi, r12	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x4000203	      0xe800000000	                          call 0x4000208	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x4000208	            0x85c0	                           test eax, eax	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x400020a	            0x75e4	                           jne 0x40001f0	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x400020c	            0x89d8	                            mov eax, ebx	       141	crypt.c	FUNCTION_1	FOR_1	IF_1	CALL_1
0x400020e	              0x5b	                                 pop rbx	       186	crypt.c	FUNCTION_4
0x400020f	              0x5d	                                 pop rbp	       186	crypt.c	FUNCTION_4
0x4000210	            0x415c	                                 pop r12	       186	crypt.c	FUNCTION_4
0x4000212	              0xc3	                                     ret	       186	crypt.c	FUNCTION_4
0x4000213	       0xf1f440000	                   nop dword [rax + rax]	       186	crypt.c	FUNCTION_4
0x4000218	              0x5b	                                 pop rbx	       186	crypt.c	FUNCTION_4
0x4000219	            0x31c0	                            xor eax, eax	       143	crypt.c	FUNCTION_1
0x400021b	              0x5d	                                 pop rbp	       186	crypt.c	FUNCTION_4
0x400021c	            0x415c	                                 pop r12	       186	crypt.c	FUNCTION_4
0x400021e	              0xc3	                                     ret	       186	crypt.c	FUNCTION_4
crypt_create_from_header	CALL,1:WHILE,0:functions,0:IF,2:FOR,0:DO,0:SWITCH,0:ELSE,0	49
0x4000350	            0x4157	                                push r15	       263	crypt.c	FUNCTION_10
0x4000352	            0x4156	                                push r14	       263	crypt.c	FUNCTION_10
0x4000354	            0x4155	                                push r13	       263	crypt.c	FUNCTION_10
0x4000356	            0x4154	                                push r12	       263	crypt.c	FUNCTION_10
0x4000358	        0x4c8d6a0c	                    lea r13, [rdx + 0xc]	       270	crypt.c	FUNCTION_10	IF_1
0x400035c	              0x55	                                push rbp	       263	crypt.c	FUNCTION_10
0x400035d	              0x53	                                push rbx	       263	crypt.c	FUNCTION_10
0x400035e	          0x4863df	                         movsxd rbx, edi	       263	crypt.c	FUNCTION_10
0x4000361	        0x488d045b	                  lea rax, [rbx + rbx*2]	       266	crypt.c	FUNCTION_10
0x4000365	          0x4989de	                            mov r14, rbx	       263	crypt.c	FUNCTION_10
0x4000368	          0x4989f4	                            mov r12, rsi	       263	crypt.c	FUNCTION_10
0x400036b	        0x4883ec18	                           sub rsp, 0x18	       263	crypt.c	FUNCTION_10
0x400036f	        0x48c1e005	                              shl rax, 5	       266	crypt.c	FUNCTION_10
0x4000373	    0x448bb8000000	                   mov r15d, dword [rax]	       266	crypt.c	FUNCTION_10
0x400037a	    0x448b88000000	                    mov r9d, dword [rax]	       267	crypt.c	FUNCTION_10
0x4000381	      0xb800000000	                              mov eax, 0	       270	crypt.c	FUNCTION_10	IF_1
0x4000386	          0x4585ff	                         test r15d, r15d	       270	crypt.c	FUNCTION_10	IF_1
0x4000389	        0x4c0f4ee8	                         cmovle r13, rax	       270	crypt.c	FUNCTION_10	IF_1
0x400038d	          0x4585c9	                           test r9d, r9d	       271	crypt.c	FUNCTION_10	IF_2
0x4000390	            0x7e5e	                           jle 0x40003f0	       271	crypt.c	FUNCTION_10	IF_2
0x4000392	          0x4963c7	                        movsxd rax, r15d	       272	crypt.c	FUNCTION_10	IF_2
0x4000395	      0x4c8d44020c	               lea r8, [rdx + rax + 0xc]	       272	crypt.c	FUNCTION_10	IF_2
0x400039a	      0xbf10000000	                           mov edi, 0x10	       246	crypt.c	FUNCTION_9	CALL_1
0x400039f	      0x44894c240c	              mov dword [rsp + 0xc], r9d	       246	crypt.c	FUNCTION_9	CALL_1
0x40003a4	        0x4c890424	                     mov qword [rsp], r8	       246	crypt.c	FUNCTION_9	CALL_1
0x40003a8	      0xe800000000	                          call 0x40003ad	       246	crypt.c	FUNCTION_9	CALL_1
0x40003ad	          0x4889c5	                            mov rbp, rax	       246	crypt.c	FUNCTION_9	CALL_1
0x40003b0	          0x448930	                   mov dword [rax], r14d	       248	crypt.c	FUNCTION_9
0x40003b3	        0x488d045b	                  lea rax, [rbx + rbx*2]	       249	crypt.c	FUNCTION_9	CALL_2
0x40003b7	      0x448b4c240c	              mov r9d, dword [rsp + 0xc]	       249	crypt.c	FUNCTION_9	CALL_2
0x40003bc	        0x4c8b0424	                     mov r8, qword [rsp]	       249	crypt.c	FUNCTION_9	CALL_2
0x40003c0	          0x4489f9	                           mov ecx, r15d	       249	crypt.c	FUNCTION_9	CALL_2
0x40003c3	        0x48c1e005	                              shl rax, 5	       249	crypt.c	FUNCTION_9	CALL_2
0x40003c7	          0x4c89ea	                            mov rdx, r13	       249	crypt.c	FUNCTION_9	CALL_2
0x40003ca	          0x4c89e6	                            mov rsi, r12	       249	crypt.c	FUNCTION_9	CALL_2
0x40003cd	          0x4889ef	                            mov rdi, rbp	       249	crypt.c	FUNCTION_9	CALL_2
0x40003d0	    0xff9000000000	                        call qword [rax]	       249	crypt.c	FUNCTION_9	CALL_2
0x40003d6	        0x4883c418	                           add rsp, 0x18	       275	crypt.c	FUNCTION_10
0x40003da	          0x4889e8	                            mov rax, rbp	       275	crypt.c	FUNCTION_10
0x40003dd	              0x5b	                                 pop rbx	       275	crypt.c	FUNCTION_10
0x40003de	              0x5d	                                 pop rbp	       275	crypt.c	FUNCTION_10
0x40003df	            0x415c	                                 pop r12	       275	crypt.c	FUNCTION_10
0x40003e1	            0x415d	                                 pop r13	       275	crypt.c	FUNCTION_10
0x40003e3	            0x415e	                                 pop r14	       275	crypt.c	FUNCTION_10
0x40003e5	            0x415f	                                 pop r15	       275	crypt.c	FUNCTION_10
0x40003e7	              0xc3	                                     ret	       275	crypt.c	FUNCTION_10
0x40003e8	     0xf1f84000000	                   nop dword [rax + rax]	       275	crypt.c	FUNCTION_10
0x40003f0	          0x4531c0	                            xor r8d, r8d	       265	crypt.c	FUNCTION_10
0x40003f3	            0xeba5	                           jmp 0x400039a	       265	crypt.c	FUNCTION_10
crypt_set_cm_option	CALL,2:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	17
0x4000260	              0x55	                                push rbp	       215	crypt.c	FUNCTION_7
0x4000261	              0x53	                                push rbx	       215	crypt.c	FUNCTION_7
0x4000262	          0x4889fd	                            mov rbp, rdi	       215	crypt.c	FUNCTION_7
0x4000265	            0x89f3	                            mov ebx, esi	       215	crypt.c	FUNCTION_7
0x4000267	        0x4883ec08	                              sub rsp, 8	       215	crypt.c	FUNCTION_7
0x400026b	    0x488bbf481700	          mov rdi, qword [rdi + 0x1748] 	       216	crypt.c	FUNCTION_7	CALL_1
0x4000272	      0xe800000000	                          call 0x4000277	       216	crypt.c	FUNCTION_7	CALL_1
0x4000277	          0x4863f3	                         movsxd rsi, ebx	       217	crypt.c	FUNCTION_7	CALL_2
0x400027a	        0x488d0476	                  lea rax, [rsi + rsi*2]	       217	crypt.c	FUNCTION_7	CALL_2
0x400027e	        0x48c1e005	                              shl rax, 5	       217	crypt.c	FUNCTION_7	CALL_2
0x4000282	    0x488bb8000000	                    mov rdi, qword [rax]	       217	crypt.c	FUNCTION_7	CALL_2
0x4000289	      0xe800000000	                          call 0x400028e	       217	crypt.c	FUNCTION_7	CALL_2
0x400028e	    0x488985481700	          mov qword [rbp + 0x1748], rax 	       217	crypt.c	FUNCTION_7	CALL_2
0x4000295	        0x4883c408	                              add rsp, 8	       218	crypt.c	FUNCTION_7
0x4000299	              0x5b	                                 pop rbx	       218	crypt.c	FUNCTION_7
0x400029a	              0x5d	                                 pop rbp	       218	crypt.c	FUNCTION_7
0x400029b	              0xc3	                                     ret	       218	crypt.c	FUNCTION_7
crypt_whole_undofile	CALL,0:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	5
0x4000220	          0x4863ff	                         movsxd rdi, edi	       195	crypt.c	FUNCTION_5
0x4000223	        0x488d047f	                  lea rax, [rdi + rdi*2]	       195	crypt.c	FUNCTION_5
0x4000227	        0x48c1e005	                              shl rax, 5	       195	crypt.c	FUNCTION_5
0x400022b	    0x8b8000000000	                    mov eax, dword [rax]	       195	crypt.c	FUNCTION_5
0x4000231	              0xc3	                                     ret	       196	crypt.c	FUNCTION_5
crypt_get_key	CALL,12:WHILE,0:functions,0:IF,5:FOR,1:DO,0:SWITCH,0:ELSE,0	124
0x4000850	            0x4156	                                push r14	       523	crypt.c	FUNCTION_23
0x4000852	            0x4155	                                push r13	       523	crypt.c	FUNCTION_23
0x4000854	          0x4189fe	                           mov r14d, edi	       523	crypt.c	FUNCTION_23
0x4000857	            0x4154	                                push r12	       523	crypt.c	FUNCTION_23
0x4000859	              0x55	                                push rbp	       523	crypt.c	FUNCTION_23
0x400085a	          0x4189f5	                           mov r13d, esi	       523	crypt.c	FUNCTION_23
0x400085d	              0x53	                                push rbx	       523	crypt.c	FUNCTION_23
0x400085e	            0x31ed	                            xor ebp, ebp	       527	crypt.c	FUNCTION_23	FOR_1
0x4000860	          0x4531e4	                          xor r12d, r12d	       524	crypt.c	FUNCTION_23
0x4000863	    0x8b0500000000	            mov eax, dword [0x04000869] 	       530	crypt.c	FUNCTION_23	FOR_1
0x4000869	            0x85ed	                           test ebp, ebp	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400086b	    0xc70500000000	               mov dword [0x04000875], 1	       529	crypt.c	FUNCTION_23	FOR_1
0x4000875	      0xba05000000	                              mov edx, 5	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400087a	    0x890500000000	            mov dword [0x04000880], eax 	       530	crypt.c	FUNCTION_23	FOR_1
0x4000880	            0x753e	                           jne 0x40008c0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000882	      0xbe00000000	                              mov esi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000887	            0x31ff	                            xor edi, edi	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000889	      0xe800000000	                          call 0x400088e	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400088e	          0x4531c0	                            xor r8d, r8d	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000891	            0x31c9	                            xor ecx, ecx	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000893	            0x31d2	                            xor edx, edx	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000895	            0x31ff	                            xor edi, edi	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x4000897	          0x4889c6	                            mov rsi, rax	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400089a	      0xe800000000	                          call 0x400089f	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x400089f	          0x4885c0	                           test rax, rax	       537	crypt.c	FUNCTION_23	FOR_1	IF_1
0x40008a2	          0x4889c3	                            mov rbx, rax	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008a5	    0xc70500000000	               mov dword [0x040008af], 0	       535	crypt.c	FUNCTION_23	FOR_1
0x40008af	            0x743c	                            je 0x40008ed	       537	crypt.c	FUNCTION_23	FOR_1	IF_1
0x40008b1	          0x4439ed	                           cmp ebp, r13d	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x40008b4	            0x741a	                            je 0x40008d0	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x40008b6	          0x83c501	                              add ebp, 1	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x40008b9	          0x4989c4	                            mov r12, rax	       540	crypt.c	FUNCTION_23	FOR_1	IF_2
0x40008bc	            0xeba5	                           jmp 0x4000863	       561	crypt.c	FUNCTION_23	FOR_1
0x40008be	            0x6690	                                     nop	       561	crypt.c	FUNCTION_23	FOR_1
0x40008c0	      0xbe00000000	                              mov esi, 0	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008c5	            0x31ff	                            xor edi, edi	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008c7	      0xe800000000	                          call 0x40008cc	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008cc	            0xebc0	                           jmp 0x400088e	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008ce	            0x6690	                                     nop	       531	crypt.c	FUNCTION_23	FOR_1	CALL_1
0x40008d0	          0x4d85e4	                           test r12, r12	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008d3	            0x740f	                            je 0x40008e4	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008d5	          0x4c89e6	                            mov rsi, r12	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008d8	          0x4889c7	                            mov rdi, rax	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008db	      0xe800000000	                          call 0x40008e0	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008e0	            0x85c0	                           test eax, eax	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008e2	            0x755c	                           jne 0x4000940	       542	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_4
0x40008e4	          0x4585f6	                         test r14d, r14d	       552	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40008e7	     0xf85d3000000	                           jne 0x40009c0	       552	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40008ed	    0x8b0500000000	            mov eax, dword [0x040008f3] 	       564	crypt.c	FUNCTION_23	IF_5
0x40008f3	            0x85c0	                           test eax, eax	       564	crypt.c	FUNCTION_23	IF_5
0x40008f5	     0xf85b5000000	                           jne 0x40009b0	       564	crypt.c	FUNCTION_23	IF_5
0x40008fb	          0x4d85e4	                           test r12, r12	       485	crypt.c	FUNCTION_20	IF_1
0x40008fe	    0xc70500000000	               mov dword [0x04000908], 0	       566	crypt.c	FUNCTION_23
0x4000908	    0xc70500000000	               mov dword [0x04000912], 0	       567	crypt.c	FUNCTION_23
0x4000912	            0x7420	                            je 0x4000934	       485	crypt.c	FUNCTION_20	IF_1
0x4000914	      0x41803c2400	                       cmp byte [r12], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000919	          0x4c89e0	                            mov rax, r12	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400091c	            0x740e	                            je 0x400092c	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400091e	            0x6690	                                     nop	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000920	          0xc60000	                       mov byte [rax], 0	       488	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000923	        0x4883c001	                              add rax, 1	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000927	          0x803800	                       cmp byte [rax], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400092a	            0x75f4	                           jne 0x4000920	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400092c	          0x4c89e7	                            mov rdi, r12	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x400092f	      0xe800000000	                          call 0x4000934	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x4000934	          0x4889d8	                            mov rax, rbx	       571	crypt.c	FUNCTION_23
0x4000937	              0x5b	                                 pop rbx	       571	crypt.c	FUNCTION_23
0x4000938	              0x5d	                                 pop rbp	       571	crypt.c	FUNCTION_23
0x4000939	            0x415c	                                 pop r12	       571	crypt.c	FUNCTION_23
0x400093b	            0x415d	                                 pop r13	       571	crypt.c	FUNCTION_23
0x400093d	            0x415e	                                 pop r14	       571	crypt.c	FUNCTION_23
0x400093f	              0xc3	                                     ret	       571	crypt.c	FUNCTION_23
0x4000940	            0x31ff	                            xor edi, edi	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000942	      0xba05000000	                              mov edx, 5	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000947	      0xbe00000000	                              mov esi, 0	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x400094c	      0xe800000000	                          call 0x4000951	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000951	          0x4889c7	                            mov rdi, rax	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000954	      0xe800000000	                          call 0x4000959	       544	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3	CALL_6
0x4000959	          0x803b00	                       cmp byte [rbx], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400095c	          0x4889d8	                            mov rax, rbx	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400095f	            0x7413	                            je 0x4000974	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000961	     0xf1f80000000	                         nop dword [rax]	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000968	          0xc60000	                       mov byte [rax], 0	       488	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400096b	        0x4883c001	                              add rax, 1	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400096f	          0x803800	                       cmp byte [rax], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000972	            0x75f4	                           jne 0x4000968	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000974	          0x4889df	                            mov rdi, rbx	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x4000977	      0xe800000000	                          call 0x400097c	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x400097c	      0x41803c2400	                       cmp byte [r12], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000981	          0x4c89e0	                            mov rax, r12	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000984	            0x7416	                            je 0x400099c	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000986	    0x662e0f1f8400	                 nop word cs:[rax + rax]	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000990	          0xc60000	                       mov byte [rax], 0	       488	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000993	        0x4883c001	                              add rax, 1	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x4000997	          0x803800	                       cmp byte [rax], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400099a	            0x75f4	                           jne 0x4000990	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x400099c	          0x4c89e7	                            mov rdi, r12	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x400099f	            0x31ed	                            xor ebp, ebp	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009a1	          0x4531e4	                          xor r12d, r12d	       547	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_3
0x40009a4	      0xe800000000	                          call 0x40009a9	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009a9	      0xe9b5feffff	                           jmp 0x4000863	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009ae	            0x6690	                                     nop	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009b0	      0xbf0a000000	                            mov edi, 0xa	       565	crypt.c	FUNCTION_23	CALL_11
0x40009b5	      0xe800000000	                          call 0x40009ba	       565	crypt.c	FUNCTION_23	CALL_11
0x40009ba	      0xe93cffffff	                           jmp 0x40008fb	       565	crypt.c	FUNCTION_23	CALL_11
0x40009bf	              0x90	                                     nop	       565	crypt.c	FUNCTION_23	CALL_11
0x40009c0	            0x31f6	                            xor esi, esi	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40009c2	      0xb904000000	                              mov ecx, 4	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40009c7	          0x4889da	                            mov rdx, rbx	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40009ca	      0xbf00000000	                              mov edi, 0	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40009cf	      0xe800000000	                          call 0x40009d4	       554	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4	CALL_9
0x40009d4	          0x803b00	                       cmp byte [rbx], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009d7	          0x4889d8	                            mov rax, rbx	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009da	            0x7410	                            je 0x40009ec	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009dc	         0xf1f4000	                         nop dword [rax]	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009e0	          0xc60000	                       mov byte [rax], 0	       488	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009e3	        0x4883c001	                              add rax, 1	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009e7	          0x803800	                       cmp byte [rax], 0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009ea	            0x75f4	                           jne 0x40009e0	       487	crypt.c	FUNCTION_20	IF_1	FOR_1
0x40009ec	          0x4889df	                            mov rdi, rbx	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009ef	      0xe800000000	                          call 0x40009f4	       489	crypt.c	FUNCTION_20	IF_1	CALL_1
0x40009f4	    0x488b05000000	            mov rax, qword [0x040009fb] 	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x40009fb	    0x488b98101500	          mov rbx, qword [rax + 0x1510] 	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
0x4000a02	      0xe9e6feffff	                           jmp 0x40008ed	       556	crypt.c	FUNCTION_23	FOR_1	IF_2	IF_4
crypt_decode	CALL,1:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	4
0x4000770	          0x486307	                 movsxd rax, dword [rdi]	       449	crypt.c	FUNCTION_17	CALL_1
0x4000773	        0x488d0440	                  lea rax, [rax + rax*2]	       449	crypt.c	FUNCTION_17	CALL_1
0x4000777	        0x48c1e005	                              shl rax, 5	       449	crypt.c	FUNCTION_17	CALL_1
0x400077b	    0xffa000000000	                         jmp qword [rax]	       449	crypt.c	FUNCTION_17	CALL_1
crypt_self_test	CALL,2:WHILE,0:functions,0:IF,1:FOR,0:DO,0:SWITCH,0:ELSE,0	16
0x40002a0	        0x4883ec08	                              sub rsp, 8	       226	crypt.c	FUNCTION_8
0x40002a4	    0x488b3d000000	            mov rdi, qword [0x040002ab] 	       227	crypt.c	FUNCTION_8	CALL_1
0x40002ab	      0xe800000000	                          call 0x40002b0	       227	crypt.c	FUNCTION_8	CALL_1
0x40002b0	            0x4898	                                    cdqe	       229	crypt.c	FUNCTION_8	IF_1
0x40002b2	        0x488d0440	                  lea rax, [rax + rax*2]	       229	crypt.c	FUNCTION_8	IF_1
0x40002b6	        0x48c1e005	                              shl rax, 5	       229	crypt.c	FUNCTION_8	IF_1
0x40002ba	    0x488b90000000	                    mov rdx, qword [rax]	       229	crypt.c	FUNCTION_8	IF_1
0x40002c1	          0x4885d2	                           test rdx, rdx	       229	crypt.c	FUNCTION_8	IF_1
0x40002c4	            0x740a	                            je 0x40002d0	       229	crypt.c	FUNCTION_8	IF_1
0x40002c6	            0x31c0	                            xor eax, eax	       231	crypt.c	FUNCTION_8	CALL_2
0x40002c8	        0x4883c408	                              add rsp, 8	       232	crypt.c	FUNCTION_8
0x40002cc	            0xffe2	                                 jmp rdx	       231	crypt.c	FUNCTION_8	CALL_2
0x40002ce	            0x6690	                                     nop	       231	crypt.c	FUNCTION_8	CALL_2
0x40002d0	      0xb801000000	                              mov eax, 1	       232	crypt.c	FUNCTION_8
0x40002d5	        0x4883c408	                              add rsp, 8	       232	crypt.c	FUNCTION_8
0x40002d9	              0xc3	                                     ret	       232	crypt.c	FUNCTION_8
crypt_works_inplace	CALL,0:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	5
0x40001a0	          0x486307	                 movsxd rax, dword [rdi]	       176	crypt.c	FUNCTION_3
0x40001a3	        0x488d0440	                  lea rax, [rax + rax*2]	       176	crypt.c	FUNCTION_3
0x40001a7	        0x48c1e005	                              shl rax, 5	       176	crypt.c	FUNCTION_3
0x40001ab	    0x8b8000000000	                    mov eax, dword [rax]	       176	crypt.c	FUNCTION_3
0x40001b1	              0xc3	                                     ret	       177	crypt.c	FUNCTION_3
crypt_create_from_file	CALL,9:WHILE,0:functions,0:IF,4:FOR,0:DO,0:SWITCH,0:ELSE,0	75
0x4000400	            0x4156	                                push r14	       283	crypt.c	FUNCTION_11
0x4000402	            0x4155	                                push r13	       283	crypt.c	FUNCTION_11
0x4000404	          0x4889f9	                            mov rcx, rdi	       295	stdio2.h	FUNCTION_39	CALL_9
0x4000407	            0x4154	                                push r12	       283	crypt.c	FUNCTION_11
0x4000409	              0x55	                                push rbp	       283	crypt.c	FUNCTION_11
0x400040a	          0x4989f4	                            mov r12, rsi	       283	crypt.c	FUNCTION_11
0x400040d	              0x53	                                push rbx	       283	crypt.c	FUNCTION_11
0x400040e	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_39	CALL_9
0x4000413	          0x4889fb	                            mov rbx, rdi	       283	crypt.c	FUNCTION_11
0x4000416	      0xbe0c000000	                            mov esi, 0xc	       295	stdio2.h	FUNCTION_39	CALL_9
0x400041b	        0x4883ec20	                           sub rsp, 0x20	       283	crypt.c	FUNCTION_11
0x400041f	          0x4889e7	                            mov rdi, rsp	       295	stdio2.h	FUNCTION_39	CALL_9
0x4000422	    0x64488b042528	                mov rax, qword fs:[0x28]	       283	crypt.c	FUNCTION_11
0x400042b	      0x4889442418	             mov qword [rsp + 0x18], rax	       283	crypt.c	FUNCTION_11
0x4000430	            0x31c0	                            xor eax, eax	       283	crypt.c	FUNCTION_11
0x4000432	      0xe800000000	                          call 0x4000437	       295	stdio2.h	FUNCTION_39	CALL_9
0x4000437	        0x4883f801	                              cmp rax, 1	       290	crypt.c	FUNCTION_11	IF_1	CALL_1
0x400043b	     0xf85af000000	                           jne 0x40004f0	       290	crypt.c	FUNCTION_11	IF_1	CALL_1
0x4000441	      0xbe0c000000	                            mov esi, 0xc	       292	crypt.c	FUNCTION_11	CALL_2
0x4000446	          0x4889e7	                            mov rdi, rsp	       292	crypt.c	FUNCTION_11	CALL_2
0x4000449	      0xe800000000	                          call 0x400044e	       292	crypt.c	FUNCTION_11	CALL_2
0x400044e	            0x85c0	                           test eax, eax	       293	crypt.c	FUNCTION_11	IF_2
0x4000450	            0x89c5	                            mov ebp, eax	       292	crypt.c	FUNCTION_11	CALL_2
0x4000452	     0xf8898000000	                            js 0x40004f0	       293	crypt.c	FUNCTION_11	IF_2
0x4000458	            0x4898	                                    cdqe	       205	crypt.c	FUNCTION_6
0x400045a	        0x488d0440	                  lea rax, [rax + rax*2]	       205	crypt.c	FUNCTION_6
0x400045e	        0x48c1e005	                              shl rax, 5	       205	crypt.c	FUNCTION_6
0x4000462	    0x8b9000000000	                    mov edx, dword [rax]	       204	crypt.c	FUNCTION_6
0x4000468	    0x480500000000	                              add rax, 0	       205	crypt.c	FUNCTION_6
0x400046e	          0x8b4014	            mov eax, dword [rax + 0x14] 	       204	crypt.c	FUNCTION_6
0x4000471	      0x448d6c020c	            lea r13d, [rdx + rax + 0xc] 	       204	crypt.c	FUNCTION_6
0x4000476	          0x4489ef	                           mov edi, r13d	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000479	      0xe800000000	                          call 0x400047e	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x400047e	          0x4885c0	                           test rax, rax	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000481	          0x4989c6	                            mov r14, rax	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000484	            0x746a	                            je 0x40004f0	       297	crypt.c	FUNCTION_11	IF_3	CALL_4
0x4000486	      0xba0c000000	                            mov edx, 0xc	        59	string3.h	FUNCTION_43	CALL_3
0x400048b	          0x4889e6	                            mov rsi, rsp	        59	string3.h	FUNCTION_43	CALL_3
0x400048e	          0x4889c7	                            mov rdi, rax	        59	string3.h	FUNCTION_43	CALL_3
0x4000491	      0xe800000000	                          call 0x4000496	        59	string3.h	FUNCTION_43	CALL_3
0x4000496	        0x4183fd0c	                           cmp r13d, 0xc	       300	crypt.c	FUNCTION_11	IF_4
0x400049a	            0x7e1e	                           jle 0x40004ba	       300	crypt.c	FUNCTION_11	IF_4
0x400049c	        0x418d75f4	                    lea esi, [r13 - 0xc]	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004a0	        0x498d7e0c	                    lea rdi, [r14 + 0xc]	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004a4	          0x4889d9	                            mov rcx, rbx	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004a7	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004ac	          0x4863f6	                         movsxd rsi, esi	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004af	      0xe800000000	                          call 0x40004b4	       295	stdio2.h	FUNCTION_39	CALL_9
0x40004b4	        0x4883f801	                              cmp rax, 1	       301	crypt.c	FUNCTION_11	IF_4	CALL_6
0x40004b8	            0x7526	                           jne 0x40004e0	       301	crypt.c	FUNCTION_11	IF_4	CALL_6
0x40004ba	          0x4c89f2	                            mov rdx, r14	       308	crypt.c	FUNCTION_11	CALL_8
0x40004bd	          0x4c89e6	                            mov rsi, r12	       308	crypt.c	FUNCTION_11	CALL_8
0x40004c0	            0x89ef	                            mov edi, ebp	       308	crypt.c	FUNCTION_11	CALL_8
0x40004c2	      0xe800000000	                          call 0x40004c7	       308	crypt.c	FUNCTION_11	CALL_8
0x40004c7	          0x4c89f7	                            mov rdi, r14	       309	crypt.c	FUNCTION_11	CALL_9
0x40004ca	          0x4889c3	                            mov rbx, rax	       308	crypt.c	FUNCTION_11	CALL_8
0x40004cd	      0xe800000000	                          call 0x40004d2	       309	crypt.c	FUNCTION_11	CALL_9
0x40004d2	          0x4889d8	                            mov rax, rbx	       310	crypt.c	FUNCTION_11
0x40004d5	            0xeb1b	                           jmp 0x40004f2	       310	crypt.c	FUNCTION_11
0x40004d7	    0x660f1f840000	                    nop word [rax + rax]	       310	crypt.c	FUNCTION_11
0x40004e0	          0x4c89f7	                            mov rdi, r14	       304	crypt.c	FUNCTION_11	IF_4	CALL_7
0x40004e3	      0xe800000000	                          call 0x40004e8	       304	crypt.c	FUNCTION_11	IF_4	CALL_7
0x40004e8	     0xf1f84000000	                   nop dword [rax + rax]	       304	crypt.c	FUNCTION_11	IF_4	CALL_7
0x40004f0	            0x31c0	                            xor eax, eax	       305	crypt.c	FUNCTION_11	IF_4
0x40004f2	      0x488b4c2418	            mov rcx, qword [rsp + 0x18] 	       311	crypt.c	FUNCTION_11
0x40004f7	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       311	crypt.c	FUNCTION_11
0x4000500	            0x750d	                           jne 0x400050f	       311	crypt.c	FUNCTION_11
0x4000502	        0x4883c420	                           add rsp, 0x20	       311	crypt.c	FUNCTION_11
0x4000506	              0x5b	                                 pop rbx	       311	crypt.c	FUNCTION_11
0x4000507	              0x5d	                                 pop rbp	       311	crypt.c	FUNCTION_11
0x4000508	            0x415c	                                 pop r12	       311	crypt.c	FUNCTION_11
0x400050a	            0x415d	                                 pop r13	       311	crypt.c	FUNCTION_11
0x400050c	            0x415e	                                 pop r14	       311	crypt.c	FUNCTION_11
0x400050e	              0xc3	                                     ret	       311	crypt.c	FUNCTION_11
0x400050f	      0xe800000000	                          call 0x4000514	       311	crypt.c	FUNCTION_11
crypt_encode	CALL,1:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	4
0x4000750	          0x486307	                 movsxd rax, dword [rdi]	       436	crypt.c	FUNCTION_16	CALL_1
0x4000753	        0x488d0440	                  lea rax, [rax + rax*2]	       436	crypt.c	FUNCTION_16	CALL_1
0x4000757	        0x48c1e005	                              shl rax, 5	       436	crypt.c	FUNCTION_16	CALL_1
0x400075b	    0xffa000000000	                         jmp qword [rax]	       436	crypt.c	FUNCTION_16	CALL_1
crypt_create_for_writing	CALL,6:WHILE,0:functions,0:IF,5:FOR,0:DO,0:SWITCH,0:ELSE,0	77
0x4000520	            0x4157	                                push r15	       326	crypt.c	FUNCTION_12
0x4000522	            0x4156	                                push r14	       326	crypt.c	FUNCTION_12
0x4000524	          0x4989d7	                            mov r15, rdx	       326	crypt.c	FUNCTION_12
0x4000527	            0x4155	                                push r13	       326	crypt.c	FUNCTION_12
0x4000529	            0x4154	                                push r12	       326	crypt.c	FUNCTION_12
0x400052b	              0x55	                                push rbp	       326	crypt.c	FUNCTION_12
0x400052c	          0x4863ef	                         movsxd rbp, edi	       326	crypt.c	FUNCTION_12
0x400052f	              0x53	                                push rbx	       326	crypt.c	FUNCTION_12
0x4000530	      0x4c8d6c6d00	                  lea r13, [rbp + rbp*2]	       205	crypt.c	FUNCTION_6
0x4000535	        0x4883ec18	                           sub rsp, 0x18	       326	crypt.c	FUNCTION_12
0x4000539	        0x49c1e505	                              shl r13, 5	       205	crypt.c	FUNCTION_6
0x400053d	        0x48893424	                    mov qword [rsp], rsi	       326	crypt.c	FUNCTION_12
0x4000541	    0x418b9d000000	                    mov ebx, dword [r13]	       205	crypt.c	FUNCTION_6
0x4000548	    0x458ba5000000	                   mov r12d, dword [r13]	       206	crypt.c	FUNCTION_6
0x400054f	    0x4981c5000000	                              add r13, 0	       205	crypt.c	FUNCTION_6
0x4000556	      0x428d7c230c	              lea edi, [rbx + r12 + 0xc]	       204	crypt.c	FUNCTION_6
0x400055b	            0x8939	                    mov dword [rcx], edi	       334	crypt.c	FUNCTION_12
0x400055d	      0xe800000000	                          call 0x4000562	       335	crypt.c	FUNCTION_12	CALL_2
0x4000562	          0x4885c0	                           test rax, rax	       336	crypt.c	FUNCTION_12	IF_1
0x4000565	          0x498907	                    mov qword [r15], rax	       335	crypt.c	FUNCTION_12	CALL_2
0x4000568	     0xf84b2000000	                            je 0x4000620	       336	crypt.c	FUNCTION_12	IF_1
0x400056e	        0x498b7508	                mov rsi, qword [r13 + 8]	        59	string3.h	FUNCTION_43	CALL_3
0x4000572	      0xba0c000000	                            mov edx, 0xc	        59	string3.h	FUNCTION_43	CALL_3
0x4000577	          0x4889c7	                            mov rdi, rax	        59	string3.h	FUNCTION_43	CALL_3
0x400057a	          0x4989ee	                            mov r14, rbp	        59	string3.h	FUNCTION_43	CALL_3
0x400057d	      0xe800000000	                          call 0x4000582	        59	string3.h	FUNCTION_43	CALL_3
0x4000582	            0x85db	                           test ebx, ebx	       340	crypt.c	FUNCTION_12	IF_2
0x4000584	            0x7f5a	                            jg 0x40005e0	       340	crypt.c	FUNCTION_12	IF_2
0x4000586	          0x4531c0	                            xor r8d, r8d	       329	crypt.c	FUNCTION_12
0x4000589	          0x4531ed	                          xor r13d, r13d	       328	crypt.c	FUNCTION_12
0x400058c	          0x4585e4	                         test r12d, r12d	       340	crypt.c	FUNCTION_12	IF_2
0x400058f	            0x7f4f	                            jg 0x40005e0	       340	crypt.c	FUNCTION_12	IF_2
0x4000591	      0xbf10000000	                           mov edi, 0x10	       246	crypt.c	FUNCTION_9	CALL_1
0x4000596	      0x4c89442408	                 mov qword [rsp + 8], r8	       246	crypt.c	FUNCTION_9	CALL_1
0x400059b	      0xe800000000	                          call 0x40005a0	       246	crypt.c	FUNCTION_9	CALL_1
0x40005a0	          0x4989c7	                            mov r15, rax	       246	crypt.c	FUNCTION_9	CALL_1
0x40005a3	          0x448930	                   mov dword [rax], r14d	       248	crypt.c	FUNCTION_9
0x40005a6	      0x488d446d00	                  lea rax, [rbp + rbp*2]	       249	crypt.c	FUNCTION_9	CALL_2
0x40005ab	          0x4589e1	                           mov r9d, r12d	       249	crypt.c	FUNCTION_9	CALL_2
0x40005ae	      0x4c8b442408	                 mov r8, qword [rsp + 8]	       249	crypt.c	FUNCTION_9	CALL_2
0x40005b3	            0x89d9	                            mov ecx, ebx	       249	crypt.c	FUNCTION_9	CALL_2
0x40005b5	        0x48c1e005	                              shl rax, 5	       249	crypt.c	FUNCTION_9	CALL_2
0x40005b9	          0x4c89ea	                            mov rdx, r13	       249	crypt.c	FUNCTION_9	CALL_2
0x40005bc	        0x488b3424	                    mov rsi, qword [rsp]	       249	crypt.c	FUNCTION_9	CALL_2
0x40005c0	          0x4c89ff	                            mov rdi, r15	       249	crypt.c	FUNCTION_9	CALL_2
0x40005c3	    0xff9000000000	                        call qword [rax]	       249	crypt.c	FUNCTION_9	CALL_2
0x40005c9	          0x4c89f8	                            mov rax, r15	       249	crypt.c	FUNCTION_9	CALL_2
0x40005cc	        0x4883c418	                           add rsp, 0x18	       357	crypt.c	FUNCTION_12
0x40005d0	              0x5b	                                 pop rbx	       357	crypt.c	FUNCTION_12
0x40005d1	              0x5d	                                 pop rbp	       357	crypt.c	FUNCTION_12
0x40005d2	            0x415c	                                 pop r12	       357	crypt.c	FUNCTION_12
0x40005d4	            0x415d	                                 pop r13	       357	crypt.c	FUNCTION_12
0x40005d6	            0x415e	                                 pop r14	       357	crypt.c	FUNCTION_12
0x40005d8	            0x415f	                                 pop r15	       357	crypt.c	FUNCTION_12
0x40005da	              0xc3	                                     ret	       357	crypt.c	FUNCTION_12
0x40005db	       0xf1f440000	                   nop dword [rax + rax]	       357	crypt.c	FUNCTION_12
0x40005e0	          0x4531ed	                          xor r13d, r13d	       328	crypt.c	FUNCTION_12
0x40005e3	            0x85db	                           test ebx, ebx	       342	crypt.c	FUNCTION_12	IF_2	IF_3
0x40005e5	            0x7e07	                           jle 0x40005ee	       342	crypt.c	FUNCTION_12	IF_2	IF_3
0x40005e7	          0x498b07	                    mov rax, qword [r15]	       343	crypt.c	FUNCTION_12	IF_2	IF_3
0x40005ea	        0x4c8d680c	                    lea r13, [rax + 0xc]	       343	crypt.c	FUNCTION_12	IF_2	IF_3
0x40005ee	          0x4531c0	                            xor r8d, r8d	       329	crypt.c	FUNCTION_12
0x40005f1	          0x4585e4	                         test r12d, r12d	       344	crypt.c	FUNCTION_12	IF_2	IF_4
0x40005f4	            0x7e0b	                           jle 0x4000601	       344	crypt.c	FUNCTION_12	IF_2	IF_4
0x40005f6	          0x498b17	                    mov rdx, qword [r15]	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x40005f9	          0x4863c3	                         movsxd rax, ebx	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x40005fc	      0x4c8d44020c	               lea r8, [rdx + rax + 0xc]	       345	crypt.c	FUNCTION_12	IF_2	IF_4
0x4000601	          0x4c89c2	                             mov rdx, r8	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000604	          0x4489e1	                           mov ecx, r12d	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000607	            0x89de	                            mov esi, ebx	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000609	          0x4c89ef	                            mov rdi, r13	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x400060c	      0x4c89442408	                 mov qword [rsp + 8], r8	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000611	      0xe800000000	                          call 0x4000616	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000616	      0x4c8b442408	                 mov r8, qword [rsp + 8]	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x400061b	      0xe971ffffff	                           jmp 0x4000591	       350	crypt.c	FUNCTION_12	IF_2	CALL_4
0x4000620	            0x31c0	                            xor eax, eax	       337	crypt.c	FUNCTION_12	IF_1
0x4000622	            0xeba8	                           jmp 0x40005cc	       337	crypt.c	FUNCTION_12	IF_1
crypt_decode_inplace	CALL,1:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	6
0x40007b0	          0x486307	                 movsxd rax, dword [rdi]	       473	crypt.c	FUNCTION_19	CALL_1
0x40007b3	          0x4889f1	                            mov rcx, rsi	       473	crypt.c	FUNCTION_19	CALL_1
0x40007b6	        0x488d0440	                  lea rax, [rax + rax*2]	       473	crypt.c	FUNCTION_19	CALL_1
0x40007ba	        0x48c1e005	                              shl rax, 5	       473	crypt.c	FUNCTION_19	CALL_1
0x40007be	    0x488b80000000	                    mov rax, qword [rax]	       473	crypt.c	FUNCTION_19	CALL_1
0x40007c5	            0xffe0	                                 jmp rax	       473	crypt.c	FUNCTION_19	CALL_1
crypt_encode_inplace	CALL,1:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	6
0x4000790	          0x486307	                 movsxd rax, dword [rdi]	       461	crypt.c	FUNCTION_18	CALL_1
0x4000793	          0x4889f1	                            mov rcx, rsi	       461	crypt.c	FUNCTION_18	CALL_1
0x4000796	        0x488d0440	                  lea rax, [rax + rax*2]	       461	crypt.c	FUNCTION_18	CALL_1
0x400079a	        0x48c1e005	                              shl rax, 5	       461	crypt.c	FUNCTION_18	CALL_1
0x400079e	    0x488b80000000	                    mov rax, qword [rax]	       461	crypt.c	FUNCTION_18	CALL_1
0x40007a5	            0xffe0	                                 jmp rax	       461	crypt.c	FUNCTION_18	CALL_1
crypt_encode_alloc	CALL,3:WHILE,0:functions,0:IF,3:FOR,0:DO,0:SWITCH,0:ELSE,0	51
0x4000650	            0x4156	                                push r14	       380	crypt.c	FUNCTION_14
0x4000652	            0x4155	                                push r13	       380	crypt.c	FUNCTION_14
0x4000654	            0x4154	                                push r12	       380	crypt.c	FUNCTION_14
0x4000656	              0x55	                                push rbp	       380	crypt.c	FUNCTION_14
0x4000657	              0x53	                                push rbx	       380	crypt.c	FUNCTION_14
0x4000658	          0x4c6307	                  movsxd r8, dword [rdi]	       383	crypt.c	FUNCTION_14	IF_1
0x400065b	        0x4b8d1c40	                    lea rbx, [r8 + r8*2]	       383	crypt.c	FUNCTION_14	IF_1
0x400065f	        0x48c1e305	                              shl rbx, 5	       383	crypt.c	FUNCTION_14	IF_1
0x4000663	    0x4881c3000000	                              add rbx, 0	       383	crypt.c	FUNCTION_14	IF_1
0x400066a	        0x488b4340	            mov rax, qword [rbx + 0x40] 	       383	crypt.c	FUNCTION_14	IF_1
0x400066e	          0x4885c0	                           test rax, rax	       383	crypt.c	FUNCTION_14	IF_1
0x4000671	            0x740d	                            je 0x4000680	       383	crypt.c	FUNCTION_14	IF_1
0x4000673	              0x5b	                                 pop rbx	       395	crypt.c	FUNCTION_14
0x4000674	              0x5d	                                 pop rbp	       395	crypt.c	FUNCTION_14
0x4000675	            0x415c	                                 pop r12	       395	crypt.c	FUNCTION_14
0x4000677	            0x415d	                                 pop r13	       395	crypt.c	FUNCTION_14
0x4000679	            0x415e	                                 pop r14	       395	crypt.c	FUNCTION_14
0x400067b	            0xffe0	                                 jmp rax	       385	crypt.c	FUNCTION_14	CALL_1
0x400067d	           0xf1f00	                         nop dword [rax]	       385	crypt.c	FUNCTION_14	CALL_1
0x4000680	            0x31c0	                            xor eax, eax	       388	crypt.c	FUNCTION_14	IF_2
0x4000682	          0x4885d2	                           test rdx, rdx	       386	crypt.c	FUNCTION_14	IF_2
0x4000685	            0x7509	                           jne 0x4000690	       386	crypt.c	FUNCTION_14	IF_2
0x4000687	              0x5b	                                 pop rbx	       395	crypt.c	FUNCTION_14
0x4000688	              0x5d	                                 pop rbp	       395	crypt.c	FUNCTION_14
0x4000689	            0x415c	                                 pop r12	       395	crypt.c	FUNCTION_14
0x400068b	            0x415d	                                 pop r13	       395	crypt.c	FUNCTION_14
0x400068d	            0x415e	                                 pop r14	       395	crypt.c	FUNCTION_14
0x400068f	              0xc3	                                     ret	       395	crypt.c	FUNCTION_14
0x4000690	          0x4889fd	                            mov rbp, rdi	       395	crypt.c	FUNCTION_14
0x4000693	            0x89d7	                            mov edi, edx	       390	crypt.c	FUNCTION_14	CALL_2
0x4000695	          0x4989cc	                            mov r12, rcx	       390	crypt.c	FUNCTION_14	CALL_2
0x4000698	          0x4989d5	                            mov r13, rdx	       390	crypt.c	FUNCTION_14	CALL_2
0x400069b	          0x4989f6	                            mov r14, rsi	       390	crypt.c	FUNCTION_14	CALL_2
0x400069e	      0xe800000000	                          call 0x40006a3	       390	crypt.c	FUNCTION_14	CALL_2
0x40006a3	          0x4885c0	                           test rax, rax	       391	crypt.c	FUNCTION_14	IF_3
0x40006a6	        0x49890424	                    mov qword [r12], rax	       390	crypt.c	FUNCTION_14	CALL_2
0x40006aa	            0x741b	                            je 0x40006c7	       391	crypt.c	FUNCTION_14	IF_3
0x40006ac	          0x4889c1	                            mov rcx, rax	       393	crypt.c	FUNCTION_14	CALL_3
0x40006af	          0x4c89ea	                            mov rdx, r13	       393	crypt.c	FUNCTION_14	CALL_3
0x40006b2	          0x4c89f6	                            mov rsi, r14	       393	crypt.c	FUNCTION_14	CALL_3
0x40006b5	          0x4889ef	                            mov rdi, rbp	       393	crypt.c	FUNCTION_14	CALL_3
0x40006b8	          0xff5330	                 call qword [rbx + 0x30]	       393	crypt.c	FUNCTION_14	CALL_3
0x40006bb	              0x5b	                                 pop rbx	       395	crypt.c	FUNCTION_14
0x40006bc	          0x4c89e8	                            mov rax, r13	       394	crypt.c	FUNCTION_14
0x40006bf	              0x5d	                                 pop rbp	       395	crypt.c	FUNCTION_14
0x40006c0	            0x415c	                                 pop r12	       395	crypt.c	FUNCTION_14
0x40006c2	            0x415d	                                 pop r13	       395	crypt.c	FUNCTION_14
0x40006c4	            0x415e	                                 pop r14	       395	crypt.c	FUNCTION_14
0x40006c6	              0xc3	                                     ret	       395	crypt.c	FUNCTION_14
0x40006c7	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       392	crypt.c	FUNCTION_14	IF_3
0x40006ce	            0xebb7	                           jmp 0x4000687	       392	crypt.c	FUNCTION_14	IF_3
crypt_free_state	CALL,2:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	7
0x4000630	              0x53	                                push rbx	       364	crypt.c	FUNCTION_13
0x4000631	          0x4889fb	                            mov rbx, rdi	       364	crypt.c	FUNCTION_13
0x4000634	        0x488b7f08	                mov rdi, qword [rdi + 8]	       365	crypt.c	FUNCTION_13	CALL_1
0x4000638	      0xe800000000	                          call 0x400063d	       365	crypt.c	FUNCTION_13	CALL_1
0x400063d	          0x4889df	                            mov rdi, rbx	       366	crypt.c	FUNCTION_13	CALL_2
0x4000640	              0x5b	                                 pop rbx	       367	crypt.c	FUNCTION_13
0x4000641	      0xe900000000	                           jmp 0x4000646	       366	crypt.c	FUNCTION_13	CALL_2
crypt_check_current_method	CALL,2:WHILE,0:functions,0:IF,0:FOR,0:DO,0:SWITCH,0:ELSE,0	10
0x4000820	        0x4883ec08	                              sub rsp, 8	       508	crypt.c	FUNCTION_22
0x4000824	    0x488b3d000000	            mov rdi, qword [0x0400082b] 	       509	crypt.c	FUNCTION_22	CALL_2
0x400082b	      0xe800000000	                          call 0x4000830	       509	crypt.c	FUNCTION_22	CALL_2
0x4000830	          0x83f801	                              cmp eax, 1	       499	crypt.c	FUNCTION_21	IF_1
0x4000833	            0x7e0b	                           jle 0x4000840	       499	crypt.c	FUNCTION_21	IF_1
0x4000835	        0x4883c408	                              add rsp, 8	       510	crypt.c	FUNCTION_22
0x4000839	              0xc3	                                     ret	       510	crypt.c	FUNCTION_22
0x400083a	    0x660f1f440000	                    nop word [rax + rax]	       510	crypt.c	FUNCTION_22
0x4000840	        0x4883c408	                              add rsp, 8	       510	crypt.c	FUNCTION_22
0x4000844	      0xe9f7f7ffff	       jmp sym.crypt_check_method.part.1	       510	crypt.c	FUNCTION_22
crypt_append_msg	CALL,6:WHILE,0:functions,0:IF,1:FOR,0:DO,0:SWITCH,0:ELSE,1	37
0x4000a10	              0x55	                                push rbp	       580	crypt.c	FUNCTION_24
0x4000a11	              0x53	                                push rbx	       580	crypt.c	FUNCTION_24
0x4000a12	          0x4889fb	                            mov rbx, rdi	       580	crypt.c	FUNCTION_24
0x4000a15	        0x4883ec08	                              sub rsp, 8	       580	crypt.c	FUNCTION_24
0x4000a19	      0xe800000000	                          call 0x4000a1e	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x4000a1e	            0x85c0	                           test eax, eax	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x4000a20	            0x745e	                            je 0x4000a80	       581	crypt.c	FUNCTION_24	IF_1	CALL_1
0x4000a22	    0x488b2d000000	            mov rbp, qword [0x04000a29] 	       585	crypt.c	FUNCTION_24	ELSE_1	CALL_4
0x4000a29	          0x4889ef	                            mov rdi, rbp	       148	string3.h	FUNCTION_52	CALL_3
0x4000a2c	      0xe800000000	                          call 0x4000a31	       148	string3.h	FUNCTION_52	CALL_3
0x4000a31	      0xba5b000000	                           mov edx, 0x5b	       148	string3.h	FUNCTION_52	CALL_3
0x4000a36	      0x6689540500	                mov word [rbp + rax], dx	       148	string3.h	FUNCTION_52	CALL_3
0x4000a3b	    0x488bb3481700	          mov rsi, qword [rbx + 0x1748] 	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x4000a42	    0x488b3d000000	            mov rdi, qword [0x04000a49] 	       148	string3.h	FUNCTION_52	CALL_3
0x4000a49	          0x803e00	                       cmp byte [rsi], 0	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x4000a4c	    0x480f44350000	           cmove rsi, qword [0x04000a54]	       586	crypt.c	FUNCTION_24	ELSE_1	CALL_5
0x4000a54	      0xe800000000	                          call 0x4000a59	       148	string3.h	FUNCTION_52	CALL_3
0x4000a59	    0x488b1d000000	            mov rbx, qword [0x04000a60] 	       587	crypt.c	FUNCTION_24	ELSE_1	CALL_6
0x4000a60	          0x4889df	                            mov rdi, rbx	       148	string3.h	FUNCTION_52	CALL_3
0x4000a63	      0xe800000000	                          call 0x4000a68	       148	string3.h	FUNCTION_52	CALL_3
0x4000a68	      0xb95d000000	                           mov ecx, 0x5d	       148	string3.h	FUNCTION_52	CALL_3
0x4000a6d	        0x66890c03	                mov word [rbx + rax], cx	       148	string3.h	FUNCTION_52	CALL_3
0x4000a71	        0x4883c408	                              add rsp, 8	       589	crypt.c	FUNCTION_24
0x4000a75	              0x5b	                                 pop rbx	       589	crypt.c	FUNCTION_24
0x4000a76	              0x5d	                                 pop rbp	       589	crypt.c	FUNCTION_24
0x4000a77	              0xc3	                                     ret	       589	crypt.c	FUNCTION_24
0x4000a78	     0xf1f84000000	                   nop dword [rax + rax]	       589	crypt.c	FUNCTION_24
0x4000a80	      0xbe00000000	                              mov esi, 0	       582	crypt.c	FUNCTION_24	CALL_3
0x4000a85	            0x31ff	                            xor edi, edi	       582	crypt.c	FUNCTION_24	CALL_3
0x4000a87	      0xba05000000	                              mov edx, 5	       582	crypt.c	FUNCTION_24	CALL_3
0x4000a8c	      0xe800000000	                          call 0x4000a91	       582	crypt.c	FUNCTION_24	CALL_3
0x4000a91	    0x488b3d000000	            mov rdi, qword [0x04000a98] 	       148	string3.h	FUNCTION_52	CALL_3
0x4000a98	        0x4883c408	                              add rsp, 8	       589	crypt.c	FUNCTION_24
0x4000a9c	          0x4889c6	                            mov rsi, rax	       148	string3.h	FUNCTION_52	CALL_3
0x4000a9f	              0x5b	                                 pop rbx	       589	crypt.c	FUNCTION_24
0x4000aa0	              0x5d	                                 pop rbp	       589	crypt.c	FUNCTION_24
0x4000aa1	      0xe900000000	                   jmp section_end..text	       148	string3.h	FUNCTION_52	CALL_3
crypt_decode_alloc	CALL,3:WHILE,0:functions,0:IF,3:FOR,0:DO,0:SWITCH,0:ELSE,0	51
0x40006d0	            0x4156	                                push r14	       408	crypt.c	FUNCTION_15
0x40006d2	            0x4155	                                push r13	       408	crypt.c	FUNCTION_15
0x40006d4	            0x4154	                                push r12	       408	crypt.c	FUNCTION_15
0x40006d6	              0x55	                                push rbp	       408	crypt.c	FUNCTION_15
0x40006d7	              0x53	                                push rbx	       408	crypt.c	FUNCTION_15
0x40006d8	          0x4c6307	                  movsxd r8, dword [rdi]	       411	crypt.c	FUNCTION_15	IF_1
0x40006db	        0x4b8d1c40	                    lea rbx, [r8 + r8*2]	       411	crypt.c	FUNCTION_15	IF_1
0x40006df	        0x48c1e305	                              shl rbx, 5	       411	crypt.c	FUNCTION_15	IF_1
0x40006e3	    0x4881c3000000	                              add rbx, 0	       411	crypt.c	FUNCTION_15	IF_1
0x40006ea	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       411	crypt.c	FUNCTION_15	IF_1
0x40006ee	          0x4885c0	                           test rax, rax	       411	crypt.c	FUNCTION_15	IF_1
0x40006f1	            0x740d	                            je 0x4000700	       411	crypt.c	FUNCTION_15	IF_1
0x40006f3	              0x5b	                                 pop rbx	       424	crypt.c	FUNCTION_15
0x40006f4	              0x5d	                                 pop rbp	       424	crypt.c	FUNCTION_15
0x40006f5	            0x415c	                                 pop r12	       424	crypt.c	FUNCTION_15
0x40006f7	            0x415d	                                 pop r13	       424	crypt.c	FUNCTION_15
0x40006f9	            0x415e	                                 pop r14	       424	crypt.c	FUNCTION_15
0x40006fb	            0xffe0	                                 jmp rax	       413	crypt.c	FUNCTION_15	CALL_1
0x40006fd	           0xf1f00	                         nop dword [rax]	       413	crypt.c	FUNCTION_15	CALL_1
0x4000700	            0x31c0	                            xor eax, eax	       413	crypt.c	FUNCTION_15	CALL_1
0x4000702	          0x4885d2	                           test rdx, rdx	       415	crypt.c	FUNCTION_15	IF_2
0x4000705	            0x7509	                           jne 0x4000710	       415	crypt.c	FUNCTION_15	IF_2
0x4000707	              0x5b	                                 pop rbx	       424	crypt.c	FUNCTION_15
0x4000708	              0x5d	                                 pop rbp	       424	crypt.c	FUNCTION_15
0x4000709	            0x415c	                                 pop r12	       424	crypt.c	FUNCTION_15
0x400070b	            0x415d	                                 pop r13	       424	crypt.c	FUNCTION_15
0x400070d	            0x415e	                                 pop r14	       424	crypt.c	FUNCTION_15
0x400070f	              0xc3	                                     ret	       424	crypt.c	FUNCTION_15
0x4000710	          0x4889fd	                            mov rbp, rdi	       424	crypt.c	FUNCTION_15
0x4000713	            0x89d7	                            mov edi, edx	       419	crypt.c	FUNCTION_15	CALL_2
0x4000715	          0x4989cc	                            mov r12, rcx	       419	crypt.c	FUNCTION_15	CALL_2
0x4000718	          0x4989d5	                            mov r13, rdx	       419	crypt.c	FUNCTION_15	CALL_2
0x400071b	          0x4989f6	                            mov r14, rsi	       419	crypt.c	FUNCTION_15	CALL_2
0x400071e	      0xe800000000	                          call 0x4000723	       419	crypt.c	FUNCTION_15	CALL_2
0x4000723	          0x4885c0	                           test rax, rax	       420	crypt.c	FUNCTION_15	IF_3
0x4000726	        0x49890424	                    mov qword [r12], rax	       419	crypt.c	FUNCTION_15	CALL_2
0x400072a	            0x741b	                            je 0x4000747	       420	crypt.c	FUNCTION_15	IF_3
0x400072c	          0x4889c1	                            mov rcx, rax	       422	crypt.c	FUNCTION_15	CALL_3
0x400072f	          0x4c89ea	                            mov rdx, r13	       422	crypt.c	FUNCTION_15	CALL_3
0x4000732	          0x4c89f6	                            mov rsi, r14	       422	crypt.c	FUNCTION_15	CALL_3
0x4000735	          0x4889ef	                            mov rdi, rbp	       422	crypt.c	FUNCTION_15	CALL_3
0x4000738	          0xff5338	                 call qword [rbx + 0x38]	       422	crypt.c	FUNCTION_15	CALL_3
0x400073b	              0x5b	                                 pop rbx	       424	crypt.c	FUNCTION_15
0x400073c	          0x4c89e8	                            mov rax, r13	       423	crypt.c	FUNCTION_15
0x400073f	              0x5d	                                 pop rbp	       424	crypt.c	FUNCTION_15
0x4000740	            0x415c	                                 pop r12	       424	crypt.c	FUNCTION_15
0x4000742	            0x415d	                                 pop r13	       424	crypt.c	FUNCTION_15
0x4000744	            0x415e	                                 pop r14	       424	crypt.c	FUNCTION_15
0x4000746	              0xc3	                                     ret	       424	crypt.c	FUNCTION_15
0x4000747	    0x48c7c0ffffff	             mov rax, 0xffffffffffffffff	       421	crypt.c	FUNCTION_15	IF_3
0x400074e	            0xebb7	                           jmp 0x4000707	       421	crypt.c	FUNCTION_15	IF_3
