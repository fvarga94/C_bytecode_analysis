strbuf_avail	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	18
0xf5	              0x55	                                push rbp	       140	strbuf.h	FUNCTION_2
0xf6	          0x4889e5	                            mov rbp, rsp	       140	strbuf.h	FUNCTION_2
0xf9	        0x48897df8	                mov qword [rbp - 8], rdi	       140	strbuf.h	FUNCTION_2
0xfd	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_2
0x101	          0x488b00	                    mov rax, qword [rax]	       141	strbuf.h	FUNCTION_2
0x104	          0x4885c0	                           test rax, rax	       141	strbuf.h	FUNCTION_2
0x107	            0x741b	                            je 0x4000164	       141	strbuf.h	FUNCTION_2
0x109	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_2
0x10d	          0x488b10	                    mov rdx, qword [rax]	       141	strbuf.h	FUNCTION_2
0x110	        0x488b45f8	                mov rax, qword [rbp - 8]	       141	strbuf.h	FUNCTION_2
0x114	        0x488b4008	                mov rax, qword [rax + 8]	       141	strbuf.h	FUNCTION_2
0x118	          0x4829c2	                            sub rdx, rax	       141	strbuf.h	FUNCTION_2
0x11b	          0x4889d0	                            mov rax, rdx	       141	strbuf.h	FUNCTION_2
0x11e	        0x4883e801	                              sub rax, 1	       141	strbuf.h	FUNCTION_2
0x122	            0xeb05	                           jmp 0x4000169	       141	strbuf.h	FUNCTION_2
0x124	      0xb800000000	                              mov eax, 0	       141	strbuf.h	FUNCTION_2
0x129	              0x5d	                                 pop rbp	       142	strbuf.h	FUNCTION_2
0x12a	              0xc3	                                     ret	       142	strbuf.h	FUNCTION_2
git_path_check_convert	CALL,4:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,1	36
0x2d9d	              0x55	                                push rbp	      1266	convert.c	FUNCTION_45
0x2d9e	          0x4889e5	                            mov rbp, rsp	      1266	convert.c	FUNCTION_45
0x2da1	        0x4883ec20	                           sub rsp, 0x20	      1266	convert.c	FUNCTION_45
0x2da5	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1266	convert.c	FUNCTION_45
0x2da9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1267	convert.c	FUNCTION_45
0x2dad	        0x488b4008	                mov rax, qword [rax + 8]	      1267	convert.c	FUNCTION_45
0x2db1	        0x488945f8	                mov qword [rbp - 8], rax	      1267	convert.c	FUNCTION_45
0x2db5	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dbd	            0x7411	                            je 0x4002e10	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dbf	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dc7	            0x7407	                            je 0x4002e10	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dc9	      0x48837df800	                  cmp qword [rbp - 8], 0	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dce	            0x7507	                           jne 0x4002e17	      1270	convert.c	FUNCTION_45	IF_1	CALL_3
0x2dd0	      0xb800000000	                              mov eax, 0	      1271	convert.c	FUNCTION_45	IF_1
0x2dd5	            0xeb45	                           jmp 0x4002e5c	      1271	convert.c	FUNCTION_45	IF_1
0x2dd7	    0x488b05000000	            mov rax, qword [0x04002e1e] 	      1272	convert.c	FUNCTION_45	FOR_1
0x2dde	        0x488945f0	             mov qword [rbp - 0x10], rax	      1272	convert.c	FUNCTION_45	FOR_1
0x2de2	            0xeb2c	                           jmp 0x4002e50	      1272	convert.c	FUNCTION_45	FOR_1
0x2de4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2de8	          0x488b10	                    mov rdx, qword [rax]	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2deb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2def	          0x4889d6	                            mov rsi, rdx	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2df2	          0x4889c7	                            mov rdi, rax	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2df5	      0xe800000000	                          call 0x4002e3a	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2dfa	            0x85c0	                           test eax, eax	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2dfc	            0x7506	                           jne 0x4002e44	      1273	convert.c	FUNCTION_45	FOR_1	IF_2	CALL_4
0x2dfe	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1274	convert.c	FUNCTION_45	FOR_1	IF_2
0x2e02	            0xeb18	                           jmp 0x4002e5c	      1274	convert.c	FUNCTION_45	FOR_1	IF_2
0x2e04	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1272	convert.c	FUNCTION_45	FOR_1
0x2e08	        0x488b4008	                mov rax, qword [rax + 8]	      1272	convert.c	FUNCTION_45	FOR_1
0x2e0c	        0x488945f0	             mov qword [rbp - 0x10], rax	      1272	convert.c	FUNCTION_45	FOR_1
0x2e10	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1272	convert.c	FUNCTION_45	FOR_1
0x2e15	            0x75cd	                           jne 0x4002e24	      1272	convert.c	FUNCTION_45	FOR_1
0x2e17	      0xb800000000	                              mov eax, 0	      1275	convert.c	FUNCTION_45
0x2e1c	              0xc9	                                   leave	      1276	convert.c	FUNCTION_45
0x2e1d	              0xc3	                                     ret	      1276	convert.c	FUNCTION_45
null_filter_fn	CALL,1:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,0:DO,0:FOR,0	45
0x37d7	              0x55	                                push rbp	      1526	convert.c	FUNCTION_56
0x37d8	          0x4889e5	                            mov rbp, rsp	      1526	convert.c	FUNCTION_56
0x37db	        0x4883ec40	                           sub rsp, 0x40	      1526	convert.c	FUNCTION_56
0x37df	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1526	convert.c	FUNCTION_56
0x37e3	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1526	convert.c	FUNCTION_56
0x37e7	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1526	convert.c	FUNCTION_56
0x37eb	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1526	convert.c	FUNCTION_56
0x37ef	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1526	convert.c	FUNCTION_56
0x37f3	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1529	convert.c	FUNCTION_56	IF_1
0x37f8	            0x7507	                           jne 0x4003841	      1529	convert.c	FUNCTION_56	IF_1
0x37fa	      0xb800000000	                              mov eax, 0	      1530	convert.c	FUNCTION_56	IF_1
0x37ff	            0xeb70	                           jmp 0x40038b1	      1530	convert.c	FUNCTION_56	IF_1
0x3801	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1531	convert.c	FUNCTION_56
0x3805	          0x488b00	                    mov rax, qword [rax]	      1531	convert.c	FUNCTION_56
0x3808	        0x488945f8	                mov qword [rbp - 8], rax	      1531	convert.c	FUNCTION_56
0x380c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1532	convert.c	FUNCTION_56	IF_2
0x3810	          0x488b00	                    mov rax, qword [rax]	      1532	convert.c	FUNCTION_56	IF_2
0x3813	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1532	convert.c	FUNCTION_56	IF_2
0x3817	            0x730b	                           jae 0x4003864	      1532	convert.c	FUNCTION_56	IF_2
0x3819	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1533	convert.c	FUNCTION_56	IF_2
0x381d	          0x488b00	                    mov rax, qword [rax]	      1533	convert.c	FUNCTION_56	IF_2
0x3820	        0x488945f8	                mov qword [rbp - 8], rax	      1533	convert.c	FUNCTION_56	IF_2
0x3824	      0x48837df800	                  cmp qword [rbp - 8], 0	      1534	convert.c	FUNCTION_56	IF_3
0x3829	            0x7441	                            je 0x40038ac	      1534	convert.c	FUNCTION_56	IF_3
0x382b	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x382f	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x3833	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x3837	          0x4889ce	                            mov rsi, rcx	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x383a	          0x4889c7	                            mov rdi, rax	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x383d	      0xe800000000	                          call 0x4003882	      1535	convert.c	FUNCTION_56	IF_3	CALL_1
0x3842	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1536	convert.c	FUNCTION_56	IF_3
0x3846	          0x488b00	                    mov rax, qword [rax]	      1536	convert.c	FUNCTION_56	IF_3
0x3849	        0x482b45f8	                sub rax, qword [rbp - 8]	      1536	convert.c	FUNCTION_56	IF_3
0x384d	          0x4889c2	                            mov rdx, rax	      1536	convert.c	FUNCTION_56	IF_3
0x3850	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1536	convert.c	FUNCTION_56	IF_3
0x3854	          0x488910	                    mov qword [rax], rdx	      1536	convert.c	FUNCTION_56	IF_3
0x3857	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1537	convert.c	FUNCTION_56	IF_3
0x385b	          0x488b00	                    mov rax, qword [rax]	      1537	convert.c	FUNCTION_56	IF_3
0x385e	        0x482b45f8	                sub rax, qword [rbp - 8]	      1537	convert.c	FUNCTION_56	IF_3
0x3862	          0x4889c2	                            mov rdx, rax	      1537	convert.c	FUNCTION_56	IF_3
0x3865	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1537	convert.c	FUNCTION_56	IF_3
0x3869	          0x488910	                    mov qword [rax], rdx	      1537	convert.c	FUNCTION_56	IF_3
0x386c	      0xb800000000	                              mov eax, 0	      1539	convert.c	FUNCTION_56
0x3871	              0xc9	                                   leave	      1540	convert.c	FUNCTION_56
0x3872	              0xc3	                                     ret	      1540	convert.c	FUNCTION_56
git_path_check_eol	CALL,3:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,2:DO,0:FOR,0	28
0x2d3f	              0x55	                                push rbp	      1253	convert.c	FUNCTION_44
0x2d40	          0x4889e5	                            mov rbp, rsp	      1253	convert.c	FUNCTION_44
0x2d43	        0x4883ec20	                           sub rsp, 0x20	      1253	convert.c	FUNCTION_44
0x2d47	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1253	convert.c	FUNCTION_44
0x2d4b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1254	convert.c	FUNCTION_44
0x2d4f	        0x488b4008	                mov rax, qword [rax + 8]	      1254	convert.c	FUNCTION_44
0x2d53	        0x488945f8	                mov qword [rbp - 8], rax	      1254	convert.c	FUNCTION_44
0x2d57	      0x48837df800	                  cmp qword [rbp - 8], 0	      1256	convert.c	FUNCTION_44	IF_1	CALL_1
0x2d5c	            0x7438	                            je 0x4002dd6	      1256	convert.c	FUNCTION_44	IF_1	CALL_1
0x2d5e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d62	      0xbe00000000	                              mov esi, 0	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d67	          0x4889c7	                            mov rdi, rax	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d6a	      0xe800000000	                          call 0x4002daf	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d6f	            0x85c0	                           test eax, eax	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d71	            0x7507	                           jne 0x4002dba	      1258	convert.c	FUNCTION_44	ELSE_1	IF_2	CALL_2
0x2d73	      0xb802000000	                              mov eax, 2	      1259	convert.c	FUNCTION_44	ELSE_1	IF_2
0x2d78	            0xeb21	                           jmp 0x4002ddb	      1259	convert.c	FUNCTION_44	ELSE_1	IF_2
0x2d7a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d7e	      0xbe00000000	                              mov esi, 0	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d83	          0x4889c7	                            mov rdi, rax	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d86	      0xe800000000	                          call 0x4002dcb	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d8b	            0x85c0	                           test eax, eax	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d8d	            0x7507	                           jne 0x4002dd6	      1260	convert.c	FUNCTION_44	ELSE_2	IF_3	CALL_3
0x2d8f	      0xb801000000	                              mov eax, 1	      1261	convert.c	FUNCTION_44	ELSE_2	IF_3
0x2d94	            0xeb05	                           jmp 0x4002ddb	      1261	convert.c	FUNCTION_44	ELSE_2	IF_3
0x2d96	      0xb800000000	                              mov eax, 0	      1262	convert.c	FUNCTION_44
0x2d9b	              0xc9	                                   leave	      1263	convert.c	FUNCTION_44
0x2d9c	              0xc3	                                     ret	      1263	convert.c	FUNCTION_44
ident_drain	CALL,2:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,0:DO,0:FOR,0	54
0x3f3b	              0x55	                                push rbp	      1801	convert.c	FUNCTION_66
0x3f3c	          0x4889e5	                            mov rbp, rsp	      1801	convert.c	FUNCTION_66
0x3f3f	        0x4883ec30	                           sub rsp, 0x30	      1801	convert.c	FUNCTION_66
0x3f43	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1801	convert.c	FUNCTION_66
0x3f47	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1801	convert.c	FUNCTION_66
0x3f4b	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1801	convert.c	FUNCTION_66
0x3f4f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1802	convert.c	FUNCTION_66
0x3f53	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1802	convert.c	FUNCTION_66
0x3f57	        0x488945f8	                mov qword [rbp - 8], rax	      1802	convert.c	FUNCTION_66
0x3f5b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1804	convert.c	FUNCTION_66	IF_1
0x3f5f	          0x488b00	                    mov rax, qword [rax]	      1804	convert.c	FUNCTION_66	IF_1
0x3f62	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1804	convert.c	FUNCTION_66	IF_1
0x3f66	            0x730b	                           jae 0x4003fb3	      1804	convert.c	FUNCTION_66	IF_1
0x3f68	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1805	convert.c	FUNCTION_66	IF_1
0x3f6c	          0x488b00	                    mov rax, qword [rax]	      1805	convert.c	FUNCTION_66	IF_1
0x3f6f	        0x488945f8	                mov qword [rbp - 8], rax	      1805	convert.c	FUNCTION_66	IF_1
0x3f73	      0x48837df800	                  cmp qword [rbp - 8], 0	      1806	convert.c	FUNCTION_66	IF_2
0x3f78	            0x7464	                            je 0x400401e	      1806	convert.c	FUNCTION_66	IF_2
0x3f7a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f7e	        0x488b4818	            mov rcx, qword [rax + 0x18] 	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f82	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f86	          0x488b00	                    mov rax, qword [rax]	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f89	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f8d	          0x4889ce	                            mov rsi, rcx	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f90	          0x4889c7	                            mov rdi, rax	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f93	      0xe800000000	                          call 0x4003fd8	      1807	convert.c	FUNCTION_66	IF_2	CALL_1
0x3f98	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3f9c	        0x488d4808	                      lea rcx, [rax + 8]	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3fa0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3fa4	          0x4889c2	                            mov rdx, rax	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3fa7	      0xbe00000000	                              mov esi, 0	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3fac	          0x4889cf	                            mov rdi, rcx	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3faf	      0xe800000000	                          call 0x4003ff4	      1808	convert.c	FUNCTION_66	IF_2	CALL_2
0x3fb4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1809	convert.c	FUNCTION_66	IF_2
0x3fb8	          0x488b10	                    mov rdx, qword [rax]	      1809	convert.c	FUNCTION_66	IF_2
0x3fbb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1809	convert.c	FUNCTION_66	IF_2
0x3fbf	          0x4801c2	                            add rdx, rax	      1809	convert.c	FUNCTION_66	IF_2
0x3fc2	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1809	convert.c	FUNCTION_66	IF_2
0x3fc6	          0x488910	                    mov qword [rax], rdx	      1809	convert.c	FUNCTION_66	IF_2
0x3fc9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1810	convert.c	FUNCTION_66	IF_2
0x3fcd	          0x488b00	                    mov rax, qword [rax]	      1810	convert.c	FUNCTION_66	IF_2
0x3fd0	        0x482b45f8	                sub rax, qword [rbp - 8]	      1810	convert.c	FUNCTION_66	IF_2
0x3fd4	          0x4889c2	                            mov rdx, rax	      1810	convert.c	FUNCTION_66	IF_2
0x3fd7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1810	convert.c	FUNCTION_66	IF_2
0x3fdb	          0x488910	                    mov qword [rax], rdx	      1810	convert.c	FUNCTION_66	IF_2
0x3fde	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1812	convert.c	FUNCTION_66	IF_3
0x3fe2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1812	convert.c	FUNCTION_66	IF_3
0x3fe6	          0x4885c0	                           test rax, rax	      1812	convert.c	FUNCTION_66	IF_3
0x3fe9	            0x750b	                           jne 0x4004036	      1812	convert.c	FUNCTION_66	IF_3
0x3feb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1813	convert.c	FUNCTION_66	IF_3
0x3fef	    0xc74020000000	               mov dword [rax + 0x20], 0	      1813	convert.c	FUNCTION_66	IF_3
0x3ff6	              0x90	                                     nop	      1814	convert.c	FUNCTION_66
0x3ff7	              0xc9	                                   leave	      1814	convert.c	FUNCTION_66
0x3ff8	              0xc3	                                     ret	      1814	convert.c	FUNCTION_66
ident_to_git	CALL,11:WHILE,0:functions,0:IF,7:SWITCH,0:ELSE,0:DO,0:FOR,1	158
0x26e0	              0x55	                                push rbp	      1092	convert.c	FUNCTION_40
0x26e1	          0x4889e5	                            mov rbp, rsp	      1092	convert.c	FUNCTION_40
0x26e4	        0x4883ec40	                           sub rsp, 0x40	      1092	convert.c	FUNCTION_40
0x26e8	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1092	convert.c	FUNCTION_40
0x26ec	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1092	convert.c	FUNCTION_40
0x26f0	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1092	convert.c	FUNCTION_40
0x26f4	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1092	convert.c	FUNCTION_40
0x26f8	        0x448945cc	             mov dword [rbp - 0x34], r8d	      1092	convert.c	FUNCTION_40
0x26fc	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2700	            0x741e	                            je 0x4002760	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2702	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2707	            0x7421	                            je 0x400276a	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2709	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x270d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2711	          0x4889d6	                            mov rsi, rdx	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2714	          0x4889c7	                            mov rdi, rax	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2717	      0xe8f3feffff	                    call sym.count_ident	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x271c	            0x85c0	                           test eax, eax	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x271e	            0x750a	                           jne 0x400276a	      1095	convert.c	FUNCTION_40	IF_1	CALL_1
0x2720	      0xb800000000	                              mov eax, 0	      1096	convert.c	FUNCTION_40	IF_1
0x2725	      0xe901020000	                           jmp 0x400296b	      1096	convert.c	FUNCTION_40	IF_1
0x272a	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1098	convert.c	FUNCTION_40	IF_2
0x272f	            0x750a	                           jne 0x400277b	      1098	convert.c	FUNCTION_40	IF_2
0x2731	      0xb801000000	                              mov eax, 1	      1099	convert.c	FUNCTION_40	IF_2
0x2736	      0xe9f0010000	                           jmp 0x400296b	      1099	convert.c	FUNCTION_40	IF_2
0x273b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x273f	          0x4889c7	                            mov rdi, rax	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x2742	      0xe8aed9ffff	                   call sym.strbuf_avail	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x2747	          0x4889c2	                            mov rdx, rax	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x274a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x274e	        0x488b4008	                mov rax, qword [rax + 8]	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x2752	          0x4801d0	                            add rax, rdx	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x2755	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x2759	            0x731e	                           jae 0x40027b9	      1102	convert.c	FUNCTION_40	IF_3	CALL_2
0x275b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1103	convert.c	FUNCTION_40	CALL_3
0x275f	        0x488b4008	                mov rax, qword [rax + 8]	      1103	convert.c	FUNCTION_40	CALL_3
0x2763	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1103	convert.c	FUNCTION_40	CALL_3
0x2767	          0x4829c2	                            sub rdx, rax	      1103	convert.c	FUNCTION_40	CALL_3
0x276a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1103	convert.c	FUNCTION_40	CALL_3
0x276e	          0x4889d6	                            mov rsi, rdx	      1103	convert.c	FUNCTION_40	CALL_3
0x2771	          0x4889c7	                            mov rdi, rax	      1103	convert.c	FUNCTION_40	CALL_3
0x2774	      0xe800000000	                          call 0x40027b9	      1103	convert.c	FUNCTION_40	CALL_3
0x2779	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1104	convert.c	FUNCTION_40
0x277d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1104	convert.c	FUNCTION_40
0x2781	        0x488945f0	             mov qword [rbp - 0x10], rax	      1104	convert.c	FUNCTION_40
0x2785	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x2789	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x278d	      0xbe24000000	                           mov esi, 0x24	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x2792	          0x4889c7	                            mov rdi, rax	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x2795	      0xe800000000	                          call 0x40027da	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x279a	        0x488945f8	                mov qword [rbp - 8], rax	      1106	convert.c	FUNCTION_40	FOR_1	CALL_4
0x279e	      0x48837df800	                  cmp qword [rbp - 8], 0	      1107	convert.c	FUNCTION_40	FOR_1	IF_4
0x27a3	     0xf8434010000	                            je 0x400291d	      1107	convert.c	FUNCTION_40	FOR_1	IF_4
0x27a9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27ad	        0x4883c001	                              add rax, 1	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27b1	          0x4889c2	                            mov rdx, rax	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27b4	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27b8	          0x4829c2	                            sub rdx, rax	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27bb	          0x4889d0	                            mov rax, rdx	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27be	          0x4889c2	                            mov rdx, rax	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27c1	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27c5	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27c9	          0x4889ce	                            mov rsi, rcx	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27cc	          0x4889c7	                            mov rdi, rax	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27cf	      0xe800000000	                          call 0x4002814	      1109	convert.c	FUNCTION_40	FOR_1	CALL_5
0x27d4	        0x488b45f8	                mov rax, qword [rbp - 8]	      1110	convert.c	FUNCTION_40	FOR_1
0x27d8	        0x4883c001	                              add rax, 1	      1110	convert.c	FUNCTION_40	FOR_1
0x27dc	          0x4889c2	                            mov rdx, rax	      1110	convert.c	FUNCTION_40	FOR_1
0x27df	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1110	convert.c	FUNCTION_40	FOR_1
0x27e3	          0x4829c2	                            sub rdx, rax	      1110	convert.c	FUNCTION_40	FOR_1
0x27e6	          0x4889d0	                            mov rax, rdx	      1110	convert.c	FUNCTION_40	FOR_1
0x27e9	        0x480145f0	            add qword [rbp - 0x10], rax 	      1110	convert.c	FUNCTION_40	FOR_1
0x27ed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1111	convert.c	FUNCTION_40	FOR_1
0x27f1	        0x4883c001	                              add rax, 1	      1111	convert.c	FUNCTION_40	FOR_1
0x27f5	          0x4889c2	                            mov rdx, rax	      1111	convert.c	FUNCTION_40	FOR_1
0x27f8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1111	convert.c	FUNCTION_40	FOR_1
0x27fc	          0x4829c2	                            sub rdx, rax	      1111	convert.c	FUNCTION_40	FOR_1
0x27ff	          0x4889d0	                            mov rax, rdx	      1111	convert.c	FUNCTION_40	FOR_1
0x2802	        0x482945d8	             sub qword [rbp - 0x28], rax	      1111	convert.c	FUNCTION_40	FOR_1
0x2806	        0x488b45f8	                mov rax, qword [rbp - 8]	      1112	convert.c	FUNCTION_40	FOR_1
0x280a	        0x4883c001	                              add rax, 1	      1112	convert.c	FUNCTION_40	FOR_1
0x280e	        0x488945e0	             mov qword [rbp - 0x20], rax	      1112	convert.c	FUNCTION_40	FOR_1
0x2812	      0x48837dd803	               cmp qword [rbp - 0x28], 3	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x2817	     0xf8668ffffff	                           jbe 0x40027c5	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x281d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x2821	      0xba03000000	                              mov edx, 3	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x2826	      0xbe00000000	                              mov esi, 0	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x282b	          0x4889c7	                            mov rdi, rax	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x282e	      0xe800000000	                          call 0x4002873	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x2833	            0x85c0	                           test eax, eax	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x2835	     0xf854affffff	                           jne 0x40027c5	      1114	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_6
0x283b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x283f	        0x488d50fd	                      lea rdx, [rax - 3]	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x2843	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x2847	        0x4883c003	                              add rax, 3	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x284b	      0xbe24000000	                           mov esi, 0x24	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x2850	          0x4889c7	                            mov rdi, rax	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x2853	      0xe800000000	                          call 0x4002898	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x2858	        0x488945f8	                mov qword [rbp - 8], rax	      1115	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_7
0x285c	      0x48837df800	                  cmp qword [rbp - 8], 0	      1116	convert.c	FUNCTION_40	FOR_1	IF_5	IF_6
0x2861	            0x747d	                            je 0x4002920	      1116	convert.c	FUNCTION_40	FOR_1	IF_5	IF_6
0x2863	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2867	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x286b	          0x4829c2	                            sub rdx, rax	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x286e	          0x4889d0	                            mov rax, rdx	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2871	        0x4883e803	                              sub rax, 3	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2875	          0x4889c2	                            mov rdx, rax	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2878	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x287c	        0x4883c003	                              add rax, 3	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2880	      0xbe0a000000	                            mov esi, 0xa	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2885	          0x4889c7	                            mov rdi, rax	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2888	      0xe800000000	                          call 0x40028cd	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x288d	          0x4885c0	                           test rax, rax	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2890	            0x7545	                           jne 0x4002917	      1118	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7	CALL_8
0x2892	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1123	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_9
0x2896	      0xba03000000	                              mov edx, 3	      1123	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_9
0x289b	      0xbe00000000	                              mov esi, 0	      1123	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_9
0x28a0	          0x4889c7	                            mov rdi, rax	      1123	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_9
0x28a3	      0xe800000000	                          call 0x40028e8	      1123	convert.c	FUNCTION_40	FOR_1	IF_5	CALL_9
0x28a8	      0x488345f003	               add qword [rbp - 0x10], 3	      1124	convert.c	FUNCTION_40	FOR_1	IF_5
0x28ad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28b1	        0x4883c001	                              add rax, 1	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28b5	          0x4889c2	                            mov rdx, rax	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28b8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28bc	          0x4829c2	                            sub rdx, rax	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28bf	          0x4889d0	                            mov rax, rdx	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28c2	        0x482945d8	             sub qword [rbp - 0x28], rax	      1125	convert.c	FUNCTION_40	FOR_1	IF_5
0x28c6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1126	convert.c	FUNCTION_40	FOR_1	IF_5
0x28ca	        0x4883c001	                              add rax, 1	      1126	convert.c	FUNCTION_40	FOR_1	IF_5
0x28ce	        0x488945e0	             mov qword [rbp - 0x20], rax	      1126	convert.c	FUNCTION_40	FOR_1	IF_5
0x28d2	      0xe9aefeffff	                           jmp 0x40027c5	      1126	convert.c	FUNCTION_40	FOR_1	IF_5
0x28d7	              0x90	                                     nop	      1120	convert.c	FUNCTION_40	FOR_1	IF_5	IF_7
0x28d8	      0xe9a8feffff	                           jmp 0x40027c5	      1128	convert.c	FUNCTION_40	FOR_1
0x28dd	              0x90	                                     nop	      1108	convert.c	FUNCTION_40	FOR_1	IF_4
0x28de	            0xeb01	                           jmp 0x4002921	      1108	convert.c	FUNCTION_40	FOR_1	IF_4
0x28e0	              0x90	                                     nop	      1117	convert.c	FUNCTION_40	FOR_1	IF_5	IF_6
0x28e1	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1129	convert.c	FUNCTION_40	CALL_10
0x28e5	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1129	convert.c	FUNCTION_40	CALL_10
0x28e9	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1129	convert.c	FUNCTION_40	CALL_10
0x28ed	          0x4889ce	                            mov rsi, rcx	      1129	convert.c	FUNCTION_40	CALL_10
0x28f0	          0x4889c7	                            mov rdi, rax	      1129	convert.c	FUNCTION_40	CALL_10
0x28f3	      0xe800000000	                          call 0x4002938	      1129	convert.c	FUNCTION_40	CALL_10
0x28f8	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1130	convert.c	FUNCTION_40	CALL_11
0x28fc	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1130	convert.c	FUNCTION_40	CALL_11
0x2900	          0x4801d0	                            add rax, rdx	      1130	convert.c	FUNCTION_40	CALL_11
0x2903	          0x4889c2	                            mov rdx, rax	      1130	convert.c	FUNCTION_40	CALL_11
0x2906	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	convert.c	FUNCTION_40	CALL_11
0x290a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1130	convert.c	FUNCTION_40	CALL_11
0x290e	          0x4829c2	                            sub rdx, rax	      1130	convert.c	FUNCTION_40	CALL_11
0x2911	          0x4889d0	                            mov rax, rdx	      1130	convert.c	FUNCTION_40	CALL_11
0x2914	          0x4889c2	                            mov rdx, rax	      1130	convert.c	FUNCTION_40	CALL_11
0x2917	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1130	convert.c	FUNCTION_40	CALL_11
0x291b	          0x4889d6	                            mov rsi, rdx	      1130	convert.c	FUNCTION_40	CALL_11
0x291e	          0x4889c7	                            mov rdi, rax	      1130	convert.c	FUNCTION_40	CALL_11
0x2921	      0xe805d8ffff	                  call sym.strbuf_setlen	      1130	convert.c	FUNCTION_40	CALL_11
0x2926	      0xb801000000	                              mov eax, 1	      1131	convert.c	FUNCTION_40
0x292b	              0xc9	                                   leave	      1132	convert.c	FUNCTION_40
0x292c	              0xc3	                                     ret	      1132	convert.c	FUNCTION_40
start_multi_file_filter_fn	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	18
0x1bc3	              0x55	                                push rbp	       762	convert.c	FUNCTION_33
0x1bc4	          0x4889e5	                            mov rbp, rsp	       762	convert.c	FUNCTION_33
0x1bc7	        0x4883ec20	                           sub rsp, 0x20	       762	convert.c	FUNCTION_33
0x1bcb	        0x48897de8	             mov qword [rbp - 0x18], rdi	       762	convert.c	FUNCTION_33
0x1bcf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       770	convert.c	FUNCTION_33
0x1bd3	        0x488945f8	                mov qword [rbp - 8], rax	       770	convert.c	FUNCTION_33
0x1bd7	        0x488b45f8	                mov rax, qword [rbp - 8]	       771	convert.c	FUNCTION_33	CALL_1
0x1bdb	        0x488d5078	                   lea rdx, [rax + 0x78]	       771	convert.c	FUNCTION_33	CALL_1
0x1bdf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       771	convert.c	FUNCTION_33	CALL_1
0x1be3	          0x4989d1	                             mov r9, rdx	       771	convert.c	FUNCTION_33	CALL_1
0x1be6	    0x41b800000000	                              mov r8d, 0	       771	convert.c	FUNCTION_33	CALL_1
0x1bec	      0xb900000000	                              mov ecx, 0	       771	convert.c	FUNCTION_33	CALL_1
0x1bf1	      0xba00000000	                              mov edx, 0	       771	convert.c	FUNCTION_33	CALL_1
0x1bf6	      0xbe00000000	                              mov esi, 0	       771	convert.c	FUNCTION_33	CALL_1
0x1bfb	          0x4889c7	                            mov rdi, rax	       771	convert.c	FUNCTION_33	CALL_1
0x1bfe	      0xe800000000	                          call 0x4001c43	       771	convert.c	FUNCTION_33	CALL_1
0x1c03	              0xc9	                                   leave	       774	convert.c	FUNCTION_33
0x1c04	              0xc3	                                     ret	       774	convert.c	FUNCTION_33
get_stream_filter	CALL,6:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,1:DO,0:FOR,0	76
0x4351	              0x55	                                push rbp	      1930	convert.c	FUNCTION_70
0x4352	          0x4889e5	                            mov rbp, rsp	      1930	convert.c	FUNCTION_70
0x4355	        0x4883ec50	                           sub rsp, 0x50	      1930	convert.c	FUNCTION_70
0x4359	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1930	convert.c	FUNCTION_70
0x435d	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1930	convert.c	FUNCTION_70
0x4361	    0x64488b042528	                mov rax, qword fs:[0x28]	      1930	convert.c	FUNCTION_70
0x436a	        0x488945f8	                mov qword [rbp - 8], rax	      1930	convert.c	FUNCTION_70
0x436e	            0x31c0	                            xor eax, eax	      1930	convert.c	FUNCTION_70
0x4370	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1932	convert.c	FUNCTION_70
0x4378	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1934	convert.c	FUNCTION_70	CALL_1
0x437c	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1934	convert.c	FUNCTION_70	CALL_1
0x4380	          0x4889d6	                            mov rsi, rdx	      1934	convert.c	FUNCTION_70	CALL_1
0x4383	          0x4889c7	                            mov rdi, rax	      1934	convert.c	FUNCTION_70	CALL_1
0x4386	      0xe8b7eaffff	                  call sym.convert_attrs	      1934	convert.c	FUNCTION_70	CALL_1
0x438b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_70	IF_1
0x438f	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_70	IF_1
0x4392	            0x7431	                            je 0x4004405	      1935	convert.c	FUNCTION_70	IF_1
0x4394	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_70	IF_1
0x4398	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1935	convert.c	FUNCTION_70	IF_1
0x439c	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_70	IF_1
0x439f	            0x751a	                           jne 0x40043fb	      1935	convert.c	FUNCTION_70	IF_1
0x43a1	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_70	IF_1
0x43a5	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1935	convert.c	FUNCTION_70	IF_1
0x43a9	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_70	IF_1
0x43ac	            0x750d	                           jne 0x40043fb	      1935	convert.c	FUNCTION_70	IF_1
0x43ae	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1935	convert.c	FUNCTION_70	IF_1
0x43b2	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1935	convert.c	FUNCTION_70	IF_1
0x43b6	          0x4885c0	                           test rax, rax	      1935	convert.c	FUNCTION_70	IF_1
0x43b9	            0x740a	                            je 0x4004405	      1935	convert.c	FUNCTION_70	IF_1
0x43bb	      0xb800000000	                              mov eax, 0	      1936	convert.c	FUNCTION_70	IF_1
0x43c0	      0xe983000000	                           jmp 0x4004488	      1936	convert.c	FUNCTION_70	IF_1
0x43c5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1938	convert.c	FUNCTION_70	IF_2
0x43c9	          0x4885c0	                           test rax, rax	      1938	convert.c	FUNCTION_70	IF_2
0x43cc	            0x7407	                            je 0x4004415	      1938	convert.c	FUNCTION_70	IF_2
0x43ce	      0xb800000000	                              mov eax, 0	      1939	convert.c	FUNCTION_70	IF_2
0x43d3	            0xeb73	                           jmp 0x4004488	      1939	convert.c	FUNCTION_70	IF_2
0x43d5	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1941	convert.c	FUNCTION_70	IF_3
0x43d8	          0x83f805	                              cmp eax, 5	      1941	convert.c	FUNCTION_70	IF_3
0x43db	            0x7408	                            je 0x4004425	      1941	convert.c	FUNCTION_70	IF_3
0x43dd	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1941	convert.c	FUNCTION_70	IF_3
0x43e0	          0x83f807	                              cmp eax, 7	      1941	convert.c	FUNCTION_70	IF_3
0x43e3	            0x7507	                           jne 0x400442c	      1941	convert.c	FUNCTION_70	IF_3
0x43e5	      0xb800000000	                              mov eax, 0	      1942	convert.c	FUNCTION_70	IF_3
0x43ea	            0xeb5c	                           jmp 0x4004488	      1942	convert.c	FUNCTION_70	IF_3
0x43ec	          0x8b45e0	             mov eax, dword [rbp - 0x20]	      1944	convert.c	FUNCTION_70	IF_4
0x43ef	            0x85c0	                           test eax, eax	      1944	convert.c	FUNCTION_70	IF_4
0x43f1	            0x7410	                            je 0x4004443	      1944	convert.c	FUNCTION_70	IF_4
0x43f3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1945	convert.c	FUNCTION_70	CALL_2
0x43f7	          0x4889c7	                            mov rdi, rax	      1945	convert.c	FUNCTION_70	CALL_2
0x43fa	      0xe8d6feffff	                   call sym.ident_filter	      1945	convert.c	FUNCTION_70	CALL_2
0x43ff	        0x488945c8	             mov qword [rbp - 0x38], rax	      1945	convert.c	FUNCTION_70	CALL_2
0x4403	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1947	convert.c	FUNCTION_70	IF_5	CALL_3
0x4406	            0x89c7	                            mov edi, eax	      1947	convert.c	FUNCTION_70	IF_5	CALL_3
0x4408	      0xe8d3c2ffff	                     call sym.output_eol	      1947	convert.c	FUNCTION_70	IF_5	CALL_3
0x440d	          0x83f801	                              cmp eax, 1	      1947	convert.c	FUNCTION_70	IF_5	CALL_3
0x4410	            0x751d	                           jne 0x400446f	      1947	convert.c	FUNCTION_70	IF_5	CALL_3
0x4412	      0xe8b0f6ffff	              call sym.lf_to_crlf_filter	      1948	convert.c	FUNCTION_70	CALL_5
0x4417	          0x4889c2	                            mov rdx, rax	      1948	convert.c	FUNCTION_70	CALL_5
0x441a	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1948	convert.c	FUNCTION_70	CALL_5
0x441e	          0x4889d6	                            mov rsi, rdx	      1948	convert.c	FUNCTION_70	CALL_5
0x4421	          0x4889c7	                            mov rdi, rax	      1948	convert.c	FUNCTION_70	CALL_5
0x4424	      0xe8d8f9ffff	                 call sym.cascade_filter	      1948	convert.c	FUNCTION_70	CALL_5
0x4429	        0x488945c8	             mov qword [rbp - 0x38], rax	      1948	convert.c	FUNCTION_70	CALL_5
0x442d	            0xeb15	                           jmp 0x4004484	      1948	convert.c	FUNCTION_70	CALL_5
0x442f	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1950	convert.c	FUNCTION_70	CALL_6
0x4433	      0xbe00000000	                              mov esi, 0	      1950	convert.c	FUNCTION_70	CALL_6
0x4438	          0x4889c7	                            mov rdi, rax	      1950	convert.c	FUNCTION_70	CALL_6
0x443b	      0xe8c1f9ffff	                 call sym.cascade_filter	      1950	convert.c	FUNCTION_70	CALL_6
0x4440	        0x488945c8	             mov qword [rbp - 0x38], rax	      1950	convert.c	FUNCTION_70	CALL_6
0x4444	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1952	convert.c	FUNCTION_70
0x4448	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1953	convert.c	FUNCTION_70
0x444c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1953	convert.c	FUNCTION_70
0x4455	            0x7405	                            je 0x400449c	      1953	convert.c	FUNCTION_70
0x4457	      0xe800000000	                          call 0x400449c	      1953	convert.c	FUNCTION_70
0x445c	              0xc9	                                   leave	      1953	convert.c	FUNCTION_70
0x445d	              0xc3	                                     ret	      1953	convert.c	FUNCTION_70
const_error	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x0	              0x55	                                push rbp	       447	git-compat-util.h	FUNCTION_78
0x1	          0x4889e5	                            mov rbp, rsp	       447	git-compat-util.h	FUNCTION_78
0x4	      0xb8ffffffff	                     mov eax, 0xffffffff	       448	git-compat-util.h	FUNCTION_78
0x9	              0x5d	                                 pop rbp	       449	git-compat-util.h	FUNCTION_78
0xa	              0xc3	                                     ret	       449	git-compat-util.h	FUNCTION_78
async_query_available_blobs	CALL,14:WHILE,1:functions,0:IF,6:SWITCH,0:ELSE,1:DO,0:FOR,0	119
0x2113	              0x55	                                push rbp	       916	convert.c	FUNCTION_36
0x2114	          0x4889e5	                            mov rbp, rsp	       916	convert.c	FUNCTION_36
0x2117	        0x4883ec60	                           sub rsp, 0x60	       916	convert.c	FUNCTION_36
0x211b	        0x48897da8	             mov qword [rbp - 0x58], rdi	       916	convert.c	FUNCTION_36
0x211f	        0x488975a0	             mov qword [rbp - 0x60], rsi	       916	convert.c	FUNCTION_36
0x2123	    0x64488b042528	                mov rax, qword fs:[0x28]	       916	convert.c	FUNCTION_36
0x212c	        0x488945f8	                mov qword [rbp - 8], rax	       916	convert.c	FUNCTION_36
0x2130	            0x31c0	                            xor eax, eax	       916	convert.c	FUNCTION_36
0x2132	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       921	convert.c	FUNCTION_36
0x213a	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       921	convert.c	FUNCTION_36
0x2142	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       921	convert.c	FUNCTION_36
0x214a	    0x8b0500000000	            mov eax, dword [0x04002190] 	       923	convert.c	FUNCTION_36	CALL_1
0x2150	            0x85c0	                           test eax, eax	       923	convert.c	FUNCTION_36	CALL_1
0x2152	            0x7519	                           jne 0x40021ad	       923	convert.c	FUNCTION_36	CALL_1
0x2154	      0xb900000000	                              mov ecx, 0	       923	convert.c	FUNCTION_36	CALL_1
0x2159	      0xba9b030000	                          mov edx, 0x39b	       923	convert.c	FUNCTION_36	CALL_1
0x215e	      0xbe00000000	                              mov esi, 0	       923	convert.c	FUNCTION_36	CALL_1
0x2163	      0xbf00000000	                              mov edi, 0	       923	convert.c	FUNCTION_36	CALL_1
0x2168	      0xe800000000	                          call 0x40021ad	       923	convert.c	FUNCTION_36	CALL_1
0x216d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       924	convert.c	FUNCTION_36	CALL_2
0x2171	          0x4889c6	                            mov rsi, rax	       924	convert.c	FUNCTION_36	CALL_2
0x2174	      0xbf00000000	                              mov edi, 0	       924	convert.c	FUNCTION_36	CALL_2
0x2179	      0xe800000000	                          call 0x40021be	       924	convert.c	FUNCTION_36	CALL_2
0x217e	        0x488945c8	             mov qword [rbp - 0x38], rax	       924	convert.c	FUNCTION_36	CALL_2
0x2182	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       925	convert.c	FUNCTION_36	IF_1
0x2187	            0x7525	                           jne 0x40021ee	       925	convert.c	FUNCTION_36	IF_1
0x2189	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x218d	          0x4889c6	                            mov rsi, rax	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x2190	      0xbf00000000	                              mov edi, 0	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x2195	      0xb800000000	                              mov eax, 0	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x219a	      0xe800000000	                          call 0x40021df	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x219f	      0xe85cdeffff	                    call sym.const_error	       926	convert.c	FUNCTION_36	IF_1	CALL_3
0x21a4	      0xb800000000	                              mov eax, 0	       928	convert.c	FUNCTION_36	IF_1
0x21a9	      0xe91f010000	                           jmp 0x400230d	       928	convert.c	FUNCTION_36	IF_1
0x21ae	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       930	convert.c	FUNCTION_36
0x21b2	        0x4883c018	                           add rax, 0x18	       930	convert.c	FUNCTION_36
0x21b6	        0x488945d0	             mov qword [rbp - 0x30], rax	       930	convert.c	FUNCTION_36
0x21ba	      0xbe01000000	                              mov esi, 1	       931	convert.c	FUNCTION_36	CALL_4
0x21bf	      0xbf0d000000	                            mov edi, 0xd	       931	convert.c	FUNCTION_36	CALL_4
0x21c4	      0xe800000000	                          call 0x4002209	       931	convert.c	FUNCTION_36	CALL_4
0x21c9	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       933	convert.c	FUNCTION_36	CALL_5
0x21cd	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       933	convert.c	FUNCTION_36	CALL_5
0x21d0	      0xbe00000000	                              mov esi, 0	       933	convert.c	FUNCTION_36	CALL_5
0x21d5	            0x89c7	                            mov edi, eax	       933	convert.c	FUNCTION_36	CALL_5
0x21d7	      0xb800000000	                              mov eax, 0	       933	convert.c	FUNCTION_36	CALL_5
0x21dc	      0xe800000000	                          call 0x4002221	       933	convert.c	FUNCTION_36	CALL_5
0x21e1	          0x8945bc	             mov dword [rbp - 0x44], eax	       933	convert.c	FUNCTION_36	CALL_5
0x21e4	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       935	convert.c	FUNCTION_36	IF_2
0x21e8	     0xf85a6000000	                           jne 0x40022d4	       935	convert.c	FUNCTION_36	IF_2
0x21ee	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       938	convert.c	FUNCTION_36	CALL_6
0x21f2	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       938	convert.c	FUNCTION_36	CALL_6
0x21f5	            0x89c7	                            mov edi, eax	       938	convert.c	FUNCTION_36	CALL_6
0x21f7	      0xe800000000	                          call 0x400223c	       938	convert.c	FUNCTION_36	CALL_6
0x21fc	          0x8945bc	             mov dword [rbp - 0x44], eax	       938	convert.c	FUNCTION_36	CALL_6
0x21ff	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       939	convert.c	FUNCTION_36	IF_3
0x2203	     0xf858e000000	                           jne 0x40022d7	       939	convert.c	FUNCTION_36	IF_3
0x2209	            0xeb37	                           jmp 0x4002282	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x220b	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x220f	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x2213	      0xbe00000000	                              mov esi, 0	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x2218	          0x4889c7	                            mov rdi, rax	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x221b	      0xe8ebddffff	                    call sym.skip_prefix	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x2220	            0x85c0	                           test eax, eax	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x2222	            0x741e	                            je 0x4002282	       944	convert.c	FUNCTION_36	WHILE_1	IF_4	CALL_8
0x2224	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x2228	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x222b	      0xe800000000	                          call 0x4002270	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x2230	          0x4889c2	                            mov rdx, rax	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x2233	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x2237	          0x4889d6	                            mov rsi, rdx	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x223a	          0x4889c7	                            mov rdi, rax	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x223d	      0xe800000000	                          call 0x4002282	       945	convert.c	FUNCTION_36	WHILE_1	CALL_10
0x2242	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2246	          0x8b4030	            mov eax, dword [rax + 0x30] 	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2249	      0xbe00000000	                              mov esi, 0	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x224e	            0x89c7	                            mov edi, eax	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2250	      0xe800000000	                          call 0x4002295	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2255	        0x488945d8	             mov qword [rbp - 0x28], rax	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2259	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x225e	            0x75ab	                           jne 0x400224b	       942	convert.c	FUNCTION_36	WHILE_1	CALL_7
0x2260	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       950	convert.c	FUNCTION_36	CALL_11
0x2264	          0x8b4030	            mov eax, dword [rax + 0x30] 	       950	convert.c	FUNCTION_36	CALL_11
0x2267	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       950	convert.c	FUNCTION_36	CALL_11
0x226b	          0x4889d6	                            mov rsi, rdx	       950	convert.c	FUNCTION_36	CALL_11
0x226e	            0x89c7	                            mov edi, eax	       950	convert.c	FUNCTION_36	CALL_11
0x2270	      0xe800000000	                          call 0x40022b5	       950	convert.c	FUNCTION_36	CALL_11
0x2275	          0x8945bc	             mov dword [rbp - 0x44], eax	       950	convert.c	FUNCTION_36	CALL_11
0x2278	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       951	convert.c	FUNCTION_36	IF_5
0x227c	            0x751c	                           jne 0x40022da	       951	convert.c	FUNCTION_36	IF_5
0x227e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       954	convert.c	FUNCTION_36	CALL_12
0x2282	      0xbe00000000	                              mov esi, 0	       954	convert.c	FUNCTION_36	CALL_12
0x2287	          0x4889c7	                            mov rdi, rax	       954	convert.c	FUNCTION_36	CALL_12
0x228a	      0xe800000000	                          call 0x40022cf	       954	convert.c	FUNCTION_36	CALL_12
0x228f	          0x8945bc	             mov dword [rbp - 0x44], eax	       954	convert.c	FUNCTION_36	CALL_12
0x2292	            0xeb07	                           jmp 0x40022db	       954	convert.c	FUNCTION_36	CALL_12
0x2294	              0x90	                                     nop	       936	convert.c	FUNCTION_36	IF_2
0x2295	            0xeb04	                           jmp 0x40022db	       936	convert.c	FUNCTION_36	IF_2
0x2297	              0x90	                                     nop	       940	convert.c	FUNCTION_36	IF_3
0x2298	            0xeb01	                           jmp 0x40022db	       940	convert.c	FUNCTION_36	IF_3
0x229a	              0x90	                                     nop	       952	convert.c	FUNCTION_36	IF_5
0x229b	      0xbf0d000000	                            mov edi, 0xd	       957	convert.c	FUNCTION_36	CALL_13
0x22a0	      0xe800000000	                          call 0x40022e5	       957	convert.c	FUNCTION_36	CALL_13
0x22a5	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       959	convert.c	FUNCTION_36	IF_6
0x22a9	            0x7418	                            je 0x4002303	       959	convert.c	FUNCTION_36	IF_6
0x22ab	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       960	convert.c	FUNCTION_36	CALL_14
0x22af	        0x488d45e0	                   lea rax, [rbp - 0x20]	       960	convert.c	FUNCTION_36	CALL_14
0x22b3	      0xba00000000	                              mov edx, 0	       960	convert.c	FUNCTION_36	CALL_14
0x22b8	          0x4889ce	                            mov rsi, rcx	       960	convert.c	FUNCTION_36	CALL_14
0x22bb	          0x4889c7	                            mov rdi, rax	       960	convert.c	FUNCTION_36	CALL_14
0x22be	      0xe842f9ffff	            call sym.handle_filter_error	       960	convert.c	FUNCTION_36	CALL_14
0x22c3	        0x837dbc00	               cmp dword [rbp - 0x44], 0	       961	convert.c	FUNCTION_36
0x22c7	           0xf94c0	                                 sete al	       961	convert.c	FUNCTION_36
0x22ca	           0xfb6c0	                           movzx eax, al	       961	convert.c	FUNCTION_36
0x22cd	        0x488b4df8	                mov rcx, qword [rbp - 8]	       962	convert.c	FUNCTION_36
0x22d1	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       962	convert.c	FUNCTION_36
0x22da	            0x7405	                            je 0x4002321	       962	convert.c	FUNCTION_36
0x22dc	      0xe800000000	                          call 0x4002321	       962	convert.c	FUNCTION_36
0x22e1	              0xc9	                                   leave	       962	convert.c	FUNCTION_36
0x22e2	              0xc3	                                     ret	       962	convert.c	FUNCTION_36
git_path_check_encoding	CALL,7:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,0:DO,0:FOR,0	36
0x2c3c	              0x55	                                push rbp	      1218	convert.c	FUNCTION_42
0x2c3d	          0x4889e5	                            mov rbp, rsp	      1218	convert.c	FUNCTION_42
0x2c40	        0x4883ec20	                           sub rsp, 0x20	      1218	convert.c	FUNCTION_42
0x2c44	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1218	convert.c	FUNCTION_42
0x2c48	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1219	convert.c	FUNCTION_42
0x2c4c	        0x488b4008	                mov rax, qword [rax + 8]	      1219	convert.c	FUNCTION_42
0x2c50	        0x488945f8	                mov qword [rbp - 8], rax	      1219	convert.c	FUNCTION_42
0x2c54	      0x48837df800	                  cmp qword [rbp - 8], 0	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c59	            0x740b	                            je 0x4002ca6	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c5b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c5f	           0xfb600	                   movzx eax, byte [rax]	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c62	            0x84c0	                             test al, al	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c64	            0x7507	                           jne 0x4002cad	      1221	convert.c	FUNCTION_42	IF_1	CALL_2
0x2c66	      0xb800000000	                              mov eax, 0	      1222	convert.c	FUNCTION_42	IF_1
0x2c6b	            0xeb50	                           jmp 0x4002cfd	      1222	convert.c	FUNCTION_42	IF_1
0x2c6d	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1224	convert.c	FUNCTION_42	IF_2	CALL_4
0x2c75	            0x740a	                            je 0x4002cc1	      1224	convert.c	FUNCTION_42	IF_2	CALL_4
0x2c77	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1224	convert.c	FUNCTION_42	IF_2	CALL_4
0x2c7f	            0x7517	                           jne 0x4002cd8	      1224	convert.c	FUNCTION_42	IF_2	CALL_4
0x2c81	      0xbf00000000	                              mov edi, 0	      1225	convert.c	FUNCTION_42	IF_2	CALL_6
0x2c86	      0xe8ddd5ffff	                               call sym.	      1225	convert.c	FUNCTION_42	IF_2	CALL_6
0x2c8b	          0x4889c7	                            mov rdi, rax	      1225	convert.c	FUNCTION_42	IF_2	CALL_6
0x2c8e	      0xb800000000	                              mov eax, 0	      1225	convert.c	FUNCTION_42	IF_2	CALL_6
0x2c93	      0xe800000000	                          call 0x4002cd8	      1225	convert.c	FUNCTION_42	IF_2	CALL_6
0x2c98	    0x488b15000000	            mov rdx, qword [0x04002cdf] 	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2c9f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2ca3	          0x4889d6	                            mov rsi, rdx	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2ca6	          0x4889c7	                            mov rdi, rax	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2ca9	      0xe800000000	                          call 0x4002cee	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2cae	            0x85c0	                           test eax, eax	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2cb0	            0x7407	                            je 0x4002cf9	      1229	convert.c	FUNCTION_42	IF_3	CALL_7
0x2cb2	      0xb800000000	                              mov eax, 0	      1230	convert.c	FUNCTION_42	IF_3
0x2cb7	            0xeb04	                           jmp 0x4002cfd	      1230	convert.c	FUNCTION_42	IF_3
0x2cb9	        0x488b45f8	                mov rax, qword [rbp - 8]	      1232	convert.c	FUNCTION_42
0x2cbd	              0xc9	                                   leave	      1233	convert.c	FUNCTION_42
0x2cbe	              0xc3	                                     ret	      1233	convert.c	FUNCTION_42
text_eol_is_crlf	CALL,0:WHILE,0:functions,0:IF,4:SWITCH,0:ELSE,1:DO,0:FOR,0	20
0x69f	              0x55	                                push rbp	       162	convert.c	FUNCTION_19
0x6a0	          0x4889e5	                            mov rbp, rsp	       162	convert.c	FUNCTION_19
0x6a3	    0x8b0500000000	            mov eax, dword [0x040006e9] 	       163	convert.c	FUNCTION_19	IF_1
0x6a9	          0x83f801	                              cmp eax, 1	       163	convert.c	FUNCTION_19	IF_1
0x6ac	            0x7507	                           jne 0x40006f5	       163	convert.c	FUNCTION_19	IF_1
0x6ae	      0xb801000000	                              mov eax, 1	       164	convert.c	FUNCTION_19	IF_1
0x6b3	            0xeb29	                           jmp 0x400071e	       164	convert.c	FUNCTION_19	IF_1
0x6b5	    0x8b0500000000	            mov eax, dword [0x040006fb] 	       165	convert.c	FUNCTION_19	ELSE_1	IF_2
0x6bb	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       165	convert.c	FUNCTION_19	ELSE_1	IF_2
0x6be	            0x7507	                           jne 0x4000707	       165	convert.c	FUNCTION_19	ELSE_1	IF_2
0x6c0	      0xb800000000	                              mov eax, 0	       166	convert.c	FUNCTION_19	ELSE_1	IF_2
0x6c5	            0xeb17	                           jmp 0x400071e	       166	convert.c	FUNCTION_19	ELSE_1	IF_2
0x6c7	    0x8b0500000000	            mov eax, dword [0x0400070d] 	       167	convert.c	FUNCTION_19	IF_3
0x6cd	          0x83f801	                              cmp eax, 1	       167	convert.c	FUNCTION_19	IF_3
0x6d0	            0x7507	                           jne 0x4000719	       167	convert.c	FUNCTION_19	IF_3
0x6d2	      0xb801000000	                              mov eax, 1	       168	convert.c	FUNCTION_19	IF_3
0x6d7	            0xeb05	                           jmp 0x400071e	       168	convert.c	FUNCTION_19	IF_3
0x6d9	      0xb800000000	                              mov eax, 0	       171	convert.c	FUNCTION_19
0x6de	              0x5d	                                 pop rbp	       172	convert.c	FUNCTION_19
0x6df	              0xc3	                                     ret	       172	convert.c	FUNCTION_19
will_convert_lf_to_crlf	CALL,2:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,0:DO,0:FOR,0	47
0x918	              0x55	                                push rbp	       249	convert.c	FUNCTION_23
0x919	          0x4889e5	                            mov rbp, rsp	       249	convert.c	FUNCTION_23
0x91c	        0x4883ec20	                           sub rsp, 0x20	       249	convert.c	FUNCTION_23
0x920	        0x48897df8	                mov qword [rbp - 8], rdi	       249	convert.c	FUNCTION_23
0x924	        0x488975f0	             mov qword [rbp - 0x10], rsi	       249	convert.c	FUNCTION_23
0x928	          0x8955ec	             mov dword [rbp - 0x14], edx	       249	convert.c	FUNCTION_23
0x92b	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       250	convert.c	FUNCTION_23	IF_1	CALL_1
0x92e	            0x89c7	                            mov edi, eax	       250	convert.c	FUNCTION_23	IF_1	CALL_1
0x930	      0xe8abfdffff	                     call sym.output_eol	       250	convert.c	FUNCTION_23	IF_1	CALL_1
0x935	          0x83f801	                              cmp eax, 1	       250	convert.c	FUNCTION_23	IF_1	CALL_1
0x938	            0x7407	                            je 0x4000981	       250	convert.c	FUNCTION_23	IF_1	CALL_1
0x93a	      0xb800000000	                              mov eax, 0	       251	convert.c	FUNCTION_23	IF_1
0x93f	            0xeb64	                           jmp 0x40009e5	       251	convert.c	FUNCTION_23	IF_1
0x941	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       253	convert.c	FUNCTION_23	IF_2
0x945	          0x8b4008	                mov eax, dword [rax + 8]	       253	convert.c	FUNCTION_23	IF_2
0x948	            0x85c0	                           test eax, eax	       253	convert.c	FUNCTION_23	IF_2
0x94a	            0x7507	                           jne 0x4000993	       253	convert.c	FUNCTION_23	IF_2
0x94c	      0xb800000000	                              mov eax, 0	       254	convert.c	FUNCTION_23	IF_2
0x951	            0xeb52	                           jmp 0x40009e5	       254	convert.c	FUNCTION_23	IF_2
0x953	        0x837dec05	               cmp dword [rbp - 0x14], 5	       256	convert.c	FUNCTION_23	IF_3
0x957	            0x740c	                            je 0x40009a5	       256	convert.c	FUNCTION_23	IF_3
0x959	        0x837dec06	               cmp dword [rbp - 0x14], 6	       256	convert.c	FUNCTION_23	IF_3
0x95d	            0x7406	                            je 0x40009a5	       256	convert.c	FUNCTION_23	IF_3
0x95f	        0x837dec07	               cmp dword [rbp - 0x14], 7	       256	convert.c	FUNCTION_23	IF_3
0x963	            0x753b	                           jne 0x40009e0	       256	convert.c	FUNCTION_23	IF_3
0x965	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x969	          0x8b4004	                mov eax, dword [rax + 4]	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x96c	            0x85c0	                           test eax, eax	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x96e	            0x750b	                           jne 0x40009bb	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x970	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x974	          0x8b400c	              mov eax, dword [rax + 0xc]	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x977	            0x85c0	                           test eax, eax	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x979	            0x7407	                            je 0x40009c2	       259	convert.c	FUNCTION_23	IF_3	IF_4
0x97b	      0xb800000000	                              mov eax, 0	       260	convert.c	FUNCTION_23	IF_3	IF_4
0x980	            0xeb23	                           jmp 0x40009e5	       260	convert.c	FUNCTION_23	IF_3	IF_4
0x982	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x986	        0x488b45f8	                mov rax, qword [rbp - 8]	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x98a	          0x4889d6	                            mov rsi, rdx	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x98d	          0x4889c7	                            mov rdi, rax	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x990	      0xe8a9faffff	              call sym.convert_is_binary	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x995	            0x85c0	                           test eax, eax	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x997	            0x7407	                            je 0x40009e0	       262	convert.c	FUNCTION_23	IF_3	IF_5	CALL_2
0x999	      0xb800000000	                              mov eax, 0	       263	convert.c	FUNCTION_23	IF_3	IF_5
0x99e	            0xeb05	                           jmp 0x40009e5	       263	convert.c	FUNCTION_23	IF_3	IF_5
0x9a0	      0xb801000000	                              mov eax, 1	       265	convert.c	FUNCTION_23
0x9a5	              0xc9	                                   leave	       267	convert.c	FUNCTION_23
0x9a6	              0xc3	                                     ret	       267	convert.c	FUNCTION_23
is_foreign_ident	CALL,2:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,1	48
0x3ea4	              0x55	                                push rbp	      1788	convert.c	FUNCTION_65
0x3ea5	          0x4889e5	                            mov rbp, rsp	      1788	convert.c	FUNCTION_65
0x3ea8	        0x4883ec18	                           sub rsp, 0x18	      1788	convert.c	FUNCTION_65
0x3eac	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1788	convert.c	FUNCTION_65
0x3eb0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3eb4	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3eb8	      0xbe00000000	                              mov esi, 0	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3ebd	          0x4889c7	                            mov rdi, rax	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3ec0	      0xe846c1ffff	                    call sym.skip_prefix	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3ec5	            0x85c0	                           test eax, eax	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3ec7	            0x7507	                           jne 0x4003f10	      1791	convert.c	FUNCTION_65	IF_1	CALL_1
0x3ec9	      0xb800000000	                              mov eax, 0	      1792	convert.c	FUNCTION_65	IF_1
0x3ece	            0xeb69	                           jmp 0x4003f79	      1792	convert.c	FUNCTION_65	IF_1
0x3ed0	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1793	convert.c	FUNCTION_65	FOR_1
0x3ed7	            0xeb48	                           jmp 0x4003f61	      1793	convert.c	FUNCTION_65	FOR_1
0x3ed9	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3edd	          0x8b45fc	                mov eax, dword [rbp - 4]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ee0	            0x4898	                                    cdqe	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ee2	          0x4801d0	                            add rax, rdx	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ee5	           0xfb600	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ee8	           0xfb6c0	                           movzx eax, al	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3eeb	            0x4898	                                    cdqe	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3eed	     0xfb680000000	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ef4	           0xfb6c0	                           movzx eax, al	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3ef7	          0x83e001	                              and eax, 1	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3efa	            0x85c0	                           test eax, eax	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3efc	            0x741f	                            je 0x4003f5d	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3efe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f02	          0x8b55fc	                mov edx, dword [rbp - 4]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f05	          0x4863d2	                         movsxd rdx, edx	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f08	        0x4883c201	                              add rdx, 1	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f0c	          0x4801d0	                            add rax, rdx	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f0f	           0xfb600	                   movzx eax, byte [rax]	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f12	            0x3c24	                            cmp al, 0x24	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f14	            0x7407	                            je 0x4003f5d	      1794	convert.c	FUNCTION_65	FOR_1	IF_2	CALL_2
0x3f16	      0xb801000000	                              mov eax, 1	      1795	convert.c	FUNCTION_65	FOR_1	IF_2
0x3f1b	            0xeb1c	                           jmp 0x4003f79	      1795	convert.c	FUNCTION_65	FOR_1	IF_2
0x3f1d	        0x8345fc01	                  add dword [rbp - 4], 1	      1793	convert.c	FUNCTION_65	FOR_1
0x3f21	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1793	convert.c	FUNCTION_65	FOR_1
0x3f25	          0x8b45fc	                mov eax, dword [rbp - 4]	      1793	convert.c	FUNCTION_65	FOR_1
0x3f28	            0x4898	                                    cdqe	      1793	convert.c	FUNCTION_65	FOR_1
0x3f2a	          0x4801d0	                            add rax, rdx	      1793	convert.c	FUNCTION_65	FOR_1
0x3f2d	           0xfb600	                   movzx eax, byte [rax]	      1793	convert.c	FUNCTION_65	FOR_1
0x3f30	            0x84c0	                             test al, al	      1793	convert.c	FUNCTION_65	FOR_1
0x3f32	            0x75a5	                           jne 0x4003f19	      1793	convert.c	FUNCTION_65	FOR_1
0x3f34	      0xb800000000	                              mov eax, 0	      1797	convert.c	FUNCTION_65
0x3f39	              0xc9	                                   leave	      1798	convert.c	FUNCTION_65
0x3f3a	              0xc3	                                     ret	      1798	convert.c	FUNCTION_65
ident_to_worktree	CALL,16:WHILE,0:functions,0:IF,10:SWITCH,0:ELSE,2:DO,0:FOR,1	202
0x292d	              0x55	                                push rbp	      1136	convert.c	FUNCTION_41
0x292e	          0x4889e5	                            mov rbp, rsp	      1136	convert.c	FUNCTION_41
0x2931	        0x4883ec70	                           sub rsp, 0x70	      1136	convert.c	FUNCTION_41
0x2935	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1136	convert.c	FUNCTION_41
0x2939	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1136	convert.c	FUNCTION_41
0x293d	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1136	convert.c	FUNCTION_41
0x2941	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1136	convert.c	FUNCTION_41
0x2945	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1136	convert.c	FUNCTION_41
0x2949	    0x64488b042528	                mov rax, qword fs:[0x28]	      1136	convert.c	FUNCTION_41
0x2952	        0x488945f8	                mov qword [rbp - 8], rax	      1136	convert.c	FUNCTION_41
0x2956	            0x31c0	                            xor eax, eax	      1136	convert.c	FUNCTION_41
0x2958	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1138	convert.c	FUNCTION_41
0x2960	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1141	convert.c	FUNCTION_41	IF_1
0x2964	            0x750a	                           jne 0x40029b0	      1141	convert.c	FUNCTION_41	IF_1
0x2966	      0xb800000000	                              mov eax, 0	      1142	convert.c	FUNCTION_41	IF_1
0x296b	      0xe9b6020000	                           jmp 0x4002c66	      1142	convert.c	FUNCTION_41	IF_1
0x2970	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1144	convert.c	FUNCTION_41	CALL_1
0x2974	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1144	convert.c	FUNCTION_41	CALL_1
0x2978	          0x4889d6	                            mov rsi, rdx	      1144	convert.c	FUNCTION_41	CALL_1
0x297b	          0x4889c7	                            mov rdi, rax	      1144	convert.c	FUNCTION_41	CALL_1
0x297e	      0xe88cfcffff	                    call sym.count_ident	      1144	convert.c	FUNCTION_41	CALL_1
0x2983	          0x8945c4	             mov dword [rbp - 0x3c], eax	      1144	convert.c	FUNCTION_41	CALL_1
0x2986	        0x837dc400	               cmp dword [rbp - 0x3c], 0	      1145	convert.c	FUNCTION_41	IF_2
0x298a	            0x750a	                           jne 0x40029d6	      1145	convert.c	FUNCTION_41	IF_2
0x298c	      0xb800000000	                              mov eax, 0	      1146	convert.c	FUNCTION_41	IF_2
0x2991	      0xe990020000	                           jmp 0x4002c66	      1146	convert.c	FUNCTION_41	IF_2
0x2996	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1149	convert.c	FUNCTION_41	IF_3
0x299a	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1149	convert.c	FUNCTION_41	IF_3
0x299e	        0x483b45b0	             cmp rax, qword [rbp - 0x50]	      1149	convert.c	FUNCTION_41	IF_3
0x29a2	            0x7515	                           jne 0x40029f9	      1149	convert.c	FUNCTION_41	IF_3
0x29a4	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1150	convert.c	FUNCTION_41	CALL_2
0x29a8	      0xbe00000000	                              mov esi, 0	      1150	convert.c	FUNCTION_41	CALL_2
0x29ad	          0x4889c7	                            mov rdi, rax	      1150	convert.c	FUNCTION_41	CALL_2
0x29b0	      0xe800000000	                          call 0x40029f5	      1150	convert.c	FUNCTION_41	CALL_2
0x29b5	        0x488945c8	             mov qword [rbp - 0x38], rax	      1150	convert.c	FUNCTION_41	CALL_2
0x29b9	        0x488d55e0	                   lea rdx, [rbp - 0x20]	      1151	convert.c	FUNCTION_41	CALL_3
0x29bd	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1151	convert.c	FUNCTION_41	CALL_3
0x29c1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1151	convert.c	FUNCTION_41	CALL_3
0x29c5	          0x4889d1	                            mov rcx, rdx	      1151	convert.c	FUNCTION_41	CALL_3
0x29c8	      0xba00000000	                              mov edx, 0	      1151	convert.c	FUNCTION_41	CALL_3
0x29cd	          0x4889c7	                            mov rdi, rax	      1151	convert.c	FUNCTION_41	CALL_3
0x29d0	      0xe800000000	                          call 0x4002a15	      1151	convert.c	FUNCTION_41	CALL_3
0x29d5	          0x8b45c4	             mov eax, dword [rbp - 0x3c]	      1153	convert.c	FUNCTION_41	CALL_4
0x29d8	          0x4863d0	                         movsxd rdx, eax	      1153	convert.c	FUNCTION_41	CALL_4
0x29db	    0x488b05000000	            mov rax, qword [0x04002a22] 	      1153	convert.c	FUNCTION_41	CALL_4
0x29e2	        0x488b4058	            mov rax, qword [rax + 0x58] 	      1153	convert.c	FUNCTION_41	CALL_4
0x29e6	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1153	convert.c	FUNCTION_41	CALL_4
0x29ea	        0x4883c003	                              add rax, 3	      1153	convert.c	FUNCTION_41	CALL_4
0x29ee	        0x480fafd0	                           imul rdx, rax	      1153	convert.c	FUNCTION_41	CALL_4
0x29f2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1153	convert.c	FUNCTION_41	CALL_4
0x29f6	          0x4801c2	                            add rdx, rax	      1153	convert.c	FUNCTION_41	CALL_4
0x29f9	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1153	convert.c	FUNCTION_41	CALL_4
0x29fd	          0x4889d6	                            mov rsi, rdx	      1153	convert.c	FUNCTION_41	CALL_4
0x2a00	          0x4889c7	                            mov rdi, rax	      1153	convert.c	FUNCTION_41	CALL_4
0x2a03	      0xe800000000	                          call 0x4002a48	      1153	convert.c	FUNCTION_41	CALL_4
0x2a08	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a0c	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a10	      0xbe24000000	                           mov esi, 0x24	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a15	          0x4889c7	                            mov rdi, rax	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a18	      0xe800000000	                          call 0x4002a5d	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a1d	        0x488945d0	             mov qword [rbp - 0x30], rax	      1156	convert.c	FUNCTION_41	FOR_1	CALL_5
0x2a21	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1157	convert.c	FUNCTION_41	FOR_1	IF_4
0x2a26	     0xf84ce010000	                            je 0x4002c3a	      1157	convert.c	FUNCTION_41	FOR_1	IF_4
0x2a2c	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a30	        0x4883c001	                              add rax, 1	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a34	          0x4889c2	                            mov rdx, rax	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a37	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a3b	          0x4829c2	                            sub rdx, rax	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a3e	          0x4889d0	                            mov rax, rdx	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a41	          0x4889c2	                            mov rdx, rax	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a44	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a48	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a4c	          0x4889ce	                            mov rsi, rcx	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a4f	          0x4889c7	                            mov rdi, rax	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a52	      0xe800000000	                          call 0x4002a97	      1159	convert.c	FUNCTION_41	FOR_1	CALL_6
0x2a57	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1160	convert.c	FUNCTION_41	FOR_1
0x2a5b	        0x4883c001	                              add rax, 1	      1160	convert.c	FUNCTION_41	FOR_1
0x2a5f	          0x4889c2	                            mov rdx, rax	      1160	convert.c	FUNCTION_41	FOR_1
0x2a62	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1160	convert.c	FUNCTION_41	FOR_1
0x2a66	          0x4829c2	                            sub rdx, rax	      1160	convert.c	FUNCTION_41	FOR_1
0x2a69	          0x4889d0	                            mov rax, rdx	      1160	convert.c	FUNCTION_41	FOR_1
0x2a6c	        0x482945a8	             sub qword [rbp - 0x58], rax	      1160	convert.c	FUNCTION_41	FOR_1
0x2a70	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1161	convert.c	FUNCTION_41	FOR_1
0x2a74	        0x4883c001	                              add rax, 1	      1161	convert.c	FUNCTION_41	FOR_1
0x2a78	        0x488945b0	             mov qword [rbp - 0x50], rax	      1161	convert.c	FUNCTION_41	FOR_1
0x2a7c	      0x48837da802	               cmp qword [rbp - 0x58], 2	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a81	     0xf865b010000	                           jbe 0x4002c22	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a87	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a8b	      0xba02000000	                              mov edx, 2	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a90	          0x4889c6	                            mov rsi, rax	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a93	      0xbf00000000	                              mov edi, 0	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a98	      0xe800000000	                          call 0x4002add	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a9d	            0x85c0	                           test eax, eax	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2a9f	     0xf853d010000	                           jne 0x4002c22	      1164	convert.c	FUNCTION_41	FOR_1	IF_5	CALL_7
0x2aa5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1168	convert.c	FUNCTION_41	FOR_1	IF_6
0x2aa9	        0x4883c002	                              add rax, 2	      1168	convert.c	FUNCTION_41	FOR_1	IF_6
0x2aad	           0xfb600	                   movzx eax, byte [rax]	      1168	convert.c	FUNCTION_41	FOR_1	IF_6
0x2ab0	            0x3c24	                            cmp al, 0x24	      1168	convert.c	FUNCTION_41	FOR_1	IF_6
0x2ab2	            0x750f	                           jne 0x4002b03	      1168	convert.c	FUNCTION_41	FOR_1	IF_6
0x2ab4	      0x488345b003	               add qword [rbp - 0x50], 3	      1169	convert.c	FUNCTION_41	FOR_1	IF_6
0x2ab9	      0x48836da803	               sub qword [rbp - 0x58], 3	      1170	convert.c	FUNCTION_41	FOR_1	IF_6
0x2abe	      0xe9da000000	                           jmp 0x4002bdd	      1170	convert.c	FUNCTION_41	FOR_1	IF_6
0x2ac3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1171	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2ac7	        0x4883c002	                              add rax, 2	      1171	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2acb	           0xfb600	                   movzx eax, byte [rax]	      1171	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2ace	            0x3c3a	                            cmp al, 0x3a	      1171	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2ad0	     0xf8512010000	                           jne 0x4002c28	      1171	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2ad6	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2ada	        0x488d50fd	                      lea rdx, [rax - 3]	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2ade	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2ae2	        0x4883c003	                              add rax, 3	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2ae6	      0xbe24000000	                           mov esi, 0x24	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2aeb	          0x4889c7	                            mov rdi, rax	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2aee	      0xe800000000	                          call 0x4002b33	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2af3	        0x488945d0	             mov qword [rbp - 0x30], rax	      1179	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_8
0x2af7	      0x48837dd000	               cmp qword [rbp - 0x30], 0	      1180	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_8
0x2afc	     0xf84fb000000	                            je 0x4002c3d	      1180	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_8
0x2b02	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b06	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b0a	          0x4829c2	                            sub rdx, rax	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b0d	          0x4889d0	                            mov rax, rdx	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b10	        0x4883e803	                              sub rax, 3	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b14	          0x4889c2	                            mov rdx, rax	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b17	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b1b	        0x4883c003	                              add rax, 3	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b1f	      0xbe0a000000	                            mov esi, 0xa	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b24	          0x4889c7	                            mov rdi, rax	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b27	      0xe800000000	                          call 0x4002b6c	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b2c	          0x4885c0	                           test rax, rax	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b2f	     0xf85b9000000	                           jne 0x4002c2e	      1185	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9	CALL_9
0x2b35	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b39	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b3d	          0x4829c2	                            sub rdx, rax	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b40	          0x4889d0	                            mov rax, rdx	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b43	        0x4883e804	                              sub rax, 4	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b47	          0x4889c2	                            mov rdx, rax	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b4a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b4e	        0x4883c004	                              add rax, 4	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b52	      0xbe20000000	                           mov esi, 0x20	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b57	          0x4889c7	                            mov rdi, rax	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b5a	      0xe800000000	                          call 0x4002b9f	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b5f	        0x488945d8	             mov qword [rbp - 0x28], rax	      1190	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	CALL_10
0x2b63	      0x48837dd800	               cmp qword [rbp - 0x28], 0	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b68	            0x740e	                            je 0x4002bb8	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b6a	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b6e	        0x4883e801	                              sub rax, 1	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b72	        0x483b45d8	             cmp rax, qword [rbp - 0x28]	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b76	            0x777c	                            ja 0x4002c34	      1191	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2b78	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b7c	        0x4883c001	                              add rax, 1	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b80	          0x4889c2	                            mov rdx, rax	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b83	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b87	          0x4829c2	                            sub rdx, rax	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b8a	          0x4889d0	                            mov rax, rdx	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b8d	        0x482945a8	             sub qword [rbp - 0x58], rax	      1199	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b91	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1200	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b95	        0x4883c001	                              add rax, 1	      1200	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b99	        0x488945b0	             mov qword [rbp - 0x50], rax	      1200	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7
0x2b9d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1207	convert.c	FUNCTION_41	FOR_1	CALL_11
0x2ba1	      0xbe00000000	                              mov esi, 0	      1207	convert.c	FUNCTION_41	FOR_1	CALL_11
0x2ba6	          0x4889c7	                            mov rdi, rax	      1207	convert.c	FUNCTION_41	FOR_1	CALL_11
0x2ba9	      0xe885d6ffff	                  call sym.strbuf_addstr	      1207	convert.c	FUNCTION_41	FOR_1	CALL_11
0x2bae	        0x488d45e0	                   lea rax, [rbp - 0x20]	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bb2	          0x4889c7	                            mov rdi, rax	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bb5	      0xe800000000	                          call 0x4002bfa	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bba	          0x4889c2	                            mov rdx, rax	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bbd	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bc1	          0x4889d6	                            mov rsi, rdx	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bc4	          0x4889c7	                            mov rdi, rax	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bc7	      0xe867d6ffff	                  call sym.strbuf_addstr	      1208	convert.c	FUNCTION_41	FOR_1	CALL_13
0x2bcc	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1209	convert.c	FUNCTION_41	FOR_1	CALL_14
0x2bd0	      0xbe00000000	                              mov esi, 0	      1209	convert.c	FUNCTION_41	FOR_1	CALL_14
0x2bd5	          0x4889c7	                            mov rdi, rax	      1209	convert.c	FUNCTION_41	FOR_1	CALL_14
0x2bd8	      0xe856d6ffff	                  call sym.strbuf_addstr	      1209	convert.c	FUNCTION_41	FOR_1	CALL_14
0x2bdd	      0xe926feffff	                           jmp 0x4002a48	      1209	convert.c	FUNCTION_41	FOR_1	CALL_14
0x2be2	              0x90	                                     nop	      1165	convert.c	FUNCTION_41	FOR_1	IF_5
0x2be3	      0xe920feffff	                           jmp 0x4002a48	      1165	convert.c	FUNCTION_41	FOR_1	IF_5
0x2be8	              0x90	                                     nop	      1203	convert.c	FUNCTION_41	FOR_1	ELSE_2
0x2be9	      0xe91afeffff	                           jmp 0x4002a48	      1203	convert.c	FUNCTION_41	FOR_1	ELSE_2
0x2bee	              0x90	                                     nop	      1187	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9
0x2bef	      0xe914feffff	                           jmp 0x4002a48	      1187	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_9
0x2bf4	              0x90	                                     nop	      1196	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_10
0x2bf5	      0xe90efeffff	                           jmp 0x4002a48	      1210	convert.c	FUNCTION_41	FOR_1
0x2bfa	              0x90	                                     nop	      1158	convert.c	FUNCTION_41	FOR_1	IF_4
0x2bfb	            0xeb01	                           jmp 0x4002c3e	      1158	convert.c	FUNCTION_41	FOR_1	IF_4
0x2bfd	              0x90	                                     nop	      1182	convert.c	FUNCTION_41	FOR_1	ELSE_1	IF_7	IF_8
0x2bfe	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1211	convert.c	FUNCTION_41	CALL_15
0x2c02	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1211	convert.c	FUNCTION_41	CALL_15
0x2c06	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1211	convert.c	FUNCTION_41	CALL_15
0x2c0a	          0x4889ce	                            mov rsi, rcx	      1211	convert.c	FUNCTION_41	CALL_15
0x2c0d	          0x4889c7	                            mov rdi, rax	      1211	convert.c	FUNCTION_41	CALL_15
0x2c10	      0xe800000000	                          call 0x4002c55	      1211	convert.c	FUNCTION_41	CALL_15
0x2c15	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1213	convert.c	FUNCTION_41	CALL_16
0x2c19	          0x4889c7	                            mov rdi, rax	      1213	convert.c	FUNCTION_41	CALL_16
0x2c1c	      0xe800000000	                          call 0x4002c61	      1213	convert.c	FUNCTION_41	CALL_16
0x2c21	      0xb801000000	                              mov eax, 1	      1214	convert.c	FUNCTION_41
0x2c26	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1215	convert.c	FUNCTION_41
0x2c2a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1215	convert.c	FUNCTION_41
0x2c33	            0x7405	                            je 0x4002c7a	      1215	convert.c	FUNCTION_41
0x2c35	      0xe800000000	                          call 0x4002c7a	      1215	convert.c	FUNCTION_41
0x2c3a	              0xc9	                                   leave	      1215	convert.c	FUNCTION_41
0x2c3b	              0xc3	                                     ret	      1215	convert.c	FUNCTION_41
gather_convert_stats_ascii	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,1:ELSE,0:DO,0:FOR,0	33
0x52e	              0x55	                                push rbp	       123	convert.c	FUNCTION_16
0x52f	          0x4889e5	                            mov rbp, rsp	       123	convert.c	FUNCTION_16
0x532	        0x4883ec20	                           sub rsp, 0x20	       123	convert.c	FUNCTION_16
0x536	        0x48897de8	             mov qword [rbp - 0x18], rdi	       123	convert.c	FUNCTION_16
0x53a	        0x488975e0	             mov qword [rbp - 0x20], rsi	       123	convert.c	FUNCTION_16
0x53e	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       124	convert.c	FUNCTION_16	CALL_1
0x542	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       124	convert.c	FUNCTION_16	CALL_1
0x546	          0x4889d6	                            mov rsi, rdx	       124	convert.c	FUNCTION_16	CALL_1
0x549	          0x4889c7	                            mov rdi, rax	       124	convert.c	FUNCTION_16	CALL_1
0x54c	      0xe841ffffff	           call sym.gather_convert_stats	       124	convert.c	FUNCTION_16	CALL_1
0x551	          0x8945fc	                mov dword [rbp - 4], eax	       124	convert.c	FUNCTION_16	CALL_1
0x554	          0x8b45fc	                mov eax, dword [rbp - 4]	       126	convert.c	FUNCTION_16	IF_1
0x557	          0x83e004	                              and eax, 4	       126	convert.c	FUNCTION_16	IF_1
0x55a	            0x85c0	                           test eax, eax	       126	convert.c	FUNCTION_16	IF_1
0x55c	            0x7407	                            je 0x40005a5	       126	convert.c	FUNCTION_16	IF_1
0x55e	      0xb800000000	                              mov eax, 0	       127	convert.c	FUNCTION_16	IF_1
0x563	            0xeb2c	                           jmp 0x40005d1	       127	convert.c	FUNCTION_16	IF_1
0x565	          0x8b45fc	                mov eax, dword [rbp - 4]	       128	convert.c	FUNCTION_16	SWITCH_1
0x568	          0x83f802	                              cmp eax, 2	       128	convert.c	FUNCTION_16	SWITCH_1
0x56b	            0x7411	                            je 0x40005be	       128	convert.c	FUNCTION_16	SWITCH_1
0x56d	          0x83f803	                              cmp eax, 3	       128	convert.c	FUNCTION_16	SWITCH_1
0x570	            0x7413	                            je 0x40005c5	       128	convert.c	FUNCTION_16	SWITCH_1
0x572	          0x83f801	                              cmp eax, 1	       128	convert.c	FUNCTION_16	SWITCH_1
0x575	            0x7515	                           jne 0x40005cc	       128	convert.c	FUNCTION_16	SWITCH_1
0x577	      0xb800000000	                              mov eax, 0	       130	convert.c	FUNCTION_16	SWITCH_1
0x57c	            0xeb13	                           jmp 0x40005d1	       130	convert.c	FUNCTION_16	SWITCH_1
0x57e	      0xb800000000	                              mov eax, 0	       132	convert.c	FUNCTION_16	SWITCH_1
0x583	            0xeb0c	                           jmp 0x40005d1	       132	convert.c	FUNCTION_16	SWITCH_1
0x585	      0xb800000000	                              mov eax, 0	       134	convert.c	FUNCTION_16	SWITCH_1
0x58a	            0xeb05	                           jmp 0x40005d1	       134	convert.c	FUNCTION_16	SWITCH_1
0x58c	      0xb800000000	                              mov eax, 0	       136	convert.c	FUNCTION_16	SWITCH_1
0x591	              0xc9	                                   leave	       138	convert.c	FUNCTION_16
0x592	              0xc3	                                     ret	       138	convert.c	FUNCTION_16
get_wt_convert_stats_ascii	CALL,3:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	35
0x60a	              0x55	                                push rbp	       152	convert.c	FUNCTION_18
0x60b	          0x4889e5	                            mov rbp, rsp	       152	convert.c	FUNCTION_18
0x60e	        0x4883ec40	                           sub rsp, 0x40	       152	convert.c	FUNCTION_18
0x612	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       152	convert.c	FUNCTION_18
0x616	    0x64488b042528	                mov rax, qword fs:[0x28]	       152	convert.c	FUNCTION_18
0x61f	        0x488945f8	                mov qword [rbp - 8], rax	       152	convert.c	FUNCTION_18
0x623	            0x31c0	                            xor eax, eax	       152	convert.c	FUNCTION_18
0x625	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       153	convert.c	FUNCTION_18
0x62d	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       154	convert.c	FUNCTION_18
0x635	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       154	convert.c	FUNCTION_18
0x63d	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       154	convert.c	FUNCTION_18
0x645	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x649	        0x488d45e0	                   lea rax, [rbp - 0x20]	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x64d	      0xba00000000	                              mov edx, 0	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x652	          0x4889ce	                            mov rsi, rcx	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x655	          0x4889c7	                            mov rdi, rax	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x658	      0xe800000000	                          call 0x400069d	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x65d	          0x4885c0	                           test rax, rax	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x660	            0x7817	                            js 0x40006b9	       155	convert.c	FUNCTION_18	IF_1	CALL_1
0x662	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       156	convert.c	FUNCTION_18	CALL_2
0x666	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       156	convert.c	FUNCTION_18	CALL_2
0x66a	          0x4889d6	                            mov rsi, rdx	       156	convert.c	FUNCTION_18	CALL_2
0x66d	          0x4889c7	                            mov rdi, rax	       156	convert.c	FUNCTION_18	CALL_2
0x670	      0xe8b9feffff	     call sym.gather_convert_stats_ascii	       156	convert.c	FUNCTION_18	CALL_2
0x675	        0x488945d8	             mov qword [rbp - 0x28], rax	       156	convert.c	FUNCTION_18	CALL_2
0x679	        0x488d45e0	                   lea rax, [rbp - 0x20]	       157	convert.c	FUNCTION_18	CALL_3
0x67d	          0x4889c7	                            mov rdi, rax	       157	convert.c	FUNCTION_18	CALL_3
0x680	      0xe800000000	                          call 0x40006c5	       157	convert.c	FUNCTION_18	CALL_3
0x685	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       158	convert.c	FUNCTION_18
0x689	        0x488b4df8	                mov rcx, qword [rbp - 8]	       159	convert.c	FUNCTION_18
0x68d	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       159	convert.c	FUNCTION_18
0x696	            0x7405	                            je 0x40006dd	       159	convert.c	FUNCTION_18
0x698	      0xe800000000	                          call 0x40006dd	       159	convert.c	FUNCTION_18
0x69d	              0xc9	                                   leave	       159	convert.c	FUNCTION_18
0x69e	              0xc3	                                     ret	       159	convert.c	FUNCTION_18
ident_filter_fn	CALL,12:WHILE,1:functions,0:IF,11:SWITCH,1:ELSE,1:DO,0:FOR,0	187
0x3ff9	              0x55	                                push rbp	      1819	convert.c	FUNCTION_67
0x3ffa	          0x4889e5	                            mov rbp, rsp	      1819	convert.c	FUNCTION_67
0x3ffd	        0x4883ec40	                           sub rsp, 0x40	      1819	convert.c	FUNCTION_67
0x4001	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1819	convert.c	FUNCTION_67
0x4005	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1819	convert.c	FUNCTION_67
0x4009	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1819	convert.c	FUNCTION_67
0x400d	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1819	convert.c	FUNCTION_67
0x4011	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1819	convert.c	FUNCTION_67
0x4015	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1820	convert.c	FUNCTION_67
0x4019	        0x488945f8	                mov qword [rbp - 8], rax	      1820	convert.c	FUNCTION_67
0x401d	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1823	convert.c	FUNCTION_67	IF_1
0x4022	     0xf8550020000	                           jne 0x40042b8	      1823	convert.c	FUNCTION_67	IF_1
0x4028	        0x488b45f8	                mov rax, qword [rbp - 8]	      1825	convert.c	FUNCTION_67	IF_1	SWITCH_1
0x402c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1825	convert.c	FUNCTION_67	IF_1	SWITCH_1
0x402f	          0x83c002	                              add eax, 2	      1825	convert.c	FUNCTION_67	IF_1	SWITCH_1
0x4032	          0x83f801	                              cmp eax, 1	      1825	convert.c	FUNCTION_67	IF_1	SWITCH_1
0x4035	            0x7621	                           jbe 0x4004098	      1825	convert.c	FUNCTION_67	IF_1	SWITCH_1
0x4037	        0x488b45f8	                mov rax, qword [rbp - 8]	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x403b	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x403e	            0x4898	                                    cdqe	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4040	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4044	        0x488d4a08	                      lea rcx, [rdx + 8]	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4048	          0x4889c2	                            mov rdx, rax	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x404b	      0xbe00000000	                              mov esi, 0	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4050	          0x4889cf	                            mov rdi, rcx	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4053	      0xe800000000	                          call 0x4004098	      1827	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_1
0x4058	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x405c	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x4060	        0x488b45f8	                mov rax, qword [rbp - 8]	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x4064	          0x4889ce	                            mov rsi, rcx	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x4067	          0x4889c7	                            mov rdi, rax	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x406a	      0xe8ccfeffff	                    call sym.ident_drain	      1832	convert.c	FUNCTION_67	IF_1	SWITCH_1	CALL_2
0x406f	      0xb800000000	                              mov eax, 0	      1834	convert.c	FUNCTION_67	IF_1
0x4074	      0xe927020000	                           jmp 0x40042e0	      1834	convert.c	FUNCTION_67	IF_1
0x4079	        0x488b45f8	                mov rax, qword [rbp - 8]	      1840	convert.c	FUNCTION_67	WHILE_1	IF_2
0x407d	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1840	convert.c	FUNCTION_67	WHILE_1	IF_2
0x4080	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1840	convert.c	FUNCTION_67	WHILE_1	IF_2
0x4083	            0x752c	                           jne 0x40040f1	      1840	convert.c	FUNCTION_67	WHILE_1	IF_2
0x4085	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x4089	        0x488d4dd0	                   lea rcx, [rbp - 0x30]	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x408d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x4091	          0x4889ce	                            mov rsi, rcx	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x4094	          0x4889c7	                            mov rdi, rax	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x4097	      0xe89ffeffff	                    call sym.ident_drain	      1841	convert.c	FUNCTION_67	WHILE_1	IF_2	CALL_3
0x409c	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1842	convert.c	FUNCTION_67	WHILE_1	IF_2	IF_3
0x40a0	          0x488b00	                    mov rax, qword [rax]	      1842	convert.c	FUNCTION_67	WHILE_1	IF_2	IF_3
0x40a3	          0x4885c0	                           test rax, rax	      1842	convert.c	FUNCTION_67	WHILE_1	IF_2	IF_3
0x40a6	     0xf84ee010000	                            je 0x40042da	      1842	convert.c	FUNCTION_67	WHILE_1	IF_2	IF_3
0x40ac	      0xe9c7010000	                           jmp 0x40042b8	      1844	convert.c	FUNCTION_67	WHILE_1	IF_2
0x40b1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1847	convert.c	FUNCTION_67	WHILE_1
0x40b5	        0x488d5001	                      lea rdx, [rax + 1]	      1847	convert.c	FUNCTION_67	WHILE_1
0x40b9	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1847	convert.c	FUNCTION_67	WHILE_1
0x40bd	           0xfb600	                   movzx eax, byte [rax]	      1847	convert.c	FUNCTION_67	WHILE_1
0x40c0	           0xfbec0	                           movsx eax, al	      1847	convert.c	FUNCTION_67	WHILE_1
0x40c3	          0x8945f4	              mov dword [rbp - 0xc], eax	      1847	convert.c	FUNCTION_67	WHILE_1
0x40c6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1848	convert.c	FUNCTION_67	WHILE_1
0x40ca	          0x488b00	                    mov rax, qword [rax]	      1848	convert.c	FUNCTION_67	WHILE_1
0x40cd	        0x488d50ff	                      lea rdx, [rax - 1]	      1848	convert.c	FUNCTION_67	WHILE_1
0x40d1	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1848	convert.c	FUNCTION_67	WHILE_1
0x40d5	          0x488910	                    mov qword [rax], rdx	      1848	convert.c	FUNCTION_67	WHILE_1
0x40d8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1850	convert.c	FUNCTION_67	WHILE_1	IF_4
0x40dc	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1850	convert.c	FUNCTION_67	WHILE_1	IF_4
0x40df	          0x83f8fe	             cmp eax, 0xfffffffffffffffe	      1850	convert.c	FUNCTION_67	WHILE_1	IF_4
0x40e2	     0xf8580000000	                           jne 0x40041a8	      1850	convert.c	FUNCTION_67	WHILE_1	IF_4
0x40e8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40ec	        0x488d5008	                      lea rdx, [rax + 8]	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40f0	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40f3	            0x89c6	                            mov esi, eax	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40f5	          0x4889d7	                            mov rdi, rdx	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40f8	      0xe8c8c0ffff	                   call sym.strbuf_addch	      1855	convert.c	FUNCTION_67	WHILE_1	IF_4	CALL_4
0x40fd	        0x837df40a	              cmp dword [rbp - 0xc], 0xa	      1856	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_5
0x4101	            0x740b	                            je 0x400414e	      1856	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_5
0x4103	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1856	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_5
0x4107	            0x7405	                            je 0x400414e	      1856	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_5
0x4109	      0xe96a010000	                           jmp 0x40042b8	      1857	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_5
0x410e	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4112	            0x7544	                           jne 0x4004198	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4114	        0x488b45f8	                mov rax, qword [rbp - 8]	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4118	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x411c	          0x4889c7	                            mov rdi, rax	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x411f	      0xe880fdffff	               call sym.is_foreign_ident	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4124	            0x85c0	                           test eax, eax	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4126	            0x7530	                           jne 0x4004198	      1858	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_5
0x4128	        0x488b45f8	                mov rax, qword [rbp - 8]	      1859	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_6
0x412c	        0x4883c008	                              add rax, 8	      1859	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_6
0x4130	      0xbe03000000	                              mov esi, 3	      1859	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_6
0x4135	          0x4889c7	                            mov rdi, rax	      1859	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_6
0x4138	      0xe8eebfffff	                  call sym.strbuf_setlen	      1859	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_6
0x413d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4141	        0x488d5024	                   lea rdx, [rax + 0x24]	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4145	        0x488b45f8	                mov rax, qword [rbp - 8]	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4149	        0x4883c008	                              add rax, 8	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x414d	          0x4889d6	                            mov rsi, rdx	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4150	          0x4889c7	                            mov rdi, rax	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4153	      0xe8dbc0ffff	                  call sym.strbuf_addstr	      1860	convert.c	FUNCTION_67	WHILE_1	IF_4	IF_6	CALL_7
0x4158	        0x488b45f8	                mov rax, qword [rbp - 8]	      1862	convert.c	FUNCTION_67	WHILE_1	IF_4
0x415c	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1862	convert.c	FUNCTION_67	WHILE_1	IF_4
0x4163	      0xe910010000	                           jmp 0x40042b8	      1863	convert.c	FUNCTION_67	WHILE_1	IF_4
0x4168	        0x488b45f8	                mov rax, qword [rbp - 8]	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x416c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x416f	          0x83f803	                              cmp eax, 3	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4172	            0x772e	                            ja 0x40041e2	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4174	        0x488b45f8	                mov rax, qword [rbp - 8]	      1867	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4178	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1867	convert.c	FUNCTION_67	WHILE_1	IF_7
0x417b	            0x4898	                                    cdqe	      1867	convert.c	FUNCTION_67	WHILE_1	IF_7
0x417d	     0xfb680000000	                   movzx eax, byte [rax]	      1867	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4184	           0xfbec0	                           movsx eax, al	      1867	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4187	          0x3b45f4	              cmp eax, dword [rbp - 0xc]	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x418a	            0x7516	                           jne 0x40041e2	      1866	convert.c	FUNCTION_67	WHILE_1	IF_7
0x418c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1868	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4190	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1868	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4193	          0x8d5001	                      lea edx, [rax + 1]	      1868	convert.c	FUNCTION_67	WHILE_1	IF_7
0x4196	        0x488b45f8	                mov rax, qword [rbp - 8]	      1868	convert.c	FUNCTION_67	WHILE_1	IF_7
0x419a	          0x895020	             mov dword [rax + 0x20], edx	      1868	convert.c	FUNCTION_67	WHILE_1	IF_7
0x419d	      0xe9d6000000	                           jmp 0x40042b8	      1869	convert.c	FUNCTION_67	WHILE_1	IF_7
0x41a2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1872	convert.c	FUNCTION_67	WHILE_1	IF_8
0x41a6	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1872	convert.c	FUNCTION_67	WHILE_1	IF_8
0x41a9	            0x85c0	                           test eax, eax	      1872	convert.c	FUNCTION_67	WHILE_1	IF_8
0x41ab	            0x7421	                            je 0x400420e	      1872	convert.c	FUNCTION_67	WHILE_1	IF_8
0x41ad	        0x488b45f8	                mov rax, qword [rbp - 8]	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41b1	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41b4	            0x4898	                                    cdqe	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41b6	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41ba	        0x488d4a08	                      lea rcx, [rdx + 8]	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41be	          0x4889c2	                            mov rdx, rax	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41c1	      0xbe00000000	                              mov esi, 0	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41c6	          0x4889cf	                            mov rdi, rcx	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41c9	      0xe800000000	                          call 0x400420e	      1873	convert.c	FUNCTION_67	WHILE_1	CALL_8
0x41ce	        0x488b45f8	                mov rax, qword [rbp - 8]	      1874	convert.c	FUNCTION_67	WHILE_1	IF_9
0x41d2	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1874	convert.c	FUNCTION_67	WHILE_1	IF_9
0x41d5	          0x83f803	                              cmp eax, 3	      1874	convert.c	FUNCTION_67	WHILE_1	IF_9
0x41d8	            0x757e	                           jne 0x4004298	      1874	convert.c	FUNCTION_67	WHILE_1	IF_9
0x41da	        0x837df43a	            cmp dword [rbp - 0xc], 0x3a 	      1875	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x41de	            0x7428	                            je 0x4004248	      1875	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x41e0	        0x837df424	            cmp dword [rbp - 0xc], 0x24 	      1875	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x41e4	            0x7422	                            je 0x4004248	      1875	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x41e6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41ea	        0x488d5008	                      lea rdx, [rax + 8]	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41ee	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41f1	            0x89c6	                            mov esi, eax	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41f3	          0x4889d7	                            mov rdi, rdx	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41f6	      0xe8cabfffff	                   call sym.strbuf_addch	      1876	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10	CALL_9
0x41fb	        0x488b45f8	                mov rax, qword [rbp - 8]	      1877	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x41ff	    0xc74020000000	               mov dword [rax + 0x20], 0	      1877	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x4206	            0xeb70	                           jmp 0x40042b8	      1878	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_10
0x4208	        0x837df43a	            cmp dword [rbp - 0xc], 0x3a 	      1881	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11
0x420c	            0x7522	                           jne 0x4004270	      1881	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11
0x420e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x4212	        0x488d5008	                      lea rdx, [rax + 8]	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x4216	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x4219	            0x89c6	                            mov esi, eax	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x421b	          0x4889d7	                            mov rdi, rdx	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x421e	      0xe8a2bfffff	                   call sym.strbuf_addch	      1882	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11	CALL_10
0x4223	        0x488b45f8	                mov rax, qword [rbp - 8]	      1883	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11
0x4227	    0xc74020feffff	     mov dword [rax + 0x20], 0xfffffffe 	      1883	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11
0x422e	            0xeb48	                           jmp 0x40042b8	      1883	convert.c	FUNCTION_67	WHILE_1	IF_9	IF_11
0x4230	        0x488b45f8	                mov rax, qword [rbp - 8]	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x4234	        0x488d5024	                   lea rdx, [rax + 0x24]	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x4238	        0x488b45f8	                mov rax, qword [rbp - 8]	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x423c	        0x4883c008	                              add rax, 8	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x4240	          0x4889d6	                            mov rsi, rdx	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x4243	          0x4889c7	                            mov rdi, rax	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x4246	      0xe8e8bfffff	                  call sym.strbuf_addstr	      1885	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1	CALL_11
0x424b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1886	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1
0x424f	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1886	convert.c	FUNCTION_67	WHILE_1	IF_9	ELSE_1
0x4256	            0xeb20	                           jmp 0x40042b8	      1888	convert.c	FUNCTION_67	WHILE_1	IF_9
0x4258	        0x488b45f8	                mov rax, qword [rbp - 8]	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x425c	        0x488d5008	                      lea rdx, [rax + 8]	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x4260	          0x8b45f4	              mov eax, dword [rbp - 0xc]	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x4263	            0x89c6	                            mov esi, eax	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x4265	          0x4889d7	                            mov rdi, rdx	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x4268	      0xe858bfffff	                   call sym.strbuf_addch	      1891	convert.c	FUNCTION_67	WHILE_1	CALL_12
0x426d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1892	convert.c	FUNCTION_67	WHILE_1
0x4271	    0xc74020ffffff	     mov dword [rax + 0x20], 0xffffffff 	      1892	convert.c	FUNCTION_67	WHILE_1
0x4278	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1837	convert.c	FUNCTION_67	WHILE_1
0x427c	          0x488b00	                    mov rax, qword [rax]	      1837	convert.c	FUNCTION_67	WHILE_1
0x427f	          0x4885c0	                           test rax, rax	      1837	convert.c	FUNCTION_67	WHILE_1
0x4282	     0xf85f1fdffff	                           jne 0x40040b9	      1837	convert.c	FUNCTION_67	WHILE_1
0x4288	        0x488b45f8	                mov rax, qword [rbp - 8]	      1837	convert.c	FUNCTION_67	WHILE_1
0x428c	          0x8b4020	            mov eax, dword [rax + 0x20] 	      1837	convert.c	FUNCTION_67	WHILE_1
0x428f	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1837	convert.c	FUNCTION_67	WHILE_1
0x4292	     0xf84e1fdffff	                            je 0x40040b9	      1837	convert.c	FUNCTION_67	WHILE_1
0x4298	            0xeb01	                           jmp 0x40042db	      1837	convert.c	FUNCTION_67	WHILE_1
0x429a	              0x90	                                     nop	      1843	convert.c	FUNCTION_67	WHILE_1	IF_2	IF_3
0x429b	      0xb800000000	                              mov eax, 0	      1894	convert.c	FUNCTION_67
0x42a0	              0xc9	                                   leave	      1895	convert.c	FUNCTION_67
0x42a1	              0xc3	                                     ret	      1895	convert.c	FUNCTION_67
crlf_to_worktree	CALL,11:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,1:DO,0:FOR,1	125
0x14d9	              0x55	                                push rbp	       595	convert.c	FUNCTION_30
0x14da	          0x4889e5	                            mov rbp, rsp	       595	convert.c	FUNCTION_30
0x14dd	        0x4883ec60	                           sub rsp, 0x60	       595	convert.c	FUNCTION_30
0x14e1	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       595	convert.c	FUNCTION_30
0x14e5	        0x488975c0	             mov qword [rbp - 0x40], rsi	       595	convert.c	FUNCTION_30
0x14e9	        0x488955b8	             mov qword [rbp - 0x48], rdx	       595	convert.c	FUNCTION_30
0x14ed	        0x48894db0	             mov qword [rbp - 0x50], rcx	       595	convert.c	FUNCTION_30
0x14f1	        0x448945ac	             mov dword [rbp - 0x54], r8d	       595	convert.c	FUNCTION_30
0x14f5	    0x64488b042528	                mov rax, qword fs:[0x28]	       595	convert.c	FUNCTION_30
0x14fe	        0x488945f8	                mov qword [rbp - 8], rax	       595	convert.c	FUNCTION_30
0x1502	            0x31c0	                            xor eax, eax	       595	convert.c	FUNCTION_30
0x1504	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       596	convert.c	FUNCTION_30
0x150c	      0x48837db800	               cmp qword [rbp - 0x48], 0	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1511	            0x740f	                            je 0x4001562	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1513	          0x8b45ac	             mov eax, dword [rbp - 0x54]	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1516	            0x89c7	                            mov edi, eax	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1518	      0xe8c3f1ffff	                     call sym.output_eol	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x151d	          0x83f801	                              cmp eax, 1	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1520	            0x740a	                            je 0x400156c	       599	convert.c	FUNCTION_30	IF_1	CALL_1
0x1522	      0xb800000000	                              mov eax, 0	       600	convert.c	FUNCTION_30	IF_1
0x1527	      0xe96b010000	                           jmp 0x40016d7	       600	convert.c	FUNCTION_30	IF_1
0x152c	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       602	convert.c	FUNCTION_30	CALL_2
0x1530	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       602	convert.c	FUNCTION_30	CALL_2
0x1534	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       602	convert.c	FUNCTION_30	CALL_2
0x1538	          0x4889ce	                            mov rsi, rcx	       602	convert.c	FUNCTION_30	CALL_2
0x153b	          0x4889c7	                            mov rdi, rax	       602	convert.c	FUNCTION_30	CALL_2
0x153e	      0xe881edffff	                   call sym.gather_stats	       602	convert.c	FUNCTION_30	CALL_2
0x1543	          0x8b55ac	             mov edx, dword [rbp - 0x54]	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x1546	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x154a	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x154e	          0x4889ce	                            mov rsi, rcx	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x1551	          0x4889c7	                            mov rdi, rax	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x1554	      0xe8bff3ffff	        call sym.will_convert_lf_to_crlf	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x1559	            0x85c0	                           test eax, eax	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x155b	            0x750a	                           jne 0x40015a7	       603	convert.c	FUNCTION_30	IF_2	CALL_3
0x155d	      0xb800000000	                              mov eax, 0	       604	convert.c	FUNCTION_30	IF_2
0x1562	      0xe930010000	                           jmp 0x40016d7	       604	convert.c	FUNCTION_30	IF_2
0x1567	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       607	convert.c	FUNCTION_30	IF_3
0x156b	        0x488b4010	            mov rax, qword [rax + 0x10] 	       607	convert.c	FUNCTION_30	IF_3
0x156f	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	       607	convert.c	FUNCTION_30	IF_3
0x1573	            0x7515	                           jne 0x40015ca	       607	convert.c	FUNCTION_30	IF_3
0x1575	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       608	convert.c	FUNCTION_30	CALL_4
0x1579	      0xbe00000000	                              mov esi, 0	       608	convert.c	FUNCTION_30	CALL_4
0x157e	          0x4889c7	                            mov rdi, rax	       608	convert.c	FUNCTION_30	CALL_4
0x1581	      0xe800000000	                          call 0x40015c6	       608	convert.c	FUNCTION_30	CALL_4
0x1586	        0x488945d0	             mov qword [rbp - 0x30], rax	       608	convert.c	FUNCTION_30	CALL_4
0x158a	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       610	convert.c	FUNCTION_30	CALL_5
0x158d	            0x89c2	                            mov edx, eax	       610	convert.c	FUNCTION_30	CALL_5
0x158f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       610	convert.c	FUNCTION_30	CALL_5
0x1593	          0x4801c2	                            add rdx, rax	       610	convert.c	FUNCTION_30	CALL_5
0x1596	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       610	convert.c	FUNCTION_30	CALL_5
0x159a	          0x4889d6	                            mov rsi, rdx	       610	convert.c	FUNCTION_30	CALL_5
0x159d	          0x4889c7	                            mov rdi, rax	       610	convert.c	FUNCTION_30	CALL_5
0x15a0	      0xe800000000	                          call 0x40015e5	       610	convert.c	FUNCTION_30	CALL_5
0x15a5	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15a9	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15ad	      0xbe0a000000	                            mov esi, 0xa	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15b2	          0x4889c7	                            mov rdi, rax	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15b5	      0xe800000000	                          call 0x40015fa	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15ba	        0x488945d8	             mov qword [rbp - 0x28], rax	       612	convert.c	FUNCTION_30	FOR_1	CALL_6
0x15be	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       613	convert.c	FUNCTION_30	FOR_1	IF_4
0x15c3	     0xf84a5000000	                            je 0x40016ae	       613	convert.c	FUNCTION_30	FOR_1	IF_4
0x15c9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15cd	        0x483b45c0	             cmp rax, qword [rbp - 0x40]	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15d1	            0x763c	                           jbe 0x400164f	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15d3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15d7	        0x4883e801	                              sub rax, 1	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15db	           0xfb600	                   movzx eax, byte [rax]	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15de	            0x3c0d	                             cmp al, 0xd	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15e0	            0x752d	                           jne 0x400164f	       615	convert.c	FUNCTION_30	FOR_1	IF_5
0x15e2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15e6	        0x4883c001	                              add rax, 1	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15ea	          0x4889c2	                            mov rdx, rax	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15ed	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15f1	          0x4829c2	                            sub rdx, rax	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15f4	          0x4889d0	                            mov rax, rdx	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15f7	          0x4889c2	                            mov rdx, rax	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15fa	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x15fe	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x1602	          0x4889ce	                            mov rsi, rcx	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x1605	          0x4889c7	                            mov rdi, rax	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x1608	      0xe800000000	                          call 0x400164d	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x160d	            0xeb35	                           jmp 0x4001684	       616	convert.c	FUNCTION_30	FOR_1	IF_5	CALL_7
0x160f	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1613	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1617	          0x4829c2	                            sub rdx, rax	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x161a	          0x4889d0	                            mov rax, rdx	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x161d	          0x4889c2	                            mov rdx, rax	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1620	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1624	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1628	          0x4889ce	                            mov rsi, rcx	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x162b	          0x4889c7	                            mov rdi, rax	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x162e	      0xe800000000	                          call 0x4001673	       618	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_8
0x1633	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       619	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_9
0x1637	      0xbe00000000	                              mov esi, 0	       619	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_9
0x163c	          0x4889c7	                            mov rdi, rax	       619	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_9
0x163f	      0xe8efebffff	                  call sym.strbuf_addstr	       619	convert.c	FUNCTION_30	FOR_1	ELSE_1	CALL_9
0x1644	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       621	convert.c	FUNCTION_30	FOR_1
0x1648	        0x4883c001	                              add rax, 1	       621	convert.c	FUNCTION_30	FOR_1
0x164c	          0x4889c2	                            mov rdx, rax	       621	convert.c	FUNCTION_30	FOR_1
0x164f	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       621	convert.c	FUNCTION_30	FOR_1
0x1653	          0x4829c2	                            sub rdx, rax	       621	convert.c	FUNCTION_30	FOR_1
0x1656	          0x4889d0	                            mov rax, rdx	       621	convert.c	FUNCTION_30	FOR_1
0x1659	        0x482945b8	             sub qword [rbp - 0x48], rax	       621	convert.c	FUNCTION_30	FOR_1
0x165d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       622	convert.c	FUNCTION_30	FOR_1
0x1661	        0x4883c001	                              add rax, 1	       622	convert.c	FUNCTION_30	FOR_1
0x1665	        0x488945c0	             mov qword [rbp - 0x40], rax	       622	convert.c	FUNCTION_30	FOR_1
0x1669	      0xe937ffffff	                           jmp 0x40015e5	       623	convert.c	FUNCTION_30	FOR_1
0x166e	              0x90	                                     nop	       614	convert.c	FUNCTION_30	FOR_1	IF_4
0x166f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       624	convert.c	FUNCTION_30	CALL_10
0x1673	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       624	convert.c	FUNCTION_30	CALL_10
0x1677	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       624	convert.c	FUNCTION_30	CALL_10
0x167b	          0x4889ce	                            mov rsi, rcx	       624	convert.c	FUNCTION_30	CALL_10
0x167e	          0x4889c7	                            mov rdi, rax	       624	convert.c	FUNCTION_30	CALL_10
0x1681	      0xe800000000	                          call 0x40016c6	       624	convert.c	FUNCTION_30	CALL_10
0x1686	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       626	convert.c	FUNCTION_30	CALL_11
0x168a	          0x4889c7	                            mov rdi, rax	       626	convert.c	FUNCTION_30	CALL_11
0x168d	      0xe800000000	                          call 0x40016d2	       626	convert.c	FUNCTION_30	CALL_11
0x1692	      0xb801000000	                              mov eax, 1	       627	convert.c	FUNCTION_30
0x1697	        0x488b75f8	                mov rsi, qword [rbp - 8]	       628	convert.c	FUNCTION_30
0x169b	    0x644833342528	                xor rsi, qword fs:[0x28]	       628	convert.c	FUNCTION_30
0x16a4	            0x7405	                            je 0x40016eb	       628	convert.c	FUNCTION_30
0x16a6	      0xe800000000	                          call 0x40016eb	       628	convert.c	FUNCTION_30
0x16ab	              0xc9	                                   leave	       628	convert.c	FUNCTION_30
0x16ac	              0xc3	                                     ret	       628	convert.c	FUNCTION_30
convert_to_git	CALL,6:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,0:DO,0:FOR,0	121
0x31d1	              0x55	                                push rbp	      1390	convert.c	FUNCTION_50
0x31d2	          0x4889e5	                            mov rbp, rsp	      1390	convert.c	FUNCTION_50
0x31d5	        0x4883ec70	                           sub rsp, 0x70	      1390	convert.c	FUNCTION_50
0x31d9	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1390	convert.c	FUNCTION_50
0x31dd	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1390	convert.c	FUNCTION_50
0x31e1	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1390	convert.c	FUNCTION_50
0x31e5	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1390	convert.c	FUNCTION_50
0x31e9	        0x4c894598	              mov qword [rbp - 0x68], r8	      1390	convert.c	FUNCTION_50
0x31ed	        0x44894d94	             mov dword [rbp - 0x6c], r9d	      1390	convert.c	FUNCTION_50
0x31f1	    0x64488b042528	                mov rax, qword fs:[0x28]	      1390	convert.c	FUNCTION_50
0x31fa	        0x488945f8	                mov qword [rbp - 8], rax	      1390	convert.c	FUNCTION_50
0x31fe	            0x31c0	                            xor eax, eax	      1390	convert.c	FUNCTION_50
0x3200	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1391	convert.c	FUNCTION_50
0x3207	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1394	convert.c	FUNCTION_50	CALL_1
0x320b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1394	convert.c	FUNCTION_50	CALL_1
0x320f	          0x4889d6	                            mov rsi, rdx	      1394	convert.c	FUNCTION_50	CALL_1
0x3212	          0x4889c7	                            mov rdi, rax	      1394	convert.c	FUNCTION_50	CALL_1
0x3215	      0xe828fcffff	                  call sym.convert_attrs	      1394	convert.c	FUNCTION_50	CALL_1
0x321a	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	      1396	convert.c	FUNCTION_50	CALL_2
0x321e	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1396	convert.c	FUNCTION_50	CALL_2
0x3222	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1396	convert.c	FUNCTION_50	CALL_2
0x3226	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1396	convert.c	FUNCTION_50	CALL_2
0x322a	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1396	convert.c	FUNCTION_50	CALL_2
0x322e	            0x6a00	                                  push 0	      1396	convert.c	FUNCTION_50	CALL_2
0x3230	            0x6a01	                                  push 1	      1396	convert.c	FUNCTION_50	CALL_2
0x3232	          0x4989f9	                             mov r9, rdi	      1396	convert.c	FUNCTION_50	CALL_2
0x3235	          0x4989c8	                             mov r8, rcx	      1396	convert.c	FUNCTION_50	CALL_2
0x3238	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1396	convert.c	FUNCTION_50	CALL_2
0x323d	          0x4889c7	                            mov rdi, rax	      1396	convert.c	FUNCTION_50	CALL_2
0x3240	      0xe89ef0ffff	                   call sym.apply_filter	      1396	convert.c	FUNCTION_50	CALL_2
0x3245	        0x4883c410	                           add rsp, 0x10	      1396	convert.c	FUNCTION_50	CALL_2
0x3249	           0x945cc	              or dword [rbp - 0x34], eax	      1396	convert.c	FUNCTION_50	CALL_2
0x324c	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1397	convert.c	FUNCTION_50	IF_1
0x3250	            0x7531	                           jne 0x40032c3	      1397	convert.c	FUNCTION_50	IF_1
0x3252	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1397	convert.c	FUNCTION_50	IF_1
0x3256	          0x4885c0	                           test rax, rax	      1397	convert.c	FUNCTION_50	IF_1
0x3259	            0x7428	                            je 0x40032c3	      1397	convert.c	FUNCTION_50	IF_1
0x325b	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1397	convert.c	FUNCTION_50	IF_1
0x325f	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1397	convert.c	FUNCTION_50	IF_1
0x3262	            0x85c0	                           test eax, eax	      1397	convert.c	FUNCTION_50	IF_1
0x3264	            0x741d	                            je 0x40032c3	      1397	convert.c	FUNCTION_50	IF_1
0x3266	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1398	convert.c	FUNCTION_50	CALL_3
0x326a	          0x488b10	                    mov rdx, qword [rax]	      1398	convert.c	FUNCTION_50	CALL_3
0x326d	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1398	convert.c	FUNCTION_50	CALL_3
0x3271	          0x4889c6	                            mov rsi, rax	      1398	convert.c	FUNCTION_50	CALL_3
0x3274	      0xbf00000000	                              mov edi, 0	      1398	convert.c	FUNCTION_50	CALL_3
0x3279	      0xb800000000	                              mov eax, 0	      1398	convert.c	FUNCTION_50	CALL_3
0x327e	      0xe800000000	                          call 0x40032c3	      1398	convert.c	FUNCTION_50	CALL_3
0x3283	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1400	convert.c	FUNCTION_50	IF_2
0x3287	            0x741f	                            je 0x40032e8	      1400	convert.c	FUNCTION_50	IF_2
0x3289	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1400	convert.c	FUNCTION_50	IF_2
0x328e	            0x7418	                            je 0x40032e8	      1400	convert.c	FUNCTION_50	IF_2
0x3290	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1401	convert.c	FUNCTION_50	IF_2
0x3294	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1401	convert.c	FUNCTION_50	IF_2
0x3298	        0x488945a8	             mov qword [rbp - 0x58], rax	      1401	convert.c	FUNCTION_50	IF_2
0x329c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1402	convert.c	FUNCTION_50	IF_2
0x32a0	        0x488b4008	                mov rax, qword [rax + 8]	      1402	convert.c	FUNCTION_50	IF_2
0x32a4	        0x488945a0	             mov qword [rbp - 0x60], rax	      1402	convert.c	FUNCTION_50	IF_2
0x32a8	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1405	convert.c	FUNCTION_50	CALL_4
0x32ac	        0x448b4594	             mov r8d, dword [rbp - 0x6c]	      1405	convert.c	FUNCTION_50	CALL_4
0x32b0	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1405	convert.c	FUNCTION_50	CALL_4
0x32b4	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1405	convert.c	FUNCTION_50	CALL_4
0x32b8	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1405	convert.c	FUNCTION_50	CALL_4
0x32bc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1405	convert.c	FUNCTION_50	CALL_4
0x32c0	          0x4589c1	                            mov r9d, r8d	      1405	convert.c	FUNCTION_50	CALL_4
0x32c3	          0x4989f8	                             mov r8, rdi	      1405	convert.c	FUNCTION_50	CALL_4
0x32c6	          0x4889c7	                            mov rdi, rax	      1405	convert.c	FUNCTION_50	CALL_4
0x32c9	      0xe8c9dbffff	                  call sym.encode_to_git	      1405	convert.c	FUNCTION_50	CALL_4
0x32ce	           0x945cc	              or dword [rbp - 0x34], eax	      1405	convert.c	FUNCTION_50	CALL_4
0x32d1	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1406	convert.c	FUNCTION_50	IF_3
0x32d5	            0x741f	                            je 0x4003336	      1406	convert.c	FUNCTION_50	IF_3
0x32d7	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1406	convert.c	FUNCTION_50	IF_3
0x32dc	            0x7418	                            je 0x4003336	      1406	convert.c	FUNCTION_50	IF_3
0x32de	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1407	convert.c	FUNCTION_50	IF_3
0x32e2	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1407	convert.c	FUNCTION_50	IF_3
0x32e6	        0x488945a8	             mov qword [rbp - 0x58], rax	      1407	convert.c	FUNCTION_50	IF_3
0x32ea	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1408	convert.c	FUNCTION_50	IF_3
0x32ee	        0x488b4008	                mov rax, qword [rax + 8]	      1408	convert.c	FUNCTION_50	IF_3
0x32f2	        0x488945a0	             mov qword [rbp - 0x60], rax	      1408	convert.c	FUNCTION_50	IF_3
0x32f6	          0x8b4594	             mov eax, dword [rbp - 0x6c]	      1411	convert.c	FUNCTION_50	IF_4
0x32f9	          0x83e008	                              and eax, 8	      1411	convert.c	FUNCTION_50	IF_4
0x32fc	            0x85c0	                           test eax, eax	      1411	convert.c	FUNCTION_50	IF_4
0x32fe	            0x7554	                           jne 0x4003394	      1411	convert.c	FUNCTION_50	IF_4
0x3300	        0x448b4ddc	             mov r9d, dword [rbp - 0x24]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3304	        0x4c8b4598	              mov r8, qword [rbp - 0x68]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3308	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x330c	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3310	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3314	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3318	        0x4883ec08	                              sub rsp, 8	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x331c	          0x8b7d94	             mov edi, dword [rbp - 0x6c]	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x331f	              0x57	                                push rdi	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3320	          0x4889c7	                            mov rdi, rax	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3323	      0xe8fedeffff	                    call sym.crlf_to_git	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x3328	        0x4883c410	                           add rsp, 0x10	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x332c	           0x945cc	              or dword [rbp - 0x34], eax	      1412	convert.c	FUNCTION_50	IF_4	CALL_5
0x332f	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1413	convert.c	FUNCTION_50	IF_4	IF_5
0x3333	            0x741f	                            je 0x4003394	      1413	convert.c	FUNCTION_50	IF_4	IF_5
0x3335	      0x48837d9800	               cmp qword [rbp - 0x68], 0	      1413	convert.c	FUNCTION_50	IF_4	IF_5
0x333a	            0x7418	                            je 0x4003394	      1413	convert.c	FUNCTION_50	IF_4	IF_5
0x333c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1414	convert.c	FUNCTION_50	IF_4	IF_5
0x3340	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1414	convert.c	FUNCTION_50	IF_4	IF_5
0x3344	        0x488945a8	             mov qword [rbp - 0x58], rax	      1414	convert.c	FUNCTION_50	IF_4	IF_5
0x3348	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1415	convert.c	FUNCTION_50	IF_4	IF_5
0x334c	        0x488b4008	                mov rax, qword [rax + 8]	      1415	convert.c	FUNCTION_50	IF_4	IF_5
0x3350	        0x488945a0	             mov qword [rbp - 0x60], rax	      1415	convert.c	FUNCTION_50	IF_4	IF_5
0x3354	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1418	convert.c	FUNCTION_50	CALL_6
0x3357	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	      1418	convert.c	FUNCTION_50	CALL_6
0x335b	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1418	convert.c	FUNCTION_50	CALL_6
0x335f	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	      1418	convert.c	FUNCTION_50	CALL_6
0x3363	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1418	convert.c	FUNCTION_50	CALL_6
0x3367	          0x4189f8	                            mov r8d, edi	      1418	convert.c	FUNCTION_50	CALL_6
0x336a	          0x4889c7	                            mov rdi, rax	      1418	convert.c	FUNCTION_50	CALL_6
0x336d	      0xe86ef3ffff	                   call sym.ident_to_git	      1418	convert.c	FUNCTION_50	CALL_6
0x3372	           0xb45cc	              or eax, dword [rbp - 0x34]	      1418	convert.c	FUNCTION_50	CALL_6
0x3375	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1419	convert.c	FUNCTION_50
0x3379	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1419	convert.c	FUNCTION_50
0x3382	            0x7405	                            je 0x40033c9	      1419	convert.c	FUNCTION_50
0x3384	      0xe800000000	                          call 0x40033c9	      1419	convert.c	FUNCTION_50
0x3389	              0xc9	                                   leave	      1419	convert.c	FUNCTION_50
0x338a	              0xc3	                                     ret	      1419	convert.c	FUNCTION_50
get_cached_convert_stats_ascii	CALL,3:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	31
0x593	              0x55	                                push rbp	       142	convert.c	FUNCTION_17
0x594	          0x4889e5	                            mov rbp, rsp	       142	convert.c	FUNCTION_17
0x597	        0x4883ec30	                           sub rsp, 0x30	       142	convert.c	FUNCTION_17
0x59b	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       142	convert.c	FUNCTION_17
0x59f	        0x488975d0	             mov qword [rbp - 0x30], rsi	       142	convert.c	FUNCTION_17
0x5a3	    0x64488b042528	                mov rax, qword fs:[0x28]	       142	convert.c	FUNCTION_17
0x5ac	        0x488945f8	                mov qword [rbp - 8], rax	       142	convert.c	FUNCTION_17
0x5b0	            0x31c0	                            xor eax, eax	       142	convert.c	FUNCTION_17
0x5b2	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       145	convert.c	FUNCTION_17	CALL_1
0x5b6	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	       145	convert.c	FUNCTION_17	CALL_1
0x5ba	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       145	convert.c	FUNCTION_17	CALL_1
0x5be	          0x4889ce	                            mov rsi, rcx	       145	convert.c	FUNCTION_17	CALL_1
0x5c1	          0x4889c7	                            mov rdi, rax	       145	convert.c	FUNCTION_17	CALL_1
0x5c4	      0xe800000000	                          call 0x4000609	       145	convert.c	FUNCTION_17	CALL_1
0x5c9	        0x488945e8	             mov qword [rbp - 0x18], rax	       145	convert.c	FUNCTION_17	CALL_1
0x5cd	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       146	convert.c	FUNCTION_17	CALL_2
0x5d1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       146	convert.c	FUNCTION_17	CALL_2
0x5d5	          0x4889d6	                            mov rsi, rdx	       146	convert.c	FUNCTION_17	CALL_2
0x5d8	          0x4889c7	                            mov rdi, rax	       146	convert.c	FUNCTION_17	CALL_2
0x5db	      0xe84effffff	     call sym.gather_convert_stats_ascii	       146	convert.c	FUNCTION_17	CALL_2
0x5e0	        0x488945f0	             mov qword [rbp - 0x10], rax	       146	convert.c	FUNCTION_17	CALL_2
0x5e4	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       147	convert.c	FUNCTION_17	CALL_3
0x5e8	          0x4889c7	                            mov rdi, rax	       147	convert.c	FUNCTION_17	CALL_3
0x5eb	      0xe800000000	                          call 0x4000630	       147	convert.c	FUNCTION_17	CALL_3
0x5f0	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       148	convert.c	FUNCTION_17
0x5f4	        0x488b4df8	                mov rcx, qword [rbp - 8]	       149	convert.c	FUNCTION_17
0x5f8	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       149	convert.c	FUNCTION_17
0x601	            0x7405	                            je 0x4000648	       149	convert.c	FUNCTION_17
0x603	      0xe800000000	                          call 0x4000648	       149	convert.c	FUNCTION_17
0x608	              0xc9	                                   leave	       149	convert.c	FUNCTION_17
0x609	              0xc3	                                     ret	       149	convert.c	FUNCTION_17
check_global_conv_flags_eol	CALL,8:WHILE,0:functions,0:IF,6:SWITCH,0:ELSE,3:DO,0:FOR,0	78
0x754	              0x55	                                push rbp	       200	convert.c	FUNCTION_21
0x755	          0x4889e5	                            mov rbp, rsp	       200	convert.c	FUNCTION_21
0x758	        0x4883ec20	                           sub rsp, 0x20	       200	convert.c	FUNCTION_21
0x75c	        0x48897df8	                mov qword [rbp - 8], rdi	       200	convert.c	FUNCTION_21
0x760	          0x8975f4	              mov dword [rbp - 0xc], esi	       200	convert.c	FUNCTION_21
0x763	        0x488955e8	             mov qword [rbp - 0x18], rdx	       200	convert.c	FUNCTION_21
0x767	        0x48894de0	             mov qword [rbp - 0x20], rcx	       200	convert.c	FUNCTION_21
0x76b	        0x448945f0	             mov dword [rbp - 0x10], r8d	       200	convert.c	FUNCTION_21
0x76f	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       201	convert.c	FUNCTION_21	IF_1
0x773	          0x8b400c	              mov eax, dword [rax + 0xc]	       201	convert.c	FUNCTION_21	IF_1
0x776	            0x85c0	                           test eax, eax	       201	convert.c	FUNCTION_21	IF_1
0x778	            0x7467	                            je 0x4000821	       201	convert.c	FUNCTION_21	IF_1
0x77a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       201	convert.c	FUNCTION_21	IF_1
0x77e	          0x8b400c	              mov eax, dword [rax + 0xc]	       201	convert.c	FUNCTION_21	IF_1
0x781	            0x85c0	                           test eax, eax	       201	convert.c	FUNCTION_21	IF_1
0x783	            0x755c	                           jne 0x4000821	       201	convert.c	FUNCTION_21	IF_1
0x785	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x788	          0x83e001	                              and eax, 1	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x78b	            0x85c0	                           test eax, eax	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x78d	            0x7421	                            je 0x40007f0	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x78f	      0xbf00000000	                              mov edi, 0	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x794	      0xe8cffaffff	                               call sym.	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x799	          0x4889c2	                            mov rdx, rax	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x79c	        0x488b45f8	                mov rax, qword [rbp - 8]	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x7a0	          0x4889c6	                            mov rsi, rax	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x7a3	          0x4889d7	                            mov rdi, rdx	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x7a6	      0xb800000000	                              mov eax, 0	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x7ab	      0xe800000000	                          call 0x40007f0	       206	convert.c	FUNCTION_21	IF_1	CALL_2
0x7b0	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       207	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3
0x7b3	          0x83e002	                              and eax, 2	       207	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3
0x7b6	            0x85c0	                           test eax, eax	       207	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3
0x7b8	     0xf8491000000	                            je 0x400088f	       207	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3
0x7be	      0xbf00000000	                              mov edi, 0	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7c3	      0xe8a0faffff	                               call sym.	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7c8	          0x4889c2	                            mov rdx, rax	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7cb	        0x488b45f8	                mov rax, qword [rbp - 8]	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7cf	          0x4889c6	                            mov rsi, rax	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7d2	          0x4889d7	                            mov rdi, rdx	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7d5	      0xb800000000	                              mov eax, 0	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7da	      0xe800000000	                          call 0x400081f	       208	convert.c	FUNCTION_21	IF_1	ELSE_1	IF_3	CALL_4
0x7df	            0xeb6e	                           jmp 0x400088f	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x7e1	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7e5	          0x8b4008	                mov eax, dword [rax + 8]	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7e8	            0x85c0	                           test eax, eax	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7ea	            0x7464	                            je 0x4000890	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7ec	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7f0	          0x8b4008	                mov eax, dword [rax + 8]	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7f3	            0x85c0	                           test eax, eax	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7f5	            0x7559	                           jne 0x4000890	       211	convert.c	FUNCTION_21	ELSE_2	IF_4
0x7f7	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       215	convert.c	FUNCTION_21	ELSE_2	IF_4	IF_5
0x7fa	          0x83e001	                              and eax, 1	       215	convert.c	FUNCTION_21	ELSE_2	IF_4	IF_5
0x7fd	            0x85c0	                           test eax, eax	       215	convert.c	FUNCTION_21	ELSE_2	IF_4	IF_5
0x7ff	            0x7421	                            je 0x4000862	       215	convert.c	FUNCTION_21	ELSE_2	IF_4	IF_5
0x801	      0xbf00000000	                              mov edi, 0	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x806	      0xe85dfaffff	                               call sym.	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x80b	          0x4889c2	                            mov rdx, rax	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x80e	        0x488b45f8	                mov rax, qword [rbp - 8]	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x812	          0x4889c6	                            mov rsi, rax	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x815	          0x4889d7	                            mov rdi, rdx	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x818	      0xb800000000	                              mov eax, 0	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x81d	      0xe800000000	                          call 0x4000862	       216	convert.c	FUNCTION_21	ELSE_2	IF_4	CALL_6
0x822	          0x8b45f0	             mov eax, dword [rbp - 0x10]	       217	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6
0x825	          0x83e002	                              and eax, 2	       217	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6
0x828	            0x85c0	                           test eax, eax	       217	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6
0x82a	            0x7424	                            je 0x4000890	       217	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6
0x82c	      0xbf00000000	                              mov edi, 0	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x831	      0xe832faffff	                               call sym.	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x836	          0x4889c2	                            mov rdx, rax	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x839	        0x488b45f8	                mov rax, qword [rbp - 8]	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x83d	          0x4889c6	                            mov rsi, rax	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x840	          0x4889d7	                            mov rdi, rdx	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x843	      0xb800000000	                              mov eax, 0	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x848	      0xe800000000	                          call 0x400088d	       218	convert.c	FUNCTION_21	ELSE_2	IF_4	ELSE_3	IF_6	CALL_8
0x84d	            0xeb01	                           jmp 0x4000890	       222	convert.c	FUNCTION_21
0x84f	              0x90	                                     nop	       205	convert.c	FUNCTION_21	IF_1	IF_2
0x850	              0x90	                                     nop	       222	convert.c	FUNCTION_21
0x851	              0xc9	                                   leave	       222	convert.c	FUNCTION_21
0x852	              0xc3	                                     ret	       222	convert.c	FUNCTION_21
check_roundtrip	CALL,5:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	76
0xd8b	              0x55	                                push rbp	       351	convert.c	FUNCTION_26
0xd8c	          0x4889e5	                            mov rbp, rsp	       351	convert.c	FUNCTION_26
0xd8f	        0x4883ec30	                           sub rsp, 0x30	       351	convert.c	FUNCTION_26
0xd93	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       351	convert.c	FUNCTION_26
0xd97	    0x488b05000000	            mov rax, qword [0x04000dde] 	       357	convert.c	FUNCTION_26	CALL_1
0xd9e	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       357	convert.c	FUNCTION_26	CALL_1
0xda2	          0x4889d6	                            mov rsi, rdx	       357	convert.c	FUNCTION_26	CALL_1
0xda5	          0x4889c7	                            mov rdi, rax	       357	convert.c	FUNCTION_26	CALL_1
0xda8	      0xe800000000	                          call 0x4000ded	       357	convert.c	FUNCTION_26	CALL_1
0xdad	        0x488945f0	             mov qword [rbp - 0x10], rax	       357	convert.c	FUNCTION_26	CALL_1
0xdb1	      0x48837df000	               cmp qword [rbp - 0x10], 0	       360	convert.c	FUNCTION_26	IF_1
0xdb6	            0x750a	                           jne 0x4000e02	       360	convert.c	FUNCTION_26	IF_1
0xdb8	      0xb800000000	                              mov eax, 0	       361	convert.c	FUNCTION_26	IF_1
0xdbd	      0xe9d3000000	                           jmp 0x4000ed5	       361	convert.c	FUNCTION_26	IF_1
0xdc2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       362	convert.c	FUNCTION_26	CALL_2
0xdc6	          0x4889c7	                            mov rdi, rax	       362	convert.c	FUNCTION_26	CALL_2
0xdc9	      0xe800000000	                          call 0x4000e0e	       362	convert.c	FUNCTION_26	CALL_2
0xdce	          0x4889c2	                            mov rdx, rax	       362	convert.c	FUNCTION_26	CALL_2
0xdd1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       362	convert.c	FUNCTION_26	CALL_2
0xdd5	          0x4801d0	                            add rax, rdx	       362	convert.c	FUNCTION_26	CALL_2
0xdd8	        0x488945f8	                mov qword [rbp - 8], rax	       362	convert.c	FUNCTION_26	CALL_2
0xddc	    0x488b05000000	            mov rax, qword [0x04000e23] 	       363	convert.c	FUNCTION_26	CALL_3
0xde3	          0x4889c7	                            mov rdi, rax	       363	convert.c	FUNCTION_26	CALL_3
0xde6	      0xe800000000	                          call 0x4000e2b	       363	convert.c	FUNCTION_26	CALL_3
0xdeb	          0x8945ec	             mov dword [rbp - 0x14], eax	       363	convert.c	FUNCTION_26	CALL_3
0xdee	      0x48837df000	               cmp qword [rbp - 0x10], 0	       373	convert.c	FUNCTION_26
0xdf3	     0xf8496000000	                            je 0x4000ecf	       373	convert.c	FUNCTION_26
0xdf9	    0x488b05000000	            mov rax, qword [0x04000e40] 	       370	convert.c	FUNCTION_26
0xe00	        0x483945f0	            cmp qword [rbp - 0x10], rax 	       364	convert.c	FUNCTION_26
0xe04	            0x7430	                            je 0x4000e76	       364	convert.c	FUNCTION_26
0xe06	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       371	convert.c	FUNCTION_26	CALL_4
0xe0a	        0x4883e801	                              sub rax, 1	       371	convert.c	FUNCTION_26	CALL_4
0xe0e	           0xfb600	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_26	CALL_4
0xe11	           0xfb6c0	                           movzx eax, al	       371	convert.c	FUNCTION_26	CALL_4
0xe14	            0x4898	                                    cdqe	       371	convert.c	FUNCTION_26	CALL_4
0xe16	     0xfb680000000	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_26	CALL_4
0xe1d	           0xfb6c0	                           movzx eax, al	       371	convert.c	FUNCTION_26	CALL_4
0xe20	          0x83e001	                              and eax, 1	       371	convert.c	FUNCTION_26	CALL_4
0xe23	            0x85c0	                           test eax, eax	       370	convert.c	FUNCTION_26
0xe25	            0x750f	                           jne 0x4000e76	       370	convert.c	FUNCTION_26
0xe27	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       371	convert.c	FUNCTION_26	CALL_4
0xe2b	        0x4883e801	                              sub rax, 1	       371	convert.c	FUNCTION_26	CALL_4
0xe2f	           0xfb600	                   movzx eax, byte [rax]	       371	convert.c	FUNCTION_26	CALL_4
0xe32	            0x3c2c	                            cmp al, 0x2c	       371	convert.c	FUNCTION_26	CALL_4
0xe34	            0x7559	                           jne 0x4000ecf	       371	convert.c	FUNCTION_26	CALL_4
0xe36	    0x488b15000000	            mov rdx, qword [0x04000e7d] 	       379	convert.c	FUNCTION_26
0xe3d	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       379	convert.c	FUNCTION_26
0xe40	            0x4898	                                    cdqe	       379	convert.c	FUNCTION_26
0xe42	          0x4801d0	                            add rax, rdx	       379	convert.c	FUNCTION_26
0xe45	        0x483b45f8	                cmp rax, qword [rbp - 8]	       373	convert.c	FUNCTION_26
0xe49	            0x743d	                            je 0x4000ec8	       373	convert.c	FUNCTION_26
0xe4b	    0x488b15000000	            mov rdx, qword [0x04000e92] 	       380	convert.c	FUNCTION_26
0xe52	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       380	convert.c	FUNCTION_26
0xe55	            0x4898	                                    cdqe	       380	convert.c	FUNCTION_26
0xe57	          0x4801d0	                            add rax, rdx	       380	convert.c	FUNCTION_26
0xe5a	        0x483b45f8	                cmp rax, qword [rbp - 8]	       379	convert.c	FUNCTION_26
0xe5e	            0x762f	                           jbe 0x4000ecf	       379	convert.c	FUNCTION_26
0xe60	        0x488b45f8	                mov rax, qword [rbp - 8]	       381	convert.c	FUNCTION_26	CALL_5
0xe64	           0xfb600	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_26	CALL_5
0xe67	           0xfb6c0	                           movzx eax, al	       381	convert.c	FUNCTION_26	CALL_5
0xe6a	            0x4898	                                    cdqe	       381	convert.c	FUNCTION_26	CALL_5
0xe6c	     0xfb680000000	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_26	CALL_5
0xe73	           0xfb6c0	                           movzx eax, al	       381	convert.c	FUNCTION_26	CALL_5
0xe76	          0x83e001	                              and eax, 1	       381	convert.c	FUNCTION_26	CALL_5
0xe79	            0x85c0	                           test eax, eax	       380	convert.c	FUNCTION_26
0xe7b	            0x750b	                           jne 0x4000ec8	       380	convert.c	FUNCTION_26
0xe7d	        0x488b45f8	                mov rax, qword [rbp - 8]	       381	convert.c	FUNCTION_26	CALL_5
0xe81	           0xfb600	                   movzx eax, byte [rax]	       381	convert.c	FUNCTION_26	CALL_5
0xe84	            0x3c2c	                            cmp al, 0x2c	       381	convert.c	FUNCTION_26	CALL_5
0xe86	            0x7507	                           jne 0x4000ecf	       381	convert.c	FUNCTION_26	CALL_5
0xe88	      0xb801000000	                              mov eax, 1	       373	convert.c	FUNCTION_26
0xe8d	            0xeb05	                           jmp 0x4000ed4	       364	convert.c	FUNCTION_26
0xe8f	      0xb800000000	                              mov eax, 0	       373	convert.c	FUNCTION_26
0xe94	              0x90	                                     nop	       364	convert.c	FUNCTION_26
0xe95	              0xc9	                                   leave	       384	convert.c	FUNCTION_26
0xe96	              0xc3	                                     ret	       384	convert.c	FUNCTION_26
has_crlf_in_index	CALL,4:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,0:DO,0:FOR,0	53
0x853	              0x55	                                push rbp	       225	convert.c	FUNCTION_22
0x854	          0x4889e5	                            mov rbp, rsp	       225	convert.c	FUNCTION_22
0x857	        0x4883ec40	                           sub rsp, 0x40	       225	convert.c	FUNCTION_22
0x85b	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       225	convert.c	FUNCTION_22
0x85f	        0x488975c0	             mov qword [rbp - 0x40], rsi	       225	convert.c	FUNCTION_22
0x863	    0x64488b042528	                mov rax, qword fs:[0x28]	       225	convert.c	FUNCTION_22
0x86c	        0x488945f8	                mov qword [rbp - 8], rax	       225	convert.c	FUNCTION_22
0x870	            0x31c0	                            xor eax, eax	       225	convert.c	FUNCTION_22
0x872	    0xc745d8000000	               mov dword [rbp - 0x28], 0	       229	convert.c	FUNCTION_22
0x879	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       231	convert.c	FUNCTION_22	CALL_1
0x87d	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       231	convert.c	FUNCTION_22	CALL_1
0x881	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       231	convert.c	FUNCTION_22	CALL_1
0x885	          0x4889ce	                            mov rsi, rcx	       231	convert.c	FUNCTION_22	CALL_1
0x888	          0x4889c7	                            mov rdi, rax	       231	convert.c	FUNCTION_22	CALL_1
0x88b	      0xe800000000	                          call 0x40008d0	       231	convert.c	FUNCTION_22	CALL_1
0x890	        0x488945e8	             mov qword [rbp - 0x18], rax	       231	convert.c	FUNCTION_22	CALL_1
0x894	      0x48837de800	               cmp qword [rbp - 0x18], 0	       232	convert.c	FUNCTION_22	IF_1
0x899	            0x7507	                           jne 0x40008e2	       232	convert.c	FUNCTION_22	IF_1
0x89b	      0xb800000000	                              mov eax, 0	       233	convert.c	FUNCTION_22	IF_1
0x8a0	            0xeb60	                           jmp 0x4000942	       233	convert.c	FUNCTION_22	IF_1
0x8a2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       235	convert.c	FUNCTION_22	CALL_2
0x8a6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       235	convert.c	FUNCTION_22	CALL_2
0x8aa	      0xbe0d000000	                            mov esi, 0xd	       235	convert.c	FUNCTION_22	CALL_2
0x8af	          0x4889c7	                            mov rdi, rax	       235	convert.c	FUNCTION_22	CALL_2
0x8b2	      0xe800000000	                          call 0x40008f7	       235	convert.c	FUNCTION_22	CALL_2
0x8b7	        0x488945f0	             mov qword [rbp - 0x10], rax	       235	convert.c	FUNCTION_22	CALL_2
0x8bb	      0x48837df000	               cmp qword [rbp - 0x10], 0	       236	convert.c	FUNCTION_22	IF_2
0x8c0	            0x7431	                            je 0x4000933	       236	convert.c	FUNCTION_22	IF_2
0x8c2	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8c6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8ca	          0x4889d6	                            mov rsi, rdx	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8cd	          0x4889c7	                            mov rdi, rax	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8d0	      0xe8bdfbffff	           call sym.gather_convert_stats	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8d5	          0x8945dc	             mov dword [rbp - 0x24], eax	       238	convert.c	FUNCTION_22	IF_2	CALL_3
0x8d8	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8db	          0x83e004	                              and eax, 4	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8de	            0x85c0	                           test eax, eax	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8e0	            0x7511	                           jne 0x4000933	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8e2	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       240	convert.c	FUNCTION_22	IF_2	IF_3
0x8e5	          0x83e002	                              and eax, 2	       240	convert.c	FUNCTION_22	IF_2	IF_3
0x8e8	            0x85c0	                           test eax, eax	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8ea	            0x7407	                            je 0x4000933	       239	convert.c	FUNCTION_22	IF_2	IF_3
0x8ec	    0xc745d8010000	               mov dword [rbp - 0x28], 1	       241	convert.c	FUNCTION_22	IF_2	IF_3
0x8f3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       243	convert.c	FUNCTION_22	CALL_4
0x8f7	          0x4889c7	                            mov rdi, rax	       243	convert.c	FUNCTION_22	CALL_4
0x8fa	      0xe800000000	                          call 0x400093f	       243	convert.c	FUNCTION_22	CALL_4
0x8ff	          0x8b45d8	             mov eax, dword [rbp - 0x28]	       244	convert.c	FUNCTION_22
0x902	        0x488b4df8	                mov rcx, qword [rbp - 8]	       245	convert.c	FUNCTION_22
0x906	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       245	convert.c	FUNCTION_22
0x90f	            0x7405	                            je 0x4000956	       245	convert.c	FUNCTION_22
0x911	      0xe800000000	                          call 0x4000956	       245	convert.c	FUNCTION_22
0x916	              0xc9	                                   leave	       245	convert.c	FUNCTION_22
0x917	              0xc3	                                     ret	       245	convert.c	FUNCTION_22
ident_free_fn	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	16
0x42a2	              0x55	                                push rbp	      1898	convert.c	FUNCTION_68
0x42a3	          0x4889e5	                            mov rbp, rsp	      1898	convert.c	FUNCTION_68
0x42a6	        0x4883ec20	                           sub rsp, 0x20	      1898	convert.c	FUNCTION_68
0x42aa	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1898	convert.c	FUNCTION_68
0x42ae	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1899	convert.c	FUNCTION_68
0x42b2	        0x488945f8	                mov qword [rbp - 8], rax	      1899	convert.c	FUNCTION_68
0x42b6	        0x488b45f8	                mov rax, qword [rbp - 8]	      1900	convert.c	FUNCTION_68	CALL_1
0x42ba	        0x4883c008	                              add rax, 8	      1900	convert.c	FUNCTION_68	CALL_1
0x42be	          0x4889c7	                            mov rdi, rax	      1900	convert.c	FUNCTION_68	CALL_1
0x42c1	      0xe800000000	                          call 0x4004306	      1900	convert.c	FUNCTION_68	CALL_1
0x42c6	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1901	convert.c	FUNCTION_68	CALL_2
0x42ca	          0x4889c7	                            mov rdi, rax	      1901	convert.c	FUNCTION_68	CALL_2
0x42cd	      0xe800000000	                          call 0x4004312	      1901	convert.c	FUNCTION_68	CALL_2
0x42d2	              0x90	                                     nop	      1902	convert.c	FUNCTION_68
0x42d3	              0xc9	                                   leave	      1902	convert.c	FUNCTION_68
0x42d4	              0xc3	                                     ret	      1902	convert.c	FUNCTION_68
count_ident	CALL,1:WHILE,2:functions,0:IF,7:SWITCH,0:ELSE,0:DO,0:FOR,0	59
0x260f	              0x55	                                push rbp	      1049	convert.c	FUNCTION_39
0x2610	          0x4889e5	                            mov rbp, rsp	      1049	convert.c	FUNCTION_39
0x2613	        0x4883ec20	                           sub rsp, 0x20	      1049	convert.c	FUNCTION_39
0x2617	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1049	convert.c	FUNCTION_39
0x261b	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1049	convert.c	FUNCTION_39
0x261f	    0xc745fc000000	                  mov dword [rbp - 4], 0	      1053	convert.c	FUNCTION_39
0x2626	      0xe9a2000000	                           jmp 0x400270d	      1056	convert.c	FUNCTION_39	WHILE_1
0x262b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1057	convert.c	FUNCTION_39	WHILE_1
0x262f	        0x488d5001	                      lea rdx, [rax + 1]	      1057	convert.c	FUNCTION_39	WHILE_1
0x2633	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1057	convert.c	FUNCTION_39	WHILE_1
0x2637	           0xfb600	                   movzx eax, byte [rax]	      1057	convert.c	FUNCTION_39	WHILE_1
0x263a	          0x8845fb	                  mov byte [rbp - 5], al	      1057	convert.c	FUNCTION_39	WHILE_1
0x263d	      0x48836de001	               sub qword [rbp - 0x20], 1	      1058	convert.c	FUNCTION_39	WHILE_1
0x2642	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1059	convert.c	FUNCTION_39	WHILE_1	IF_1
0x2646	            0x7405	                            je 0x400268d	      1059	convert.c	FUNCTION_39	WHILE_1	IF_1
0x2648	      0xe980000000	                           jmp 0x400270d	      1060	convert.c	FUNCTION_39	WHILE_1	IF_1
0x264d	      0x48837de002	               cmp qword [rbp - 0x20], 2	      1061	convert.c	FUNCTION_39	WHILE_1	IF_2
0x2652	     0xf8682000000	                           jbe 0x400271a	      1061	convert.c	FUNCTION_39	WHILE_1	IF_2
0x2658	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x265c	      0xba02000000	                              mov edx, 2	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x2661	          0x4889c6	                            mov rsi, rax	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x2664	      0xbf00000000	                              mov edi, 0	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x2669	      0xe800000000	                          call 0x40026ae	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x266e	            0x85c0	                           test eax, eax	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x2670	            0x7402	                            je 0x40026b4	      1063	convert.c	FUNCTION_39	WHILE_1	IF_3	CALL_1
0x2672	            0xeb59	                           jmp 0x400270d	      1064	convert.c	FUNCTION_39	WHILE_1	IF_3
0x2674	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1065	convert.c	FUNCTION_39	WHILE_1
0x2678	         0xfb64002	               movzx eax, byte [rax + 2]	      1065	convert.c	FUNCTION_39	WHILE_1
0x267c	          0x8845fb	                  mov byte [rbp - 5], al	      1065	convert.c	FUNCTION_39	WHILE_1
0x267f	      0x488345e803	               add qword [rbp - 0x18], 3	      1066	convert.c	FUNCTION_39	WHILE_1
0x2684	      0x48836de003	               sub qword [rbp - 0x20], 3	      1067	convert.c	FUNCTION_39	WHILE_1
0x2689	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1068	convert.c	FUNCTION_39	WHILE_1	IF_4
0x268d	            0x7504	                           jne 0x40026d3	      1068	convert.c	FUNCTION_39	WHILE_1	IF_4
0x268f	        0x8345fc01	                  add dword [rbp - 4], 1	      1069	convert.c	FUNCTION_39	WHILE_1	IF_4
0x2693	        0x807dfb3a	                cmp byte [rbp - 5], 0x3a	      1070	convert.c	FUNCTION_39	WHILE_1	IF_5
0x2697	            0x742d	                            je 0x4002706	      1070	convert.c	FUNCTION_39	WHILE_1	IF_5
0x2699	            0xeb32	                           jmp 0x400270d	      1071	convert.c	FUNCTION_39	WHILE_1	IF_5
0x269b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1077	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x269f	        0x488d5001	                      lea rdx, [rax + 1]	      1077	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26a3	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1077	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26a7	           0xfb600	                   movzx eax, byte [rax]	      1077	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26aa	          0x8845fb	                  mov byte [rbp - 5], al	      1077	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26ad	      0x48836de001	               sub qword [rbp - 0x20], 1	      1078	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26b2	        0x807dfb24	                cmp byte [rbp - 5], 0x24	      1079	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_6
0x26b6	            0x7506	                           jne 0x40026fe	      1079	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_6
0x26b8	        0x8345fc01	                  add dword [rbp - 4], 1	      1080	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_6
0x26bc	            0xeb0f	                           jmp 0x400270d	      1081	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_6
0x26be	        0x807dfb0a	                 cmp byte [rbp - 5], 0xa	      1083	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_7
0x26c2	            0x7502	                           jne 0x4002706	      1083	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_7
0x26c4	            0xeb07	                           jmp 0x400270d	      1084	convert.c	FUNCTION_39	WHILE_1	WHILE_2	IF_7
0x26c6	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1076	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26cb	            0x75ce	                           jne 0x40026db	      1076	convert.c	FUNCTION_39	WHILE_1	WHILE_2
0x26cd	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1056	convert.c	FUNCTION_39	WHILE_1
0x26d2	     0xf8553ffffff	                           jne 0x400266b	      1056	convert.c	FUNCTION_39	WHILE_1
0x26d8	            0xeb01	                           jmp 0x400271b	      1056	convert.c	FUNCTION_39	WHILE_1
0x26da	              0x90	                                     nop	      1062	convert.c	FUNCTION_39	WHILE_1	IF_2
0x26db	          0x8b45fc	                mov eax, dword [rbp - 4]	      1087	convert.c	FUNCTION_39
0x26de	              0xc9	                                   leave	      1088	convert.c	FUNCTION_39
0x26df	              0xc3	                                     ret	      1088	convert.c	FUNCTION_39
strbuf_addch	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	33
0x1c5	              0x55	                                push rbp	       226	strbuf.h	FUNCTION_4
0x1c6	          0x4889e5	                            mov rbp, rsp	       226	strbuf.h	FUNCTION_4
0x1c9	        0x4883ec10	                           sub rsp, 0x10	       226	strbuf.h	FUNCTION_4
0x1cd	        0x48897df8	                mov qword [rbp - 8], rdi	       226	strbuf.h	FUNCTION_4
0x1d1	          0x8975f4	              mov dword [rbp - 0xc], esi	       226	strbuf.h	FUNCTION_4
0x1d4	        0x488b45f8	                mov rax, qword [rbp - 8]	       227	strbuf.h	FUNCTION_4	IF_1	CALL_1
0x1d8	          0x4889c7	                            mov rdi, rax	       227	strbuf.h	FUNCTION_4	IF_1	CALL_1
0x1db	      0xe815ffffff	                   call sym.strbuf_avail	       227	strbuf.h	FUNCTION_4	IF_1	CALL_1
0x1e0	          0x4885c0	                           test rax, rax	       227	strbuf.h	FUNCTION_4	IF_1	CALL_1
0x1e3	            0x7511	                           jne 0x4000236	       227	strbuf.h	FUNCTION_4	IF_1	CALL_1
0x1e5	        0x488b45f8	                mov rax, qword [rbp - 8]	       228	strbuf.h	FUNCTION_4	CALL_2
0x1e9	      0xbe01000000	                              mov esi, 1	       228	strbuf.h	FUNCTION_4	CALL_2
0x1ee	          0x4889c7	                            mov rdi, rax	       228	strbuf.h	FUNCTION_4	CALL_2
0x1f1	      0xe800000000	                          call 0x4000236	       228	strbuf.h	FUNCTION_4	CALL_2
0x1f6	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_4
0x1fa	        0x488b7010	            mov rsi, qword [rax + 0x10] 	       229	strbuf.h	FUNCTION_4
0x1fe	        0x488b45f8	                mov rax, qword [rbp - 8]	       229	strbuf.h	FUNCTION_4
0x202	        0x488b4008	                mov rax, qword [rax + 8]	       229	strbuf.h	FUNCTION_4
0x206	        0x488d4801	                      lea rcx, [rax + 1]	       229	strbuf.h	FUNCTION_4
0x20a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       229	strbuf.h	FUNCTION_4
0x20e	        0x48894a08	                mov qword [rdx + 8], rcx	       229	strbuf.h	FUNCTION_4
0x212	          0x4801f0	                            add rax, rsi	       229	strbuf.h	FUNCTION_4
0x215	          0x8b55f4	              mov edx, dword [rbp - 0xc]	       229	strbuf.h	FUNCTION_4
0x218	            0x8810	                      mov byte [rax], dl	       229	strbuf.h	FUNCTION_4
0x21a	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_4
0x21e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       230	strbuf.h	FUNCTION_4
0x222	        0x488b45f8	                mov rax, qword [rbp - 8]	       230	strbuf.h	FUNCTION_4
0x226	        0x488b4008	                mov rax, qword [rax + 8]	       230	strbuf.h	FUNCTION_4
0x22a	          0x4801d0	                            add rax, rdx	       230	strbuf.h	FUNCTION_4
0x22d	          0xc60000	                       mov byte [rax], 0	       230	strbuf.h	FUNCTION_4
0x230	              0x90	                                     nop	       231	strbuf.h	FUNCTION_4
0x231	              0xc9	                                   leave	       231	strbuf.h	FUNCTION_4
0x232	              0xc3	                                     ret	       231	strbuf.h	FUNCTION_4
cascade_filter_fn	CALL,3:WHILE,1:functions,0:IF,8:SWITCH,0:ELSE,0:DO,0:FOR,0	187
0x3af3	              0x55	                                push rbp	      1684	convert.c	FUNCTION_62
0x3af4	          0x4889e5	                            mov rbp, rsp	      1684	convert.c	FUNCTION_62
0x3af7	        0x4883ec70	                           sub rsp, 0x70	      1684	convert.c	FUNCTION_62
0x3afb	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1684	convert.c	FUNCTION_62
0x3aff	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1684	convert.c	FUNCTION_62
0x3b03	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1684	convert.c	FUNCTION_62
0x3b07	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1684	convert.c	FUNCTION_62
0x3b0b	        0x4c894598	              mov qword [rbp - 0x68], r8	      1684	convert.c	FUNCTION_62
0x3b0f	    0x64488b042528	                mov rax, qword fs:[0x28]	      1684	convert.c	FUNCTION_62
0x3b18	        0x488945f8	                mov qword [rbp - 8], rax	      1684	convert.c	FUNCTION_62
0x3b1c	            0x31c0	                            xor eax, eax	      1684	convert.c	FUNCTION_62
0x3b1e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1685	convert.c	FUNCTION_62
0x3b22	        0x488945e0	             mov qword [rbp - 0x20], rax	      1685	convert.c	FUNCTION_62
0x3b26	    0x48c745d80000	               mov qword [rbp - 0x28], 0	      1686	convert.c	FUNCTION_62
0x3b2e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1687	convert.c	FUNCTION_62
0x3b32	          0x488b00	                    mov rax, qword [rax]	      1687	convert.c	FUNCTION_62
0x3b35	        0x488945e8	             mov qword [rbp - 0x18], rax	      1687	convert.c	FUNCTION_62
0x3b39	      0xe93c020000	                           jmp 0x4003dba	      1693	convert.c	FUNCTION_62	WHILE_1
0x3b3e	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1694	convert.c	FUNCTION_62	WHILE_1
0x3b42	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1694	convert.c	FUNCTION_62	WHILE_1
0x3b46	        0x488945d0	             mov qword [rbp - 0x30], rax	      1694	convert.c	FUNCTION_62	WHILE_1
0x3b4a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b4e	    0x8b901c040000	           mov edx, dword [rax + 0x41c] 	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b54	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b58	    0x8b8018040000	           mov eax, dword [rax + 0x418] 	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b5e	            0x39c2	                            cmp edx, eax	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b60	     0xf8dbe000000	                           jge 0x4003c64	      1697	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b66	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b6a	    0x8b9018040000	           mov edx, dword [rax + 0x418] 	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b70	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b74	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b7a	            0x29c2	                            sub edx, eax	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b7c	            0x89d0	                            mov eax, edx	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b7e	            0x4898	                                    cdqe	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b80	        0x488945c8	             mov qword [rbp - 0x38], rax	      1698	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3b84	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3b88	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3b8c	        0x488d0c02	                    lea rcx, [rdx + rax]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3b90	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3b94	        0x488d5018	                   lea rdx, [rax + 0x18]	      1700	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3b98	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1700	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3b9c	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1700	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3ba2	            0x4898	                                    cdqe	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3ba4	        0x488d3402	                    lea rsi, [rdx + rax]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3ba8	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bac	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bb0	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bb4	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bb8	          0x4989f8	                             mov r8, rdi	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bbb	          0x4889c7	                            mov rdi, rax	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bbe	      0xe800000000	                          call 0x4003c03	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bc3	            0x85c0	                           test eax, eax	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bc5	            0x740a	                            je 0x4003c11	      1699	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2	CALL_1
0x3bc7	      0xb8ffffffff	                     mov eax, 0xffffffff	      1702	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3bcc	      0xe9d7010000	                           jmp 0x4003de8	      1702	convert.c	FUNCTION_62	WHILE_1	IF_1	IF_2
0x3bd1	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bd5	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bdb	            0x89c1	                            mov ecx, eax	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bdd	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3be1	    0x8b9018040000	           mov edx, dword [rax + 0x418] 	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3be7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3beb	    0x8b801c040000	           mov eax, dword [rax + 0x41c] 	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bf1	            0x29c2	                            sub edx, eax	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bf3	            0x89d0	                            mov eax, edx	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bf5	            0x89c2	                            mov edx, eax	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bf7	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bfb	            0x29c2	                            sub edx, eax	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bfd	            0x89d0	                            mov eax, edx	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3bff	             0x1c8	                            add eax, ecx	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c01	            0x89c2	                            mov edx, eax	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c03	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c07	    0x89901c040000	            mov dword [rax + 0x41c], edx	      1703	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c0d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1704	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c11	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1704	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c15	          0x4829c2	                            sub rdx, rax	      1704	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c18	          0x4889d0	                            mov rax, rdx	      1704	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c1b	        0x488945d8	             mov qword [rbp - 0x28], rax	      1704	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c1f	      0xe956010000	                           jmp 0x4003dba	      1705	convert.c	FUNCTION_62	WHILE_1	IF_1
0x3c24	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c29	            0x7409	                            je 0x4003c74	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c2b	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c2f	          0x488b00	                    mov rax, qword [rax]	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c32	            0xeb05	                           jmp 0x4003c79	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c34	      0xb800000000	                              mov eax, 0	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c39	        0x488945c8	             mov qword [rbp - 0x38], rax	      1709	convert.c	FUNCTION_62	WHILE_1
0x3c3d	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1710	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3c42	            0x740d	                            je 0x4003c91	      1710	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3c44	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1710	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3c48	          0x4885c0	                           test rax, rax	      1710	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3c4b	     0xf8439010000	                            je 0x4003dca	      1710	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3c51	    0x48c745d00004	          mov qword [rbp - 0x30], 0x400 	      1712	convert.c	FUNCTION_62	WHILE_1
0x3c59	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1715	convert.c	FUNCTION_62	WHILE_1	IF_4
0x3c5d	        0x488d4818	                   lea rcx, [rax + 0x18]	      1715	convert.c	FUNCTION_62	WHILE_1	IF_4
0x3c61	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c65	        0x488b4008	                mov rax, qword [rax + 8]	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c69	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c6d	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c71	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c75	          0x4989f8	                             mov r8, rdi	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c78	          0x4889c7	                            mov rdi, rax	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c7b	      0xe800000000	                          call 0x4003cc0	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c80	            0x85c0	                           test eax, eax	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c82	            0x740a	                            je 0x4003cce	      1713	convert.c	FUNCTION_62	WHILE_1	IF_4	CALL_2
0x3c84	      0xb8ffffffff	                     mov eax, 0xffffffff	      1716	convert.c	FUNCTION_62	WHILE_1	IF_4
0x3c89	      0xe91a010000	                           jmp 0x4003de8	      1716	convert.c	FUNCTION_62	WHILE_1	IF_4
0x3c8e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1717	convert.c	FUNCTION_62	WHILE_1
0x3c92	      0xba00040000	                          mov edx, 0x400	      1717	convert.c	FUNCTION_62	WHILE_1
0x3c97	            0x29c2	                            sub edx, eax	      1717	convert.c	FUNCTION_62	WHILE_1
0x3c99	            0x89d0	                            mov eax, edx	      1717	convert.c	FUNCTION_62	WHILE_1
0x3c9b	            0x89c2	                            mov edx, eax	      1717	convert.c	FUNCTION_62	WHILE_1
0x3c9d	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1717	convert.c	FUNCTION_62	WHILE_1
0x3ca1	    0x899018040000	            mov dword [rax + 0x418], edx	      1717	convert.c	FUNCTION_62	WHILE_1
0x3ca7	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1718	convert.c	FUNCTION_62	WHILE_1
0x3cab	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1718	convert.c	FUNCTION_62	WHILE_1
0x3cb5	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1719	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cba	            0x7432	                            je 0x4003d2e	      1719	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cbc	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cc0	          0x488b10	                    mov rdx, qword [rax]	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cc3	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cc7	          0x4829c2	                            sub rdx, rax	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cca	          0x4889d0	                            mov rax, rdx	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3ccd	        0x488945f0	             mov qword [rbp - 0x10], rax	      1720	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cd1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cd5	          0x488b00	                    mov rax, qword [rax]	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cd8	        0x482b45f0	             sub rax, qword [rbp - 0x10]	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cdc	          0x4889c2	                            mov rdx, rax	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cdf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3ce3	          0x488910	                    mov qword [rax], rdx	      1721	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3ce6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1722	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cea	        0x480145b0	            add qword [rbp - 0x50], rax 	      1722	convert.c	FUNCTION_62	WHILE_1	IF_5
0x3cee	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3cf3	     0xf8581000000	                           jne 0x4003dba	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3cf9	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3cfd	    0x8b8018040000	           mov eax, dword [rax + 0x418] 	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3d03	            0x85c0	                           test eax, eax	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3d05	            0x7402	                            je 0x4003d49	      1726	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3d07	            0xeb71	                           jmp 0x4003dba	      1727	convert.c	FUNCTION_62	WHILE_1	IF_6
0x3d09	    0x48c745c80000	               mov qword [rbp - 0x38], 0	      1730	convert.c	FUNCTION_62	WHILE_1
0x3d11	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1731	convert.c	FUNCTION_62	WHILE_1
0x3d15	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1731	convert.c	FUNCTION_62	WHILE_1
0x3d19	        0x488945d0	             mov qword [rbp - 0x30], rax	      1731	convert.c	FUNCTION_62	WHILE_1
0x3d1d	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d21	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d25	        0x488d0c02	                    lea rcx, [rdx + rax]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d29	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d2d	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d31	        0x488d75d0	                   lea rsi, [rbp - 0x30]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d35	        0x488d55c8	                   lea rdx, [rbp - 0x38]	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d39	          0x4989f0	                             mov r8, rsi	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d3c	      0xbe00000000	                              mov esi, 0	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d41	          0x4889c7	                            mov rdi, rax	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d44	      0xe800000000	                          call 0x4003d89	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d49	            0x85c0	                           test eax, eax	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d4b	            0x7407	                            je 0x4003d94	      1732	convert.c	FUNCTION_62	WHILE_1	IF_7	CALL_3
0x3d4d	      0xb8ffffffff	                     mov eax, 0xffffffff	      1735	convert.c	FUNCTION_62	WHILE_1	IF_7
0x3d52	            0xeb54	                           jmp 0x4003de8	      1735	convert.c	FUNCTION_62	WHILE_1	IF_7
0x3d54	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d58	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d5c	          0x4889c2	                            mov rdx, rax	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d5f	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d63	          0x4839c2	                            cmp rdx, rax	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d66	            0x7425	                            je 0x4003dcd	      1736	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d68	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1738	convert.c	FUNCTION_62	WHILE_1
0x3d6c	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1738	convert.c	FUNCTION_62	WHILE_1
0x3d70	          0x4829c2	                            sub rdx, rax	      1738	convert.c	FUNCTION_62	WHILE_1
0x3d73	          0x4889d0	                            mov rax, rdx	      1738	convert.c	FUNCTION_62	WHILE_1
0x3d76	        0x488945d8	             mov qword [rbp - 0x28], rax	      1738	convert.c	FUNCTION_62	WHILE_1
0x3d7a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	      1693	convert.c	FUNCTION_62	WHILE_1
0x3d7e	        0x483b45e8	             cmp rax, qword [rbp - 0x18]	      1693	convert.c	FUNCTION_62	WHILE_1
0x3d82	     0xf82b6fdffff	                            jb 0x4003b7e	      1693	convert.c	FUNCTION_62	WHILE_1
0x3d88	            0xeb04	                           jmp 0x4003dce	      1693	convert.c	FUNCTION_62	WHILE_1
0x3d8a	              0x90	                                     nop	      1711	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3d8b	            0xeb01	                           jmp 0x4003dce	      1711	convert.c	FUNCTION_62	WHILE_1	IF_3
0x3d8d	              0x90	                                     nop	      1737	convert.c	FUNCTION_62	WHILE_1	IF_8
0x3d8e	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1740	convert.c	FUNCTION_62
0x3d92	          0x488b00	                    mov rax, qword [rax]	      1740	convert.c	FUNCTION_62
0x3d95	        0x482b45d8	             sub rax, qword [rbp - 0x28]	      1740	convert.c	FUNCTION_62
0x3d99	          0x4889c2	                            mov rdx, rax	      1740	convert.c	FUNCTION_62
0x3d9c	        0x488b4598	             mov rax, qword [rbp - 0x68]	      1740	convert.c	FUNCTION_62
0x3da0	          0x488910	                    mov qword [rax], rdx	      1740	convert.c	FUNCTION_62
0x3da3	      0xb800000000	                              mov eax, 0	      1741	convert.c	FUNCTION_62
0x3da8	        0x488b7df8	                mov rdi, qword [rbp - 8]	      1742	convert.c	FUNCTION_62
0x3dac	    0x6448333c2528	                xor rdi, qword fs:[0x28]	      1742	convert.c	FUNCTION_62
0x3db5	            0x7405	                            je 0x4003dfc	      1742	convert.c	FUNCTION_62
0x3db7	      0xe800000000	                          call 0x4003dfc	      1742	convert.c	FUNCTION_62
0x3dbc	              0xc9	                                   leave	      1742	convert.c	FUNCTION_62
0x3dbd	              0xc3	                                     ret	      1742	convert.c	FUNCTION_62
apply_multi_file_filter	CALL,32:WHILE,0:functions,0:IF,20:SWITCH,0:ELSE,6:DO,0:FOR,0	287
0x1ca6	              0x55	                                push rbp	       803	convert.c	FUNCTION_35
0x1ca7	          0x4889e5	                            mov rbp, rsp	       803	convert.c	FUNCTION_35
0x1caa	    0x4881eca00000	                           sub rsp, 0xa0	       803	convert.c	FUNCTION_35
0x1cb1	        0x48897d98	             mov qword [rbp - 0x68], rdi	       803	convert.c	FUNCTION_35
0x1cb5	        0x48897590	             mov qword [rbp - 0x70], rsi	       803	convert.c	FUNCTION_35
0x1cb9	        0x48895588	             mov qword [rbp - 0x78], rdx	       803	convert.c	FUNCTION_35
0x1cbd	          0x894d84	             mov dword [rbp - 0x7c], ecx	       803	convert.c	FUNCTION_35
0x1cc0	    0x4c898578ffff	              mov qword [rbp - 0x88], r8	       803	convert.c	FUNCTION_35
0x1cc7	    0x4c898d70ffff	              mov qword [rbp - 0x90], r9	       803	convert.c	FUNCTION_35
0x1cce	        0x488b4518	            mov rax, qword [rbp + 0x18] 	       803	convert.c	FUNCTION_35
0x1cd2	    0x48898568ffff	             mov qword [rbp - 0x98], rax	       803	convert.c	FUNCTION_35
0x1cd9	    0x64488b042528	                mov rax, qword fs:[0x28]	       803	convert.c	FUNCTION_35
0x1ce2	        0x488945f8	                mov qword [rbp - 8], rax	       803	convert.c	FUNCTION_35
0x1ce6	            0x31c0	                            xor eax, eax	       803	convert.c	FUNCTION_35
0x1ce8	    0xc745a4000000	               mov dword [rbp - 0x5c], 0	       805	convert.c	FUNCTION_35
0x1cef	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       808	convert.c	FUNCTION_35
0x1cf7	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       808	convert.c	FUNCTION_35
0x1cff	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       808	convert.c	FUNCTION_35
0x1d07	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       809	convert.c	FUNCTION_35
0x1d0f	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       809	convert.c	FUNCTION_35
0x1d17	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       809	convert.c	FUNCTION_35
0x1d1f	    0x8b0500000000	            mov eax, dword [0x04001d65] 	       812	convert.c	FUNCTION_35	IF_1
0x1d25	            0x85c0	                           test eax, eax	       812	convert.c	FUNCTION_35	IF_1
0x1d27	            0x752d	                           jne 0x4001d96	       812	convert.c	FUNCTION_35	IF_1
0x1d29	    0xc70500000000	               mov dword [0x04001d73], 1	       813	convert.c	FUNCTION_35	IF_1
0x1d33	      0xb900000000	                              mov ecx, 0	       814	convert.c	FUNCTION_35	IF_1	CALL_1
0x1d38	      0xba00000000	                              mov edx, 0	       814	convert.c	FUNCTION_35	IF_1	CALL_1
0x1d3d	      0xbe00000000	                              mov esi, 0	       814	convert.c	FUNCTION_35	IF_1	CALL_1
0x1d42	      0xbf00000000	                              mov edi, 0	       814	convert.c	FUNCTION_35	IF_1	CALL_1
0x1d47	      0xe800000000	                          call 0x4001d8c	       814	convert.c	FUNCTION_35	IF_1	CALL_1
0x1d4c	    0x48c745a80000	               mov qword [rbp - 0x58], 0	       815	convert.c	FUNCTION_35	IF_1
0x1d54	            0xeb18	                           jmp 0x4001dae	       815	convert.c	FUNCTION_35	IF_1
0x1d56	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       817	convert.c	FUNCTION_35	ELSE_1	CALL_2
0x1d5d	          0x4889c6	                            mov rsi, rax	       817	convert.c	FUNCTION_35	ELSE_1	CALL_2
0x1d60	      0xbf00000000	                              mov edi, 0	       817	convert.c	FUNCTION_35	ELSE_1	CALL_2
0x1d65	      0xe800000000	                          call 0x4001daa	       817	convert.c	FUNCTION_35	ELSE_1	CALL_2
0x1d6a	        0x488945a8	             mov qword [rbp - 0x58], rax	       817	convert.c	FUNCTION_35	ELSE_1	CALL_2
0x1d6e	      0xbf00000000	                              mov edi, 0	       820	convert.c	FUNCTION_35	CALL_3
0x1d73	      0xe800000000	                          call 0x4001db8	       820	convert.c	FUNCTION_35	CALL_3
0x1d78	      0x48837da800	               cmp qword [rbp - 0x58], 0	       822	convert.c	FUNCTION_35	IF_2
0x1d7d	            0x7550	                           jne 0x4001e0f	       822	convert.c	FUNCTION_35	IF_2
0x1d7f	      0xbf80000000	                           mov edi, 0x80	       823	convert.c	FUNCTION_35	IF_2	CALL_4
0x1d84	      0xe800000000	                          call 0x4001dc9	       823	convert.c	FUNCTION_35	IF_2	CALL_4
0x1d89	        0x488945a8	             mov qword [rbp - 0x58], rax	       823	convert.c	FUNCTION_35	IF_2	CALL_4
0x1d8d	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       824	convert.c	FUNCTION_35	IF_2
0x1d91	    0xc74078000000	               mov dword [rax + 0x78], 0	       824	convert.c	FUNCTION_35	IF_2
0x1d98	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1d9c	    0x488b9570ffff	             mov rdx, qword [rbp - 0x90]	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1da3	      0xb900000000	                              mov ecx, 0	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1da8	          0x4889c6	                            mov rsi, rax	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1dab	      0xbf00000000	                              mov edi, 0	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1db0	      0xe800000000	                          call 0x4001df5	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1db5	            0x85c0	                           test eax, eax	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1db7	            0x7416	                            je 0x4001e0f	       826	convert.c	FUNCTION_35	IF_2	IF_3	CALL_5
0x1db9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       827	convert.c	FUNCTION_35	IF_2	IF_3	CALL_6
0x1dbd	          0x4889c7	                            mov rdi, rax	       827	convert.c	FUNCTION_35	IF_2	IF_3	CALL_6
0x1dc0	      0xe800000000	                          call 0x4001e05	       827	convert.c	FUNCTION_35	IF_2	IF_3	CALL_6
0x1dc5	      0xb800000000	                              mov eax, 0	       828	convert.c	FUNCTION_35	IF_2	IF_3
0x1dca	      0xe92e030000	                           jmp 0x400213d	       828	convert.c	FUNCTION_35	IF_2	IF_3
0x1dcf	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       831	convert.c	FUNCTION_35
0x1dd3	        0x4883c018	                           add rax, 0x18	       831	convert.c	FUNCTION_35
0x1dd7	        0x488945b8	             mov qword [rbp - 0x48], rax	       831	convert.c	FUNCTION_35
0x1ddb	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       833	convert.c	FUNCTION_35	IF_4
0x1ddf	          0x8b4078	            mov eax, dword [rax + 0x78] 	       833	convert.c	FUNCTION_35	IF_4
0x1de2	          0x234510	             and eax, dword [rbp + 0x10]	       833	convert.c	FUNCTION_35	IF_4
0x1de5	            0x85c0	                           test eax, eax	       833	convert.c	FUNCTION_35	IF_4
0x1de7	            0x750a	                           jne 0x4001e33	       833	convert.c	FUNCTION_35	IF_4
0x1de9	      0xb800000000	                              mov eax, 0	       834	convert.c	FUNCTION_35	IF_4
0x1dee	      0xe90a030000	                           jmp 0x400213d	       834	convert.c	FUNCTION_35	IF_4
0x1df3	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       836	convert.c	FUNCTION_35	IF_5
0x1df6	          0x83e001	                              and eax, 1	       836	convert.c	FUNCTION_35	IF_5
0x1df9	            0x85c0	                           test eax, eax	       836	convert.c	FUNCTION_35	IF_5
0x1dfb	            0x740a	                            je 0x4001e47	       836	convert.c	FUNCTION_35	IF_5
0x1dfd	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       837	convert.c	FUNCTION_35	IF_5
0x1e05	            0xeb23	                           jmp 0x4001e6a	       837	convert.c	FUNCTION_35	IF_5
0x1e07	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       838	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e0a	          0x83e002	                              and eax, 2	       838	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e0d	            0x85c0	                           test eax, eax	       838	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e0f	            0x740a	                            je 0x4001e5b	       838	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e11	    0x48c745b00000	               mov qword [rbp - 0x50], 0	       839	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e19	            0xeb0f	                           jmp 0x4001e6a	       839	convert.c	FUNCTION_35	ELSE_2	IF_6
0x1e1b	      0xbf00000000	                              mov edi, 0	       841	convert.c	FUNCTION_35	CALL_7
0x1e20	      0xb800000000	                              mov eax, 0	       841	convert.c	FUNCTION_35	CALL_7
0x1e25	      0xe800000000	                          call 0x4001e6a	       841	convert.c	FUNCTION_35	CALL_7
0x1e2a	      0xbe01000000	                              mov esi, 1	       843	convert.c	FUNCTION_35	CALL_8
0x1e2f	      0xbf0d000000	                            mov edi, 0xd	       843	convert.c	FUNCTION_35	CALL_8
0x1e34	      0xe800000000	                          call 0x4001e79	       843	convert.c	FUNCTION_35	CALL_8
0x1e39	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       845	convert.c	FUNCTION_35	CALL_11
0x1e3d	          0x4889c7	                            mov rdi, rax	       845	convert.c	FUNCTION_35	CALL_11
0x1e40	      0xe800000000	                          call 0x4001e85	       845	convert.c	FUNCTION_35	CALL_11
0x1e45	    0x483de2ff0000	                         cmp rax, 0xffe2	       845	convert.c	FUNCTION_35	CALL_11
0x1e4b	            0x7619	                           jbe 0x4001ea6	       845	convert.c	FUNCTION_35	CALL_11
0x1e4d	      0xb900000000	                              mov ecx, 0	       845	convert.c	FUNCTION_35	CALL_11
0x1e52	      0xba4d030000	                          mov edx, 0x34d	       845	convert.c	FUNCTION_35	CALL_11
0x1e57	      0xbe00000000	                              mov esi, 0	       845	convert.c	FUNCTION_35	CALL_11
0x1e5c	      0xbf00000000	                              mov edi, 0	       845	convert.c	FUNCTION_35	CALL_11
0x1e61	      0xe800000000	                          call 0x4001ea6	       845	convert.c	FUNCTION_35	CALL_11
0x1e66	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       846	convert.c	FUNCTION_35	CALL_12
0x1e6a	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       846	convert.c	FUNCTION_35	CALL_12
0x1e6d	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       846	convert.c	FUNCTION_35	CALL_12
0x1e71	      0xbe00000000	                              mov esi, 0	       846	convert.c	FUNCTION_35	CALL_12
0x1e76	            0x89c7	                            mov edi, eax	       846	convert.c	FUNCTION_35	CALL_12
0x1e78	      0xb800000000	                              mov eax, 0	       846	convert.c	FUNCTION_35	CALL_12
0x1e7d	      0xe800000000	                          call 0x4001ec2	       846	convert.c	FUNCTION_35	CALL_12
0x1e82	          0x8945a0	             mov dword [rbp - 0x60], eax	       846	convert.c	FUNCTION_35	CALL_12
0x1e85	        0x837da000	               cmp dword [rbp - 0x60], 0	       847	convert.c	FUNCTION_35	IF_7
0x1e89	     0xf8501020000	                           jne 0x40020d0	       847	convert.c	FUNCTION_35	IF_7
0x1e8f	        0x488b4598	             mov rax, qword [rbp - 0x68]	       850	convert.c	FUNCTION_35	CALL_14
0x1e93	          0x4889c7	                            mov rdi, rax	       850	convert.c	FUNCTION_35	CALL_14
0x1e96	      0xe800000000	                          call 0x4001edb	       850	convert.c	FUNCTION_35	CALL_14
0x1e9b	    0x483de2ff0000	                         cmp rax, 0xffe2	       850	convert.c	FUNCTION_35	CALL_14
0x1ea1	           0xf97c0	                                 seta al	       850	convert.c	FUNCTION_35	CALL_14
0x1ea4	           0xfb6c0	                           movzx eax, al	       850	convert.c	FUNCTION_35	CALL_14
0x1ea7	          0x8945a0	             mov dword [rbp - 0x60], eax	       850	convert.c	FUNCTION_35	CALL_14
0x1eaa	        0x837da000	               cmp dword [rbp - 0x60], 0	       851	convert.c	FUNCTION_35	IF_8
0x1eae	            0x7419	                            je 0x4001f09	       851	convert.c	FUNCTION_35	IF_8
0x1eb0	      0xbf00000000	                              mov edi, 0	       852	convert.c	FUNCTION_35	IF_8	CALL_15
0x1eb5	      0xb800000000	                              mov eax, 0	       852	convert.c	FUNCTION_35	IF_8	CALL_15
0x1eba	      0xe800000000	                          call 0x4001eff	       852	convert.c	FUNCTION_35	IF_8	CALL_15
0x1ebf	      0xe83ce1ffff	                    call sym.const_error	       852	convert.c	FUNCTION_35	IF_8	CALL_15
0x1ec4	      0xe9e0010000	                           jmp 0x40020e9	       853	convert.c	FUNCTION_35	IF_8
0x1ec9	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       856	convert.c	FUNCTION_35	CALL_16
0x1ecd	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       856	convert.c	FUNCTION_35	CALL_16
0x1ed0	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       856	convert.c	FUNCTION_35	CALL_16
0x1ed4	      0xbe00000000	                              mov esi, 0	       856	convert.c	FUNCTION_35	CALL_16
0x1ed9	            0x89c7	                            mov edi, eax	       856	convert.c	FUNCTION_35	CALL_16
0x1edb	      0xb800000000	                              mov eax, 0	       856	convert.c	FUNCTION_35	CALL_16
0x1ee0	      0xe800000000	                          call 0x4001f25	       856	convert.c	FUNCTION_35	CALL_16
0x1ee5	          0x8945a0	             mov dword [rbp - 0x60], eax	       856	convert.c	FUNCTION_35	CALL_16
0x1ee8	        0x837da000	               cmp dword [rbp - 0x60], 0	       857	convert.c	FUNCTION_35	IF_9
0x1eec	     0xf85a1010000	                           jne 0x40020d3	       857	convert.c	FUNCTION_35	IF_9
0x1ef2	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       860	convert.c	FUNCTION_35	IF_10
0x1ef6	          0x8b4078	            mov eax, dword [rax + 0x78] 	       860	convert.c	FUNCTION_35	IF_10
0x1ef9	          0x83e004	                              and eax, 4	       860	convert.c	FUNCTION_35	IF_10
0x1efc	            0x85c0	                           test eax, eax	       860	convert.c	FUNCTION_35	IF_10
0x1efe	            0x7444	                            je 0x4001f84	       860	convert.c	FUNCTION_35	IF_10
0x1f00	    0x4883bd68ffff	               cmp qword [rbp - 0x98], 0	       860	convert.c	FUNCTION_35	IF_10
0x1f08	            0x743a	                            je 0x4001f84	       860	convert.c	FUNCTION_35	IF_10
0x1f0a	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       861	convert.c	FUNCTION_35	IF_10
0x1f11	            0x8b00	                    mov eax, dword [rax]	       861	convert.c	FUNCTION_35	IF_10
0x1f13	          0x83f801	                              cmp eax, 1	       861	convert.c	FUNCTION_35	IF_10
0x1f16	            0x752c	                           jne 0x4001f84	       861	convert.c	FUNCTION_35	IF_10
0x1f18	    0xc745a4010000	               mov dword [rbp - 0x5c], 1	       862	convert.c	FUNCTION_35	IF_10
0x1f1f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f23	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f26	      0xbe00000000	                              mov esi, 0	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f2b	            0x89c7	                            mov edi, eax	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f2d	      0xb800000000	                              mov eax, 0	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f32	      0xe800000000	                          call 0x4001f77	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f37	          0x8945a0	             mov dword [rbp - 0x60], eax	       863	convert.c	FUNCTION_35	IF_10	CALL_17
0x1f3a	        0x837da000	               cmp dword [rbp - 0x60], 0	       864	convert.c	FUNCTION_35	IF_10	IF_11
0x1f3e	     0xf8552010000	                           jne 0x40020d6	       864	convert.c	FUNCTION_35	IF_10	IF_11
0x1f44	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       868	convert.c	FUNCTION_35	CALL_18
0x1f48	          0x8b402c	            mov eax, dword [rax + 0x2c] 	       868	convert.c	FUNCTION_35	CALL_18
0x1f4b	            0x89c7	                            mov edi, eax	       868	convert.c	FUNCTION_35	CALL_18
0x1f4d	      0xe800000000	                          call 0x4001f92	       868	convert.c	FUNCTION_35	CALL_18
0x1f52	          0x8945a0	             mov dword [rbp - 0x60], eax	       868	convert.c	FUNCTION_35	CALL_18
0x1f55	        0x837da000	               cmp dword [rbp - 0x60], 0	       869	convert.c	FUNCTION_35	IF_12
0x1f59	     0xf853a010000	                           jne 0x40020d9	       869	convert.c	FUNCTION_35	IF_12
0x1f5f	        0x837d8400	               cmp dword [rbp - 0x7c], 0	       872	convert.c	FUNCTION_35	IF_13
0x1f63	            0x7818	                            js 0x4001fbd	       872	convert.c	FUNCTION_35	IF_13
0x1f65	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       873	convert.c	FUNCTION_35	CALL_19
0x1f69	          0x8b502c	            mov edx, dword [rax + 0x2c] 	       873	convert.c	FUNCTION_35	CALL_19
0x1f6c	          0x8b4584	             mov eax, dword [rbp - 0x7c]	       873	convert.c	FUNCTION_35	CALL_19
0x1f6f	            0x89d6	                            mov esi, edx	       873	convert.c	FUNCTION_35	CALL_19
0x1f71	            0x89c7	                            mov edi, eax	       873	convert.c	FUNCTION_35	CALL_19
0x1f73	      0xe800000000	                          call 0x4001fb8	       873	convert.c	FUNCTION_35	CALL_19
0x1f78	          0x8945a0	             mov dword [rbp - 0x60], eax	       873	convert.c	FUNCTION_35	CALL_19
0x1f7b	            0xeb1d	                           jmp 0x4001fda	       873	convert.c	FUNCTION_35	CALL_19
0x1f7d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       875	convert.c	FUNCTION_35	CALL_20
0x1f81	          0x8b502c	            mov edx, dword [rax + 0x2c] 	       875	convert.c	FUNCTION_35	CALL_20
0x1f84	        0x488b4d88	             mov rcx, qword [rbp - 0x78]	       875	convert.c	FUNCTION_35	CALL_20
0x1f88	        0x488b4590	             mov rax, qword [rbp - 0x70]	       875	convert.c	FUNCTION_35	CALL_20
0x1f8c	          0x4889ce	                            mov rsi, rcx	       875	convert.c	FUNCTION_35	CALL_20
0x1f8f	          0x4889c7	                            mov rdi, rax	       875	convert.c	FUNCTION_35	CALL_20
0x1f92	      0xe800000000	                          call 0x4001fd7	       875	convert.c	FUNCTION_35	CALL_20
0x1f97	          0x8945a0	             mov dword [rbp - 0x60], eax	       875	convert.c	FUNCTION_35	CALL_20
0x1f9a	        0x837da000	               cmp dword [rbp - 0x60], 0	       876	convert.c	FUNCTION_35	IF_14
0x1f9e	     0xf85f8000000	                           jne 0x40020dc	       876	convert.c	FUNCTION_35	IF_14
0x1fa4	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       879	convert.c	FUNCTION_35	CALL_21
0x1fa8	          0x8b4030	            mov eax, dword [rax + 0x30] 	       879	convert.c	FUNCTION_35	CALL_21
0x1fab	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       879	convert.c	FUNCTION_35	CALL_21
0x1faf	          0x4889d6	                            mov rsi, rdx	       879	convert.c	FUNCTION_35	CALL_21
0x1fb2	            0x89c7	                            mov edi, eax	       879	convert.c	FUNCTION_35	CALL_21
0x1fb4	      0xe800000000	                          call 0x4001ff9	       879	convert.c	FUNCTION_35	CALL_21
0x1fb9	          0x8945a0	             mov dword [rbp - 0x60], eax	       879	convert.c	FUNCTION_35	CALL_21
0x1fbc	        0x837da000	               cmp dword [rbp - 0x60], 0	       880	convert.c	FUNCTION_35	IF_15
0x1fc0	     0xf85d9000000	                           jne 0x40020df	       880	convert.c	FUNCTION_35	IF_15
0x1fc6	        0x837da400	               cmp dword [rbp - 0x5c], 0	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fca	            0x7451	                            je 0x400205d	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fcc	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fd0	      0xbe00000000	                              mov esi, 0	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fd5	          0x4889c7	                            mov rdi, rax	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fd8	      0xe800000000	                          call 0x400201d	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fdd	            0x85c0	                           test eax, eax	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fdf	            0x753c	                           jne 0x400205d	       883	convert.c	FUNCTION_35	IF_16	CALL_22
0x1fe1	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1fe8	        0x488d5008	                      lea rdx, [rax + 8]	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1fec	    0x488b8570ffff	             mov rax, qword [rbp - 0x90]	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1ff3	          0x4889c6	                            mov rsi, rax	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1ff6	          0x4889d7	                            mov rdi, rdx	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1ff9	      0xe800000000	                          call 0x400203e	       884	convert.c	FUNCTION_35	IF_16	CALL_23
0x1ffe	    0x488b8568ffff	             mov rax, qword [rbp - 0x98]	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x2005	        0x488d5028	                   lea rdx, [rax + 0x28]	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x2009	        0x488b4598	             mov rax, qword [rbp - 0x68]	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x200d	          0x4889c6	                            mov rsi, rax	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x2010	          0x4889d7	                            mov rdi, rdx	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x2013	      0xe800000000	                          call 0x4002058	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x2018	      0xe98c000000	                           jmp 0x40020e9	       885	convert.c	FUNCTION_35	IF_16	CALL_24
0x201d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       888	convert.c	FUNCTION_35	ELSE_5	CALL_25
0x2021	      0xbe00000000	                              mov esi, 0	       888	convert.c	FUNCTION_35	ELSE_5	CALL_25
0x2026	          0x4889c7	                            mov rdi, rax	       888	convert.c	FUNCTION_35	ELSE_5	CALL_25
0x2029	      0xe800000000	                          call 0x400206e	       888	convert.c	FUNCTION_35	ELSE_5	CALL_25
0x202e	          0x8945a0	             mov dword [rbp - 0x60], eax	       888	convert.c	FUNCTION_35	ELSE_5	CALL_25
0x2031	        0x837da000	               cmp dword [rbp - 0x60], 0	       889	convert.c	FUNCTION_35	ELSE_5	IF_17
0x2035	            0x756b	                           jne 0x40020e2	       889	convert.c	FUNCTION_35	ELSE_5	IF_17
0x2037	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x203b	          0x8b4030	            mov eax, dword [rax + 0x30] 	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x203e	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2042	          0x4889d6	                            mov rsi, rdx	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2045	            0x89c7	                            mov edi, eax	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2047	      0xe800000000	                          call 0x400208c	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x204c	        0x48c1e83f	                           shr rax, 0x3f	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2050	           0xfb6c0	                           movzx eax, al	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2053	          0x8945a0	             mov dword [rbp - 0x60], eax	       892	convert.c	FUNCTION_35	ELSE_5	CALL_26
0x2056	        0x837da000	               cmp dword [rbp - 0x60], 0	       893	convert.c	FUNCTION_35	ELSE_5	IF_18
0x205a	            0x7549	                           jne 0x40020e5	       893	convert.c	FUNCTION_35	ELSE_5	IF_18
0x205c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x2060	          0x8b4030	            mov eax, dword [rax + 0x30] 	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x2063	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x2067	          0x4889d6	                            mov rsi, rdx	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x206a	            0x89c7	                            mov edi, eax	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x206c	      0xe800000000	                          call 0x40020b1	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x2071	          0x8945a0	             mov dword [rbp - 0x60], eax	       896	convert.c	FUNCTION_35	ELSE_5	CALL_27
0x2074	        0x837da000	               cmp dword [rbp - 0x60], 0	       897	convert.c	FUNCTION_35	ELSE_5	IF_19
0x2078	            0x752e	                           jne 0x40020e8	       897	convert.c	FUNCTION_35	ELSE_5	IF_19
0x207a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x207e	      0xbe00000000	                              mov esi, 0	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x2083	          0x4889c7	                            mov rdi, rax	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x2086	      0xe800000000	                          call 0x40020cb	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x208b	          0x8945a0	             mov dword [rbp - 0x60], eax	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x208e	            0xeb19	                           jmp 0x40020e9	       900	convert.c	FUNCTION_35	ELSE_5	CALL_28
0x2090	              0x90	                                     nop	       848	convert.c	FUNCTION_35	IF_7
0x2091	            0xeb16	                           jmp 0x40020e9	       848	convert.c	FUNCTION_35	IF_7
0x2093	              0x90	                                     nop	       858	convert.c	FUNCTION_35	IF_9
0x2094	            0xeb13	                           jmp 0x40020e9	       858	convert.c	FUNCTION_35	IF_9
0x2096	              0x90	                                     nop	       865	convert.c	FUNCTION_35	IF_10	IF_11
0x2097	            0xeb10	                           jmp 0x40020e9	       865	convert.c	FUNCTION_35	IF_10	IF_11
0x2099	              0x90	                                     nop	       870	convert.c	FUNCTION_35	IF_12
0x209a	            0xeb0d	                           jmp 0x40020e9	       870	convert.c	FUNCTION_35	IF_12
0x209c	              0x90	                                     nop	       877	convert.c	FUNCTION_35	IF_14
0x209d	            0xeb0a	                           jmp 0x40020e9	       877	convert.c	FUNCTION_35	IF_14
0x209f	              0x90	                                     nop	       881	convert.c	FUNCTION_35	IF_15
0x20a0	            0xeb07	                           jmp 0x40020e9	       881	convert.c	FUNCTION_35	IF_15
0x20a2	              0x90	                                     nop	       890	convert.c	FUNCTION_35	ELSE_5	IF_17
0x20a3	            0xeb04	                           jmp 0x40020e9	       890	convert.c	FUNCTION_35	ELSE_5	IF_17
0x20a5	              0x90	                                     nop	       894	convert.c	FUNCTION_35	ELSE_5	IF_18
0x20a6	            0xeb01	                           jmp 0x40020e9	       894	convert.c	FUNCTION_35	ELSE_5	IF_18
0x20a8	              0x90	                                     nop	       898	convert.c	FUNCTION_35	ELSE_5	IF_19
0x20a9	      0xbf0d000000	                            mov edi, 0xd	       904	convert.c	FUNCTION_35	CALL_29
0x20ae	      0xe800000000	                          call 0x40020f3	       904	convert.c	FUNCTION_35	CALL_29
0x20b3	        0x837da000	               cmp dword [rbp - 0x60], 0	       906	convert.c	FUNCTION_35	IF_20
0x20b7	            0x7418	                            je 0x4002111	       906	convert.c	FUNCTION_35	IF_20
0x20b9	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       907	convert.c	FUNCTION_35	CALL_30
0x20bd	        0x488d45e0	                   lea rax, [rbp - 0x20]	       907	convert.c	FUNCTION_35	CALL_30
0x20c1	          0x8b5510	            mov edx, dword [rbp + 0x10] 	       907	convert.c	FUNCTION_35	CALL_30
0x20c4	          0x4889ce	                            mov rsi, rcx	       907	convert.c	FUNCTION_35	CALL_30
0x20c7	          0x4889c7	                            mov rdi, rax	       907	convert.c	FUNCTION_35	CALL_30
0x20ca	      0xe836fbffff	            call sym.handle_filter_error	       907	convert.c	FUNCTION_35	CALL_30
0x20cf	            0xeb16	                           jmp 0x4002127	       907	convert.c	FUNCTION_35	CALL_30
0x20d1	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       909	convert.c	FUNCTION_35	CALL_31
0x20d5	    0x488b8578ffff	             mov rax, qword [rbp - 0x88]	       909	convert.c	FUNCTION_35	CALL_31
0x20dc	          0x4889d6	                            mov rsi, rdx	       909	convert.c	FUNCTION_35	CALL_31
0x20df	          0x4889c7	                            mov rdi, rax	       909	convert.c	FUNCTION_35	CALL_31
0x20e2	      0xe87adfffff	                    call sym.strbuf_swap	       909	convert.c	FUNCTION_35	CALL_31
0x20e7	        0x488d45c0	                   lea rax, [rbp - 0x40]	       910	convert.c	FUNCTION_35	CALL_32
0x20eb	          0x4889c7	                            mov rdi, rax	       910	convert.c	FUNCTION_35	CALL_32
0x20ee	      0xe800000000	                          call 0x4002133	       910	convert.c	FUNCTION_35	CALL_32
0x20f3	        0x837da000	               cmp dword [rbp - 0x60], 0	       911	convert.c	FUNCTION_35
0x20f7	           0xf94c0	                                 sete al	       911	convert.c	FUNCTION_35
0x20fa	           0xfb6c0	                           movzx eax, al	       911	convert.c	FUNCTION_35
0x20fd	        0x488b4df8	                mov rcx, qword [rbp - 8]	       912	convert.c	FUNCTION_35
0x2101	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       912	convert.c	FUNCTION_35
0x210a	            0x7405	                            je 0x4002151	       912	convert.c	FUNCTION_35
0x210c	      0xe800000000	                          call 0x4002151	       912	convert.c	FUNCTION_35
0x2111	              0xc9	                                   leave	       912	convert.c	FUNCTION_35
0x2112	              0xc3	                                     ret	       912	convert.c	FUNCTION_35
validate_encoding	CALL,22:WHILE,0:functions,0:IF,7:SWITCH,0:ELSE,3:DO,0:FOR,0	149
0x9a7	              0x55	                                push rbp	       271	convert.c	FUNCTION_24
0x9a8	          0x4889e5	                            mov rbp, rsp	       271	convert.c	FUNCTION_24
0x9ab	        0x4883ec70	                           sub rsp, 0x70	       271	convert.c	FUNCTION_24
0x9af	        0x48897db8	             mov qword [rbp - 0x48], rdi	       271	convert.c	FUNCTION_24
0x9b3	        0x488975b0	             mov qword [rbp - 0x50], rsi	       271	convert.c	FUNCTION_24
0x9b7	        0x488955a8	             mov qword [rbp - 0x58], rdx	       271	convert.c	FUNCTION_24
0x9bb	        0x48894da0	             mov qword [rbp - 0x60], rcx	       271	convert.c	FUNCTION_24
0x9bf	        0x4489459c	             mov dword [rbp - 0x64], r8d	       271	convert.c	FUNCTION_24
0x9c3	    0x64488b042528	                mov rax, qword fs:[0x28]	       271	convert.c	FUNCTION_24
0x9cc	        0x488945f8	                mov qword [rbp - 8], rax	       271	convert.c	FUNCTION_24
0x9d0	            0x31c0	                            xor eax, eax	       271	convert.c	FUNCTION_24
0x9d2	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9d6	      0xbe00000000	                              mov esi, 0	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9db	          0x4889c7	                            mov rdi, rax	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9de	      0xe800000000	                          call 0x4000a23	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9e3	            0x85c0	                           test eax, eax	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9e5	     0xf84fa010000	                            je 0x4000c25	       273	convert.c	FUNCTION_24	IF_1	CALL_1
0x9eb	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0x9ef	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0x9f3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0x9f7	          0x4889ce	                            mov rsi, rcx	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0x9fa	          0x4889c7	                            mov rdi, rax	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0x9fd	      0xe800000000	                          call 0x4000a42	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0xa02	            0x85c0	                           test eax, eax	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0xa04	     0xf84ec000000	                            je 0x4000b36	       277	convert.c	FUNCTION_24	IF_1	IF_2	CALL_2
0xa0a	      0xbf00000000	                              mov edi, 0	       278	convert.c	FUNCTION_24	IF_1	IF_2	CALL_3
0xa0f	      0xe854f8ffff	                               call sym.	       278	convert.c	FUNCTION_24	IF_1	IF_2	CALL_3
0xa14	        0x488945c8	             mov qword [rbp - 0x38], rax	       278	convert.c	FUNCTION_24	IF_1	IF_2	CALL_3
0xa18	      0xbf00000000	                              mov edi, 0	       285	convert.c	FUNCTION_24	IF_1	IF_2	CALL_4
0xa1d	      0xe846f8ffff	                               call sym.	       285	convert.c	FUNCTION_24	IF_1	IF_2	CALL_4
0xa22	        0x488945d0	             mov qword [rbp - 0x30], rax	       285	convert.c	FUNCTION_24	IF_1	IF_2	CALL_4
0xa26	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       289	convert.c	FUNCTION_24	IF_1	IF_2
0xa2e	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       290	convert.c	FUNCTION_24	IF_1	IF_2	CALL_5
0xa32	          0x4889c7	                            mov rdi, rax	       290	convert.c	FUNCTION_24	IF_1	IF_2	CALL_5
0xa35	      0xe800000000	                          call 0x4000a7a	       290	convert.c	FUNCTION_24	IF_1	IF_2	CALL_5
0xa3a	        0x488945d8	             mov qword [rbp - 0x28], rax	       290	convert.c	FUNCTION_24	IF_1	IF_2	CALL_5
0xa3e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa42	          0x4889c7	                            mov rdi, rax	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa45	      0xe800000000	                          call 0x4000a8a	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa4a	        0x488d50fe	                      lea rdx, [rax - 2]	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa4e	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa52	          0x4801d0	                            add rax, rdx	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa55	          0xc60000	                       mov byte [rax], 0	       291	convert.c	FUNCTION_24	IF_1	IF_2	CALL_6
0xa58	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa5c	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa60	      0xbe00000000	                              mov esi, 0	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa65	          0x4889c7	                            mov rdi, rax	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa68	      0xe89ef5ffff	                    call sym.skip_prefix	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa6d	            0x85c0	                           test eax, eax	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa6f	            0x7515	                           jne 0x4000ac6	       292	convert.c	FUNCTION_24	IF_1	IF_2	IF_3	CALL_7
0xa71	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       293	convert.c	FUNCTION_24	IF_1	IF_2	CALL_8
0xa75	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       293	convert.c	FUNCTION_24	IF_1	IF_2	CALL_8
0xa79	      0xbe00000000	                              mov esi, 0	       293	convert.c	FUNCTION_24	IF_1	IF_2	CALL_8
0xa7e	          0x4889c7	                            mov rdi, rax	       293	convert.c	FUNCTION_24	IF_1	IF_2	CALL_8
0xa81	      0xe885f5ffff	                    call sym.skip_prefix	       293	convert.c	FUNCTION_24	IF_1	IF_2	CALL_8
0xa86	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa8a	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa8e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa92	          0x4889ce	                            mov rsi, rcx	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa95	          0x4889c7	                            mov rdi, rax	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa98	      0xb800000000	                              mov eax, 0	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xa9d	      0xe800000000	                          call 0x4000ae2	       294	convert.c	FUNCTION_24	IF_1	IF_2	CALL_9
0xaa2	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       295	convert.c	FUNCTION_24	IF_1	IF_2	CALL_10
0xaa6	          0x4889c7	                            mov rdi, rax	       295	convert.c	FUNCTION_24	IF_1	IF_2	CALL_10
0xaa9	      0xe800000000	                          call 0x4000aee	       295	convert.c	FUNCTION_24	IF_1	IF_2	CALL_10
0xaae	        0x837d9c00	               cmp dword [rbp - 0x64], 0	       296	convert.c	FUNCTION_24	IF_1	IF_2	IF_4
0xab2	            0x741c	                            je 0x4000b10	       296	convert.c	FUNCTION_24	IF_1	IF_2	IF_4
0xab4	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xab8	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xabc	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xac0	          0x4889ce	                            mov rsi, rcx	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xac3	          0x4889c7	                            mov rdi, rax	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xac6	      0xb800000000	                              mov eax, 0	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xacb	      0xe800000000	                          call 0x4000b10	       297	convert.c	FUNCTION_24	IF_1	IF_2	CALL_11
0xad0	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xad4	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xad8	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xadc	          0x4889ce	                            mov rsi, rcx	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xadf	          0x4889c7	                            mov rdi, rax	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xae2	      0xb800000000	                              mov eax, 0	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xae7	      0xe800000000	                          call 0x4000b2c	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xaec	      0xe80ff5ffff	                    call sym.const_error	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xaf1	      0xe9f4000000	                           jmp 0x4000c2a	       299	convert.c	FUNCTION_24	IF_1	IF_2	ELSE_1	CALL_12
0xaf6	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xafa	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xafe	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb02	          0x4889ce	                            mov rsi, rcx	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb05	          0x4889c7	                            mov rdi, rax	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb08	      0xe800000000	                          call 0x4000b4d	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb0d	            0x85c0	                           test eax, eax	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb0f	     0xf84d0000000	                            je 0x4000c25	       302	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_13
0xb15	      0xbf00000000	                              mov edi, 0	       303	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_14
0xb1a	      0xe849f7ffff	                               call sym.	       303	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_14
0xb1f	        0x488945e0	             mov qword [rbp - 0x20], rax	       303	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_14
0xb23	      0xbf00000000	                              mov edi, 0	       305	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_15
0xb28	      0xe83bf7ffff	                               call sym.	       305	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_15
0xb2d	        0x488945e8	             mov qword [rbp - 0x18], rax	       305	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_15
0xb31	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       310	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5
0xb39	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       311	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_16
0xb3d	          0x4889c7	                            mov rdi, rax	       311	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_16
0xb40	      0xe800000000	                          call 0x4000b85	       311	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_16
0xb45	        0x488945f0	             mov qword [rbp - 0x10], rax	       311	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_16
0xb49	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb4d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb51	      0xbe00000000	                              mov esi, 0	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb56	          0x4889c7	                            mov rdi, rax	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb59	      0xe8adf4ffff	                    call sym.skip_prefix	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb5e	            0x85c0	                           test eax, eax	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb60	            0x7515	                           jne 0x4000bb7	       312	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_6	CALL_17
0xb62	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       313	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_18
0xb66	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       313	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_18
0xb6a	      0xbe00000000	                              mov esi, 0	       313	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_18
0xb6f	          0x4889c7	                            mov rdi, rax	       313	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_18
0xb72	      0xe894f4ffff	                    call sym.skip_prefix	       313	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_18
0xb77	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb7b	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb7f	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb83	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb87	          0x4889c7	                            mov rdi, rax	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb8a	      0xb800000000	                              mov eax, 0	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb8f	      0xe800000000	                          call 0x4000bd4	       314	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_19
0xb94	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       315	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_20
0xb98	          0x4889c7	                            mov rdi, rax	       315	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_20
0xb9b	      0xe800000000	                          call 0x4000be0	       315	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_20
0xba0	        0x837d9c00	               cmp dword [rbp - 0x64], 0	       316	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_7
0xba4	            0x741c	                            je 0x4000c02	       316	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	IF_7
0xba6	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbaa	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbae	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbb2	          0x4889ce	                            mov rsi, rcx	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbb5	          0x4889c7	                            mov rdi, rax	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbb8	      0xb800000000	                              mov eax, 0	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbbd	      0xe800000000	                          call 0x4000c02	       317	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	CALL_21
0xbc2	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbc6	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbca	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbce	          0x4889ce	                            mov rsi, rcx	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbd1	          0x4889c7	                            mov rdi, rax	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbd4	      0xb800000000	                              mov eax, 0	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbd9	      0xe800000000	                          call 0x4000c1e	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbde	      0xe81df4ffff	                    call sym.const_error	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbe3	            0xeb05	                           jmp 0x4000c2a	       319	convert.c	FUNCTION_24	IF_1	ELSE_2	IF_5	ELSE_3	CALL_22
0xbe5	      0xb800000000	                              mov eax, 0	       324	convert.c	FUNCTION_24
0xbea	        0x488b75f8	                mov rsi, qword [rbp - 8]	       325	convert.c	FUNCTION_24
0xbee	    0x644833342528	                xor rsi, qword fs:[0x28]	       325	convert.c	FUNCTION_24
0xbf7	            0x7405	                            je 0x4000c3e	       325	convert.c	FUNCTION_24
0xbf9	      0xe800000000	                          call 0x4000c3e	       325	convert.c	FUNCTION_24
0xbfe	              0xc9	                                   leave	       325	convert.c	FUNCTION_24
0xbff	              0xc3	                                     ret	       325	convert.c	FUNCTION_24
apply_single_file_filter	CALL,11:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,0:DO,0:FOR,0	102
0x19d4	              0x55	                                push rbp	       706	convert.c	FUNCTION_32
0x19d5	          0x4889e5	                            mov rbp, rsp	       706	convert.c	FUNCTION_32
0x19d8	    0x4881ecd00000	                           sub rsp, 0xd0	       706	convert.c	FUNCTION_32
0x19df	    0x4889bd58ffff	             mov qword [rbp - 0xa8], rdi	       706	convert.c	FUNCTION_32
0x19e6	    0x4889b550ffff	             mov qword [rbp - 0xb0], rsi	       706	convert.c	FUNCTION_32
0x19ed	    0x48899548ffff	             mov qword [rbp - 0xb8], rdx	       706	convert.c	FUNCTION_32
0x19f4	    0x898d44ffffff	             mov dword [rbp - 0xbc], ecx	       706	convert.c	FUNCTION_32
0x19fa	    0x4c898538ffff	              mov qword [rbp - 0xc8], r8	       706	convert.c	FUNCTION_32
0x1a01	    0x4c898d30ffff	              mov qword [rbp - 0xd0], r9	       706	convert.c	FUNCTION_32
0x1a08	    0x64488b042528	                mov rax, qword fs:[0x28]	       706	convert.c	FUNCTION_32
0x1a11	        0x488945f8	                mov qword [rbp - 8], rax	       706	convert.c	FUNCTION_32
0x1a15	            0x31c0	                            xor eax, eax	       706	convert.c	FUNCTION_32
0x1a17	    0xc7856cffffff	               mov dword [rbp - 0x94], 0	       713	convert.c	FUNCTION_32
0x1a21	    0x48c78570ffff	               mov qword [rbp - 0x90], 0	       714	convert.c	FUNCTION_32
0x1a2c	    0x48c78578ffff	               mov qword [rbp - 0x88], 0	       714	convert.c	FUNCTION_32
0x1a37	    0x48c745800000	               mov qword [rbp - 0x80], 0	       714	convert.c	FUNCTION_32
0x1a3f	        0x488d45c0	                   lea rax, [rbp - 0x40]	       718	convert.c	FUNCTION_32	CALL_1
0x1a43	      0xba30000000	                           mov edx, 0x30	       718	convert.c	FUNCTION_32	CALL_1
0x1a48	      0xbe00000000	                              mov esi, 0	       718	convert.c	FUNCTION_32	CALL_1
0x1a4d	          0x4889c7	                            mov rdi, rax	       718	convert.c	FUNCTION_32	CALL_1
0x1a50	      0xe800000000	                          call 0x4001a95	       718	convert.c	FUNCTION_32	CALL_1
0x1a55	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       719	convert.c	FUNCTION_32
0x1a5d	        0x488d4590	                   lea rax, [rbp - 0x70]	       720	convert.c	FUNCTION_32
0x1a61	        0x488945c8	             mov qword [rbp - 0x38], rax	       720	convert.c	FUNCTION_32
0x1a65	    0xc745d4ffffff	     mov dword [rbp - 0x2c], 0xffffffff 	       721	convert.c	FUNCTION_32
0x1a6c	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       722	convert.c	FUNCTION_32
0x1a73	        0x48894590	             mov qword [rbp - 0x70], rax	       722	convert.c	FUNCTION_32
0x1a77	    0x488b8548ffff	             mov rax, qword [rbp - 0xb8]	       723	convert.c	FUNCTION_32
0x1a7e	        0x48894598	             mov qword [rbp - 0x68], rax	       723	convert.c	FUNCTION_32
0x1a82	    0x8b8544ffffff	             mov eax, dword [rbp - 0xbc]	       724	convert.c	FUNCTION_32
0x1a88	          0x8945a0	             mov dword [rbp - 0x60], eax	       724	convert.c	FUNCTION_32
0x1a8b	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       725	convert.c	FUNCTION_32
0x1a92	        0x488945a8	             mov qword [rbp - 0x58], rax	       725	convert.c	FUNCTION_32
0x1a96	    0x488b8558ffff	             mov rax, qword [rbp - 0xa8]	       726	convert.c	FUNCTION_32
0x1a9d	        0x488945b0	             mov qword [rbp - 0x50], rax	       726	convert.c	FUNCTION_32
0x1aa1	      0xbf00000000	                              mov edi, 0	       728	convert.c	FUNCTION_32	CALL_2
0x1aa6	      0xe800000000	                          call 0x4001aeb	       728	convert.c	FUNCTION_32	CALL_2
0x1aab	        0x488d45c0	                   lea rax, [rbp - 0x40]	       729	convert.c	FUNCTION_32	IF_1	CALL_3
0x1aaf	          0x4889c7	                            mov rdi, rax	       729	convert.c	FUNCTION_32	IF_1	CALL_3
0x1ab2	      0xe800000000	                          call 0x4001af7	       729	convert.c	FUNCTION_32	IF_1	CALL_3
0x1ab7	            0x85c0	                           test eax, eax	       729	convert.c	FUNCTION_32	IF_1	CALL_3
0x1ab9	            0x740a	                            je 0x4001b05	       729	convert.c	FUNCTION_32	IF_1	CALL_3
0x1abb	      0xb800000000	                              mov eax, 0	       730	convert.c	FUNCTION_32	IF_1
0x1ac0	      0xe9e8000000	                           jmp 0x4001bed	       730	convert.c	FUNCTION_32	IF_1
0x1ac5	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ac8	    0x488b9548ffff	             mov rdx, qword [rbp - 0xb8]	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1acf	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ad6	            0x89ce	                            mov esi, ecx	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ad8	          0x4889c7	                            mov rdi, rax	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1adb	      0xe800000000	                          call 0x4001b20	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ae0	          0x4885c0	                           test rax, rax	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ae3	            0x7924	                           jns 0x4001b49	       732	convert.c	FUNCTION_32	IF_2	CALL_4
0x1ae5	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1aec	          0x4889c6	                            mov rsi, rax	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1aef	      0xbf00000000	                              mov edi, 0	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1af4	      0xb800000000	                              mov eax, 0	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1af9	      0xe800000000	                          call 0x4001b3e	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1afe	      0xe8fde4ffff	                    call sym.const_error	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1b03	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       733	convert.c	FUNCTION_32	IF_2	CALL_5
0x1b09	          0x8b45d4	             mov eax, dword [rbp - 0x2c]	       735	convert.c	FUNCTION_32	IF_3	CALL_6
0x1b0c	            0x89c7	                            mov edi, eax	       735	convert.c	FUNCTION_32	IF_3	CALL_6
0x1b0e	      0xe800000000	                          call 0x4001b53	       735	convert.c	FUNCTION_32	IF_3	CALL_6
0x1b13	            0x85c0	                           test eax, eax	       735	convert.c	FUNCTION_32	IF_3	CALL_6
0x1b15	            0x7424	                            je 0x4001b7b	       735	convert.c	FUNCTION_32	IF_3	CALL_6
0x1b17	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b1e	          0x4889c6	                            mov rsi, rax	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b21	      0xbf00000000	                              mov edi, 0	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b26	      0xb800000000	                              mov eax, 0	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b2b	      0xe800000000	                          call 0x4001b70	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b30	      0xe8cbe4ffff	                    call sym.const_error	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b35	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       736	convert.c	FUNCTION_32	IF_3	CALL_7
0x1b3b	        0x488d45c0	                   lea rax, [rbp - 0x40]	       738	convert.c	FUNCTION_32	IF_4	CALL_8
0x1b3f	          0x4889c7	                            mov rdi, rax	       738	convert.c	FUNCTION_32	IF_4	CALL_8
0x1b42	      0xe800000000	                          call 0x4001b87	       738	convert.c	FUNCTION_32	IF_4	CALL_8
0x1b47	            0x85c0	                           test eax, eax	       738	convert.c	FUNCTION_32	IF_4	CALL_8
0x1b49	            0x7424	                            je 0x4001baf	       738	convert.c	FUNCTION_32	IF_4	CALL_8
0x1b4b	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b52	          0x4889c6	                            mov rsi, rax	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b55	      0xbf00000000	                              mov edi, 0	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b5a	      0xb800000000	                              mov eax, 0	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b5f	      0xe800000000	                          call 0x4001ba4	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b64	      0xe897e4ffff	                    call sym.const_error	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b69	    0x89856cffffff	             mov dword [rbp - 0x94], eax	       739	convert.c	FUNCTION_32	IF_4	CALL_9
0x1b6f	    0x83bd6cffffff	               cmp dword [rbp - 0x94], 0	       742	convert.c	FUNCTION_32	IF_5
0x1b76	            0x7519	                           jne 0x4001bd1	       742	convert.c	FUNCTION_32	IF_5
0x1b78	    0x488d9570ffff	                   lea rdx, [rbp - 0x90]	       743	convert.c	FUNCTION_32	IF_5	CALL_10
0x1b7f	    0x488b8538ffff	             mov rax, qword [rbp - 0xc8]	       743	convert.c	FUNCTION_32	IF_5	CALL_10
0x1b86	          0x4889d6	                            mov rsi, rdx	       743	convert.c	FUNCTION_32	IF_5	CALL_10
0x1b89	          0x4889c7	                            mov rdi, rax	       743	convert.c	FUNCTION_32	IF_5	CALL_10
0x1b8c	      0xe8d0e4ffff	                    call sym.strbuf_swap	       743	convert.c	FUNCTION_32	IF_5	CALL_10
0x1b91	    0x488d8570ffff	                   lea rax, [rbp - 0x90]	       745	convert.c	FUNCTION_32	CALL_11
0x1b98	          0x4889c7	                            mov rdi, rax	       745	convert.c	FUNCTION_32	CALL_11
0x1b9b	      0xe800000000	                          call 0x4001be0	       745	convert.c	FUNCTION_32	CALL_11
0x1ba0	    0x83bd6cffffff	               cmp dword [rbp - 0x94], 0	       746	convert.c	FUNCTION_32
0x1ba7	           0xf94c0	                                 sete al	       746	convert.c	FUNCTION_32
0x1baa	           0xfb6c0	                           movzx eax, al	       746	convert.c	FUNCTION_32
0x1bad	        0x488b4df8	                mov rcx, qword [rbp - 8]	       747	convert.c	FUNCTION_32
0x1bb1	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       747	convert.c	FUNCTION_32
0x1bba	            0x7405	                            je 0x4001c01	       747	convert.c	FUNCTION_32
0x1bbc	      0xe800000000	                          call 0x4001c01	       747	convert.c	FUNCTION_32
0x1bc1	              0xc9	                                   leave	       747	convert.c	FUNCTION_32
0x1bc2	              0xc3	                                     ret	       747	convert.c	FUNCTION_32
output_eol	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,1:ELSE,0:DO,0:FOR,0	34
0x6e0	              0x55	                                push rbp	       175	convert.c	FUNCTION_20
0x6e1	          0x4889e5	                            mov rbp, rsp	       175	convert.c	FUNCTION_20
0x6e4	        0x4883ec10	                           sub rsp, 0x10	       175	convert.c	FUNCTION_20
0x6e8	          0x897dfc	                mov dword [rbp - 4], edi	       175	convert.c	FUNCTION_20
0x6eb	        0x837dfc07	                  cmp dword [rbp - 4], 7	       176	convert.c	FUNCTION_20	SWITCH_1
0x6ef	            0x7747	                            ja 0x4000778	       176	convert.c	FUNCTION_20	SWITCH_1
0x6f1	          0x8b45fc	                mov eax, dword [rbp - 4]	       176	convert.c	FUNCTION_20	SWITCH_1
0x6f4	    0x488b04c50000	                  mov rax, qword [rax*8]	       176	convert.c	FUNCTION_20	SWITCH_1
0x6fc	            0xffe0	                                 jmp rax	       176	convert.c	FUNCTION_20	SWITCH_1
0x6fe	      0xb800000000	                              mov eax, 0	       178	convert.c	FUNCTION_20	SWITCH_1
0x703	            0xeb4d	                           jmp 0x4000792	       178	convert.c	FUNCTION_20	SWITCH_1
0x705	      0xb801000000	                              mov eax, 1	       180	convert.c	FUNCTION_20	SWITCH_1
0x70a	            0xeb46	                           jmp 0x4000792	       180	convert.c	FUNCTION_20	SWITCH_1
0x70c	      0xb802000000	                              mov eax, 2	       182	convert.c	FUNCTION_20	SWITCH_1
0x711	            0xeb3f	                           jmp 0x4000792	       182	convert.c	FUNCTION_20	SWITCH_1
0x713	      0xb801000000	                              mov eax, 1	       185	convert.c	FUNCTION_20	SWITCH_1
0x718	            0xeb38	                           jmp 0x4000792	       185	convert.c	FUNCTION_20	SWITCH_1
0x71a	      0xb802000000	                              mov eax, 2	       187	convert.c	FUNCTION_20	SWITCH_1
0x71f	            0xeb31	                           jmp 0x4000792	       187	convert.c	FUNCTION_20	SWITCH_1
0x721	      0xe879ffffff	               call sym.text_eol_is_crlf	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x726	            0x85c0	                           test eax, eax	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x728	            0x7407	                            je 0x4000771	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x72a	      0xb801000000	                              mov eax, 1	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x72f	            0xeb21	                           jmp 0x4000792	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x731	      0xb802000000	                              mov eax, 2	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x736	            0xeb1a	                           jmp 0x4000792	       191	convert.c	FUNCTION_20	SWITCH_1	CALL_1
0x738	          0x8b45fc	                mov eax, dword [rbp - 4]	       193	convert.c	FUNCTION_20	CALL_2
0x73b	            0x89c6	                            mov esi, eax	       193	convert.c	FUNCTION_20	CALL_2
0x73d	      0xbf00000000	                              mov edi, 0	       193	convert.c	FUNCTION_20	CALL_2
0x742	      0xb800000000	                              mov eax, 0	       193	convert.c	FUNCTION_20	CALL_2
0x747	      0xe800000000	                          call 0x400078c	       193	convert.c	FUNCTION_20	CALL_2
0x74c	    0x8b0500000000	            mov eax, dword [0x04000792] 	       194	convert.c	FUNCTION_20
0x752	              0xc9	                                   leave	       195	convert.c	FUNCTION_20
0x753	              0xc3	                                     ret	       195	convert.c	FUNCTION_20
convert_attrs	CALL,10:WHILE,0:functions,0:IF,12:SWITCH,0:ELSE,4:DO,0:FOR,0	161
0x2e42	              0x55	                                push rbp	      1294	convert.c	FUNCTION_47
0x2e43	          0x4889e5	                            mov rbp, rsp	      1294	convert.c	FUNCTION_47
0x2e46	        0x4883ec20	                           sub rsp, 0x20	      1294	convert.c	FUNCTION_47
0x2e4a	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1294	convert.c	FUNCTION_47
0x2e4e	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1294	convert.c	FUNCTION_47
0x2e52	    0x488b05000000	            mov rax, qword [0x04002e99] 	      1297	convert.c	FUNCTION_47	IF_1
0x2e59	          0x4885c0	                           test rax, rax	      1297	convert.c	FUNCTION_47	IF_1
0x2e5c	            0x7555	                           jne 0x4002ef3	      1297	convert.c	FUNCTION_47	IF_1
0x2e5e	        0x4883ec08	                              sub rsp, 8	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e62	            0x6a00	                                  push 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e64	    0x41b900000000	                              mov r9d, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e6a	    0x41b800000000	                              mov r8d, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e70	      0xb900000000	                              mov ecx, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e75	      0xba00000000	                              mov edx, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e7a	      0xbe00000000	                              mov esi, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e7f	      0xbf00000000	                              mov edi, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e84	      0xb800000000	                              mov eax, 0	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e89	      0xe800000000	                          call 0x4002ece	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e8e	        0x4883c410	                           add rsp, 0x10	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e92	    0x488905000000	            mov qword [0x04002ed9], rax 	      1298	convert.c	FUNCTION_47	IF_1	CALL_1
0x2e99	    0x48c705000000	               mov qword [0x04002ee4], 0	      1301	convert.c	FUNCTION_47	IF_1
0x2ea4	      0xbe00000000	                              mov esi, 0	      1302	convert.c	FUNCTION_47	IF_1	CALL_2
0x2ea9	      0xbf00000000	                              mov edi, 0	      1302	convert.c	FUNCTION_47	IF_1	CALL_2
0x2eae	      0xe800000000	                          call 0x4002ef3	      1302	convert.c	FUNCTION_47	IF_1	CALL_2
0x2eb3	    0x488b15000000	            mov rdx, qword [0x04002efa] 	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2eba	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ebe	          0x4889d6	                            mov rsi, rdx	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ec1	          0x4889c7	                            mov rdi, rax	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ec4	      0xe800000000	                          call 0x4002f09	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ec9	            0x85c0	                           test eax, eax	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ecb	     0xf8519010000	                           jne 0x400302a	      1305	convert.c	FUNCTION_47	IF_2	CALL_3
0x2ed1	    0x488b05000000	            mov rax, qword [0x04002f18] 	      1306	convert.c	FUNCTION_47	IF_2
0x2ed8	        0x488b4008	                mov rax, qword [rax + 8]	      1306	convert.c	FUNCTION_47	IF_2
0x2edc	        0x488945f8	                mov qword [rbp - 8], rax	      1306	convert.c	FUNCTION_47	IF_2
0x2ee0	        0x488b45f8	                mov rax, qword [rbp - 8]	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ee4	        0x4883c040	                           add rax, 0x40	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ee8	          0x4889c7	                            mov rdi, rax	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2eeb	      0xe8cffdffff	            call sym.git_path_check_crlf	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ef0	            0x89c2	                            mov edx, eax	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ef2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ef6	          0x89500c	              mov dword [rax + 0xc], edx	      1307	convert.c	FUNCTION_47	IF_2	CALL_4
0x2ef9	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1308	convert.c	FUNCTION_47	IF_2	IF_3
0x2efd	          0x8b400c	              mov eax, dword [rax + 0xc]	      1308	convert.c	FUNCTION_47	IF_2	IF_3
0x2f00	            0x85c0	                           test eax, eax	      1308	convert.c	FUNCTION_47	IF_2	IF_3
0x2f02	            0x7515	                           jne 0x4002f59	      1308	convert.c	FUNCTION_47	IF_2	IF_3
0x2f04	        0x488b45f8	                mov rax, qword [rbp - 8]	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f08	          0x4889c7	                            mov rdi, rax	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f0b	      0xe8affdffff	            call sym.git_path_check_crlf	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f10	            0x89c2	                            mov edx, eax	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f12	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f16	          0x89500c	              mov dword [rax + 0xc], edx	      1309	convert.c	FUNCTION_47	IF_2	CALL_5
0x2f19	        0x488b45f8	                mov rax, qword [rbp - 8]	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f1d	        0x4883c010	                           add rax, 0x10	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f21	          0x4889c7	                            mov rdi, rax	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f24	      0xe8f5feffff	           call sym.git_path_check_ident	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f29	            0x89c2	                            mov edx, eax	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f2b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f2f	          0x895010	             mov dword [rax + 0x10], edx	      1310	convert.c	FUNCTION_47	IF_2	CALL_6
0x2f32	        0x488b45f8	                mov rax, qword [rbp - 8]	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f36	        0x4883c020	                           add rax, 0x20	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f3a	          0x4889c7	                            mov rdi, rax	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f3d	      0xe85bfeffff	         call sym.git_path_check_convert	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f42	          0x4889c2	                            mov rdx, rax	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f45	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f49	          0x488910	                    mov qword [rax], rdx	      1311	convert.c	FUNCTION_47	IF_2	CALL_7
0x2f4c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1312	convert.c	FUNCTION_47	IF_2	IF_4
0x2f50	          0x8b400c	              mov eax, dword [rax + 0xc]	      1312	convert.c	FUNCTION_47	IF_2	IF_4
0x2f53	          0x83f801	                              cmp eax, 1	      1312	convert.c	FUNCTION_47	IF_2	IF_4
0x2f56	            0x7475	                            je 0x400300d	      1312	convert.c	FUNCTION_47	IF_2	IF_4
0x2f58	        0x488b45f8	                mov rax, qword [rbp - 8]	      1313	convert.c	FUNCTION_47	IF_2	IF_4	CALL_8
0x2f5c	        0x4883c030	                           add rax, 0x30	      1313	convert.c	FUNCTION_47	IF_2	IF_4	CALL_8
0x2f60	          0x4889c7	                            mov rdi, rax	      1313	convert.c	FUNCTION_47	IF_2	IF_4	CALL_8
0x2f63	      0xe8d7fdffff	             call sym.git_path_check_eol	      1313	convert.c	FUNCTION_47	IF_2	IF_4	CALL_8
0x2f68	          0x8945f4	              mov dword [rbp - 0xc], eax	      1313	convert.c	FUNCTION_47	IF_2	IF_4	CALL_8
0x2f6b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f6f	          0x8b400c	              mov eax, dword [rax + 0xc]	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f72	          0x83f805	                              cmp eax, 5	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f75	            0x7513	                           jne 0x4002fca	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f77	        0x837df402	                cmp dword [rbp - 0xc], 2	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f7b	            0x750d	                           jne 0x4002fca	      1314	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f7d	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1315	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f81	    0xc7400c060000	                mov dword [rax + 0xc], 6	      1315	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f88	            0xeb43	                           jmp 0x400300d	      1315	convert.c	FUNCTION_47	IF_2	IF_4	IF_5
0x2f8a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f8e	          0x8b400c	              mov eax, dword [rax + 0xc]	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f91	          0x83f805	                              cmp eax, 5	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f94	            0x7513	                           jne 0x4002fe9	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f96	        0x837df401	                cmp dword [rbp - 0xc], 1	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f9a	            0x750d	                           jne 0x4002fe9	      1316	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2f9c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1317	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2fa0	    0xc7400c070000	                mov dword [rax + 0xc], 7	      1317	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2fa7	            0xeb24	                           jmp 0x400300d	      1317	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_1	IF_6
0x2fa9	        0x837df402	                cmp dword [rbp - 0xc], 2	      1318	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_2	IF_7
0x2fad	            0x750d	                           jne 0x4002ffc	      1318	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_2	IF_7
0x2faf	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1319	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_2	IF_7
0x2fb3	    0xc7400c030000	                mov dword [rax + 0xc], 3	      1319	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_2	IF_7
0x2fba	            0xeb11	                           jmp 0x400300d	      1319	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_2	IF_7
0x2fbc	        0x837df401	                cmp dword [rbp - 0xc], 1	      1320	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_3	IF_8
0x2fc0	            0x750b	                           jne 0x400300d	      1320	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_3	IF_8
0x2fc2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1321	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_3	IF_8
0x2fc6	    0xc7400c040000	                mov dword [rax + 0xc], 4	      1321	convert.c	FUNCTION_47	IF_2	IF_4	ELSE_3	IF_8
0x2fcd	        0x488b45f8	                mov rax, qword [rbp - 8]	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fd1	        0x4883c050	                           add rax, 0x50	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fd5	          0x4889c7	                            mov rdi, rax	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fd8	      0xe85ffcffff	        call sym.git_path_check_encoding	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fdd	          0x4889c2	                            mov rdx, rax	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fe0	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fe4	        0x48895018	             mov qword [rax + 0x18], rdx	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fe8	            0xeb21	                           jmp 0x400304b	      1323	convert.c	FUNCTION_47	IF_2	CALL_9
0x2fea	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1325	convert.c	FUNCTION_47	ELSE_4
0x2fee	    0x48c700000000	                      mov qword [rax], 0	      1325	convert.c	FUNCTION_47	ELSE_4
0x2ff5	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1326	convert.c	FUNCTION_47	ELSE_4
0x2ff9	    0xc7400c000000	                mov dword [rax + 0xc], 0	      1326	convert.c	FUNCTION_47	ELSE_4
0x3000	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1327	convert.c	FUNCTION_47	ELSE_4
0x3004	    0xc74010000000	               mov dword [rax + 0x10], 0	      1327	convert.c	FUNCTION_47	ELSE_4
0x300b	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1331	convert.c	FUNCTION_47
0x300f	          0x8b500c	              mov edx, dword [rax + 0xc]	      1331	convert.c	FUNCTION_47
0x3012	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1331	convert.c	FUNCTION_47
0x3016	          0x895008	                mov dword [rax + 8], edx	      1331	convert.c	FUNCTION_47
0x3019	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1332	convert.c	FUNCTION_47	IF_9
0x301d	          0x8b400c	              mov eax, dword [rax + 0xc]	      1332	convert.c	FUNCTION_47	IF_9
0x3020	          0x83f802	                              cmp eax, 2	      1332	convert.c	FUNCTION_47	IF_9
0x3023	            0x751c	                           jne 0x4003081	      1332	convert.c	FUNCTION_47	IF_9
0x3025	      0xe875d6ffff	               call sym.text_eol_is_crlf	      1333	convert.c	FUNCTION_47	CALL_10
0x302a	            0x85c0	                           test eax, eax	      1333	convert.c	FUNCTION_47	CALL_10
0x302c	            0x7407	                            je 0x4003075	      1333	convert.c	FUNCTION_47	CALL_10
0x302e	      0xba04000000	                              mov edx, 4	      1333	convert.c	FUNCTION_47	CALL_10
0x3033	            0xeb05	                           jmp 0x400307a	      1333	convert.c	FUNCTION_47	CALL_10
0x3035	      0xba03000000	                              mov edx, 3	      1333	convert.c	FUNCTION_47	CALL_10
0x303a	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1333	convert.c	FUNCTION_47	CALL_10
0x303e	          0x89500c	              mov dword [rax + 0xc], edx	      1333	convert.c	FUNCTION_47	CALL_10
0x3041	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1334	convert.c	FUNCTION_47	IF_10
0x3045	          0x8b400c	              mov eax, dword [rax + 0xc]	      1334	convert.c	FUNCTION_47	IF_10
0x3048	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_47	IF_10
0x304a	            0x7515	                           jne 0x40030a1	      1334	convert.c	FUNCTION_47	IF_10
0x304c	    0x8b0500000000	            mov eax, dword [0x04003092] 	      1334	convert.c	FUNCTION_47	IF_10
0x3052	            0x85c0	                           test eax, eax	      1334	convert.c	FUNCTION_47	IF_10
0x3054	            0x750b	                           jne 0x40030a1	      1334	convert.c	FUNCTION_47	IF_10
0x3056	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1335	convert.c	FUNCTION_47	IF_10
0x305a	    0xc7400c010000	                mov dword [rax + 0xc], 1	      1335	convert.c	FUNCTION_47	IF_10
0x3061	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1336	convert.c	FUNCTION_47	IF_11
0x3065	          0x8b400c	              mov eax, dword [rax + 0xc]	      1336	convert.c	FUNCTION_47	IF_11
0x3068	            0x85c0	                           test eax, eax	      1336	convert.c	FUNCTION_47	IF_11
0x306a	            0x7516	                           jne 0x40030c2	      1336	convert.c	FUNCTION_47	IF_11
0x306c	    0x8b0500000000	            mov eax, dword [0x040030b2] 	      1336	convert.c	FUNCTION_47	IF_11
0x3072	          0x83f801	                              cmp eax, 1	      1336	convert.c	FUNCTION_47	IF_11
0x3075	            0x750b	                           jne 0x40030c2	      1336	convert.c	FUNCTION_47	IF_11
0x3077	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1337	convert.c	FUNCTION_47	IF_11
0x307b	    0xc7400c070000	                mov dword [rax + 0xc], 7	      1337	convert.c	FUNCTION_47	IF_11
0x3082	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1338	convert.c	FUNCTION_47	IF_12
0x3086	          0x8b400c	              mov eax, dword [rax + 0xc]	      1338	convert.c	FUNCTION_47	IF_12
0x3089	            0x85c0	                           test eax, eax	      1338	convert.c	FUNCTION_47	IF_12
0x308b	            0x7516	                           jne 0x40030e3	      1338	convert.c	FUNCTION_47	IF_12
0x308d	    0x8b0500000000	            mov eax, dword [0x040030d3] 	      1338	convert.c	FUNCTION_47	IF_12
0x3093	          0x83f8ff	             cmp eax, 0xffffffffffffffff	      1338	convert.c	FUNCTION_47	IF_12
0x3096	            0x750b	                           jne 0x40030e3	      1338	convert.c	FUNCTION_47	IF_12
0x3098	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1339	convert.c	FUNCTION_47	IF_12
0x309c	    0xc7400c060000	                mov dword [rax + 0xc], 6	      1339	convert.c	FUNCTION_47	IF_12
0x30a3	              0x90	                                     nop	      1340	convert.c	FUNCTION_47
0x30a4	              0xc9	                                   leave	      1340	convert.c	FUNCTION_47
0x30a5	              0xc3	                                     ret	      1340	convert.c	FUNCTION_47
would_convert_to_git_filter_fd	CALL,2:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	41
0x30a6	              0x55	                                push rbp	      1343	convert.c	FUNCTION_48
0x30a7	          0x4889e5	                            mov rbp, rsp	      1343	convert.c	FUNCTION_48
0x30aa	        0x4883ec40	                           sub rsp, 0x40	      1343	convert.c	FUNCTION_48
0x30ae	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1343	convert.c	FUNCTION_48
0x30b2	    0x64488b042528	                mov rax, qword fs:[0x28]	      1343	convert.c	FUNCTION_48
0x30bb	        0x488945f8	                mov qword [rbp - 8], rax	      1343	convert.c	FUNCTION_48
0x30bf	            0x31c0	                            xor eax, eax	      1343	convert.c	FUNCTION_48
0x30c1	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1346	convert.c	FUNCTION_48	CALL_1
0x30c5	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1346	convert.c	FUNCTION_48	CALL_1
0x30c9	          0x4889d6	                            mov rsi, rdx	      1346	convert.c	FUNCTION_48	CALL_1
0x30cc	          0x4889c7	                            mov rdi, rax	      1346	convert.c	FUNCTION_48	CALL_1
0x30cf	      0xe86efdffff	                  call sym.convert_attrs	      1346	convert.c	FUNCTION_48	CALL_1
0x30d4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1347	convert.c	FUNCTION_48	IF_1
0x30d8	          0x4885c0	                           test rax, rax	      1347	convert.c	FUNCTION_48	IF_1
0x30db	            0x7507	                           jne 0x4003124	      1347	convert.c	FUNCTION_48	IF_1
0x30dd	      0xb800000000	                              mov eax, 0	      1348	convert.c	FUNCTION_48	IF_1
0x30e2	            0xeb42	                           jmp 0x4003166	      1348	convert.c	FUNCTION_48	IF_1
0x30e4	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1355	convert.c	FUNCTION_48	IF_2
0x30e8	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1355	convert.c	FUNCTION_48	IF_2
0x30eb	            0x85c0	                           test eax, eax	      1355	convert.c	FUNCTION_48	IF_2
0x30ed	            0x7507	                           jne 0x4003136	      1355	convert.c	FUNCTION_48	IF_2
0x30ef	      0xb800000000	                              mov eax, 0	      1356	convert.c	FUNCTION_48	IF_2
0x30f4	            0xeb30	                           jmp 0x4003166	      1356	convert.c	FUNCTION_48	IF_2
0x30f6	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1358	convert.c	FUNCTION_48	CALL_2
0x30fa	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1358	convert.c	FUNCTION_48	CALL_2
0x30fe	            0x6a00	                                  push 0	      1358	convert.c	FUNCTION_48	CALL_2
0x3100	            0x6a01	                                  push 1	      1358	convert.c	FUNCTION_48	CALL_2
0x3102	          0x4989d1	                             mov r9, rdx	      1358	convert.c	FUNCTION_48	CALL_2
0x3105	    0x41b800000000	                              mov r8d, 0	      1358	convert.c	FUNCTION_48	CALL_2
0x310b	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1358	convert.c	FUNCTION_48	CALL_2
0x3110	      0xba00000000	                              mov edx, 0	      1358	convert.c	FUNCTION_48	CALL_2
0x3115	      0xbe00000000	                              mov esi, 0	      1358	convert.c	FUNCTION_48	CALL_2
0x311a	          0x4889c7	                            mov rdi, rax	      1358	convert.c	FUNCTION_48	CALL_2
0x311d	      0xe8c1f1ffff	                   call sym.apply_filter	      1358	convert.c	FUNCTION_48	CALL_2
0x3122	        0x4883c410	                           add rsp, 0x10	      1358	convert.c	FUNCTION_48	CALL_2
0x3126	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1359	convert.c	FUNCTION_48
0x312a	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1359	convert.c	FUNCTION_48
0x3133	            0x7405	                            je 0x400317a	      1359	convert.c	FUNCTION_48
0x3135	      0xe800000000	                          call 0x400317a	      1359	convert.c	FUNCTION_48
0x313a	              0xc9	                                   leave	      1359	convert.c	FUNCTION_48
0x313b	              0xc3	                                     ret	      1359	convert.c	FUNCTION_48
crlf_to_git	CALL,9:WHILE,0:functions,0:IF,14:SWITCH,0:ELSE,1:DO,2:FOR,0	195
0x1226	              0x55	                                push rbp	       508	convert.c	FUNCTION_29
0x1227	          0x4889e5	                            mov rbp, rsp	       508	convert.c	FUNCTION_29
0x122a	        0x4883c480	             add rsp, 0xffffffffffffff80	       508	convert.c	FUNCTION_29
0x122e	        0x48897da8	             mov qword [rbp - 0x58], rdi	       508	convert.c	FUNCTION_29
0x1232	        0x488975a0	             mov qword [rbp - 0x60], rsi	       508	convert.c	FUNCTION_29
0x1236	        0x48895598	             mov qword [rbp - 0x68], rdx	       508	convert.c	FUNCTION_29
0x123a	        0x48894d90	             mov qword [rbp - 0x70], rcx	       508	convert.c	FUNCTION_29
0x123e	        0x4c894588	              mov qword [rbp - 0x78], r8	       508	convert.c	FUNCTION_29
0x1242	        0x44894d84	             mov dword [rbp - 0x7c], r9d	       508	convert.c	FUNCTION_29
0x1246	    0x64488b042528	                mov rax, qword fs:[0x28]	       508	convert.c	FUNCTION_29
0x124f	        0x488945f8	                mov qword [rbp - 8], rax	       508	convert.c	FUNCTION_29
0x1253	            0x31c0	                            xor eax, eax	       508	convert.c	FUNCTION_29
0x1255	        0x837d8401	               cmp dword [rbp - 0x7c], 1	       513	convert.c	FUNCTION_29	IF_1
0x1259	            0x740e	                            je 0x40012a9	       513	convert.c	FUNCTION_29	IF_1
0x125b	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       513	convert.c	FUNCTION_29	IF_1
0x1260	            0x7411	                            je 0x40012b3	       513	convert.c	FUNCTION_29	IF_1
0x1262	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       514	convert.c	FUNCTION_29	IF_1
0x1267	            0x750a	                           jne 0x40012b3	       514	convert.c	FUNCTION_29	IF_1
0x1269	      0xb800000000	                              mov eax, 0	       515	convert.c	FUNCTION_29	IF_1
0x126e	      0xe950020000	                           jmp 0x4001503	       515	convert.c	FUNCTION_29	IF_1
0x1273	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       521	convert.c	FUNCTION_29	IF_2
0x1278	            0x7511	                           jne 0x40012cb	       521	convert.c	FUNCTION_29	IF_2
0x127a	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       521	convert.c	FUNCTION_29	IF_2
0x127f	            0x750a	                           jne 0x40012cb	       521	convert.c	FUNCTION_29	IF_2
0x1281	      0xb801000000	                              mov eax, 1	       522	convert.c	FUNCTION_29	IF_2
0x1286	      0xe938020000	                           jmp 0x4001503	       522	convert.c	FUNCTION_29	IF_2
0x128b	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       524	convert.c	FUNCTION_29	CALL_1
0x128f	        0x488b4d90	             mov rcx, qword [rbp - 0x70]	       524	convert.c	FUNCTION_29	CALL_1
0x1293	        0x488b4598	             mov rax, qword [rbp - 0x68]	       524	convert.c	FUNCTION_29	CALL_1
0x1297	          0x4889ce	                            mov rsi, rcx	       524	convert.c	FUNCTION_29	CALL_1
0x129a	          0x4889c7	                            mov rdi, rax	       524	convert.c	FUNCTION_29	CALL_1
0x129d	      0xe822f0ffff	                   call sym.gather_stats	       524	convert.c	FUNCTION_29	CALL_1
0x12a2	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       526	convert.c	FUNCTION_29
0x12a5	            0x85c0	                           test eax, eax	       526	convert.c	FUNCTION_29
0x12a7	           0xf95c0	                                setne al	       526	convert.c	FUNCTION_29
0x12aa	           0xfb6c0	                           movzx eax, al	       526	convert.c	FUNCTION_29
0x12ad	          0x8945b4	             mov dword [rbp - 0x4c], eax	       526	convert.c	FUNCTION_29
0x12b0	        0x837d8405	               cmp dword [rbp - 0x7c], 5	       528	convert.c	FUNCTION_29	IF_3
0x12b4	            0x740c	                            je 0x4001302	       528	convert.c	FUNCTION_29	IF_3
0x12b6	        0x837d8406	               cmp dword [rbp - 0x7c], 6	       528	convert.c	FUNCTION_29	IF_3
0x12ba	            0x7406	                            je 0x4001302	       528	convert.c	FUNCTION_29	IF_3
0x12bc	        0x837d8407	               cmp dword [rbp - 0x7c], 7	       528	convert.c	FUNCTION_29	IF_3
0x12c0	            0x7549	                           jne 0x400134b	       528	convert.c	FUNCTION_29	IF_3
0x12c2	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12c6	        0x488b4590	             mov rax, qword [rbp - 0x70]	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12ca	          0x4889d6	                            mov rsi, rdx	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12cd	          0x4889c7	                            mov rdi, rax	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12d0	      0xe869f1ffff	              call sym.convert_is_binary	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12d5	            0x85c0	                           test eax, eax	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12d7	            0x740a	                            je 0x4001323	       529	convert.c	FUNCTION_29	IF_3	IF_4	CALL_2
0x12d9	      0xb800000000	                              mov eax, 0	       530	convert.c	FUNCTION_29	IF_3	IF_4
0x12de	      0xe9e0010000	                           jmp 0x4001503	       530	convert.c	FUNCTION_29	IF_3	IF_4
0x12e3	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x12e6	          0x83e004	                              and eax, 4	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x12e9	            0x85c0	                           test eax, eax	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x12eb	            0x751e	                           jne 0x400134b	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x12ed	        0x488b55a0	             mov rdx, qword [rbp - 0x60]	       538	convert.c	FUNCTION_29	IF_3	IF_5	CALL_3
0x12f1	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       538	convert.c	FUNCTION_29	IF_3	IF_5	CALL_3
0x12f5	          0x4889d6	                            mov rsi, rdx	       538	convert.c	FUNCTION_29	IF_3	IF_5	CALL_3
0x12f8	          0x4889c7	                            mov rdi, rax	       538	convert.c	FUNCTION_29	IF_3	IF_5	CALL_3
0x12fb	      0xe853f5ffff	              call sym.has_crlf_in_index	       538	convert.c	FUNCTION_29	IF_3	IF_5	CALL_3
0x1300	            0x85c0	                           test eax, eax	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x1302	            0x7407	                            je 0x400134b	       537	convert.c	FUNCTION_29	IF_3	IF_5
0x1304	    0xc745b4000000	               mov dword [rbp - 0x4c], 0	       539	convert.c	FUNCTION_29	IF_3	IF_5
0x130b	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       541	convert.c	FUNCTION_29	IF_6
0x130e	          0x83e002	                              and eax, 2	       541	convert.c	FUNCTION_29	IF_6
0x1311	            0x85c0	                           test eax, eax	       541	convert.c	FUNCTION_29	IF_6
0x1313	            0x7511	                           jne 0x4001366	       541	convert.c	FUNCTION_29	IF_6
0x1315	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       542	convert.c	FUNCTION_29	IF_6
0x1318	          0x83e001	                              and eax, 1	       542	convert.c	FUNCTION_29	IF_6
0x131b	            0x85c0	                           test eax, eax	       541	convert.c	FUNCTION_29	IF_6
0x131d	            0x747e	                            je 0x40013dd	       541	convert.c	FUNCTION_29	IF_6
0x131f	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       542	convert.c	FUNCTION_29	IF_6
0x1324	            0x7477	                            je 0x40013dd	       542	convert.c	FUNCTION_29	IF_6
0x1326	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x132a	        0x488945e0	             mov qword [rbp - 0x20], rax	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x132e	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x1332	        0x488945e8	             mov qword [rbp - 0x18], rax	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x1336	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x133a	        0x488945f0	             mov qword [rbp - 0x10], rax	       544	convert.c	FUNCTION_29	IF_6	CALL_4
0x133e	        0x837db400	               cmp dword [rbp - 0x4c], 0	       546	convert.c	FUNCTION_29	IF_6	IF_7
0x1342	            0x7412	                            je 0x4001396	       546	convert.c	FUNCTION_29	IF_6	IF_7
0x1344	          0x8b55e8	             mov edx, dword [rbp - 0x18]	       547	convert.c	FUNCTION_29	IF_6	IF_7
0x1347	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       547	convert.c	FUNCTION_29	IF_6	IF_7
0x134a	             0x1d0	                            add eax, edx	       547	convert.c	FUNCTION_29	IF_6	IF_7
0x134c	          0x8945e8	             mov dword [rbp - 0x18], eax	       547	convert.c	FUNCTION_29	IF_6	IF_7
0x134f	    0xc745ec000000	               mov dword [rbp - 0x14], 0	       548	convert.c	FUNCTION_29	IF_6	IF_7
0x1356	          0x8b5584	             mov edx, dword [rbp - 0x7c]	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x1359	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x135d	        0x488b4590	             mov rax, qword [rbp - 0x70]	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x1361	          0x4889ce	                            mov rsi, rcx	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x1364	          0x4889c7	                            mov rdi, rax	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x1367	      0xe8acf5ffff	        call sym.will_convert_lf_to_crlf	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x136c	            0x85c0	                           test eax, eax	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x136e	            0x7412	                            je 0x40013c2	       551	convert.c	FUNCTION_29	IF_6	IF_8	CALL_5
0x1370	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       552	convert.c	FUNCTION_29	IF_6	IF_8
0x1373	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       552	convert.c	FUNCTION_29	IF_6	IF_8
0x1376	             0x1d0	                            add eax, edx	       552	convert.c	FUNCTION_29	IF_6	IF_8
0x1378	          0x8945ec	             mov dword [rbp - 0x14], eax	       552	convert.c	FUNCTION_29	IF_6	IF_8
0x137b	    0xc745e8000000	               mov dword [rbp - 0x18], 0	       553	convert.c	FUNCTION_29	IF_6	IF_8
0x1382	        0x488d4de0	                   lea rcx, [rbp - 0x20]	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x1386	        0x488d55c0	                   lea rdx, [rbp - 0x40]	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x138a	          0x8b7584	             mov esi, dword [rbp - 0x7c]	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x138d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x1391	        0x448b4510	            mov r8d, dword [rbp + 0x10] 	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x1395	          0x4889c7	                            mov rdi, rax	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x1398	      0xe8b7f3ffff	    call sym.check_global_conv_flags_eol	       555	convert.c	FUNCTION_29	IF_6	CALL_6
0x139d	        0x837db400	               cmp dword [rbp - 0x4c], 0	       557	convert.c	FUNCTION_29	IF_9
0x13a1	            0x750a	                           jne 0x40013ed	       557	convert.c	FUNCTION_29	IF_9
0x13a3	      0xb800000000	                              mov eax, 0	       558	convert.c	FUNCTION_29	IF_9
0x13a8	      0xe916010000	                           jmp 0x4001503	       558	convert.c	FUNCTION_29	IF_9
0x13ad	      0x48837d8800	               cmp qword [rbp - 0x78], 0	       564	convert.c	FUNCTION_29	IF_10
0x13b2	            0x750a	                           jne 0x40013fe	       564	convert.c	FUNCTION_29	IF_10
0x13b4	      0xb801000000	                              mov eax, 1	       565	convert.c	FUNCTION_29	IF_10
0x13b9	      0xe905010000	                           jmp 0x4001503	       565	convert.c	FUNCTION_29	IF_10
0x13be	        0x488b4588	             mov rax, qword [rbp - 0x78]	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13c2	          0x4889c7	                            mov rdi, rax	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13c5	      0xe82bedffff	                   call sym.strbuf_avail	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13ca	          0x4889c2	                            mov rdx, rax	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13cd	        0x488b4588	             mov rax, qword [rbp - 0x78]	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13d1	        0x488b4008	                mov rax, qword [rax + 8]	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13d5	          0x4801d0	                            add rax, rdx	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13d8	        0x483b4590	             cmp rax, qword [rbp - 0x70]	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13dc	            0x731e	                           jae 0x400143c	       568	convert.c	FUNCTION_29	IF_11	CALL_7
0x13de	        0x488b4588	             mov rax, qword [rbp - 0x78]	       569	convert.c	FUNCTION_29	CALL_8
0x13e2	        0x488b4008	                mov rax, qword [rax + 8]	       569	convert.c	FUNCTION_29	CALL_8
0x13e6	        0x488b5590	             mov rdx, qword [rbp - 0x70]	       569	convert.c	FUNCTION_29	CALL_8
0x13ea	          0x4829c2	                            sub rdx, rax	       569	convert.c	FUNCTION_29	CALL_8
0x13ed	        0x488b4588	             mov rax, qword [rbp - 0x78]	       569	convert.c	FUNCTION_29	CALL_8
0x13f1	          0x4889d6	                            mov rsi, rdx	       569	convert.c	FUNCTION_29	CALL_8
0x13f4	          0x4889c7	                            mov rdi, rax	       569	convert.c	FUNCTION_29	CALL_8
0x13f7	      0xe800000000	                          call 0x400143c	       569	convert.c	FUNCTION_29	CALL_8
0x13fc	        0x488b4588	             mov rax, qword [rbp - 0x78]	       570	convert.c	FUNCTION_29
0x1400	        0x488b4010	            mov rax, qword [rax + 0x10] 	       570	convert.c	FUNCTION_29
0x1404	        0x488945b8	             mov qword [rbp - 0x48], rax	       570	convert.c	FUNCTION_29
0x1408	        0x837d8405	               cmp dword [rbp - 0x7c], 5	       571	convert.c	FUNCTION_29	IF_12
0x140c	            0x740c	                            je 0x400145a	       571	convert.c	FUNCTION_29	IF_12
0x140e	        0x837d8406	               cmp dword [rbp - 0x7c], 6	       571	convert.c	FUNCTION_29	IF_12
0x1412	            0x7406	                            je 0x400145a	       571	convert.c	FUNCTION_29	IF_12
0x1414	        0x837d8407	               cmp dword [rbp - 0x7c], 7	       571	convert.c	FUNCTION_29	IF_12
0x1418	            0x7538	                           jne 0x4001492	       571	convert.c	FUNCTION_29	IF_12
0x141a	        0x488b4598	             mov rax, qword [rbp - 0x68]	       578	convert.c	FUNCTION_29	IF_12	DO_1
0x141e	        0x488d5001	                      lea rdx, [rax + 1]	       578	convert.c	FUNCTION_29	IF_12	DO_1
0x1422	        0x48895598	             mov qword [rbp - 0x68], rdx	       578	convert.c	FUNCTION_29	IF_12	DO_1
0x1426	           0xfb600	                   movzx eax, byte [rax]	       578	convert.c	FUNCTION_29	IF_12	DO_1
0x1429	          0x8845b3	               mov byte [rbp - 0x4d], al	       578	convert.c	FUNCTION_29	IF_12	DO_1
0x142c	        0x807db30d	              cmp byte [rbp - 0x4d], 0xd	       579	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x1430	            0x7412	                            je 0x4001484	       579	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x1432	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       580	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x1436	        0x488d5001	                      lea rdx, [rax + 1]	       580	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x143a	        0x488955b8	             mov qword [rbp - 0x48], rdx	       580	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x143e	         0xfb655b3	            movzx edx, byte [rbp - 0x4d]	       580	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x1442	            0x8810	                      mov byte [rax], dl	       580	convert.c	FUNCTION_29	IF_12	DO_1	IF_13
0x1444	      0x48836d9001	               sub qword [rbp - 0x70], 1	       581	convert.c	FUNCTION_29	IF_12	DO_1
0x1449	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       581	convert.c	FUNCTION_29	IF_12	DO_1
0x144e	            0x75ca	                           jne 0x400145a	       581	convert.c	FUNCTION_29	IF_12	DO_1
0x1450	            0xeb48	                           jmp 0x40014da	       571	convert.c	FUNCTION_29	IF_12
0x1452	        0x488b4598	             mov rax, qword [rbp - 0x68]	       584	convert.c	FUNCTION_29	ELSE_1	DO_2
0x1456	        0x488d5001	                      lea rdx, [rax + 1]	       584	convert.c	FUNCTION_29	ELSE_1	DO_2
0x145a	        0x48895598	             mov qword [rbp - 0x68], rdx	       584	convert.c	FUNCTION_29	ELSE_1	DO_2
0x145e	           0xfb600	                   movzx eax, byte [rax]	       584	convert.c	FUNCTION_29	ELSE_1	DO_2
0x1461	          0x8845b2	               mov byte [rbp - 0x4e], al	       584	convert.c	FUNCTION_29	ELSE_1	DO_2
0x1464	        0x807db20d	              cmp byte [rbp - 0x4e], 0xd	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1468	            0x7512	                           jne 0x40014bc	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x146a	      0x48837d9001	               cmp qword [rbp - 0x70], 1	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x146f	            0x760b	                           jbe 0x40014bc	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1471	        0x488b4598	             mov rax, qword [rbp - 0x68]	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1475	           0xfb600	                   movzx eax, byte [rax]	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1478	            0x3c0a	                             cmp al, 0xa	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x147a	            0x7412	                            je 0x40014ce	       585	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x147c	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       586	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1480	        0x488d5001	                      lea rdx, [rax + 1]	       586	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1484	        0x488955b8	             mov qword [rbp - 0x48], rdx	       586	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x1488	         0xfb655b2	            movzx edx, byte [rbp - 0x4e]	       586	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x148c	            0x8810	                      mov byte [rax], dl	       586	convert.c	FUNCTION_29	ELSE_1	DO_2	IF_14
0x148e	      0x48836d9001	               sub qword [rbp - 0x70], 1	       587	convert.c	FUNCTION_29	ELSE_1	DO_2
0x1493	      0x48837d9000	               cmp qword [rbp - 0x70], 0	       587	convert.c	FUNCTION_29	ELSE_1	DO_2
0x1498	            0x75b8	                           jne 0x4001492	       587	convert.c	FUNCTION_29	ELSE_1	DO_2
0x149a	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       589	convert.c	FUNCTION_29	CALL_9
0x149e	        0x488b4588	             mov rax, qword [rbp - 0x78]	       589	convert.c	FUNCTION_29	CALL_9
0x14a2	        0x488b4010	            mov rax, qword [rax + 0x10] 	       589	convert.c	FUNCTION_29	CALL_9
0x14a6	          0x4829c2	                            sub rdx, rax	       589	convert.c	FUNCTION_29	CALL_9
0x14a9	          0x4889d0	                            mov rax, rdx	       589	convert.c	FUNCTION_29	CALL_9
0x14ac	          0x4889c2	                            mov rdx, rax	       589	convert.c	FUNCTION_29	CALL_9
0x14af	        0x488b4588	             mov rax, qword [rbp - 0x78]	       589	convert.c	FUNCTION_29	CALL_9
0x14b3	          0x4889d6	                            mov rsi, rdx	       589	convert.c	FUNCTION_29	CALL_9
0x14b6	          0x4889c7	                            mov rdi, rax	       589	convert.c	FUNCTION_29	CALL_9
0x14b9	      0xe86decffff	                  call sym.strbuf_setlen	       589	convert.c	FUNCTION_29	CALL_9
0x14be	      0xb801000000	                              mov eax, 1	       590	convert.c	FUNCTION_29
0x14c3	        0x488b4df8	                mov rcx, qword [rbp - 8]	       591	convert.c	FUNCTION_29
0x14c7	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       591	convert.c	FUNCTION_29
0x14d0	            0x7405	                            je 0x4001517	       591	convert.c	FUNCTION_29
0x14d2	      0xe800000000	                          call 0x4001517	       591	convert.c	FUNCTION_29
0x14d7	              0xc9	                                   leave	       591	convert.c	FUNCTION_29
0x14d8	              0xc3	                                     ret	       591	convert.c	FUNCTION_29
apply_filter	CALL,2:WHILE,0:functions,0:IF,6:SWITCH,0:ELSE,2:DO,0:FOR,0	92
0x22e3	              0x55	                                push rbp	       977	convert.c	FUNCTION_37
0x22e4	          0x4889e5	                            mov rbp, rsp	       977	convert.c	FUNCTION_37
0x22e7	        0x4883ec40	                           sub rsp, 0x40	       977	convert.c	FUNCTION_37
0x22eb	        0x48897de8	             mov qword [rbp - 0x18], rdi	       977	convert.c	FUNCTION_37
0x22ef	        0x488975e0	             mov qword [rbp - 0x20], rsi	       977	convert.c	FUNCTION_37
0x22f3	        0x488955d8	             mov qword [rbp - 0x28], rdx	       977	convert.c	FUNCTION_37
0x22f7	          0x894dd4	             mov dword [rbp - 0x2c], ecx	       977	convert.c	FUNCTION_37
0x22fa	        0x4c8945c8	              mov qword [rbp - 0x38], r8	       977	convert.c	FUNCTION_37
0x22fe	        0x4c894dc0	              mov qword [rbp - 0x40], r9	       977	convert.c	FUNCTION_37
0x2302	    0x48c745f80000	                  mov qword [rbp - 8], 0	       978	convert.c	FUNCTION_37
0x230a	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       980	convert.c	FUNCTION_37	IF_1
0x230f	            0x750a	                           jne 0x400235b	       980	convert.c	FUNCTION_37	IF_1
0x2311	      0xb800000000	                              mov eax, 0	       981	convert.c	FUNCTION_37	IF_1
0x2316	      0xe9fd000000	                           jmp 0x4002458	       981	convert.c	FUNCTION_37	IF_1
0x231b	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       983	convert.c	FUNCTION_37	IF_2
0x2320	            0x750a	                           jne 0x400236c	       983	convert.c	FUNCTION_37	IF_2
0x2322	      0xb801000000	                              mov eax, 1	       984	convert.c	FUNCTION_37	IF_2
0x2327	      0xe9ec000000	                           jmp 0x4002458	       984	convert.c	FUNCTION_37	IF_2
0x232c	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       986	convert.c	FUNCTION_37	IF_3
0x232f	          0x83e001	                              and eax, 1	       986	convert.c	FUNCTION_37	IF_3
0x2332	            0x85c0	                           test eax, eax	       986	convert.c	FUNCTION_37	IF_3
0x2334	            0x7428	                            je 0x400239e	       986	convert.c	FUNCTION_37	IF_3
0x2336	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       986	convert.c	FUNCTION_37	IF_3
0x233a	        0x488b4020	            mov rax, qword [rax + 0x20] 	       986	convert.c	FUNCTION_37	IF_3
0x233e	          0x4885c0	                           test rax, rax	       986	convert.c	FUNCTION_37	IF_3
0x2341	            0x751b	                           jne 0x400239e	       986	convert.c	FUNCTION_37	IF_3
0x2343	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       986	convert.c	FUNCTION_37	IF_3
0x2347	        0x488b4018	            mov rax, qword [rax + 0x18] 	       986	convert.c	FUNCTION_37	IF_3
0x234b	          0x4885c0	                           test rax, rax	       986	convert.c	FUNCTION_37	IF_3
0x234e	            0x740e	                            je 0x400239e	       986	convert.c	FUNCTION_37	IF_3
0x2350	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       987	convert.c	FUNCTION_37	IF_3
0x2354	        0x488b4018	            mov rax, qword [rax + 0x18] 	       987	convert.c	FUNCTION_37	IF_3
0x2358	        0x488945f8	                mov qword [rbp - 8], rax	       987	convert.c	FUNCTION_37	IF_3
0x235c	            0xeb30	                           jmp 0x40023ce	       987	convert.c	FUNCTION_37	IF_3
0x235e	          0x8b4510	            mov eax, dword [rbp + 0x10] 	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2361	          0x83e002	                              and eax, 2	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2364	            0x85c0	                           test eax, eax	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2366	            0x7426	                            je 0x40023ce	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2368	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x236c	        0x488b4020	            mov rax, qword [rax + 0x20] 	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2370	          0x4885c0	                           test rax, rax	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2373	            0x7519	                           jne 0x40023ce	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2375	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2379	        0x488b4010	            mov rax, qword [rax + 0x10] 	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x237d	          0x4885c0	                           test rax, rax	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2380	            0x740c	                            je 0x40023ce	       988	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2382	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       989	convert.c	FUNCTION_37	ELSE_1	IF_4
0x2386	        0x488b4010	            mov rax, qword [rax + 0x10] 	       989	convert.c	FUNCTION_37	ELSE_1	IF_4
0x238a	        0x488945f8	                mov qword [rbp - 8], rax	       989	convert.c	FUNCTION_37	ELSE_1	IF_4
0x238e	      0x48837df800	                  cmp qword [rbp - 8], 0	       991	convert.c	FUNCTION_37	IF_5
0x2393	            0x7432	                            je 0x4002407	       991	convert.c	FUNCTION_37	IF_5
0x2395	        0x488b45f8	                mov rax, qword [rbp - 8]	       991	convert.c	FUNCTION_37	IF_5
0x2399	           0xfb600	                   movzx eax, byte [rax]	       991	convert.c	FUNCTION_37	IF_5
0x239c	            0x84c0	                             test al, al	       991	convert.c	FUNCTION_37	IF_5
0x239e	            0x7427	                            je 0x4002407	       991	convert.c	FUNCTION_37	IF_5
0x23a0	        0x4c8b45f8	                 mov r8, qword [rbp - 8]	       992	convert.c	FUNCTION_37	CALL_1
0x23a4	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	       992	convert.c	FUNCTION_37	CALL_1
0x23a8	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       992	convert.c	FUNCTION_37	CALL_1
0x23ab	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       992	convert.c	FUNCTION_37	CALL_1
0x23af	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       992	convert.c	FUNCTION_37	CALL_1
0x23b3	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       992	convert.c	FUNCTION_37	CALL_1
0x23b7	          0x4d89c1	                              mov r9, r8	       992	convert.c	FUNCTION_37	CALL_1
0x23ba	          0x4989f8	                             mov r8, rdi	       992	convert.c	FUNCTION_37	CALL_1
0x23bd	          0x4889c7	                            mov rdi, rax	       992	convert.c	FUNCTION_37	CALL_1
0x23c0	      0xe80ff6ffff	       call sym.apply_single_file_filter	       992	convert.c	FUNCTION_37	CALL_1
0x23c5	            0xeb51	                           jmp 0x4002458	       992	convert.c	FUNCTION_37	CALL_1
0x23c7	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23cb	        0x488b4020	            mov rax, qword [rax + 0x20] 	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23cf	          0x4885c0	                           test rax, rax	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23d2	            0x743f	                            je 0x4002453	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23d4	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23d8	        0x488b4020	            mov rax, qword [rax + 0x20] 	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23dc	           0xfb600	                   movzx eax, byte [rax]	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23df	            0x84c0	                             test al, al	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23e1	            0x7430	                            je 0x4002453	       993	convert.c	FUNCTION_37	ELSE_2	IF_6
0x23e3	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23e7	        0x4c8b4820	              mov r9, qword [rax + 0x20]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23eb	        0x4c8b45c8	              mov r8, qword [rbp - 0x38]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23ef	          0x8b4dd4	             mov ecx, dword [rbp - 0x2c]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23f2	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23f6	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23fa	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x23fe	          0xff7518	                 push qword [rbp + 0x18]	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2401	          0x8b7d10	            mov edi, dword [rbp + 0x10] 	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2404	              0x57	                                push rdi	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2405	          0x4889c7	                            mov rdi, rax	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2408	      0xe899f8ffff	        call sym.apply_multi_file_filter	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x240d	        0x4883c410	                           add rsp, 0x10	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2411	            0xeb05	                           jmp 0x4002458	       994	convert.c	FUNCTION_37	ELSE_2	IF_6	CALL_2
0x2413	      0xb800000000	                              mov eax, 0	       997	convert.c	FUNCTION_37
0x2418	              0xc9	                                   leave	       998	convert.c	FUNCTION_37
0x2419	              0xc3	                                     ret	       998	convert.c	FUNCTION_37
skip_prefix	CALL,0:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,1:FOR,0	27
0xb	              0x55	                                push rbp	       482	git-compat-util.h	FUNCTION_79
0xc	          0x4889e5	                            mov rbp, rsp	       482	git-compat-util.h	FUNCTION_79
0xf	        0x48897df8	                mov qword [rbp - 8], rdi	       482	git-compat-util.h	FUNCTION_79
0x13	        0x488975f0	             mov qword [rbp - 0x10], rsi	       482	git-compat-util.h	FUNCTION_79
0x17	        0x488955e8	             mov qword [rbp - 0x18], rdx	       482	git-compat-util.h	FUNCTION_79
0x1b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       484	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x1f	           0xfb600	                   movzx eax, byte [rax]	       484	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x22	            0x84c0	                             test al, al	       484	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x24	            0x7512	                           jne 0x4000078	       484	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       485	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x2a	        0x488b55f8	                mov rdx, qword [rbp - 8]	       485	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x2e	          0x488910	                    mov qword [rax], rdx	       485	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x31	      0xb801000000	                              mov eax, 1	       486	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x36	            0xeb27	                           jmp 0x400009f	       486	git-compat-util.h	FUNCTION_79	DO_1	IF_1
0x38	        0x488b45f8	                mov rax, qword [rbp - 8]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x3c	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x40	        0x488955f8	                mov qword [rbp - 8], rdx	       488	git-compat-util.h	FUNCTION_79	DO_1
0x44	           0xfb608	                   movzx ecx, byte [rax]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x47	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x4b	        0x488d5001	                      lea rdx, [rax + 1]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x4f	        0x488955f0	             mov qword [rbp - 0x10], rdx	       488	git-compat-util.h	FUNCTION_79	DO_1
0x53	           0xfb600	                   movzx eax, byte [rax]	       488	git-compat-util.h	FUNCTION_79	DO_1
0x56	            0x38c1	                              cmp cl, al	       488	git-compat-util.h	FUNCTION_79	DO_1
0x58	            0x74c1	                            je 0x400005b	       488	git-compat-util.h	FUNCTION_79	DO_1
0x5a	      0xb800000000	                              mov eax, 0	       489	git-compat-util.h	FUNCTION_79
0x5f	              0x5d	                                 pop rbp	       490	git-compat-util.h	FUNCTION_79
0x60	              0xc3	                                     ret	       490	git-compat-util.h	FUNCTION_79
null_free_fn	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	6
0x3873	              0x55	                                push rbp	      1543	convert.c	FUNCTION_57
0x3874	          0x4889e5	                            mov rbp, rsp	      1543	convert.c	FUNCTION_57
0x3877	        0x48897df8	                mov qword [rbp - 8], rdi	      1543	convert.c	FUNCTION_57
0x387b	              0x90	                                     nop	      1545	convert.c	FUNCTION_57
0x387c	              0x5d	                                 pop rbp	      1545	convert.c	FUNCTION_57
0x387d	              0xc3	                                     ret	      1545	convert.c	FUNCTION_57
convert_is_binary	CALL,0:WHILE,0:functions,0:IF,3:SWITCH,0:ELSE,0:DO,0:FOR,0	29
0x43e	              0x55	                                push rbp	        95	convert.c	FUNCTION_14
0x43f	          0x4889e5	                            mov rbp, rsp	        95	convert.c	FUNCTION_14
0x442	        0x48897df8	                mov qword [rbp - 8], rdi	        95	convert.c	FUNCTION_14
0x446	        0x488975f0	             mov qword [rbp - 0x10], rsi	        95	convert.c	FUNCTION_14
0x44a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        96	convert.c	FUNCTION_14	IF_1
0x44e	          0x8b4004	                mov eax, dword [rax + 4]	        96	convert.c	FUNCTION_14	IF_1
0x451	            0x85c0	                           test eax, eax	        96	convert.c	FUNCTION_14	IF_1
0x453	            0x7407	                            je 0x400049c	        96	convert.c	FUNCTION_14	IF_1
0x455	      0xb801000000	                              mov eax, 1	        97	convert.c	FUNCTION_14	IF_1
0x45a	            0xeb34	                           jmp 0x40004d0	        97	convert.c	FUNCTION_14	IF_1
0x45c	        0x488b45f0	             mov rax, qword [rbp - 0x10]	        98	convert.c	FUNCTION_14	IF_2
0x460	            0x8b00	                    mov eax, dword [rax]	        98	convert.c	FUNCTION_14	IF_2
0x462	            0x85c0	                           test eax, eax	        98	convert.c	FUNCTION_14	IF_2
0x464	            0x7407	                            je 0x40004ad	        98	convert.c	FUNCTION_14	IF_2
0x466	      0xb801000000	                              mov eax, 1	        99	convert.c	FUNCTION_14	IF_2
0x46b	            0xeb23	                           jmp 0x40004d0	        99	convert.c	FUNCTION_14	IF_2
0x46d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       100	convert.c	FUNCTION_14	IF_3
0x471	          0x8b4010	            mov eax, dword [rax + 0x10] 	       100	convert.c	FUNCTION_14	IF_3
0x474	          0xc1e807	                              shr eax, 7	       100	convert.c	FUNCTION_14	IF_3
0x477	            0x89c2	                            mov edx, eax	       100	convert.c	FUNCTION_14	IF_3
0x479	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       100	convert.c	FUNCTION_14	IF_3
0x47d	          0x8b4014	            mov eax, dword [rax + 0x14] 	       100	convert.c	FUNCTION_14	IF_3
0x480	            0x39c2	                            cmp edx, eax	       100	convert.c	FUNCTION_14	IF_3
0x482	            0x7307	                           jae 0x40004cb	       100	convert.c	FUNCTION_14	IF_3
0x484	      0xb801000000	                              mov eax, 1	       101	convert.c	FUNCTION_14	IF_3
0x489	            0xeb05	                           jmp 0x40004d0	       101	convert.c	FUNCTION_14	IF_3
0x48b	      0xb800000000	                              mov eax, 0	       102	convert.c	FUNCTION_14
0x490	              0x5d	                                 pop rbp	       103	convert.c	FUNCTION_14
0x491	              0xc3	                                     ret	       103	convert.c	FUNCTION_14
git_path_check_ident	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	11
0x2e1e	              0x55	                                push rbp	      1279	convert.c	FUNCTION_46
0x2e1f	          0x4889e5	                            mov rbp, rsp	      1279	convert.c	FUNCTION_46
0x2e22	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1279	convert.c	FUNCTION_46
0x2e26	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1280	convert.c	FUNCTION_46
0x2e2a	        0x488b4008	                mov rax, qword [rax + 8]	      1280	convert.c	FUNCTION_46
0x2e2e	        0x488945f8	                mov qword [rbp - 8], rax	      1280	convert.c	FUNCTION_46
0x2e32	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1282	convert.c	FUNCTION_46	CALL_1
0x2e3a	           0xf94c0	                                 sete al	      1282	convert.c	FUNCTION_46	CALL_1
0x2e3d	           0xfb6c0	                           movzx eax, al	      1282	convert.c	FUNCTION_46	CALL_1
0x2e40	              0x5d	                                 pop rbp	      1283	convert.c	FUNCTION_46
0x2e41	              0xc3	                                     ret	      1283	convert.c	FUNCTION_46
convert_to_git_filter_fd	CALL,8:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	103
0x338b	              0x55	                                push rbp	      1424	convert.c	FUNCTION_51
0x338c	          0x4889e5	                            mov rbp, rsp	      1424	convert.c	FUNCTION_51
0x338f	        0x4883ec50	                           sub rsp, 0x50	      1424	convert.c	FUNCTION_51
0x3393	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1424	convert.c	FUNCTION_51
0x3397	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1424	convert.c	FUNCTION_51
0x339b	          0x8955bc	             mov dword [rbp - 0x44], edx	      1424	convert.c	FUNCTION_51
0x339e	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1424	convert.c	FUNCTION_51
0x33a2	        0x448945b8	             mov dword [rbp - 0x48], r8d	      1424	convert.c	FUNCTION_51
0x33a6	    0x64488b042528	                mov rax, qword fs:[0x28]	      1424	convert.c	FUNCTION_51
0x33af	        0x488945f8	                mov qword [rbp - 8], rax	      1424	convert.c	FUNCTION_51
0x33b3	            0x31c0	                            xor eax, eax	      1424	convert.c	FUNCTION_51
0x33b5	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1426	convert.c	FUNCTION_51	CALL_1
0x33b9	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1426	convert.c	FUNCTION_51	CALL_1
0x33bd	          0x4889d6	                            mov rsi, rdx	      1426	convert.c	FUNCTION_51	CALL_1
0x33c0	          0x4889c7	                            mov rdi, rax	      1426	convert.c	FUNCTION_51	CALL_1
0x33c3	      0xe87afaffff	                  call sym.convert_attrs	      1426	convert.c	FUNCTION_51	CALL_1
0x33c8	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1428	convert.c	FUNCTION_51	CALL_2
0x33cc	          0x4885c0	                           test rax, rax	      1428	convert.c	FUNCTION_51	CALL_2
0x33cf	            0x7519	                           jne 0x400342a	      1428	convert.c	FUNCTION_51	CALL_2
0x33d1	      0xb900000000	                              mov ecx, 0	      1428	convert.c	FUNCTION_51	CALL_2
0x33d6	      0xba94050000	                          mov edx, 0x594	      1428	convert.c	FUNCTION_51	CALL_2
0x33db	      0xbe00000000	                              mov esi, 0	      1428	convert.c	FUNCTION_51	CALL_2
0x33e0	      0xbf00000000	                              mov edi, 0	      1428	convert.c	FUNCTION_51	CALL_2
0x33e5	      0xe800000000	                          call 0x400342a	      1428	convert.c	FUNCTION_51	CALL_2
0x33ea	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1429	convert.c	FUNCTION_51	CALL_3
0x33ee	        0x488b4018	            mov rax, qword [rax + 0x18] 	      1429	convert.c	FUNCTION_51	CALL_3
0x33f2	          0x4885c0	                           test rax, rax	      1429	convert.c	FUNCTION_51	CALL_3
0x33f5	            0x7526	                           jne 0x400345d	      1429	convert.c	FUNCTION_51	CALL_3
0x33f7	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1429	convert.c	FUNCTION_51	CALL_3
0x33fb	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1429	convert.c	FUNCTION_51	CALL_3
0x33ff	          0x4885c0	                           test rax, rax	      1429	convert.c	FUNCTION_51	CALL_3
0x3402	            0x7519	                           jne 0x400345d	      1429	convert.c	FUNCTION_51	CALL_3
0x3404	      0xb900000000	                              mov ecx, 0	      1429	convert.c	FUNCTION_51	CALL_3
0x3409	      0xba95050000	                          mov edx, 0x595	      1429	convert.c	FUNCTION_51	CALL_3
0x340e	      0xbe00000000	                              mov esi, 0	      1429	convert.c	FUNCTION_51	CALL_3
0x3413	      0xbf00000000	                              mov edi, 0	      1429	convert.c	FUNCTION_51	CALL_3
0x3418	      0xe800000000	                          call 0x400345d	      1429	convert.c	FUNCTION_51	CALL_3
0x341d	        0x488b75d0	             mov rsi, qword [rbp - 0x30]	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3421	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3425	          0x8b55bc	             mov edx, dword [rbp - 0x44]	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3428	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x342c	            0x6a00	                                  push 0	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x342e	            0x6a01	                                  push 1	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3430	          0x4989f1	                             mov r9, rsi	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3433	          0x4989c8	                             mov r8, rcx	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3436	            0x89d1	                            mov ecx, edx	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3438	      0xba00000000	                              mov edx, 0	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x343d	      0xbe00000000	                              mov esi, 0	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3442	          0x4889c7	                            mov rdi, rax	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3445	      0xe899eeffff	                   call sym.apply_filter	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x344a	        0x4883c410	                           add rsp, 0x10	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x344e	            0x85c0	                           test eax, eax	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3450	            0x751d	                           jne 0x40034af	      1431	convert.c	FUNCTION_51	IF_1	CALL_4
0x3452	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1432	convert.c	FUNCTION_51	CALL_5
0x3456	          0x488b10	                    mov rdx, qword [rax]	      1432	convert.c	FUNCTION_51	CALL_5
0x3459	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1432	convert.c	FUNCTION_51	CALL_5
0x345d	          0x4889c6	                            mov rsi, rax	      1432	convert.c	FUNCTION_51	CALL_5
0x3460	      0xbf00000000	                              mov edi, 0	      1432	convert.c	FUNCTION_51	CALL_5
0x3465	      0xb800000000	                              mov eax, 0	      1432	convert.c	FUNCTION_51	CALL_5
0x346a	      0xe800000000	                          call 0x40034af	      1432	convert.c	FUNCTION_51	CALL_5
0x346f	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1434	convert.c	FUNCTION_51	CALL_6
0x3473	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_51	CALL_6
0x3477	        0x488b5008	                mov rdx, qword [rax + 8]	      1434	convert.c	FUNCTION_51	CALL_6
0x347b	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_51	CALL_6
0x347f	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      1434	convert.c	FUNCTION_51	CALL_6
0x3483	        0x448b45b8	             mov r8d, dword [rbp - 0x48]	      1434	convert.c	FUNCTION_51	CALL_6
0x3487	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1434	convert.c	FUNCTION_51	CALL_6
0x348b	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1434	convert.c	FUNCTION_51	CALL_6
0x348f	          0x4589c1	                            mov r9d, r8d	      1434	convert.c	FUNCTION_51	CALL_6
0x3492	          0x4989f8	                             mov r8, rdi	      1434	convert.c	FUNCTION_51	CALL_6
0x3495	          0x4889c7	                            mov rdi, rax	      1434	convert.c	FUNCTION_51	CALL_6
0x3498	      0xe8fad9ffff	                  call sym.encode_to_git	      1434	convert.c	FUNCTION_51	CALL_6
0x349d	        0x448b4ddc	             mov r9d, dword [rbp - 0x24]	      1435	convert.c	FUNCTION_51	CALL_7
0x34a1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_51	CALL_7
0x34a5	        0x488b4808	                mov rcx, qword [rax + 8]	      1435	convert.c	FUNCTION_51	CALL_7
0x34a9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_51	CALL_7
0x34ad	        0x488b5010	            mov rdx, qword [rax + 0x10] 	      1435	convert.c	FUNCTION_51	CALL_7
0x34b1	        0x4c8b45b0	              mov r8, qword [rbp - 0x50]	      1435	convert.c	FUNCTION_51	CALL_7
0x34b5	        0x488b75c0	             mov rsi, qword [rbp - 0x40]	      1435	convert.c	FUNCTION_51	CALL_7
0x34b9	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1435	convert.c	FUNCTION_51	CALL_7
0x34bd	        0x4883ec08	                              sub rsp, 8	      1435	convert.c	FUNCTION_51	CALL_7
0x34c1	          0x8b7db8	             mov edi, dword [rbp - 0x48]	      1435	convert.c	FUNCTION_51	CALL_7
0x34c4	              0x57	                                push rdi	      1435	convert.c	FUNCTION_51	CALL_7
0x34c5	          0x4889c7	                            mov rdi, rax	      1435	convert.c	FUNCTION_51	CALL_7
0x34c8	      0xe859ddffff	                    call sym.crlf_to_git	      1435	convert.c	FUNCTION_51	CALL_7
0x34cd	        0x4883c410	                           add rsp, 0x10	      1435	convert.c	FUNCTION_51	CALL_7
0x34d1	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1436	convert.c	FUNCTION_51	CALL_8
0x34d4	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_51	CALL_8
0x34d8	        0x488b5008	                mov rdx, qword [rax + 8]	      1436	convert.c	FUNCTION_51	CALL_8
0x34dc	        0x488b45b0	             mov rax, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_51	CALL_8
0x34e0	        0x488b7010	            mov rsi, qword [rax + 0x10] 	      1436	convert.c	FUNCTION_51	CALL_8
0x34e4	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	      1436	convert.c	FUNCTION_51	CALL_8
0x34e8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	      1436	convert.c	FUNCTION_51	CALL_8
0x34ec	          0x4189f8	                            mov r8d, edi	      1436	convert.c	FUNCTION_51	CALL_8
0x34ef	          0x4889c7	                            mov rdi, rax	      1436	convert.c	FUNCTION_51	CALL_8
0x34f2	      0xe8e9f1ffff	                   call sym.ident_to_git	      1436	convert.c	FUNCTION_51	CALL_8
0x34f7	              0x90	                                     nop	      1437	convert.c	FUNCTION_51
0x34f8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1437	convert.c	FUNCTION_51
0x34fc	    0x644833042528	                xor rax, qword fs:[0x28]	      1437	convert.c	FUNCTION_51
0x3505	            0x7405	                            je 0x400354c	      1437	convert.c	FUNCTION_51
0x3507	      0xe800000000	                          call 0x400354c	      1437	convert.c	FUNCTION_51
0x350c	              0xc9	                                   leave	      1437	convert.c	FUNCTION_51
0x350d	              0xc3	                                     ret	      1437	convert.c	FUNCTION_51
renormalize_buffer	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	37
0x374c	              0x55	                                push rbp	      1494	convert.c	FUNCTION_55
0x374d	          0x4889e5	                            mov rbp, rsp	      1494	convert.c	FUNCTION_55
0x3750	        0x4883ec40	                           sub rsp, 0x40	      1494	convert.c	FUNCTION_55
0x3754	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1494	convert.c	FUNCTION_55
0x3758	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1494	convert.c	FUNCTION_55
0x375c	        0x488955d8	             mov qword [rbp - 0x28], rdx	      1494	convert.c	FUNCTION_55
0x3760	        0x48894dd0	             mov qword [rbp - 0x30], rcx	      1494	convert.c	FUNCTION_55
0x3764	        0x4c8945c8	              mov qword [rbp - 0x38], r8	      1494	convert.c	FUNCTION_55
0x3768	        0x488b4dc8	             mov rcx, qword [rbp - 0x38]	      1495	convert.c	FUNCTION_55	CALL_1
0x376c	        0x488b55d0	             mov rdx, qword [rbp - 0x30]	      1495	convert.c	FUNCTION_55	CALL_1
0x3770	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	      1495	convert.c	FUNCTION_55	CALL_1
0x3774	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1495	convert.c	FUNCTION_55	CALL_1
0x3778	    0x41b900000000	                              mov r9d, 0	      1495	convert.c	FUNCTION_55	CALL_1
0x377e	    0x41b801000000	                              mov r8d, 1	      1495	convert.c	FUNCTION_55	CALL_1
0x3784	          0x4889c7	                            mov rdi, rax	      1495	convert.c	FUNCTION_55	CALL_1
0x3787	      0xe882fdffff	call sym.convert_to_working_tree_internal	      1495	convert.c	FUNCTION_55	CALL_1
0x378c	          0x8945fc	                mov dword [rbp - 4], eax	      1495	convert.c	FUNCTION_55	CALL_1
0x378f	        0x837dfc00	                  cmp dword [rbp - 4], 0	      1496	convert.c	FUNCTION_55	IF_1
0x3793	            0x7418	                            je 0x40037ed	      1496	convert.c	FUNCTION_55	IF_1
0x3795	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1497	convert.c	FUNCTION_55	IF_1
0x3799	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1497	convert.c	FUNCTION_55	IF_1
0x379d	        0x488945d8	             mov qword [rbp - 0x28], rax	      1497	convert.c	FUNCTION_55	IF_1
0x37a1	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1498	convert.c	FUNCTION_55	IF_1
0x37a5	        0x488b4008	                mov rax, qword [rax + 8]	      1498	convert.c	FUNCTION_55	IF_1
0x37a9	        0x488945d0	             mov qword [rbp - 0x30], rax	      1498	convert.c	FUNCTION_55	IF_1
0x37ad	        0x488b7dc8	             mov rdi, qword [rbp - 0x38]	      1500	convert.c	FUNCTION_55	CALL_2
0x37b1	        0x488b4dd0	             mov rcx, qword [rbp - 0x30]	      1500	convert.c	FUNCTION_55	CALL_2
0x37b5	        0x488b55d8	             mov rdx, qword [rbp - 0x28]	      1500	convert.c	FUNCTION_55	CALL_2
0x37b9	        0x488b75e0	             mov rsi, qword [rbp - 0x20]	      1500	convert.c	FUNCTION_55	CALL_2
0x37bd	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1500	convert.c	FUNCTION_55	CALL_2
0x37c1	    0x41b904000000	                              mov r9d, 4	      1500	convert.c	FUNCTION_55	CALL_2
0x37c7	          0x4989f8	                             mov r8, rdi	      1500	convert.c	FUNCTION_55	CALL_2
0x37ca	          0x4889c7	                            mov rdi, rax	      1500	convert.c	FUNCTION_55	CALL_2
0x37cd	      0xe800000000	                          call 0x4003812	      1500	convert.c	FUNCTION_55	CALL_2
0x37d2	           0xb45fc	                 or eax, dword [rbp - 4]	      1500	convert.c	FUNCTION_55	CALL_2
0x37d5	              0xc9	                                   leave	      1501	convert.c	FUNCTION_55
0x37d6	              0xc3	                                     ret	      1501	convert.c	FUNCTION_55
strbuf_addstr	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	17
0x233	              0x55	                                push rbp	       278	strbuf.h	FUNCTION_5
0x234	          0x4889e5	                            mov rbp, rsp	       278	strbuf.h	FUNCTION_5
0x237	        0x4883ec10	                           sub rsp, 0x10	       278	strbuf.h	FUNCTION_5
0x23b	        0x48897df8	                mov qword [rbp - 8], rdi	       278	strbuf.h	FUNCTION_5
0x23f	        0x488975f0	             mov qword [rbp - 0x10], rsi	       278	strbuf.h	FUNCTION_5
0x243	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_5	CALL_2
0x247	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_5	CALL_2
0x24a	      0xe800000000	                          call 0x400028f	       279	strbuf.h	FUNCTION_5	CALL_2
0x24f	          0x4889c2	                            mov rdx, rax	       279	strbuf.h	FUNCTION_5	CALL_2
0x252	        0x488b4df0	             mov rcx, qword [rbp - 0x10]	       279	strbuf.h	FUNCTION_5	CALL_2
0x256	        0x488b45f8	                mov rax, qword [rbp - 8]	       279	strbuf.h	FUNCTION_5	CALL_2
0x25a	          0x4889ce	                            mov rsi, rcx	       279	strbuf.h	FUNCTION_5	CALL_2
0x25d	          0x4889c7	                            mov rdi, rax	       279	strbuf.h	FUNCTION_5	CALL_2
0x260	      0xe800000000	                          call 0x40002a5	       279	strbuf.h	FUNCTION_5	CALL_2
0x265	              0x90	                                     nop	       280	strbuf.h	FUNCTION_5
0x266	              0xc9	                                   leave	       280	strbuf.h	FUNCTION_5
0x267	              0xc3	                                     ret	       280	strbuf.h	FUNCTION_5
strbuf_setlen	CALL,2:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,1:DO,0:FOR,0	43
0x12b	              0x55	                                push rbp	       161	strbuf.h	FUNCTION_3
0x12c	          0x4889e5	                            mov rbp, rsp	       161	strbuf.h	FUNCTION_3
0x12f	        0x4883ec10	                           sub rsp, 0x10	       161	strbuf.h	FUNCTION_3
0x133	        0x48897df8	                mov qword [rbp - 8], rdi	       161	strbuf.h	FUNCTION_3
0x137	        0x488975f0	             mov qword [rbp - 0x10], rsi	       161	strbuf.h	FUNCTION_3
0x13b	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_3	IF_1
0x13f	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_3	IF_1
0x142	          0x4885c0	                           test rax, rax	       162	strbuf.h	FUNCTION_3	IF_1
0x145	            0x740d	                            je 0x4000194	       162	strbuf.h	FUNCTION_3	IF_1
0x147	        0x488b45f8	                mov rax, qword [rbp - 8]	       162	strbuf.h	FUNCTION_3	IF_1
0x14b	          0x488b00	                    mov rax, qword [rax]	       162	strbuf.h	FUNCTION_3	IF_1
0x14e	        0x4883e801	                              sub rax, 1	       162	strbuf.h	FUNCTION_3	IF_1
0x152	            0xeb05	                           jmp 0x4000199	       162	strbuf.h	FUNCTION_3	IF_1
0x154	      0xb800000000	                              mov eax, 0	       162	strbuf.h	FUNCTION_3	IF_1
0x159	        0x483b45f0	             cmp rax, qword [rbp - 0x10]	       162	strbuf.h	FUNCTION_3	IF_1
0x15d	            0x730f	                           jae 0x40001ae	       162	strbuf.h	FUNCTION_3	IF_1
0x15f	      0xbf00000000	                              mov edi, 0	       163	strbuf.h	FUNCTION_3	CALL_1
0x164	      0xb800000000	                              mov eax, 0	       163	strbuf.h	FUNCTION_3	CALL_1
0x169	      0xe800000000	                          call 0x40001ae	       163	strbuf.h	FUNCTION_3	CALL_1
0x16e	        0x488b45f8	                mov rax, qword [rbp - 8]	       164	strbuf.h	FUNCTION_3
0x172	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       164	strbuf.h	FUNCTION_3
0x176	        0x48895008	                mov qword [rax + 8], rdx	       164	strbuf.h	FUNCTION_3
0x17a	        0x488b45f8	                mov rax, qword [rbp - 8]	       165	strbuf.h	FUNCTION_3	IF_2
0x17e	        0x488b4010	            mov rax, qword [rax + 0x10] 	       165	strbuf.h	FUNCTION_3	IF_2
0x182	    0x483d00000000	                              cmp rax, 0	       165	strbuf.h	FUNCTION_3	IF_2
0x188	            0x7414	                            je 0x40001de	       165	strbuf.h	FUNCTION_3	IF_2
0x18a	        0x488b45f8	                mov rax, qword [rbp - 8]	       166	strbuf.h	FUNCTION_3	IF_2
0x18e	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       166	strbuf.h	FUNCTION_3	IF_2
0x192	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       166	strbuf.h	FUNCTION_3	IF_2
0x196	          0x4801d0	                            add rax, rdx	       166	strbuf.h	FUNCTION_3	IF_2
0x199	          0xc60000	                       mov byte [rax], 0	       166	strbuf.h	FUNCTION_3	IF_2
0x19c	            0xeb24	                           jmp 0x4000202	       169	strbuf.h	FUNCTION_3
0x19e	     0xfb605000000	           movzx eax, byte [0x040001e5] 	       168	strbuf.h	FUNCTION_3	CALL_2
0x1a5	            0x84c0	                             test al, al	       168	strbuf.h	FUNCTION_3	CALL_2
0x1a7	            0x7419	                            je 0x4000202	       168	strbuf.h	FUNCTION_3	CALL_2
0x1a9	      0xb900000000	                              mov ecx, 0	       168	strbuf.h	FUNCTION_3	CALL_2
0x1ae	      0xbaa8000000	                           mov edx, 0xa8	       168	strbuf.h	FUNCTION_3	CALL_2
0x1b3	      0xbe00000000	                              mov esi, 0	       168	strbuf.h	FUNCTION_3	CALL_2
0x1b8	      0xbf00000000	                              mov edi, 0	       168	strbuf.h	FUNCTION_3	CALL_2
0x1bd	      0xe800000000	                          call 0x4000202	       168	strbuf.h	FUNCTION_3	CALL_2
0x1c2	              0x90	                                     nop	       169	strbuf.h	FUNCTION_3
0x1c3	              0xc9	                                   leave	       169	strbuf.h	FUNCTION_3
0x1c4	              0xc3	                                     ret	       169	strbuf.h	FUNCTION_3
git_path_check_crlf	CALL,5:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,4:DO,0:FOR,0	36
0x2cbf	              0x55	                                push rbp	      1236	convert.c	FUNCTION_43
0x2cc0	          0x4889e5	                            mov rbp, rsp	      1236	convert.c	FUNCTION_43
0x2cc3	        0x4883ec20	                           sub rsp, 0x20	      1236	convert.c	FUNCTION_43
0x2cc7	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1236	convert.c	FUNCTION_43
0x2ccb	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1237	convert.c	FUNCTION_43
0x2ccf	        0x488b4008	                mov rax, qword [rax + 8]	      1237	convert.c	FUNCTION_43
0x2cd3	        0x488945f8	                mov qword [rbp - 8], rax	      1237	convert.c	FUNCTION_43
0x2cd7	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1239	convert.c	FUNCTION_43	IF_1	CALL_1
0x2cdf	            0x7507	                           jne 0x4002d28	      1239	convert.c	FUNCTION_43	IF_1	CALL_1
0x2ce1	      0xb802000000	                              mov eax, 2	      1240	convert.c	FUNCTION_43	IF_1
0x2ce6	            0xeb55	                           jmp 0x4002d7d	      1240	convert.c	FUNCTION_43	IF_1
0x2ce8	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1241	convert.c	FUNCTION_43	ELSE_1	IF_2	CALL_2
0x2cf0	            0x7507	                           jne 0x4002d39	      1241	convert.c	FUNCTION_43	ELSE_1	IF_2	CALL_2
0x2cf2	      0xb801000000	                              mov eax, 1	      1242	convert.c	FUNCTION_43	ELSE_1	IF_2
0x2cf7	            0xeb44	                           jmp 0x4002d7d	      1242	convert.c	FUNCTION_43	ELSE_1	IF_2
0x2cf9	      0x48837df800	                  cmp qword [rbp - 8], 0	      1243	convert.c	FUNCTION_43	ELSE_2	IF_3	CALL_3
0x2cfe	            0x7438	                            je 0x4002d78	      1243	convert.c	FUNCTION_43	ELSE_2	IF_3	CALL_3
0x2d00	        0x488b45f8	                mov rax, qword [rbp - 8]	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d04	      0xbe00000000	                              mov esi, 0	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d09	          0x4889c7	                            mov rdi, rax	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d0c	      0xe800000000	                          call 0x4002d51	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d11	            0x85c0	                           test eax, eax	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d13	            0x7507	                           jne 0x4002d5c	      1245	convert.c	FUNCTION_43	ELSE_3	IF_4	CALL_4
0x2d15	      0xb803000000	                              mov eax, 3	      1246	convert.c	FUNCTION_43	ELSE_3	IF_4
0x2d1a	            0xeb21	                           jmp 0x4002d7d	      1246	convert.c	FUNCTION_43	ELSE_3	IF_4
0x2d1c	        0x488b45f8	                mov rax, qword [rbp - 8]	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d20	      0xbe00000000	                              mov esi, 0	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d25	          0x4889c7	                            mov rdi, rax	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d28	      0xe800000000	                          call 0x4002d6d	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d2d	            0x85c0	                           test eax, eax	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d2f	            0x7507	                           jne 0x4002d78	      1247	convert.c	FUNCTION_43	ELSE_4	IF_5	CALL_5
0x2d31	      0xb805000000	                              mov eax, 5	      1248	convert.c	FUNCTION_43	ELSE_4	IF_5
0x2d36	            0xeb05	                           jmp 0x4002d7d	      1248	convert.c	FUNCTION_43	ELSE_4	IF_5
0x2d38	      0xb800000000	                              mov eax, 0	      1249	convert.c	FUNCTION_43
0x2d3d	              0xc9	                                   leave	      1250	convert.c	FUNCTION_43
0x2d3e	              0xc3	                                     ret	      1250	convert.c	FUNCTION_43
async_convert_to_working_tree	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	19
0x36cb	              0x55	                                push rbp	      1483	convert.c	FUNCTION_53
0x36cc	          0x4889e5	                            mov rbp, rsp	      1483	convert.c	FUNCTION_53
0x36cf	        0x4883ec30	                           sub rsp, 0x30	      1483	convert.c	FUNCTION_53
0x36d3	        0x48897df8	                mov qword [rbp - 8], rdi	      1483	convert.c	FUNCTION_53
0x36d7	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1483	convert.c	FUNCTION_53
0x36db	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1483	convert.c	FUNCTION_53
0x36df	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1483	convert.c	FUNCTION_53
0x36e3	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1483	convert.c	FUNCTION_53
0x36e7	        0x488b7dd8	             mov rdi, qword [rbp - 0x28]	      1484	convert.c	FUNCTION_53	CALL_1
0x36eb	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1484	convert.c	FUNCTION_53	CALL_1
0x36ef	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1484	convert.c	FUNCTION_53	CALL_1
0x36f3	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1484	convert.c	FUNCTION_53	CALL_1
0x36f7	        0x488b45f8	                mov rax, qword [rbp - 8]	      1484	convert.c	FUNCTION_53	CALL_1
0x36fb	          0x4989f9	                             mov r9, rdi	      1484	convert.c	FUNCTION_53	CALL_1
0x36fe	    0x41b800000000	                              mov r8d, 0	      1484	convert.c	FUNCTION_53	CALL_1
0x3704	          0x4889c7	                            mov rdi, rax	      1484	convert.c	FUNCTION_53	CALL_1
0x3707	      0xe802feffff	call sym.convert_to_working_tree_internal	      1484	convert.c	FUNCTION_53	CALL_1
0x370c	              0xc9	                                   leave	      1485	convert.c	FUNCTION_53
0x370d	              0xc3	                                     ret	      1485	convert.c	FUNCTION_53
filter_buffer_or_fd	CALL,15:WHILE,0:functions,0:IF,7:SWITCH,0:ELSE,1:DO,0:FOR,0	161
0x16ad	              0x55	                                push rbp	       639	convert.c	FUNCTION_31
0x16ae	          0x4889e5	                            mov rbp, rsp	       639	convert.c	FUNCTION_31
0x16b1	    0x4881ec000100	                          sub rsp, 0x100	       639	convert.c	FUNCTION_31
0x16b8	    0x89bd0cffffff	             mov dword [rbp - 0xf4], edi	       639	convert.c	FUNCTION_31
0x16be	    0x89b508ffffff	             mov dword [rbp - 0xf8], esi	       639	convert.c	FUNCTION_31
0x16c4	    0x48899500ffff	            mov qword [rbp - 0x100], rdx	       639	convert.c	FUNCTION_31
0x16cb	    0x64488b042528	                mov rax, qword fs:[0x28]	       639	convert.c	FUNCTION_31
0x16d4	        0x488945f8	                mov qword [rbp - 8], rax	       639	convert.c	FUNCTION_31
0x16d8	            0x31c0	                            xor eax, eax	       639	convert.c	FUNCTION_31
0x16da	    0x488d9560ffff	                   lea rdx, [rbp - 0xa0]	       643	convert.c	FUNCTION_31
0x16e1	      0xb800000000	                              mov eax, 0	       643	convert.c	FUNCTION_31
0x16e6	      0xb90c000000	                            mov ecx, 0xc	       643	convert.c	FUNCTION_31
0x16eb	          0x4889d7	                            mov rdi, rdx	       643	convert.c	FUNCTION_31
0x16ee	          0xf348ab	              rep stosq qword [rdi], rax	       643	convert.c	FUNCTION_31
0x16f1	    0x48c78568ffff	               mov qword [rbp - 0x98], 0	       643	convert.c	FUNCTION_31
0x16fc	    0x48c78578ffff	               mov qword [rbp - 0x88], 0	       643	convert.c	FUNCTION_31
0x1707	    0x488b8500ffff	            mov rax, qword [rbp - 0x100]	       644	convert.c	FUNCTION_31
0x170e	    0x48898518ffff	             mov qword [rbp - 0xe8], rax	       644	convert.c	FUNCTION_31
0x1715	    0x48c745c00000	               mov qword [rbp - 0x40], 0	       646	convert.c	FUNCTION_31
0x171d	    0x48c745c80000	               mov qword [rbp - 0x38], 0	       646	convert.c	FUNCTION_31
0x1725	    0x48c78520ffff	               mov qword [rbp - 0xe0], 0	       649	convert.c	FUNCTION_31
0x1730	    0x48c78528ffff	               mov qword [rbp - 0xd8], 0	       649	convert.c	FUNCTION_31
0x173b	    0x48c78530ffff	               mov qword [rbp - 0xd0], 0	       649	convert.c	FUNCTION_31
0x1746	    0x48c78540ffff	               mov qword [rbp - 0xc0], 0	       650	convert.c	FUNCTION_31
0x1751	    0x48c78548ffff	               mov qword [rbp - 0xb8], 0	       650	convert.c	FUNCTION_31
0x175c	    0x48c78550ffff	               mov qword [rbp - 0xb0], 0	       650	convert.c	FUNCTION_31
0x1767	    0x48c745d00000	               mov qword [rbp - 0x30], 0	       651	convert.c	FUNCTION_31
0x176f	    0x48c745d80000	               mov qword [rbp - 0x28], 0	       651	convert.c	FUNCTION_31
0x1777	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       651	convert.c	FUNCTION_31
0x177f	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       651	convert.c	FUNCTION_31
0x1787	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       657	convert.c	FUNCTION_31	CALL_1
0x178e	        0x488b5020	            mov rdx, qword [rax + 0x20] 	       657	convert.c	FUNCTION_31	CALL_1
0x1792	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	       657	convert.c	FUNCTION_31	CALL_1
0x1799	          0x4889d6	                            mov rsi, rdx	       657	convert.c	FUNCTION_31	CALL_1
0x179c	          0x4889c7	                            mov rdi, rax	       657	convert.c	FUNCTION_31	CALL_1
0x179f	      0xe800000000	                          call 0x40017e4	       657	convert.c	FUNCTION_31	CALL_1
0x17a4	    0x488b8550ffff	             mov rax, qword [rbp - 0xb0]	       658	convert.c	FUNCTION_31
0x17ab	        0x488945d8	             mov qword [rbp - 0x28], rax	       658	convert.c	FUNCTION_31
0x17af	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       661	convert.c	FUNCTION_31	CALL_2
0x17b6	        0x488b7018	            mov rsi, qword [rax + 0x18] 	       661	convert.c	FUNCTION_31	CALL_2
0x17ba	        0x488d55d0	                   lea rdx, [rbp - 0x30]	       661	convert.c	FUNCTION_31	CALL_2
0x17be	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       661	convert.c	FUNCTION_31	CALL_2
0x17c5	          0x4889d1	                            mov rcx, rdx	       661	convert.c	FUNCTION_31	CALL_2
0x17c8	      0xba00000000	                              mov edx, 0	       661	convert.c	FUNCTION_31	CALL_2
0x17cd	          0x4889c7	                            mov rdi, rax	       661	convert.c	FUNCTION_31	CALL_2
0x17d0	      0xe800000000	                          call 0x4001815	       661	convert.c	FUNCTION_31	CALL_2
0x17d5	    0x488d8540ffff	                   lea rax, [rbp - 0xc0]	       662	convert.c	FUNCTION_31	CALL_3
0x17dc	          0x4889c7	                            mov rdi, rax	       662	convert.c	FUNCTION_31	CALL_3
0x17df	      0xe800000000	                          call 0x4001824	       662	convert.c	FUNCTION_31	CALL_3
0x17e4	    0x488b8530ffff	             mov rax, qword [rbp - 0xd0]	       664	convert.c	FUNCTION_31
0x17eb	        0x488945c0	             mov qword [rbp - 0x40], rax	       664	convert.c	FUNCTION_31
0x17ef	        0x488d45c0	                   lea rax, [rbp - 0x40]	       666	convert.c	FUNCTION_31
0x17f3	    0x48898560ffff	             mov qword [rbp - 0xa0], rax	       666	convert.c	FUNCTION_31
0x17fa	         0xfb645a8	            movzx eax, byte [rbp - 0x58]	       667	convert.c	FUNCTION_31
0x17fe	          0x83c840	                            or eax, 0x40	       667	convert.c	FUNCTION_31
0x1801	          0x8845a8	               mov byte [rbp - 0x58], al	       667	convert.c	FUNCTION_31
0x1804	    0xc7458cffffff	     mov dword [rbp - 0x74], 0xffffffff 	       668	convert.c	FUNCTION_31
0x180b	    0x8b8508ffffff	             mov eax, dword [rbp - 0xf8]	       669	convert.c	FUNCTION_31
0x1811	          0x894590	             mov dword [rbp - 0x70], eax	       669	convert.c	FUNCTION_31
0x1814	    0x488d8560ffff	                   lea rax, [rbp - 0xa0]	       671	convert.c	FUNCTION_31	IF_1	CALL_4
0x181b	          0x4889c7	                            mov rdi, rax	       671	convert.c	FUNCTION_31	IF_1	CALL_4
0x181e	      0xe800000000	                          call 0x4001863	       671	convert.c	FUNCTION_31	IF_1	CALL_4
0x1823	            0x85c0	                           test eax, eax	       671	convert.c	FUNCTION_31	IF_1	CALL_4
0x1825	            0x7436	                            je 0x400189d	       671	convert.c	FUNCTION_31	IF_1	CALL_4
0x1827	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       672	convert.c	FUNCTION_31	IF_1	CALL_5
0x182e	          0x4889c7	                            mov rdi, rax	       672	convert.c	FUNCTION_31	IF_1	CALL_5
0x1831	      0xe800000000	                          call 0x4001876	       672	convert.c	FUNCTION_31	IF_1	CALL_5
0x1836	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x183d	        0x488b4018	            mov rax, qword [rax + 0x18] 	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x1841	          0x4889c6	                            mov rsi, rax	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x1844	      0xbf00000000	                              mov edi, 0	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x1849	      0xb800000000	                              mov eax, 0	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x184e	      0xe800000000	                          call 0x4001893	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x1853	      0xe8a8e7ffff	                    call sym.const_error	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x1858	      0xe961010000	                           jmp 0x40019fe	       673	convert.c	FUNCTION_31	IF_1	CALL_6
0x185d	      0xbe01000000	                              mov esi, 1	       676	convert.c	FUNCTION_31	CALL_7
0x1862	      0xbf0d000000	                            mov edi, 0xd	       676	convert.c	FUNCTION_31	CALL_7
0x1867	      0xe800000000	                          call 0x40018ac	       676	convert.c	FUNCTION_31	CALL_7
0x186c	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       678	convert.c	FUNCTION_31	IF_2
0x1873	          0x488b00	                    mov rax, qword [rax]	       678	convert.c	FUNCTION_31	IF_2
0x1876	          0x4885c0	                           test rax, rax	       678	convert.c	FUNCTION_31	IF_2
0x1879	            0x7447	                            je 0x4001902	       678	convert.c	FUNCTION_31	IF_2
0x187b	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x1882	        0x488b5008	                mov rdx, qword [rax + 8]	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x1886	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       680	convert.c	FUNCTION_31	IF_2
0x188d	          0x488b08	                    mov rcx, qword [rax]	       680	convert.c	FUNCTION_31	IF_2
0x1890	          0x8b458c	             mov eax, dword [rbp - 0x74]	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x1893	          0x4889ce	                            mov rsi, rcx	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x1896	            0x89c7	                            mov edi, eax	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x1898	      0xe800000000	                          call 0x40018dd	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x189d	        0x48c1e83f	                           shr rax, 0x3f	       680	convert.c	FUNCTION_31	IF_2
0x18a1	           0xfb6c0	                           movzx eax, al	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x18a4	    0x898510ffffff	             mov dword [rbp - 0xf0], eax	       679	convert.c	FUNCTION_31	IF_2	CALL_8
0x18aa	      0xe800000000	                          call 0x40018ef	       681	convert.c	FUNCTION_31	IF_2	IF_3
0x18af	            0x8b00	                    mov eax, dword [rax]	       681	convert.c	FUNCTION_31	IF_2	IF_3
0x18b1	          0x83f820	                           cmp eax, 0x20	       681	convert.c	FUNCTION_31	IF_2	IF_3
0x18b4	            0x7547	                           jne 0x400193d	       681	convert.c	FUNCTION_31	IF_2	IF_3
0x18b6	    0xc78510ffffff	               mov dword [rbp - 0xf0], 0	       682	convert.c	FUNCTION_31	IF_2	IF_3
0x18c0	            0xeb3b	                           jmp 0x400193d	       682	convert.c	FUNCTION_31	IF_2	IF_3
0x18c2	          0x8b558c	             mov edx, dword [rbp - 0x74]	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18c5	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18cc	          0x8b4010	            mov eax, dword [rax + 0x10] 	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18cf	            0x89d6	                            mov esi, edx	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18d1	            0x89c7	                            mov edi, eax	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18d3	      0xe800000000	                          call 0x4001918	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18d8	    0x898510ffffff	             mov dword [rbp - 0xf0], eax	       684	convert.c	FUNCTION_31	ELSE_1	CALL_9
0x18de	    0x83bd10ffffff	cmp dword [rbp - 0xf0], 0xfffffffffffffffd	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18e5	            0x7516	                           jne 0x400193d	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18e7	      0xe800000000	                          call 0x400192c	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18ec	            0x8b00	                    mov eax, dword [rax]	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18ee	          0x83f820	                           cmp eax, 0x20	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18f1	            0x750a	                           jne 0x400193d	       685	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18f3	    0xc78510ffffff	               mov dword [rbp - 0xf0], 0	       686	convert.c	FUNCTION_31	ELSE_1	IF_4
0x18fd	          0x8b458c	             mov eax, dword [rbp - 0x74]	       689	convert.c	FUNCTION_31	IF_5	CALL_10
0x1900	            0x89c7	                            mov edi, eax	       689	convert.c	FUNCTION_31	IF_5	CALL_10
0x1902	      0xe800000000	                          call 0x4001947	       689	convert.c	FUNCTION_31	IF_5	CALL_10
0x1907	            0x85c0	                           test eax, eax	       689	convert.c	FUNCTION_31	IF_5	CALL_10
0x1909	            0x740a	                            je 0x4001955	       689	convert.c	FUNCTION_31	IF_5	CALL_10
0x190b	    0xc78510ffffff	               mov dword [rbp - 0xf0], 1	       690	convert.c	FUNCTION_31	IF_5
0x1915	    0x83bd10ffffff	               cmp dword [rbp - 0xf0], 0	       691	convert.c	FUNCTION_31	IF_6
0x191c	            0x7422	                            je 0x4001980	       691	convert.c	FUNCTION_31	IF_6
0x191e	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       692	convert.c	FUNCTION_31	CALL_11
0x1925	        0x488b4018	            mov rax, qword [rax + 0x18] 	       692	convert.c	FUNCTION_31	CALL_11
0x1929	          0x4889c6	                            mov rsi, rax	       692	convert.c	FUNCTION_31	CALL_11
0x192c	      0xbf00000000	                              mov edi, 0	       692	convert.c	FUNCTION_31	CALL_11
0x1931	      0xb800000000	                              mov eax, 0	       692	convert.c	FUNCTION_31	CALL_11
0x1936	      0xe800000000	                          call 0x400197b	       692	convert.c	FUNCTION_31	CALL_11
0x193b	      0xe8c0e6ffff	                    call sym.const_error	       692	convert.c	FUNCTION_31	CALL_11
0x1940	      0xbf0d000000	                            mov edi, 0xd	       694	convert.c	FUNCTION_31	CALL_12
0x1945	      0xe800000000	                          call 0x400198a	       694	convert.c	FUNCTION_31	CALL_12
0x194a	    0x488d8560ffff	                   lea rax, [rbp - 0xa0]	       696	convert.c	FUNCTION_31	CALL_13
0x1951	          0x4889c7	                            mov rdi, rax	       696	convert.c	FUNCTION_31	CALL_13
0x1954	      0xe800000000	                          call 0x4001999	       696	convert.c	FUNCTION_31	CALL_13
0x1959	    0x898514ffffff	             mov dword [rbp - 0xec], eax	       696	convert.c	FUNCTION_31	CALL_13
0x195f	    0x83bd14ffffff	               cmp dword [rbp - 0xec], 0	       697	convert.c	FUNCTION_31	IF_7
0x1966	            0x7428	                            je 0x40019d0	       697	convert.c	FUNCTION_31	IF_7
0x1968	    0x488b8518ffff	             mov rax, qword [rbp - 0xe8]	       698	convert.c	FUNCTION_31	CALL_14
0x196f	        0x488b4018	            mov rax, qword [rax + 0x18] 	       698	convert.c	FUNCTION_31	CALL_14
0x1973	    0x8b9514ffffff	             mov edx, dword [rbp - 0xec]	       698	convert.c	FUNCTION_31	CALL_14
0x1979	          0x4889c6	                            mov rsi, rax	       698	convert.c	FUNCTION_31	CALL_14
0x197c	      0xbf00000000	                              mov edi, 0	       698	convert.c	FUNCTION_31	CALL_14
0x1981	      0xb800000000	                              mov eax, 0	       698	convert.c	FUNCTION_31	CALL_14
0x1986	      0xe800000000	                          call 0x40019cb	       698	convert.c	FUNCTION_31	CALL_14
0x198b	      0xe870e6ffff	                    call sym.const_error	       698	convert.c	FUNCTION_31	CALL_14
0x1990	    0x488d8520ffff	                   lea rax, [rbp - 0xe0]	       700	convert.c	FUNCTION_31	CALL_15
0x1997	          0x4889c7	                            mov rdi, rax	       700	convert.c	FUNCTION_31	CALL_15
0x199a	      0xe800000000	                          call 0x40019df	       700	convert.c	FUNCTION_31	CALL_15
0x199f	    0x83bd10ffffff	               cmp dword [rbp - 0xf0], 0	       701	convert.c	FUNCTION_31
0x19a6	            0x7509	                           jne 0x40019f1	       701	convert.c	FUNCTION_31
0x19a8	    0x83bd14ffffff	               cmp dword [rbp - 0xec], 0	       701	convert.c	FUNCTION_31
0x19af	            0x7407	                            je 0x40019f8	       701	convert.c	FUNCTION_31
0x19b1	      0xb801000000	                              mov eax, 1	       701	convert.c	FUNCTION_31
0x19b6	            0xeb05	                           jmp 0x40019fd	       701	convert.c	FUNCTION_31
0x19b8	      0xb800000000	                              mov eax, 0	       701	convert.c	FUNCTION_31
0x19bd	              0x90	                                     nop	       701	convert.c	FUNCTION_31
0x19be	        0x488b4df8	                mov rcx, qword [rbp - 8]	       702	convert.c	FUNCTION_31
0x19c2	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       702	convert.c	FUNCTION_31
0x19cb	            0x7405	                            je 0x4001a12	       702	convert.c	FUNCTION_31
0x19cd	      0xe800000000	                          call 0x4001a12	       702	convert.c	FUNCTION_31
0x19d2	              0xc9	                                   leave	       702	convert.c	FUNCTION_31
0x19d3	              0xc3	                                     ret	       702	convert.c	FUNCTION_31
cascade_filter	CALL,3:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	43
0x3e01	              0x55	                                push rbp	      1759	convert.c	FUNCTION_64
0x3e02	          0x4889e5	                            mov rbp, rsp	      1759	convert.c	FUNCTION_64
0x3e05	        0x4883ec20	                           sub rsp, 0x20	      1759	convert.c	FUNCTION_64
0x3e09	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1759	convert.c	FUNCTION_64
0x3e0d	        0x488975e0	             mov qword [rbp - 0x20], rsi	      1759	convert.c	FUNCTION_64
0x3e11	      0x48837de800	               cmp qword [rbp - 0x18], 0	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e16	            0x7410	                            je 0x4003e68	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e18	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e1c	          0x4889c7	                            mov rdi, rax	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e1f	      0xe800000000	                          call 0x4003e64	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e24	            0x85c0	                           test eax, eax	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e26	            0x7406	                            je 0x4003e6e	      1762	convert.c	FUNCTION_64	IF_1	CALL_1
0x3e28	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1763	convert.c	FUNCTION_64	IF_1
0x3e2c	            0xeb74	                           jmp 0x4003ee2	      1763	convert.c	FUNCTION_64	IF_1
0x3e2e	      0x48837de000	               cmp qword [rbp - 0x20], 0	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e33	            0x7410	                            je 0x4003e85	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e35	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e39	          0x4889c7	                            mov rdi, rax	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e3c	      0xe800000000	                          call 0x4003e81	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e41	            0x85c0	                           test eax, eax	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e43	            0x7406	                            je 0x4003e8b	      1764	convert.c	FUNCTION_64	IF_2	CALL_2
0x3e45	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1765	convert.c	FUNCTION_64	IF_2
0x3e49	            0xeb57	                           jmp 0x4003ee2	      1765	convert.c	FUNCTION_64	IF_2
0x3e4b	      0xbf20040000	                          mov edi, 0x420	      1767	convert.c	FUNCTION_64	CALL_3
0x3e50	      0xe800000000	                          call 0x4003e95	      1767	convert.c	FUNCTION_64	CALL_3
0x3e55	        0x488945f8	                mov qword [rbp - 8], rax	      1767	convert.c	FUNCTION_64	CALL_3
0x3e59	        0x488b45f8	                mov rax, qword [rbp - 8]	      1768	convert.c	FUNCTION_64
0x3e5d	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1768	convert.c	FUNCTION_64
0x3e61	        0x48895008	                mov qword [rax + 8], rdx	      1768	convert.c	FUNCTION_64
0x3e65	        0x488b45f8	                mov rax, qword [rbp - 8]	      1769	convert.c	FUNCTION_64
0x3e69	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	      1769	convert.c	FUNCTION_64
0x3e6d	        0x48895010	             mov qword [rax + 0x10], rdx	      1769	convert.c	FUNCTION_64
0x3e71	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_64
0x3e75	    0xc7801c040000	              mov dword [rax + 0x41c], 0	      1770	convert.c	FUNCTION_64
0x3e7f	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_64
0x3e83	    0x8b901c040000	           mov edx, dword [rax + 0x41c] 	      1770	convert.c	FUNCTION_64
0x3e89	        0x488b45f8	                mov rax, qword [rbp - 8]	      1770	convert.c	FUNCTION_64
0x3e8d	    0x899018040000	            mov dword [rax + 0x418], edx	      1770	convert.c	FUNCTION_64
0x3e93	        0x488b45f8	                mov rax, qword [rbp - 8]	      1771	convert.c	FUNCTION_64
0x3e97	    0x48c700000000	                      mov qword [rax], 0	      1771	convert.c	FUNCTION_64
0x3e9e	        0x488b45f8	                mov rax, qword [rbp - 8]	      1772	convert.c	FUNCTION_64
0x3ea2	              0xc9	                                   leave	      1773	convert.c	FUNCTION_64
0x3ea3	              0xc3	                                     ret	      1773	convert.c	FUNCTION_64
get_convert_attr_ascii	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,1:ELSE,0:DO,0:FOR,0	41
0x313c	              0x55	                                push rbp	      1362	convert.c	FUNCTION_49
0x313d	          0x4889e5	                            mov rbp, rsp	      1362	convert.c	FUNCTION_49
0x3140	        0x4883ec40	                           sub rsp, 0x40	      1362	convert.c	FUNCTION_49
0x3144	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1362	convert.c	FUNCTION_49
0x3148	    0x64488b042528	                mov rax, qword fs:[0x28]	      1362	convert.c	FUNCTION_49
0x3151	        0x488945f8	                mov qword [rbp - 8], rax	      1362	convert.c	FUNCTION_49
0x3155	            0x31c0	                            xor eax, eax	      1362	convert.c	FUNCTION_49
0x3157	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	      1365	convert.c	FUNCTION_49	CALL_1
0x315b	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1365	convert.c	FUNCTION_49	CALL_1
0x315f	          0x4889d6	                            mov rsi, rdx	      1365	convert.c	FUNCTION_49	CALL_1
0x3162	          0x4889c7	                            mov rdi, rax	      1365	convert.c	FUNCTION_49	CALL_1
0x3165	      0xe8d8fcffff	                  call sym.convert_attrs	      1365	convert.c	FUNCTION_49	CALL_1
0x316a	          0x8b45d8	             mov eax, dword [rbp - 0x28]	      1366	convert.c	FUNCTION_49	SWITCH_1
0x316d	          0x83f807	                              cmp eax, 7	      1366	convert.c	FUNCTION_49	SWITCH_1
0x3170	            0x7744	                            ja 0x40031f6	      1366	convert.c	FUNCTION_49	SWITCH_1
0x3172	            0x89c0	                            mov eax, eax	      1366	convert.c	FUNCTION_49	SWITCH_1
0x3174	    0x488b04c50000	                  mov rax, qword [rax*8]	      1366	convert.c	FUNCTION_49	SWITCH_1
0x317c	            0xffe0	                                 jmp rax	      1366	convert.c	FUNCTION_49	SWITCH_1
0x317e	      0xb800000000	                              mov eax, 0	      1368	convert.c	FUNCTION_49	SWITCH_1
0x3183	            0xeb36	                           jmp 0x40031fb	      1368	convert.c	FUNCTION_49	SWITCH_1
0x3185	      0xb800000000	                              mov eax, 0	      1370	convert.c	FUNCTION_49	SWITCH_1
0x318a	            0xeb2f	                           jmp 0x40031fb	      1370	convert.c	FUNCTION_49	SWITCH_1
0x318c	      0xb800000000	                              mov eax, 0	      1372	convert.c	FUNCTION_49	SWITCH_1
0x3191	            0xeb28	                           jmp 0x40031fb	      1372	convert.c	FUNCTION_49	SWITCH_1
0x3193	      0xb800000000	                              mov eax, 0	      1374	convert.c	FUNCTION_49	SWITCH_1
0x3198	            0xeb21	                           jmp 0x40031fb	      1374	convert.c	FUNCTION_49	SWITCH_1
0x319a	      0xb800000000	                              mov eax, 0	      1376	convert.c	FUNCTION_49	SWITCH_1
0x319f	            0xeb1a	                           jmp 0x40031fb	      1376	convert.c	FUNCTION_49	SWITCH_1
0x31a1	      0xb800000000	                              mov eax, 0	      1378	convert.c	FUNCTION_49	SWITCH_1
0x31a6	            0xeb13	                           jmp 0x40031fb	      1378	convert.c	FUNCTION_49	SWITCH_1
0x31a8	      0xb800000000	                              mov eax, 0	      1380	convert.c	FUNCTION_49	SWITCH_1
0x31ad	            0xeb0c	                           jmp 0x40031fb	      1380	convert.c	FUNCTION_49	SWITCH_1
0x31af	      0xb800000000	                              mov eax, 0	      1382	convert.c	FUNCTION_49	SWITCH_1
0x31b4	            0xeb05	                           jmp 0x40031fb	      1382	convert.c	FUNCTION_49	SWITCH_1
0x31b6	      0xb800000000	                              mov eax, 0	      1384	convert.c	FUNCTION_49
0x31bb	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1385	convert.c	FUNCTION_49
0x31bf	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1385	convert.c	FUNCTION_49
0x31c8	            0x7405	                            je 0x400320f	      1385	convert.c	FUNCTION_49
0x31ca	      0xe800000000	                          call 0x400320f	      1385	convert.c	FUNCTION_49
0x31cf	              0xc9	                                   leave	      1385	convert.c	FUNCTION_49
0x31d0	              0xc3	                                     ret	      1385	convert.c	FUNCTION_49
gather_convert_stats	CALL,2:WHILE,0:functions,0:IF,4:SWITCH,0:ELSE,0:DO,0:FOR,0	44
0x492	              0x55	                                push rbp	       106	convert.c	FUNCTION_15
0x493	          0x4889e5	                            mov rbp, rsp	       106	convert.c	FUNCTION_15
0x496	        0x4883ec40	                           sub rsp, 0x40	       106	convert.c	FUNCTION_15
0x49a	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       106	convert.c	FUNCTION_15
0x49e	        0x488975c0	             mov qword [rbp - 0x40], rsi	       106	convert.c	FUNCTION_15
0x4a2	    0x64488b042528	                mov rax, qword fs:[0x28]	       106	convert.c	FUNCTION_15
0x4ab	        0x488945f8	                mov qword [rbp - 8], rax	       106	convert.c	FUNCTION_15
0x4af	            0x31c0	                            xor eax, eax	       106	convert.c	FUNCTION_15
0x4b1	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       108	convert.c	FUNCTION_15
0x4b8	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       109	convert.c	FUNCTION_15	IF_1
0x4bd	            0x7407	                            je 0x4000506	       109	convert.c	FUNCTION_15	IF_1
0x4bf	      0x48837dc000	               cmp qword [rbp - 0x40], 0	       109	convert.c	FUNCTION_15	IF_1
0x4c4	            0x7507	                           jne 0x400050d	       109	convert.c	FUNCTION_15	IF_1
0x4c6	      0xb800000000	                              mov eax, 0	       110	convert.c	FUNCTION_15	IF_1
0x4cb	            0xeb4b	                           jmp 0x4000558	       110	convert.c	FUNCTION_15	IF_1
0x4cd	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       111	convert.c	FUNCTION_15	CALL_1
0x4d1	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       111	convert.c	FUNCTION_15	CALL_1
0x4d5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       111	convert.c	FUNCTION_15	CALL_1
0x4d9	          0x4889ce	                            mov rsi, rcx	       111	convert.c	FUNCTION_15	CALL_1
0x4dc	          0x4889c7	                            mov rdi, rax	       111	convert.c	FUNCTION_15	CALL_1
0x4df	      0xe8e0fdffff	                   call sym.gather_stats	       111	convert.c	FUNCTION_15	CALL_1
0x4e4	        0x488d55e0	                   lea rdx, [rbp - 0x20]	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4e8	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4ec	          0x4889d6	                            mov rsi, rdx	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4ef	          0x4889c7	                            mov rdi, rax	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4f2	      0xe847ffffff	              call sym.convert_is_binary	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4f7	            0x85c0	                           test eax, eax	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4f9	            0x7404	                            je 0x400053f	       112	convert.c	FUNCTION_15	IF_2	CALL_2
0x4fb	        0x834ddc04	                or dword [rbp - 0x24], 4	       113	convert.c	FUNCTION_15	IF_2
0x4ff	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       114	convert.c	FUNCTION_15	IF_3
0x502	            0x85c0	                           test eax, eax	       114	convert.c	FUNCTION_15	IF_3
0x504	            0x7404	                            je 0x400054a	       114	convert.c	FUNCTION_15	IF_3
0x506	        0x834ddc02	                or dword [rbp - 0x24], 2	       115	convert.c	FUNCTION_15	IF_3
0x50a	          0x8b45e8	             mov eax, dword [rbp - 0x18]	       116	convert.c	FUNCTION_15	IF_4
0x50d	            0x85c0	                           test eax, eax	       116	convert.c	FUNCTION_15	IF_4
0x50f	            0x7404	                            je 0x4000555	       116	convert.c	FUNCTION_15	IF_4
0x511	        0x834ddc01	                or dword [rbp - 0x24], 1	       117	convert.c	FUNCTION_15	IF_4
0x515	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       119	convert.c	FUNCTION_15
0x518	        0x488b4df8	                mov rcx, qword [rbp - 8]	       120	convert.c	FUNCTION_15
0x51c	    0x6448330c2528	                xor rcx, qword fs:[0x28]	       120	convert.c	FUNCTION_15
0x525	            0x7405	                            je 0x400056c	       120	convert.c	FUNCTION_15
0x527	      0xe800000000	                          call 0x400056c	       120	convert.c	FUNCTION_15
0x52c	              0xc9	                                   leave	       120	convert.c	FUNCTION_15
0x52d	              0xc3	                                     ret	       120	convert.c	FUNCTION_15
cascade_free_fn	CALL,3:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	20
0x3dbe	              0x55	                                push rbp	      1745	convert.c	FUNCTION_63
0x3dbf	          0x4889e5	                            mov rbp, rsp	      1745	convert.c	FUNCTION_63
0x3dc2	        0x4883ec20	                           sub rsp, 0x20	      1745	convert.c	FUNCTION_63
0x3dc6	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1745	convert.c	FUNCTION_63
0x3dca	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1746	convert.c	FUNCTION_63
0x3dce	        0x488945f8	                mov qword [rbp - 8], rax	      1746	convert.c	FUNCTION_63
0x3dd2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1747	convert.c	FUNCTION_63	CALL_1
0x3dd6	        0x488b4008	                mov rax, qword [rax + 8]	      1747	convert.c	FUNCTION_63	CALL_1
0x3dda	          0x4889c7	                            mov rdi, rax	      1747	convert.c	FUNCTION_63	CALL_1
0x3ddd	      0xe800000000	                          call 0x4003e22	      1747	convert.c	FUNCTION_63	CALL_1
0x3de2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1748	convert.c	FUNCTION_63	CALL_2
0x3de6	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1748	convert.c	FUNCTION_63	CALL_2
0x3dea	          0x4889c7	                            mov rdi, rax	      1748	convert.c	FUNCTION_63	CALL_2
0x3ded	      0xe800000000	                          call 0x4003e32	      1748	convert.c	FUNCTION_63	CALL_2
0x3df2	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1749	convert.c	FUNCTION_63	CALL_3
0x3df6	          0x4889c7	                            mov rdi, rax	      1749	convert.c	FUNCTION_63	CALL_3
0x3df9	      0xe800000000	                          call 0x4003e3e	      1749	convert.c	FUNCTION_63	CALL_3
0x3dfe	              0x90	                                     nop	      1750	convert.c	FUNCTION_63
0x3dff	              0xc9	                                   leave	      1750	convert.c	FUNCTION_63
0x3e00	              0xc3	                                     ret	      1750	convert.c	FUNCTION_63
_	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	15
0x268	              0x55	                                push rbp	        51	gettext.h	FUNCTION_102
0x269	          0x4889e5	                            mov rbp, rsp	        51	gettext.h	FUNCTION_102
0x26c	        0x4883ec10	                           sub rsp, 0x10	        51	gettext.h	FUNCTION_102
0x270	        0x48897df8	                mov qword [rbp - 8], rdi	        51	gettext.h	FUNCTION_102
0x274	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	gettext.h	FUNCTION_102	IF_1
0x278	           0xfb600	                   movzx eax, byte [rax]	        52	gettext.h	FUNCTION_102	IF_1
0x27b	            0x84c0	                             test al, al	        52	gettext.h	FUNCTION_102	IF_1
0x27d	            0x7507	                           jne 0x40002c6	        52	gettext.h	FUNCTION_102	IF_1
0x27f	      0xb800000000	                              mov eax, 0	        53	gettext.h	FUNCTION_102	IF_1
0x284	            0xeb0c	                           jmp 0x40002d2	        53	gettext.h	FUNCTION_102	IF_1
0x286	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	gettext.h	FUNCTION_102	CALL_2
0x28a	          0x4889c7	                            mov rdi, rax	        54	gettext.h	FUNCTION_102	CALL_2
0x28d	      0xe800000000	                          call 0x40002d2	        54	gettext.h	FUNCTION_102	CALL_2
0x292	              0xc9	                                   leave	        55	gettext.h	FUNCTION_102
0x293	              0xc3	                                     ret	        55	gettext.h	FUNCTION_102
convert_to_working_tree	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	17
0x370e	              0x55	                                push rbp	      1488	convert.c	FUNCTION_54
0x370f	          0x4889e5	                            mov rbp, rsp	      1488	convert.c	FUNCTION_54
0x3712	        0x4883ec20	                           sub rsp, 0x20	      1488	convert.c	FUNCTION_54
0x3716	        0x48897df8	                mov qword [rbp - 8], rdi	      1488	convert.c	FUNCTION_54
0x371a	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1488	convert.c	FUNCTION_54
0x371e	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1488	convert.c	FUNCTION_54
0x3722	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1488	convert.c	FUNCTION_54
0x3726	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1489	convert.c	FUNCTION_54	CALL_1
0x372a	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1489	convert.c	FUNCTION_54	CALL_1
0x372e	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1489	convert.c	FUNCTION_54	CALL_1
0x3732	        0x488b45f8	                mov rax, qword [rbp - 8]	      1489	convert.c	FUNCTION_54	CALL_1
0x3736	    0x41b900000000	                              mov r9d, 0	      1489	convert.c	FUNCTION_54	CALL_1
0x373c	    0x41b800000000	                              mov r8d, 0	      1489	convert.c	FUNCTION_54	CALL_1
0x3742	          0x4889c7	                            mov rdi, rax	      1489	convert.c	FUNCTION_54	CALL_1
0x3745	      0xe8c4fdffff	call sym.convert_to_working_tree_internal	      1489	convert.c	FUNCTION_54	CALL_1
0x374a	              0xc9	                                   leave	      1490	convert.c	FUNCTION_54
0x374b	              0xc3	                                     ret	      1490	convert.c	FUNCTION_54
convert_to_working_tree_internal	CALL,6:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,0:DO,0:FOR,0	121
0x350e	              0x55	                                push rbp	      1442	convert.c	FUNCTION_52
0x350f	          0x4889e5	                            mov rbp, rsp	      1442	convert.c	FUNCTION_52
0x3512	        0x4883ec70	                           sub rsp, 0x70	      1442	convert.c	FUNCTION_52
0x3516	        0x48897db8	             mov qword [rbp - 0x48], rdi	      1442	convert.c	FUNCTION_52
0x351a	        0x488975b0	             mov qword [rbp - 0x50], rsi	      1442	convert.c	FUNCTION_52
0x351e	        0x488955a8	             mov qword [rbp - 0x58], rdx	      1442	convert.c	FUNCTION_52
0x3522	        0x48894da0	             mov qword [rbp - 0x60], rcx	      1442	convert.c	FUNCTION_52
0x3526	        0x4489459c	             mov dword [rbp - 0x64], r8d	      1442	convert.c	FUNCTION_52
0x352a	        0x4c894d90	              mov qword [rbp - 0x70], r9	      1442	convert.c	FUNCTION_52
0x352e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1442	convert.c	FUNCTION_52
0x3537	        0x488945f8	                mov qword [rbp - 8], rax	      1442	convert.c	FUNCTION_52
0x353b	            0x31c0	                            xor eax, eax	      1442	convert.c	FUNCTION_52
0x353d	    0xc745c8000000	               mov dword [rbp - 0x38], 0	      1443	convert.c	FUNCTION_52
0x3544	    0xc745cc000000	               mov dword [rbp - 0x34], 0	      1443	convert.c	FUNCTION_52
0x354b	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	      1446	convert.c	FUNCTION_52	CALL_1
0x354f	        0x488d45d0	                   lea rax, [rbp - 0x30]	      1446	convert.c	FUNCTION_52	CALL_1
0x3553	          0x4889d6	                            mov rsi, rdx	      1446	convert.c	FUNCTION_52	CALL_1
0x3556	          0x4889c7	                            mov rdi, rax	      1446	convert.c	FUNCTION_52	CALL_1
0x3559	      0xe8e4f8ffff	                  call sym.convert_attrs	      1446	convert.c	FUNCTION_52	CALL_1
0x355e	          0x8b7de0	             mov edi, dword [rbp - 0x20]	      1448	convert.c	FUNCTION_52	CALL_2
0x3561	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1448	convert.c	FUNCTION_52	CALL_2
0x3565	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1448	convert.c	FUNCTION_52	CALL_2
0x3569	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1448	convert.c	FUNCTION_52	CALL_2
0x356d	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1448	convert.c	FUNCTION_52	CALL_2
0x3571	          0x4189f8	                            mov r8d, edi	      1448	convert.c	FUNCTION_52	CALL_2
0x3574	          0x4889c7	                            mov rdi, rax	      1448	convert.c	FUNCTION_52	CALL_2
0x3577	      0xe8b1f3ffff	              call sym.ident_to_worktree	      1448	convert.c	FUNCTION_52	CALL_2
0x357c	           0x945c8	              or dword [rbp - 0x38], eax	      1448	convert.c	FUNCTION_52	CALL_2
0x357f	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1449	convert.c	FUNCTION_52	IF_1
0x3583	            0x7418	                            je 0x40035dd	      1449	convert.c	FUNCTION_52	IF_1
0x3585	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1450	convert.c	FUNCTION_52	IF_1
0x3589	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1450	convert.c	FUNCTION_52	IF_1
0x358d	        0x488945b0	             mov qword [rbp - 0x50], rax	      1450	convert.c	FUNCTION_52	IF_1
0x3591	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1451	convert.c	FUNCTION_52	IF_1
0x3595	        0x488b4008	                mov rax, qword [rax + 8]	      1451	convert.c	FUNCTION_52	IF_1
0x3599	        0x488945a8	             mov qword [rbp - 0x58], rax	      1451	convert.c	FUNCTION_52	IF_1
0x359d	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_52	IF_2
0x35a1	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_52	IF_2
0x35a4	            0x741a	                            je 0x4003600	      1458	convert.c	FUNCTION_52	IF_2
0x35a6	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_52	IF_2
0x35aa	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1458	convert.c	FUNCTION_52	IF_2
0x35ae	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_52	IF_2
0x35b1	            0x7513	                           jne 0x4003606	      1458	convert.c	FUNCTION_52	IF_2
0x35b3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1458	convert.c	FUNCTION_52	IF_2
0x35b7	        0x488b4020	            mov rax, qword [rax + 0x20] 	      1458	convert.c	FUNCTION_52	IF_2
0x35bb	          0x4885c0	                           test rax, rax	      1458	convert.c	FUNCTION_52	IF_2
0x35be	            0x7506	                           jne 0x4003606	      1458	convert.c	FUNCTION_52	IF_2
0x35c0	        0x837d9c00	               cmp dword [rbp - 0x64], 0	      1458	convert.c	FUNCTION_52	IF_2
0x35c4	            0x753f	                           jne 0x4003645	      1458	convert.c	FUNCTION_52	IF_2
0x35c6	          0x8b7ddc	             mov edi, dword [rbp - 0x24]	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35c9	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35cd	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35d1	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35d5	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35d9	          0x4189f8	                            mov r8d, edi	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35dc	          0x4889c7	                            mov rdi, rax	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35df	      0xe8f5deffff	               call sym.crlf_to_worktree	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35e4	           0x945c8	              or dword [rbp - 0x38], eax	      1459	convert.c	FUNCTION_52	IF_2	CALL_3
0x35e7	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1460	convert.c	FUNCTION_52	IF_2	IF_3
0x35eb	            0x7418	                            je 0x4003645	      1460	convert.c	FUNCTION_52	IF_2	IF_3
0x35ed	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1461	convert.c	FUNCTION_52	IF_2	IF_3
0x35f1	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1461	convert.c	FUNCTION_52	IF_2	IF_3
0x35f5	        0x488945b0	             mov qword [rbp - 0x50], rax	      1461	convert.c	FUNCTION_52	IF_2	IF_3
0x35f9	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1462	convert.c	FUNCTION_52	IF_2	IF_3
0x35fd	        0x488b4008	                mov rax, qword [rax + 8]	      1462	convert.c	FUNCTION_52	IF_2	IF_3
0x3601	        0x488945a8	             mov qword [rbp - 0x58], rax	      1462	convert.c	FUNCTION_52	IF_2	IF_3
0x3605	        0x488b7de8	             mov rdi, qword [rbp - 0x18]	      1466	convert.c	FUNCTION_52	CALL_4
0x3609	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1466	convert.c	FUNCTION_52	CALL_4
0x360d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1466	convert.c	FUNCTION_52	CALL_4
0x3611	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1466	convert.c	FUNCTION_52	CALL_4
0x3615	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1466	convert.c	FUNCTION_52	CALL_4
0x3619	          0x4989f8	                             mov r8, rdi	      1466	convert.c	FUNCTION_52	CALL_4
0x361c	          0x4889c7	                            mov rdi, rax	      1466	convert.c	FUNCTION_52	CALL_4
0x361f	      0xe820dbffff	             call sym.encode_to_worktree	      1466	convert.c	FUNCTION_52	CALL_4
0x3624	           0x945c8	              or dword [rbp - 0x38], eax	      1466	convert.c	FUNCTION_52	CALL_4
0x3627	        0x837dc800	               cmp dword [rbp - 0x38], 0	      1467	convert.c	FUNCTION_52	IF_4
0x362b	            0x7418	                            je 0x4003685	      1467	convert.c	FUNCTION_52	IF_4
0x362d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1468	convert.c	FUNCTION_52	IF_4
0x3631	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1468	convert.c	FUNCTION_52	IF_4
0x3635	        0x488945b0	             mov qword [rbp - 0x50], rax	      1468	convert.c	FUNCTION_52	IF_4
0x3639	        0x488b45a0	             mov rax, qword [rbp - 0x60]	      1469	convert.c	FUNCTION_52	IF_4
0x363d	        0x488b4008	                mov rax, qword [rax + 8]	      1469	convert.c	FUNCTION_52	IF_4
0x3641	        0x488945a8	             mov qword [rbp - 0x58], rax	      1469	convert.c	FUNCTION_52	IF_4
0x3645	        0x488b7dd0	             mov rdi, qword [rbp - 0x30]	      1472	convert.c	FUNCTION_52	CALL_5
0x3649	        0x488b4da0	             mov rcx, qword [rbp - 0x60]	      1472	convert.c	FUNCTION_52	CALL_5
0x364d	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	      1472	convert.c	FUNCTION_52	CALL_5
0x3651	        0x488b75b0	             mov rsi, qword [rbp - 0x50]	      1472	convert.c	FUNCTION_52	CALL_5
0x3655	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1472	convert.c	FUNCTION_52	CALL_5
0x3659	          0xff7590	                 push qword [rbp - 0x70]	      1472	convert.c	FUNCTION_52	CALL_5
0x365c	            0x6a02	                                  push 2	      1472	convert.c	FUNCTION_52	CALL_5
0x365e	          0x4989f9	                             mov r9, rdi	      1472	convert.c	FUNCTION_52	CALL_5
0x3661	          0x4989c8	                             mov r8, rcx	      1472	convert.c	FUNCTION_52	CALL_5
0x3664	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1472	convert.c	FUNCTION_52	CALL_5
0x3669	          0x4889c7	                            mov rdi, rax	      1472	convert.c	FUNCTION_52	CALL_5
0x366c	      0xe872ecffff	                   call sym.apply_filter	      1472	convert.c	FUNCTION_52	CALL_5
0x3671	        0x4883c410	                           add rsp, 0x10	      1472	convert.c	FUNCTION_52	CALL_5
0x3675	          0x8945cc	             mov dword [rbp - 0x34], eax	      1472	convert.c	FUNCTION_52	CALL_5
0x3678	        0x837dcc00	               cmp dword [rbp - 0x34], 0	      1474	convert.c	FUNCTION_52	IF_5
0x367c	            0x7531	                           jne 0x40036ef	      1474	convert.c	FUNCTION_52	IF_5
0x367e	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1474	convert.c	FUNCTION_52	IF_5
0x3682	          0x4885c0	                           test rax, rax	      1474	convert.c	FUNCTION_52	IF_5
0x3685	            0x7428	                            je 0x40036ef	      1474	convert.c	FUNCTION_52	IF_5
0x3687	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1474	convert.c	FUNCTION_52	IF_5
0x368b	          0x8b4028	            mov eax, dword [rax + 0x28] 	      1474	convert.c	FUNCTION_52	IF_5
0x368e	            0x85c0	                           test eax, eax	      1474	convert.c	FUNCTION_52	IF_5
0x3690	            0x741d	                            je 0x40036ef	      1474	convert.c	FUNCTION_52	IF_5
0x3692	        0x488b45d0	             mov rax, qword [rbp - 0x30]	      1475	convert.c	FUNCTION_52	CALL_6
0x3696	          0x488b10	                    mov rdx, qword [rax]	      1475	convert.c	FUNCTION_52	CALL_6
0x3699	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1475	convert.c	FUNCTION_52	CALL_6
0x369d	          0x4889c6	                            mov rsi, rax	      1475	convert.c	FUNCTION_52	CALL_6
0x36a0	      0xbf00000000	                              mov edi, 0	      1475	convert.c	FUNCTION_52	CALL_6
0x36a5	      0xb800000000	                              mov eax, 0	      1475	convert.c	FUNCTION_52	CALL_6
0x36aa	      0xe800000000	                          call 0x40036ef	      1475	convert.c	FUNCTION_52	CALL_6
0x36af	          0x8b45c8	             mov eax, dword [rbp - 0x38]	      1477	convert.c	FUNCTION_52
0x36b2	           0xb45cc	              or eax, dword [rbp - 0x34]	      1477	convert.c	FUNCTION_52
0x36b5	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1478	convert.c	FUNCTION_52
0x36b9	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1478	convert.c	FUNCTION_52
0x36c2	            0x7405	                            je 0x4003709	      1478	convert.c	FUNCTION_52
0x36c4	      0xe800000000	                          call 0x4003709	      1478	convert.c	FUNCTION_52
0x36c9	              0xc9	                                   leave	      1478	convert.c	FUNCTION_52
0x36ca	              0xc3	                                     ret	      1478	convert.c	FUNCTION_52
free_stream_filter	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	13
0x445e	              0x55	                                push rbp	      1956	convert.c	FUNCTION_71
0x445f	          0x4889e5	                            mov rbp, rsp	      1956	convert.c	FUNCTION_71
0x4462	        0x4883ec10	                           sub rsp, 0x10	      1956	convert.c	FUNCTION_71
0x4466	        0x48897df8	                mov qword [rbp - 8], rdi	      1956	convert.c	FUNCTION_71
0x446a	        0x488b45f8	                mov rax, qword [rbp - 8]	      1957	convert.c	FUNCTION_71	CALL_1
0x446e	          0x488b00	                    mov rax, qword [rax]	      1957	convert.c	FUNCTION_71	CALL_1
0x4471	        0x488b4008	                mov rax, qword [rax + 8]	      1957	convert.c	FUNCTION_71	CALL_1
0x4475	        0x488b55f8	                mov rdx, qword [rbp - 8]	      1957	convert.c	FUNCTION_71	CALL_1
0x4479	          0x4889d7	                            mov rdi, rdx	      1957	convert.c	FUNCTION_71	CALL_1
0x447c	            0xffd0	                                call rax	      1957	convert.c	FUNCTION_71	CALL_1
0x447e	              0x90	                                     nop	      1958	convert.c	FUNCTION_71
0x447f	              0xc9	                                   leave	      1958	convert.c	FUNCTION_71
0x4480	              0xc3	                                     ret	      1958	convert.c	FUNCTION_71
trace_encoding	CALL,6:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,1	106
0xc00	              0x55	                                push rbp	       329	convert.c	FUNCTION_25
0xc01	          0x4889e5	                            mov rbp, rsp	       329	convert.c	FUNCTION_25
0xc04	        0x4883ec60	                           sub rsp, 0x60	       329	convert.c	FUNCTION_25
0xc08	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       329	convert.c	FUNCTION_25
0xc0c	        0x488975c0	             mov qword [rbp - 0x40], rsi	       329	convert.c	FUNCTION_25
0xc10	        0x488955b8	             mov qword [rbp - 0x48], rdx	       329	convert.c	FUNCTION_25
0xc14	        0x48894db0	             mov qword [rbp - 0x50], rcx	       329	convert.c	FUNCTION_25
0xc18	        0x4c8945a8	              mov qword [rbp - 0x58], r8	       329	convert.c	FUNCTION_25
0xc1c	    0x64488b042528	                mov rax, qword fs:[0x28]	       329	convert.c	FUNCTION_25
0xc25	        0x488945f8	                mov qword [rbp - 8], rax	       329	convert.c	FUNCTION_25
0xc29	            0x31c0	                            xor eax, eax	       329	convert.c	FUNCTION_25
0xc2b	    0x48c745e00000	               mov qword [rbp - 0x20], 0	       331	convert.c	FUNCTION_25
0xc33	    0x48c745e80000	               mov qword [rbp - 0x18], 0	       331	convert.c	FUNCTION_25
0xc3b	    0x48c745f00000	               mov qword [rbp - 0x10], 0	       331	convert.c	FUNCTION_25
0xc43	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       334	convert.c	FUNCTION_25	CALL_2
0xc47	        0x488b4dc0	             mov rcx, qword [rbp - 0x40]	       334	convert.c	FUNCTION_25	CALL_2
0xc4b	        0x488b55c8	             mov rdx, qword [rbp - 0x38]	       334	convert.c	FUNCTION_25	CALL_2
0xc4f	        0x488d45e0	                   lea rax, [rbp - 0x20]	       334	convert.c	FUNCTION_25	CALL_2
0xc53	          0x4989f0	                             mov r8, rsi	       334	convert.c	FUNCTION_25	CALL_2
0xc56	      0xbe00000000	                              mov esi, 0	       334	convert.c	FUNCTION_25	CALL_2
0xc5b	          0x4889c7	                            mov rdi, rax	       334	convert.c	FUNCTION_25	CALL_2
0xc5e	      0xb800000000	                              mov eax, 0	       334	convert.c	FUNCTION_25	CALL_2
0xc63	      0xe800000000	                          call 0x4000ca8	       334	convert.c	FUNCTION_25	CALL_2
0xc68	    0xc745dc000000	               mov dword [rbp - 0x24], 0	       335	convert.c	FUNCTION_25	FOR_1
0xc6f	      0xe99f000000	                           jmp 0x4000d53	       335	convert.c	FUNCTION_25	FOR_1
0xc74	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       341	convert.c	FUNCTION_25	FOR_1
0xc77	          0x83c001	                              add eax, 1	       341	convert.c	FUNCTION_25	FOR_1
0xc7a	          0x83e007	                              and eax, 7	       341	convert.c	FUNCTION_25	FOR_1
0xc7d	            0x85c0	                           test eax, eax	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xc7f	            0x7415	                            je 0x4000cd6	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xc81	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       341	convert.c	FUNCTION_25	FOR_1
0xc84	          0x83c001	                              add eax, 1	       341	convert.c	FUNCTION_25	FOR_1
0xc87	            0x4898	                                    cdqe	       341	convert.c	FUNCTION_25	FOR_1
0xc89	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       341	convert.c	FUNCTION_25	FOR_1
0xc8d	            0x7307	                           jae 0x4000cd6	       341	convert.c	FUNCTION_25	FOR_1
0xc8f	      0xbf20000000	                           mov edi, 0x20	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xc94	            0xeb05	                           jmp 0x4000cdb	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xc96	      0xbf0a000000	                            mov edi, 0xa	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xc9b	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_25	FOR_1
0xc9e	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_25	FOR_1
0xca1	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_25	FOR_1
0xca5	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_25	FOR_1
0xca8	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_25	FOR_1
0xcab	            0x3c20	                            cmp al, 0x20	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcad	            0x7e29	                           jle 0x4000d18	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcaf	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_25	FOR_1
0xcb2	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_25	FOR_1
0xcb5	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_25	FOR_1
0xcb9	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_25	FOR_1
0xcbc	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_25	FOR_1
0xcbf	            0x3c7f	                            cmp al, 0x7f	       340	convert.c	FUNCTION_25	FOR_1
0xcc1	            0x7415	                            je 0x4000d18	       340	convert.c	FUNCTION_25	FOR_1
0xcc3	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       340	convert.c	FUNCTION_25	FOR_1
0xcc6	          0x4863d0	                         movsxd rdx, eax	       340	convert.c	FUNCTION_25	FOR_1
0xcc9	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       340	convert.c	FUNCTION_25	FOR_1
0xccd	          0x4801d0	                            add rax, rdx	       340	convert.c	FUNCTION_25	FOR_1
0xcd0	           0xfb600	                   movzx eax, byte [rax]	       340	convert.c	FUNCTION_25	FOR_1
0xcd3	           0xfbef0	                           movsx esi, al	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcd6	            0xeb05	                           jmp 0x4000d1d	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcd8	      0xbe20000000	                           mov esi, 0x20	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcdd	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       339	convert.c	FUNCTION_25	FOR_1
0xce0	          0x4863d0	                         movsxd rdx, eax	       339	convert.c	FUNCTION_25	FOR_1
0xce3	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       339	convert.c	FUNCTION_25	FOR_1
0xce7	          0x4801d0	                            add rax, rdx	       339	convert.c	FUNCTION_25	FOR_1
0xcea	           0xfb600	                   movzx eax, byte [rax]	       339	convert.c	FUNCTION_25	FOR_1
0xced	           0xfb6c8	                           movzx ecx, al	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcf0	          0x8b55dc	             mov edx, dword [rbp - 0x24]	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcf3	        0x488d45e0	                   lea rax, [rbp - 0x20]	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcf7	          0x4189f9	                            mov r9d, edi	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcfa	          0x4189f0	                            mov r8d, esi	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xcfd	      0xbe00000000	                              mov esi, 0	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xd02	          0x4889c7	                            mov rdi, rax	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xd05	      0xb800000000	                              mov eax, 0	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xd0a	      0xe800000000	                          call 0x4000d4f	       336	convert.c	FUNCTION_25	FOR_1	CALL_3
0xd0f	        0x8345dc01	               add dword [rbp - 0x24], 1	       335	convert.c	FUNCTION_25	FOR_1
0xd13	          0x8b45dc	             mov eax, dword [rbp - 0x24]	       335	convert.c	FUNCTION_25	FOR_1
0xd16	            0x4898	                                    cdqe	       335	convert.c	FUNCTION_25	FOR_1
0xd18	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       335	convert.c	FUNCTION_25	FOR_1
0xd1c	            0x730b	                           jae 0x4000d69	       335	convert.c	FUNCTION_25	FOR_1
0xd1e	      0x48837db000	               cmp qword [rbp - 0x50], 0	       335	convert.c	FUNCTION_25	FOR_1
0xd23	     0xf854bffffff	                           jne 0x4000cb4	       335	convert.c	FUNCTION_25	FOR_1
0xd29	        0x488d45e0	                   lea rax, [rbp - 0x20]	       344	convert.c	FUNCTION_25	CALL_4
0xd2d	      0xba01000000	                              mov edx, 1	       344	convert.c	FUNCTION_25	CALL_4
0xd32	      0xbe0a000000	                            mov esi, 0xa	       344	convert.c	FUNCTION_25	CALL_4
0xd37	          0x4889c7	                            mov rdi, rax	       344	convert.c	FUNCTION_25	CALL_4
0xd3a	      0xe800000000	                          call 0x4000d7f	       344	convert.c	FUNCTION_25	CALL_4
0xd3f	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_25	CALL_5
0xd44	      0xe84bf5ffff	                  call sym.trace_pass_fl	       346	convert.c	FUNCTION_25	CALL_5
0xd49	            0x85c0	                           test eax, eax	       346	convert.c	FUNCTION_25	CALL_5
0xd4b	            0x741b	                            je 0x4000da8	       346	convert.c	FUNCTION_25	CALL_5
0xd4d	        0x488d45e0	                   lea rax, [rbp - 0x20]	       346	convert.c	FUNCTION_25	CALL_5
0xd51	          0x4889c1	                            mov rcx, rax	       346	convert.c	FUNCTION_25	CALL_5
0xd54	      0xba00000000	                              mov edx, 0	       346	convert.c	FUNCTION_25	CALL_5
0xd59	      0xbe5a010000	                          mov esi, 0x15a	       346	convert.c	FUNCTION_25	CALL_5
0xd5e	      0xbf00000000	                              mov edi, 0	       346	convert.c	FUNCTION_25	CALL_5
0xd63	      0xe800000000	                          call 0x4000da8	       346	convert.c	FUNCTION_25	CALL_5
0xd68	        0x488d45e0	                   lea rax, [rbp - 0x20]	       347	convert.c	FUNCTION_25	CALL_6
0xd6c	          0x4889c7	                            mov rdi, rax	       347	convert.c	FUNCTION_25	CALL_6
0xd6f	      0xe800000000	                          call 0x4000db4	       347	convert.c	FUNCTION_25	CALL_6
0xd74	              0x90	                                     nop	       348	convert.c	FUNCTION_25
0xd75	        0x488b45f8	                mov rax, qword [rbp - 8]	       348	convert.c	FUNCTION_25
0xd79	    0x644833042528	                xor rax, qword fs:[0x28]	       348	convert.c	FUNCTION_25
0xd82	            0x7405	                            je 0x4000dc9	       348	convert.c	FUNCTION_25
0xd84	      0xe800000000	                          call 0x4000dc9	       348	convert.c	FUNCTION_25
0xd89	              0xc9	                                   leave	       348	convert.c	FUNCTION_25
0xd8a	              0xc3	                                     ret	       348	convert.c	FUNCTION_25
trace_pass_fl	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	17
0x294	              0x55	                                push rbp	       134	trace.h	FUNCTION_12
0x295	          0x4889e5	                            mov rbp, rsp	       134	trace.h	FUNCTION_12
0x298	        0x48897df8	                mov qword [rbp - 8], rdi	       134	trace.h	FUNCTION_12
0x29c	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	trace.h	FUNCTION_12
0x2a0	          0x8b4008	                mov eax, dword [rax + 8]	       135	trace.h	FUNCTION_12
0x2a3	            0x85c0	                           test eax, eax	       135	trace.h	FUNCTION_12
0x2a5	            0x750f	                           jne 0x40002f6	       135	trace.h	FUNCTION_12
0x2a7	        0x488b45f8	                mov rax, qword [rbp - 8]	       135	trace.h	FUNCTION_12
0x2ab	         0xfb6400c	            movzx eax, byte [rax + 0xc] 	       135	trace.h	FUNCTION_12
0x2af	          0x83e001	                              and eax, 1	       135	trace.h	FUNCTION_12
0x2b2	            0x84c0	                             test al, al	       135	trace.h	FUNCTION_12
0x2b4	            0x7507	                           jne 0x40002fd	       135	trace.h	FUNCTION_12
0x2b6	      0xb801000000	                              mov eax, 1	       135	trace.h	FUNCTION_12
0x2bb	            0xeb05	                           jmp 0x4000302	       135	trace.h	FUNCTION_12
0x2bd	      0xb800000000	                              mov eax, 0	       135	trace.h	FUNCTION_12
0x2c2	              0x5d	                                 pop rbp	       136	trace.h	FUNCTION_12
0x2c3	              0xc3	                                     ret	       136	trace.h	FUNCTION_12
lf_to_crlf_filter_fn	CALL,0:WHILE,0:functions,0:IF,9:SWITCH,0:ELSE,1:DO,0:FOR,1	148
0x3896	              0x55	                                push rbp	      1575	convert.c	FUNCTION_59
0x3897	          0x4889e5	                            mov rbp, rsp	      1575	convert.c	FUNCTION_59
0x389a	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1575	convert.c	FUNCTION_59
0x389e	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1575	convert.c	FUNCTION_59
0x38a2	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1575	convert.c	FUNCTION_59
0x38a6	        0x48894db0	             mov qword [rbp - 0x50], rcx	      1575	convert.c	FUNCTION_59
0x38aa	        0x4c8945a8	              mov qword [rbp - 0x58], r8	      1575	convert.c	FUNCTION_59
0x38ae	    0x48c745e00000	               mov qword [rbp - 0x20], 0	      1576	convert.c	FUNCTION_59
0x38b6	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1577	convert.c	FUNCTION_59
0x38ba	        0x488945f0	             mov qword [rbp - 0x10], rax	      1577	convert.c	FUNCTION_59
0x38be	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1584	convert.c	FUNCTION_59	IF_1
0x38c2	         0xfb64008	               movzx eax, byte [rax + 8]	      1584	convert.c	FUNCTION_59	IF_1
0x38c6	          0x83e001	                              and eax, 1	      1584	convert.c	FUNCTION_59	IF_1
0x38c9	            0x84c0	                             test al, al	      1584	convert.c	FUNCTION_59	IF_1
0x38cb	            0x743e	                            je 0x400394b	      1584	convert.c	FUNCTION_59	IF_1
0x38cd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1584	convert.c	FUNCTION_59	IF_1
0x38d1	         0xfb64009	               movzx eax, byte [rax + 9]	      1584	convert.c	FUNCTION_59	IF_1
0x38d5	            0x3c0d	                             cmp al, 0xd	      1584	convert.c	FUNCTION_59	IF_1
0x38d7	            0x7507	                           jne 0x4003920	      1584	convert.c	FUNCTION_59	IF_1
0x38d9	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1584	convert.c	FUNCTION_59	IF_1
0x38de	            0x752b	                           jne 0x400394b	      1584	convert.c	FUNCTION_59	IF_1
0x38e0	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1585	convert.c	FUNCTION_59	IF_1
0x38e4	        0x488d5001	                      lea rdx, [rax + 1]	      1585	convert.c	FUNCTION_59	IF_1
0x38e8	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1585	convert.c	FUNCTION_59	IF_1
0x38ec	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1585	convert.c	FUNCTION_59	IF_1
0x38f0	          0x4801c2	                            add rdx, rax	      1585	convert.c	FUNCTION_59	IF_1
0x38f3	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1585	convert.c	FUNCTION_59	IF_1
0x38f7	         0xfb64009	               movzx eax, byte [rax + 9]	      1585	convert.c	FUNCTION_59	IF_1
0x38fb	            0x8802	                      mov byte [rdx], al	      1585	convert.c	FUNCTION_59	IF_1
0x38fd	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1586	convert.c	FUNCTION_59	IF_1
0x3901	         0xfb65008	               movzx edx, byte [rax + 8]	      1586	convert.c	FUNCTION_59	IF_1
0x3905	          0x83e2fe	                     and edx, 0xfffffffe	      1586	convert.c	FUNCTION_59	IF_1
0x3908	          0x885008	                  mov byte [rax + 8], dl	      1586	convert.c	FUNCTION_59	IF_1
0x390b	      0x48837dc000	               cmp qword [rbp - 0x40], 0	      1590	convert.c	FUNCTION_59	IF_2
0x3910	            0x751f	                           jne 0x4003971	      1590	convert.c	FUNCTION_59	IF_2
0x3912	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1591	convert.c	FUNCTION_59	IF_2
0x3916	          0x488b00	                    mov rax, qword [rax]	      1591	convert.c	FUNCTION_59	IF_2
0x3919	        0x482b45e0	             sub rax, qword [rbp - 0x20]	      1591	convert.c	FUNCTION_59	IF_2
0x391d	          0x4889c2	                            mov rdx, rax	      1591	convert.c	FUNCTION_59	IF_2
0x3920	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1591	convert.c	FUNCTION_59	IF_2
0x3924	          0x488910	                    mov qword [rax], rdx	      1591	convert.c	FUNCTION_59	IF_2
0x3927	      0xb800000000	                              mov eax, 0	      1592	convert.c	FUNCTION_59	IF_2
0x392c	      0xe979010000	                           jmp 0x4003aea	      1592	convert.c	FUNCTION_59	IF_2
0x3931	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1595	convert.c	FUNCTION_59
0x3935	          0x488b00	                    mov rax, qword [rax]	      1595	convert.c	FUNCTION_59
0x3938	        0x488945f8	                mov qword [rbp - 8], rax	      1595	convert.c	FUNCTION_59
0x393c	      0x48837df800	                  cmp qword [rbp - 8], 0	      1596	convert.c	FUNCTION_59	IF_3
0x3941	            0x7513	                           jne 0x4003996	      1596	convert.c	FUNCTION_59	IF_3
0x3943	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1596	convert.c	FUNCTION_59	IF_3
0x3947	         0xfb64008	               movzx eax, byte [rax + 8]	      1596	convert.c	FUNCTION_59	IF_3
0x394b	          0x83e001	                              and eax, 1	      1596	convert.c	FUNCTION_59	IF_3
0x394e	            0x84c0	                             test al, al	      1596	convert.c	FUNCTION_59	IF_3
0x3950	     0xf844f010000	                            je 0x4003ae5	      1596	convert.c	FUNCTION_59	IF_3
0x3956	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1598	convert.c	FUNCTION_59	IF_3
0x395d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1600	convert.c	FUNCTION_59	IF_3	IF_4
0x3961	         0xfb64008	               movzx eax, byte [rax + 8]	      1600	convert.c	FUNCTION_59	IF_3	IF_4
0x3965	          0x83e001	                              and eax, 1	      1600	convert.c	FUNCTION_59	IF_3	IF_4
0x3968	            0x84c0	                             test al, al	      1600	convert.c	FUNCTION_59	IF_3	IF_4
0x396a	            0x7415	                            je 0x40039c1	      1600	convert.c	FUNCTION_59	IF_3	IF_4
0x396c	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1601	convert.c	FUNCTION_59	IF_3	IF_4
0x3973	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1602	convert.c	FUNCTION_59	IF_3	IF_4
0x3977	         0xfb65008	               movzx edx, byte [rax + 8]	      1602	convert.c	FUNCTION_59	IF_3	IF_4
0x397b	          0x83e2fe	                     and edx, 0xfffffffe	      1602	convert.c	FUNCTION_59	IF_3	IF_4
0x397e	          0x885008	                  mov byte [rax + 8], dl	      1602	convert.c	FUNCTION_59	IF_3	IF_4
0x3981	    0x48c745e80000	               mov qword [rbp - 0x18], 0	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3989	      0xe9a7000000	                           jmp 0x4003a75	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x398e	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1606	convert.c	FUNCTION_59	IF_3	FOR_1
0x3992	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1606	convert.c	FUNCTION_59	IF_3	FOR_1
0x3996	          0x4801d0	                            add rax, rdx	      1606	convert.c	FUNCTION_59	IF_3	FOR_1
0x3999	           0xfb600	                   movzx eax, byte [rax]	      1606	convert.c	FUNCTION_59	IF_3	FOR_1
0x399c	          0x8845db	               mov byte [rbp - 0x25], al	      1606	convert.c	FUNCTION_59	IF_3	FOR_1
0x399f	        0x807ddb0a	              cmp byte [rbp - 0x25], 0xa	      1608	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39a3	            0x7518	                           jne 0x40039fd	      1608	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39a5	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39a9	        0x488d5001	                      lea rdx, [rax + 1]	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39ad	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39b1	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39b5	          0x4801d0	                            add rax, rdx	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39b8	          0xc6000d	                     mov byte [rax], 0xd	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39bb	            0xeb1c	                           jmp 0x4003a19	      1609	convert.c	FUNCTION_59	IF_3	FOR_1	IF_5
0x39bd	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1610	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39c1	            0x7416	                            je 0x4003a19	      1610	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39c3	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39c7	        0x488d5001	                      lea rdx, [rax + 1]	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39cb	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39cf	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39d3	          0x4801d0	                            add rax, rdx	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39d6	          0xc6000d	                     mov byte [rax], 0xd	      1616	convert.c	FUNCTION_59	IF_3	FOR_1	ELSE_1	IF_6
0x39d9	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1625	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39dd	          0x488b00	                    mov rax, qword [rax]	      1625	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39e0	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1625	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39e4	            0x771b	                            ja 0x4003a41	      1625	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1626	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39ea	         0xfb65008	               movzx edx, byte [rax + 8]	      1626	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39ee	          0x83ca01	                               or edx, 1	      1626	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39f1	          0x885008	                  mov byte [rax + 8], dl	      1626	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39f4	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1627	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39f8	         0xfb655db	            movzx edx, byte [rbp - 0x25]	      1627	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39fc	          0x885009	                  mov byte [rax + 9], dl	      1627	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x39ff	            0xeb2f	                           jmp 0x4003a70	      1628	convert.c	FUNCTION_59	IF_3	FOR_1	IF_7
0x3a01	        0x807ddb0d	              cmp byte [rbp - 0x25], 0xd	      1631	convert.c	FUNCTION_59	IF_3	FOR_1	IF_8
0x3a05	            0x7509	                           jne 0x4003a50	      1631	convert.c	FUNCTION_59	IF_3	FOR_1	IF_8
0x3a07	    0xc745dc010000	               mov dword [rbp - 0x24], 1	      1632	convert.c	FUNCTION_59	IF_3	FOR_1	IF_8
0x3a0e	            0xeb20	                           jmp 0x4003a70	      1633	convert.c	FUNCTION_59	IF_3	FOR_1	IF_8
0x3a10	    0xc745dc000000	               mov dword [rbp - 0x24], 0	      1636	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a17	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a1b	        0x488d5001	                      lea rdx, [rax + 1]	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a1f	        0x488955e0	             mov qword [rbp - 0x20], rdx	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a23	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a27	          0x4801c2	                            add rdx, rax	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a2a	         0xfb645db	            movzx eax, byte [rbp - 0x25]	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a2e	            0x8802	                      mov byte [rdx], al	      1637	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a30	      0x488345e801	               add qword [rbp - 0x18], 1	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a35	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a39	          0x488b00	                    mov rax, qword [rax]	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a3c	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a40	            0x760e	                           jbe 0x4003a90	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a42	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a46	        0x483b45f8	                cmp rax, qword [rbp - 8]	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a4a	     0xf823effffff	                            jb 0x40039ce	      1605	convert.c	FUNCTION_59	IF_3	FOR_1
0x3a50	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1640	convert.c	FUNCTION_59	IF_3
0x3a54	          0x488b00	                    mov rax, qword [rax]	      1640	convert.c	FUNCTION_59	IF_3
0x3a57	        0x482b45e0	             sub rax, qword [rbp - 0x20]	      1640	convert.c	FUNCTION_59	IF_3
0x3a5b	          0x4889c2	                            mov rdx, rax	      1640	convert.c	FUNCTION_59	IF_3
0x3a5e	        0x488b45a8	             mov rax, qword [rbp - 0x58]	      1640	convert.c	FUNCTION_59	IF_3
0x3a62	          0x488910	                    mov qword [rax], rdx	      1640	convert.c	FUNCTION_59	IF_3
0x3a65	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1641	convert.c	FUNCTION_59	IF_3
0x3a69	          0x488b00	                    mov rax, qword [rax]	      1641	convert.c	FUNCTION_59	IF_3
0x3a6c	        0x482b45e8	             sub rax, qword [rbp - 0x18]	      1641	convert.c	FUNCTION_59	IF_3
0x3a70	          0x4889c2	                            mov rdx, rax	      1641	convert.c	FUNCTION_59	IF_3
0x3a73	        0x488b45b8	             mov rax, qword [rbp - 0x48]	      1641	convert.c	FUNCTION_59	IF_3
0x3a77	          0x488910	                    mov qword [rax], rdx	      1641	convert.c	FUNCTION_59	IF_3
0x3a7a	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a7e	         0xfb64008	               movzx eax, byte [rax + 8]	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a82	          0x83e001	                              and eax, 1	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a85	            0x84c0	                             test al, al	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a87	            0x751c	                           jne 0x4003ae5	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a89	        0x837ddc00	               cmp dword [rbp - 0x24], 0	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a8d	            0x7416	                            je 0x4003ae5	      1643	convert.c	FUNCTION_59	IF_3	IF_9
0x3a8f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1644	convert.c	FUNCTION_59	IF_3	IF_9
0x3a93	         0xfb65008	               movzx edx, byte [rax + 8]	      1644	convert.c	FUNCTION_59	IF_3	IF_9
0x3a97	          0x83ca01	                               or edx, 1	      1644	convert.c	FUNCTION_59	IF_3	IF_9
0x3a9a	          0x885008	                  mov byte [rax + 8], dl	      1644	convert.c	FUNCTION_59	IF_3	IF_9
0x3a9d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1645	convert.c	FUNCTION_59	IF_3	IF_9
0x3aa1	        0xc640090d	                 mov byte [rax + 9], 0xd	      1645	convert.c	FUNCTION_59	IF_3	IF_9
0x3aa5	      0xb800000000	                              mov eax, 0	      1648	convert.c	FUNCTION_59
0x3aaa	              0x5d	                                 pop rbp	      1649	convert.c	FUNCTION_59
0x3aab	              0xc3	                                     ret	      1649	convert.c	FUNCTION_59
stream_filter	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	19
0x4481	              0x55	                                push rbp	      1963	convert.c	FUNCTION_72
0x4482	          0x4889e5	                            mov rbp, rsp	      1963	convert.c	FUNCTION_72
0x4485	        0x4883ec30	                           sub rsp, 0x30	      1963	convert.c	FUNCTION_72
0x4489	        0x48897df8	                mov qword [rbp - 8], rdi	      1963	convert.c	FUNCTION_72
0x448d	        0x488975f0	             mov qword [rbp - 0x10], rsi	      1963	convert.c	FUNCTION_72
0x4491	        0x488955e8	             mov qword [rbp - 0x18], rdx	      1963	convert.c	FUNCTION_72
0x4495	        0x48894de0	             mov qword [rbp - 0x20], rcx	      1963	convert.c	FUNCTION_72
0x4499	        0x4c8945d8	              mov qword [rbp - 0x28], r8	      1963	convert.c	FUNCTION_72
0x449d	        0x488b45f8	                mov rax, qword [rbp - 8]	      1964	convert.c	FUNCTION_72	CALL_1
0x44a1	          0x488b00	                    mov rax, qword [rax]	      1964	convert.c	FUNCTION_72	CALL_1
0x44a4	          0x488b00	                    mov rax, qword [rax]	      1964	convert.c	FUNCTION_72	CALL_1
0x44a7	        0x4c8b45d8	              mov r8, qword [rbp - 0x28]	      1964	convert.c	FUNCTION_72	CALL_1
0x44ab	        0x488b4de0	             mov rcx, qword [rbp - 0x20]	      1964	convert.c	FUNCTION_72	CALL_1
0x44af	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	      1964	convert.c	FUNCTION_72	CALL_1
0x44b3	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	      1964	convert.c	FUNCTION_72	CALL_1
0x44b7	        0x488b7df8	                mov rdi, qword [rbp - 8]	      1964	convert.c	FUNCTION_72	CALL_1
0x44bb	            0xffd0	                                call rax	      1964	convert.c	FUNCTION_72	CALL_1
0x44bd	              0xc9	                                   leave	      1965	convert.c	FUNCTION_72
0x44be	              0xc3	                                     ret	      1965	convert.c	FUNCTION_72
lf_to_crlf_filter	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	12
0x3ac7	              0x55	                                push rbp	      1662	convert.c	FUNCTION_61
0x3ac8	          0x4889e5	                            mov rbp, rsp	      1662	convert.c	FUNCTION_61
0x3acb	        0x4883ec10	                           sub rsp, 0x10	      1662	convert.c	FUNCTION_61
0x3acf	      0xbe10000000	                           mov esi, 0x10	      1663	convert.c	FUNCTION_61	CALL_1
0x3ad4	      0xbf01000000	                              mov edi, 1	      1663	convert.c	FUNCTION_61	CALL_1
0x3ad9	      0xe800000000	                          call 0x4003b1e	      1663	convert.c	FUNCTION_61	CALL_1
0x3ade	        0x488945f8	                mov qword [rbp - 8], rax	      1663	convert.c	FUNCTION_61	CALL_1
0x3ae2	        0x488b45f8	                mov rax, qword [rbp - 8]	      1665	convert.c	FUNCTION_61
0x3ae6	    0x48c700000000	                      mov qword [rax], 0	      1665	convert.c	FUNCTION_61
0x3aed	        0x488b45f8	                mov rax, qword [rbp - 8]	      1666	convert.c	FUNCTION_61
0x3af1	              0xc9	                                   leave	      1667	convert.c	FUNCTION_61
0x3af2	              0xc3	                                     ret	      1667	convert.c	FUNCTION_61
lf_to_crlf_free_fn	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	10
0x3aac	              0x55	                                push rbp	      1652	convert.c	FUNCTION_60
0x3aad	          0x4889e5	                            mov rbp, rsp	      1652	convert.c	FUNCTION_60
0x3ab0	        0x4883ec10	                           sub rsp, 0x10	      1652	convert.c	FUNCTION_60
0x3ab4	        0x48897df8	                mov qword [rbp - 8], rdi	      1652	convert.c	FUNCTION_60
0x3ab8	        0x488b45f8	                mov rax, qword [rbp - 8]	      1653	convert.c	FUNCTION_60	CALL_1
0x3abc	          0x4889c7	                            mov rdi, rax	      1653	convert.c	FUNCTION_60	CALL_1
0x3abf	      0xe800000000	                          call 0x4003b04	      1653	convert.c	FUNCTION_60	CALL_1
0x3ac4	              0x90	                                     nop	      1654	convert.c	FUNCTION_60
0x3ac5	              0xc9	                                   leave	      1654	convert.c	FUNCTION_60
0x3ac6	              0xc3	                                     ret	      1654	convert.c	FUNCTION_60
strbuf_swap	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	39
0x61	              0x55	                                push rbp	       126	strbuf.h	FUNCTION_1
0x62	          0x4889e5	                            mov rbp, rsp	       126	strbuf.h	FUNCTION_1
0x65	        0x4883ec40	                           sub rsp, 0x40	       126	strbuf.h	FUNCTION_1
0x69	        0x48897dc8	             mov qword [rbp - 0x38], rdi	       126	strbuf.h	FUNCTION_1
0x6d	        0x488975c0	             mov qword [rbp - 0x40], rsi	       126	strbuf.h	FUNCTION_1
0x71	    0x64488b042528	                mov rax, qword fs:[0x28]	       126	strbuf.h	FUNCTION_1
0x7a	        0x488945f8	                mov qword [rbp - 8], rax	       126	strbuf.h	FUNCTION_1
0x7e	            0x31c0	                            xor eax, eax	       126	strbuf.h	FUNCTION_1
0x80	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       127	strbuf.h	FUNCTION_1	CALL_1
0x84	        0x488945d0	             mov qword [rbp - 0x30], rax	       127	strbuf.h	FUNCTION_1	CALL_1
0x88	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       127	strbuf.h	FUNCTION_1	CALL_1
0x8c	        0x488945d8	             mov qword [rbp - 0x28], rax	       127	strbuf.h	FUNCTION_1	CALL_1
0x90	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_1	CALL_1
0x94	          0x488b10	                    mov rdx, qword [rax]	       127	strbuf.h	FUNCTION_1	CALL_1
0x97	        0x488955e0	             mov qword [rbp - 0x20], rdx	       127	strbuf.h	FUNCTION_1	CALL_1
0x9b	        0x488b5008	                mov rdx, qword [rax + 8]	       127	strbuf.h	FUNCTION_1	CALL_1
0x9f	        0x488955e8	             mov qword [rbp - 0x18], rdx	       127	strbuf.h	FUNCTION_1	CALL_1
0xa3	        0x488b4010	            mov rax, qword [rax + 0x10] 	       127	strbuf.h	FUNCTION_1	CALL_1
0xa7	        0x488945f0	             mov qword [rbp - 0x10], rax	       127	strbuf.h	FUNCTION_1	CALL_1
0xab	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_1	CALL_1
0xaf	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       127	strbuf.h	FUNCTION_1	CALL_1
0xb3	      0xba18000000	                           mov edx, 0x18	       127	strbuf.h	FUNCTION_1	CALL_1
0xb8	          0x4889ce	                            mov rsi, rcx	       127	strbuf.h	FUNCTION_1	CALL_1
0xbb	          0x4889c7	                            mov rdi, rax	       127	strbuf.h	FUNCTION_1	CALL_1
0xbe	      0xe800000000	                          call 0x4000103	       127	strbuf.h	FUNCTION_1	CALL_1
0xc3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       127	strbuf.h	FUNCTION_1	CALL_1
0xc7	        0x488b55e0	             mov rdx, qword [rbp - 0x20]	       127	strbuf.h	FUNCTION_1	CALL_1
0xcb	          0x488910	                    mov qword [rax], rdx	       127	strbuf.h	FUNCTION_1	CALL_1
0xce	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	       127	strbuf.h	FUNCTION_1	CALL_1
0xd2	        0x48895008	                mov qword [rax + 8], rdx	       127	strbuf.h	FUNCTION_1	CALL_1
0xd6	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	       127	strbuf.h	FUNCTION_1	CALL_1
0xda	        0x48895010	             mov qword [rax + 0x10], rdx	       127	strbuf.h	FUNCTION_1	CALL_1
0xde	              0x90	                                     nop	       128	strbuf.h	FUNCTION_1
0xdf	        0x488b45f8	                mov rax, qword [rbp - 8]	       128	strbuf.h	FUNCTION_1
0xe3	    0x644833042528	                xor rax, qword fs:[0x28]	       128	strbuf.h	FUNCTION_1
0xec	            0x7405	                            je 0x4000133	       128	strbuf.h	FUNCTION_1
0xee	      0xe800000000	                          call 0x4000133	       128	strbuf.h	FUNCTION_1
0xf3	              0xc9	                                   leave	       128	strbuf.h	FUNCTION_1
0xf4	              0xc3	                                     ret	       128	strbuf.h	FUNCTION_1
ident_filter	CALL,4:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	31
0x42d5	              0x55	                                push rbp	      1910	convert.c	FUNCTION_69
0x42d6	          0x4889e5	                            mov rbp, rsp	      1910	convert.c	FUNCTION_69
0x42d9	        0x4883ec20	                           sub rsp, 0x20	      1910	convert.c	FUNCTION_69
0x42dd	        0x48897de8	             mov qword [rbp - 0x18], rdi	      1910	convert.c	FUNCTION_69
0x42e1	      0xbf58000000	                           mov edi, 0x58	      1911	convert.c	FUNCTION_69	CALL_1
0x42e6	      0xe800000000	                          call 0x400432b	      1911	convert.c	FUNCTION_69	CALL_1
0x42eb	        0x488945f8	                mov qword [rbp - 8], rax	      1911	convert.c	FUNCTION_69	CALL_1
0x42ef	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1913	convert.c	FUNCTION_69	CALL_2
0x42f3	          0x4889c7	                            mov rdi, rax	      1913	convert.c	FUNCTION_69	CALL_2
0x42f6	      0xe800000000	                          call 0x400433b	      1913	convert.c	FUNCTION_69	CALL_2
0x42fb	          0x4889c2	                            mov rdx, rax	      1913	convert.c	FUNCTION_69	CALL_2
0x42fe	        0x488b45f8	                mov rax, qword [rbp - 8]	      1913	convert.c	FUNCTION_69	CALL_2
0x4302	        0x4883c024	                           add rax, 0x24	      1913	convert.c	FUNCTION_69	CALL_2
0x4306	          0x4889d1	                            mov rcx, rdx	      1913	convert.c	FUNCTION_69	CALL_2
0x4309	      0xba00000000	                              mov edx, 0	      1913	convert.c	FUNCTION_69	CALL_2
0x430e	      0xbe2d000000	                           mov esi, 0x2d	      1913	convert.c	FUNCTION_69	CALL_2
0x4313	          0x4889c7	                            mov rdi, rax	      1913	convert.c	FUNCTION_69	CALL_2
0x4316	      0xb800000000	                              mov eax, 0	      1913	convert.c	FUNCTION_69	CALL_2
0x431b	      0xe800000000	                          call 0x4004360	      1913	convert.c	FUNCTION_69	CALL_2
0x4320	        0x488b45f8	                mov rax, qword [rbp - 8]	      1915	convert.c	FUNCTION_69	CALL_4
0x4324	        0x4883c008	                              add rax, 8	      1915	convert.c	FUNCTION_69	CALL_4
0x4328	      0xbe00000000	                              mov esi, 0	      1915	convert.c	FUNCTION_69	CALL_4
0x432d	          0x4889c7	                            mov rdi, rax	      1915	convert.c	FUNCTION_69	CALL_4
0x4330	      0xe800000000	                          call 0x4004375	      1915	convert.c	FUNCTION_69	CALL_4
0x4335	        0x488b45f8	                mov rax, qword [rbp - 8]	      1916	convert.c	FUNCTION_69
0x4339	    0x48c700000000	                      mov qword [rax], 0	      1916	convert.c	FUNCTION_69
0x4340	        0x488b45f8	                mov rax, qword [rbp - 8]	      1917	convert.c	FUNCTION_69
0x4344	    0xc74020000000	               mov dword [rax + 0x20], 0	      1917	convert.c	FUNCTION_69
0x434b	        0x488b45f8	                mov rax, qword [rbp - 8]	      1918	convert.c	FUNCTION_69
0x434f	              0xc9	                                   leave	      1919	convert.c	FUNCTION_69
0x4350	              0xc3	                                     ret	      1919	convert.c	FUNCTION_69
is_null_stream_filter	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	8
0x387e	              0x55	                                push rbp	      1557	convert.c	FUNCTION_58
0x387f	          0x4889e5	                            mov rbp, rsp	      1557	convert.c	FUNCTION_58
0x3882	        0x48897df8	                mov qword [rbp - 8], rdi	      1557	convert.c	FUNCTION_58
0x3886	    0x48817df80000	                  cmp qword [rbp - 8], 0	      1558	convert.c	FUNCTION_58
0x388e	           0xf94c0	                                 sete al	      1558	convert.c	FUNCTION_58
0x3891	           0xfb6c0	                           movzx eax, al	      1558	convert.c	FUNCTION_58
0x3894	              0x5d	                                 pop rbp	      1559	convert.c	FUNCTION_58
0x3895	              0xc3	                                     ret	      1559	convert.c	FUNCTION_58
gather_stats	CALL,1:WHILE,0:functions,0:IF,6:SWITCH,1:ELSE,3:DO,0:FOR,1	111
0x2c4	              0x55	                                push rbp	        46	convert.c	IF_6	FUNCTION_13
0x2c5	          0x4889e5	                            mov rbp, rsp	        46	convert.c	IF_6	FUNCTION_13
0x2c8	        0x4883ec30	                           sub rsp, 0x30	        46	convert.c	IF_6	FUNCTION_13
0x2cc	        0x48897de8	             mov qword [rbp - 0x18], rdi	        46	convert.c	IF_6	FUNCTION_13
0x2d0	        0x488975e0	             mov qword [rbp - 0x20], rsi	        46	convert.c	IF_6	FUNCTION_13
0x2d4	        0x488955d8	             mov qword [rbp - 0x28], rdx	        46	convert.c	IF_6	FUNCTION_13
0x2d8	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        49	convert.c	IF_6	FUNCTION_13	CALL_1
0x2dc	      0xba18000000	                           mov edx, 0x18	        49	convert.c	IF_6	FUNCTION_13	CALL_1
0x2e1	      0xbe00000000	                              mov esi, 0	        49	convert.c	IF_6	FUNCTION_13	CALL_1
0x2e6	          0x4889c7	                            mov rdi, rax	        49	convert.c	IF_6	FUNCTION_13	CALL_1
0x2e9	      0xe800000000	                          call 0x400032e	        49	convert.c	IF_6	FUNCTION_13	CALL_1
0x2ee	    0x48c745f80000	                  mov qword [rbp - 8], 0	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x2f6	      0xe904010000	                           jmp 0x400043f	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x2fb	        0x488b55e8	             mov rdx, qword [rbp - 0x18]	        52	convert.c	IF_6	FUNCTION_13	FOR_1
0x2ff	        0x488b45f8	                mov rax, qword [rbp - 8]	        52	convert.c	IF_6	FUNCTION_13	FOR_1
0x303	          0x4801d0	                            add rax, rdx	        52	convert.c	IF_6	FUNCTION_13	FOR_1
0x306	           0xfb600	                   movzx eax, byte [rax]	        52	convert.c	IF_6	FUNCTION_13	FOR_1
0x309	          0x8845f7	                  mov byte [rbp - 9], al	        52	convert.c	IF_6	FUNCTION_13	FOR_1
0x30c	        0x807df70d	                 cmp byte [rbp - 9], 0xd	        53	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1
0x310	            0x7555	                           jne 0x40003a7	        53	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1
0x312	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x316	        0x4883c001	                              add rax, 1	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x31a	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x31e	            0x7331	                           jae 0x4000391	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x320	        0x488b45f8	                mov rax, qword [rbp - 8]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x324	        0x488d5001	                      lea rdx, [rax + 1]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x328	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x32c	          0x4801d0	                            add rax, rdx	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x32f	           0xfb600	                   movzx eax, byte [rax]	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x332	            0x3c0a	                             cmp al, 0xa	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x334	            0x751b	                           jne 0x4000391	        54	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x336	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x33a	          0x8b400c	              mov eax, dword [rax + 0xc]	        55	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x33d	          0x8d5001	                      lea edx, [rax + 1]	        55	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x340	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        55	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x344	          0x89500c	              mov dword [rax + 0xc], edx	        55	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x347	      0x488345f801	                  add qword [rbp - 8], 1	        56	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	IF_2
0x34c	      0xe9a9000000	                           jmp 0x400043a	        59	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x351	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        58	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x355	          0x8b4004	                mov eax, dword [rax + 4]	        58	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x358	          0x8d5001	                      lea edx, [rax + 1]	        58	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x35b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        58	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x35f	          0x895004	                mov dword [rax + 4], edx	        58	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x362	      0xe993000000	                           jmp 0x400043a	        59	convert.c	IF_6	FUNCTION_13	FOR_1	IF_1	ELSE_1
0x367	        0x807df70a	                 cmp byte [rbp - 9], 0xa	        61	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x36b	            0x7513	                           jne 0x40003c0	        61	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x36d	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        62	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x371	          0x8b4008	                mov eax, dword [rax + 8]	        62	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x374	          0x8d5001	                      lea edx, [rax + 1]	        62	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x377	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        62	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x37b	          0x895008	                mov dword [rax + 8], edx	        62	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x37e	            0xeb7a	                           jmp 0x400043a	        63	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_1	IF_3
0x380	        0x807df77f	                cmp byte [rbp - 9], 0x7f	        65	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x384	            0x7513	                           jne 0x40003d9	        65	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x386	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x38a	          0x8b4014	            mov eax, dword [rax + 0x14] 	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x38d	          0x8d5001	                      lea edx, [rax + 1]	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x390	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x394	          0x895014	             mov dword [rax + 0x14], edx	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x397	            0xeb61	                           jmp 0x400043a	        67	convert.c	IF_6	FUNCTION_13	FOR_1	IF_4
0x399	        0x807df71f	                cmp byte [rbp - 9], 0x1f	        68	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5
0x39d	            0x774a	                            ja 0x4000429	        68	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5
0x39f	         0xfb645f7	               movzx eax, byte [rbp - 9]	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3a3	          0x83f81b	                           cmp eax, 0x1b	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3a6	            0x772e	                            ja 0x4000416	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3a8	            0x89c0	                            mov eax, eax	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3aa	    0x488b04c50000	                  mov rax, qword [rax*8]	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3b2	            0xffe0	                                 jmp rax	        69	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3b4	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        72	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3b8	          0x8b4010	            mov eax, dword [rax + 0x10] 	        72	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3bb	          0x8d5001	                      lea edx, [rax + 1]	        72	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3be	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        72	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3c2	          0x895010	             mov dword [rax + 0x10], edx	        72	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3c5	            0xeb33	                           jmp 0x400043a	        73	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3c7	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        75	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3cb	            0x8b00	                    mov eax, dword [rax]	        75	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3cd	          0x8d5001	                      lea edx, [rax + 1]	        75	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3d0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        75	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3d4	            0x8910	                    mov dword [rax], edx	        75	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3d6	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3da	          0x8b4014	            mov eax, dword [rax + 0x14] 	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3dd	          0x8d5001	                      lea edx, [rax + 1]	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3e0	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3e4	          0x895014	             mov dword [rax + 0x14], edx	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3e7	            0xeb11	                           jmp 0x400043a	        78	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_2	IF_5	SWITCH_1
0x3e9	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        82	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_3
0x3ed	          0x8b4010	            mov eax, dword [rax + 0x10] 	        82	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_3
0x3f0	          0x8d5001	                      lea edx, [rax + 1]	        82	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_3
0x3f3	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        82	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_3
0x3f7	          0x895010	             mov dword [rax + 0x10], edx	        82	convert.c	IF_6	FUNCTION_13	FOR_1	ELSE_3
0x3fa	      0x488345f801	                  add qword [rbp - 8], 1	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x3ff	        0x488b45f8	                mov rax, qword [rbp - 8]	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x403	        0x483b45e0	             cmp rax, qword [rbp - 0x20]	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x407	     0xf82eefeffff	                            jb 0x400033b	        51	convert.c	IF_6	FUNCTION_13	FOR_1
0x40d	      0x48837de000	               cmp qword [rbp - 0x20], 0	        86	convert.c	IF_6	FUNCTION_13
0x412	            0x7427	                            je 0x400047b	        86	convert.c	IF_6	FUNCTION_13
0x414	        0x488b45e0	             mov rax, qword [rbp - 0x20]	        86	convert.c	IF_6	FUNCTION_13
0x418	        0x488d50ff	                      lea rdx, [rax - 1]	        86	convert.c	IF_6	FUNCTION_13
0x41c	        0x488b45e8	             mov rax, qword [rbp - 0x18]	        86	convert.c	IF_6	FUNCTION_13
0x420	          0x4801d0	                            add rax, rdx	        86	convert.c	IF_6	FUNCTION_13
0x423	           0xfb600	                   movzx eax, byte [rax]	        86	convert.c	IF_6	FUNCTION_13
0x426	            0x3c1a	                            cmp al, 0x1a	        86	convert.c	IF_6	FUNCTION_13
0x428	            0x7511	                           jne 0x400047b	        86	convert.c	IF_6	FUNCTION_13
0x42a	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        87	convert.c	FUNCTION_13
0x42e	          0x8b4014	            mov eax, dword [rax + 0x14] 	        87	convert.c	FUNCTION_13
0x431	          0x8d50ff	                      lea edx, [rax - 1]	        87	convert.c	FUNCTION_13
0x434	        0x488b45d8	             mov rax, qword [rbp - 0x28]	        87	convert.c	FUNCTION_13
0x438	          0x895014	             mov dword [rax + 0x14], edx	        87	convert.c	FUNCTION_13
0x43b	              0x90	                                     nop	        88	convert.c	FUNCTION_13
0x43c	              0xc9	                                   leave	        88	convert.c	FUNCTION_13
0x43d	              0xc3	                                     ret	        88	convert.c	FUNCTION_13
encode_to_worktree	CALL,3:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	58
0x1144	              0x55	                                push rbp	       481	convert.c	FUNCTION_28
0x1145	          0x4889e5	                            mov rbp, rsp	       481	convert.c	FUNCTION_28
0x1148	        0x4883ec50	                           sub rsp, 0x50	       481	convert.c	FUNCTION_28
0x114c	        0x48897dd8	             mov qword [rbp - 0x28], rdi	       481	convert.c	FUNCTION_28
0x1150	        0x488975d0	             mov qword [rbp - 0x30], rsi	       481	convert.c	FUNCTION_28
0x1154	        0x488955c8	             mov qword [rbp - 0x38], rdx	       481	convert.c	FUNCTION_28
0x1158	        0x48894dc0	             mov qword [rbp - 0x40], rcx	       481	convert.c	FUNCTION_28
0x115c	        0x4c8945b8	              mov qword [rbp - 0x48], r8	       481	convert.c	FUNCTION_28
0x1160	    0x64488b042528	                mov rax, qword fs:[0x28]	       481	convert.c	FUNCTION_28
0x1169	        0x488945f8	                mov qword [rbp - 8], rax	       481	convert.c	FUNCTION_28
0x116d	            0x31c0	                            xor eax, eax	       481	convert.c	FUNCTION_28
0x116f	      0x48837db800	               cmp qword [rbp - 0x48], 0	       489	convert.c	FUNCTION_28	IF_1
0x1174	            0x740e	                            je 0x40011c4	       489	convert.c	FUNCTION_28	IF_1
0x1176	      0x48837dd000	               cmp qword [rbp - 0x30], 0	       489	convert.c	FUNCTION_28	IF_1
0x117b	            0x7411	                            je 0x40011ce	       489	convert.c	FUNCTION_28	IF_1
0x117d	      0x48837dc800	               cmp qword [rbp - 0x38], 0	       489	convert.c	FUNCTION_28	IF_1
0x1182	            0x750a	                           jne 0x40011ce	       489	convert.c	FUNCTION_28	IF_1
0x1184	      0xb800000000	                              mov eax, 0	       490	convert.c	FUNCTION_28	IF_1
0x1189	      0xe982000000	                           jmp 0x4001250	       490	convert.c	FUNCTION_28	IF_1
0x118e	    0x488b0d000000	            mov rcx, qword [0x040011d5] 	       492	convert.c	FUNCTION_28	CALL_1
0x1195	        0x488b45c8	             mov rax, qword [rbp - 0x38]	       492	convert.c	FUNCTION_28	CALL_1
0x1199	            0x89c7	                            mov edi, eax	       492	convert.c	FUNCTION_28	CALL_1
0x119b	        0x488d75ec	                   lea rsi, [rbp - 0x14]	       492	convert.c	FUNCTION_28	CALL_1
0x119f	        0x488b55b8	             mov rdx, qword [rbp - 0x48]	       492	convert.c	FUNCTION_28	CALL_1
0x11a3	        0x488b45d0	             mov rax, qword [rbp - 0x30]	       492	convert.c	FUNCTION_28	CALL_1
0x11a7	          0x4989f0	                             mov r8, rsi	       492	convert.c	FUNCTION_28	CALL_1
0x11aa	            0x89fe	                            mov esi, edi	       492	convert.c	FUNCTION_28	CALL_1
0x11ac	          0x4889c7	                            mov rdi, rax	       492	convert.c	FUNCTION_28	CALL_1
0x11af	      0xe800000000	                          call 0x40011f4	       492	convert.c	FUNCTION_28	CALL_1
0x11b4	        0x488945f0	             mov qword [rbp - 0x10], rax	       492	convert.c	FUNCTION_28	CALL_1
0x11b8	      0x48837df000	               cmp qword [rbp - 0x10], 0	       494	convert.c	FUNCTION_28	IF_2
0x11bd	            0x752d	                           jne 0x400122c	       494	convert.c	FUNCTION_28	IF_2
0x11bf	    0x488b15000000	            mov rdx, qword [0x04001206] 	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11c6	        0x488b4db8	             mov rcx, qword [rbp - 0x48]	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11ca	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11ce	          0x4889c6	                            mov rsi, rax	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11d1	      0xbf00000000	                              mov edi, 0	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11d6	      0xb800000000	                              mov eax, 0	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11db	      0xe800000000	                          call 0x4001220	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11e0	      0xe81beeffff	                    call sym.const_error	       495	convert.c	FUNCTION_28	IF_2	CALL_2
0x11e5	      0xb800000000	                              mov eax, 0	       497	convert.c	FUNCTION_28	IF_2
0x11ea	            0xeb24	                           jmp 0x4001250	       497	convert.c	FUNCTION_28	IF_2
0x11ec	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       500	convert.c	FUNCTION_28	CALL_3
0x11ef	          0x83c001	                              add eax, 1	       500	convert.c	FUNCTION_28	CALL_3
0x11f2	          0x4863c8	                         movsxd rcx, eax	       500	convert.c	FUNCTION_28	CALL_3
0x11f5	          0x8b45ec	             mov eax, dword [rbp - 0x14]	       500	convert.c	FUNCTION_28	CALL_3
0x11f8	          0x4863d0	                         movsxd rdx, eax	       500	convert.c	FUNCTION_28	CALL_3
0x11fb	        0x488b75f0	             mov rsi, qword [rbp - 0x10]	       500	convert.c	FUNCTION_28	CALL_3
0x11ff	        0x488b45c0	             mov rax, qword [rbp - 0x40]	       500	convert.c	FUNCTION_28	CALL_3
0x1203	          0x4889c7	                            mov rdi, rax	       500	convert.c	FUNCTION_28	CALL_3
0x1206	      0xe800000000	                          call 0x400124b	       500	convert.c	FUNCTION_28	CALL_3
0x120b	      0xb801000000	                              mov eax, 1	       501	convert.c	FUNCTION_28
0x1210	        0x488b7df8	                mov rdi, qword [rbp - 8]	       502	convert.c	FUNCTION_28
0x1214	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       502	convert.c	FUNCTION_28
0x121d	            0x7405	                            je 0x4001264	       502	convert.c	FUNCTION_28
0x121f	      0xe800000000	                          call 0x4001264	       502	convert.c	FUNCTION_28
0x1224	              0xc9	                                   leave	       502	convert.c	FUNCTION_28
0x1225	              0xc3	                                     ret	       502	convert.c	FUNCTION_28
handle_filter_error	CALL,5:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,2:DO,0:FOR,0	47
0x1c05	              0x55	                                push rbp	       778	convert.c	FUNCTION_34
0x1c06	          0x4889e5	                            mov rbp, rsp	       778	convert.c	FUNCTION_34
0x1c09	        0x4883ec20	                           sub rsp, 0x20	       778	convert.c	FUNCTION_34
0x1c0d	        0x48897df8	                mov qword [rbp - 8], rdi	       778	convert.c	FUNCTION_34
0x1c11	        0x488975f0	             mov qword [rbp - 0x10], rsi	       778	convert.c	FUNCTION_34
0x1c15	          0x8955ec	             mov dword [rbp - 0x14], edx	       778	convert.c	FUNCTION_34
0x1c18	        0x488b45f8	                mov rax, qword [rbp - 8]	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c1c	        0x488b4010	            mov rax, qword [rax + 0x10] 	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c20	      0xbe00000000	                              mov esi, 0	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c25	          0x4889c7	                            mov rdi, rax	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c28	      0xe800000000	                          call 0x4001c6d	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c2d	            0x85c0	                           test eax, eax	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c2f	            0x7472	                            je 0x4001ce3	       779	convert.c	FUNCTION_34	IF_1	CALL_1
0x1c31	        0x488b45f8	                mov rax, qword [rbp - 8]	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c35	        0x488b4010	            mov rax, qword [rax + 0x10] 	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c39	      0xbe00000000	                              mov esi, 0	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c3e	          0x4889c7	                            mov rdi, rax	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c41	      0xe800000000	                          call 0x4001c86	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c46	            0x85c0	                           test eax, eax	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c48	            0x751d	                           jne 0x4001ca7	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c4a	        0x837dec00	               cmp dword [rbp - 0x14], 0	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c4e	            0x7417	                            je 0x4001ca7	       781	convert.c	FUNCTION_34	ELSE_1	IF_2	CALL_2
0x1c50	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c54	          0x8b4078	            mov eax, dword [rax + 0x78] 	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c57	          0x8b55ec	             mov edx, dword [rbp - 0x14]	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c5a	            0xf7d2	                                 not edx	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c5c	            0x21c2	                            and edx, eax	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c5e	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c62	          0x895078	             mov dword [rax + 0x78], edx	       787	convert.c	FUNCTION_34	ELSE_1	IF_2
0x1c65	            0xeb3c	                           jmp 0x4001ce3	       797	convert.c	FUNCTION_34
0x1c67	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c6b	        0x488b4010	            mov rax, qword [rax + 0x10] 	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c6f	          0x4889c6	                            mov rsi, rax	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c72	      0xbf00000000	                              mov edi, 0	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c77	      0xb800000000	                              mov eax, 0	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c7c	      0xe800000000	                          call 0x4001cc1	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c81	      0xe87ae3ffff	                    call sym.const_error	       793	convert.c	FUNCTION_34	ELSE_2	CALL_3
0x1c86	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       794	convert.c	FUNCTION_34	ELSE_2	CALL_4
0x1c8a	          0x4889c6	                            mov rsi, rax	       794	convert.c	FUNCTION_34	ELSE_2	CALL_4
0x1c8d	      0xbf00000000	                              mov edi, 0	       794	convert.c	FUNCTION_34	ELSE_2	CALL_4
0x1c92	      0xe800000000	                          call 0x4001cd7	       794	convert.c	FUNCTION_34	ELSE_2	CALL_4
0x1c97	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       795	convert.c	FUNCTION_34	ELSE_2	CALL_5
0x1c9b	          0x4889c7	                            mov rdi, rax	       795	convert.c	FUNCTION_34	ELSE_2	CALL_5
0x1c9e	      0xe800000000	                          call 0x4001ce3	       795	convert.c	FUNCTION_34	ELSE_2	CALL_5
0x1ca3	              0x90	                                     nop	       797	convert.c	FUNCTION_34
0x1ca4	              0xc9	                                   leave	       797	convert.c	FUNCTION_34
0x1ca5	              0xc3	                                     ret	       797	convert.c	FUNCTION_34
read_convert_config	CALL,12:WHILE,0:functions,0:IF,7:SWITCH,0:ELSE,0:DO,0:FOR,1	138
0x241a	              0x55	                                push rbp	      1001	convert.c	FUNCTION_38
0x241b	          0x4889e5	                            mov rbp, rsp	      1001	convert.c	FUNCTION_38
0x241e	        0x4883ec50	                           sub rsp, 0x50	      1001	convert.c	FUNCTION_38
0x2422	        0x48897dc8	             mov qword [rbp - 0x38], rdi	      1001	convert.c	FUNCTION_38
0x2426	        0x488975c0	             mov qword [rbp - 0x40], rsi	      1001	convert.c	FUNCTION_38
0x242a	        0x488955b8	             mov qword [rbp - 0x48], rdx	      1001	convert.c	FUNCTION_38
0x242e	    0x64488b042528	                mov rax, qword fs:[0x28]	      1001	convert.c	FUNCTION_38
0x2437	        0x488945f8	                mov qword [rbp - 8], rax	      1001	convert.c	FUNCTION_38
0x243b	            0x31c0	                            xor eax, eax	      1001	convert.c	FUNCTION_38
0x243d	        0x488d75e0	                   lea rsi, [rbp - 0x20]	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2441	        0x488d4ddc	                   lea rcx, [rbp - 0x24]	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2445	        0x488d55e8	                   lea rdx, [rbp - 0x18]	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2449	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x244d	          0x4989f0	                             mov r8, rsi	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2450	      0xbe00000000	                              mov esi, 0	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2455	          0x4889c7	                            mov rdi, rax	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2458	      0xe800000000	                          call 0x400249d	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x245d	            0x85c0	                           test eax, eax	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x245f	            0x7809	                            js 0x40024aa	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2461	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2465	          0x4885c0	                           test rax, rax	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x2468	            0x750a	                           jne 0x40024b4	      1010	convert.c	FUNCTION_38	IF_1	CALL_1
0x246a	      0xb800000000	                              mov eax, 0	      1011	convert.c	FUNCTION_38	IF_1
0x246f	      0xe985010000	                           jmp 0x4002639	      1011	convert.c	FUNCTION_38	IF_1
0x2474	    0x488b05000000	            mov rax, qword [0x040024bb] 	      1012	convert.c	FUNCTION_38	FOR_1
0x247b	        0x488945f0	             mov qword [rbp - 0x10], rax	      1012	convert.c	FUNCTION_38	FOR_1
0x247f	            0xeb42	                           jmp 0x4002503	      1012	convert.c	FUNCTION_38	FOR_1
0x2481	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x2484	          0x4863d0	                         movsxd rdx, eax	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x2487	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x248b	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x248f	          0x488b00	                    mov rax, qword [rax]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x2492	          0x4889ce	                            mov rsi, rcx	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x2495	          0x4889c7	                            mov rdi, rax	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x2498	      0xe800000000	                          call 0x40024dd	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x249d	            0x85c0	                           test eax, eax	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x249f	            0x7516	                           jne 0x40024f7	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24a1	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24a5	          0x488b10	                    mov rdx, qword [rax]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24a8	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24ab	            0x4898	                                    cdqe	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24ad	          0x4801d0	                            add rax, rdx	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24b0	           0xfb600	                   movzx eax, byte [rax]	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24b3	            0x84c0	                             test al, al	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24b5	            0x7415	                            je 0x400250c	      1013	convert.c	FUNCTION_38	FOR_1	IF_2	CALL_2
0x24b7	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1012	convert.c	FUNCTION_38	FOR_1
0x24bb	        0x488b4008	                mov rax, qword [rax + 8]	      1012	convert.c	FUNCTION_38	FOR_1
0x24bf	        0x488945f0	             mov qword [rbp - 0x10], rax	      1012	convert.c	FUNCTION_38	FOR_1
0x24c3	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1012	convert.c	FUNCTION_38	FOR_1
0x24c8	            0x75b7	                           jne 0x40024c1	      1012	convert.c	FUNCTION_38	FOR_1
0x24ca	            0xeb01	                           jmp 0x400250d	      1012	convert.c	FUNCTION_38	FOR_1
0x24cc	              0x90	                                     nop	      1014	convert.c	FUNCTION_38	FOR_1	IF_2
0x24cd	      0x48837df000	               cmp qword [rbp - 0x10], 0	      1015	convert.c	FUNCTION_38	IF_3
0x24d2	            0x754f	                           jne 0x4002563	      1015	convert.c	FUNCTION_38	IF_3
0x24d4	      0xbe30000000	                           mov esi, 0x30	      1016	convert.c	FUNCTION_38	IF_3	CALL_3
0x24d9	      0xbf01000000	                              mov edi, 1	      1016	convert.c	FUNCTION_38	IF_3	CALL_3
0x24de	      0xe800000000	                          call 0x4002523	      1016	convert.c	FUNCTION_38	IF_3	CALL_3
0x24e3	        0x488945f0	             mov qword [rbp - 0x10], rax	      1016	convert.c	FUNCTION_38	IF_3	CALL_3
0x24e7	          0x8b45dc	             mov eax, dword [rbp - 0x24]	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24ea	          0x4863d0	                         movsxd rdx, eax	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24ed	        0x488b45e8	             mov rax, qword [rbp - 0x18]	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24f1	          0x4889d6	                            mov rsi, rdx	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24f4	          0x4889c7	                            mov rdi, rax	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24f7	      0xe800000000	                          call 0x400253c	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24fc	          0x4889c2	                            mov rdx, rax	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x24ff	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x2503	          0x488910	                    mov qword [rax], rdx	      1017	convert.c	FUNCTION_38	IF_3	CALL_4
0x2506	    0x488b05000000	            mov rax, qword [0x0400254d] 	      1018	convert.c	FUNCTION_38	IF_3
0x250d	        0x488b55f0	             mov rdx, qword [rbp - 0x10]	      1018	convert.c	FUNCTION_38	IF_3
0x2511	          0x488910	                    mov qword [rax], rdx	      1018	convert.c	FUNCTION_38	IF_3
0x2514	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1019	convert.c	FUNCTION_38	IF_3
0x2518	        0x4883c008	                              add rax, 8	      1019	convert.c	FUNCTION_38	IF_3
0x251c	    0x488905000000	            mov qword [0x04002563], rax 	      1019	convert.c	FUNCTION_38	IF_3
0x2523	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x2527	          0x4889c6	                            mov rsi, rax	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x252a	      0xbf00000000	                              mov edi, 0	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x252f	      0xe800000000	                          call 0x4002574	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x2534	            0x85c0	                           test eax, eax	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x2536	            0x7520	                           jne 0x4002598	      1031	convert.c	FUNCTION_38	IF_4	CALL_5
0x2538	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1032	convert.c	FUNCTION_38	CALL_6
0x253c	        0x488d4810	                   lea rcx, [rax + 0x10]	      1032	convert.c	FUNCTION_38	CALL_6
0x2540	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1032	convert.c	FUNCTION_38	CALL_6
0x2544	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1032	convert.c	FUNCTION_38	CALL_6
0x2548	          0x4889c6	                            mov rsi, rax	      1032	convert.c	FUNCTION_38	CALL_6
0x254b	          0x4889cf	                            mov rdi, rcx	      1032	convert.c	FUNCTION_38	CALL_6
0x254e	      0xe800000000	                          call 0x4002593	      1032	convert.c	FUNCTION_38	CALL_6
0x2553	      0xe9a1000000	                           jmp 0x4002639	      1032	convert.c	FUNCTION_38	CALL_6
0x2558	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x255c	          0x4889c6	                            mov rsi, rax	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x255f	      0xbf00000000	                              mov edi, 0	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x2564	      0xe800000000	                          call 0x40025a9	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x2569	            0x85c0	                           test eax, eax	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x256b	            0x751d	                           jne 0x40025ca	      1034	convert.c	FUNCTION_38	IF_5	CALL_7
0x256d	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1035	convert.c	FUNCTION_38	CALL_8
0x2571	        0x488d4818	                   lea rcx, [rax + 0x18]	      1035	convert.c	FUNCTION_38	CALL_8
0x2575	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1035	convert.c	FUNCTION_38	CALL_8
0x2579	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1035	convert.c	FUNCTION_38	CALL_8
0x257d	          0x4889c6	                            mov rsi, rax	      1035	convert.c	FUNCTION_38	CALL_8
0x2580	          0x4889cf	                            mov rdi, rcx	      1035	convert.c	FUNCTION_38	CALL_8
0x2583	      0xe800000000	                          call 0x40025c8	      1035	convert.c	FUNCTION_38	CALL_8
0x2588	            0xeb6f	                           jmp 0x4002639	      1035	convert.c	FUNCTION_38	CALL_8
0x258a	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x258e	          0x4889c6	                            mov rsi, rax	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x2591	      0xbf00000000	                              mov edi, 0	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x2596	      0xe800000000	                          call 0x40025db	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x259b	            0x85c0	                           test eax, eax	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x259d	            0x751d	                           jne 0x40025fc	      1037	convert.c	FUNCTION_38	IF_6	CALL_9
0x259f	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1038	convert.c	FUNCTION_38	CALL_10
0x25a3	        0x488d4820	                   lea rcx, [rax + 0x20]	      1038	convert.c	FUNCTION_38	CALL_10
0x25a7	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1038	convert.c	FUNCTION_38	CALL_10
0x25ab	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1038	convert.c	FUNCTION_38	CALL_10
0x25af	          0x4889c6	                            mov rsi, rax	      1038	convert.c	FUNCTION_38	CALL_10
0x25b2	          0x4889cf	                            mov rdi, rcx	      1038	convert.c	FUNCTION_38	CALL_10
0x25b5	      0xe800000000	                          call 0x40025fa	      1038	convert.c	FUNCTION_38	CALL_10
0x25ba	            0xeb3d	                           jmp 0x4002639	      1038	convert.c	FUNCTION_38	CALL_10
0x25bc	        0x488b45e0	             mov rax, qword [rbp - 0x20]	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25c0	          0x4889c6	                            mov rsi, rax	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25c3	      0xbf00000000	                              mov edi, 0	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25c8	      0xe800000000	                          call 0x400260d	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25cd	            0x85c0	                           test eax, eax	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25cf	            0x7523	                           jne 0x4002634	      1040	convert.c	FUNCTION_38	IF_7	CALL_11
0x25d1	        0x488b55c0	             mov rdx, qword [rbp - 0x40]	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25d5	        0x488b45c8	             mov rax, qword [rbp - 0x38]	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25d9	          0x4889d6	                            mov rsi, rdx	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25dc	          0x4889c7	                            mov rdi, rax	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25df	      0xe800000000	                          call 0x4002624	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25e4	            0x89c2	                            mov edx, eax	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25e6	        0x488b45f0	             mov rax, qword [rbp - 0x10]	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25ea	          0x895028	             mov dword [rax + 0x28], edx	      1041	convert.c	FUNCTION_38	IF_7	CALL_12
0x25ed	      0xb800000000	                              mov eax, 0	      1042	convert.c	FUNCTION_38	IF_7
0x25f2	            0xeb05	                           jmp 0x4002639	      1042	convert.c	FUNCTION_38	IF_7
0x25f4	      0xb800000000	                              mov eax, 0	      1045	convert.c	FUNCTION_38
0x25f9	        0x488b4df8	                mov rcx, qword [rbp - 8]	      1046	convert.c	FUNCTION_38
0x25fd	    0x6448330c2528	                xor rcx, qword fs:[0x28]	      1046	convert.c	FUNCTION_38
0x2606	            0x7405	                            je 0x400264d	      1046	convert.c	FUNCTION_38
0x2608	      0xe800000000	                          call 0x400264d	      1046	convert.c	FUNCTION_38
0x260d	              0xc9	                                   leave	      1046	convert.c	FUNCTION_38
0x260e	              0xc3	                                     ret	      1046	convert.c	FUNCTION_38
encode_to_git	CALL,16:WHILE,0:functions,0:IF,7:SWITCH,0:ELSE,1:DO,0:FOR,0	173
0xe97	              0x55	                                push rbp	       390	convert.c	FUNCTION_27
0xe98	          0x4889e5	                            mov rbp, rsp	       390	convert.c	FUNCTION_27
0xe9b	        0x4883ec70	                           sub rsp, 0x70	       390	convert.c	FUNCTION_27
0xe9f	        0x48897db8	             mov qword [rbp - 0x48], rdi	       390	convert.c	FUNCTION_27
0xea3	        0x488975b0	             mov qword [rbp - 0x50], rsi	       390	convert.c	FUNCTION_27
0xea7	        0x488955a8	             mov qword [rbp - 0x58], rdx	       390	convert.c	FUNCTION_27
0xeab	        0x48894da0	             mov qword [rbp - 0x60], rcx	       390	convert.c	FUNCTION_27
0xeaf	        0x4c894598	              mov qword [rbp - 0x68], r8	       390	convert.c	FUNCTION_27
0xeb3	        0x44894d94	             mov dword [rbp - 0x6c], r9d	       390	convert.c	FUNCTION_27
0xeb7	    0x64488b042528	                mov rax, qword fs:[0x28]	       390	convert.c	FUNCTION_27
0xec0	        0x488945f8	                mov qword [rbp - 8], rax	       390	convert.c	FUNCTION_27
0xec4	            0x31c0	                            xor eax, eax	       390	convert.c	FUNCTION_27
0xec6	          0x8b4594	             mov eax, dword [rbp - 0x6c]	       393	convert.c	FUNCTION_27
0xec9	          0x83e010	                           and eax, 0x10	       393	convert.c	FUNCTION_27
0xecc	          0x8945d4	             mov dword [rbp - 0x2c], eax	       393	convert.c	FUNCTION_27
0xecf	      0x48837d9800	               cmp qword [rbp - 0x68], 0	       399	convert.c	FUNCTION_27	IF_1
0xed4	            0x740e	                            je 0x4000f24	       399	convert.c	FUNCTION_27	IF_1
0xed6	      0x48837db000	               cmp qword [rbp - 0x50], 0	       399	convert.c	FUNCTION_27	IF_1
0xedb	            0x7411	                            je 0x4000f2e	       399	convert.c	FUNCTION_27	IF_1
0xedd	      0x48837da800	               cmp qword [rbp - 0x58], 0	       399	convert.c	FUNCTION_27	IF_1
0xee2	            0x750a	                           jne 0x4000f2e	       399	convert.c	FUNCTION_27	IF_1
0xee4	      0xb800000000	                              mov eax, 0	       400	convert.c	FUNCTION_27	IF_1
0xee9	      0xe940020000	                           jmp 0x400116e	       400	convert.c	FUNCTION_27	IF_1
0xeee	      0x48837da000	               cmp qword [rbp - 0x60], 0	       408	convert.c	FUNCTION_27	IF_2
0xef3	            0x7511	                           jne 0x4000f46	       408	convert.c	FUNCTION_27	IF_2
0xef5	      0x48837db000	               cmp qword [rbp - 0x50], 0	       408	convert.c	FUNCTION_27	IF_2
0xefa	            0x750a	                           jne 0x4000f46	       408	convert.c	FUNCTION_27	IF_2
0xefc	      0xb801000000	                              mov eax, 1	       409	convert.c	FUNCTION_27	IF_2
0xf01	      0xe928020000	                           jmp 0x400116e	       409	convert.c	FUNCTION_27	IF_2
0xf06	          0x8b7dd4	             mov edi, dword [rbp - 0x2c]	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf09	        0x488b4da8	             mov rcx, qword [rbp - 0x58]	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf0d	        0x488b55b0	             mov rdx, qword [rbp - 0x50]	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf11	        0x488b7598	             mov rsi, qword [rbp - 0x68]	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf15	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf19	          0x4189f8	                            mov r8d, edi	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf1c	          0x4889c7	                            mov rdi, rax	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf1f	      0xe883faffff	              call sym.validate_encoding	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf24	            0x85c0	                           test eax, eax	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf26	            0x740a	                            je 0x4000f72	       411	convert.c	FUNCTION_27	IF_3	CALL_1
0xf28	      0xb800000000	                              mov eax, 0	       412	convert.c	FUNCTION_27	IF_3
0xf2d	      0xe9fc010000	                           jmp 0x400116e	       412	convert.c	FUNCTION_27	IF_3
0xf32	        0x488b75a8	             mov rsi, qword [rbp - 0x58]	       414	convert.c	FUNCTION_27	CALL_2
0xf36	        0x488b4db0	             mov rcx, qword [rbp - 0x50]	       414	convert.c	FUNCTION_27	CALL_2
0xf3a	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       414	convert.c	FUNCTION_27	CALL_2
0xf3e	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       414	convert.c	FUNCTION_27	CALL_2
0xf42	          0x4989f0	                             mov r8, rsi	       414	convert.c	FUNCTION_27	CALL_2
0xf45	          0x4889c6	                            mov rsi, rax	       414	convert.c	FUNCTION_27	CALL_2
0xf48	      0xbf00000000	                              mov edi, 0	       414	convert.c	FUNCTION_27	CALL_2
0xf4d	      0xe8aefcffff	                 call sym.trace_encoding	       414	convert.c	FUNCTION_27	CALL_2
0xf52	    0x488b15000000	            mov rdx, qword [0x04000f99] 	       415	convert.c	FUNCTION_27	CALL_3
0xf59	        0x488b45a8	             mov rax, qword [rbp - 0x58]	       415	convert.c	FUNCTION_27	CALL_3
0xf5d	            0x89c7	                            mov edi, eax	       415	convert.c	FUNCTION_27	CALL_3
0xf5f	        0x488d75cc	                   lea rsi, [rbp - 0x34]	       415	convert.c	FUNCTION_27	CALL_3
0xf63	        0x488b4d98	             mov rcx, qword [rbp - 0x68]	       415	convert.c	FUNCTION_27	CALL_3
0xf67	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       415	convert.c	FUNCTION_27	CALL_3
0xf6b	          0x4989f0	                             mov r8, rsi	       415	convert.c	FUNCTION_27	CALL_3
0xf6e	            0x89fe	                            mov esi, edi	       415	convert.c	FUNCTION_27	CALL_3
0xf70	          0x4889c7	                            mov rdi, rax	       415	convert.c	FUNCTION_27	CALL_3
0xf73	      0xe800000000	                          call 0x4000fb8	       415	convert.c	FUNCTION_27	CALL_3
0xf78	        0x488945d8	             mov qword [rbp - 0x28], rax	       415	convert.c	FUNCTION_27	CALL_3
0xf7c	      0x48837dd800	               cmp qword [rbp - 0x28], 0	       417	convert.c	FUNCTION_27	IF_4
0xf81	            0x7563	                           jne 0x4001026	       417	convert.c	FUNCTION_27	IF_4
0xf83	      0xbf00000000	                              mov edi, 0	       424	convert.c	FUNCTION_27	IF_4	CALL_4
0xf88	      0xe8dbf2ffff	                               call sym.	       424	convert.c	FUNCTION_27	IF_4	CALL_4
0xf8d	        0x488945e0	             mov qword [rbp - 0x20], rax	       424	convert.c	FUNCTION_27	IF_4	CALL_4
0xf91	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       425	convert.c	FUNCTION_27	IF_4	IF_5
0xf95	            0x7420	                            je 0x4000ff7	       425	convert.c	FUNCTION_27	IF_4	IF_5
0xf97	    0x488b0d000000	            mov rcx, qword [0x04000fde] 	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xf9e	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfa2	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfa6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfaa	          0x4889c7	                            mov rdi, rax	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfad	      0xb800000000	                              mov eax, 0	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfb2	      0xe800000000	                          call 0x4000ff7	       426	convert.c	FUNCTION_27	IF_4	CALL_5
0xfb7	    0x488b0d000000	            mov rcx, qword [0x04000ffe] 	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfbe	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfc2	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfc6	        0x488b45e0	             mov rax, qword [rbp - 0x20]	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfca	          0x4889c7	                            mov rdi, rax	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfcd	      0xb800000000	                              mov eax, 0	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfd2	      0xe800000000	                          call 0x4001017	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfd7	      0xe824f0ffff	                    call sym.const_error	       428	convert.c	FUNCTION_27	IF_4	ELSE_1	CALL_6
0xfdc	      0xb800000000	                              mov eax, 0	       429	convert.c	FUNCTION_27	IF_4	ELSE_1
0xfe1	      0xe948010000	                           jmp 0x400116e	       429	convert.c	FUNCTION_27	IF_4	ELSE_1
0xfe6	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       432	convert.c	FUNCTION_27	CALL_7
0xfe9	          0x4863f0	                         movsxd rsi, eax	       432	convert.c	FUNCTION_27	CALL_7
0xfec	    0x488b15000000	            mov rdx, qword [0x04001033] 	       432	convert.c	FUNCTION_27	CALL_7
0xff3	        0x488b4dd8	             mov rcx, qword [rbp - 0x28]	       432	convert.c	FUNCTION_27	CALL_7
0xff7	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       432	convert.c	FUNCTION_27	CALL_7
0xffb	          0x4989f0	                             mov r8, rsi	       432	convert.c	FUNCTION_27	CALL_7
0xffe	          0x4889c6	                            mov rsi, rax	       432	convert.c	FUNCTION_27	CALL_7
0x1001	      0xbf00000000	                              mov edi, 0	       432	convert.c	FUNCTION_27	CALL_7
0x1006	      0xe8f5fbffff	                 call sym.trace_encoding	       432	convert.c	FUNCTION_27	CALL_7
0x100b	        0x837dd400	               cmp dword [rbp - 0x2c], 0	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x100f	     0xf84f5000000	                            je 0x400114a	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x1015	        0x488b4598	             mov rax, qword [rbp - 0x68]	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x1019	          0x4889c7	                            mov rdi, rax	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x101c	      0xe86afdffff	                call sym.check_roundtrip	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x1021	            0x85c0	                           test eax, eax	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x1023	     0xf84e1000000	                            je 0x400114a	       453	convert.c	FUNCTION_27	IF_6	CALL_8
0x1029	    0x488b0d000000	            mov rcx, qword [0x04001070] 	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x1030	          0x8b75cc	             mov esi, dword [rbp - 0x34]	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x1033	        0x488d7dd0	                   lea rdi, [rbp - 0x30]	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x1037	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x103b	        0x488b45d8	             mov rax, qword [rbp - 0x28]	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x103f	          0x4989f8	                             mov r8, rdi	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x1042	          0x4889c7	                            mov rdi, rax	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x1045	      0xe800000000	                          call 0x400108a	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x104a	        0x488945e8	             mov qword [rbp - 0x18], rax	       457	convert.c	FUNCTION_27	IF_6	CALL_9
0x104e	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1053	      0xe83cf2ffff	                  call sym.trace_pass_fl	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1058	            0x85c0	                           test eax, eax	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x105a	            0x7425	                            je 0x40010c1	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x105c	        0x488b4598	             mov rax, qword [rbp - 0x68]	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1060	          0x4989c0	                             mov r8, rax	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1063	      0xb900000000	                              mov ecx, 0	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1068	      0xba00000000	                              mov edx, 0	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x106d	      0xbecd010000	                          mov esi, 0x1cd	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1072	      0xbf00000000	                              mov edi, 0	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1077	      0xb800000000	                              mov eax, 0	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x107c	      0xe800000000	                          call 0x40010c1	       461	convert.c	FUNCTION_27	IF_6	CALL_10
0x1081	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x1084	          0x4863f0	                         movsxd rsi, eax	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x1087	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x108b	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x108f	        0x488b45b8	             mov rax, qword [rbp - 0x48]	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x1093	          0x4989f0	                             mov r8, rsi	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x1096	          0x4889c6	                            mov rsi, rax	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x1099	      0xbf00000000	                              mov edi, 0	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x109e	      0xe85dfbffff	                 call sym.trace_encoding	       462	convert.c	FUNCTION_27	IF_6	CALL_11
0x10a3	      0x48837de800	               cmp qword [rbp - 0x18], 0	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10a8	            0x7426	                            je 0x4001110	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10aa	          0x8b45d0	             mov eax, dword [rbp - 0x30]	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10ad	            0x4898	                                    cdqe	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10af	        0x483b45a8	             cmp rax, qword [rbp - 0x58]	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10b3	            0x751b	                           jne 0x4001110	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10b5	        0x488b55a8	             mov rdx, qword [rbp - 0x58]	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10b9	        0x488b4de8	             mov rcx, qword [rbp - 0x18]	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10bd	        0x488b45b0	             mov rax, qword [rbp - 0x50]	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10c1	          0x4889ce	                            mov rsi, rcx	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10c4	          0x4889c7	                            mov rdi, rax	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10c7	      0xe800000000	                          call 0x400110c	       466	convert.c	FUNCTION_27	IF_6	IF_7	CALL_12
0x10cc	            0x85c0	                           test eax, eax	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10ce	            0x742e	                            je 0x400113e	       465	convert.c	FUNCTION_27	IF_6	IF_7
0x10d0	      0xbf00000000	                              mov edi, 0	       467	convert.c	FUNCTION_27	IF_6	IF_7	CALL_13
0x10d5	      0xe88ef1ffff	                               call sym.	       467	convert.c	FUNCTION_27	IF_6	IF_7	CALL_13
0x10da	        0x488945f0	             mov qword [rbp - 0x10], rax	       467	convert.c	FUNCTION_27	IF_6	IF_7	CALL_13
0x10de	    0x488b0d000000	            mov rcx, qword [0x04001125] 	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10e5	        0x488b5598	             mov rdx, qword [rbp - 0x68]	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10e9	        0x488b75b8	             mov rsi, qword [rbp - 0x48]	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10ed	        0x488b45f0	             mov rax, qword [rbp - 0x10]	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10f1	          0x4889c7	                            mov rdi, rax	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10f4	      0xb800000000	                              mov eax, 0	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10f9	      0xe800000000	                          call 0x400113e	       469	convert.c	FUNCTION_27	IF_6	IF_7	CALL_14
0x10fe	        0x488b45e8	             mov rax, qword [rbp - 0x18]	       472	convert.c	FUNCTION_27	IF_6	CALL_15
0x1102	          0x4889c7	                            mov rdi, rax	       472	convert.c	FUNCTION_27	IF_6	CALL_15
0x1105	      0xe800000000	                          call 0x400114a	       472	convert.c	FUNCTION_27	IF_6	CALL_15
0x110a	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       475	convert.c	FUNCTION_27	CALL_16
0x110d	          0x83c001	                              add eax, 1	       475	convert.c	FUNCTION_27	CALL_16
0x1110	          0x4863c8	                         movsxd rcx, eax	       475	convert.c	FUNCTION_27	CALL_16
0x1113	          0x8b45cc	             mov eax, dword [rbp - 0x34]	       475	convert.c	FUNCTION_27	CALL_16
0x1116	          0x4863d0	                         movsxd rdx, eax	       475	convert.c	FUNCTION_27	CALL_16
0x1119	        0x488b75d8	             mov rsi, qword [rbp - 0x28]	       475	convert.c	FUNCTION_27	CALL_16
0x111d	        0x488b45a0	             mov rax, qword [rbp - 0x60]	       475	convert.c	FUNCTION_27	CALL_16
0x1121	          0x4889c7	                            mov rdi, rax	       475	convert.c	FUNCTION_27	CALL_16
0x1124	      0xe800000000	                          call 0x4001169	       475	convert.c	FUNCTION_27	CALL_16
0x1129	      0xb801000000	                              mov eax, 1	       476	convert.c	FUNCTION_27
0x112e	        0x488b7df8	                mov rdi, qword [rbp - 8]	       477	convert.c	FUNCTION_27
0x1132	    0x6448333c2528	                xor rdi, qword fs:[0x28]	       477	convert.c	FUNCTION_27
0x113b	            0x7405	                            je 0x4001182	       477	convert.c	FUNCTION_27
0x113d	      0xe800000000	                          call 0x4001182	       477	convert.c	FUNCTION_27
0x1142	              0xc9	                                   leave	       477	convert.c	FUNCTION_27
0x1143	              0xc3	                                     ret	       477	convert.c	FUNCTION_27
