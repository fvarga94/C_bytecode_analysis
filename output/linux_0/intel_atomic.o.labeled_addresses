intel_digital_connector_atomic_get_property	DO,0:ELSE,2:FOR,0:WHILE,0:IF,2:CALL,3:functions,0:SWITCH,0	19
0x4000040	          0x488b07	                    mov rax, qword [rdi]	        52	intel_atomic.c	FUNCTION_1
0x4000043	    0x483990486f00	          cmp qword [rax + 0x6f48], rdx 	        57	intel_atomic.c	FUNCTION_1	IF_1
0x400004a	            0x7413	                            je 0x400005f	        57	intel_atomic.c	FUNCTION_1	IF_1
0x400004c	    0x483b90406f00	          cmp rdx, qword [rax + 0x6f40] 	        59	intel_atomic.c	FUNCTION_1	ELSE_1	IF_2
0x4000053	            0x7514	                           jne 0x4000069	        59	intel_atomic.c	FUNCTION_1	ELSE_1	IF_2
0x4000055	        0x48634674	         movsxd rax, dword [rsi + 0x74] 	        60	intel_atomic.c	FUNCTION_1	ELSE_1	IF_2
0x4000059	          0x488901	                    mov qword [rcx], rax	        60	intel_atomic.c	FUNCTION_1	ELSE_1	IF_2
0x400005c	            0x31c0	                            xor eax, eax	        66	intel_atomic.c	FUNCTION_1
0x400005e	              0xc3	                                     ret	        66	intel_atomic.c	FUNCTION_1
0x400005f	        0x48634670	         movsxd rax, dword [rsi + 0x70] 	        58	intel_atomic.c	FUNCTION_1	IF_1
0x4000063	          0x488901	                    mov qword [rcx], rax	        58	intel_atomic.c	FUNCTION_1	IF_1
0x4000066	            0x31c0	                            xor eax, eax	        66	intel_atomic.c	FUNCTION_1
0x4000068	              0xc3	                                     ret	        66	intel_atomic.c	FUNCTION_1
0x4000069	        0x4883c234	                           add rdx, 0x34	        62	intel_atomic.c	FUNCTION_1	ELSE_2	CALL_3
0x400006d	    0x48c7c6000000	                              mov rsi, 0	        62	intel_atomic.c	FUNCTION_1	ELSE_2	CALL_3
0x4000074	      0xbf10000000	                           mov edi, 0x10	        62	intel_atomic.c	FUNCTION_1	ELSE_2	CALL_3
0x4000079	      0xe800000000	                          call 0x400007e	        62	intel_atomic.c	FUNCTION_1	ELSE_2	CALL_3
0x400007e	      0xb8eaffffff	                     mov eax, 0xffffffea	        63	intel_atomic.c	FUNCTION_1	ELSE_2
0x4000083	              0xc3	                                     ret	        67	intel_atomic.c	FUNCTION_1
intel_digital_connector_atomic_set_property	DO,0:ELSE,0:FOR,0:WHILE,0:IF,2:CALL,3:functions,0:SWITCH,0	17
0x4000090	          0x488b07	                    mov rax, qword [rdi]	        83	intel_atomic.c	FUNCTION_2
0x4000093	    0x483990486f00	          cmp qword [rax + 0x6f48], rdx 	        88	intel_atomic.c	FUNCTION_2	IF_1
0x400009a	            0x740f	                            je 0x40000ab	        88	intel_atomic.c	FUNCTION_2	IF_1
0x400009c	    0x483b90406f00	          cmp rdx, qword [rax + 0x6f40] 	        93	intel_atomic.c	FUNCTION_2	IF_2
0x40000a3	            0x750c	                           jne 0x40000b1	        93	intel_atomic.c	FUNCTION_2	IF_2
0x40000a5	          0x894e74	             mov dword [rsi + 0x74], ecx	        94	intel_atomic.c	FUNCTION_2	IF_2
0x40000a8	            0x31c0	                            xor eax, eax	        95	intel_atomic.c	FUNCTION_2	IF_2
0x40000aa	              0xc3	                                     ret	        95	intel_atomic.c	FUNCTION_2	IF_2
0x40000ab	          0x894e70	             mov dword [rsi + 0x70], ecx	        89	intel_atomic.c	FUNCTION_2	IF_1
0x40000ae	            0x31c0	                            xor eax, eax	        90	intel_atomic.c	FUNCTION_2	IF_1
0x40000b0	              0xc3	                                     ret	        90	intel_atomic.c	FUNCTION_2	IF_1
0x40000b1	        0x4883c234	                           add rdx, 0x34	        98	intel_atomic.c	FUNCTION_2	CALL_3
0x40000b5	    0x48c7c6000000	                              mov rsi, 0	        98	intel_atomic.c	FUNCTION_2	CALL_3
0x40000bc	      0xbf10000000	                           mov edi, 0x10	        98	intel_atomic.c	FUNCTION_2	CALL_3
0x40000c1	      0xe800000000	                          call 0x40000c6	        98	intel_atomic.c	FUNCTION_2	CALL_3
0x40000c6	      0xb8eaffffff	                     mov eax, 0xffffffea	        99	intel_atomic.c	FUNCTION_2
0x40000cb	              0xc3	                                     ret	       100	intel_atomic.c	FUNCTION_2
intel_digital_connector_duplicate_state	DO,0:ELSE,0:FOR,0:WHILE,0:IF,1:CALL,2:functions,0:SWITCH,0	17
0x4000140	              0x55	                                push rbp	       144	intel_atomic.c	FUNCTION_4
0x4000141	          0x4889fd	                            mov rbp, rdi	       144	intel_atomic.c	FUNCTION_4
0x4000144	              0x53	                                push rbx	       144	intel_atomic.c	FUNCTION_4
0x4000145	    0x488bbff00300	           mov rdi, qword [rdi + 0x3f0] 	       147	intel_atomic.c	FUNCTION_4	CALL_1
0x400014c	      0xbac0004001	                      mov edx, 0x14000c0	       147	intel_atomic.c	FUNCTION_4	CALL_1
0x4000151	      0xbe78000000	                           mov esi, 0x78	       147	intel_atomic.c	FUNCTION_4	CALL_1
0x4000156	      0xe800000000	                          call 0x400015b	       147	intel_atomic.c	FUNCTION_4	CALL_1
0x400015b	          0x4885c0	                           test rax, rax	       148	intel_atomic.c	FUNCTION_4	IF_1
0x400015e	          0x4889c3	                            mov rbx, rax	       147	intel_atomic.c	FUNCTION_4	CALL_1
0x4000161	            0x740b	                            je 0x400016e	       148	intel_atomic.c	FUNCTION_4	IF_1
0x4000163	          0x4889c6	                            mov rsi, rax	       151	intel_atomic.c	FUNCTION_4	CALL_2
0x4000166	          0x4889ef	                            mov rdi, rbp	       151	intel_atomic.c	FUNCTION_4	CALL_2
0x4000169	      0xe800000000	                          call 0x400016e	       151	intel_atomic.c	FUNCTION_4	CALL_2
0x400016e	          0x4889d8	                            mov rax, rbx	       153	intel_atomic.c	FUNCTION_4
0x4000171	              0x5b	                                 pop rbx	       153	intel_atomic.c	FUNCTION_4
0x4000172	              0x5d	                                 pop rbp	       153	intel_atomic.c	FUNCTION_4
0x4000173	              0xc3	                                     ret	       153	intel_atomic.c	FUNCTION_4
intel_crtc_destroy_state	DO,0:ELSE,0:FOR,0:WHILE,0:IF,0:CALL,1:functions,0:SWITCH,0	1
0x4000200	      0xe900000000	                           jmp 0x4000205	       200	intel_atomic.c	FUNCTION_6	CALL_1
intel_atomic_state_clear	DO,0:ELSE,0:FOR,0:WHILE,0:IF,0:CALL,2:functions,0:SWITCH,0	7
0x4000540	              0x53	                                push rbx	       365	intel_atomic.c	FUNCTION_9
0x4000541	          0x4889fb	                            mov rbx, rdi	       365	intel_atomic.c	FUNCTION_9
0x4000544	      0xe800000000	                          call 0x4000549	       367	intel_atomic.c	FUNCTION_9	CALL_2
0x4000549	    0xc683a1000000	                mov byte [rbx + 0xa1], 0	       368	intel_atomic.c	FUNCTION_9
0x4000550	    0xc683a0000000	                mov byte [rbx + 0xa0], 0	       368	intel_atomic.c	FUNCTION_9
0x4000557	              0x5b	                                 pop rbx	       369	intel_atomic.c	FUNCTION_9
0x4000558	              0xc3	                                     ret	       369	intel_atomic.c	FUNCTION_9
intel_digital_connector_atomic_check	DO,0:ELSE,0:FOR,0:WHILE,0:IF,2:CALL,5:functions,0:SWITCH,0	35
0x40000d0	              0x55	                                push rbp	       104	intel_atomic.c	FUNCTION_3
0x40000d1	              0x53	                                push rbx	       104	intel_atomic.c	FUNCTION_3
0x40000d2	            0x31ed	                            xor ebp, ebp	       104	intel_atomic.c	FUNCTION_3
0x40000d4	        0x488b5620	            mov rdx, qword [rsi + 0x20] 	       108	intel_atomic.c	FUNCTION_3	CALL_2
0x40000d8	        0x48634770	         movsxd rax, dword [rdi + 0x70] 	       517	drm_atomic.h	FUNCTION_21	CALL_1
0x40000dc	          0x4889f3	                            mov rbx, rsi	       104	intel_atomic.c	FUNCTION_3
0x40000df	          0x3b4228	            cmp eax, dword [rdx + 0x28] 	       519	drm_atomic.h	FUNCTION_21	IF_1
0x40000e2	            0x7d0c	                           jge 0x40000f0	       519	drm_atomic.h	FUNCTION_21	IF_1
0x40000e4	        0x48c1e005	                              shl rax, 5	       522	drm_atomic.h	FUNCTION_21
0x40000e8	        0x48034230	             add rax, qword [rdx + 0x30]	       522	drm_atomic.h	FUNCTION_21
0x40000ec	        0x488b6810	            mov rbp, qword [rax + 0x10] 	       522	drm_atomic.h	FUNCTION_21
0x40000f0	          0x4889da	                            mov rdx, rbx	       113	intel_atomic.c	FUNCTION_3	CALL_4
0x40000f3	          0x4889ee	                            mov rsi, rbp	       113	intel_atomic.c	FUNCTION_3	CALL_4
0x40000f6	      0xe800000000	                          call 0x40000fb	       113	intel_atomic.c	FUNCTION_3	CALL_4
0x40000fb	        0x488b4308	                mov rax, qword [rbx + 8]	       115	intel_atomic.c	FUNCTION_3	IF_1
0x40000ff	          0x4885c0	                           test rax, rax	       115	intel_atomic.c	FUNCTION_3	IF_1
0x4000102	            0x7428	                            je 0x400012c	       115	intel_atomic.c	FUNCTION_3	IF_1
0x4000104	    0x8b8090000000	            mov eax, dword [rax + 0x90] 	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x400010a	        0x488b5320	            mov rdx, qword [rbx + 0x20] 	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x400010e	        0x488b4d70	            mov rcx, qword [rbp + 0x70] 	       124	intel_atomic.c	FUNCTION_3	IF_2
0x4000112	        0x488d0440	                  lea rax, [rax + rax*2]	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x4000116	        0x48c1e004	                              shl rax, 4	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x400011a	        0x48034220	             add rax, qword [rdx + 0x20]	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x400011e	        0x48394b70	            cmp qword [rbx + 0x70], rcx 	       124	intel_atomic.c	FUNCTION_3	IF_2
0x4000122	        0x488b4018	            mov rax, qword [rax + 0x18] 	       431	drm_atomic.h	FUNCTION_16	CALL_1
0x4000126	            0x7409	                            je 0x4000131	       124	intel_atomic.c	FUNCTION_3	IF_2
0x4000128	        0x80480a02	                  or byte [rax + 0xa], 2	       128	intel_atomic.c	FUNCTION_3	IF_2
0x400012c	            0x31c0	                            xor eax, eax	       131	intel_atomic.c	FUNCTION_3
0x400012e	              0x5b	                                 pop rbx	       131	intel_atomic.c	FUNCTION_3
0x400012f	              0x5d	                                 pop rbp	       131	intel_atomic.c	FUNCTION_3
0x4000130	              0xc3	                                     ret	       131	intel_atomic.c	FUNCTION_3
0x4000131	        0x488b4d60	            mov rcx, qword [rbp + 0x60] 	       126	intel_atomic.c	FUNCTION_3	IF_2
0x4000135	        0x48394b60	            cmp qword [rbx + 0x60], rcx 	       126	intel_atomic.c	FUNCTION_3	IF_2
0x4000139	            0x75ed	                           jne 0x4000128	       126	intel_atomic.c	FUNCTION_3	IF_2
0x400013b	            0xebef	                           jmp 0x400012c	       126	intel_atomic.c	FUNCTION_3	IF_2
intel_crtc_duplicate_state	DO,0:ELSE,0:FOR,0:WHILE,0:IF,1:CALL,2:functions,0:SWITCH,0	26
0x4000180	              0x55	                                push rbp	       166	intel_atomic.c	FUNCTION_5
0x4000181	          0x4889fd	                            mov rbp, rdi	       166	intel_atomic.c	FUNCTION_5
0x4000184	              0x53	                                push rbx	       166	intel_atomic.c	FUNCTION_5
0x4000185	    0x488bbf100400	           mov rdi, qword [rdi + 0x410] 	       169	intel_atomic.c	FUNCTION_5	CALL_1
0x400018c	      0xbac0004001	                      mov edx, 0x14000c0	       169	intel_atomic.c	FUNCTION_5	CALL_1
0x4000191	      0xbe98040000	                          mov esi, 0x498	       169	intel_atomic.c	FUNCTION_5	CALL_1
0x4000196	      0xe800000000	                          call 0x400019b	       169	intel_atomic.c	FUNCTION_5	CALL_1
0x400019b	          0x4885c0	                           test rax, rax	       170	intel_atomic.c	FUNCTION_5	IF_1
0x400019e	          0x4889c3	                            mov rbx, rax	       169	intel_atomic.c	FUNCTION_5	CALL_1
0x40001a1	            0x744d	                            je 0x40001f0	       170	intel_atomic.c	FUNCTION_5	IF_1
0x40001a3	          0x4889c6	                            mov rsi, rax	       173	intel_atomic.c	FUNCTION_5	CALL_2
0x40001a6	          0x4889ef	                            mov rdi, rbp	       173	intel_atomic.c	FUNCTION_5	CALL_2
0x40001a9	      0xe800000000	                          call 0x40001ae	       173	intel_atomic.c	FUNCTION_5	CALL_2
0x40001ae	    0xc68324020000	               mov byte [rbx + 0x224], 0	       175	intel_atomic.c	FUNCTION_5
0x40001b5	    0xc6836c030000	               mov byte [rbx + 0x36c], 0	       176	intel_atomic.c	FUNCTION_5
0x40001bc	    0xc68325020000	               mov byte [rbx + 0x225], 0	       177	intel_atomic.c	FUNCTION_5
0x40001c3	    0xc68326020000	               mov byte [rbx + 0x226], 0	       178	intel_atomic.c	FUNCTION_5
0x40001ca	    0xc68327020000	               mov byte [rbx + 0x227], 0	       179	intel_atomic.c	FUNCTION_5
0x40001d1	    0xc68328020000	               mov byte [rbx + 0x228], 0	       180	intel_atomic.c	FUNCTION_5
0x40001d8	    0xc68329020000	               mov byte [rbx + 0x229], 0	       181	intel_atomic.c	FUNCTION_5
0x40001df	    0xc68388040000	               mov byte [rbx + 0x488], 0	       182	intel_atomic.c	FUNCTION_5
0x40001e6	    0xc78320020000	              mov dword [rbx + 0x220], 0	       183	intel_atomic.c	FUNCTION_5
0x40001f0	          0x4889d8	                            mov rax, rbx	       186	intel_atomic.c	FUNCTION_5
0x40001f3	              0x5b	                                 pop rbx	       186	intel_atomic.c	FUNCTION_5
0x40001f4	              0x5d	                                 pop rbp	       186	intel_atomic.c	FUNCTION_5
0x40001f5	              0xc3	                                     ret	       186	intel_atomic.c	FUNCTION_5
