input_dev_show_modalias	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,3:IF,0:DO,0:WHILE,0	11
0x4000d00	          0x4889d0	                            mov rax, rdx	      1362	input.c	FUNCTION_54
0x4000d03	    0x488d97e8fdff	                  lea rdx, [rdi - 0x218]	      1366	input.c	FUNCTION_54	CALL_2
0x4000d0a	      0xb901000000	                              mov ecx, 1	      1366	input.c	FUNCTION_54	CALL_2
0x4000d0f	      0xbe00100000	                         mov esi, 0x1000	      1366	input.c	FUNCTION_54	CALL_2
0x4000d14	          0x4889c7	                            mov rdi, rax	      1366	input.c	FUNCTION_54	CALL_2
0x4000d17	      0xe804feffff	           call sym.input_print_modalias	      1366	input.c	FUNCTION_54	CALL_2
0x4000d1c	      0xba00100000	                         mov edx, 0x1000	      1368	input.c	FUNCTION_54	CALL_3
0x4000d21	      0x3d00100000	                         cmp eax, 0x1000	      1368	input.c	FUNCTION_54	CALL_3
0x4000d26	           0xf4fc2	                          cmovg eax, edx	      1368	input.c	FUNCTION_54	CALL_3
0x4000d29	            0x4898	                                    cdqe	      1368	input.c	FUNCTION_54	CALL_3
0x4000d2b	              0xc3	                                     ret	      1369	input.c	FUNCTION_54
devm_input_device_match	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,0:IF,0:DO,0:WHILE,0	4
0x40003c0	            0x31c0	                            xor eax, eax	      1809	input.c	FUNCTION_69
0x40003c2	          0x483916	                    cmp qword [rsi], rdx	      1809	input.c	FUNCTION_69
0x40003c5	           0xf94c0	                                 sete al	      1809	input.c	FUNCTION_69
0x40003c8	              0xc3	                                     ret	      1810	input.c	FUNCTION_69
input_devices_seq_next	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,0:DO,0:WHILE,0	3
0x40010a0	          0x4889f7	                            mov rdi, rsi	      1090	input.c	FUNCTION_38
0x40010a3	    0x48c7c6000000	                              mov rsi, 0	      1091	input.c	FUNCTION_38	CALL_1
0x40010aa	      0xe900000000	                           jmp 0x40010af	      1091	input.c	FUNCTION_38	CALL_1
input_handlers_seq_next	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,0:DO,0:WHILE,0	7
0x4001080	           0xfb702	                   movzx eax, word [rdx]	      1218	input.c	FUNCTION_44
0x4001083	          0x4889f1	                            mov rcx, rsi	      1215	input.c	FUNCTION_44
0x4001086	    0x48c7c6000000	                              mov rsi, 0	      1219	input.c	FUNCTION_44	CALL_1
0x400108d	          0x83c001	                              add eax, 1	      1218	input.c	FUNCTION_44
0x4001090	        0x66894778	               mov word [rdi + 0x78], ax	      1218	input.c	FUNCTION_44
0x4001094	          0x4889cf	                            mov rdi, rcx	      1219	input.c	FUNCTION_44	CALL_1
0x4001097	      0xe900000000	                           jmp 0x400109c	      1219	input.c	FUNCTION_44	CALL_1
input_handlers_seq_show	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,5:IF,2:DO,0:WHILE,0	26
0x4001020	              0x55	                                push rbp	      1223	input.c	FUNCTION_45
0x4001021	              0x53	                                push rbx	      1223	input.c	FUNCTION_45
0x4001022	          0x4889f5	                            mov rbp, rsi	      1223	input.c	FUNCTION_45
0x4001025	         0xfb75778	           movzx edx, word [rdi + 0x78] 	      1227	input.c	FUNCTION_45	CALL_2
0x4001029	        0x488b4ee0	             mov rcx, qword [rsi - 0x20]	      1227	input.c	FUNCTION_45	CALL_2
0x400102d	    0x48c7c6000000	                              mov rsi, 0	      1227	input.c	FUNCTION_45	CALL_2
0x4001034	          0x4889fb	                            mov rbx, rdi	      1223	input.c	FUNCTION_45
0x4001037	      0xe800000000	                          call 0x400103c	      1227	input.c	FUNCTION_45	CALL_2
0x400103c	      0x48837db000	               cmp qword [rbp - 0x50], 0	      1228	input.c	FUNCTION_45	IF_1
0x4001041	            0x740f	                            je 0x4001052	      1228	input.c	FUNCTION_45	IF_1
0x4001043	    0x48c7c6000000	                              mov rsi, 0	      1229	input.c	FUNCTION_45	CALL_3
0x400104a	          0x4889df	                            mov rdi, rbx	      1229	input.c	FUNCTION_45	CALL_3
0x400104d	      0xe800000000	                          call 0x4001052	      1229	input.c	FUNCTION_45	CALL_3
0x4001052	        0x807dd800	                cmp byte [rbp - 0x28], 0	      1230	input.c	FUNCTION_45	IF_2
0x4001056	            0x7412	                            je 0x400106a	      1230	input.c	FUNCTION_45	IF_2
0x4001058	          0x8b55dc	             mov edx, dword [rbp - 0x24]	      1231	input.c	FUNCTION_45	CALL_4
0x400105b	    0x48c7c6000000	                              mov rsi, 0	      1231	input.c	FUNCTION_45	CALL_4
0x4001062	          0x4889df	                            mov rdi, rbx	      1231	input.c	FUNCTION_45	CALL_4
0x4001065	      0xe800000000	                          call 0x400106a	      1231	input.c	FUNCTION_45	CALL_4
0x400106a	          0x4889df	                            mov rdi, rbx	      1232	input.c	FUNCTION_45	CALL_5
0x400106d	      0xbe0a000000	                            mov esi, 0xa	      1232	input.c	FUNCTION_45	CALL_5
0x4001072	      0xe800000000	                          call 0x4001077	      1232	input.c	FUNCTION_45	CALL_5
0x4001077	            0x31c0	                            xor eax, eax	      1235	input.c	FUNCTION_45
0x4001079	              0x5b	                                 pop rbx	      1235	input.c	FUNCTION_45
0x400107a	              0x5d	                                 pop rbp	      1235	input.c	FUNCTION_45
0x400107b	              0xc3	                                     ret	      1235	input.c	FUNCTION_45
input_proc_exit	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,0:IF,0:DO,0:WHILE,0	19
0x4000040	            0x4157	                                push r15	        98	input.c	FUNCTION_5
0x4000042	            0x4156	                                push r14	        98	input.c	FUNCTION_5
0x4000044	            0x4155	                                push r13	        98	input.c	FUNCTION_5
0x4000046	            0x4154	                                push r12	        98	input.c	FUNCTION_5
0x4000048	          0x4989fd	                            mov r13, rdi	        98	input.c	FUNCTION_5
0x400004b	              0x55	                                push rbp	        98	input.c	FUNCTION_5
0x400004c	              0x53	                                push rbx	        98	input.c	FUNCTION_5
0x400004d	          0x4989f4	                            mov r12, rsi	        98	input.c	FUNCTION_5
0x4000050	        0x4c8b7720	            mov r14, qword [rdi + 0x20] 	        99	input.c	FUNCTION_5
0x4000054	            0x89d5	                            mov ebp, edx	        98	input.c	FUNCTION_5
0x4000056	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       103	input.c	FUNCTION_5	IF_1
0x400005a	          0x4885c0	                           test rax, rax	       103	input.c	FUNCTION_5	IF_1
0x400005d	            0x744f	                            je 0x40000ae	       103	input.c	FUNCTION_5	IF_1
0x400005f	        0x4c8d3cee	                  lea r15, [rsi + rbp*8]	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000063	          0x4c39fe	                            cmp rsi, r15	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000066	     0xf84b4000000	                            je 0x4000120	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x400006c	          0x4889f3	                            mov rbx, rsi	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x400006f	          0x4889f5	                            mov rbp, rsi	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000072	            0xeb04	                           jmp 0x4000078	       104	input.c	FUNCTION_5	IF_1	FOR_1
input_proc_handlers_open	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,0:DO,0:WHILE,0	3
0x4001000	          0x4889f7	                            mov rdi, rsi	      1245	input.c	FUNCTION_46
0x4001003	    0x48c7c6000000	                              mov rsi, 0	      1246	input.c	FUNCTION_46	CALL_1
0x400100a	      0xe900000000	                           jmp 0x400100f	      1246	input.c	FUNCTION_46	CALL_1
input_print_modalias_bits	functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,6:IF,1:DO,0:WHILE,0	60
0x4000a70	            0x4157	                                push r15	      1314	input.c	FUNCTION_52
0x4000a72	            0x4156	                                push r14	      1314	input.c	FUNCTION_52
0x4000a74	          0x4989ce	                            mov r14, rcx	      1314	input.c	FUNCTION_52
0x4000a77	            0x4155	                                push r13	      1314	input.c	FUNCTION_52
0x4000a79	            0x4154	                                push r12	      1314	input.c	FUNCTION_52
0x4000a7b	          0x4589cd	                           mov r13d, r9d	      1314	input.c	FUNCTION_52
0x4000a7e	              0x55	                                push rbp	      1314	input.c	FUNCTION_52
0x4000a7f	          0x4863ee	                         movsxd rbp, esi	      1314	input.c	FUNCTION_52
0x4000a82	              0x53	                                push rbx	      1314	input.c	FUNCTION_52
0x4000a83	            0x85ed	                           test ebp, ebp	      1317	input.c	FUNCTION_52	CALL_2
0x4000a85	      0xbe00000000	                              mov esi, 0	      1317	input.c	FUNCTION_52	CALL_2
0x4000a8a	          0x4489c3	                            mov ebx, r8d	      1314	input.c	FUNCTION_52
0x4000a8d	           0xfbeca	                           movsx ecx, dl	      1317	input.c	FUNCTION_52	CALL_2
0x4000a90	        0x480f49f5	                         cmovns rsi, rbp	      1317	input.c	FUNCTION_52	CALL_2
0x4000a94	    0x48c7c2000000	                              mov rdx, 0	      1317	input.c	FUNCTION_52	CALL_2
0x4000a9b	          0x4989fc	                            mov r12, rdi	      1314	input.c	FUNCTION_52
0x4000a9e	      0xe800000000	                          call 0x4000aa3	      1317	input.c	FUNCTION_52	CALL_2
0x4000aa3	          0x4439eb	                           cmp ebx, r13d	      1318	input.c	FUNCTION_52	FOR_1
0x4000aa6	          0x4189c7	                           mov r15d, eax	      1317	input.c	FUNCTION_52	CALL_2
0x4000aa9	            0x720a	                            jb 0x4000ab5	      1318	input.c	FUNCTION_52	FOR_1
0x4000aab	            0xeb5e	                           jmp 0x4000b0b	      1318	input.c	FUNCTION_52	FOR_1
0x4000aad	          0x83c301	                              add ebx, 1	      1318	input.c	FUNCTION_52	FOR_1
0x4000ab0	          0x4139dd	                           cmp r13d, ebx	      1318	input.c	FUNCTION_52	FOR_1
0x4000ab3	            0x7656	                           jbe 0x4000b0b	      1318	input.c	FUNCTION_52	FOR_1
0x4000ab5	          0x8d433f	                   lea eax, [rbx + 0x3f]	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ab8	            0x85db	                           test ebx, ebx	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000aba	            0x89d9	                            mov ecx, ebx	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000abc	           0xf49c3	                         cmovns eax, ebx	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000abf	          0xc1f91f	                           sar ecx, 0x1f	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ac2	          0xc1e91a	                           shr ecx, 0x1a	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ac5	          0xc1f806	                              sar eax, 6	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ac8	            0x4898	                                    cdqe	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000aca	          0x8d140b	                    lea edx, [rbx + rcx]	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000acd	        0x498b04c6	            mov rax, qword [r14 + rax*8]	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ad1	          0x83e23f	                           and edx, 0x3f	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ad4	            0x29ca	                            sub edx, ecx	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ad6	        0x480fa3d0	                             bt rax, rdx	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000ada	            0x73d1	                           jae 0x4000aad	      1319	input.c	FUNCTION_52	FOR_1	IF_1	CALL_4
0x4000adc	            0x89ee	                            mov esi, ebp	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000ade	      0xb800000000	                              mov eax, 0	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000ae3	          0x4963ff	                        movsxd rdi, r15d	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000ae6	          0x4429fe	                           sub esi, r15d	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000ae9	            0x89d9	                            mov ecx, ebx	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000aeb	    0x48c7c2000000	                              mov rdx, 0	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000af2	           0xf48f0	                          cmovs esi, eax	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000af5	          0x4c01e7	                            add rdi, r12	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000af8	          0x83c301	                              add ebx, 1	      1318	input.c	FUNCTION_52	FOR_1
0x4000afb	          0x4863f6	                         movsxd rsi, esi	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000afe	      0xe800000000	                          call 0x4000b03	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000b03	          0x4101c7	                           add r15d, eax	      1320	input.c	FUNCTION_52	FOR_1	IF_1
0x4000b06	          0x4139dd	                           cmp r13d, ebx	      1318	input.c	FUNCTION_52	FOR_1
0x4000b09	            0x77aa	                            ja 0x4000ab5	      1318	input.c	FUNCTION_52	FOR_1
0x4000b0b	              0x5b	                                 pop rbx	      1322	input.c	FUNCTION_52
0x4000b0c	          0x4489f8	                           mov eax, r15d	      1322	input.c	FUNCTION_52
0x4000b0f	              0x5d	                                 pop rbp	      1322	input.c	FUNCTION_52
0x4000b10	            0x415c	                                 pop r12	      1322	input.c	FUNCTION_52
0x4000b12	            0x415d	                                 pop r13	      1322	input.c	FUNCTION_52
0x4000b14	            0x415e	                                 pop r14	      1322	input.c	FUNCTION_52
0x4000b16	            0x415f	                                 pop r15	      1322	input.c	FUNCTION_52
0x4000b18	              0xc3	                                     ret	      1322	input.c	FUNCTION_52
input_free_minor	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,0:DO,0:WHILE,0	3
0x4000ff0	            0x89fe	                            mov esi, edi	      2410	input.c	FUNCTION_87
0x4000ff2	    0x48c7c7000000	                              mov rdi, 0	      2411	input.c	FUNCTION_87	CALL_1
0x4000ff9	      0xe900000000	                           jmp 0x4000ffe	      2411	input.c	FUNCTION_87	CALL_1
devm_input_allocate_device	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,4:IF,2:DO,0:WHILE,0	34
0x4002540	            0x4154	                                push r12	      1841	input.c	FUNCTION_71
0x4002542	              0x55	                                push rbp	      1841	input.c	FUNCTION_71
0x4002543	          0x4989fc	                            mov r12, rdi	      1841	input.c	FUNCTION_71
0x4002546	              0x53	                                push rbx	      1841	input.c	FUNCTION_71
0x4002547	    0x49c7c0000000	                               mov r8, 0	      1845	input.c	FUNCTION_71	CALL_1
0x400254e	      0xb9ffffffff	                     mov ecx, 0xffffffff	      1845	input.c	FUNCTION_71	CALL_1
0x4002553	      0xbac0004001	                      mov edx, 0x14000c0	      1845	input.c	FUNCTION_71	CALL_1
0x4002558	      0xbe08000000	                              mov esi, 8	      1845	input.c	FUNCTION_71	CALL_1
0x400255d	    0x48c7c7000000	                              mov rdi, 0	      1845	input.c	FUNCTION_71	CALL_1
0x4002564	      0xe800000000	                          call 0x4002569	      1845	input.c	FUNCTION_71	CALL_1
0x4002569	          0x4885c0	                           test rax, rax	      1847	input.c	FUNCTION_71	IF_1
0x400256c	            0x7435	                            je 0x40025a3	      1847	input.c	FUNCTION_71	IF_1
0x400256e	          0x4889c5	                            mov rbp, rax	      1847	input.c	FUNCTION_71	IF_1
0x4002571	      0xe800000000	                          call 0x4002576	      1850	input.c	FUNCTION_71	CALL_2
0x4002576	          0x4885c0	                           test rax, rax	      1851	input.c	FUNCTION_71	IF_2
0x4002579	          0x4889c3	                            mov rbx, rax	      1850	input.c	FUNCTION_71	CALL_2
0x400257c	            0x7429	                            je 0x40025a7	      1851	input.c	FUNCTION_71	IF_2
0x400257e	    0x4c89a0180200	            mov qword [rax + 0x218], r12	      1856	input.c	FUNCTION_71
0x4002585	    0xc68018050000	               mov byte [rax + 0x518], 1	      1857	input.c	FUNCTION_71
0x400258c	          0x4889ee	                            mov rsi, rbp	      1860	input.c	FUNCTION_71	CALL_4
0x400258f	        0x48894500	                    mov qword [rbp], rax	      1859	input.c	FUNCTION_71
0x4002593	          0x4c89e7	                            mov rdi, r12	      1860	input.c	FUNCTION_71	CALL_4
0x4002596	      0xe800000000	                          call 0x400259b	      1860	input.c	FUNCTION_71	CALL_4
0x400259b	          0x4889d8	                            mov rax, rbx	      1862	input.c	FUNCTION_71
0x400259e	              0x5b	                                 pop rbx	      1863	input.c	FUNCTION_71
0x400259f	              0x5d	                                 pop rbp	      1863	input.c	FUNCTION_71
0x40025a0	            0x415c	                                 pop r12	      1863	input.c	FUNCTION_71
0x40025a2	              0xc3	                                     ret	      1863	input.c	FUNCTION_71
0x40025a3	            0x31c0	                            xor eax, eax	      1848	input.c	FUNCTION_71	IF_1
0x40025a5	            0xebf7	                           jmp 0x400259e	      1848	input.c	FUNCTION_71	IF_1
0x40025a7	          0x4889ef	                            mov rdi, rbp	      1852	input.c	FUNCTION_71	IF_2	CALL_3
0x40025aa	      0xe800000000	                          call 0x40025af	      1852	input.c	FUNCTION_71	IF_2	CALL_3
0x40025af	            0x31c0	                            xor eax, eax	      1853	input.c	FUNCTION_71	IF_2
0x40025b1	            0xebeb	                           jmp 0x400259e	      1853	input.c	FUNCTION_71	IF_2
input_dev_release	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,7:IF,0:DO,0:WHILE,0	18
0x4000a20	              0x55	                                push rbp	      1505	input.c	FUNCTION_57
0x4000a21	              0x53	                                push rbx	      1505	input.c	FUNCTION_57
0x4000a22	    0x488d9fe8fdff	                  lea rbx, [rdi - 0x218]	      1506	input.c	FUNCTION_57	CALL_1
0x4000a29	          0x4889fd	                            mov rbp, rdi	      1505	input.c	FUNCTION_57
0x4000a2c	          0x4889df	                            mov rdi, rbx	      1508	input.c	FUNCTION_57	CALL_2
0x4000a2f	      0xe800000000	                          call 0x4000a34	      1508	input.c	FUNCTION_57	CALL_2
0x4000a34	          0x4889df	                            mov rdi, rbx	      1509	input.c	FUNCTION_57	CALL_3
0x4000a37	      0xe800000000	                          call 0x4000a3c	      1509	input.c	FUNCTION_57	CALL_3
0x4000a3c	    0x488bbd28ffff	             mov rdi, qword [rbp - 0xd8]	      1510	input.c	FUNCTION_57	CALL_4
0x4000a43	      0xe800000000	                          call 0x4000a48	      1510	input.c	FUNCTION_57	CALL_4
0x4000a48	    0x488bbdf80200	           mov rdi, qword [rbp + 0x2f8] 	      1511	input.c	FUNCTION_57	CALL_5
0x4000a4f	      0xe800000000	                          call 0x4000a54	      1511	input.c	FUNCTION_57	CALL_5
0x4000a54	          0x4889df	                            mov rdi, rbx	      1512	input.c	FUNCTION_57	CALL_6
0x4000a57	      0xe800000000	                          call 0x4000a5c	      1512	input.c	FUNCTION_57	CALL_6
0x4000a5c	              0x5b	                                 pop rbx	      1515	input.c	FUNCTION_57
0x4000a5d	              0x5d	                                 pop rbp	      1515	input.c	FUNCTION_57
0x4000a5e	            0x31ff	                            xor edi, edi	      1514	input.c	FUNCTION_57	CALL_7
0x4000a60	      0xe900000000	                           jmp 0x4000a65	      1514	input.c	FUNCTION_57	CALL_7
input_proc_devices_open	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,0:DO,0:WHILE,0	3
0x4001010	          0x4889f7	                            mov rdi, rsi	      1181	input.c	FUNCTION_42
0x4001013	    0x48c7c6000000	                              mov rsi, 0	      1182	input.c	FUNCTION_42	CALL_1
0x400101a	      0xe900000000	                           jmp 0x400101f	      1182	input.c	FUNCTION_42	CALL_1
input_release_device	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,3:IF,0:DO,0:WHILE,0	13
0x4000660	              0x55	                                push rbp	       570	input.c	FUNCTION_18
0x4000661	              0x53	                                push rbx	       570	input.c	FUNCTION_18
0x4000662	          0x4889fd	                            mov rbp, rdi	       570	input.c	FUNCTION_18
0x4000665	        0x488b4718	            mov rax, qword [rdi + 0x18] 	       573	input.c	FUNCTION_18	CALL_1
0x4000669	    0x488d98f00100	                  lea rbx, [rax + 0x1f0]	       573	input.c	FUNCTION_18	CALL_1
0x4000670	          0x4889df	                            mov rdi, rbx	       573	input.c	FUNCTION_18	CALL_1
0x4000673	      0xe800000000	                          call 0x4000678	       573	input.c	FUNCTION_18	CALL_1
0x4000678	          0x4889ef	                            mov rdi, rbp	       574	input.c	FUNCTION_18	CALL_2
0x400067b	      0xe870ffffff	         call sym.__input_release_device	       574	input.c	FUNCTION_18	CALL_2
0x4000680	          0x4889df	                            mov rdi, rbx	       575	input.c	FUNCTION_18	CALL_3
0x4000683	              0x5b	                                 pop rbx	       576	input.c	FUNCTION_18
0x4000684	              0x5d	                                 pop rbp	       576	input.c	FUNCTION_18
0x4000685	      0xe900000000	                           jmp 0x400068a	       575	input.c	FUNCTION_18	CALL_3
input_seq_print_bitmap	functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,6:IF,2:DO,0:WHILE,0	63
0x4001f00	            0x4157	                                push r15	      1104	input.c	FUNCTION_40
0x4001f02	            0x4156	                                push r14	      1104	input.c	FUNCTION_40
0x4001f04	    0x49c7c7000000	                              mov r15, 0	      1104	input.c	FUNCTION_40
0x4001f0b	            0x4155	                                push r13	      1104	input.c	FUNCTION_40
0x4001f0d	            0x4154	                                push r12	      1104	input.c	FUNCTION_40
0x4001f0f	          0x4989d4	                            mov r12, rdx	      1104	input.c	FUNCTION_40
0x4001f12	              0x55	                                push rbp	      1104	input.c	FUNCTION_40
0x4001f13	              0x53	                                push rbx	      1104	input.c	FUNCTION_40
0x4001f14	          0x4863d9	                         movsxd rbx, ecx	      1104	input.c	FUNCTION_40
0x4001f17	        0x4883c33f	                           add rbx, 0x3f	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f1b	          0x4889f2	                            mov rdx, rsi	      1109	input.c	FUNCTION_40	CALL_1
0x4001f1e	    0x48c7c6000000	                              mov rsi, 0	      1109	input.c	FUNCTION_40	CALL_1
0x4001f25	        0x4883ec20	                           sub rsp, 0x20	      1104	input.c	FUNCTION_40
0x4001f29	        0x48c1eb06	                              shr rbx, 6	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f2d	          0x4989fd	                            mov r13, rdi	      1104	input.c	FUNCTION_40
0x4001f30	    0x65488b042528	                mov rax, qword gs:[0x28]	      1104	input.c	FUNCTION_40
0x4001f39	      0x4889442418	             mov qword [rsp + 0x18], rax	      1104	input.c	FUNCTION_40
0x4001f3e	            0x31c0	                            xor eax, eax	      1104	input.c	FUNCTION_40
0x4001f40	      0xe800000000	                          call 0x4001f45	      1109	input.c	FUNCTION_40	CALL_1
0x4001f45	          0x83eb01	                              sub ebx, 1	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f48	      0xbd01000000	                              mov ebp, 1	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f4d	    0x49c7c6000000	                              mov r14, 0	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f54	            0x7876	                            js 0x4001fcc	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f56	          0x4863c3	                         movsxd rax, ebx	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f59	      0x488d7c2406	                      lea rdi, [rsp + 6]	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f5e	        0x400fb6cd	                          movzx ecx, bpl	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f62	        0x498b14c4	            mov rdx, qword [r12 + rax*8]	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f66	      0xbe12000000	                           mov esi, 0x12	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f6b	      0xe890f7ffff	           call sym.input_bits_to_string	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f70	            0x85c0	                           test eax, eax	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f72	            0x741f	                            je 0x4001f93	      1112	input.c	FUNCTION_40	FOR_1	IF_1	CALL_3
0x4001f74	            0x85db	                           test ebx, ebx	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f76	          0x4c89f1	                            mov rcx, r14	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f79	      0x488d542406	                      lea rdx, [rsp + 6]	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f7e	        0x490f45cf	                         cmovne rcx, r15	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f82	    0x48c7c6000000	                              mov rsi, 0	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f89	          0x4c89ef	                            mov rdi, r13	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f8c	            0x31ed	                            xor ebp, ebp	      1114	input.c	FUNCTION_40	FOR_1	IF_1
0x4001f8e	      0xe800000000	                          call 0x4001f93	      1115	input.c	FUNCTION_40	FOR_1	IF_1	CALL_4
0x4001f93	          0x83eb01	                              sub ebx, 1	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f96	          0x83fbff	             cmp ebx, 0xffffffffffffffff	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f99	            0x75bb	                           jne 0x4001f56	      1111	input.c	FUNCTION_40	FOR_1	CALL_2
0x4001f9b	          0x4084ed	                           test bpl, bpl	      1122	input.c	FUNCTION_40	IF_2
0x4001f9e	            0x752c	                           jne 0x4001fcc	      1122	input.c	FUNCTION_40	IF_2
0x4001fa0	      0xbe0a000000	                            mov esi, 0xa	      1125	input.c	FUNCTION_40	CALL_6
0x4001fa5	          0x4c89ef	                            mov rdi, r13	      1125	input.c	FUNCTION_40	CALL_6
0x4001fa8	      0xe800000000	                          call 0x4001fad	      1125	input.c	FUNCTION_40	CALL_6
0x4001fad	      0x488b442418	            mov rax, qword [rsp + 0x18] 	      1126	input.c	FUNCTION_40
0x4001fb2	    0x654833042528	                xor rax, qword gs:[0x28]	      1126	input.c	FUNCTION_40
0x4001fbb	            0x751e	                           jne 0x4001fdb	      1126	input.c	FUNCTION_40
0x4001fbd	        0x4883c420	                           add rsp, 0x20	      1126	input.c	FUNCTION_40
0x4001fc1	              0x5b	                                 pop rbx	      1126	input.c	FUNCTION_40
0x4001fc2	              0x5d	                                 pop rbp	      1126	input.c	FUNCTION_40
0x4001fc3	            0x415c	                                 pop r12	      1126	input.c	FUNCTION_40
0x4001fc5	            0x415d	                                 pop r13	      1126	input.c	FUNCTION_40
0x4001fc7	            0x415e	                                 pop r14	      1126	input.c	FUNCTION_40
0x4001fc9	            0x415f	                                 pop r15	      1126	input.c	FUNCTION_40
0x4001fcb	              0xc3	                                     ret	      1126	input.c	FUNCTION_40
0x4001fcc	      0xbe30000000	                           mov esi, 0x30	      1123	input.c	FUNCTION_40	CALL_5
0x4001fd1	          0x4c89ef	                            mov rdi, r13	      1123	input.c	FUNCTION_40	CALL_5
0x4001fd4	      0xe800000000	                          call 0x4001fd9	      1123	input.c	FUNCTION_40	CALL_5
0x4001fd9	            0xebc5	                           jmp 0x4001fa0	      1123	input.c	FUNCTION_40	CALL_5
0x4001fdb	      0xe800000000	         call sym.input_devices_seq_show	      1126	input.c	FUNCTION_40
input_get_new_minor	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,2:IF,2:DO,0:WHILE,0	22
0x4000fa0	            0x85ff	                           test edi, edi	      2387	input.c	FUNCTION_86	IF_1
0x4000fa2	              0x53	                                push rbx	      2381	input.c	FUNCTION_86
0x4000fa3	            0x7823	                            js 0x4000fc8	      2387	input.c	FUNCTION_86	IF_1
0x4000fa5	            0x89d3	                            mov ebx, edx	      2387	input.c	FUNCTION_86	IF_1
0x4000fa7	          0x8d1437	                    lea edx, [rdi + rsi]	      2388	input.c	FUNCTION_86	IF_1	CALL_1
0x4000faa	      0xb9c0004001	                      mov ecx, 0x14000c0	      2388	input.c	FUNCTION_86	IF_1	CALL_1
0x4000faf	            0x89fe	                            mov esi, edi	      2388	input.c	FUNCTION_86	IF_1	CALL_1
0x4000fb1	    0x48c7c7000000	                              mov rdi, 0	      2388	input.c	FUNCTION_86	IF_1	CALL_1
0x4000fb8	      0xe800000000	                          call 0x4000fbd	      2388	input.c	FUNCTION_86	IF_1	CALL_1
0x4000fbd	            0x89c2	                            mov edx, eax	      2392	input.c	FUNCTION_86	IF_1	IF_2
0x4000fbf	            0xf7d2	                                 not edx	      2392	input.c	FUNCTION_86	IF_1	IF_2
0x4000fc1	          0xc1ea1f	                           shr edx, 0x1f	      2392	input.c	FUNCTION_86	IF_1	IF_2
0x4000fc4	            0x38d3	                              cmp bl, dl	      2392	input.c	FUNCTION_86	IF_1	IF_2
0x4000fc6	            0x761c	                           jbe 0x4000fe4	      2392	input.c	FUNCTION_86	IF_1	IF_2
0x4000fc8	              0x5b	                                 pop rbx	      2399	input.c	FUNCTION_86
0x4000fc9	      0xb9c0004001	                      mov ecx, 0x14000c0	      2396	input.c	FUNCTION_86	CALL_2
0x4000fce	      0xba00040000	                          mov edx, 0x400	      2396	input.c	FUNCTION_86	CALL_2
0x4000fd3	      0xbe00010000	                          mov esi, 0x100	      2396	input.c	FUNCTION_86	CALL_2
0x4000fd8	    0x48c7c7000000	                              mov rdi, 0	      2396	input.c	FUNCTION_86	CALL_2
0x4000fdf	      0xe900000000	                           jmp 0x4000fe4	      2396	input.c	FUNCTION_86	CALL_2
0x4000fe4	              0x5b	                                 pop rbx	      2399	input.c	FUNCTION_86
0x4000fe5	              0xc3	                                     ret	      2399	input.c	FUNCTION_86
input_add_uevent_bm_var	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,2:IF,2:DO,0:WHILE,0	45
0x40018c0	            0x4155	                                push r13	      1523	input.c	FUNCTION_58
0x40018c2	            0x4154	                                push r12	      1523	input.c	FUNCTION_58
0x40018c4	          0x4989d4	                            mov r12, rdx	      1523	input.c	FUNCTION_58
0x40018c7	              0x55	                                push rbp	      1523	input.c	FUNCTION_58
0x40018c8	              0x53	                                push rbx	      1523	input.c	FUNCTION_58
0x40018c9	          0x4889f2	                            mov rdx, rsi	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018cc	    0x48c7c6000000	                              mov rsi, 0	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018d3	          0x4889fb	                            mov rbx, rdi	      1523	input.c	FUNCTION_58
0x40018d6	          0x4189cd	                           mov r13d, ecx	      1523	input.c	FUNCTION_58
0x40018d9	      0xe800000000	                          call 0x40018de	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018de	            0x85c0	                           test eax, eax	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018e0	            0x7555	                           jne 0x4001937	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018e2	            0x89c5	                            mov ebp, eax	      1526	input.c	FUNCTION_58	IF_1	CALL_1
0x40018e4	    0x8b831c090000	           mov eax, dword [rbx + 0x91c] 	      1530	input.c	FUNCTION_58
0x40018ea	      0xbe00080000	                          mov esi, 0x800	      1529	input.c	FUNCTION_58	CALL_2
0x40018ef	          0x4531c0	                            xor r8d, r8d	      1529	input.c	FUNCTION_58	CALL_2
0x40018f2	          0x4489e9	                           mov ecx, r13d	      1529	input.c	FUNCTION_58	CALL_2
0x40018f5	          0x4c89e2	                            mov rdx, r12	      1529	input.c	FUNCTION_58	CALL_2
0x40018f8	            0x29c6	                            sub esi, eax	      1529	input.c	FUNCTION_58	CALL_2
0x40018fa	          0x83e801	                              sub eax, 1	      1529	input.c	FUNCTION_58	CALL_2
0x40018fd	            0x4898	                                    cdqe	      1529	input.c	FUNCTION_58	CALL_2
0x40018ff	    0x488dbc031c01	           lea rdi, [rbx + rax + 0x11c] 	      1529	input.c	FUNCTION_58	CALL_2
0x4001907	      0xe8b4feffff	             call sym.input_print_bitmap	      1529	input.c	FUNCTION_58	CALL_2
0x400190c	    0x4863bb1c0900	        movsxd rdi, dword [rbx + 0x91c] 	      1532	input.c	FUNCTION_58	IF_2
0x4001913	      0xb900080000	                          mov ecx, 0x800	      1532	input.c	FUNCTION_58	IF_2
0x4001918	          0x4863f0	                         movsxd rsi, eax	      1532	input.c	FUNCTION_58	IF_2
0x400191b	          0x4829f9	                            sub rcx, rdi	      1532	input.c	FUNCTION_58	IF_2
0x400191e	          0x4889fa	                            mov rdx, rdi	      1532	input.c	FUNCTION_58	IF_2
0x4001921	          0x4839ce	                            cmp rsi, rcx	      1532	input.c	FUNCTION_58	IF_2
0x4001924	            0x7311	                           jae 0x4001937	      1532	input.c	FUNCTION_58	IF_2
0x4001926	             0x1c2	                            add edx, eax	      1535	input.c	FUNCTION_58
0x4001928	            0x89e8	                            mov eax, ebp	      1537	input.c	FUNCTION_58
0x400192a	    0x89931c090000	            mov dword [rbx + 0x91c], edx	      1535	input.c	FUNCTION_58
0x4001930	              0x5b	                                 pop rbx	      1537	input.c	FUNCTION_58
0x4001931	              0x5d	                                 pop rbp	      1537	input.c	FUNCTION_58
0x4001932	            0x415c	                                 pop r12	      1537	input.c	FUNCTION_58
0x4001934	            0x415d	                                 pop r13	      1537	input.c	FUNCTION_58
0x4001936	              0xc3	                                     ret	      1537	input.c	FUNCTION_58
0x4001937	      0xbdf4ffffff	                     mov ebp, 0xfffffff4	      1527	input.c	FUNCTION_58	IF_1
0x400193c	              0x5b	                                 pop rbx	      1537	input.c	FUNCTION_58
0x400193d	            0x89e8	                            mov eax, ebp	      1537	input.c	FUNCTION_58
0x400193f	              0x5d	                                 pop rbp	      1537	input.c	FUNCTION_58
0x4001940	            0x415c	                                 pop r12	      1537	input.c	FUNCTION_58
0x4001942	            0x415d	                                 pop r13	      1537	input.c	FUNCTION_58
0x4001944	              0xc3	                                     ret	      1537	input.c	FUNCTION_58
input_flush_device	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,3:IF,2:DO,0:WHILE,0	26
0x40004a0	            0x4154	                                push r12	       623	input.c	FUNCTION_20
0x40004a2	              0x55	                                push rbp	       623	input.c	FUNCTION_20
0x40004a3	          0x4989f4	                            mov r12, rsi	       623	input.c	FUNCTION_20
0x40004a6	              0x53	                                push rbx	       623	input.c	FUNCTION_20
0x40004a7	        0x4883ec08	                              sub rsp, 8	       623	input.c	FUNCTION_20
0x40004ab	        0x488b5f18	            mov rbx, qword [rdi + 0x18] 	       624	input.c	FUNCTION_20
0x40004af	    0x488dabf00100	                  lea rbp, [rbx + 0x1f0]	       627	input.c	FUNCTION_20	CALL_1
0x40004b6	          0x4889ef	                            mov rdi, rbp	       627	input.c	FUNCTION_20	CALL_1
0x40004b9	      0xe800000000	                          call 0x40004be	       627	input.c	FUNCTION_20	CALL_1
0x40004be	            0x85c0	                           test eax, eax	       628	input.c	FUNCTION_20	IF_1
0x40004c0	            0x7527	                           jne 0x40004e9	       628	input.c	FUNCTION_20	IF_1
0x40004c2	    0x488b93d00100	           mov rdx, qword [rbx + 0x1d0] 	       631	input.c	FUNCTION_20	IF_2
0x40004c9	          0x4885d2	                           test rdx, rdx	       631	input.c	FUNCTION_20	IF_2
0x40004cc	            0x740b	                            je 0x40004d9	       631	input.c	FUNCTION_20	IF_2
0x40004ce	          0x4c89e6	                            mov rsi, r12	       632	input.c	FUNCTION_20	CALL_2
0x40004d1	          0x4889df	                            mov rdi, rbx	       632	input.c	FUNCTION_20	CALL_2
0x40004d4	      0xe800000000	                          call 0x40004d9	       632	input.c	FUNCTION_20	CALL_2
0x40004d9	          0x4889ef	                            mov rdi, rbp	       634	input.c	FUNCTION_20	CALL_3
0x40004dc	        0x89442404	                mov dword [rsp + 4], eax	       634	input.c	FUNCTION_20	CALL_3
0x40004e0	      0xe800000000	                          call 0x40004e5	       634	input.c	FUNCTION_20	CALL_3
0x40004e5	        0x8b442404	                mov eax, dword [rsp + 4]	       634	input.c	FUNCTION_20	CALL_3
0x40004e9	        0x4883c408	                              add rsp, 8	       636	input.c	FUNCTION_20
0x40004ed	              0x5b	                                 pop rbx	       636	input.c	FUNCTION_20
0x40004ee	              0x5d	                                 pop rbp	       636	input.c	FUNCTION_20
0x40004ef	            0x415c	                                 pop r12	       636	input.c	FUNCTION_20
0x40004f1	              0xc3	                                     ret	       636	input.c	FUNCTION_20
input_exit	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,4:IF,0:DO,0:WHILE,0	14
0x4000040	            0x4157	                                push r15	        98	input.c	FUNCTION_5
0x4000042	            0x4156	                                push r14	        98	input.c	FUNCTION_5
0x4000044	            0x4155	                                push r13	        98	input.c	FUNCTION_5
0x4000046	            0x4154	                                push r12	        98	input.c	FUNCTION_5
0x4000048	          0x4989fd	                            mov r13, rdi	        98	input.c	FUNCTION_5
0x400004b	              0x55	                                push rbp	        98	input.c	FUNCTION_5
0x400004c	              0x53	                                push rbx	        98	input.c	FUNCTION_5
0x400004d	          0x4989f4	                            mov r12, rsi	        98	input.c	FUNCTION_5
0x4000050	        0x4c8b7720	            mov r14, qword [rdi + 0x20] 	        99	input.c	FUNCTION_5
0x4000054	            0x89d5	                            mov ebp, edx	        98	input.c	FUNCTION_5
0x4000056	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       103	input.c	FUNCTION_5	IF_1
0x400005a	          0x4885c0	                           test rax, rax	       103	input.c	FUNCTION_5	IF_1
0x400005d	            0x744f	                            je 0x40000ae	       103	input.c	FUNCTION_5	IF_1
0x400005f	              0x4c	                                 invalid	       104	input.c	FUNCTION_5	IF_1	FOR_1
input_default_getkeycode	functions,0:SWITCH,0:FOR,0:ELSE,1:CALL,3:IF,4:DO,0:WHILE,0	42
0x4000160	    0x8b97d8000000	            mov edx, dword [rdi + 0xd8] 	       784	input.c	FUNCTION_26	IF_1
0x4000166	            0x85d2	                           test edx, edx	       784	input.c	FUNCTION_26	IF_1
0x4000168	            0x7449	                            je 0x40001b3	       784	input.c	FUNCTION_26	IF_1
0x400016a	          0xf60601	                      test byte [rsi], 1	       787	input.c	FUNCTION_26	IF_2
0x400016d	            0x7434	                            je 0x40001a3	       787	input.c	FUNCTION_26	IF_2
0x400016f	         0xfb74602	               movzx eax, word [rsi + 2]	       788	input.c	FUNCTION_26	IF_2
0x4000173	    0x3987d4000000	            cmp dword [rdi + 0xd4], eax 	       795	input.c	FUNCTION_26	IF_4
0x4000179	            0x7638	                           jbe 0x40001b3	       795	input.c	FUNCTION_26	IF_4
0x400017b	          0x83fa01	                              cmp edx, 1	       766	input.c	FUNCTION_25	SWITCH_1
0x400017e	    0x488b8fe00000	            mov rcx, qword [rdi + 0xe0] 	       766	input.c	FUNCTION_25	SWITCH_1
0x4000185	            0x7439	                            je 0x40001c0	       766	input.c	FUNCTION_25	SWITCH_1
0x4000187	          0x83fa02	                              cmp edx, 2	       766	input.c	FUNCTION_25	SWITCH_1
0x400018a	            0x752d	                           jne 0x40001b9	       766	input.c	FUNCTION_25	SWITCH_1
0x400018c	            0x89c2	                            mov edx, eax	       771	input.c	FUNCTION_25	SWITCH_1
0x400018e	         0xfb71451	           movzx edx, word [rcx + rdx*2]	       771	input.c	FUNCTION_25	SWITCH_1
0x4000192	        0x66894602	                  mov word [rsi + 2], ax	       799	input.c	FUNCTION_26
0x4000196	          0x894608	                mov dword [rsi + 8], eax	       801	input.c	FUNCTION_26	CALL_3
0x4000199	            0x31c0	                            xor eax, eax	       803	input.c	FUNCTION_26
0x400019b	          0x895604	                mov dword [rsi + 4], edx	       798	input.c	FUNCTION_26	CALL_2
0x400019e	        0xc6460104	                   mov byte [rsi + 1], 4	       800	input.c	FUNCTION_26
0x40001a2	              0xc3	                                     ret	       803	input.c	FUNCTION_26
0x40001a3	         0xfb64601	               movzx eax, byte [rsi + 1]	       737	input.c	FUNCTION_24	SWITCH_1
0x40001a7	            0x3c02	                               cmp al, 2	       737	input.c	FUNCTION_24	SWITCH_1
0x40001a9	            0x7428	                            je 0x40001d3	       737	input.c	FUNCTION_24	SWITCH_1
0x40001ab	            0x3c04	                               cmp al, 4	       737	input.c	FUNCTION_24	SWITCH_1
0x40001ad	            0x741f	                            je 0x40001ce	       737	input.c	FUNCTION_24	SWITCH_1
0x40001af	            0x3c01	                               cmp al, 1	       737	input.c	FUNCTION_24	SWITCH_1
0x40001b1	            0x7415	                            je 0x40001c8	       737	input.c	FUNCTION_24	SWITCH_1
0x40001b3	      0xb8eaffffff	                     mov eax, 0xffffffea	       785	input.c	FUNCTION_26	IF_1
0x40001b8	              0xc3	                                     ret	       804	input.c	FUNCTION_26
0x40001b9	            0x89c2	                            mov edx, eax	       774	input.c	FUNCTION_25	SWITCH_1
0x40001bb	          0x8b1491	            mov edx, dword [rcx + rdx*4]	       774	input.c	FUNCTION_25	SWITCH_1
0x40001be	            0xebd2	                           jmp 0x4000192	       774	input.c	FUNCTION_25	SWITCH_1
0x40001c0	            0x89c2	                            mov edx, eax	       768	input.c	FUNCTION_25	SWITCH_1
0x40001c2	         0xfb61411	             movzx edx, byte [rcx + rdx]	       768	input.c	FUNCTION_25	SWITCH_1
0x40001c6	            0xebca	                           jmp 0x4000192	       768	input.c	FUNCTION_25	SWITCH_1
0x40001c8	         0xfb64608	               movzx eax, byte [rsi + 8]	       739	input.c	FUNCTION_24	SWITCH_1
0x40001cc	            0xeba5	                           jmp 0x4000173	       739	input.c	FUNCTION_24	SWITCH_1
0x40001ce	          0x8b4608	                mov eax, dword [rsi + 8]	       747	input.c	FUNCTION_24	SWITCH_1
0x40001d1	            0xeba0	                           jmp 0x4000173	       747	input.c	FUNCTION_24	SWITCH_1
0x40001d3	         0xfb74608	               movzx eax, word [rsi + 8]	       743	input.c	FUNCTION_24	SWITCH_1
0x40001d7	            0xeb9a	                           jmp 0x4000173	       743	input.c	FUNCTION_24	SWITCH_1
input_seq_stop	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,1:IF,1:DO,0:WHILE,0	5
0x4000500	        0x807f7a00	                cmp byte [rdi + 0x7a], 0	      1098	input.c	FUNCTION_39	IF_1
0x4000504	            0x7502	                           jne 0x4000508	      1098	input.c	FUNCTION_39	IF_1
0x4000506	            0xf3c3	                                     ret	      1098	input.c	FUNCTION_39	IF_1
0x4000508	    0x48c7c7000000	                              mov rdi, 0	      1099	input.c	FUNCTION_39	CALL_1
0x400050f	      0xe900000000	                           jmp 0x4000514	      1099	input.c	FUNCTION_39	CALL_1
input_to_handler	functions,0:SWITCH,0:FOR,2:ELSE,1:CALL,3:IF,6:DO,0:WHILE,0	82
0x4000040	            0x4157	                                push r15	        98	input.c	FUNCTION_5
0x4000042	            0x4156	                                push r14	        98	input.c	FUNCTION_5
0x4000044	            0x4155	                                push r13	        98	input.c	FUNCTION_5
0x4000046	            0x4154	                                push r12	        98	input.c	FUNCTION_5
0x4000048	          0x4989fd	                            mov r13, rdi	        98	input.c	FUNCTION_5
0x400004b	              0x55	                                push rbp	        98	input.c	FUNCTION_5
0x400004c	              0x53	                                push rbx	        98	input.c	FUNCTION_5
0x400004d	          0x4989f4	                            mov r12, rsi	        98	input.c	FUNCTION_5
0x4000050	        0x4c8b7720	            mov r14, qword [rdi + 0x20] 	        99	input.c	FUNCTION_5
0x4000054	            0x89d5	                            mov ebp, edx	        98	input.c	FUNCTION_5
0x4000056	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       103	input.c	FUNCTION_5	IF_1
0x400005a	          0x4885c0	                           test rax, rax	       103	input.c	FUNCTION_5	IF_1
0x400005d	            0x744f	                            je 0x40000ae	       103	input.c	FUNCTION_5	IF_1
0x400005f	        0x4c8d3cee	                  lea r15, [rsi + rbp*8]	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000063	          0x4c39fe	                            cmp rsi, r15	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000066	     0xf84b4000000	                            je 0x4000120	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x400006c	          0x4889f3	                            mov rbx, rsi	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x400006f	          0x4889f5	                            mov rbp, rsi	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000072	            0xeb04	                           jmp 0x4000078	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000074	        0x498b4618	            mov rax, qword [r14 + 0x18] 	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x4000078	         0xfb75302	               movzx edx, word [rbx + 2]	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x400007c	           0xfb733	                   movzx esi, word [rbx]	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x400007f	          0x4c89ef	                            mov rdi, r13	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x4000082	          0x8b4b04	                mov ecx, dword [rbx + 4]	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x4000085	      0xe800000000	                          call 0x400008a	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x400008a	            0x84c0	                             test al, al	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x400008c	            0x7510	                           jne 0x400009e	       105	input.c	FUNCTION_5	IF_1	FOR_1	IF_2	CALL_1
0x400008e	          0x4839dd	                            cmp rbp, rbx	       107	input.c	FUNCTION_5	IF_1	FOR_1	IF_3
0x4000091	            0x7407	                            je 0x400009a	       107	input.c	FUNCTION_5	IF_1	FOR_1	IF_3
0x4000093	          0x488b03	                    mov rax, qword [rbx]	       108	input.c	FUNCTION_5	IF_1	FOR_1	IF_3
0x4000096	        0x48894500	                    mov qword [rbp], rax	       108	input.c	FUNCTION_5	IF_1	FOR_1	IF_3
0x400009a	        0x4883c508	                              add rbp, 8	       109	input.c	FUNCTION_5	IF_1	FOR_1
0x400009e	        0x4883c308	                              add rbx, 8	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x40000a2	          0x4c39fb	                            cmp rbx, r15	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x40000a5	            0x75cd	                           jne 0x4000074	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x40000a7	          0x4c29e5	                            sub rbp, r12	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x40000aa	        0x48c1ed03	                              shr rbp, 3	       104	input.c	FUNCTION_5	IF_1	FOR_1
0x40000ae	            0x31c0	                            xor eax, eax	       115	input.c	FUNCTION_5	IF_4
0x40000b0	            0x85ed	                           test ebp, ebp	       114	input.c	FUNCTION_5	IF_4
0x40000b2	            0x7418	                            je 0x40000cc	       114	input.c	FUNCTION_5	IF_4
0x40000b4	        0x498b4610	            mov rax, qword [r14 + 0x10] 	       117	input.c	FUNCTION_5	IF_5
0x40000b8	          0x4885c0	                           test rax, rax	       117	input.c	FUNCTION_5	IF_5
0x40000bb	            0x741a	                            je 0x40000d7	       117	input.c	FUNCTION_5	IF_5
0x40000bd	            0x89ea	                            mov edx, ebp	       118	input.c	FUNCTION_5	CALL_2
0x40000bf	          0x4c89e6	                            mov rsi, r12	       118	input.c	FUNCTION_5	CALL_2
0x40000c2	          0x4c89ef	                            mov rdi, r13	       118	input.c	FUNCTION_5	CALL_2
0x40000c5	      0xe800000000	                          call 0x40000ca	       118	input.c	FUNCTION_5	CALL_2
0x40000ca	            0x89e8	                            mov eax, ebp	       118	input.c	FUNCTION_5	CALL_2
0x40000cc	              0x5b	                                 pop rbx	       124	input.c	FUNCTION_5
0x40000cd	              0x5d	                                 pop rbp	       124	input.c	FUNCTION_5
0x40000ce	            0x415c	                                 pop r12	       124	input.c	FUNCTION_5
0x40000d0	            0x415d	                                 pop r13	       124	input.c	FUNCTION_5
0x40000d2	            0x415e	                                 pop r14	       124	input.c	FUNCTION_5
0x40000d4	            0x415f	                                 pop r15	       124	input.c	FUNCTION_5
0x40000d6	              0xc3	                                     ret	       124	input.c	FUNCTION_5
0x40000d7	        0x498b4608	                mov rax, qword [r14 + 8]	       119	input.c	FUNCTION_5	ELSE_1	IF_6
0x40000db	          0x4885c0	                           test rax, rax	       119	input.c	FUNCTION_5	ELSE_1	IF_6
0x40000de	            0x7433	                            je 0x4000113	       119	input.c	FUNCTION_5	ELSE_1	IF_6
0x40000e0	            0x89ea	                            mov edx, ebp	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000e2	        0x498d1cd4	                  lea rbx, [r12 + rdx*8]	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000e6	          0x4939dc	                            cmp r12, rbx	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000e9	            0x7506	                           jne 0x40000f1	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000eb	            0xeb26	                           jmp 0x4000113	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000ed	        0x498b4608	                mov rax, qword [r14 + 8]	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000f1	      0x418b4c2404	                mov ecx, dword [r12 + 4]	       121	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000f6	    0x410fb7542402	               movzx edx, word [r12 + 2]	       121	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x40000fc	        0x4983c408	                              add r12, 8	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x4000100	    0x410fb77424f8	               movzx esi, word [r12 - 8]	       121	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x4000106	          0x4c89ef	                            mov rdi, r13	       121	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x4000109	      0xe800000000	                          call 0x400010e	       121	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x400010e	          0x4939dc	                            cmp r12, rbx	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x4000111	            0x75da	                           jne 0x40000ed	       120	input.c	FUNCTION_5	ELSE_1	IF_6	FOR_2
0x4000113	              0x5b	                                 pop rbx	       124	input.c	FUNCTION_5
0x4000114	            0x89e8	                            mov eax, ebp	       124	input.c	FUNCTION_5
0x4000116	              0x5d	                                 pop rbp	       124	input.c	FUNCTION_5
0x4000117	            0x415c	                                 pop r12	       124	input.c	FUNCTION_5
0x4000119	            0x415d	                                 pop r13	       124	input.c	FUNCTION_5
0x400011b	            0x415e	                                 pop r14	       124	input.c	FUNCTION_5
0x400011d	            0x415f	                                 pop r15	       124	input.c	FUNCTION_5
0x400011f	              0xc3	                                     ret	       124	input.c	FUNCTION_5
0x4000120	            0x31c0	                            xor eax, eax	       115	input.c	FUNCTION_5	IF_4
0x4000122	            0xeba8	                           jmp 0x40000cc	       115	input.c	FUNCTION_5	IF_4
input_print_bitmap	functions,0:SWITCH,0:FOR,1:ELSE,0:CALL,8:IF,4:DO,0:WHILE,0	77
0x40017c0	          0x4c63c9	                          movsxd r9, ecx	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017c3	            0x4157	                                push r15	      1429	input.c	FUNCTION_56
0x40017c5	            0x4156	                                push r14	      1429	input.c	FUNCTION_56
0x40017c7	        0x4983c13f	                            add r9, 0x3f	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017cb	            0x4155	                                push r13	      1429	input.c	FUNCTION_56
0x40017cd	            0x4154	                                push r12	      1429	input.c	FUNCTION_56
0x40017cf	        0x49c1e906	                               shr r9, 6	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017d3	              0x55	                                push rbp	      1429	input.c	FUNCTION_56
0x40017d4	              0x53	                                push rbx	      1429	input.c	FUNCTION_56
0x40017d5	          0x4589ce	                           mov r14d, r9d	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017d8	          0x4889fd	                            mov rbp, rdi	      1429	input.c	FUNCTION_56
0x40017db	            0x89f3	                            mov ebx, esi	      1429	input.c	FUNCTION_56
0x40017dd	        0x4883ec10	                           sub rsp, 0x10	      1429	input.c	FUNCTION_56
0x40017e1	        0x4183ee01	                             sub r14d, 1	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017e5	        0x48891424	                    mov qword [rsp], rdx	      1429	input.c	FUNCTION_56
0x40017e9	      0x448944240c	              mov dword [rsp + 0xc], r8d	      1429	input.c	FUNCTION_56
0x40017ee	     0xf88a9000000	                            js 0x400189d	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017f4	    0x41bd01000000	                             mov r13d, 1	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017fa	          0x4531ff	                          xor r15d, r15d	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x40017fd	          0x4531e4	                          xor r12d, r12d	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x4001800	        0x488b1424	                    mov rdx, qword [rsp]	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001804	          0x4963c6	                        movsxd rax, r14d	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001807	            0x89de	                            mov esi, ebx	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001809	          0x4429fe	                           sub esi, r15d	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x400180c	          0x4963ff	                        movsxd rdi, r15d	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x400180f	        0x410fb6cd	                         movzx ecx, r13b	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001813	        0x410f48f4	                         cmovs esi, r12d	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001817	          0x4801ef	                            add rdi, rbp	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x400181a	        0x488b14c2	            mov rdx, qword [rdx + rax*8]	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x400181e	      0xe8ddfeffff	           call sym.input_bits_to_string	      1435	input.c	FUNCTION_56	FOR_1	CALL_3
0x4001823	          0x4101c7	                           add r15d, eax	      1437	input.c	FUNCTION_56	FOR_1	IF_1
0x4001826	            0x7429	                            je 0x4001851	      1437	input.c	FUNCTION_56	FOR_1	IF_1
0x4001828	          0x4585f6	                         test r14d, r14d	      1439	input.c	FUNCTION_56	FOR_1	IF_1	IF_2
0x400182b	            0x7433	                            je 0x4001860	      1439	input.c	FUNCTION_56	FOR_1	IF_1	IF_2
0x400182d	            0x89de	                            mov esi, ebx	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x400182f	          0x4963ff	                        movsxd rdi, r15d	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001832	    0x48c7c2000000	                              mov rdx, 0	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001839	          0x4429fe	                           sub esi, r15d	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x400183c	        0x410f48f4	                         cmovs esi, r12d	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001840	          0x4801ef	                            add rdi, rbp	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001843	          0x4531ed	                          xor r13d, r13d	      1438	input.c	FUNCTION_56	FOR_1	IF_1
0x4001846	          0x4863f6	                         movsxd rsi, esi	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001849	      0xe800000000	                          call 0x400184e	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x400184e	          0x4101c7	                           add r15d, eax	      1440	input.c	FUNCTION_56	FOR_1	IF_1	CALL_5
0x4001851	        0x4183ee01	                             sub r14d, 1	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x4001855	        0x4183feff	            cmp r14d, 0xffffffffffffffff	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x4001859	            0x75a5	                           jne 0x4001800	      1434	input.c	FUNCTION_56	FOR_1	CALL_1
0x400185b	          0x4585ff	                         test r15d, r15d	      1447	input.c	FUNCTION_56	IF_3
0x400185e	            0x743d	                            je 0x400189d	      1447	input.c	FUNCTION_56	IF_3
0x4001860	        0x8b44240c	              mov eax, dword [rsp + 0xc]	      1450	input.c	FUNCTION_56	IF_4
0x4001864	            0x85c0	                           test eax, eax	      1450	input.c	FUNCTION_56	IF_4
0x4001866	            0x7423	                            je 0x400188b	      1450	input.c	FUNCTION_56	IF_4
0x4001868	          0x4429fb	                           sub ebx, r15d	      1451	input.c	FUNCTION_56	CALL_8
0x400186b	      0xb800000000	                              mov eax, 0	      1451	input.c	FUNCTION_56	CALL_8
0x4001870	          0x4963ff	                        movsxd rdi, r15d	      1451	input.c	FUNCTION_56	CALL_8
0x4001873	           0xf48d8	                          cmovs ebx, eax	      1451	input.c	FUNCTION_56	CALL_8
0x4001876	    0x48c7c2000000	                              mov rdx, 0	      1451	input.c	FUNCTION_56	CALL_8
0x400187d	          0x4801ef	                            add rdi, rbp	      1451	input.c	FUNCTION_56	CALL_8
0x4001880	          0x4863f3	                         movsxd rsi, ebx	      1451	input.c	FUNCTION_56	CALL_8
0x4001883	      0xe800000000	                          call 0x4001888	      1451	input.c	FUNCTION_56	CALL_8
0x4001888	          0x4101c7	                           add r15d, eax	      1451	input.c	FUNCTION_56	CALL_8
0x400188b	        0x4883c410	                           add rsp, 0x10	      1454	input.c	FUNCTION_56
0x400188f	          0x4489f8	                           mov eax, r15d	      1454	input.c	FUNCTION_56
0x4001892	              0x5b	                                 pop rbx	      1454	input.c	FUNCTION_56
0x4001893	              0x5d	                                 pop rbp	      1454	input.c	FUNCTION_56
0x4001894	            0x415c	                                 pop r12	      1454	input.c	FUNCTION_56
0x4001896	            0x415d	                                 pop r13	      1454	input.c	FUNCTION_56
0x4001898	            0x415e	                                 pop r14	      1454	input.c	FUNCTION_56
0x400189a	            0x415f	                                 pop r15	      1454	input.c	FUNCTION_56
0x400189c	              0xc3	                                     ret	      1454	input.c	FUNCTION_56
0x400189d	          0x4863f3	                         movsxd rsi, ebx	      1448	input.c	FUNCTION_56	CALL_6
0x40018a0	            0x31c9	                            xor ecx, ecx	      1448	input.c	FUNCTION_56	CALL_6
0x40018a2	    0x48c7c2000000	                              mov rdx, 0	      1448	input.c	FUNCTION_56	CALL_6
0x40018a9	          0x4889ef	                            mov rdi, rbp	      1448	input.c	FUNCTION_56	CALL_6
0x40018ac	      0xe800000000	                          call 0x40018b1	      1448	input.c	FUNCTION_56	CALL_6
0x40018b1	          0x4189c7	                           mov r15d, eax	      1448	input.c	FUNCTION_56	CALL_6
0x40018b4	            0xebaa	                           jmp 0x4001860	      1448	input.c	FUNCTION_56	CALL_6
input_attach_handler	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,4:IF,2:DO,0:WHILE,0	54
0x4001330	            0x4154	                                push r12	       988	input.c	FUNCTION_32
0x4001332	          0x4989f4	                            mov r12, rsi	       988	input.c	FUNCTION_32
0x4001335	              0x55	                                push rbp	       988	input.c	FUNCTION_32
0x4001336	          0x4889fd	                            mov rbp, rdi	       988	input.c	FUNCTION_32
0x4001339	              0x53	                                push rbx	       988	input.c	FUNCTION_32
0x400133a	        0x488b5e50	            mov rbx, qword [rsi + 0x50] 	       977	input.c	FUNCTION_31	FOR_1
0x400133e	            0xeb2f	                           jmp 0x400136f	       977	input.c	FUNCTION_31	FOR_1
0x4001340	          0x4889de	                            mov rsi, rbx	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x4001343	          0x4889ef	                            mov rdi, rbp	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x4001346	      0xe800000000	                          call 0x400134b	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x400134b	            0x84c0	                             test al, al	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x400134d	            0x7419	                            je 0x4001368	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x400134f	      0x498b442420	            mov rax, qword [r12 + 0x20] 	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001354	          0x4885c0	                           test rax, rax	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x4001357	            0x7430	                            je 0x4001389	       978	input.c	FUNCTION_31	FOR_1	IF_1	CALL_1
0x4001359	          0x4889ee	                            mov rsi, rbp	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400135c	          0x4c89e7	                            mov rdi, r12	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x400135f	      0xe800000000	                          call 0x4001364	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001364	            0x84c0	                             test al, al	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001366	            0x7521	                           jne 0x4001389	       979	input.c	FUNCTION_31	FOR_1	IF_1	CALL_2
0x4001368	    0x4881c3c80000	                           add rbx, 0xc8	       977	input.c	FUNCTION_31	FOR_1
0x400136f	        0x48833b00	                      cmp qword [rbx], 0	       977	input.c	FUNCTION_31	FOR_1
0x4001373	            0x75cb	                           jne 0x4001340	       977	input.c	FUNCTION_31	FOR_1
0x4001375	    0x4883bbc00000	               cmp qword [rbx + 0xc0], 0	       977	input.c	FUNCTION_31	FOR_1
0x400137d	            0x75c1	                           jne 0x4001340	       977	input.c	FUNCTION_31	FOR_1
0x400137f	              0x5b	                                 pop rbx	      1002	input.c	FUNCTION_32
0x4001380	      0xb8edffffff	                     mov eax, 0xffffffed	       994	input.c	FUNCTION_32	IF_1
0x4001385	              0x5d	                                 pop rbp	      1002	input.c	FUNCTION_32
0x4001386	            0x415c	                                 pop r12	      1002	input.c	FUNCTION_32
0x4001388	              0xc3	                                     ret	      1002	input.c	FUNCTION_32
0x4001389	          0x4885db	                           test rbx, rbx	       993	input.c	FUNCTION_32	IF_1
0x400138c	            0x74f1	                            je 0x400137f	       993	input.c	FUNCTION_32	IF_1
0x400138e	          0x4889da	                            mov rdx, rbx	       996	input.c	FUNCTION_32	CALL_2
0x4001391	      0x498b442428	            mov rax, qword [r12 + 0x28] 	       996	input.c	FUNCTION_32	CALL_2
0x4001396	          0x4889ee	                            mov rsi, rbp	       996	input.c	FUNCTION_32	CALL_2
0x4001399	          0x4c89e7	                            mov rdi, r12	       996	input.c	FUNCTION_32	CALL_2
0x400139c	      0xe800000000	                          call 0x40013a1	       996	input.c	FUNCTION_32	CALL_2
0x40013a1	            0x85c0	                           test eax, eax	       997	input.c	FUNCTION_32	IF_2
0x40013a3	            0x89c3	                            mov ebx, eax	       996	input.c	FUNCTION_32	CALL_2
0x40013a5	            0x7405	                            je 0x40013ac	       997	input.c	FUNCTION_32	IF_2
0x40013a7	          0x83f8ed	             cmp eax, 0xffffffffffffffed	       997	input.c	FUNCTION_32	IF_2
0x40013aa	            0x7507	                           jne 0x40013b3	       997	input.c	FUNCTION_32	IF_2
0x40013ac	            0x89d8	                            mov eax, ebx	       996	input.c	FUNCTION_32	CALL_2
0x40013ae	              0x5b	                                 pop rbx	      1002	input.c	FUNCTION_32
0x40013af	              0x5d	                                 pop rbp	      1002	input.c	FUNCTION_32
0x40013b0	            0x415c	                                 pop r12	      1002	input.c	FUNCTION_32
0x40013b2	              0xc3	                                     ret	      1002	input.c	FUNCTION_32
0x40013b3	    0x488b95280200	           mov rdx, qword [rbp + 0x228] 	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013ba	      0x498b742448	            mov rsi, qword [r12 + 0x48] 	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013bf	            0x89c1	                            mov ecx, eax	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013c1	    0x48c7c7000000	                              mov rdi, 0	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013c8	      0xe800000000	                          call 0x40013cd	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013cd	            0x89d8	                            mov eax, ebx	       998	input.c	FUNCTION_32	IF_2	CALL_3
0x40013cf	            0xebdd	                           jmp 0x40013ae	       998	input.c	FUNCTION_32	IF_2	CALL_3
input_print_modalias	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,13:IF,1:DO,0:WHILE,0	131
0x4000b20	            0x4157	                                push r15	      1326	input.c	FUNCTION_53
0x4000b22	            0x4156	                                push r14	      1326	input.c	FUNCTION_53
0x4000b24	          0x4189cf	                           mov r15d, ecx	      1326	input.c	FUNCTION_53
0x4000b27	            0x4155	                                push r13	      1326	input.c	FUNCTION_53
0x4000b29	            0x4154	                                push r12	      1326	input.c	FUNCTION_53
0x4000b2b	          0x4531f6	                          xor r14d, r14d	      1329	input.c	FUNCTION_53	CALL_2
0x4000b2e	              0x55	                                push rbp	      1326	input.c	FUNCTION_53
0x4000b2f	              0x53	                                push rbx	      1326	input.c	FUNCTION_53
0x4000b30	          0x4863ee	                         movsxd rbp, esi	      1326	input.c	FUNCTION_53
0x4000b33	         0xfb7421e	           movzx eax, word [rdx + 0x1e] 	      1329	input.c	FUNCTION_53	CALL_2
0x4000b37	         0xfb74a18	           movzx ecx, word [rdx + 0x18] 	      1329	input.c	FUNCTION_53	CALL_2
0x4000b3b	            0x85ed	                           test ebp, ebp	      1329	input.c	FUNCTION_53	CALL_2
0x4000b3d	          0x4963f6	                        movsxd rsi, r14d	      1329	input.c	FUNCTION_53	CALL_2
0x4000b40	          0x4889d3	                            mov rbx, rdx	      1326	input.c	FUNCTION_53
0x4000b43	          0x4989fc	                            mov r12, rdi	      1326	input.c	FUNCTION_53
0x4000b46	        0x480f49f5	                         cmovns rsi, rbp	      1329	input.c	FUNCTION_53	CALL_2
0x4000b4a	              0x50	                                push rax	      1329	input.c	FUNCTION_53	CALL_2
0x4000b4b	      0x440fb74a1c	           movzx r9d, word [rdx + 0x1c] 	      1329	input.c	FUNCTION_53	CALL_2
0x4000b50	      0x440fb7421a	           movzx r8d, word [rdx + 0x1a] 	      1329	input.c	FUNCTION_53	CALL_2
0x4000b55	    0x48c7c2000000	                              mov rdx, 0	      1329	input.c	FUNCTION_53	CALL_2
0x4000b5c	      0xe800000000	                          call 0x4000b61	      1329	input.c	FUNCTION_53	CALL_2
0x4000b61	        0x488d4b28	                   lea rcx, [rbx + 0x28]	      1335	input.c	FUNCTION_53
0x4000b65	          0x4863f8	                         movsxd rdi, eax	      1329	input.c	FUNCTION_53	CALL_2
0x4000b68	            0x89ee	                            mov esi, ebp	      1334	input.c	FUNCTION_53	CALL_3
0x4000b6a	            0x29fe	                            sub esi, edi	      1334	input.c	FUNCTION_53	CALL_3
0x4000b6c	          0x4531c0	                            xor r8d, r8d	      1334	input.c	FUNCTION_53	CALL_3
0x4000b6f	          0x4989fd	                            mov r13, rdi	      1329	input.c	FUNCTION_53	CALL_2
0x4000b72	    0x41b91f000000	                           mov r9d, 0x1f	      1334	input.c	FUNCTION_53	CALL_3
0x4000b78	          0x4c01e7	                            add rdi, r12	      1334	input.c	FUNCTION_53	CALL_3
0x4000b7b	      0xba65000000	                           mov edx, 0x65	      1334	input.c	FUNCTION_53	CALL_3
0x4000b80	      0xe8ebfeffff	      call sym.input_print_modalias_bits	      1334	input.c	FUNCTION_53	CALL_3
0x4000b85	          0x4101c5	                           add r13d, eax	      1334	input.c	FUNCTION_53	CALL_3
0x4000b88	        0x488d4b30	                   lea rcx, [rbx + 0x30]	      1337	input.c	FUNCTION_53
0x4000b8c	            0x89ee	                            mov esi, ebp	      1336	input.c	FUNCTION_53	CALL_4
0x4000b8e	          0x4963fd	                        movsxd rdi, r13d	      1336	input.c	FUNCTION_53	CALL_4
0x4000b91	          0x4429ee	                           sub esi, r13d	      1336	input.c	FUNCTION_53	CALL_4
0x4000b94	    0x41b9ff020000	                          mov r9d, 0x2ff	      1336	input.c	FUNCTION_53	CALL_4
0x4000b9a	          0x4c01e7	                            add rdi, r12	      1336	input.c	FUNCTION_53	CALL_4
0x4000b9d	    0x41b871000000	                           mov r8d, 0x71	      1336	input.c	FUNCTION_53	CALL_4
0x4000ba3	      0xba6b000000	                           mov edx, 0x6b	      1336	input.c	FUNCTION_53	CALL_4
0x4000ba8	      0xe8c3feffff	      call sym.input_print_modalias_bits	      1336	input.c	FUNCTION_53	CALL_4
0x4000bad	          0x4101c5	                           add r13d, eax	      1336	input.c	FUNCTION_53	CALL_4
0x4000bb0	    0x488d8b900000	                   lea rcx, [rbx + 0x90]	      1339	input.c	FUNCTION_53
0x4000bb7	            0x89ee	                            mov esi, ebp	      1338	input.c	FUNCTION_53	CALL_5
0x4000bb9	          0x4963fd	                        movsxd rdi, r13d	      1338	input.c	FUNCTION_53	CALL_5
0x4000bbc	          0x4429ee	                           sub esi, r13d	      1338	input.c	FUNCTION_53	CALL_5
0x4000bbf	          0x4531c0	                            xor r8d, r8d	      1338	input.c	FUNCTION_53	CALL_5
0x4000bc2	          0x4c01e7	                            add rdi, r12	      1338	input.c	FUNCTION_53	CALL_5
0x4000bc5	    0x41b90f000000	                            mov r9d, 0xf	      1338	input.c	FUNCTION_53	CALL_5
0x4000bcb	      0xba72000000	                           mov edx, 0x72	      1338	input.c	FUNCTION_53	CALL_5
0x4000bd0	      0xe89bfeffff	      call sym.input_print_modalias_bits	      1338	input.c	FUNCTION_53	CALL_5
0x4000bd5	          0x4101c5	                           add r13d, eax	      1338	input.c	FUNCTION_53	CALL_5
0x4000bd8	    0x488d8b980000	                   lea rcx, [rbx + 0x98]	      1341	input.c	FUNCTION_53
0x4000bdf	            0x89ee	                            mov esi, ebp	      1340	input.c	FUNCTION_53	CALL_6
0x4000be1	          0x4963fd	                        movsxd rdi, r13d	      1340	input.c	FUNCTION_53	CALL_6
0x4000be4	          0x4429ee	                           sub esi, r13d	      1340	input.c	FUNCTION_53	CALL_6
0x4000be7	          0x4531c0	                            xor r8d, r8d	      1340	input.c	FUNCTION_53	CALL_6
0x4000bea	          0x4c01e7	                            add rdi, r12	      1340	input.c	FUNCTION_53	CALL_6
0x4000bed	    0x41b93f000000	                           mov r9d, 0x3f	      1340	input.c	FUNCTION_53	CALL_6
0x4000bf3	      0xba61000000	                           mov edx, 0x61	      1340	input.c	FUNCTION_53	CALL_6
0x4000bf8	      0xe873feffff	      call sym.input_print_modalias_bits	      1340	input.c	FUNCTION_53	CALL_6
0x4000bfd	          0x4101c5	                           add r13d, eax	      1340	input.c	FUNCTION_53	CALL_6
0x4000c00	    0x488d8ba00000	                   lea rcx, [rbx + 0xa0]	      1343	input.c	FUNCTION_53
0x4000c07	            0x89ee	                            mov esi, ebp	      1342	input.c	FUNCTION_53	CALL_7
0x4000c09	          0x4963fd	                        movsxd rdi, r13d	      1342	input.c	FUNCTION_53	CALL_7
0x4000c0c	          0x4429ee	                           sub esi, r13d	      1342	input.c	FUNCTION_53	CALL_7
0x4000c0f	          0x4531c0	                            xor r8d, r8d	      1342	input.c	FUNCTION_53	CALL_7
0x4000c12	          0x4c01e7	                            add rdi, r12	      1342	input.c	FUNCTION_53	CALL_7
0x4000c15	    0x41b907000000	                              mov r9d, 7	      1342	input.c	FUNCTION_53	CALL_7
0x4000c1b	      0xba6d000000	                           mov edx, 0x6d	      1342	input.c	FUNCTION_53	CALL_7
0x4000c20	      0xe84bfeffff	      call sym.input_print_modalias_bits	      1342	input.c	FUNCTION_53	CALL_7
0x4000c25	          0x4101c5	                           add r13d, eax	      1342	input.c	FUNCTION_53	CALL_7
0x4000c28	    0x488d8ba80000	                   lea rcx, [rbx + 0xa8]	      1345	input.c	FUNCTION_53
0x4000c2f	            0x89ee	                            mov esi, ebp	      1344	input.c	FUNCTION_53	CALL_8
0x4000c31	          0x4963fd	                        movsxd rdi, r13d	      1344	input.c	FUNCTION_53	CALL_8
0x4000c34	          0x4429ee	                           sub esi, r13d	      1344	input.c	FUNCTION_53	CALL_8
0x4000c37	    0x41b90f000000	                            mov r9d, 0xf	      1344	input.c	FUNCTION_53	CALL_8
0x4000c3d	          0x4c01e7	                            add rdi, r12	      1344	input.c	FUNCTION_53	CALL_8
0x4000c40	          0x4531c0	                            xor r8d, r8d	      1344	input.c	FUNCTION_53	CALL_8
0x4000c43	      0xba6c000000	                           mov edx, 0x6c	      1344	input.c	FUNCTION_53	CALL_8
0x4000c48	      0xe823feffff	      call sym.input_print_modalias_bits	      1344	input.c	FUNCTION_53	CALL_8
0x4000c4d	          0x4101c5	                           add r13d, eax	      1344	input.c	FUNCTION_53	CALL_8
0x4000c50	    0x488d8bb00000	                   lea rcx, [rbx + 0xb0]	      1347	input.c	FUNCTION_53
0x4000c57	            0x89ee	                            mov esi, ebp	      1346	input.c	FUNCTION_53	CALL_9
0x4000c59	          0x4963fd	                        movsxd rdi, r13d	      1346	input.c	FUNCTION_53	CALL_9
0x4000c5c	          0x4429ee	                           sub esi, r13d	      1346	input.c	FUNCTION_53	CALL_9
0x4000c5f	    0x41b907000000	                              mov r9d, 7	      1346	input.c	FUNCTION_53	CALL_9
0x4000c65	          0x4c01e7	                            add rdi, r12	      1346	input.c	FUNCTION_53	CALL_9
0x4000c68	      0xba73000000	                           mov edx, 0x73	      1346	input.c	FUNCTION_53	CALL_9
0x4000c6d	          0x4531c0	                            xor r8d, r8d	      1346	input.c	FUNCTION_53	CALL_9
0x4000c70	      0xe8fbfdffff	      call sym.input_print_modalias_bits	      1346	input.c	FUNCTION_53	CALL_9
0x4000c75	          0x4101c5	                           add r13d, eax	      1346	input.c	FUNCTION_53	CALL_9
0x4000c78	    0x488d8bb80000	                   lea rcx, [rbx + 0xb8]	      1349	input.c	FUNCTION_53
0x4000c7f	            0x89ee	                            mov esi, ebp	      1348	input.c	FUNCTION_53	CALL_10
0x4000c81	          0x4963fd	                        movsxd rdi, r13d	      1348	input.c	FUNCTION_53	CALL_10
0x4000c84	          0x4429ee	                           sub esi, r13d	      1348	input.c	FUNCTION_53	CALL_10
0x4000c87	          0x4531c0	                            xor r8d, r8d	      1348	input.c	FUNCTION_53	CALL_10
0x4000c8a	          0x4c01e7	                            add rdi, r12	      1348	input.c	FUNCTION_53	CALL_10
0x4000c8d	    0x41b97f000000	                           mov r9d, 0x7f	      1348	input.c	FUNCTION_53	CALL_10
0x4000c93	      0xba66000000	                           mov edx, 0x66	      1348	input.c	FUNCTION_53	CALL_10
0x4000c98	      0xe8d3fdffff	      call sym.input_print_modalias_bits	      1348	input.c	FUNCTION_53	CALL_10
0x4000c9d	          0x4101c5	                           add r13d, eax	      1348	input.c	FUNCTION_53	CALL_10
0x4000ca0	    0x488d8bc80000	                   lea rcx, [rbx + 0xc8]	      1351	input.c	FUNCTION_53
0x4000ca7	            0x89ee	                            mov esi, ebp	      1350	input.c	FUNCTION_53	CALL_11
0x4000ca9	          0x4963fd	                        movsxd rdi, r13d	      1350	input.c	FUNCTION_53	CALL_11
0x4000cac	          0x4429ee	                           sub esi, r13d	      1350	input.c	FUNCTION_53	CALL_11
0x4000caf	          0x4531c0	                            xor r8d, r8d	      1350	input.c	FUNCTION_53	CALL_11
0x4000cb2	          0x4c01e7	                            add rdi, r12	      1350	input.c	FUNCTION_53	CALL_11
0x4000cb5	    0x41b90f000000	                            mov r9d, 0xf	      1350	input.c	FUNCTION_53	CALL_11
0x4000cbb	      0xba77000000	                           mov edx, 0x77	      1350	input.c	FUNCTION_53	CALL_11
0x4000cc0	      0xe8abfdffff	      call sym.input_print_modalias_bits	      1350	input.c	FUNCTION_53	CALL_11
0x4000cc5	          0x4101c5	                           add r13d, eax	      1350	input.c	FUNCTION_53	CALL_11
0x4000cc8	          0x4585ff	                         test r15d, r15d	      1353	input.c	FUNCTION_53	IF_1
0x4000ccb	              0x58	                                 pop rax	      1353	input.c	FUNCTION_53	IF_1
0x4000ccc	            0x741f	                            je 0x4000ced	      1353	input.c	FUNCTION_53	IF_1
0x4000cce	          0x4429ed	                           sub ebp, r13d	      1354	input.c	FUNCTION_53	CALL_13
0x4000cd1	          0x4963fd	                        movsxd rdi, r13d	      1354	input.c	FUNCTION_53	CALL_13
0x4000cd4	    0x48c7c2000000	                              mov rdx, 0	      1354	input.c	FUNCTION_53	CALL_13
0x4000cdb	        0x410f48ee	                         cmovs ebp, r14d	      1354	input.c	FUNCTION_53	CALL_13
0x4000cdf	          0x4c01e7	                            add rdi, r12	      1354	input.c	FUNCTION_53	CALL_13
0x4000ce2	          0x4863f5	                         movsxd rsi, ebp	      1354	input.c	FUNCTION_53	CALL_13
0x4000ce5	      0xe800000000	                          call 0x4000cea	      1354	input.c	FUNCTION_53	CALL_13
0x4000cea	          0x4101c5	                           add r13d, eax	      1354	input.c	FUNCTION_53	CALL_13
0x4000ced	              0x5b	                                 pop rbx	      1357	input.c	FUNCTION_53
0x4000cee	          0x4489e8	                           mov eax, r13d	      1357	input.c	FUNCTION_53
0x4000cf1	              0x5d	                                 pop rbp	      1357	input.c	FUNCTION_53
0x4000cf2	            0x415c	                                 pop r12	      1357	input.c	FUNCTION_53
0x4000cf4	            0x415d	                                 pop r13	      1357	input.c	FUNCTION_53
0x4000cf6	            0x415e	                                 pop r14	      1357	input.c	FUNCTION_53
0x4000cf8	            0x415f	                                 pop r15	      1357	input.c	FUNCTION_53
0x4000cfa	              0xc3	                                     ret	      1357	input.c	FUNCTION_53
devm_input_device_unregister	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,3:IF,0:DO,0:WHILE,0	2
0x40016f0	          0x488b3e	                    mov rdi, qword [rsi]	      2037	input.c	FUNCTION_77	CALL_3
0x40016f3	      0xe9a8feffff	       jmp sym.__input_unregister_device	      2037	input.c	FUNCTION_77	CALL_3
input_dev_show_properties	functions,0:SWITCH,0:FOR,0:ELSE,0:CALL,3:IF,0:DO,0:WHILE,0	12
0x4001ec0	          0x4889d0	                            mov rax, rdx	      1378	input.c	FUNCTION_55
0x4001ec3	    0x488d9708feff	                  lea rdx, [rdi - 0x1f8]	      1380	input.c	FUNCTION_55	CALL_2
0x4001eca	    0x41b801000000	                              mov r8d, 1	      1380	input.c	FUNCTION_55	CALL_2
0x4001ed0	      0xb91f000000	                           mov ecx, 0x1f	      1380	input.c	FUNCTION_55	CALL_2
0x4001ed5	      0xbe00100000	                         mov esi, 0x1000	      1380	input.c	FUNCTION_55	CALL_2
0x4001eda	          0x4889c7	                            mov rdi, rax	      1380	input.c	FUNCTION_55	CALL_2
0x4001edd	      0xe8def8ffff	             call sym.input_print_bitmap	      1380	input.c	FUNCTION_55	CALL_2
0x4001ee2	      0xba00100000	                         mov edx, 0x1000	      1382	input.c	FUNCTION_55	CALL_3
0x4001ee7	      0x3d00100000	                         cmp eax, 0x1000	      1382	input.c	FUNCTION_55	CALL_3
0x4001eec	           0xf4fc2	                          cmovg eax, edx	      1382	input.c	FUNCTION_55	CALL_3
0x4001eef	            0x4898	                                    cdqe	      1382	input.c	FUNCTION_55	CALL_3
0x4001ef1	              0xc3	                                     ret	      1383	input.c	FUNCTION_55
