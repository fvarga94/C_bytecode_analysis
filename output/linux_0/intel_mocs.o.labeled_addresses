get_mocs_settings	DO,0:FOR,1:SWITCH,0:IF,4:CALL,11:WHILE,0:functions,0:ELSE,2	61
0x4000040	              0x53	                                push rbx	       178	intel_mocs.c	FUNCTION_1
0x4000041	          0x4889fb	                            mov rbx, rdi	       178	intel_mocs.c	FUNCTION_1
0x4000044	        0x4883ec08	                              sub rsp, 8	       178	intel_mocs.c	FUNCTION_1
0x4000048	    0xf6875b060000	              test byte [rdi + 0x65b], 1	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x400004f	            0x7466	                            je 0x40000b7	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x4000051	    0xf68777060000	              test byte [rdi + 0x677], 2	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x4000058	            0x7577	                           jne 0x40000d1	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x400005a	    0xc70603000000	                      mov dword [rsi], 3	       182	intel_mocs.c	FUNCTION_1	IF_1	CALL_3
0x4000060	    0x48c746080000	                  mov qword [rsi + 8], 0	       183	intel_mocs.c	FUNCTION_1	IF_1
0x4000068	    0xf6835b060000	              test byte [rbx + 0x65b], 1	       195	intel_mocs.c	FUNCTION_1	IF_3	CALL_8
0x400006f	      0xb801000000	                              mov eax, 1	       195	intel_mocs.c	FUNCTION_1	IF_3	CALL_8
0x4000074	            0x743b	                            je 0x40000b1	       195	intel_mocs.c	FUNCTION_1	IF_3	CALL_8
0x4000076	            0x8b3e	                    mov edi, dword [rsi]	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x4000078	      0xb801000000	                              mov eax, 1	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400007d	        0x488b7608	                mov rsi, qword [rsi + 8]	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000081	        0xf646040f	                test byte [rsi + 4], 0xf	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000085	            0x7513	                           jne 0x400009a	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000087	            0x31d2	                            xor edx, edx	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000089	          0x83c201	                              add edx, 1	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400008c	            0x39fa	                            cmp edx, edi	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400008e	            0x7321	                           jae 0x40000b1	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x4000090	          0x4863ca	                         movsxd rcx, edx	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000093	      0xf644ce040f	       test byte [rsi + rcx*8 + 4], 0xf 	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x4000098	            0x74ef	                            je 0x4000089	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x400009a	    0x48c7c6000000	                              mov rsi, 0	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x40000a1	    0x48c7c7000000	                              mov rdi, 0	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x40000a8	      0xe800000000	                          call 0x40000ad	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x40000ad	             0xf0b	                                     ud2	       199	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4	CALL_9
0x40000af	            0x31c0	                            xor eax, eax	       201	intel_mocs.c	FUNCTION_1	IF_3	FOR_1	IF_4
0x40000b1	        0x4883c408	                              add rsp, 8	       205	intel_mocs.c	FUNCTION_1
0x40000b5	              0x5b	                                 pop rbx	       205	intel_mocs.c	FUNCTION_1
0x40000b6	              0xc3	                                     ret	       205	intel_mocs.c	FUNCTION_1
0x40000b7	    0xf68767060000	              test byte [rdi + 0x667], 8	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x40000be	            0x759a	                           jne 0x400005a	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x40000c0	    0x80bf5c060000	               cmp byte [rdi + 0x65c], 8	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000c7	            0x7724	                            ja 0x40000ed	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000c9	            0x31c0	                            xor eax, eax	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000cb	        0x4883c408	                              add rsp, 8	       205	intel_mocs.c	FUNCTION_1
0x40000cf	              0x5b	                                 pop rbx	       205	intel_mocs.c	FUNCTION_1
0x40000d0	              0xc3	                                     ret	       205	intel_mocs.c	FUNCTION_1
0x40000d1	    0xf68767060000	              test byte [rdi + 0x667], 8	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x40000d8	            0x7580	                           jne 0x400005a	       181	intel_mocs.c	FUNCTION_1	IF_1	CALL_2
0x40000da	    0xc70603000000	                      mov dword [rsi], 3	       186	intel_mocs.c	FUNCTION_1	ELSE_1	IF_2	CALL_5
0x40000e0	    0x48c746080000	                  mov qword [rsi + 8], 0	       187	intel_mocs.c	FUNCTION_1	ELSE_1	IF_2
0x40000e8	      0xe97bffffff	                           jmp 0x4000068	       185	intel_mocs.c	FUNCTION_1	ELSE_1	IF_2	CALL_4
0x40000ed	    0x803d00000000	                cmp byte [0x040000f4], 0	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000f4	            0x75d3	                           jne 0x40000c9	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000f6	    0x48c7c7000000	                              mov rdi, 0	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x40000fd	        0x48893424	                    mov qword [rsp], rsi	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x4000101	    0xc60500000000	                mov byte [0x04000108], 1	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x4000108	      0xe800000000	                          call 0x400010d	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x400010d	             0xf0b	                                     ud2	       190	intel_mocs.c	FUNCTION_1	ELSE_2	CALL_7
0x400010f	    0xf6835b060000	              test byte [rbx + 0x65b], 1	       195	intel_mocs.c	FUNCTION_1	IF_3	CALL_8
0x4000116	            0x74b1	                            je 0x40000c9	       195	intel_mocs.c	FUNCTION_1	IF_3	CALL_8
0x4000118	        0x488b3424	                    mov rsi, qword [rsp]	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400011c	            0x31c0	                            xor eax, eax	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400011e	            0x8b3e	                    mov edi, dword [rsi]	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x4000120	            0x85ff	                           test edi, edi	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x4000122	     0xf8555ffffff	                           jne 0x400007d	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x4000128	            0x31c0	                            xor eax, eax	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
0x400012a	            0xeb9f	                           jmp 0x40000cb	       198	intel_mocs.c	FUNCTION_1	IF_3	FOR_1
intel_mocs_init_engine	DO,0:FOR,2:SWITCH,0:IF,2:CALL,6:WHILE,0:functions,0:ELSE,0	71
0x4000190	            0x4156	                                push r14	       236	intel_mocs.c	FUNCTION_3
0x4000192	            0x4155	                                push r13	       236	intel_mocs.c	FUNCTION_3
0x4000194	            0x4154	                                push r12	       236	intel_mocs.c	FUNCTION_3
0x4000196	              0x55	                                push rbp	       236	intel_mocs.c	FUNCTION_3
0x4000197	          0x4989fc	                            mov r12, rdi	       236	intel_mocs.c	FUNCTION_3
0x400019a	              0x53	                                push rbx	       236	intel_mocs.c	FUNCTION_3
0x400019b	        0x4883ec18	                           sub rsp, 0x18	       236	intel_mocs.c	FUNCTION_3
0x400019f	          0x488b2f	                    mov rbp, qword [rdi]	       237	intel_mocs.c	FUNCTION_3
0x40001a2	          0x4889e6	                            mov rsi, rsp	       241	intel_mocs.c	FUNCTION_3	IF_1	CALL_1
0x40001a5	    0x65488b042528	                mov rax, qword gs:[0x28]	       236	intel_mocs.c	FUNCTION_3
0x40001ae	      0x4889442410	             mov qword [rsp + 0x10], rax	       236	intel_mocs.c	FUNCTION_3
0x40001b3	            0x31c0	                            xor eax, eax	       236	intel_mocs.c	FUNCTION_3
0x40001b5	          0x4889ef	                            mov rdi, rbp	       241	intel_mocs.c	FUNCTION_3	IF_1	CALL_1
0x40001b8	      0xe883feffff	              call sym.get_mocs_settings	       241	intel_mocs.c	FUNCTION_3	IF_1	CALL_1
0x40001bd	            0x84c0	                             test al, al	       241	intel_mocs.c	FUNCTION_3	IF_1	CALL_1
0x40001bf	     0xf8484000000	                            je 0x4000249	       241	intel_mocs.c	FUNCTION_3	IF_1	CALL_1
0x40001c5	          0x8b0424	                    mov eax, dword [rsp]	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x40001c8	          0x83f83e	                           cmp eax, 0x3e	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x40001cb	     0xf8797000000	                            ja 0x4000268	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x40001d1	            0x31db	                            xor ebx, ebx	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x40001d3	            0x85c0	                           test eax, eax	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x40001d5	            0x743d	                            je 0x4000214	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x40001d7	      0x488b442408	                mov rax, qword [rsp + 8]	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001dc	            0x89da	                            mov edx, ebx	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001de	      0x418b7c2410	            mov edi, dword [r12 + 0x10] 	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001e3	            0x89de	                            mov esi, ebx	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001e5	    0x4c8bad180800	           mov r13, qword [rbp + 0x818] 	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001ec	          0x83c301	                              add ebx, 1	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x40001ef	        0x448b34d0	           mov r14d, dword [rax + rdx*8]	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001f3	      0xe838ffffff	                  call sym.mocs_register	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001f8	      0xb901000000	                              mov ecx, 1	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001fd	            0x89c6	                            mov esi, eax	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x40001ff	          0x4889ef	                            mov rdi, rbp	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x4000202	          0x4489f2	                           mov edx, r14d	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x4000205	      0xe800000000	                          call 0x400020a	       248	intel_mocs.c	FUNCTION_3	FOR_1	CALL_4
0x400020a	          0x391c24	                    cmp dword [rsp], ebx	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x400020d	            0x77c8	                            ja 0x40001d7	       247	intel_mocs.c	FUNCTION_3	FOR_1
0x400020f	          0x83fb3d	                           cmp ebx, 0x3d	       259	intel_mocs.c	FUNCTION_3	FOR_2
0x4000212	            0x7735	                            ja 0x4000249	       259	intel_mocs.c	FUNCTION_3	FOR_2
0x4000214	      0x488b442408	                mov rax, qword [rsp + 8]	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000219	      0x418b7c2410	            mov edi, dword [r12 + 0x10] 	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x400021e	            0x89de	                            mov esi, ebx	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000220	          0x83c301	                              add ebx, 1	       259	intel_mocs.c	FUNCTION_3	FOR_2
0x4000223	    0x4c8bad180800	           mov r13, qword [rbp + 0x818] 	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x400022a	          0x448b30	                   mov r14d, dword [rax]	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x400022d	      0xe8fefeffff	                  call sym.mocs_register	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000232	      0xb901000000	                              mov ecx, 1	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000237	            0x89c6	                            mov esi, eax	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000239	          0x4889ef	                            mov rdi, rbp	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x400023c	          0x4489f2	                           mov edx, r14d	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x400023f	      0xe800000000	                          call 0x4000244	       260	intel_mocs.c	FUNCTION_3	FOR_2	CALL_6
0x4000244	          0x83fb3e	                           cmp ebx, 0x3e	       259	intel_mocs.c	FUNCTION_3	FOR_2
0x4000247	            0x75cb	                           jne 0x4000214	       259	intel_mocs.c	FUNCTION_3	FOR_2
0x4000249	            0x31c0	                            xor eax, eax	       242	intel_mocs.c	FUNCTION_3	IF_1
0x400024b	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       264	intel_mocs.c	FUNCTION_3
0x4000250	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       264	intel_mocs.c	FUNCTION_3
0x4000259	            0x7529	                           jne 0x4000284	       264	intel_mocs.c	FUNCTION_3
0x400025b	        0x4883c418	                           add rsp, 0x18	       264	intel_mocs.c	FUNCTION_3
0x400025f	              0x5b	                                 pop rbx	       264	intel_mocs.c	FUNCTION_3
0x4000260	              0x5d	                                 pop rbp	       264	intel_mocs.c	FUNCTION_3
0x4000261	            0x415c	                                 pop r12	       264	intel_mocs.c	FUNCTION_3
0x4000263	            0x415d	                                 pop r13	       264	intel_mocs.c	FUNCTION_3
0x4000265	            0x415e	                                 pop r14	       264	intel_mocs.c	FUNCTION_3
0x4000267	              0xc3	                                     ret	       264	intel_mocs.c	FUNCTION_3
0x4000268	    0x48c7c6000000	                              mov rsi, 0	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x400026f	    0x48c7c7000000	                              mov rdi, 0	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x4000276	      0xe800000000	                          call 0x400027b	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x400027b	             0xf0b	                                     ud2	       244	intel_mocs.c	FUNCTION_3	IF_2	CALL_2
0x400027d	      0xb8edffffff	                     mov eax, 0xffffffed	       245	intel_mocs.c	FUNCTION_3	IF_2
0x4000282	            0xebc7	                           jmp 0x400024b	       245	intel_mocs.c	FUNCTION_3	IF_2
0x4000284	      0xe800000000	                          call 0x4000289	       264	intel_mocs.c	FUNCTION_3
intel_mocs_init_l3cc_table	DO,0:FOR,2:SWITCH,0:IF,2:CALL,10:WHILE,0:functions,0:ELSE,0	81
0x4000290	            0x4154	                                push r12	       393	intel_mocs.c	FUNCTION_7
0x4000292	              0x55	                                push rbp	       393	intel_mocs.c	FUNCTION_7
0x4000293	              0x53	                                push rbx	       393	intel_mocs.c	FUNCTION_7
0x4000294	          0x4889fb	                            mov rbx, rdi	       393	intel_mocs.c	FUNCTION_7
0x4000297	        0x4883ec18	                           sub rsp, 0x18	       393	intel_mocs.c	FUNCTION_7
0x400029b	          0x4889e6	                            mov rsi, rsp	       397	intel_mocs.c	FUNCTION_7	IF_1	CALL_1
0x400029e	    0x65488b042528	                mov rax, qword gs:[0x28]	       393	intel_mocs.c	FUNCTION_7
0x40002a7	      0x4889442410	             mov qword [rsp + 0x10], rax	       393	intel_mocs.c	FUNCTION_7
0x40002ac	            0x31c0	                            xor eax, eax	       393	intel_mocs.c	FUNCTION_7
0x40002ae	      0xe88dfdffff	              call sym.get_mocs_settings	       397	intel_mocs.c	FUNCTION_7	IF_1	CALL_1
0x40002b3	            0x84c0	                             test al, al	       397	intel_mocs.c	FUNCTION_7	IF_1	CALL_1
0x40002b5	     0xf84a4000000	                            je 0x400035f	       397	intel_mocs.c	FUNCTION_7	IF_1	CALL_1
0x40002bb	          0x8b0424	                    mov eax, dword [rsp]	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002be	            0x89c7	                            mov edi, eax	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002c0	            0xd1ef	                              shr edi, 1	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002c2	     0xf84ed000000	                            je 0x40003b5	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002c8	          0x4531e4	                          xor r12d, r12d	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002cb	            0x31ed	                            xor ebp, ebp	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002cd	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x40002d2	      0x418d442401	                      lea eax, [r12 + 1]	       321	intel_mocs.c	FUNCTION_5
0x40002d7	    0x8d34ad20b000	               lea esi, [rbp*4 + 0xb020]	       401	intel_mocs.c	FUNCTION_7	CALL_4
0x40002de	    0x4c8b83180800	            mov r8, qword [rbx + 0x818] 	       401	intel_mocs.c	FUNCTION_7	CALL_4
0x40002e5	          0x4889df	                            mov rdi, rbx	       401	intel_mocs.c	FUNCTION_7	CALL_4
0x40002e8	          0x83c501	                              add ebp, 1	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40002eb	           0xfb7c0	                           movzx eax, ax	       321	intel_mocs.c	FUNCTION_5
0x40002ee	       0xfb754c104	      movzx edx, word [rcx + rax*8 + 4] 	       320	intel_mocs.c	FUNCTION_5
0x40002f3	        0x410fb7c4	                         movzx eax, r12w	       320	intel_mocs.c	FUNCTION_5
0x40002f7	        0x4183c402	                             add r12d, 2	       320	intel_mocs.c	FUNCTION_5
0x40002fb	       0xfb744c104	      movzx eax, word [rcx + rax*8 + 4] 	       320	intel_mocs.c	FUNCTION_5
0x4000300	      0xb901000000	                              mov ecx, 1	       401	intel_mocs.c	FUNCTION_7	CALL_4
0x4000305	          0xc1e210	                           shl edx, 0x10	       320	intel_mocs.c	FUNCTION_5
0x4000308	             0x9c2	                             or edx, eax	       320	intel_mocs.c	FUNCTION_5
0x400030a	      0xe800000000	                          call 0x400030f	       401	intel_mocs.c	FUNCTION_7	CALL_4
0x400030f	          0x8b0424	                    mov eax, dword [rsp]	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x4000312	            0x89c2	                            mov edx, eax	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x4000314	            0xd1ea	                              shr edx, 1	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x4000316	            0x39ea	                            cmp edx, ebp	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x4000318	            0x77b3	                            ja 0x40002cd	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x400031a	            0xa801	                              test al, 1	       404	intel_mocs.c	FUNCTION_7	IF_2
0x400031c	            0x755a	                           jne 0x4000378	       404	intel_mocs.c	FUNCTION_7	IF_2
0x400031e	          0x83fd1e	                           cmp ebp, 0x1e	       414	intel_mocs.c	FUNCTION_7	FOR_2
0x4000321	    0x448d24ad20b0	              lea r12d, [rbp*4 + 0xb020]	       414	intel_mocs.c	FUNCTION_7	FOR_2
0x4000329	            0x7734	                            ja 0x400035f	       414	intel_mocs.c	FUNCTION_7	FOR_2
0x400032b	      0x488b542408	                mov rdx, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x4000330	          0x4489e6	                           mov esi, r12d	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000333	        0x4183c404	                             add r12d, 4	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000337	    0x488b83180800	           mov rax, qword [rbx + 0x818] 	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x400033e	          0x4889df	                            mov rdi, rbx	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000341	         0xfb75204	               movzx edx, word [rdx + 4]	       320	intel_mocs.c	FUNCTION_5
0x4000345	            0x89d1	                            mov ecx, edx	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000347	          0xc1e110	                           shl ecx, 0x10	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x400034a	             0x9ca	                             or edx, ecx	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x400034c	      0xb901000000	                              mov ecx, 1	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000351	      0xe800000000	                          call 0x4000356	       415	intel_mocs.c	FUNCTION_7	CALL_10
0x4000356	    0x4181fc9cb000	                        cmp r12d, 0xb09c	       414	intel_mocs.c	FUNCTION_7	FOR_2
0x400035d	            0x75cc	                           jne 0x400032b	       414	intel_mocs.c	FUNCTION_7	FOR_2
0x400035f	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       416	intel_mocs.c	FUNCTION_7
0x4000364	    0x654833042528	                xor rax, qword gs:[0x28]	       416	intel_mocs.c	FUNCTION_7
0x400036d	            0x754d	                           jne 0x40003bc	       416	intel_mocs.c	FUNCTION_7
0x400036f	        0x4883c418	                           add rsp, 0x18	       416	intel_mocs.c	FUNCTION_7
0x4000373	              0x5b	                                 pop rbx	       416	intel_mocs.c	FUNCTION_7
0x4000374	              0x5d	                                 pop rbp	       416	intel_mocs.c	FUNCTION_7
0x4000375	            0x415c	                                 pop r12	       416	intel_mocs.c	FUNCTION_7
0x4000377	              0xc3	                                     ret	       416	intel_mocs.c	FUNCTION_7
0x4000378	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x400037d	        0x8d442d00	                    lea eax, [rbp + rbp]	       320	intel_mocs.c	FUNCTION_5
0x4000381	    0x8d34ad20b000	               lea esi, [rbp*4 + 0xb020]	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x4000388	    0x4c8b83180800	            mov r8, qword [rbx + 0x818] 	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x400038f	          0x4889df	                            mov rdi, rbx	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x4000392	          0x83c501	                              add ebp, 1	       406	intel_mocs.c	FUNCTION_7	IF_2
0x4000395	           0xfb7c0	                           movzx eax, ax	       320	intel_mocs.c	FUNCTION_5
0x4000398	         0xfb75104	               movzx edx, word [rcx + 4]	       320	intel_mocs.c	FUNCTION_5
0x400039c	       0xfb744c104	      movzx eax, word [rcx + rax*8 + 4] 	       320	intel_mocs.c	FUNCTION_5
0x40003a1	      0xb901000000	                              mov ecx, 1	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x40003a6	          0xc1e210	                           shl edx, 0x10	       320	intel_mocs.c	FUNCTION_5
0x40003a9	             0x9c2	                             or edx, eax	       320	intel_mocs.c	FUNCTION_5
0x40003ab	      0xe800000000	                          call 0x40003b0	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x40003b0	      0xe969ffffff	                           jmp 0x400031e	       405	intel_mocs.c	FUNCTION_7	IF_2	CALL_7
0x40003b5	            0x31ed	                            xor ebp, ebp	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40003b7	      0xe95effffff	                           jmp 0x400031a	       400	intel_mocs.c	FUNCTION_7	FOR_1
0x40003bc	      0xe800000000	                          call 0x40003c1	       416	intel_mocs.c	FUNCTION_7
intel_rcs_context_init_mocs	DO,0:FOR,0:SWITCH,0:IF,3:CALL,3:WHILE,0:functions,0:ELSE,0	157
0x40003d0	            0x4155	                                push r13	       435	intel_mocs.c	FUNCTION_8
0x40003d2	            0x4154	                                push r12	       435	intel_mocs.c	FUNCTION_8
0x40003d4	          0x4989fd	                            mov r13, rdi	       435	intel_mocs.c	FUNCTION_8
0x40003d7	              0x55	                                push rbp	       435	intel_mocs.c	FUNCTION_8
0x40003d8	              0x53	                                push rbx	       435	intel_mocs.c	FUNCTION_8
0x40003d9	        0x4883ec18	                           sub rsp, 0x18	       435	intel_mocs.c	FUNCTION_8
0x40003dd	        0x488b7f68	            mov rdi, qword [rdi + 0x68] 	       439	intel_mocs.c	FUNCTION_8	IF_1	CALL_1
0x40003e1	          0x4889e6	                            mov rsi, rsp	       439	intel_mocs.c	FUNCTION_8	IF_1	CALL_1
0x40003e4	    0x65488b042528	                mov rax, qword gs:[0x28]	       435	intel_mocs.c	FUNCTION_8
0x40003ed	      0x4889442410	             mov qword [rsp + 0x10], rax	       435	intel_mocs.c	FUNCTION_8
0x40003f2	            0x31c0	                            xor eax, eax	       435	intel_mocs.c	FUNCTION_8
0x40003f4	      0xe847fcffff	              call sym.get_mocs_settings	       439	intel_mocs.c	FUNCTION_8	IF_1	CALL_1
0x40003f9	            0x31d2	                            xor edx, edx	       451	intel_mocs.c	FUNCTION_8
0x40003fb	            0x84c0	                             test al, al	       439	intel_mocs.c	FUNCTION_8	IF_1	CALL_1
0x40003fd	            0x7521	                           jne 0x4000420	       439	intel_mocs.c	FUNCTION_8	IF_1	CALL_1
0x40003ff	            0x89d0	                            mov eax, edx	       452	intel_mocs.c	FUNCTION_8
0x4000401	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       452	intel_mocs.c	FUNCTION_8
0x4000406	    0x654833142528	                xor rdx, qword gs:[0x28]	       452	intel_mocs.c	FUNCTION_8
0x400040f	     0xf85fc010000	                           jne 0x4000611	       452	intel_mocs.c	FUNCTION_8
0x4000415	        0x4883c418	                           add rsp, 0x18	       452	intel_mocs.c	FUNCTION_8
0x4000419	              0x5b	                                 pop rbx	       452	intel_mocs.c	FUNCTION_8
0x400041a	              0x5d	                                 pop rbp	       452	intel_mocs.c	FUNCTION_8
0x400041b	            0x415c	                                 pop r12	       452	intel_mocs.c	FUNCTION_8
0x400041d	            0x415d	                                 pop r13	       452	intel_mocs.c	FUNCTION_8
0x400041f	              0xc3	                                     ret	       452	intel_mocs.c	FUNCTION_8
0x4000420	        0x833c243e	                   cmp dword [rsp], 0x3e	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x4000424	        0x498b4578	            mov rax, qword [r13 + 0x78] 	       279	intel_mocs.c	FUNCTION_4
0x4000428	        0x448b6010	           mov r12d, dword [rax + 0x10] 	       279	intel_mocs.c	FUNCTION_4
0x400042c	     0xf87a3010000	                            ja 0x40005d5	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x4000432	      0xbe7e000000	                           mov esi, 0x7e	       286	intel_mocs.c	FUNCTION_4	CALL_2
0x4000437	          0x4c89ef	                            mov rdi, r13	       286	intel_mocs.c	FUNCTION_4	CALL_2
0x400043a	      0xe800000000	                          call 0x400043f	       286	intel_mocs.c	FUNCTION_4	CALL_2
0x400043f	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       287	intel_mocs.c	FUNCTION_4	IF_2	CALL_3
0x4000445	     0xf87a9010000	                            ja 0x40005f4	       287	intel_mocs.c	FUNCTION_4	IF_2	CALL_3
0x400044b	        0x488d6804	                      lea rbp, [rax + 4]	       290	intel_mocs.c	FUNCTION_4	CALL_5
0x400044f	    0xc7007b000011	            mov dword [rax], 0x1100007b 	       290	intel_mocs.c	FUNCTION_4	CALL_5
0x4000455	          0x8b0424	                    mov eax, dword [rsp]	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x4000458	            0x31db	                            xor ebx, ebx	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x400045a	            0x85c0	                           test eax, eax	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x400045c	            0x742b	                            je 0x4000489	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x400045e	            0x89de	                            mov esi, ebx	       293	intel_mocs.c	FUNCTION_4	FOR_1	CALL_7
0x4000460	          0x4489e7	                           mov edi, r12d	       293	intel_mocs.c	FUNCTION_4	FOR_1	CALL_7
0x4000463	        0x4883c508	                              add rbp, 8	       293	intel_mocs.c	FUNCTION_4	FOR_1	CALL_7
0x4000467	      0xe8c4fcffff	                  call sym.mocs_register	       293	intel_mocs.c	FUNCTION_4	FOR_1	CALL_7
0x400046c	          0x8945f8	                mov dword [rbp - 8], eax	       293	intel_mocs.c	FUNCTION_4	FOR_1	CALL_7
0x400046f	      0x488b442408	                mov rax, qword [rsp + 8]	       294	intel_mocs.c	FUNCTION_4	FOR_1
0x4000474	            0x89da	                            mov edx, ebx	       294	intel_mocs.c	FUNCTION_4	FOR_1
0x4000476	          0x83c301	                              add ebx, 1	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x4000479	          0x8b04d0	            mov eax, dword [rax + rdx*8]	       294	intel_mocs.c	FUNCTION_4	FOR_1
0x400047c	          0x8945fc	                mov dword [rbp - 4], eax	       294	intel_mocs.c	FUNCTION_4	FOR_1
0x400047f	          0x3b1c24	                    cmp ebx, dword [rsp]	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x4000482	            0x72da	                            jb 0x400045e	       292	intel_mocs.c	FUNCTION_4	FOR_1
0x4000484	          0x83fb3d	                           cmp ebx, 0x3d	       305	intel_mocs.c	FUNCTION_4	FOR_2
0x4000487	            0x7723	                            ja 0x40004ac	       305	intel_mocs.c	FUNCTION_4	FOR_2
0x4000489	            0x89de	                            mov esi, ebx	       306	intel_mocs.c	FUNCTION_4	FOR_2	CALL_9
0x400048b	          0x4489e7	                           mov edi, r12d	       306	intel_mocs.c	FUNCTION_4	FOR_2	CALL_9
0x400048e	          0x83c301	                              add ebx, 1	       305	intel_mocs.c	FUNCTION_4	FOR_2
0x4000491	      0xe89afcffff	                  call sym.mocs_register	       306	intel_mocs.c	FUNCTION_4	FOR_2	CALL_9
0x4000496	          0x894500	                    mov dword [rbp], eax	       306	intel_mocs.c	FUNCTION_4	FOR_2	CALL_9
0x4000499	      0x488b442408	                mov rax, qword [rsp + 8]	       307	intel_mocs.c	FUNCTION_4	FOR_2
0x400049e	        0x4883c508	                              add rbp, 8	       307	intel_mocs.c	FUNCTION_4	FOR_2
0x40004a2	          0x83fb3e	                           cmp ebx, 0x3e	       305	intel_mocs.c	FUNCTION_4	FOR_2
0x40004a5	            0x8b00	                    mov eax, dword [rax]	       307	intel_mocs.c	FUNCTION_4	FOR_2
0x40004a7	          0x8945fc	                mov dword [rbp - 4], eax	       307	intel_mocs.c	FUNCTION_4	FOR_2
0x40004aa	            0x75dd	                           jne 0x4000489	       305	intel_mocs.c	FUNCTION_4	FOR_2
0x40004ac	    0xc74500000000	                      mov dword [rbp], 0	       310	intel_mocs.c	FUNCTION_4
0x40004b3	        0x833c243e	                   cmp dword [rsp], 0x3e	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40004b7	     0xf87f9000000	                            ja 0x40005b6	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40004bd	      0xbe40000000	                           mov esi, 0x40	       344	intel_mocs.c	FUNCTION_6	CALL_2
0x40004c2	          0x4c89ef	                            mov rdi, r13	       344	intel_mocs.c	FUNCTION_6	CALL_2
0x40004c5	      0xe800000000	                          call 0x40004ca	       344	intel_mocs.c	FUNCTION_6	CALL_2
0x40004ca	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       345	intel_mocs.c	FUNCTION_6	IF_2	CALL_3
0x40004d0	     0xf872d010000	                            ja 0x4000603	       345	intel_mocs.c	FUNCTION_6	IF_2	CALL_3
0x40004d6	    0xc7003d000011	            mov dword [rax], 0x1100003d 	       348	intel_mocs.c	FUNCTION_6	CALL_5
0x40004dc	          0x8b0c24	                    mov ecx, dword [rsp]	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004df	        0x488d5004	                      lea rdx, [rax + 4]	       348	intel_mocs.c	FUNCTION_6	CALL_5
0x40004e3	            0x89c8	                            mov eax, ecx	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004e5	            0xd1e8	                              shr eax, 1	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004e7	     0xf841d010000	                            je 0x400060a	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004ed	            0x31c0	                            xor eax, eax	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004ef	    0x41b820b00000	                         mov r8d, 0xb020	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004f5	            0x31ff	                            xor edi, edi	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x40004f7	          0x448902	                    mov dword [rdx], r8d	       351	intel_mocs.c	FUNCTION_6	FOR_1	CALL_7
0x40004fa	          0x8d4801	                      lea ecx, [rax + 1]	       321	intel_mocs.c	FUNCTION_5
0x40004fd	      0x488b742408	                mov rsi, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x4000502	        0x440fb7c8	                           movzx r9d, ax	       320	intel_mocs.c	FUNCTION_5
0x4000506	        0x4883c208	                              add rdx, 8	       320	intel_mocs.c	FUNCTION_5
0x400050a	          0x83c701	                              add edi, 1	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x400050d	           0xfb7c9	                           movzx ecx, cx	       321	intel_mocs.c	FUNCTION_5
0x4000510	        0x4183c004	                              add r8d, 4	       321	intel_mocs.c	FUNCTION_5
0x4000514	          0x83c002	                              add eax, 2	       321	intel_mocs.c	FUNCTION_5
0x4000517	       0xfb74cce04	      movzx ecx, word [rsi + rcx*8 + 4] 	       352	intel_mocs.c	FUNCTION_6	FOR_1	CALL_8
0x400051c	    0x420fb774ce04	       movzx esi, word [rsi + r9*8 + 4] 	       352	intel_mocs.c	FUNCTION_6	FOR_1	CALL_8
0x4000522	          0xc1e110	                           shl ecx, 0x10	       352	intel_mocs.c	FUNCTION_6	FOR_1	CALL_8
0x4000525	             0x9f1	                             or ecx, esi	       352	intel_mocs.c	FUNCTION_6	FOR_1	CALL_8
0x4000527	          0x894afc	                mov dword [rdx - 4], ecx	       352	intel_mocs.c	FUNCTION_6	FOR_1	CALL_8
0x400052a	          0x8b0c24	                    mov ecx, dword [rsp]	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x400052d	            0x89ce	                            mov esi, ecx	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x400052f	            0xd1ee	                              shr esi, 1	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x4000531	            0x39f7	                            cmp edi, esi	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x4000533	            0x72c2	                            jb 0x40004f7	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x4000535	          0x83e101	                              and ecx, 1	       355	intel_mocs.c	FUNCTION_6	IF_3
0x4000538	            0x742d	                            je 0x4000567	       355	intel_mocs.c	FUNCTION_6	IF_3
0x400053a	    0x8d04bd20b000	               lea eax, [rdi*4 + 0xb020]	       357	intel_mocs.c	FUNCTION_6	IF_3	CALL_10
0x4000541	        0x4883c208	                              add rdx, 8	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x4000545	          0x8942f8	                mov dword [rdx - 8], eax	       357	intel_mocs.c	FUNCTION_6	IF_3	CALL_10
0x4000548	          0x8d043f	                    lea eax, [rdi + rdi]	       320	intel_mocs.c	FUNCTION_5
0x400054b	      0x488b4c2408	                mov rcx, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x4000550	          0x83c701	                              add edi, 1	       359	intel_mocs.c	FUNCTION_6	IF_3
0x4000553	           0xfb7c0	                           movzx eax, ax	       320	intel_mocs.c	FUNCTION_5
0x4000556	       0xfb774c104	      movzx esi, word [rcx + rax*8 + 4] 	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x400055b	         0xfb74104	               movzx eax, word [rcx + 4]	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x400055f	          0xc1e010	                           shl eax, 0x10	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x4000562	             0x9f0	                             or eax, esi	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x4000564	          0x8942fc	                mov dword [rdx - 4], eax	       358	intel_mocs.c	FUNCTION_6	IF_3	CALL_11
0x4000567	          0x83ff1e	                           cmp edi, 0x1e	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x400056a	            0x773d	                            ja 0x40005a9	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x400056c	    0x8d34bd20b000	               lea esi, [rdi*4 + 0xb020]	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x4000573	          0x4889d1	                            mov rcx, rdx	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x4000576	            0x8931	                    mov dword [rcx], esi	       368	intel_mocs.c	FUNCTION_6	FOR_2	CALL_13
0x4000578	      0x488b442408	                mov rax, qword [rsp + 8]	       320	intel_mocs.c	FUNCTION_5
0x400057d	          0x83c604	                              add esi, 4	       320	intel_mocs.c	FUNCTION_5
0x4000580	        0x4883c108	                              add rcx, 8	       320	intel_mocs.c	FUNCTION_5
0x4000584	         0xfb74004	               movzx eax, word [rax + 4]	       320	intel_mocs.c	FUNCTION_5
0x4000588	          0x4189c0	                            mov r8d, eax	       369	intel_mocs.c	FUNCTION_6	FOR_2	CALL_14
0x400058b	        0x41c1e010	                           shl r8d, 0x10	       369	intel_mocs.c	FUNCTION_6	FOR_2	CALL_14
0x400058f	          0x4409c0	                             or eax, r8d	       369	intel_mocs.c	FUNCTION_6	FOR_2	CALL_14
0x4000592	    0x81fe9cb00000	                         cmp esi, 0xb09c	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x4000598	          0x8941fc	                mov dword [rcx - 4], eax	       369	intel_mocs.c	FUNCTION_6	FOR_2	CALL_14
0x400059b	            0x75d9	                           jne 0x4000576	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x400059d	      0xb81e000000	                           mov eax, 0x1e	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x40005a2	            0x29f8	                            sub eax, edi	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x40005a4	      0x488d54c208	              lea rdx, [rdx + rax*8 + 8]	       367	intel_mocs.c	FUNCTION_6	FOR_2
0x40005a9	    0xc70200000000	                      mov dword [rdx], 0	       372	intel_mocs.c	FUNCTION_6
0x40005af	            0x31d2	                            xor edx, edx	       451	intel_mocs.c	FUNCTION_8
0x40005b1	      0xe949feffff	                           jmp 0x40003ff	       451	intel_mocs.c	FUNCTION_8
0x40005b6	    0x48c7c6000000	                              mov rsi, 0	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40005bd	    0x48c7c7000000	                              mov rdi, 0	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40005c4	      0xe800000000	                          call 0x40005c9	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40005c9	             0xf0b	                                     ud2	       341	intel_mocs.c	FUNCTION_6	IF_1	CALL_1
0x40005cb	      0xbaedffffff	                     mov edx, 0xffffffed	       342	intel_mocs.c	FUNCTION_6	IF_1
0x40005d0	      0xe92afeffff	                           jmp 0x40003ff	       342	intel_mocs.c	FUNCTION_6	IF_1
0x40005d5	    0x48c7c6000000	                              mov rsi, 0	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x40005dc	    0x48c7c7000000	                              mov rdi, 0	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x40005e3	      0xe800000000	                          call 0x40005e8	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x40005e8	             0xf0b	                                     ud2	       283	intel_mocs.c	FUNCTION_4	IF_1	CALL_1
0x40005ea	      0xbaedffffff	                     mov edx, 0xffffffed	       284	intel_mocs.c	FUNCTION_4	IF_1
0x40005ef	      0xe90bfeffff	                           jmp 0x40003ff	       284	intel_mocs.c	FUNCTION_4	IF_1
0x40005f4	            0x85c0	                           test eax, eax	       442	intel_mocs.c	FUNCTION_8	IF_1	IF_2
0x40005f6	            0x89c2	                            mov edx, eax	       288	intel_mocs.c	FUNCTION_4	CALL_4
0x40005f8	     0xf8501feffff	                           jne 0x40003ff	       442	intel_mocs.c	FUNCTION_8	IF_1	IF_2
0x40005fe	      0xe9b0feffff	                           jmp 0x40004b3	       442	intel_mocs.c	FUNCTION_8	IF_1	IF_2
0x4000603	            0x89c2	                            mov edx, eax	       346	intel_mocs.c	FUNCTION_6	CALL_4
0x4000605	      0xe9f5fdffff	                           jmp 0x40003ff	       346	intel_mocs.c	FUNCTION_6	CALL_4
0x400060a	            0x31ff	                            xor edi, edi	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x400060c	      0xe924ffffff	                           jmp 0x4000535	       350	intel_mocs.c	FUNCTION_6	FOR_1
0x4000611	      0xe800000000	                  call section_end..text	       452	intel_mocs.c	FUNCTION_8
