count_semcnt	DO,0:FOR,0:WHILE,0:functions,3:CALL,0:SWITCH,0:IF,2:ELSE,1	63
0x4000280	            0x4157	                                push r15	      1088	sem.c	FUNCTION_31
0x4000282	            0x4156	                                push r14	      1088	sem.c	FUNCTION_31
0x4000284	           0xfb7c6	                           movzx eax, si	      1096	sem.c	FUNCTION_31	IF_1
0x4000287	            0x4155	                                push r13	      1088	sem.c	FUNCTION_31
0x4000289	            0x4154	                                push r12	      1088	sem.c	FUNCTION_31
0x400028b	          0x4989c4	                            mov r12, rax	      1096	sem.c	FUNCTION_31	IF_1
0x400028e	              0x55	                                push rbp	      1088	sem.c	FUNCTION_31
0x400028f	              0x53	                                push rbx	      1088	sem.c	FUNCTION_31
0x4000290	        0x4883c004	                              add rax, 4	      1096	sem.c	FUNCTION_31	IF_1
0x4000294	        0x48c1e006	                              shl rax, 6	      1096	sem.c	FUNCTION_31	IF_1
0x4000298	          0x4889fd	                            mov rbp, rdi	      1088	sem.c	FUNCTION_31
0x400029b	        0x4883ec08	                              sub rsp, 8	      1088	sem.c	FUNCTION_31
0x400029f	        0x89542404	                mov dword [rsp + 4], edx	      1088	sem.c	FUNCTION_31
0x40002a3	      0x807c240400	                   cmp byte [rsp + 4], 0	      1095	sem.c	FUNCTION_31	IF_1
0x40002a8	      0x488d540728	            lea rdx, [rdi + rax + 0x28] 	      1096	sem.c	FUNCTION_31	IF_1
0x40002ad	            0x7505	                           jne 0x40002b4	      1095	sem.c	FUNCTION_31	IF_1
0x40002af	      0x488d540718	            lea rdx, [rdi + rax + 0x18] 	      1098	sem.c	FUNCTION_31	ELSE_1
0x40002b4	          0x488b02	                    mov rax, qword [rdx]	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002b7	            0x31db	                            xor ebx, ebx	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002b9	          0x4839c2	                            cmp rdx, rax	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002bc	            0x740b	                            je 0x40002c9	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002be	          0x488b00	                    mov rax, qword [rax]	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002c1	          0x83c301	                              add ebx, 1	      1104	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002c4	          0x4839c2	                            cmp rdx, rax	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002c7	            0x75f5	                           jne 0x40002be	      1100	sem.c	FUNCTION_31	ELSE_1	FUNCTION_1
0x40002c9	    0x4c8bbd880000	            mov r15, qword [rbp + 0x88] 	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002d0	    0x4c8dad880000	                   lea r13, [rbp + 0x88]	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002d7	          0x4d39ef	                            cmp r15, r13	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002da	            0x7421	                            je 0x40002fd	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002dc	    0x440fb6742404	              movzx r14d, byte [rsp + 4]	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002e2	          0x4c89fa	                            mov rdx, r15	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002e5	          0x4489f1	                           mov ecx, r14d	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002e8	          0x4489e6	                           mov esi, r12d	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002eb	          0x4889ef	                            mov rdi, rbp	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002ee	      0xe80dffffff	                      call sym.check_qop	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002f3	          0x4d8b3f	                    mov r15, qword [r15]	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002f6	             0x1c3	                            add ebx, eax	      1109	sem.c	FUNCTION_31	FUNCTION_2	CALL_1
0x40002f8	          0x4d39ef	                            cmp r15, r13	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002fb	            0x75e5	                           jne 0x40002e2	      1108	sem.c	FUNCTION_31	FUNCTION_2
0x40002fd	      0x807c240400	                   cmp byte [rsp + 4], 0	      1111	sem.c	FUNCTION_31	IF_2
0x4000302	            0x7431	                            je 0x4000335	      1111	sem.c	FUNCTION_31	IF_2
0x4000304	    0x4c8bad980000	            mov r13, qword [rbp + 0x98] 	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x400030b	    0x4c8db5980000	                   lea r14, [rbp + 0x98]	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x4000312	          0x4d39f5	                            cmp r13, r14	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x4000315	            0x741e	                            je 0x4000335	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x4000317	          0x4c89ea	                            mov rdx, r13	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x400031a	      0xb901000000	                              mov ecx, 1	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x400031f	          0x4489e6	                           mov esi, r12d	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x4000322	          0x4889ef	                            mov rdi, rbp	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x4000325	      0xe8d6feffff	                      call sym.check_qop	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x400032a	        0x4d8b6d00	                    mov r13, qword [r13]	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x400032e	             0x1c3	                            add ebx, eax	      1113	sem.c	FUNCTION_31	IF_2	FUNCTION_3	CALL_1
0x4000330	          0x4d39f5	                            cmp r13, r14	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x4000333	            0x75e2	                           jne 0x4000317	      1112	sem.c	FUNCTION_31	IF_2	FUNCTION_3
0x4000335	        0x4883c408	                              add rsp, 8	      1117	sem.c	FUNCTION_31
0x4000339	            0x89d8	                            mov eax, ebx	      1117	sem.c	FUNCTION_31
0x400033b	              0x5b	                                 pop rbx	      1117	sem.c	FUNCTION_31
0x400033c	              0x5d	                                 pop rbp	      1117	sem.c	FUNCTION_31
0x400033d	            0x415c	                                 pop r12	      1117	sem.c	FUNCTION_31
0x400033f	            0x415d	                                 pop r13	      1117	sem.c	FUNCTION_31
0x4000341	            0x415e	                                 pop r14	      1117	sem.c	FUNCTION_31
0x4000343	            0x415f	                                 pop r15	      1117	sem.c	FUNCTION_31
0x4000345	              0xc3	                                     ret	      1117	sem.c	FUNCTION_31
sem_exit_ns	DO,0:FOR,0:WHILE,0:functions,0:CALL,0:SWITCH,0:IF,0:ELSE,0	10
0x4003320	        0x488d7708	                      lea rsi, [rdi + 8]	       235	sem.c	FUNCTION_2	CALL_2
0x4003324	              0x53	                                push rbx	       234	sem.c	FUNCTION_2
0x4003325	    0x48c7c2000000	                              mov rdx, 0	       235	sem.c	FUNCTION_2	CALL_2
0x400332c	          0x4889fb	                            mov rbx, rdi	       234	sem.c	FUNCTION_2
0x400332f	      0xe800000000	                          call 0x4003334	       235	sem.c	FUNCTION_2	CALL_2
0x4003334	        0x488d7b38	                   lea rdi, [rbx + 0x38]	       236	sem.c	FUNCTION_2	CALL_3
0x4003338	      0xe800000000	                          call 0x400333d	       236	sem.c	FUNCTION_2	CALL_3
0x400333d	        0x488d7b58	                   lea rdi, [rbx + 0x58]	       237	sem.c	FUNCTION_2	CALL_4
0x4003341	              0x5b	                                 pop rbx	       238	sem.c	FUNCTION_2
0x4003342	      0xe900000000	                           jmp 0x4003347	       237	sem.c	FUNCTION_2	CALL_4
do_smart_wakeup_zero	DO,0:FOR,2:WHILE,0:functions,0:CALL,3:SWITCH,0:IF,4:ELSE,1	75
0x4000c20	          0x4885f6	                           test rsi, rsi	       881	sem.c	FUNCTION_26	IF_1
0x4000c23	            0x4156	                                push r14	       875	sem.c	FUNCTION_26
0x4000c25	            0x4155	                                push r13	       875	sem.c	FUNCTION_26
0x4000c27	            0x4154	                                push r12	       875	sem.c	FUNCTION_26
0x4000c29	          0x4989fc	                            mov r12, rdi	       875	sem.c	FUNCTION_26
0x4000c2c	              0x55	                                push rbp	       875	sem.c	FUNCTION_26
0x4000c2d	          0x4889cd	                            mov rbp, rcx	       875	sem.c	FUNCTION_26
0x4000c30	              0x53	                                push rbx	       875	sem.c	FUNCTION_26
0x4000c31	            0x747c	                            je 0x4000caf	       881	sem.c	FUNCTION_26	IF_1
0x4000c33	            0x85d2	                           test edx, edx	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c35	     0xf8ebe000000	                           jle 0x4000cf9	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c3b	          0x8d42ff	                      lea eax, [rdx - 1]	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c3e	          0x4889f3	                            mov rbx, rsi	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c41	            0x31d2	                            xor edx, edx	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c43	          0x4531f6	                          xor r14d, r14d	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c46	      0x488d444003	              lea rax, [rax + rax*2 + 3]	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c4b	        0x4c8d2c46	                  lea r13, [rsi + rax*2]	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c4f	            0xeb09	                           jmp 0x4000c5a	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c51	        0x4883c306	                              add rbx, 6	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c55	          0x4c39eb	                            cmp rbx, r13	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c58	            0x7432	                            je 0x4000c8c	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c5a	           0xfb703	                   movzx eax, word [rbx]	       883	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c5d	          0x4889c6	                            mov rsi, rax	       883	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c60	        0x4883c004	                              add rax, 4	       885	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c64	        0x48c1e006	                              shl rax, 6	       885	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c68	        0x418b0c04	              mov ecx, dword [r12 + rax]	       885	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c6c	            0x85c9	                           test ecx, ecx	       885	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c6e	            0x75e1	                           jne 0x4000c51	       885	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c70	          0x4889ea	                            mov rdx, rbp	       887	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2	CALL_1
0x4000c73	          0x4c89e7	                            mov rdi, r12	       887	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2	CALL_1
0x4000c76	        0x4883c306	                              add rbx, 6	       887	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2	CALL_1
0x4000c7a	      0xe8b1feffff	                 call sym.wake_const_ops	       887	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2	CALL_1
0x4000c7f	          0x4109c6	                            or r14d, eax	       887	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2	CALL_1
0x4000c82	          0x4c39eb	                            cmp rbx, r13	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c85	      0xba01000000	                              mov edx, 1	       886	sem.c	FUNCTION_26	IF_1	FOR_1	IF_2
0x4000c8a	            0x75ce	                           jne 0x4000c5a	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000c8c	            0x85d2	                           test edx, edx	       906	sem.c	FUNCTION_26	IF_4
0x4000c8e	            0x7413	                            je 0x4000ca3	       906	sem.c	FUNCTION_26	IF_4
0x4000c90	          0x4889ea	                            mov rdx, rbp	       907	sem.c	FUNCTION_26	CALL_3
0x4000c93	      0xbeffffffff	                     mov esi, 0xffffffff	       907	sem.c	FUNCTION_26	CALL_3
0x4000c98	          0x4c89e7	                            mov rdi, r12	       907	sem.c	FUNCTION_26	CALL_3
0x4000c9b	      0xe890feffff	                 call sym.wake_const_ops	       907	sem.c	FUNCTION_26	CALL_3
0x4000ca0	          0x4109c6	                            or r14d, eax	       907	sem.c	FUNCTION_26	CALL_3
0x4000ca3	              0x5b	                                 pop rbx	       910	sem.c	FUNCTION_26
0x4000ca4	          0x4489f0	                           mov eax, r14d	       910	sem.c	FUNCTION_26
0x4000ca7	              0x5d	                                 pop rbp	       910	sem.c	FUNCTION_26
0x4000ca8	            0x415c	                                 pop r12	       910	sem.c	FUNCTION_26
0x4000caa	            0x415d	                                 pop r13	       910	sem.c	FUNCTION_26
0x4000cac	            0x415e	                                 pop r14	       910	sem.c	FUNCTION_26
0x4000cae	              0xc3	                                     ret	       910	sem.c	FUNCTION_26
0x4000caf	    0x8bb7b8000000	            mov esi, dword [rdi + 0xb8] 	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cb5	            0x31d2	                            xor edx, edx	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cb7	          0x4531f6	                          xor r14d, r14d	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cba	            0x31db	                            xor ebx, ebx	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cbc	            0x85f6	                           test esi, esi	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cbe	            0x7f0f	                            jg 0x4000ccf	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cc0	            0xebe1	                           jmp 0x4000ca3	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cc2	          0x83c301	                              add ebx, 1	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000cc5	    0x41399c24b800	            cmp dword [r12 + 0xb8], ebx 	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000ccd	            0x7ebd	                           jle 0x4000c8c	       895	sem.c	FUNCTION_26	ELSE_1	FOR_2
0x4000ccf	          0x4863c3	                         movsxd rax, ebx	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000cd2	        0x4883c004	                              add rax, 4	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000cd6	        0x48c1e006	                              shl rax, 6	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000cda	        0x418b0404	              mov eax, dword [r12 + rax]	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000cde	            0x85c0	                           test eax, eax	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000ce0	            0x75e0	                           jne 0x4000cc2	       896	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000ce2	          0x4889ea	                            mov rdx, rbp	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000ce5	            0x89de	                            mov esi, ebx	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000ce7	          0x4c89e7	                            mov rdi, r12	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000cea	      0xe841feffff	                 call sym.wake_const_ops	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000cef	      0xba01000000	                              mov edx, 1	       897	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3
0x4000cf4	          0x4109c6	                            or r14d, eax	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000cf7	            0xebc9	                           jmp 0x4000cc2	       898	sem.c	FUNCTION_26	ELSE_1	FOR_2	IF_3	CALL_2
0x4000cf9	          0x4531f6	                          xor r14d, r14d	       882	sem.c	FUNCTION_26	IF_1	FOR_1
0x4000cfc	            0xeba5	                           jmp 0x4000ca3	       882	sem.c	FUNCTION_26	IF_1	FOR_1
sem_rcu_free	DO,0:FOR,0:WHILE,0:functions,0:CALL,4:SWITCH,0:IF,0:ELSE,0	7
0x4000060	              0x53	                                push rbx	       299	sem.c	FUNCTION_6
0x4000061	        0x488d5fc0	                   lea rbx, [rdi - 0x40]	       303	sem.c	FUNCTION_6	CALL_3
0x4000065	          0x4889df	                            mov rdi, rbx	       303	sem.c	FUNCTION_6	CALL_3
0x4000068	      0xe800000000	                          call 0x400006d	       303	sem.c	FUNCTION_6	CALL_3
0x400006d	          0x4889df	                            mov rdi, rbx	       304	sem.c	FUNCTION_6	CALL_4
0x4000070	              0x5b	                                 pop rbx	       305	sem.c	FUNCTION_6
0x4000071	      0xe900000000	                           jmp 0x4000076	       304	sem.c	FUNCTION_6	CALL_4
sem_more_checks	DO,0:FOR,0:WHILE,0:functions,0:CALL,1:SWITCH,0:IF,1:ELSE,0	6
0x4000040	    0x8b87b8000000	            mov eax, dword [rdi + 0xb8] 	       580	sem.c	FUNCTION_17
0x4000046	          0x394608	                cmp dword [rsi + 8], eax	       580	sem.c	FUNCTION_17
0x4000049	      0xba00000000	                              mov edx, 0	       580	sem.c	FUNCTION_17
0x400004e	      0xb8eaffffff	                     mov eax, 0xffffffea	       580	sem.c	FUNCTION_17
0x4000053	           0xf4ec2	                         cmovle eax, edx	       580	sem.c	FUNCTION_17
0x4000056	              0xc3	                                     ret	       581	sem.c	FUNCTION_17
