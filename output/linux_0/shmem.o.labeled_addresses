shmem_alloc_inode	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	9
0x40008b0	    0x488b3d000000	            mov rdi, qword [0x040008b7] 	      3855	shmem.c	FUNCTION_106	CALL_1
0x40008b7	      0xbec0004001	                      mov esi, 0x14000c0	      3855	shmem.c	FUNCTION_106	CALL_1
0x40008bc	      0xe800000000	                          call 0x40008c1	      3855	shmem.c	FUNCTION_106	CALL_1
0x40008c1	          0x4885c0	                           test rax, rax	      3856	shmem.c	FUNCTION_106	IF_1
0x40008c4	            0x7405	                            je 0x40008cb	      3856	shmem.c	FUNCTION_106	IF_1
0x40008c6	        0x4883c068	                           add rax, 0x68	      3858	shmem.c	FUNCTION_106
0x40008ca	              0xc3	                                     ret	      3858	shmem.c	FUNCTION_106
0x40008cb	            0x31c0	                            xor eax, eax	      3857	shmem.c	FUNCTION_106	IF_1
0x40008cd	              0xc3	                                     ret	      3859	shmem.c	FUNCTION_106
shmem_initxattrs	FOR,1:WHILE,0:IF,2:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,8	60
0x4001090	        0x48833e00	                      cmp qword [rsi], 0	      3330	shmem.c	FUNCTION_92	FOR_1
0x4001094	     0xf84a9000000	                            je 0x4001143	      3330	shmem.c	FUNCTION_92	FOR_1
0x400109a	            0x4155	                                push r13	      3324	shmem.c	FUNCTION_92
0x400109c	            0x4154	                                push r12	      3324	shmem.c	FUNCTION_92
0x400109e	        0x4c8d67e8	                   lea r12, [rdi - 0x18]	      3324	shmem.c	FUNCTION_92
0x40010a2	              0x55	                                push rbp	      3324	shmem.c	FUNCTION_92
0x40010a3	              0x53	                                push rbx	      3324	shmem.c	FUNCTION_92
0x40010a4	          0x4889f3	                            mov rbx, rsi	      3324	shmem.c	FUNCTION_92
0x40010a7	            0xeb39	                           jmp 0x40010e2	      3324	shmem.c	FUNCTION_92
0x40010a9	    0x48b973656375	          movabs rcx, 0x7974697275636573	      3343	shmem.c	FUNCTION_92	FOR_1	CALL_6
0x40010b3	        0xc640082e	                mov byte [rax + 8], 0x2e	      3343	shmem.c	FUNCTION_92	FOR_1	CALL_6
0x40010b7	          0x488b33	                    mov rsi, qword [rbx]	      3345	shmem.c	FUNCTION_92	FOR_1	CALL_7
0x40010ba	          0x488908	                    mov qword [rax], rcx	      3343	shmem.c	FUNCTION_92	FOR_1	CALL_6
0x40010bd	        0x488b4510	            mov rax, qword [rbp + 0x10] 	      3345	shmem.c	FUNCTION_92	FOR_1	CALL_7
0x40010c1	          0x4c89ea	                            mov rdx, r13	      3345	shmem.c	FUNCTION_92	FOR_1	CALL_7
0x40010c4	        0x4883c318	                           add rbx, 0x18	      3330	shmem.c	FUNCTION_92	FOR_1
0x40010c8	        0x488d7809	                      lea rdi, [rax + 9]	      3345	shmem.c	FUNCTION_92	FOR_1	CALL_7
0x40010cc	      0xe800000000	                          call 0x40010d1	      3345	shmem.c	FUNCTION_92	FOR_1	CALL_7
0x40010d1	          0x4889ee	                            mov rsi, rbp	      3348	shmem.c	FUNCTION_92	FOR_1	CALL_8
0x40010d4	          0x4c89e7	                            mov rdi, r12	      3348	shmem.c	FUNCTION_92	FOR_1	CALL_8
0x40010d7	      0xe800000000	                          call 0x40010dc	      3348	shmem.c	FUNCTION_92	FOR_1	CALL_8
0x40010dc	        0x48833b00	                      cmp qword [rbx], 0	      3330	shmem.c	FUNCTION_92	FOR_1
0x40010e0	            0x7458	                            je 0x400113a	      3330	shmem.c	FUNCTION_92	FOR_1
0x40010e2	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      3331	shmem.c	FUNCTION_92	FOR_1	CALL_2
0x40010e6	        0x488b7b08	                mov rdi, qword [rbx + 8]	      3331	shmem.c	FUNCTION_92	FOR_1	CALL_2
0x40010ea	      0xe800000000	                          call 0x40010ef	      3331	shmem.c	FUNCTION_92	FOR_1	CALL_2
0x40010ef	          0x4885c0	                           test rax, rax	      3332	shmem.c	FUNCTION_92	FOR_1	IF_1
0x40010f2	          0x4889c5	                            mov rbp, rax	      3331	shmem.c	FUNCTION_92	FOR_1	CALL_2
0x40010f5	            0x7437	                            je 0x400112e	      3332	shmem.c	FUNCTION_92	FOR_1	IF_1
0x40010f7	          0x488b3b	                    mov rdi, qword [rbx]	      3335	shmem.c	FUNCTION_92	FOR_1	CALL_3
0x40010fa	      0xe800000000	                          call 0x40010ff	      3335	shmem.c	FUNCTION_92	FOR_1	CALL_3
0x40010ff	        0x488d780a	                    lea rdi, [rax + 0xa]	       517	slab.h	
0x4001103	      0xbec0004001	                      mov esi, 0x14000c0	       517	slab.h	
0x4001108	        0x4c8d6801	                      lea r13, [rax + 1]	      3335	shmem.c	FUNCTION_92	FOR_1	CALL_3
0x400110c	      0xe800000000	                          call 0x4001111	       517	slab.h	
0x4001111	          0x4885c0	                           test rax, rax	      3338	shmem.c	FUNCTION_92	FOR_1	IF_2
0x4001114	        0x48894510	            mov qword [rbp + 0x10], rax 	      3336	shmem.c	FUNCTION_92	FOR_1	CALL_4
0x4001118	            0x758f	                           jne 0x40010a9	      3338	shmem.c	FUNCTION_92	FOR_1	IF_2
0x400111a	          0x4889ef	                            mov rdi, rbp	      3339	shmem.c	FUNCTION_92	FOR_1	IF_2	CALL_5
0x400111d	      0xe800000000	                          call 0x4001122	      3339	shmem.c	FUNCTION_92	FOR_1	IF_2	CALL_5
0x4001122	      0xb8f4ffffff	                     mov eax, 0xfffffff4	      3340	shmem.c	FUNCTION_92	FOR_1	IF_2
0x4001127	              0x5b	                                 pop rbx	      3352	shmem.c	FUNCTION_92
0x4001128	              0x5d	                                 pop rbp	      3352	shmem.c	FUNCTION_92
0x4001129	            0x415c	                                 pop r12	      3352	shmem.c	FUNCTION_92
0x400112b	            0x415d	                                 pop r13	      3352	shmem.c	FUNCTION_92
0x400112d	              0xc3	                                     ret	      3352	shmem.c	FUNCTION_92
0x400112e	              0x5b	                                 pop rbx	      3352	shmem.c	FUNCTION_92
0x400112f	      0xb8f4ffffff	                     mov eax, 0xfffffff4	      3333	shmem.c	FUNCTION_92	FOR_1	IF_1
0x4001134	              0x5d	                                 pop rbp	      3352	shmem.c	FUNCTION_92
0x4001135	            0x415c	                                 pop r12	      3352	shmem.c	FUNCTION_92
0x4001137	            0x415d	                                 pop r13	      3352	shmem.c	FUNCTION_92
0x4001139	              0xc3	                                     ret	      3352	shmem.c	FUNCTION_92
0x400113a	              0x5b	                                 pop rbx	      3352	shmem.c	FUNCTION_92
0x400113b	            0x31c0	                            xor eax, eax	      3351	shmem.c	FUNCTION_92
0x400113d	              0x5d	                                 pop rbp	      3352	shmem.c	FUNCTION_92
0x400113e	            0x415c	                                 pop r12	      3352	shmem.c	FUNCTION_92
0x4001140	            0x415d	                                 pop r13	      3352	shmem.c	FUNCTION_92
0x4001142	              0xc3	                                     ret	      3352	shmem.c	FUNCTION_92
0x4001143	            0x31c0	                            xor eax, eax	      3351	shmem.c	FUNCTION_92
0x4001145	              0xc3	                                     ret	      3352	shmem.c	FUNCTION_92
shmem_destroy_inode	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,4	13
0x4000840	              0x53	                                push rbx	      3870	shmem.c	FUNCTION_108
0x4000841	           0xfb707	                   movzx eax, word [rdi]	      3871	shmem.c	FUNCTION_108	IF_1	CALL_1
0x4000844	          0x4889fb	                            mov rbx, rdi	      3870	shmem.c	FUNCTION_108
0x4000847	        0x662500f0	                          and ax, 0xf000	      3871	shmem.c	FUNCTION_108	IF_1	CALL_1
0x400084b	        0x663d0080	                          cmp ax, 0x8000	      3871	shmem.c	FUNCTION_108	IF_1	CALL_1
0x400084f	            0x7414	                            je 0x4000865	      3871	shmem.c	FUNCTION_108	IF_1	CALL_1
0x4000851	    0x488dbb300100	                  lea rdi, [rbx + 0x130]	      3873	shmem.c	FUNCTION_108	CALL_4
0x4000858	    0x48c7c6000000	                              mov rsi, 0	      3873	shmem.c	FUNCTION_108	CALL_4
0x400085f	              0x5b	                                 pop rbx	      3874	shmem.c	FUNCTION_108
0x4000860	      0xe900000000	                           jmp 0x4000865	      3873	shmem.c	FUNCTION_108	CALL_4
0x4000865	        0x488d7fd8	                   lea rdi, [rdi - 0x28]	      3872	shmem.c	FUNCTION_108	CALL_3
0x4000869	      0xe800000000	                          call 0x400086e	      3872	shmem.c	FUNCTION_108	CALL_3
0x400086e	            0xebe1	                           jmp 0x4000851	      3872	shmem.c	FUNCTION_108	CALL_3
shmem_match	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,0	10
0x40000d0	            0x31c0	                            xor eax, eax	      3428	shmem.c	FUNCTION_97
0x40000d2	        0x488b5740	            mov rdx, qword [rdi + 0x40] 	      3428	shmem.c	FUNCTION_97
0x40000d6	        0x48395604	                cmp qword [rsi + 4], rdx	      3428	shmem.c	FUNCTION_97
0x40000da	            0x7402	                            je 0x40000de	      3428	shmem.c	FUNCTION_97
0x40000dc	            0xf3c3	                                     ret	      3429	shmem.c	FUNCTION_97
0x40000de	    0x8b8728020000	           mov eax, dword [rdi + 0x228] 	      3428	shmem.c	FUNCTION_97
0x40000e4	            0x3906	                    cmp dword [rsi], eax	      3428	shmem.c	FUNCTION_97
0x40000e6	           0xf94c0	                                 sete al	      3428	shmem.c	FUNCTION_97
0x40000e9	           0xfb6c0	                           movzx eax, al	      3428	shmem.c	FUNCTION_97
0x40000ec	              0xc3	                                     ret	      3429	shmem.c	FUNCTION_97
vma_is_shmem	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,0	3
0x4004ee0	    0x4881bf900000	               cmp qword [rdi + 0x90], 0	       235	shmem.c	FUNCTION_12
0x4004eeb	           0xf94c0	                                 sete al	       235	shmem.c	FUNCTION_12
0x4004eee	              0xc3	                                     ret	       236	shmem.c	FUNCTION_12
shmem_mkdir	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,2	16
0x4001570	              0x53	                                push rbx	      3064	shmem.c	FUNCTION_81
0x4001571	          0x80ce40	                             or dh, 0x40	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001574	            0x31c9	                            xor ecx, ecx	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001576	           0xfb7d2	                           movzx edx, dx	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001579	          0x4889fb	                            mov rbx, rdi	      3064	shmem.c	FUNCTION_81
0x400157c	        0x4883ec08	                              sub rsp, 8	      3064	shmem.c	FUNCTION_81
0x4001580	      0xe8abfcffff	                    call sym.shmem_mknod	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001585	            0x85c0	                           test eax, eax	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001587	            0x7510	                           jne 0x4001599	      3067	shmem.c	FUNCTION_81	IF_1	CALL_1
0x4001589	          0x4889df	                            mov rdi, rbx	      3069	shmem.c	FUNCTION_81	CALL_2
0x400158c	        0x89442404	                mov dword [rsp + 4], eax	      3069	shmem.c	FUNCTION_81	CALL_2
0x4001590	      0xe800000000	                          call 0x4001595	      3069	shmem.c	FUNCTION_81	CALL_2
0x4001595	        0x8b442404	                mov eax, dword [rsp + 4]	      3069	shmem.c	FUNCTION_81	CALL_2
0x4001599	        0x4883c408	                              add rsp, 8	      3071	shmem.c	FUNCTION_81
0x400159d	              0x5b	                                 pop rbx	      3071	shmem.c	FUNCTION_81
0x400159e	              0xc3	                                     ret	      3071	shmem.c	FUNCTION_81
shmem_listxattr	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,4	6
0x4001150	        0x488b7f30	            mov rdi, qword [rdi + 0x30] 	      3398	shmem.c	FUNCTION_95
0x4001154	          0x4889f0	                            mov rax, rsi	      3398	shmem.c	FUNCTION_95
0x4001157	          0x4889d1	                            mov rcx, rdx	      3400	shmem.c	FUNCTION_95	CALL_4
0x400115a	          0x4889c2	                            mov rdx, rax	      3400	shmem.c	FUNCTION_95	CALL_4
0x400115d	        0x488d77e8	                   lea rsi, [rdi - 0x18]	      3400	shmem.c	FUNCTION_95	CALL_4
0x4001161	      0xe900000000	                           jmp 0x4001166	      3400	shmem.c	FUNCTION_95	CALL_4
shmem_get_parent	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	2
0x40000c0	    0x48c7c08cffff	             mov rax, 0xffffffffffffff8c	      3421	shmem.c	FUNCTION_96
0x40000c7	              0xc3	                                     ret	      3421	shmem.c	FUNCTION_96
shmem_zero_setup	FOR,0:WHILE,0:IF,3:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,6	23
0x4005cb0	              0x55	                                push rbp	      4302	shmem.c	FUNCTION_127
0x4005cb1	              0x53	                                push rbx	      4302	shmem.c	FUNCTION_127
0x4005cb2	          0x4889fb	                            mov rbx, rdi	      4302	shmem.c	FUNCTION_127
0x4005cb5	        0x488b5708	                mov rdx, qword [rdi + 8]	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cb9	          0x482b17	                    sub rdx, qword [rdi]	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cbc	    0x41b800020000	                          mov r8d, 0x200	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cc2	        0x488b4f50	            mov rcx, qword [rdi + 0x50] 	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cc6	    0x488b3d000000	            mov rdi, qword [0x04005ccd] 	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005ccd	    0x48c7c6000000	                              mov rsi, 0	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cd4	      0xe8b7bdffff	             call sym.__shmem_file_setup	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005cd9	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	      4313	shmem.c	FUNCTION_127	IF_1	CALL_2
0x4005cdf	          0x4889c5	                            mov rbp, rax	      4268	shmem.c	FUNCTION_124	CALL_1
0x4005ce2	            0x7725	                            ja 0x4005d09	      4313	shmem.c	FUNCTION_127	IF_1	CALL_2
0x4005ce4	    0x488bbba00000	            mov rdi, qword [rbx + 0xa0] 	      4316	shmem.c	FUNCTION_127	IF_2
0x4005ceb	          0x4885ff	                           test rdi, rdi	      4316	shmem.c	FUNCTION_127	IF_2
0x4005cee	            0x7405	                            je 0x4005cf5	      4316	shmem.c	FUNCTION_127	IF_2
0x4005cf0	      0xe800000000	                          call 0x4005cf5	      4317	shmem.c	FUNCTION_127	CALL_4
0x4005cf5	    0x4889aba00000	             mov qword [rbx + 0xa0], rbp	      4318	shmem.c	FUNCTION_127
0x4005cfc	    0x48c783900000	               mov qword [rbx + 0x90], 0	      4319	shmem.c	FUNCTION_127
0x4005d07	            0x31c0	                            xor eax, eax	      4327	shmem.c	FUNCTION_127
0x4005d09	              0x5b	                                 pop rbx	      4328	shmem.c	FUNCTION_127
0x4005d0a	              0x5d	                                 pop rbp	      4328	shmem.c	FUNCTION_127
0x4005d0b	              0xc3	                                     ret	      4328	shmem.c	FUNCTION_127
shmem_truncate_range	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	17
0x40040b0	              0x55	                                push rbp	       980	shmem.c	FUNCTION_33
0x40040b1	            0x31c9	                            xor ecx, ecx	       981	shmem.c	FUNCTION_33	CALL_1
0x40040b3	          0x4889e5	                            mov rbp, rsp	       980	shmem.c	FUNCTION_33
0x40040b6	            0x4152	                                push r10	       980	shmem.c	FUNCTION_33
0x40040b8	              0x53	                                push rbx	       980	shmem.c	FUNCTION_33
0x40040b9	          0x4889fb	                            mov rbx, rdi	       980	shmem.c	FUNCTION_33
0x40040bc	      0xe80ff9ffff	               call sym.shmem_undo_range	       981	shmem.c	FUNCTION_33	CALL_1
0x40040c1	          0x4889df	                            mov rdi, rbx	       982	shmem.c	FUNCTION_33	CALL_2
0x40040c4	      0xe800000000	                          call 0x40040c9	       982	shmem.c	FUNCTION_33	CALL_2
0x40040c9	        0x48894368	             mov qword [rbx + 0x68], rax	       982	shmem.c	FUNCTION_33	CALL_2
0x40040cd	        0x48895370	             mov qword [rbx + 0x70], rdx	       982	shmem.c	FUNCTION_33	CALL_2
0x40040d1	        0x48894378	             mov qword [rbx + 0x78], rax	       982	shmem.c	FUNCTION_33	CALL_2
0x40040d5	    0x488993800000	             mov qword [rbx + 0x80], rdx	       982	shmem.c	FUNCTION_33	CALL_2
0x40040dc	              0x5b	                                 pop rbx	       983	shmem.c	FUNCTION_33
0x40040dd	            0x415a	                                 pop r10	       983	shmem.c	FUNCTION_33
0x40040df	              0x5d	                                 pop rbp	       983	shmem.c	FUNCTION_33
0x40040e0	              0xc3	                                     ret	       983	shmem.c	FUNCTION_33
shmem_write_begin	FOR,0:WHILE,0:IF,3:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	24
0x4002f90	          0x488b3e	                    mov rdi, qword [rsi]	      2370	shmem.c	FUNCTION_66
0x4002f93	          0x4989d0	                             mov r8, rdx	      2369	shmem.c	FUNCTION_66
0x4002f96	          0x4c89ca	                             mov rdx, r9	      2369	shmem.c	FUNCTION_66
0x4002f99	          0x4c89c6	                             mov rsi, r8	      2372	shmem.c	FUNCTION_66
0x4002f9c	        0x48c1fe0c	                            sar rsi, 0xc	      2372	shmem.c	FUNCTION_66
0x4002fa0	          0x8b479c	             mov eax, dword [rdi - 0x64]	      2375	shmem.c	FUNCTION_66	IF_1	CALL_2
0x4002fa3	            0xa80c	                            test al, 0xc	      2375	shmem.c	FUNCTION_66	IF_1	CALL_2
0x4002fa5	            0x7521	                           jne 0x4002fc8	      2375	shmem.c	FUNCTION_66	IF_1	CALL_2
0x4002fa7	        0x488b4730	            mov rax, qword [rdi + 0x30] 	      2375	shmem.c	FUNCTION_66	IF_1	CALL_2
0x4002fab	          0x4531c9	                            xor r9d, r9d	       131	shmem.c	FUNCTION_3	CALL_1
0x4002fae	      0xb904000000	                              mov ecx, 4	       131	shmem.c	FUNCTION_3	CALL_1
0x4002fb3	    0x448b80840000	            mov r8d, dword [rax + 0x84] 	       131	shmem.c	FUNCTION_3	CALL_1
0x4002fba	    0x48c744240800	                  mov qword [rsp + 8], 0	       131	shmem.c	FUNCTION_3	CALL_1
0x4002fc3	      0xe9e8f3ffff	       jmp sym.shmem_getpage_gfp.isra.51	       131	shmem.c	FUNCTION_3	CALL_1
0x4002fc8	            0xa808	                              test al, 8	      2376	shmem.c	FUNCTION_66	IF_1	IF_2
0x4002fca	            0x750f	                           jne 0x4002fdb	      2376	shmem.c	FUNCTION_66	IF_1	IF_2
0x4002fcc	            0xa804	                              test al, 4	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fce	            0x74d7	                            je 0x4002fa7	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fd0	            0x89c9	                            mov ecx, ecx	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fd2	          0x4901c8	                             add r8, rcx	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fd5	        0x4c3b4750	              cmp r8, qword [rdi + 0x50]	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fd9	            0x7ecc	                           jle 0x4002fa7	      2378	shmem.c	FUNCTION_66	IF_1	IF_3
0x4002fdb	      0xb8ffffffff	                     mov eax, 0xffffffff	      2383	shmem.c	FUNCTION_66
0x4002fe0	              0xc3	                                     ret	      2383	shmem.c	FUNCTION_66
shmem_tmpfile	FOR,0:WHILE,0:IF,3:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,5	51
0x4001000	            0x4155	                                push r13	      3041	shmem.c	FUNCTION_80
0x4001002	            0x4154	                                push r12	      3041	shmem.c	FUNCTION_80
0x4001004	            0x31c9	                            xor ecx, ecx	      3045	shmem.c	FUNCTION_80	CALL_1
0x4001006	              0x55	                                push rbp	      3041	shmem.c	FUNCTION_80
0x4001007	          0x4889fd	                            mov rbp, rdi	      3041	shmem.c	FUNCTION_80
0x400100a	              0x53	                                push rbx	      3041	shmem.c	FUNCTION_80
0x400100b	        0x488b7f28	            mov rdi, qword [rdi + 0x28] 	      3045	shmem.c	FUNCTION_80	CALL_1
0x400100f	          0x4989f5	                            mov r13, rsi	      3041	shmem.c	FUNCTION_80
0x4001012	           0xfb7d2	                           movzx edx, dx	      3045	shmem.c	FUNCTION_80	CALL_1
0x4001015	    0x41b800002000	                       mov r8d, 0x200000	      3045	shmem.c	FUNCTION_80	CALL_1
0x400101b	          0x4889ee	                            mov rsi, rbp	      3045	shmem.c	FUNCTION_80	CALL_1
0x400101e	      0xe8edfdffff	                call sym.shmem_get_inode	      3045	shmem.c	FUNCTION_80	CALL_1
0x4001023	          0x4885c0	                           test rax, rax	      3046	shmem.c	FUNCTION_80	IF_1
0x4001026	            0x745b	                            je 0x4001083	      3046	shmem.c	FUNCTION_80	IF_1
0x4001028	          0x4531c0	                            xor r8d, r8d	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x400102b	            0x31d2	                            xor edx, edx	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x400102d	    0x48c7c1000000	                              mov rcx, 0	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x4001034	          0x4889ee	                            mov rsi, rbp	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x4001037	          0x4889c7	                            mov rdi, rax	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x400103a	          0x4989c4	                            mov r12, rax	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x400103d	      0xe800000000	                          call 0x4001042	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x4001042	            0x85c0	                           test eax, eax	      3050	shmem.c	FUNCTION_80	IF_1	IF_2
0x4001044	            0x89c3	                            mov ebx, eax	      3047	shmem.c	FUNCTION_80	IF_1	CALL_2
0x4001046	            0x7416	                            je 0x400105e	      3050	shmem.c	FUNCTION_80	IF_1	IF_2
0x4001048	          0x83f8a1	             cmp eax, 0xffffffffffffffa1	      3050	shmem.c	FUNCTION_80	IF_1	IF_2
0x400104b	            0x7411	                            je 0x400105e	      3050	shmem.c	FUNCTION_80	IF_1	IF_2
0x400104d	          0x4c89e7	                            mov rdi, r12	      3059	shmem.c	FUNCTION_80	CALL_5
0x4001050	      0xe800000000	                          call 0x4001055	      3059	shmem.c	FUNCTION_80	CALL_5
0x4001055	            0x89d8	                            mov eax, ebx	      3061	shmem.c	FUNCTION_80
0x4001057	              0x5b	                                 pop rbx	      3061	shmem.c	FUNCTION_80
0x4001058	              0x5d	                                 pop rbp	      3061	shmem.c	FUNCTION_80
0x4001059	            0x415c	                                 pop r12	      3061	shmem.c	FUNCTION_80
0x400105b	            0x415d	                                 pop r13	      3061	shmem.c	FUNCTION_80
0x400105d	              0xc3	                                     ret	      3061	shmem.c	FUNCTION_80
0x400105e	          0x4c89e6	                            mov rsi, r12	      3052	shmem.c	FUNCTION_80	IF_1	CALL_3
0x4001061	          0x4889ef	                            mov rdi, rbp	      3052	shmem.c	FUNCTION_80	IF_1	CALL_3
0x4001064	      0xe800000000	                          call 0x4001069	      3052	shmem.c	FUNCTION_80	IF_1	CALL_3
0x4001069	            0x85c0	                           test eax, eax	      3053	shmem.c	FUNCTION_80	IF_1	IF_3
0x400106b	            0x89c3	                            mov ebx, eax	      3052	shmem.c	FUNCTION_80	IF_1	CALL_3
0x400106d	            0x75de	                           jne 0x400104d	      3053	shmem.c	FUNCTION_80	IF_1	IF_3
0x400106f	          0x4c89e6	                            mov rsi, r12	      3055	shmem.c	FUNCTION_80	IF_1	CALL_4
0x4001072	          0x4c89ef	                            mov rdi, r13	      3055	shmem.c	FUNCTION_80	IF_1	CALL_4
0x4001075	      0xe800000000	                          call 0x400107a	      3055	shmem.c	FUNCTION_80	IF_1	CALL_4
0x400107a	            0x89d8	                            mov eax, ebx	      3061	shmem.c	FUNCTION_80
0x400107c	              0x5b	                                 pop rbx	      3061	shmem.c	FUNCTION_80
0x400107d	              0x5d	                                 pop rbp	      3061	shmem.c	FUNCTION_80
0x400107e	            0x415c	                                 pop r12	      3061	shmem.c	FUNCTION_80
0x4001080	            0x415d	                                 pop r13	      3061	shmem.c	FUNCTION_80
0x4001082	              0xc3	                                     ret	      3061	shmem.c	FUNCTION_80
0x4001083	      0xbbe4ffffff	                     mov ebx, 0xffffffe4	      3043	shmem.c	FUNCTION_80
0x4001088	            0xebcb	                           jmp 0x4001055	      3043	shmem.c	FUNCTION_80
shmem_fh_to_dentry	FOR,0:WHILE,0:IF,2:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	25
0x40008d0	          0x83fa02	                              cmp edx, 2	      3438	shmem.c	FUNCTION_98	IF_1
0x40008d3	            0x7e38	                           jle 0x400090d	      3438	shmem.c	FUNCTION_98	IF_1
0x40008d5	              0x55	                                push rbp	      3433	shmem.c	FUNCTION_98
0x40008d6	          0x4889f1	                            mov rcx, rsi	      3433	shmem.c	FUNCTION_98
0x40008d9	              0x53	                                push rbx	      3433	shmem.c	FUNCTION_98
0x40008da	            0x8b36	                    mov esi, dword [rsi]	      3444	shmem.c	FUNCTION_98	CALL_1
0x40008dc	    0x48c7c2000000	                              mov rdx, 0	      3444	shmem.c	FUNCTION_98	CALL_1
0x40008e3	        0x48037104	                add rsi, qword [rcx + 4]	      3444	shmem.c	FUNCTION_98	CALL_1
0x40008e7	      0xe800000000	                          call 0x40008ec	      3444	shmem.c	FUNCTION_98	CALL_1
0x40008ec	          0x4885c0	                           test rax, rax	      3446	shmem.c	FUNCTION_98	IF_2
0x40008ef	          0x4889c5	                            mov rbp, rax	      3444	shmem.c	FUNCTION_98	CALL_1
0x40008f2	            0x741c	                            je 0x4000910	      3446	shmem.c	FUNCTION_98	IF_2
0x40008f4	          0x4889c7	                            mov rdi, rax	      3447	shmem.c	FUNCTION_98	IF_2	CALL_2
0x40008f7	      0xe800000000	                          call 0x40008fc	      3447	shmem.c	FUNCTION_98	IF_2	CALL_2
0x40008fc	          0x4889ef	                            mov rdi, rbp	      3448	shmem.c	FUNCTION_98	IF_2	CALL_3
0x40008ff	          0x4889c3	                            mov rbx, rax	      3447	shmem.c	FUNCTION_98	IF_2	CALL_2
0x4000902	      0xe800000000	                          call 0x4000907	      3448	shmem.c	FUNCTION_98	IF_2	CALL_3
0x4000907	          0x4889d8	                            mov rax, rbx	      3447	shmem.c	FUNCTION_98	IF_2	CALL_2
0x400090a	              0x5b	                                 pop rbx	      3452	shmem.c	FUNCTION_98
0x400090b	              0x5d	                                 pop rbp	      3452	shmem.c	FUNCTION_98
0x400090c	              0xc3	                                     ret	      3452	shmem.c	FUNCTION_98
0x400090d	            0x31c0	                            xor eax, eax	      3439	shmem.c	FUNCTION_98	IF_1
0x400090f	              0xc3	                                     ret	      3452	shmem.c	FUNCTION_98
0x4000910	            0x31c0	                            xor eax, eax	      3439	shmem.c	FUNCTION_98	IF_1
0x4000912	            0xebf6	                           jmp 0x400090a	      3439	shmem.c	FUNCTION_98	IF_1
shmem_mount	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	3
0x4001690	          0x4889ca	                            mov rdx, rcx	      3990	shmem.c	FUNCTION_112
0x4001693	    0x48c7c1000000	                              mov rcx, 0	      3991	shmem.c	FUNCTION_112	CALL_1
0x400169a	      0xe900000000	                           jmp 0x400169f	      3991	shmem.c	FUNCTION_112	CALL_1
shmem_unlink	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,6	37
0x4001170	              0x55	                                push rbp	      3107	shmem.c	FUNCTION_84
0x4001171	          0x4889e5	                            mov rbp, rsp	      3107	shmem.c	FUNCTION_84
0x4001174	            0x4155	                                push r13	      3107	shmem.c	FUNCTION_84
0x4001176	            0x4154	                                push r12	      3107	shmem.c	FUNCTION_84
0x4001178	            0x4152	                                push r10	      3107	shmem.c	FUNCTION_84
0x400117a	              0x53	                                push rbx	      3107	shmem.c	FUNCTION_84
0x400117b	          0x4989fc	                            mov r12, rdi	      3107	shmem.c	FUNCTION_84
0x400117e	        0x488b5e30	            mov rbx, qword [rsi + 0x30] 	      3107	shmem.c	FUNCTION_84
0x4001182	          0x4989f5	                            mov r13, rsi	      3107	shmem.c	FUNCTION_84
0x4001185	        0x837b4801	               cmp dword [rbx + 0x48], 1	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x4001189	            0x7616	                           jbe 0x40011a1	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x400118b	           0xfb703	                   movzx eax, word [rbx]	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x400118e	        0x662500f0	                          and ax, 0xf000	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x4001192	        0x663d0040	                          cmp ax, 0x4000	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x4001196	            0x7409	                            je 0x40011a1	      3110	shmem.c	FUNCTION_84	IF_1	CALL_2
0x4001198	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	      3111	shmem.c	FUNCTION_84	CALL_3
0x400119c	      0xe8efeeffff	               call sym.shmem_free_inode	      3111	shmem.c	FUNCTION_84	CALL_3
0x40011a1	    0x49836c245014	            sub qword [r12 + 0x50], 0x14	      3113	shmem.c	FUNCTION_84
0x40011a7	          0x4889df	                            mov rdi, rbx	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011aa	      0xe800000000	                          call 0x40011af	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011af	          0x4889df	                            mov rdi, rbx	      3115	shmem.c	FUNCTION_84	CALL_5
0x40011b2	      0x4989442468	             mov qword [r12 + 0x68], rax	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011b7	      0x4989442478	             mov qword [r12 + 0x78], rax	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011bc	      0x4989542470	             mov qword [r12 + 0x70], rdx	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011c1	    0x498994248000	             mov qword [r12 + 0x80], rdx	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011c9	        0x48894378	             mov qword [rbx + 0x78], rax	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011cd	    0x488993800000	             mov qword [rbx + 0x80], rdx	      3114	shmem.c	FUNCTION_84	CALL_4
0x40011d4	      0xe800000000	                          call 0x40011d9	      3115	shmem.c	FUNCTION_84	CALL_5
0x40011d9	          0x4c89ef	                            mov rdi, r13	      3116	shmem.c	FUNCTION_84	CALL_6
0x40011dc	      0xe800000000	                          call 0x40011e1	      3116	shmem.c	FUNCTION_84	CALL_6
0x40011e1	            0x31c0	                            xor eax, eax	      3118	shmem.c	FUNCTION_84
0x40011e3	              0x5b	                                 pop rbx	      3118	shmem.c	FUNCTION_84
0x40011e4	            0x415a	                                 pop r10	      3118	shmem.c	FUNCTION_84
0x40011e6	            0x415c	                                 pop r12	      3118	shmem.c	FUNCTION_84
0x40011e8	            0x415d	                                 pop r13	      3118	shmem.c	FUNCTION_84
0x40011ea	              0x5d	                                 pop rbp	      3118	shmem.c	FUNCTION_84
0x40011eb	              0xc3	                                     ret	      3118	shmem.c	FUNCTION_84
shmem_rmdir	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,5	21
0x40011f0	              0x55	                                push rbp	      3121	shmem.c	FUNCTION_85
0x40011f1	              0x53	                                push rbx	      3121	shmem.c	FUNCTION_85
0x40011f2	          0x4889fd	                            mov rbp, rdi	      3121	shmem.c	FUNCTION_85
0x40011f5	          0x4889f7	                            mov rdi, rsi	      3122	shmem.c	FUNCTION_85	IF_1	CALL_1
0x40011f8	          0x4889f3	                            mov rbx, rsi	      3121	shmem.c	FUNCTION_85
0x40011fb	      0xe800000000	                          call 0x4001200	      3122	shmem.c	FUNCTION_85	IF_1	CALL_1
0x4001200	            0x85c0	                           test eax, eax	      3122	shmem.c	FUNCTION_85	IF_1	CALL_1
0x4001202	            0x741e	                            je 0x4001222	      3122	shmem.c	FUNCTION_85	IF_1	CALL_1
0x4001204	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	      3125	shmem.c	FUNCTION_85	CALL_3
0x4001208	      0xe800000000	                          call 0x400120d	      3125	shmem.c	FUNCTION_85	CALL_3
0x400120d	          0x4889ef	                            mov rdi, rbp	      3126	shmem.c	FUNCTION_85	CALL_4
0x4001210	      0xe800000000	                          call 0x4001215	      3126	shmem.c	FUNCTION_85	CALL_4
0x4001215	          0x4889de	                            mov rsi, rbx	      3127	shmem.c	FUNCTION_85	CALL_5
0x4001218	          0x4889ef	                            mov rdi, rbp	      3127	shmem.c	FUNCTION_85	CALL_5
0x400121b	              0x5b	                                 pop rbx	      3128	shmem.c	FUNCTION_85
0x400121c	              0x5d	                                 pop rbp	      3128	shmem.c	FUNCTION_85
0x400121d	      0xe94effffff	                    jmp sym.shmem_unlink	      3127	shmem.c	FUNCTION_85	CALL_5
0x4001222	      0xb8d9ffffff	                     mov eax, 0xffffffd9	      3128	shmem.c	FUNCTION_85
0x4001227	              0x5b	                                 pop rbx	      3128	shmem.c	FUNCTION_85
0x4001228	              0x5d	                                 pop rbp	      3128	shmem.c	FUNCTION_85
0x4001229	              0xc3	                                     ret	      3128	shmem.c	FUNCTION_85
shmem_radix_tree_replace	FOR,0:WHILE,0:IF,2:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,4	36
0x40001e0	            0x4154	                                push r12	       328	shmem.c	FUNCTION_18
0x40001e2	              0x55	                                push rbp	       328	shmem.c	FUNCTION_18
0x40001e3	          0x4989cc	                            mov r12, rcx	       328	shmem.c	FUNCTION_18
0x40001e6	              0x53	                                push rbx	       328	shmem.c	FUNCTION_18
0x40001e7	        0x488d5f08	                      lea rbx, [rdi + 8]	       335	shmem.c	FUNCTION_18	CALL_3
0x40001eb	          0x4889d5	                            mov rbp, rdx	       328	shmem.c	FUNCTION_18
0x40001ee	        0x4883ec18	                           sub rsp, 0x18	       328	shmem.c	FUNCTION_18
0x40001f2	          0x4889df	                            mov rdi, rbx	       335	shmem.c	FUNCTION_18	CALL_3
0x40001f5	      0x488d4c2408	                      lea rcx, [rsp + 8]	       335	shmem.c	FUNCTION_18	CALL_3
0x40001fa	          0x4889e2	                            mov rdx, rsp	       335	shmem.c	FUNCTION_18	CALL_3
0x40001fd	    0x65488b042528	                mov rax, qword gs:[0x28]	       328	shmem.c	FUNCTION_18
0x4000206	      0x4889442410	             mov qword [rsp + 0x10], rax	       328	shmem.c	FUNCTION_18
0x400020b	            0x31c0	                            xor eax, eax	       328	shmem.c	FUNCTION_18
0x400020d	      0xe800000000	                          call 0x4000212	       335	shmem.c	FUNCTION_18	CALL_3
0x4000212	          0x4839e8	                            cmp rax, rbp	       338	shmem.c	FUNCTION_18	IF_2
0x4000215	            0x7537	                           jne 0x400024e	       338	shmem.c	FUNCTION_18	IF_2
0x4000217	          0x4885c0	                           test rax, rax	       338	shmem.c	FUNCTION_18	IF_2
0x400021a	            0x7432	                            je 0x400024e	       338	shmem.c	FUNCTION_18	IF_2
0x400021c	      0x488b542408	                mov rdx, qword [rsp + 8]	       340	shmem.c	FUNCTION_18	CALL_4
0x4000221	        0x488b3424	                    mov rsi, qword [rsp]	       340	shmem.c	FUNCTION_18	CALL_4
0x4000225	          0x4531c0	                            xor r8d, r8d	       340	shmem.c	FUNCTION_18	CALL_4
0x4000228	          0x4c89e1	                            mov rcx, r12	       340	shmem.c	FUNCTION_18	CALL_4
0x400022b	          0x4889df	                            mov rdi, rbx	       340	shmem.c	FUNCTION_18	CALL_4
0x400022e	      0xe800000000	                          call 0x4000233	       340	shmem.c	FUNCTION_18	CALL_4
0x4000233	            0x31c0	                            xor eax, eax	       342	shmem.c	FUNCTION_18
0x4000235	      0x488b542410	            mov rdx, qword [rsp + 0x10] 	       343	shmem.c	FUNCTION_18
0x400023a	    0x654833142528	                xor rdx, qword gs:[0x28]	       343	shmem.c	FUNCTION_18
0x4000243	            0x7510	                           jne 0x4000255	       343	shmem.c	FUNCTION_18
0x4000245	        0x4883c418	                           add rsp, 0x18	       343	shmem.c	FUNCTION_18
0x4000249	              0x5b	                                 pop rbx	       343	shmem.c	FUNCTION_18
0x400024a	              0x5d	                                 pop rbp	       343	shmem.c	FUNCTION_18
0x400024b	            0x415c	                                 pop r12	       343	shmem.c	FUNCTION_18
0x400024d	              0xc3	                                     ret	       343	shmem.c	FUNCTION_18
0x400024e	      0xb8feffffff	                     mov eax, 0xfffffffe	       339	shmem.c	FUNCTION_18	IF_2
0x4000253	            0xebe0	                           jmp 0x4000235	       339	shmem.c	FUNCTION_18	IF_2
0x4000255	      0xe800000000	                          call 0x400025a	       343	shmem.c	FUNCTION_18
shmem_init_inode	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	2
0x40016a0	        0x4883c768	                           add rdi, 0x68	      3879	shmem.c	FUNCTION_109	CALL_1
0x40016a4	      0xe900000000	                           jmp 0x40016a9	      3879	shmem.c	FUNCTION_109	CALL_1
shmem_create	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	4
0x40015a0	      0x6681ca0080	                           or dx, 0x8000	      3076	shmem.c	FUNCTION_82	CALL_1
0x40015a5	            0x31c9	                            xor ecx, ecx	      3076	shmem.c	FUNCTION_82	CALL_1
0x40015a7	           0xfb7d2	                           movzx edx, dx	      3076	shmem.c	FUNCTION_82	CALL_1
0x40015aa	      0xe981fcffff	                     jmp sym.shmem_mknod	      3076	shmem.c	FUNCTION_82	CALL_1
shmem_statfs	FOR,0:WHILE,0:IF,2:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,2	32
0x40007c0	              0x55	                                push rbp	      2987	shmem.c	FUNCTION_78
0x40007c1	              0x53	                                push rbx	      2987	shmem.c	FUNCTION_78
0x40007c2	        0x4883ec08	                              sub rsp, 8	      2987	shmem.c	FUNCTION_78
0x40007c6	        0x488b4768	            mov rax, qword [rdi + 0x68] 	      2987	shmem.c	FUNCTION_78
0x40007ca	    0x488b98080400	           mov rbx, qword [rax + 0x408] 	      2987	shmem.c	FUNCTION_78
0x40007d1	    0x48c706941902	              mov qword [rsi], 0x1021994	      2990	shmem.c	FUNCTION_78
0x40007d8	    0x48c746080010	            mov qword [rsi + 8], 0x1000 	      2991	shmem.c	FUNCTION_78
0x40007e0	    0x48c74640ff00	           mov qword [rsi + 0x40], 0xff 	      2992	shmem.c	FUNCTION_78
0x40007e8	          0x488b03	                    mov rax, qword [rbx]	      2993	shmem.c	FUNCTION_78	IF_1
0x40007eb	          0x4885c0	                           test rax, rax	      2993	shmem.c	FUNCTION_78	IF_1
0x40007ee	            0x751e	                           jne 0x400080e	      2993	shmem.c	FUNCTION_78	IF_1
0x40007f0	        0x488b4330	            mov rax, qword [rbx + 0x30] 	      2999	shmem.c	FUNCTION_78	IF_2
0x40007f4	          0x4885c0	                           test rax, rax	      2999	shmem.c	FUNCTION_78	IF_2
0x40007f7	            0x740c	                            je 0x4000805	      2999	shmem.c	FUNCTION_78	IF_2
0x40007f9	        0x48894628	             mov qword [rsi + 0x28], rax	      3000	shmem.c	FUNCTION_78	IF_2
0x40007fd	        0x488b4338	            mov rax, qword [rbx + 0x38] 	      3001	shmem.c	FUNCTION_78	IF_2
0x4000801	        0x48894630	             mov qword [rsi + 0x30], rax	      3001	shmem.c	FUNCTION_78	IF_2
0x4000805	        0x4883c408	                              add rsp, 8	      3005	shmem.c	FUNCTION_78
0x4000809	            0x31c0	                            xor eax, eax	      3005	shmem.c	FUNCTION_78
0x400080b	              0x5b	                                 pop rbx	      3005	shmem.c	FUNCTION_78
0x400080c	              0x5d	                                 pop rbp	      3005	shmem.c	FUNCTION_78
0x400080d	              0xc3	                                     ret	      3005	shmem.c	FUNCTION_78
0x400080e	        0x488d7b08	                      lea rdi, [rbx + 8]	      2997	shmem.c	FUNCTION_78	IF_1	CALL_2
0x4000812	        0x48894610	             mov qword [rsi + 0x10], rax	      2994	shmem.c	FUNCTION_78	IF_1
0x4000816	          0x488b2b	                    mov rbp, qword [rbx]	      2996	shmem.c	FUNCTION_78	IF_1
0x4000819	        0x48893424	                    mov qword [rsp], rsi	      2994	shmem.c	FUNCTION_78	IF_1
0x400081d	      0xe800000000	                          call 0x4000822	        66	percpu_counter.h	FUNCTION_168	CALL_1
0x4000822	        0x488b3424	                    mov rsi, qword [rsp]	      2996	shmem.c	FUNCTION_78	IF_1
0x4000826	          0x4829c5	                            sub rbp, rax	      2996	shmem.c	FUNCTION_78	IF_1
0x4000829	        0x48896e18	             mov qword [rsi + 0x18], rbp	      2996	shmem.c	FUNCTION_78	IF_1
0x400082d	        0x48896e20	             mov qword [rsi + 0x20], rbp	      2995	shmem.c	FUNCTION_78	IF_1
0x4000831	            0xebbd	                           jmp 0x40007f0	      2995	shmem.c	FUNCTION_78	IF_1
shmem_mapping	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,0	3
0x4005700	    0x48817f700000	               cmp qword [rdi + 0x70], 0	      2220	shmem.c	FUNCTION_62
0x4005708	           0xf94c0	                                 sete al	      2220	shmem.c	FUNCTION_62
0x400570b	              0xc3	                                     ret	      2221	shmem.c	FUNCTION_62
shmem_show_options	FOR,0:WHILE,0:IF,6:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,15	73
0x40006a0	              0x55	                                push rbp	      3651	shmem.c	FUNCTION_102
0x40006a1	              0x53	                                push rbx	      3651	shmem.c	FUNCTION_102
0x40006a2	          0x4889fd	                            mov rbp, rdi	      3651	shmem.c	FUNCTION_102
0x40006a5	        0x4883ec48	                           sub rsp, 0x48	      3651	shmem.c	FUNCTION_102
0x40006a9	    0x65488b042528	                mov rax, qword gs:[0x28]	      3651	shmem.c	FUNCTION_102
0x40006b2	      0x4889442440	             mov qword [rsp + 0x40], rax	      3651	shmem.c	FUNCTION_102
0x40006b7	            0x31c0	                            xor eax, eax	      3651	shmem.c	FUNCTION_102
0x40006b9	        0x488b4668	            mov rax, qword [rsi + 0x68] 	      3651	shmem.c	FUNCTION_102
0x40006bd	    0x488b98080400	           mov rbx, qword [rax + 0x408] 	      3651	shmem.c	FUNCTION_102
0x40006c4	    0x488b05000000	            mov rax, qword [0x040006cb] 	       111	shmem.c	FUNCTION_1
0x40006cb	          0x488b13	                    mov rdx, qword [rbx]	      3654	shmem.c	FUNCTION_102	IF_1	CALL_2
0x40006ce	          0x4889c1	                            mov rcx, rax	       111	shmem.c	FUNCTION_1
0x40006d1	          0x48d1e9	                              shr rcx, 1	       111	shmem.c	FUNCTION_1
0x40006d4	          0x4839ca	                            cmp rdx, rcx	      3654	shmem.c	FUNCTION_102	IF_1	CALL_2
0x40006d7	            0x741d	                            je 0x40006f6	      3654	shmem.c	FUNCTION_102	IF_1	CALL_2
0x40006d9	        0x48c1e202	                              shl rdx, 2	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006dd	    0x48c7c6000000	                              mov rsi, 0	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006e4	      0xe800000000	                          call 0x40006e9	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006e9	    0x488b05000000	            mov rax, qword [0x040006f0] 	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006f0	          0x4889c1	                            mov rcx, rax	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006f3	          0x48d1e9	                              shr rcx, 1	      3655	shmem.c	FUNCTION_102	IF_1	CALL_3
0x40006f6	        0x488b5330	            mov rdx, qword [rbx + 0x30] 	      3657	shmem.c	FUNCTION_102	IF_2	CALL_4
0x40006fa	          0x4839c8	                            cmp rax, rcx	      3657	shmem.c	FUNCTION_102	IF_2	CALL_4
0x40006fd	        0x480f47c1	                          cmova rax, rcx	      3657	shmem.c	FUNCTION_102	IF_2	CALL_4
0x4000701	          0x4839d0	                            cmp rax, rdx	      3657	shmem.c	FUNCTION_102	IF_2	CALL_4
0x4000704	            0x740f	                            je 0x4000715	      3657	shmem.c	FUNCTION_102	IF_2	CALL_4
0x4000706	    0x48c7c6000000	                              mov rsi, 0	      3658	shmem.c	FUNCTION_102	CALL_5
0x400070d	          0x4889ef	                            mov rdi, rbp	      3658	shmem.c	FUNCTION_102	CALL_5
0x4000710	      0xe800000000	                          call 0x4000715	      3658	shmem.c	FUNCTION_102	CALL_5
0x4000715	         0xfb75344	           movzx edx, word [rbx + 0x44] 	      3659	shmem.c	FUNCTION_102	IF_3
0x4000719	      0x6681faff03	                           cmp dx, 0x3ff	      3659	shmem.c	FUNCTION_102	IF_3
0x400071e	            0x740f	                            je 0x400072f	      3659	shmem.c	FUNCTION_102	IF_3
0x4000720	    0x48c7c6000000	                              mov rsi, 0	      3660	shmem.c	FUNCTION_102	CALL_6
0x4000727	          0x4889ef	                            mov rdi, rbp	      3660	shmem.c	FUNCTION_102	CALL_6
0x400072a	      0xe800000000	                          call 0x400072f	      3660	shmem.c	FUNCTION_102	CALL_6
0x400072f	          0x8b5348	            mov edx, dword [rbx + 0x48] 	      3660	shmem.c	FUNCTION_102	CALL_6
0x4000732	            0x85d2	                           test edx, edx	      3661	shmem.c	FUNCTION_102	IF_4	CALL_7
0x4000734	            0x7419	                            je 0x400074f	      3661	shmem.c	FUNCTION_102	IF_4	CALL_7
0x4000736	          0x83faff	             cmp edx, 0xffffffffffffffff	       167	uidgid.h	FUNCTION_368	IF_1
0x4000739	     0xf4415000000	           cmove edx, dword [0x04000740]	       167	uidgid.h	FUNCTION_368	IF_1
0x4000740	    0x48c7c6000000	                              mov rsi, 0	      3662	shmem.c	FUNCTION_102	IF_4	CALL_8
0x4000747	          0x4889ef	                            mov rdi, rbp	      3662	shmem.c	FUNCTION_102	IF_4	CALL_8
0x400074a	      0xe800000000	                          call 0x400074f	      3662	shmem.c	FUNCTION_102	IF_4	CALL_8
0x400074f	          0x8b534c	            mov edx, dword [rbx + 0x4c] 	      3662	shmem.c	FUNCTION_102	IF_4	CALL_8
0x4000752	            0x85d2	                           test edx, edx	      3664	shmem.c	FUNCTION_102	IF_5	CALL_10
0x4000754	            0x7419	                            je 0x400076f	      3664	shmem.c	FUNCTION_102	IF_5	CALL_10
0x4000756	          0x83faff	             cmp edx, 0xffffffffffffffff	       175	uidgid.h	FUNCTION_369	IF_1
0x4000759	     0xf4415000000	           cmove edx, dword [0x04000760]	       175	uidgid.h	FUNCTION_369	IF_1
0x4000760	    0x48c7c6000000	                              mov rsi, 0	      3665	shmem.c	FUNCTION_102	IF_5	CALL_11
0x4000767	          0x4889ef	                            mov rdi, rbp	      3665	shmem.c	FUNCTION_102	IF_5	CALL_11
0x400076a	      0xe800000000	                          call 0x400076f	      3665	shmem.c	FUNCTION_102	IF_5	CALL_11
0x400076f	        0x488b5350	            mov rdx, qword [rbx + 0x50] 	      3672	shmem.c	FUNCTION_102	CALL_15
0x4000773	          0x4885d2	                           test rdx, rdx	      1371	shmem.c	FUNCTION_41	IF_1
0x4000776	            0x7407	                            je 0x400077f	      1371	shmem.c	FUNCTION_41	IF_1
0x4000778	      0x66837a0400	                   cmp word [rdx + 4], 0	      1371	shmem.c	FUNCTION_41	IF_1
0x400077d	            0x7519	                           jne 0x4000798	      1371	shmem.c	FUNCTION_41	IF_1
0x400077f	            0x31c0	                            xor eax, eax	      3674	shmem.c	FUNCTION_102
0x4000781	      0x488b7c2440	            mov rdi, qword [rsp + 0x40] 	      3674	shmem.c	FUNCTION_102
0x4000786	    0x6548333c2528	                xor rdi, qword gs:[0x28]	      3674	shmem.c	FUNCTION_102
0x400078f	            0x7528	                           jne 0x40007b9	      3674	shmem.c	FUNCTION_102
0x4000791	        0x4883c448	                           add rsp, 0x48	      3674	shmem.c	FUNCTION_102
0x4000795	              0x5b	                                 pop rbx	      3674	shmem.c	FUNCTION_102
0x4000796	              0x5d	                                 pop rbp	      3674	shmem.c	FUNCTION_102
0x4000797	              0xc3	                                     ret	      3674	shmem.c	FUNCTION_102
0x4000798	      0xbe40000000	                           mov esi, 0x40	      1374	shmem.c	FUNCTION_41	CALL_1
0x400079d	          0x4889e7	                            mov rdi, rsp	      1374	shmem.c	FUNCTION_41	CALL_1
0x40007a0	      0xe800000000	                          call 0x40007a5	      1374	shmem.c	FUNCTION_41	CALL_1
0x40007a5	    0x48c7c6000000	                              mov rsi, 0	      1376	shmem.c	FUNCTION_41	CALL_2
0x40007ac	          0x4889e2	                            mov rdx, rsp	      1376	shmem.c	FUNCTION_41	CALL_2
0x40007af	          0x4889ef	                            mov rdi, rbp	      1376	shmem.c	FUNCTION_41	CALL_2
0x40007b2	      0xe800000000	                          call 0x40007b7	      1376	shmem.c	FUNCTION_41	CALL_2
0x40007b7	            0xebc6	                           jmp 0x400077f	      1376	shmem.c	FUNCTION_41	CALL_2
0x40007b9	      0xe800000000	                          call 0x40007be	      3674	shmem.c	FUNCTION_102
shmem_set_policy	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	7
0x4000340	    0x488b87a00000	            mov rax, qword [rdi + 0xa0] 	      2106	shmem.c	FUNCTION_57
0x4000347	          0x4889f9	                            mov rcx, rdi	      2106	shmem.c	FUNCTION_57
0x400034a	          0x4889f2	                            mov rdx, rsi	      2106	shmem.c	FUNCTION_57
0x400034d	          0x4889ce	                            mov rsi, rcx	      2108	shmem.c	FUNCTION_57	CALL_3
0x4000350	        0x488b4020	            mov rax, qword [rax + 0x20] 	      2108	shmem.c	FUNCTION_57	CALL_3
0x4000354	        0x488d78d8	                   lea rdi, [rax - 0x28]	      2108	shmem.c	FUNCTION_57	CALL_3
0x4000358	      0xe900000000	                           jmp 0x400035d	      2108	shmem.c	FUNCTION_57	CALL_3
shmem_xattr_handler_set	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	20
0x4000630	            0x4155	                                push r13	      3368	shmem.c	FUNCTION_94
0x4000632	            0x4154	                                push r12	      3368	shmem.c	FUNCTION_94
0x4000634	          0x4889ce	                            mov rsi, rcx	      3371	shmem.c	FUNCTION_94	CALL_2
0x4000637	              0x55	                                push rbp	      3368	shmem.c	FUNCTION_94
0x4000638	              0x53	                                push rbx	      3368	shmem.c	FUNCTION_94
0x4000639	          0x4c89c5	                             mov rbp, r8	      3368	shmem.c	FUNCTION_94
0x400063c	      0x448b6c2428	           mov r13d, dword [rsp + 0x28] 	      3368	shmem.c	FUNCTION_94
0x4000641	          0x4889d3	                            mov rbx, rdx	      3368	shmem.c	FUNCTION_94
0x4000644	          0x4d89cc	                             mov r12, r9	      3368	shmem.c	FUNCTION_94
0x4000647	      0xe800000000	                          call 0x400064c	      3371	shmem.c	FUNCTION_94	CALL_2
0x400064c	        0x488d7be8	                   lea rdi, [rbx - 0x18]	      3372	shmem.c	FUNCTION_94	CALL_3
0x4000650	          0x4c89e1	                            mov rcx, r12	      3372	shmem.c	FUNCTION_94	CALL_3
0x4000653	          0x4889ea	                            mov rdx, rbp	      3372	shmem.c	FUNCTION_94	CALL_3
0x4000656	              0x5b	                                 pop rbx	      3373	shmem.c	FUNCTION_94
0x4000657	          0x4589e8	                           mov r8d, r13d	      3372	shmem.c	FUNCTION_94	CALL_3
0x400065a	          0x4889c6	                            mov rsi, rax	      3372	shmem.c	FUNCTION_94	CALL_3
0x400065d	              0x5d	                                 pop rbp	      3373	shmem.c	FUNCTION_94
0x400065e	            0x415c	                                 pop r12	      3373	shmem.c	FUNCTION_94
0x4000660	            0x415d	                                 pop r13	      3373	shmem.c	FUNCTION_94
0x4000662	      0xe900000000	                           jmp 0x4000667	      3372	shmem.c	FUNCTION_94	CALL_3
shmem_mfill_zeropage_pte	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	16
0x4005720	        0x4883ec10	                           sub rsp, 0x10	      2348	shmem.c	FUNCTION_65
0x4005724	          0x4531c0	                            xor r8d, r8d	      2351	shmem.c	FUNCTION_65	CALL_1
0x4005727	    0x41b901000000	                              mov r9d, 1	      2351	shmem.c	FUNCTION_65	CALL_1
0x400572d	    0x65488b042528	                mov rax, qword gs:[0x28]	      2348	shmem.c	FUNCTION_65
0x4005736	      0x4889442408	                mov qword [rsp + 8], rax	      2348	shmem.c	FUNCTION_65
0x400573b	            0x31c0	                            xor eax, eax	      2348	shmem.c	FUNCTION_65
0x400573d	    0x48c704240000	                      mov qword [rsp], 0	      2349	shmem.c	FUNCTION_65
0x4005745	              0x54	                                push rsp	      2351	shmem.c	FUNCTION_65	CALL_1
0x4005746	      0xe855dbffff	         call sym.shmem_mfill_atomic_pte	      2351	shmem.c	FUNCTION_65	CALL_1
0x400574b	              0x5a	                                 pop rdx	      2351	shmem.c	FUNCTION_65	CALL_1
0x400574c	      0x488b542408	                mov rdx, qword [rsp + 8]	      2353	shmem.c	FUNCTION_65
0x4005751	    0x654833142528	                xor rdx, qword gs:[0x28]	      2353	shmem.c	FUNCTION_65
0x400575a	            0x7505	                           jne 0x4005761	      2353	shmem.c	FUNCTION_65
0x400575c	        0x4883c410	                           add rsp, 0x10	      2353	shmem.c	FUNCTION_65
0x4005760	              0xc3	                                     ret	      2353	shmem.c	FUNCTION_65
0x4005761	      0xe800000000	                          call 0x4005766	      2353	shmem.c	FUNCTION_65
shmem_get_policy	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	7
0x40000f0	          0x482b37	                    sub rsi, qword [rdi]	      2118	shmem.c	FUNCTION_58	CALL_3
0x40000f3	    0x488b87a00000	            mov rax, qword [rdi + 0xa0] 	      2118	shmem.c	FUNCTION_58	CALL_3
0x40000fa	        0x48c1ee0c	                            shr rsi, 0xc	      2118	shmem.c	FUNCTION_58	CALL_3
0x40000fe	    0x4803b7980000	             add rsi, qword [rdi + 0x98]	      2118	shmem.c	FUNCTION_58	CALL_3
0x4000105	        0x488b7820	            mov rdi, qword [rax + 0x20] 	      2118	shmem.c	FUNCTION_58	CALL_3
0x4000109	        0x4883ef28	                           sub rdi, 0x28	      2118	shmem.c	FUNCTION_58	CALL_3
0x400010d	      0xe900000000	                           jmp 0x4000112	      2118	shmem.c	FUNCTION_58	CALL_3
shmem_mcopy_atomic_pte	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	5
0x4005710	            0x4151	                                 push r9	      2340	shmem.c	FUNCTION_64	CALL_1
0x4005712	          0x4531c9	                            xor r9d, r9d	      2340	shmem.c	FUNCTION_64	CALL_1
0x4005715	      0xe886dbffff	         call sym.shmem_mfill_atomic_pte	      2340	shmem.c	FUNCTION_64	CALL_1
0x400571a	              0x5a	                                 pop rdx	      2340	shmem.c	FUNCTION_64	CALL_1
0x400571b	              0xc3	                                     ret	      2342	shmem.c	FUNCTION_64
shmem_file_setup_with_mnt	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,1	2
0x4001ee0	          0x4531c0	                            xor r8d, r8d	      4293	shmem.c	FUNCTION_126	CALL_1
0x4001ee3	      0xe9a8fbffff	              jmp sym.__shmem_file_setup	      4293	shmem.c	FUNCTION_126	CALL_1
shmem_destroy_callback	FOR,0:WHILE,0:IF,1:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,5	13
0x4000870	              0x53	                                push rbx	      3862	shmem.c	FUNCTION_107
0x4000871	     0xfb787d0feff	           movzx eax, word [rdi - 0x130]	      3864	shmem.c	FUNCTION_107	IF_1	CALL_2
0x4000878	          0x4889fb	                            mov rbx, rdi	      3862	shmem.c	FUNCTION_107
0x400087b	        0x662500f0	                          and ax, 0xf000	      3864	shmem.c	FUNCTION_107	IF_1	CALL_2
0x400087f	        0x663d00a0	                          cmp ax, 0xa000	      3864	shmem.c	FUNCTION_107	IF_1	CALL_2
0x4000883	            0x7414	                            je 0x4000899	      3864	shmem.c	FUNCTION_107	IF_1	CALL_2
0x4000885	    0x488db368feff	                  lea rsi, [rbx - 0x198]	        45	shmem_fs.h	FUNCTION_227	CALL_1
0x400088c	    0x488b3d000000	            mov rdi, qword [0x04000893] 	      3866	shmem.c	FUNCTION_107	CALL_5
0x4000893	              0x5b	                                 pop rbx	      3867	shmem.c	FUNCTION_107
0x4000894	      0xe900000000	                           jmp 0x4000899	      3866	shmem.c	FUNCTION_107	CALL_5
0x4000899	    0x488bbff00000	            mov rdi, qword [rdi + 0xf0] 	      3865	shmem.c	FUNCTION_107	CALL_3
0x40008a0	      0xe800000000	                          call 0x40008a5	      3865	shmem.c	FUNCTION_107	CALL_3
0x40008a5	            0xebde	                           jmp 0x4000885	      3865	shmem.c	FUNCTION_107	CALL_3
shmem_xattr_handler_get	FOR,0:WHILE,0:IF,0:functions,0:SWITCH,0:ELSE,0:DO,0:CALL,3	16
0x4000670	            0x4154	                                push r12	      3357	shmem.c	FUNCTION_93
0x4000672	              0x55	                                push rbp	      3357	shmem.c	FUNCTION_93
0x4000673	          0x4d89cc	                             mov r12, r9	      3357	shmem.c	FUNCTION_93
0x4000676	              0x53	                                push rbx	      3357	shmem.c	FUNCTION_93
0x4000677	          0x4c89c5	                             mov rbp, r8	      3357	shmem.c	FUNCTION_93
0x400067a	          0x4889d3	                            mov rbx, rdx	      3357	shmem.c	FUNCTION_93
0x400067d	          0x4889ce	                            mov rsi, rcx	      3360	shmem.c	FUNCTION_93	CALL_2
0x4000680	      0xe800000000	                          call 0x4000685	      3360	shmem.c	FUNCTION_93	CALL_2
0x4000685	        0x488d7be8	                   lea rdi, [rbx - 0x18]	      3361	shmem.c	FUNCTION_93	CALL_3
0x4000689	          0x4c89e1	                            mov rcx, r12	      3361	shmem.c	FUNCTION_93	CALL_3
0x400068c	          0x4889ea	                            mov rdx, rbp	      3361	shmem.c	FUNCTION_93	CALL_3
0x400068f	              0x5b	                                 pop rbx	      3362	shmem.c	FUNCTION_93
0x4000690	              0x5d	                                 pop rbp	      3362	shmem.c	FUNCTION_93
0x4000691	            0x415c	                                 pop r12	      3362	shmem.c	FUNCTION_93
0x4000693	          0x4889c6	                            mov rsi, rax	      3361	shmem.c	FUNCTION_93	CALL_3
0x4000696	      0xe900000000	                           jmp 0x400069b	      3361	shmem.c	FUNCTION_93	CALL_3
