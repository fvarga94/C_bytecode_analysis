ipc64_perm_to_ipc_perm	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,0:CALL,4:DO,0	15
0x4000c50	            0x8b07	                    mov eax, dword [rdi]	       545	util.c	FUNCTION_18
0x4000c52	            0x8906	                    mov dword [rsi], eax	       545	util.c	FUNCTION_18
0x4000c54	          0x8b4704	                mov eax, dword [rdi + 4]	       546	util.c	FUNCTION_18	CALL_1
0x4000c57	          0x894604	                mov dword [rsi + 4], eax	       546	util.c	FUNCTION_18	CALL_1
0x4000c5a	          0x8b4708	                mov eax, dword [rdi + 8]	       547	util.c	FUNCTION_18	CALL_2
0x4000c5d	          0x894608	                mov dword [rsi + 8], eax	       547	util.c	FUNCTION_18	CALL_2
0x4000c60	          0x8b470c	              mov eax, dword [rdi + 0xc]	       548	util.c	FUNCTION_18	CALL_3
0x4000c63	          0x89460c	              mov dword [rsi + 0xc], eax	       548	util.c	FUNCTION_18	CALL_3
0x4000c66	          0x8b4710	            mov eax, dword [rdi + 0x10] 	       549	util.c	FUNCTION_18	CALL_4
0x4000c69	          0x894610	             mov dword [rsi + 0x10], eax	       549	util.c	FUNCTION_18	CALL_4
0x4000c6c	          0x8b4714	            mov eax, dword [rdi + 0x14] 	       550	util.c	FUNCTION_18
0x4000c6f	          0x894614	             mov dword [rsi + 0x14], eax	       550	util.c	FUNCTION_18
0x4000c72	         0xfb74718	           movzx eax, word [rdi + 0x18] 	       551	util.c	FUNCTION_18
0x4000c76	        0x66894618	               mov word [rsi + 0x18], ax	       551	util.c	FUNCTION_18
0x4000c7a	              0xc3	                                     ret	       551	util.c	FUNCTION_18
sysvipc_proc_release	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,0:CALL,3:DO,0	17
0x4000170	            0x4154	                                push r12	       889	util.c	FUNCTION_33
0x4000172	              0x55	                                push rbp	       889	util.c	FUNCTION_33
0x4000173	          0x4989fc	                            mov r12, rdi	       889	util.c	FUNCTION_33
0x4000176	              0x53	                                push rbx	       889	util.c	FUNCTION_33
0x4000177	    0x488b86c80000	            mov rax, qword [rsi + 0xc8] 	       891	util.c	FUNCTION_33
0x400017e	          0x4889f3	                            mov rbx, rsi	       889	util.c	FUNCTION_33
0x4000181	        0x488b6878	            mov rbp, qword [rax + 0x78] 	       891	util.c	FUNCTION_33
0x4000185	        0x488b7d00	                    mov rdi, qword [rbp]	       892	util.c	FUNCTION_33	CALL_1
0x4000189	      0xe800000000	                          call 0x400018e	       892	util.c	FUNCTION_33	CALL_1
0x400018e	        0x488b7d08	                mov rdi, qword [rbp + 8]	       893	util.c	FUNCTION_33	CALL_2
0x4000192	      0xe800000000	                          call 0x4000197	       893	util.c	FUNCTION_33	CALL_2
0x4000197	          0x4889de	                            mov rsi, rbx	       894	util.c	FUNCTION_33	CALL_3
0x400019a	          0x4c89e7	                            mov rdi, r12	       894	util.c	FUNCTION_33	CALL_3
0x400019d	              0x5b	                                 pop rbx	       895	util.c	FUNCTION_33
0x400019e	              0x5d	                                 pop rbp	       895	util.c	FUNCTION_33
0x400019f	            0x415c	                                 pop r12	       895	util.c	FUNCTION_33
0x40001a1	      0xe900000000	                           jmp 0x40001a6	       894	util.c	FUNCTION_33	CALL_3
sysvipc_proc_start	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,2:CALL,2:DO,0	30
0x40003b0	              0x55	                                push rbp	       812	util.c	FUNCTION_29
0x40003b1	              0x53	                                push rbx	       812	util.c	FUNCTION_29
0x40003b2	          0x4889f5	                            mov rbp, rsi	       812	util.c	FUNCTION_29
0x40003b5	        0x488b4778	            mov rax, qword [rdi + 0x78] 	       813	util.c	FUNCTION_29
0x40003b9	        0x488b5010	            mov rdx, qword [rax + 0x10] 	       817	util.c	FUNCTION_29
0x40003bd	        0x48637a10	         movsxd rdi, dword [rdx + 0x10] 	       823	util.c	FUNCTION_29	CALL_1
0x40003c1	          0x4889fa	                            mov rdx, rdi	       823	util.c	FUNCTION_29	CALL_1
0x40003c4	        0x48c1e708	                              shl rdi, 8	       823	util.c	FUNCTION_29	CALL_1
0x40003c8	        0x48c1e205	                              shl rdx, 5	       823	util.c	FUNCTION_29	CALL_1
0x40003cc	          0x4829d7	                            sub rdi, rdx	       823	util.c	FUNCTION_29	CALL_1
0x40003cf	          0x4889fb	                            mov rbx, rdi	       823	util.c	FUNCTION_29	CALL_1
0x40003d2	          0x480318	                    add rbx, qword [rax]	       823	util.c	FUNCTION_29	CALL_1
0x40003d5	        0x488d7b10	                   lea rdi, [rbx + 0x10]	       823	util.c	FUNCTION_29	CALL_1
0x40003d9	      0xe800000000	                          call 0x40003de	       823	util.c	FUNCTION_29	CALL_1
0x40003de	        0x488b4d00	                    mov rcx, qword [rbp]	       826	util.c	FUNCTION_29	IF_1
0x40003e2	          0x4885c9	                           test rcx, rcx	       826	util.c	FUNCTION_29	IF_1
0x40003e5	            0x781c	                            js 0x4000403	       826	util.c	FUNCTION_29	IF_1
0x40003e7	      0xb801000000	                              mov eax, 1	       831	util.c	FUNCTION_29	IF_2
0x40003ec	            0x7503	                           jne 0x40003f1	       830	util.c	FUNCTION_29	IF_2
0x40003ee	              0x5b	                                 pop rbx	       835	util.c	FUNCTION_29
0x40003ef	              0x5d	                                 pop rbp	       835	util.c	FUNCTION_29
0x40003f0	              0xc3	                                     ret	       835	util.c	FUNCTION_29
0x40003f1	        0x488d7b08	                      lea rdi, [rbx + 8]	       817	util.c	FUNCTION_29
0x40003f5	          0x4889ea	                            mov rdx, rbp	       834	util.c	FUNCTION_29	CALL_2
0x40003f8	        0x488d71ff	                      lea rsi, [rcx - 1]	       834	util.c	FUNCTION_29	CALL_2
0x40003fc	              0x5b	                                 pop rbx	       835	util.c	FUNCTION_29
0x40003fd	              0x5d	                                 pop rbp	       835	util.c	FUNCTION_29
0x40003fe	      0xe96dfeffff	                jmp sym.sysvipc_find_ipc	       834	util.c	FUNCTION_29	CALL_2
0x4000403	            0x31c0	                            xor eax, eax	       827	util.c	FUNCTION_29	IF_1
0x4000405	            0xebe7	                           jmp 0x40003ee	       827	util.c	FUNCTION_29	IF_1
sysvipc_proc_show	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,1:CALL,2:DO,0	10
0x4000240	        0x488b4778	            mov rax, qword [rdi + 0x78] 	       856	util.c	FUNCTION_31
0x4000244	        0x4883fe01	                              cmp rsi, 1	       858	util.c	FUNCTION_31	IF_1
0x4000248	        0x488b4010	            mov rax, qword [rax + 0x10] 	       856	util.c	FUNCTION_31
0x400024c	            0x7409	                            je 0x4000257	       858	util.c	FUNCTION_31	IF_1
0x400024e	        0x488b4018	            mov rax, qword [rax + 0x18] 	       863	util.c	FUNCTION_31	CALL_2
0x4000252	      0xe900000000	                           jmp 0x4000257	       863	util.c	FUNCTION_31	CALL_2
0x4000257	        0x488b7008	                mov rsi, qword [rax + 8]	       859	util.c	FUNCTION_31	IF_1	CALL_1
0x400025b	      0xe800000000	                          call 0x4000260	       859	util.c	FUNCTION_31	IF_1	CALL_1
0x4000260	            0x31c0	                            xor eax, eax	       864	util.c	FUNCTION_31
0x4000262	              0xc3	                                     ret	       864	util.c	FUNCTION_31
kernel_to_ipc64_perm	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,0:CALL,8:DO,0	23
0x4000bf0	          0x8b470c	              mov eax, dword [rdi + 0xc]	       526	util.c	FUNCTION_17
0x4000bf3	            0x8906	                    mov dword [rsi], eax	       526	util.c	FUNCTION_17
0x4000bf5	          0x8b4710	            mov eax, dword [rdi + 0x10] 	       526	util.c	FUNCTION_17
0x4000bf8	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       167	uidgid.h	FUNCTION_121	IF_1
0x4000bfb	     0xf4405000000	           cmove eax, dword [0x04000c02]	       167	uidgid.h	FUNCTION_121	IF_1
0x4000c02	          0x894604	                mov dword [rsi + 4], eax	       527	util.c	FUNCTION_17	CALL_2
0x4000c05	          0x8b4714	            mov eax, dword [rdi + 0x14] 	       527	util.c	FUNCTION_17	CALL_2
0x4000c08	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       175	uidgid.h	FUNCTION_122	IF_1
0x4000c0b	     0xf4405000000	           cmove eax, dword [0x04000c12]	       175	uidgid.h	FUNCTION_122	IF_1
0x4000c12	          0x894608	                mov dword [rsi + 8], eax	       528	util.c	FUNCTION_17	CALL_4
0x4000c15	          0x8b4718	            mov eax, dword [rdi + 0x18] 	       528	util.c	FUNCTION_17	CALL_4
0x4000c18	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       167	uidgid.h	FUNCTION_121	IF_1
0x4000c1b	     0xf4405000000	           cmove eax, dword [0x04000c22]	       167	uidgid.h	FUNCTION_121	IF_1
0x4000c22	          0x89460c	              mov dword [rsi + 0xc], eax	       529	util.c	FUNCTION_17	CALL_6
0x4000c25	          0x8b471c	            mov eax, dword [rdi + 0x1c] 	       529	util.c	FUNCTION_17	CALL_6
0x4000c28	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       175	uidgid.h	FUNCTION_122	IF_1
0x4000c2b	     0xf4405000000	           cmove eax, dword [0x04000c32]	       175	uidgid.h	FUNCTION_122	IF_1
0x4000c32	          0x894610	             mov dword [rsi + 0x10], eax	       530	util.c	FUNCTION_17	CALL_8
0x4000c35	         0xfb74720	           movzx eax, word [rdi + 0x20] 	       531	util.c	FUNCTION_17
0x4000c39	          0x894614	             mov dword [rsi + 0x14], eax	       531	util.c	FUNCTION_17
0x4000c3c	        0x488b4728	            mov rax, qword [rdi + 0x28] 	       532	util.c	FUNCTION_17
0x4000c40	        0x66894618	               mov word [rsi + 0x18], ax	       532	util.c	FUNCTION_17
0x4000c44	              0xc3	                                     ret	       532	util.c	FUNCTION_17
ipc_obtain_object_check	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,2:CALL,4:DO,0	29
0x4000d20	            0x89f2	                            mov edx, esi	       567	util.c	FUNCTION_19	CALL_1
0x4000d22	          0xc1fa1f	                           sar edx, 0x1f	       567	util.c	FUNCTION_19	CALL_1
0x4000d25	          0xc1ea11	                           shr edx, 0x11	       567	util.c	FUNCTION_19	CALL_1
0x4000d28	          0x8d0416	                    lea eax, [rsi + rdx]	       567	util.c	FUNCTION_19	CALL_1
0x4000d2b	      0x25ff7f0000	                         and eax, 0x7fff	       567	util.c	FUNCTION_19	CALL_1
0x4000d30	            0x29d0	                            sub eax, edx	       567	util.c	FUNCTION_19	CALL_1
0x4000d32	        0x807f0600	                   cmp byte [rdi + 6], 0	       569	util.c	FUNCTION_19	IF_1	CALL_2
0x4000d36	            0x743c	                            je 0x4000d74	       569	util.c	FUNCTION_19	IF_1	CALL_2
0x4000d38	              0x53	                                push rbx	       627	util.c	FUNCTION_21
0x4000d39	        0x4883c730	                           add rdi, 0x30	       572	util.c	FUNCTION_19	CALL_4
0x4000d3d	            0x89f3	                            mov ebx, esi	       572	util.c	FUNCTION_19	CALL_4
0x4000d3f	          0x4863f0	                         movsxd rsi, eax	       572	util.c	FUNCTION_19	CALL_4
0x4000d42	      0xe800000000	                          call 0x4000d47	       572	util.c	FUNCTION_19	CALL_4
0x4000d47	          0x4885c0	                           test rax, rax	       573	util.c	FUNCTION_19	IF_2
0x4000d4a	            0x741f	                            je 0x4000d6b	       573	util.c	FUNCTION_19	IF_2
0x4000d4c	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	       630	util.c	FUNCTION_21	IF_1	CALL_2
0x4000d52	            0x771e	                            ja 0x4000d72	       630	util.c	FUNCTION_21	IF_1	CALL_2
0x4000d54	    0x8db3ff7f0000	                 lea esi, [rbx + 0x7fff]	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d5a	            0x85db	                           test ebx, ebx	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d5c	           0xf49f3	                         cmovns esi, ebx	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d5f	          0xc1fe0f	                            sar esi, 0xf	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d62	          0x4863f6	                         movsxd rsi, esi	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d65	        0x48397028	            cmp qword [rax + 0x28], rsi 	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d69	            0x7407	                            je 0x4000d72	       633	util.c	FUNCTION_21	IF_2	CALL_3
0x4000d6b	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	       627	util.c	FUNCTION_21
0x4000d72	              0x5b	                                 pop rbx	       637	util.c	FUNCTION_21
0x4000d73	              0xc3	                                     ret	       637	util.c	FUNCTION_21
0x4000d74	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	       627	util.c	FUNCTION_21
0x4000d7b	              0xc3	                                     ret	       637	util.c	FUNCTION_21
ipc_seq_pid_ns	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,0:CALL,0:DO,0	3
0x4001110	        0x488b4778	            mov rax, qword [rdi + 0x78] 	       758	util.c	FUNCTION_26
0x4001114	        0x488b4008	                mov rax, qword [rax + 8]	       758	util.c	FUNCTION_26
0x4001118	              0xc3	                                     ret	       759	util.c	FUNCTION_26
ipc_update_perm	WHILE,0:FOR,0:functions,0:ELSE,0:SWITCH,0:IF,1:CALL,6:DO,0	18
0x4000fe0	          0x8b4704	                mov eax, dword [rdi + 4]	       665	util.c	FUNCTION_23	CALL_2
0x4000fe3	          0x8b5708	                mov edx, dword [rdi + 8]	       666	util.c	FUNCTION_23	CALL_4
0x4000fe6	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       667	util.c	FUNCTION_23	IF_1	CALL_6
0x4000fe9	            0x7424	                            je 0x400100f	       667	util.c	FUNCTION_23	IF_1	CALL_6
0x4000feb	          0x83faff	             cmp edx, 0xffffffffffffffff	       667	util.c	FUNCTION_23	IF_1	CALL_6
0x4000fee	            0x741f	                            je 0x400100f	       667	util.c	FUNCTION_23	IF_1	CALL_6
0x4000ff0	          0x895614	             mov dword [rsi + 0x14], edx	       671	util.c	FUNCTION_23
0x4000ff3	         0xfb75620	           movzx edx, word [rsi + 0x20] 	       672	util.c	FUNCTION_23
0x4000ff7	          0x894610	             mov dword [rsi + 0x10], eax	       670	util.c	FUNCTION_23
0x4000ffa	          0x8b4714	            mov eax, dword [rdi + 0x14] 	       672	util.c	FUNCTION_23
0x4000ffd	      0x6681e200fe	                          and dx, 0xfe00	       672	util.c	FUNCTION_23
0x4001002	        0x6625ff01	                           and ax, 0x1ff	       672	util.c	FUNCTION_23
0x4001006	             0x9d0	                             or eax, edx	       672	util.c	FUNCTION_23
0x4001008	        0x66894620	               mov word [rsi + 0x20], ax	       672	util.c	FUNCTION_23
0x400100c	            0x31c0	                            xor eax, eax	       675	util.c	FUNCTION_23
0x400100e	              0xc3	                                     ret	       675	util.c	FUNCTION_23
0x400100f	      0xb8eaffffff	                     mov eax, 0xffffffea	       668	util.c	FUNCTION_23	IF_1
0x4001014	              0xc3	                                     ret	       676	util.c	FUNCTION_23
