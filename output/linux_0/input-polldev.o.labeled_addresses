devm_input_allocate_polled_device	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,4:IF,2	35
0x40004b0	            0x4154	                                push r12	       238	input-polldev.c	FUNCTION_13
0x40004b2	              0x55	                                push rbp	       238	input-polldev.c	FUNCTION_13
0x40004b3	          0x4989fc	                            mov r12, rdi	       238	input-polldev.c	FUNCTION_13
0x40004b6	              0x53	                                push rbx	       238	input-polldev.c	FUNCTION_13
0x40004b7	    0x49c7c0000000	                               mov r8, 0	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004be	      0xb9ffffffff	                     mov ecx, 0xffffffff	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004c3	      0xbac0004001	                      mov edx, 0x14000c0	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004c8	      0xbe08000000	                              mov esi, 8	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004cd	    0x48c7c7000000	                              mov rdi, 0	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004d4	      0xe800000000	                          call 0x40004d9	       242	input-polldev.c	FUNCTION_13	CALL_1
0x40004d9	          0x4885c0	                           test rax, rax	       244	input-polldev.c	FUNCTION_13	IF_1
0x40004dc	            0x7439	                            je 0x4000517	       244	input-polldev.c	FUNCTION_13	IF_1
0x40004de	          0x4889c5	                            mov rbp, rax	       244	input-polldev.c	FUNCTION_13	IF_1
0x40004e1	      0xe800000000	                          call 0x40004e6	       247	input-polldev.c	FUNCTION_13	CALL_2
0x40004e6	          0x4885c0	                           test rax, rax	       248	input-polldev.c	FUNCTION_13	IF_2
0x40004e9	          0x4889c3	                            mov rbx, rax	       247	input-polldev.c	FUNCTION_13	CALL_2
0x40004ec	            0x742d	                            je 0x400051b	       248	input-polldev.c	FUNCTION_13	IF_2
0x40004ee	        0x488b4030	            mov rax, qword [rax + 0x30] 	       253	input-polldev.c	FUNCTION_13
0x40004f2	          0x4889ee	                            mov rsi, rbp	       257	input-polldev.c	FUNCTION_13	CALL_4
0x40004f5	          0x4c89e7	                            mov rdi, r12	       257	input-polldev.c	FUNCTION_13	CALL_4
0x40004f8	    0x4c89a0180200	            mov qword [rax + 0x218], r12	       253	input-polldev.c	FUNCTION_13
0x40004ff	    0xc68390000000	                mov byte [rbx + 0x90], 1	       254	input-polldev.c	FUNCTION_13
0x4000506	        0x48895d00	                    mov qword [rbp], rbx	       256	input-polldev.c	FUNCTION_13
0x400050a	      0xe800000000	                          call 0x400050f	       257	input-polldev.c	FUNCTION_13	CALL_4
0x400050f	          0x4889d8	                            mov rax, rbx	       259	input-polldev.c	FUNCTION_13
0x4000512	              0x5b	                                 pop rbx	       260	input-polldev.c	FUNCTION_13
0x4000513	              0x5d	                                 pop rbp	       260	input-polldev.c	FUNCTION_13
0x4000514	            0x415c	                                 pop r12	       260	input-polldev.c	FUNCTION_13
0x4000516	              0xc3	                                     ret	       260	input-polldev.c	FUNCTION_13
0x4000517	            0x31c0	                            xor eax, eax	       245	input-polldev.c	FUNCTION_13	IF_1
0x4000519	            0xebf7	                           jmp 0x4000512	       245	input-polldev.c	FUNCTION_13	IF_1
0x400051b	          0x4889ef	                            mov rdi, rbp	       249	input-polldev.c	FUNCTION_13	IF_2	CALL_3
0x400051e	      0xe800000000	                          call 0x4000523	       249	input-polldev.c	FUNCTION_13	IF_2	CALL_3
0x4000523	            0x31c0	                            xor eax, eax	       250	input-polldev.c	FUNCTION_13	IF_2
0x4000525	            0xebeb	                           jmp 0x4000512	       250	input-polldev.c	FUNCTION_13	IF_2
input_close_polled_device	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,3:IF,1	12
0x4000140	              0x53	                                push rbx	        61	input-polldev.c	FUNCTION_4
0x4000141	    0x488b9fb00200	           mov rbx, qword [rdi + 0x2b0] 	        61	input-polldev.c	FUNCTION_4
0x4000148	        0x488d7b38	                   lea rdi, [rbx + 0x38]	        64	input-polldev.c	FUNCTION_4	CALL_2
0x400014c	      0xe800000000	                          call 0x4000151	        64	input-polldev.c	FUNCTION_4	CALL_2
0x4000151	        0x488b4310	            mov rax, qword [rbx + 0x10] 	        66	input-polldev.c	FUNCTION_4	IF_1
0x4000155	          0x4885c0	                           test rax, rax	        66	input-polldev.c	FUNCTION_4	IF_1
0x4000158	            0x7409	                            je 0x4000163	        66	input-polldev.c	FUNCTION_4	IF_1
0x400015a	          0x4889df	                            mov rdi, rbx	        67	input-polldev.c	FUNCTION_4	CALL_3
0x400015d	              0x5b	                                 pop rbx	        68	input-polldev.c	FUNCTION_4
0x400015e	      0xe900000000	                           jmp 0x4000163	        67	input-polldev.c	FUNCTION_4	CALL_3
0x4000163	              0x5b	                                 pop rbx	        68	input-polldev.c	FUNCTION_4
0x4000164	              0xc3	                                     ret	        68	input-polldev.c	FUNCTION_4
input_polled_device_work	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,3:IF,0	8
0x40002b0	              0x53	                                push rbx	        36	input-polldev.c	FUNCTION_2
0x40002b1	        0x488d5fc8	                   lea rbx, [rdi - 0x38]	        38	input-polldev.c	FUNCTION_2	CALL_1
0x40002b5	        0x488b47e0	             mov rax, qword [rdi - 0x20]	        40	input-polldev.c	FUNCTION_2	CALL_2
0x40002b9	          0x4889df	                            mov rdi, rbx	        40	input-polldev.c	FUNCTION_2	CALL_2
0x40002bc	      0xe800000000	                          call 0x40002c1	        40	input-polldev.c	FUNCTION_2	CALL_2
0x40002c1	          0x4889df	                            mov rdi, rbx	        41	input-polldev.c	FUNCTION_2	CALL_3
0x40002c4	              0x5b	                                 pop rbx	        42	input-polldev.c	FUNCTION_2
0x40002c5	      0xe9a6feffff	        jmp sym.input_polldev_queue_work	        41	input-polldev.c	FUNCTION_2	CALL_3
input_polldev_get_max	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,2:IF,0	8
0x4000100	          0x4889d0	                            mov rax, rdx	       120	input-polldev.c	FUNCTION_7
0x4000103	    0x488b97980000	            mov rdx, qword [rdi + 0x98] 	       123	input-polldev.c	FUNCTION_7	CALL_2
0x400010a	    0x48c7c6000000	                              mov rsi, 0	       123	input-polldev.c	FUNCTION_7	CALL_2
0x4000111	          0x4889c7	                            mov rdi, rax	       123	input-polldev.c	FUNCTION_7	CALL_2
0x4000114	          0x8b5224	            mov edx, dword [rdx + 0x24] 	       123	input-polldev.c	FUNCTION_7	CALL_2
0x4000117	      0xe800000000	                          call 0x400011c	       123	input-polldev.c	FUNCTION_7	CALL_2
0x400011c	            0x4898	                                    cdqe	       123	input-polldev.c	FUNCTION_7	CALL_2
0x400011e	              0xc3	                                     ret	       124	input-polldev.c	FUNCTION_7
input_polldev_set_poll	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,6:IF,5	55
0x40001b0	            0x4155	                                push r13	        83	input-polldev.c	FUNCTION_6
0x40001b2	            0x4154	                                push r12	        83	input-polldev.c	FUNCTION_6
0x40001b4	          0x4889d0	                            mov rax, rdx	        83	input-polldev.c	FUNCTION_6
0x40001b7	              0x55	                                push rbp	        83	input-polldev.c	FUNCTION_6
0x40001b8	              0x53	                                push rbx	        83	input-polldev.c	FUNCTION_6
0x40001b9	            0x31f6	                            xor esi, esi	        89	input-polldev.c	FUNCTION_6	CALL_2
0x40001bb	          0x4989cc	                            mov r12, rcx	        83	input-polldev.c	FUNCTION_6
0x40001be	        0x4883ec10	                           sub rsp, 0x10	        83	input-polldev.c	FUNCTION_6
0x40001c2	    0x488b9f980000	            mov rbx, qword [rdi + 0x98] 	        83	input-polldev.c	FUNCTION_6
0x40001c9	          0x4889c7	                            mov rdi, rax	        89	input-polldev.c	FUNCTION_6	CALL_2
0x40001cc	      0x488d542404	                      lea rdx, [rsp + 4]	        89	input-polldev.c	FUNCTION_6	CALL_2
0x40001d1	    0x65488b0c2528	                mov rcx, qword gs:[0x28]	        83	input-polldev.c	FUNCTION_6
0x40001da	      0x48894c2408	                mov qword [rsp + 8], rcx	        83	input-polldev.c	FUNCTION_6
0x40001df	            0x31c9	                            xor ecx, ecx	        83	input-polldev.c	FUNCTION_6
0x40001e1	        0x488b6b30	            mov rbp, qword [rbx + 0x30] 	        85	input-polldev.c	FUNCTION_6
0x40001e5	      0xe800000000	                          call 0x40001ea	        89	input-polldev.c	FUNCTION_6	CALL_2
0x40001ea	            0x85c0	                           test eax, eax	        90	input-polldev.c	FUNCTION_6	IF_1
0x40001ec	            0x755b	                           jne 0x4000249	        90	input-polldev.c	FUNCTION_6	IF_1
0x40001ee	        0x8b542404	                mov edx, dword [rsp + 4]	        93	input-polldev.c	FUNCTION_6	IF_2
0x40001f2	          0x395328	            cmp dword [rbx + 0x28], edx 	        93	input-polldev.c	FUNCTION_6	IF_2
0x40001f5	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	        94	input-polldev.c	FUNCTION_6	IF_2
0x40001fc	            0x7730	                            ja 0x400022e	        93	input-polldev.c	FUNCTION_6	IF_2
0x40001fe	          0x3b5324	            cmp edx, dword [rbx + 0x24] 	        96	input-polldev.c	FUNCTION_6	IF_3
0x4000201	            0x772b	                            ja 0x400022e	        96	input-polldev.c	FUNCTION_6	IF_3
0x4000203	    0x4c8dadf00100	                  lea r13, [rbp + 0x1f0]	        99	input-polldev.c	FUNCTION_6	CALL_3
0x400020a	          0x4c89ef	                            mov rdi, r13	        99	input-polldev.c	FUNCTION_6	CALL_3
0x400020d	      0xe800000000	                          call 0x4000212	        99	input-polldev.c	FUNCTION_6	CALL_3
0x4000212	        0x8b442404	                mov eax, dword [rsp + 4]	       101	input-polldev.c	FUNCTION_6
0x4000216	          0x894320	             mov dword [rbx + 0x20], eax	       101	input-polldev.c	FUNCTION_6
0x4000219	    0x8b9510020000	           mov edx, dword [rbp + 0x210] 	       103	input-polldev.c	FUNCTION_6	IF_4
0x400021f	            0x85d2	                           test edx, edx	       103	input-polldev.c	FUNCTION_6	IF_4
0x4000221	            0x752a	                           jne 0x400024d	       103	input-polldev.c	FUNCTION_6	IF_4
0x4000223	          0x4c89ef	                            mov rdi, r13	       109	input-polldev.c	FUNCTION_6	CALL_6
0x4000226	      0xe800000000	                          call 0x400022b	       109	input-polldev.c	FUNCTION_6	CALL_6
0x400022b	          0x4c89e0	                            mov rax, r12	       111	input-polldev.c	FUNCTION_6
0x400022e	      0x488b742408	                mov rsi, qword [rsp + 8]	       112	input-polldev.c	FUNCTION_6
0x4000233	    0x654833342528	                xor rsi, qword gs:[0x28]	       112	input-polldev.c	FUNCTION_6
0x400023c	            0x7529	                           jne 0x4000267	       112	input-polldev.c	FUNCTION_6
0x400023e	        0x4883c410	                           add rsp, 0x10	       112	input-polldev.c	FUNCTION_6
0x4000242	              0x5b	                                 pop rbx	       112	input-polldev.c	FUNCTION_6
0x4000243	              0x5d	                                 pop rbp	       112	input-polldev.c	FUNCTION_6
0x4000244	            0x415c	                                 pop r12	       112	input-polldev.c	FUNCTION_6
0x4000246	            0x415d	                                 pop r13	       112	input-polldev.c	FUNCTION_6
0x4000248	              0xc3	                                     ret	       112	input-polldev.c	FUNCTION_6
0x4000249	            0x4898	                                    cdqe	        91	input-polldev.c	FUNCTION_6	IF_1
0x400024b	            0xebe1	                           jmp 0x400022e	        91	input-polldev.c	FUNCTION_6	IF_1
0x400024d	        0x488d7b38	                   lea rdi, [rbx + 0x38]	       104	input-polldev.c	FUNCTION_6	IF_4	CALL_4
0x4000251	      0xe800000000	                          call 0x4000256	       104	input-polldev.c	FUNCTION_6	IF_4	CALL_4
0x4000256	          0x8b4320	            mov eax, dword [rbx + 0x20] 	       105	input-polldev.c	FUNCTION_6	IF_4	IF_5
0x4000259	            0x85c0	                           test eax, eax	       105	input-polldev.c	FUNCTION_6	IF_4	IF_5
0x400025b	            0x74c6	                            je 0x4000223	       105	input-polldev.c	FUNCTION_6	IF_4	IF_5
0x400025d	          0x4889df	                            mov rdi, rbx	       106	input-polldev.c	FUNCTION_6	IF_4	CALL_5
0x4000260	      0xe80bffffff	       call sym.input_polldev_queue_work	       106	input-polldev.c	FUNCTION_6	IF_4	CALL_5
0x4000265	            0xebbc	                           jmp 0x4000223	       106	input-polldev.c	FUNCTION_6	IF_4	CALL_5
0x4000267	      0xe800000000	                          call 0x400026c	       112	input-polldev.c	FUNCTION_6
devm_input_polldev_unregister	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,3:IF,0	3
0x40002d0	          0x488b06	                    mov rax, qword [rsi]	       208	input-polldev.c	FUNCTION_12	CALL_3
0x40002d3	        0x488b7830	            mov rdi, qword [rax + 0x30] 	       208	input-polldev.c	FUNCTION_12	CALL_3
0x40002d7	      0xe900000000	                           jmp 0x40002dc	       208	input-polldev.c	FUNCTION_12	CALL_3
input_polldev_get_min	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,2:IF,0	8
0x40000e0	          0x4889d0	                            mov rax, rdx	       130	input-polldev.c	FUNCTION_8
0x40000e3	    0x488b97980000	            mov rdx, qword [rdi + 0x98] 	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000ea	    0x48c7c6000000	                              mov rsi, 0	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000f1	          0x4889c7	                            mov rdi, rax	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000f4	          0x8b5228	            mov edx, dword [rdx + 0x28] 	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000f7	      0xe800000000	                          call 0x40000fc	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000fc	            0x4898	                                    cdqe	       133	input-polldev.c	FUNCTION_8	CALL_2
0x40000fe	              0xc3	                                     ret	       134	input-polldev.c	FUNCTION_8
input_polldev_get_poll	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,2:IF,0	8
0x4000120	          0x4889d0	                            mov rax, rdx	        74	input-polldev.c	FUNCTION_5
0x4000123	    0x488b97980000	            mov rdx, qword [rdi + 0x98] 	        77	input-polldev.c	FUNCTION_5	CALL_2
0x400012a	    0x48c7c6000000	                              mov rsi, 0	        77	input-polldev.c	FUNCTION_5	CALL_2
0x4000131	          0x4889c7	                            mov rdi, rax	        77	input-polldev.c	FUNCTION_5	CALL_2
0x4000134	          0x8b5220	            mov edx, dword [rdx + 0x20] 	        77	input-polldev.c	FUNCTION_5	CALL_2
0x4000137	      0xe800000000	                          call 0x400013c	        77	input-polldev.c	FUNCTION_5	CALL_2
0x400013c	            0x4898	                                    cdqe	        77	input-polldev.c	FUNCTION_5	CALL_2
0x400013e	              0xc3	                                     ret	        78	input-polldev.c	FUNCTION_5
input_unregister_polled_device	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,3:IF,1	17
0x40002e0	              0x53	                                push rbx	       356	input-polldev.c	FUNCTION_16
0x40002e1	    0x80bf90000000	                cmp byte [rdi + 0x90], 0	       357	input-polldev.c	FUNCTION_16	IF_1
0x40002e8	          0x4889fb	                            mov rbx, rdi	       356	input-polldev.c	FUNCTION_16
0x40002eb	            0x750a	                           jne 0x40002f7	       357	input-polldev.c	FUNCTION_16	IF_1
0x40002ed	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       363	input-polldev.c	FUNCTION_16	CALL_3
0x40002f1	              0x5b	                                 pop rbx	       364	input-polldev.c	FUNCTION_16
0x40002f2	      0xe900000000	                           jmp 0x40002f7	       363	input-polldev.c	FUNCTION_16	CALL_3
0x40002f7	        0x488b4730	            mov rax, qword [rdi + 0x30] 	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x40002fb	          0x4889d9	                            mov rcx, rbx	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x40002fe	    0x48c7c2000000	                              mov rdx, 0	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x4000305	    0x48c7c6000000	                              mov rsi, 0	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x400030c	    0x488bb8180200	           mov rdi, qword [rax + 0x218] 	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x4000313	      0xe800000000	                          call 0x4000318	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x4000318	            0x85c0	                           test eax, eax	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x400031a	            0x74d1	                            je 0x40002ed	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x400031c	             0xf0b	                                     ud2	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
0x400031e	            0xebcd	                           jmp 0x40002ed	       358	input-polldev.c	FUNCTION_16	IF_1	CALL_2
devm_input_polldev_match	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,0:IF,0	4
0x4000040	            0x31c0	                            xor eax, eax	       186	input-polldev.c	FUNCTION_10
0x4000042	          0x483916	                    cmp qword [rsi], rdx	       186	input-polldev.c	FUNCTION_10
0x4000045	           0xf94c0	                                 sete al	       186	input-polldev.c	FUNCTION_10
0x4000048	              0xc3	                                     ret	       187	input-polldev.c	FUNCTION_10
input_open_polled_device	WHILE,0:FOR,0:SWITCH,0:functions,0:DO,0:ELSE,0:CALL,4:IF,2	18
0x4000270	              0x53	                                push rbx	        45	input-polldev.c	FUNCTION_3
0x4000271	    0x488b9fb00200	           mov rbx, qword [rdi + 0x2b0] 	        45	input-polldev.c	FUNCTION_3
0x4000278	        0x488b4308	                mov rax, qword [rbx + 8]	        48	input-polldev.c	FUNCTION_3	IF_1
0x400027c	          0x4885c0	                           test rax, rax	        48	input-polldev.c	FUNCTION_3	IF_1
0x400027f	            0x7408	                            je 0x4000289	        48	input-polldev.c	FUNCTION_3	IF_1
0x4000281	          0x4889df	                            mov rdi, rbx	        49	input-polldev.c	FUNCTION_3	CALL_2
0x4000284	      0xe800000000	                          call 0x4000289	        49	input-polldev.c	FUNCTION_3	CALL_2
0x4000289	          0x8b4320	            mov eax, dword [rbx + 0x20] 	        52	input-polldev.c	FUNCTION_3	IF_2
0x400028c	            0x85c0	                           test eax, eax	        52	input-polldev.c	FUNCTION_3	IF_2
0x400028e	            0x7414	                            je 0x40002a4	        52	input-polldev.c	FUNCTION_3	IF_2
0x4000290	          0x4889df	                            mov rdi, rbx	        53	input-polldev.c	FUNCTION_3	IF_2	CALL_3
0x4000293	        0x488b4318	            mov rax, qword [rbx + 0x18] 	        53	input-polldev.c	FUNCTION_3	IF_2	CALL_3
0x4000297	      0xe800000000	                          call 0x400029c	        53	input-polldev.c	FUNCTION_3	IF_2	CALL_3
0x400029c	          0x4889df	                            mov rdi, rbx	        54	input-polldev.c	FUNCTION_3	IF_2	CALL_4
0x400029f	      0xe8ccfeffff	       call sym.input_polldev_queue_work	        54	input-polldev.c	FUNCTION_3	IF_2	CALL_4
0x40002a4	            0x31c0	                            xor eax, eax	        58	input-polldev.c	FUNCTION_3
0x40002a6	              0x5b	                                 pop rbx	        58	input-polldev.c	FUNCTION_3
0x40002a7	              0xc3	                                     ret	        58	input-polldev.c	FUNCTION_3
