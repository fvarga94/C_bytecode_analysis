iommu_group_get_for_dev	SWITCH,0:functions,0:FOR,0:CALL,12:DO,0:ELSE,0:IF,8:WHILE,0	94
0x4002030	            0x4155	                                push r13	      1001	iommu.c	FUNCTION_36
0x4002032	            0x4154	                                push r12	      1001	iommu.c	FUNCTION_36
0x4002034	              0x55	                                push rbp	      1001	iommu.c	FUNCTION_36
0x4002035	              0x53	                                push rbx	      1001	iommu.c	FUNCTION_36
0x4002036	    0x488b9fb80200	           mov rbx, qword [rdi + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x400203d	          0x4885db	                           test rbx, rbx	       730	iommu.c	FUNCTION_25	IF_1
0x4002040	            0x7413	                            je 0x4002055	       730	iommu.c	FUNCTION_25	IF_1
0x4002042	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x4002046	      0xe800000000	                          call 0x400204b	       731	iommu.c	FUNCTION_25	CALL_1
0x400204b	          0x4889d8	                            mov rax, rbx	      1047	iommu.c	FUNCTION_36
0x400204e	              0x5b	                                 pop rbx	      1047	iommu.c	FUNCTION_36
0x400204f	              0x5d	                                 pop rbp	      1047	iommu.c	FUNCTION_36
0x4002050	            0x415c	                                 pop r12	      1047	iommu.c	FUNCTION_36
0x4002052	            0x415d	                                 pop r13	      1047	iommu.c	FUNCTION_36
0x4002054	              0xc3	                                     ret	      1047	iommu.c	FUNCTION_36
0x4002055	    0x488b87800000	            mov rax, qword [rdi + 0x80] 	      1002	iommu.c	FUNCTION_36
0x400205c	          0x4889fd	                            mov rbp, rdi	      1002	iommu.c	FUNCTION_36
0x400205f	    0x48c7c3eaffff	             mov rbx, 0xffffffffffffffea	      1011	iommu.c	FUNCTION_36	CALL_2
0x4002066	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      1002	iommu.c	FUNCTION_36
0x400206d	          0x4885c0	                           test rax, rax	      1010	iommu.c	FUNCTION_36	IF_2
0x4002070	            0x74d9	                            je 0x400204b	      1010	iommu.c	FUNCTION_36	IF_2
0x4002072	        0x488b4070	            mov rax, qword [rax + 0x70] 	      1013	iommu.c	FUNCTION_36	CALL_3
0x4002076	          0x4889ef	                            mov rdi, rbp	      1013	iommu.c	FUNCTION_36	CALL_3
0x4002079	      0xe800000000	                          call 0x400207e	      1013	iommu.c	FUNCTION_36	CALL_3
0x400207e	          0x4885c0	                           test rax, rax	      1014	iommu.c	FUNCTION_36	IF_3	CALL_4
0x4002081	          0x4989c4	                            mov r12, rax	      1013	iommu.c	FUNCTION_36	CALL_3
0x4002084	            0x7435	                            je 0x40020bb	      1014	iommu.c	FUNCTION_36	IF_3	CALL_4
0x4002086	    0x483d00f0ffff	             cmp rax, 0xfffffffffffff000	      1017	iommu.c	FUNCTION_36	IF_4	CALL_6
0x400208c	            0x771c	                            ja 0x40020aa	      1017	iommu.c	FUNCTION_36	IF_4	CALL_6
0x400208e	    0x4883b8c80000	               cmp qword [rax + 0xc8], 0	      1024	iommu.c	FUNCTION_36	IF_5
0x4002096	            0x7427	                            je 0x40020bf	      1024	iommu.c	FUNCTION_36	IF_5
0x4002098	          0x4889ee	                            mov rsi, rbp	      1040	iommu.c	FUNCTION_36	CALL_10
0x400209b	          0x4c89e7	                            mov rdi, r12	      1040	iommu.c	FUNCTION_36	CALL_10
0x400209e	      0xe800000000	                          call 0x40020a3	      1040	iommu.c	FUNCTION_36	CALL_10
0x40020a3	          0x4863d8	                         movsxd rbx, eax	      1040	iommu.c	FUNCTION_36	CALL_10
0x40020a6	            0x85db	                           test ebx, ebx	      1041	iommu.c	FUNCTION_36	IF_8
0x40020a8	            0x7505	                           jne 0x40020af	      1041	iommu.c	FUNCTION_36	IF_8
0x40020aa	          0x4c89e3	                            mov rbx, r12	      1041	iommu.c	FUNCTION_36	IF_8
0x40020ad	            0xeb9c	                           jmp 0x400204b	      1041	iommu.c	FUNCTION_36	IF_8
0x40020af	      0x498b7c2440	            mov rdi, qword [r12 + 0x40] 	       760	iommu.c	FUNCTION_27	CALL_1
0x40020b4	      0xe800000000	                          call 0x40020b9	       760	iommu.c	FUNCTION_27	CALL_1
0x40020b9	            0xeb90	                           jmp 0x400204b	      1043	iommu.c	FUNCTION_36	IF_8	CALL_12
0x40020bb	             0xf0b	                                     ud2	      1043	iommu.c	FUNCTION_36	IF_8	CALL_12
0x40020bd	            0xeb8c	                           jmp 0x400204b	      1014	iommu.c	FUNCTION_36	IF_3	CALL_4
0x40020bf	    0x488b9d800000	            mov rbx, qword [rbp + 0x80] 	      1027	iommu.c	FUNCTION_36	IF_5	CALL_7
0x40020c6	    0x448b2d000000	           mov r13d, dword [0x040020cd] 	      1027	iommu.c	FUNCTION_36	IF_5	CALL_7
0x40020cd	          0x4885db	                           test rbx, rbx	      1256	iommu.c	FUNCTION_46	IF_1
0x40020d0	            0x7468	                            je 0x400213a	      1256	iommu.c	FUNCTION_46	IF_1
0x40020d2	    0x488b83900000	            mov rax, qword [rbx + 0x90] 	      1256	iommu.c	FUNCTION_46	IF_1
0x40020d9	          0x4885c0	                           test rax, rax	      1256	iommu.c	FUNCTION_46	IF_1
0x40020dc	            0x745c	                            je 0x400213a	      1256	iommu.c	FUNCTION_46	IF_1
0x40020de	        0x488b4008	                mov rax, qword [rax + 8]	      1259	iommu.c	FUNCTION_46	CALL_1
0x40020e2	          0x4489ef	                           mov edi, r13d	      1259	iommu.c	FUNCTION_46	CALL_1
0x40020e5	      0xe800000000	                          call 0x40020ea	      1259	iommu.c	FUNCTION_46	CALL_1
0x40020ea	          0x4885c0	                           test rax, rax	      1260	iommu.c	FUNCTION_46	IF_2
0x40020ed	            0x7444	                            je 0x4002133	      1260	iommu.c	FUNCTION_46	IF_2
0x40020ef	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1263	iommu.c	FUNCTION_46
0x40020f6	          0x448928	                   mov dword [rax], r13d	      1264	iommu.c	FUNCTION_46
0x40020f9	        0x48895008	                mov qword [rax + 8], rdx	      1263	iommu.c	FUNCTION_46
0x40020fd	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1266	iommu.c	FUNCTION_46
0x4002104	    0x488b92d00000	            mov rdx, qword [rdx + 0xd0] 	      1266	iommu.c	FUNCTION_46
0x400210b	        0x48895010	             mov qword [rax + 0x10], rdx	      1266	iommu.c	FUNCTION_46
0x400210f	    0x4983bc24d000	               cmp qword [r12 + 0xd0], 0	      1036	iommu.c	FUNCTION_36	IF_5	IF_7
0x4002118	    0x49898424c800	             mov qword [r12 + 0xc8], rax	      1035	iommu.c	FUNCTION_36	IF_5
0x4002120	     0xf8572ffffff	                           jne 0x4002098	      1036	iommu.c	FUNCTION_36	IF_5	IF_7
0x4002126	    0x49898424d000	             mov qword [r12 + 0xd0], rax	      1037	iommu.c	FUNCTION_36	IF_5	IF_7
0x400212e	      0xe965ffffff	                           jmp 0x4002098	      1037	iommu.c	FUNCTION_36	IF_5	IF_7
0x4002133	    0x448b2d000000	           mov r13d, dword [0x0400213a] 	      1037	iommu.c	FUNCTION_36	IF_5	IF_7
0x400213a	        0x4183fd03	                             cmp r13d, 3	      1028	iommu.c	FUNCTION_36	IF_5	IF_6
0x400213e	            0x7465	                            je 0x40021a5	      1028	iommu.c	FUNCTION_36	IF_5	IF_6
0x4002140	          0x4489ea	                           mov edx, r13d	      1029	iommu.c	FUNCTION_36	IF_5	IF_6	CALL_8
0x4002143	    0x48c7c6000000	                              mov rsi, 0	      1029	iommu.c	FUNCTION_36	IF_5	IF_6	CALL_8
0x400214a	          0x4889ef	                            mov rdi, rbp	      1029	iommu.c	FUNCTION_36	IF_5	IF_6	CALL_8
0x400214d	      0xe800000000	                          call 0x4002152	      1029	iommu.c	FUNCTION_36	IF_5	IF_6	CALL_8
0x4002152	    0x488b9d800000	            mov rbx, qword [rbp + 0x80] 	      1032	iommu.c	FUNCTION_36	IF_5	IF_6	CALL_9
0x4002159	          0x4885db	                           test rbx, rbx	      1256	iommu.c	FUNCTION_46	IF_1
0x400215c	            0x7447	                            je 0x40021a5	      1256	iommu.c	FUNCTION_46	IF_1
0x400215e	    0x488b83900000	            mov rax, qword [rbx + 0x90] 	      1256	iommu.c	FUNCTION_46	IF_1
0x4002165	          0x4885c0	                           test rax, rax	      1256	iommu.c	FUNCTION_46	IF_1
0x4002168	            0x743b	                            je 0x40021a5	      1256	iommu.c	FUNCTION_46	IF_1
0x400216a	        0x488b4008	                mov rax, qword [rax + 8]	      1259	iommu.c	FUNCTION_46	CALL_1
0x400216e	      0xbf03000000	                              mov edi, 3	      1259	iommu.c	FUNCTION_46	CALL_1
0x4002173	      0xe800000000	                          call 0x4002178	      1259	iommu.c	FUNCTION_46	CALL_1
0x4002178	          0x4885c0	                           test rax, rax	      1260	iommu.c	FUNCTION_46	IF_2
0x400217b	            0x7492	                            je 0x400210f	      1260	iommu.c	FUNCTION_46	IF_2
0x400217d	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1263	iommu.c	FUNCTION_46
0x4002184	    0xc70003000000	                      mov dword [rax], 3	      1264	iommu.c	FUNCTION_46
0x400218a	        0x48895008	                mov qword [rax + 8], rdx	      1263	iommu.c	FUNCTION_46
0x400218e	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1266	iommu.c	FUNCTION_46
0x4002195	    0x488b92d00000	            mov rdx, qword [rdx + 0xd0] 	      1266	iommu.c	FUNCTION_46
0x400219c	        0x48895010	             mov qword [rax + 0x10], rdx	      1266	iommu.c	FUNCTION_46
0x40021a0	      0xe96affffff	                           jmp 0x400210f	      1266	iommu.c	FUNCTION_46
0x40021a5	            0x31c0	                            xor eax, eax	      1257	iommu.c	FUNCTION_46	IF_1
0x40021a7	      0xe963ffffff	                           jmp 0x400210f	      1257	iommu.c	FUNCTION_46	IF_1
iommu_group_show_name	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	7
0x40002e0	    0x488b97b80000	            mov rdx, qword [rdi + 0xb8] 	       172	iommu.c	FUNCTION_8	CALL_1
0x40002e7	          0x4889f0	                            mov rax, rsi	       171	iommu.c	FUNCTION_8
0x40002ea	    0x48c7c6000000	                              mov rsi, 0	       172	iommu.c	FUNCTION_8	CALL_1
0x40002f1	          0x4889c7	                            mov rdi, rax	       172	iommu.c	FUNCTION_8	CALL_1
0x40002f4	      0xe800000000	                          call 0x40002f9	       172	iommu.c	FUNCTION_8	CALL_1
0x40002f9	            0x4898	                                    cdqe	       172	iommu.c	FUNCTION_8	CALL_1
0x40002fb	              0xc3	                                     ret	       173	iommu.c	FUNCTION_8
iommu_group_release	SWITCH,0:functions,0:FOR,0:CALL,7:DO,0:ELSE,0:IF,2:WHILE,0	21
0x4000270	              0x53	                                push rbx	       301	iommu.c	FUNCTION_13
0x4000271	    0x488b87b00000	            mov rax, qword [rdi + 0xb0] 	       306	iommu.c	FUNCTION_13	IF_1
0x4000278	          0x4889fb	                            mov rbx, rdi	       301	iommu.c	FUNCTION_13
0x400027b	          0x4885c0	                           test rax, rax	       306	iommu.c	FUNCTION_13	IF_1
0x400027e	            0x740c	                            je 0x400028c	       306	iommu.c	FUNCTION_13	IF_1
0x4000280	    0x488bbfa80000	            mov rdi, qword [rdi + 0xa8] 	       307	iommu.c	FUNCTION_13	CALL_3
0x4000287	      0xe800000000	                          call 0x400028c	       307	iommu.c	FUNCTION_13	CALL_3
0x400028c	    0x8bb3c0000000	            mov esi, dword [rbx + 0xc0] 	       309	iommu.c	FUNCTION_13	CALL_4
0x4000292	    0x48c7c7000000	                              mov rdi, 0	       309	iommu.c	FUNCTION_13	CALL_4
0x4000299	      0xe800000000	                          call 0x400029e	       309	iommu.c	FUNCTION_13	CALL_4
0x400029e	    0x488bbbc80000	            mov rdi, qword [rbx + 0xc8] 	       311	iommu.c	FUNCTION_13	IF_2
0x40002a5	          0x4885ff	                           test rdi, rdi	       311	iommu.c	FUNCTION_13	IF_2
0x40002a8	            0x740d	                            je 0x40002b7	       311	iommu.c	FUNCTION_13	IF_2
0x40002aa	        0x488b4708	                mov rax, qword [rdi + 8]	      1279	iommu.c	FUNCTION_48	CALL_1
0x40002ae	        0x488b4010	            mov rax, qword [rax + 0x10] 	      1279	iommu.c	FUNCTION_48	CALL_1
0x40002b2	      0xe800000000	                          call 0x40002b7	      1279	iommu.c	FUNCTION_48	CALL_1
0x40002b7	    0x488bbbb80000	            mov rdi, qword [rbx + 0xb8] 	       314	iommu.c	FUNCTION_13	CALL_6
0x40002be	      0xe800000000	                          call 0x40002c3	       314	iommu.c	FUNCTION_13	CALL_6
0x40002c3	          0x4889df	                            mov rdi, rbx	       315	iommu.c	FUNCTION_13	CALL_7
0x40002c6	              0x5b	                                 pop rbx	       316	iommu.c	FUNCTION_13
0x40002c7	      0xe900000000	                           jmp 0x40002cc	       315	iommu.c	FUNCTION_13	CALL_7
iommu_group_default_domain	SWITCH,0:functions,0:FOR,0:CALL,0:DO,0:ELSE,0:IF,0:WHILE,0	2
0x40021b0	    0x488b87c80000	            mov rax, qword [rdi + 0xc8] 	      1051	iommu.c	FUNCTION_37
0x40021b7	              0xc3	                                     ret	      1052	iommu.c	FUNCTION_37
iommu_domain_window_disable	SWITCH,0:functions,0:FOR,0:CALL,2:DO,0:ELSE,0:IF,1:WHILE,0	6
0x4000410	        0x488b4708	                mov rax, qword [rdi + 8]	      1695	iommu.c	FUNCTION_68	IF_1	CALL_1
0x4000414	    0x488b80a80000	            mov rax, qword [rax + 0xa8] 	      1695	iommu.c	FUNCTION_68	IF_1	CALL_1
0x400041b	          0x4885c0	                           test rax, rax	      1695	iommu.c	FUNCTION_68	IF_1	CALL_1
0x400041e	            0x7405	                            je 0x4000425	      1695	iommu.c	FUNCTION_68	IF_1	CALL_1
0x4000420	      0xe900000000	                           jmp 0x4000425	      1698	iommu.c	FUNCTION_68	CALL_2
0x4000425	            0xf3c3	                                     ret	      1698	iommu.c	FUNCTION_68	CALL_2
iommu_set_def_domain_type	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,1:WHILE,0	23
0x4000040	        0x488b4610	            mov rax, qword [rsi + 0x10] 	       135	iommu.c	FUNCTION_4	IF_1
0x4000044	          0x4885c0	                           test rax, rax	       135	iommu.c	FUNCTION_4	IF_1
0x4000047	            0x7408	                            je 0x4000051	       135	iommu.c	FUNCTION_4	IF_1
0x4000049	          0x4889d6	                            mov rsi, rdx	       136	iommu.c	FUNCTION_4	CALL_3
0x400004c	      0xe900000000	                           jmp 0x4000051	       136	iommu.c	FUNCTION_4	CALL_3
0x4000051	    0x48c7c0fbffff	             mov rax, 0xfffffffffffffffb	       138	iommu.c	FUNCTION_4
0x4000058	              0xc3	                                     ret	       138	iommu.c	FUNCTION_4
0x4000059	     0xf1f80000000	                         nop dword [rax]	       138	iommu.c	FUNCTION_4
0x4000060	        0x488b4618	            mov rax, qword [rsi + 0x18] 	       148	iommu.c	FUNCTION_5	IF_1
0x4000064	          0x4989d0	                             mov r8, rdx	       143	iommu.c	FUNCTION_5
0x4000067	          0x4885c0	                           test rax, rax	       148	iommu.c	FUNCTION_5	IF_1
0x400006a	            0x740b	                            je 0x4000077	       148	iommu.c	FUNCTION_5	IF_1
0x400006c	          0x4889ca	                            mov rdx, rcx	       149	iommu.c	FUNCTION_5	CALL_3
0x400006f	          0x4c89c6	                             mov rsi, r8	       149	iommu.c	FUNCTION_5	CALL_3
0x4000072	      0xe900000000	                           jmp 0x4000077	       149	iommu.c	FUNCTION_5	CALL_3
0x4000077	    0x48c7c0fbffff	             mov rax, 0xfffffffffffffffb	       151	iommu.c	FUNCTION_5
0x400007e	              0xc3	                                     ret	       151	iommu.c	FUNCTION_5
0x400007f	              0x90	                                     nop	       151	iommu.c	FUNCTION_5
0x4000080	    0x488b87a80000	            mov rax, qword [rdi + 0xa8] 	       427	iommu.c	FUNCTION_16
0x4000087	              0xc3	                                     ret	       428	iommu.c	FUNCTION_16
0x4000088	     0xf1f84000000	                   nop dword [rax + rax]	       428	iommu.c	FUNCTION_16
0x4000090	    0x4889b7a80000	             mov qword [rdi + 0xa8], rsi	       444	iommu.c	FUNCTION_17
0x4000097	              0x48	                                 invalid	       445	iommu.c	FUNCTION_17
get_pci_alias_or_group	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	16
0x4000450	              0x55	                                push rbp	       905	iommu.c	FUNCTION_33
0x4000451	          0x48893a	                    mov qword [rdx], rdi	       908	iommu.c	FUNCTION_33
0x4000454	          0x4889d5	                            mov rbp, rdx	       905	iommu.c	FUNCTION_33
0x4000457	              0x53	                                push rbx	       905	iommu.c	FUNCTION_33
0x4000458	    0x488b9f580300	           mov rbx, qword [rdi + 0x358] 	       728	iommu.c	FUNCTION_25
0x400045f	          0x4885db	                           test rbx, rbx	       730	iommu.c	FUNCTION_25	IF_1
0x4000462	            0x7409	                            je 0x400046d	       730	iommu.c	FUNCTION_25	IF_1
0x4000464	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x4000468	      0xe800000000	                          call 0x400046d	       731	iommu.c	FUNCTION_25	CALL_1
0x400046d	            0x31c0	                            xor eax, eax	       911	iommu.c	FUNCTION_33
0x400046f	          0x4885db	                           test rbx, rbx	       911	iommu.c	FUNCTION_33
0x4000472	        0x48895d08	                mov qword [rbp + 8], rbx	       909	iommu.c	FUNCTION_33	CALL_1
0x4000476	           0xf95c0	                                setne al	       911	iommu.c	FUNCTION_33
0x4000479	              0x5b	                                 pop rbx	       912	iommu.c	FUNCTION_33
0x400047a	              0x5d	                                 pop rbp	       912	iommu.c	FUNCTION_33
0x400047b	              0xc3	                                     ret	       912	iommu.c	FUNCTION_33
__iommu_attach_group	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,2:WHILE,0	37
0x40016a0	            0x4155	                                push r13	      1400	iommu.c	FUNCTION_55
0x40016a2	            0x4154	                                push r12	      1400	iommu.c	FUNCTION_55
0x40016a4	              0x55	                                push rbp	      1400	iommu.c	FUNCTION_55
0x40016a5	              0x53	                                push rbx	      1400	iommu.c	FUNCTION_55
0x40016a6	    0x488b96c80000	            mov rdx, qword [rsi + 0xc8] 	      1403	iommu.c	FUNCTION_55	IF_1
0x40016ad	          0x4885d2	                           test rdx, rdx	      1403	iommu.c	FUNCTION_55	IF_1
0x40016b0	            0x740e	                            je 0x40016c0	      1403	iommu.c	FUNCTION_55	IF_1
0x40016b2	    0x483b96d00000	            cmp rdx, qword [rsi + 0xd0] 	      1403	iommu.c	FUNCTION_55	IF_1
0x40016b9	      0xb8f0ffffff	                     mov eax, 0xfffffff0	      1404	iommu.c	FUNCTION_55	IF_1
0x40016be	            0x752d	                           jne 0x40016ed	      1403	iommu.c	FUNCTION_55	IF_1
0x40016c0	        0x488b5e48	            mov rbx, qword [rsi + 0x48] 	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016c4	        0x4c8d6648	                   lea r12, [rsi + 0x48]	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016c8	          0x4989f5	                            mov r13, rsi	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016cb	          0x4889fd	                            mov rbp, rdi	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016ce	          0x4939dc	                            cmp r12, rbx	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016d1	            0x750a	                           jne 0x40016dd	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016d3	            0xeb1f	                           jmp 0x40016f4	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016d5	          0x488b1b	                    mov rbx, qword [rbx]	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016d8	          0x4939dc	                            cmp r12, rbx	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016db	            0x7417	                            je 0x40016f4	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x40016dd	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	      1395	iommu.c	FUNCTION_54	CALL_1
0x40016e1	          0x4889ef	                            mov rdi, rbp	      1395	iommu.c	FUNCTION_54	CALL_1
0x40016e4	      0xe817ecffff	          call sym.__iommu_attach_device	      1395	iommu.c	FUNCTION_54	CALL_1
0x40016e9	            0x85c0	                           test eax, eax	       698	iommu.c	FUNCTION_23	FUNCTION_1	IF_1
0x40016eb	            0x74e8	                            je 0x40016d5	       698	iommu.c	FUNCTION_23	FUNCTION_1	IF_1
0x40016ed	              0x5b	                                 pop rbx	      1412	iommu.c	FUNCTION_55
0x40016ee	              0x5d	                                 pop rbp	      1412	iommu.c	FUNCTION_55
0x40016ef	            0x415c	                                 pop r12	      1412	iommu.c	FUNCTION_55
0x40016f1	            0x415d	                                 pop r13	      1412	iommu.c	FUNCTION_55
0x40016f3	              0xc3	                                     ret	      1412	iommu.c	FUNCTION_55
0x40016f4	    0x4989add00000	             mov qword [r13 + 0xd0], rbp	      1409	iommu.c	FUNCTION_55	IF_2
0x40016fb	            0x31c0	                            xor eax, eax	      1409	iommu.c	FUNCTION_55	IF_2
0x40016fd	              0x5b	                                 pop rbx	      1412	iommu.c	FUNCTION_55
0x40016fe	              0x5d	                                 pop rbp	      1412	iommu.c	FUNCTION_55
0x40016ff	            0x415c	                                 pop r12	      1412	iommu.c	FUNCTION_55
0x4001701	            0x415d	                                 pop r13	      1412	iommu.c	FUNCTION_55
0x4001703	              0xc3	                                     ret	      1412	iommu.c	FUNCTION_55
iommu_group_register_notifier	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	2
0x40007b0	        0x4883c778	                           add rdi, 0x78	       776	iommu.c	FUNCTION_28	CALL_1
0x40007b4	      0xe900000000	                           jmp 0x40007b9	       776	iommu.c	FUNCTION_28	CALL_1
iommu_attach_group	SWITCH,0:functions,0:FOR,0:CALL,3:DO,0:ELSE,0:IF,0:WHILE,0	19
0x4001710	            0x4154	                                push r12	      1415	iommu.c	FUNCTION_56
0x4001712	              0x55	                                push rbp	      1415	iommu.c	FUNCTION_56
0x4001713	          0x4989fc	                            mov r12, rdi	      1415	iommu.c	FUNCTION_56
0x4001716	              0x53	                                push rbx	      1415	iommu.c	FUNCTION_56
0x4001717	        0x488d5e58	                   lea rbx, [rsi + 0x58]	      1418	iommu.c	FUNCTION_56	CALL_1
0x400171b	          0x4889f5	                            mov rbp, rsi	      1415	iommu.c	FUNCTION_56
0x400171e	          0x4889df	                            mov rdi, rbx	      1418	iommu.c	FUNCTION_56	CALL_1
0x4001721	      0xe800000000	                          call 0x4001726	      1418	iommu.c	FUNCTION_56	CALL_1
0x4001726	          0x4889ee	                            mov rsi, rbp	      1419	iommu.c	FUNCTION_56	CALL_2
0x4001729	          0x4c89e7	                            mov rdi, r12	      1419	iommu.c	FUNCTION_56	CALL_2
0x400172c	      0xe86fffffff	           call sym.__iommu_attach_group	      1419	iommu.c	FUNCTION_56	CALL_2
0x4001731	          0x4889df	                            mov rdi, rbx	      1420	iommu.c	FUNCTION_56	CALL_3
0x4001734	            0x89c5	                            mov ebp, eax	      1419	iommu.c	FUNCTION_56	CALL_2
0x4001736	      0xe800000000	                          call 0x400173b	      1420	iommu.c	FUNCTION_56	CALL_3
0x400173b	            0x89e8	                            mov eax, ebp	      1423	iommu.c	FUNCTION_56
0x400173d	              0x5b	                                 pop rbx	      1423	iommu.c	FUNCTION_56
0x400173e	              0x5d	                                 pop rbp	      1423	iommu.c	FUNCTION_56
0x400173f	            0x415c	                                 pop r12	      1423	iommu.c	FUNCTION_56
0x4001741	              0xc3	                                     ret	      1423	iommu.c	FUNCTION_56
iommu_get_domain_for_dev	SWITCH,0:functions,0:FOR,0:CALL,2:DO,0:ELSE,0:IF,1:WHILE,0	15
0x4000480	              0x55	                                push rbp	      1365	iommu.c	FUNCTION_53
0x4000481	              0x53	                                push rbx	      1365	iommu.c	FUNCTION_53
0x4000482	            0x31c0	                            xor eax, eax	      1365	iommu.c	FUNCTION_53
0x4000484	    0x488bafb80200	           mov rbp, qword [rdi + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x400048b	          0x4885ed	                           test rbp, rbp	       730	iommu.c	FUNCTION_25	IF_1
0x400048e	            0x741c	                            je 0x40004ac	       730	iommu.c	FUNCTION_25	IF_1
0x4000490	        0x488b7d40	            mov rdi, qword [rbp + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x4000494	      0xe800000000	                          call 0x4000499	       731	iommu.c	FUNCTION_25	CALL_1
0x4000499	    0x488b9dd00000	            mov rbx, qword [rbp + 0xd0] 	      1373	iommu.c	FUNCTION_53
0x40004a0	        0x488b7d40	            mov rdi, qword [rbp + 0x40] 	       760	iommu.c	FUNCTION_27	CALL_1
0x40004a4	      0xe800000000	                          call 0x40004a9	       760	iommu.c	FUNCTION_27	CALL_1
0x40004a9	          0x4889d8	                            mov rax, rbx	      1377	iommu.c	FUNCTION_53
0x40004ac	              0x5b	                                 pop rbx	      1378	iommu.c	FUNCTION_53
0x40004ad	              0x5d	                                 pop rbp	      1378	iommu.c	FUNCTION_53
0x40004ae	              0xc3	                                     ret	      1378	iommu.c	FUNCTION_53
iommu_fwspec_free	SWITCH,0:functions,0:FOR,0:CALL,2:DO,0:ELSE,0:IF,1:WHILE,0	14
0x40007d0	              0x55	                                push rbp	      1942	iommu.c	FUNCTION_79
0x40007d1	              0x53	                                push rbx	      1942	iommu.c	FUNCTION_79
0x40007d2	    0x488bafc00200	           mov rbp, qword [rdi + 0x2c0] 	      1943	iommu.c	FUNCTION_79
0x40007d9	          0x4885ed	                           test rbp, rbp	      1945	iommu.c	FUNCTION_79	IF_1
0x40007dc	            0x741f	                            je 0x40007fd	      1945	iommu.c	FUNCTION_79	IF_1
0x40007de	          0x4889fb	                            mov rbx, rdi	      1945	iommu.c	FUNCTION_79	IF_1
0x40007e1	        0x488b7d08	                mov rdi, qword [rbp + 8]	      1946	iommu.c	FUNCTION_79	IF_1	CALL_1
0x40007e5	      0xe800000000	                          call 0x40007ea	      1946	iommu.c	FUNCTION_79	IF_1	CALL_1
0x40007ea	          0x4889ef	                            mov rdi, rbp	      1947	iommu.c	FUNCTION_79	IF_1	CALL_2
0x40007ed	      0xe800000000	                          call 0x40007f2	      1947	iommu.c	FUNCTION_79	IF_1	CALL_2
0x40007f2	    0x48c783c00200	              mov qword [rbx + 0x2c0], 0	      1948	iommu.c	FUNCTION_79	IF_1
0x40007fd	              0x5b	                                 pop rbx	      1950	iommu.c	FUNCTION_79
0x40007fe	              0x5d	                                 pop rbp	      1950	iommu.c	FUNCTION_79
0x40007ff	              0xc3	                                     ret	      1950	iommu.c	FUNCTION_79
iommu_detach_device	SWITCH,0:functions,0:FOR,0:CALL,7:DO,0:ELSE,0:IF,2:WHILE,0	39
0x4001010	            0x4154	                                push r12	      1343	iommu.c	FUNCTION_52
0x4001012	              0x55	                                push rbp	      1343	iommu.c	FUNCTION_52
0x4001013	              0x53	                                push rbx	      1343	iommu.c	FUNCTION_52
0x4001014	    0x488b9eb80200	           mov rbx, qword [rsi + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x400101b	          0x4885db	                           test rbx, rbx	       730	iommu.c	FUNCTION_25	IF_1
0x400101e	            0x744e	                            je 0x400106e	       730	iommu.c	FUNCTION_25	IF_1
0x4001020	          0x4889fd	                            mov rbp, rdi	       730	iommu.c	FUNCTION_25	IF_1
0x4001023	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x4001027	        0x4c8d6358	                   lea r12, [rbx + 0x58]	      1350	iommu.c	FUNCTION_52	CALL_2
0x400102b	      0xe800000000	                          call 0x4001030	       731	iommu.c	FUNCTION_25	CALL_1
0x4001030	          0x4c89e7	                            mov rdi, r12	      1350	iommu.c	FUNCTION_52	CALL_2
0x4001033	      0xe800000000	                          call 0x4001038	      1350	iommu.c	FUNCTION_52	CALL_2
0x4001038	        0x488b4348	            mov rax, qword [rbx + 0x48] 	       673	iommu.c	FUNCTION_22	CALL_1
0x400103c	        0x488d4b48	                   lea rcx, [rbx + 0x48]	       673	iommu.c	FUNCTION_22	CALL_1
0x4001040	          0x4839c1	                            cmp rcx, rax	       673	iommu.c	FUNCTION_22	CALL_1
0x4001043	            0x7412	                            je 0x4001057	       673	iommu.c	FUNCTION_22	CALL_1
0x4001045	            0x31d2	                            xor edx, edx	       673	iommu.c	FUNCTION_22	CALL_1
0x4001047	          0x488b00	                    mov rax, qword [rax]	       673	iommu.c	FUNCTION_22	CALL_1
0x400104a	          0x83c201	                              add edx, 1	       674	iommu.c	FUNCTION_22
0x400104d	          0x4839c1	                            cmp rcx, rax	       673	iommu.c	FUNCTION_22	CALL_1
0x4001050	            0x75f5	                           jne 0x4001047	       673	iommu.c	FUNCTION_22	CALL_1
0x4001052	          0x83fa01	                              cmp edx, 1	      1351	iommu.c	FUNCTION_52	IF_2	CALL_3
0x4001055	            0x741c	                            je 0x4001073	      1351	iommu.c	FUNCTION_52	IF_2	CALL_3
0x4001057	             0xf0b	                                     ud2	      1351	iommu.c	FUNCTION_52	IF_2	CALL_3
0x4001059	          0x4c89e7	                            mov rdi, r12	      1359	iommu.c	FUNCTION_52	CALL_6
0x400105c	      0xe800000000	                          call 0x4001061	      1359	iommu.c	FUNCTION_52	CALL_6
0x4001061	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       760	iommu.c	FUNCTION_27	CALL_1
0x4001065	              0x5b	                                 pop rbx	      1361	iommu.c	FUNCTION_52
0x4001066	              0x5d	                                 pop rbp	      1361	iommu.c	FUNCTION_52
0x4001067	            0x415c	                                 pop r12	      1361	iommu.c	FUNCTION_52
0x4001069	      0xe900000000	                           jmp 0x400106e	       760	iommu.c	FUNCTION_27	CALL_1
0x400106e	              0x5b	                                 pop rbx	      1361	iommu.c	FUNCTION_52
0x400106f	              0x5d	                                 pop rbp	      1361	iommu.c	FUNCTION_52
0x4001070	            0x415c	                                 pop r12	      1361	iommu.c	FUNCTION_52
0x4001072	              0xc3	                                     ret	      1361	iommu.c	FUNCTION_52
0x4001073	          0x4889de	                            mov rsi, rbx	      1356	iommu.c	FUNCTION_52	CALL_5
0x4001076	          0x4889ef	                            mov rdi, rbp	      1356	iommu.c	FUNCTION_52	CALL_5
0x4001079	      0xe832feffff	           call sym.__iommu_detach_group	      1356	iommu.c	FUNCTION_52	CALL_5
0x400107e	            0xebd9	                           jmp 0x4001059	      1356	iommu.c	FUNCTION_52	CALL_5
iommu_group_attr_store	SWITCH,0:functions,0:FOR,0:CALL,3:DO,0:ELSE,0:IF,1:WHILE,0	9
0x4000060	        0x488b4618	            mov rax, qword [rsi + 0x18] 	       148	iommu.c	FUNCTION_5	IF_1
0x4000064	          0x4989d0	                             mov r8, rdx	       143	iommu.c	FUNCTION_5
0x4000067	          0x4885c0	                           test rax, rax	       148	iommu.c	FUNCTION_5	IF_1
0x400006a	            0x740b	                            je 0x4000077	       148	iommu.c	FUNCTION_5	IF_1
0x400006c	          0x4889ca	                            mov rdx, rcx	       149	iommu.c	FUNCTION_5	CALL_3
0x400006f	          0x4c89c6	                             mov rsi, r8	       149	iommu.c	FUNCTION_5	CALL_3
0x4000072	      0xe900000000	                           jmp 0x4000077	       149	iommu.c	FUNCTION_5	CALL_3
0x4000077	    0x48c7c0fbffff	             mov rax, 0xfffffffffffffffb	       151	iommu.c	FUNCTION_5
0x400007e	              0xc3	                                     ret	       151	iommu.c	FUNCTION_5
iommu_fwspec_add_ids	SWITCH,0:functions,0:FOR,1:CALL,1:DO,0:ELSE,0:IF,3:WHILE,0	44
0x4000800	    0x488b87c00200	           mov rax, qword [rdi + 0x2c0] 	      1955	iommu.c	FUNCTION_80
0x4000807	          0x4885c0	                           test rax, rax	      1959	iommu.c	FUNCTION_80	IF_1
0x400080a	            0x746f	                            je 0x400087b	      1959	iommu.c	FUNCTION_80	IF_1
0x400080c	            0x4154	                                push r12	      1954	iommu.c	FUNCTION_80
0x400080e	              0x55	                                push rbp	      1954	iommu.c	FUNCTION_80
0x400080f	            0x89d5	                            mov ebp, edx	      1954	iommu.c	FUNCTION_80
0x4000811	              0x53	                                push rbx	      1954	iommu.c	FUNCTION_80
0x4000812	          0x8b4818	            mov ecx, dword [rax + 0x18] 	      1962	iommu.c	FUNCTION_80
0x4000815	          0x4889f3	                            mov rbx, rsi	      1962	iommu.c	FUNCTION_80
0x4000818	          0x4989fc	                            mov r12, rdi	      1962	iommu.c	FUNCTION_80
0x400081b	          0x8d1411	                    lea edx, [rcx + rdx]	      1962	iommu.c	FUNCTION_80
0x400081e	    0x488d34951c00	                 lea rsi, [rdx*4 + 0x1c]	      1962	iommu.c	FUNCTION_80
0x4000826	          0x4989d1	                             mov r9, rdx	      1962	iommu.c	FUNCTION_80
0x4000829	        0x4883fe20	                           cmp rsi, 0x20	      1963	iommu.c	FUNCTION_80	IF_2
0x400082d	            0x7728	                            ja 0x4000857	      1963	iommu.c	FUNCTION_80	IF_2
0x400082f	            0x85ed	                           test ebp, ebp	      1971	iommu.c	FUNCTION_80	FOR_1
0x4000831	          0x4889de	                            mov rsi, rbx	      1971	iommu.c	FUNCTION_80	FOR_1
0x4000834	            0x7e16	                           jle 0x400084c	      1971	iommu.c	FUNCTION_80	FOR_1
0x4000836	          0x448b06	                    mov r8d, dword [rsi]	      1972	iommu.c	FUNCTION_80	FOR_1
0x4000839	            0x89ca	                            mov edx, ecx	      1972	iommu.c	FUNCTION_80	FOR_1
0x400083b	          0x83c101	                              add ecx, 1	      1972	iommu.c	FUNCTION_80	FOR_1
0x400083e	        0x4883c604	                              add rsi, 4	      1972	iommu.c	FUNCTION_80	FOR_1
0x4000842	          0x4439c9	                            cmp ecx, r9d	      1971	iommu.c	FUNCTION_80	FOR_1
0x4000845	      0x448944901c	     mov dword [rax + rdx*4 + 0x1c], r8d	      1972	iommu.c	FUNCTION_80	FOR_1
0x400084a	            0x75ea	                           jne 0x4000836	      1971	iommu.c	FUNCTION_80	FOR_1
0x400084c	        0x44894818	             mov dword [rax + 0x18], r9d	      1974	iommu.c	FUNCTION_80
0x4000850	            0x31c0	                            xor eax, eax	      1975	iommu.c	FUNCTION_80
0x4000852	              0x5b	                                 pop rbx	      1976	iommu.c	FUNCTION_80
0x4000853	              0x5d	                                 pop rbp	      1976	iommu.c	FUNCTION_80
0x4000854	            0x415c	                                 pop r12	      1976	iommu.c	FUNCTION_80
0x4000856	              0xc3	                                     ret	      1976	iommu.c	FUNCTION_80
0x4000857	      0xbac0004001	                      mov edx, 0x14000c0	      1964	iommu.c	FUNCTION_80	IF_2	CALL_1
0x400085c	          0x4889c7	                            mov rdi, rax	      1964	iommu.c	FUNCTION_80	IF_2	CALL_1
0x400085f	      0xe800000000	                          call 0x4000864	      1964	iommu.c	FUNCTION_80	IF_2	CALL_1
0x4000864	          0x4885c0	                           test rax, rax	      1965	iommu.c	FUNCTION_80	IF_2	IF_3
0x4000867	            0x7418	                            je 0x4000881	      1965	iommu.c	FUNCTION_80	IF_2	IF_3
0x4000869	    0x49898424c002	            mov qword [r12 + 0x2c0], rax	      1968	iommu.c	FUNCTION_80	IF_2
0x4000871	          0x8b4818	            mov ecx, dword [rax + 0x18] 	      1968	iommu.c	FUNCTION_80	IF_2
0x4000874	      0x448d4c0d00	                    lea r9d, [rbp + rcx]	      1968	iommu.c	FUNCTION_80	IF_2
0x4000879	            0xebb4	                           jmp 0x400082f	      1968	iommu.c	FUNCTION_80	IF_2
0x400087b	      0xb8eaffffff	                     mov eax, 0xffffffea	      1960	iommu.c	FUNCTION_80	IF_1
0x4000880	              0xc3	                                     ret	      1976	iommu.c	FUNCTION_80
0x4000881	      0xb8f4ffffff	                     mov eax, 0xfffffff4	      1966	iommu.c	FUNCTION_80	IF_2	IF_3
0x4000886	            0xebca	                           jmp 0x4000852	      1966	iommu.c	FUNCTION_80	IF_2	IF_3
generic_device_group	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	1
0x4001f00	      0xe93bfaffff	               jmp sym.iommu_group_alloc	       920	iommu.c	FUNCTION_34	CALL_1
iommu_domain_window_enable	SWITCH,0:functions,0:FOR,0:CALL,2:DO,0:ELSE,0:IF,1:WHILE,0	7
0x40003f0	        0x488b4708	                mov rax, qword [rdi + 8]	      1685	iommu.c	FUNCTION_67	IF_1	CALL_1
0x40003f4	    0x488b80a00000	            mov rax, qword [rax + 0xa0] 	      1685	iommu.c	FUNCTION_67	IF_1	CALL_1
0x40003fb	          0x4885c0	                           test rax, rax	      1685	iommu.c	FUNCTION_67	IF_1	CALL_1
0x40003fe	            0x7405	                            je 0x4000405	      1685	iommu.c	FUNCTION_67	IF_1	CALL_1
0x4000400	      0xe900000000	                           jmp 0x4000405	      1688	iommu.c	FUNCTION_67	CALL_2
0x4000405	      0xb8edffffff	                     mov eax, 0xffffffed	      1690	iommu.c	FUNCTION_67
0x400040a	              0xc3	                                     ret	      1690	iommu.c	FUNCTION_67
iommu_present	SWITCH,0:functions,0:FOR,0:CALL,0:DO,0:ELSE,0:IF,0:WHILE,0	3
0x40000d0	    0x4883bf900000	               cmp qword [rdi + 0x90], 0	      1215	iommu.c	FUNCTION_43
0x40000d8	           0xf95c0	                                setne al	      1215	iommu.c	FUNCTION_43
0x40000db	              0xc3	                                     ret	      1216	iommu.c	FUNCTION_43
iommu_detach_group	SWITCH,0:functions,0:FOR,0:CALL,3:DO,0:ELSE,0:IF,0:WHILE,0	16
0x4000fe0	            0x4154	                                push r12	      1460	iommu.c	ELSE_1	FUNCTION_59
0x4000fe2	              0x55	                                push rbp	      1460	iommu.c	ELSE_1	FUNCTION_59
0x4000fe3	          0x4989fc	                            mov r12, rdi	      1460	iommu.c	ELSE_1	FUNCTION_59
0x4000fe6	              0x53	                                push rbx	      1460	iommu.c	ELSE_1	FUNCTION_59
0x4000fe7	        0x488d5e58	                   lea rbx, [rsi + 0x58]	      1461	iommu.c	ELSE_1	FUNCTION_59	CALL_1
0x4000feb	          0x4889f5	                            mov rbp, rsi	      1460	iommu.c	ELSE_1	FUNCTION_59
0x4000fee	          0x4889df	                            mov rdi, rbx	      1461	iommu.c	ELSE_1	FUNCTION_59	CALL_1
0x4000ff1	      0xe800000000	                          call 0x4000ff6	      1461	iommu.c	ELSE_1	FUNCTION_59	CALL_1
0x4000ff6	          0x4c89e7	                            mov rdi, r12	      1462	iommu.c	ELSE_1	FUNCTION_59	CALL_2
0x4000ff9	          0x4889ee	                            mov rsi, rbp	      1462	iommu.c	ELSE_1	FUNCTION_59	CALL_2
0x4000ffc	      0xe8affeffff	           call sym.__iommu_detach_group	      1462	iommu.c	ELSE_1	FUNCTION_59	CALL_2
0x4001001	          0x4889df	                            mov rdi, rbx	      1463	iommu.c	ELSE_1	FUNCTION_59	CALL_3
0x4001004	              0x5b	                                 pop rbx	      1464	iommu.c	ELSE_1	FUNCTION_59
0x4001005	              0x5d	                                 pop rbp	      1464	iommu.c	ELSE_1	FUNCTION_59
0x4001006	            0x415c	                                 pop r12	      1464	iommu.c	ELSE_1	FUNCTION_59
0x4001008	      0xe900000000	                           jmp 0x400100d	      1463	iommu.c	ELSE_1	FUNCTION_59	CALL_3
iommu_unmap_fast	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	2
0x4000b60	            0x31c9	                            xor ecx, ecx	      1635	iommu.c	FUNCTION_65	CALL_1
0x4000b62	      0xe929feffff	                   jmp sym.__iommu_unmap	      1635	iommu.c	FUNCTION_65	CALL_1
iommu_attach_device	SWITCH,0:functions,0:FOR,0:CALL,6:DO,0:ELSE,0:IF,2:WHILE,0	42
0x4001750	            0x4155	                                push r13	      1301	iommu.c	FUNCTION_50
0x4001752	            0x4154	                                push r12	      1301	iommu.c	FUNCTION_50
0x4001754	      0xb8edffffff	                     mov eax, 0xffffffed	      1301	iommu.c	FUNCTION_50
0x4001759	              0x55	                                push rbp	      1301	iommu.c	FUNCTION_50
0x400175a	              0x53	                                push rbx	      1301	iommu.c	FUNCTION_50
0x400175b	    0x488b9eb80200	           mov rbx, qword [rsi + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x4001762	          0x4885db	                           test rbx, rbx	       730	iommu.c	FUNCTION_25	IF_1
0x4001765	            0x7454	                            je 0x40017bb	       730	iommu.c	FUNCTION_25	IF_1
0x4001767	          0x4989fc	                            mov r12, rdi	       730	iommu.c	FUNCTION_25	IF_1
0x400176a	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x400176e	        0x4c8d6b58	                   lea r13, [rbx + 0x58]	      1313	iommu.c	FUNCTION_50	CALL_2
0x4001772	      0xbdeaffffff	                     mov ebp, 0xffffffea	      1314	iommu.c	FUNCTION_50
0x4001777	      0xe800000000	                          call 0x400177c	       731	iommu.c	FUNCTION_25	CALL_1
0x400177c	          0x4c89ef	                            mov rdi, r13	      1313	iommu.c	FUNCTION_50	CALL_2
0x400177f	      0xe800000000	                          call 0x4001784	      1313	iommu.c	FUNCTION_50	CALL_2
0x4001784	        0x488b5348	            mov rdx, qword [rbx + 0x48] 	       673	iommu.c	FUNCTION_22	CALL_1
0x4001788	        0x488d7348	                   lea rsi, [rbx + 0x48]	       673	iommu.c	FUNCTION_22	CALL_1
0x400178c	          0x4839d6	                            cmp rsi, rdx	       673	iommu.c	FUNCTION_22	CALL_1
0x400178f	            0x7417	                            je 0x40017a8	       673	iommu.c	FUNCTION_22	CALL_1
0x4001791	            0x31c9	                            xor ecx, ecx	       673	iommu.c	FUNCTION_22	CALL_1
0x4001793	          0x488b12	                    mov rdx, qword [rdx]	       673	iommu.c	FUNCTION_22	CALL_1
0x4001796	          0x83c101	                              add ecx, 1	       674	iommu.c	FUNCTION_22
0x4001799	          0x4839d6	                            cmp rsi, rdx	       673	iommu.c	FUNCTION_22	CALL_1
0x400179c	            0x75f5	                           jne 0x4001793	       673	iommu.c	FUNCTION_22	CALL_1
0x400179e	          0x83f901	                              cmp ecx, 1	      1315	iommu.c	FUNCTION_50	IF_2	CALL_3
0x40017a1	      0xbdeaffffff	                     mov ebp, 0xffffffea	      1314	iommu.c	FUNCTION_50
0x40017a6	            0x741a	                            je 0x40017c2	      1315	iommu.c	FUNCTION_50	IF_2	CALL_3
0x40017a8	          0x4c89ef	                            mov rdi, r13	      1321	iommu.c	FUNCTION_50	CALL_5
0x40017ab	      0xe800000000	                          call 0x40017b0	      1321	iommu.c	FUNCTION_50	CALL_5
0x40017b0	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       760	iommu.c	FUNCTION_27	CALL_1
0x40017b4	      0xe800000000	                          call 0x40017b9	       760	iommu.c	FUNCTION_27	CALL_1
0x40017b9	            0x89e8	                            mov eax, ebp	      1324	iommu.c	FUNCTION_50
0x40017bb	              0x5b	                                 pop rbx	      1325	iommu.c	FUNCTION_50
0x40017bc	              0x5d	                                 pop rbp	      1325	iommu.c	FUNCTION_50
0x40017bd	            0x415c	                                 pop r12	      1325	iommu.c	FUNCTION_50
0x40017bf	            0x415d	                                 pop r13	      1325	iommu.c	FUNCTION_50
0x40017c1	              0xc3	                                     ret	      1325	iommu.c	FUNCTION_50
0x40017c2	          0x4889de	                            mov rsi, rbx	      1318	iommu.c	FUNCTION_50	CALL_4
0x40017c5	          0x4c89e7	                            mov rdi, r12	      1318	iommu.c	FUNCTION_50	CALL_4
0x40017c8	      0xe8d3feffff	           call sym.__iommu_attach_group	      1318	iommu.c	FUNCTION_50	CALL_4
0x40017cd	            0x89c5	                            mov ebp, eax	      1318	iommu.c	FUNCTION_50	CALL_4
0x40017cf	            0xebd7	                           jmp 0x40017a8	      1318	iommu.c	FUNCTION_50	CALL_4
iommu_domain_alloc	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	25
0x4000100	          0x4885ff	                           test rdi, rdi	      1256	iommu.c	FUNCTION_46	IF_1
0x4000103	            0x7448	                            je 0x400014d	      1256	iommu.c	FUNCTION_46	IF_1
0x4000105	    0x488b87900000	            mov rax, qword [rdi + 0x90] 	      1256	iommu.c	FUNCTION_46	IF_1
0x400010c	          0x4885c0	                           test rax, rax	      1256	iommu.c	FUNCTION_46	IF_1
0x400010f	            0x743c	                            je 0x400014d	      1256	iommu.c	FUNCTION_46	IF_1
0x4000111	              0x53	                                push rbx	      1272	iommu.c	FUNCTION_47
0x4000112	          0x4889fb	                            mov rbx, rdi	      1272	iommu.c	FUNCTION_47
0x4000115	        0x488b4008	                mov rax, qword [rax + 8]	      1259	iommu.c	FUNCTION_46	CALL_1
0x4000119	      0xbf01000000	                              mov edi, 1	      1259	iommu.c	FUNCTION_46	CALL_1
0x400011e	      0xe800000000	                          call 0x4000123	      1259	iommu.c	FUNCTION_46	CALL_1
0x4000123	          0x4885c0	                           test rax, rax	      1260	iommu.c	FUNCTION_46	IF_2
0x4000126	            0x7428	                            je 0x4000150	      1260	iommu.c	FUNCTION_46	IF_2
0x4000128	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1263	iommu.c	FUNCTION_46
0x400012f	    0xc70001000000	                      mov dword [rax], 1	      1264	iommu.c	FUNCTION_46
0x4000135	        0x48895008	                mov qword [rax + 8], rdx	      1263	iommu.c	FUNCTION_46
0x4000139	    0x488b93900000	            mov rdx, qword [rbx + 0x90] 	      1266	iommu.c	FUNCTION_46
0x4000140	    0x488b92d00000	            mov rdx, qword [rdx + 0xd0] 	      1266	iommu.c	FUNCTION_46
0x4000147	        0x48895010	             mov qword [rax + 0x10], rdx	      1266	iommu.c	FUNCTION_46
0x400014b	              0x5b	                                 pop rbx	      1274	iommu.c	FUNCTION_47
0x400014c	              0xc3	                                     ret	      1274	iommu.c	FUNCTION_47
0x400014d	            0x31c0	                            xor eax, eax	      1257	iommu.c	FUNCTION_46	IF_1
0x400014f	              0xc3	                                     ret	      1257	iommu.c	FUNCTION_46	IF_1
0x4000150	            0x31c0	                            xor eax, eax	      1261	iommu.c	FUNCTION_46	IF_2
0x4000152	              0x5b	                                 pop rbx	      1274	iommu.c	FUNCTION_47
0x4000153	              0xc3	                                     ret	      1274	iommu.c	FUNCTION_47
iommu_group_set_iommudata	SWITCH,0:functions,0:FOR,0:CALL,0:DO,0:ELSE,0:IF,0:WHILE,0	3
0x4000090	    0x4889b7a80000	             mov qword [rdi + 0xa8], rsi	       444	iommu.c	FUNCTION_17
0x4000097	    0x488997b00000	             mov qword [rdi + 0xb0], rdx	       445	iommu.c	FUNCTION_17
0x400009e	              0xc3	                                     ret	       445	iommu.c	FUNCTION_17
iommu_bus_notifier	SWITCH,1:functions,0:FOR,0:CALL,5:DO,0:ELSE,1:IF,6:WHILE,0	71
0x4000550	            0x4154	                                push r12	      1091	iommu.c	FUNCTION_40
0x4000552	              0x55	                                push rbp	      1091	iommu.c	FUNCTION_40
0x4000553	          0x4889d5	                            mov rbp, rdx	      1091	iommu.c	FUNCTION_40
0x4000556	              0x53	                                push rbx	      1091	iommu.c	FUNCTION_40
0x4000557	        0x4883ec08	                              sub rsp, 8	      1091	iommu.c	FUNCTION_40
0x400055b	    0x488b82800000	            mov rax, qword [rdx + 0x80] 	      1093	iommu.c	FUNCTION_40
0x4000562	        0x4883fe01	                              cmp rsi, 1	      1101	iommu.c	FUNCTION_40	IF_1
0x4000566	    0x488b80900000	            mov rax, qword [rax + 0x90] 	      1093	iommu.c	FUNCTION_40
0x400056d	            0x745a	                            je 0x40005c9	      1101	iommu.c	FUNCTION_40	IF_1
0x400056f	        0x4883fe03	                              cmp rsi, 3	      1108	iommu.c	FUNCTION_40	ELSE_1	IF_3
0x4000573	          0x4889f3	                            mov rbx, rsi	      1108	iommu.c	FUNCTION_40	ELSE_1	IF_3
0x4000576	            0x7473	                            je 0x40005eb	      1108	iommu.c	FUNCTION_40	ELSE_1	IF_3
0x4000578	    0x4c8ba2b80200	           mov r12, qword [rdx + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x400057f	            0x31c0	                            xor eax, eax	      1121	iommu.c	FUNCTION_40	IF_5
0x4000581	          0x4d85e4	                           test r12, r12	       730	iommu.c	FUNCTION_25	IF_1
0x4000584	            0x743a	                            je 0x40005c0	       730	iommu.c	FUNCTION_25	IF_1
0x4000586	      0x498b7c2440	            mov rdi, qword [r12 + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x400058b	        0x4883eb04	                              sub rbx, 4	       731	iommu.c	FUNCTION_25	CALL_1
0x400058f	      0xe800000000	                          call 0x4000594	       731	iommu.c	FUNCTION_25	CALL_1
0x4000594	        0x4883fb03	                              cmp rbx, 3	       731	iommu.c	FUNCTION_25	CALL_1
0x4000598	            0x771a	                            ja 0x40005b4	       731	iommu.c	FUNCTION_25	CALL_1
0x400059a	    0x488b34dd0000	                  mov rsi, qword [rbx*8]	       731	iommu.c	FUNCTION_25	CALL_1
0x40005a2	          0x4885f6	                           test rsi, rsi	      1138	iommu.c	FUNCTION_40	IF_6
0x40005a5	            0x740d	                            je 0x40005b4	      1138	iommu.c	FUNCTION_40	IF_6
0x40005a7	      0x498d7c2478	                   lea rdi, [r12 + 0x78]	      1139	iommu.c	FUNCTION_40	IF_6	CALL_4
0x40005ac	          0x4889ea	                            mov rdx, rbp	      1139	iommu.c	FUNCTION_40	IF_6	CALL_4
0x40005af	      0xe800000000	                          call 0x40005b4	      1139	iommu.c	FUNCTION_40	IF_6	CALL_4
0x40005b4	      0x498b7c2440	            mov rdi, qword [r12 + 0x40] 	       760	iommu.c	FUNCTION_27	CALL_1
0x40005b9	      0xe800000000	                          call 0x40005be	       760	iommu.c	FUNCTION_27	CALL_1
0x40005be	            0x31c0	                            xor eax, eax	      1143	iommu.c	FUNCTION_40
0x40005c0	        0x4883c408	                              add rsp, 8	      1144	iommu.c	FUNCTION_40
0x40005c4	              0x5b	                                 pop rbx	      1144	iommu.c	FUNCTION_40
0x40005c5	              0x5d	                                 pop rbp	      1144	iommu.c	FUNCTION_40
0x40005c6	            0x415c	                                 pop r12	      1144	iommu.c	FUNCTION_40
0x40005c8	              0xc3	                                     ret	      1144	iommu.c	FUNCTION_40
0x40005c9	        0x488b4060	            mov rax, qword [rax + 0x60] 	      1102	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005cd	          0x4885c0	                           test rax, rax	      1102	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005d0	            0x7447	                            je 0x4000619	      1102	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005d2	          0x4889d7	                            mov rdi, rdx	      1105	iommu.c	FUNCTION_40	IF_1	IF_2	CALL_1
0x40005d5	      0xe800000000	                          call 0x40005da	      1105	iommu.c	FUNCTION_40	IF_1	IF_2	CALL_1
0x40005da	            0x85c0	                           test eax, eax	      1106	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005dc	           0xf94c0	                                 sete al	      1106	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005df	        0x4883c408	                              add rsp, 8	      1144	iommu.c	FUNCTION_40
0x40005e3	              0x5b	                                 pop rbx	      1144	iommu.c	FUNCTION_40
0x40005e4	           0xfb6c0	                           movzx eax, al	      1106	iommu.c	FUNCTION_40	IF_1	IF_2
0x40005e7	              0x5d	                                 pop rbp	      1144	iommu.c	FUNCTION_40
0x40005e8	            0x415c	                                 pop r12	      1144	iommu.c	FUNCTION_40
0x40005ea	              0xc3	                                     ret	      1144	iommu.c	FUNCTION_40
0x40005eb	        0x488b5068	            mov rdx, qword [rax + 0x68] 	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x40005ef	          0x4885d2	                           test rdx, rdx	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x40005f2	            0x7425	                            je 0x4000619	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x40005f4	            0x31c0	                            xor eax, eax	      1121	iommu.c	FUNCTION_40	IF_5
0x40005f6	    0x4883bdb80200	              cmp qword [rbp + 0x2b8], 0	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x40005fe	            0x74c0	                            je 0x40005c0	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x4000600	        0x89442404	                mov dword [rsp + 4], eax	      1109	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x4000604	          0x4889ef	                            mov rdi, rbp	      1110	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4	CALL_2
0x4000607	      0xe800000000	                          call 0x400060c	      1110	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4	CALL_2
0x400060c	        0x8b442404	                mov eax, dword [rsp + 4]	      1111	iommu.c	FUNCTION_40	ELSE_1	IF_3	IF_4
0x4000610	        0x4883c408	                              add rsp, 8	      1144	iommu.c	FUNCTION_40
0x4000614	              0x5b	                                 pop rbx	      1144	iommu.c	FUNCTION_40
0x4000615	              0x5d	                                 pop rbp	      1144	iommu.c	FUNCTION_40
0x4000616	            0x415c	                                 pop r12	      1144	iommu.c	FUNCTION_40
0x4000618	              0xc3	                                     ret	      1144	iommu.c	FUNCTION_40
0x4000619	    0x4c8ba5b80200	           mov r12, qword [rbp + 0x2b8] 	       728	iommu.c	FUNCTION_25
0x4000620	          0x4d85e4	                           test r12, r12	       730	iommu.c	FUNCTION_25	IF_1
0x4000623	            0x740c	                            je 0x4000631	       730	iommu.c	FUNCTION_25	IF_1
0x4000625	      0x498b7c2440	            mov rdi, qword [r12 + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x400062a	      0xe800000000	                          call 0x400062f	       731	iommu.c	FUNCTION_25	CALL_1
0x400062f	            0xeb83	                           jmp 0x40005b4	       731	iommu.c	FUNCTION_25	CALL_1
0x4000631	            0x31c0	                            xor eax, eax	      1121	iommu.c	FUNCTION_40	IF_5
0x4000633	            0xeb8b	                           jmp 0x40005c0	      1121	iommu.c	FUNCTION_40	IF_5
iommu_group_ref_get	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	7
0x4001ee0	              0x53	                                push rbx	       745	iommu.c	FUNCTION_26
0x4001ee1	          0x4889fb	                            mov rbx, rdi	       745	iommu.c	FUNCTION_26
0x4001ee4	        0x488b7f40	            mov rdi, qword [rdi + 0x40] 	       746	iommu.c	FUNCTION_26	CALL_1
0x4001ee8	      0xe800000000	                          call 0x4001eed	       746	iommu.c	FUNCTION_26	CALL_1
0x4001eed	          0x4889d8	                            mov rax, rbx	       748	iommu.c	FUNCTION_26
0x4001ef0	              0x5b	                                 pop rbx	       748	iommu.c	FUNCTION_26
0x4001ef1	              0xc3	                                     ret	       748	iommu.c	FUNCTION_26
remove_iommu_group	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,1:WHILE,0	9
0x40000b0	          0x488b06	                    mov rax, qword [rsi]	      1083	iommu.c	FUNCTION_39	IF_1
0x40000b3	        0x488b4068	            mov rax, qword [rax + 0x68] 	      1083	iommu.c	FUNCTION_39	IF_1
0x40000b7	          0x4885c0	                           test rax, rax	      1083	iommu.c	FUNCTION_39	IF_1
0x40000ba	            0x740f	                            je 0x40000cb	      1083	iommu.c	FUNCTION_39	IF_1
0x40000bc	    0x4883bfb80200	              cmp qword [rdi + 0x2b8], 0	      1083	iommu.c	FUNCTION_39	IF_1
0x40000c4	            0x7405	                            je 0x40000cb	      1083	iommu.c	FUNCTION_39	IF_1
0x40000c6	      0xe800000000	                          call 0x40000cb	      1084	iommu.c	FUNCTION_39	CALL_1
0x40000cb	            0x31c0	                            xor eax, eax	      1087	iommu.c	FUNCTION_39
0x40000cd	              0xc3	                                     ret	      1087	iommu.c	FUNCTION_39
iommu_group_for_each_dev	SWITCH,0:functions,0:FOR,0:CALL,3:DO,0:ELSE,0:IF,0:WHILE,0	38
0x4000200	            0x4156	                                push r14	       707	iommu.c	FUNCTION_24
0x4000202	        0x4c8d7758	                   lea r14, [rdi + 0x58]	       710	iommu.c	FUNCTION_24	CALL_1
0x4000206	            0x4155	                                push r13	       707	iommu.c	FUNCTION_24
0x4000208	            0x4154	                                push r12	       707	iommu.c	FUNCTION_24
0x400020a	              0x55	                                push rbp	       707	iommu.c	FUNCTION_24
0x400020b	          0x4889fd	                            mov rbp, rdi	       707	iommu.c	FUNCTION_24
0x400020e	              0x53	                                push rbx	       707	iommu.c	FUNCTION_24
0x400020f	          0x4c89f7	                            mov rdi, r14	       710	iommu.c	FUNCTION_24	CALL_1
0x4000212	          0x4989f5	                            mov r13, rsi	       707	iommu.c	FUNCTION_24
0x4000215	          0x4989d4	                            mov r12, rdx	       707	iommu.c	FUNCTION_24
0x4000218	        0x4883c548	                           add rbp, 0x48	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x400021c	        0x4883ec08	                              sub rsp, 8	       707	iommu.c	FUNCTION_24
0x4000220	      0xe800000000	                          call 0x4000225	       710	iommu.c	FUNCTION_24	CALL_1
0x4000225	        0x488b5d00	                    mov rbx, qword [rbp]	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x4000229	          0x4839eb	                            cmp rbx, rbp	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x400022c	            0x750a	                           jne 0x4000238	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x400022e	            0xeb35	                           jmp 0x4000265	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x4000230	          0x488b1b	                    mov rbx, qword [rbx]	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x4000233	          0x4839eb	                            cmp rbx, rbp	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x4000236	            0x742d	                            je 0x4000265	       696	iommu.c	FUNCTION_23	FUNCTION_1
0x4000238	        0x488b7b10	            mov rdi, qword [rbx + 0x10] 	       697	iommu.c	FUNCTION_23	FUNCTION_1	CALL_1
0x400023c	          0x4c89ee	                            mov rsi, r13	       697	iommu.c	FUNCTION_23	FUNCTION_1	CALL_1
0x400023f	      0xe800000000	                          call 0x4000244	       697	iommu.c	FUNCTION_23	FUNCTION_1	CALL_1
0x4000244	            0x85c0	                           test eax, eax	       698	iommu.c	FUNCTION_23	FUNCTION_1	IF_1
0x4000246	            0x74e8	                            je 0x4000230	       698	iommu.c	FUNCTION_23	FUNCTION_1	IF_1
0x4000248	          0x4c89f7	                            mov rdi, r14	       712	iommu.c	FUNCTION_24	CALL_3
0x400024b	        0x89442404	                mov dword [rsp + 4], eax	       712	iommu.c	FUNCTION_24	CALL_3
0x400024f	      0xe800000000	                          call 0x4000254	       712	iommu.c	FUNCTION_24	CALL_3
0x4000254	        0x8b442404	                mov eax, dword [rsp + 4]	       715	iommu.c	FUNCTION_24
0x4000258	        0x4883c408	                              add rsp, 8	       715	iommu.c	FUNCTION_24
0x400025c	              0x5b	                                 pop rbx	       715	iommu.c	FUNCTION_24
0x400025d	              0x5d	                                 pop rbp	       715	iommu.c	FUNCTION_24
0x400025e	            0x415c	                                 pop r12	       715	iommu.c	FUNCTION_24
0x4000260	            0x415d	                                 pop r13	       715	iommu.c	FUNCTION_24
0x4000262	            0x415e	                                 pop r14	       715	iommu.c	FUNCTION_24
0x4000264	              0xc3	                                     ret	       715	iommu.c	FUNCTION_24
0x4000265	            0x31c0	                            xor eax, eax	       707	iommu.c	FUNCTION_24
0x4000267	            0xebdf	                           jmp 0x4000248	       707	iommu.c	FUNCTION_24
iommu_group_unregister_notifier	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,0:WHILE,0	2
0x40007c0	        0x4883c778	                           add rdi, 0x78	       790	iommu.c	FUNCTION_29	CALL_1
0x40007c4	      0xe900000000	                           jmp 0x40007c9	       790	iommu.c	FUNCTION_29	CALL_1
iommu_group_attr_show	SWITCH,0:functions,0:FOR,0:CALL,3:DO,0:ELSE,0:IF,1:WHILE,0	7
0x4000040	        0x488b4610	            mov rax, qword [rsi + 0x10] 	       135	iommu.c	FUNCTION_4	IF_1
0x4000044	          0x4885c0	                           test rax, rax	       135	iommu.c	FUNCTION_4	IF_1
0x4000047	            0x7408	                            je 0x4000051	       135	iommu.c	FUNCTION_4	IF_1
0x4000049	          0x4889d6	                            mov rsi, rdx	       136	iommu.c	FUNCTION_4	CALL_3
0x400004c	      0xe900000000	                           jmp 0x4000051	       136	iommu.c	FUNCTION_4	CALL_3
0x4000051	    0x48c7c0fbffff	             mov rax, 0xfffffffffffffffb	       138	iommu.c	FUNCTION_4
0x4000058	              0xc3	                                     ret	       138	iommu.c	FUNCTION_4
iommu_capable	SWITCH,0:functions,0:FOR,0:CALL,1:DO,0:ELSE,0:IF,1:WHILE,0	10
0x40000e0	    0x488b87900000	            mov rax, qword [rdi + 0x90] 	      1221	iommu.c	FUNCTION_44	IF_1
0x40000e7	          0x4885c0	                           test rax, rax	      1221	iommu.c	FUNCTION_44	IF_1
0x40000ea	            0x740f	                            je 0x40000fb	      1221	iommu.c	FUNCTION_44	IF_1
0x40000ec	          0x488b00	                    mov rax, qword [rax]	      1221	iommu.c	FUNCTION_44	IF_1
0x40000ef	          0x4885c0	                           test rax, rax	      1221	iommu.c	FUNCTION_44	IF_1
0x40000f2	            0x7407	                            je 0x40000fb	      1221	iommu.c	FUNCTION_44	IF_1
0x40000f4	            0x89f7	                            mov edi, esi	      1224	iommu.c	FUNCTION_44	CALL_1
0x40000f6	      0xe900000000	                           jmp 0x40000fb	      1224	iommu.c	FUNCTION_44	CALL_1
0x40000fb	            0x31c0	                            xor eax, eax	      1225	iommu.c	FUNCTION_44
0x40000fd	              0xc3	                                     ret	      1225	iommu.c	FUNCTION_44
iommu_group_id	SWITCH,0:functions,0:FOR,0:CALL,0:DO,0:ELSE,0:IF,0:WHILE,0	2
0x40000a0	    0x8b87c0000000	            mov eax, dword [rdi + 0xc0] 	       802	iommu.c	FUNCTION_30
0x40000a6	              0xc3	                                     ret	       803	iommu.c	FUNCTION_30
get_pci_function_alias_group	SWITCH,0:functions,1:FOR,0:CALL,1:DO,0:ELSE,0:IF,1:WHILE,0	52
0x4001150	    0xf68739060000	              test byte [rdi + 0x639], 2	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001157	     0xf8491000000	                            je 0x40011ee	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x400115d	              0x55	                                push rbp	       827	iommu.c	FUNCTION_31
0x400115e	              0x53	                                push rbx	       827	iommu.c	FUNCTION_31
0x400115f	          0x4889f5	                            mov rbp, rsi	       827	iommu.c	FUNCTION_31
0x4001162	      0xbe1d000000	                           mov esi, 0x1d	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001167	          0x4889fb	                            mov rbx, rdi	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x400116a	        0x4883ec08	                              sub rsp, 8	       827	iommu.c	FUNCTION_31
0x400116e	      0xe800000000	                          call 0x4001173	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001173	            0x84c0	                             test al, al	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001175	            0x756e	                           jne 0x40011e5	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001177	            0x31d2	                            xor edx, edx	       831	iommu.c	FUNCTION_31	IF_1	CALL_1
0x4001179	      0xbeffffffff	                     mov esi, 0xffffffff	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x400117e	            0x89f7	                            mov edi, esi	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x4001180	      0xe800000000	                          call 0x4001185	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x4001185	          0x4885c0	                           test rax, rax	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x4001188	          0x4889c2	                            mov rdx, rax	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x400118b	            0x7458	                            je 0x40011e5	       834	iommu.c	FUNCTION_31	FUNCTION_1
0x400118d	          0x4839d3	                            cmp rbx, rdx	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x4001190	            0x74e7	                            je 0x4001179	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x4001192	        0x488b4310	            mov rax, qword [rbx + 0x10] 	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x4001196	        0x48394210	            cmp qword [rdx + 0x10], rax 	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x400119a	            0x75dd	                           jne 0x4001179	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x400119c	          0x8b4338	            mov eax, dword [rbx + 0x38] 	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x400119f	          0x334238	             xor eax, dword [rdx + 0x38]	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x40011a2	            0xa8f8	                           test al, 0xf8	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x40011a4	            0x75d3	                           jne 0x4001179	       835	iommu.c	FUNCTION_31	FUNCTION_1	IF_1
0x40011a6	          0x4889d7	                            mov rdi, rdx	       837	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_3
0x40011a9	      0xbe1d000000	                           mov esi, 0x1d	       837	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_3
0x40011ae	        0x48891424	                    mov qword [rsp], rdx	       837	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_3
0x40011b2	      0xe800000000	                          call 0x40011b7	       837	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_3
0x40011b7	            0x84c0	                             test al, al	       836	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_2
0x40011b9	        0x488b1424	                    mov rdx, qword [rsp]	       836	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_2
0x40011bd	            0x75ba	                           jne 0x4001179	       836	iommu.c	FUNCTION_31	FUNCTION_1	IF_1	CALL_2
0x40011bf	          0x4889d7	                            mov rdi, rdx	       840	iommu.c	FUNCTION_31	FUNCTION_1	CALL_4
0x40011c2	          0x4889ee	                            mov rsi, rbp	       840	iommu.c	FUNCTION_31	FUNCTION_1	CALL_4
0x40011c5	      0xe8b6feffff	            call sym.get_pci_alias_group	       840	iommu.c	FUNCTION_31	FUNCTION_1	CALL_4
0x40011ca	          0x4885c0	                           test rax, rax	       841	iommu.c	FUNCTION_31	FUNCTION_1	IF_2
0x40011cd	        0x488b1424	                    mov rdx, qword [rsp]	       841	iommu.c	FUNCTION_31	FUNCTION_1	IF_2
0x40011d1	            0x74a6	                            je 0x4001179	       841	iommu.c	FUNCTION_31	FUNCTION_1	IF_2
0x40011d3	          0x4889d7	                            mov rdi, rdx	       842	iommu.c	FUNCTION_31	FUNCTION_1	IF_2	CALL_5
0x40011d6	        0x48890424	                    mov qword [rsp], rax	       842	iommu.c	FUNCTION_31	FUNCTION_1	IF_2	CALL_5
0x40011da	      0xe800000000	                          call 0x40011df	       842	iommu.c	FUNCTION_31	FUNCTION_1	IF_2	CALL_5
0x40011df	        0x488b0424	                    mov rax, qword [rsp]	       840	iommu.c	FUNCTION_31	FUNCTION_1	CALL_4
0x40011e3	            0xeb02	                           jmp 0x40011e7	       843	iommu.c	FUNCTION_31	FUNCTION_1	IF_2
0x40011e5	            0x31c0	                            xor eax, eax	       832	iommu.c	FUNCTION_31	IF_1
0x40011e7	        0x4883c408	                              add rsp, 8	       848	iommu.c	FUNCTION_31
0x40011eb	              0x5b	                                 pop rbx	       848	iommu.c	FUNCTION_31
0x40011ec	              0x5d	                                 pop rbp	       848	iommu.c	FUNCTION_31
0x40011ed	              0xc3	                                     ret	       848	iommu.c	FUNCTION_31
0x40011ee	            0x31c0	                            xor eax, eax	       832	iommu.c	FUNCTION_31	IF_1
0x40011f0	              0xc3	                                     ret	       848	iommu.c	FUNCTION_31
add_iommu_group	SWITCH,0:functions,0:FOR,0:CALL,2:DO,0:ELSE,0:IF,2:WHILE,0	14
0x40003a0	          0x488b06	                    mov rax, qword [rsi]	      1060	iommu.c	FUNCTION_38	IF_1
0x40003a3	        0x488b4060	            mov rax, qword [rax + 0x60] 	      1060	iommu.c	FUNCTION_38	IF_1
0x40003a7	          0x4885c0	                           test rax, rax	      1060	iommu.c	FUNCTION_38	IF_1
0x40003aa	            0x7416	                            je 0x40003c2	      1060	iommu.c	FUNCTION_38	IF_1
0x40003ac	    0x4883bfb80200	              cmp qword [rdi + 0x2b8], 0	      1063	iommu.c	FUNCTION_38	CALL_1
0x40003b4	            0x750f	                           jne 0x40003c5	      1063	iommu.c	FUNCTION_38	CALL_1
0x40003b6	      0xe800000000	                          call 0x40003bb	      1065	iommu.c	FUNCTION_38	CALL_2
0x40003bb	          0x83f8ed	             cmp eax, 0xffffffffffffffed	      1072	iommu.c	FUNCTION_38	IF_2
0x40003be	            0x7402	                            je 0x40003c2	      1072	iommu.c	FUNCTION_38	IF_2
0x40003c0	            0xf3c3	                                     ret	      1076	iommu.c	FUNCTION_38
0x40003c2	            0x31c0	                            xor eax, eax	      1061	iommu.c	FUNCTION_38	IF_1
0x40003c4	              0xc3	                                     ret	      1061	iommu.c	FUNCTION_38	IF_1
0x40003c5	             0xf0b	                                     ud2	      1061	iommu.c	FUNCTION_38	IF_1
0x40003c7	            0xebed	                           jmp 0x40003b6	      1063	iommu.c	FUNCTION_38	CALL_1
pci_device_group	SWITCH,0:functions,0:FOR,1:CALL,11:DO,0:ELSE,0:IF,7:WHILE,0	67
0x4001f10	            0x4154	                                push r12	       928	iommu.c	FUNCTION_35
0x4001f12	              0x55	                                push rbp	       928	iommu.c	FUNCTION_35
0x4001f13	              0x53	                                push rbx	       928	iommu.c	FUNCTION_35
0x4001f14	        0x4883ec38	                           sub rsp, 0x38	       928	iommu.c	FUNCTION_35
0x4001f18	    0x65488b0c2528	                mov rcx, qword gs:[0x28]	       928	iommu.c	FUNCTION_35
0x4001f21	      0x48894c2430	             mov qword [rsp + 0x30], rcx	       928	iommu.c	FUNCTION_35
0x4001f26	            0x31c9	                            xor ecx, ecx	       928	iommu.c	FUNCTION_35
0x4001f28	    0x4881bf800000	               cmp qword [rdi + 0x80], 0	       935	iommu.c	FUNCTION_35	IF_1	CALL_3
0x4001f33	    0x48c744241000	               mov qword [rsp + 0x10], 0	       933	iommu.c	FUNCTION_35
0x4001f3c	    0x48c744241800	               mov qword [rsp + 0x18], 0	       933	iommu.c	FUNCTION_35
0x4001f45	    0x48c744242000	               mov qword [rsp + 0x20], 0	       933	iommu.c	FUNCTION_35
0x4001f4e	    0x48c744242800	               mov qword [rsp + 0x28], 0	       933	iommu.c	FUNCTION_35
0x4001f57	     0xf85ba000000	                           jne 0x4002017	       935	iommu.c	FUNCTION_35	IF_1	CALL_3
0x4001f5d	    0x4881efa00000	                           sub rdi, 0xa0	       935	iommu.c	FUNCTION_35	IF_1	CALL_3
0x4001f64	          0x4889e2	                            mov rdx, rsp	       944	iommu.c	FUNCTION_35	IF_2	CALL_5
0x4001f67	    0x48c7c6000000	                              mov rsi, 0	       944	iommu.c	FUNCTION_35	IF_2	CALL_5
0x4001f6e	      0xe800000000	                          call 0x4001f73	       944	iommu.c	FUNCTION_35	IF_2	CALL_5
0x4001f73	            0x85c0	                           test eax, eax	       944	iommu.c	FUNCTION_35	IF_2	CALL_5
0x4001f75	     0xf8595000000	                           jne 0x4002010	       944	iommu.c	FUNCTION_35	IF_2	CALL_5
0x4001f7b	        0x4c8b2424	                    mov r12, qword [rsp]	       947	iommu.c	FUNCTION_35
0x4001f7f	      0x498b5c2410	            mov rbx, qword [r12 + 0x10] 	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001f84	      0x48837b1000	               cmp qword [rbx + 0x10], 0	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001f89	            0x745a	                            je 0x4001fe5	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001f8b	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       956	iommu.c	FUNCTION_35	FOR_1	IF_3
0x4001f8f	          0x4885ff	                           test rdi, rdi	       956	iommu.c	FUNCTION_35	FOR_1	IF_3
0x4001f92	            0x7446	                            je 0x4001fda	       956	iommu.c	FUNCTION_35	FOR_1	IF_3
0x4001f94	            0x31f6	                            xor esi, esi	       959	iommu.c	FUNCTION_35	FOR_1	IF_4	CALL_7
0x4001f96	      0xba1d000000	                           mov edx, 0x1d	       959	iommu.c	FUNCTION_35	FOR_1	IF_4	CALL_7
0x4001f9b	      0xe800000000	                          call 0x4001fa0	       959	iommu.c	FUNCTION_35	FOR_1	IF_4	CALL_7
0x4001fa0	            0x84c0	                             test al, al	       959	iommu.c	FUNCTION_35	FOR_1	IF_4	CALL_7
0x4001fa2	            0x7541	                           jne 0x4001fe5	       959	iommu.c	FUNCTION_35	FOR_1	IF_4	CALL_7
0x4001fa4	        0x4c8b6338	            mov r12, qword [rbx + 0x38] 	       962	iommu.c	FUNCTION_35	FOR_1
0x4001fa8	    0x498bac245803	           mov rbp, qword [r12 + 0x358] 	       728	iommu.c	FUNCTION_25
0x4001fb0	          0x4885ed	                           test rbp, rbp	       730	iommu.c	FUNCTION_25	IF_1
0x4001fb3	            0x7425	                            je 0x4001fda	       730	iommu.c	FUNCTION_25	IF_1
0x4001fb5	        0x488b7d40	            mov rdi, qword [rbp + 0x40] 	       731	iommu.c	FUNCTION_25	CALL_1
0x4001fb9	      0xe800000000	                          call 0x4001fbe	       731	iommu.c	FUNCTION_25	CALL_1
0x4001fbe	          0x4889e8	                            mov rax, rbp	       728	iommu.c	FUNCTION_25
0x4001fc1	      0x488b4c2430	            mov rcx, qword [rsp + 0x30] 	       988	iommu.c	FUNCTION_35
0x4001fc6	    0x6548330c2528	                xor rcx, qword gs:[0x28]	       988	iommu.c	FUNCTION_35
0x4001fcf	            0x7551	                           jne 0x4002022	       988	iommu.c	FUNCTION_35
0x4001fd1	        0x4883c438	                           add rsp, 0x38	       988	iommu.c	FUNCTION_35
0x4001fd5	              0x5b	                                 pop rbx	       988	iommu.c	FUNCTION_35
0x4001fd6	              0x5d	                                 pop rbp	       988	iommu.c	FUNCTION_35
0x4001fd7	            0x415c	                                 pop r12	       988	iommu.c	FUNCTION_35
0x4001fd9	              0xc3	                                     ret	       988	iommu.c	FUNCTION_35
0x4001fda	        0x488b5b10	            mov rbx, qword [rbx + 0x10] 	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001fde	      0x48837b1000	               cmp qword [rbx + 0x10], 0	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001fe3	            0x75a6	                           jne 0x4001f8b	       955	iommu.c	FUNCTION_35	FOR_1	CALL_6
0x4001fe5	      0x488d742410	                   lea rsi, [rsp + 0x10]	       973	iommu.c	FUNCTION_35	CALL_9
0x4001fea	          0x4c89e7	                            mov rdi, r12	       973	iommu.c	FUNCTION_35	CALL_9
0x4001fed	      0xe88ef0ffff	            call sym.get_pci_alias_group	       973	iommu.c	FUNCTION_35	CALL_9
0x4001ff2	          0x4885c0	                           test rax, rax	       974	iommu.c	FUNCTION_35	IF_6
0x4001ff5	            0x75ca	                           jne 0x4001fc1	       974	iommu.c	FUNCTION_35	IF_6
0x4001ff7	      0x488d742410	                   lea rsi, [rsp + 0x10]	       982	iommu.c	FUNCTION_35	CALL_10
0x4001ffc	          0x4c89e7	                            mov rdi, r12	       982	iommu.c	FUNCTION_35	CALL_10
0x4001fff	      0xe84cf1ffff	   call sym.get_pci_function_alias_group	       982	iommu.c	FUNCTION_35	CALL_10
0x4002004	          0x4885c0	                           test rax, rax	       983	iommu.c	FUNCTION_35	IF_7
0x4002007	            0x75b8	                           jne 0x4001fc1	       983	iommu.c	FUNCTION_35	IF_7
0x4002009	      0xe800000000	                          call 0x400200e	       987	iommu.c	FUNCTION_35	CALL_11
0x400200e	            0xebb1	                           jmp 0x4001fc1	       987	iommu.c	FUNCTION_35	CALL_11
0x4002010	      0x488b442408	                mov rax, qword [rsp + 8]	       945	iommu.c	FUNCTION_35	IF_2
0x4002015	            0xebaa	                           jmp 0x4001fc1	       945	iommu.c	FUNCTION_35	IF_2
0x4002017	             0xf0b	                                     ud2	       945	iommu.c	FUNCTION_35	IF_2
0x4002019	    0x48c7c0eaffff	             mov rax, 0xffffffffffffffea	       936	iommu.c	FUNCTION_35	CALL_4
0x4002020	            0xeb9f	                           jmp 0x4001fc1	       936	iommu.c	FUNCTION_35	CALL_4
0x4002022	      0xe800000000	                          call 0x4002027	       988	iommu.c	FUNCTION_35
iommu_group_get_iommudata	SWITCH,0:functions,0:FOR,0:CALL,0:DO,0:ELSE,0:IF,0:WHILE,0	2
0x4000080	    0x488b87a80000	            mov rax, qword [rdi + 0xa8] 	       427	iommu.c	FUNCTION_16
0x4000087	              0xc3	                                     ret	       428	iommu.c	FUNCTION_16
