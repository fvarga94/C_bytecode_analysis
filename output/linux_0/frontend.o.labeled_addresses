agp_remove_client	DO,0:ELSE,1:CALL,4:SWITCH,0:FOR,0:WHILE,0:IF,5:functions,0	50
0x4000800	    0x488b15000000	            mov rdx, qword [0x04000807] 	       477	frontend.c	FUNCTION_23
0x4000807	      0xb8eaffffff	                     mov eax, 0xffffffea	       535	frontend.c	FUNCTION_27	IF_1
0x400080c	          0x4885d2	                           test rdx, rdx	       479	frontend.c	FUNCTION_23	WHILE_1
0x400080f	            0x742f	                            je 0x4000840	       479	frontend.c	FUNCTION_23	WHILE_1
0x4000811	              0x53	                                push rbx	       527	frontend.c	FUNCTION_27
0x4000812	        0x488b5a20	            mov rbx, qword [rdx + 0x20] 	       462	frontend.c	FUNCTION_22
0x4000816	          0x4885db	                           test rbx, rbx	       464	frontend.c	FUNCTION_22	WHILE_1
0x4000819	            0x7417	                            je 0x4000832	       464	frontend.c	FUNCTION_22	WHILE_1
0x400081b	          0x3b7b10	            cmp edi, dword [rbx + 0x10] 	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x400081e	            0x7431	                            je 0x4000851	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000820	          0x4889d8	                            mov rax, rbx	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000823	            0xeb05	                           jmp 0x400082a	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000825	          0x3b7810	            cmp edi, dword [rax + 0x10] 	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000828	            0x741d	                            je 0x4000847	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x400082a	          0x488b00	                    mov rax, qword [rax]	       467	frontend.c	FUNCTION_22	WHILE_1
0x400082d	          0x4885c0	                           test rax, rax	       464	frontend.c	FUNCTION_22	WHILE_1
0x4000830	            0x75f3	                           jne 0x4000825	       464	frontend.c	FUNCTION_22	WHILE_1
0x4000832	          0x488b12	                    mov rdx, qword [rdx]	       482	frontend.c	FUNCTION_23	WHILE_1
0x4000835	          0x4885d2	                           test rdx, rdx	       479	frontend.c	FUNCTION_23	WHILE_1
0x4000838	            0x75d8	                           jne 0x4000812	       479	frontend.c	FUNCTION_23	WHILE_1
0x400083a	              0x5b	                                 pop rbx	       559	frontend.c	FUNCTION_27
0x400083b	      0xb8eaffffff	                     mov eax, 0xffffffea	       535	frontend.c	FUNCTION_27	IF_1
0x4000840	            0xf3c3	                                     ret	       559	frontend.c	FUNCTION_27
0x4000842	          0x3b7b10	            cmp edi, dword [rbx + 0x10] 	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000845	            0x740a	                            je 0x4000851	       465	frontend.c	FUNCTION_22	WHILE_1	IF_2
0x4000847	          0x488b1b	                    mov rbx, qword [rbx]	       467	frontend.c	FUNCTION_22	WHILE_1
0x400084a	          0x4885db	                           test rbx, rbx	       464	frontend.c	FUNCTION_22	WHILE_1
0x400084d	            0x75f3	                           jne 0x4000842	       464	frontend.c	FUNCTION_22	WHILE_1
0x400084f	            0xebe9	                           jmp 0x400083a	       464	frontend.c	FUNCTION_22	WHILE_1
0x4000851	        0x488b4b08	                mov rcx, qword [rbx + 8]	       541	frontend.c	FUNCTION_27
0x4000855	          0x488b03	                    mov rax, qword [rbx]	       542	frontend.c	FUNCTION_27
0x4000858	          0x4885c9	                           test rcx, rcx	       544	frontend.c	FUNCTION_27	IF_3
0x400085b	            0x7426	                            je 0x4000883	       544	frontend.c	FUNCTION_27	IF_3
0x400085d	          0x4885c0	                           test rax, rax	       546	frontend.c	FUNCTION_27	IF_3	IF_4
0x4000860	          0x488901	                    mov qword [rcx], rax	       545	frontend.c	FUNCTION_27	IF_3
0x4000863	            0x7404	                            je 0x4000869	       546	frontend.c	FUNCTION_27	IF_3	IF_4
0x4000865	        0x48894808	                mov qword [rax + 8], rcx	       547	frontend.c	FUNCTION_27	IF_3	IF_4
0x4000869	        0x836a1401	               sub dword [rdx + 0x14], 1	       555	frontend.c	FUNCTION_27
0x400086d	        0x488d7b18	                   lea rdi, [rbx + 0x18]	       555	frontend.c	FUNCTION_27
0x4000871	      0xe8aafaffff	call sym.agp_remove_seg_from_client.isra.5	       556	frontend.c	FUNCTION_27	CALL_3
0x4000876	          0x4889df	                            mov rdi, rbx	       557	frontend.c	FUNCTION_27	CALL_4
0x4000879	      0xe800000000	                          call 0x400087e	       557	frontend.c	FUNCTION_27	CALL_4
0x400087e	            0x31c0	                            xor eax, eax	       558	frontend.c	FUNCTION_27
0x4000880	              0x5b	                                 pop rbx	       559	frontend.c	FUNCTION_27
0x4000881	            0xebbd	                           jmp 0x4000840	       559	frontend.c	FUNCTION_27
0x4000883	          0x4885c0	                           test rax, rax	       550	frontend.c	FUNCTION_27	ELSE_1	IF_5
0x4000886	            0x7408	                            je 0x4000890	       550	frontend.c	FUNCTION_27	ELSE_1	IF_5
0x4000888	    0x48c740080000	                  mov qword [rax + 8], 0	       551	frontend.c	FUNCTION_27	ELSE_1	IF_5
0x4000890	        0x48894220	             mov qword [rdx + 0x20], rax	       552	frontend.c	FUNCTION_27	ELSE_1
0x4000894	            0xebd3	                           jmp 0x4000869	       552	frontend.c	FUNCTION_27	ELSE_1
agp_frontend_initialize	DO,0:ELSE,0:CALL,4:SWITCH,0:FOR,0:WHILE,0:IF,1:functions,0	19
0x40010f0	    0x49c7c0000000	                               mov r8, 0	      1055	frontend.c	FUNCTION_42	CALL_1
0x40010f7	            0x31c0	                            xor eax, eax	      1055	frontend.c	FUNCTION_42	CALL_1
0x40010f9	      0xb908000000	                              mov ecx, 8	      1055	frontend.c	FUNCTION_42	CALL_1
0x40010fe	          0x4c89c7	                             mov rdi, r8	      1055	frontend.c	FUNCTION_42	CALL_1
0x4001101	    0x48c7c2000000	                              mov rdx, 0	      1056	frontend.c	FUNCTION_42	CALL_2
0x4001108	    0x48c7c6000000	                              mov rsi, 0	      1056	frontend.c	FUNCTION_42	CALL_2
0x400110f	          0xf348ab	              rep stosq qword [rdi], rax	      1055	frontend.c	FUNCTION_42	CALL_1
0x4001112	          0x4c89c7	                             mov rdi, r8	      1056	frontend.c	FUNCTION_42	CALL_2
0x4001115	      0xe800000000	                          call 0x400111a	      1056	frontend.c	FUNCTION_42	CALL_2
0x400111a	    0x48c7c7000000	                              mov rdi, 0	      1058	frontend.c	FUNCTION_42	IF_1	CALL_3
0x4001121	      0xe800000000	                          call 0x4001126	      1058	frontend.c	FUNCTION_42	IF_1	CALL_3
0x4001126	            0x85c0	                           test eax, eax	      1058	frontend.c	FUNCTION_42	IF_1	CALL_3
0x4001128	            0x7502	                           jne 0x400112c	      1058	frontend.c	FUNCTION_42	IF_1	CALL_3
0x400112a	            0xf3c3	                                     ret	      1063	frontend.c	FUNCTION_42
0x400112c	      0xbeaf000000	                           mov esi, 0xaf	      1059	frontend.c	FUNCTION_42	IF_1	CALL_4
0x4001131	    0x48c7c7000000	                              mov rdi, 0	      1059	frontend.c	FUNCTION_42	IF_1	CALL_4
0x4001138	      0xe800000000	                          call 0x400113d	      1059	frontend.c	FUNCTION_42	IF_1	CALL_4
0x400113d	      0xb8fbffffff	                     mov eax, 0xfffffffb	      1060	frontend.c	FUNCTION_42	IF_1
0x4001142	              0xc3	                                     ret	      1063	frontend.c	FUNCTION_42
agp_remove_from_pool	DO,0:ELSE,1:CALL,2:SWITCH,0:FOR,0:WHILE,0:IF,4:functions,0	32
0x4000040	    0x488b0d000000	            mov rcx, qword [0x04000047] 	        51	frontend.c	FUNCTION_1	IF_1
0x4000047	          0x4885c9	                           test rcx, rcx	        51	frontend.c	FUNCTION_1	IF_1
0x400004a	            0x7422	                            je 0x400006e	        51	frontend.c	FUNCTION_1	IF_1
0x400004c	        0x488b4118	            mov rax, qword [rcx + 0x18] 	        54	frontend.c	FUNCTION_1
0x4000050	          0x4885c0	                           test rax, rax	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000053	            0x7419	                            je 0x400006e	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000055	          0x8b5728	            mov edx, dword [rdi + 0x28] 	        74	frontend.c	FUNCTION_2	IF_1	CALL_2
0x4000058	          0x3b5028	            cmp edx, dword [rax + 0x28] 	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x400005b	            0x7507	                           jne 0x4000064	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x400005d	            0xeb11	                           jmp 0x4000070	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x400005f	          0x3b5028	            cmp edx, dword [rax + 0x28] 	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x4000062	            0x740c	                            je 0x4000070	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x4000064	          0x488b00	                    mov rax, qword [rax]	        59	frontend.c	FUNCTION_1	WHILE_1
0x4000067	          0x4885c0	                           test rax, rax	        56	frontend.c	FUNCTION_1	WHILE_1
0x400006a	            0x75f3	                           jne 0x400005f	        56	frontend.c	FUNCTION_1	WHILE_1
0x400006c	            0xf3c3	                                     ret	        56	frontend.c	FUNCTION_1	WHILE_1
0x400006e	            0xf3c3	                                     ret	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000070	        0x488b5708	                mov rdx, qword [rdi + 8]	        76	frontend.c	FUNCTION_2	IF_1
0x4000074	          0x488b07	                    mov rax, qword [rdi]	        75	frontend.c	FUNCTION_2	IF_1
0x4000077	          0x4885d2	                           test rdx, rdx	        78	frontend.c	FUNCTION_2	IF_1	IF_2
0x400007a	            0x740d	                            je 0x4000089	        78	frontend.c	FUNCTION_2	IF_1	IF_2
0x400007c	          0x4885c0	                           test rax, rax	        80	frontend.c	FUNCTION_2	IF_1	IF_2	IF_3
0x400007f	          0x488902	                    mov qword [rdx], rax	        79	frontend.c	FUNCTION_2	IF_1	IF_2
0x4000082	            0x74ea	                            je 0x400006e	        80	frontend.c	FUNCTION_2	IF_1	IF_2	IF_3
0x4000084	        0x48895008	                mov qword [rax + 8], rdx	        81	frontend.c	FUNCTION_2	IF_1	IF_2	IF_3
0x4000088	              0xc3	                                     ret	        81	frontend.c	FUNCTION_2	IF_1	IF_2	IF_3
0x4000089	          0x4885c0	                           test rax, rax	        85	frontend.c	FUNCTION_2	IF_1	ELSE_1	IF_4
0x400008c	            0x740f	                            je 0x400009d	        85	frontend.c	FUNCTION_2	IF_1	ELSE_1	IF_4
0x400008e	    0x48c740080000	                  mov qword [rax + 8], 0	        86	frontend.c	FUNCTION_2	IF_1	ELSE_1	IF_4
0x4000096	    0x488b0d000000	            mov rcx, qword [0x0400009d] 	        86	frontend.c	FUNCTION_2	IF_1	ELSE_1	IF_4
0x400009d	        0x48894118	             mov qword [rcx + 0x18], rax	        88	frontend.c	FUNCTION_2	IF_1	ELSE_1
0x40000a1	              0xc3	                                     ret	        91	frontend.c	FUNCTION_2
agpioc_deallocate_wrap	DO,0:ELSE,0:CALL,3:SWITCH,0:FOR,0:WHILE,0:IF,1:functions,0	21
0x4000be0	    0x488b15000000	            mov rdx, qword [0x04000be7] 	        51	frontend.c	FUNCTION_1	IF_1
0x4000be7	      0xb8eaffffff	                     mov eax, 0xffffffea	       909	frontend.c	FUNCTION_38	IF_1
0x4000bec	          0x4885d2	                           test rdx, rdx	        51	frontend.c	FUNCTION_1	IF_1
0x4000bef	            0x742b	                            je 0x4000c1c	        51	frontend.c	FUNCTION_1	IF_1
0x4000bf1	        0x4c8b4218	              mov r8, qword [rdx + 0x18]	        54	frontend.c	FUNCTION_1
0x4000bf5	          0x4d85c0	                             test r8, r8	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000bf8	            0x750a	                           jne 0x4000c04	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000bfa	            0xeb20	                           jmp 0x4000c1c	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000bfc	          0x4d8b00	                      mov r8, qword [r8]	        59	frontend.c	FUNCTION_1	WHILE_1
0x4000bff	          0x4d85c0	                             test r8, r8	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000c02	            0x741a	                            je 0x4000c1e	        56	frontend.c	FUNCTION_1	WHILE_1
0x4000c04	        0x413b7028	              cmp esi, dword [r8 + 0x28]	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x4000c08	            0x75f2	                           jne 0x4000bfc	        57	frontend.c	FUNCTION_1	WHILE_1	IF_2
0x4000c0a	          0x4c89c7	                             mov rdi, r8	       272	frontend.c	FUNCTION_12	CALL_1
0x4000c0d	      0xe82ef4ffff	           call sym.agp_remove_from_pool	       272	frontend.c	FUNCTION_12	CALL_1
0x4000c12	          0x4c89c7	                             mov rdi, r8	       273	frontend.c	FUNCTION_12	CALL_2
0x4000c15	      0xe800000000	                          call 0x4000c1a	       273	frontend.c	FUNCTION_12	CALL_2
0x4000c1a	            0x31c0	                            xor eax, eax	       912	frontend.c	FUNCTION_38
0x4000c1c	            0xf3c3	                                     ret	       913	frontend.c	FUNCTION_38
0x4000c1e	      0xb8eaffffff	                     mov eax, 0xffffffea	       909	frontend.c	FUNCTION_38	IF_1
0x4000c23	              0xc3	                                     ret	       909	frontend.c	FUNCTION_38	IF_1
agp_allocate_memory_wrap	DO,0:ELSE,0:CALL,2:SWITCH,0:FOR,0:WHILE,0:IF,1:functions,0	17
0x4000720	            0x89f2	                            mov edx, esi	       277	frontend.c	FUNCTION_13
0x4000722	          0x4889fe	                            mov rsi, rdi	       280	frontend.c	FUNCTION_13	CALL_1
0x4000725	    0x488b3d000000	            mov rdi, qword [0x0400072c] 	       280	frontend.c	FUNCTION_13	CALL_1
0x400072c	      0xe800000000	                          call 0x4000731	       280	frontend.c	FUNCTION_13	CALL_1
0x4000731	          0x4885c0	                           test rax, rax	       281	frontend.c	FUNCTION_13	IF_1
0x4000734	            0x7423	                            je 0x4000759	       281	frontend.c	FUNCTION_13	IF_1
0x4000736	    0x488b15000000	            mov rdx, qword [0x0400073d] 	       203	frontend.c	FUNCTION_8
0x400073d	        0x488b4a18	            mov rcx, qword [rdx + 0x18] 	       203	frontend.c	FUNCTION_8
0x4000741	          0x4885c9	                           test rcx, rcx	       205	frontend.c	FUNCTION_8	IF_1
0x4000744	            0x740e	                            je 0x4000754	       205	frontend.c	FUNCTION_8	IF_1
0x4000746	        0x48894108	                mov qword [rcx + 8], rax	       206	frontend.c	FUNCTION_8	IF_1
0x400074a	          0x488908	                    mov qword [rax], rcx	       207	frontend.c	FUNCTION_8	IF_1
0x400074d	    0x488b15000000	            mov rdx, qword [0x04000754] 	       207	frontend.c	FUNCTION_8	IF_1
0x4000754	        0x48894218	             mov qword [rdx + 0x18], rax	       209	frontend.c	FUNCTION_8
0x4000758	              0xc3	                                     ret	       285	frontend.c	FUNCTION_13
0x4000759	            0x31c0	                            xor eax, eax	       282	frontend.c	FUNCTION_13	IF_1
0x400075b	              0xc3	                                     ret	       286	frontend.c	FUNCTION_13
agp_frontend_cleanup	DO,0:ELSE,0:CALL,1:SWITCH,0:FOR,0:WHILE,0:IF,0:functions,0	2
0x4001150	    0x48c7c7000000	                              mov rdi, 0	      1067	frontend.c	FUNCTION_43	CALL_1
0x4001157	      0xe900000000	                   jmp section_end..text	      1067	frontend.c	FUNCTION_43	CALL_1
