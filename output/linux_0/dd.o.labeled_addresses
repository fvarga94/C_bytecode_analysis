driver_sysfs_remove	functions,0:DO,0:CALL,4:IF,2:ELSE,0:SWITCH,0:FOR,0:WHILE,0	21
0x40002d0	              0x55	                                push rbp	       333	dd.c	FUNCTION_13
0x40002d1	              0x53	                                push rbx	       333	dd.c	FUNCTION_13
0x40002d2	    0x488baf880000	            mov rbp, qword [rdi + 0x88] 	       334	dd.c	FUNCTION_13
0x40002d9	          0x4885ed	                           test rbp, rbp	       336	dd.c	FUNCTION_13	IF_1
0x40002dc	            0x7435	                            je 0x4000313	       336	dd.c	FUNCTION_13	IF_1
0x40002de	      0x48837d7000	               cmp qword [rbp + 0x70], 0	       337	dd.c	FUNCTION_13	IF_1	IF_2
0x40002e3	          0x4889fb	                            mov rbx, rdi	       337	dd.c	FUNCTION_13	IF_1	IF_2
0x40002e6	            0x740c	                            je 0x40002f4	       337	dd.c	FUNCTION_13	IF_1	IF_2
0x40002e8	    0x48c7c6000000	                              mov rsi, 0	       338	dd.c	FUNCTION_13	IF_1	CALL_1
0x40002ef	      0xe800000000	                          call 0x40002f4	       338	dd.c	FUNCTION_13	IF_1	CALL_1
0x40002f4	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       339	dd.c	FUNCTION_13	IF_1	CALL_3
0x40002f8	        0x488b7d78	            mov rdi, qword [rbp + 0x78] 	       339	dd.c	FUNCTION_13	IF_1	CALL_3
0x40002fc	      0xe800000000	                          call 0x4000301	       339	dd.c	FUNCTION_13	IF_1	CALL_3
0x4000301	        0x488d7b10	                   lea rdi, [rbx + 0x10]	       340	dd.c	FUNCTION_13	IF_1	CALL_4
0x4000305	    0x48c7c6000000	                              mov rsi, 0	       340	dd.c	FUNCTION_13	IF_1	CALL_4
0x400030c	              0x5b	                                 pop rbx	       342	dd.c	FUNCTION_13
0x400030d	              0x5d	                                 pop rbp	       342	dd.c	FUNCTION_13
0x400030e	      0xe900000000	                           jmp 0x4000313	       340	dd.c	FUNCTION_13	IF_1	CALL_4
0x4000313	              0x5b	                                 pop rbx	       342	dd.c	FUNCTION_13
0x4000314	              0x5d	                                 pop rbp	       342	dd.c	FUNCTION_13
0x4000315	              0xc3	                                     ret	       342	dd.c	FUNCTION_13
driver_sysfs_add	functions,0:DO,0:CALL,9:IF,4:ELSE,0:SWITCH,0:FOR,0:WHILE,0	44
0x40001a0	            0x4154	                                push r12	       301	dd.c	FUNCTION_12
0x40001a2	              0x55	                                push rbp	       301	dd.c	FUNCTION_12
0x40001a3	              0x53	                                push rbx	       301	dd.c	FUNCTION_12
0x40001a4	    0x488b87800000	            mov rax, qword [rdi + 0x80] 	       304	dd.c	FUNCTION_12	IF_1
0x40001ab	          0x4889fb	                            mov rbx, rdi	       301	dd.c	FUNCTION_12
0x40001ae	          0x4885c0	                           test rax, rax	       304	dd.c	FUNCTION_12	IF_1
0x40001b1	            0x741b	                            je 0x40001ce	       304	dd.c	FUNCTION_12	IF_1
0x40001b3	    0x488bb8980000	            mov rdi, qword [rax + 0x98] 	       305	dd.c	FUNCTION_12	IF_1	CALL_1
0x40001ba	          0x4889da	                            mov rdx, rbx	       305	dd.c	FUNCTION_12	IF_1	CALL_1
0x40001bd	      0xbe04000000	                              mov esi, 4	       305	dd.c	FUNCTION_12	IF_1	CALL_1
0x40001c2	    0x4881c7f00000	                           add rdi, 0xf0	       305	dd.c	FUNCTION_12	IF_1	CALL_1
0x40001c9	      0xe800000000	                          call 0x40001ce	       305	dd.c	FUNCTION_12	IF_1	CALL_1
0x40001ce	    0x488b83880000	            mov rax, qword [rbx + 0x88] 	       308	dd.c	FUNCTION_12	CALL_2
0x40001d5	        0x4c8d6310	                   lea r12, [rbx + 0x10]	       308	dd.c	FUNCTION_12	CALL_2
0x40001d9	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       308	dd.c	FUNCTION_12	CALL_2
0x40001dd	          0x4c89e6	                            mov rsi, r12	       308	dd.c	FUNCTION_12	CALL_2
0x40001e0	        0x488b7878	            mov rdi, qword [rax + 0x78] 	       308	dd.c	FUNCTION_12	CALL_2
0x40001e4	      0xe800000000	                          call 0x40001e9	       308	dd.c	FUNCTION_12	CALL_2
0x40001e9	            0x85c0	                           test eax, eax	       310	dd.c	FUNCTION_12	IF_2
0x40001eb	            0x89c5	                            mov ebp, eax	       308	dd.c	FUNCTION_12	CALL_2
0x40001ed	            0x7407	                            je 0x40001f6	       310	dd.c	FUNCTION_12	IF_2
0x40001ef	            0x89e8	                            mov eax, ebp	       330	dd.c	FUNCTION_12
0x40001f1	              0x5b	                                 pop rbx	       330	dd.c	FUNCTION_12
0x40001f2	              0x5d	                                 pop rbp	       330	dd.c	FUNCTION_12
0x40001f3	            0x415c	                                 pop r12	       330	dd.c	FUNCTION_12
0x40001f5	              0xc3	                                     ret	       330	dd.c	FUNCTION_12
0x40001f6	    0x488b83880000	            mov rax, qword [rbx + 0x88] 	       313	dd.c	FUNCTION_12	CALL_4
0x40001fd	          0x4c89e7	                            mov rdi, r12	       313	dd.c	FUNCTION_12	CALL_4
0x4000200	    0x48c7c2000000	                              mov rdx, 0	       313	dd.c	FUNCTION_12	CALL_4
0x4000207	        0x488b7078	            mov rsi, qword [rax + 0x78] 	       313	dd.c	FUNCTION_12	CALL_4
0x400020b	      0xe800000000	                          call 0x4000210	       313	dd.c	FUNCTION_12	CALL_4
0x4000210	            0x85c0	                           test eax, eax	       315	dd.c	FUNCTION_12	IF_3
0x4000212	          0x4189c4	                           mov r12d, eax	       313	dd.c	FUNCTION_12	CALL_4
0x4000215	            0x74d8	                            je 0x40001ef	       315	dd.c	FUNCTION_12	IF_3
0x4000217	    0x488b83880000	            mov rax, qword [rbx + 0x88] 	       325	dd.c	FUNCTION_12	CALL_8
0x400021e	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       325	dd.c	FUNCTION_12	CALL_8
0x4000222	          0x4489e5	                           mov ebp, r12d	       325	dd.c	FUNCTION_12	CALL_8
0x4000225	        0x488b7878	            mov rdi, qword [rax + 0x78] 	       325	dd.c	FUNCTION_12	CALL_8
0x4000229	      0xe800000000	                          call 0x400022e	       325	dd.c	FUNCTION_12	CALL_8
0x400022e	            0x89e8	                            mov eax, ebp	       330	dd.c	FUNCTION_12
0x4000230	              0x5b	                                 pop rbx	       330	dd.c	FUNCTION_12
0x4000231	              0x5d	                                 pop rbp	       330	dd.c	FUNCTION_12
0x4000232	            0x415c	                                 pop r12	       330	dd.c	FUNCTION_12
0x4000234	              0xc3	                                     ret	       330	dd.c	FUNCTION_12
deferred_probe_initcall	functions,0:DO,0:CALL,2:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	7
0x4000500	    0xc60500000000	                mov byte [0x04000507], 1	       236	dd.c	FUNCTION_8
0x4000507	      0xe864ffffff	call sym.driver_deferred_probe_trigger.part.10	       236	dd.c	FUNCTION_8
0x400050c	    0x48c7c7000000	                              mov rdi, 0	       239	dd.c	FUNCTION_8	CALL_2
0x4000513	      0xe800000000	                          call 0x4000518	       239	dd.c	FUNCTION_8	CALL_2
0x4000518	    0xc60500000000	                mov byte [0x0400051f], 1	       240	dd.c	FUNCTION_8
0x400051f	            0x31c0	                            xor eax, eax	       242	dd.c	FUNCTION_8
0x4000521	              0xc3	                                     ret	       242	dd.c	FUNCTION_8
device_unblock_probing	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	5
0x4000800	    0x803d00000000	                cmp byte [0x04000807], 0	       182	dd.c	FUNCTION_5	IF_1
0x4000807	    0xc60500000000	                mov byte [0x0400080e], 0	       223	dd.c	FUNCTION_7
0x400080e	            0x7502	                           jne 0x4000812	       182	dd.c	FUNCTION_5	IF_1
0x4000810	            0xf3c3	                                     ret	       182	dd.c	FUNCTION_5	IF_1
0x4000812	      0xe959fcffff	jmp sym.driver_deferred_probe_trigger.part.10	       182	dd.c	FUNCTION_5	IF_1
__device_attach_driver	functions,0:DO,0:CALL,6:IF,6:ELSE,2:SWITCH,0:FOR,0:WHILE,0	57
0x4000c10	            0x4154	                                push r12	       648	dd.c	FUNCTION_21
0x4000c12	              0x55	                                push rbp	       648	dd.c	FUNCTION_21
0x4000c13	              0x53	                                push rbx	       648	dd.c	FUNCTION_21
0x4000c14	          0x4c8b26	                    mov r12, qword [rsi]	       650	dd.c	FUNCTION_21
0x4000c17	    0x4983bc248800	               cmp qword [r12 + 0x88], 0	       660	dd.c	FUNCTION_21	IF_1
0x4000c20	     0xf8580000000	                           jne 0x4000ca6	       660	dd.c	FUNCTION_21	IF_1
0x4000c26	        0x488b4708	                mov rax, qword [rdi + 8]	       121	base.h	FUNCTION_99	CALL_1
0x4000c2a	          0x4889f5	                            mov rbp, rsi	       121	base.h	FUNCTION_99	CALL_1
0x4000c2d	          0x4889fb	                            mov rbx, rdi	       121	base.h	FUNCTION_99	CALL_1
0x4000c30	        0x488b4030	            mov rax, qword [rax + 0x30] 	       121	base.h	FUNCTION_99	CALL_1
0x4000c34	          0x4885c0	                           test rax, rax	       121	base.h	FUNCTION_99	CALL_1
0x4000c37	            0x7421	                            je 0x4000c5a	       121	base.h	FUNCTION_99	CALL_1
0x4000c39	          0x4889fe	                            mov rsi, rdi	       121	base.h	FUNCTION_99	CALL_1
0x4000c3c	          0x4c89e7	                            mov rdi, r12	       121	base.h	FUNCTION_99	CALL_1
0x4000c3f	      0xe800000000	                          call 0x4000c44	       121	base.h	FUNCTION_99	CALL_1
0x4000c44	            0x85c0	                           test eax, eax	       664	dd.c	FUNCTION_21	IF_2
0x4000c46	            0x7507	                           jne 0x4000c4f	       664	dd.c	FUNCTION_21	IF_2
0x4000c48	            0x31c0	                            xor eax, eax	       666	dd.c	FUNCTION_21	IF_2
0x4000c4a	              0x5b	                                 pop rbx	       684	dd.c	FUNCTION_21
0x4000c4b	              0x5d	                                 pop rbp	       684	dd.c	FUNCTION_21
0x4000c4c	            0x415c	                                 pop r12	       684	dd.c	FUNCTION_21
0x4000c4e	              0xc3	                                     ret	       684	dd.c	FUNCTION_21
0x4000c4f	      0x3dfbfdffff	                     cmp eax, 0xfffffdfb	       667	dd.c	FUNCTION_21	ELSE_1	IF_3
0x4000c54	            0x7444	                            je 0x4000c9a	       667	dd.c	FUNCTION_21	ELSE_1	IF_3
0x4000c56	            0x85c0	                           test eax, eax	       670	dd.c	FUNCTION_21	ELSE_2	IF_4
0x4000c58	            0x78f0	                            js 0x4000c4a	       670	dd.c	FUNCTION_21	ELSE_2	IF_4
0x4000c5a	          0x8b5324	            mov edx, dword [rbx + 0x24] 	       599	dd.c	FUNCTION_20	SWITCH_1
0x4000c5d	          0x83fa01	                              cmp edx, 1	       599	dd.c	FUNCTION_20	SWITCH_1
0x4000c60	            0x742d	                            je 0x4000c8f	       599	dd.c	FUNCTION_20	SWITCH_1
0x4000c62	            0x31c0	                            xor eax, eax	       604	dd.c	FUNCTION_20	SWITCH_1
0x4000c64	          0x83fa02	                              cmp edx, 2	       599	dd.c	FUNCTION_20	SWITCH_1
0x4000c67	            0x751a	                           jne 0x4000c83	       599	dd.c	FUNCTION_20	SWITCH_1
0x4000c69	        0x807d0800	                   cmp byte [rbp + 8], 0	       680	dd.c	FUNCTION_21	IF_6
0x4000c6d	            0x7405	                            je 0x4000c74	       680	dd.c	FUNCTION_21	IF_6
0x4000c6f	          0x384509	                  cmp byte [rbp + 9], al	       680	dd.c	FUNCTION_21	IF_6
0x4000c72	            0x75d4	                           jne 0x4000c48	       680	dd.c	FUNCTION_21	IF_6
0x4000c74	          0x4c89e6	                            mov rsi, r12	       683	dd.c	FUNCTION_21	CALL_6
0x4000c77	          0x4889df	                            mov rdi, rbx	       683	dd.c	FUNCTION_21	CALL_6
0x4000c7a	              0x5b	                                 pop rbx	       684	dd.c	FUNCTION_21
0x4000c7b	              0x5d	                                 pop rbp	       684	dd.c	FUNCTION_21
0x4000c7c	            0x415c	                                 pop r12	       684	dd.c	FUNCTION_21
0x4000c7e	      0xe9ddfbffff	             jmp sym.driver_probe_device	       683	dd.c	FUNCTION_21	CALL_6
0x4000c83	          0x4889df	                            mov rdi, rbx	       683	dd.c	FUNCTION_21	CALL_6
0x4000c86	      0xe8a5f8ffff	call sym.driver_allows_async_probing.part.12	       683	dd.c	FUNCTION_21	CALL_6
0x4000c8b	            0x84c0	                             test al, al	       677	dd.c	FUNCTION_21	IF_5
0x4000c8d	            0x74da	                            je 0x4000c69	       677	dd.c	FUNCTION_21	IF_5
0x4000c8f	        0xc6450a01	                 mov byte [rbp + 0xa], 1	       678	dd.c	FUNCTION_21	IF_5
0x4000c93	      0xb801000000	                              mov eax, 1	       678	dd.c	FUNCTION_21	IF_5
0x4000c98	            0xebcf	                           jmp 0x4000c69	       678	dd.c	FUNCTION_21	IF_5
0x4000c9a	      0x498d7c2408	                      lea rdi, [r12 + 8]	       678	dd.c	FUNCTION_21	IF_5
0x4000c9f	      0xe85cf7ffff	call sym.driver_deferred_probe_add.isra.9	       669	dd.c	FUNCTION_21	ELSE_1	IF_3	CALL_3
0x4000ca4	            0xebb4	                           jmp 0x4000c5a	       669	dd.c	FUNCTION_21	ELSE_1	IF_3	CALL_3
0x4000ca6	              0x5b	                                 pop rbx	       684	dd.c	FUNCTION_21
0x4000ca7	      0xb8f0ffffff	                     mov eax, 0xfffffff0	       661	dd.c	FUNCTION_21	IF_1
0x4000cac	              0x5d	                                 pop rbp	       684	dd.c	FUNCTION_21
0x4000cad	            0x415c	                                 pop r12	       684	dd.c	FUNCTION_21
0x4000caf	              0xc3	                                     ret	       684	dd.c	FUNCTION_21
device_attach	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	2
0x40007e0	            0x31f6	                            xor esi, esi	       781	dd.c	FUNCTION_24	CALL_1
0x40007e2	      0xe9c9feffff	                 jmp sym.__device_attach	       781	dd.c	FUNCTION_24	CALL_1
driver_attach	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	5
0x40003e0	          0x4889fa	                            mov rdx, rdi	       839	dd.c	FUNCTION_27
0x40003e3	        0x488b7f08	                mov rdi, qword [rdi + 8]	       840	dd.c	FUNCTION_27	CALL_1
0x40003e7	    0x48c7c1000000	                              mov rcx, 0	       840	dd.c	FUNCTION_27	CALL_1
0x40003ee	            0x31f6	                            xor esi, esi	       840	dd.c	FUNCTION_27	CALL_1
0x40003f0	      0xe900000000	                           jmp 0x40003f5	       840	dd.c	FUNCTION_27	CALL_1
device_bind_driver	functions,0:DO,0:CALL,3:IF,2:ELSE,1:SWITCH,0:FOR,0:WHILE,0	25
0x4000660	              0x55	                                push rbp	       359	dd.c	FUNCTION_14
0x4000661	              0x53	                                push rbx	       359	dd.c	FUNCTION_14
0x4000662	          0x4889fb	                            mov rbx, rdi	       359	dd.c	FUNCTION_14
0x4000665	      0xe836fbffff	               call sym.driver_sysfs_add	       362	dd.c	FUNCTION_14	CALL_1
0x400066a	            0x85c0	                           test eax, eax	       363	dd.c	FUNCTION_14	IF_1
0x400066c	            0x89c5	                            mov ebp, eax	       362	dd.c	FUNCTION_14	CALL_1
0x400066e	            0x742c	                            je 0x400069c	       363	dd.c	FUNCTION_14	IF_1
0x4000670	    0x488b83800000	            mov rax, qword [rbx + 0x80] 	       365	dd.c	FUNCTION_14	ELSE_1	IF_2
0x4000677	          0x4885c0	                           test rax, rax	       365	dd.c	FUNCTION_14	ELSE_1	IF_2
0x400067a	            0x741b	                            je 0x4000697	       365	dd.c	FUNCTION_14	ELSE_1	IF_2
0x400067c	    0x488bb8980000	            mov rdi, qword [rax + 0x98] 	       366	dd.c	FUNCTION_14	ELSE_1	IF_2	CALL_3
0x4000683	          0x4889da	                            mov rdx, rbx	       366	dd.c	FUNCTION_14	ELSE_1	IF_2	CALL_3
0x4000686	      0xbe08000000	                              mov esi, 8	       366	dd.c	FUNCTION_14	ELSE_1	IF_2	CALL_3
0x400068b	    0x4881c7f00000	                           add rdi, 0xf0	       366	dd.c	FUNCTION_14	ELSE_1	IF_2	CALL_3
0x4000692	      0xe800000000	                          call 0x4000697	       366	dd.c	FUNCTION_14	ELSE_1	IF_2	CALL_3
0x4000697	            0x89e8	                            mov eax, ebp	       369	dd.c	FUNCTION_14
0x4000699	              0x5b	                                 pop rbx	       369	dd.c	FUNCTION_14
0x400069a	              0x5d	                                 pop rbp	       369	dd.c	FUNCTION_14
0x400069b	              0xc3	                                     ret	       369	dd.c	FUNCTION_14
0x400069c	          0x4889df	                            mov rdi, rbx	       364	dd.c	FUNCTION_14	CALL_2
0x400069f	      0xe80cffffff	                   call sym.driver_bound	       364	dd.c	FUNCTION_14	CALL_2
0x40006a4	            0x89e8	                            mov eax, ebp	       369	dd.c	FUNCTION_14
0x40006a6	              0x5b	                                 pop rbx	       369	dd.c	FUNCTION_14
0x40006a7	              0x5d	                                 pop rbp	       369	dd.c	FUNCTION_14
0x40006a8	              0xc3	                                     ret	       369	dd.c	FUNCTION_14
device_block_probing	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	2
0x40007f0	    0xc60500000000	                mov byte [0x040007f7], 1	       210	dd.c	FUNCTION_6
0x40007f7	      0xe944faffff	           jmp sym.wait_for_device_probe	       212	dd.c	FUNCTION_6	CALL_1
device_initial_probe	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	2
0x4000cd0	      0xbe01000000	                              mov esi, 1	       787	dd.c	FUNCTION_25	CALL_1
0x4000cd5	      0xe9d6f9ffff	                 jmp sym.__device_attach	       787	dd.c	FUNCTION_25	CALL_1
device_release_driver	functions,0:DO,0:CALL,1:IF,0:ELSE,0:SWITCH,0:FOR,0:WHILE,0	3
0x4000f00	            0x31d2	                            xor edx, edx	       949	dd.c	FUNCTION_30	CALL_1
0x4000f02	            0x31f6	                            xor esi, esi	       949	dd.c	FUNCTION_30	CALL_1
0x4000f04	      0xe9d7fdffff	  jmp sym.device_release_driver_internal	       949	dd.c	FUNCTION_30	CALL_1
driver_bound	functions,0:DO,0:CALL,12:IF,2:ELSE,0:SWITCH,0:FOR,0:WHILE,0	42
0x40005b0	              0x53	                                push rbx	       260	dd.c	FUNCTION_10
0x40005b1	          0x4889fb	                            mov rbx, rdi	       260	dd.c	FUNCTION_10
0x40005b4	        0x488b7f08	                mov rdi, qword [rdi + 8]	       256	dd.c	FUNCTION_9	CALL_1
0x40005b8	          0x4885ff	                           test rdi, rdi	       256	dd.c	FUNCTION_9	CALL_1
0x40005bb	            0x7429	                            je 0x40005e6	       256	dd.c	FUNCTION_9	CALL_1
0x40005bd	        0x4883c748	                           add rdi, 0x48	       256	dd.c	FUNCTION_9	CALL_1
0x40005c1	      0xe800000000	                          call 0x40005c6	       256	dd.c	FUNCTION_9	CALL_1
0x40005c6	            0x85c0	                           test eax, eax	       256	dd.c	FUNCTION_9	CALL_1
0x40005c8	            0x7418	                            je 0x40005e2	       256	dd.c	FUNCTION_9	CALL_1
0x40005ca	        0x488b5310	            mov rdx, qword [rbx + 0x10] 	       262	dd.c	FUNCTION_10	IF_1	CALL_2
0x40005ce	    0x48c7c6000000	                              mov rsi, 0	       262	dd.c	FUNCTION_10	IF_1	CALL_2
0x40005d5	    0x48c7c7000000	                              mov rdi, 0	       262	dd.c	FUNCTION_10	IF_1	CALL_2
0x40005dc	              0x5b	                                 pop rbx	       287	dd.c	FUNCTION_10
0x40005dd	      0xe900000000	                           jmp 0x40005e2	       262	dd.c	FUNCTION_10	IF_1	CALL_2
0x40005e2	        0x488b7b08	                mov rdi, qword [rbx + 8]	       262	dd.c	FUNCTION_10	IF_1	CALL_2
0x40005e6	    0x488b83880000	            mov rax, qword [rbx + 0x88] 	       270	dd.c	FUNCTION_10	CALL_6
0x40005ed	        0x4883c748	                           add rdi, 0x48	       270	dd.c	FUNCTION_10	CALL_6
0x40005f1	        0x488b7078	            mov rsi, qword [rax + 0x78] 	       270	dd.c	FUNCTION_10	CALL_6
0x40005f5	        0x4883c640	                           add rsi, 0x40	       270	dd.c	FUNCTION_10	CALL_6
0x40005f9	      0xe800000000	                          call 0x40005fe	       270	dd.c	FUNCTION_10	CALL_6
0x40005fe	          0x4889df	                            mov rdi, rbx	       271	dd.c	FUNCTION_10	CALL_7
0x4000601	      0xe800000000	                          call 0x4000606	       271	dd.c	FUNCTION_10	CALL_7
0x4000606	          0x4889df	                            mov rdi, rbx	       273	dd.c	FUNCTION_10	CALL_8
0x4000609	      0xe800000000	                          call 0x400060e	       273	dd.c	FUNCTION_10	CALL_8
0x400060e	          0x4889df	                            mov rdi, rbx	       279	dd.c	FUNCTION_10	CALL_9
0x4000611	      0xe800000000	                          call 0x4000616	       279	dd.c	FUNCTION_10	CALL_9
0x4000616	    0x803d00000000	                cmp byte [0x0400061d], 0	       182	dd.c	FUNCTION_5	IF_1
0x400061d	            0x7536	                           jne 0x4000655	       182	dd.c	FUNCTION_5	IF_1
0x400061f	    0x488b83800000	            mov rax, qword [rbx + 0x80] 	       282	dd.c	FUNCTION_10	IF_2
0x4000626	          0x4885c0	                           test rax, rax	       282	dd.c	FUNCTION_10	IF_2
0x4000629	            0x741b	                            je 0x4000646	       282	dd.c	FUNCTION_10	IF_2
0x400062b	    0x488bb8980000	            mov rdi, qword [rax + 0x98] 	       283	dd.c	FUNCTION_10	IF_2	CALL_11
0x4000632	          0x4889da	                            mov rdx, rbx	       283	dd.c	FUNCTION_10	IF_2	CALL_11
0x4000635	      0xbe05000000	                              mov esi, 5	       283	dd.c	FUNCTION_10	IF_2	CALL_11
0x400063a	    0x4881c7f00000	                           add rdi, 0xf0	       283	dd.c	FUNCTION_10	IF_2	CALL_11
0x4000641	      0xe800000000	                          call 0x4000646	       283	dd.c	FUNCTION_10	IF_2	CALL_11
0x4000646	        0x488d7b10	                   lea rdi, [rbx + 0x10]	       286	dd.c	FUNCTION_10	CALL_12
0x400064a	      0xbe06000000	                              mov esi, 6	       286	dd.c	FUNCTION_10	CALL_12
0x400064f	              0x5b	                                 pop rbx	       287	dd.c	FUNCTION_10
0x4000650	      0xe900000000	                           jmp 0x4000655	       286	dd.c	FUNCTION_10	CALL_12
0x4000655	      0xe816feffff	call sym.driver_deferred_probe_trigger.part.10	       286	dd.c	FUNCTION_10	CALL_12
0x400065a	            0xebc3	                           jmp 0x400061f	       286	dd.c	FUNCTION_10	CALL_12
