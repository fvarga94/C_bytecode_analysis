Curl_ssl_initsessions	CALL,1:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	24
0x4001078	      0xb800000000	                              mov eax, 0	       599	vtls.c	FUNCTION_25	IF_1
0x400107d	    0x4883bf504d00	             cmp qword [rdi + 0x4d50], 0	       597	vtls.c	FUNCTION_25	IF_1
0x4001085	            0x754e	                           jne 0x40010d5	       597	vtls.c	FUNCTION_25	IF_1
0x4001087	              0x55	                                push rbp	       594	vtls.c	FUNCTION_25
0x4001088	              0x53	                                push rbx	       594	vtls.c	FUNCTION_25
0x4001089	        0x4883ec08	                              sub rsp, 8	       594	vtls.c	FUNCTION_25
0x400108d	          0x4889f5	                            mov rbp, rsi	       594	vtls.c	FUNCTION_25
0x4001090	          0x4889fb	                            mov rbx, rdi	       594	vtls.c	FUNCTION_25
0x4001093	      0xbe88000000	                           mov esi, 0x88	       601	vtls.c	FUNCTION_25	CALL_1
0x4001098	          0x4889ef	                            mov rdi, rbp	       601	vtls.c	FUNCTION_25	CALL_1
0x400109b	    0x488b05000000	            mov rax, qword [0x040010a2] 	       601	vtls.c	FUNCTION_25	CALL_1
0x40010a2	            0xff10	                        call qword [rax]	       601	vtls.c	FUNCTION_25	CALL_1
0x40010a4	          0x4889c2	                            mov rdx, rax	       601	vtls.c	FUNCTION_25	CALL_1
0x40010a7	      0xb81b000000	                           mov eax, 0x1b	       603	vtls.c	FUNCTION_25	IF_2
0x40010ac	          0x4885d2	                           test rdx, rdx	       602	vtls.c	FUNCTION_25	IF_2
0x40010af	            0x741e	                            je 0x40010cf	       602	vtls.c	FUNCTION_25	IF_2
0x40010b1	    0x4889ab780700	            mov qword [rbx + 0x778], rbp	       606	vtls.c	FUNCTION_25
0x40010b8	    0x488993504d00	          mov qword [rbx + 0x4d50], rdx 	       607	vtls.c	FUNCTION_25
0x40010bf	    0x48c783584d00	            mov qword [rbx + 0x4d58], 1 	       608	vtls.c	FUNCTION_25
0x40010ca	      0xb800000000	                              mov eax, 0	       609	vtls.c	FUNCTION_25
0x40010cf	        0x4883c408	                              add rsp, 8	       610	vtls.c	FUNCTION_25
0x40010d3	              0x5b	                                 pop rbx	       610	vtls.c	FUNCTION_25
0x40010d4	              0x5d	                                 pop rbp	       610	vtls.c	FUNCTION_25
0x40010d5	            0xf3c3	                                     ret	       610	vtls.c	FUNCTION_25
Curl_none_set_engine_default	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x400006a	      0xb804000000	                              mov eax, 4	      1061	vtls.c	FUNCTION_50
0x400006f	              0xc3	                                     ret	      1061	vtls.c	FUNCTION_50
Curl_clone_primary_ssl_config	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	92
0x400060d	              0x55	                                push rbp	       108	vtls.c	FUNCTION_2
0x400060e	              0x53	                                push rbx	       108	vtls.c	FUNCTION_2
0x400060f	        0x4883ec08	                              sub rsp, 8	       108	vtls.c	FUNCTION_2
0x4000613	          0x4889fb	                            mov rbx, rdi	       108	vtls.c	FUNCTION_2
0x4000616	          0x4889f5	                            mov rbp, rsi	       108	vtls.c	FUNCTION_2
0x4000619	          0x488b07	                    mov rax, qword [rdi]	       109	vtls.c	FUNCTION_2
0x400061c	          0x488906	                    mov qword [rsi], rax	       109	vtls.c	FUNCTION_2
0x400061f	        0x488b4708	                mov rax, qword [rdi + 8]	       110	vtls.c	FUNCTION_2
0x4000623	        0x48894608	                mov qword [rsi + 8], rax	       110	vtls.c	FUNCTION_2
0x4000627	         0xfb64710	           movzx eax, byte [rdi + 0x10] 	       111	vtls.c	FUNCTION_2
0x400062b	          0x884610	               mov byte [rsi + 0x10], al	       111	vtls.c	FUNCTION_2
0x400062e	         0xfb64711	           movzx eax, byte [rdi + 0x11] 	       112	vtls.c	FUNCTION_2
0x4000632	          0x884611	               mov byte [rsi + 0x11], al	       112	vtls.c	FUNCTION_2
0x4000635	         0xfb64712	           movzx eax, byte [rdi + 0x12] 	       113	vtls.c	FUNCTION_2
0x4000639	          0x884612	               mov byte [rsi + 0x12], al	       113	vtls.c	FUNCTION_2
0x400063c	         0xfb64713	           movzx eax, byte [rdi + 0x13] 	       114	vtls.c	FUNCTION_2
0x4000640	          0x884613	               mov byte [rsi + 0x13], al	       114	vtls.c	FUNCTION_2
0x4000643	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       116	vtls.c	FUNCTION_2
0x4000647	          0x4885ff	                           test rdi, rdi	       116	vtls.c	FUNCTION_2
0x400064a	            0x7417	                            je 0x4000663	       116	vtls.c	FUNCTION_2
0x400064c	    0x488b05000000	            mov rax, qword [0x04000653] 	       116	vtls.c	FUNCTION_2
0x4000653	            0xff10	                        call qword [rax]	       116	vtls.c	FUNCTION_2
0x4000655	        0x48894518	            mov qword [rbp + 0x18], rax 	       116	vtls.c	FUNCTION_2
0x4000659	          0x4885c0	                           test rax, rax	       116	vtls.c	FUNCTION_2
0x400065c	            0x750d	                           jne 0x400066b	       116	vtls.c	FUNCTION_2
0x400065e	      0xe9cf000000	                           jmp 0x4000732	       116	vtls.c	FUNCTION_2
0x4000663	    0x48c746180000	               mov qword [rsi + 0x18], 0	       116	vtls.c	FUNCTION_2
0x400066b	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       117	vtls.c	FUNCTION_2
0x400066f	          0x4885ff	                           test rdi, rdi	       117	vtls.c	FUNCTION_2
0x4000672	            0x7417	                            je 0x400068b	       117	vtls.c	FUNCTION_2
0x4000674	    0x488b05000000	            mov rax, qword [0x0400067b] 	       117	vtls.c	FUNCTION_2
0x400067b	            0xff10	                        call qword [rax]	       117	vtls.c	FUNCTION_2
0x400067d	        0x48894520	            mov qword [rbp + 0x20], rax 	       117	vtls.c	FUNCTION_2
0x4000681	          0x4885c0	                           test rax, rax	       117	vtls.c	FUNCTION_2
0x4000684	            0x750d	                           jne 0x4000693	       117	vtls.c	FUNCTION_2
0x4000686	      0xe9ae000000	                           jmp 0x4000739	       117	vtls.c	FUNCTION_2
0x400068b	    0x48c745200000	               mov qword [rbp + 0x20], 0	       117	vtls.c	FUNCTION_2
0x4000693	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       118	vtls.c	FUNCTION_2
0x4000697	          0x4885ff	                           test rdi, rdi	       118	vtls.c	FUNCTION_2
0x400069a	            0x7417	                            je 0x40006b3	       118	vtls.c	FUNCTION_2
0x400069c	    0x488b05000000	            mov rax, qword [0x040006a3] 	       118	vtls.c	FUNCTION_2
0x40006a3	            0xff10	                        call qword [rax]	       118	vtls.c	FUNCTION_2
0x40006a5	        0x48894528	            mov qword [rbp + 0x28], rax 	       118	vtls.c	FUNCTION_2
0x40006a9	          0x4885c0	                           test rax, rax	       118	vtls.c	FUNCTION_2
0x40006ac	            0x750d	                           jne 0x40006bb	       118	vtls.c	FUNCTION_2
0x40006ae	      0xe98d000000	                           jmp 0x4000740	       118	vtls.c	FUNCTION_2
0x40006b3	    0x48c745280000	               mov qword [rbp + 0x28], 0	       118	vtls.c	FUNCTION_2
0x40006bb	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       119	vtls.c	FUNCTION_2
0x40006bf	          0x4885ff	                           test rdi, rdi	       119	vtls.c	FUNCTION_2
0x40006c2	            0x7414	                            je 0x40006d8	       119	vtls.c	FUNCTION_2
0x40006c4	    0x488b05000000	            mov rax, qword [0x040006cb] 	       119	vtls.c	FUNCTION_2
0x40006cb	            0xff10	                        call qword [rax]	       119	vtls.c	FUNCTION_2
0x40006cd	        0x48894530	            mov qword [rbp + 0x30], rax 	       119	vtls.c	FUNCTION_2
0x40006d1	          0x4885c0	                           test rax, rax	       119	vtls.c	FUNCTION_2
0x40006d4	            0x750a	                           jne 0x40006e0	       119	vtls.c	FUNCTION_2
0x40006d6	            0xeb6f	                           jmp 0x4000747	       119	vtls.c	FUNCTION_2
0x40006d8	    0x48c745300000	               mov qword [rbp + 0x30], 0	       119	vtls.c	FUNCTION_2
0x40006e0	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       120	vtls.c	FUNCTION_2
0x40006e4	          0x4885ff	                           test rdi, rdi	       120	vtls.c	FUNCTION_2
0x40006e7	            0x7414	                            je 0x40006fd	       120	vtls.c	FUNCTION_2
0x40006e9	    0x488b05000000	            mov rax, qword [0x040006f0] 	       120	vtls.c	FUNCTION_2
0x40006f0	            0xff10	                        call qword [rax]	       120	vtls.c	FUNCTION_2
0x40006f2	        0x48894538	            mov qword [rbp + 0x38], rax 	       120	vtls.c	FUNCTION_2
0x40006f6	          0x4885c0	                           test rax, rax	       120	vtls.c	FUNCTION_2
0x40006f9	            0x750a	                           jne 0x4000705	       120	vtls.c	FUNCTION_2
0x40006fb	            0xeb51	                           jmp 0x400074e	       120	vtls.c	FUNCTION_2
0x40006fd	    0x48c745380000	               mov qword [rbp + 0x38], 0	       120	vtls.c	FUNCTION_2
0x4000705	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       121	vtls.c	FUNCTION_2
0x4000709	          0x4885ff	                           test rdi, rdi	       121	vtls.c	FUNCTION_2
0x400070c	            0x7415	                            je 0x4000723	       121	vtls.c	FUNCTION_2
0x400070e	    0x488b05000000	            mov rax, qword [0x04000715] 	       121	vtls.c	FUNCTION_2
0x4000715	            0xff10	                        call qword [rax]	       121	vtls.c	FUNCTION_2
0x4000717	        0x48894540	            mov qword [rbp + 0x40], rax 	       121	vtls.c	FUNCTION_2
0x400071b	          0x4885c0	                           test rax, rax	       121	vtls.c	FUNCTION_2
0x400071e	           0xf95c0	                                setne al	       121	vtls.c	FUNCTION_2
0x4000721	            0xeb30	                           jmp 0x4000753	       121	vtls.c	FUNCTION_2
0x4000723	    0x48c745400000	               mov qword [rbp + 0x40], 0	       121	vtls.c	FUNCTION_2
0x400072b	      0xb801000000	                              mov eax, 1	       123	vtls.c	FUNCTION_2
0x4000730	            0xeb21	                           jmp 0x4000753	       123	vtls.c	FUNCTION_2
0x4000732	      0xb800000000	                              mov eax, 0	       116	vtls.c	FUNCTION_2
0x4000737	            0xeb1a	                           jmp 0x4000753	       116	vtls.c	FUNCTION_2
0x4000739	      0xb800000000	                              mov eax, 0	       117	vtls.c	FUNCTION_2
0x400073e	            0xeb13	                           jmp 0x4000753	       117	vtls.c	FUNCTION_2
0x4000740	      0xb800000000	                              mov eax, 0	       118	vtls.c	FUNCTION_2
0x4000745	            0xeb0c	                           jmp 0x4000753	       118	vtls.c	FUNCTION_2
0x4000747	      0xb800000000	                              mov eax, 0	       119	vtls.c	FUNCTION_2
0x400074c	            0xeb05	                           jmp 0x4000753	       119	vtls.c	FUNCTION_2
0x400074e	      0xb800000000	                              mov eax, 0	       120	vtls.c	FUNCTION_2
0x4000753	        0x4883c408	                              add rsp, 8	       124	vtls.c	FUNCTION_2
0x4000757	              0x5b	                                 pop rbx	       124	vtls.c	FUNCTION_2
0x4000758	              0x5d	                                 pop rbp	       124	vtls.c	FUNCTION_2
0x4000759	              0xc3	                                     ret	       124	vtls.c	FUNCTION_2
Curl_ssl_init_certinfo	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	21
0x4001182	              0x55	                                push rbp	       661	vtls.c	FUNCTION_30
0x4001183	              0x53	                                push rbx	       661	vtls.c	FUNCTION_30
0x4001184	        0x4883ec08	                              sub rsp, 8	       661	vtls.c	FUNCTION_30
0x4001188	          0x4889fb	                            mov rbx, rdi	       661	vtls.c	FUNCTION_30
0x400118b	            0x89f5	                            mov ebp, esi	       661	vtls.c	FUNCTION_30
0x400118d	      0xe800000000	                          call 0x4001192	       666	vtls.c	FUNCTION_30	CALL_1
0x4001192	          0x4863fd	                         movsxd rdi, ebp	       669	vtls.c	FUNCTION_30	CALL_2
0x4001195	      0xbe08000000	                              mov esi, 8	       669	vtls.c	FUNCTION_30	CALL_2
0x400119a	    0x488b05000000	            mov rax, qword [0x040011a1] 	       669	vtls.c	FUNCTION_30	CALL_2
0x40011a1	            0xff10	                        call qword [rax]	       669	vtls.c	FUNCTION_30	CALL_2
0x40011a3	      0xba1b000000	                           mov edx, 0x1b	       671	vtls.c	FUNCTION_30	IF_1
0x40011a8	          0x4885c0	                           test rax, rax	       670	vtls.c	FUNCTION_30	IF_1
0x40011ab	            0x7412	                            je 0x40011bf	       670	vtls.c	FUNCTION_30	IF_1
0x40011ad	    0x89abb0520000	          mov dword [rbx + 0x52b0], ebp 	       673	vtls.c	FUNCTION_30
0x40011b3	    0x488983b85200	          mov qword [rbx + 0x52b8], rax 	       674	vtls.c	FUNCTION_30
0x40011ba	      0xba00000000	                              mov edx, 0	       676	vtls.c	FUNCTION_30
0x40011bf	            0x89d0	                            mov eax, edx	       677	vtls.c	FUNCTION_30
0x40011c1	        0x4883c408	                              add rsp, 8	       677	vtls.c	FUNCTION_30
0x40011c5	              0x5b	                                 pop rbx	       677	vtls.c	FUNCTION_30
0x40011c6	              0x5d	                                 pop rbp	       677	vtls.c	FUNCTION_30
0x40011c7	              0xc3	                                     ret	       677	vtls.c	FUNCTION_30
Curl_none_engines_list	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000070	      0xb800000000	                              mov eax, 0	      1067	vtls.c	FUNCTION_51
0x4000075	              0xc3	                                     ret	      1067	vtls.c	FUNCTION_51
Curl_none_close_all	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	1
0x4000054	            0xf3c3	                                     ret	      1027	vtls.c	FUNCTION_45
Curl_ssl_free_certinfo	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,1	28
0x4001110	    0x8b87b0520000	          mov eax, dword [rdi + 0x52b0] 	       647	vtls.c	FUNCTION_29	IF_1
0x4001116	            0x85c0	                           test eax, eax	       647	vtls.c	FUNCTION_29	IF_1
0x4001118	            0x7466	                            je 0x4001180	       647	vtls.c	FUNCTION_29	IF_1
0x400111a	            0x4154	                                push r12	       643	vtls.c	FUNCTION_29
0x400111c	              0x55	                                push rbp	       643	vtls.c	FUNCTION_29
0x400111d	              0x53	                                push rbx	       643	vtls.c	FUNCTION_29
0x400111e	          0x4889fd	                            mov rbp, rdi	       643	vtls.c	FUNCTION_29
0x4001121	            0x85c0	                           test eax, eax	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001123	            0x7e32	                           jle 0x4001157	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001125	      0xbb00000000	                              mov ebx, 0	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400112a	          0x4c63e3	                         movsxd r12, ebx	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x400112d	    0x488b85b85200	          mov rax, qword [rbp + 0x52b8] 	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x4001134	        0x4a8b3ce0	            mov rdi, qword [rax + r12*8]	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x4001138	      0xe800000000	                          call 0x400113d	       650	vtls.c	FUNCTION_29	IF_1	FOR_1	CALL_1
0x400113d	    0x488b85b85200	          mov rax, qword [rbp + 0x52b8] 	       651	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001144	    0x4ac704e00000	              mov qword [rax + r12*8], 0	       651	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400114c	          0x83c301	                              add ebx, 1	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x400114f	    0x399db0520000	          cmp dword [rbp + 0x52b0], ebx 	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001155	            0x7fd3	                            jg 0x400112a	       649	vtls.c	FUNCTION_29	IF_1	FOR_1
0x4001157	    0x488bbdb85200	          mov rdi, qword [rbp + 0x52b8] 	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x400115e	    0x488b05000000	            mov rax, qword [0x04001165] 	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x4001165	            0xff10	                        call qword [rax]	       654	vtls.c	FUNCTION_29	IF_1	CALL_2
0x4001167	    0x48c785b85200	            mov qword [rbp + 0x52b8], 0 	       655	vtls.c	FUNCTION_29	IF_1
0x4001172	    0xc785b0520000	            mov dword [rbp + 0x52b0], 0 	       656	vtls.c	FUNCTION_29	IF_1
0x400117c	              0x5b	                                 pop rbx	       658	vtls.c	FUNCTION_29
0x400117d	              0x5d	                                 pop rbp	       658	vtls.c	FUNCTION_29
0x400117e	            0x415c	                                 pop r12	       658	vtls.c	FUNCTION_29
0x4001180	            0xf3c3	                                     ret	       658	vtls.c	FUNCTION_29
multissl_init	CALL,4:WHILE,0:functions,0:IF,6:SWITCH,0:ELSE,0:DO,0:FOR,1	51
0x400007c	      0xb801000000	                              mov eax, 1	      1273	vtls.c	FUNCTION_61	IF_1
0x4000081	    0x488d15000000	                   lea rdx, [0x04000088]	      1272	vtls.c	FUNCTION_61	IF_1
0x4000088	    0x483915000000	            cmp qword [0x0400008f], rdx 	      1272	vtls.c	FUNCTION_61	IF_1
0x400008f	     0xf85b5000000	                           jne 0x400014a	      1272	vtls.c	FUNCTION_61	IF_1
0x4000095	          0x4885ff	                           test rdi, rdi	      1275	vtls.c	FUNCTION_61	IF_2
0x4000098	            0x740d	                            je 0x40000a7	      1275	vtls.c	FUNCTION_61	IF_2
0x400009a	    0x48893d000000	            mov qword [0x040000a1], rdi 	      1276	vtls.c	FUNCTION_61	IF_2
0x40000a1	      0xb800000000	                              mov eax, 0	      1277	vtls.c	FUNCTION_61	IF_2
0x40000a6	              0xc3	                                     ret	      1302	vtls.c	FUNCTION_61
0x40000a7	      0xb801000000	                              mov eax, 1	      1281	vtls.c	FUNCTION_61	IF_3
0x40000ac	    0x48833d000000	               cmp qword [0x040000b4], 0	      1280	vtls.c	FUNCTION_61	IF_3
0x40000b4	     0xf8490000000	                            je 0x400014a	      1280	vtls.c	FUNCTION_61	IF_3
0x40000ba	            0x4154	                                push r12	      1267	vtls.c	FUNCTION_61
0x40000bc	              0x55	                                push rbp	      1267	vtls.c	FUNCTION_61
0x40000bd	              0x53	                                push rbx	      1267	vtls.c	FUNCTION_61
0x40000be	    0x488d3d000000	                   lea rdi, [0x040000c5]	      1283	vtls.c	FUNCTION_61	CALL_1
0x40000c5	      0xe800000000	                          call 0x40000ca	      1283	vtls.c	FUNCTION_61	CALL_1
0x40000ca	          0x4889c5	                            mov rbp, rax	      1283	vtls.c	FUNCTION_61	CALL_1
0x40000cd	          0x4885c0	                           test rax, rax	      1288	vtls.c	FUNCTION_61	IF_5
0x40000d0	            0x7459	                            je 0x400012b	      1288	vtls.c	FUNCTION_61	IF_5
0x40000d2	    0x488b05000000	            mov rax, qword [0x040000d9] 	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40000d9	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40000dc	            0x744d	                            je 0x400012b	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40000de	      0xbb00000000	                              mov ebx, 0	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x40000e3	        0x488b7008	                mov rsi, qword [rax + 8]	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40000e7	          0x4889ef	                            mov rdi, rbp	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40000ea	      0xe800000000	                          call 0x40000ef	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40000ef	            0x85c0	                           test eax, eax	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40000f1	            0x7424	                            je 0x4000117	      1290	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_2
0x40000f3	          0x4c63e3	                         movsxd r12, ebx	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x40000f6	    0x488d05000000	                   lea rax, [0x040000fd]	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x40000fd	        0x4a8b04e0	            mov rax, qword [rax + r12*8]	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000101	    0x488905000000	            mov qword [0x04000108], rax 	      1291	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000108	          0x4889ef	                            mov rdi, rbp	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x400010b	      0xe800000000	                          call 0x4000110	      1292	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6	CALL_3
0x4000110	      0xb800000000	                              mov eax, 0	      1293	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000115	            0xeb2f	                           jmp 0x4000146	      1293	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x4000117	        0x4883c301	                              add rbx, 1	      1293	vtls.c	FUNCTION_61	IF_5	FOR_1	IF_6
0x400011b	    0x488d05000000	                   lea rax, [0x04000122]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000122	        0x488b04d8	            mov rax, qword [rax + rbx*8]	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000126	          0x4885c0	                           test rax, rax	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x4000129	            0x75b8	                           jne 0x40000e3	      1289	vtls.c	FUNCTION_61	IF_5	FOR_1
0x400012b	    0x488b05000000	            mov rax, qword [0x04000132] 	      1299	vtls.c	FUNCTION_61
0x4000132	    0x488905000000	            mov qword [0x04000139], rax 	      1299	vtls.c	FUNCTION_61
0x4000139	          0x4889ef	                            mov rdi, rbp	      1300	vtls.c	FUNCTION_61	CALL_4
0x400013c	      0xe800000000	                          call 0x4000141	      1300	vtls.c	FUNCTION_61	CALL_4
0x4000141	      0xb800000000	                              mov eax, 0	      1301	vtls.c	FUNCTION_61
0x4000146	              0x5b	                                 pop rbx	      1302	vtls.c	FUNCTION_61
0x4000147	              0x5d	                                 pop rbp	      1302	vtls.c	FUNCTION_61
0x4000148	            0x415c	                                 pop r12	      1302	vtls.c	FUNCTION_61
0x400014a	            0xf3c3	                                     ret	      1302	vtls.c	FUNCTION_61
ssl_prefs_check	CALL,2:WHILE,0:functions,0:IF,2:SWITCH,1:ELSE,0:DO,0:FOR,0	27
0x400046b	        0x4883ec08	                              sub rsp, 8	       183	vtls.c	FUNCTION_7
0x400046f	    0x488b8fe80500	           mov rcx, qword [rdi + 0x5e8] 	       185	vtls.c	FUNCTION_7
0x4000476	        0x4883f907	                              cmp rcx, 7	       186	vtls.c	FUNCTION_7	IF_1
0x400047a	            0x7618	                           jbe 0x4000494	       186	vtls.c	FUNCTION_7	IF_1
0x400047c	    0x488d35000000	                   lea rsi, [0x04000483]	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000483	      0xb800000000	                              mov eax, 0	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x4000488	      0xe800000000	                          call 0x400048d	       187	vtls.c	FUNCTION_7	IF_1	CALL_1
0x400048d	      0xb800000000	                              mov eax, 0	       188	vtls.c	FUNCTION_7	IF_1
0x4000492	            0xeb42	                           jmp 0x40004d6	       188	vtls.c	FUNCTION_7	IF_1
0x4000494	    0x488b87f00500	           mov rax, qword [rdi + 0x5f0] 	       191	vtls.c	FUNCTION_7	SWITCH_1
0x400049b	          0x4885c0	                           test rax, rax	       191	vtls.c	FUNCTION_7	SWITCH_1
0x400049e	            0x7431	                            je 0x40004d1	       191	vtls.c	FUNCTION_7	SWITCH_1
0x40004a0	    0x483d00000100	                        cmp rax, 0x10000	       191	vtls.c	FUNCTION_7	SWITCH_1
0x40004a6	            0x7429	                            je 0x40004d1	       191	vtls.c	FUNCTION_7	SWITCH_1
0x40004a8	        0x48c1f810	                           sar rax, 0x10	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004ac	          0x4889c2	                            mov rdx, rax	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004af	      0xb801000000	                              mov eax, 1	       203	vtls.c	FUNCTION_7
0x40004b4	          0x4839d1	                            cmp rcx, rdx	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004b7	            0x7e1d	                           jle 0x40004d6	       197	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004b9	    0x488d35000000	                   lea rsi, [0x040004c0]	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x40004c0	      0xb800000000	                              mov eax, 0	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x40004c5	      0xe800000000	                          call 0x40004ca	       198	vtls.c	FUNCTION_7	SWITCH_1	IF_2	CALL_2
0x40004ca	      0xb800000000	                              mov eax, 0	       199	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004cf	            0xeb05	                           jmp 0x40004d6	       199	vtls.c	FUNCTION_7	SWITCH_1	IF_2
0x40004d1	      0xb801000000	                              mov eax, 1	       203	vtls.c	FUNCTION_7
0x40004d6	        0x4883c408	                              add rsp, 8	       204	vtls.c	FUNCTION_7
0x40004da	              0xc3	                                     ret	       204	vtls.c	FUNCTION_7
Curl_none_cert_status_request	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x400005e	      0xb800000000	                              mov eax, 0	      1047	vtls.c	FUNCTION_48
0x4000063	              0xc3	                                     ret	      1047	vtls.c	FUNCTION_48
Curl_pin_peer_pubkey	CALL,29:WHILE,0:functions,0:IF,22:SWITCH,0:ELSE,0:DO,2:FOR,0	305
0x4001304	            0x4157	                                push r15	       805	vtls.c	FUNCTION_35
0x4001306	            0x4156	                                push r14	       805	vtls.c	FUNCTION_35
0x4001308	            0x4155	                                push r13	       805	vtls.c	FUNCTION_35
0x400130a	            0x4154	                                push r12	       805	vtls.c	FUNCTION_35
0x400130c	              0x55	                                push rbp	       805	vtls.c	FUNCTION_35
0x400130d	              0x53	                                push rbx	       805	vtls.c	FUNCTION_35
0x400130e	        0x4883ec38	                           sub rsp, 0x38	       805	vtls.c	FUNCTION_35
0x4001312	    0x64488b042528	                mov rax, qword fs:[0x28]	       805	vtls.c	FUNCTION_35
0x400131b	      0x4889442428	             mov qword [rsp + 0x28], rax	       805	vtls.c	FUNCTION_35
0x4001320	            0x31c0	                            xor eax, eax	       805	vtls.c	FUNCTION_35
0x4001322	    0x48c744241000	               mov qword [rsp + 0x10], 0	       807	vtls.c	FUNCTION_35
0x400132b	          0x4885f6	                           test rsi, rsi	       818	vtls.c	FUNCTION_35	IF_1
0x400132e	     0xf8443040000	                            je 0x4001777	       818	vtls.c	FUNCTION_35	IF_1
0x4001334	          0x4989fd	                            mov r13, rdi	       818	vtls.c	FUNCTION_35	IF_1
0x4001337	          0x4989f4	                            mov r12, rsi	       818	vtls.c	FUNCTION_35	IF_1
0x400133a	          0x4889d3	                            mov rbx, rdx	       818	vtls.c	FUNCTION_35	IF_1
0x400133d	          0x4889cd	                            mov rbp, rcx	       818	vtls.c	FUNCTION_35	IF_1
0x4001340	          0x4885d2	                           test rdx, rdx	       820	vtls.c	FUNCTION_35	IF_2
0x4001343	     0xf8435040000	                            je 0x400177e	       820	vtls.c	FUNCTION_35	IF_2
0x4001349	          0x4885c9	                           test rcx, rcx	       820	vtls.c	FUNCTION_35	IF_2
0x400134c	     0xf842c040000	                            je 0x400177e	       820	vtls.c	FUNCTION_35	IF_2
0x4001352	      0xb908000000	                              mov ecx, 8	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001357	    0x488d3d000000	                   lea rdi, [0x0400135e]	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x400135e	            0xf3a6	  repe cmpsb byte [rsi], byte ptr [rdi] 	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001360	           0xf97c2	                                 seta dl	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001363	           0xf92c0	                                 setb al	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001366	            0x38c2	                              cmp dl, al	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x4001368	     0xf85f0010000	                           jne 0x400155e	       824	vtls.c	FUNCTION_35	IF_3	CALL_1
0x400136e	      0xb85a000000	                           mov eax, 0x5a	       827	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001373	    0x488b15000000	            mov rdx, qword [0x0400137a] 	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x400137a	    0x4883bab80000	               cmp qword [rdx + 0xb8], 0	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001382	     0xf84fb030000	                            je 0x4001783	       825	vtls.c	FUNCTION_35	IF_3	IF_4
0x4001388	      0xbf20000000	                           mov edi, 0x20	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x400138d	    0x488b05000000	            mov rax, qword [0x04001394] 	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001394	            0xff10	                        call qword [rax]	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001396	          0x4989c6	                            mov r14, rax	       831	vtls.c	FUNCTION_35	IF_3	CALL_2
0x4001399	      0xb81b000000	                           mov eax, 0x1b	       833	vtls.c	FUNCTION_35	IF_3	IF_5
0x400139e	          0x4d85f6	                           test r14, r14	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x40013a1	     0xf84dc030000	                            je 0x4001783	       832	vtls.c	FUNCTION_35	IF_3	IF_5
0x40013a7	      0xb920000000	                           mov ecx, 0x20	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013ac	          0x4c89f2	                            mov rdx, r14	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013af	          0x4889ee	                            mov rsi, rbp	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013b2	          0x4889df	                            mov rdi, rbx	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013b5	    0x488b05000000	            mov rax, qword [0x040013bc] 	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013bc	    0xff90b8000000	                 call qword [rax + 0xb8]	       834	vtls.c	FUNCTION_35	IF_3	CALL_3
0x40013c2	            0x85c0	                           test eax, eax	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x40013c4	     0xf85b9030000	                           jne 0x4001783	       837	vtls.c	FUNCTION_35	IF_3	IF_6
0x40013ca	      0x488d4c2420	                   lea rcx, [rsp + 0x20]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013cf	      0x4c8d442418	                    lea r8, [rsp + 0x18]	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013d4	      0xba20000000	                           mov edx, 0x20	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013d9	          0x4c89f6	                            mov rsi, r14	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013dc	          0x4c89ef	                            mov rdi, r13	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013df	      0xe800000000	                          call 0x40013e4	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013e4	            0x89c3	                            mov ebx, eax	       840	vtls.c	FUNCTION_35	IF_3	CALL_4
0x40013e6	          0x4c89f7	                            mov rdi, r14	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x40013e9	    0x488b05000000	            mov rax, qword [0x040013f0] 	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x40013f0	            0xff10	                        call qword [rax]	       843	vtls.c	FUNCTION_35	IF_3	CALL_5
0x40013f2	            0x89d8	                            mov eax, ebx	       846	vtls.c	FUNCTION_35	IF_3	IF_7
0x40013f4	            0x85db	                           test ebx, ebx	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x40013f6	     0xf8587030000	                           jne 0x4001783	       845	vtls.c	FUNCTION_35	IF_3	IF_7
0x40013fc	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001401	    0x488d35000000	                   lea rsi, [0x04001408]	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001408	          0x4c89ef	                            mov rdi, r13	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x400140b	      0xb800000000	                              mov eax, 0	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001410	      0xe800000000	                          call 0x4001415	       848	vtls.c	FUNCTION_35	IF_3	CALL_6
0x4001415	      0xb800000000	                              mov eax, 0	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x400141a	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001421	          0x4c89e7	                            mov rdi, r12	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001424	            0xf2ae	              repne scasb al, byte [rdi]	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001426	          0x4889cb	                            mov rbx, rcx	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x4001429	          0x48f7d3	                                 not rbx	       851	vtls.c	FUNCTION_35	IF_3	CALL_7
0x400142c	          0x4889df	                            mov rdi, rbx	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x400142f	    0x488b05000000	            mov rax, qword [0x04001436] 	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001436	            0xff10	                        call qword [rax]	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x4001438	      0x4889442408	                mov qword [rsp + 8], rax	       852	vtls.c	FUNCTION_35	IF_3	CALL_8
0x400143d	          0x4885c0	                           test rax, rax	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001440	            0x7518	                           jne 0x400145a	       853	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001442	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x4001447	    0x488b05000000	            mov rax, qword [0x0400144e] 	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x400144e	            0xff10	                        call qword [rax]	       854	vtls.c	FUNCTION_35	IF_3	IF_8	CALL_9
0x4001450	      0xb81b000000	                           mov eax, 0x1b	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x4001455	      0xe929030000	                           jmp 0x4001783	       855	vtls.c	FUNCTION_35	IF_3	IF_8
0x400145a	          0x4889da	                            mov rdx, rbx	        53	string3.h	FUNCTION_64	CALL_3
0x400145d	          0x4c89e6	                            mov rsi, r12	        53	string3.h	FUNCTION_64	CALL_3
0x4001460	      0x488b5c2408	                mov rbx, qword [rsp + 8]	        53	string3.h	FUNCTION_64	CALL_3
0x4001465	          0x4889df	                            mov rdi, rbx	        53	string3.h	FUNCTION_64	CALL_3
0x4001468	      0xe800000000	                          call 0x400146d	        53	string3.h	FUNCTION_64	CALL_3
0x400146d	    0x4c8d25000000	                   lea r12, [0x04001474]	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001474	    0x49c7c6ffffff	             mov r14, 0xffffffffffffffff	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x400147b	    0x41bd00000000	                             mov r13d, 0	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x4001481	    0x4c8d3d000000	                   lea r15, [0x04001488]	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001488	          0x4c89e6	                            mov rsi, r12	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x400148b	          0x4889df	                            mov rdi, rbx	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x400148e	      0xe800000000	                          call 0x4001493	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001493	          0x4889c5	                            mov rbp, rax	       861	vtls.c	FUNCTION_35	IF_3	DO_1	CALL_11
0x4001496	          0x4885c0	                           test rax, rax	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x4001499	            0x7428	                            je 0x40014c3	       866	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x400149b	          0xc60000	                       mov byte [rax], 0	       867	vtls.c	FUNCTION_35	IF_3	DO_1	IF_9
0x400149e	        0x488d7308	                      lea rsi, [rbx + 8]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014a2	          0x4c89f1	                            mov rcx, r14	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014a5	          0x4889f7	                            mov rdi, rsi	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014a8	          0x4489e8	                           mov eax, r13d	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014ab	            0xf2ae	              repne scasb al, byte [rdi]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014ad	          0x48f7d1	                                 not rcx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014b0	        0x4883e901	                              sub rcx, 1	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014b4	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014b9	          0x4839d1	                            cmp rcx, rdx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014bc	            0x7538	                           jne 0x40014f6	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014be	      0xe9da020000	                           jmp 0x400179d	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014c3	        0x488d7308	                      lea rsi, [rbx + 8]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014c7	          0x4c89f1	                            mov rcx, r14	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014ca	          0x4889f7	                            mov rdi, rsi	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014cd	          0x4489e8	                           mov eax, r13d	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014d0	            0xf2ae	              repne scasb al, byte [rdi]	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014d2	          0x48f7d1	                                 not rcx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014d5	        0x4883e901	                              sub rcx, 1	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014d9	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014de	          0x4839d1	                            cmp rcx, rdx	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014e1	            0x753a	                           jne 0x400151d	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014e3	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40014e8	      0xe800000000	                          call 0x40014ed	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40014ed	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014ef	            0x7433	                            je 0x4001524	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40014f1	          0x4885ed	                           test rbp, rbp	       880	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11
0x40014f4	            0x7435	                            je 0x400152b	       880	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11
0x40014f6	        0xc645003b	                    mov byte [rbp], 0x3b	       881	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11
0x40014fa	          0x4c89fe	                            mov rsi, r15	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x40014fd	          0x4889ef	                            mov rdi, rbp	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001500	      0xe800000000	                          call 0x4001505	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001505	          0x4889c3	                            mov rbx, rax	       882	vtls.c	FUNCTION_35	IF_3	DO_1	IF_11	CALL_14
0x4001508	          0x4885ed	                           test rbp, rbp	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x400150b	            0x7409	                            je 0x4001516	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x400150d	          0x4885c0	                           test rax, rax	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001510	     0xf8572ffffff	                           jne 0x4001488	       884	vtls.c	FUNCTION_35	IF_3	DO_1
0x4001516	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x400151b	            0xeb1a	                           jmp 0x4001537	       811	vtls.c	FUNCTION_35
0x400151d	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001522	            0xeb13	                           jmp 0x4001537	       811	vtls.c	FUNCTION_35
0x4001524	      0xbb00000000	                              mov ebx, 0	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x4001529	            0xeb0c	                           jmp 0x4001537	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x400152b	      0xbb5a000000	                           mov ebx, 0x5a	       811	vtls.c	FUNCTION_35
0x4001530	            0xeb05	                           jmp 0x4001537	       811	vtls.c	FUNCTION_35
0x4001532	      0xbb00000000	                              mov ebx, 0	       872	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10
0x4001537	    0x488b2d000000	            mov rbp, qword [0x0400153e] 	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x400153e	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001543	          0xff5500	                        call qword [rbp]	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x4001546	    0x48c744242000	               mov qword [rsp + 0x20], 0	       885	vtls.c	FUNCTION_35	IF_3	CALL_15
0x400154f	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001554	          0xff5500	                        call qword [rbp]	       886	vtls.c	FUNCTION_35	IF_3	CALL_16
0x4001557	            0x89d8	                            mov eax, ebx	       887	vtls.c	FUNCTION_35	IF_3
0x4001559	      0xe925020000	                           jmp 0x4001783	       887	vtls.c	FUNCTION_35	IF_3
0x400155e	    0x488d35000000	                   lea rsi, [0x04001565]	       890	vtls.c	FUNCTION_35	CALL_17
0x4001565	          0x4c89e7	                            mov rdi, r12	       890	vtls.c	FUNCTION_35	CALL_17
0x4001568	      0xe800000000	                          call 0x400156d	       890	vtls.c	FUNCTION_35	CALL_17
0x400156d	          0x4989c4	                            mov r12, rax	       890	vtls.c	FUNCTION_35	CALL_17
0x4001570	      0xb85a000000	                           mov eax, 0x5a	       892	vtls.c	FUNCTION_35	IF_12
0x4001575	          0x4d85e4	                           test r12, r12	       891	vtls.c	FUNCTION_35	IF_12
0x4001578	     0xf8405020000	                            je 0x4001783	       891	vtls.c	FUNCTION_35	IF_12
0x400157e	      0xba02000000	                              mov edx, 2	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001583	      0xbe00000000	                              mov esi, 0	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001588	          0x4c89e7	                            mov rdi, r12	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x400158b	      0xe800000000	                          call 0x4001590	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x4001590	    0x41bf5a000000	                          mov r15d, 0x5a	       811	vtls.c	FUNCTION_35
0x4001596	    0x41bd00000000	                             mov r13d, 0	       807	vtls.c	FUNCTION_35
0x400159c	            0x85c0	                           test eax, eax	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x400159e	     0xf85aa010000	                           jne 0x400174e	       896	vtls.c	FUNCTION_35	DO_2	IF_13	CALL_18
0x40015a4	          0x4c89e7	                            mov rdi, r12	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x40015a7	      0xe800000000	                          call 0x40015ac	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x40015ac	          0x4989c6	                            mov r14, rax	       898	vtls.c	FUNCTION_35	DO_2	CALL_19
0x40015af	      0xba00000000	                              mov edx, 0	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015b4	      0xbe00000000	                              mov esi, 0	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015b9	          0x4c89e7	                            mov rdi, r12	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015bc	      0xe800000000	                          call 0x40015c1	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015c1	            0x85c0	                           test eax, eax	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015c3	     0xf8571010000	                           jne 0x400173a	       899	vtls.c	FUNCTION_35	DO_2	IF_14	CALL_20
0x40015c9	    0x4981fe000010	                       cmp r14, 0x100000	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x40015d0	     0xf8778010000	                            ja 0x400174e	       901	vtls.c	FUNCTION_35	DO_2	IF_15
0x40015d6	          0x4c89f7	                            mov rdi, r14	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x40015d9	      0xe800000000	                          call 0x40015de	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x40015de	          0x4989c6	                            mov r14, rax	       908	vtls.c	FUNCTION_35	DO_2	CALL_21
0x40015e1	          0x4839c5	                            cmp rbp, rax	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x40015e4	     0xf8764010000	                            ja 0x400174e	       909	vtls.c	FUNCTION_35	DO_2	IF_16
0x40015ea	        0x488d7801	                      lea rdi, [rax + 1]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x40015ee	    0x488b05000000	            mov rax, qword [0x040015f5] 	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x40015f5	            0xff10	                        call qword [rax]	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x40015f7	          0x4989c5	                            mov r13, rax	       916	vtls.c	FUNCTION_35	DO_2	CALL_22
0x40015fa	          0x4885c0	                           test rax, rax	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x40015fd	     0xf8445010000	                            je 0x4001748	       917	vtls.c	FUNCTION_35	DO_2	IF_17
0x4001603	          0x4c89e1	                            mov rcx, r12	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001606	      0xba01000000	                              mov edx, 1	       295	stdio2.h	FUNCTION_90	CALL_9
0x400160b	          0x4c89f6	                            mov rsi, r14	       295	stdio2.h	FUNCTION_90	CALL_9
0x400160e	          0x4889c7	                            mov rdi, rax	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001611	      0xe800000000	                          call 0x4001616	       295	stdio2.h	FUNCTION_90	CALL_9
0x4001616	          0x83f801	                              cmp eax, 1	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x4001619	     0xf852f010000	                           jne 0x400174e	       921	vtls.c	FUNCTION_35	DO_2	IF_18	CALL_23
0x400161f	          0x4c39f5	                            cmp rbp, r14	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x4001622	            0x7520	                           jne 0x4001644	       925	vtls.c	FUNCTION_35	DO_2	IF_19
0x4001624	          0x4889ea	                            mov rdx, rbp	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001627	          0x4c89ee	                            mov rsi, r13	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x400162a	          0x4889df	                            mov rdi, rbx	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x400162d	      0xe800000000	                          call 0x4001632	       926	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20	CALL_24
0x4001632	          0x83f801	                              cmp eax, 1	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001635	          0x4519ff	                          sbb r15d, r15d	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001638	          0x41f7d7	                                not r15d	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x400163b	        0x4183e75a	                          and r15d, 0x5a	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x400163f	      0xe90a010000	                           jmp 0x400174e	       927	vtls.c	FUNCTION_35	DO_2	IF_19	IF_20
0x4001644	    0x43c644350000	                 mov byte [r13 + r14], 0	       935	vtls.c	FUNCTION_35	DO_2
0x400164a	    0x488d35000000	                   lea rsi, [0x04001651]	       755	vtls.c	FUNCTION_34	CALL_1
0x4001651	          0x4c89ef	                            mov rdi, r13	       755	vtls.c	FUNCTION_34	CALL_1
0x4001654	      0xe800000000	                          call 0x4001659	       755	vtls.c	FUNCTION_34	CALL_1
0x4001659	          0x4885c0	                           test rax, rax	       756	vtls.c	FUNCTION_34	IF_2
0x400165c	     0xf8433010000	                            je 0x4001795	       756	vtls.c	FUNCTION_34	IF_2
0x4001662	          0x4d89ef	                            mov r15, r13	       759	vtls.c	FUNCTION_34
0x4001665	          0x4989c6	                            mov r14, rax	       761	vtls.c	FUNCTION_34	IF_3
0x4001668	          0x4d29ee	                            sub r14, r13	       761	vtls.c	FUNCTION_34	IF_3
0x400166b	            0x740a	                            je 0x4001677	       761	vtls.c	FUNCTION_34	IF_3
0x400166d	        0x8078ff0a	                 cmp byte [rax - 1], 0xa	       761	vtls.c	FUNCTION_34	IF_3
0x4001671	     0xf851e010000	                           jne 0x4001795	       761	vtls.c	FUNCTION_34	IF_3
0x4001677	        0x4983c61a	                           add r14, 0x1a	       765	vtls.c	FUNCTION_34
0x400167b	      0x4b8d7c3500	                    lea rdi, [r13 + r14]	       768	vtls.c	FUNCTION_34	CALL_2
0x4001680	    0x488d35000000	                   lea rsi, [0x04001687]	       768	vtls.c	FUNCTION_34	CALL_2
0x4001687	      0xe800000000	                          call 0x400168c	       768	vtls.c	FUNCTION_34	CALL_2
0x400168c	          0x4885c0	                           test rax, rax	       769	vtls.c	FUNCTION_34	IF_4
0x400168f	     0xf8400010000	                            je 0x4001795	       769	vtls.c	FUNCTION_34	IF_4
0x4001695	          0x4c29f8	                            sub rax, r15	       772	vtls.c	FUNCTION_34
0x4001698	      0x4889442408	                mov qword [rsp + 8], rax	       772	vtls.c	FUNCTION_34
0x400169d	          0x4c29f0	                            sub rax, r14	       774	vtls.c	FUNCTION_34	CALL_3
0x40016a0	        0x488d7801	                      lea rdi, [rax + 1]	       774	vtls.c	FUNCTION_34	CALL_3
0x40016a4	    0x488b05000000	            mov rax, qword [0x040016ab] 	       774	vtls.c	FUNCTION_34	CALL_3
0x40016ab	            0xff10	                        call qword [rax]	       774	vtls.c	FUNCTION_34	CALL_3
0x40016ad	          0x4989c7	                            mov r15, rax	       774	vtls.c	FUNCTION_34	CALL_3
0x40016b0	          0x4885c0	                           test rax, rax	       775	vtls.c	FUNCTION_34	IF_5
0x40016b3	     0xf84dc000000	                            je 0x4001795	       775	vtls.c	FUNCTION_34	IF_5
0x40016b9	      0xb800000000	                              mov eax, 0	       775	vtls.c	FUNCTION_34	IF_5
0x40016be	            0xeb1c	                           jmp 0x40016dc	       775	vtls.c	FUNCTION_34	IF_5
0x40016c0	    0x430fb6543500	             movzx edx, byte [r13 + r14]	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016c6	          0x80fa0a	                             cmp dl, 0xa	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016c9	            0x740d	                            je 0x40016d8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016cb	          0x80fa0d	                             cmp dl, 0xd	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016ce	            0x7408	                            je 0x40016d8	       784	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016d0	        0x41881407	                mov byte [r15 + rax], dl	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016d4	        0x488d4001	                      lea rax, [rax + 1]	       785	vtls.c	FUNCTION_34	WHILE_1	IF_6
0x40016d8	        0x4983c601	                              add r14, 1	       786	vtls.c	FUNCTION_34	WHILE_1
0x40016dc	      0x4c39742408	                cmp qword [rsp + 8], r14	       783	vtls.c	FUNCTION_34	WHILE_1
0x40016e1	            0x77dd	                            ja 0x40016c0	       783	vtls.c	FUNCTION_34	WHILE_1
0x40016e3	      0x41c6040700	                 mov byte [r15 + rax], 0	       789	vtls.c	FUNCTION_34
0x40016e8	      0x488d542420	                   lea rdx, [rsp + 0x20]	       791	vtls.c	FUNCTION_34	CALL_4
0x40016ed	      0x488d742410	                   lea rsi, [rsp + 0x10]	       791	vtls.c	FUNCTION_34	CALL_4
0x40016f2	          0x4c89ff	                            mov rdi, r15	       791	vtls.c	FUNCTION_34	CALL_4
0x40016f5	      0xe800000000	                          call 0x40016fa	       791	vtls.c	FUNCTION_34	CALL_4
0x40016fa	          0x4189c6	                           mov r14d, eax	       791	vtls.c	FUNCTION_34	CALL_4
0x40016fd	          0x4c89ff	                            mov rdi, r15	       793	vtls.c	FUNCTION_34	CALL_5
0x4001700	    0x488b05000000	            mov rax, qword [0x04001707] 	       793	vtls.c	FUNCTION_34	CALL_5
0x4001707	            0xff10	                        call qword [rax]	       793	vtls.c	FUNCTION_34	CALL_5
0x4001709	    0x41bf5a000000	                          mov r15d, 0x5a	       811	vtls.c	FUNCTION_35
0x400170f	          0x4585f6	                         test r14d, r14d	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x4001712	            0x753a	                           jne 0x400174e	       938	vtls.c	FUNCTION_35	DO_2	IF_21
0x4001714	      0x483b6c2420	            cmp rbp, qword [rsp + 0x20] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001719	            0x7533	                           jne 0x400174e	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x400171b	          0x4889ea	                            mov rdx, rbp	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x400171e	      0x488b742410	            mov rsi, qword [rsp + 0x10] 	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001723	          0x4889df	                            mov rdi, rbx	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x4001726	      0xe800000000	                          call 0x400172b	       945	vtls.c	FUNCTION_35	DO_2	IF_22	CALL_26
0x400172b	          0x83f801	                              cmp eax, 1	       946	vtls.c	FUNCTION_35	DO_2	IF_22
0x400172e	          0x4519ff	                          sbb r15d, r15d	       946	vtls.c	FUNCTION_35	DO_2	IF_22
0x4001731	          0x41f7d7	                                not r15d	       946	vtls.c	FUNCTION_35	DO_2	IF_22
0x4001734	        0x4183e75a	                          and r15d, 0x5a	       946	vtls.c	FUNCTION_35	DO_2	IF_22
0x4001738	            0xeb14	                           jmp 0x400174e	       946	vtls.c	FUNCTION_35	DO_2	IF_22
0x400173a	    0x41bf5a000000	                          mov r15d, 0x5a	       811	vtls.c	FUNCTION_35
0x4001740	    0x41bd00000000	                             mov r13d, 0	       807	vtls.c	FUNCTION_35
0x4001746	            0xeb06	                           jmp 0x400174e	       807	vtls.c	FUNCTION_35
0x4001748	    0x41bf5a000000	                          mov r15d, 0x5a	       811	vtls.c	FUNCTION_35
0x400174e	    0x488b1d000000	            mov rbx, qword [0x04001755] 	       949	vtls.c	FUNCTION_35	CALL_27
0x4001755	          0x4c89ef	                            mov rdi, r13	       949	vtls.c	FUNCTION_35	CALL_27
0x4001758	            0xff13	                        call qword [rbx]	       949	vtls.c	FUNCTION_35	CALL_27
0x400175a	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       950	vtls.c	FUNCTION_35	CALL_28
0x400175f	            0xff13	                        call qword [rbx]	       950	vtls.c	FUNCTION_35	CALL_28
0x4001761	    0x48c744241000	               mov qword [rsp + 0x10], 0	       950	vtls.c	FUNCTION_35	CALL_28
0x400176a	          0x4c89e7	                            mov rdi, r12	       951	vtls.c	FUNCTION_35	CALL_29
0x400176d	      0xe800000000	                          call 0x4001772	       951	vtls.c	FUNCTION_35	CALL_29
0x4001772	          0x4489f8	                           mov eax, r15d	       953	vtls.c	FUNCTION_35
0x4001775	            0xeb0c	                           jmp 0x4001783	       953	vtls.c	FUNCTION_35
0x4001777	      0xb800000000	                              mov eax, 0	       819	vtls.c	FUNCTION_35	IF_1
0x400177c	            0xeb05	                           jmp 0x4001783	       819	vtls.c	FUNCTION_35	IF_1
0x400177e	      0xb85a000000	                           mov eax, 0x5a	       821	vtls.c	FUNCTION_35	IF_2
0x4001783	      0x488b742428	            mov rsi, qword [rsp + 0x28] 	       954	vtls.c	FUNCTION_35
0x4001788	    0x644833342528	                xor rsi, qword fs:[0x28]	       954	vtls.c	FUNCTION_35
0x4001791	            0x7426	                            je 0x40017b9	       954	vtls.c	FUNCTION_35
0x4001793	            0xeb1f	                           jmp 0x40017b4	       954	vtls.c	FUNCTION_35
0x4001795	    0x41bf5a000000	                          mov r15d, 0x5a	       811	vtls.c	FUNCTION_35
0x400179b	            0xebb1	                           jmp 0x400174e	       811	vtls.c	FUNCTION_35
0x400179d	      0x488b7c2420	            mov rdi, qword [rsp + 0x20] 	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40017a2	      0xe800000000	                          call 0x40017a7	       871	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_13
0x40017a7	            0x85c0	                           test eax, eax	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40017a9	     0xf8547fdffff	                           jne 0x40014f6	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40017af	      0xe97efdffff	                           jmp 0x4001532	       870	vtls.c	FUNCTION_35	IF_3	DO_1	IF_10	CALL_12
0x40017b4	      0xe800000000	                          call 0x40017b9	       954	vtls.c	FUNCTION_35
0x40017b9	        0x4883c438	                           add rsp, 0x38	       954	vtls.c	FUNCTION_35
0x40017bd	              0x5b	                                 pop rbx	       954	vtls.c	FUNCTION_35
0x40017be	              0x5d	                                 pop rbp	       954	vtls.c	FUNCTION_35
0x40017bf	            0x415c	                                 pop r12	       954	vtls.c	FUNCTION_35
0x40017c1	            0x415d	                                 pop r13	       954	vtls.c	FUNCTION_35
0x40017c3	            0x415e	                                 pop r14	       954	vtls.c	FUNCTION_35
0x40017c5	            0x415f	                                 pop r15	       954	vtls.c	FUNCTION_35
0x40017c7	              0xc3	                                     ret	       954	vtls.c	FUNCTION_35
Curl_none_check_cxn	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000048	      0xb8ffffffff	                     mov eax, 0xffffffff	      1014	vtls.c	FUNCTION_43
0x400004d	              0xc3	                                     ret	      1014	vtls.c	FUNCTION_43
Curl_ssl_connect_nonblocking	CALL,4:WHILE,0:functions,0:IF,4:SWITCH,0:ELSE,0:DO,0:FOR,0	41
0x40008b5	            0x4154	                                push r12	       259	vtls.c	FUNCTION_10
0x40008b7	              0x55	                                push rbp	       259	vtls.c	FUNCTION_10
0x40008b8	              0x53	                                push rbx	       259	vtls.c	FUNCTION_10
0x40008b9	          0x4889fb	                            mov rbx, rdi	       259	vtls.c	FUNCTION_10
0x40008bc	            0x89f5	                            mov ebp, esi	       259	vtls.c	FUNCTION_10
0x40008be	          0x4989d4	                            mov r12, rdx	       259	vtls.c	FUNCTION_10
0x40008c1	          0x4863c6	                         movsxd rax, esi	       261	vtls.c	FUNCTION_10	IF_1
0x40008c4	    0x80bc07b90300	         cmp byte [rdi + rax + 0x3b9], 0	       261	vtls.c	FUNCTION_10	IF_1
0x40008cc	            0x740b	                            je 0x40008d9	       261	vtls.c	FUNCTION_10	IF_1
0x40008ce	      0xe8aefaffff	         call sym.ssl_connect_init_proxy	       262	vtls.c	FUNCTION_10	IF_1	CALL_1
0x40008d3	            0x89c2	                            mov edx, eax	       264	vtls.c	FUNCTION_10	IF_1	IF_2
0x40008d5	            0x85c0	                           test eax, eax	       263	vtls.c	FUNCTION_10	IF_1	IF_2
0x40008d7	            0x7556	                           jne 0x400092f	       263	vtls.c	FUNCTION_10	IF_1	IF_2
0x40008d9	          0x488b3b	                    mov rdi, qword [rbx]	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x40008dc	      0xe88afbffff	                call sym.ssl_prefs_check	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x40008e1	      0xba23000000	                           mov edx, 0x23	       268	vtls.c	FUNCTION_10	IF_3
0x40008e6	            0x84c0	                             test al, al	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x40008e8	            0x7445	                            je 0x400092f	       267	vtls.c	FUNCTION_10	IF_3	CALL_2
0x40008ea	          0x4863c5	                         movsxd rax, ebp	       271	vtls.c	FUNCTION_10
0x40008ed	        0x488d0440	                  lea rax, [rax + rax*2]	       271	vtls.c	FUNCTION_10
0x40008f1	    0xc684c3900200	       mov byte [rbx + rax*8 + 0x290], 1	       271	vtls.c	FUNCTION_10
0x40008f9	          0x4c89e2	                            mov rdx, r12	       272	vtls.c	FUNCTION_10	CALL_3
0x40008fc	            0x89ee	                            mov esi, ebp	       272	vtls.c	FUNCTION_10	CALL_3
0x40008fe	          0x4889df	                            mov rdi, rbx	       272	vtls.c	FUNCTION_10	CALL_3
0x4000901	    0x488b05000000	            mov rax, qword [0x04000908] 	       272	vtls.c	FUNCTION_10	CALL_3
0x4000908	          0xff5068	                 call qword [rax + 0x68]	       272	vtls.c	FUNCTION_10	CALL_3
0x400090b	            0x89c2	                            mov edx, eax	       275	vtls.c	FUNCTION_10
0x400090d	            0x85c0	                           test eax, eax	       273	vtls.c	FUNCTION_10	IF_4
0x400090f	            0x751e	                           jne 0x400092f	       273	vtls.c	FUNCTION_10	IF_4
0x4000911	      0xba00000000	                              mov edx, 0	       275	vtls.c	FUNCTION_10
0x4000916	      0x41803c2400	                       cmp byte [r12], 0	       273	vtls.c	FUNCTION_10	IF_4
0x400091b	            0x7412	                            je 0x400092f	       273	vtls.c	FUNCTION_10	IF_4
0x400091d	      0xbe05000000	                              mov esi, 5	       274	vtls.c	FUNCTION_10	CALL_4
0x4000922	          0x488b3b	                    mov rdi, qword [rbx]	       274	vtls.c	FUNCTION_10	CALL_4
0x4000925	      0xe800000000	                          call 0x400092a	       274	vtls.c	FUNCTION_10	CALL_4
0x400092a	      0xba00000000	                              mov edx, 0	       275	vtls.c	FUNCTION_10
0x400092f	            0x89d0	                            mov eax, edx	       276	vtls.c	FUNCTION_10
0x4000931	              0x5b	                                 pop rbx	       276	vtls.c	FUNCTION_10
0x4000932	              0x5d	                                 pop rbp	       276	vtls.c	FUNCTION_10
0x4000933	            0x415c	                                 pop r12	       276	vtls.c	FUNCTION_10
0x4000935	              0xc3	                                     ret	       276	vtls.c	FUNCTION_10
Curl_ssl_addsessionid	CALL,12:WHILE,0:functions,0:IF,8:SWITCH,0:ELSE,4:DO,0:FOR,1	145
0x4000c80	            0x4157	                                push r15	       411	vtls.c	FUNCTION_16
0x4000c82	            0x4156	                                push r14	       411	vtls.c	FUNCTION_16
0x4000c84	            0x4155	                                push r13	       411	vtls.c	FUNCTION_16
0x4000c86	            0x4154	                                push r12	       411	vtls.c	FUNCTION_16
0x4000c88	              0x55	                                push rbp	       411	vtls.c	FUNCTION_16
0x4000c89	              0x53	                                push rbx	       411	vtls.c	FUNCTION_16
0x4000c8a	        0x4883ec38	                           sub rsp, 0x38	       411	vtls.c	FUNCTION_16
0x4000c8e	          0x4989fc	                            mov r12, rdi	       411	vtls.c	FUNCTION_16
0x4000c91	      0x4889742420	             mov qword [rsp + 0x20], rsi	       411	vtls.c	FUNCTION_16
0x4000c96	      0x4889542428	             mov qword [rsp + 0x28], rdx	       411	vtls.c	FUNCTION_16
0x4000c9b	          0x4c8b2f	                    mov r13, qword [rdi]	       413	vtls.c	FUNCTION_16
0x4000c9e	    0x498b9d504d00	          mov rbx, qword [r13 + 0x4d50] 	       414	vtls.c	FUNCTION_16
0x4000ca5	        0x488b6b28	            mov rbp, qword [rbx + 0x28] 	       415	vtls.c	FUNCTION_16
0x4000ca9	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       420	vtls.c	FUNCTION_16	CALL_1
0x4000cb0	     0xf85d4010000	                           jne 0x4000e8a	       420	vtls.c	FUNCTION_16	CALL_1
0x4000cb6	          0x4863c9	                         movsxd rcx, ecx	       420	vtls.c	FUNCTION_16	CALL_1
0x4000cb9	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       420	vtls.c	FUNCTION_16	CALL_1
0x4000cc1	     0xf85c3010000	                           jne 0x4000e8a	       420	vtls.c	FUNCTION_16	CALL_1
0x4000cc7	      0xe9e7010000	                           jmp 0x4000eb3	       420	vtls.c	FUNCTION_16	CALL_1
0x4000ccc	            0xffd0	                                call rax	       427	vtls.c	FUNCTION_16	CALL_4
0x4000cce	          0x4989c7	                            mov r15, rax	       427	vtls.c	FUNCTION_16	CALL_4
0x4000cd1	      0xba1b000000	                           mov edx, 0x1b	       429	vtls.c	FUNCTION_16	IF_1
0x4000cd6	          0x4885c0	                           test rax, rax	       428	vtls.c	FUNCTION_16	IF_1
0x4000cd9	     0xf84fb010000	                            je 0x4000eda	       428	vtls.c	FUNCTION_16	IF_1
0x4000cdf	    0x48c744241000	               mov qword [rsp + 0x10], 0	       439	vtls.c	FUNCTION_16	ELSE_1
0x4000ce8	    0x4180bc249b03	               cmp byte [r12 + 0x39b], 0	       431	vtls.c	FUNCTION_16	IF_2
0x4000cf1	            0x7431	                            je 0x4000d24	       431	vtls.c	FUNCTION_16	IF_2
0x4000cf3	    0x498bbc240001	           mov rdi, qword [r12 + 0x100] 	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4000cfb	    0x488b05000000	            mov rax, qword [0x04000d02] 	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4000d02	            0xff10	                        call qword [rax]	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4000d04	      0x4889442410	             mov qword [rsp + 0x10], rax	       432	vtls.c	FUNCTION_16	IF_2	CALL_5
0x4000d09	          0x4885c0	                           test rax, rax	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4000d0c	            0x7516	                           jne 0x4000d24	       433	vtls.c	FUNCTION_16	IF_2	IF_3
0x4000d0e	          0x4c89ff	                            mov rdi, r15	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x4000d11	    0x488b05000000	            mov rax, qword [0x04000d18] 	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x4000d18	            0xff10	                        call qword [rax]	       434	vtls.c	FUNCTION_16	IF_2	IF_3	CALL_6
0x4000d1a	      0xba1b000000	                           mov edx, 0x1b	       435	vtls.c	FUNCTION_16	IF_2	IF_3
0x4000d1f	      0xe9b6010000	                           jmp 0x4000eda	       435	vtls.c	FUNCTION_16	IF_2	IF_3
0x4000d24	    0xc744241cffff	     mov dword [rsp + 0x1c], 0xffffffff 	       444	vtls.c	FUNCTION_16	ELSE_2
0x4000d2c	    0x4180bc249c03	               cmp byte [r12 + 0x39c], 0	       441	vtls.c	FUNCTION_16	IF_4
0x4000d35	            0x740c	                            je 0x4000d43	       441	vtls.c	FUNCTION_16	IF_4
0x4000d37	    0x418b84249c01	           mov eax, dword [r12 + 0x19c] 	       442	vtls.c	FUNCTION_16	IF_4
0x4000d3f	        0x8944241c	             mov dword [rsp + 0x1c], eax	       442	vtls.c	FUNCTION_16	IF_4
0x4000d43	    0x4d8bb5b80000	            mov r14, qword [r13 + 0xb8] 	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d4a	          0x4d85f6	                           test r14, r14	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d4d	            0x740f	                            je 0x4000d5e	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d4f	        0x41f60610	                   test byte [r14], 0x10	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d53	            0x7409	                            je 0x4000d5e	       450	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d55	    0x4981c6c00000	                           add r14, 0xc0	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d5c	            0xeb07	                           jmp 0x4000d65	       451	vtls.c	FUNCTION_16	ELSE_2	IF_5
0x4000d5e	    0x4d8db5584d00	                 lea r14, [r13 + 0x4d58]	       454	vtls.c	FUNCTION_16	ELSE_3
0x4000d65	    0x498bbd780700	           mov rdi, qword [r13 + 0x778] 	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d6c	        0x4883ff01	                              cmp rdi, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d70	            0x764d	                           jbe 0x4000dbf	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d72	    0x498b85504d00	          mov rax, qword [r13 + 0x4d50] 	       459	vtls.c	FUNCTION_16	FOR_1
0x4000d79	    0x488d88880000	                   lea rcx, [rax + 0x88]	       459	vtls.c	FUNCTION_16	FOR_1
0x4000d80	    0x4883b8a00000	               cmp qword [rax + 0xa0], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d88	            0x7435	                            je 0x4000dbf	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d8a	    0x480510010000	                          add rax, 0x110	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d90	      0xba01000000	                              mov edx, 1	       458	vtls.c	FUNCTION_16	FOR_1
0x4000d95	        0x488b7128	            mov rsi, qword [rcx + 0x28] 	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4000d99	          0x4839ee	                            cmp rsi, rbp	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4000d9c	            0x7d06	                           jge 0x4000da4	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4000d9e	          0x4889f5	                            mov rbp, rsi	       461	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4000da1	          0x4889cb	                            mov rbx, rcx	       460	vtls.c	FUNCTION_16	FOR_1	IF_6
0x4000da4	        0x4883c201	                              add rdx, 1	       459	vtls.c	FUNCTION_16	FOR_1
0x4000da8	          0x4839fa	                            cmp rdx, rdi	       458	vtls.c	FUNCTION_16	FOR_1
0x4000dab	            0x7418	                            je 0x4000dc5	       458	vtls.c	FUNCTION_16	FOR_1
0x4000dad	          0x4889c1	                            mov rcx, rax	       459	vtls.c	FUNCTION_16	FOR_1
0x4000db0	    0x480588000000	                           add rax, 0x88	       459	vtls.c	FUNCTION_16	FOR_1
0x4000db6	      0x4883789000	               cmp qword [rax - 0x70], 0	       458	vtls.c	FUNCTION_16	FOR_1
0x4000dbb	            0x75d8	                           jne 0x4000d95	       458	vtls.c	FUNCTION_16	FOR_1
0x4000dbd	            0xeb15	                           jmp 0x4000dd4	       458	vtls.c	FUNCTION_16	FOR_1
0x4000dbf	        0x4883ff01	                              cmp rdi, 1	       465	vtls.c	FUNCTION_16	IF_7
0x4000dc3	            0x750a	                           jne 0x4000dcf	       465	vtls.c	FUNCTION_16	IF_7
0x4000dc5	          0x4889df	                            mov rdi, rbx	       467	vtls.c	FUNCTION_16	CALL_7
0x4000dc8	      0xe800000000	                          call 0x4000dcd	       467	vtls.c	FUNCTION_16	CALL_7
0x4000dcd	            0xeb17	                           jmp 0x4000de6	       467	vtls.c	FUNCTION_16	CALL_7
0x4000dcf	      0xba01000000	                              mov edx, 1	       467	vtls.c	FUNCTION_16	CALL_7
0x4000dd4	          0x4889d0	                            mov rax, rdx	       469	vtls.c	FUNCTION_16	ELSE_4
0x4000dd7	        0x48c1e007	                              shl rax, 7	       469	vtls.c	FUNCTION_16	ELSE_4
0x4000ddb	        0x488d1cd0	                  lea rbx, [rax + rdx*8]	       469	vtls.c	FUNCTION_16	ELSE_4
0x4000ddf	    0x49039d504d00	           add rbx, qword [r13 + 0x4d50]	       469	vtls.c	FUNCTION_16	ELSE_4
0x4000de6	      0x488b442420	            mov rax, qword [rsp + 0x20] 	       472	vtls.c	FUNCTION_16
0x4000deb	        0x48894318	             mov qword [rbx + 0x18], rax	       472	vtls.c	FUNCTION_16
0x4000def	      0x488b442428	            mov rax, qword [rsp + 0x28] 	       473	vtls.c	FUNCTION_16
0x4000df4	        0x48894320	             mov qword [rbx + 0x20], rax	       473	vtls.c	FUNCTION_16
0x4000df8	          0x498b06	                    mov rax, qword [r14]	       474	vtls.c	FUNCTION_16
0x4000dfb	        0x48894328	             mov qword [rbx + 0x28], rax	       474	vtls.c	FUNCTION_16
0x4000dff	    0x488b2d000000	            mov rbp, qword [0x04000e06] 	       476	vtls.c	FUNCTION_16	CALL_8
0x4000e06	          0x488b3b	                    mov rdi, qword [rbx]	       476	vtls.c	FUNCTION_16	CALL_8
0x4000e09	          0xff5500	                        call qword [rbp]	       476	vtls.c	FUNCTION_16	CALL_8
0x4000e0c	        0x488b7b08	                mov rdi, qword [rbx + 8]	       477	vtls.c	FUNCTION_16	CALL_9
0x4000e10	          0xff5500	                        call qword [rbp]	       477	vtls.c	FUNCTION_16	CALL_9
0x4000e13	          0x4c893b	                    mov qword [rbx], r15	       478	vtls.c	FUNCTION_16
0x4000e16	      0x488b442410	            mov rax, qword [rsp + 0x10] 	       479	vtls.c	FUNCTION_16
0x4000e1b	        0x48894308	                mov qword [rbx + 8], rax	       479	vtls.c	FUNCTION_16
0x4000e1f	        0x8b44241c	            mov eax, dword [rsp + 0x1c] 	       480	vtls.c	FUNCTION_16
0x4000e23	          0x894334	             mov dword [rbx + 0x34], eax	       480	vtls.c	FUNCTION_16
0x4000e26	      0x807c241b00	                cmp byte [rsp + 0x1b], 0	       482	vtls.c	FUNCTION_16
0x4000e2b	            0x740a	                            je 0x4000e37	       482	vtls.c	FUNCTION_16
0x4000e2d	    0x418b84249001	           mov eax, dword [r12 + 0x190] 	       482	vtls.c	FUNCTION_16
0x4000e35	            0xeb08	                           jmp 0x4000e3f	       482	vtls.c	FUNCTION_16
0x4000e37	    0x418b84249801	           mov eax, dword [r12 + 0x198] 	       482	vtls.c	FUNCTION_16
0x4000e3f	          0x894330	             mov dword [rbx + 0x30], eax	       482	vtls.c	FUNCTION_16
0x4000e42	    0x498b8424e003	           mov rax, qword [r12 + 0x3e0] 	       483	vtls.c	FUNCTION_16
0x4000e4a	          0x488b00	                    mov rax, qword [rax]	       483	vtls.c	FUNCTION_16
0x4000e4d	        0x48894310	             mov qword [rbx + 0x10], rax	       483	vtls.c	FUNCTION_16
0x4000e51	        0x488d7338	                   lea rsi, [rbx + 0x38]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4000e55	      0x488b7c2408	                mov rdi, qword [rsp + 8]	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4000e5a	      0xe800000000	                          call 0x4000e5f	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4000e5f	      0xba00000000	                              mov edx, 0	       492	vtls.c	FUNCTION_16
0x4000e64	            0x84c0	                             test al, al	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4000e66	            0x7572	                           jne 0x4000eda	       485	vtls.c	FUNCTION_16	IF_8	CALL_10
0x4000e68	    0x48c743180000	               mov qword [rbx + 0x18], 0	       486	vtls.c	FUNCTION_16	IF_8
0x4000e70	    0x488b1d000000	            mov rbx, qword [0x04000e77] 	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x4000e77	          0x4c89ff	                            mov rdi, r15	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x4000e7a	            0xff13	                        call qword [rbx]	       487	vtls.c	FUNCTION_16	IF_8	CALL_11
0x4000e7c	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x4000e81	            0xff13	                        call qword [rbx]	       488	vtls.c	FUNCTION_16	IF_8	CALL_12
0x4000e83	      0xba1b000000	                           mov edx, 0x1b	       489	vtls.c	FUNCTION_16	IF_8
0x4000e88	            0xeb50	                           jmp 0x4000eda	       489	vtls.c	FUNCTION_16	IF_8
0x4000e8a	    0x498d8424f802	                  lea rax, [r12 + 0x2f8]	       422	vtls.c	FUNCTION_16
0x4000e92	      0x4889442408	                mov qword [rsp + 8], rax	       422	vtls.c	FUNCTION_16
0x4000e97	    0x488b05000000	            mov rax, qword [0x04000e9e] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000e9e	          0x488b00	                    mov rax, qword [rax]	       427	vtls.c	FUNCTION_16	CALL_4
0x4000ea1	    0x498bbc24d800	            mov rdi, qword [r12 + 0xd8] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000ea9	      0xc644241b00	                mov byte [rsp + 0x1b], 0	       420	vtls.c	FUNCTION_16	CALL_1
0x4000eae	      0xe919feffff	                           jmp 0x4000ccc	       420	vtls.c	FUNCTION_16	CALL_1
0x4000eb3	    0x488d87480300	                  lea rax, [rdi + 0x348]	       422	vtls.c	FUNCTION_16
0x4000eba	      0x4889442408	                mov qword [rsp + 8], rax	       422	vtls.c	FUNCTION_16
0x4000ebf	    0x488b05000000	            mov rax, qword [0x04000ec6] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000ec6	          0x488b00	                    mov rax, qword [rax]	       427	vtls.c	FUNCTION_16	CALL_4
0x4000ec9	    0x488bbf600100	           mov rdi, qword [rdi + 0x160] 	       427	vtls.c	FUNCTION_16	CALL_4
0x4000ed0	      0xc644241b01	                mov byte [rsp + 0x1b], 1	       420	vtls.c	FUNCTION_16	CALL_1
0x4000ed5	      0xe9f2fdffff	                           jmp 0x4000ccc	       420	vtls.c	FUNCTION_16	CALL_1
0x4000eda	            0x89d0	                            mov eax, edx	       493	vtls.c	FUNCTION_16
0x4000edc	        0x4883c438	                           add rsp, 0x38	       493	vtls.c	FUNCTION_16
0x4000ee0	              0x5b	                                 pop rbx	       493	vtls.c	FUNCTION_16
0x4000ee1	              0x5d	                                 pop rbp	       493	vtls.c	FUNCTION_16
0x4000ee2	            0x415c	                                 pop r12	       493	vtls.c	FUNCTION_16
0x4000ee4	            0x415d	                                 pop r13	       493	vtls.c	FUNCTION_16
0x4000ee6	            0x415e	                                 pop r14	       493	vtls.c	FUNCTION_16
0x4000ee8	            0x415f	                                 pop r15	       493	vtls.c	FUNCTION_16
0x4000eea	              0xc3	                                     ret	       493	vtls.c	FUNCTION_16
Curl_ssl_set_engine	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x4001036	        0x4883ec08	                              sub rsp, 8	       572	vtls.c	FUNCTION_22
0x400103a	    0x488b05000000	            mov rax, qword [0x04001041] 	       573	vtls.c	FUNCTION_22	CALL_1
0x4001041	    0xff9090000000	                 call qword [rax + 0x90]	       573	vtls.c	FUNCTION_22	CALL_1
0x4001047	        0x4883c408	                              add rsp, 8	       574	vtls.c	FUNCTION_22
0x400104b	              0xc3	                                     ret	       574	vtls.c	FUNCTION_22
Curl_ssl_connect	CALL,4:WHILE,0:functions,0:IF,4:SWITCH,0:ELSE,0:DO,0:FOR,0	39
0x4000834	              0x55	                                push rbp	       232	vtls.c	FUNCTION_9
0x4000835	              0x53	                                push rbx	       232	vtls.c	FUNCTION_9
0x4000836	        0x4883ec08	                              sub rsp, 8	       232	vtls.c	FUNCTION_9
0x400083a	          0x4889fb	                            mov rbx, rdi	       232	vtls.c	FUNCTION_9
0x400083d	            0x89f5	                            mov ebp, esi	       232	vtls.c	FUNCTION_9
0x400083f	          0x4863c6	                         movsxd rax, esi	       235	vtls.c	FUNCTION_9	IF_1
0x4000842	    0x80bc07b90300	         cmp byte [rdi + rax + 0x3b9], 0	       235	vtls.c	FUNCTION_9	IF_1
0x400084a	            0x740b	                            je 0x4000857	       235	vtls.c	FUNCTION_9	IF_1
0x400084c	      0xe830fbffff	         call sym.ssl_connect_init_proxy	       236	vtls.c	FUNCTION_9	IF_1	CALL_1
0x4000851	            0x89c2	                            mov edx, eax	       238	vtls.c	FUNCTION_9	IF_1	IF_2
0x4000853	            0x85c0	                           test eax, eax	       237	vtls.c	FUNCTION_9	IF_1	IF_2
0x4000855	            0x7555	                           jne 0x40008ac	       237	vtls.c	FUNCTION_9	IF_1	IF_2
0x4000857	          0x488b3b	                    mov rdi, qword [rbx]	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x400085a	      0xe80cfcffff	                call sym.ssl_prefs_check	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x400085f	      0xba23000000	                           mov edx, 0x23	       242	vtls.c	FUNCTION_9	IF_3
0x4000864	            0x84c0	                             test al, al	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000866	            0x7444	                            je 0x40008ac	       241	vtls.c	FUNCTION_9	IF_3	CALL_2
0x4000868	          0x4863c5	                         movsxd rax, ebp	       245	vtls.c	FUNCTION_9
0x400086b	        0x488d1400	                    lea rdx, [rax + rax]	       245	vtls.c	FUNCTION_9
0x400086f	        0x488d0c02	                    lea rcx, [rdx + rax]	       245	vtls.c	FUNCTION_9
0x4000873	    0xc684cb900200	       mov byte [rbx + rcx*8 + 0x290], 1	       245	vtls.c	FUNCTION_9
0x400087b	    0xc784cb940200	      mov dword [rbx + rcx*8 + 0x294], 1	       246	vtls.c	FUNCTION_9
0x4000886	            0x89ee	                            mov esi, ebp	       248	vtls.c	FUNCTION_9	CALL_3
0x4000888	          0x4889df	                            mov rdi, rbx	       248	vtls.c	FUNCTION_9	CALL_3
0x400088b	    0x488b05000000	            mov rax, qword [0x04000892] 	       248	vtls.c	FUNCTION_9	CALL_3
0x4000892	          0xff5060	                 call qword [rax + 0x60]	       248	vtls.c	FUNCTION_9	CALL_3
0x4000895	            0x89c5	                            mov ebp, eax	       248	vtls.c	FUNCTION_9	CALL_3
0x4000897	            0x89c2	                            mov edx, eax	       253	vtls.c	FUNCTION_9
0x4000899	            0x85c0	                           test eax, eax	       250	vtls.c	FUNCTION_9	IF_4
0x400089b	            0x750f	                           jne 0x40008ac	       250	vtls.c	FUNCTION_9	IF_4
0x400089d	      0xbe05000000	                              mov esi, 5	       251	vtls.c	FUNCTION_9	CALL_4
0x40008a2	          0x488b3b	                    mov rdi, qword [rbx]	       251	vtls.c	FUNCTION_9	CALL_4
0x40008a5	      0xe800000000	                          call 0x40008aa	       251	vtls.c	FUNCTION_9	CALL_4
0x40008aa	            0x89ea	                            mov edx, ebp	       253	vtls.c	FUNCTION_9
0x40008ac	            0x89d0	                            mov eax, edx	       254	vtls.c	FUNCTION_9
0x40008ae	        0x4883c408	                              add rsp, 8	       254	vtls.c	FUNCTION_9
0x40008b2	              0x5b	                                 pop rbx	       254	vtls.c	FUNCTION_9
0x40008b3	              0x5d	                                 pop rbp	       254	vtls.c	FUNCTION_9
0x40008b4	              0xc3	                                     ret	       254	vtls.c	FUNCTION_9
Curl_ssl_getsessionid	CALL,8:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,1:DO,0:FOR,1	137
0x400098b	            0x4157	                                push r15	       305	vtls.c	FUNCTION_13
0x400098d	            0x4156	                                push r14	       305	vtls.c	FUNCTION_13
0x400098f	            0x4155	                                push r13	       305	vtls.c	FUNCTION_13
0x4000991	            0x4154	                                push r12	       305	vtls.c	FUNCTION_13
0x4000993	              0x55	                                push rbp	       305	vtls.c	FUNCTION_13
0x4000994	              0x53	                                push rbx	       305	vtls.c	FUNCTION_13
0x4000995	        0x4883ec38	                           sub rsp, 0x38	       305	vtls.c	FUNCTION_13
0x4000999	          0x4c8b27	                    mov r12, qword [rdi]	       307	vtls.c	FUNCTION_13
0x400099c	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       312	vtls.c	FUNCTION_13	CALL_1
0x40009a3	     0xf85cd010000	                           jne 0x4000b76	       312	vtls.c	FUNCTION_13	CALL_1
0x40009a9	          0x4863c9	                         movsxd rcx, ecx	       312	vtls.c	FUNCTION_13	CALL_1
0x40009ac	    0x80bc0fb90300	         cmp byte [rdi + rcx + 0x3b9], 0	       312	vtls.c	FUNCTION_13	CALL_1
0x40009b4	     0xf85bc010000	                           jne 0x4000b76	       312	vtls.c	FUNCTION_13	CALL_1
0x40009ba	      0xe9d9010000	                           jmp 0x4000b98	       312	vtls.c	FUNCTION_13	CALL_1
0x40009bf	    0x48c706000000	                      mov qword [rsi], 0	       319	vtls.c	FUNCTION_13
0x40009c6	    0x83bf78010000	              cmp dword [rdi + 0x178], 2	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009cd	            0x752d	                           jne 0x40009fc	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009cf	    0x83bf5c020000	cmp dword [rdi + 0x25c], 0xffffffffffffffff	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009d6	           0xf95c0	                                setne al	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009d9	           0xfb6c0	                           movzx eax, al	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009dc	        0x488d0c00	                    lea rcx, [rax + rax]	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009e0	          0x4801c8	                            add rax, rcx	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009e3	    0x83bcc7c40200	     cmp dword [rdi + rax*8 + 0x2c4], 2 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009eb	            0x740f	                            je 0x40009fc	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009ed	    0x450fb6bc24c3	         movzx r15d, byte [r12 + 0x6c3] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009f6	        0x4183f701	                             xor r15d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009fa	            0xeb0d	                           jmp 0x4000a09	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x40009fc	    0x450fb6bc24fb	         movzx r15d, byte [r12 + 0x5fb] 	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000a05	        0x4183f701	                             xor r15d, 1	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000a09	          0x4584ff	                         test r15b, r15b	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000a0c	     0xf85a8010000	                           jne 0x4000bba	       323	vtls.c	FUNCTION_13	IF_1	CALL_4
0x4000a12	    0x498b8424b800	            mov rax, qword [r12 + 0xb8] 	       328	vtls.c	FUNCTION_13	IF_2
0x4000a1a	          0x4885c0	                           test rax, rax	       328	vtls.c	FUNCTION_13	IF_2
0x4000a1d	            0x7412	                            je 0x4000a31	       328	vtls.c	FUNCTION_13	IF_2
0x4000a1f	          0xf60010	                   test byte [rax], 0x10	       328	vtls.c	FUNCTION_13	IF_2
0x4000a22	            0x740d	                            je 0x4000a31	       328	vtls.c	FUNCTION_13	IF_2
0x4000a24	    0x4805c0000000	                           add rax, 0xc0	       329	vtls.c	FUNCTION_13	IF_2
0x4000a2a	      0x4889442418	             mov qword [rsp + 0x18], rax	       329	vtls.c	FUNCTION_13	IF_2
0x4000a2f	            0xeb0d	                           jmp 0x4000a3e	       329	vtls.c	FUNCTION_13	IF_2
0x4000a31	    0x498d8424584d	                 lea rax, [r12 + 0x4d58]	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000a39	      0x4889442418	             mov qword [rsp + 0x18], rax	       331	vtls.c	FUNCTION_13	ELSE_1
0x4000a3e	    0x4983bc247807	              cmp qword [r12 + 0x778], 0	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a47	     0xf8421010000	                            je 0x4000b6e	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a4d	      0x4889542428	             mov qword [rsp + 0x28], rdx	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a52	      0x4889742420	             mov qword [rsp + 0x20], rsi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a57	          0x4989fd	                            mov r13, rdi	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a5a	      0xbd00000000	                              mov ebp, 0	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a5f	          0x4889e8	                            mov rax, rbp	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a62	        0x48c1e007	                              shl rax, 7	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a66	        0x488d1ce8	                  lea rbx, [rax + rbp*8]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a6a	    0x49039c24504d	           add rbx, qword [r12 + 0x4d50]	       334	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000a72	      0x48837b1800	               cmp qword [rbx + 0x18], 0	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000a77	     0xf84d7000000	                            je 0x4000b54	       335	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_3
0x4000a7d	          0x488b33	                    mov rsi, qword [rbx]	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a80	          0x4c89f7	                            mov rdi, r14	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a83	      0xe800000000	                          call 0x4000a88	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a88	            0x85c0	                           test eax, eax	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a8a	     0xf84c4000000	                            je 0x4000b54	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a90	    0x4180bd9b0300	               cmp byte [r13 + 0x39b], 0	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a98	            0x750d	                           jne 0x4000aa7	       338	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_5
0x4000a9a	      0x48837b0800	                  cmp qword [rbx + 8], 0	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000a9f	     0xf85af000000	                           jne 0x4000b54	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aa5	            0xeb21	                           jmp 0x4000ac8	       339	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aa7	        0x488b7308	                mov rsi, qword [rbx + 8]	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aab	          0x4885f6	                           test rsi, rsi	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aae	     0xf84a0000000	                            je 0x4000b54	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ab4	    0x498bbd000100	           mov rdi, qword [r13 + 0x100] 	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000abb	      0xe800000000	                          call 0x4000ac0	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000ac0	            0x85c0	                           test eax, eax	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ac2	     0xf848c000000	                            je 0x4000b54	       340	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ac8	    0x4180bd9c0300	               cmp byte [r13 + 0x39c], 0	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000ad0	            0x7508	                           jne 0x4000ada	       341	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_6
0x4000ad2	        0x837b34ff	cmp dword [rbx + 0x34], 0xffffffffffffffff	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ad6	            0x757c	                           jne 0x4000b54	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ad8	            0xeb11	                           jmp 0x4000aeb	       342	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ada	          0x8b4334	            mov eax, dword [rbx + 0x34] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000add	          0x83f8ff	             cmp eax, 0xffffffffffffffff	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ae0	            0x7472	                            je 0x4000b54	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ae2	    0x413b859c0100	           cmp eax, dword [r13 + 0x19c] 	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000ae9	            0x7569	                           jne 0x4000b54	       343	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aeb	        0x8b442408	                mov eax, dword [rsp + 8]	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000aef	          0x3b4330	            cmp eax, dword [rbx + 0x30] 	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000af2	            0x7560	                           jne 0x4000b54	       344	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000af4	        0x488b7310	            mov rsi, qword [rbx + 0x10] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000af8	    0x498b85e00300	           mov rax, qword [r13 + 0x3e0] 	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000aff	          0x488b38	                    mov rdi, qword [rax]	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000b02	      0xe800000000	                          call 0x4000b07	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000b07	            0x85c0	                           test eax, eax	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b09	            0x7449	                            je 0x4000b54	       345	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b0b	        0x488d7338	                   lea rsi, [rbx + 0x38]	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000b0f	      0x488b7c2410	            mov rdi, qword [rsp + 0x10] 	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000b14	      0xe800000000	                          call 0x4000b19	       347	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_8
0x4000b19	            0x84c0	                             test al, al	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000b1b	            0x7437	                            je 0x4000b54	       346	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	CALL_7
0x4000b1d	      0x488b542418	            mov rdx, qword [rsp + 0x18] 	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b22	          0x488b02	                    mov rax, qword [rdx]	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b25	      0x4889442408	                mov qword [rsp + 8], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b2a	        0x4883c001	                              add rax, 1	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b2e	          0x488902	                    mov qword [rdx], rax	       349	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b31	        0x48894328	             mov qword [rbx + 0x28], rax	       350	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b35	        0x488b4318	            mov rax, qword [rbx + 0x18] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b39	      0x488b542420	            mov rdx, qword [rsp + 0x20] 	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b3e	          0x488902	                    mov qword [rdx], rax	       351	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4
0x4000b41	      0x488b542428	            mov rdx, qword [rsp + 0x28] 	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b46	          0x4885d2	                           test rdx, rdx	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b49	            0x746f	                            je 0x4000bba	       352	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b4b	        0x488b4320	            mov rax, qword [rbx + 0x20] 	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b4f	          0x488902	                    mov qword [rdx], rax	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b52	            0xeb66	                           jmp 0x4000bba	       353	vtls.c	FUNCTION_13	ELSE_1	FOR_1	IF_4	IF_5
0x4000b54	        0x4883c501	                              add rbp, 1	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000b58	    0x4939ac247807	           cmp qword [r12 + 0x778], rbp 	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000b60	     0xf87f9feffff	                            ja 0x4000a5f	       333	vtls.c	FUNCTION_13	ELSE_1	FOR_1
0x4000b66	    0x41bf01000000	                             mov r15d, 1	       310	vtls.c	FUNCTION_13
0x4000b6c	            0xeb4c	                           jmp 0x4000bba	       310	vtls.c	FUNCTION_13
0x4000b6e	    0x41bf01000000	                             mov r15d, 1	       310	vtls.c	FUNCTION_13
0x4000b74	            0xeb44	                           jmp 0x4000bba	       310	vtls.c	FUNCTION_13
0x4000b76	    0x488d87f80200	                  lea rax, [rdi + 0x2f8]	       314	vtls.c	FUNCTION_13
0x4000b7d	      0x4889442410	             mov qword [rsp + 0x10], rax	       314	vtls.c	FUNCTION_13
0x4000b82	    0x4c8bb7d80000	            mov r14, qword [rdi + 0xd8] 	       316	vtls.c	FUNCTION_13
0x4000b89	    0x8b8798010000	           mov eax, dword [rdi + 0x198] 	       318	vtls.c	FUNCTION_13
0x4000b8f	        0x89442408	                mov dword [rsp + 8], eax	       318	vtls.c	FUNCTION_13
0x4000b93	      0xe927feffff	                           jmp 0x40009bf	       318	vtls.c	FUNCTION_13
0x4000b98	    0x488d87480300	                  lea rax, [rdi + 0x348]	       314	vtls.c	FUNCTION_13
0x4000b9f	      0x4889442410	             mov qword [rsp + 0x10], rax	       314	vtls.c	FUNCTION_13
0x4000ba4	    0x4c8bb7600100	           mov r14, qword [rdi + 0x160] 	       316	vtls.c	FUNCTION_13
0x4000bab	    0x8b8790010000	           mov eax, dword [rdi + 0x190] 	       318	vtls.c	FUNCTION_13
0x4000bb1	        0x89442408	                mov dword [rsp + 8], eax	       318	vtls.c	FUNCTION_13
0x4000bb5	      0xe905feffff	                           jmp 0x40009bf	       318	vtls.c	FUNCTION_13
0x4000bba	          0x4489f8	                           mov eax, r15d	       360	vtls.c	FUNCTION_13
0x4000bbd	        0x4883c438	                           add rsp, 0x38	       360	vtls.c	FUNCTION_13
0x4000bc1	              0x5b	                                 pop rbx	       360	vtls.c	FUNCTION_13
0x4000bc2	              0x5d	                                 pop rbp	       360	vtls.c	FUNCTION_13
0x4000bc3	            0x415c	                                 pop r12	       360	vtls.c	FUNCTION_13
0x4000bc5	            0x415d	                                 pop r13	       360	vtls.c	FUNCTION_13
0x4000bc7	            0x415e	                                 pop r14	       360	vtls.c	FUNCTION_13
0x4000bc9	            0x415f	                                 pop r15	       360	vtls.c	FUNCTION_13
0x4000bcb	              0xc3	                                     ret	       360	vtls.c	FUNCTION_13
Curl_ssl_data_pending	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40010fd	        0x4883ec08	                              sub rsp, 8	       638	vtls.c	FUNCTION_28
0x4001101	    0x488b05000000	            mov rax, qword [0x04001108] 	       639	vtls.c	FUNCTION_28	CALL_1
0x4001108	          0xff5048	                 call qword [rax + 0x48]	       639	vtls.c	FUNCTION_28	CALL_1
0x400110b	        0x4883c408	                              add rsp, 8	       640	vtls.c	FUNCTION_28
0x400110f	              0xc3	                                     ret	       640	vtls.c	FUNCTION_28
Curl_none_shutdown	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000042	      0xb800000000	                              mov eax, 0	      1008	vtls.c	FUNCTION_42
0x4000047	              0xc3	                                     ret	      1008	vtls.c	FUNCTION_42
Curl_none_init	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4001818	      0xb801000000	                              mov eax, 1	       997	vtls.c	FUNCTION_40
0x400181d	              0xc3	                                     ret	       997	vtls.c	FUNCTION_40
Curl_multissl_close	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	17
0x400014c	              0x55	                                push rbp	      1134	vtls.c	FUNCTION_59
0x400014d	              0x53	                                push rbx	      1134	vtls.c	FUNCTION_59
0x400014e	        0x4883ec08	                              sub rsp, 8	      1134	vtls.c	FUNCTION_59
0x4000152	          0x4889fb	                            mov rbx, rdi	      1134	vtls.c	FUNCTION_59
0x4000155	            0x89f5	                            mov ebp, esi	      1134	vtls.c	FUNCTION_59
0x4000157	      0xbf00000000	                              mov edi, 0	      1135	vtls.c	FUNCTION_59	IF_1	CALL_1
0x400015c	      0xe81bffffff	                  call sym.multissl_init	      1135	vtls.c	FUNCTION_59	IF_1	CALL_1
0x4000161	            0x85c0	                           test eax, eax	      1135	vtls.c	FUNCTION_59	IF_1	CALL_1
0x4000163	            0x750f	                           jne 0x4000174	      1135	vtls.c	FUNCTION_59	IF_1	CALL_1
0x4000165	            0x89ee	                            mov esi, ebp	      1137	vtls.c	FUNCTION_59	CALL_2
0x4000167	          0x4889df	                            mov rdi, rbx	      1137	vtls.c	FUNCTION_59	CALL_2
0x400016a	    0x488b05000000	            mov rax, qword [0x04000171] 	      1137	vtls.c	FUNCTION_59	CALL_2
0x4000171	          0xff5078	                 call qword [rax + 0x78]	      1137	vtls.c	FUNCTION_59	CALL_2
0x4000174	        0x4883c408	                              add rsp, 8	      1138	vtls.c	FUNCTION_59
0x4000178	              0x5b	                                 pop rbx	      1138	vtls.c	FUNCTION_59
0x4000179	              0x5d	                                 pop rbp	      1138	vtls.c	FUNCTION_59
0x400017a	              0xc3	                                     ret	      1138	vtls.c	FUNCTION_59
Curl_none_md5sum	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	30
0x40004db	            0x4155	                                push r13	      1077	vtls.c	FUNCTION_53
0x40004dd	            0x4154	                                push r12	      1077	vtls.c	FUNCTION_53
0x40004df	              0x55	                                push rbp	      1077	vtls.c	FUNCTION_53
0x40004e0	              0x53	                                push rbx	      1077	vtls.c	FUNCTION_53
0x40004e1	        0x4883ec08	                              sub rsp, 8	      1077	vtls.c	FUNCTION_53
0x40004e5	          0x4989fc	                            mov r12, rdi	      1077	vtls.c	FUNCTION_53
0x40004e8	          0x4989f5	                            mov r13, rsi	      1077	vtls.c	FUNCTION_53
0x40004eb	          0x4889d5	                            mov rbp, rdx	      1077	vtls.c	FUNCTION_53
0x40004ee	    0x488b3d000000	            mov rdi, qword [0x040004f5] 	      1082	vtls.c	FUNCTION_53	CALL_1
0x40004f5	      0xe800000000	                          call 0x40004fa	      1082	vtls.c	FUNCTION_53	CALL_1
0x40004fa	          0x4889c3	                            mov rbx, rax	      1082	vtls.c	FUNCTION_53	CALL_1
0x40004fd	      0xb81b000000	                           mov eax, 0x1b	      1084	vtls.c	FUNCTION_53	IF_1
0x4000502	          0x4885db	                           test rbx, rbx	      1083	vtls.c	FUNCTION_53	IF_1
0x4000505	            0x7425	                            je 0x400052c	      1083	vtls.c	FUNCTION_53	IF_1
0x4000507	          0x4c89ef	                            mov rdi, r13	      1085	vtls.c	FUNCTION_53	CALL_3
0x400050a	      0xe800000000	                          call 0x400050f	      1085	vtls.c	FUNCTION_53	CALL_3
0x400050f	            0x89c2	                            mov edx, eax	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000511	          0x4c89e6	                            mov rsi, r12	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000514	          0x4889df	                            mov rdi, rbx	      1085	vtls.c	FUNCTION_53	CALL_3
0x4000517	      0xe800000000	                          call 0x400051c	      1085	vtls.c	FUNCTION_53	CALL_3
0x400051c	          0x4889ee	                            mov rsi, rbp	      1086	vtls.c	FUNCTION_53	CALL_4
0x400051f	          0x4889df	                            mov rdi, rbx	      1086	vtls.c	FUNCTION_53	CALL_4
0x4000522	      0xe800000000	                          call 0x4000527	      1086	vtls.c	FUNCTION_53	CALL_4
0x4000527	      0xb800000000	                              mov eax, 0	      1087	vtls.c	FUNCTION_53
0x400052c	        0x4883c408	                              add rsp, 8	      1088	vtls.c	FUNCTION_53
0x4000530	              0x5b	                                 pop rbx	      1088	vtls.c	FUNCTION_53
0x4000531	              0x5d	                                 pop rbp	      1088	vtls.c	FUNCTION_53
0x4000532	            0x415c	                                 pop r12	      1088	vtls.c	FUNCTION_53
0x4000534	            0x415d	                                 pop r13	      1088	vtls.c	FUNCTION_53
0x4000536	              0xc3	                                     ret	      1088	vtls.c	FUNCTION_53
Curl_ssl_md5sum	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40017c8	        0x4883ec08	                              sub rsp, 8	       961	vtls.c	FUNCTION_36
0x40017cc	    0x488b05000000	            mov rax, qword [0x040017d3] 	       962	vtls.c	FUNCTION_36	CALL_1
0x40017d3	    0xff90b0000000	                 call qword [rax + 0xb0]	       962	vtls.c	FUNCTION_36	CALL_1
0x40017d9	        0x4883c408	                              add rsp, 8	       963	vtls.c	FUNCTION_36
0x40017dd	              0xc3	                                     ret	       963	vtls.c	FUNCTION_36
Curl_none_random	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x400004e	      0xb804000000	                              mov eax, 4	      1024	vtls.c	FUNCTION_44
0x4000053	              0xc3	                                     ret	      1024	vtls.c	FUNCTION_44
ssl_connect_init_proxy	CALL,3:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	50
0x4000381	          0x4863c6	                         movsxd rax, esi	       210	vtls.c	FUNCTION_8	IF_1
0x4000384	        0x488d1440	                  lea rdx, [rax + rax*2]	       210	vtls.c	FUNCTION_8	IF_1
0x4000388	      0xb800000000	                              mov eax, 0	       227	vtls.c	FUNCTION_8
0x400038d	    0x83bcd7940200	     cmp dword [rdi + rdx*8 + 0x294], 2 	       210	vtls.c	FUNCTION_8	IF_1
0x4000395	     0xf85ce000000	                           jne 0x4000469	       210	vtls.c	FUNCTION_8	IF_1
0x400039b	      0xb800000000	                              mov eax, 0	       227	vtls.c	FUNCTION_8
0x40003a0	    0x80bcd7c00200	       cmp byte [rdi + rdx*8 + 0x2c0], 0	       210	vtls.c	FUNCTION_8	IF_1
0x40003a8	     0xf85bb000000	                           jne 0x4000469	       210	vtls.c	FUNCTION_8	IF_1
0x40003ae	      0xb804000000	                              mov eax, 4	       215	vtls.c	FUNCTION_8	IF_1	IF_2
0x40003b3	    0x488b15000000	            mov rdx, qword [0x040003ba] 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x40003ba	        0xf6421010	           test byte [rdx + 0x10], 0x10 	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x40003be	     0xf84a5000000	                            je 0x4000469	       214	vtls.c	FUNCTION_8	IF_1	IF_2
0x40003c4	            0x4155	                                push r13	       208	vtls.c	FUNCTION_8
0x40003c6	            0x4154	                                push r12	       208	vtls.c	FUNCTION_8
0x40003c8	              0x55	                                push rbp	       208	vtls.c	FUNCTION_8
0x40003c9	              0x53	                                push rbx	       208	vtls.c	FUNCTION_8
0x40003ca	        0x4883ec08	                              sub rsp, 8	       208	vtls.c	FUNCTION_8
0x40003ce	          0x4889fd	                            mov rbp, rdi	       208	vtls.c	FUNCTION_8
0x40003d1	          0x4863de	                         movsxd rbx, esi	       219	vtls.c	FUNCTION_8	IF_1
0x40003d4	        0x4c8d241b	                    lea r12, [rbx + rbx]	       219	vtls.c	FUNCTION_8	IF_1
0x40003d8	        0x498d041c	                    lea rax, [r12 + rbx]	       219	vtls.c	FUNCTION_8	IF_1
0x40003dc	    0x4c8bacc7d002	   mov r13, qword [rdi + rax*8 + 0x2d0] 	       219	vtls.c	FUNCTION_8	IF_1
0x40003e4	        0x488d0cc7	                  lea rcx, [rdi + rax*8]	       220	vtls.c	FUNCTION_8	IF_1
0x40003e8	    0x488d81c00200	                  lea rax, [rcx + 0x2c0]	       220	vtls.c	FUNCTION_8	IF_1
0x40003ef	    0x488d91900200	                  lea rdx, [rcx + 0x290]	       220	vtls.c	FUNCTION_8	IF_1
0x40003f6	    0x488bb1900200	           mov rsi, qword [rcx + 0x290] 	       220	vtls.c	FUNCTION_8	IF_1
0x40003fd	    0x4889b1c00200	            mov qword [rcx + 0x2c0], rsi	       220	vtls.c	FUNCTION_8	IF_1
0x4000404	        0x488b4a08	                mov rcx, qword [rdx + 8]	       220	vtls.c	FUNCTION_8	IF_1
0x4000408	        0x48894808	                mov qword [rax + 8], rcx	       220	vtls.c	FUNCTION_8	IF_1
0x400040c	        0x488b5210	            mov rdx, qword [rdx + 0x10] 	       220	vtls.c	FUNCTION_8	IF_1
0x4000410	        0x48895010	             mov qword [rax + 0x10], rdx	       220	vtls.c	FUNCTION_8	IF_1
0x4000414	        0x498d041c	                    lea rax, [r12 + rbx]	        90	string3.h	FUNCTION_67	CALL_6
0x4000418	    0x488d84c79002	         lea rax, [rdi + rax*8 + 0x290] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000420	    0x48c700000000	                      mov qword [rax], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000427	    0x48c740080000	                  mov qword [rax + 8], 0	        90	string3.h	FUNCTION_67	CALL_6
0x400042f	    0x48c740100000	               mov qword [rax + 0x10], 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000437	    0x488b05000000	            mov rax, qword [0x0400043e] 	       223	vtls.c	FUNCTION_8	IF_1	CALL_3
0x400043e	        0x488b5018	            mov rdx, qword [rax + 0x18] 	        90	string3.h	FUNCTION_67	CALL_6
0x4000442	      0xbe00000000	                              mov esi, 0	        90	string3.h	FUNCTION_67	CALL_6
0x4000447	          0x4c89ef	                            mov rdi, r13	        90	string3.h	FUNCTION_67	CALL_6
0x400044a	      0xe800000000	                          call 0x400044f	        90	string3.h	FUNCTION_67	CALL_6
0x400044f	          0x4c01e3	                            add rbx, r12	       225	vtls.c	FUNCTION_8	IF_1
0x4000452	    0x4c89acdda002	   mov qword [rbp + rbx*8 + 0x2a0], r13 	       225	vtls.c	FUNCTION_8	IF_1
0x400045a	      0xb800000000	                              mov eax, 0	       227	vtls.c	FUNCTION_8
0x400045f	        0x4883c408	                              add rsp, 8	       228	vtls.c	FUNCTION_8
0x4000463	              0x5b	                                 pop rbx	       228	vtls.c	FUNCTION_8
0x4000464	              0x5d	                                 pop rbp	       228	vtls.c	FUNCTION_8
0x4000465	            0x415c	                                 pop r12	       228	vtls.c	FUNCTION_8
0x4000467	            0x415d	                                 pop r13	       228	vtls.c	FUNCTION_8
0x4000469	            0xf3c3	                                     ret	       228	vtls.c	FUNCTION_8
Curl_ssl_cleanup	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	8
0x4000810	    0x803d00000000	                cmp byte [0x04000817], 0	       175	vtls.c	FUNCTION_6	IF_1
0x4000817	            0x7419	                            je 0x4000832	       175	vtls.c	FUNCTION_6	IF_1
0x4000819	        0x4883ec08	                              sub rsp, 8	       174	vtls.c	FUNCTION_6
0x400081d	    0x488b05000000	            mov rax, qword [0x04000824] 	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000824	          0xff5028	                 call qword [rax + 0x28]	       177	vtls.c	FUNCTION_6	IF_1	CALL_1
0x4000827	    0xc60500000000	                mov byte [0x0400082e], 0	       178	vtls.c	FUNCTION_6	IF_1
0x400082e	        0x4883c408	                              add rsp, 8	       180	vtls.c	FUNCTION_6
0x4000832	            0xf3c3	                                     ret	       180	vtls.c	FUNCTION_6
Curl_none_session_free	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	1
0x4000056	            0xf3c3	                                     ret	      1032	vtls.c	FUNCTION_46
Curl_multissl_init	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	12
0x4000223	        0x4883ec08	                              sub rsp, 8	      1104	vtls.c	FUNCTION_55
0x4000227	      0xbf00000000	                              mov edi, 0	      1105	vtls.c	FUNCTION_55	IF_1	CALL_1
0x400022c	      0xe84bfeffff	                  call sym.multissl_init	      1105	vtls.c	FUNCTION_55	IF_1	CALL_1
0x4000231	      0xba01000000	                              mov edx, 1	      1106	vtls.c	FUNCTION_55	IF_1
0x4000236	            0x85c0	                           test eax, eax	      1105	vtls.c	FUNCTION_55	IF_1	CALL_1
0x4000238	            0x750c	                           jne 0x4000246	      1105	vtls.c	FUNCTION_55	IF_1	CALL_1
0x400023a	    0x488b05000000	            mov rax, qword [0x04000241] 	      1107	vtls.c	FUNCTION_55	CALL_2
0x4000241	          0xff5020	                 call qword [rax + 0x20]	      1107	vtls.c	FUNCTION_55	CALL_2
0x4000244	            0x89c2	                            mov edx, eax	      1107	vtls.c	FUNCTION_55	CALL_2
0x4000246	            0x89d0	                            mov eax, edx	      1108	vtls.c	FUNCTION_55
0x4000248	        0x4883c408	                              add rsp, 8	      1108	vtls.c	FUNCTION_55
0x400024c	              0xc3	                                     ret	      1108	vtls.c	FUNCTION_55
Curl_ssl_shutdown	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	26
0x4000fcb	              0x55	                                push rbp	       556	vtls.c	FUNCTION_21
0x4000fcc	              0x53	                                push rbx	       556	vtls.c	FUNCTION_21
0x4000fcd	        0x4883ec08	                              sub rsp, 8	       556	vtls.c	FUNCTION_21
0x4000fd1	          0x4889fd	                            mov rbp, rdi	       556	vtls.c	FUNCTION_21
0x4000fd4	            0x89f3	                            mov ebx, esi	       556	vtls.c	FUNCTION_21
0x4000fd6	    0x488b05000000	            mov rax, qword [0x04000fdd] 	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4000fdd	          0xff5040	                 call qword [rax + 0x40]	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4000fe0	      0xba50000000	                           mov edx, 0x50	       558	vtls.c	FUNCTION_21	IF_1
0x4000fe5	            0x85c0	                           test eax, eax	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4000fe7	            0x7544	                           jne 0x400102d	       557	vtls.c	FUNCTION_21	IF_1	CALL_1
0x4000fe9	          0x4863db	                         movsxd rbx, ebx	       560	vtls.c	FUNCTION_21
0x4000fec	        0x488d041b	                    lea rax, [rbx + rbx]	       560	vtls.c	FUNCTION_21
0x4000ff0	        0x488d1418	                    lea rdx, [rax + rbx]	       560	vtls.c	FUNCTION_21
0x4000ff4	    0xc684d5900200	      mov byte [rbp + rdx*8 + 0x290], 0 	       560	vtls.c	FUNCTION_21
0x4000ffc	    0xc784d5940200	     mov dword [rbp + rdx*8 + 0x294], 0 	       561	vtls.c	FUNCTION_21
0x4001007	      0x488d44dd00	                  lea rax, [rbp + rbx*8]	       561	vtls.c	FUNCTION_21
0x400100c	    0x488b15000000	            mov rdx, qword [0x04001013] 	       563	vtls.c	FUNCTION_21
0x4001013	    0x488990700200	            mov qword [rax + 0x270], rdx	       563	vtls.c	FUNCTION_21
0x400101a	    0x488b15000000	            mov rdx, qword [0x04001021] 	       564	vtls.c	FUNCTION_21
0x4001021	    0x488990800200	            mov qword [rax + 0x280], rdx	       564	vtls.c	FUNCTION_21
0x4001028	      0xba00000000	                              mov edx, 0	       566	vtls.c	FUNCTION_21
0x400102d	            0x89d0	                            mov eax, edx	       567	vtls.c	FUNCTION_21
0x400102f	        0x4883c408	                              add rsp, 8	       567	vtls.c	FUNCTION_21
0x4001033	              0x5b	                                 pop rbx	       567	vtls.c	FUNCTION_21
0x4001034	              0x5d	                                 pop rbp	       567	vtls.c	FUNCTION_21
0x4001035	              0xc3	                                     ret	       567	vtls.c	FUNCTION_21
Curl_ssl_set_engine_default	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x400104c	        0x4883ec08	                              sub rsp, 8	       579	vtls.c	FUNCTION_23
0x4001050	    0x488b05000000	            mov rax, qword [0x04001057] 	       580	vtls.c	FUNCTION_23	CALL_1
0x4001057	    0xff9098000000	                 call qword [rax + 0x98]	       580	vtls.c	FUNCTION_23	CALL_1
0x400105d	        0x4883c408	                              add rsp, 8	       581	vtls.c	FUNCTION_23
0x4001061	              0xc3	                                     ret	       581	vtls.c	FUNCTION_23
Curl_multissl_connect_nonblocking	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	22
0x40001b1	            0x4154	                                push r12	      1119	vtls.c	FUNCTION_57
0x40001b3	              0x55	                                push rbp	      1119	vtls.c	FUNCTION_57
0x40001b4	              0x53	                                push rbx	      1119	vtls.c	FUNCTION_57
0x40001b5	          0x4889fb	                            mov rbx, rdi	      1119	vtls.c	FUNCTION_57
0x40001b8	            0x89f5	                            mov ebp, esi	      1119	vtls.c	FUNCTION_57
0x40001ba	          0x4989d4	                            mov r12, rdx	      1119	vtls.c	FUNCTION_57
0x40001bd	      0xbf00000000	                              mov edi, 0	      1120	vtls.c	FUNCTION_57	IF_1	CALL_1
0x40001c2	      0xe8b5feffff	                  call sym.multissl_init	      1120	vtls.c	FUNCTION_57	IF_1	CALL_1
0x40001c7	      0xba02000000	                              mov edx, 2	      1121	vtls.c	FUNCTION_57	IF_1
0x40001cc	            0x85c0	                           test eax, eax	      1120	vtls.c	FUNCTION_57	IF_1	CALL_1
0x40001ce	            0x7514	                           jne 0x40001e4	      1120	vtls.c	FUNCTION_57	IF_1	CALL_1
0x40001d0	          0x4c89e2	                            mov rdx, r12	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001d3	            0x89ee	                            mov esi, ebp	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001d5	          0x4889df	                            mov rdi, rbx	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001d8	    0x488b05000000	            mov rax, qword [0x040001df] 	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001df	          0xff5068	                 call qword [rax + 0x68]	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001e2	            0x89c2	                            mov edx, eax	      1122	vtls.c	FUNCTION_57	CALL_2
0x40001e4	            0x89d0	                            mov eax, edx	      1123	vtls.c	FUNCTION_57
0x40001e6	              0x5b	                                 pop rbx	      1123	vtls.c	FUNCTION_57
0x40001e7	              0x5d	                                 pop rbp	      1123	vtls.c	FUNCTION_57
0x40001e8	            0x415c	                                 pop r12	      1123	vtls.c	FUNCTION_57
0x40001ea	              0xc3	                                     ret	      1123	vtls.c	FUNCTION_57
curl_global_sslset	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	60
0x400181e	          0x4885d2	                           test rdx, rdx	      1309	vtls.c	FUNCTION_62	IF_1
0x4001821	            0x740a	                            je 0x400182d	      1309	vtls.c	FUNCTION_62	IF_1
0x4001823	    0x488d05000000	                   lea rax, [0x0400182a]	      1310	vtls.c	FUNCTION_62	IF_1
0x400182a	          0x488902	                    mov qword [rdx], rax	      1310	vtls.c	FUNCTION_62	IF_1
0x400182d	    0x488b05000000	            mov rax, qword [0x04001834] 	      1312	vtls.c	FUNCTION_62	IF_2
0x4001834	    0x488d15000000	                   lea rdx, [0x0400183b]	      1312	vtls.c	FUNCTION_62	IF_2
0x400183b	          0x4839d0	                            cmp rax, rdx	      1312	vtls.c	FUNCTION_62	IF_2
0x400183e	            0x7533	                           jne 0x4001873	      1312	vtls.c	FUNCTION_62	IF_2
0x4001840	    0x488b05000000	            mov rax, qword [0x04001847] 	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001847	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x400184a	     0xf8482000000	                            je 0x40018d2	      1315	vtls.c	FUNCTION_62	FOR_1
0x4001850	            0x4155	                                push r13	      1306	vtls.c	FUNCTION_62
0x4001852	            0x4154	                                push r12	      1306	vtls.c	FUNCTION_62
0x4001854	              0x55	                                push rbp	      1306	vtls.c	FUNCTION_62
0x4001855	              0x53	                                push rbx	      1306	vtls.c	FUNCTION_62
0x4001856	        0x4883ec08	                              sub rsp, 8	      1306	vtls.c	FUNCTION_62
0x400185a	          0x4889f5	                            mov rbp, rsi	      1306	vtls.c	FUNCTION_62
0x400185d	          0x4189fc	                           mov r12d, edi	      1306	vtls.c	FUNCTION_62
0x4001860	            0x3b38	                    cmp edi, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001862	            0x743a	                            je 0x400189e	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001864	    0x488d1d000000	                   lea rbx, [0x0400186b]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400186b	    0x41bd00000000	                             mov r13d, 0	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001871	            0xeb14	                           jmp 0x4001887	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001873	            0x3938	                    cmp dword [rax], edi	      1313	vtls.c	FUNCTION_62	IF_2
0x4001875	           0xf95c0	                                setne al	      1313	vtls.c	FUNCTION_62	IF_2
0x4001878	           0xfb6c0	                           movzx eax, al	      1313	vtls.c	FUNCTION_62	IF_2
0x400187b	             0x1c0	                            add eax, eax	      1313	vtls.c	FUNCTION_62	IF_2
0x400187d	              0xc3	                                     ret	      1313	vtls.c	FUNCTION_62	IF_2
0x400187e	        0x4883c308	                              add rbx, 8	      1313	vtls.c	FUNCTION_62	IF_2
0x4001882	          0x443b20	                   cmp r12d, dword [rax]	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001885	            0x741d	                            je 0x40018a4	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x4001887	          0x4885ed	                           test rbp, rbp	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400188a	            0x7432	                            je 0x40018be	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x400188c	        0x488b7808	                mov rdi, qword [rax + 8]	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001890	          0x4889ee	                            mov rsi, rbp	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001893	      0xe800000000	                          call 0x4001898	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x4001898	            0x85c0	                           test eax, eax	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x400189a	            0x7422	                            je 0x40018be	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x400189c	            0xeb06	                           jmp 0x40018a4	      1317	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_1
0x400189e	    0x41bd00000000	                             mov r13d, 0	      1316	vtls.c	FUNCTION_62	FOR_1	IF_3
0x40018a4	          0x4d63ed	                        movsxd r13, r13d	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x40018a7	    0x488d05000000	                   lea rax, [0x040018ae]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x40018ae	        0x4a8b3ce8	            mov rdi, qword [rax + r13*8]	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x40018b2	      0xe8c5e7ffff	                  call sym.multissl_init	      1318	vtls.c	FUNCTION_62	FOR_1	IF_3	CALL_2
0x40018b7	      0xb800000000	                              mov eax, 0	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x40018bc	            0xeb1a	                           jmp 0x40018d8	      1319	vtls.c	FUNCTION_62	FOR_1	IF_3
0x40018be	        0x4183c501	                             add r13d, 1	      1315	vtls.c	FUNCTION_62	FOR_1
0x40018c2	        0x488b4308	                mov rax, qword [rbx + 8]	      1315	vtls.c	FUNCTION_62	FOR_1
0x40018c6	          0x4885c0	                           test rax, rax	      1315	vtls.c	FUNCTION_62	FOR_1
0x40018c9	            0x75b3	                           jne 0x400187e	      1315	vtls.c	FUNCTION_62	FOR_1
0x40018cb	      0xb801000000	                              mov eax, 1	      1323	vtls.c	FUNCTION_62
0x40018d0	            0xeb06	                           jmp 0x40018d8	      1323	vtls.c	FUNCTION_62
0x40018d2	      0xb801000000	                              mov eax, 1	      1323	vtls.c	FUNCTION_62
0x40018d7	              0xc3	                                     ret	      1323	vtls.c	FUNCTION_62
0x40018d8	        0x4883c408	                              add rsp, 8	      1324	vtls.c	FUNCTION_62
0x40018dc	              0x5b	                                 pop rbx	      1324	vtls.c	FUNCTION_62
0x40018dd	              0x5d	                                 pop rbp	      1324	vtls.c	FUNCTION_62
0x40018de	            0x415c	                                 pop r12	      1324	vtls.c	FUNCTION_62
0x40018e0	            0x415d	                                 pop r13	      1324	vtls.c	FUNCTION_62
0x40018e2	              0xc3	                                     ret	      1324	vtls.c	FUNCTION_62
Curl_none_set_engine	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000064	      0xb804000000	                              mov eax, 4	      1055	vtls.c	FUNCTION_49
0x4000069	              0xc3	                                     ret	      1055	vtls.c	FUNCTION_49
Curl_none_data_pending	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000058	      0xb800000000	                              mov eax, 0	      1042	vtls.c	FUNCTION_47
0x400005d	              0xc3	                                     ret	      1042	vtls.c	FUNCTION_47
Curl_ssl_getsock	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	17
0x4000f7d	      0xb800000000	                              mov eax, 0	       521	vtls.c	FUNCTION_18	IF_1
0x4000f82	            0x85d2	                           test edx, edx	       520	vtls.c	FUNCTION_18	IF_1
0x4000f84	            0x7430	                            je 0x4000fb6	       520	vtls.c	FUNCTION_18	IF_1
0x4000f86	    0x8b9798020000	           mov edx, dword [rdi + 0x298] 	       523	vtls.c	FUNCTION_18	IF_2
0x4000f8c	          0x83fa03	                              cmp edx, 3	       523	vtls.c	FUNCTION_18	IF_2
0x4000f8f	            0x750e	                           jne 0x4000f9f	       523	vtls.c	FUNCTION_18	IF_2
0x4000f91	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       525	vtls.c	FUNCTION_18	IF_2
0x4000f97	            0x8906	                    mov dword [rsi], eax	       525	vtls.c	FUNCTION_18	IF_2
0x4000f99	      0xb800000100	                        mov eax, 0x10000	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x4000f9e	              0xc3	                                     ret	       526	vtls.c	FUNCTION_18	IF_2	CALL_1
0x4000f9f	      0xb800000000	                              mov eax, 0	       534	vtls.c	FUNCTION_18
0x4000fa4	          0x83fa02	                              cmp edx, 2	       528	vtls.c	FUNCTION_18	IF_3
0x4000fa7	            0x750d	                           jne 0x4000fb6	       528	vtls.c	FUNCTION_18	IF_3
0x4000fa9	    0x8b8758020000	           mov eax, dword [rdi + 0x258] 	       530	vtls.c	FUNCTION_18	IF_3
0x4000faf	            0x8906	                    mov dword [rsi], eax	       530	vtls.c	FUNCTION_18	IF_3
0x4000fb1	      0xb801000000	                              mov eax, 1	       531	vtls.c	FUNCTION_18	IF_3	CALL_2
0x4000fb6	            0xf3c3	                                     ret	       535	vtls.c	FUNCTION_18
Curl_ssl_delsessionid	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,1	22
0x4000c2e	        0x4883ec08	                              sub rsp, 8	       387	vtls.c	FUNCTION_15
0x4000c32	          0x488b07	                    mov rax, qword [rdi]	       389	vtls.c	FUNCTION_15
0x4000c35	    0x488b88780700	           mov rcx, qword [rax + 0x778] 	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c3c	          0x4885c9	                           test rcx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c3f	            0x743a	                            je 0x4000c7b	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c41	    0x488bb8504d00	          mov rdi, qword [rax + 0x4d50] 	       392	vtls.c	FUNCTION_15	FOR_1
0x4000c48	    0x488d87880000	                   lea rax, [rdi + 0x88]	       392	vtls.c	FUNCTION_15	FOR_1
0x4000c4f	      0xba00000000	                              mov edx, 0	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c54	        0x483b7718	            cmp rsi, qword [rdi + 0x18] 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c58	            0x7518	                           jne 0x4000c72	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c5a	            0xeb0f	                           jmp 0x4000c6b	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c5c	          0x4889c7	                            mov rdi, rax	       392	vtls.c	FUNCTION_15	FOR_1
0x4000c5f	    0x480588000000	                           add rax, 0x88	       392	vtls.c	FUNCTION_15	FOR_1
0x4000c65	        0x48397090	            cmp qword [rax - 0x70], rsi 	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c69	            0x7507	                           jne 0x4000c72	       394	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c6b	      0xe800000000	                          call 0x4000c70	       395	vtls.c	FUNCTION_15	FOR_1	IF_1	CALL_1
0x4000c70	            0xeb09	                           jmp 0x4000c7b	       396	vtls.c	FUNCTION_15	FOR_1	IF_1
0x4000c72	        0x4883c201	                              add rdx, 1	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c76	          0x4839ca	                            cmp rdx, rcx	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c79	            0x75e1	                           jne 0x4000c5c	       391	vtls.c	FUNCTION_15	FOR_1
0x4000c7b	        0x4883c408	                              add rsp, 8	       399	vtls.c	FUNCTION_15
0x4000c7f	              0xc3	                                     ret	       399	vtls.c	FUNCTION_15
Curl_ssl_close	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x4000fb8	        0x4883ec08	                              sub rsp, 8	       550	vtls.c	FUNCTION_20
0x4000fbc	    0x488b05000000	            mov rax, qword [0x04000fc3] 	       552	vtls.c	FUNCTION_20	CALL_2
0x4000fc3	          0xff5078	                 call qword [rax + 0x78]	       552	vtls.c	FUNCTION_20	CALL_2
0x4000fc6	        0x4883c408	                              add rsp, 8	       553	vtls.c	FUNCTION_20
0x4000fca	              0xc3	                                     ret	       553	vtls.c	FUNCTION_20
Curl_multissl_version	CALL,3:WHILE,0:functions,0:IF,5:SWITCH,0:ELSE,1:DO,0:FOR,1	81
0x400024d	            0x4157	                                push r15	      1229	vtls.c	FUNCTION_60
0x400024f	            0x4156	                                push r14	      1229	vtls.c	FUNCTION_60
0x4000251	            0x4155	                                push r13	      1229	vtls.c	FUNCTION_60
0x4000253	            0x4154	                                push r12	      1229	vtls.c	FUNCTION_60
0x4000255	              0x55	                                push rbp	      1229	vtls.c	FUNCTION_60
0x4000256	              0x53	                                push rbx	      1229	vtls.c	FUNCTION_60
0x4000257	        0x4883ec08	                              sub rsp, 8	      1229	vtls.c	FUNCTION_60
0x400025b	          0x4989fc	                            mov r12, rdi	      1229	vtls.c	FUNCTION_60
0x400025e	          0x4889f3	                            mov rbx, rsi	      1229	vtls.c	FUNCTION_60
0x4000261	    0x488b05000000	            mov rax, qword [0x04000268] 	      1235	vtls.c	FUNCTION_60
0x4000268	    0x488d15000000	                   lea rdx, [0x0400026f]	      1235	vtls.c	FUNCTION_60
0x400026f	          0x4839d0	                            cmp rax, rdx	      1235	vtls.c	FUNCTION_60
0x4000272	    0x480f44050000	           cmove rax, qword [0x0400027a]	      1235	vtls.c	FUNCTION_60
0x400027a	    0x483b05000000	            cmp rax, qword [0x04000281] 	      1237	vtls.c	FUNCTION_60	IF_1
0x4000281	     0xf84aa000000	                            je 0x4000331	      1237	vtls.c	FUNCTION_60	IF_1
0x4000287	    0x488905000000	            mov qword [0x0400028e], rax 	      1241	vtls.c	FUNCTION_60	IF_1
0x400028e	    0x488b05000000	            mov rax, qword [0x04000295] 	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000295	    0x488d15000000	                   lea rdx, [0x0400029c]	      1238	vtls.c	FUNCTION_60	IF_1
0x400029c	          0x4885c0	                           test rax, rax	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400029f	            0x747c	                            je 0x400031d	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x40002a1	    0x488d2d000000	                   lea rbp, [0x040002a8]	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x40002a8	    0x41bd00000000	                             mov r13d, 0	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x40002ae	          0x4889d1	                            mov rcx, rdx	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x40002b1	    0x4c8d35000000	                   lea r14, [0x040002b8]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002b8	            0xeb15	                           jmp 0x40002cf	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002ba	          0x4585ed	                         test r13d, r13d	      1244	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002bd	            0x7409	                            je 0x40002c8	      1244	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002bf	        0x488d4a01	                      lea rcx, [rdx + 1]	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002c3	          0xc60220	                    mov byte [rdx], 0x20	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002c6	            0xeb03	                           jmp 0x40002cb	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002c8	          0x4889d1	                            mov rcx, rdx	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002cb	        0x4883c508	                              add rbp, 8	      1245	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_2
0x40002cf	    0x483905000000	            cmp qword [0x040002d6], rax 	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002d6	            0x7409	                            je 0x40002e1	      1246	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002d8	        0x4c8d7901	                      lea r15, [rcx + 1]	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002dc	          0xc60128	                    mov byte [rcx], 0x28	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002df	            0xeb03	                           jmp 0x40002e4	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002e1	          0x4989cf	                            mov r15, rcx	      1247	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_3
0x40002e4	          0x4c89f6	                            mov rsi, r14	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002e7	          0x4c29fe	                            sub rsi, r15	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002ea	          0x4c89ff	                            mov rdi, r15	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002ed	          0xff5030	                 call qword [rax + 0x30]	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002f0	          0x4901c7	                            add r15, rax	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002f3	          0x4889e8	                            mov rax, rbp	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x40002f6	    0x488b0d000000	            mov rcx, qword [0x040002fd] 	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x40002fd	        0x48394d00	                    cmp qword [rbp], rcx	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000301	            0x740a	                            je 0x400030d	      1249	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000303	        0x498d5701	                      lea rdx, [r15 + 1]	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x4000307	        0x41c60729	                    mov byte [r15], 0x29	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x400030b	            0xeb03	                           jmp 0x4000310	      1250	vtls.c	FUNCTION_60	IF_1	FOR_1	IF_4
0x400030d	          0x4c89fa	                            mov rdx, r15	      1248	vtls.c	FUNCTION_60	IF_1	FOR_1	CALL_1
0x4000310	        0x4183c501	                             add r13d, 1	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000314	        0x488b4008	                mov rax, qword [rax + 8]	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x4000318	          0x4885c0	                           test rax, rax	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400031b	            0x759d	                           jne 0x40002ba	      1243	vtls.c	FUNCTION_60	IF_1	FOR_1
0x400031d	          0xc60200	                       mov byte [rdx], 0	      1252	vtls.c	FUNCTION_60	IF_1
0x4000320	    0x488d05000000	                   lea rax, [0x04000327]	      1253	vtls.c	FUNCTION_60	IF_1
0x4000327	          0x4829c2	                            sub rdx, rax	      1253	vtls.c	FUNCTION_60	IF_1
0x400032a	    0x488915000000	            mov qword [0x04000331], rdx 	      1253	vtls.c	FUNCTION_60	IF_1
0x4000331	    0x488b15000000	            mov rdx, qword [0x04000338] 	      1256	vtls.c	FUNCTION_60	IF_5
0x4000338	          0x4839da	                            cmp rdx, rbx	      1256	vtls.c	FUNCTION_60	IF_5
0x400033b	            0x7615	                           jbe 0x4000352	      1256	vtls.c	FUNCTION_60	IF_5
0x400033d	        0x4883c201	                              add rdx, 1	        53	string3.h	FUNCTION_64	CALL_3
0x4000341	    0x488d35000000	                   lea rsi, [0x04000348]	        53	string3.h	FUNCTION_64	CALL_3
0x4000348	          0x4c89e7	                            mov rdi, r12	        53	string3.h	FUNCTION_64	CALL_3
0x400034b	      0xe800000000	                          call 0x4000350	        53	string3.h	FUNCTION_64	CALL_3
0x4000350	            0xeb19	                           jmp 0x400036b	        53	string3.h	FUNCTION_64	CALL_3
0x4000352	        0x488d53ff	                      lea rdx, [rbx - 1]	      1259	vtls.c	FUNCTION_60	ELSE_1	CALL_3
0x4000356	    0x488d35000000	                   lea rsi, [0x0400035d]	        53	string3.h	FUNCTION_64	CALL_3
0x400035d	          0x4c89e7	                            mov rdi, r12	        53	string3.h	FUNCTION_64	CALL_3
0x4000360	      0xe800000000	                          call 0x4000365	        53	string3.h	FUNCTION_64	CALL_3
0x4000365	    0x41c6441cff00	             mov byte [r12 + rbx - 1], 0	      1260	vtls.c	FUNCTION_60	ELSE_1
0x400036b	    0x488b05000000	            mov rax, qword [0x04000372] 	      1264	vtls.c	FUNCTION_60
0x4000372	        0x4883c408	                              add rsp, 8	      1264	vtls.c	FUNCTION_60
0x4000376	              0x5b	                                 pop rbx	      1264	vtls.c	FUNCTION_60
0x4000377	              0x5d	                                 pop rbp	      1264	vtls.c	FUNCTION_60
0x4000378	            0x415c	                                 pop r12	      1264	vtls.c	FUNCTION_60
0x400037a	            0x415d	                                 pop r13	      1264	vtls.c	FUNCTION_60
0x400037c	            0x415e	                                 pop r14	      1264	vtls.c	FUNCTION_60
0x400037e	            0x415f	                                 pop r15	      1264	vtls.c	FUNCTION_60
0x4000380	              0xc3	                                     ret	      1264	vtls.c	FUNCTION_60
Curl_free_primary_ssl_config	CALL,6:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	27
0x400075a	              0x55	                                push rbp	       127	vtls.c	FUNCTION_3
0x400075b	              0x53	                                push rbx	       127	vtls.c	FUNCTION_3
0x400075c	        0x4883ec08	                              sub rsp, 8	       127	vtls.c	FUNCTION_3
0x4000760	          0x4889fb	                            mov rbx, rdi	       127	vtls.c	FUNCTION_3
0x4000763	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       128	vtls.c	FUNCTION_3	CALL_1
0x4000767	    0x488b2d000000	            mov rbp, qword [0x0400076e] 	       128	vtls.c	FUNCTION_3	CALL_1
0x400076e	          0xff5500	                        call qword [rbp]	       128	vtls.c	FUNCTION_3	CALL_1
0x4000771	    0x48c743180000	               mov qword [rbx + 0x18], 0	       128	vtls.c	FUNCTION_3	CALL_1
0x4000779	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	       129	vtls.c	FUNCTION_3	CALL_2
0x400077d	          0xff5500	                        call qword [rbp]	       129	vtls.c	FUNCTION_3	CALL_2
0x4000780	    0x48c743200000	               mov qword [rbx + 0x20], 0	       129	vtls.c	FUNCTION_3	CALL_2
0x4000788	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	       130	vtls.c	FUNCTION_3	CALL_3
0x400078c	          0xff5500	                        call qword [rbp]	       130	vtls.c	FUNCTION_3	CALL_3
0x400078f	    0x48c743280000	               mov qword [rbx + 0x28], 0	       130	vtls.c	FUNCTION_3	CALL_3
0x4000797	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	       131	vtls.c	FUNCTION_3	CALL_4
0x400079b	          0xff5500	                        call qword [rbp]	       131	vtls.c	FUNCTION_3	CALL_4
0x400079e	    0x48c743300000	               mov qword [rbx + 0x30], 0	       131	vtls.c	FUNCTION_3	CALL_4
0x40007a6	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	       132	vtls.c	FUNCTION_3	CALL_5
0x40007aa	          0xff5500	                        call qword [rbp]	       132	vtls.c	FUNCTION_3	CALL_5
0x40007ad	    0x48c743380000	               mov qword [rbx + 0x38], 0	       132	vtls.c	FUNCTION_3	CALL_5
0x40007b5	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	       133	vtls.c	FUNCTION_3	CALL_6
0x40007b9	          0xff5500	                        call qword [rbp]	       133	vtls.c	FUNCTION_3	CALL_6
0x40007bc	    0x48c743400000	               mov qword [rbx + 0x40], 0	       133	vtls.c	FUNCTION_3	CALL_6
0x40007c4	        0x4883c408	                              add rsp, 8	       134	vtls.c	FUNCTION_3
0x40007c8	              0x5b	                                 pop rbx	       134	vtls.c	FUNCTION_3
0x40007c9	              0x5d	                                 pop rbp	       134	vtls.c	FUNCTION_3
0x40007ca	              0xc3	                                     ret	       134	vtls.c	FUNCTION_3
Curl_ssl_backend	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	7
0x40007cb	        0x4883ec08	                              sub rsp, 8	       141	vtls.c	FUNCTION_4
0x40007cf	      0xbf00000000	                              mov edi, 0	       143	vtls.c	FUNCTION_4	CALL_1
0x40007d4	      0xe8a3f8ffff	                  call sym.multissl_init	       143	vtls.c	FUNCTION_4	CALL_1
0x40007d9	    0x488b05000000	            mov rax, qword [0x040007e0] 	       144	vtls.c	FUNCTION_4
0x40007e0	            0x8b00	                    mov eax, dword [rax]	       144	vtls.c	FUNCTION_4
0x40007e2	        0x4883c408	                              add rsp, 8	       148	vtls.c	FUNCTION_4
0x40007e6	              0xc3	                                     ret	       148	vtls.c	FUNCTION_4
Curl_ssl_init	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	9
0x40007e7	      0xb801000000	                              mov eax, 1	       165	vtls.c	FUNCTION_5	IF_1
0x40007ec	    0x803d00000000	                cmp byte [0x040007f3], 0	       164	vtls.c	FUNCTION_5	IF_1
0x40007f3	            0x7519	                           jne 0x400080e	       164	vtls.c	FUNCTION_5	IF_1
0x40007f5	        0x4883ec08	                              sub rsp, 8	       162	vtls.c	FUNCTION_5
0x40007f9	    0xc60500000000	                mov byte [0x04000800], 1	       166	vtls.c	FUNCTION_5
0x4000800	    0x488b05000000	            mov rax, qword [0x04000807] 	       168	vtls.c	FUNCTION_5	CALL_1
0x4000807	          0xff5020	                 call qword [rax + 0x20]	       168	vtls.c	FUNCTION_5	CALL_1
0x400080a	        0x4883c408	                              add rsp, 8	       169	vtls.c	FUNCTION_5
0x400080e	            0xf3c3	                                     ret	       169	vtls.c	FUNCTION_5
Curl_ssl_push_certinfo_len	CALL,6:WHILE,0:functions,0:IF,2:SWITCH,0:ELSE,0:DO,0:FOR,0	64
0x40011c8	            0x4157	                                push r15	       687	vtls.c	FUNCTION_31
0x40011ca	            0x4156	                                push r14	       687	vtls.c	FUNCTION_31
0x40011cc	            0x4155	                                push r13	       687	vtls.c	FUNCTION_31
0x40011ce	            0x4154	                                push r12	       687	vtls.c	FUNCTION_31
0x40011d0	              0x55	                                push rbp	       687	vtls.c	FUNCTION_31
0x40011d1	              0x53	                                push rbx	       687	vtls.c	FUNCTION_31
0x40011d2	        0x4883ec28	                           sub rsp, 0x28	       687	vtls.c	FUNCTION_31
0x40011d6	          0x4989ff	                            mov r15, rdi	       687	vtls.c	FUNCTION_31
0x40011d9	        0x8974240c	              mov dword [rsp + 0xc], esi	       687	vtls.c	FUNCTION_31
0x40011dd	      0x48894c2418	             mov qword [rsp + 0x18], rcx	       687	vtls.c	FUNCTION_31
0x40011e2	          0x4d89c5	                             mov r13, r8	       687	vtls.c	FUNCTION_31
0x40011e5	      0xb800000000	                              mov eax, 0	       692	vtls.c	FUNCTION_31	CALL_1
0x40011ea	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       692	vtls.c	FUNCTION_31	CALL_1
0x40011f1	      0x4889542410	             mov qword [rsp + 0x10], rdx	       692	vtls.c	FUNCTION_31	CALL_1
0x40011f6	          0x4889d7	                            mov rdi, rdx	       692	vtls.c	FUNCTION_31	CALL_1
0x40011f9	            0xf2ae	              repne scasb al, byte [rdi]	       692	vtls.c	FUNCTION_31	CALL_1
0x40011fb	          0x48f7d1	                                 not rcx	       692	vtls.c	FUNCTION_31	CALL_1
0x40011fe	        0x488d59ff	                      lea rbx, [rcx - 1]	       692	vtls.c	FUNCTION_31	CALL_1
0x4001202	        0x4e8d2403	                     lea r12, [rbx + r8]	       693	vtls.c	FUNCTION_31
0x4001206	      0x4d8d742402	                      lea r14, [r12 + 2]	       693	vtls.c	FUNCTION_31
0x400120b	          0x4c89f7	                            mov rdi, r14	       695	vtls.c	FUNCTION_31	CALL_2
0x400120e	    0x488b05000000	            mov rax, qword [0x04001215] 	       695	vtls.c	FUNCTION_31	CALL_2
0x4001215	            0xff10	                        call qword [rax]	       695	vtls.c	FUNCTION_31	CALL_2
0x4001217	          0x4889c5	                            mov rbp, rax	       695	vtls.c	FUNCTION_31	CALL_2
0x400121a	      0xb81b000000	                           mov eax, 0x1b	       697	vtls.c	FUNCTION_31	IF_1
0x400121f	          0x4885ed	                           test rbp, rbp	       696	vtls.c	FUNCTION_31	IF_1
0x4001222	     0xf8485000000	                            je 0x40012ad	       696	vtls.c	FUNCTION_31	IF_1
0x4001228	      0x488b4c2410	            mov rcx, qword [rsp + 0x10] 	       700	vtls.c	FUNCTION_31
0x400122d	    0x488d15000000	                   lea rdx, [0x04001234]	       700	vtls.c	FUNCTION_31
0x4001234	          0x4c89f6	                            mov rsi, r14	       700	vtls.c	FUNCTION_31
0x4001237	          0x4889ef	                            mov rdi, rbp	       700	vtls.c	FUNCTION_31
0x400123a	      0xb800000000	                              mov eax, 0	       700	vtls.c	FUNCTION_31
0x400123f	      0xe800000000	                          call 0x4001244	       700	vtls.c	FUNCTION_31
0x4001244	      0x488d7c1d01	                lea rdi, [rbp + rbx + 1]	        53	string3.h	FUNCTION_64	CALL_3
0x4001249	          0x4c89ea	                            mov rdx, r13	        53	string3.h	FUNCTION_64	CALL_3
0x400124c	      0x488b742418	            mov rsi, qword [rsp + 0x18] 	        53	string3.h	FUNCTION_64	CALL_3
0x4001251	      0xe800000000	                          call 0x4001256	        53	string3.h	FUNCTION_64	CALL_3
0x4001256	    0x42c644250100	            mov byte [rbp + r12 + 1], 0 	       706	vtls.c	FUNCTION_31
0x400125c	      0x48635c240c	          movsxd rbx, dword [rsp + 0xc] 	       708	vtls.c	FUNCTION_31	CALL_4
0x4001261	    0x498b87b85200	          mov rax, qword [r15 + 0x52b8] 	       708	vtls.c	FUNCTION_31	CALL_4
0x4001268	        0x488b3cd8	            mov rdi, qword [rax + rbx*8]	       708	vtls.c	FUNCTION_31	CALL_4
0x400126c	          0x4889ee	                            mov rsi, rbp	       708	vtls.c	FUNCTION_31	CALL_4
0x400126f	      0xe800000000	                          call 0x4001274	       708	vtls.c	FUNCTION_31	CALL_4
0x4001274	          0x4989c4	                            mov r12, rax	       708	vtls.c	FUNCTION_31	CALL_4
0x4001277	      0xb800000000	                              mov eax, 0	       691	vtls.c	FUNCTION_31
0x400127c	          0x4d85e4	                           test r12, r12	       709	vtls.c	FUNCTION_31	IF_2
0x400127f	            0x7521	                           jne 0x40012a2	       709	vtls.c	FUNCTION_31	IF_2
0x4001281	          0x4889ef	                            mov rdi, rbp	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x4001284	    0x488b05000000	            mov rax, qword [0x0400128b] 	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x400128b	            0xff10	                        call qword [rax]	       710	vtls.c	FUNCTION_31	IF_2	CALL_5
0x400128d	    0x498b87b85200	          mov rax, qword [r15 + 0x52b8] 	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001294	        0x488b3cd8	            mov rdi, qword [rax + rbx*8]	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x4001298	      0xe800000000	                          call 0x400129d	       711	vtls.c	FUNCTION_31	IF_2	CALL_6
0x400129d	      0xb81b000000	                           mov eax, 0x1b	       712	vtls.c	FUNCTION_31	IF_2
0x40012a2	    0x498b97b85200	          mov rdx, qword [r15 + 0x52b8] 	       715	vtls.c	FUNCTION_31
0x40012a9	        0x4c8924da	            mov qword [rdx + rbx*8], r12	       715	vtls.c	FUNCTION_31
0x40012ad	        0x4883c428	                           add rsp, 0x28	       717	vtls.c	FUNCTION_31
0x40012b1	              0x5b	                                 pop rbx	       717	vtls.c	FUNCTION_31
0x40012b2	              0x5d	                                 pop rbp	       717	vtls.c	FUNCTION_31
0x40012b3	            0x415c	                                 pop r12	       717	vtls.c	FUNCTION_31
0x40012b5	            0x415d	                                 pop r13	       717	vtls.c	FUNCTION_31
0x40012b7	            0x415e	                                 pop r14	       717	vtls.c	FUNCTION_31
0x40012b9	            0x415f	                                 pop r15	       717	vtls.c	FUNCTION_31
0x40012bb	              0xc3	                                     ret	       717	vtls.c	FUNCTION_31
Curl_ssl_sessionid_unlock	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	11
0x4000963	          0x488b3f	                    mov rdi, qword [rdi]	       293	vtls.c	FUNCTION_12	IF_1
0x4000966	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       293	vtls.c	FUNCTION_12	IF_1
0x400096d	          0x4885c0	                           test rax, rax	       293	vtls.c	FUNCTION_12	IF_1
0x4000970	            0x7417	                            je 0x4000989	       293	vtls.c	FUNCTION_12	IF_1
0x4000972	          0xf60010	                   test byte [rax], 0x10	       293	vtls.c	FUNCTION_12	IF_1
0x4000975	            0x7412	                            je 0x4000989	       293	vtls.c	FUNCTION_12	IF_1
0x4000977	        0x4883ec08	                              sub rsp, 8	       292	vtls.c	FUNCTION_12
0x400097b	      0xbe04000000	                              mov esi, 4	       294	vtls.c	FUNCTION_12	CALL_1
0x4000980	      0xe800000000	                          call 0x4000985	       294	vtls.c	FUNCTION_12	CALL_1
0x4000985	        0x4883c408	                              add rsp, 8	       295	vtls.c	FUNCTION_12
0x4000989	            0xf3c3	                                     ret	       295	vtls.c	FUNCTION_12
Curl_ssl_false_start	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40017f1	        0x4883ec08	                              sub rsp, 8	       978	vtls.c	FUNCTION_38
0x40017f5	    0x488b05000000	            mov rax, qword [0x040017fc] 	       979	vtls.c	FUNCTION_38	CALL_1
0x40017fc	    0xff90a8000000	                 call qword [rax + 0xa8]	       979	vtls.c	FUNCTION_38	CALL_1
0x4001802	        0x4883c408	                              add rsp, 8	       980	vtls.c	FUNCTION_38
0x4001806	              0xc3	                                     ret	       980	vtls.c	FUNCTION_38
Curl_ssl_cert_status_request	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40017de	        0x4883ec08	                              sub rsp, 8	       970	vtls.c	FUNCTION_37
0x40017e2	    0x488b05000000	            mov rax, qword [0x040017e9] 	       971	vtls.c	FUNCTION_37	CALL_1
0x40017e9	          0xff5058	                 call qword [rax + 0x58]	       971	vtls.c	FUNCTION_37	CALL_1
0x40017ec	        0x4883c408	                              add rsp, 8	       972	vtls.c	FUNCTION_37
0x40017f0	              0xc3	                                     ret	       972	vtls.c	FUNCTION_37
Curl_ssl_kill_session	CALL,4:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	24
0x4000bcc	              0x55	                                push rbp	       366	vtls.c	FUNCTION_14
0x4000bcd	              0x53	                                push rbx	       366	vtls.c	FUNCTION_14
0x4000bce	        0x4883ec08	                              sub rsp, 8	       366	vtls.c	FUNCTION_14
0x4000bd2	          0x4889fb	                            mov rbx, rdi	       366	vtls.c	FUNCTION_14
0x4000bd5	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	       367	vtls.c	FUNCTION_14	IF_1
0x4000bd9	          0x4885ff	                           test rdi, rdi	       367	vtls.c	FUNCTION_14	IF_1
0x4000bdc	            0x7449	                            je 0x4000c27	       367	vtls.c	FUNCTION_14	IF_1
0x4000bde	    0x488b05000000	            mov rax, qword [0x04000be5] 	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x4000be5	    0xff9088000000	                 call qword [rax + 0x88]	       371	vtls.c	FUNCTION_14	IF_1	CALL_1
0x4000beb	    0x48c743180000	               mov qword [rbx + 0x18], 0	       373	vtls.c	FUNCTION_14	IF_1
0x4000bf3	    0x48c743280000	               mov qword [rbx + 0x28], 0	       374	vtls.c	FUNCTION_14	IF_1
0x4000bfb	        0x488d7b38	                   lea rdi, [rbx + 0x38]	       376	vtls.c	FUNCTION_14	IF_1	CALL_2
0x4000bff	      0xe800000000	                          call 0x4000c04	       376	vtls.c	FUNCTION_14	IF_1	CALL_2
0x4000c04	    0x488b2d000000	            mov rbp, qword [0x04000c0b] 	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000c0b	          0x488b3b	                    mov rdi, qword [rbx]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000c0e	          0xff5500	                        call qword [rbp]	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000c11	    0x48c703000000	                      mov qword [rbx], 0	       378	vtls.c	FUNCTION_14	IF_1	CALL_3
0x4000c18	        0x488b7b08	                mov rdi, qword [rbx + 8]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000c1c	          0xff5500	                        call qword [rbp]	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000c1f	    0x48c743080000	                  mov qword [rbx + 8], 0	       379	vtls.c	FUNCTION_14	IF_1	CALL_4
0x4000c27	        0x4883c408	                              add rsp, 8	       381	vtls.c	FUNCTION_14
0x4000c2b	              0x5b	                                 pop rbx	       381	vtls.c	FUNCTION_14
0x4000c2c	              0x5d	                                 pop rbp	       381	vtls.c	FUNCTION_14
0x4000c2d	              0xc3	                                     ret	       381	vtls.c	FUNCTION_14
Curl_none_false_start	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	2
0x4000076	      0xb800000000	                              mov eax, 0	      1072	vtls.c	FUNCTION_52
0x400007b	              0xc3	                                     ret	      1072	vtls.c	FUNCTION_52
Curl_ssl_tls13_ciphersuites	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x4001807	    0x488b05000000	            mov rax, qword [0x0400180e] 	       987	vtls.c	FUNCTION_39
0x400180e	          0x8b4010	            mov eax, dword [rax + 0x10] 	       987	vtls.c	FUNCTION_39
0x4001811	          0xc1e805	                              shr eax, 5	       987	vtls.c	FUNCTION_39
0x4001814	          0x83e001	                              and eax, 1	       987	vtls.c	FUNCTION_39
0x4001817	              0xc3	                                     ret	       988	vtls.c	FUNCTION_39
Curl_ssl_sessionid_lock	CALL,1:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	12
0x4000936	          0x488b3f	                    mov rdi, qword [rdi]	       283	vtls.c	FUNCTION_11	IF_1
0x4000939	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       283	vtls.c	FUNCTION_11	IF_1
0x4000940	          0x4885c0	                           test rax, rax	       283	vtls.c	FUNCTION_11	IF_1
0x4000943	            0x741c	                            je 0x4000961	       283	vtls.c	FUNCTION_11	IF_1
0x4000945	          0xf60010	                   test byte [rax], 0x10	       283	vtls.c	FUNCTION_11	IF_1
0x4000948	            0x7417	                            je 0x4000961	       283	vtls.c	FUNCTION_11	IF_1
0x400094a	        0x4883ec08	                              sub rsp, 8	       282	vtls.c	FUNCTION_11
0x400094e	      0xba02000000	                              mov edx, 2	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000953	      0xbe04000000	                              mov esi, 4	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x4000958	      0xe800000000	                          call 0x400095d	       284	vtls.c	FUNCTION_11	IF_1	CALL_1
0x400095d	        0x4883c408	                              add rsp, 8	       286	vtls.c	FUNCTION_11
0x4000961	            0xf3c3	                                     ret	       286	vtls.c	FUNCTION_11
Curl_ssl_check_cxn	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40010ea	        0x4883ec08	                              sub rsp, 8	       632	vtls.c	FUNCTION_27
0x40010ee	    0x488b05000000	            mov rax, qword [0x040010f5] 	       633	vtls.c	FUNCTION_27	CALL_1
0x40010f5	          0xff5038	                 call qword [rax + 0x38]	       633	vtls.c	FUNCTION_27	CALL_1
0x40010f8	        0x4883c408	                              add rsp, 8	       634	vtls.c	FUNCTION_27
0x40010fc	              0xc3	                                     ret	       634	vtls.c	FUNCTION_27
Curl_ssl_config_matches	CALL,6:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	62
0x4000537	              0x55	                                push rbp	        88	vtls.c	FUNCTION_1
0x4000538	              0x53	                                push rbx	        88	vtls.c	FUNCTION_1
0x4000539	        0x4883ec08	                              sub rsp, 8	        88	vtls.c	FUNCTION_1
0x400053d	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x4000542	          0x488b1e	                    mov rbx, qword [rsi]	        89	vtls.c	FUNCTION_1	IF_1
0x4000545	          0x48391f	                    cmp qword [rdi], rbx	        89	vtls.c	FUNCTION_1	IF_1
0x4000548	     0xf85b8000000	                           jne 0x4000606	        89	vtls.c	FUNCTION_1	IF_1
0x400054e	        0x488b4e08	                mov rcx, qword [rsi + 8]	        89	vtls.c	FUNCTION_1	IF_1
0x4000552	        0x48394f08	                cmp qword [rdi + 8], rcx	        89	vtls.c	FUNCTION_1	IF_1
0x4000556	     0xf85aa000000	                           jne 0x4000606	        89	vtls.c	FUNCTION_1	IF_1
0x400055c	          0x8b4f10	            mov ecx, dword [rdi + 0x10] 	        92	vtls.c	FUNCTION_1	IF_1
0x400055f	    0x81e1ffffff00	                       and ecx, 0xffffff	        92	vtls.c	FUNCTION_1	IF_1
0x4000565	          0x8b5610	            mov edx, dword [rsi + 0x10] 	        92	vtls.c	FUNCTION_1	IF_1
0x4000568	    0x81e2ffffff00	                       and edx, 0xffffff	        92	vtls.c	FUNCTION_1	IF_1
0x400056e	            0x39d1	                            cmp ecx, edx	        92	vtls.c	FUNCTION_1	IF_1
0x4000570	     0xf8590000000	                           jne 0x4000606	        92	vtls.c	FUNCTION_1	IF_1
0x4000576	          0x4889f5	                            mov rbp, rsi	        92	vtls.c	FUNCTION_1	IF_1
0x4000579	          0x4889fb	                            mov rbx, rdi	        92	vtls.c	FUNCTION_1	IF_1
0x400057c	        0x488b7618	            mov rsi, qword [rsi + 0x18] 	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x4000580	        0x488b7f18	            mov rdi, qword [rdi + 0x18] 	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x4000584	      0xe800000000	                          call 0x4000589	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x4000589	            0x89c2	                            mov edx, eax	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x400058b	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x4000590	            0x85d2	                           test edx, edx	        93	vtls.c	FUNCTION_1	IF_1
0x4000592	            0x7472	                            je 0x4000606	        93	vtls.c	FUNCTION_1	IF_1
0x4000594	        0x488b7520	            mov rsi, qword [rbp + 0x20] 	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x4000598	        0x488b7b20	            mov rdi, qword [rbx + 0x20] 	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x400059c	      0xe800000000	                          call 0x40005a1	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x40005a1	            0x89c2	                            mov edx, eax	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x40005a3	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x40005a8	            0x85d2	                           test edx, edx	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x40005aa	            0x745a	                            je 0x4000606	        94	vtls.c	FUNCTION_1	IF_1	CALL_1
0x40005ac	        0x488b7528	            mov rsi, qword [rbp + 0x28] 	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005b0	        0x488b7b28	            mov rdi, qword [rbx + 0x28] 	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005b4	      0xe800000000	                          call 0x40005b9	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005b9	            0x89c2	                            mov edx, eax	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005bb	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x40005c0	            0x85d2	                           test edx, edx	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x40005c2	            0x7442	                            je 0x4000606	        95	vtls.c	FUNCTION_1	IF_1	CALL_2
0x40005c4	        0x488b7530	            mov rsi, qword [rbp + 0x30] 	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005c8	        0x488b7b30	            mov rdi, qword [rbx + 0x30] 	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005cc	      0xe800000000	                          call 0x40005d1	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005d1	            0x89c2	                            mov edx, eax	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005d3	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x40005d8	            0x85d2	                           test edx, edx	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005da	            0x742a	                            je 0x4000606	        96	vtls.c	FUNCTION_1	IF_1	CALL_3
0x40005dc	        0x488b7538	            mov rsi, qword [rbp + 0x38] 	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x40005e0	        0x488b7b38	            mov rdi, qword [rbx + 0x38] 	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x40005e4	      0xe800000000	                          call 0x40005e9	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x40005e9	            0x89c2	                            mov edx, eax	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x40005eb	      0xb800000000	                              mov eax, 0	       102	vtls.c	FUNCTION_1
0x40005f0	            0x85d2	                           test edx, edx	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005f2	            0x7412	                            je 0x4000606	        97	vtls.c	FUNCTION_1	IF_1	CALL_4
0x40005f4	        0x488b7540	            mov rsi, qword [rbp + 0x40] 	        99	vtls.c	FUNCTION_1	IF_1	CALL_6
0x40005f8	        0x488b7b40	            mov rdi, qword [rbx + 0x40] 	        99	vtls.c	FUNCTION_1	IF_1	CALL_6
0x40005fc	      0xe800000000	                          call 0x4000601	        99	vtls.c	FUNCTION_1	IF_1	CALL_6
0x4000601	            0x85c0	                           test eax, eax	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x4000603	           0xf95c0	                                setne al	        98	vtls.c	FUNCTION_1	IF_1	CALL_5
0x4000606	        0x4883c408	                              add rsp, 8	       103	vtls.c	FUNCTION_1
0x400060a	              0x5b	                                 pop rbx	       103	vtls.c	FUNCTION_1
0x400060b	              0x5d	                                 pop rbp	       103	vtls.c	FUNCTION_1
0x400060c	              0xc3	                                     ret	       103	vtls.c	FUNCTION_1
Curl_none_cleanup	CALL,0:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	1
0x4000040	            0xf3c3	                                     ret	      1000	vtls.c	FUNCTION_41
Curl_multissl_get_internals	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	19
0x400017b	              0x55	                                push rbp	      1127	vtls.c	FUNCTION_58
0x400017c	              0x53	                                push rbx	      1127	vtls.c	FUNCTION_58
0x400017d	        0x4883ec08	                              sub rsp, 8	      1127	vtls.c	FUNCTION_58
0x4000181	          0x4889fb	                            mov rbx, rdi	      1127	vtls.c	FUNCTION_58
0x4000184	            0x89f5	                            mov ebp, esi	      1127	vtls.c	FUNCTION_58
0x4000186	      0xbf00000000	                              mov edi, 0	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x400018b	      0xe8ecfeffff	                  call sym.multissl_init	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x4000190	            0x89c2	                            mov edx, eax	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x4000192	      0xb800000000	                              mov eax, 0	      1129	vtls.c	FUNCTION_58	IF_1
0x4000197	            0x85d2	                           test edx, edx	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x4000199	            0x750f	                           jne 0x40001aa	      1128	vtls.c	FUNCTION_58	IF_1	CALL_1
0x400019b	            0x89ee	                            mov esi, ebp	      1130	vtls.c	FUNCTION_58	CALL_2
0x400019d	          0x4889df	                            mov rdi, rbx	      1130	vtls.c	FUNCTION_58	CALL_2
0x40001a0	    0x488b05000000	            mov rax, qword [0x040001a7] 	      1130	vtls.c	FUNCTION_58	CALL_2
0x40001a7	          0xff5070	                 call qword [rax + 0x70]	      1130	vtls.c	FUNCTION_58	CALL_2
0x40001aa	        0x4883c408	                              add rsp, 8	      1131	vtls.c	FUNCTION_58
0x40001ae	              0x5b	                                 pop rbx	      1131	vtls.c	FUNCTION_58
0x40001af	              0x5d	                                 pop rbp	      1131	vtls.c	FUNCTION_58
0x40001b0	              0xc3	                                     ret	      1131	vtls.c	FUNCTION_58
Curl_ssl_random	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40012f1	        0x4883ec08	                              sub rsp, 8	       736	vtls.c	FUNCTION_33
0x40012f5	    0x488b05000000	            mov rax, qword [0x040012fc] 	       737	vtls.c	FUNCTION_33	CALL_1
0x40012fc	          0xff5050	                 call qword [rax + 0x50]	       737	vtls.c	FUNCTION_33	CALL_1
0x40012ff	        0x4883c408	                              add rsp, 8	       738	vtls.c	FUNCTION_33
0x4001303	              0xc3	                                     ret	       738	vtls.c	FUNCTION_33
Curl_ssl_engines_list	CALL,1:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x4001062	        0x4883ec08	                              sub rsp, 8	       585	vtls.c	FUNCTION_24
0x4001066	    0x488b05000000	            mov rax, qword [0x0400106d] 	       586	vtls.c	FUNCTION_24	CALL_1
0x400106d	    0xff90a0000000	                 call qword [rax + 0xa0]	       586	vtls.c	FUNCTION_24	CALL_1
0x4001073	        0x4883c408	                              add rsp, 8	       587	vtls.c	FUNCTION_24
0x4001077	              0xc3	                                     ret	       587	vtls.c	FUNCTION_24
Curl_ssl_close_all	CALL,3:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,1	35
0x4000eeb	            0x4154	                                push r12	       497	vtls.c	FUNCTION_17
0x4000eed	              0x55	                                push rbp	       497	vtls.c	FUNCTION_17
0x4000eee	              0x53	                                push rbx	       497	vtls.c	FUNCTION_17
0x4000eef	          0x4989fc	                            mov r12, rdi	       497	vtls.c	FUNCTION_17
0x4000ef2	    0x4883bf504d00	             cmp qword [rdi + 0x4d50], 0	       500	vtls.c	FUNCTION_17	IF_1
0x4000efa	            0x746c	                            je 0x4000f68	       500	vtls.c	FUNCTION_17	IF_1
0x4000efc	    0x488b87b80000	            mov rax, qword [rdi + 0xb8] 	       500	vtls.c	FUNCTION_17	IF_1
0x4000f03	          0x4885c0	                           test rax, rax	       500	vtls.c	FUNCTION_17	IF_1
0x4000f06	            0x7517	                           jne 0x4000f1f	       500	vtls.c	FUNCTION_17	IF_1
0x4000f08	      0xbd00000000	                              mov ebp, 0	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f0d	      0xbb00000000	                              mov ebx, 0	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f12	    0x4983bc247807	              cmp qword [r12 + 0x778], 0	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f1b	            0x7509	                           jne 0x4000f26	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f1d	            0xeb2c	                           jmp 0x4000f4b	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f1f	          0xf60010	                   test byte [rax], 0x10	       500	vtls.c	FUNCTION_17	IF_1
0x4000f22	            0x74e4	                            je 0x4000f08	       500	vtls.c	FUNCTION_17	IF_1
0x4000f24	            0xeb42	                           jmp 0x4000f68	       500	vtls.c	FUNCTION_17	IF_1
0x4000f26	          0x4889ef	                            mov rdi, rbp	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x4000f29	    0x4903bc24504d	           add rdi, qword [r12 + 0x4d50]	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x4000f31	      0xe800000000	                          call 0x4000f36	       503	vtls.c	FUNCTION_17	IF_1	CALL_1
0x4000f36	        0x4883c301	                              add rbx, 1	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f3a	    0x4881c5880000	                           add rbp, 0x88	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f41	    0x49399c247807	           cmp qword [r12 + 0x778], rbx 	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f49	            0x77db	                            ja 0x4000f26	       501	vtls.c	FUNCTION_17	IF_1	FOR_1
0x4000f4b	    0x498bbc24504d	          mov rdi, qword [r12 + 0x4d50] 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4000f53	    0x488b05000000	            mov rax, qword [0x04000f5a] 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4000f5a	            0xff10	                        call qword [rax]	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4000f5c	    0x49c78424504d	            mov qword [r12 + 0x4d50], 0 	       506	vtls.c	FUNCTION_17	IF_1	CALL_2
0x4000f68	          0x4c89e7	                            mov rdi, r12	       509	vtls.c	FUNCTION_17	CALL_3
0x4000f6b	    0x488b05000000	            mov rax, qword [0x04000f72] 	       509	vtls.c	FUNCTION_17	CALL_3
0x4000f72	    0xff9080000000	                 call qword [rax + 0x80]	       509	vtls.c	FUNCTION_17	CALL_3
0x4000f78	              0x5b	                                 pop rbx	       510	vtls.c	FUNCTION_17
0x4000f79	              0x5d	                                 pop rbp	       510	vtls.c	FUNCTION_17
0x4000f7a	            0x415c	                                 pop r12	       510	vtls.c	FUNCTION_17
0x4000f7c	              0xc3	                                     ret	       510	vtls.c	FUNCTION_17
Curl_ssl_push_certinfo	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	15
0x40012bc	        0x4883ec08	                              sub rsp, 8	       727	vtls.c	FUNCTION_32
0x40012c0	          0x4989fa	                            mov r10, rdi	       727	vtls.c	FUNCTION_32
0x40012c3	          0x4989c9	                             mov r9, rcx	       727	vtls.c	FUNCTION_32
0x40012c6	      0xb800000000	                              mov eax, 0	       728	vtls.c	FUNCTION_32	CALL_1
0x40012cb	    0x48c7c1ffffff	             mov rcx, 0xffffffffffffffff	       728	vtls.c	FUNCTION_32	CALL_1
0x40012d2	          0x4c89cf	                             mov rdi, r9	       728	vtls.c	FUNCTION_32	CALL_1
0x40012d5	            0xf2ae	              repne scasb al, byte [rdi]	       728	vtls.c	FUNCTION_32	CALL_1
0x40012d7	          0x48f7d1	                                 not rcx	       728	vtls.c	FUNCTION_32	CALL_1
0x40012da	          0x4989c8	                             mov r8, rcx	       728	vtls.c	FUNCTION_32	CALL_1
0x40012dd	        0x4983e801	                               sub r8, 1	       730	vtls.c	FUNCTION_32	CALL_2
0x40012e1	          0x4c89c9	                             mov rcx, r9	       730	vtls.c	FUNCTION_32	CALL_2
0x40012e4	          0x4c89d7	                            mov rdi, r10	       730	vtls.c	FUNCTION_32	CALL_2
0x40012e7	      0xe800000000	                          call 0x40012ec	       730	vtls.c	FUNCTION_32	CALL_2
0x40012ec	        0x4883c408	                              add rsp, 8	       731	vtls.c	FUNCTION_32
0x40012f0	              0xc3	                                     ret	       731	vtls.c	FUNCTION_32
Curl_ssl_version	CALL,2:WHILE,0:functions,0:IF,0:SWITCH,0:ELSE,0:DO,0:FOR,0	5
0x40010d7	        0x4883ec08	                              sub rsp, 8	       615	vtls.c	FUNCTION_26
0x40010db	    0x488b05000000	            mov rax, qword [0x040010e2] 	       619	vtls.c	FUNCTION_26	CALL_2
0x40010e2	          0xff5030	                 call qword [rax + 0x30]	       619	vtls.c	FUNCTION_26	CALL_2
0x40010e5	        0x4883c408	                              add rsp, 8	       621	vtls.c	FUNCTION_26
0x40010e9	              0xc3	                                     ret	       621	vtls.c	FUNCTION_26
Curl_multissl_connect	CALL,2:WHILE,0:functions,0:IF,1:SWITCH,0:ELSE,0:DO,0:FOR,0	20
0x40001eb	              0x55	                                push rbp	      1111	vtls.c	FUNCTION_56
0x40001ec	              0x53	                                push rbx	      1111	vtls.c	FUNCTION_56
0x40001ed	        0x4883ec08	                              sub rsp, 8	      1111	vtls.c	FUNCTION_56
0x40001f1	          0x4889fb	                            mov rbx, rdi	      1111	vtls.c	FUNCTION_56
0x40001f4	            0x89f5	                            mov ebp, esi	      1111	vtls.c	FUNCTION_56
0x40001f6	      0xbf00000000	                              mov edi, 0	      1112	vtls.c	FUNCTION_56	IF_1	CALL_1
0x40001fb	      0xe87cfeffff	                  call sym.multissl_init	      1112	vtls.c	FUNCTION_56	IF_1	CALL_1
0x4000200	      0xba02000000	                              mov edx, 2	      1113	vtls.c	FUNCTION_56	IF_1
0x4000205	            0x85c0	                           test eax, eax	      1112	vtls.c	FUNCTION_56	IF_1	CALL_1
0x4000207	            0x7511	                           jne 0x400021a	      1112	vtls.c	FUNCTION_56	IF_1	CALL_1
0x4000209	            0x89ee	                            mov esi, ebp	      1114	vtls.c	FUNCTION_56	CALL_2
0x400020b	          0x4889df	                            mov rdi, rbx	      1114	vtls.c	FUNCTION_56	CALL_2
0x400020e	    0x488b05000000	            mov rax, qword [0x04000215] 	      1114	vtls.c	FUNCTION_56	CALL_2
0x4000215	          0xff5060	                 call qword [rax + 0x60]	      1114	vtls.c	FUNCTION_56	CALL_2
0x4000218	            0x89c2	                            mov edx, eax	      1114	vtls.c	FUNCTION_56	CALL_2
0x400021a	            0x89d0	                            mov eax, edx	      1115	vtls.c	FUNCTION_56
0x400021c	        0x4883c408	                              add rsp, 8	      1115	vtls.c	FUNCTION_56
0x4000220	              0x5b	                                 pop rbx	      1115	vtls.c	FUNCTION_56
0x4000221	              0x5d	                                 pop rbp	      1115	vtls.c	FUNCTION_56
0x4000222	              0xc3	                                     ret	      1115	vtls.c	FUNCTION_56
