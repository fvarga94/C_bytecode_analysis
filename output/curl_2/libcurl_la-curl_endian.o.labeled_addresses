Curl_write64_le	ELSE,0:WHILE,0:FOR,0:functions,0:CALL,2:IF,0:SWITCH,0:DO,0	12
0x4000097	              0x55	                                push rbp	       120	curl_endian.c	FUNCTION_5
0x4000098	              0x53	                                push rbx	       120	curl_endian.c	FUNCTION_5
0x4000099	          0x4889fb	                            mov rbx, rdi	       120	curl_endian.c	FUNCTION_5
0x400009c	          0x4889f5	                            mov rbp, rsi	       120	curl_endian.c	FUNCTION_5
0x400009f	      0xe800000000	                          call 0x40000a4	       121	curl_endian.c	FUNCTION_5	CALL_1
0x40000a4	        0x488d7504	                      lea rsi, [rbp + 4]	       122	curl_endian.c	FUNCTION_5	CALL_2
0x40000a8	        0x48c1fb20	                           sar rbx, 0x20	       122	curl_endian.c	FUNCTION_5	CALL_2
0x40000ac	          0x4889df	                            mov rdi, rbx	       122	curl_endian.c	FUNCTION_5	CALL_2
0x40000af	      0xe800000000	                          call 0x40000b4	       122	curl_endian.c	FUNCTION_5	CALL_2
0x40000b4	              0x5b	                                 pop rbx	       123	curl_endian.c	FUNCTION_5
0x40000b5	              0x5d	                                 pop rbp	       123	curl_endian.c	FUNCTION_5
0x40000b6	              0xc3	                                     ret	       123	curl_endian.c	FUNCTION_5
Curl_write32_le	ELSE,0:WHILE,0:FOR,0:functions,0:CALL,0:IF,0:SWITCH,0:DO,0	10
0x400007b	          0x40883e	                     mov byte [rsi], dil	        97	curl_endian.c	FUNCTION_4
0x400007e	          0x4889f8	                            mov rax, rdi	        98	curl_endian.c	FUNCTION_4
0x4000081	           0xfb6c4	                           movzx eax, ah	        98	curl_endian.c	FUNCTION_4
0x4000084	          0x884601	                  mov byte [rsi + 1], al	        98	curl_endian.c	FUNCTION_4
0x4000087	            0x89f8	                            mov eax, edi	        99	curl_endian.c	FUNCTION_4
0x4000089	          0xc1e810	                           shr eax, 0x10	        99	curl_endian.c	FUNCTION_4
0x400008c	          0x884602	                  mov byte [rsi + 2], al	        99	curl_endian.c	FUNCTION_4
0x400008f	          0xc1ef18	                           shr edi, 0x18	       100	curl_endian.c	FUNCTION_4
0x4000092	        0x40887e03	                 mov byte [rsi + 3], dil	       100	curl_endian.c	FUNCTION_4
0x4000096	              0xc3	                                     ret	       100	curl_endian.c	FUNCTION_4
Curl_read16_le	ELSE,0:WHILE,0:FOR,0:functions,0:CALL,0:IF,0:SWITCH,0:DO,0	5
0x4000040	         0xfb64701	               movzx eax, byte [rdi + 1]	        42	curl_endian.c	FUNCTION_1
0x4000044	          0xc1e008	                              shl eax, 8	        42	curl_endian.c	FUNCTION_1
0x4000047	           0xfb617	                   movzx edx, byte [rdi]	        42	curl_endian.c	FUNCTION_1
0x400004a	             0x9d0	                             or eax, edx	        42	curl_endian.c	FUNCTION_1
0x400004c	              0xc3	                                     ret	        44	curl_endian.c	FUNCTION_1
Curl_read32_le	ELSE,0:WHILE,0:FOR,0:functions,0:CALL,0:IF,0:SWITCH,0:DO,0	12
0x400004d	         0xfb64701	               movzx eax, byte [rdi + 1]	        61	curl_endian.c	FUNCTION_2
0x4000051	          0xc1e008	                              shl eax, 8	        61	curl_endian.c	FUNCTION_2
0x4000054	            0x89c2	                            mov edx, eax	        61	curl_endian.c	FUNCTION_2
0x4000056	         0xfb64702	               movzx eax, byte [rdi + 2]	        61	curl_endian.c	FUNCTION_2
0x400005a	          0xc1e010	                           shl eax, 0x10	        61	curl_endian.c	FUNCTION_2
0x400005d	             0x9d0	                             or eax, edx	        61	curl_endian.c	FUNCTION_2
0x400005f	           0xfb617	                   movzx edx, byte [rdi]	        61	curl_endian.c	FUNCTION_2
0x4000062	             0x9d0	                             or eax, edx	        61	curl_endian.c	FUNCTION_2
0x4000064	         0xfb65703	               movzx edx, byte [rdi + 3]	        61	curl_endian.c	FUNCTION_2
0x4000068	          0xc1e218	                           shl edx, 0x18	        61	curl_endian.c	FUNCTION_2
0x400006b	             0x9d0	                             or eax, edx	        61	curl_endian.c	FUNCTION_2
0x400006d	              0xc3	                                     ret	        63	curl_endian.c	FUNCTION_2
Curl_read16_be	ELSE,0:WHILE,0:FOR,0:functions,0:CALL,0:IF,0:SWITCH,0:DO,0	5
0x400006e	           0xfb607	                   movzx eax, byte [rdi]	        80	curl_endian.c	FUNCTION_3
0x4000071	          0xc1e008	                              shl eax, 8	        80	curl_endian.c	FUNCTION_3
0x4000074	         0xfb65701	               movzx edx, byte [rdi + 1]	        80	curl_endian.c	FUNCTION_3
0x4000078	             0x9d0	                             or eax, edx	        80	curl_endian.c	FUNCTION_3
0x400007a	              0xc3	                                     ret	        82	curl_endian.c	FUNCTION_3
